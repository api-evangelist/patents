---
title: Resynchronizing globally unsynchronized multimedia streams
abstract: Media streams are provided from a server computer to client computers in a network system. The media streams are monitored and the streams becoming globally unsynchronized is detected. When the streams become unsynchronized, action is taken to resynchronize the streams, such as by altering the presentation timeline of at least one of the media streams.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06985966&OS=06985966&RS=06985966
owner: Microsoft Corporation
number: 06985966
owner_city: Redmond
owner_country: US
publication_date: 20000329
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","CONCLUSION"],"p":["This invention relates to networked client\/server systems and to methods of streaming and rendering multimedia content in such systems. More particularly, the invention relates to systems and methods of resynchronizing globally unsynchronized media streams.","Multimedia streaming\u2014the continuous delivery of synchronized media data like video, audio, text, and animation\u2014is a critical link in the digital multimedia revolution. Today, streamed media is primarily about video and audio, but a richer, broader digital media era is emerging with a profound and growing impact on the Internet and digital broadcasting.","Locally synchronized media (or just \u201csynchronized media\u201d) means multiple media objects that share a common timeline. Video and audio are examples of synchronized media\u2014each is a separate data stream with its own data structure, but the two data streams are played back in synchronization with each other. Virtually any media type can have a timeline. For example, an image object can change like an animated .gif file, text can change and move, and animation and digital effects can happen over time. This concept of synchronizing multiple media types is gaining greater meaning and currency with the emergence of more sophisticated media composition frameworks implied by MPEG-4, Dynamic HTML, and other media playback environments.","The term \u201cstreaming\u201d is used to indicate that the data representing the various media types is provided over a network to a client computer on a real-time, as-needed basis, rather than being pre-delivered in its entirety before playback. Thus, the client computer renders streaming data as it is received from a network server, rather than waiting for an entire \u201cfile\u201d to be delivered.","The same data can be simultaneously streamed to multiple client computers. In some situations, it is very important that this data be rendered by each of the multiple client computers at as close to the same time as possible (referred to as the data streams being \u201cglobally synchronized\u201d). For example, live financial broadcasts (e.g., stock quotes or other reports) should be made available to all recipients at as close to the same time as possible. If one computer is rendering the streamed data before another, each of the data streams being streamed to the two computers can be referred to as being \u201cout of global synchronization\u201d or \u201cglobally unsynchronized\u201d.","Rendering of data streams can become globally unsynchronized for a variety of different reasons. Bugs or other problems may exist in certain rendering devices (e.g., audio or video cards and\/or their corresponding drivers) that cause the data on one computer to be rendered either slower or faster than expected. An example is clock-rate differences in the audio cards of rendering computers. This results in the data being rendered slower on one computer than on another, and the streams becoming more and more out of synchronization as rendering continues. Additionally, many modern computer systems are designed for the CPU to execute multiple different programs or processes concurrently (e.g., multi-tasking). In such a system, the CPU may spend a significant amount of time executing another process at the computer, causing the execution of the instructions for rendering the data stream at that computer to lag behind the execution of the instructions for rendering the data stream at another computer.","The invention described below addresses these disadvantages of data streaming, providing a way to resynchronize globally unsynchronized streams.","In a networked client\/server system, the invention detects when media being streamed from a server(s) to multiple clients becomes globally unsynchronized. The invention then provides for resynchronization of the globally unsynchronized streams.","According to one aspect of the invention, the invention uses timeline alteration to resynchronize a media stream from a server computer to a client computer in a network system. The invention monitors the media stream and detects when the stream has become globally unsynchronized with a corresponding media stream being streamed to another client computer(s). When the stream has become globally unsynchronized, the invention alters the presentation timeline for the stream so that it is resynchronized with the other stream(s).","According to another aspect of the invention, the invention monitors how much data (in terms of presentation time) is buffered at a client computer for a data stream. If greater than a threshold amount of data is buffered, then the stream is deemed to be globally unsynchronized with corresponding data streams to other client computers.","According to another aspect of the invention, the timeline alteration occurs at the client computer. In accordance with this aspect, the client computer alters the timeline of a media stream(s) as necessary (either compressing or expanding the timeline) to resynchronize the media streams.","According to another aspect of the invention, the timeline alteration occurs at the server computer. In accordance with this aspect, either the client computer or the server computer monitors the media streams to determine when the streams have become globally unsynchronized. Once the streams are globally unsynchronized, the server computer selects a different one of multiple media streams corresponding to the media content being streamed to one of the client computers. This different media stream has a different timeline (either compressed or expanded) than the media stream that was previously being streamed to that client computer. This new media stream is then streamed to the client computer by the server computer in order to resynchronize the media streams.","Additionally, the timeline alteration and\/or the new stream selection can be performed seamlessly, resulting in a much improved user experience\u2014there are no perceived pauses or discontinuities of the multimedia streams.","General Network Structure",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1"],"b":["10","11","12"]},"Server computer  has access to streaming media content in the form of different composite media streams. Some composite media streams might be stored as files in a database or other file storage system . Other composite media streams  might be supplied to the server on a \u201clive\u201d basis from other data source components through dedicated communications channels or through the Internet itself.","The composite media streams can be provided to the network client computers  from the server computer . Alternatively, the network system may include multiple server computers , with different composite media streams being available from different server computers . Additionally, if the network system includes multiple server computers , different media streams of a composite media stream may be stored at different server computers .","Streaming Media","In this discussion, the term \u201ccomposite media stream\u201d describes synchronized streaming data that represents a segment of multimedia content. The composite media stream has a timeline that establishes the speed at which the content is rendered. The composite media stream can be rendered to produce a plurality of different types of user-perceivable media, including synchronized audio or sound, video graphics or motion pictures, animation, textual content, command script sequences, or other media types that convey time-varying information or content in a way that can be sensed and perceived by a human. A composite media stream comprises a plurality of individual media streams representing the multimedia content. Each of the individual media streams corresponds to and represents a different media type and each of the media streams can be rendered by a network client to produce a user-perceivable presentation using a particular presentation medium. The individual media streams have their own timelines, which are synchronized with each other so that the media streams can be rendered simultaneously for a coordinated multimedia presentation. The individual timelines define the timeline of the composite stream.","There are various standards for streaming media content and composite media streams. The \u201cAdvanced Streaming Format\u201d (ASF) is an example of such a standard, including both accepted versions of the standard and proposed standards for future adoption. ASF specifies the way in which multimedia content is stored, streamed, and presented by the tools, servers, and clients of various multimedia vendors. ASF provides benefits such as local and network playback, extensible media types, component download, scalable media types, prioritization of streams, multiple language support, environment independence, rich inter-stream relationships, and expandability. Further details about ASF are available from Microsoft Corporation of Redmond, Wash.","Regardless of the streaming format used, an individual data stream contains a sequence of digital data sets or units that are rendered individually, in sequence, to produce an image, sound, or some other stimuli that is perceived by a human to be continuously varying. For example, an audio data stream comprises a sequence of sample values that are converted to a pitch and volume to produce continuously varying sound. A video data stream comprises a sequence of digitally-specified graphics frames that are rendered in sequence to produce a moving picture.","Typically, the individual data units of a composite media stream are interleaved in a single sequence of data packets. Various types of data compression might be used within a particular data format to reduce communications bandwidth requirements.","The sequential data units (such as audio sample values or video frames) are associated with both delivery times and presentation times, relative to an arbitrary start time. The delivery time of a data unit indicates when the data unit should be delivered to a rendering client. The presentation time indicates when the value should be actually rendered. Normally, the delivery time of a data unit precedes its presentation time.","The presentation times determine the actual speed of playback. For data streams representing actual events or performances, the presentation times correspond to the relative times at which the data samples were actually recorded. The presentation times of the various different individual data streams are consistent with each other so that the streams remain coordinated and synchronized during playback.","Exemplary Computer Environment","In the discussion below, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more conventional personal computers. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. In a distributed computer environment, program modules may be located in both local and remote memory storage devices.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["20","20","10","11"]},"Computer  includes one or more processors or processing units , a system memory , and a system bus  that couples various system components including the system memory  to processors .","The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM . Computer  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from and writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by an SCSI interface  or some other appropriate interface. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, random access memories (RAMs) read only memories (ROM), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to the processing unit  through an interface  that is coupled to the system bus. A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown) such as speakers and printers.","Computer  operates in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet. In the described embodiment of the invention, remote computer  executes an Internet Web browser program such as the \u201cInternet Explorer\u201d Web browser manufactured and distributed by Microsoft Corporation of Redmond, Wash.","When used in a LAN networking environment, computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via a serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Generally, the data processors of computer  are programmed by means of instructions stored at different times in the various computer-readable storage media of the computer. Programs and operating systems are typically distributed, for example, on floppy disks or CD-ROMs. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. The invention described herein includes these and other various types of computer-readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described below. Furthermore, certain sub-components of the computer may be programmed to perform the functions and steps described below. The invention includes such sub-components when they are programmed as described. In addition, the invention described herein includes data structures, described below, as embodied on various types of memory media.","For purposes of illustration, programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Time-Scale Modification","As shown in , a network system in accordance with the invention includes a network server  from which one or more composite media streams are available. In the described embodiment of the invention, the media streams are stored as files on some type of data storage device accessible by the server.","The system also includes network clients . Generally, the network clients are responsive to user input to select or request identified composite media streams. In response to a request for a composite media stream, server  streams the requested composite media stream to the requesting network client in accordance with some known format such as ASF. The client renders the data streams to produce the multimedia content.","Additionally, a network client may also accept a speed designation or playback speed from a human user. The speed designation might be a speed factor relative to the original or default playback speed of the selected multimedia stream. For example, a speed factor of 1.2 indicates that the composite media stream is to be rendered at 1.2 times its original or default speed, thereby achieving time compression. A speed factor of 0.8 indicates that the composite media stream is to be rendered at 0.8 times its original or default speed, thereby achieving time expansion.","In response to the speed or playback designation from the user, the client requests a composite media stream from the server, indicating the desired type, level, or degree of timeline alteration. A plurality of composite streams are available at the server, corresponding to different possible timeline alterations. In response to the request from the client, the server begins streaming a composite stream that has already had its timeline altered in accordance with the speed designation. Alternatively, the server may not include multiple composite streams for the different possible timeline alterations, in which case the client performs the timeline alteration (although it should be noted that the server would then need to speed up or slow down as appropriate its delivery of the media stream to the client when the client alters the timeline).","With some types of media, such as video streams, timeline alteration involves either omitting selected frames or modifying the presentation times of the individual data units or video frames. In other cases, such as with audio streams, the time-modification is more difficult\u2014simply changing the presentation times would alter the pitch of the original audio and make it unintelligible. Accordingly, some type of audio processing technique is used to time-compress or time-expand audio streams, while maintaining the original pitch of the audio\u2014thereby maintaining the intelligibility of the audio.","There are various known methods of audio time modification, commonly referred to as \u201ctime-scale-modification,\u201d most of which concentrate on removing redundant information from the speech signal. In a method referred to as sampling, short segments are dropped from the speech signal at regular intervals. Cross fading or smoothing between adjacent segments improves the resulting sound quality.","Another method, referred to as synchronized overlap add method (SOLA or OLA), consists of shifting the beginning of a new speech segment over the end of the preceding segment to find the point of highest cross-correlation (i.e., maximum similarity). The overlapping frames are averaged, or smoothed together, as in the sampling method.","Sampling with dichotic presentation is a variant of the sampling method that takes advantage of the auditory system's ability to integrate information from both ears. It improves on the sampling method by playing the standard sampled signal to one ear and the \u201cdiscarded\u201d material to the other ear. Intelligibility and compression increase under this dichotic presentation condition when compared with standard presentation techniques.","More information regarding audio time modification is given in an article that appeared in the March, 1997, issue of \u201cACM Transactions on Computer-Human Interaction\u201d (Volume 4, Number 1, pages 3\u201338) (1997). For purposes of this disclosure, it can be assumed that audio time modification involves some combination of changing individual data stream samples, dropping certain samples, and adjusting presentation times of any samples that are actually rendered.","The methods mentioned above are considered \u201clinear\u201d because all portions of the speech signal are compressed or expanded uniformly. That is, timeline alteration is applied consistently in time.","In addition, or alternatively, the speed designation might indicate one of a plurality of different types or levels of non-linear timeline compression. As an example, such levels might include a type of non-linear timeline compression that removes audio pauses from a spoken presentation or periods of relative inactivity from a video presentation. Another level, perhaps referred to as \u201csummary\u201d compression, might retain only short periods of a presentation that are marked by high energy levels in either audio or video portions of the content. With non-linear techniques some segments of an individual or composite stream might be more highly expanded or compressed (in time) than other segments. Furthermore, the respective individual streams of a composite stream might be expanded or compressed by different amounts relative to each other.","Client-Based Resynchronization",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 3","FIG. 3"],"b":["11","10","101","11","10","11"]},"Each media stream has a timeline, and the timelines of the individual streams are synchronized with each other so that the streams can be rendered in combination to produce coordinated multimedia content at the network client . The original timelines correspond to the original recording or rendition of the multimedia material, so that rendering the streams according to their timelines results in presentation speeds that closely match the speed of the original event or performance. In the case of audio streams, the timelines preserve the original speed and pitch of the original audio content.","The client computer has a demultiplexer component  that receives the composite media stream and that separates out the individual media streams from the composite format in which the data is streamed (such as ASF). The separate media streams are temporarily buffered in buffers  and , from which an audio stream  and a video media stream  are provided, respectively. The individual media streams are sent to and received by respective decoders  and  that perform in accordance with the particular data format being employed. For example, the decoders might perform data decompression.","The decoded data streams are then sent to and received by time modification components: an audio timeline modification component  and a video timeline modification component . These components receive input from a human operator in the form of a speed designation as described above. The timeline modification components change the timelines of the received media streams in accordance with the user speed designation to achieve either time compression or time expansion. With some types of media, such as video streams, this involves either omitting selected frames or modifying the presentation times of the individual data units or video frames. In other cases, such as with audio streams, some type of audio processing technique as the SOLA technique described above is used to time-compress or time-expand audio streams, while maintaining the original pitch of the audio and to also retain the intelligibility of the audio.","The timeline modification components  and  produce individual media streams that are provided to and received by respective renderers  and . The rendering components render the streams in accordance with their modified timelines, as the streams continue to be streamed from the network server. In alternative embodiments of the invention, timeline modification components  and  might be eliminated and their functions performed by decoders  and .","The demultiplexer component  also has a synchronizer , coupled to the timeline modification components  and  and the renderers  and  as illustrated, that monitors the media streams to ensure that they remain synchronized with the corresponding streams being delivered to other client computers (that is, remain globally synchronized). When synchronizer  detects that a media stream(s) being rendered at client  is out of synchronization with a corresponding media stream(s) being rendered at another client computer, the time modification performed by the timeline modification component  or  corresponding to at least one of the streams is altered to resynchronize the stream(s) with its counterpart(s) being delivered to the other client computer.","Note that the speed designation, provided by the user and possibly modified by synchronizer , dictates the rate at which the network client consumes the composite data stream. Because of this, the client communicates the speed designation to the network server when requesting a particular composite media stream. The server responds by streaming the composite media stream at a rate that depends on or is proportional to the speed designation provided by the user as modified by synchronizer . For example, for a speed factor of 2.0, the client consumes data at twice the normal rate. Accordingly, the server streams the composite media stream at twice its normal rate to meet the demands of the client.","In the described embodiment, the user and the synchronizer  are allowed to change the speed designation during rendering of the composite media stream. In some cases, however, it may not be possible to change the playback speed without interrupting the playback momentarily. If this is the case, playback resumes as soon as possible, beginning at a point that shortly precedes the point at which playback was discontinued. Thus, there is some overlap in the presentation\u2014when the presentation resumes, the overlap provides context for the new content that follows.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 4"},"A step  comprises monitoring the global synchronization of the media streams. According to one implementation, this monitoring comprises the synchronizer  monitoring how much presentation time (e.g., in seconds or milliseconds) of data is buffered (e.g., in buffers  and ) waiting to be decoded and rendered. Alternatively, the monitoring may comprise the synchronizer  monitoring the current presentation times of the devices rendering the media streams (e.g., renderers  and  of ). These current presentation times are available from the renderers  and .","A step  comprises the synchronizer  checking whether the media streams are out of global synchronization with corresponding media streams being delivered to another client computer beyond a particular threshold value. According to one implementation, this checking comprises determining the time required to present all of the data that is stored in buffers  and  and checking whether the required time exceeds a threshold value (e.g., 5 seconds worth of data). The monitoring step  and checking step  are repeated until the media stream becomes globally unsynchronized beyond the threshold value. Alternatively, control information may be received from server  of  or some other computer notifying client  what the current presentation times of the devices rendering the media streams should be. Synchronizer  then determines whether the difference between the actual presentation times and what the presentation times should be exceeds the threshold value.","A step  comprises the synchronizer  determining an effective time modification factor. The time modification factor identifies the alteration that will be made to the timeline of a globally unsynchronized media stream to resynchronize the media stream. The time modification factor can be determined in any of a wide variety of manners. The time modification factor could be a specific value (e.g., 20 milliseconds per second), or a relative value (e.g., 10 percent). The actual value (whether specific or relative) can vary, balancing the intelligibility of the stream received by the user against the desire for quick resynchronization. It is to be appreciated that the time modification factor determined in step  can be a positive value (e.g., to speed up the presentation of the media stream) or a negative value (e.g., to slow down the presentation of the media stream).","A step  comprises altering the presentation timeline of one of the media streams according to the time modification factor determined in step . In the illustrated embodiment of , the synchronizer  modifies the time modification factor used by the respective one of time modification components  and  by adding the modification factor determined in step  to the speed factor currently being used for the media stream. Synchronizer  resynchronizes the media streams by using the time modification factor to slow down (or speed up) the rendering of the media streams by renderers  and .","A step  comprises monitoring the global synchronization of the media stream, while a step  comprises checking whether the media stream is back in global synchronization (that is, whether the media stream has been globally resynchronized). Given the modification of the presentation timeline in step , eventually the media stream should be globally resynchronized.","According to one implementation, global resynchronization is determined according to the same threshold value used to determine becoming globally unsynchronized in step . For example, if the presentation times no longer differ by greater than the threshold value used in step  (or the presentation time of buffered data no longer exceeds the threshold value), then the data is resynchronized. According to an alternate embodiment, this \u201cresynchronized threshold value\u201d in step  is different than the \u201cunsynchronized threshold value\u201d in step . By way of example, the threshold value in step  may be 5 seconds, whereas the resynchronization threshold value may be 3 seconds. By making these resynchronized and unsynchronized threshold values different, the system can avoid continually switching back and forth between being globally synchronized and globally unsynchronized.","A step  comprises determining a new time modification factor once the media stream is globally resynchronized. According to one implementation, this new time modification factor is the difference between the current timeline speed factor and the speed factor of the timeline prior to its alteration in step . Alternatively, the modification factor in step  may be different to try to correct the problem causing the stream to become globally unsynchronized. For example, if the modification factor in step  was +10 milliseconds per second, the modification factor in step  may be \u22128 milliseconds per second.","A step  comprises modifying the present timeline according to the new modification factor. The process then returns to step , to continue monitoring the global synchronization.","According to an alternate embodiment of the invention, steps  through  are optional and need not be included. In this embodiment, after the timeline is modified in step , the process returns to step  to continue monitoring the global synchronization.","Alternatively, other solutions which do not require timeline modification may also be used to resynchronize the media streams. According to one such alternative implementation, one of the streams can \u201cjump ahead\u201d to catch up to the other stream. For example, if synchronizer  of  detects that the media stream is being rendered ahead of a corresponding stream at other client systems (e.g., out of global synchronization beyond the threshold amount in step ), then synchronizer  can have the stream \u201cjump ahead\u201d to a later presentation time. For example, portions of the data (e.g., two or three seconds worth of data) can be deleted from buffers  and . The amount of this \u201cjump\u201d can be a fixed amount (e.g., two or three seconds), or alternatively a variable amount (e.g., 40% of the data in the buffers  and ). After such a jump, the process returns to step  to continue to monitor the global synchronization and determine whether the media streams are out of global synchronization.","According to another alternative implementation, one of the streams is stopped temporarily. For example, if synchronizer  detects that the media stream is being rendered behind a corresponding stream at other client systems (e.g., out of global synchronization beyond the threshold amount in step ), then synchronizer  can temporarily pause the stream. For example, synchronizer  can communicate with buffers  and  to stop providing audio and video data to decoders  and  for an amount of time (e.g., two or three seconds). The duration of this pause caused by not providing data to decoders  and  can be a fixed amount (e.g., two or three seconds), or alternatively a variable amount (e.g., 30% of the time that would be required to render all of the data currently in buffers  and ). After such a pause, the process returns to step  to continue to monitor the global synchronization and determine whether the media streams are out of global synchronization.","Server-Based Resynchronization","In various embodiments of the invention, the global resynchronizing of a media stream(s) can be performed in the client as described above, in the server, or in both the client and server. In the network environment, it is often desirable to avoid performing any significant timeline modification in the server. Otherwise, the server could quickly become overloaded with requests from multiple clients.","However, in some cases it may be desirable to store multiple versions of media streams at a server and to select particular versions of the media streams depending on the timeline requirements of the client (based both on requirements designated by the user and resynchronization requirements). One advantage of this method is that it can require comparatively less communications bandwidth between the server and client.","As a general example, a server might store a plurality of media streams that are live modifications of a \u201clive\u201d stream having timelines modified by different factors. When a client requests a composite media stream, the server selects the version of the media stream whose timeline most closely accords with the speed designation set by the user. If the timeline does not exactly match the speed designation, the client can perform further timeline modification.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 5","FIG. 5"],"b":["300","301","302"]},"The various individual data streams have timelines that are modified by different degrees. The speed factors are indicated in . In this embodiment, the audio and corresponding video streams are organized as pairs, each pair forming a composite media stream having a timeline that has been modified by a factor of 0.5, 1.0, or 1.5.","When a client  requests multimedia content from server , the client identifies both the content and the speed factor. In response, a selector component  of the server selects the audio and video streams that have timelines most closely approximating the identified speed factor, and combines those individual media streams to form the composite media stream. The resulting composite media stream is then sent to the client. When the timeline is accelerated, this saves bandwidth in comparison to sending an unaltered composite media stream having a higher streaming rate to meet the accelerated consumption demands of the client.","When the user changes the playback speed or a media stream needs to be globally resynchronized, the client requests a new media stream that most closely corresponds to the requested or resynchronization speed. Playback is resumed in the new stream at the same point (relative to the subject content) at which it was discontinued in the old stream. Thus, the new stream is initiated at some intermediate point rather than at the beginning. When the streams are linearly altered, it is not difficult to determine the appropriate presentation time in the new stream. Specifically, the point in the new timeline equals oldtime(oldfactor\/newfactor), where oldtime is the presentation time in the first media stream at which the speed change is to occur, oldfactor is the playback speed or factor of the old media stream, and newfactor is the playback speed or factor of the new media stream.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 6"},"A step  comprises the server system receiving an \u201cout of global synchronization\u201d indication from a client system. In this embodiment, the client system monitors the global synchronization of the media streams and determines when the streams are globally unsynchronized, analogous to steps  and  of . When the stream becomes globally unsynchronized, an \u201cout of global synchronization\u201d indication (e.g., a message) is sent to the server system. Alternatively, synchronization information (e.g., the current presentation times of the media streams) could be provided to the server system and the server system could determine when the media stream becomes globally unsynchronized.","A step  comprises determining an effective time modification factor. This time modification factor is determined analogous to step  above.","A step  comprises selecting a new version of one of the media streams based on the effective time modification factor determined in step . The new version could be of either the slower or the faster (or both) stream, analogous to step  above. One of the multiple versions stored at the server is selected for presentation. According to one implementation, the effective time modification factor is compared to the time modification factors of each of the multiple streams stored at the server and the version of the media stream having the factor closest to the determined effective time modification factor is selected for delivery to the client system.","A step  comprises checking whether a \u201cglobally resynchronized\u201d indication is received. The resynchronized indication (e.g., a message) is sent by the client system when the media stream has been globally resynchronized. Alternatively, synchronization information (e.g., the current presentation times of each of the media streams) could be provided to the server and the server could determine when the media stream has been globally resynchronized.","A step  comprises selecting a new version of the media stream to be presented to the client system. According to one implementation, the new version selected in step  is the same version as was being provided prior to the new selection in step .","The process then ends, until another \u201cout of global synchronization\u201d indication is received.","According to an alternate embodiment of the invention, steps  and  are optional and need not be included. In this embodiment, after the new version of the media stream is selected in step , the process ends, until another \u201cout of global synchronization\u201d indication is received.","Alternatively, other solutions which do not require timeline modification may also be used to resynchronize the media streams. For example, server  of  may \u201cjump ahead\u201d in a stream or pause a stream, analogous to the discussions above regarding client  of , to globally resynchronize the streams.","In the discussions above, regarding both client-based and server-based resynchronization, the invention is described as working with a composite media stream. It should be noted that alternate embodiments of the invention can be used with a single media stream being provided to a client rather than a composite of multiple media streams.","Also in the discussions above, regarding both client-based and server-based resynchronization, a single time modification factor to be used to resynchronize the globally unsynchronized media stream. Alternatively, multiple different time modifications factors may be used to resynchronize the stream, such as by starting with a more aggressive factor (e.g., a larger value) to more quickly resynchronize, and then changing to a less aggressive factor (e.g., a smaller value) as the stream gets closer to resynchronization.","Also in the discussions above, regarding both client-based and server-based resynchronization, timeline modification is used to alter the timeline of one of the media streams. Alternatively, multiple different media streams can be altered simultaneously. For example if a first media stream to a first client lags behind and becomes out of global synchronization with a second media stream to a second client, then timeline alteration could be used to both speed up the first media stream and slow down the second media stream.","The invention described above provides resynchronization of globally unsynchronized media streams. The described techniques monitor the synchronization of media streams being streamed to different computers and detect when the streams become globally unsynchronized, and advantageously resynchronizes the streams. In one implementation, the presentation timeline of at least one of the streams is then modified to either increase or decrease the speed of the rendering of the media stream, as appropriate. This timeline modification allows the stream to become resynchronized in a manner that maintains a high-quality user experience.","Although the invention has been described in language specific to structural features and\/or methodological steps, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or steps described. Rather, the specific features and steps are disclosed as preferred forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
