---
title: Plug-in model
abstract: Method and system for extending and/or modifying functionality of a platform for a product, such as a mobile terminal for a wireless telecommunications system. The system includes a platform domain having a software services component for providing functionality, and an interface component having at least one interface for providing access to the software services component for enabling application software to be installed, loaded and run in said platform via the at least one interface. The system also includes plug-in software for use together with the application software for extending and/or modifying the functionality of the software services component of the platform domain via the at least one interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07584471&OS=07584471&RS=07584471
owner: Telefonaktiebolaget L M Ericsson (Publ)
number: 07584471
owner_city: Stockholm
owner_country: SE
publication_date: 20030919
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE EXEMPLARY EMBODIMENTS OF THE INVENTION"],"p":["This application claims the benefit of priority from and incorporates by reference the entire disclosure of co-pending U.S. Provisional Patent Application Ser. No. 60\/412,902, filed Sep. 23, 2002, currently expired. This application claims the benefit of priority from and incorporates by reference the entire disclosure of co-pending U.S. Provisional Patent Application Ser. No. 60\/412,901, filed Sep. 23, 2002, currently expired. This application claims the benefit of priority from and incorporates by reference the entire disclosure of co-pending U.S. Provisional Patent Application Ser. No. 60\/412,769, filed Sep. 23, 2002, currently expired. This application claims the benefit of priority from and incorporates by reference the entire disclosure of co-pending U.S. Provisional Patent Application Ser. No. 60\/412,756 , filed Sep. 23, 2002, currently expired. This patent application incorporates by reference the entire disclosure of U.S. patent application Ser. No. 10\/359,772, which was filed on Feb. 7, 2003, issued on Aug. 19, 2008 as U.S. Pat. No. 7,415,270. This patent application incorporates by reference the entire disclosure of U.S. patent application Ser. No. 10\/359,835, which was filed on Feb. 7, 2003, issue pending. This patent application incorporates by reference the entire disclosure of U.S. patent application Ser. No. 10\/359,911, which was filed on Feb. 7, 2003, currently pending.","1. Technical Field of the Invention","The present invention relates generally to the field of wireless telecommunications; more particularly, the present invention relates to a method and system for extending and modifying the functionality of a platform for a mobile terminal for a wireless telecommunications system, without modifying the base functionality.","2. Description of Related Art","A platform that provides a high degree of configurability is an attractive option for many manufacturers of end user mobile products and other platform customers. Configurability is especially important with respect to high level functionality in that some customers desire such functionality, and often prefer to develop such functionality in-house, while others have no interest in including such functionality in their products.","A mobile terminal platform that provides a high degree of configurability, however, introduces a number of difficulties for the provider of the platform. For example, the provider must support any high-level functionality that is added to the platform and support the numerous configurations that different customers might require, such as by providing customers with platform documentation that is specific for their particular configuration. Also, since not all configurations of a platform can be expected to operate properly, it becomes necessary for the platform provider to test each specific configuration to ensure that the added functionality works in a manner desired by the customer. In addition, in many cases, the added functionality will be dependent on and have logical dependencies towards other functionality that is provided in the platform, such that if the latter functionality is removed, the added functionality may no longer operate properly.","Furthermore, it is frequently the case that a platform provider wishes to maintain details of its platform proprietary. To achieve this, the platform provider should not expose the code base directly to a customer or to any other party. Instead, it is preferable that a customer views the platform simply as a \u201cblack box\u201d having a defined interface and defined behavior.","A platform having a high degree of configurability, however, can present difficulties with respect to maintaining details of the platform proprietary. For example, it is a common practice for a platform provider to contract a third party to develop high level add-ons to a platform. The platform provider might develop applications for the platform that are delivered with the platform. A typical example where this might occur is with respect to product-specific functionality such as functionality that controls the look and feel of the user interface, which is often implemented as a high-level graphics library. Since the look and feel is brand-specific, this functionality will differ among products and brands.","If a third-party is contracted to develop high-level add-ons, however, that party will require access to the platform code base in order to develop the functionality, forcing the provider to reveal proprietary information to the third party.","In addition, after a platform has been configured and delivered to a customer, the functionality of the platform will have been tested, stabilized and fixed. The customer, however, may have additional requirements with respect to modifying, extending and configuring the platform that are precluded by the design of the delivered platform. For example, a customer might wish to modify various parts of the provided functionality to tailor the platform to particular needs or to add more powerful functionality than is included in a delivered platform, i.e., functionality that the platform provider considers to be outside the scope of the platform domain. In addition, a customer might want to configure the platform functionality on a more detailed level than is offered by the platform provider in the basic platform assembly configuration, or to perform some form of last minute configuration to add or remove functionality to the platform based on what an end user is prepared to pay.","In general, current platforms for mobile terminals and other products do not provide an effective procedure by which the functionality of the platform can be extended, removed, or otherwise changed.","The present invention provides a method and system by which the functionality of a platform for a mobile terminal for a wireless telecommunications system or for another product can be extended or otherwise changed. A system for extending and\/or modifying functionality of a platform for a product includes a platform domain having a software services component for providing functionality and an interface component having at least one interface for providing access to the functionality of the software services component for enabling application domain software to be installed, loaded and run in said platform via said at least one interface. The system also includes plug-in software for use by the application software for extending and\/or modifying the functionality of the software services component of the platform domain via the at least one interface.","A method for extending and\/or modifying functionality of a platform for a product includes providing a platform domain having a software services component for providing functionality, and an interface component having at least one interface for providing access to the functionality of the software services component for enabling application domain software to be installed, loaded and run in said platform via said at least one interface. The method also includes providing plug-in software together with the application software for extending and\/or modifying the functionality of the software services component of the platform domain via the at least one interface. The method also includes extending and\/or modifying the functionality of the software services component via said plug-in software.","Further advantages and specific details of the present invention will become apparent hereinafter from the detailed description given below in conjunction with the following drawings.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1","FIG. 1"],"b":["10","12","14","10","16","12","22","24","26","22","26","10","30","38"]},"In the exemplary system  illustrated in , the hardware component  includes a set of hardware blocks - that are associated with and controlled by their respective functional software stacks -. The interface component  includes a middleware services layer that includes at least one application programming interface (API) for installing, loading and running one or more applications  in mobile terminal platform assembly , that isolates the mobile terminal platform assembly  from the applications  using the mobile terminal platform assembly , and that provides various other services for the applications .","Mobile terminal platform assembly  of platform system  is adapted to be designed, implemented (assembled) and tested as a complete, enclosed unit separate from the application software  (the term \u201capplication software\u201d as used herein can be any software that provides the functionality that users may wish to have available). Users can, accordingly, develop or otherwise acquire their own application software and add that software to the mobile terminal platform assembly  at a later time in order to complete platform system . Mobile terminal platform assembly  can, accordingly, be sold or otherwise transferred to a plurality of different users each of which can complete platform system  by installing, loading and running their own application software in the assembly in order to satisfy their own particular requirements for the platform system.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["12","12","50","50","30","38","22","60","68","12","10"]},"The software incorporated in mobile terminal platform assembly  is preferably arranged in such a manner as to make the software organization easy to understand so that it can be more easily designed and more easily upgraded or otherwise modified.  is a block diagram that schematically illustrates the software architecture of mobile terminal platform assembly  to further assist in explaining principles of the present invention.","As shown in , software services component , in addition to being organized into a plurality of vertical, functional software stacks as described above, is also arranged to define a plurality of horizontal layers such that the software of the middleware services layer and the software of the software services component  together define a layered architecture, generally designated by reference number , in which the layers are arranged in descending order from a higher level service layer to a lower level service layer.","The software architecture differs from the standard ISO\/OSI (ISO Open Systems Interconnection) model in that it includes a plurality of horizontally partitioned functional software units that complement a plurality of vertically partitioned software layers. The horizontal partitioning contributes significantly to the creation of independent modular (service) components.","The highest layer of the layered architecture is the middleware services layer, which is part of the interface component . The layers of the software services component  include an application service layer  to provide application services, a platform services layer  to provide platform specific services for applications, a platform protocol layer  to provide session protocols and application specific protocols, a transport layer  to provide audio access\/control, datacom transport protocols, messaging transport protocols and the like, a data access layer  to provide external data IF access, structured storage services and other low level platform support services, a logical drivers layer  and a physical drivers layer  encapsulating hardware dependencies. In addition, software services component  includes basic system services layers  that provide general services that are needed by the platform assembly .","The bottom two layers  and  constitute Hardware Abstraction Layers (HAL) which isolate the dependencies between the software and the hardware. Only the physical drivers layer is concerned with the details of the hardware (i.e., which registers in the ASIC hardware are addressed). The logical drivers layer  provides a logical mapping to the hardware, i.e., this layer provides a bridge between the hardware and software parts of the mobile terminal platform assembly.","The software itself is organized into a plurality of software modules, modules , ,  being specifically indicated in . In software services component , a single module can reside in only one vertical functional stack and in only one horizontal layer within that stack. Each layer can contain from one to many modules, and all the modules in a particular layer in a particular stack have the same level of abstraction. Communication among the various modules is accomplished via a Software Back Plane (SwBP)  subject to a set of basic rules for software module-to-module access. These rules can be summarized as follows:\n\n","There is no hard coupling between the various modules and the interfaces in the SwBP . As a result, the modules and\/or the implementation of the interfaces can be freely changed without any impact on the clients to the interfaces. This capability permits individual modules to be added, removed or changed without affecting other modules in the platform assembly. Further details of the layered architecture, including the SwBP software structure that enables the internal communication between modules within the mobile terminal platform assembly are described in commonly assigned, U.S. patent application Ser. No. 10\/359,911, the disclosure of which is hereby incorporated by reference.","Middleware services layer functions to provide a well-defined interface between the software in the mobile terminal platform assembly  and the application software  to be installed, loaded and run in the platform assembly ; and, in addition, encapsulates the mobile terminal platform assembly  and isolates the assembly  from applications via the middleware services layer, and provides various other services for the applications .",{"@attributes":{"id":"p-0036","num":"0040"},"figref":["FIG. 4A","FIG. 4A"],"b":["26","202","204","206","208"]},"Through the APIs in the middleware services layer, the mobile terminal platform assembly  supports a plurality of application environments. In the exemplary embodiment of , middleware services layer supports environments for native applications (applications that are compiled to run with a particular processor and its set of instructions) and for non-native applications such as Java J2ME CLDC\/MIDP (Java 2 Micro Edition Connected Limited Device Configuration\/Mobile Information Device Profile) applications. Each execution environment has its own characteristics and is defined as:\n\n","By providing multiple application environment alternatives, a wide range of products with varying demands such as cost, ease of use, time to market, functionality set, size, portability, etc. is facilitated. Each of the API domains includes a plurality of software modules, and details of various of the domains are described in commonly assigned U.S. patent application Ser. No. 10\/359,772, now issued as U.S. Pat. No. 7,415,270, the disclosure of which is hereby incorporated by reference.",{"@attributes":{"id":"p-0039","num":"0047"},"figref":"FIG. 4B","b":["500","501","510","512","500","514","501","510","514","512","510","514","508","506","510","512","514","506","504","504","512","514","514"]},{"@attributes":{"id":"p-0040","num":"0048"},"figref":"FIG. 5","b":["206","206","230","232","234","236","238"]},"The Native Environment Management module  has the responsibility of controlling native applications in platform system . It is the recipient of the control commands concerning native applications, and keeps track of native applications that are currently running in the system.","The Native Application Core module  administers and takes care of the threading and message-handling complexities that the applications would otherwise have to handle themselves. The NAC module  also serves the purpose of achieving OS independence by simplifying the implementation details of the OS for relieving applications from run-time complexities, including message routing\/filtering and message-related resource handling. Yet another important responsibility of the Native Application Core is to simplify the details of the start-up and shutdown phase of an application and in the handling of messages.","The Middleware Support Services module  provides services to the OPA domain that are common for the different handlers or that need to be centralized, e.g., object management and resource supervision.","The Native Extension plug-in module(s)  provides a flexible extension possibility for the provider of platform assembly . The plug-in, in effect extends the functionality of the platform assembly by providing additional interfaces and additional services to the application software  written by an end user equipment manufacturer or another party.","While  is a logical view that illustrates the plug-in as a module of the Open Platform API (OPA) domain ,  is a logical view illustrating a more general representation of an Open Platform API (OPA) domain  having a plurality of Open Platform API modules , ,  and , and a plug-in module  according to another exemplary embodiment of the present invention. In this logical view, plug-in  is also shown as being incorporated in Open Platform API  because, from the viewpoint of a customer, plug-in  will behave and appear as part of the Open Platform API in the middleware services component  of the platform assembly. In actuality, however, plug-in  includes a stand-alone entity running in the application software domain  on top of platform assembly , and that uses the functionality that is provided by the platform assembly. Thus, from an implementation point of view, it is located above the platform assembly, using the Open Platform API to access the platform assembly functionality as illustrated in the implementation view of ","The plug-in supports all of the application software mechanisms supported by the platform assembly, and complies with the application model defined in the platform assembly. In other words, the plug-in will adhere to the same paradigm(s) as the provided OPA services exported by the Open Platform API. These include, but are not limited to:\n\n","With respect to the next-to-last point mentioned above, message model compliance has a major effect on the behavior of the plug-in and on how the plug-in is constructed. In particular, the platform assembly message model offers dual modes for the application software for the purpose of receiving results from asynchronous service requests and resulting from event subscriptions. The dual modes imply that the result is received, either via a callback mechanism (callback mode), or via a message queue (full message mode). This provides a flexibility and freedom for the platform assembly customer software developer to structure different applications according to different message models, depending on the nature of the application functionality.","The application determines the message mode in which the application will receive an asynchronous result by executing, or not executing, a return statement. If the application decides to receive the result in callback mode, the application returns execution control after having completed an asynchronous service request. If the decision is to go for the full message mode, the application does not return execution control after the service request, but rather polls the message queue and invoke the message-handling code manually by itself. Another benefit of this solution is that an application may actually change between the callback and full message mode at any point in runtime, in case this is needed or desirable for a certain problem or context.","The plug-in model complies with the dual modes of the message model, and will provide this flexibility transparently to the customer's application software. The sequence for accomplishing this compliance, according to an exemplary embodiment of the present invention, is schematically illustrated in , which schematically illustrates the sequence  for the callback mode, and in , which schematically illustrates the sequence  for the full message mode. The sequence charts present the interaction between the Open Platform API (OPA) , a Plug-In (or Utility)  and the Application  requesting a service.\n\n","With the plug-in model according to principles of the present invention, the issues described above with respect to changing the functionality of a mobile terminal platform are overcome. For example, by using OPA plug-ins for the implementation of higher level functionality, the platform provider can offer a slimmer and more stable platform, which still includes the basic and\/or default platform functionality that is considered to cover the needs of end user products. This brings the administration of the higher level functionality closer to the application domain and to manufacturers of end-user products and other customers, since the non-standard add-on functionality is provided as a plug-in, which can be easily added\/removed depending on the specific product concerned.","In addition, with embodiments of the present invention, third party developers are able to implement add-on functionality as one or several plug-ins, without it being necessary to reveal proprietary information relating to the platform code base to third party developers or others. In particular, since the plug-in is an entity of the application domain software, a third party developer can choose to use only the default\/basic platform API.","By exploiting the plug-in technique as described above, a provider of the platform assembly can choose to expose only a controlled and dedicated fraction of the code base to a customer, i.e., one or several of the stand alone plug-ins. The provider may, for example, choose to provide the plug-in as source code to the customer, who can then change and modify the code of the plug-in in order to tailor the functionality and behavior of the plug-in.","By supplying a plurality of plug-ins with a higher level of functionality, it is easy for an end user product manufacturer or other party to extend the functionality of the platform assembly. It is also possible for a platform provider to deliver manufacturer-specific extensions to the platform assembly that is not considered to be part of the basic functionality offering of the platform assembly.","By supplying a plurality of plug-ins with extended functionality, it is also easy to perform a \u201clast minute\u201d configuration of the platform assembly, e.g., to tailor the platform assembly to different needs arising from different products, or to customize the end-user product at the time of purchase. With embodiments of the present invention, it will be easy for end user manufacturers using the platform assembly to make late decisions about whether to use platform provider plug-ins or to develop functionality in-house.","As mentioned above, one example where a higher level functionality of a product platform might be desired is with respect to product-specific functionality such as functionality that controls the look and feel of a user interface. For mobile terminals and other specialized consumer products with advanced user interfaces, the look and feel of the user interface is an important key to differentiation and positioning of the products in the marketplace; and, consequently, is important to commercial success. It is, accordingly, desirable that a platform for mobile terminals and other products provide a great deal of freedom in defining the look and feel of the products.","The separation of a windowing system core from the definition of look and feel is a proven and widely-used concept. The X window system exhibits this, and there are various examples of how systems with very different look and feel can be built on top of the same windowing system using this type of architecture. On the other hand, the ability to alter the look and feel of a given implementation is limited.","Porting of a Java VM is traditionally done at a low level of UI support. The look and feel is, to a high degree, defined by the implementation of graphical objects in Java. The introduction of MIDP (Mobile Information Device Profile) suggests another approach, where graphical objects are only defined at an abstract level. The look and feel is defined by the underlying system on which the VM is executing. If look and feel conformance between Java applications and other applications, executing outside the Java VM, is to be achieved, the same set of graphical objects can be used for both. This is straightforward for a system with a defined look and feel.","A Java VM in a mobile device ideally relies on the platform on which it is running to provide UI support according to the MIDP specification. This means that for a mobile platform including a Java VM, the MIDP support should also be part of the platform. On the other hand, for a platform intended for highly profiled consumer products from different vendors, it is important to provide the highest possible level of control over look and feel. Clearly, the highest level of control is achieved through control of the definition of the graphical objects. These two conflicting requirements on the platform cannot be satisfied with the previously described approaches.","In accordance with a further exemplary embodiment of the present invention, however, a set of graphical objects and utilities are defined as one or more plug-ins in the Open Platform API (OPA). The interfaces to the one or more plug-ins have to be fixed and sufficient for MIDP support, but the implementation may be altered freely.","In accordance with principles of the invention, the implementation of high level graphical objects and utilities can be shared between native applications and execution environments like Java. At the same time, the platform customer's control of the appearance and behavior of the graphical user interface is very high.","While what has been described constitute exemplary embodiments of the invention, it should be understood that the invention can be varied in many ways without departing from the scope thereof. For example, although the present invention has been described primarily in connection with a particular mobile terminal platform assembly, it is not intended to so limit the invention as the invention may also be used in other platforms for mobile terminals and other products. Because the invention can be varied in many ways, it should be recognized that the invention should be limited only insofar as is required by the scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4A","FIGS. 1-3"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 7A and 7B"}]},"DETDESC":[{},{}]}
