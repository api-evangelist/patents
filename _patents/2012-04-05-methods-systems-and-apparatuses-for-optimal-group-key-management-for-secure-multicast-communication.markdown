---
title: Methods, systems, and apparatuses for optimal group key management for secure multicast communication
abstract: Apparatuses, systems, and methods for optimal group key (OGK) management that may achieve non-colluding and/or the storage-communication optimality are disclosed. In some embodiments, a group controller (GC) is responsible for key generation and distribution and the group data are encrypted by a group key. When joining the group, in some embodiments, each group member (GM) is assigned a unique n-bit ID and a set of secrets, in which each bit is one-to-one mapped to a unique secret. Whenever GMs are revoked from the group, in some embodiments, the GC will multicast an encrypted key-update message. Only the remaining GMs may be able to recover the message and update GK as well as their private keys. The disclosed OGK scheme can achieve storage-communication optimality with constant message size and immune to collusion attack and also may outperform existing group key management schemes in terms of communication and storage efficiency.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08837738&OS=08837738&RS=08837738
owner: Arizona Board of Regents on behalf of Arizona State University
number: 08837738
owner_city: Scottsdale
owner_country: US
publication_date: 20120405
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"heading":["STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Group Initialization Module","GM Joining and Key Generation Modules","Encryption and Decryption Overview","Encryption Module","Decryption Module","Encryption Module: Subgroups","GM Leaving Module","GM Leaving Module: Single or Multiple Leave","Implementation of OGK Toolkit","Performance Analysis"],"p":["This invention was made with Government support under grant No. N00014-10-1-0714 from the Office of Naval Research Young Investigator Program (ONR YIP). The Government has certain rights in the invention.","This application claims priority to U.S. Provisional Application No. 61\/473,491 filed Apr. 8, 2011, entitled \u201cMethods, Systems, and Apparatuses for Optimal Group Key Management for Secure Multicast Communication,\u201d the entire contents of which are incorporated herein by reference without disclaimer.","This application is also related to U.S. patent application Ser. No. 13\/440,201, filed Apr. 5, 2012, entitled \u201cSystems and Apparatuses for a Secure Mobile Cloud Framework for Mobile Computing and Communication,\u201d which claims priority to U.S. Provisional Application No. 61\/473,477 filed Apr. 8, 2011, and is also related to U.S. Provisional Application No. 61\/620,694, filed Apr. 5, 2012, entitled \u201cSystems and Apparatuses for a Secure Mobile Cloud Framework for Mobile Computing and Communication.\u201d The entire contents of each of the above-referenced U.S. patent applications are incorporated herein by reference without disclaimer.","1. Field of the Invention","This invention relates to the multicast transmission and more particularly relates to methods and systems for optimal group key management for secure multicast communication. An Optimal Group Keying (OGK) scheme is disclosed that achieves both the non-colluding and storage-communication optimality. In the disclosed OGK, a group controller (GC) is responsible for key generation and distribution to group members (GM) and the group data are encrypted by a group key (GK).","2. Description of the Related Art","IP multicast is used to distribute data to a group of receivers efficiently. The efficiency can be achieved because a datagram is transmitted once at the source and any packet forwarding link in the network, saving the cost of the sender as well as network bandwidth.","Multicast group key distribution schemes have been proposed to secure one-to-many group data distribution using IP multicast. Existing solutions restrict the group memberships by encrypting the data using a symmetric Group Key (GK). One of critical requirements of secure group communication is to ensure only legitimated group members to have the update-to-date GKs when group members join or leave the group dynamically. This requirement is usually achieved through a group rekeying procedure, in which a centralized group controller updates the GKs for all legitimate group members.","Group membership revocation is usually a more difficult situation than group membership addition due to the fact that the number of formations of revoked group members is potentially large, and thus the group controller needs to preinstall auxiliary secrets for each group member just for revocation purposes. For example, in a case where an arbitrary set of members L are revoked from a group G is considered, a rekeying message should be generated and distributed to each of G \\L remaining members, who use their preinstalled auxiliary secrets to decipher the rekeying message. Thus, the problem of revoking any arbitrary set of members L can be transformed to solving an exponentially increasing key distribution problem.","To address the scalability issue of the membership revocation in secure group communication, rooted-tree based key distribution schemes have been proposed. In these schemes (illustrated in ), each member is distributed logN secrets for group management (i.e., revocation and addition). It is proved that assigning logN secrets to each member is the information theoretical optimal storage strategy when group size is N.","The rooted-tree structure (see  and ) is constructed such that each group member is assigned a unique leaf node in the tree. Every node in the tree, including leaf and non-leaf nodes, is assigned a unique auxiliary secret. Each group member is pre-distributed a set of auxiliary symmetric secrets (or keys) that are along the path from the leaf to the root, in which the root secret is GK for the entire group. Using rooted-tree based solutions, an auxiliary secret can be shared among a partition of members, and a member can be involved in multiple partitions. Typically, the a-ary rooted-tree based solutions require O(logN) storage overhead for each member, where N is the group size. The rooted-tree based multicast group key distribution scheme can be divided into two categories: Non-Flat-Table schemes () and Flat-Table schemes ().","Non-Flat-Table includes rooted-tree based schemes, such as One-Way Function Trees (OFT), Logical Key Hierarchy Protocol (LKH), and Efficient Large-Group Key Distribution (ELK). One important feature of these schemes is there are adistinct secrets at level d in the key distribution tree as illustrated in . In other words, each node is associated with a unique secret. The secrets are not necessarily just pre-distributed random symmetric keys. They may be generated using one-way hash function or pseudo random number generator. Non-Flat-Table schemes only improve the efficiency marginally. This is because, in these solutions, based on the logN pre-distributed auxiliary keys, each group member can merely decrypt logN encrypted streams, as illustrated in .","Flat-Table schemes adopt a slightly different construction, as illustrated in . In Flat-Table schemes, each group member is issued a unique binary ID bb. . . bbof length n. In addition to the GK, group controller generates 2n auxiliary key encryption keys (KEK) {K|i\u03b5Z, b\u03b5{0,1}}. A group member with ID bb. . . bbholds KEKs {K|i\u03b5Z}. The KEKs are organized in the key distribution tree in , where each level corresponding to one bit position in a user's ID. Thus, at each level in the Flat-Table key distribution tree, there are exact 2 distinct KEKs, which map to a bit position in ID. For example, in the , member with ID 011 is predistributed {K, K, K}. In Flat-Table, the number of partitions each group member can participate is maximized to 2\u22121=N\u22121.","Despite its efficiency, Flat-Table schemes are vulnerable to collusion attacks since FT solutions simply adopt the symmetric KEKs. For example, GMs 001 and 010 can decrypt ciphertexts destined to other GMs, e.g., 011, 000, by combining their symmetric KEKs. To prevent the collusion attacks, CP-ABE-FT was proposed to implement the FT using CP-ABE. However, message size of CP-ABE-FT is linearly growing and, thus, the communication overhead is actually logN. Also, CP-ABE-FT utilizes a periodic refreshment mechanism to ensure forward secrecy. If the ID of a revoked GM is re-assigned to another GM before the refreshment, the revoked GM can regain the access to group data and then the group forward secrecy is compromised.","Broadcast Encryption (BE) was also introduced, where a broadcaster encrypts a message for some set of users who are listening to a broadcasting channel and use their private keys to decrypt the message. Compared with traditional one-to-one encryption schemes, BE features superior efficiency. Instead of sending messages encrypted with each individual recipient's public key, the broadcast encrypter broadcasts one encrypted message to be decrypted by multiple recipients with their own private keys.","Although existing BE schemes feature small or constant ciphertext, the number of public key or private key each user needs to perform encryption or decryption are linear on the max number of non-colluding users in the system. In the case where the BE scheme is fully collusion-resistant, the number of public\/private key each user needs to store equals to the number of users in the system. For example, in the existing BE system with N users, each user u is generated a public key PKand a private key SK. To encrypt a message to a set of users S, the encrypting method takes input of the set of public keys for all recipients {PK|\u2200u\u03b5S} and output the ciphertext. To decrypt a message, the decrypting method takes input of the private key SKof user uand the set of all public keys {PK|\u2200u\u03b5S} to recover original message. OGK supports many-to-many subgroup communication with O(logN) storage overhead on GMs.","Methods and systems for Optimal Group Keying (OGK) that achieves non-colluding and\/or the storage-communication optimality are disclosed.","In one embodiment, the method manages group key of group members in a multicast system, each of the group members having a unique ID. The method may comprise determining a group master key and a group public parameter; processing a join request from a new group member and\/or transmitting an encrypted message to a subset of the group members.","In one embodiment, processing a join request from a new group member may comprise assigning an available unique ID to the new group member; generating, with a processing device, a private key for the new group member, the new private key based on the group master key and the available unique ID; multicasting a random group key to the group members; and\/or communicating the random group key and the private key to the new group member.","In one embodiment, transmitting an encrypted message to a subset of the group members may comprise determining a set of bit assignments for the subset of group members based on the unique IDs of the group members in the subset of group members; encrypting a message based on the master key, the group public parameter, and the set of bit assignments for the subset of group members; and\/or multicasting the encrypted message to the group members.","In one embodiment, the method further comprises receiving a first join request from a first group member; assigning a first unique ID to the first group member; generating an initial group key; generating a first private key based on the first unique ID; and\/or communicating the first private key and the initial group key to the first group member.","In one embodiment, the method further comprises receiving leave request from a leaving subset of group members; determining a new group master key and a new group public parameter; determining an encrypted private-key update factor based on group members not in the leaving subset of group members; and\/or multicasting the encrypted private-key update factor to the group members.","In some embodiments of OGK, a group controller (GC) is responsible for key generation and distribution and the group data are encrypted by a GK. When joining the group, in some embodiments, each group member (GM) is assigned a unique n-bit ID and a set of secrets, in which each bit is one-to-one mapped to a unique secret. Different GMs may share common bits in their IDs, however, the corresponding secrets are different and they are masked by using distinct random numbers. Thus, different GMs cannot collude by combining their secrets that are masked by different random numbers. The set of pre-distributed secrets are denoted as the GM's private key. In some embodiments, a GM can be elected as a GC.","Whenever GMs are revoked from the group, in some embodiments, the GC will multicast an encrypted key-update message. Only the remaining GMs may be able to recover the message and update GK as well as their private keys. In some embodiments, to achieve storage-communication-optimality, tree-based construction is used, and in order to minimize the number of encrypted key-update messages, a minimized boolean function is used, which is in the form of sum-of-product-expression (SOPE) that is calculated based on the IDs of remaining GMs. Each remaining GM may combine n pre-distributed secrets in its private key to decrypt the updated GK.","The disclosed OGK methods and systems can achieve storage-communication optimality with constant message size and immune to collusion attack. The disclosed methods and systems can outperform existing group key management schemes in terms of communication and storage efficiency.","Based on the storage-communication optimality, in some embodiments, the disclosed OGK methods and systems also support dynamic subgroup communication efficiently. In some embodiments, OGK methods and systems allow each GM to initialize a secure subgroup communication with any subset of GMs in a many-to-many communication fashion. Moreover, the number of required messages for subgroup setup is minimized.","Embodiments of the disclosed OGK methods and systems may achieve all the following properties:","Given any number of revoked GMs, the number of encrypted key-update messages is information theoretically minimized to \u2248O(logN).","The size of each encrypted key-update message is constant.","The communication overhead of GM addition is O(1), i.e., only single multicast message is required.","The storage overhead of GC and GM is O(logN) if GC does not store IDs of GMs.","OGK is collusion resistant and provides forward and backward group key secrecy.","OGK supports dynamic subgroup communication efficiently.","The notations used in this disclosure are listed in Table 1.",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Notations in this Disclosure"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbols","Descriptions"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["G","the broadcasting group (includes all group members (GM))"]},{"entry":["L","a subset of GMs"]},{"entry":["u","a GM"]},{"entry":["B","bit-assignment"]},{"entry":["S","set of bit assignments"]},{"entry":["GC","group controller"]},{"entry":["GM","group member"]},{"entry":["N","the number of GMs in G"]},{"entry":["n","log(N)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The term \u201ccoupled\u201d is defined as connected, although not necessarily directly, and not necessarily mechanically. The terms \u201ca\u201d and \u201can\u201d are defined as one or more unless this disclosure explicitly requires otherwise.","The term \u201csubstantially\u201d and its variations are defined as being largely but not necessarily wholly what is specified as understood by one of ordinary skill in the art, and in one non-limiting embodiment \u201csubstantially\u201d refers to ranges within 10%, preferably within 5%, more preferably within 1%, and most preferably within 0.5% of what is specified.","The terms \u201ccomprise\u201d (and any form of comprise, such as \u201ccomprises\u201d and \u201ccomprising\u201d), \u201chave\u201d (and any form of have, such as \u201chas\u201d and \u201chaving\u201d), \u201cinclude\u201d (and any form of include, such as \u201cincludes\u201d and \u201cincluding\u201d) and \u201ccontain\u201d (and any form of contain, such as \u201ccontains\u201d and \u201ccontaining\u201d) are open-ended linking verbs. As a result, a method or device that \u201ccomprises,\u201d \u201chas,\u201d \u201cincludes\u201d or \u201ccontains\u201d one or more steps or elements possesses those one or more steps or elements, but is not limited to possessing only those one or more elements. Likewise, a step of a method or an element of a device that \u201ccomprises,\u201d \u201chas,\u201d \u201cincludes\u201d or \u201ccontains\u201d one or more features possesses those one or more features, but is not limited to possessing only those one or more features. Furthermore, a device or structure that is configured in a certain way is configured in at least that way, but may also be configured in ways that are not listed.","Other features and associated advantages will become apparent with reference to the following detailed description of specific embodiments in connection with the accompanying drawings.","Various features and advantageous details are explained more fully with reference to the nonlimiting embodiments that are illustrated in the accompanying drawings and detailed in the following description. Descriptions of well known starting materials, processing techniques, components, and equipment are omitted so as not to unnecessarily obscure the invention in detail. It should be understood, however, that the detailed description and the specific examples, while indicating embodiments of the invention, are given by way of illustration only, and not by way of limitation. Various substitutions, modifications, additions, and\/or rearrangements within the spirit and\/or scope of the underlying inventive concept will become apparent to those skilled in the art from this disclosure.","Certain units described in this specification have been labeled as modules, in order to more particularly emphasize their implementation independence. A module is \u201c[a] self-contained hardware or software component that interacts with a larger system. Alan Freedman, \u201cThe Computer Glossary\u201d 268 (8th ed. 1998). A module comprises a machine or machines executable instructions. For example, a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices or the like.","Modules may also include software-defined units or instructions, that when executed by a processing machine or device, transform data stored on a data storage device from a first state to a second state. An identified module of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions which may be organized as an object, procedure, or function. Nevertheless, the executables of an identified module need not be physically located together, but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the module, and when executed by the processor, achieve the stated data transformation.","Indeed, a module of executable code may be a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules, and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set, or may be distributed over different locations including over different storage devices.","In the following description, numerous specific details are provided, such as examples of programming, software modules, user selections, network transactions, database queries, database structures, hardware modules, hardware circuits, hardware chips, etc., to provide a thorough understanding of the present embodiments. One skilled in the relevant art will recognize, however, that the invention may be practiced without one or more of the specific details, or with other methods, components, materials, and so forth. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 3","b":["300","300","302","304","308","310","300","306","304","302","308","306","308"]},"In one embodiment, the user interface device  is referred to broadly and is intended to encompass a suitable processor-based device such as a desktop computer, a laptop computer, a Personal Digital Assistant (PDA), a mobile communication device or organizer device having access to the network . In a further embodiment, the user interface device  may access the Internet to access a web application or web service hosted by the server  and provide a user interface for enabling a user to enter or receive information.","The network  may facilitate communications of data between the server  and the user interface device . The network  may include any type of communications network including, but not limited to, a direct PC to PC connection, a local area network (LAN), a wide area network (WAN), a modem to modem connection, the Internet, a combination of the above, or any other communications network now known or later developed within the networking arts which permits two or more computers to communicate, one with another.","In one embodiment, the server  is configured to determine a group master key and a group public parameter, process a join request from a new group member, and transmit an encrypted message to a subset of the group members. Additionally, the server may access data stored in the data storage device  via a Storage Area Network (SAN) connection, a LAN, a data bus, or the like.","The data storage device  may include a hard disk, including hard disks arranged in an Redundant Array of Independent Disks (RAID) array, a tape storage drive comprising a magnetic tape data storage device, an optical storage device, or the like. In one embodiment, the data storage device  may store health related data, such as insurance claims data, consumer data, or the like. The data may be arranged in a database and accessible through Structured Query Language (SQL) queries, or other data base query languages or operations.","The server  may host a software application configured for optimal group key management. The software application may further include modules for interfacing with the data storage devices , interfacing a network , interfacing with a user, and the like. In a further embodiment, the server  may host an engine, application plug-in, or application programming interface (API). In another embodiment, the server  may host a web service or web accessible software application.","Any suitable processor-based device may be utilized to achieve the architecture of system  including without limitation, including, desktop computers, laptop computers, tablet computers, personal data assistants (PDAs), computer game consoles, and multi-processor servers. Moreover, the present embodiments may be implemented on application specific integrated circuits (ASIC) or very large scale integrated (VLSI) circuits. In fact, persons of ordinary skill in the art may utilize any number of suitable structures capable of executing logical operations according to the described embodiments.","The communication model of OGK is based on multicast.  illustrates an embodiment of a multicast scheme having Group Members (GM)  and a Group Controller (GC) . In some embodiments, GC  is the same as GC . Through multicast communication, GC may be able to communicate to each of the various GMs through network  (e.g., one-to-many communication). Furthermore, each of the various GMs  may be able to selectively communicate with each other as well as the GC  (e.g., many-to-many). All GMs belong to a multicast group G={u, u, . . . , u}. Each GM  u may be able to send or receive data. The multicast group is associated with a trusted server, referred as GC, responsible for managing the membership. Each GM  can initialize a secure subgroup communication with any subset of GMs. The subgroup traffic is multicasted to whole group while only a designated subset of GMs can decrypt the data.","Pairing is a bilinear map function e:G\u00d7G\u2192G, where G, Gand Gare three cyclic groups with large prime order p. The Gand Gare additive groups and Gis multiplicative group. The discrete Logarithm Problem on G, Gand Gare hard. Pairing has the following properties:\n\n","Embodiments of the disclosed methods and systems are configured to be secure and protect from attacks to the security. An attackers' goal may be to reveal multicasted data. For example, consider the attacking scenarios in the following cases:","1) Breaking the Group Secrecy: Non-GMs try to reveal the multicasted group data.","2) Breaking Backward Secrecy: GMs  try to reveal any group data that were transmitted before they joined the group.","3) Breaking Forward Secrecy: GMs  try to continue reveal the group data that are transmitted after they left the group.","4) Collusion Attacks: Multiple GMs  combine their pre-distributed secrets to decrypt the ciphertext not intended to them. One example of this attack is that when multiple GMs  are revoked from the group, they try to collude to continue decrypting group data. Another example is that when a secure conference is held among a subgroup of GMs , some excluded GMs  try to listen to the conference.","In the disclosed OGK methods and systems, each GM  may be associated with a unique binary ID: bb. . . bb, where n=logN. The ID may be issued by the GC when a GM joins the group. Once the GM left the group, his\/her ID may be re-assigned to other joining GMs.","A logic literal, which is called bit-assignment, Bor can be used to indicate the binary value at position i in a particular ID. Bindicates the b=1; indicates the b=0. For a group with N GMs, the length of an ID is n=logN and the total number of bit-assignments is 2n; that is, two binary values are mapped to one bit position. The set of all possible bit-assignments is called to be Universe U, which contains 2n bit-assignments.","In some embodiments, a GM u can be uniquely identified by the set of bit-assignments Sassociated with u's ID. Also, multiple GMs may have a common subset of bit-assignments. For example, in , a GM u's ID is 000 and a GM u's ID is 001, S={ , , } and S={ , , } and S\u2229S={ , }.","In the disclosed OGK methods and systems, the GMs can be organized as leafs in a binary tree with each non-root node marked with a bit-assignment (). Note that there are only 2n distinct non-root nodes in the tree and each level contains 2 distinct nodes, which is different from existing tree-based schemes OFT, LKH, and ELK, where there are 2distinct nodes at level d. The ID of a GM can be represented by the bit-assignment nodes from the root down to the leaf. Thus, any two GMs will have at least one different bit-assignment.","The schematic flow chart diagrams that follow are generally set forth as logical flow chart diagrams. As such, the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function, logic, or effect to one or more steps, or portions thereof, of the illustrated method. Additionally, the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams, they are understood not to limit the scope of the corresponding method. Indeed, some arrows or other connectors may be used to indicate only the logical flow of the method. For instance, an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally, the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.",{"@attributes":{"id":"p-0073","num":"0075"},"figref":["FIG. 6","FIG. 6"],"b":["600","302","600","602","600","604","600","606"]},"In some embodiments, the method  may be configured to receive joint requests (now shown) a first group member. This may include receiving a first join request from a first group member, assigning a first unique ID to the first group member, generating an initial group key, and generating a first private key based on the first unique ID and\/or communicating the first private key and the initial group key to the first group member.","In some embodiments, the method  may also be configured to receive  leave requests for one or more group members. This process may include receiving leave request from a leaving subset of group members, determining a new group master key and a new group public parameter, determining an encrypted private-key update factor based on group members not in the leaving subset of group members, and multicasting the encrypted private-key update factor to the group members.","As discussed with regard to , a multicast system has a GC in addition to one or more group members. In some embodiments, the group members may also have a server configured to perform one or more method steps\u2014sometimes referred to as the group member server. In some embodiments, a group member may be configured to join a group. In some embodiments, joining a group may include transmitting a join request to the GC and receiving a private key and a group key from the GC. Additionally, the group members may be configured to receive an encrypted message. Receiving an encrypted message may include determining encryption eligibility and decrypting the encrypted message based on the private key.","In some embodiments, a group member may also be configured to receive an updated group key in response to the new group member joining from the GC.","In some embodiments, the group member may be configured to transmit a leave request to the GC, and in a particular embodiment the group member maybe configured to receive an encrypted private-key update factor and update the private key based on the encrypted private-key update factor.","Specific embodiments of the method steps may be performed by the modules and methods steps discussed with regards to .  illustrates one embodiment of an apparatus  for optimal group key management.  generally illustrates an embodiment of the GC server. In various embodiments, the GMs may have a processing device (e.g., a mobile processor). The GM processing device may be less robust than the embodiment of the GC server illustrated in . However, specific embodiments of the GM server may be configured to perform specific methods discussed with regards to the modules of . For example, in some embodiments, the GM may be configured able to initiate a group communication to a subgroup of other GMs\u2014without the use of the GC server.","In one embodiment, the apparatus  is a server \u2014sometimes referred to as the GC server\u2014configured to load and operate software modules - configured for optimal group key management. Alternatively, the apparatus  may include hardware modules - configured with analog or digital logic, firmware executing FPGAs, or the like configured to generate method steps of method . In such embodiments, the apparatus  may include a group initialization module , GM joining\/key generation module , encryption\/decryption modules , and GM leaving module .","Specific embodiments of how the GC may setup the multicast group are disclosed. In some embodiments, first, GC chooses bilinear map over group G, Gand Gof prime order p. Assume the generator of Gis g and generator of Gis h. Also, GC chooses a publicly known one-way function H. Then, it chooses two non-trivial random numbers \u03b1, \u03b2\u03b5Z*. For simplicity, the universe of bit-assignments U is mapped to the first |U| members of Z*, i.e., the integers {1, 2, . . . , |U|}. For each bit-assignment B\u03b5U, GC chooses a non-trivial random number y\u03b5Z. This set of 2n random numbers are denoted as\n\n}\n","For each y\u03b5Y, GC may also generate the tuple <e(g,h),g>. The set of 2n tuples are denoted as:\n\n()}\n","GC may publish the group public parameter:\n\nGP={}.\n","On the other hand, GC protects the group master key:\n\nMK={\u03b1,\u03b2,}.\n","When a new GM u joins the group, in some embodiments, u needs to setup a secure channel with the GC using either a pre-shared key or public key certificates. GC may then check whether the GM is authorized to join. Once the checking is passed, GC may assign a unique ID bb. . . band a set of bit assignments Sto u.","In some embodiments, once u is admitted to the group, GC may run key generation method KeyGen(MK,S) to generate private key SKfor u, where MK is the group master key and Sis the set of bit-assignments in u\u2032 ID. The method may first choose a non-trivial random number r\u03b5Z*. Then, it may compute",{"@attributes":{"id":"p-0087","num":"0089"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msup":{"mi":"h","mfrac":{"mrow":{"mi":["\u03b1","r"],"mo":"+"},"mi":"\u03b2"}},"mo":"\u2208","mrow":{"msub":{"mi":"G","mn":"2"},"mo":"."}}}},"br":{},"sub":["u","2"],"sup":["ry",{"sub2":"B"}]},{"@attributes":{"id":"p-0088","num":"0090"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"S","mo":["\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mtext":":"},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"msub":{"mi":["K","u"]},"mrow":{"mo":["{","}"],"mrow":{"mrow":[{"mi":"D","mo":"=","msup":{"mi":"h","mfrac":{"mrow":{"mi":["\u03b1","r"],"mo":"+"},"mi":"\u03b2"}}},{"mrow":{"mo":"\u2200","mrow":{"mi":"B","mo":"\u2208","mrow":{"msub":[{"mi":["S","u"]},{"mi":["D","B"]}],"mo":["\u2062","\u2062"],"mstyle":{"mtext":":"}}}},"mo":"=","msup":{"mi":"h","mrow":{"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mo":"\u2062","mrow":{"mi":"r","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["y","B"]}}}}}],"mo":","}}}}}},"If u is the first GM in the group, GC, in some embodiments may, generate an initial GK and send the private key {SK,GK} to the new GM u through a secure channel. If u is not the first joining GM, to preserve backward secrecy, GC may generate another random key GK\u2032 and multicast {GK\u2032}. Each GM other than u can decrypt the message and replace GK with GK\u2032. Finally, GC may send {SK,GK\u2032} to the new GM u through a secure unicast channel. In embodiments of the join process, besides the unicast communication, GC only needs to multicast one message, i.e., {GK\u2032}. Thus, the communication overhead for GMs join is O(1).","One observation is that GC, in a preferred embodiment, does not need to store the ID or private keys of any GMs. Thus, the storage overhead of GC can be significantly reduced to O(logN), since GC is only required to store the system parameters and master key.","As has been mentioned, OGK allows GC and GMs to securely communicate with any subset of GMs. Whenever, GMs are revoked from the group, GC needs to multicast a key update message to all remaining GMs, who will update their GK as well as private keys. On the other hand, GMs can initialize a secure subgroup communications with any subset of GMs.","Embodiments of how a GC or GM can encrypt a message with a set of bit-assignment S are disclosed, so that only GMs whose IDs satisfy S can decrypt the message. For example, in a three-bit-ID group, if a ciphertext is encrypted by using bit-assignment S={ ,B}, GMs with IDs 010 and 011 can decrypt the ciphertext.","Encrypt(GP,S,M) encryption method, in specific embodiments, takes inputs of the group parameter GP, a set of bit-assignment S, the message M, and returns the ciphertext CT. In a specific embodiment, given the set of bit-assignment S, it is easy to calculate the following terms:",{"@attributes":{"id":"p-0094","num":"0096"},"maths":[{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"msup":[{"mrow":[{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["g","h"],"mo":","}}},{"mi":"\u03b1","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["Y","S"]}}]},{"mrow":[{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["g","h"],"mo":","}}},{"mi":"\u03b1","mo":"\u2062","mrow":{"munder":{"munder":{"mo":"\u2211","mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},"mrow":{"mi":["B","S"],"mo":"\u2208"}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["y","B"]}}}]}],"mo":"="}}},{"mtd":{"mrow":{"mo":"=","mrow":{"munder":{"mo":"\u220f","mrow":{"mi":["B","S"],"mo":"\u2208"}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msup":{"mrow":[{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["g","h"],"mo":","}}},{"mi":"\u03b1","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["y","B"]}}]}}}}}]}}},{"@attributes":{"id":"MATH-US-00003-2","num":"00003.2"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"msup":[{"mi":"g","mrow":{"mi":"\u03b2","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["Y","S"]}}},{"mi":"g","mrow":{"mi":"\u03b2","mo":"\u2062","mrow":{"munder":{"munder":{"mo":"\u2211","mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},"mrow":{"mi":["B","S"],"mo":"\u2208"}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["y","B"]}}}}],"mo":"="}}},{"mtd":{"mrow":{"mo":"=","mrow":{"munder":{"mo":"\u220f","mrow":{"mi":["B","S"],"mo":"\u2208"}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msup":{"mi":"g","mrow":{"mi":"\u03b2","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["y","B"]}}}}}}}]}}}]},"For example, if",{"@attributes":{"id":"p-0096","num":"0098"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"S","mo":"=","mrow":{"mo":["{","}"],"mrow":{"msub":[{"mover":{"mi":["B","_"]},"mn":"0"},{"mi":"B","mn":"1"},{"mi":"B","mn":"2"}],"mo":[",",","]}}},{"msup":{"mrow":[{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["g","h"],"mo":","}}},{"mi":"\u03b1","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["Y","S"]}}]},"mo":"=","mrow":{"msup":{"mrow":[{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["g","h"],"mo":","}}},{"mi":"\u03b1","mo":["(",")"],"mrow":{"msub":[{"mi":"y","msub":{"mover":{"mi":["B","_"]},"mn":"0"}},{"mi":"y","msub":{"mi":"B","mn":"1"}},{"mi":"y","msub":{"mi":"B","mn":"2"}}],"mo":["+","+"]}}]},"mo":"."}}],"mo":","}}}},"After calculating e(g,h)and g, the Encrypt method, in a specific embodiment, generates a non-trivial random number t\u03b5Z*. Then, the method computes C=M\u2295e(g,h), C=g, C=g, where \u2295 is bitwise XOR operation. Thus, the ciphertext is as:\n\nCT:{()}\n","On receiving the CT, those GMs who satisfy the bit-assignment CT.S can decrypt the CT by performing decryption method Decrypt(GP, SK, CT).","The Decrypt method, in a specific embodiment, may first check whether the GM u is eligible to decrypt the message by testing whether CT.SS, where CT.S represents the bit assignments associated with the ciphertext CT. Then, for each bit assignment B\u03b5CT.S, the method use u's pre-distributed secret shares D=hto compute:",{"@attributes":{"id":"p-0100","num":"0102"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"mi":"F","mo":"=","mrow":{"munder":{"mo":"\u220f","mrow":{"mi":"B","mo":"\u2208","mrow":{"mi":"C","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":["T","S"],"mo":"."}}}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["D","B"]}}}}},{"mtd":{"mrow":{"mo":"=","mrow":{"munder":{"mo":"\u220f","mrow":{"mi":"B","mo":"\u2208","mrow":{"mi":"C","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":["T","S"],"mo":"\u00b7"}}}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msup":{"mi":"h","mrow":{"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mo":"\u2062","mrow":{"mi":"r","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["y","B"]}}}}}}}},{"mtd":{"mrow":{"mo":"=","msup":{"mi":"h","mrow":{"mi":"r","mo":"\u2062","mrow":{"munder":{"munder":{"mo":"\u2211","mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},"mrow":{"mi":"B","mo":["\u2208","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.6em","height":"0.6ex"}}},"mrow":{"mi":"C","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":["T","S"],"mo":"\u00b7"}}}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["y","B"]}}}}}}},{"mtd":{"mrow":{"mo":"=","msup":{"mi":"h","mrow":{"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mo":"\u2062","mrow":{"mi":"r","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":"Y","mrow":{"mi":"C","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":["T","S"],"mo":"\u00b7"}}}}}}}}}]}}}},"Next, the method computes:",{"@attributes":{"id":"p-0102","num":"0104"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mi":"A","mn":"1"},"mo":"=","mrow":{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":"C","mn":"1"},"mo":",","mi":"D"}}}}}},{"mtd":{"mrow":{"mo":"=","msup":{"mrow":[{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["g","h"],"mo":","}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":["\u03b1","r"],"mo":"+"}},"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"mi":"t","msub":{"mi":"Y","mrow":{"mi":"C","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":["T","S"],"mo":"\u00b7"}}}}]}}}}]}}},"br":{}},{"@attributes":{"id":"p-0103","num":"0105"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mi":"A","mn":"2"},"mo":"=","mrow":{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":"C","mn":"2"},"mo":",","mi":"F"}}}}}},{"mtd":{"mrow":{"mo":"=","msup":{"mrow":[{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["g","h"],"mo":","}}},{"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mo":"\u2062","mrow":{"mi":["r","t"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"msub":{"mi":"Y","mrow":{"mi":"C","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":["T","S"],"mo":"\u00b7"}}}}}]}}}}]}}}},"Then the method divides Aby Aand gets:",{"@attributes":{"id":"p-0105","num":"0107"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mi":"A","mn":"3"},"mo":"=","mrow":{"msub":[{"mi":"A","mn":"1"},{"mi":"A","mn":"2"}],"mo":["\u2062","\u2062"],"mstyle":{"mtext":"\/"}}}}},{"mtd":{"mrow":{"mo":"=","msup":{"mrow":[{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["g","h"],"mo":","}}},{"mi":["\u03b1","t"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"msub":{"mi":"Y","mrow":{"mi":"C","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":["T","s"],"mo":"\u00b7"}}}}]}}}}]}}},"br":{},"sub":["0","3"]},"Various embodiments of how GC or GMs can securely communicate with arbitrary subgroup of members optimally are presented. Some of the terms used in the following are defined as follows:\n\n","Given a subgroup of GMs L, a boolean membership function M(B, B, . . . , B, B), which is in the form of SOPE, is used to determine the membership of this subgroup. Formally, the following properties of membership functions hold:",{"@attributes":{"id":"p-0108","num":"0113"},"maths":{"@attributes":{"id":"MATH-US-00009","num":"00009"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"msub":{"mi":["M","L"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msubsup":[{"mi":["b","u"],"mn":"0"},{"mi":["b","u"],"mn":"1"},{"mi":["b","u"],"mrow":{"mi":"n","mo":"-","mn":"2"}},{"mi":["b","u"],"mrow":{"mi":"n","mo":"-","mn":"1"}}],"mo":[",",",",",",","],"mi":"\u2026"}}},{"mo":"{","mtable":{"mtr":[{"mtd":[{"mn":"0"},{"mrow":{"mrow":[{"mi":["iff","u"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},{"mi":["G","\\","L"],"mo":["\u2062","\u2062"]}],"mo":"\u2208"}}]},{"mtd":[{"mn":"1"},{"mrow":{"mrow":[{"mi":["iff","u"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},{"mi":"L","mo":["\u2062","."],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}],"mo":"\u2208"}}]}]}}],"mo":"="}}}},"For example, if the subgroup L={000,001,011,111}, then M=   +  B+ BB+BBB.","In some embodiments, the GC or a GM runs the Quine-McCluskey algorithm to reduce Mto minimal SOPE M. One having skill in the art will recognize other algorithms to reduce Mto minimal SOPE M. The reduction can consider do not care values on those IDs that are not currently assigned to any GM to further reduce the size of M. Since Mis in the form of SOPE, encryption is performed on each product term. That is, for each product term E in M, Encrypt method encrypts the message with the set of bit-assignment S that contains all literals in E. The total number of encrypted message equals to the number of product terms in M.","For example, if L={000,001,011,111}, M=  +BB. It can be found that Mcontains 2 product terms. The message M for the subgroup L can be encrypted as M and M, respectively.","In some embodiments, when several GMs (denoted by set L) are revoked from the group, GC needs to update the {MK, GP, GK} as well as the private key of each remaining GM u\u03b5G\\L. Various embodiments are disclosed to show how this process can be done efficiently.","In some embodiments, the GC may first change MK to MK\u2032={\u03b1\u2032,\u03b2,Y}, where \u03b1\u2032 is randomly selected in Z. Also, group public parameter GP is updated accordingly. Then, GC may multicast an encrypted key-update factor",{"@attributes":{"id":"p-0114","num":"0119"},"maths":{"@attributes":{"id":"MATH-US-00010","num":"00010"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":["k","u","f"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]},{"msup":{"mi":"h","mfrac":{"mrow":{"msup":{"mi":["\u03b1","\u2032"]},"mo":"-","mi":"\u03b1"},"mi":"\u03b2"}},"mo":"."}],"mo":"="}}},"br":{}},"In some embodiments, each GM u\u03b5G\\L may update the component D in its private key SKusing the",{"@attributes":{"id":"p-0116","num":"0121"},"maths":{"@attributes":{"id":"MATH-US-00011","num":"00011"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":["k","u","f"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]},{"msup":{"mi":"g","mfrac":{"mrow":{"msup":{"mi":["\u03b1","\u2032"]},"mo":"-","mi":"\u03b1"},"mi":"\u03b2"}},"mo":"."}],"mo":"="}}},"br":{}},{"@attributes":{"id":"p-0117","num":"0122"},"maths":{"@attributes":{"id":"MATH-US-00012","num":"00012"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"D","mo":"\u00b7","msup":{"mi":"h","mfrac":{"mrow":{"msup":{"mi":["\u03b1","\u2032"]},"mo":"-","mi":"\u03b1"},"mi":"\u03b2"}}},{"mrow":[{"msup":[{"mi":"h","mfrac":{"mrow":{"mi":["\u03b1","r"],"mo":"+"},"mi":"\u03b2"}},{"mi":"h","mfrac":{"mrow":{"msup":{"mi":["\u03b1","\u2032"]},"mo":"-","mi":"\u03b1"},"mi":"\u03b2"}}],"mo":"\u00b7"},{"msup":{"mi":"h","mfrac":{"mrow":{"mi":["\u03b1","r","\u03b1"],"mo":["+","+","-"],"msup":{"mi":["\u03b1","\u2032"]}},"mi":"\u03b2"}},"mo":"=","mrow":{"msup":{"mi":"h","mfrac":{"mrow":{"msup":{"mi":["\u03b1","\u2032"]},"mo":"+","mi":"r"},"mi":"\u03b2"}},"mo":"."}}],"mo":"="}],"mo":"="}}},"br":{}},{"@attributes":{"id":"p-0118","num":"0123"},"maths":{"@attributes":{"id":"MATH-US-00013","num":"00013"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"G","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msup":{"mi":["K","\u2032"]}},{"mrow":{"mi":"H","mo":["(",")"],"msup":{"mi":"h","mfrac":{"mrow":{"msup":{"mi":["\u03b1","\u2032"]},"mo":"-","mi":"\u03b1"},"mi":"\u03b2"}}},"mo":"."}],"mo":"="}}}},"In one embodiment, only one GM leaves the group. For example, if the leaving GM u's ID is 101 with bit-assignment S={B, ,B}, the key updating message may be encrypted as {kuf}, {kuf}, {kuf} and may be multicased to the entire group. If ID 100 is not assigned, {kuf} may not needed. Although the leaving member may intercept the transmitted messages, it cannot decrypt them since every message is encrypted with a bit assignment that the leaving member does not possess. On the other hand, each of remaining GMs can decrypt at least one of the multicasted messages.","In certain embodiments, multiple GMs leave the multicast group. Given the set of leaving GMs L, GC can easily derive the set of remaining GMs, i.e. G\\L, as well as the set of unassigned IDs if GC stores all assigned IDs. If GC does not store assigned ID, GC can assume all IDs are assigned. Then, the GC may run the Quine-McCluskey algorithm\u2014or other like algorithm\u2014to reduce the membership function Mto minimal SOPE. Then, GC may encrypt the key updating factor for each product term. The total number of encrypted key updating factors equals to the number of product terms in M. For example, it is assumed that two GMs {000,010} leave, five GMS {001,011,100,101,110} remain, and {111} is not assigned to any GM (i.e., the ID bit assignments are do not care). With the considerations do not care values, M can be reduced to M=B+B. GC need to multicast two messages {kuf} and {kuf}.","Practical issues in implementing OGK are disclosed, including choice of parameters, optimization methods on further reducing ciphertext size. The disclosed OGK toolkit is implemented as a set of tools and a core library, which has been made available on the web under the GPL. The disclosed implementation uses the Pairing Based Cryptography (PBC) library.","OGK is implemented over two parameter sets, each of which is specially optimized for different purposes. The Type-A curve is a on supersingular curve y=x+x over 512-bit finite field, which defines a 160-bit elliptic curve group and features fastest pairing computation. On the other hand, the Type-D curve is chosen using MNT method and has shortest group elements. Note that each element can be compressed to reduce size. In the actual implementation and performance evaluation, the compressed Type-D element was adopted to minimize storage and communication overhead. The benchmark was performed on a modern workstation which has a 3.0 GHz Pentium 4 cpu with 2 MB cache and 1.5 GB memory and runs Linux 2.6.32 kernel. The Type-A and Type-D parameters are compared in Table 2.",{"@attributes":{"id":"p-0123","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Comparison between Type-A and Type-D curves."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type-A","Type-D"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Base Field Size (bits)","512","159"]},{"entry":[{},"Embedded Degree (k)","2","6"]},{"entry":[{},"DLP Security (bits)","1024","954"]},{"entry":[{},"Pairing (ms)","6.4","15.4"]},{"entry":[{},"GElement Size (bytes)","65","21"]},{"entry":[{},"GElement Size (bytes)","65","61"]},{"entry":[{},"GElement Size (bytes)","128","120"]},{"entry":[{},"Exp G(ms)","7.2","3.6"]},{"entry":[{},"Exp G(ms)","7.3","21.1"]},{"entry":[{},"Random G(ms)","8.4","3.5"]},{"entry":[{},"Random G(ms)","8.5","20.9"]},{"entry":[{},"Random G(ms)","3.0","8.0"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Total multicast data size can be reduced by combining common Ccomponents for different product terms in the same membership function. For example, if L={000,001,011,111}, M=  +BB. It can be found that Mcontains 2 product terms. The message M for L can be encrypted as M and M. As presented in this disclosure, the 2 encrypted messages are constructed as",{"@attributes":{"id":"p-0125","num":"0130"},"maths":[{"@attributes":{"id":"MATH-US-00014","num":"00014"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mrow":{"mo":["{","}"],"mrow":{"mrow":[{"msub":{"mi":"S","mn":"1"},"mo":"=","mrow":{"mo":["{","}"],"mrow":{"msub":[{"mover":{"mi":["B","_"]},"mn":"0"},{"mover":{"mi":["B","_"]},"mn":"1"}],"mo":","}}},{"msub":{"mi":"C","mn":"0"},"mo":"=","msup":{"mrow":[{"mi":"Me","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["g","h"],"mo":","}}},{"mi":["\u03b1","t"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"msub":{"mi":"Y","msub":{"mi":"S","mn":"1"}}}]}},{"msub":{"mi":"C","mn":"1"},"mo":"=","msup":{"mi":"g","mrow":{"mi":["\u03b2","t"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"msub":{"mi":"Y","msub":{"mi":"S","mn":"1"}}}}},{"msub":{"mi":"C","mn":"2"},"mo":"=","msup":{"mi":["g","t"]}}],"mo":[",",",",","]}},"mo":[",","\u2062"],"mstyle":{"mtext":{}},"mi":"and"},"mo":"\u2062","mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}},{"@attributes":{"id":"MATH-US-00014-2","num":"00014.2"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mo":["{","}"],"mrow":{"mrow":[{"msub":{"mi":"S","mn":"2"},"mo":"=","mrow":{"mo":["{","}"],"mrow":{"msub":[{"mi":"B","mn":"1"},{"mi":"B","mn":"2"}],"mo":","}}},{"msub":{"mi":"C","mn":"0"},"mo":"=","msup":{"mrow":[{"mi":"Me","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["g","h"],"mo":","}}},{"mi":["\u03b1","t"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"msub":{"mi":"Y","msub":{"mi":"S","mn":"2"}}}]}},{"msub":{"mi":"C","mn":"1"},"mo":"=","msup":{"mi":"g","mrow":{"mi":["\u03b2","t"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"msub":{"mi":"Y","msub":{"mi":"S","mn":"2"}}}}},{"msub":{"mi":"C","mn":"2"},"mo":"=","msup":{"mi":["g","t"]}}],"mo":[",",",",","]}},"mo":"."}}}]},"Note that the Ccomponents in the these 2 messages are identical for the same random t.","The performance of OGK scheme is analyzed and compared with several related solutions: Flat Table scheme (FT), FT implemented using CP-ABE (FT-ABE), Subset-Diff broadcast encryption scheme, BGW broadcasting encryption, and Non-Flat-Table tree-based schemes (e.g., OFT, LKH, ELK, etc.). The performance is assessed in terms of communication overhead (number and size of messages incurred by join and leave operations), storage overhead (group data stored on the GC and GM), and computation overhead (number of cryptographic operations needed in encryption and decryption operations). The group size is denoted as N, the number of leaving GMs as l. Also, for the Subset-Diff scheme, t denotes the maximum number of colluding users to compromise the ciphertext. The summary of comparative results is presented in Table 3.",{"@attributes":{"id":"p-0128","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Comparison of communication overhead and Storage overhead in different group key"},{"entry":"management schemes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Communication Overhead","Storage Overhead"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Scheme","join","single leave","multiple leaves","GC","GM"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["OGK","O(1)","O(logN)","\u2248O(logN)","O(logN)\/","O(logN)"]},{"entry":[{},{},{},{},"O(N)",{}]},{"entry":["Flat-Table","O(logN)","O(logN)","\u2248O(logN)","O(logN)\/","O(logN)"]},{"entry":[{},{},{},{},"O(N)",{}]},{"entry":["Flat-Table-","O(1)","O(logN)","\u2248(logN)","O(logN)\/","O(logN)"]},{"entry":["ABE",{},{},{},"O(N)",{}]},{"entry":["Subset-Diff","N\/A","O(t \u00b7 logt \u00b7 logm)","O(t \u00b7 logt \u00b7 logN)","O(N)","O(logN)"]},{"entry":["BGW","N\/A","O(N)","O(N)","O(N)","O(N)"]},{"entry":["Non-Flat-","O(1)","O(logN)","O(l \u00b7 logN)","O(N)","O(logN)"]},{"entry":"Table-Tree"},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":"N: the number of group members;"},{"entry":"l: the number of leaving members;"},{"entry":"t: maximum number of colluding users to compromise the ciphertext."}]}}]}}},"All of the methods disclosed and claimed herein can be made and executed without undue experimentation in light of the present disclosure. While the apparatus and methods of this invention have been described in terms of preferred embodiments, it will be apparent to those of skill in the art that variations may be applied to the methods and in the steps or in the sequence of steps of the method described herein without departing from the concept, spirit and scope of the invention. In addition, modifications may be made to the disclosed apparatus and components may be eliminated or substituted for the components described herein where the same or similar results would be achieved. All such similar substitutes and modifications apparent to those skilled in the art are deemed to be within the spirit, scope, and concept of the invention as defined by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following drawings form part of the present specification and are included to further demonstrate certain aspects of the present invention. The invention may be better understood by reference to one or more of these drawings in combination with the detailed description of specific embodiments presented herein.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4","b":["404","402"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
