---
title: Document creation system and method using knowledge base, precedence, and integrated rules
abstract: A system that may be used to generate documents and for broader uses such as assembling computer-processable components into computer-processable end products. In one form, the system is a document generation system having an assembly facility configured to be coupled to an origination platform; a knowledge base configured to be coupled to the assembly facility and to store objects in an object-relational hierarchy; and a content management system configured to be coupled to the knowledge base, where the content management system is configured to include an object and a rule. The system may be configured to interact with a knowledge base to create a first set of end products, each end product containing an object; apply precedence to the first set of end products; extract rules from the knowledge base; and assemble a second set of documents based upon applying precedence and rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07472345&OS=07472345&RS=07472345
owner: Wolters Kluwer Financial Services, Inc.
number: 07472345
owner_city: St. Cloud
owner_country: US
publication_date: 20040331
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority to U.S. Provisional Patent Application No. 60\/542,076, filed on Feb. 4, 2004, and U.S. Provisional Patent Application No. 60\/510,742, filed on Oct. 13, 2003.","Embodiments of the invention relate to the creation of documents (such as contracts, forms, user manuals, instructional texts, and others). More particularly, embodiments of the invention relate to the creation of documents by assembling document components and applying precedence and rules to create a desired document.","Document production systems that insert customer-specific content into a pre-fabricated document are known. For example, in some known systems a boilerplate document is produced using word processing software. The boilerplate document is then reviewed and revised by a document developer, and stored in a storage device, such as a disk drive of a computer. The boilerplate document is then made available for use to an end-user, such as a bank or loan officer. The end-user retrieves the boilerplate document from the storage device and enters specific content into the document, such as names, addresses, prices, etc. Once the desired content is inserted into specified locations on the document, the completed form is printed.","Other document systems use a conventional relational database scheme to test specific input information against a table of rule sets which, in turn, are directly linked to various boilerplate clauses. For example, when working with insurance forms, a rule set is assigned to each insurance policy clause and each endorsement clause. The insurance and endorsement clauses and rule sets are stored in a memory coupled to the main processor. Each rule set includes at least one rule that must be satisfied in order to include the associated clause in the document. After entering customer-specific parameters into the computer, such as desired insurance coverage and the policy holder's state of residence, each and every rule in each and every rule set is evaluated to determine whether a particular clause is to be included in the document. In order to print a document, a printer database containing a redundant copy of each insurance and endorsement policy clause is utilized to supply the appropriate clauses.","Other known systems include those disclosed in U.S. Pat. No. 5,666,130 and U.S. Pat. No. 6,006,242. While these systems are different from one another in several ways, both systems use SGML (standard generalized markup language).","Although prior systems are functional, there remains a need for a document generation system that, among other things, can be integrated with existing front-end systems (such as loan generation systems) and existing back-end systems (such as existing printer servers and networks).","In one embodiment, the invention provides a document generation system that may be provided as a service, in the sense that the system fits between front-end systems (e.g., an existing command-line, loan processing system used by a bank) and a printing system (such as a printer server and printers that require information in a printer command language (\u201cPCL\u201d) format). The system takes in information regarding the requirements (e.g., type of transaction, number of parties, amount of loan, price, governing law, etc.) of the document needed (e.g., a loan application, construction contract, etc.) and produces an appropriate form based on the input information.","The service provides a set of APIs to interface with the front-end software. Information from the front-end software is formatted according to a schema, such as an XML schema.","The service uses a knowledge base. In embodiments of the invention, the knowledge base is based on an object relational model rather than a relational database model, and every object or table in the object relational model may have at most one parent. In some embodiments, the knowledge base includes document components, such as, sections, paragraphs, and sentences. These components may be structured according to a markup language such as XML (extensible markup language) and include labels or tags that associate them with particular entities. For example, all Texas branches of a bank (which we will assign the fictitious name \u201cSecondNationWide Bank\u201d) are associated with an identifier for that bank. The documents include embedded rules that are structured according to a rules markup language. For example, a rule might take a form similar to \u201cIf applicable law state=NY, add NY consumer protection clause.\u201d The information regarding the requirements of the needed document is sent to a document assembler. The requirements include an identifier of the party making the request for the document, for example, the Dallas, Tex. branch of SecondNationWide Bank.","The document assembler also receives transaction information (e.g., the amount of a loan) from a transaction data set. The document assembler pulls document components from the knowledge base that meet the requirements delivered to the document assembler. The document assembler executes rules as it encounters them. In the event that the document assembler encounters two or more components in the knowledge base that meet the requirements of the needed document, the assembler chooses the document component according to the identity of the entity requesting the document, or, if no matching component is found, according to the identity of one of the entity's parents or ancestors. If no match is found, a default component is provided. This concept is referred to as \u201cprecedence\u201d or \u201cowner precedence.\u201d","As is apparent from the above, it is an advantage of the present invention to provide methods and systems of creating documents. Other features and advantages of the present invention will become apparent by consideration of the detailed description and accompanying drawings.","Before embodiments of the invention are explained in detail, it is to be understood that the invention is not limited in its application to the details of the construction and the arrangements of the components set forth in the following description or illustrated in the drawings. The invention is capable of still other embodiments and of being practiced or being carried out in various ways. Also, it is to be understood that the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. Further, it is assumed that the reader has at least a rudimentary understanding of markup languages, such as SGML, and working knowledge of XML.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1","b":["10","10","12","14","16","18","20","22"]},"The origination platform  represents a front-end system such as a loan origination system, customer data collection system, or other system used to collect data to be included in one or more desired documents. In addition, the origination platform  provides information regarding the type of document needed or required for the situation at hand. In many circumstances, the origination platform  will be a legacy system, meaning that it is a system that has been used for a relatively long period of time for the purpose of collecting information relevant to a transaction or document need.","The origination platform  communicates with an interface, which in one embodiment of the invention takes the form of an API gateway. In one embodiment of the invention, the gateway  is designed to receive and transmit information that is structured according to one or more XML schemas. The gateway  delivers information to the document selection module or engine . The document selection module  interacts with a knowledge base (discussed below) to create a set of documents that, based on the input data from the origination platform, match or satisfy (at least to some level or degree) the requirements of the transaction. If desired, the document selection engine  may return the listing of documents  to the origination platform for display in a graphical user interface (\u201cGUI\u201d) (not shown) presented to a user such that the user may choose to modify the list of documents in the editing module . For example, a transaction might typically require a form for a cosigner to execute. However, in circumstances where the primary borrower has sufficient creditworthiness, a cosigner may not be required. In that case, the user of the system  may delete the cosigner document from the listing of documents  using the editing module .","The listing of documents  (as edited, as the case may be) is delivered to the document generation module . As shown in , the document generation module  performs four basic functions. The document generation module  validates incoming data (as is represented by a validation module ), applies precedence (as is represented by precedence module ), applies rules to the content (as is represented by a rules application module ), and performs document assembly (as is represented by an assembly module ). Each of these operations will be discussed in greater detail below. Once the appropriate documents are assembled, the system  reviews them to ensure that they are complete. For example, if the amount of a loan has not been specified in the input data originally provided by the origination platform , a question module  queries the origination platform  to request needed information or data . A requirement for data  is added to a set of response messages that is returned to the client along with the assembled documents. The process continues even if all required information is not available or is invalid.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["36","12","22","37","38","12","39"]},"The completed and assembled document or documents are each resolved to an XML file as shown in block  (). Style sheets or other formatting mechanisms are applied, as shown by block , and an output file (or document) is generated. The output file (or document) may be in one of a variety of file formats as is illustrated by three exemplary file format blocks (or documents) , , and  (.pdf, HTML, and other).",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2","FIG. 1"],"b":["50","52","10","52","54","54","56","58","10","52","54","60","61","62","10"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 3"],"b":["54","58","54","12","14","22","22","70","72","54","54","74","76"]},"As best seen by reference to , the content management system  includes a content editor  (which could be, for example, a tool specifically designed to create XML content or even a simple text editor such Windows Notepad) and a content or data store . The data store  includes objects  and rules and cross reference maps connecting objects, or more broadly, references . In one embodiment of the invention, the rules take the form of rules markup created using an XML script or schema (or, more broadly, an architecture or namespace) and may be referred to as \u201cxref\u201d embedded rules.","In one embodiment of the invention, an XML schema is used to define a rules markup language. The schema identifies and declares logical relationships in documents. In the exemplary schema, rules are identified by the namespace prefix \u201crule.\u201d An example is set out below.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Tag>"},{"entry":"\u2003<rule:Condition ConditionType=\u201cEQ\u201d Name=\u201cisMinnesota\u201d>"},{"entry":"\u2003\u2003<rule:Description>Sample condition compares ApplicableLawState to"},{"entry":"\u2018MN\u2019"},{"entry":"\u2003\u2003<\/rule:Description>"},{"entry":"\u2003\u2003<rule:Arguments>"},{"entry":"\u2003\u2003\u2003<rule:ExternalData EntityRef=\u201cApplicableLawState\u201d\/>"},{"entry":"\u2003\u2003\u2003<rule:Constant>MN<\/rule:Constant>"},{"entry":"\u2003\u2003<\/rule:Arguments>"},{"entry":"\u2003<\/rule:Condition>"},{"entry":"<\/Tag>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In an exemplary implementation of the rules markup language, each element in the markup language is described individually. An element may be described using a content model, and the available attributes and their meanings. Each element may be defined using a table of descriptive information such as the one below.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Element Name","RuleBase Type"]},{"entry":[{},"Derives from","DatabaseObjectType"]},{"entry":[{},"Can be contained by"]},{"entry":[{},"Content","EMPTY"]},{"entry":[{},"Content Model"]},{"entry":[{},"Attributes","RuleType"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"\u201cElement Name\u201d is mandatory and is the name of the element. \u201cDerives from\u201d may be inapplicable to the element (if it is a root-level element, for example) or the name of another element if an element derives from another element. An element that is derived from another element can have any attributes defined for the parent element as well as its own set of attributes.","\u201cContent\u201d describes what can be contained in the element. Possible values include:\n\n","\u201cContent Model\u201d provides additional information about \u201cContent\u201d and is written in standard DTD notation; e.g. (+) indicates one or more, (?) indicates optional, (|) indicates alternatives, etc.","\u201cAttributes\u201d lists any attributes that can be specified for the element in addition to any derived from a parent element. If the element has any attributes, a table, such as the one below, may be used to describe those attributes.",{"@attributes":{"id":"p-0055","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Attribute Name","Data Type","Possible Values","Default Values"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","NMTOKEN",{},"Optional"]},{"entry":["Uuid","String",{},"Optional"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"\u201cAttribute Name\u201d is the name of the attribute and is mandatory.","\u201cData Type\u201d can be String, Integer, ID, NMTOKEN or NMTOKENS.","\u201cPossible Values\u201d lists any constants that have been defined for the attribute.","\u201cDefault Values\u201d provides a place to record the default value for the attribute. If no default value has been specified in the schema, the constant \u201cNone\u201d should be used. \u201cNone\u201d is not, in preferred embodiments, a default value.","Using rules markup it is possible to define conditions (using a conditions element) and attach them to an XML element. In the exemplary embodiment, a condition is a Boolean logic structure that evaluates to true or false. It is also possible to define a choose structure (or choose element), which is a set of alternatives along with conditions for choosing an alternative in the set. Iterators (or iterator elements), a structure that specifies the dependency or repetition of content on or from the characteristics of transaction data, may also be defined. In addition, functions (or functions elements) may also be defined. Functions provide a way of specifying data manipulations or transformations.","Elements in the rules markup language may have one of several content ancestries. For example, in one embodiment it is possible for an element to inherit a database object type model. The database object type content model is an abstraction and, as noted, provides information about the type of information the element can hold. A database object type element can contain description and keyword child elements.","It is also possible for an element to inherit a rule base content model. Again, this is an abstraction. A rule base type element is derived from a database object type element and may include a number of possible attribute values, including an XPath, external data or interface, and internal data or interface. An external interface element provides an interface between the rules and other data sources not available inside the document. It is used to identify data by name so that the data can be evaluated by the rules without requiring the rules to be aware of how the name will be resolved. A resolution of an external interface element may be a single value, a set, an XML DOM node, or an XML DOM list (DOM's are explained below).","An external interface element may have what is referred to as a param or parameter content model. The parameter element is used to provide additional information about an external interface element data request.","An external interface element may also have several attributes including an entity reference attribute and a return type attribute. An entity reference attribute is used to specify a named data item, such as the name of a borrower, loan amount, or applicable law state from the transaction data. A return type attribute specifies the type of storage object to be returned, such as XML, array, string, number, etc.","The content management system  interacts with the knowledge base  (again, more specifically the content ). As noted, the knowledge base  may include a number of stored procedures represented (in ) by block . A press process (represented by block ) in conjunction with the stored procedures  takes information from the content management system  and stores the information such that individual rules are associated with individual objects. Objects are stored along with cross reference maps as shown in block . As a consequence, the content (objects) stored in the knowledge base  includes data elements, rules, and language (actual text or content of a document). A data element is a construct that may include rules and text. The content is used, for example, as described with respect to , to create documents such as the documents , , and .","The press process  may be aware of multiple schemas, DTDs, or other file formats or architectures. In the embodiment shown, the process of creating or populating the knowledge base  includes the pairing of XML content or information with a schema, DTD, or the like. If an object  created via the content management system  conforms to one of the architectures known to the press process , it is inserted or stored in the database via the stored procedures , as shown in block . The stored procedures  allow for consistent manipulation of the knowledge base . The knowledge base  can store XML, binary, and other objects. In part, this is due to the structure of the knowledge base  (discussed in more detail with reference to ) which reduces or limits responsibilities of the database or knowledge base , in the sense that attributes are tracked with the database rather than individual objects.",{"@attributes":{"id":"p-0067","num":"0069"},"figref":"FIG. 4A","b":["10","96","12","61","14","52","34","52","34","12","14","30","54","44","46","48","54","97","74","58","54","92","98","99","99","98","58","54"]},"As noted above, embodiments of the invention implement or follow a precedence when assembling document components into a document. In embodiments of the invention, precedence provides a hierarchical control of content to match business preferences. Precedence provides for customer or organization established hierarchies controlling how organization tailored content overrides are evaluated against alternatives, and the nesting of content to arbitrary depths within hierarchical relationships. This concept is illustrated in , which illustrates a document  including various components, such as a section , paragraphs , and sentences .  also illustrates two component assemblies, an assembly  and an assembly , and a piece of override content . The component assembly  represents a document that is assembled based upon the default rules in the knowledge base . The component assembly  represents a document assembled using precedence, resulting in the exclusion of components  and  of component assembly  and the inclusion of component .","Precedence may be further understood through an example. An institution such as a bank or credit union (e.g., our fictitious SecondNationWide Bank) may have different lines of business (lending, home equity, etc.). Within a given line of business (like lending), the institution may offer different products and services, such as those it offers commercial enterprises and those that it offers to consumers. Different documents are used for transactions that make up those products and services. The situation may be modeled with a tree diagram, such as the one below.",{"@attributes":{"id":"p-0070","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Root (Document Generation Software Vendor)"]},{"entry":[{},"\u2003\u2003Institution (SecondNationWide Bank)"]},{"entry":[{},"\u2003\u2003\u2003\u2003Lending"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Commercial"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Credit Application"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Consumer"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Credit Application"]},{"entry":[{},"\u2003\u2003\u2003\u2003Home Equity"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Credit Application"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"As is known, when XML documents are processed in an XML processor a document object model or DOM is created. As is also known, a DOM may be represented as a tree structure with a number of nodes. A node may be an element (such as a root element), processing instructions, an attribute, an attribute value, and namespaces. As a consequence, when a document component or, more broadly, a data structure configured according to embodiments of the invention is processed by an XML processor, processing begins at the root node (as with any other XML structure), which has the lowest precedence. Precedence is applied to override objects of low precedence with objects of higher precedence when applicable.","In some embodiments of the invention, implementing precedence requires that no content be duplicated (that is, content objects are reused), and that the content of the software vendor be read-only. When editing or overriding an object (assuming it's not locked or read-only to prevent editing), a new copy is created with a precedence level equal to or higher than the precedence of the original object. For example, a content editor at the institutional level may open a vendor-level object for editing, which would then create a new object with the vendor-object as a template. When saving, the editor would have the option to save the new object at the institutional, product line, product, etc. levels, but not at the read-only vendor level. When viewing the objects as in a tree structure, new copies of objects are placed in the tree at the same depth of the subject object or deeper.","Within a precedence level, the name attribute provides a unique key (no two objects can have the same value for their name attributes). This requirement is extended within the precedence concept by requiring that when an object is overridden or edited and placed at a new precedence level, the new object retains the same name as its precedence parent. Thus, object names are unique within a particular precedence level, and it is also possible to extract the precedence stack of an object (i.e., all objects with a particular name, yet at different precedence levels). As indicated, an object at any level can be locked, preventing any higher precedence levels from overriding or editing it.","When an object is edited or overridden at a particular precedence level, the new copy created is used for all documents at or below the given precedence level (unless edited or overridden again). In reference to the exemplary tree structure, given two documents at the institutional depth, one document cannot have a vendor-level element while another document has its institutional-level override (both documents would use the institutional-level override). Since editors select objects based on their name, when a particular object is selected, what is provided is the precedence version of the given object that is deepest in the precedence hierarchy, but not deeper than the position of the document being edited. Individual objects (at different precedence levels) should maintain their own version histories, as it is desirable to have the vendor update the base content and be able to propagate new versions (which replace the vendor objects, not any precedence overrides or modifications).","Precedence is based, in part, upon the hierarchy used in the knowledge base .  illustrates an exemplary object relational data model  used in embodiments of the invention. As can be seen by reference to , a unique user identifier table or object  () is the parent to the other tables or objects in the model. Among other attributes, in the embodiment shown the object  includes \u201cclobdata\u201d (character large object data) and \u201cblobdata\u201d (binary large object data). The object  is associated with a master stores table , which includes a listing of the available stores in the knowledge base . In the example shown, the stores include a rules object store  and a rules types store ; a content object stores  and a content types store ; as well as a dictionary objects store, dictionary types store, usage objects store, usage types store, systems objects store, systems types store, standards objects store, standard types store, constants object store, constants types store, category objects store, category types store, citations object store, and citation types store. The number and types of stores are application dependent although having separate content and rules stores , , and ,  provides advantages in some embodiments of the invention. Further, in the embodiment shown, the object\/type table pairs (e.g.,  and ) correspond to the XML schema and each type corresponds to an element in the schema. In other words, every element becomes a type within a store. A review of the model shows that at most each object has one parent and no more. The use of an object relational data structure rather than a conventional relational database means that the knowledge base may be implemented without the numerous tables (often one-hundred or more) and the complexity that comes with using so many tables in such conventional databases.","In embodiments of the invention, the rules  are structured in a decomposed fashion (see ). An additional advantage of such a complimentary use of the object\/relational paradigm is that rows in the relational tables (or object store) may contain a link to either an external object, or an internal binary or character object. Each binary or character object in a row may be composed of XML text fragments that can be processed to create a document. Each row is then cross referenced to another row within the same table structure to create a parent-child relationship without having to parse an XML tree during runtime processing. Cross reference tables (or bill of material structures) are created when the document objects are stored. This reduces or eliminates the requirement of having to open and interrogate each XML object prior to knowing if it needs to be included in the document. This allows for parent-child relationship re-assembly without reading each component.","Having described the exemplary system  and features of embodiments of the invention, additional details regarding various aspects of embodiments of the invention will now be provided.","In some embodiments of the invention, document content may be configured in one of several XML structures. One of these structures may be a package of document selection rules (such as rules 56\/84) used to determine a set of documents. Another structure may be a dynamic document that can resolve to one or more instances of a given document. A third structure may be a static document that is resolved to one or more static forms. A static document generally includes at least some content that is determined before and some content that is determined during the resolution process.",{"@attributes":{"id":"p-0079","num":"0081"},"figref":["FIG. 9","FIG. 9","FIG. 10"],"b":"150"},"As shown, the exemplary dynamic document  includes (or is modeled as having) a root element; namely document element . The document element includes a number of attributes . In the example shown, the attributes include a source attribute, a product family attribute, a document class attribute, a recordable attribute, an applicable law state attribute, a margins state attribute, a document-specific style attribute, and a source name attribute. The attributes  may be used for a variety of purposes including to identify the source of particular content (that is who authored, owns, or sponsors the content); to identify the product for which the document was written; to identify whether the document is a standard document, an addendum to another document, a notice, a rider, or other type or class of document; to identify whether a document is intended to be recorded with a registrar (for example, a registrar of deeds); to indicate the state to which the document applies; to indicate specific margin requirements of the state or other government entity; to specify formatting styles; and to identify the name of a document source (using the previously introduced fictitious example, \u201cSecondNationWide Bank\u201d). Generally, information contained in element content and attributes is not used to guide assembly. Instead, embedded rules use externally supplied data to guide assembly.","The document  also includes zero or more document information elements , zero or more prolog elements , zero or more body elements , zero or more epilog elements , and zero or more appendix elements . The elements , , , , and , in turn, may include their own attributes and sub-elements. Because the creation of a DTD is generally dependent on the specific circumstances for which an XML solution is being developed only a portion of an exemplary DTD that describes the document  will be described. It should be understood, however, that in light of the teachings provided, one of ordinary skill in the art would be able to understand how the exemplary DTD operates in connection with other components of the embodiments described herein.",{"@attributes":{"id":"p-0082","num":"0084"},"figref":["FIG. 11","FIG. 10"],"b":["154","154","164","166","168","169","170","172","170","172","169","174"]},{"@attributes":{"id":"p-0083","num":"0085"},"figref":"FIG. 12","b":["156","156","174","176","178","180","182","184","186","187","174","189","190","191","192"]},{"@attributes":{"id":"p-0084","num":"0086"},"figref":"FIG. 13","b":["158","158","193","194","195","196","197","199","200"]},{"@attributes":{"id":"p-0085","num":"0087"},"figref":"FIG. 14","b":["160","160","202","203","204","205","206","206","207"]},{"@attributes":{"id":"p-0086","num":"0088"},"figref":"FIG. 15","b":["162","162","209","211","213","209"]},{"@attributes":{"id":"p-0087","num":"0089"},"figref":["FIG. 16","FIG. 17"],"b":["230","232","232","230","234","236","240"]},{"@attributes":{"id":"p-0088","num":"0090"},"figref":"FIG. 18","b":["300","300","302","302","304","306","308","304","302","304"]},"The data table element  includes, in some embodiments, all the data values to be used in a specific instance of a template . In one embodiment of the invention, the data table element  defines a structure of data values that can be accessed by name, or by a combination of name and one or more indices. The data in the data table element  drives the application of business rules to transform an abstract instance of the template  into one or more concrete instances and to assign data values to data targets. A data target is a location or area on a composition that can be modified at transaction time. Exemplary data targets include a check box, a text field, a button, or a digital signature placeholder. A data target may have dimensions, presentation characteristics, help text, overflow rules, and other attributes as specified in the applicable schema. The interaction between the data in the data table  and the overflow rules drives the usage of addendum pages, their contents, and quantity.",{"@attributes":{"id":"p-0090","num":"0092"},"figref":["FIG. 19","FIG. 20"],"b":["330","332","330"]},"Referring back to , the instances element  describes how each individual instance of the document is constructed. The instances element  includes a single instance element  at authoring time. The abstract instance is replicated into a plurality of instances at transaction time. In embodiments of the invention, information in the data table may determine the number of instances of a document.","In one embodiment of the invention, an instance element  must include a pages element  and may include an overlays element , a continuations element , and a data table element . As best seen by reference to , each pages element  may include one or more page elements . And, each page element  may include an overlays element  and one or more composition elements . Each overlays element may include one or more overlay elements . Each continuations element  may include one or more continuation elements  and, in one embodiment of the invention, must include one or more overflow default elements . Each data table element  may include one or more datum elements ","Continuations elements tell a processor how to handle overflows. An overflow condition can be created when the data value to be assigned to a field target cannot be drawn in the available space according to the attributes governing that space. Overflow handling is defined as part of the contents of an instance element . An instance element  can have any number of pages, but the overflow handling is independent of those pages. When data for a text target requires more space than is available, a continuation event occurs. Continuation handling falls into three categories. The first of these is a no continuation handling condition, where fields are handled on their original page. Under a no conditional handling condition attributes may specify font reduction that may be applied. The second type of continuation handling is structured handling, where handling of rich data structures such as tables or parties in a tabular format is required on the continuation page. A third type of continuation handling is unstructured handling, where simple data items such as a property description are handled. In an unstructured handling condition several such fields may be continued to the same continuation page and arranged in order along with a caption for each value, a potential forwarding message, and other attributes.","As noted above, pages of a document may be constructed by laying compositions or composition elements (such as one of the composition elements ) on a rendering surface. In general, a composition may be used to describe a unit of information that is authored or composed as a discrete unit. A composition element contains a pre-authored formal description or sequence of text, data, and graphic content meant to be drawn as a unit on a rendering surface. A composition element may correspond to a page, but may also be a partial page or a re-locatable page segment. There can be more than one composition element  for a given rendering surface. The composition elements may be arranged so that they cover an entire rendering surface (for example, one composition element  for the top half of the page and another for the bottom half of the page). Alternatively, composition elements may also be arranged so that a composition element assigned a higher level or level number contains content that masks, complements, modifies, or replaces content in a composition element with a lower level or level number. Compositions can manifest themselves as document pages, page-level overlays or instance-level, conditional overlays.",{"@attributes":{"id":"p-0095","num":"0097"},"figref":"FIG. 22","b":["358","358","370","372","374","376","378","372","380","382","384","386","388","390","392","394","396","398"]},"As noted, embodiments of the invention may include a database or knowledge base (e.g., knowledge base ). Embodiments of the invention may also include a run time instance of the knowledge base  (shown as a runtime database  in ). The runtime database  is where document content can be associated with various levels of precedence and from which the content for a particular document and precedence can be extracted. The runtime database  is generated by the press process  from a content store (such as the content ), which is created by a separate authoring facility (such as the authoring tool ).","As also noted, in some embodiments, the rules 56\/84 are applied to determine the final document content. The rules 56\/84 may be used to select content from various alternatives, but can also be used to generate new content according to information supplied in the transaction data or information . The rules 56\/84 are also used to manipulate and format data. As noted above, the transaction data or information  may be supplied according to an agreed upon schema, such as an XML schema or document type definition (\u201cDTD\u201d). Numerous schemas can be used and supported, so long as the schema is agreed upon by the service and service user before the transaction occurs. Each supported transaction schema has an associated resolution catalogue, which may also be an XML document. The resolution catalogue defines the mapping of transaction data to text identifiers used in document components. The resolution methodology used in some embodiments leverages technologies based on XPath (directions for how to get from one place in an XML document to another or how to retrieve elements from an XML document) and XSLT (extensible style sheet language transformations) standards to access transaction data.","In embodiments of the invention it is possible that various data structure may have the same name. For example, the knowledge base may be populated with content from unaffiliated sources and it is possible that the sources used the same names for different structures or components of structures. Thus, it is useful to ensure that names for various data structures properly map.","In embodiments of the invention it is possible to handle name conflicts and discrepancies by performing a dynamic resolution. In some embodiments of the invention, dynamic resolution employs what is called a resolution catalogue. A resolution catalogue may be a collection of XPath statements. The resolution catalog provides a one-to-one correlation of a path (e.g., an XPath) into a data set versus the name of interest. As noted, documents are generated based on transaction information, which may take the form of a transaction XML packet. As also noted, the XML packet may include a list of documents and a transaction data set. The XML processor uses resolution catalogs to evaluate the names to data in the transaction data set. The resolution catalogs inherently prevent name conflicts, as the transaction data is linked to an appropriate catalog based on, for example, the source of the content being used.","As should be apparent to one of ordinary skill in the art, the systems shown in the figures are models of what actual systems might be like. Many of the components and logical structures described are capable of being implemented in software which may be stored as instructions on a computer readable medium (such as an optical disc, disc drive, RAM, ROM, etc.) and executed by a microprocessor or a similar device. Many of the same components are also capable of being implemented in hardware using a variety of components including, for example, application specific integrated circuits (\u201cASICs\u201d). In addition, capitalized terms, such as \u201cRootDatum\u201d are used. Use of such terms is made to be consistent with common industry and programming practices or to make reference to diagrams easier for the reader. Nothing, however, should be construed as limiting the breadth of such terms merely because they have been capitalized. It should also be understood that while the above description focused on the assembling of documents, the content assembled could take a variety of forms. For example, MPEG files could be assembled using techniques described herein. Similarly, other computer-processable components could be configured according to markup and other mechanisms discussed herein and be assembled to create, for example an album of music files, video files, or photographs.","As can be seen from the above, the present invention provides a system and method of creating documents and assembling computer-processable components. Additional features and advantages of the invention are set forth in the appended claims."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the drawings:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 7A-7D"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 20","FIG. 19"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 22"}]},"DETDESC":[{},{}]}
