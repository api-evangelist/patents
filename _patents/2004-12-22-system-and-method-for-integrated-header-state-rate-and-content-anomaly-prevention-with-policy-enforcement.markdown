---
title: System and method for integrated header, state, rate and content anomaly prevention with policy enforcement
abstract: The present invention provides an integrated prevention of header, state, rate and content anomalies along with network policy enforcement. A hardware based apparatus classifies layers  and  network data and maintains rate-thresholds through continuous and adaptive learning. In the process of classifying the packets, the apparatus can determine header and state anomalies and drop packets containing those anomalies. Accurate detection and prevention of layer  content anomalies is achieved using fragment assembly, TCP reorder and retransmission removal components, which also identify anomalies in those areas. Content inspection is achieved at high speed through a Content Inspection Engine. The apparatus integrates advantageous solutions to prevent anomalous packets and enables a policy based packet filter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07602731&OS=07602731&RS=07602731
owner: IntruGuard Devices, Inc.
number: 07602731
owner_city: Sunnyvale
owner_country: US
publication_date: 20041222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","DESCRIPTION OF THE BACKGROUND ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to U.S. Patent Application No. 10\/759,799, filed Jan. 15, 2004, now U.S. Pat. No. 7,426,634, entitled \u201cMETHOD AND APPARATUS FOR RATE BASED DENIAL OF SERVICE ATTACK DETECTION AND PREVENTION\u201d and U.S. patent application No. 10\/984,244, filed Nov. 8, 2004, now U.S. Pat. No. 7,356,663, entitled \u201cLAYERED MEMORY ARCHITECTURE FOR DETERMINISTIC FINITE AUTOMATON BASED STRING MATCHING USEFUL IN NETWORK INTRUSION DETECTION AND PREVENTION SYSTEMS AND APPARATUSES, \u201d which are incorporated herein by reference.","The present invention relates generally to intrusion prevention and more particular to an integrated system and methods for the prevention of network header, state, rate, and content anomalies with policy enforcement.","Intrusion prevention appliances have been widely available in the last few years. Published U.S. patent application Nos. 20030004688, 20030004689, 20030009699, 20030014662, 20030204632, 20030123452, 20030123447, 20030097557, and 20030041266 disclose systems, methods and techniques that primarily focused on content, header and state anomaly based intrusion prevention with little or no emphasis on adaptive rate anomalies. These prior systems find rate anomalies using either a profile based approach or fixed thresholds.","As one skilled in the art knows, internet attacks have been growing in complexity and have been more wide-spread due to a variety of readily available attack toolkits. To protect critical resources, a new intrusion prevention method and system is therefore necessary to thwart attacks on these fronts at line-speeds available today. The present invention addresses this need.","The present invention fulfills the aforementioned need and desire for a new intrusion prevention system, method and apparatus with a single appliance that is capable of protecting critical servers and networks from protocol header, state, rate and content anomalies while enforcing network policies.","While it is impossible to predict the behavior of all types of future attacks, current trends in attacks lead to certain known categories of attacks, viz. pre-attack probes, header anomalies, state anomalies, rate anomalies and content anomalies. Some of these known attacks can be prevented using policy lookup. Policies such as denying protocols, ports, IP-address ranges can in fact deny several types of known attacks.","The inventive system disclosed herein provides copper and optical connectivity. A Packet Interface block interfaces with external network through a PHY and a MAC device and buffers packets until a decision has been made about them. A Classifier interfaces with Packet interface to classifier. The Rate Anomaly Meters receive classifier output and maintain the instantaneous packet-rates and compare against the thresholds set adaptively and continuously by the controlling host.","If the specific type of packets exceeds the rate threshold, packets of that type or belonging to that group are discarded for a certain time period. The anomaly engines drop packets that have header or state anomalies in different layers of protocol.","A fragment reassembly engine reassembles any fragments according to processes well-known in the art. Assembled or unfragmented packets are then sent to an engine that removes any reordering issues or retransmission anomalies for TCP packets.","Ordered TCP as well as non-TCP packets are then sent to relevant protocol normalization engines. The derived layers , ,  and  header-parameters and state information are then used by the Multi-rule search engine to find a rule-set that matches the incoming packet.","A rule-matching engine drives the content inspection engine to validate if contents of the packet match any of the anomalous signatures. A Stateful sub-rule traversal engine then validates if further contents of the packet meet sub-signatures of the rule.","If a rule match is found, it is added to the event queue corresponding to the packet. A packet may match multiple rules.","After all the rules matches have been performed, a decision multiplexer picks the highest priority rule match and informs the MAC interface whether to let the packet through or to drop the packet. Allowed packets are then sent out.","An object of the present invention is to provide a high-rate hardware based integrated system and method of preventing network packets across, the packets having","layers , , , and  header anomalies;","layers , , , and  state transition and state based anomalies;","layers , , , and  rate anomalies as detected by the system which is continuously and adaptively adjusting rate thresholds;","characteristics of network probes or reconnaissance as detected by certain meters;","content anomalies as defined by a set of content rules; or","violate network policies as set by a system administrator.","Still further objects and advantages of the present invention will become apparent to one skilled in the art upon reading and understanding the preferred embodiments described below with reference to the following drawings.","The present invention provides an integrated intrusion prevention solution. A single hardware based appliance integrates a plurality of mechanisms to prevent different anomalies and enables a policy based packet filter.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["101","100","110","111","112","113"]},"Network inbound packets  enter the apparatus  and exit as cleansed inbound packets . Similarly, network outbound packets  enter the apparatus  and exit as cleansed outbound packets . The dropped packets make the difference between packets at ingress and at egress. For the purpose of forensic analysis, these dropped packets are routed to two forensic ports viz. the Dropped Inbound Packets , and the Dropped Outbound Packets .","Packets entering the system  are buffered in the Packet Interface block . A copy of these packets is passed to the Classifier  which passes on the header and other relevant information over the Classification bus  to the subsequent blocks for decision making. The Packet Interface block  receives a multiplexed decision about each packet buffered within and either allows the packets or drops the packets. The drop packets are optionally copied to the forensic ports  and .","The decision making operation of determining which packets need to be dropped is handled by the four major blocks, viz. the Header and State Anomaly Prevention , the Rate Anomaly and Reconnaissance Prevention , the Content Anomaly Prevention , and the Policy Lookup Engine . They send the results to the Decision Multiplexer  via the Decision bus .","A controlling host uses the Host Interface  to read the controlling parameter and set the parameters of different blocks via the Host Interface Bus . The controlling host also reads events related to policy violations and anomalies. In some embodiments, these events are subsequently logged and\/or analyzed.","The Header Anomaly Prevention block within  prevents packets that have layers , ,  and  header anomalies according to protocols under consideration. For example, in an exemplary embodiment of this invention, layer  header anomaly prevention looks for packets that are marked IPV4 packets in layer  header but do not have version 4 in the IP header. Similarly, besides other anomalies, layer  header anomaly prevention block looks for TCP packets that have illegal flag combinations such as SYN and FIN set together. In an exemplary embodiment of this invention, the layer  header anomaly prevention block looks for anomalous behavior such as non-HTTP traffic on port .","The State Anomaly Prevention block within  prevents packets that violate standard state transitions in protocols. In an exemplary embodiment of this invention, the layer  state anomaly prevention block prevents packets that do not belong to any established connection and have ACK bit on in the TCP flags. In an exemplary embodiment of this invention, the layer  state anomaly prevention block prevents HTTP packets that have a GET as the method, but do not have a valid URI parameter.","The Continuous and Adaptive Rate Anomaly Prevention block within  prevents instantaneous rate anomaly as detected through continuous and adaptive learning. In an exemplary embodiment of this invention, rate anomalies at network layers , ,  and  are to be detected and prevented by this block. As an example, TCP option rate anomaly is prevented by seeing\/detecting packets with a specific TCP option type exceeding their adaptively learnt threshold.","The Reconnaissance Prevention block within  prevents reconnaissance (recon) activities. In an exemplary embodiment of this invention, as an example, one of the recon prevention schemes is implemented utilizing a port-scan counter.","The Content Anomaly Prevention block  prevents packets that match known signature of attacks in the application content of the packet. In an exemplary embodiment of this invention, these rules consist of signatures in the packet anywhere or within specifically parsed areas of the packets such as HTTP URI, or other parameters. In an exemplary embodiment of this invention, necessary packet normalization for accurate content inspection may be supplemented with processing such as fragment reassembly, TCP assembly, reordering, retransmission removal, URI normalization, etc. The purpose of such normalization is to send normalized packets for content inspection.","The Policy Lookup engine  prevents packets that violate the network policies set by an administrator. In an exemplary embodiment of the current inventions, the policies are set by the administrator and consist of rules which allow or deny packets based on interface, source IP address, destination IP address, IPV4 or IPV6 protocol, source port, destination port, and\/or ICMP type and code.","The Decision Multiplexer block  receives decisions from decision making blocks , , , and  over the Decision bus  and combines them as a single decision and forwards them to the Packet Interface block .","The controlling host can read the control registers and set them to manage the functionality of different components. The Host Interface block  accesses other blocks through the Host Interface Bus . The controlling host can also read the statistics related to packets being dropped due to anomalies or policy violation. The controlling host can then use this data for logging and analysis.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 2","FIG. 1"],"b":["100","201"]},"The Classifier  is further illustrated in detail through the Layer  Classifier , the Layer  Classifier , the Fragment Reassembly Engine , the TCP Reorder Processing and Retransmission Removal Engine , the Layer  Classifier , the Layer  Classifier , and the Protocol Normalization Engine .","The Layer  Classifier  receives frames from Packet Interface  and classifies packets based on their layer  characteristics. It parses the layer  headers and passes that information to subsequent logic blocks over the Classification Bus . In an exemplary embodiment of this invention, this block can parse Ethernet frames and IEEE 802.2\/3 frames and can determine ARP, RARP, Broadcast, Multicast, non-IP, VLAN tagged frames, and double encapsulated VLAN tagged frames.","The Layer  Classifier  receives packet data as well as layer  classifier information from the Layer  Classifier . It extracts the layer  header information in IPV4 and IPV6 headers and passes it on to the subsequent logic over the Classification Bus . In some embodiments of this invention, the Classifier parses IPV4 and IPV packets and determines properties such as TOS, IP Options, fragmentation, and layer  protocol.","The Fragment Reassembly Engine  receives layer  header information from the Layer  Classifier  as well as the packet data. In cases where the Layer  Classifier  informs that this packet is a fragmented packet, the Fragment Reassembly Engine  requests the Packet Interface Block  to hold the packet. It also informs subsequent blocks not to inspect the packet as it is not yet assembled. It stores the information about fragments in its internal data-structures related to reassembly. Packets that are not fragmented are passed through. A timeout based mechanism is then used to wait until all the fragments that belong together have been received. An ager based mechanism periodically wakes up and determines whether some fragments are over-age and discards them from memory.","Once the Fragment Reassembly Engine  determines that all fragments are in-order and do not violate any fragmentation related anomalies, it requests the Packet Interface Engine  to re-release them in-order. These packets are then passed through the subsequent blocks in order for further inspection. The Fragment Reassembly Engine  therefore guarantees that blocks subsequent to it always receive datagram fragments in-order.","The Fragment Reassembly Engine  also determines whether there are fragmentation related anomalies and, if so, marks those packets as invalid and informs the decision to the Decision Multiplexer  over the Decision Bus . The techniques necessary to achieve fragment assembly as well as fragmentation related anomaly prevention are well known to those skilled in the art and thus are not further described herein. The allowed assembled packets leave as original unmodified packets with their own packet ID, but they leave the Fragment Reassembly Engine  in order so that subsequent blocks can inspect the content in order.","The Layer  Classifier , similarly, parses the layer  information from packets that are guaranteed to be free of fragmentation. In an exemplary embodiment of this invention this classifier looks at TCP, UDP, ICMP, IPSec-ESP, and IPSec-AH headers. This information is passed to the subsequent blocks over the Classification Bus . In an exemplary embodiment of this invention, this classifier can parse layer  information such as TCP Options, TCP ports, UDP Ports, ICMP types\/codes, TCP flags, sequence numbers, ACK numbers etc.","Packets that are anomalous are dropped.","The TCP Reordering Processing and Retransmission Removal Engine  receives classified packets from the Layer  Classifier . It only monitors TCP packets and it passes the rest further to subsequent blocks for further inspections. It creates connection states in memory tables and ensures that packets follow well-known TCP state transitions. Packets that are anomalous are dropped through a decision sent over the Decision Bus  to the Decision Multiplexer . In a preferred embodiment of this invention, this block further checks whether the packet's TCP sequence number is in order and within the receiver's window. Packets that are outside the window are dropped through the Decision Multiplexer . Packets that are in-order and not retransmissions are passed through.","For all packets within the window that have not been acknowledged yet, a CRC based checksum is saved as part of the state for the connection. It requests subsequent blocks not to inspect the packets which are out of order. It holds data structure related to such packets in memory. For every such packet stored in memory, a self-generated ACK is sent to the sender to facilitate quicker reordering. A timeout based mechanism is then used to wait until expected sequence number arrives for the connection. An ager based mechanism periodically wakes up and determines whether some packets are over-age and discards them from memory. The ordered packets are then passed through the subsequent blocks in order for further inspection. This way, the subsequent blocks can always assume that TCP packets will always be in-order.","The engine  also determines whether there are retransmission related anomalies and, if so, marks those packets as invalid and informs the decision to the Decision Multiplexer  over the Decision Bus . Retransmission anomalies are determined using the CRC based checksum stored. Retransmitted packets that are equal or larger than the previous transmission can be determined to be anomalous through a CRC comparison. Retransmissions that are smaller than earlier transmission are discarded. The techniques necessary to achieve TCP reordering as well as retransmission related anomaly prevention are well known to those skilled in the art and thus are not further described herein. The allowed ordered packets leave as original unmodified packets with their own packet ID, but they leave the engine  in order so that subsequent blocks can inspect the content in order.","The Layer  Classifier  receives un-fragmented IP, ordered TCP and other packets, and parses layer  header information. In an exemplary embodiment of this invention, this block parses headers of protocols such as FTP, HTTP, TELNET, DNS, SMTP, POP, RPC, etc. It does so using stateful parsing techniques well-known to those aware of the art.","In an embodiment of this invention, the FTP classifier within  determines the commands and replies being used in the FTP packets. Commands parsed include USER,PASS, ACCT, CWD, CDUP, SMNT, REIN, QUIT, PORT, PASV, TYPE, STRU, MODE, RETR, STOR, STOU, APPE, ALLO, REST, RNFR, RNTO, ABOR, DELE, RMD, MKD, PWD, LIST, NLST, SITE, SYST, STAT, HELP, NOOP. 3-digit reply codes are parsed as well and grouped as positive and negative.","In an embodiment of this invention, the HTTP classifier within  determines the requests and replies being used in the HTTP packets. Requests are parsed as Method, Request-URI, Request-Header Fields, and HTTP-Version. The Method is further classified as OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT, and extension methods. The request URI is isolated and passed further. Request-Header Fields such as Accept-Charset, Accept-Encoding, Accept-Language, Authorization, Expect, From, Host, If-Match, If-Modified-Since, If-None-Match, If-Range, If-Unmodified-Since, Max-Forwards, Proxy-Authorization, Range, Referer, TE, User-Agent. 3-digit status codes are parsed as well and grouped as positive and negative.","In an embodiment of this invention, the TELNET classifier within  determines the telnet commands. The commands classified are SE, NOP, Data Mark, Break, Interrupt Process, Abort Output, Are you there, Erase character, Erase line, Go ahead, SB, WILL, Won't, Do, Don't and IAC.","In an embodiment of this invention, the TELNET classifier within  determines the telnet commands. The commands classified are SE, NOP, Data Mark, Break, Interrupt Process, Abort Output, Are you there, Erase character, Erase line, Go ahead, SB, WILL, Won't, Do, Don't and IAC.","In an embodiment of this invention, the DNS classifier within  parses the DNS queries. The parser breaks the DNS message into Header, Question, Answer, Authority, and Additional sections. The header is further parsed to determine whether the message is a query, response or some other code. The Question section is further parsed as QNAME, QTYPE and QCLASS. The Answer section is further classified as resource record (RR) consisting of Domain Name, Type, Class, TTL, and Resource data length.","In an embodiment of this invention, the SMTP classifier within  parses the SMTP commands and replies. The commands are further parsed as EHLO, HELO, MAIL, RCPT, DATA, RSET, VRFY, EXPN, HELP, NOOP, and QUIT. Replies are further decoded as positive and negative.","In an embodiment of this invention, the POP classifier within  parses the POP commands and responses. The commands are further parsed as USER, PASS, APOP, QUIT, STAT, LIST, RETR, DELE, NOOP, RSET, TOP, UIDL, and QUIT. Responses are further decoded as positive and negative.","In an embodiment of this invention, the RPC classifier within  parses the RPC message. The message is parsed as transaction id, followed by the call or reply. The call is further parsed as RPC version, program number, version number, procedure and the rest of the call body. The reply is further parsed as accepted or denied.","Protocol Normalization Engine  receives classified packets and normalizes the parsed data so that it can be inspected for content anomalies. In a preferred embodiment of the invention, the normalization is done for URI portion of the within HTTP. The normalizations include Hex-encoding, Double Percent Hex-encoding, Double Nibble Hex Encoding, First Nibble Hex Encoding, Second Nibble Hex Encoding, UTF-8 Encoding, UTF-8 Bare Byte Encoding, Unicode, Microsoft % U encoding, Alt-Unicode, Double encode, IIS Flip Slash, White-space, etc. In a preferred embodiment of this invention the normalization is done for RPC records by consolidating records broken into more than one record fragment into a single record fragment. In a preferred embodiment of this invention, the TELNET protocol normalization removes negotiation sequences. This normalization prunes negotiation code by copying all non-negotiation data from the packet. In a preferred embodiment of this invention, the TELNET normalization is also performed on the FTP packets.","The Continuous and Adaptive Rate Anomaly block within  is further illustrated in the Layer  Rate Anomaly Meters , the Layer  Rate Anomaly Meters , the Layer  Rate Anomaly Meters , and the Layer  Rate Anomaly Meters . The meters , , and  continuously and adaptively determine rate thresholds for layers ,  and  network parameters and determine whether flood is occurring for any of the parameters. A controlling host uses the Host Interface  to learn the rate and set the threshold. All the meters support a two way communication with the host through the Host Interface Bus . The above referenced co-pending U.S. patent application No. 10\/759,799, now U.S. Pat. No. 7,426,634, entitled \u201cMETHOD AND APPARATUS FOR RATE BASED DENIAL OF SERVICE ATTACK DETECTION AND PREVENTION,\u201d discusses in detail how rate based denial of service attacks can be prevented using a continuous and adaptive learning approach for layers ,  and  based attacks.","The Layer  Rate Anomaly Meters  continuously and adaptively determine rate thresholds for layer  network parameters and determine whether flood is occurring for any of the parameters. In an exemplary embodiment of this invention, the apparatus  can detect and prevent following application layer floods:\n\n","According to the invention, a HTTP Request Rate Anomaly Meter prevents different request methods such as GET, PUT, POST etc. from being used more often than the previously observed threshold. A HTTP Failure Floods Meter prevents http failure floods where a single source continuously fails in getting an HTTP request serviced through HTTP negative reply status code above 400. A FTP Request Rate Anomaly Meter prevents different request methods such as RETR, STOR, USER, PORT, ABOR, etc. from being used more often than the previously observed threshold. A FTP Failure Floods prevents FTP failure floods where a single source continuously having negative replies above code . The Host Interface Bus  is used to inform the controlling host, via the Host Interface , of the continuous rates being learnt so that the controlling host can adaptively set the thresholds for layer  Rate Anomaly Meters .","The Recon Prevention sub-block within  is further illustrated in the Layer  Recon Prevention sub-block within  and the Layer  Recon Prevention sub-block within . The Layer  Recon Prevention sub-block within  prevents reconnaissance activity at layer . In an exemplary embodiment of this invention, this block prevents IP-address scanning, using information received from the layer  classifier and determines whether a single source is connecting to many IP addresses within a short interval. In another embodiment of this invention, this block prevents dark-address scanning, using information received from the layer  classifier and determines whether a source is scanning unused IP address ranges.","The Layer  Recon Prevention sub-block within  prevents reconnaissance activity at layer . In an exemplary embodiment of this invention, this block prevents port-scanning, using information received from the layer  and layer  classifiers and determines whether a single source is connecting to many layer  TCP\/UDP ports within a short interval.","The Header and State Anomaly Prevention block within  is further illustrated in the Layer  Anomaly Engine , the Layer  Anomaly Engine , the Layer  Anomaly Engine , and the Layer  Anomaly Engine . The Engines , ,  and  receive corresponding classifier outputs over the Classification Bus  and determine whether the header has any anomaly or whether the state transition due to header values leads to anomalies. The packets determined to be anomalous are dropped via a decision sent over the Decision Bus  to the Decision Multiplexer .","In some embodiments, the Layer  Anomaly Engine  detects and prevents IPV4 packets that have one or more of the following anomalies:\n\n","In some embodiments, the Layer  Anomaly Engine  detects and prevents IPV6 packets that have one or more of the following anomalies:\n\n","In some embodiments, the Layer  Anomaly Engine  also prevents fragmented packets that have over assembly related anomalies as detected by Fragment Assembly Engine .","In some embodiments, the Layer  Anomaly Engine , detects and prevents TCP packets that have one or more of the following anomalies:\n\n","In some embodiments, the Layer  State Anomaly Engine , detects and prevents UDP packets that have one or more of the following anomalies:\n\n","In some embodiments, the Layer  State Anomaly Engine  detects and prevents TCP packets that violate valid state transitions that are expected by standard TCP state machines. For this purpose, it receives information from the Layer  Classifier  and the TCP Reorder Processing and Retransmission Removal Engine . Packets that are outside the receiver's window as maintained by the state table are also dropped for being anomalous. Retransmitted packets that are determined by the Retransmission Removal engine  to be different from the original transmission are also dropped by the Layer  State Anomaly Engine .","In some embodiments, the Layer  Anomaly Engine  prevents state transition anomalies at layer  protocols such as HTTP, e.g., the GET keyword for request method must be followed by a URI. Similarly, the FTP protocol Anomaly Engine within  can identify requests that are within the allowed requests as defined in the RFC.","The Content Anomaly Prevention block  is further illustrated via its sub-components Multi-Rule Search Engine , Rule Matching Engine , Stateful Sub-rule Traversal Engine , Event Queuing Engine , and Content Inspection Engine . The Multi-rule Search Engine  gets classification information from the Classification Bus . Part of this information, viz. Interface, Source IP Address, Destination IP Address, Protocol, Source Port, and Destination Port, is used to first search through a search engine to determine whether the packet violates any policies. If so, the packet is dropped through a decision conveyed over the Decision Bus  to the Decision Multiplexer .","If the search matches certain rules and requires further content inspection, the Rule Matching Engine  sends the assembled, ordered, normalized data to the Content Inspection Engine . An external host loads the contents of the BRAM, SRAM, and DRAM of the Content Inspection Engine  with necessary signatures corresponding to the rule-sets through the Host Interface  over the Host Interface Bus .","The Content Inspection Engine  can start the initial state at a specific point where the last match for the previous packet had occurred. This helps in statefully matching the strings across packets.","Once the Rule Matching Engine  determines, via the Content Inspection Engine , that the packet matches at least one of the signatures, it needs to statefully walk through all the optional sub-signatures within the rule. The statefulness is required because the signatures may be split across fragmented packets or reordered packets. For this purpose, the state of the last match where it was left is kept in the memory for the specific connection.","Once all signatures are found to be present in the packet, the rule is said to be matched. Such a match is denoted as an event. This event is queued against the packet's ID in the Event Queuing Engine .","A packet may match multiple such events. A priority scheme within the Event Queuing Engine  picks the highest priority event from the determined events for the packet and informs the corresponding decision to the Decision Multiplexer  over the Decision Bus .","Blocks such as , , , , , , , , , , and  inform of their decision, whether to drop the packet or not, to the Decision Multiplexer .",{"@attributes":{"id":"p-0083","num":"0114"},"figref":["FIG. 3","FIG. 2"],"b":["221","221","4","301","302","303","304"]},"The Packet Buffers  (PB through PB) allow incoming packets to be buffered until all processing has been done on them. Once a packet buffer is filled and available for processing, the Load Balancing Arbiter assigns  the buffer to an available processing engine out of the available pool from , ,  and , depending on the type of requested operation. This is done in a way to optimize the resources. The packet data arrives from the preceding blocks via the Packet Data signal  with a corresponding Packet ID . The preceding block can flush the packet using the Flush Packet signal  and the corresponding Packet ID , after all the processing has been completed on the packet.","The Operation Code on the packet buffer is identified using Op Code signal . This can be one of the four corresponding to the four engines. Other parameters such as Initial State , Case-no-case , Offset , Limit , and Matching Rule-set\/String ID , are provided to the engines through the input interface.","The engines provide (output) the following parameters: Last State , Offset , Matched Output ID , corresponding Packet ID , match , no match , and partial match . These are used by the preceding blocks, i.e., the Rule Matching Engine , and the Stateful Sub-rule Traversal Engine .","The engines use the RAM , the SRAM , and the DRAM  per their needs for storage of states, strings, outputs, and any other relevant data structures. These memory areas are initialized through the Host Interface  by the controlling host using the Host Commands . The host can also read statistics related to matches and errors using  and .","For set-wise string matching at high rate, the set-wise rule matching engine  advantageously utilizes the innovative layered memory architecture, system, and method disclosed in the above-referenced co-pending U.S. patent application No. 10\/984,244, now U.S. Pat. 7,356,663, entitled \u201cLAYERED MEMORY ARCHITECTURE FOR DETERMINISTIC FINITE AUTOMATON BASED STRING MATCHING USEFUL IN NETWORK INTRUSION DETECTION AND PREVENTION SYSTEMS AND APPARATUSES.\u201d","The String Conversion Engine  allows the strings in various formats such as hexadecimal, decimal, octal, binary to be converted to numbers.","The String Comparison Engine  compares incoming packet's sub-strings with signature-strings stored in DRAM at given offsets and within limits.","The PCRE Engine  matches Perl Compatible Regular Expressions with incoming packet's sub-strings with a given Perl-Compatible Regular Expression automata stored in DRAM at given offsets and within limits.",{"@attributes":{"id":"p-0092","num":"0123"},"figref":["FIG. 4","FIG. 2","FIG. 4"],"b":["400","403","404","405","406","401","402"]},"A Quad-port 10\/100\/1000 Mbps transceiver  interfaces with the copper or fiber interfaces and passes the signals further to a Quad-port MAC . The subsequent blocks described above with reference to  are implemented using four FPGAs , ,  and . Each of these FPGAs has a provision of buffering packets and other relevant information using SRAM , , , and , and DRAM , , , and . The third FPGA  uses a high speed Network Search Engine  to search through a set of rules stored therein. This is also used as a policy lookup engine.","In some embodiments, the host interface is implemented using a PCI Host Bridge . The host can control the logic blocks in different FPGAs, the NSE and the Quad-port MAC, via the PCI Local Bus . The FPGAs communicate classification information over the Classification Bus  and the decisions over Decision Bus . The controlling host can access the statistics related to events of dropping the packets due to anomalies or policy violations through the same PCI interface and use that information to log the events for further analysis.","Although the present invention and its advantages have been described in detail, it should be understood that the present invention is not limited to or defined by what is shown or discussed herein. For example, the logic in the four FPGAs , ,  and  may be combined in a custom silicon ASIC while providing the same functionality.","Moreover, as one skilled in the art will appreciate, any digital computer systems can be configured or otherwise programmed to implement the methods and apparatuses disclosed herein, and to the extent that a particular digital computer system is configured to implement the methods and apparatuses of this invention, it is within the scope and spirit of the present invention. Once a digital computer system is programmed to perform particular functions pursuant to computer-executable instructions from program software that implements the present invention, it in effect becomes a special purpose computer particular to the present invention. The techniques necessary to achieve this are well known to those skilled in the art and thus are not further described herein.","Computer executable instructions implementing the methods and techniques of the present invention can be distributed to users on a computer-readable medium and are often copied onto a hard disk or other storage medium. When such a program of instructions is to be executed, it is usually loaded into the random access memory of the computer, thereby configuring the computer to act in accordance with the techniques disclosed herein. All these operations are well known to those skilled in the art and thus are not further described herein. The term \u201ccomputer-readable medium\u201d encompasses distribution media, intermediate storage media, execution memory of a computer, and any other medium or device capable of storing for later reading by a computer a computer program implementing the present invention.","Accordingly, drawings, tables, and description disclosed herein illustrate technologies related to the invention, show examples of the invention, and provide examples of using the invention and are not to be construed as limiting the present invention. Known methods, techniques, or systems may be discussed without giving details, so to avoid obscuring the principles of the invention. As it will be appreciated by one of ordinary skill in the art, the present invention can be implemented, modified, or otherwise altered without departing from the principles and spirit of the present invention. Therefore, the scope of the present invention should be determined by the following claims and their legal equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 4","FIG. 2"]}]},"DETDESC":[{},{}]}
