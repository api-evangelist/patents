---
title: Universal support for multiple external messaging systems
abstract: A method, system, computer system, computer program product and application programming interface to support the use of multiple external messaging systems from within an application program and to track activities performed using any of the multiple external messaging systems. The application program allows a preferred messaging system to prepare, send, and receive messages from within the application program to be specified for each user of the application program. Multiple external messaging systems are available to be configured as the preferred or default messaging system for a given user. Activities performed using any of the external messaging systems can be tracked in a comprehensive collection of data about activity performed via the application program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08965980&OS=08965980&RS=08965980
owner: Siebel Systems, Inc.
number: 08965980
owner_city: San Mateo
owner_country: US
publication_date: 20030327
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["Portions of this patent application contain materials that are subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document, or the patent disclosure, as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","This invention relates to messaging systems, and more particularly, to supporting the use of multiple external messaging systems in an application program.","2. Description of the Related Art","In a 24\u00d77 international business environment, electronic messaging provides a convenient way for companies to communicate with customers all over the globe. Currently, many companies have dedicated e-mail inboxes defined for specific business areas. Often, employees called agents are assigned to poll and manage the support requests from customers for one or more dedicated e-mail inboxes, as well as from their individual agent inboxes. With customer support centers handling very large numbers of customer support requests daily, increasing the efficiency of each agent in responding to each customer request by only seconds can produce enormous cost savings for the customer support center.","To provide international support, companies must be able to communicate with customers using a variety of electronic messaging systems. If a company wishes to implement a customer support center where agents can communicate using multiple messaging systems, typically the company must purchase different software products to handle each messaging system because of the different communication protocols involved. Because different products must be purchased, agents must learn to use a different user interface for each messaging system. Efficiency of an agent typically degrades when he or she must remember different user interfaces for communicating with customers via different messaging systems.","Furthermore, tracking activities performed by a customer support center when agents are using many different application programs is cumbersome. It is desirable to capture data about all customer service activity, regardless of the application program used to perform the activity. Thus, it is desirable to enable customer service agents to communicate with customers using a variety of messaging systems and to track all activities performed, regardless of the application program used to perform the activity.","The present invention provides an application program capable of supporting multiple external messaging systems and tracking activities performed using any of the multiple external messaging systems. The application program allows a preferred messaging system to prepare, send, and receive messages from within the application program to be specified for each user of the application program. Multiple external messaging systems are available to be configured as the preferred or default messaging system for a given user. Activities performed using any of the external messaging systems can be tracked in a comprehensive collection of data about customer service activity.","In one embodiment, a method includes providing data related to a message to a selected message client upon launching the selected message client. The selected message client is one of multiple message clients configured to use the data to prepare the message, and at least two the message clients operate independently of the program providing the data.","In another embodiment, a method includes receiving data about a message from a selected message client when the message is sent. The selected message client is one of a plurality of message clients configured to provide the data, and at least two of the message clients operate independently of a program receiving the data.","In another embodiment, a method includes dynamically communicating data related to a message between a program and a selected message client. The selected message client is one of a plurality of message clients configured to use the data to prepare the message, and at least two the message clients operate independently of the program.","In yet another embodiment, an application programming interface includes a receiving function to receive data about a message from a selected message client when the message is sent. The selected message client is one of a plurality of message clients configured to provide the data; and at least two of the message clients operate independently of a program comprising the receiving function. The receiving function is configured to receive data related to a second message from a second message client of the message clients without changing the receiving function. The application programming interface can further include a providing function to provide second data related to the message upon launching the selected message client. The application programming interface may further include a deleting function to delete an activity record that was created upon launching the selected message client, wherein the deleting function is invoked when the message is not sent. The application programming interface may also include a get parameter function to obtain parameters for launching the selected message client.","In still another embodiment, an application programming interface includes a providing function to provide data related to a message to a selected message client upon launching the selected message client. The selected message client is one of a plurality of message clients configured to use the data to prepare the message, and at least two of the message clients operate independently of the providing module. The providing function is configured to provide second data related to a second message to a second message client of the message clients without changing the providing function. The application programming interface can further include a receiving function to receive second data about the message from the selected message client when the message is sent. The application programming interface can further include a deleting function to delete an activity record that was created upon launching the selected message client, wherein the deleting function is invoked when the message is not sent. The application programming interface can further include a get parameter function to obtain parameters for launching the selected message client.","Other embodiments of the invention include a system, computer system, and computer program product to provide the functionality of the methods described above.","The use of the same reference symbols in different drawings indicates similar or identical items.","For a thorough understanding of the subject invention, refer to the following Detailed Description, including the appended Claims, in connection with the above-described Drawings.","References in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d mean that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover, various features are described that may be exhibited by some embodiments and not by others. Similarly, various requirements are described that may be requirements for some embodiments but not other embodiments.","Introduction","The present invention provides a method, system, computer system, computer program product, and application programming interface to support the use of multiple external messaging systems from within an application program. The application program allows a user to specify a preferred messaging system to prepare, send, and receive messages from within the application. The user can choose from multiple external messaging systems, and one of the external messaging systems can be configured as a default messaging system.","Examples of messaging systems that can be supported are Microsoft Outlook and Lotus Notes mail, although the invention is not limited to electronic mail messaging systems. As long as a messaging system client can be configured to receive data from and provide data to the application program, the messaging system can be used in conjunction with the present invention. For example, the scope of the invention can include other types of messages, such as short messaging service messages and instant Internet messages.","At least two of the message clients operate independently of the application program itself. In other words, the application program supports at least two external message clients that are not provided by or integrated with the application program. Even though the messaging systems are external to the application program, activities performed using the external messaging systems can be tracked in a comprehensive accumulation of data about activity performed.","In one embodiment, data related to a message are provided by the program to a selected message client upon launching the message client. As described above, the selected message client is one of the multiple external messaging system clients that are configured to use the data to prepare the message. For example, the application may provide data including a recipient address for the message. The recipient can be pre-populated in the message's recipient field by the message client.","In another embodiment, data about a message are provided to the application by the message client when the message is sent. The application can then store activity data about the message when the message is sent, even though the message was sent using an external message client.","In yet another embodiment, data related to a message are dynamically communicated between the application and the selected message client.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["110","110"]},"The external messaging systems may also include client and server components, such as message client  and message server , although the functionality of message client  and message server  may be combined as a single messaging module.","Application program  is shown as including a business service . Business service  enables communication of data between application program  and message client  via application programming interface .","In action ., application program  obtains data, such as the user's message client preference. Other data may also be obtained, such as a recipient for the message that is obtained during user interaction with application program . In addition, data may be retrieved from database  to be included in the message; for example, a pre-formulated set of text may be retrieved to be included in the message. In a client\/server architecture for application program , data may be passed between the client and server components to gather all data to be included in the message. In addition, application program  may create data records in database , such as an activity record, when an indication is received that the message is to be sent.","In action ., the user's preferred message client  is launched, passing data related to the message collected in action ., such as the recipient of the message. It is not required that data be passed with every message or upon each launch of the message client; rather, message client  is configured to use data when data are passed. In one embodiment, a script launches the message client, passing variable values for various types of data related to the message. Because message client  conforms to application programming interface  to receive message data, message client  can populate the message using the data received.","In action ., the user of application program  uses message client  to compose the message. Message client  operates independently of application program  while the message is being composed. The user can add attachments, delete attachments, change the text of the message, and perform normal message editing tasks. In action ., the user sends the message, which causes the message to be provided to message server .","In action ., message client  provides updated message data to application program  via application programming interface . This data may include, for example, the body of the message, the recipient or other message header information, actual attachments to the message, and so on. It is not required that data be passed upon sending every message, although passing data back to the application program for processing provides valuable information about activities performed using the application program. Message client  is configured to send data when a message is sent.","In action ., application program  stores the updated message data received from message client  in database . It is not required that the message data be stored, although for some application programs, such as customer support applications, storing the data provides valuable information that can be used to evaluate and track activities performed using the application program. One of skill in the art will also recognize that the storage mechanism need not be a database.","Each of the actions of  is described in further detail below.","Obtain Data","In one embodiment, application program  is configured to enable the user to compose a message using data to which the application program  has access. In this embodiment, a user can press a selected button to compose a message within application program , and the user is prompted to specify a recipient, template and\/or attachment. Upon receiving an indication that the user wishes to send a message, application program  can prompt the user for a recipient; a template, which is a pre-defined set of text to include in the body of the message; and attachments to the message, if applicable. Example screens prompting the user are shown in .  shows a window prompting the user for a message template  and attachment data . The window also includes a change language\/locale button .  shows another example of a window prompting a user for recipient , message template , and attachment data . The window also includes a change language\/locale button . These data are gathered by application program  prior to launching message client .","As indicated above, attachments to a message can be selected within application program  and passed to message client . For example, assume that a customer service agent is working on a service request within application program  and is planning to send a message to the customer originating the service request. The agent can select to attach a document to the message using one of the windows shown in  or B. The attachments selected are preloaded to be passed to the message client  upon launching the message client. The attachments can be, for example, downloaded to the agent's local hard drive and populated in the message attachments.","After the specification of data for the message, the user confirms the selection and the data selected are stored. In one embodiment, a default message client for the user is determined by accessing a configuration database associated with application program , and the default message client is launched from within a script program. In one embodiment, a message client Object Linking & Embedding (OLE) automation object is used to launch the message client. In this embodiment, recipient, template, and\/or attachment data are appended as script variables in the launching script. When the script is executed, values for the script variables are available for preparing the message. After message client  is launched, the user continues working within message client  to prepare and send the message.","Pass Data to Message Client","In one embodiment, the following information is passed from application program  to the message client :","Message information including To, CC, BCC, email body and subject","Information for creating records for activities performed using the message client","Attachments that are selected from within the application program","An Activity ID for an activity record for the current message","The following table provides examples of parameters passed to the message client in one embodiment of the invention:",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Name","Purpose","Value","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["EnableActivityCreation","To inform the message","Text: TRUE",{}]},{"entry":[{},"client whether the","or FALSE"]},{"entry":[{},"creation of the activities"]},{"entry":[{},"was configured by the"]},{"entry":[{},"user. If TRUE, the"]},{"entry":[{},"message client should"]},{"entry":[{},"call the DeleteEmail( )"]},{"entry":[{},"method to remove the"]},{"entry":[{},"activity at the end of the"]},{"entry":[{},"process as a result of"]},{"entry":[{},"aborting message or other"]},{"entry":[{},"abnormal termination"]},{"entry":["ActivityID","The row ID of the","Text"]},{"entry":[{},"activity that is created for"]},{"entry":[{},"this message"]},{"entry":["ExtMailClientAttachmentDir","Shared directory where","Text"]},{"entry":[{},"message clients will"]},{"entry":[{},"deposit the attachment"]},{"entry":[{},"files so that the"]},{"entry":[{},"application program"]},{"entry":[{},"could pick up the file and"]},{"entry":[{},"associate the file with the"]},{"entry":[{},"activity"]},{"entry":["Debug","TRUE to turn off debug.","Text: TRUE"]},{"entry":[{},"FALSE to turn off debug","or FALSE"]},{"entry":["ConnectString","The exact ConnectString","Text","The purpose"]},{"entry":[{},"information for the",{},"of this string"]},{"entry":[{},"database",{},"is to identify"]},{"entry":[{},{},{},"the database"]},{"entry":[{},{},{},"that the"]},{"entry":[{},{},{},"current client"]},{"entry":[{},{},{},"is talking to."]},{"entry":["LanguageCode","Three letter language code","Text: ENU, FRA, etc."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In one embodiment, an application program client component (not shown) of application program  runs on a computer system also hosting message client . In this embodiment, another process also runs on the host computer system to facilitate sending data from message client  to application program . For example, with a Microsoft Outlook message client, a form script runs within a web browser application program client on the computer system. The script captures a \u2018send message\u2019 event or the pressing of the send button. Upon detecting such an event or action, the script passes information related to the message back to application program , including addresses, the body of the message, and new attachments (those added via the message client, not including those passed to the message client from application program ).","When a message includes newly-added attachments, the script uploads the new attachments to a specified network location. For example, in one embodiment, a temporary attachment directory is specified in a configuration file associated with application program . The directory is configured to provide write access only for users who can send attachments, which are copied into the directory. Application program  has read\/write access to enable attachments to be retrieved and deleted when processing is complete.","In this embodiment, the script creates a web automation server Component Object Model (COM) object that is active when application program  is active. Upon detecting a \u2018send message\u2019 event or action within message client , the script invokes a CompleteMessage method of business service  to pass data to application program . In one embodiment, the CompleteMessage method can has two parameters: input argument and output argument. The input argument can includes addresses, the body of the message, and new attachments. The output argument is used to provide other types of data back to application program . The CompleteMessage method is described in further detail below.","Upon receiving the execution order through the invocation of business service , business service  updates activity records in database  with the new information from the message and data originally passed from application program . The business service also uses the attachments information to retrieve attachments from the specified network location. Attachments are then associated with an activity record for the message.","Application Programming Interface: Completing the Message","In the embodiments described above, an activity record is created when it is determined that the user wishes to send a message and message client  is launched. The user then actually completes and sends the message using message client . In one embodiment, a CompleteMessage method exists within the business service  of application program  to update the already-created activity record with new information passed from the message client . This data can include addresses (\u201cTO,\u201d \u201cCC,\u201d \u201cBCC,\u201d etc.), body of the message, subject and attachments. The CompleteMessage method associates all new attachments, addresses, and other message data with the activity record.","Below are examples of parameters that can be used to pass data from the message client  (in this example, an e-mail client) to the application program :",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Name","Purpose","Value","Comments"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field: Email To","Email addresses on the","Text","Text as shown in the email"]},{"entry":["Line","\u201cTO\u201d",{},"client's TO field."]},{"entry":["Field: Email CC","Email addresses on the","Text","Text as shown in the email"]},{"entry":["Line","\u201cCC\u201d",{},"client's CC field."]},{"entry":["Field: Email","Email addresses on the","Text","Text as shown in the email"]},{"entry":["BCC Line","\u201cBCC\u201d",{},"client's BCC field."]},{"entry":["Field:","Subject of the email","Text","Text as shown in the email"]},{"entry":["Description",{},{},"client's SUBJECT field."]},{"entry":["Field: Display","Email body","Text","Email Body"]},{"entry":["Email Body",{},{},"(no limit)"]},{"entry":["Field: Email","Sender's Name","Text","Sender's name, i.e., Max"]},{"entry":["Sender Name",{},{},"Weldon, or Max Weldon"]},{"entry":[{},{},{},"<wmax@nowhere.org>\u201d."]},{"entry":[{},{},{},"The exact format depends"]},{"entry":[{},{},{},"on the email client."]},{"entry":["AttachmentFile","It is list of the physical",{},"File name should always be"]},{"entry":["Names","file name separated by semi-",{},"provided with full path."]},{"entry":[{},"colon. Mail Client Script",{},"Application program code"]},{"entry":[{},"has to make sure that",{},"will pick up the file from"]},{"entry":[{},"name is unique.",{},"the location and associate"]},{"entry":[{},{},{},"the file with the activity."]},{"entry":[{},{},{},"For example,"]},{"entry":[{},{},{},"\\\\\\attach\\test1.txt;test2.txt;"]},{"entry":[{},{},{},"\\\\lotus\\attach\\test3.txt."]},{"entry":[{},{},{},"If file name is not provided,"]},{"entry":[{},{},{},"the default path will be used."]},{"entry":["AttachmentFile","It is the display name,",{},"There is a one to one mapping"]},{"entry":["DisplayNames","which has sent to SMTP.",{},"between"]},{"entry":[{},"It is in the same order",{},"\u201cAttachmentFileNames\u201d"]},{"entry":[{},"as in the",{},"and"]},{"entry":[{},"AttachmentFileNames.",{},"\u201cAttachmentFileDisplayNames\u201d"]},{"entry":["Field: Email","The format of the email","Text: \u201cPlain"]},{"entry":["Format",{},"Text\u201d or \u201cHTML\/"]},{"entry":[{},{},"Plain Text\u201d"]},{"entry":["Id","The original activity ID","Text"]},{"entry":["ContactList","All contact listed in this","Text","It is a literal and it must be"]},{"entry":[{},"field will be associated",{},"pass when EnableContactAssoc"]},{"entry":[{},"with the activity",{},"is set to TRUE."]},{"entry":[{},{},{},"ContactList is the set of"]},{"entry":[{},{},{},"lieteral separated by semi-colon."]},{"entry":[{},{},{},"Each literal can be either full"]},{"entry":[{},{},{},"name or email address. First"]},{"entry":[{},{},{},"Name, Middle Name and Last"]},{"entry":[{},{},{},"Name are separated by a space."]},{"entry":[{},{},{},"Following is an example:"]},{"entry":[{},{},{},"Example 1: Sanjeev Kumar,"]},{"entry":[{},{},{},"Zhanye Tong, wpak@siebel.com"]},{"entry":[{},{},{},"Example 2:"]},{"entry":[{},{},{},"sakumar@siebel.com,"]},{"entry":[{},{},{},"ztong@siebel.com,"]},{"entry":[{},{},{},"awu@siebel.com"]},{"entry":[{},{},{},"Example 3: Mary Jo Smith,"]},{"entry":[{},{},{},"Zhanye Tong"]},{"entry":[{},{},{},"Mary is the First name, Jo is"]},{"entry":[{},{},{},"the second name and Smith is"]},{"entry":[{},{},{},"the last name in Mary Jo Smith"]},{"entry":[{},{},{},"Zhanye is the first name and"]},{"entry":[{},{},{},"Tong is the last name in Zhanye"]},{"entry":[{},{},{},"Tong"]},{"entry":[{},{},{},"Note: First Contact in the"]},{"entry":[{},{},{},"ContactList will be the Primary"]},{"entry":[{},{},{},"Contact if no contact has been"]},{"entry":[{},{},{},"assigned to Activity."]},{"entry":["EnableContactAssoc","When it is false, Contact","Text: TRUE"]},{"entry":[{},"is not associated with","or FALSE"]},{"entry":[{},"activity. In case of many"]},{"entry":[{},"contact with similar name"]},{"entry":[{},"in Contact database,"]},{"entry":[{},"Activity will be assigned"]},{"entry":[{},"to First Contact in Contact"]},{"entry":[{},"Database."]},{"entry":["DeleteExistingAttachments","Deleting existing","Text: TRUE","When activity is created,"]},{"entry":[{},"attachments before adding","or FALSE","application program-initiated"]},{"entry":[{},"new attachments from the",{},"attachments are already"]},{"entry":[{},"external mail client.",{},"associated with the activities."]},{"entry":[{},{},{},"When email client calls the"]},{"entry":[{},{},{},"CompleteEmail( ), email client could"]},{"entry":[{},{},{},"set \u201cDeleteExistingAttachments\u201d"]},{"entry":[{},{},{},"to TRUE and passes back to"]},{"entry":[{},{},{},"application program all"]},{"entry":[{},{},{},"attachments of the emails."]},{"entry":[{},{},{},"However, the email client"]},{"entry":[{},{},{},"could intelligently determine"]},{"entry":[{},{},{},"which attachments were from"]},{"entry":[{},{},{},"Siebel and which are added and"]},{"entry":[{},{},{},"only pass the attachments that"]},{"entry":[{},{},{},"are added on the email client"]},{"entry":[{},{},{},"side. In that case, this flag"]},{"entry":[{},{},{},"should set to \u2018FALSE.\u201d"]},{"entry":["ConnectString","This is the same string","Text","If the ConnectString does not"]},{"entry":[{},"that was passed to the",{},"match with the ConnectString of"]},{"entry":[{},"email client when the",{},"the Server, the request will be"]},{"entry":[{},"email client was launched",{},"denied and errorcode will be"]},{"entry":[{},{},{},"returned."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, message addresses or names are used to attempt to find a match in a contacts or employee database, so that the activity can be associated with the contact or employee as well. Preferably, a unique identifier such as an address can be determined from the message; otherwise, finding a match based upon name, while allowed, is less precise due to the use of nicknames, aliases, and other factors. If no match is found, the message address and\/or name can be returned as an output argument for possible addition to the contacts or employee database.","In one embodiment, the following data can be provided as output arguments by the CompleteMessage method:\n\n","The CompleteMessage method provides a way to update the activity record from a message client, so that any message client can update activity data.","Application Programming Interface: DeleteMessage Method","As previously described, in one embodiment, application program  creates an activity record for each outbound message before the launching of message client . At the end of the message processing, message client  can either call the CompleteMessage method to update the activity with new information from the message or a DeleteMesssage method to remove the activity record as a result of user cancellation.","In some situations, the DeleteMessage method may not be called because of problems with the message client  or the application program . In such a situation, an activity record may remain in database  without other associated data. In one embodiment, a workflow policy is established which periodically audits message activity records. Records can be deleted, for example, that have Type=Outbound Message, Status=In Progress, and a creation time exceeding a certain time limit.","The DeleteMessage method can be called when message processing is cancelled and the message will no longer be sent. In one embodiment for an e-mail client, the DeleteMessage method has the following parameters:","InputArgument:\n\n","OutputArgument: Same as \u201cCompleteMessage\u201d if applicable.","Application Programming Interface: GetEMailParameter","A GetEmailParameter method returns several parameters for invoking a message client. The parameter values are returned in the output argument of the method call and are represented as a NAME-VALUE pair. Examples of such parameters are given in the table below.",{"@attributes":{"id":"p-0067","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Debug","Yes - turn on debug mode so that debug"]},{"entry":[{},"messages will be written to a local file"]},{"entry":[{},"If not present or No - turn off debug mode."]},{"entry":[{},"No debug messages will be written"]},{"entry":["ExtMailClientAttDir","The default location where the attachments"]},{"entry":[{},"will be deposited by the message client and"]},{"entry":[{},"will be picked by the application program."]},{"entry":[{},"The parameter consists of two parts: the"]},{"entry":[{},"client part and the server part separated by"]},{"entry":[{},"\u201c;\u201d. The message client uses the client part"]},{"entry":[{},"of the attachment path to deposit the"]},{"entry":[{},"attachment file. When constructing a"]},{"entry":[{},"FileAttachmentList, the message client"]},{"entry":[{},"uses the second part to specify a full path"]},{"entry":[{},"file name. If full path is not specified, the"]},{"entry":[{},"default path (obtained from a configuration"]},{"entry":[{},"file on the server will be used) For example;"]},{"entry":[{},"\\\\clientsideserverhost\\att; \\\\serverhost\\att."]},{"entry":[{},"Client will deposit file to"]},{"entry":[{},"\\\\clientsideserverhost\\att but when"]},{"entry":[{},"constructing the attachment file list,"]},{"entry":[{},"\\\\serverhost\\att should be used."]},{"entry":["Connectstring","The connectstring that the application"]},{"entry":[{},"program is using."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, when calling the GetEmailParameter method described above, the message client is expected to perform certain actions. For example, when the \u201cDebug\u201d flag is set to TRUE, the message client is expected to write all debug and error messages in a log file in a pre-specified name and location. Debug and error messages can include but are not limited to the following types of information:\n\n","In one embodiment, a configuration file is associated with a user of application program  and includes data such as a default message client, default directory for attachments, and names of scripts associated with different message clients available to the user.",{"@attributes":{"id":"p-0070","num":"0097"},"figref":"FIG. 3","b":["110","310","320","330","310"]},"Parameters  for sending a response to an e-mail include a default greeting template (text), a default closing template, a default message format, an indicator whether the original message is to be included in the response, and an indicator of a view in the user interface to be displayed after a message is sent. Parameters  for advanced messaging features enable a user's default language and locale to be specified.","In one embodiment, users, such as customer service agents, log into application program  to perform customer service activities using a web browser client. Application program  is configured to use a web automation server object, which uses the same communication channel as is established during the initial user login process to communicate with application program . If the initial login uses a given protocol, subsequent communication through the web automation object is performed using the same protocol. Authentication is performed using a sessionid (using cookies) that was first obtained during the initial log on. If the communication is secure, this sessionid and cookies information is also protected.","In this embodiment, if multiple web clients are launched on a single machine, only one connection is made from the web automation server to the application program server. The connection corresponds to the last web client (user) to communicate with the application program server. Since updating of activity records is performed through the single channel, users on the same machine from different web clients should have similar access rights to activity data; otherwise, problems may occur with records to be updated by one user (login id) but created by another user (login id).","The above-described embodiments can be implemented using a variety of computer systems and architectures. The following section describes an example computing and network environment in which the present invention can be practiced.","An Example Computing and Network Environment",{"@attributes":{"id":"p-0075","num":"0102"},"figref":["FIG. 4","FIG. 4"],"b":["400","410","1","420","1","420","1","410","1","420","1","410","1","420","1"]},"One or more of client computers ()-(N) and\/or one or more of servers ()-(N) may be, for example, a computer system of any appropriate design, in general, including a mainframe, a mini-computer or a personal computer system. Such a computer system typically includes a system unit having a system processor and associated volatile and non-volatile memory, one or more display monitors and keyboards, one or more diskette drives, one or more fixed disk storage devices and one or more printers. These computer systems are typically information handling systems which are designed to provide computing power to one or more users, either locally or remotely. Such a computer system may also include one or a plurality of I\/O devices (i.e., peripheral devices) which are coupled to the system processor and which perform specialized functions. Examples of I\/O devices include modems, sound and video devices and specialized communication devices. Mass storage devices such as hard disks, CD-ROM drives and magneto-optical drives may also be provided, either as an integrated or peripheral device. One such example computer system, discussed in terms of client computers ()-(N), is shown in detail in .",{"@attributes":{"id":"p-0077","num":"0104"},"figref":"FIG. 5","b":["510","420","1","510","512","510","514","516","518","520","522","524","526","528","530","532","533","534","536","538","540","542","546","512","528","547","512","530","548","512"]},"Bus  allows data communication between central processor  and system memory , which may include both read only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded and typically affords at least 66 megabytes of memory space. The ROM or flash memory may contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system  are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk ), an optical drive (e.g., CD-ROM drive ), floppy disk unit  or other storage medium. Additionally, applications may be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem  or interface .","Storage interface , as with the other storage interfaces of computer system , may connect to a standard computer readable medium for storage and\/or retrieval of information, such as a fixed disk drive . Fixed disk drive  may be a part of computer system  or may be separate and accessed through other interface systems. Many other devices can be connected such as a mouse  connected to bus  via serial port , a modem  connected to bus  via serial port  and a network interface  connected directly to bus . Modem  may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface  may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface  may provide such connection using wireless techniques, including digital cellular telephone connection, general packet radio service (GPRS) connection, digital satellite data connection or the like.","Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., bar code readers, document scanners, digital cameras and so on). Conversely, it is not necessary for all of the devices shown in  to be present to practice the present invention. The devices and subsystems may be interconnected in different ways from that shown in . The operation of a computer system such as that shown in  is readily known in the art and is not discussed in detail in this application. Code to implement the present invention may be stored in computer-readable storage media such as one or more of system memory , fixed disk , CD-ROM , or floppy disk . Additionally, computer system  may be any kind of computing device, and so includes personal data assistants (PDAs), network appliance, X-window terminal or other such computing device. Computer system  also supports a number of Internet access tools, including, for example, an HTTP-compliant web browser having a JavaScript interpreter.","The foregoing describes an embodiment wherein some components are contained within other components. It is to be understood that such depicted architectures are merely examples; in fact, many other architectures can be implemented that achieve the same functionality. Any arrangement of components to achieve the same functionality is effectively \u201cassociated\u201d such that the desired functionality is achieved.","The foregoing detailed description has set forth various embodiments of the present invention via the use of block diagrams, flowcharts, and examples. It will be understood by those within the art that each block diagram component, flowchart step, operation and\/or component illustrated by the use of examples can be implemented, individually and\/or collectively, by a wide range of hardware, software, firmware, or any combination thereof.","The present invention has been described in the context of fully functional computer systems; however, those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of signal bearing media include recordable media such as floppy disks and CD-ROM, transmission type media such as digital and analog communications links, as well as media storage and distribution systems developed in the future.","The above-discussed embodiments may be implemented by software modules that perform certain tasks. The software modules discussed herein may include script, batch, or other executable files. The software modules may be stored on a machine-readable or computer-readable storage medium such as a disk drive. Storage devices used for storing software modules in accordance with an embodiment of the invention may be magnetic floppy disks, hard disks, or optical discs, such as CD-ROMs or CD-Rs, for example. A storage device used for storing firmware or hardware modules in accordance with an embodiment of the invention may also include a semiconductor-based memory, which may be permanently, removably or remotely coupled to a microprocessor\/memory system. Thus, the modules may be stored within a computer system memory to configure the computer system to perform the functions of the module. Other new and various types of computer-readable storage media may be used to store the modules discussed herein.","The above description is intended to be illustrative of the invention and should not be taken to be limiting. Those skilled in the art will readily implement the steps necessary to provide the structures and the methods disclosed herein, and will understand that the process parameters and sequence of steps are given by way of example only and can be varied to achieve the desired structure as well as modifications that are within the scope of the invention. Variations and modifications of the embodiments disclosed herein can be made based on the description set forth herein, without departing from the scope of the invention.","Consequently, the invention is intended to be limited only by the scope of the appended claims, giving full cognizance to equivalents in all respects."],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Other Embodiments"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objectives, features and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
