---
title: Method and system for interacting with a virtual content repository
abstract: In accordance with embodiments, there are provided mechanisms and methods for providing content management security to federated content repositories in a content management system and for interacting with a virtual content repository. These mechanisms and methods can enable embodiments to provide secure access to repositories based upon policies defined at a federated repository level and to secure repository access at the federated level based upon policies defined for differing classes of users. These abilities of embodiments can enable users to create services and applications by integrating content from unsecured repositories.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07752205&OS=07752205&RS=07752205
owner: BEA Systems, Inc.
number: 07752205
owner_city: Redwood Shores
owner_country: US
publication_date: 20060804
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","CROSS REFERENCE TO RELATED APPLICATIONS","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application 60\/720,860 entitled IMPROVED CONTENT MANAGEMENT, by Ryan McVeigh et al., filed Sep. 26, 2005, the entire contents of which are incorporated herein by reference.","The following commonly owned, co-pending United States Patents and Patent Applications, including the present application, are related to each other. Each of the other patents\/applications are incorporated by reference herein in its entirety:","U.S. patent application Ser. No. 11\/435,163 entitled SYSTEM AND METHOD FOR PROVIDING SPI EXTENSIONS FOR CONTENT MANAGEMENT SYSTEM, by Ryan McVeigh et al., filed on May 16, 2006, and","U.S. patent application Ser. No 11\/499,468 entitled SYSTEM AND METHOD FOR CONTENT MANAGEMENT SECURITY, by Ryan McVeigh et al., filed on Aug. 4, 2006.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The current invention relates generally to managing content for use with portals and other content delivery mechanisms, and more particularly to a mechanism for interacting with a virtual content repository.","Content repositories manage and provide access to large data stores such as a newspaper archives, advertisements, inventories, image collections, etc. A content repository can be a key component of a web application such as a portal, which must quickly serve up different types of content in response to user interaction. However, difficulties can arise when trying to integrate more than one vendor's content repository. Each may have its own proprietary application program interface and content services (e.g., conventions for searching and manipulating content, versioning, workflows and data formats). Furthermore, each time a repository is added to an application, the application software must be modified to accommodate these differences. What is needed is a coherent system and method for interacting with disparate repositories and for providing a uniform set of content services across all repositories, including those that lack such services.","The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. References to embodiments in this disclosure are not necessarily to the same embodiment, and such references mean at least one. While specific implementations are discussed, it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.","In the following description, numerous specific details are set forth to provide a thorough description of the invention. However, it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail so as not to obscure the invention.","Although a diagram may depict components as logically separate, such depiction is merely for illustrative purposes. It can be apparent to those skilled in the art that the components portrayed can be combined or divided into separate software, firmware and\/or hardware components. For example, one or more of the embodiments described herein can be implemented in a network accessible device\/appliance such as a router. Furthermore, it can also be apparent to those skilled in the art that such components, regardless of how they are combined or divided, can execute on the same computing device or can be distributed among different computing devices connected by one or more networks or other suitable communication means.","In accordance with a first aspect and in embodiments, there are provided mechanisms and methods for interacting with a virtual content repository. These mechanisms and methods for interacting with a virtual content repository can enable embodiments to secure repository access at the federated level based upon policies defined for differing classes of users. The ability of embodiments to provide secure repository access at the federated level based upon policies defined for differing classes of users can enable access to portal content, for example, to be readily changed by users making a user request but limit portal content change by users making administrative requests.","In an embodiment and by way of example, a method for interacting with a virtual content repository in a content management system is provided. A method embodiment includes receiving a request to access content stored in at least one of a plurality of content repositories via a common Application Programming Interface (API). Each one of the plurality of content repositories is integrated into a virtual content repository (VCR). The method also includes determining whether the request will be permitted by selecting a security policy to apply to the request based upon a classification of the request. Request may be classified into at least one of an administrative request or a user request. The selected security policy may be applied to the request. Access to content in the VCR is provided when the request satisfies the selected security policy.","In accordance with a second aspect and in embodiments, there are provided mechanisms and methods for providing content management security to federated content repositories in a content management system. These mechanisms and methods for providing content management security to federated content repositories in a content management system can enable embodiments to provide secure access to repositories based upon policies defined at a federated repository level. The ability of embodiments to provide secure access to repositories based upon policies defined at a federated repository level can enable users to create services and applications by integrating content from unsecured repositories.","In an embodiment and by way of example, a method for providing content management security to federated content repositories in a content management system is provided. A method embodiment includes integrating a plurality of content repositories, including a first content repository having a first security mechanism and a second content repository lacking any security mechanism, into a virtual content repository (VCR). A request to access content stored in a first node of a plurality of nodes within the plurality of content repositories and a second node of the plurality of nodes within the plurality of content repositories is intercepted. The request may be intercepted at a common Application Programming Interface (API) providing access to the VCR, for example. The first node includes content stored in the first content repository and the second node includes content stored in the second content repository. A determination is made whether the request will be permitted by applying a security policy to a result set returned by the first content repository and the second content repository responsive to the request and applying the first security mechanism to only that portion of the result set returned by the first content repository. The result set is provided when the request satisfies the security policy and the first security mechanism.","As used herein, the term federated level security is defined as security measures applied to a virtual content repository (VCR), comprised of a plurality of content repositories integrated into the VCR. As used herein, the term Access policy (or \u201cauthorization policies\u201d, \u201csecurity policies\u201d or \u201cpolicies\u201d) dynamically identify resources (e.g., J2EE resources, an XML document, a section of an XML document, services, information returned by services, etc.) within one or more content repositories for which access is controlled, entities allowed to access each resource, and constraints that apply to each requestor or group of requestors that attempt to access the resource. As used herein, the term result set includes any result provided by one or more services. Result sets may include multiple entries into a single document, file, communication or other data construct.","While the present invention is described with reference to an embodiment in which techniques for interacting with a virtual content repository are implemented in an application server in conformance with the J2EE Management Framework using executable programs written in the Java\u2122 programming language, the present invention is not limited to the J2EE Management Framework nor the Java\u2122 programming language. Embodiments may be practiced using other interconnectivity specifications or programming languages, i.e., JSP and the like without departing from the scope of the embodiments claimed. (Java\u2122 is a trademark of Sun Microsystems, Inc.).",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},"A content repository  represents a searchable data store. Such systems can relate structured content and unstructured content (e.g., digitally scanned paper documents, Extensible Markup Language, Portable Document Format, Hypertext Markup Language, electronic mail, images, video and audio streams, raw binary data, etc.) into a searchable corpus. Content repositories can be coupled to or integrated with content management systems. Content management systems can provide for content workflow management, versioning, content review and approval, automatic content classification, event-driven content processing, process tracking and content delivery to other systems. By way of illustration, if a user fills out a loan application on a web portal, the portal can forward the application to a content repository which, in turn, can contact a bank system, receive notification of loan approval, update the loan application in the repository and notify the user by rendering the approval information in a format appropriate for the web portal.","A virtual or federated content repository (hereinafter referred to as \u201cVCR\u201d) is a logical representation of one or more individual content repositories. For example, the VCR provides a single access point to multiple repositories from the standpoint of application layer  but does not shield from the user that there is more than one repository available. Typically, the user interacts with the VCR by specifying which repository an action is related to (such as adding a new node), or performing an action that applies to all repositories (such as searching for content). In various embodiments and by way of illustration, this can be accomplished in part by use of an API (application program interface)  and an SPI (service provider interface) . An API describes how entities in the application layer can interface with some program logic or functionality. The application layer can include applications (and subdivisions thereof) that utilize the API, such as processes, threads, servlets, portlets, objects, libraries, and other suitable application components. An SPI describes how a service provider (e.g., a content repository, a content management system) can be integrated into a system of some kind. The SPI isolates direct interaction with repositories from the API. In various embodiments, this can be accomplished at run-time wherein the API library dynamically links to or loads the SPI library. In another embodiment, the SPI can be part of a server process such that the API and the SPI can communicate over a network. The SPI can communicate with the repositories using any number of means including, but not limited to, shared memory, remote procedure calls and\/or via one or more intermediate server processes.","Embodiments described herein include examples of techniques for interacting with a virtual content repository and techniques for providing content management security to federated content repositories. These techniques involve applying security policies to requests to access content within a virtual content repository comprised of a set of federated content repositories. A policy can be based on role(s) such that it determines which role(s) are permitted to access a resource under certain conditions. (In various embodiments, roles can be defined to dynamically associate users and\/or groups of users based on some criteria. For example, a system administrator role might include all users having a certain skill level and only during certain times of day (e.g., after 5:00 pm)). In one embodiment, a policy can be specified as follows (wherein items in square brackets indicate alternatives; italic font indicates optional items):","[GRANT, DENY] (action, resource, subject) IF (constraint condition)  . . . IF (constraint condition) N;","Where:","GRANT permits a specified action. DENY revokes it;","Action is the name of a resource or resource attribute to grant or deny access to;","Resource is the name of the resource that this policy will be associated with;","Subject is the name of one or more users, groups and\/or roles that are granted\/denied the action. A special subject called any denotes that any user, group and role is potentially a subject; and","IF (constraint condition) is one or more optional conditions placed on the action. Conditions can include one or more arithmetic and logical functions and expressions involving attributes of resources or other entities in the system, such as requestor attributes, group membership, dynamic attributes (e.g., time, date, location), and other suitable information.","Content repositories may comprise a variety of interfaces for connecting with the repository. For example, as shown in , a BEA format repository provided by BEA Systems, Inc. of San Jose, Calif., a Documentum\u2122 format repository , provided by EMC Corp. of Hopkinton, Mass., and a JSR-170 compliant repository may be integrated into a VCR and made accessible via a single federated API  by SPI . Individual SPI implementations , , provide format specific service provider interfaces to the BEA format repository , the Documentum\u2122 format repository , and the JSR-170 format repository , respectively. It is noteworthy that not all of the formats illustrated in  will be present in all embodiments. Further, some embodiments will include other repository formats not illustrated by  for brevity.","API's and SPI's can be specified as a collection of classes\/interfaces, data structures and\/or methods\/functions that work together to provide a programmatic means through which VCR service(s) can be accessed and utilized. By way of illustration, APIs and SPIs can be specified in an object-oriented programming language, such as Java\u2122 (available from Sun Microsystems, Inc. of Mountain View, Calif.) and C# (available from Microsoft Corp. of Redmond, Wash.). The API and SPI can be exposed in a number of ways, including but not limited to static libraries, dynamic link libraries, distributed objects, servers, class\/interface instances, and other suitable means.","In various embodiments, the API presents a unified view of all repositories to the application layer such that navigation, CRUD operations (create, read, update, delete), versioning, workflows, and searching operations initiated from the application layer operate on the repositories as though they were one. Repositories that implement the SPI can \u201cplug into\u201d the VCR. The SPI includes a set of interfaces and services that support API functionality at the repository level. The API and SPI share a content model that represents the combined content of all repositories as a hierarchical namespace of nodes. Given a node N, nodes that are hierarchically inferior to N are referred to as children of N, whereas nodes that are hierarchically superior to N are referred to as parents of N. The top-most level of the hierarchy is termed the federated root. There is no limit to the depth of the hierarchy. In various embodiments, repositories are children of the federated root. Each repository can itself have children.","By way of illustration, content mining facilities , processes\/threads , tag libraries , integrated development environments (IDEs) , and other libraries  can all utilize the API to interact with a VCR. An IDE can provide the ability for a user to interactively build workflows and\/or content views. Content mining facilities can include services for automatically extracting content from the VCR based on parameters. Java ServerPages\u2122 tag libraries enable portals to interact with the VCR and surface its content on web pages. (Java ServerPages\u2122 is available from Sun Microsystems, Inc.) In addition, it will be apparent to those of skill in the art that many other types of applications and software components utilize the API and are, as such, fully within the scope and spirit of the present disclosure.","In various embodiments, the API can include optimizations to improve the performance of interacting with the VCR. One or more caches  can be used to buffer search results and\/or recently accessed nodes. Some implementations may include additional cache  in one or more repositories. In various embodiments, a cache can include a node cache and\/or a binary cache. A node cache can be used to provide fast access to recently accessed nodes whereas a binary cache can be used to provide fast access to the binary content\/data associated with each node in a node cache. The API can also provide a configuration facility  to enable applications, tools and libraries to configure caches and the VCR. In various embodiments, this facility can be can be configured via Java Management Extension (JMX) (available from Sun Microsystems, Inc.).","In various embodiments, a model for representing hierarchy information, content and data types is shared between the API and the SPI. In this model, a node can represent hierarchy information, content or schema information. Hierarchy nodes can serve as containers for other nodes in the namespace akin to a file subdirectory in a hierarchical file system. Schema nodes represent predefined data types. Content nodes represent content\/data. Nodes can have a shape defined by their properties. A property associates a name, a data type and an optional a value that is appropriate for the type. In certain of these embodiments, the properties of content nodes contain values. By way of an illustration, a type can be any of the types described in Table 1. Those of skill in the art will appreciate that many more types are possible and fully within the scope and spirit of the present disclosure.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Property Types in Various Embodiments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PROPERTY TYPE","DESCRIPTION"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Basic","Text, a number, a date\/time, a Boolean"]},{"entry":[{},{},"value, a choice, an image, a sound, a"]},{"entry":[{},{},"bit mask, an audio\/visual presentation,"]},{"entry":[{},{},"binary data."]},{"entry":[{},"Link","A pointer\/reference to data that lives"]},{"entry":[{},{},"\u201coutside\u201d of a node."]},{"entry":[{},"Lookup","An expression to be evaluated for"]},{"entry":[{},{},"locating another node in the VCR"]},{"entry":[{},"Database Mapped","Maps to an existing database table or"]},{"entry":[{},"(or schema)","view."]},{"entry":[{},"Nested","One or more schemas define individual"]},{"entry":[{},{},"properties."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In various embodiments, a property can also indicate whether it is required, whether it is read-only, whether it provides a default value, and whether it specifies a property choice. A property choice indicates if a property is a single unrestricted value, a single restricted value, a multiple unrestricted value, or a multiple restricted value. Properties that are single have only one value whereas properties that are multiple can have more than one value. If a property is restricted, its value(s) are chosen from a finite set of values. But if a property is unrestricted, any value(s) can be provided for it. A property can also be designated as a primary property. By way of illustration, the primary property of a node can be considered its default content. For example, if a node contained a binary property to hold an image, it could also contain a second binary property to represent a thumbnail view of the image. If the thumbnail view was the primary property, software applications such as browser could display it by default.","A named collection of one or more property types is a schema. A schema node is a place holder for a schema. In various embodiments, schemas can be used to specify a node's properties. By way of illustration, a Person schema with three properties (Name, Address and DateofBirth) can be described for purposes of discussion as follows:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Schema Person = {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Name=Name, Type=Text>,"]},{"entry":[{},"<Name=Address, Type=Address>,"]},{"entry":[{},"<Name=DateofBirth, Type=Date>}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Various embodiments allow a node to be defined based on a schema. By way of illustration, a content node John can be given the same properties as the schema Person:","Content Node John is a Person","In this case, the node John would have the following properties: Name, Address and DateofBirth. Alternatively, a node can use one or more schemas to define individual properties. This is sometimes referred to as nested types. In the following illustration, John is defined having an Info property that itself contains the properties Name, Address and DateofBirth. In addition, John also has a CustomerId property:",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Content Node John = {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Name=Info, Type=Person>,"]},{"entry":[{},"<Name=CustomerId, Type=Number> }"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Schemas can be defined logically in the VCR and\/or in the individual repositories that form the VCR. In certain embodiments, schemas can inherit properties from at least one other schema. Schema inheritance can be unlimited in depth. That is, schema A can inherit from schema B, which itself can inherit from schema C, and so on. If several schemas contain repetitive properties, a \u201cbase\u201d schema can be configured from which the other schemas can inherit. For example, a Person schema containing the properties Name, Address and DateofBirth, can be inherited by an Employee schema which adds its own properties (i.e., Employee ID, Date of Hire and Salary):",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Schema Employee inherits from Person = {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Name=EmployeeID, Type= Number>,"]},{"entry":[{},"<Name=DateofHire, Type=Date>,"]},{"entry":[{},"<Name=Salary, Type= Number> }"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Thus, as defined above the Employee schema has the following properties: Name, Address, DateofBirth, EmployeeID, DateofHire and Salary. If the Person schema had itself inherited properties from another schema, those properties would also belong to Employee.","In various embodiments, nodes have names\/identifiers and can be specified programmatically or addressed using a path that designates the node's location in a VCR namespace. By way of illustration, the path can specify a path from the federated root (\u2018\/\u2019) to the node in question (\u2018c\u2019):","\/a\/b\/c","In this example, the opening \u2018\/\u2019 represents the federated root, \u2018a\u2019 represents a repository beneath the federated root, \u2018b\u2019 is a hierarchy node within the \u2018a\u2019 repository, and \u2018c\u2019 is the node in question. The path can also identify a property (\u201cproperty\u201d) on a node:","\/a\/b\/c.property","In aspects of these embodiments, the path components occurring prior to the node name can be omitted if the system can deduce the location of the node based on context information.","In various embodiments, a schema defined in one repository or the VCR can inherit from one or more schemas defined in the same repository, a different repository or the VCR. In certain aspects of these embodiments, if one or more of the repositories implicated by an inherited schema do not support inheritance, the inheriting schema can be automatically defined in the VCR by the API. In one embodiment, the inheriting schema is defined in the VCR by default.","By way of illustration, the Employee schema located in the Avitech repository inherits from the Person schema located beneath the Schemas hierarchy node in the BEA repository:",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Schema \/Avitech\/Employee inherits from \/BEA\/Schemas\/Person = {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Name=EmployeeID, Type= Number>,"]},{"entry":[{},"<Name=DateofHire, Type=Date>,"]},{"entry":[{},"<Name=Salary, Type= Number> }"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In various embodiments, the link property type (see Table 1) allows for content reuse and the inclusion of content that may not be under control of the VCR. By way of illustration, the value associated with a link property can refer\/point to any of the following: a content node in a VCR, an individual property on a content node in a VCR, a file on a file system, an object identified by a URL (Uniform Resource Locator), or any other suitable identifier. In various embodiments, when editing a content node that has a link property type, a user can specify the link destination (e.g., using a browser-type user interface). In certain aspects of these embodiments, if a link refers to a content node or a content node property that has been moved, the link can be resolved automatically by the system to reflect the new location.","In various embodiments, a value whose type is lookup (see Table 1) can hold an expression that can be evaluated to search the VCR for instances of content node(s) that satisfy the expression. Nodes that satisfy the expression (if any) can be made available for subsequent processing. In various embodiments, a lookup expression can contain one or more expressions that can substitute expression variables from: the content node containing the lookup property, a user profile, anything in the scope of a request or a session. In various embodiments, an expression can include mathematical, logical and Boolean operators, function\/method invocations, macros, SQL (Structured Query Language), and any other suitable query language. In various embodiments, an expression can be pre-processed one or more times to perform variable substitution, constant folding and\/or macro expansion. It will be apparent to those of skill in the art that many other types of expressions are possible and fully within the scope and spirit of this disclosure.","In various embodiments, when editing a content node that has a lookup property type, the user can edit the expression through a user interface that allows the user to build the expression by either entering it directly and\/or by selecting its constituent parts. In addition, the user interface can enable the user to preview the results of the expression evaluation.","Database mapped property types (see Table 1) allow information to be culled (i.e., mapped) from one or more database tables (or other database objects) and manipulated through node properties. By way of illustration, a company might have \u201ccontent\u201d such as news articles stored as rows in one or more RDBMS (Relational Database Management System) tables. The company might wish to make use of this \u201ccontent\u201d via their portal implementation. Further, they might wish to manage the information in this table as if it existed in the VCR. Once instantiated, a content node property that is of the database mapped type behaves as though its content is in the VCR (rather than the database table). In one embodiment, all API operations on the property behave the same but ultimately operate on the information in the database table.","In various embodiments, a given database mapped property type can have an expression (e.g., SQL) which, when evaluated, resolves to a row and a column in a database table (or resolves to any kind of database object) accessible by the system over one or more networks. A database mapped property will be able to use either native database tables\/objects or database views on those tables\/objects. It will be appreciated by those of skill in the art that the present disclosure is not limited to any particular type of database or resolving expression.","In aspects of certain embodiments, a schema can be automatically created that maps to any row in a database table. The system can inspect the data structure of the table and pre-populate the schema with database mapped properties corresponding to columns from the table. The table column names can be used as the default property names and likewise the data type of each column will determine the data type of each corresponding property. The system can also indicate in the schema which properties correspond to primary key columns. If certain columns from the table are not to be used in the new schema, they can be un-mapped (i.e. deselected) by a user or a process. A content node can be based on such a schema and can be automatically bound to a row in a database table (or other database object) when it is instantiated. In various embodiments, a user can interactively specify the database object by browsing the database table.","While not required by all embodiments, some embodiments employ a display template (or \u201ctemplate\u201d) to display content based on a schema. Templates can implement various \u201cviews\u201d. By way of illustration, views could be \u201cfull\u201d, \u201cthumbnail\u201d, and \u201clist\u201d but additional \u201cviews\u201d could be defined by end-users. A full view can be the largest, or full page view of the content. A thumbnail view would be a very small view and a list view can be used when displaying multiple content nodes as a \u201clist\u201d on the page (e.g., a product catalog search results page). In various embodiments, the association between a schema and templates can be one-to-many. A template can be designated as the default template for a schema. In certain of these embodiments, templates can be designed with the aid of an integrated development environment (IDE). It is noteworthy that template technology is not limited to web applications. Other delivery mechanisms such as without limitation mobile phones, XML, and the like can be enabled by this technology.","In various embodiments and by way of illustration, display templates can be implemented using HTML (Hypertext Markup Language) and JSP (Java\u00ae Server Pages). By way of a further illustration, such a display template can be accessed from a web page through a JSP tag that can accept as an argument the identifier of a content node. Given the content node, the node's schema and associated default display template can be derived and rendered. Alternatively, the JSP tag can take an additional argument to specify a view other than the default. In another embodiment, display templates can be automatically generated (e.g., beforehand or dynamically at run-time) based on a content node's schema. In other embodiments, the view (e.g., full, thumbnail, list) can be determined automatically based on the contents of an HTTP request.","In various embodiments, a role is a dynamic set of users. By way of illustration, a role can be based on functional responsibilities shared by its members. In aspects of these embodiments, a role can be defined by one or more membership criteria. Role mapping is the process by which it is determined whether or not a user satisfies the membership criteria for a given role. For purposes of discussion, a role can be described as follows:\n\nRole=PMembers+[Membership Criteria]\n","where PMembers is a set of user(s), group(s) and\/or other role(s) that form a pool of potential members of this role subject to the Membership Criteria, if any. A user or a process can be in a role, if that user or process belongs to PMembers or satisfies the Membership Criteria. It is noteworthy that a user or process does not need to be a member of PMembers to be considered a member of the role. For example, it is possible to define a role with a criterion such as: \u201cOnly on Thursdays\u201d as its membership criteria. All users would qualify as a member of this role on Thursdays. The Membership Criteria can include one or more conditions. By way of illustration, such conditions can include, but are not limited to, one or more (possibly nested and intermixed) Boolean, mathematical, functional, relational, and\/or logical expressions. By way of illustration, consider the following Administrator role:\n\nAdministrator=Joe, Mary, SuperUser+CurrentTime>5:00 pm\n","The role has as its potential members two users (Joe and Mary) and users belonging to the user group named SuperUser. The membership criteria includes a condition that requires the current time to be after 5:00 pm. Thus, if a user is Joe, Marry or belongs to the SuperUser group, and the current time is after 5:00 pm, the user is a member of the Administrator role.","In various embodiments, roles can be associated with Resource(s). By way of illustration, a resource can be any system and\/or application asset (e.g., VCR nodes and node properties, VCR schemas and schema properties, operating system resources, virtual machine resources, J2EE application resources, and any other entity that can be used by or be a part of software\/firmware of some kind). Typically, resources can be arranged in one or more hierarchies such that parent\/child relationships are established (e.g., the VCR hierarchical namespace and the schema inheritance hierarchy). In certain of these embodiments, a containment model for roles is followed that enables child resources to inherit roles associated with their parents. In addition, child resources can override their parents' roles with roles of their own.","In various embodiments, Membership Criteria can be based at least partially on a node's properties. This allows for roles that can compare information about a user\/process to content in the VCR, for example. In various embodiments, a node's property can be programmatically accessed using dot notation: Article. Creator is the Creator property of the Article node. By way of illustration, assume an Article node that represents a news article and includes two properties: Creator and State. A system can automatically set the Creator property to the name of the user that created the article. The State property indicates the current status of the article from a publication workflow standpoint (e.g., whether the article is a draft or has been approved for publication). In this example, two roles are defined (see Table 2).",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Roles in an Embodiment"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ASSOCIATED",{},"MEMBERSHIP"]},{"entry":["ROLE NAME","WITH","PMEMBERS","CRITERIA"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Submitter","Article","Article.Creator","Article.State ="]},{"entry":[{},{},{},"Draft"]},{"entry":["Approver","Article","Editor","Article.State ="]},{"entry":[{},{},{},"(Submitted or"]},{"entry":[{},{},{},"Approved)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"The Submitter and Approver roles are associated with the Article node. Content nodes instantiated from this schema will inherit these roles. If a user attempting to access the article is the article's creator and the article's state is Draft, the user can be in the Submitter role. Likewise, if a user belongs to an Editor group and the article's state is Submitted or Approved, then the user can belong to the Approver role.","In various embodiments, a policy can be used to determine what capabilities or privileges for a given resource are made available to the policy's Subjects (e.g., user(s), group(s) and\/or role(s)). For purposes of discussion, a policy can be described as follows:\n\nPolicy=Resource+Privilege(s)+Subjects+[Policy Criteria]\n","Policy mapping is the process by which Policy Criteria, if any, are evaluated to determine which Subjects are granted access to one or more Privileges on a Resource. Policy Criteria can include one or more conditions. By way of illustration, such conditions can include, but are not limited to, one or more (possibly nested and intermixed) Boolean, mathematical, functional, relational, and\/or logical expressions. Aspects of certain embodiments allow policy mapping to occur just prior to when an access decision is rendered for a resource.","Similar to roles, in certain of these embodiments a containment model for policies is followed that enables child resources to inherit policies associated with their parents. In addition, child resources can override their parents' polices with policies of their own.","In various embodiments, policies on nodes can control access to privileges associated with the nodes. By way of illustration, given the following policies:\n\nPolicy1=Printer504+Read\/View+Marketing\n\nPolicy2=Printer504+All+Engineering\n\nthe Marketing role can read\/view and browse the Printer resource whereas the Engineering role has full access to it (\u201cAll\u201d). These privileges are summarized in Table 3. Policy allows a user in the Marketing role to merely view the properties of Printer whereas Policy allows a user in the Engineering role to view and modify its properties, to create content nodes based on Printer (assuming it is a schema), and to delete the resource.\n",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Privileges for a \u201cPrinter504\u201d Node"},{"entry":"in Various Embodiments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ROLE","CREATE","READ\/VIEW","UPDATE","DELETE"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Marketing",{},"x",{},{}]},{"entry":["Engineering","x","x","x","X"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Aspects of certain of these embodiments include an implied hierarchy for privileges wherein child privilege(s) of a parent privilege are automatically granted if the parent privilege is granted by a policy.","In various embodiments, the containment models for polices and roles are extended to allow the properties of a node to inherit the policies and roles that are incident on the node. Roles\/polices on properties can also override inherited roles\/polices. For purposes of illustration, assume the following policy on a Power property of Printer:\n\nPolicy3=Printer504.Power+Update+Marketing\n","In Policy, the Marketing role is granted the right to update the Power property for the printer resource Printer (e.g., control whether the printer is turned on or off). By default, the Read\/View property is also granted according to an implied privilege hierarchy. (There is no Browse privilege for this property.) See Table 4. Alternatively, if there was no implied privilege hierarchy, the Power property would inherit the read\/view privilege for the Marketing role from its parent, Printer. Although no policy was specified for the Power property and the Engineering role, the privileges accorded to the Engineering role can be inherited from a parent node. These privileges are summarized in Table 4.",{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Privileges for the \u201cPower\u201d Property"},{"entry":"in the \u201cPrinter504\u201d Node"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ROLE","CREATE","READ\/VIEW","UPDATE","DELETE"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Marketing",{},"X","x",{}]},{"entry":["Engineering","X","X","x","x"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"In various embodiments, the ability to instantiate a node based on a schema can be privileged. This can be used to control which types of content can be created by a user or a process. By way of illustration, assume the following policy:\n\nPolicy4=Press_Release+Instantiate+Marketing, Manager\n","Policy specifies that nodes created based on the schema Press_Release can only be instantiated by users\/processes who are members of the Marketing and\/or Manager roles. In aspects of certain of these embodiments, user interfaces can use knowledge of these policies to restrict available user choices (e.g., users should only be able to see and choose schemas on which they have the Instantiate privilege).","In various embodiments, policies can be placed on schemas. For purposes of illustration, assume the following policies:\n\nPolicy5=Press_Release+Read\/View+Everyone\n\nPolicy6=Press_Release+All+Public_Relations\n",{"@attributes":{"id":"p-0086","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Privileges for the \u201cPress Release\u201d Schema"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CREATE",{},{},{}]},{"entry":["ROLE","INSTANCE","READ\/VIEW","UPDATE","DELETE"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Everyone",{},"X",{},{}]},{"entry":["Public Relations","x","X","x","x"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"A CAN_ASSOCIATE capability can be set on the workflow, node or type. For example only if the user has the CAN_ASSOCIATE capability on workflow XYZ, the user can associate it with a node or a type. Furthermore, to associate it with a node, the user should have a CAN_ASSOCIATE on the node too. The same is true for the type.","With reference to Table 5 and by way of illustration, assume a content node instance was created based on the Press Release schema. By default, it would have the same roles\/polices as the Press Release schema. If a policy was added to the node giving a role \u201cEditor\u201d the privilege to update the node, the result would be additive. That is, Everyone and Public Relations would maintain their original privileges.","In various embodiments, policies can be placed on properties within a schema, including property choices. (Property choices are a predetermined set of allowable values for a given property. For example, a \u201ccolors\u201d property could have the property choices \u201cred\u201d, \u201cgreen\u201d and \u201cblue\u201d.)",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 2"},"The ContentManagerFactory  can serve as a representation of an access device from an application program's  point of view. In aspects of these embodiments, the ContentManagerFactory attempts to connect all available repositories to the device (e.g., -); optionally with user or process credentials. In various embodiments, this can be based on the Java\u2122 Authentication and Authorization Service (available from Sun Microsystems, Inc.). Those of skill in the art will recognize that many authorization schemes are possible without departing from the scope and spirit of the present disclosure. An SPI Repository object - represents each available content repository. In an embodiment, the ContentManagerFactory can invoke a connect( ) method on the set of Repository objects. It is noteworthy that, in some embodiments, the notion of \u201cconnecting\u201d to a repository is not exposed to users. In various embodiments, the ContentManagerFactory returns a list of repository session objects to the application program, one for each repository for which a connection was attempted. Any error in the connection procedure can be described by the session object's state. In another embodiment, the ContentManagerFactory can connect to a specific repository given the repository name. In various embodiments, the name of a repository can be a URI (uniform resource identifier).",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 3A","FIG. 3A","FIG. 2","FIG. 3A","FIG. 3B"],"b":["200","302","304","306"]},"Some embodiments may also include redacting content received from the VCR prior to providing the content responsive to the request when the request does not satisfy the selected security policy. Alternatively, other embodiments may redact the request prior to accessing content in the VCR when the request does not satisfy the selected security policy. In another alternative approach, embodiments may block the request altogether when the request does not satisfy the selected security policy.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 3B","FIG. 3B"],"b":["312","314"]},"Otherwise, a determination is made based upon the classification of the request whether the request is a user request (block ). If so, then a security policy is selected to apply to the user request (block ). The security policy to apply to the user request is based upon a default user security policy that permits access to content within the VCR except for explicitly stated exceptions baring access to specific content in the VCR.","In some embodiments, security measures may be implemented at the repository level in addition to security at the federated level.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 4","FIG. 4","FIG. 2","FIG. 4"],"b":["200","402","404","406","408"]},"In an embodiment, the method includes redacting content from the result set to make the result set permissible according to the selected security policy. In an embodiment, the method includes redacting content from only that portion of the result set returned by the second content repository to make the result set permissible according to the first security mechanism. In an embodiment, the method includes blocking the request altogether when the request does not satisfy the selected security policy. Next, capabilities of content management security will be described with reference to an example embodiment.","NodeManager Capabilities","The Following capabilities are provided by the NodeManager API:\n\n","The Following capabilities are provided by the TypeManager API:\n\n","The Following capabilities are provided by the WorkflowManager API:\n\n","The Following capabilities are provided by the VirtualRepositoryManager API:\n\n","Delegated administration is available for users who log into the admin tools. Visitor Entitlements is for all visitors to WLP. With DA, you can create hierarchies of delegates to further delegate capabilities to other delegated administrators. For visitor entitlements, the notion of a hierarchy does not exist, and they cannot delegate to other users. Since Community roles are based on Delegated Administration (DA), embodiments will provide a way to secure content access. For example, in an embodiment, the Rules Engine may be modified to provide support for creating Roles based on Content Nodes (i.e., by providing a NodeWrapper service so that the rules engine can understand content resources). An alternative embodiment is outlined below:\n\n","For embodiments using Delegated Administration (DA) as a security mechanism for content management, both for Administration as well as Runtime Access, content management processes will include modifications to enable functional elements, such as without limitation: cm tags, content selectors, placeholders and search, since in most cases the user would not be found to be in the correct role (as he is probably going to be in a visitor role). In an embodiment, all CM visitors\/users are cast into DA roles. While there does seem to be overlap in the capabilities offered to CM DA users and visitors, clearly not all visitors are administrators.","In order for an administrator to gain access to content to a visitor in a conventional approach, the administrator will have to be made the visitor part of the PSA (Portal System Administrator) group by putting him in a DA Role. So, unknowingly the content administrator has given access to the AdminTools to a visitor. Accordingly, in order to create DA roles to represent CM visitors, such side affects of having all CM\/DA role predicates (users\/groups) added to the PSA role are avoided. In embodiments, this can be achieved by adding a checkbox to DA Role creation\/update that indicates not to add the predicates to the PSA role.","Since in many popular applications, the majority of work in a CM system is read access, Create\/Updates are relatively rare, and even if they occur it is safe to presume that customers will not experience problems putting those users in a DA role. Accordingly, the scope of the problem is decreased to providing a mechanism for visitors to have View access to a Content Resource. In an embodiment, this is performed as follows:\n\n","In other aspects, the invention encompasses in some embodiments, computer apparatus, computing systems and machine-readable media configured to carry out the foregoing methods. In addition to an embodiment consisting of specifically designed integrated circuits or other electronics, the present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure, as will be apparent to those skilled in the computer art.","Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits, as will be readily apparent to those skilled in the art.","The present invention includes a computer program product which is a storage medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include, but is not limited to, any type of rotating media including floppy disks, optical discs, DVD, CD-ROMs, microdrive, and magneto-optical disks, and magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data.","Stored on any one of the machine readable medium (media), the present invention includes software for controlling both the hardware of the general purpose\/specialized computer or microprocessor, and for enabling the computer or microprocessor to interact with a human user or other mechanism utilizing the results of the present invention. Such software may include, but is not limited to, device drivers, operating systems, and user applications.","Included in the programming (software) of the general\/specialized computer or microprocessor are software modules for implementing the teachings of the present invention, including, but not limited to providing mechanisms and methods for interacting with a virtual content repository and providing content management security to federated content repositories as discussed herein.",{"@attributes":{"id":"p-0112","num":"0140"},"figref":["FIG. 5","FIG. 1","FIG. 5","FIG. 1","FIG. 1"],"b":"500"},"Computing system  comprises components coupled via one or more communication channels (e.g., bus ) including one or more general or special purpose processors , such as a Pentium\u00ae, Centrino\u00ae, Power PC\u00ae, digital signal processor (\u201cDSP\u201d), and so on. System  components also include one or more input devices  (such as a mouse, keyboard, microphone, pen, and so on), and one or more output devices , such as a suitable display, speakers, actuators, and so on, in accordance with a particular application. (It will be appreciated that input or output devices can also similarly include more specialized devices or hardware\/software device enhancements suitable for use by the mentally or physically challenged.)","System  also includes a machine readable storage media reader  coupled to a machine readable storage medium , such as a storage\/memory device or hard or removable storage\/memory media; such devices or media are further indicated separately as storage  and memory , which may include hard disk variants, floppy\/compact disk variants, digital versatile disk (\u201cDVD\u201d) variants, smart cards, read only memory, random access memory, cache memory, and so on, in accordance with the requirements of a particular application. One or more suitable communication interfaces  may also be included, such as a modem, DSL, infrared, RF or other suitable transceiver, and so on for providing inter-device communication directly or via one or more suitable private or public networks or other components that may include but are not limited to those already discussed.","Working memory  further includes operating system (\u201cOS\u201d)  elements and other programs , such as one or more of application programs, mobile code, data, and so on for implementing system  components that might be stored or loaded therein during use. The particular OS or OSs may vary in accordance with a particular device, features or other aspects in accordance with a particular application (e.g. Windows\u00ae, WindowsCE\u2122, Mac\u2122, Linux, Unix or Palm\u2122 OS variants, a cell phone OS, a proprietary OS, Symbian\u2122, and so on). Various programming languages or other tools can also be utilized, such as those compatible with C variants (e.g., C++, C#), the Java\u2122 2 Platform, Enterprise Edition (\u201cJ2EE\u201d) or other programming languages in accordance with the requirements of a particular application. Other programs  may further, for example, include one or more of activity systems, education managers, education integrators, or interface, security, other synchronization, other browser or groupware code, and so on, including but not limited to those discussed elsewhere herein.","When implemented in software (e.g. as an application program, object, agent, downloadable, servlet, and so on in whole or part), a learning integration system or other component may be communicated transitionally or more persistently from local or remote storage to memory (SRAM, cache memory, etc.) for execution, or another suitable mechanism can be utilized, and components may be implemented in compiled or interpretive form. Input, intermediate or resulting data or functional elements may further reside more transitionally or more persistently in a storage media, cache or other volatile or non-volatile memory, (e.g., storage device  or memory ) in accordance with a particular application.","Other features, aspects and objects of the invention can be obtained from a review of the figures and the claims. It is to be understood that other embodiments of the invention can be developed and fall within the spirit and scope of the invention and claims. The foregoing description of preferred embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 3A-3B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
