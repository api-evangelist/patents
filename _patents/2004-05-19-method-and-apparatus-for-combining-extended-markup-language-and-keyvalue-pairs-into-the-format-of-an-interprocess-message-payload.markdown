---
title: Method and apparatus for combining extended markup language and key/value pairs into the format of an interprocess message payload
abstract: An apparatus for and method of utilizing an existing predefined messaging protocol to convey additional data in application-to-application communication. Instead of utilizing a plurality of the existing predefined messages or defining a new unique message type to convey the needed data, a single preexisting message type is used to define location and format of the data objects to be communicated. The receiving application unpacks these definitions from the single message received and accesses the defined data objects as required.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07587719&OS=07587719&RS=07587719
owner: Unisys Corporation
number: 07587719
owner_city: Blue Bell
owner_country: US
publication_date: 20040519
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO CO-PENDING APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["U.S. patent application Ser. No. 10\/848,473, filed May 19, 2004, and entitled, \u201cInterface Cool ICE OLEDB Consumer Interface\u201d; U.S. patent application Ser. No. 09\/188,629, filed Nov. 9, 1998, and entitled, \u201cCool ICE data Wizard\u201d, now U.S. Pat. No. 6,295,531; U.S. patent application Ser. No. 09\/188,649, filed Nov. 9, 1998, and entitled, \u201cCool ICE Column Profiling\u201d; U.S. patent application Ser. No. 10\/849,511, filed May 19, 2004, and entitled, \u201cStored Procedure\u201d; and U.S. patent application Ser. No. 09\/188,725, filed Nov. 9, 1998, and entitled, \u201cCool ICE State Management\u201d, now U.S. Pat. No. 6,324,639, are commonly assigned co-pending applications.","1. Field of the Invention","The present invention generally relates to diverse data base management systems and more particularly relates to enhanced message handling techniques which provide efficient communication between such diverse data base management systems.","2. Description of the Prior Art","Data base management systems are well known in the data processing art. Such commercial systems have been in general use for more than 20 years. One of the most successful data base management systems is available from Unisys Corporation and is called the Classic MAPPER\u00ae data base management system. The Classic MAPPER system can be reviewed using the Classic MAPPER User's Guide which may be obtained from Unisys Corporation.","The Classic MAPPER system, which runs on proprietary hardware also available from Unisys Corporation, provides a way for clients to partition data bases into structures called filing cabinets and drawers, as a way to offer a more tangible format. The Mapper data base manager utilizes various predefined high-level instructions whereby the data base user may manipulate the data base to generate human-readable data presentations called \u201creports\u201d. The user is permitted to prepare lists of the various predefined high-level instructions into data base manager programs called \u201cMapper Script\u201d. Thus, users of the Classic MAPPER system may create, modify, and add to a given data base and also generate periodic and aperiodic reports using various Mapper Script.","However, with the Classic MAPPER system, as well as with similar proprietary data base management systems, the user must interface with the data base using a terminal coupled directly to the proprietary system and must access and manipulate the data using the Mapper Script command language of Classic MAPPER. Ordinarily, that means that the user must either be co-located with the hardware which hosts the data base management system or must be coupled to that hardware through dedicated telephone, satellite, or other data links. Furthermore, the user usually needs to be schooled in the command language of Classic MAPPER (or other proprietary data base management system) to be capable of generating Mapper Script.","However, some of the most powerful data base management functions or services of necessity rely on coupling data from one legacy data base to another. This tends to be difficult because of the incompatibilities between differing legacy data base systems Further problems arise with legacy data base management system access to various incompatible data bases as well. To be most useful, there must be the capability to access such preexisting, incompatible data bases. Unfortunately, this involves a number of incompatible message types. This promotes substantial inefficiencies in processing service requests and providing corresponding responses.","The present invention overcomes the disadvantages of the prior art by providing a method of and apparatus for simplifying message format and traffic between legacy data base management systems. This enhanced message protocol permits the user to log-on, insert, update, delete, fetch, and log-off from a previously incompatible data base interface. In accordance with the present invention, a user is permitted to easily operate on data within an existing data base which is otherwise incompatible with the preferred legacy data base management system, BIS.","The preferred mode of the present invention provides a generic messaging protocol that can be used by client\/server applications. The properties can be transmitted in different data types such as integer, boolean, BSTR, and VARIANT. The message object also provides the capability to transmit XML, as either a document included in the message, or as XML contained in individual properties. An object API (Applications Programming Interface) is provided to set and retrieve message properties and document information.","The object API also provides the capability for the message to render itself into a byte stream for transmission across a communications protocol, as well as the ability to reconstitute state from a byte stream received.","The protocol consists of two primary classes used by the consumer application: the CDACSMesage class and the CDACSMsgPropIterator class. The CDACSMessage class provides the primary interface to the message processing with the ability to construct, set and get attributes, or read\/write out message content. The CDACSMsgPropIterator class provides an iterator object interface to move through a sequence of properties in the message, so that the keys and value of message properties can be accessed.","The message body is a set of CComVariant properties, and a CComBSTR buffer. The CDACSMessage class provides methods for the consumer to mange the properties and document buffer.","A BSTR is a pointer to a buffer of Unicode characters. The length of the buffer is offset four bytes before the characters begin. The entire buffer is null-terminated, but there can also be null characters embedded in the buffer. The length of the BSTR is one less than the number of characters in the buffer (the buffer includes a final null character), not the length to the first null, in reality, a Unicode \u201ccharacter\u201d is type defined as an unsigned short integer, so a BSTR can point to generic binary information as well as text.","A BSTR can be utilized as though it were a simple pointer to WCHAR, except for finding length or managing the attached buffer to which it points. For memory management, the Windows libraries provide \u201csystem\u201d procedures (SysAllocString, SysFreeString, SysStringLen, etc.), which are packaged conveniently into the CComBSTR class methods.","To the CDACSMessage consumer, the properties and the attached document buffer constitute the message data. A message need not have both properties and document. It can consist entirely of properties with no document, or have no properties and consist solely of the attached document.","Properties are indexed by unique integer keys. The consumers define meaning of these keys and the associated CComVariant values. As noted above, the contents of the document can be non-textual binary data.","The present invention is described in accordance with several preferred embodiments which are to be viewed as illustrative without being limiting. These several preferred embodiments are based upon Series 2200 hardware and operating systems, the Classic MAPPER data base management system, and the BIS software components, all available from Unisys Corporation. When used herein, OLEDB refers to a COM-based Application Programming Interface (API) designed to provide access to a wide range of data sources. OLEDB includes SQL functionality but also defines interfaces suitable for gaining access to data other than SQL data. COM facilitates application integration by defining a set of standard interfaces. Each interface contains a set of functions that define a contract between the object implementing the interface and the client using it. A UDL file contains the complete connection string information, including the data source, userid, password, and any other information needed to logon to and fetch data.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["10","12","12","12","16","14","16"]},"The BIS system is resident in Enterprise Server  and accompanying storage subsystem , which is coupled to Server  via WAN (Wide Area Network) . In the preferred mode, Server  is owned and operated by the enterprise owning and controlling the proprietary legacy data base management system. Server  functions as the Internet access provider for Internet terminal  wherein world wide web access  is typically a dial-up telephone line. This would ordinarily be the case if the shown client were an employee of the enterprise. On the other hand, server  may be a remote server site on the Internet if the shown client has a different Internet access provider. This would ordinarily occur if the shown client were a customer or guest.","In addition to being coupled to WAN , Enterprise Server , containing the BIS system, is coupled to departmental server  having departmental server storage facility . Additional departmental servers (not shown) may be similarly coupled. The enterprise data and enterprise data base management service functionality typically resides within enterprise server , departmental server , and any other departmental servers (not shown). Normal operation in accordance with the prior art would provide access to this data and data base management functionality.","In the preferred mode of the present invention, access to this data and data base management functionality is also provided to users (e.g., terminal ) coupled to network . As explained below in more detail, server  provides this access utilizing the BIS system.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2"},"Command set  represents the commands defined for processing by MRI. In addition to @SPI, @FCH, and @SQL, @LGN (log on), MRI recognizes @LGF (log off), @DDI (data definition information), @RAM (relational aggregate modify), @TRC (trace relational syntax), @MQL (submit SQL syntax to a BIS data base) as the remaining commands. DAC\/BIS core Engine  provides the basic logic for decode and execution of these commands. MRI  has relational access to data via the data base management formats shown to external data bases . In addition, MRI  can call upon remote MRI  to make similar relational access of remote data bases .","BIS core engine  executes commands utilizing meta-data library  and BIS repository . Meta-data library  contains information about the data within the data base(s). BIS repository  is utilized to store command language script and state information for use during command execution.","The @SPI command has the following basic format:","@SPI, c, d, lab, db, edsp?, action, wrap, vert \u2018sp-syntax\u2019, vpar1 . . . , vparN, typ1, . . . typN.","Fields c and d refer to the cabinet and drawer, respectively, which hold the result. The lab field contains a label to go to if the status in the vstat variable specifies other than normal completion. The required db field provides the data base name. The edsp? field specifies what is to be done with the result if an error occurs during execution.","The sub-field labeled action defines what action is to be performed. The options include execution, return of procedures lists, etc. The wrap sub-field indicates whether to truncate or wrap the results. The vert sub-field defines the format of the results. The name of the stored procedure is placed into the sp-syntax field. The vpar provides for up to 78 variables that correspond to stored procedure parameters. Finally, the typ field defines the type of each stored procedure parameter.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":["44","54","56"]},"BIS  includes the BIS Command Interpreter and MOS API Interface  which provide the @SPI command to Receiver . The packet is built by element  for transfer to MRIM .","MRIM  receives remote packets from Source Remote MRIM . The @SPI command packet is received by element , whether local or remote. Remote packets are forwarded via Destination Remote MRIM . Local packets are passed to element  for parsing. Control is given to element  for switching between retrieve commands and execute commands.","Request packets for retrieval are routed to element , , or  depending upon whether it requests a list, parameter information, or column information, respectively. Upon the appropriate retrieval, elements , , and  look for a retrieval error. If yes, control is given to element  for setting the error information before exit. If not, control is given to element , , or  for building of the result packet, before exit.","Element  routes execution request packets to element  for execution of the stored procedure. Element  determines whether an error has occurred. If yes, element  sets the error information before exit. If not, element  builds the output results packet. Element  returns the data before exit.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4","b":["96","106","108","110","100","102","104","116","118","120","122","124","126","128","112","114","130","98"]},"Interface from BIS  to MRIM  is handled by MRI-Main . The incoming packets are routed via MRIM_Rcvr  and Proc_Req , as appropriate. Each of the listed commands (see list ) is assigned to the corresponding one of the request handlers , , , , , and . After unpacking, switch , controlled by element , routes the information to the appropriate one(s) of the command handlers , , , , , , , , , , and . Data base command access is via the appropriate one(s) of the data base interfaces , , , , , and  to the specified one(s) of the available data bases , , , , , and . Internal utilities , , , , , and  assist in this process as needed.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5","b":["212","214","216","218","220","224","222","224","228"]},"The @LGN command is provided to the function engine at element . If element  determines that the needed processes are not available, control is returned to element , with no further possible processing of the current command. If the processes are now available, element  provides command to element .","The Mrim.exe process is marked in use by element . At element  Mrim.exe builds the actual Log-On statement. This statement is executed at element  to perform the log-on function. Element  determines whether the execution was successful. If yes, control is returned to element  to await the next command. Otherwise control is given to element  to go through the @LGN logic.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 6","b":["238","240","242"]},"At element , the function engine builds a packet from the command statement. MRIM.exe parses the packet at element . Element  determines whether more information is needed. If yes, control is returned to element  for further parsing. If not, control is given to element  for obtaining the column information. Element  determines whether an error has occurred. If yes, control is given to element . If not, element  executes the SQL command. If element  determines that an error has occurred during the execution, control is given to element  for passing the error to the function engine, with control returned to element  for the next command.","If no error has occurred in the execution, element  determines if the data base order has been reversed. If yes, control is given to element  for re-execution of the command. If not, element  determines whether all data has been processed. If not, an error has occurred and control is given to element  for error processing. If no error, the command has been fully executed properly, and control is returned to element  for processing of the next command.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","b":["264","266","268","270"]},"The @LGF command packet is sent to Mrim.exe at element . Mrim.exe builds the data base specific log-off packet at element . Element  sends the packet to the appropriate data base. Mrim.exe is cleaned up at element .","Element  determines whether the command is a pooled process. If not, control is given to element  for termination of the process, and control is returned to element  for a future command. If it is a pooled process, element  gives control to element  to mark Mrim.exe as not in use. Control is returned to element  to await the next command.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 8","b":["290","286","292","290","288","294"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 9"},"In accordance with the table of , the left most column lists the basic functions. The corresponding entry within the right most column defines the operation associated therewith.","The CDACSMessage class does not provide methods corresponding to the CComBSTR methods ReadFromStream and WriteFromStream, to write the document to an IStream. Instead, it provides the Save and Load methods for converting between the entire object and a simple memory buffer. Furthermore, the CDACSMessage class does not provide methods corresponding to the CComBSTR method LoadString for loading a string from a resource.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 11","b":["290","300","298","300"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 12","b":["302","304","306","302","302","306"]},"Having thus described the preferred embodiments of the present invention, those of skill in the art will be readily able to adapt the teachings found herein to yet other embodiments within the scope of the claims hereto attached."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other objects of the present invention and many of the attendant advantages of the present invention will be readily appreciated as the same becomes better understood by reference to the following detailed description when considered in connection with the accompanying drawings, in which like reference numerals designate like parts throughout the figures thereof and wherein:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
