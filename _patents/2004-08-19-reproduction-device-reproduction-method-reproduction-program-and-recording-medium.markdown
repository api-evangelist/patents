---
title: Reproduction device, reproduction method, reproduction program, and recording medium
abstract: With a reproduction-only disc having a large recording capacity, an interactive function having a higher degree of freedom than the related art can be easily accomplished. A virtual player model corresponding to a function of a player is created and described in Java. BDBasicPlayer  detects a user input and the status change of the player and generates an event. An object  that implements a listener interface registers an event listener corresponding to an event that the object  is caused to receive to BDBasicPlayer  before the event takes place. When the event becomes unnecessary, it is unregistered. BDBasicPlayer  transmits the event to the object  in which the event listener has been registered. The object  executes a method corresponding to the received event. The relationships between events and methods can be flexibly set. Thus, a complicated interactive function can be easily accomplished.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07821881&OS=07821881&RS=07821881
owner: Sony Corporation
number: 07821881
owner_city: Tokyo
owner_country: JP
publication_date: 20040819
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF THE INVENTION","BEST MODES FOR CARRYING OUT THE INVENTION","1. First Embodiment of Present Invention","2. Second Embodiment of Present Invention","DESCRIPTION OF REFERENCE NUMERALS"],"p":["The present invention relates to a reproducing apparatus, a reproducing method, a reproducing program, and a recording medium that allow the user to interactively operate a program recorded on a large capacity type recording medium such as the Blu-ray Disc.","In recent years, as a standard for a disc type recording medium that is recordable and detachable from a recording and reproducing apparatus, the Blu-ray Disc standard has been proposed. The Blu-ray Disc standard prescribes a disc that has a recording medium having a diameter of 12 cm and a cover layer having a thickness of 0.1 mm. The Blu-ray Disc standard uses as optical systems a bluish-purple laser having a wavelength of 405 nm and an objective lens having a numerical aperture of 0.85. The Blu-ray Disc standard accomplishes a recording capacity of 27 GB (Giga bytes) maximum. As a result, a program of a BS digital high-vision broadcast available in Japan can be recorded for two hours or longer without deterioration of picture quality.","As sources (supply sources) of AV (Audio\/Video) signals recorded on the recordable optical disc, an analog signal of for example a conventional analog television broadcast and a digital signal of for example a digital television broadcast such as a BS digital broadcast are expected to be used. The Blu-ray Disc standard has established a sub standard for a method for recording AV signals of such broadcasts.","As a derivative standard of the current Blu-ray Disc standard, there is a movement to develop reproduction-only recording mediums on which movies, music, and the like are pre-recorded. As disc-shaped recording mediums on which movies and music are pre-recorded, DVD (Digital Versatile Disc) has been widely used. The reproduction-only optical disc in accordance with the Blu-ray Disc standard is largely different from and superior to the conventional DVD in a large recording capacity and a high transfer rate that allow high-vision pictures to be recoded for two hours or longer in high quality.","The reproduction-only DVD video standard accomplishes an interactive function with button images and so forth on a menu screen. For example, while a moving picture of the DVD video is being reproduced, a process that calls a menu screen with a remote control commander or the like, selects a button image on the menu screen, and changes the reproduced scene can be performed.","In the case of the DVD video, a menu screen is composed of fixed sub picture data. When the menu screen is called, it is displayed in such a manner that the sub picture data is combined with moving picture data. Button image data is included in the sub picture, data. Patent Document \u201cJapanese Patent Laid-Open Publication No. HEI 10-308924\u201d describes a structure of which sub picture data is combined with moving picture data and the combined data is recorded to a recordable DVD.","However, since the reproduction-only DVD video standard prescribes operations using simple commands, it is difficult to accomplish complicated interactive functions. Thus, the creator needs much labor to accomplish the complicated interactive functions with the reproduction-only DVD video standard.","In addition, the reproduction-only DVD video standard prescribes simple program operations with a region of commands the are executed one after the other. Thus, multi-threaded programming and event-driven programming cannot be performed on the reproduction-only DVD video standard. Although the DVD video standard does not have a function that accesses a network such as the Internet, when the network access function is considered to be accomplished, since response times from the network and the user tend to be long, a multi-threaded process is very effective as a system structure to improve the performance.","In addition, in the DVD video standard, commands are embedded in an AV (Audio\/Video) stream of which video data and audio data are multiplexed. As the AV stream is reproduced, the embedded commands are extracted therefrom and executed. In other words, an operation model like tracing a vine is performed. Thus, only when the user selects a button and executes a command corresponding to the button on a title selection menu screen or in a multi-story that contains branches, the next operation is decided. Thus, in the DVD video standard, high speed process techniques that pre-read commands for branch prediction and speculative execution cannot be used.","In addition, from a view point of authoring, which creates discs, the reproduction-only DVD video standard has drawbacks. Now, it is assumed that a button designed to appear at predetermined timing on an AV stream and the timing is moved forward or backward on the time axis. For example, as shown in , buttons designate to appear after button appearance start time t to button appearance end time t on the AV stream are changed so that the buttons appear after time t that is earlier than time t.","As well known, in the reproduction-only DVD video standard, an AV stream is encoded and packetized as prescribed in the MPEG 2 (Moving Pictures Experts Group 2) standard. Timing management of a reproduction output is performed with pts (Presentation Time Stamp). In the example shown in , the button appearance start time is changed from pts corresponding to time t to pts corresponding to time t.","In the DVD video standard, navigation information, video data, audio data, and sub picture data are individually packed and multiplexed as one AV stream. Commands and so forth are embedded in the AV stream. Video data, audio data, and sub picture data are designated to appear at their multiplexed times. For example, as shown in , these data are multiplexed so that predetermined data are reproduced at their predetermined times on the time axis managed at pts intervals.","Since the data are multiplexed in such a manner, when button A designated to appear at time pts is changed so that it appears at time pts, the AV stream shown in  should be re-multiplexed so that sub picture data of button  appears at time pts. When the contents of a command that is executed when a button is selected are changed, the AV stream should be re-multiplexed. When an AV stream is re-multiplexed, it needs to be reproduced by a DVD player and temporarily stored in a memory of the player.","Thus, conventionally, it is difficult to accomplish interactive functions having a higher degree of freedom. To accomplish them, the creator side needs much labor.","An object of the present invention is to provide a reproducing apparatus, a reproducing method, a reproducing program, and a recording medium that allow interface functions with a high degree of freedom for large storage capacity type reproduction-only optical discs to be easily accomplished.","The present invention is a reproducing apparatus that reproduces content data hierarchically recorded on a disc-shaped recording medium, comprising: a player object that generates an event corresponding to a predetermined change; and a program object that is formed above said player object and that is capable of describing a process corresponding to the event that takes place, wherein said player object controls a reproduction process for content data hierarchically recorded on the disc-shaped recording medium with a process corresponding to the event described in said program object.","In addition, the present invention is a reproducing method of reproducing content data hierarchically recorded on a disc-shaped recording medium, comprising the step of: causing a player object that generates an event corresponding to a predetermined change to control a reproduction process for content data hierarchically recorded on the disc-shaped recording medium with a process corresponding to the event described in a program object that is formed above the player object and that is capable of describing a process corresponding to the event that takes place.","In addition, the present invention is a reproducing program that causes a computer device to execute a reproducing method of reproducing content data hierarchically recorded on a disc-shaped recording medium, comprising the step of: causing a player object that generates an event corresponding to a predetermined change to control a reproduction process for content data hierarchically recorded on the disc-shaped recording medium with a process corresponding to the event described in a program object that is formed above the player object and that is capable of describing a process corresponding to the event that takes place.","In addition, the present invention is a computer readable recording medium on which a reproducing program has been recorded, the reproducing program causing a computer device to execute a reproducing method of reproducing content data hierarchically recorded on a disc-shaped recording medium, comprising the step of: causing a player object that generates an event corresponding to a predetermined change to control a reproduction process for content data hierarchically recorded on the disc-shaped recording medium with a process corresponding to the event described in a program object that is formed above the player object and that is capable of describing a process corresponding to the event that takes place.","In addition, the present invention is a disc-shaped recording medium on which content data have been hierarchically recorded, at least content data and a program object that is capable of describing a process corresponding to an event that takes place being recorded on the recording medium, a reproduction process for the content data being controlled with a process corresponding to the event described in the program object by a player object that generates an event corresponding to a predetermined change and formed below the program object.","As described above, in claim , claim , claim , and claim  of the present invention, a player object generates an event corresponding to a predetermined change to control a reproduction process for content data hierarchically recorded on the disc-shaped recording medium with a process corresponding to the event described in a program object that is formed above the player object and that is capable of describing a process corresponding to the event that takes place. Thus, one player object is capable of performing a reproduction control for an original process for each disc-shaped recording medium.","In addition, in claim  of the present invention, at least content data and a program object that is capable of describing a process corresponding to an event that takes place are recorded on the recording medium. A reproduction process for the content data is controlled with a process corresponding to the event described in the program object by a player object that generates an event corresponding to a predetermined change and formed below the program object. Thus, one player object is capable of performing a reproduction control for an original process for each recording medium.","According to the present invention, a virtual player that abstractly forms an AV stream reproduction function of a BD-ROM player is structured. Events that take place in an event model applied to the virtual player are designated. In addition, user events corresponding to user inputs are defined. Thus, with one event model, functions of the DVD video can be accomplished.","In addition, according to the present invention, a virtual player that abstractly forms an AV stream reproduction function of the BD-ROM player is structured. A Java class corresponding to the virtual player is defined. Events that take place in an event model applied to the virtual player are designated. In addition, user events corresponding to user inputs are defined. Thus, as a reproduction control method for a reproduction-only video disc, event models of Java can be applied. As a result, with a Java program, the reproduction of a play list can be controlled.","Thus, to implement complicated interactive functions, the disc creator side does not need much labor.","In addition, the present invention can be applied not only to the Java language, but to a script language such as the ECMA script. The content creator side can describe contents of event handlers corresponding to events using a script language. As a result, when an event takes place, an operation that the content creator side desires can be easily accomplished.","Next, the present invention will be described corresponding to the following structure.\n\n","Next, a first embodiment of the present invention will be described. For easy understanding of the present invention, a standard for a reproduction-only record medium will be briefly described as a derivative of the current Blue-ray Disc standard. In the following description, the reproduction-only record medium as a derivative of the Blue-ray Disc standard is named the BD-ROM (Blu-ray Disc Read Only Memory) to distinguish it from a recordable Blu-ray disc. The BD-ROM standard prescribes HD (High Definition) movie mode that provides interactive functions similar to those of the DVD video.","1-1. About AV Steam Functions of BD-ROM","1-1a. About HD Movie Mode of BD-ROM",{"@attributes":{"id":"p-0064","num":"0080"},"figref":["FIG. 3A","FIG. 3B"]},"The clip layer is composed of one or a plurality of clips. A clip is composed of a clip AV stream and clip information. The entity of an AV stream is a clip AV stream file. An AV stream is recorded in an MPEG (Moving Pictures Experts Group 2) transport stream with a time stamp. A clip AV stream file can be multiplexed with button objects for button images.","When a clip AV stream file is recorded, a clip information file corresponding thereto is created in the relationship of 1 to 1. A set of one clip AV stream file and one clip information file is referred to as a clip.","A clip is a record unit. The reproduction order of clips is controlled in an upper layer of clips. The play list layer is a layer in which the reproduction path of clips is designated. The play list layer contains one or a plurality of play lists. In the HD movie mode of the BD-ROM standard, only one type of a play list referred to as a movie play list exists. A movie play list is composed of a set of play items. A play item contains a set of an IN point and an OUT point that represent the reproduction range of a clip. With a plurality of play items, clips can be reproduced in any order. Play items can designate the same clip. The IN point and OUT point of a clip AV stream file are designated with byte positions.","The movie object exists above the play list layer. The movie object layer is composed of one or a plurality of movie objects. A movie object is composed of a play list reproduction command and a set of player set commands. With commands contained in a movie object, a play list reproduction that reproduces a stream in a selected language or that has conditional branches that cause play lists to be selected to vary corresponding to predetermined conditions can be accomplished. An example of an application that performs a play list reproduction that has conditional branches would be a multi-story. Thus, movie objects provide interactivity.","The index table layer contains an index table and exists above the play list layer. The index table is composed of a movie object that is first executed when the disc is loaded into the player, a movie object that is executed when the menu key is pressed, and a list of titles that the user can watch. The index table provides a user interface. A title is composed of one or a plurality of movie objects. The index table lists movie objects that are first executed in titles. The player decides a movie object that it first executes in each operation on the basis of the index table.","Formed on the disc in the HD movie mode of BD-ROM is the foregoing database. The player reads the database from the disc and performs the designated operation.","Next, a model of the player side will be described. In reality, various implement models of players are considerable. In this example, a player model is divided into a hardware-like functional block that reproduces a stream and a software functional block that interprets and executes commands and that exists above the software-like functional block.  shows an example of a layer structure of a player model of the BD-ROM. The left portion of  shows the layer structure, which is divided into two functional blocks in the HD movie mode.","A BD presentation engine  is a functional block that handles play lists and clips, decodes an AV stream, and reproduces a moving picture and sound data. The BD presentation engine  also decodes a sub title stream and a graphics stream for button images and menus.","The BD presentation engine  reproduces a designated play list corresponding to a command received from the upper layer.","In the HD movie mode of the BD-ROM, a navigation engine  exists above the BD presentation engine . The navigation engine  interprets an index table and movie objects and informs the BD presentation engine  of a play list that is finally reproduced.","1-1b. About Full Profile of BD-ROM","Next, a full profile of the BD-ROM standard will be described. The full profile of the BD-ROM standard is a mode that has a higher degree of freedom and expansibility than the HD movie mode of the BD-ROM standard. Hereinafter, the full profile mode of the BD-ROM standard is referred to as the full profile.","According to the first embodiment of the present invention, the player model is provided with a Java virtual machine (Java VM) and executes a Java application to accomplish the full profile for higher degree of freedom and expansibility. This point is largely different from the HD movie mode of the BD-ROM. Java, JavaVM, and so forth are registered trademarks of Sun Microsystems, Inc.","The full profile needs to use all the functions of the player. An API (Application Programming Interface) is defined between the BD presentation engine  and a Java application. Thus, the BD presentation engine  can be operated through the API. Like the navigation engine  in the HD movie mode of the BD-ROM, the Java application can be thought to exist above the BD presentation engine . In other words, as illustrated on the right portion of , in the full profile, a Java application  exists above the BD presentation engine  through a Java VM .","In addition, Java also has a network function and a graphics function. Thus, there are a network layer  and a GUI (Graphical User Interface) layer  as lower layers of the Java application  and the Java VM .","When the BD presentation engine  is operated with the Java application , it can be thought that the player that reproduces a play list is a virtual player on the software, commands for playback, stop, stream selection, and so forth are sent to the player, and the player is operated with the commands. The player needs to inform the player of the current status of the player as to which play list the player is reproducing and what times various operations such as stream selections and user inputs will change. According to the first embodiment of the present invention, these functions of the player are considered as abstractive objects on the Java application . The abstractive objects of the functions of the player are referred to as the BD basic player.","Next, with reference to , a BD basic player will be described. A BD basic player  reproduces data from a disc-shaped recording medium defined in the first embodiment of the present invention. The BD basic player  is an object such as a personal computer on the computer environment. The computer environment is not limited to a general purpose personal computer. For example, the computer environment includes a software environment implemented in a dedicated reproducing apparatus and\/or a recording and reproducing apparatus that reproduces data from a disc-shaped recording medium defined in the first embodiment of the present invention. Hereinafter, the disc-shaped recording medium according to the first embodiment of the present invention is abbreviated to the disc.","The BD basic player  is an abstractive object on the software. Below the BD basic player , an OS (Operating System) and hardware  exist. As a superordinate program of the BD basic player , there is a Java program  through an API .","The BD basic player  has two statuses A and B. In status A, a play list and graphics can be reproduced. In status B, their reproduction is stopped. Status A includes a plurality of operations such as variable speed reproductions for example high speed reproduction and reverse reproduction and jump reproduction that reproduces data from any time point on the disc. In addition, the BD basic player  contains variables that hold statues of the player (common parameters ). The common parameters  are composed of registers and so forth on the computer environment. When an application (Java program ) on the upper layer accesses the common parameters  through a method of Java, the application can perform a process corresponding to the status of the BD basic player .","The BD basic player  is an abstractive object on the software. The BD basic player  finally converts control by the Java program  through the API  to control by the OS and the hardware  that exist in the lower level.","The BD basic player  needs to be controlled by a superordinate program (Java program ) through the API . In addition, the BD basic player  needs to inform the superordinate program that the status of the BD basic player  changes. In other words, when the BD basic player  performs a plurality of operations that successively reproduces one play list and then another play list, the superordinate program needs to have known the status of the BD basic player . According to the first embodiment of the present invention, as a mechanism that informs the upper layer of the status of the player, event models are used.",{"@attributes":{"id":"p-0085","num":"0101"},"figref":"FIG. 6"},"Likewise, if a mark is present in a play item, while a play item is being reproduced, the mark is detected. Thus, event MarkEncountered takes place. When the reproduction of the play item has been completed, event PlayItemEnded takes place. When the reproduction of the play list has been also completed, event PlayListEnded takes place. When the reproduction has been completed, event PlayEnded takes place.","Thus, while the player is being operated, various events take place. When the superordinate program is informed of occurrence of an event, the superordinate program can know the status of the player. The superordinate program side prepares programs that are executed when it is informed of occurrence of events, it can deal with occurrence of the events.","According to the first embodiment of the present invention, an abstracting method for a player, method models that allow a Java program to operate the player, and event models that inform the Java program of the status of the player are provided. The Java language is implemented to a control program of the BD-ROM. In the system according to the first embodiment of the present invention, the disc creator creates the Java program  that operates the BD basic player  through the API .","Next, a practical example of which functions of the player are analyzed in detail, abstracted, and represented as classes of Java will be described.","1-2. BD Virtual Player Model Based on Java","To designate the full profile of the BD-ROM, it is necessary to define an execution environment for the Blu-ray Disc. An ideal model of the BD basic player  that reproduces data from the BD-ROM is named the BD-ROM virtual player model. The BD basic player  corresponds to a functional block that reproduces a play list of the BD-ROM virtual player model. In the BD-ROM virtual player model, statuses and conditions for the status changes are defined. In addition, attributes of streams reproduced by the BD basic player , a commandless (script) description method that controls streams, and so forth are defined. Scripts and streams recorded in the BD-ROM should be correctly operated on the BD-ROM virtual player model.","Although a real BD-ROM player can be installed in various manners, when a model that does not need to be installed is considered, minimally required hardware resources can be clarified.","The BD-ROM virtual player model defined in the first embodiment of the present invention uses Java as a programming language that controls the BD basic player . Java is a programming language created by Sun Microsystems, Inc and has a plurality of editions such as J2EE, J2SE, J2ME, and so forth that differ in their applicable system scales. In this example, it is assumed that J2ME, which is an edition designed to be installed to a set top box and so forth, is used for the BD-ROM virtual player model. In other words, the BD-ROM virtual player model is extended on the basis of J2ME.","As a feature of the Java language, when a new class is defined for a program, it can be easily extended. Assuming that an HTML (Hyper Text Markup Language) document does not support an event process. To allow this HTML document to support the event process, a script for the event process, for example an ECMA (European Computer Manufacturers Association) script, is described in the HTML document.","When the Java language is used, a function can be added corresponding to an extension method defined in the Java language without using a plurality of techniques that accomplish the function. Thus, a completed program is described in only the Java language. In addition, Java has already provided various program development environments. Thus, it can be said that the disc creator can easily create disc contents.","When the BD-ROM virtual player model is described in the Java language, API, a class that has been defined by Sun Microsystems, Inc., can be used as it is. On the other hand, the BD basic player  is an original function of the BD-ROM. Thus, Java does not provide the BD basic player  as an existing class and API. When this original function of the BD-ROM is accomplished by Java, there may be various methods. However, according to the first embodiment of the present invention, functions of the BD basic player , API, event models, and so forth are created corresponding to the BD-ROM.","First, the BD basic player  is defined as one class of Java. The name of the class is defined as BDBasicPlayer.  to  show lists of examples of methods of class BDBasicPlayer. All commands for the BD basic player  are performed with these methods.",{"@attributes":{"id":"p-0097","num":"0113"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0098","num":"0114"},"figref":["FIG. 8A","FIG. 8B","FIG. 8C"]},"Method playPlayItem(int playListNumber, int playItemNumber) starts the reproduction of a play list designated by \u201cplayListNumber\u201d from a play item designated by \u201cpalyItemNumber.\u201d \u201cplayItemNumber\u201d is \u201cPlayItem_id\u201d that identifies a play item and that is a numeric value starting from 0. When the reproduction is started from the beginning of a play list, the value of \u201cplayItemNumber\u201d is 0. Method playPlayItem (String playListURL, int playItemNumber) starts the reproduction of a play list designated by \u201cplayListURL\u201d from a play item designated by \u201cplayItemNumber.\u201d \u201cplayItemNumber\u201d is \u201cPlayItem_id\u201d that is a numeric value starting from 0. When the reproduction started from the beginning of a play list, the value of \u201cplayItemList\u201d is 0.","Method playChapterMark(int playListNumber, int chapterNumber) reproduces a play list designated by \u201cplayListNumber\u201d from a chapter designated by \u201cchapterNumber.\u201d \u201cplayListNumber\u201d may be \u201cplayListURL.\u201d A play list always starts with ChapterMark (chapter mark).","Method moveAndPlay(string position, object) position=(\u201cprev\u201d|\u201cnext\u201d|\u201ctop\u201d|\u201ctail\u201d) object=(\u201cPlayItem\u201d|\u201cChapter\u201d) designates a jump in a play list. \u201cnext\u201d designates a jump from the currently reproduced position to the next play item or chapter and starts the reproduction thereof. \u201ctop\u201d designates a jump from the currently reproduced position to the end of the play list. \u201cprev\u201d starts the reproduction from the beginning of the currently reproduced play list. Method stop( ) stops the reproduction. At this point, the value of the standard resistor is not kept. Method playSoundEffect(int sound_id) reproduces a sound effect selected by \u201csound_id.\u201d",{"@attributes":{"id":"p-0102","num":"0118"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0103","num":"0119"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0104","num":"0120"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0105","num":"0121"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0106","num":"0122"},"figref":"FIG. 13"},"1-3. About Events Generated by BD Basic Player","When a method for a player operation is executed, if the reaction of the player operation is obtained for example as to whether the operation of the player has been normally started, a return value of the method can be used. However, if a process that takes a long time is designated and it is necessary to wait until the process is completed, another process cannot be performed. In addition, there are processes whose start times are unpredictable. In these cases, a technique of events can be used to effectively perform processes.","While the player is operating, various events take place. Events that take place are defined in the BD-ROM virtual player model. A model of which when the operation of the player varies, an event takes place and when there is a program corresponding to an event, the program is executed is defined by the BD-ROM virtual player model.","When a plurality of play lists are reproduced in a predetermined order, a program that performs a process that starts the reproduction of a play list after receiving an event that represents that the reproduction of the preceding play list has been completed is provided. In addition, a program that performs an exception process when the next play list is not reproduced due to any cause is provided.","When such an event is not described, an operation (a default event handler) that is built in the player is executed or the event is ignored. When it is not necessary to perform any process, the event is actively ignored. At this point, an event listener (that will be described later) is not registered. Alternatively, when a program corresponding to the event is not described, the event is ignored.","A model of which an non-periodic event takes place and a program corresponding to the event is executed is referred to as the event driven model.","1-3a. Categories of Events","Events of the BD-ROM virtual player model can be categorized as three types of (1) events that take place in a content that is being reproduced, (2) an event that takes place as an interrupt by the user, and (3) events that take place corresponding to status changes of the player.","(1) Events that take place in a content that is being reproduced are mark detection interrupt events that take place at times designated by marks. When these events take place, graphics are displayed or erased. These events are pre-set interrupts. Whenever the reproduction is performed, these event take place at the same timings.","(2) An event that takes place as an interrupt by the user is supposed to be a key input to a remote control commander with which the user operates the player. Interrupt timing of this event is unpredictable since it is not clear at what time the user will perform a key input.","(3) Events that take place corresponding to status changes of the player are for example an event that takes place when the status of the player changes from the stop starts to the reproduction status and an event that takes place when a stream that is being reproduced was changed to another stream. When a timer is set in a program, a timer interrupt event takes place at a designated time. Status changes of the player may be (1) events that take place in a content that is being reproduced and (2) an event that takes place as an interrupt by the user.",{"@attributes":{"id":"p-0116","num":"0132"},"figref":["FIG. 14A","FIG. 14B","FIG. 14C"]},"First, (1) events that take place in a content that is being reproduced will be described. In , , and , event MarkEncounteredEvent takes place when a mark was detected while a content was being reproduced. This event is used when for example a graphics screen is displayed. Event ValidPeriodStartedEvent takes place when a selection valid period of a user input started. Event ValidPeriodEndedEvent takes place when a valid period of a user input ended. This event is used when for example a link is forcedly executed. Event PlayRepeatedEvent takes place when the beginning of a repeat reproduction region was detected. Event VideoStreamChangedEvent takes place when a video stream that was being reproduced was changed. Event AudioStreamChangedEvent takes place when an audio stream that was being reproduced was changed. Event SubpictureStreamChangedEvent takes place when a sub picture stream that was being reproduced was changed. Event StreamDisplayStatusChangedEvent takes place when the display\/non-display status of a stream was changed. Event PlayListStartedEvent takes place when the beginning of a play list was detected. Event PlayListEndedEvent takes place when the end of a play list was detected. Event PlayItemStartedEvent takes place when the beginning of a play item was detected. Event PlayItemEndedEvent takes place when the end of a play item was detected.","Next, (2) an event that takes place as an interrupt by the user will be described. Event RmKeyEvent takes place when a key of the remote control commander was pressed. A key that was pressed is determined with a corresponding event listener (that will be described later).","Next, (3) events that take place corresponding to status changes of the player will be described. Event PlayStartedEvent takes place when the player started the reproduction. Event PlayStoppedEvent takes place when the player stopped the reproduction. Event PlayStilledEvent takes place when the player stilled the reproduction. Event StillReleaseEvent takes place when the player released the stilled status of the reproduction. Event PlayPausedEvent takes place when the reproduction of the player was paused by the user. Event PauseReleaseEvent takes place when the paused status was released. Event TimerFiredEvent takes place when a count down timer became 0 or a count up timer became a predetermined value.","1-3b About Event Models","It is supposed that the events described in , , and  take place in object BDBasicPlayer. In other words, it is supposed that an event source of the Java language is object BDBasicPlayer. Events are defined as event objects in the Java language. A method that is executed when an event takes place is called a listener. To execute a listener, it is necessary to register an event listener to an event source. When a listener has been registered to an event source, object BDBasicPlayer transmits an event to the event listener. The object that has received the event executes a method provided in the object.","Next, with reference to , listeners and events will be described. Objects , , . . . and so forth have a listener interface that receives an event and executes a listener. The object  registers a listener corresponding to an event that the object  desires to receive to object BDBasicPlayer  (step S). A registration of a listener corresponding to an event to object BDBasicPlayer  is named the event listener registration. The plurality of objects , , . . . , and so forth can perform the event listener registration to object BDBasicPlayer .","An object that implements a listener interface is an object that implement a method that is executed when an event takes place. In the example shown in , method doAction( ) that is executed when a predetermined event takes place is implemented to the object . When an event took place in object BDBasicPlayer  (at step S) and the event has been registered to object BDBasicPlayer  as an event listener, the event is transmitted to the object  that has been registered as an event listener (at step S). The object  that has received the event executes method doAction( ) (at step S).",{"@attributes":{"id":"p-0123","num":"0139"},"figref":["FIG. 16A","FIG. 16B","FIG. 14A","FIG. 14B","FIG. 14C","FIG. 14A","FIG. 14B","FIG. 14C"],"b":["1","1","1"]},"Method removeContentListener(ContentsListener ) removes a designated listener not to receive event ContentsEvent from object BDBasicPlayer. Method removeRmtKeyListener(RmkKeyListener ) removes a designated listener not to receive event RmtKeyEvent from object BDBasicPlayer. Method removePlayerStatusListener(PlayerStatusListener ) remotes a designated listener from object BDBasicPlayer not to receive event PlayerStatusEvent from object BDBasicPlayer.","When a method starting with \u201cadd\u201d is executed, an event listener is registered. An event listener is registered before a desired event takes place. When an event does not need to be received, with a method starting with \u201cremove,\u201d the transmission of the event can be stopped.","In  and , method getContentsListeners( ) returns an array of all content listeners registered in object BDBasicPlayer. Method getRmtkeyListeners( ) returns an array of all RmtkeyListeners registered in object BDBasicPlayer. Method getPlayerStatusListeners( ) returns an array of all PlayerStatusListeners registered in object BDBasicPlayer.","Next, an example of a program created using the event listener registration will be described. In this example, a program that causes buttons to appear at a designated scene of a play list that is being reproduced is created. To determine that a predetermined scene is being reproduced in a play list, a mark function can be used. The mark function is a function that can set any time of a play list. When a marked scene is about to be reproduced, event MarkEncounteredEvent described in , , and  takes place. A button object that implements a listener interface that causes a button to appear when event MarkEncounteredEvent takes place may be created. In other words, a program that registers an event listener to object BDBasicPlayer and causes an image to appear when event MarkEncounteredEvent is received may be implemented to the object of the button.","More practically, as exemplified in , it is decided at what scene of a play list a button appears (at step S). A mark is set at the time the button appears in the play list (at step S). Next, a method that registers an event listener corresponding to the mark that has been set at step S is described in the program (at step S). In other words, at step S, the operation performed at step S shown in  is described. A process that is executed when an event takes place is described in the button object. The listener interface corresponding to the mark generation event is implemented to the button object (at step S). In other words, at step S, the content of step S is described. These programs are described in the Java language.",{"@attributes":{"id":"p-0129","num":"0145"},"figref":["FIG. 18","FIG. 17","FIG. 15"],"b":["30","31","32","32","10","36"]},"On the other hand, when the determined result represents that the event listener corresponding to the mark has been registered, the flow advances to step S. At step S, object BDBasicPlayer transmits event MarkEncounteredEvent to an object that has registered the event listener. This process is the same as the process at step S shown in . When the object has received event MarkEncounteredEvent, the object executes the method to be executed when event MarkEncounteredEvent takes place (at step S). In other words, at step S, method doAction( ) at step S shown in  is executed. In this example, method doAction describes a process that cause a button to appear on the screen. The button appears on the screen corresponding to the description (at step S).","As described in the related art section shown in  and , in the conventional DVD video, since information of buttons has been multiplexed with an AV stream, when the button appearance start time is changed, it is necessary to re-multiplex the AV stream.","In contrast, in the BD-ROM virtual player model according to the first embodiment of the present invention, by changing only the set position of a mark on the time axis, the button appearance start time can be changed. According to the first embodiment of the present invention, as shown in , , and , a clip AV stream file (), a mark data file (), and a button data file () are independently structured (the file structure will be described later). The clip AV stream file is a file of which a video pack and an audio pack are multiplexed.","In such a manner, information of a mark is stored in a database file that is different from a file of the clip AV stream. Thus, as shown in , , and , when the appearance start time of a button image is changed from time pts to time pts, it is necessary only to change time pts of the mark information to time pts. Thus, even if the position of a mark is changed, it is not necessary to re-multiplex the clip AV stream.","In addition, according to the first embodiment, data that compose a button is stored in a file that different from a file of the clip AV stream. Thus, as a process executed when a button is selected, only the method of the button object independent from the clip AV stream file needs to be changed. As described above, in the conventional DVD video, since a button command that performs a process to be executed when the button is selected is multiplexed with an AV stream, the process executed when the button is selected cannot be easily accomplished.","In the full profile of the BD-ROM, the foregoing BD-ROM virtual player model can provide more flexibly and easier authorization than the conventional DVD video.","In the foregoing embodiment, the BD-ROM virtual player model is structured on the basis of an object oriented event listener model. Alternatively, a BD-ROM virtual player model may be structured with a simpler event driven model than that example.","Next, with reference to , a BD-ROM virtual player model based on an event driven model will be described. Events that take place in object BDBasicPlayer are the same as those in an object oriented model shown in . In the case of this event driven model, it is assumed that when an event takes place, only method processEvent( ) defined in object BDBasicPlayer is called. In other words, in the model, no matter what event takes place, the same method is called. Thus, to change a process corresponding to the type of an event that takes place, it is necessary to determine what event took place in method processEvent( ).","In this model, it is not necessary to register an event listener corresponding to each event. However, whenever an event takes place, since method processEvent( ) is called, the efficiency of this model is low. In addition, since method processEvent( ) to be processed is fixedly defined in object BDBasicPlayer, this model does not have expansibility that allows a new process routine to be defined in another object and executed. Thus, according to the first embodiment of the present invention, which emphasizes high expansibility, it is preferred to structure the BD-ROM virtual player model with an object oriented model described in .","1-4. About User Inputs",{"@attributes":{"id":"p-0139","num":"0155"},"figref":["FIG. 21A","FIG. 21B","FIG. 21C","FIG. 21D"]},"Command timeSearch(playlistNumber, Time) causes a scenario that is being reproduced to be reproduced from time designated by \u201cTime.\u201d Command play(playlistNumber, chapterNumber) causes a designated scenario to be reproduced from a chapter designated by \u201cchapterNumber.\u201d Command stop( ) causes the reproduction to be stopped. Command prev( ) causes the reproduction to be started from the beginning of the previous chapter of a chapter that is being reproduced. Command top( ) causes the reproduction to be started from the beginning of a chapter that is being reproduced. Command next( ) causes the reproduction to be started from the beginning of the next chapter of a chapter that is being reproduced. Command forwardScan(speed) causes the reproduction to be performed in the forward direction at a speed designated by \u201cspeed.\u201d Command backwardScan(speed) causes the reproduction to be performed in the backward direction at a speed designated by \u201cspeed.\u201d \u201cspeed\u201d can be designated in the range from 0.1 to 360.","Command moveCursor(direction, [level]) causes the cursor to be moved in the upper, lower, left, and right directions. \u201cdirection\u201d is any one of \u201cupper,\u201d \u201clower,\u201d \u201cleft,\u201d and \u201cright\u201d that cause the cursor to be moved in the upper, lower, left, and right directions, respectively. \u201clevel\u201d can be designated with a value in the range from \u201c0\u201d to \u201c255.\u201d \u201clevel\u201d is optional and normally not used or \u201c0.\u201d When \u201clevel\u201d is an intermediate value (\u201c1\u201d to \u201c255\u201d), an analog joy stick can be represented.","Command click(buttonNumber) causes a button on the screen to be clicked. Command focus(buttonNumber) causes a button on the screen to be focused.","Command stillOff( ) causes the reproduction stilled by the player to be resumed. Command stillOff( ) can be integrated with command pauseOff. Command pauseOn( ) causes the reproduction to be paused. Command pauseOn( ) can be operated only when a scenario is reproduced. Command pauseOff causes the paused reproduction to be released.","Command LanguageSelect(languageCode) designates the display language of the menu. Command StreamChange(StreamNumber) causes a stream that is being reproduced to be changed. Command setEnabled (Boolean) causes a stream to be displayed\/not displayed. Command angleChange(angleNumber) causes a display angle to be changed. Command parentalCountrySelect (countryCode) causes a country code for a parental level to be set. Command videoPresentationModeChange (mode) designates a video display format. \u201cmode\u201d is any one of \u201cWide,\u201d \u201cLB (Letter Box),\u201d and \u201cPanScan.\u201d",{"@attributes":{"id":"p-0145","num":"0161"},"figref":"FIG. 22"},"As described in  and , user inputs by keys of the remote control commander are received by the hardware and transferred to object BDBasicPlayer. Object BDBasicPlayer generates object RmtKeyEvent corresponding to the user input and class. RmtKeyEvent. An object that has registered an event listener corresponding to object RmtKeyEvent is informed of a command corresponding to a user input.",{"@attributes":{"id":"p-0147","num":"0163"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0148","num":"0164"},"figref":["FIG. 24","FIG. 25A","FIG. 25B","FIG. 23","FIG. 25A","FIG. 25B"]},"Key VK_PLAY provides a function corresponding to play key that causes the reproduction to be performed. Key VK_STOP provides a function corresponding to stop key that causes the reproduction to be stopped. Key VK_PAUSE provides a function corresponding to pause key that causes the reproduction to be paused. Key VK_FAST_FORWARD provides a function corresponding to fast forward key that causes the fast forward reproduction to be performed. Key VK_FAST_REVERSE provides a function corresponding to fast reverse key that causes the fast reverse reproduction to be performed. Key VK_SLOW_FORWARD provides a function corresponding to slow (forward) key that causes the slow forward reproduction to be performed. Key VK_SLOW_REVERSE provides a function corresponding to slow (reverse) key that causes the slow reverse reproduction to be performed. Key VK_STEP_FORWARD provides a function corresponding to step (forward) key that causes the forward step reproduction to be performed. Key VK_STEP_REVERSE provides a function corresponding to step (reverse) key that causes the reverse step reproduction to be performed.","Key VK_NEXT provides a function corresponding to next key that causes a value corresponding to \u201cnext\u201d to be input. Key VK_PREVIOUS provides a function corresponding to previous key that causes a value corresponding to \u201cprevious\u201d to be input. With Key VK_NEXT and Key VK_PREVIOUS, the current chapter is caused to be jumped to the next and previous chapters, respectively.","Key VK_UP provides a function corresponding to up key that causes a value of \u201cup\u201d to be input. Key VK_DOWN provides a function corresponding to down key that causes a value of \u201cdown\u201d to be input. Key VK_RIGHT provides a function corresponding to right key that causes a value of \u201cright\u201d to be input. Key VK_LEFT provides a function corresponding to left key that causes a value of \u201cleft\u201d to be input. Key VK_UP_RIGHT provides a function corresponding to upper right key that causes a value of \u201cupper right\u201d to be input. Key VK_UP_LEFT provides a function corresponding to upper left key that causes a value of \u201cupper left\u201d to be input. Key VK_DOWN_RIGHT provides a function corresponding to lower right key that causes a value of \u201clower right\u201d to be input. Key VK_DOWN_LEFT provides a function corresponding to lower left key that causes a value of \u201clower left\u201d to be input. These directional keys cause the cursor to be moved on the screen.","Key VK_ANGLE provides a function corresponding to angle selection key that causes the angle of a multi-angle video content to be changed. Key VK_PRESENTATION_GRAPHICS provides a function corresponding to sub title selection key that selects English\/Japanese sub title, sub title display\/non-display mode, and so forth. Key VK_AUDIO provides a function corresponding to audio selection key that selects an audio mode such as a surround mode or a bilingual mode. Key VK_VIDEO_ASPECT provides a function corresponding to aspect ratio selection key that selects an aspect ratio of a video content. Key VK_COLORED_KEY_ provides a function corresponding to colored function key . Key VK_COLORED_KEY_ provides a function corresponding to colored function key . Key VK_COLORED_KEY_ provides a function corresponding to colored function key . Key VK_COLORED_KEY_ provides a function corresponding to colored function key . Key VK_COLORED_KEY_ provides a function corresponding to colored function key . Key VK_COLORED_KEY_ provides a function corresponding to colored function key . Key VK_UNDEFINED is an undefined key.","The keys listed in , , and  do not always match keys physically disposed on a real remote control commander. In addition, depending on a type of a remote control commander, a plurality of functions may be assigned to one physical key. Alternatively, the user may select one from images of keys of a remote controller that appears on the screen. Thus, the keys shown in , , and  are virtual keys that abstractly form corresponding functions. Since user inputs to object BDBasicPlayer are represented with such virtual keys, user inputs that do not depend on the apparatus can be defined.",{"@attributes":{"id":"p-0154","num":"0170"},"figref":["FIG. 26","FIG. 26"]},"\u201cnext\u201d key is a key that causes the current chapter to be jumped to the next chapter and the next chapter to be reproduced. \u201cnext\u201d key is for example a key disposed on the remote control commander. The process of the flow chart shown in  is started when the user presses \u201cnext\u201d key while the player is reproducing a chapter (at step S). When \u201cnext\u201d key is pressed, object RmekeyEvent takes place (at step S). The database is searched for a chapter mark of the next chapter (at step S). Corresponding to the searched result, it is determined whether or not there is the next chapter mark (at step S). When there is no chapter mark, a series of processes are completed and the regular reproduction is resumed. When the determined result at step S represents that there is the next chapter mark, the flow advances to step S.","At step S, object BDBasicPlayer causes the reproduction of the current chapter that is being reproduced to be stopped in response to \u201cnext\u201d key (at step S). When the reproduction of the player is stopped, event PlayStoppedEvent takes place (at step S). Object BDBasicPlayer obtains the byte position of the next chapter mark in the clip AV stream file from feature point information of the clip information file. The obtained byte position of the file is accessed and the stream is read and reproduced from the byte position (at step S).","After step S, a series of processes that cause a message to appear on the screen are performed so as to inform the user that the current chapter was changed. To cause a message to appear at a position the current chapter was changed, a method that causes the player to display a message needs to be implemented as an event listener corresponding to event MarkEncounteredEvent. When the reproduction of the stream is started, event PlayStartedEvent takes place. In addition, event MarkEncountedEvent takes place corresponding to the chapter mark (at step S).","When event MarkEncounterEvent takes place, at step S, the execution of a listener corresponding to event MarkEncounteredEvent is started. In the listener, the type of the mark detected by event MarkEncounteredEvent is obtained (at step S). It is determined whether or not the mark is a chapter mark (at step S). When the determined result represents that the mark is not a chapter mark, the flow advances to step S. At step S, the execution of the listener is completed. When the determined result represents that the detected mark is a chapter mark, the flow advances to step S. At step S, a message that represents the beginning of a chapter appears.","In this example, when the user presses a key of the remote control commander, event RmtKeyEvent takes place. When event RmtKeyEvent takes place, a plurality of status changes take place. As a result, a plurality of events, PlayStoppedEvent, PlayStartedEvent, and MarkEncounteredEvent take place.","Thus, in the BD-ROM virtual player model according to the first embodiment of the present invention, a user input event causes the status of the player to change and a new event to take place. With new events, various processes can be performed.","According to the first embodiment of the present invention, by defining a BD-ROM virtual player model, various merits that are not present in the DVD video can be obtained. For example, according to the first embodiment of the present invention, several functions of the conventional DVD video can be accomplished with one model.","As a first example, a forced sub title display function and a UOP (User Operation) prohibition function may be used. The forced sub title display function is a function that causes a predetermined sub title to be forcedly displayed at a predetermined scene even if the user has turned off the sub title display function. The UOP prohibition function is a function that prohibits the user from inputting data. In the DVD video, data structures and operation models for these functions are defined.","In the BD-ROM virtual player model according to the first embodiment of the present invention, with respect to the forced sub title display function, a scene (time) for which a sub title is forcedly displayed is marked. A process that causes a sub title to be forcedly displayed on the screen regardless of whether the sub title display mode has been turned on or off is provided as a listener. Thus, with a model that processes regular marks, the forced sub title display function can be accomplished.","With respect to the UOP prohibition function, unless an even listener for key input events of the remote control commander has been registered, even if a key input event takes place, no process is performed. Thus, the user input is ignored and the UOP is prohibited.","Thus, according to the first embodiment of the present invention, since the functions of the DVD can be accomplished with one event model, the disc creator side can unlaboriously create the DVD.","In addition, in the DVD video, keys of the remote control commander are pre-assigned for operations. When the sub menu key of the remote control commander is pressed, as an operation that has been pre-assigned for the sub menu key, a sub menu screen on which audio mode, sub title mode, and angle can be changed appears. However, since the sub menu is not essential data of the DVD video, a disc that does not have the sub menu exists. In this case, even if the sub menu key is pressed while the player has such a disc, no operation takes place.","On the other hand, in the BD-ROM virtual player model according to the first embodiment of the present invention, as described with reference to , , , , , , , , and , the relationships of keys and processes performed corresponding thereto can be designated by the disc creator side. Thus, with a program that causes the player to a message to appear in the case that the disc does not have the sub menu, when the user presses the sub menu key, he or she can be informed of a message representing that the disc does not have the sub menu.","Thus, according to the first embodiment of the present invention, since the disc creator side has a higher degree of freedom to create a disc, the disc creator side can create a disc that the user can easily handle.","In addition, according to the first embodiment of the present invention, a Java class is defined corresponding to the BD-ROM virtual player model and the reproduction of a play list is controlled with a Java program. With the Java program, a multi-thread program can be accomplished. As a result, time lags due to a network access and waiting time in response to a user input can be easily handled. In addition, with the Java program, a branch prediction, a speculative execution, and so forth can be easily accomplished by pre-reading commands. Thus, processes can be performed at high speed.","1-5. About File Management Structure","Next, with reference to , a file management structure applicable to a full profile of the BD-ROM will be described. Files are hierarchically managed. One directory (a root directory in the example shown in ) is formed on a recording medium. Files below this directory are managed by one recording and reproducing system.","Below the root directory, directory BDMV is placed. A plurality of directories BDMV may be placed below the root directory.","Below directory BDMV, two files \u201cscenario.hdmv\u201d and \u201centrylist.data\u201d are placed. Below directory BDMV, a plurality of directories \u201cPLAYLIST,\u201d \u201cCLIPINF,\u201d and \u201cSTREAM\u201d are placed.","File \u201cscenario.hdmv\u201d is a scenario file that stores a scenario. A scenario has a structure of which a plurality of play lists are arranged. For example, a scenario controls the reproduction order of play lists. To allow the user to see a scenario in its divided units, chapters may be provided. Movie objects in the HD movie mode of the BD-ROM are stored in file \u201cscenario.hdmv.\u201d","File \u201centrylist.data\u201d stores information about a menu such as search points (title entries) of a scenario, play lists that compose a menu, and entry points to a play list group. An index table in the HD movie mode of the BD-ROM is stored in file \u201centrylist.data.\u201d","Directory \u201cPLAYLIST\u201d stores play lists. One play list is stored in one file \u201c****.mpls.\u201d Information that represents the positions of marks in a clip AV stream are stored in play list file \u201c****.mpls\u201d that designates the reproduction rage of the clip AV stream.","Directory \u201cCLIPINF\u201d stores clip information files \u201c#####.clpi.\u201d Directory \u201cSTREAM\u201d stores clip AV stream files \u201c%%%%%.m2ts.\u201d When related file names are assigned to clip AV stream files, they can be easily correlated. For example, the same file names \u201c#####\u201d and \u201c%%%%%\u201d except for extensions are used for clip information files and clip AV stream files.","A Java class file that composes a Java program is stored in a predetermined directory (not shown) placed below the directory BDMV. Alternatively, the Java class file may be placed in a directory in the same hierarchical level as the directory BDMV.","1-6. About Decoder Model","Next, a player decoder  according to the first embodiment of the present invention will be described. , , and  are a functional block diagram showing an example of a structure of a player decoder  according to the first embodiment of the present invention. The player decoder  interprets data reproduced from a disc loaded into a drive device (not shown), outputs an AV (Audio\/Video) stream that composes a content, and allows the user to interactively operate the output AV stream.","All operations of the player decoder  are controlled by a CPU (not shown). Streams and data flows of individual portions of the player decoder  are monitored and controlled by the CPU.","When the disc is loaded into the drive device (not shown), file \u201cscenario.hdmv\u201d that describes the reproduction order of play lists and file \u201centrylist.data\u201d that describes the top play list of the play list group that compose a menu and a title are reproduced. In accordance with the descriptions of file \u201cscenario.hdmv\u201d and file \u201centrylist.data\u201d, other necessary files are read from the disc and thereby a content recorded on the disc is reproduced.","For example, in accordance with the descriptions of file \u201cscenario.hdmv\u201d and file \u201centrylist.data\u201d, moving picture data displayed on a video plane  and a second video plane , image data displayed on a graphics plane A , a graphic plane B , and a second video plane , a play list file, and so forth are read from the disc. In the full profile, a file that stores a program is read and executed.","In the following description, among those data that are read from the disc, streams such as moving picture data, sub pictures (sub title data), and sound data that should be continuously processed are referred to as real time streams. In contrast, non-real time data such as scenario files, play list files, program files, part of moving pictures, still pictures, and sound data that do not need to be continuously processed are referred to as store objects. The store objects are stored in a memory or the like and expanded thereon. Store objects stored in the memory are processed when necessary.","The player decoder  has two systems of input channels that are channel () and channel (). A store object is input to an input terminal  of the input channel (). A real time stream is input to an input terminal  of the input channel (). Alternatively, a store object may be input to the input terminal . According to the first and second embodiments of the present invention, a real time stream and part of store objects that are input to the input terminal  are for example MPEG 2 TSs (Moving Pictures Experts Group 2 Transport Streams).","A real time stream that is input to the input terminal  is not limited to an MPEG 2 TS. As long as a real time stream can be transmitted in the unit of a packet and multiplexed with video data, audio data, still picture data, or the like, a stream that has another format can be input. At this point, a PID filter  that will be described later is used as a demultiplexer that demultiplexes video data, audio data, still picture data, or the like.","When the rotation speed of the disc in the drive device is increased for example twice and the read transfer rate of the disc is increased, the reading operations for the two systems of the channels () and () from the disc can be performed in time division basis.","Next, the system of the input channel () will be described. A store object that is input to the input terminal  is input to a switch circuit . When a program code of a Java file, an ECMA (European Computer Manufacturers Association) script, an HTML (Hyper Text Markup Language) file (or an XHTML file), or the like as a store object is input, the switch circuit  selects an output terminal A. The input program code is stored in a code buffer .","On the other hand, when image data as a store object are input, the switch circuit  selects an output terminal B. As a result, the input image data are input to a switch circuit . When a real time stream that is input to the input terminal  does not contain image data displayed on the graphics plane A  and the graphics plane B , the switch circuit  selects an input terminal A. The image data that are input from the switch circuit  is stored in a contents buffer .","Likewise, when image data displayed on the graphics plane A  and the graphics plane B  are contained in a real time stream that is input to the input terminal , the switch circuit  selects an input terminal B. As a result, the image data are stored in the contents buffer . Store objects stored in the code buffer  and the contents buffer  are read when necessary and supplied to a multimedia engine .","The image data of the store object stored in the contents buffer  are also supplied to a graphics decoder A  and a graphics decoder B  through switch circuits  and , respectively.","The multimedia engine  includes an XML parser A, a program\/script interpreter B, and a graphics renderer C. The multimedia engine  also includes a sound player D that can handle audio data. The multimedia engine  may be composed of independent hardware. Alternatively, the multimedia engine  may be accomplished by a process of a predetermined program that the foregoing CPU (not shown) executes.","The XML parser A has a function for parsing an XML (Extensible Markup Language) document. In addition, the XML parser A can also parse an HTML document and an XHTML document. An HTML document and an XHTML document parsed by the XML parser A are converted into respective formats that can be executed by the player decoder . The program\/script interpreter B analyzes a Java (registered trademark) program, an ECMA script, and so forth and converts them into respective formats that can be executed by the player decoder . The graphics renderer C decodes image data and obtains a format that can be expanded on the sub title plane  and the graphics plane .","The multimedia engine  performs processes for the XML parser A, the program\/script interpreter B, and the graphics renderer C with a work memory of a buffer . For example, the XML parser A and the program\/script interpreter B use a code buffer of the buffer . The graphics renderer C uses a graphics buffer D of the buffer . The buffer  also includes a font buffer B that stores font data used to display a character string, a tree buffer C that stores the parsed result of the HTML document by the XML parser A in a hierarchical tree structure, a sound buffer E that stores audio data used in the sound player D, and so forth.","When necessary, the multimedia engine  reads a Java program from the code buffer , image data from the contents buffer , and so forth. Data that are stored in the code buffer  and the contents buffer  can be stored in the code buffer  and the contents buffer  until the data become unnecessary. Thus, data stored in the code buffer  and the contents buffer  can be repeatedly read and used when necessary.","Beside the foregoing data, the multimedia engine  reads for example an ECMA script stored in the code buffer  and executes it. When necessary, the multimedia engine  can read another ECMA script and an HTML document (or XHTML document) from the code buffer  and execute them in accordance with the description of the ECMA script that has been read.","In addition, the multimedia engine  receives a user input from a remote control commander, a pointing device, or the like and performs a predetermined process for the user input. The user input is supplied to the graphics decoder A , the graphics decoder B , an audio decoder , an MPEG video decoder , and a system decoder  that will be described later.","Image data processed by the graphics renderer C are supplied to the graphics plane A  and the graphics plane B  through switch circuits  and , respectively. In this example, although image data supplied to the graphics plane A  and the graphics plane B  may have several formats for example the PNG format, the run length format, and the JPEG format, according to the present invention, the formats thereof are not limited. Timing at which the image data are supplied to the planes  and  is controlled by the multimedia engine .","In addition, the multimedia engine  supplies control signals to a presentation processor  that will be described later to cause it to select one of the video , the sub title plane , the second video plane , the graphics plane A , and the graphics plane B  and perform alpha-blending and so forth. Likewise, the multimedia engine  supplies a control signal to a presentation processor  that will be described later to cause it to control an output of an audio stream.","The multimedia engine  reads a Java program from a ROM (not shown) or the like and generates object BDBasicPlayer on the multimedia engine . The multimedia engine  reads a Java program from the code buffer . When necessary, an object composed of a Java program that has been read from the code buffer  registers an event listener to object BDBasicPlayer.","As described in , on the multimedia engine , object BDBasicPlayer transmits an event to an object composed of a Java program that has been read from the code buffer  corresponding to for example a user input. The object executes the corresponding method. Object BDBasicPlayer detects a status change of the player decoder . When object BDBasicPlayer has detected a predetermined status change, the object generates a corresponding event. The multimedia engine  causes a method corresponding to the event to control a drive device (not shown) and each portion of the player decoder  so as to perform a reproduction control for the disc.","Next, the system of the input channel () will be described. A real time stream that is input as an MPEG 2 TS to the input terminal  is supplied to the PID filter . The PID filter  extracts a PID (Packet Identification) from a transport packet of the MPEG 2 TS transport stream and detects an attribute of the stream from the transport packet. The PID filter  separates the input real time stream into corresponding systems for each transport packet in accordance with the attribute of the stream.","When a transport packet is a packet in which image data of a store object is contained, the transport packet is temporarily stored in a buffer TBn A. The transport packet is read at predetermined timing and input to the switch circuit  through the input terminal B that has been selected. Thereafter, the transport packet is stored in the contents buffer  through the switch circuit .","When the PID filter  has determined that the transport packet contains sub title data in accordance with the PID, the transport packet is temporarily stored in a buffer TBn B and a buffer Bn B. The transport packet is read at predetermined timing and input to the switch circuit  through an input terminal B that has been selected. The transport packet is supplied to the graphics decoder A  through the switch circuit .","The graphics decoder A  removes header information from the supplied transport packet, decodes sub title data contained in the transport packet, and obtains image data for sub titles or the like. The image data are input to an input terminal B of the switch circuit  and expanded to the graphics plane A  through the switch circuit . In addition, the image data may be expanded to the graphics plane B  through the switch circuit .","When the PID filter  has determined that the transport packet contains graphics data in accordance with the PID, the transport packet is temporarily stored in a buffer TBn C and a buffer BnC. The transport packet is read at predetermined timing and input to the switch circuit  through an input terminal B that has been selected. The transport packet is supplied to the graphics decoder B  through the switch circuit .","The graphics decoder B  removes header information from the supplied transport packet, decodes graphics data contained in the transport packet, and obtains graphics data. The image data are input to an input terminal B of the switch circuit  at predetermined timing and expanded to the graphics plane B  through the switch circuit . In addition, the image data may be expanded to the graphics plane A  through the switch circuit .","The function of the graphics decoder A  is not largely different from the function of the graphics decoder B . In other words, as a model, there are two systems of graphics decoders that independently operate. Thus, it is considered that sub title data and graphics data can be independently decoded. In a real implementation, a high speed graphics decoder would be used on time division basis as if two virtual systems of graphics decoders existed.","When the PID filter  has determined that the transport packet contains audio data in accordance with the PID, the transport packet is temporarily stored in a buffer TBn D and a buffer Bn D. The transport packet is read at predetermined timing and supplied to the audio decoder . Audio data contained in the transport packet is compression-encoded in accordance with a system based on for example the MPEG.","The audio decoder  also has for example a linear PCM (Pulse Code Modulation) audio decoder . The audio decoder  removes header information from the input transport stream, decodes compression-encoded audio data contained in the transport packet, and obtains linear PCM audio data.","The linear PCM audio data that are output from the audio decoder  are input to the presentation processor  for audio. The presentation processor  adds a predetermined effect sound and so forth to the linear PCM audio data under the control of the multimedia engine . The resultant data are obtained from an output terminal .","When the PID filter  has determined that the transport packet contains moving picture data in accordance with the PID, the transport packet is temporarily stored in a buffer TBn E, a buffer MBn , and a buffer EBn , read at predetermined timing, and supplied to the MPEG video decoder . The moving picture data contained in the transport packet has been compression-encoded in accordance with the MPEG 2 system.","The MPEG video decoder  removes header information from the supplied transport packet, decodes moving picture data that has been compression-encoded in accordance with the MPEG 2 system, and obtains base band moving picture data.","The moving picture data that are output from the MPEG video decoder  are input to an input terminal A of a switch circuit . In the switch circuit , moving picture data that are output from the MPEG video decoder  and moving picture data that are output from the multimedia engine  are selected. The moving picture data selected at predetermined timing are input to a switch . The switch  selects a video plane to which the moving picture data are expanded. The moving picture data are developed to the video plane  or the second video plane .","When the PID filter  has determined that the transport packet contains system information in accordance with the PID, the transport packet is supplied to the system decoder  through buffers TBn F and Bsys . The system decoder  removes header information from the supplied transport packet and extracts the system information therefrom. The system information is supplied to for example a CPU (not shown).","Image data on the graphics plane A  are supplied to a palette . The palette has 256 colors. The palette is referenced with an index. RGB data are output. In addition, intransparency data \u03b1 that is a parameter for alpha-blending is extracted. The RGB data are converted into YCbCr data by an RGB\/YCbCr converting circuit . The YCbCr data and the intransparency data \u03b1 are supplied to the presentation processor .","Image data on the graphics plane  are supplied to a palette . The palette has 256 colors. The palette is referenced with an index. As a result, RGB data are output. In addition, intransparency data \u03b1 is extracted. The RGB data are converted into YCbCr data by an RGB\/YCbCr converting circuit . The YCbCr data and the intransparency data \u03b1 are supplied to the presentation processor .","An output of the video plane  is supplied to the presentation processor  through an up\/down converter . Likewise, an output of the second video plane  is supplied to the presentation processor  through a up\/down converter .","The up\/down converter  is a circuit that converts the resolution of the image. The up\/down converter  converts for example a HD (High Definition) image having a high resolution into an SD (Standard Definition) image having a standard resolution.","The presentation processor  performs an alpha-blending process using intransparency \u03b1 of image data of the graphics plane A  and intransparency \u03b1 of the graphics plane B . In addition, the presentation processor  alternately selects outputs of the video plane  and the second video plane  for each pixel so as to accomplish the foregoing picture-in-picture function, the wall paper display function, and so forth.","In other words, the presentation processor  selects the image data of the video plane  and the second video plane  with a switch (not shown) so as to generate one piece of image data. The image data and the image data of the graphics plane A  are combined in accordance with the intransparency \u03b1 set to the image data of the graphics plane A . In addition, the image data of the graphics plane B  are combined with the image data of which the video plane and the graphics plan A  have been combined in accordance with the intransparency \u03b1 that has been set to the image data of the graphics plane B . The image data of the graphics plane B , the image data of the graphics plane A  (sub title data), and the image data of which the image data of the video plane  and the second video plane  have been combined are obtained from an output terminal .","The presentation processor  can perform an effect process for image data in real time.","In the foregoing description, each portion of the player decoder  is composed of hardware. However, the present invention is not limited to such an example. For instance, the player decoder  can be accomplished by a process of software. In this case, the player decoder  can be operated on a computer device. Alternatively, the player decoder  may be accomplished by a combination of hardware and software. For example, the audio decoder  and the MPEG video decoder  may be composed of hardware. The rest of the player decoder  may be composed of software.","A program that causes the computer device to execute the p layer decoder  that is composed of only software or a combination of hardware and software is recorded on a recording medium for example a CD-ROM (Compact Disc-Read Only Memory) and supplied therewith. The CD-ROM is loaded into a CD-ROM drive of the computer device. The program recorded on the CD-ROM is installed to the computer device. As a result, the foregoing process can be executed on the computer device. Since the structure of the computer device is well known, the description thereof will be omitted.","Next, a second embodiment of the present invention will be described. According to the second embodiment, a player model is described with a script language called the ECMA script. The ECMA script is a cross platform script language prescribed by ECMA (European Computer Manufacturers Association). The ECMA script is based on JavaScript (registered trademark). The ECMA script has a close affinity with an HTML document. In addition, the ECMA script is capable of defining original objects. Thus, the ECMA script can be suitably used for a player model according to the present invention.","As described in , , and , since the multimedia engine  in the player decoder  can analyze and execute the ECMA script, the player decoder  can be used in the second embodiment of the present invention.","According to the second embodiment of the present invention, the standard using a script language based on the ECMA script is called the UMD (Universal Media Disc, registered trademark) video standard. The script part of the UMD video standard is called the UMD video script standard.","2-1. About UMD Video Standard","First, for easy understanding, the UMD video standard applicable to the second embodiment of the present invention will be described.  shows a layer structure of the UMD video standard. The layer structure shown in  corresponds to the structure shown in  according to the first embodiment. In the UMD video standard, three layers, a script layer, a play list layer, and a clip layer, are defined. Corresponding to this structure, streams are managed.","In the UMD video standard, video data, audio data, and sub title data that have been digitally encoded are treated as an MPEG 2 (Moving Pictures Experts Group 2) stream of which they have been multiplexed as MPEG 2 elementary streams. An MPEG 2 stream of which the video, audio, and sub title elementary streams have been multiplexed is called a clip AV stream. A clip AV stream is stored in a clip AV stream file. Whenever a clip AV stream file is recorded, a clip information file is also created in the relation of one to one. A set of a clip information file and a corresponding clip AV stream file is called a clip.","A clip is a recording unit of data that are recorded on the disc. The reproduction order of clips is managed in the play list layer that is an upper layer of clips. The play list layer that is a layer that designates the reproduction path of clips, contains one or a plurality of play lists. A play list is composed of a set of play items. A play item contains a set of an in point and an out point that represent the reproduction range of a clip. With play items, clips can be reproduced in any order. Play items can designate the same clip. An in point and an out point of a clip AV stream file are designated with time stamps (times in a clip). A time stamp is converted into a byte position of the clip AV stream file with information of the clip information file.","A play list has a structure for which play items that represent all or part of clips are reproduced in the order. With only a play list, branches of the reproduction order and interactivity with the user cannot be accomplished.","The script layer is a layer that is composed of the UMD video script, which is an extension of the ECMA script as a language. The UMD video script is a ECMA based script that is extended for an original function of the UMD video.","The script layer is an upper layer of the play list layer. The script layer is composed of play list reproduction commands and player set commands. With commands of the script layer, play list reproductions such as a language selection of which a stream corresponding to a desired language is selected from several streams and conditional branches of which play lists to be reproduced are selected corresponding to predetermined conditions can be accomplished. An example of an application that performs a play list reproduction having conditional branches is a multi-story. This script layer provides an interactive function to the user.","2-2. About Player Model Based on UMD Video Standard","Next, a model of a reproducing apparatus (player) that reproduces data on the basis of the UMD video standard, namely the player model, will be described. First, the player reads a script program, a play list, and a clip information file from the disc. Thereafter, the player reads a clip AV stream file from the disc in accordance with the reproduction order described in the script program, the play list, and the clip information file and reproduces video data, audio data, and sub title data from the clip AV file.","In the language specification of the script program, a functional block that reproduces a play list is implemented as an object of the script program. In the UMD video standard, an object that reproduces a play list is referred to as the movie player object. Play list reproduction commands and player set commands are methods of the movie player object. The movie player object is controlled with methods of the script layer. At this point, a function that allows the movie player object to inform the script layer of a status change, a reproduction position, and so forth is required. This means that the movie player object issues an event to the script program. A process corresponding to the event is described as an event handler.","Thus, with a model of which information is transferred from the movie player object to the script program using events and the script program controls the movie player object using methods, the reproduction of a clip AV stream can be controlled by the script program.",{"@attributes":{"id":"p-0235","num":"0251"},"figref":"FIG. 30","b":"300"},"Since it is considered that the movie player  and the movie player object represent substantially the same object, hereinafter they are denoted by the same reference numeral.","In , the movie player  reads, decodes, and displays a clip AV stream file in accordance with a method of a lower layer (a native implementation platform ) and a method of the script layer  as an upper layer on the basis of a play list and a clip information database.","The interior of the movie player  depends on the implementation of a UMD video player that reproduces the UMD video. A script layer  provides an API (Application Programming Interface) such as a method and a property as an object that is a black box. In this example, the UMD video player represents a real device that implements a movie player. All UMD video players implement a movie player that complies with the UMD video standard and that has reproduction compatibility.","As shown in , the movie player object  has three input\/output paths that are a path that receives a control command  from the native implementation platform , a path that informs the script layer  of an event , and a path that receives a method  from the script layer .","The control command  is a command that controls the operation of the movie player object  received from the native implementation platform . The native implementation platform  is a portion specific to a device as a real UMD video player and an interface with the movie player . The event  is a script event that the movie player  sends to the script layer . The method  is a method that the script program of the script layer  sends to the movie player .","The movie player object  has a database  for play lists and clip information in accordance with the UMD video standard. The movie player object  masks a user input  and converts a time designated reproduction position into a byte position of a clip AV stream with the database .","A playback module  of the movie player  decodes a clip AV stream as an MPEG 2 PS (Program Stream) in which video data, audio data, and sub title data have been multiplexed. The playback module  has three statuses that are play, stop, and pause. The playback module  changes operates in one of these three statuses in accordance with a control command and a method (see ).","The script layer  is a layer in which a script program is executed on the basis of the UMD video script standard, the movie player object  is controlled, and a screen is displayed. The script layer  accomplishes a scenario that the content provider side intended to create. The script layer  issues the method  to the movie player object  and receives the event  from the movie player object . The script layer  exchanges with the native implementation platform  a key event  corresponding to a user input  and a method  that causes the native implementation platform  to display a screen.","For example, buttons that appear on the menu screen are drawn by the native implementation platform  corresponding to the method  that is transferred from the script program of the script layer  to the native implementation platform . When the user selects a button on the menu screen, the native implementation platform  informs the script layer  of the key event  corresponding to the user input . The script program of the script layer  performs a process for the user input  corresponding to the key event .","The script program and data such as image data and sound data used in the script file are recorded as a file to the disc. This file corresponds to file scenario.hdmv shown in  and .","Thus, the movie player  controls decoding and displaying processes for video data, audio data, and sub title data. On the other hand, the script layer  controls allocating and displaying processes for part images such as buttons that compose the GUI (Graphical User Interface) and performs a process against a selecting process for GUI parts.","The native implementation platform  is a platform on which the movie player object  and a script program operate. When the real UMD video player is composed of hardware, the native implementation platform  is specifically implemented as hardware so that the native implementation platform  intermediates between the hardware and the player model.","For example, the native implementation platform  receives the user input  from the user and determines whether the received user input  is a command to the movie player  or a command to a button that the script layer  draws and displays. When the native implementation platform  has determined that the user input  is a command to the movie player , the native implementation platform  converts the user input  into the control command  that is an internal control command of the movie player  and issues a control command to the movie player . On the other hand, when the native implementation platform  has determined that the user input  is a command for a GUI part that the script layer  draws and displays, the native implementation platform  informs the script layer  of the key event  corresponding to the user input .","Next, the movie player  will be described in detail.  shows an internal structure of an example of the movie player . As described above, the movie player  is composed of the database  and the playback module . The database  is an area for information of play lists that are read from the disc and information of clips, namely clip information.","The playback module  is composed of a decoder engine  and a property  that is a value representing the stratus of the playback module . Like a language code, the property  is composed of two types of a property A (read-only parameter) whose value depends on the initial setting of the movie player  and a property B (player status) whose value depends on the status of the playback module .","The property A whose value depends on the initial setting is set by a native system, for example a real device. The property A does not vary with a play list, clip information, or a script program. The property A can be read from a script program. On the other hand, the property B that represents the status of the playback module  can be read from a script program. The property B can be written from a part of script programs.","In the operation model, it is assumed that a play list and clip information is pre-loaded before a clip AV stream is reproduced. Another implementation model may be used as long as the operations for the movie player model can be accomplished.","The movie player object  reproduces a designated play list corresponding to a command received from the script layer  or the native implementation platform . For example, the movie player  references the database  and obtains the reproduction position of a clip AV stream corresponding to the designated play list as a byte position. The decoder engine  of the playback module  controls the decoding process for the clip AV stream corresponding to the reproduction position information.","As shown in , the movie player  has three statuses, which are play, stop, and pause, corresponding to the reproduction statuses of a play list. The play status represents that the movie player  is reproducing a play list and a time is elapsing. In addition, normal reproduction, the play status includes variable speed reproductions such as 2\u00d7-speed reproduction and \u00bd\u00d7-speed reproduction, and fast forward and fast rewind. The pause status represents that time axis stops while the movie player  is reproducing a play list. The so-called step reproduction status represents that the movie player  forwardly or backwardly reproduces a play list for each frame. The stop status represents that the video player  does not reproduce a play list.","The statuses of the movie player  change corresponding to status changes among play, pause, and stop of the decoder engine  of the movie player . The value of the property B is updated corresponding to the status change of the decoder engine .","Resume information represents the status immediately before the stop status takes place. When the movie player  decodes a play list and becomes the play status, if the movie player  becomes the stop status, the resume information represents the status immediately before the stop status takes place. The resume information can be stored in a non-volatile memory that the player has as hardware so that each title of the disc can be identified.","2-3. About Event Model of Movie Player","Next, an event model of the movie player  will be described. The movie player  generates various events in the play status in which the movie player  reproduces a play list. This event causes a process program described in a script to be executed. This process program is called an event handler. The event handler is a method called when an event takes place. When this event takes place, a program execution model starts executing a process program. This program execution model is called an event driven model. According to the second embodiment of the present invention, the script program controls the operation of the movie player object  with an event handler group.",{"@attributes":{"id":"p-0258","num":"0274"},"figref":["FIG. 33","FIG. 33","FIG. 33"],"b":["300","300"]},"Since an event handler called when an event takes place is selected on the system side, the content creator side does not need to describe in the script program a process that determines an event that takes place.","The event model according to the second embodiment is simpler than the event listener model according to the first embodiment described in  because the latter needs processes that register events and delete registered events. On the other hand, in a model that calls one method processEvent( ) regardless of what event takes place (see ), it is necessary to describe in method processEvent( ) pre-processes that know what event takes place and select a process routine for an event that takes place. Since method processEvent( ) should be implemented by the content creator side, even if the model is simple, the content creator side needs to laboriously create the disc. In addition, whenever an event takes place, one large process program (method) is called. Thus, a large memory space would be used and the execution speed would become slow. Thus, since the model according to the second embodiment of the present invention provides each event with a process program (event handler), with respect to this point, the model of the second embodiment is superior to that of the first embodiment.","2-4. About Movie Player Object ","Next, external specifications of the movie player object  will be described. Generally, an object defined in a language corresponding to the ECMA script language specification has a property and a method. The movie player object  according to the second embodiment of the present invention has a property and a method as described in  and . A property can be directly read and written by designating predetermined object name and property name. In addition, with method setXXX( ) (where \u201cXXX\u201d represents a designated property name) that sets a property value and method getXXX( ) that reads a property value, a property of another object may be read and written by these methods.","For properties and methods of the movie player  according to the second embodiment of the present invention, the same specifications as those according to the first embodiment described in  to  can be applied. In other words, according to the second embodiment of the present invention, specifications (API) between the script program of the script layer  and the movie player object , namely the method  described in , can be thought to be the same class defined in Java of the first embodiment of the present invention.","As was described in , the user input  is received first by the native implementation platform . In other words, the native implementation platform  receives the key input as the user input  from the user. The native implementation platform  determines whether the user input  is a command to the movie player  or an event to the script program of the script layer . Corresponding to the determined result, the native implementation platform  generates the control command  or the key event  and informs the corresponding upper layer (the movie player  or the script layer ) thereof.","The user input  is a key input that was described in , , and . Roles of the functions corresponding to key inputs shown in  are different from those shown in  and . Thus, the native implementation platform  needs to select a destination that is informed of the user input.","The key inputs shown in  cause the movie player  to reproduce video data, audio data, and sub title data. When the native implementation platform  receives a key input shown in  as the user input , the native implementation platform  converts the received key input into a command described in , , , and . The movie player  is informed of the converted command as the control command . In other words, user input commands described in , , , and  correspond to the control command  shown in .","On the other hand, the key inputs shown in  and  are the user input  to the GUI. When the native implementation platform  receives a key input shown in  and  as the user input , the native implementation platform  converts the received key input into the key event  and informs the script layer  of the key event .",{"@attributes":{"id":"p-0267","num":"0283"},"figref":["FIG. 25A","FIG. 25B"],"b":["300","302"]},"2-5. About Event Handling by Movie Player Object ","According to the first embodiment using the Java language, object BDBasicPlayer has the events shown in , , and . On the basis of the event listener model shown in , listeners are registered and unregistered with the methods shown in  and . In the event listener model according to the first embodiment, while a program is being executed, a listener can be dynamically registered and unregistered. A response process to an event can be changed while a program is being executed. Thus, programming that has a higher degree of freedom and a higher advanced function can be accomplished than the related art.","On the other hand, in the script language based on the ECMA script according to the second embodiment of the present invention, a process program that has been prepared corresponding to an event that takes place is called without need to register and unregister listeners. An interface corresponding to a listener according to the first embodiment is event handlers of the movie player . In an event handler model, methods with respect to registration of listeners shown in  and  are not necessary.","According to the second embodiment of the present invention, examples of event handlers in  and  are provided corresponding to events. Event handler names have a prefix of \u201con.\u201d The examples of the event handles shown in  and  correspond to events shown in , , and  of the first embodiment.","Event handler onTimerFired( ) corresponds to an event that takes place when the value of the count down timer of the movie player  becomes \u201c0\u201d or when the value of the count up timer becomes a predetermined value. Thus, a process can be accomplished at predetermined timing.","Event handler onPlayStopped( ) corresponds to an event that takes place when the reproduction is stopped in the movie player . Event handler onPlayStilled( ) corresponds to an event that takes place when the reproduction is paused in the movie player . Event handler onPlayStarted( ) corresponds to an even that takes place when the reproduction is started in the movie player . Event handler onPlayRepeated( ) corresponds to an event that takes place when the beginning of predetermined data is detected in the repeat reproduction of the movie player . Thus, a process corresponding to the status of the decoder engine  can be accomplished.","Event handler onSPDisplayStatusChanged( ) corresponds to an event that takes place when the display or non-display status of a stream of sub title (sub picture) data is changed in the movie player . Event handler onSelectedAudioChanged( ) corresponds to an event that takes place when an audio stream that is being reproduced is changed in the movie player . Event handler onVideoStopped( ) corresponds to an event that takes place when a video stream that is being reproduced is changed in the movie player . Thus, a process corresponding to a change of a stream that is being reproduced can be accomplished.","Event handler onPlayListStarted( ) corresponds to an event that takes place when the beginning of a play list is detected in the movie player . Event handler onPlayListEnded corresponds to an event that takes place when the end of a play list is detected in the movie player . Event handler onPlayItemStarted( ) corresponds to an event that takes place when the beginning of a play item is detected in the movie player . Event handler onPlayItemEnded corresponds to an event that takes place when the end of a play item is detected in the movie player . Thus, processes corresponding to the start and end of the reproduction for play lists and play items, such as a continuous reproduction for play lists and play items, can be accomplished.","Event handler onMarkEncountered( ) corresponds to an event that takes place when a mark is detected from a play list while the play list is being reproduced in the movie player . When a mark that represents a time is preset to a play list, a branch process for a play list that is being reproduced can be accomplished.","Contents of these event handlers are described using a descriptive language by the content creator side. Thus, when an event takes place, an operation that the content provider side intended can be accomplished.",{"@attributes":{"id":"p-0277","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":[{"@attributes":{"id":"ul0002-0001","num":"0293"},"b":"30"},{"@attributes":{"id":"ul0002-0002","num":"0294"},"b":"31"},{"@attributes":{"id":"ul0002-0003","num":"0295"},"b":"32"},{"@attributes":{"id":"ul0002-0004","num":"0296"},"b":"34"},{"@attributes":{"id":"ul0002-0005","num":"0297"},"b":"35"},{"@attributes":{"id":"ul0002-0006","num":"0298"},"b":"104"},{"@attributes":{"id":"ul0002-0007","num":"0299"},"b":"106"},{"@attributes":{"id":"ul0002-0008","num":"0300"},"b":"200"},{"@attributes":{"id":"ul0002-0009","num":"0301"},"b":"201"},{"@attributes":{"id":"ul0002-0010","num":"0302"},"b":"202"},{"@attributes":{"id":"ul0002-0011","num":"0303"},"b":"203"},{"@attributes":{"id":"ul0002-0012","num":"0304"},"b":"210"},{"@attributes":{"id":"ul0002-0013","num":"0305"},"b":"211"},{"@attributes":{"id":"ul0002-0014","num":"0306"},"b":"300"},{"@attributes":{"id":"ul0002-0015","num":"0307"},"b":"301"},{"@attributes":{"id":"ul0002-0016","num":"0308"},"b":"302"},{"@attributes":{"id":"ul0002-0017","num":"0309"},"b":"310"},{"@attributes":{"id":"ul0002-0018","num":"0310"},"b":"311"},{"@attributes":{"id":"ul0002-0019","num":"0311"},"b":["312","314"]},{"@attributes":{"id":"ul0002-0020","num":"0312"},"b":["313","315"]},{"@attributes":{"id":"ul0002-0021","num":"0313"},"b":"320"},{"@attributes":{"id":"ul0002-0022","num":"0314"},"b":"321"},{"@attributes":{"id":"ul0002-0023","num":"0315"},"b":"322"},{"@attributes":{"id":"ul0002-0024","num":"0316"},"b":"323"},"S DECIDE AT WHAT SCENE OF PLAY LIST BUTTON APPEARS.","S SET MARK AT DESIGNATED TIME.","S DESCRIBE METHOD THAT REGISTERS EVENT LISTENER CORRESPONDING TO MARK TO BUTTON OBJECT IN PROGRAM.","S IMPLEMENT LISTENER INTERFACE CORRESPONDING TO MARK GENERATION EVENT (DESCRIBE PROCESS EXECUTED WHEN EVENT TAKES PLACE).","S START REPRODUCTION OF PLAY LIST.","S BDBasicPlayer. DETECTS THAT. MARKED TIME ELAPSED WHILE PLAY LIST WAS BEEN REPRODUCED.","S HAS EVENT LISTENER CORRESPONDING TO MARK EVENT BEEN REGISTERED ?.","S TRANSMIT MARK EVENT TO OBJECT THAT HAS REGISTERED EVENT LISTENER.","S OBJECT INFORMED OF EVENT EXECUTES METHOD TO BE EXECUTED WHEN MARK EVENT TAKES PLACE.","S CAUSE BUTTON TO APPEAR.","S NOT INFORMED OF MARK DETECTION. EVENT.","S USER PRESSED \u201cNEXT\u201d KEY DURING. REPRODUCTION.","S RmtKeyEvent TAKES PLACE.","S OBTAIN POSITION OF NEXT CHAPTER MARK FROM DATABASE.","S IS THERE CHAPTER MARK ?","S STOP REPRODUCTION.","S PlayStoppedEvent TAKES PLACE.","S ACCESS TYPE POSITION OF NEXT CHAPTER MARK AND START REPRODUCTION OF VIDEO DATA.","S PlayStartedEvent AND MarkEncounteredEvent TAKE PLACE.","S START EXECUTION OF LISTENER CORRESPONDING TO MarkEncounteredEvent.","S OBTAIN TYPE OF Mark.","S CHAPTER MARK ?","S DISPLAY MESSAGE REPRESENTING BEGINNING OF CHAPTER.","S COMPLETE EXECUTION OF LISTENER."]}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2A","FIG. 2B"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3A","FIG. 3B"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5","b":"30"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 8A","FIG. 8B","FIG. 8C"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 14A","FIG. 14B","FIG. 14C"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 16A","FIG. 16B"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 19A","FIG. 19B","FIG. 19C"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 21A","FIG. 21B","FIG. 21C","FIG. 21D"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 25A","FIG. 25B"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 28A","FIG. 28B","FIG. 28C"],"b":"100"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 34A","FIG. 34B"]}]},"DETDESC":[{},{}]}
