---
title: Customizing function behavior based on cache and scheduling parameters of a memory argument
abstract: Disclosed are a method, a system and a computer program product of operating a data processing system that can include or be coupled to multiple processor cores. In one or more embodiments, each of multiple memory objects can be populated with work items and can be associated with attributes that can include information which can be used to describe data of each memory object and/or which can be used to process data of each memory object. The attributes can be used to indicate one or more of a cache policy, a cache size, and a cache line size, among others. In one or more embodiments, the attributes can be used as a history of how each memory object is used. The attributes can be used to indicate cache history statistics (e.g., a hit rate, a miss rate, etc.).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949529&OS=08949529&RS=08949529
owner: International Business Machines Corporation
number: 08949529
owner_city: Armonk
owner_country: US
publication_date: 20091230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["1. Technical Field","The present invention generally relates to multi-processor data processing systems and in particular to operations on data processing systems configured with multiple processing units. Still more particularly, the present invention relates to a method and system of utilizing cache line sizes in parallel processing of distributed work across multiple processing units of a multi-core data processing system.","2. Description of the Related Art","Multi-core data processing systems are widely utilized to enable parallel processing of data that can be divided into portions for completion. There are various different topologies of multi-core systems, of which non-uniform memory access (NUMA) system topology is one example. In the past, allowance of attaching tuning attributes directly to memory objects, used in parallel processing of data, have not been implemented to tune software managed caches.","Disclosed are a method, computer system architecture, and computer program product of operating a data processing system that can include or be coupled to multiple processor cores. In one or more embodiments, each of multiple memory objects can be populated with work items and can be associated with attributes that can include information which can be used to describe data of each memory object and\/or which can be used to process data of each memory object. The attributes can be used to indicate one or more of a cache policy, a cache size, and a cache line size, among others. In one or more embodiments, a local store or memory of a processor core of the multiple processor cores can be partitioned based one the attributes of one or more memory objects. For example, the local store can be portioned into two partitions, where each partition corresponds to a memory object. In one or more embodiments, each partition can be created based on attributes associated with a corresponding memory object. For example, the partition can be created based on one or more of a cache policy, a cache size, and a cache line size indicated by the attributes associated with the corresponding memory object. In one or more embodiments, work items from the memory object can be copied into the partition of the local store of a processor core, and the processor core can process the work items from the partition.","In one or more embodiments, a partition in a local store can include or be a software cache. For example, the partition can be created by software, and software can be used to manage the partition. In one or more embodiments, attributes associated with a memory object can be used as a history of how the memory object is used. For example, the attributes can be used to indicate cache history statistics (e.g., a hit rate, a miss rate, etc.) of the partition.","The above summary is not intended as a comprehensive description of the claimed subject matter but, rather, is intended to provide a brief overview of some of the functionality associated therewith. Other systems, methods, functionality, features and advantages of the claimed subject matter will be or will become apparent to one with skill in the art upon examination of the following figures and detailed written description.","Disclosed are a method, computer system architecture, and computer program product of operating a data processing system that can include or be coupled to multiple processor cores. In one or more embodiments, each of multiple memory objects can be populated with work items and can be associated with attributes that can include information which can be used to describe data of each memory object and\/or which can be used to process data of each memory object. The attributes can be used to indicate one or more of a cache policy, a cache size, and a cache line size, among others. In one or more embodiments, a local store or memory of a processor core of the multiple processor cores can be partitioned based one the attributes of one or more memory objects. For example, the local store can be portioned into two partitions, where each partition corresponds to a memory object. In one or more embodiments, each partition can be created based on attributes associated with a corresponding memory object. For example, the partition can be created based on one or more of a cache policy, a cache size, and a cache line size indicated by the attributes associated with the corresponding memory object. In one or more embodiments, work items from the memory object can be copied into the partition of the local store of a processor core, and the processor core can process the work items from the partition.","In the following detailed description of exemplary embodiments of the invention, specific exemplary embodiments in which the invention may be practiced are described in sufficient detail to enable those skilled in the art to practice the invention, and it is to be understood that other embodiments may be utilized and that logical, architectural, programmatic, mechanical, electrical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims.","Within the descriptions of the figures, similar elements are provided similar names and reference numerals as those of the previous figure(s). The specific numerals assigned to the elements are provided solely to aid in the description and not meant to imply any limitations (structural or functional) on the invention.","It is understood that the use of specific component, device and\/or parameter names are for example only and not meant to imply any limitations on the invention. The invention may thus be implemented with different nomenclature\/terminology utilized to describe the components\/devices\/parameters herein, without limitation. Each term utilized herein is to be given its broadest interpretation given the context in which that terms is utilized. Specifically, the following terms, which are utilized herein, are defined as follows:\n\n","As provided herein, the invention is applicable to any number of different configurations of such multi-core systems, including ones configured as large scale parallel processing system, or ones configured as non-uniform memory access (NUMA) processing system, or other type of multi-core processing system, including parallel processing systems. The descriptions provided herein assume no specific architecture, other than a multi-core architecture. However, certain features are assumed implemented in multi-node architectures (i.e., system with multiple processing nodes) in which one or more processing nodes exhibit low latency when accessing a global\/shared memory structure, while other features are assumed to be implemented in multi-node architectures in which one or more processing nodes exhibit high latency when accessing the global\/shared memory structure.","As further described below, implementation of the functional features of the invention is provided within processing nodes and involves use of a combination of hardware, firmware, as well as several software-level constructs. The presented figures illustrate both hardware and software components within an example distributed, multi-node computing environment in which multiple physically separate processing nodes, interconnected via a general system interconnect and\/or a network interface device (NID) and\/or host fabric interface (HFI) and\/or one or more other forms of interconnects (e.g., switches, and the like), provide a distributed data processing system that executes one or more ND work sets via a plurality of processor cores. The illustrative and described embodiments assume that the system architecture may be scaled to a much larger number of processing nodes.","Turning now to the figures, and in particular to , a block diagram of a multi-node, distributed data processing system (DPS) is illustrated, according to one or more embodiments. As shown, DPS  includes a processing system , which can be coupled to one or more remote processing systems  and  via an interconnect , such as a network fabric or switch. A illustrated, processing system  can include two or more processing nodes of which processing nodes  and . Processing nodes  and  are coupled to system interconnect , which serves as and may interchangeably be referred to as data buses.","In one or more embodiments, system interconnect  provides connectivity within processing system  to two or more devices, including memory controllers  and , a storage medium , a processor , and input\/output (I\/O) controller . In one or more embodiments, I\/O controller  provides control over\/by one or more I\/O devices , such as a pointing device, display monitor, and the like. Memory controllers  and  controls access to respective system memory devices  and . Depending on system design, memory controllers  and  may be assigned to respective processing nodes  or  and\/or may be physically located on the processor chip or at some other location within the overall system architecture. It is appreciated that the presence of multiple memory controllers  and  is a design parameter, and processing system  may be configured with a single memory controller, according to one or more embodiments.","In addition to system memory devices  and  of processing system , processing nodes  and  can be coupled to respective associated node local memories  and , which can allow staging of work at the processing node without requiring the processing node to retrieve each piece of work individually from a system memory (e.g., one of system memories  and ) or other remote (or high latency) location. In one or more embodiments, node local memory  can be a shared memory for each of processor cores -, and\/or node local memory  can be a shared memory for each of processor cores -. For example, node local memory  can be accessed in an asynchronous fashion by each of processor cores -, and node local memory  can be accessed in an asynchronous fashion by each of processor cores -. For instance, node local memory  can be accessed via direct memory access (DMA) by each of processor cores -, and\/or node local memory  can be accessed via DMA by each of processor cores -.","In one or more embodiments, each of processing nodes  and  includes two or more processor cores, although it is possible for the nodes to be single core nodes. As shown, processor node  includes N+1 cores, numbered core 0 though core_N, where N is an integer greater than zero. Likewise, processor node  comprises M+ cores, numbered core _ though core_M, where M is an integer greater than zero. So as to simplify the description of one or more embodiments, both N and M are assumed to be integer seven (7), such that processing node  includes eight (8) processing cores - and processing node  includes eight (8) processor cores -. Where utilized herein, the term processing units are assumed to be synonymous with processor cores. In one or more embodiments, each processor core of processor cores - and - can implement an instruction set architecture (ISA) and can execute instructions from the ISA. In one or more embodiments, processor cores - can implement an ISA that is different from an ISA that can be implemented by processor cores -.","The use of the integer variables \u201cN\u201d and \u201cM\u201d to cap the number of processor cores in respective processing nodes  and  merely indicates that each processing node can include a variable number of separate processor cores, with N and M being integers of any size greater than zero (0) (assuming a multi-core implementation for respective processing nodes). The number of processing nodes deployed in a given system architecture is implementation-dependent and can vary. It is appreciated that the embodiments described herein enables scaling to a much larger number of processing nodes and even larger number of processor cores. In one or more embodiments, processing system  can be the source of one or more ND Range work sets that are generated and processed by the processor cores within DPS architecture .","As further illustrated, processing system  includes storage , within which are stored one or more of the firmware and software components that enable generation of work and ND Range work sets for execution by one or more of the processing nodes. In one or more embodiments, storage  can store of or more of one or more operating systems (OSes) -, one or more applications (APPs) -, a compiler , an application programming interface (API)  and a scheduler . In one or more embodiments, scheduler  can include logic and\/or program instructions that are executed by processor , processor  or a processing core (e.g., processing cores - and -) to receive one or more kernels from a compiler and schedule the work (e.g., one or more kernels and\/or data sets) for dispatch to\/by one or more of the multiple processor cores within the DPS architecture . In one or more embodiments, a data set that is to be operated on is retrieved by compiler  from one or more of applications - and\/or OSes -, or from some other source (not illustrated herein). In one or more embodiments, compiler  includes a just in time (JIT) compiler that can produce one or more kernels in accordance with a method or process associated with processing the data set. For example, application  can implement a method or process associated with processing the data set, and in response to an execution of application , the JIT compiler can produce one or more kernels to process the data set.","In one or more embodiments, processing system  includes or is coupled to a switch or other global interconnect (e.g., interconnect ) to which multiple other processing systems may be connected. As illustrated, processing system  is communicatively connected to remote processing systems  and  via interconnect , which may be or include a network fabric or switch. As shown, connection to interconnect  is provided via network interface controller (NIC) , which may be or include a host fabric interface (HFI). As illustrated, NIC  is coupled to system interconnect . Interconnect  may be a single general interconnect to which all nodes connect or may include one or more subnets (not shown) connecting a subset of processing nodes to each other and\/or to processing system , in one of several alternate configurations.","In one or more embodiments, one or more of processing systems  and  can provide additional computing resources within DPS . For example, each of processing systems  and  can include one or ore structures and\/or functionalities similar to or the same as described with reference to processing system . In one or more embodiments, a relative distance between a remote computing device (e.g., one of processing systems  and ) from a work staging area within processing system , one or more processing cores included in the remote computing device can be described as exhibiting high latency during shared work retrieval and\/or balancing. Those skilled in the art will appreciate that DPS architecture  can include additional components, such as interconnect bridges, ports for connection to networks or attached devices, and the like (none of which are illustrated herein).","With reference now to , a block diagram of a logical flow of a multi-node data processing system is illustrated, according to one or more embodiments. In addition to the hardware structure presented processing system  of , which has been previously described,  provides a one or more configurations and\/or functionalities of the software and\/or firmware components described with reference to  as well, which enable one or more functional features of one or more embodiments.","As shown, processing node  is associated with a node mask (NM) , and processing node  is associated with a NM . In one or more embodiments, each of node masks (NMs)  and  can provide a unique bit mask identifier to identify an associated processing node. In one or more embodiments, node masks are used to enable node level scheduling and\/or routing of work, as described further below.","In a similar fashion, a core mask (CM) or processing unit mask (PUM) can provide a bit mask identifier to identify an associated\/linked\/encoded processing core and to uniquely identify the specific processor core from other processor cores within a node that includes the associated\/linked\/encoded processing core. As illustrated, cores - are associated with core masks (CMs) -, respectively, and cores - are associated with CMs -, respectively. For example, core0  is tagged with bit mask , core1  is tagged with bit mask , core_N  is tagged with bit mask .","In one example, each of NMs  and  can include a bit bask of XX, where Xcan include values of \u201c0\u201d and \u201c1\u201d. For instance, NM  can include a bit mask of \u201c10\u201d, and in another instance, NM  can include a bit mask of \u201c01\u201d. In another example, each of processor cores - and - can include a bit mask of YYYYYYYY, where Ycan include values of \u201c0\u201d and \u201c1\u201d. In one instance, cores  and  can include a bit mask of \u201c10000000\u201d. In a second instance, cores  and  can include a bit mask of \u201c01000000\u201d. In another instance, cores  and  can include a bit mask of \u201c00000001\u201d. In one or more embodiments, individual processing cores can be addressed and\/or identified by a combination of node mask and core mask. In one example, a processing core can be identified by XXYYYYYYYYor YYYYYYYYXX, depending on implementation. In one or more embodiments, processing system  can include multiple nodes that can be associated with multiple node masks. In one example, each of the multiple node masks, associated with multiple processor cores, can include X. . . X, where P can be an integer greater than zero (0). In one or more embodiments, each of multiple processing nodes can include multiple processing cores that can be associated with multiple core masks. In one example, each of the multiple core masks can include Y. . . Y, where Q can be an integer greater than zero (0).","Turning now to the functional blocks in the upper portion of the figure, the executable\/execution code of example application  is forwarded to compiler , which processes the instructions\/codes to one or more generate commands and\/or one or more kernels - and\/or one or more work items - from one or more of data sets -, according to one or more embodiments. For example, the one or more commands can provide work divided into one or more work items -, each associated with a kernel (e.g., a kernel of kernels -). The kernels - are forwarded to scheduler . In one or more embodiments, scheduler  includes a scheduler that performs the functions of: (1) scheduling (placing) work elements into command queue ; (2) selectively allocating the work items to selected processor cores; generating an attached processing unit (APU) (e.g., node) mask (e.g., a bit mask that includes a combination of a node mask and a core mask) corresponding to the selected processor cores allocated\/assigned the work item; and appending\/linking or otherwise associating the APU mask to the work element by forwarding the APU mask to command queue .","In one or more embodiments, the selectively allocating of the work items to selected processor cores involves and\/or is based on a scheduling criteria that takes into account workload allocation and work balancing across processing system  and\/or DPS , processing capabilities of the different types of processing units, e.g., CPUs (central processing units), GPUs (graphics processing units), SPUs (stream processing units), among others, and other factors, which may be programmed by the designer of the scheduler. In one or more embodiments, the division of work can be on a per processing node basis, rather than at the granularity of processor cores, the APU mask represents a node mask, identifying the specific processor node, and any processor core at that selected processing node may then consume the work items associated with the node mask.","In one or more embodiments, the work items associated with the bit mask can be routed from command queue  to one or more processing cores via the associated bit mask. In one example, the work items associated with the bit mask can be routed from command queue  to the one or more cores via the associated bit mask by a processor (e.g., core , core , processor , etc.). In another example, the work items associated with the bit mask can be routed from command queue  to the one or more cores via the associated bit mask by the one or more cores retrieving the one or more work items from command queue  using the associated bit mask.","Turning now to , a block diagram of a processing node is illustrated, according to one or more embodiments. As shown, processing node  can include processor cores - as described above. As illustrated, processor core  can include an execution unit (XU0) , a local store (LS0) or memory  coupled to XU0 , and a memory controller (MC0)  coupled to LS0 ; processor core  can include an execution unit (XU1) , a local store (LS1) or memory  coupled to XU1 , and a memory controller (MC1)  coupled to LS1 ; and processor core  can include an execution unit (XU_N) , a local store (LS_N) or memory  coupled to XU_N , and a memory controller (MC_N)  coupled to LS1 . In one or more embodiments, local stores - can store data and\/or execution unit instructions for respective processor cores -.","As shown, processor cores - can be coupled to an interconnect bus  via respective memory controllers -. In one or more embodiments, interconnect bus  can couple two or more processing node elements to one another. As illustrated, a node memory controller  and a bus interface controller  can be coupled to interconnect bus . As shown, bus interface controller  can be coupled to data bus . In one or more embodiments, processing node  can include node local memory , and node local memory  can be coupled to node memory controller . In one or more embodiments, a memory controller of a processor core, such as memory controller , can include a direct memory access (DMA) controller that can be used to copy information from node local memory  and\/or memory  to local store , and the DMA controller can be used to copy information from local store  to node local memory  and\/or memory . In one or more embodiments, these data transfers can be asynchronous.","Turning now to , a block diagram of a portion of a data processing system is illustrated, according to one or more embodiments. As shown, memory  can include memory objects - that can include respective work items - and respective attributes (ATTRS) -. In one or more embodiments, a memory object (OBJ) can be created with one or more attributes that can include information which can be used to describe data of the memory object and\/or which can be used to process data of the memory object. In one example, attributes  can include information regarding a data size of a work item of work items . For instance, a work item of work items  can include a data size of two hundred and fifty-six (256) bytes. In one or more embodiments, attributes can be set for a memory object after the memory object has been created. In one or more embodiments, attributes associated with a memory object can include data that can be updated with use of the memory object. For example, attributes  can include cache history statistics. For instance, cache history statistics of attributes  can include one or more of a hit rate and a miss rate.","As shown, node local memory  can include work items -, -, and - and kernel . For example, work items - are included in work items , work items - are included in work items , and work items - are included in work items . For instance, work items -, -, and - were copied from respective memory objects -. In one or more embodiments, attributes - are inherited from respective memory objects - to provide information regarding handling and\/or processing of respective work items -, -, and -.","Turning now to , a block diagram of a local store or memory is illustrated, according to one or more embodiments. As shown, local store or memory  can be partitioned into two or more partitions -. In one or more embodiments, partitions - correspond to respective memory objects -. In one or more embodiments, one or more attributes of attributes - can be used to partition local store  into two or more partitions -.","As shown, partitions - can include respective multiple cache lines -, -, and -. In one or more embodiments, the multiple cache lines can be configured using software (e.g., via API ). In one or more embodiments, one or more of the memory object attributes can include information that indicates one or more of a cache size and a cache line size. In one example, the cache size can correspond to a size of a partition. In another example, each of multiple cache lines of a partition can include a data size that can correspond to a cache line size. In one instance, the data size can include a number of bytes for a work item.","As illustrated, cache lines - can include a first data size, cache lines - can include a second data size, and cache lines - can include a third data size. In one or more embodiments, the first through third data sizes can include the same data size, two of the first through third data sizes can include the same data size, or the first through third data sizes can include respective different data sizes.","In one or more embodiments, one or more of the memory object attributes can include information that indicates one or more of a fault policy and an access policy. In one example, attributes  can include information that indicates a random access policy. In another example, attributes  can include information that indicates a sequential access policy. For instance, the sequential access policy can indicate that one or more work items can be copied to a local store in a speculative fashion. For example, work item  can be copied to local store , and based on a sequential access policy associated with work item  (e.g., inherited from memory object ) can indicate that work items - are also copied into local store . As shown, cache lines - can include respective work items -, cache lines - can include respective work items -, and cache lines - can include respective work items -. As illustrated, local store  can include kernel , and local store  can be used to store data and instructions that can be executed on processor core .","Turning now to , a block diagram of a local store or memory where multiple work items can occupy a cache line is illustrated, according to one or more embodiments. As shown, local store or memory  can be partitioned into two or more partitions -. In one or more embodiments, partitions - correspond to respective memory objects -. In one or more embodiments, one or more attributes of attributes - can be used to partition local store  into two or more partitions -. In one or more embodiments, a data size can include a number of bytes for multiple work items. For example, a work item can include a bounding volume hierarchy (BVH) node, and the data size can be set to two BVH nodes, since both sibling BVH nodes can be tested in traversing and\/or processing a bounding volume hierarchy. As illustrated, cache line  can include work items  and , and cache line  can include work items  and .","Turning now to , a block diagram of a local store or memory where a work item can occupy multiple cache lines is illustrated, according to one or more embodiments. As shown, local store or memory  can be partitioned into two or more partitions -. In one or more embodiments, partitions - correspond to respective memory objects -. In one or more embodiments, one or more attributes of attributes - can be used to partition local store  into two or more partitions -. In one or more embodiments, a data size can include a number of bytes that can store a portion of a work item. As illustrated, cache lines  and  can include work item , where cache lines  can include a first portion of work item  and cache line  can include a second portion of work item . As shown, cache lines  and  can include work item , where cache lines  can include a first portion of work item  and cache line  can include a second portion of work item .","Turning now to , a block diagram of a local store or memory is illustrated, according to one or more embodiments. As shown, local store or memory  can be partitioned into two or more partitions -. In one or more embodiments, partitions - correspond to respective memory objects -. In one or more embodiments, one or more attributes of attributes - can be used to partition local store  into two or more partitions -. As shown, cache lines  and  can include respective work items  and , cache lines  and  can include respective work items  and , and cache lines  and  can include respective work items  and . As illustrated, local store  can include kernel , and local store  can be used to store data and instructions that can be executed on processor core .","Turning now to , a method of operating a data processing system is illustrated, according to one or more embodiments. The method begins at initiation block . At block , API  can populate a first memory object with two or more work items. For example, API  can populate memory object  with work items . At block , API  can populate a second memory object with two or more work items. For example, API  can populate memory object  with work items . At block , processing node  can copy a first portion of the first memory object to a node memory. For example, processing node  can copy work items - from memory object  to node local memory .","At block , processing node  can copy a second portion of the second memory object to the node memory. For example, processing node  can copy work items - from memory object  to node local memory . At block , processor core  can determine a first data size. For example, processor core  can determine the first data size from attributes . At block , processor core  can determine a second data size. For example, processor core  can determine the second data size from attributes . At , processor core  can copy, based on the first data size, a first work item from the first portion of the first memory object to a first memory store of processor core . For example, processor core  can copy, based on the first data size, work item  from node local memory  to local store . In one or more embodiments, processor core  can include a DMA controller, and the DMA controller can copy, based on the first data size, work item  from node local memory  to local store .","At block , processor core  can copy, based on the second data size, a second work item from the second portion of the second memory object to the first memory store of processor core . For example, processor core  can copy, based on the second data size, work item  from node local memory  to local store . In one or more embodiments, processor core  can include a DMA controller, and the DMA controller can copy, based on the first data size, work item  from node local memory  to local store .","At block , processor core  can determine a sequential access policy associated with the first memory object. For example, processor core  can determine the sequential access policy from attributes . At block , processor core  can copy, based on the first data size, a third work item from the first portion of the first memory object to the first memory store of processor core . For example, processor core  can copy, based on the first data size, work item  from node local memory  to local store . In one or more embodiments, block  can be performed automatically in response to determining the sequential access policy. For example, the sequential access policy can indicate that additional work items can be speculatively cached. For instance, work item  can be a next work item in a sequence after work item . At block , processor core  can process the first work item. At block , processor core  can process the second work item. At block , processor core  can process the third work item. The method then ends at block .","Turning now to , a method of creating a memory object is illustrated, according to one or more embodiments. The method begins at initiation block . At block , API  can allocate space in a memory for a memory object. For example, API  can allocate space in memory  for memory object . In one or more embodiments, the space allocated for memory object  does not share an address space with another memory object. At block , API  can set attributes associated with the memory object. For example, API  can set attributes . In one or more embodiments, API  can set attributes  to indicate one or more of a cache policy, a cache size, and a cache line size, among others. The method then ends at block .","Turning now to , a method of setting attributes of a memory object is illustrated, according to one or more embodiments. The method begins at initiation block . At block , API  can set attributes associated with a memory object. For example, API  can set attributes  for memory object . In one instance, memory object  may have been previously allocated, and API  can set attributes  for memory object . In another instance, memory object  may have been previously associated with attributes , and API  can set one or more different attributes of attributes  for memory object . In one or more embodiments, API  can set attributes  to indicate one or more of a cache policy, a cache size, and a cache line size, among others. The method then ends at block .","Turning now to , a method of setting attributes of a memory object is illustrated, according to one or more embodiments. The method begins at initiation block . At block , processor  can receive first attributes associated with a first memory object. For example, processor  can receive attributes  associated with memory object . At block , processor  can receive second attributes associated with a second memory object. For example, processor  can receive attributes  associated with memory object . At block , processor  can create a first partition based on the first attributes. For example, processor  can create partition  in local store  based on attributes . At block , processor  can create two or more cache lines in the first partition based on the first attributes. For example, processor  can create cache lines - in partition  based on attributes .","At block , processor  can create a second partition based on the second attributes. For example, processor  can create partition  in local store  based on attributes . At block , processor  can create two or more cache lines in the second partition based on the second attributes. For example, processor  can create cache lines - in partition  based on attributes . At block , processor  can populate two or more cache lines of the first partition with two or more work items. For example, processor  can populate cache lines - with work items -. In one or more embodiments, MC0  of processor  can populate cache lines - with work items -.","At block , processor  can populate two or more cache lines of the second partition with two or more work items. For example, processor  can populate cache lines - with work items -. In one or more embodiments, MC0  of processor  can populate cache lines - with work items -. The method then ends at block .","Features of the provided embodiments can advantageously be implemented in multi-node processing systems which exhibit low data transfer and cross communication latencies between the processor cores and a memory location of a DPS. Given that the nodes can retrieve work from the central\/common command queue, the latency to the command queue for the different nodes can be relative short, such that the overall work retrieval process incurs an acceptable latency penalty in overall processing time for the processing cores that are grabbing work from the command queue.","With the implementation of the single command queue, the need to synchronize across multiple command queues of multiple nodes is substantially eliminated and can allow for dynamic allocation of various subdevices or virtual devices. The described embodiments are adapted for implementation on multi-processor compute systems (or system architecture) that exhibit small penalty (latency) when synchronizing across compute nodes. For example, with NUMA nodes that are connected via a \u201clocal\u201d fabric, such as within a single physical system (e.g., processing system ), there is a relatively small latency penalty when synchronizing distributed work of a single kernel and work items across multiple nodes. This further enables the expanding\/implementing of work and data intensive operations to\/on NUMA systems with low cross node latency.","With the described embodiments, multiple individual command queues tied to separate nodes may not be required for NUMA affinity, and a single command queue structure is provided. With the single command queue implementation.","The above embodiments can be applicable to systems that have NUMA regions close enough so they can share the common command\/work queue efficiently. This is especially true for workloads where a common function is being executed multiple, independent times. The common\/global command queue is used by all NUMA nodes. Each work element in that GCQ then contains an APU mask (NODEMASK), work remaining count (in the case of multiple iterations of a process) and a seen count. With this configuration, work is scheduled as follows: (a) the processing unit checks if the unit's NUMA bit is set in the next work element's APU mask; (b) if the unit's NUMA bit is not set, the processing unit increments the seen count, indicating that the unit has finished with the work element, and advances to the next element (c) If the unit's NUMA bit is set, the unit decrements the work remaining count by a tunable \u201cchunk size\u201d, based on the actual amount of work retrieved from the work element by the processing unit; (d) If the result of the decrement is a value indicating that there is no more work (e.g., 0 or \u22121), the processing unit increments the seen count, which indicates that the processing unit has finished with the element. The processing unit then advances to the next work element; (e) if the processing unit is the last processor core to see the element (i.e., seen count is equal to zero), indicating all the processor cores have seen the work item at least one, the processing unit marks the location in the global queue as \u201cfree.\u201d","Certain of the features of the described embodiments may lend themselves to N Dimensional (ND) Range processing\/execution paradigms, such as provided by OpenCL\u2122 and similarly structured applications executed on multi-core data processing systems in which an execution command contains the information necessary to efficiently execute and balance work load of the command, which may include data or task parallel processing requirements. Each command includes information corresponding to the total number of work groups within the command to be executed, the number of work groups remaining to be computed, the number of work groups already processed, the number of work groups to process at a time (reservation size). Other information provided by the commands may include the number of execution threads to process in the command and the number of execution threads that have seen the command.","Within this execution paradigm, and according to the presently described embodiments, execution units can process the commands from a single global command queue comprising multiple queue entries. As provided by the described embodiments, the execution units are processing cores, which may be located across a distributed network. However, while processor cores are employed throughout the described and illustrative embodiments as examples of execution units, in other embodiments, the execution units may be any device that executed a command, including, but not limited to, processing cores, CPUs, GPUs, SPUs, threads, and even complete computing systems.","In each of the flow charts above, one or more of the methods may be embodied in a computer readable medium containing computer readable code such that a series of steps are performed when the computer readable code is executed on a computing device. In some implementations, certain steps of the methods are combined, performed simultaneously or in a different order, or perhaps omitted, without deviating from the spirit and scope of the invention. Thus, while the method steps are described and illustrated in a particular sequence, use of a specific sequence of steps is not meant to imply any limitations on the invention. Changes may be made with regards to the sequence of steps without departing from the spirit or scope of the present invention. Use of a particular sequence is therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, R.F, etc., or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks. The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","As will be further appreciated, the processes in embodiments of the present invention may be implemented using any combination of software, firmware or hardware. As a preparatory step to practicing the invention in software, the programming code (whether software or firmware) will typically be stored in one or more machine readable storage mediums such as fixed (hard) drives, diskettes, optical disks, magnetic tape, semiconductor memories such as ROMs, PROMs, etc., thereby making an article of manufacture in accordance with the invention. The article of manufacture containing the programming code is used by either executing the code directly from the storage device, by copying the code from the storage device into another storage device such as a hard disk, RAM, etc., or by transmitting the code for remote execution using transmission type media such as digital and analog communication links The methods of the invention may be practiced by combining one or more machine-readable storage devices containing the code according to the present invention with appropriate processing hardware to execute the code contained therein. An apparatus for practicing the invention could be one or more processing devices and storage systems containing or having network access to program(s) coded in accordance with the invention.","Thus, it is important that while an illustrative embodiment of the present invention is described in the context of a fully functional computer (server) system with installed (or executed) software, those skilled in the art will appreciate that the software aspects of an illustrative embodiment of the present invention are capable of being distributed as a program product in a variety of forms, and that an illustrative embodiment of the present invention applies equally regardless of the particular type of media used to actually carry out the distribution.","While the invention has been described with reference to exemplary embodiments, it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition, many modifications may be made to adapt a particular system, device or component thereof to the teachings of the invention without departing from the essential scope thereof. Therefore, it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention, but that the invention will include all embodiments falling within the scope of the appended claims. Moreover, the use of the terms first, second, etc. do not denote any order or importance, but rather the terms first, second, etc. are used to distinguish one element from another.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The claimed subject matter and equivalents thereof will best be understood by reference to the following detailed description of illustrative embodiments when read in conjunction with the accompanying figures, wherein:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
