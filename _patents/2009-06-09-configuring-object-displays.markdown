---
title: Configuring object displays
abstract: An object configuration module for configuring an object retrieves a view object associated with a user from a database. The view object may comprise a plurality of attributes. The object configuration module may further retrieve configuration information for the view object from the database. The configuration information may comprise properties of the attributes, and the properties may be customized by the user for the view object. The object configuration module may then set the properties for each of the attributes based on the retrieved configuration information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183248&OS=09183248&RS=09183248
owner: Oracle International Corporation
number: 09183248
owner_city: Redwood Shores
owner_country: US
publication_date: 20090609
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Embodiments of the invention are generally related to computer systems and, in particular, to an apparatus, system and method for configuring object display information.","Computer or web applications can be utilized to display information retrieved from a database system. The information may be displayed by the application in a table layout, for example. Typically, an application developer, at the time of design, would develop code to retrieve data from the database and to display the information in a table with designated properties and format. An end user of the application would not have the ability to configure the pre-designated properties or format of the data unless the end user had access to, and the ability to modify, the underlying code.","One embodiment is directed to an object configuration module for configuring an object. The object configuration module retrieves a view object associated with a user from a database. The view object may comprise a plurality of attributes. The object configuration module may further retrieve configuration information for the view object from the database. The configuration information may comprise properties of the attributes, and the properties may be customized by the user for the view object. The object configuration module may then set the properties for each of the attributes based on the retrieved configuration information.","One embodiment is directed to a system for configuring an object, such as a table, plan, page or display, in accordance with an end user's preferences. Configuration information previously specified by a user, via a graphical user interface, for example, is retrieved from a database. The configuration information may be associated with the object, and may specify the user-requested configuration of the layout, display and attribute properties of the object. Customization of an object in this manner may provide a user with an increased level of security and privacy.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["10","10","12","10","10","22","12","22","10","14","14","10","20","10"]},"Computer readable media may be any available media that can be accessed by processor  and includes both volatile and nonvolatile media, removable and non-removable media, and communication media. Communication media may include computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.","Processor  is further coupled via bus  to a display , such as a Liquid Crystal Display (\u201cLCD\u201d), for displaying information to a user, such as configuration information. A keyboard  and a cursor control device , such as a computer mouse, are further coupled to bus  to enable a user to interface with system . Processor  and memory  may also be coupled via bus  to a database system  and, thus, may be able to access and retrieve information stored in database system . Although only a single database is illustrated in , any number of databases may be used in accordance with certain embodiments.","In one embodiment, memory  stores software modules that provide functionality when executed by processor . The modules may include an operating system  that provides operating system functionality for system . The memory may also store an object configuration module , which may be used to configure an object display based on a number of determinations, as discussed in more detail below. In other embodiments, object configuration module  may be a stand alone system or may be part of any other system.","System  may also include one or more other functional modules  to provide additional functionality. For example, other functional modules  may include a compensation workbench program. In one embodiment, the compensation workbench can allow managers and compensation professionals to plan, allocate, and model budgets and awards globally and across multiple currencies. The compensation workbench may also allow users to distribute budgets and compensation based on certain guidelines, in addition to providing a worksheet view of employees, performance ratings, and total compensation. Analytics within the compensation workbench may provide internal and external comparisons, statistical analysis, compensation history, and overviews of budgets and allocations to enable managers to make decisions that achieve certain objectives. In one embodiment, the compensation workbench is the \u201cCOMPENSATION WORKBENCH\u201d from Oracle Corporation.","Database system  may include a database server and any type of database, such as a relational or flat file database. Database system  may store data related to the object, the object configuration model , and\/or any data associated with system  or its associated modules and components.","In one embodiment, system  may operate within a model-view controller (\u201cMVC\u201d) framework. MVC may be operable to separate data of an application (the \u201cmodel\u201d) from the user interface (the \u201cview\u201d), so that modifications to the user interface will not affect data handling and so that the data can be reorganized and\/or altered without changing the user interface. In other words, MVC decouples data access and business logic from the data presentation and user interaction. In one embodiment, MVC is stored in memory . Additionally, MVC may be implemented in hardware alone, or in a combination of hardware and software.","In one embodiment, the model is a domain-specific representation of the information that the application operates. Domain logic adds meaning to raw data which, for example, may be the data stored in database . The view renders the model into a form suitable for interaction, such as a user interface. Multiple views can exist for a single mode for different purposes. The controller aspect of MVC processes and responds to events, typically user actions, and may invoke changes on the model. For example, the controller may notify the model of the user actions, possibly resulting in a change in the model's state. A view can use the model indirectly to generate an appropriate user interface. The model and controller need not have direct knowledge of the view.","In one embodiment, processor  and\/or MVC can retrieve a view object associated with a user from database system . Processor  or MVC may also control object configuration module  to retrieve configuration information associated with the retrieved view object from the database system . Alternatively, processor  and\/or MVC may directly retrieve the configuration information. The configuration information may have been previously defined and\/or customized by a user associated with the view object. In one embodiment, the user may utilize a graphical user interface to setup the configuration information. Object configuration module  may then apply the retrieved configuration information to its associated view object. The view object, now configured according to the user-preferred configuration information, is then transmitted to display  for display to the user. Therefore, in some embodiments, the configuration information and the associated object may be stored, accessed and modified separately.","In certain embodiments, processor , MVC, object configuration module , and other functional modules  may be implemented as separate physical and logical units or may be implemented in a single physical and logical unit. Furthermore, in some embodiments, processor , MVC, object configuration module , and other functional modules  may be implemented in hardware, or as any suitable combination of hardware and software.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["200","200","200","222"]},"For example, configuration user interface  may permit a user to specify and\/or modify a table and its attributes or features. In one embodiment, configuration user interface  includes a \u201cSummary\u201d tab , a \u201cDetail Table\u201d tab , an \u201cEmployee List\u201d tab , an \u201cActions\u201d tab , and an \u201cInstructions\u201d tab . Summary tab , Detail Table tab , and Employee List tab  respectively correspond to a Summary table, Detail table, and Employee List table on budgeting pages of a web application, such as the compensation workbench program. Selection of one of these tabs allows the user to modify the features of a table corresponding to the selected tab. Each of the tables may be configured independently of the other tables.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["202","202"]},"As illustrated in , Summary tab  may include an enable option  to enable the display of a corresponding column in the table. Column  lists the subject matter of a particular column within a table structure. The table structure may be a view object stored in database system , as discussed above. Display name  includes fields that allow a user to customize the header display name of the corresponding column . Default sequence  refers to the display order of the columns when the page is rendered. Default sequence  allows a user to specify the display order of the columns. In the example illustrated in , the numbers displayed in the default sequence column are incremented by ten in case the user decides they want to place a column in between 10 and 20, for example. As a result, the user can specify that a column should have a default sequence of 15 without having to reorder all the default sequence numbers for all the columns. In other embodiments, the user can enter any default sequence number and are not required to be in increments of 10. Properties  is a field that allows a user to specify the properties of each cell for a corresponding column . Properties  may include a link or icon that directs the user to a window that allows the user to select certain properties regarding each cell in the corresponding column .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","220","300","204","204","300","302","300","304"]},"Therefore, configuration user interface  and properties window  provide an interface in which an end user may configure a customized view of a table or page that corresponds to an object in the database system , including customizing the layout, display properties, and attribute properties. In an embodiment, configuration user interface  may allow a user to configure a number of preferences related to the display of the table. These preferences may include: column heading label, display order of the column within a table, initially hidden column setting (in which a column may be unhidden by certain table actions), a permanently hidden column setting, an editable column setting, number formatting properties, a rounding code, a monetary or non-monetary setting, and a spanning column feature (in which a spanned column is hidden if no sub-columns under the spanned columns are visible).","Once a user's configuration has been selected and submitted, system  is configured to automatically display a customized view of an object, such as a table, in accordance with the settings selected by the user (i.e., configuration information).  illustrates an example of a user interface  including a customized view of a table  that is displayed according to user preferences provided via configuration user interface  according to one embodiment. In this example, table  includes a personalized view of an employee list. Table  may be based on an object of an employee list stored in database system . Table  includes a listing of employee names in the \u201cEmployee Name\u201d column . Table  may further include a section  of non-editable columns, including an eligibility status, alert, currency type, and eligible salaries. Section  may include editable columns, such as employee budget amount and employee budget percent of eligible salaries. Section  includes additional columns, such as budget available, target, target percent, and units. In the example illustrated in FIG. , the formatting properties of the numbers was not defined so the table  has been configured without a thousand's separator or decimals.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5","b":["500","500","100","200","100","510","30","530","520","30","100","530","540","550","550","30"]},"In certain embodiments, instructions or operations may be implemented or processed by API , or by modules , ,  of , in order to configure an object as discussed above. Example pseudo-code corresponding to these instructions or operations may be as follows:",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003public void displayProperties(String pageName, String"]},{"entry":[{},"tableName, String customKey, ViewObject View) {"]},{"entry":[{},"\u2003\u2003Get the user\u2019s View Object"]},{"entry":[{},"\u2003\u2003Get the Configuration stored in the database for this plan,"]},{"entry":[{},"page, table."]},{"entry":[{},"\u2003\u2003For each attribute on this View Object {"]},{"entry":[{},"\u2003\u2003Get the name of the current attribute we are on and set the"]},{"entry":[{},"column heading property."]},{"entry":[{},"\u2003\u2003Get the Display Flag and set the Rendered property."]},{"entry":[{},"\u2003\u2003Get the Initially Hidden Flag and set the Initially Hidden"]},{"entry":[{},"property."]},{"entry":[{},"\u2003\u2003Get the Updates Allowed Flag and set the Editable property."]},{"entry":[{},"\u2003\u2003Get the Order Number and set the Index property."]},{"entry":[{},"\u2003\u2003Get the Number of Decimals to display and the thousand"]},{"entry":[{},"separator Flag and set the Number Format property."]},{"entry":[{},"\u2003\u2003Get the rounding code and set the Rounding property.}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Setting the property attributes in the view object functionality  allows for the presentation  of a logical view of an object (e.g., table  of ) in accordance with the configuration information. As a result, in one example, an object (e.g., table  of ) is configured and displayed in user interface  in accordance with the view that was set  by configuration API . According to one embodiment, configuration API  and view object functionality may be stored in memory , such as within operating system , object configuration module , or as an other functional module  of .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6","b":["600","30","602","30"]},"At , a view object associated with the current user and received parameters is retrieved. In one embodiment, the view object is retrieved from database system . At , the configuration information associated with the view object is obtained. In one embodiment, the configuration information is obtained based on the current user and based on the received parameters. The configuration information may also be stored in database system . The configuration information may include information relating to the current attribute, the display flag, the initially hidden flag, the updates allowed flag, the order number, the number of decimals to display, the thousand separator flag, and the routing code.","At , the properties for each attribute in the retrieved view object is set based on the configuration information. In one example, each view object has at least one associated set of configuration information. At , the view object customized according to the configuration information is provided to the user.","In one embodiment, the functionality of the diagrams illustrated in  may be implemented by software stored in memory or other computer readable or tangible media, and executed by a processor. In other embodiments, the functionality can be performed by hardware (e.g. by an application specific integrated processor (\u201cASIC\u201d), a programmable gate array (\u201cPGA\u201d), a field programmable gate array (\u201cFGPA\u201d), etc.), or any combination of hardware and software.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 7","FIG. 7","FIG. 5"],"b":["16","16","710","10","710","26","28","710","30","10","16","720","10","24","16","730","30","30","730","530"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 8","FIG. 8"],"b":["800","30","802"]},"Each view object, such as the one illustrated in , may include a number of attributes. As indicated in section , view object attributes can be based upon attributes from an entity object, and may be calculated, or may be derived from a query (e.g., SQL-derived). For each attribute listed in name column , a corresponding type , column , and related information  is displayed. Type  refers to a classification indicating a category of data such as numeric, string, long, big decimal, integer, floating point, Boolean, etc. The type  may determine the types of operations that may be performed on the corresponding data, and the way in which the data is stored. Column identified a minimum set of columns that serve as a key value in database system  for the corresponding attribute . A key icon is displayed for each attribute that refers to a key value. Information column  provides data relating the basis of the corresponding attribute and\/or how it is calculated.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 9","FIG. 8"],"b":["900","904","902","806"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 10","FIG. 4"],"b":["1000","1000","1002","1004","402","1004","1006","1004","402","1006","1006","1006","1008","1006"],"i":["a","b ","a ","b ","b "]},"Therefore, according to certain embodiments, a user is allowed to customize and configure the attributes of an object according to their preferences. In one embodiment, the user may specify their desired configuration of an object via a user interface. The user-specified configuration information may then be stored in a database or memory. In some embodiments, upon receipt of a request to view a certain object, a processor or object configuration module is configured to retrieve the requested object from the database or memory. The processor or object configuration module may additionally retrieve the user-specified configuration information associated with the object from the database or memory. In one embodiment, the object configuration module may then apply the retrieved configuration information to its associated view thereby setting the desired properties for each attribute in the object based on the configuration information. The resulting object customized according to the user-specified configuration information may then be returned and displayed to the user.","As a result of certain embodiments, an end user is provided with the discretion to customize the layout, display and properties of an object, such as a table. For example, the end user can have the option of hiding or modifying certain features of a table. Therefore, the user is afforded with a desired level of security and privacy since, for example, secure elements of the view may be hidden from display. Additionally, in certain embodiments, the user will only be required to configure the object, or provide configuration information, only once for each plan. Subsequently, whenever the user requests access to that object, it will be customized according to the user's previously provided configuration information. Alternatively, in one embodiment, a default setup is provided in cases where the user does not wish to provide any configuration information.","As mentioned above, certain embodiments may be implemented in a compensation and budgeting application. In the area of compensation and budgeting, different end users may desire to access and\/or different information in each of their plans and budgets. Certain embodiments, as discussed above, easily allow an end user to configure a table for each plan and\/or budget according to their specific requirements.","One having ordinary skill in the art will readily understand that the invention as discussed above may be practiced with steps in a different order, and\/or with hardware elements in configurations which are different than those which are disclosed. Therefore, although the invention has been described based upon these preferred embodiments, it would be apparent to those of skill in the art that certain modifications, variations, and alternative constructions would be apparent, while remaining within the spirit and scope of the invention. The features, structures, or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. Thus, embodiments may be practiced alone or in any combination. In order to determine the metes and bounds of the invention, therefore, reference should be made to the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For proper understanding of the invention, reference should be made to the accompanying drawings, wherein:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
