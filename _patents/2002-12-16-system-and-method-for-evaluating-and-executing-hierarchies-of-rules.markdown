---
title: System and method for evaluating and executing hierarchies of rules
abstract: Embodiments of a system and method for hierarchically organizing rules and for evaluating and executing the hierarchy of rules. Each rule in the hierarchy of rules may include a precondition and an action to be executed if the precondition is met. When evaluating and executing the rules, if a precondition of a rule in the hierarchy is not met, then the action of the rule is not executed. Further, rules that descend from the rule in the hierarchy of rules are precluded from evaluation and execution. In one embodiment, modification of the hierarchy of rules may be performed without modification to an application using the hierarchy of rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07065745&OS=07065745&RS=07065745
owner: Sun Microsystems, Inc.
number: 07065745
owner_city: Santa Clara
owner_country: US
publication_date: 20021216
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates to computer systems, and more particularly to organizing rules for evaluation by a rules engine.","2. Description of the Related Art","Businesses often realize cost reductions and efficiencies by automating process flows. For example, replacing manual processes (e.g., data entry, error diagnosis and correction) with automated processes provided by a computer system may lead to reduced business costs and smaller decision making cycles. Such automated processes are typically modeled and represented as rules separate from software code. The key underlying technology is typically a rules engine. The rules engine may be used to interpret and evaluate if-then statements that are often referred to as rules. The \u201cif\u201d portion of a rule may include conditions (e.g., amount greater than $100) and the then portion of rules may include actions (e.g., set discount to 5%). The inputs to the rules engine may be a collection of rules (e.g., rule set, rule execution set) and some information often referred to as facts (e.g., an actual amount such as $5.00). The outputs from a rules engine are generally determined by the facts and may include the original facts with possible modifications, new facts or some other computer system action (e.g., send an email, create new output, correct a problem) as a result of performing the specified actions of a rule.","Automated processes of businesses are sometimes difficult to model and may frequently change. For example, processes may evolve and rules that make a certain operation possible may become outdated due to an emerging technology. Rules are often used for many interconnected purposes. For example, rules may be reaction rules (e.g., when critical alarms on a network occur, pinpoint each critical alarm and recommend the best action) that when changed (e.g., modified, removed) may impact other rules. The conventional way of viewing the organization of rules is similar to a set of if-then statements.","Rules conventionally fire or execute in a sequence. For example, the condition of rule one is evaluated and if satisfied, the action of rule one is then executed and the condition of rule two is evaluated and if satisfied, the action of rule two is executed, and so forth. As rules sometimes change frequently and are often interconnected, maintenance of such rules may be difficult. For example, several rules may be highly dependent on a certain rule and removing the rule may require changes to each of the several rules and potentially even the computer system itself.","The organization of rules may also impose constraints on run-time evaluation of the rules. Computer systems that have the capacity to analyze data and draw inferences (e.g., rules engine) often rely heavily on pattern-matching algorithms. Rules may be part of numerous searches involving a many-to-many match among patterns identified in rules and facts. Considering the potential multitude of rules and facts, the number of rules evaluated may increase. For example, each set of if-then statements may be evaluated more than once although many of the rules may rely on the same condition that has already been tested.","Embodiments of a system and method for organizing rules in a hierarchy and for evaluating and executing the hierarchy of rules are described. Each rule in the hierarchy of rules may include a precondition and an action to be executed if the precondition is met. When evaluating and executing the rules, if a precondition of a rule in the hierarchy is not met (e.g. evaluates to false), then the action of the rule is not executed. In addition, rules that descend from the rule in the hierarchy of rules are precluded from evaluation and execution.","Embodiments may define an inheritance relationship among rules in the hierarchy of rules. The hierarchy of rules may include one or more parent rules each having one or more direct descendents (child rules). At least one of the one or more child rules may be a parent rule to one or more other child rules. The precondition of each child rule may be evaluated only if the precondition of its parent rule is met.","In one embodiment, the hierarchy of rules may be evaluated, for example by a rules engine, to generate an output. In one embodiment, evaluation and execution of the rules may be performed by a code generation application, and the output may include computer-executable code. In one embodiment, the computer-executable code may be a Java application executable within a Java container.","In one embodiment, the rules may be defined as classes of an object-oriented programming language. In one embodiment, the programming language may be Java. In one embodiment, a root rule of the hierarchy of rules may extend from a class of the rules engine and the hierarchy of rules may extend from the root rule. In one embodiment, a rules engine may evaluate the plurality of rules in the hierarchy of rules. In one embodiment, the rules may be implemented as Java classes, and the class of the rules engine may be a Rule class that implements a Java IRule interface.","Embodiments may include a mechanism for a rules engine to determine a hierarchical relationship among a plurality of rules input to the rules engine. In one embodiment, hierarchical relationship information may be included in the rules. This information for a given rule may be used to determine a parent rule and\/or one or more child rules of the given rule. In other embodiments where rules are implemented as classes (e.g. Java classes), introspection may be used to determine the hierarchical relationship among the plurality of rules. In one embodiment, a reflection API may be used by a rules engine to perform introspection on a plurality of rules. The hierarchical relationship may be used by the rules engine when evaluating the plurality of rules to determine branches of the hierarchical relationship of the plurality of rules to be evaluated or skipped depending on the results of evaluation of the precondition of a parent rule of the branch. Evaluation of preconditions of rules in the plurality of rules may be performed against data (also referred to as facts) accessed by the rules engine. In one embodiment, the data may be input by a user of an application.","In one embodiment, the hierarchy of rules may be modified. Modifications to the hierarchy of rules may include, but are not limited to, adding rules, deleting rules, moving rules, and modification of preconditions and\/or actions of rules. In one embodiment, modification of the hierarchy of rules may be performed without requiring modification to an application or system using the hierarchy of rules.","While the invention is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the invention is not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude\u201d, \u201cincluding\u201d, and \u201cincludes\u201d mean including, but not limited to.","Embodiments of a system and method for organizing rules in a hierarchy and for evaluating and executing the hierarchy of rules are described. Each rule in the hierarchy of rules may include a precondition and an action to be executed if the precondition is met. When evaluating and executing the rules, if a precondition of a rule in the hierarchy is not met (e.g. evaluates to false), then the action of the rule is not executed. Further, rules that descend from the rule in the hierarchy of rules are precluded from evaluation and execution. In one embodiment, the hierarchy of rules may be modified. Modifications to the hierarchy of rules may include, but are not limited to, adding rules, deleting rules, moving rules, and modification of preconditions and\/or actions of rules. In one embodiment, modification of the hierarchy of rules may be performed without requiring modification to an application or system using the hierarchy of rules.","As an exemplary implementation of one embodiment of the system and method for organizing rules in a hierarchy and for evaluating and executing the hierarchy of rules, a hierarchy of rules may be used in a code generation application, e.g. a J2EE application generator. In this exemplary application, the expected output may include Java code and XML and database creation schema, and potentially other application components. Input to the application may specify particulars of the code and other components to be produced as output.","Embodiments may be used in any application that has a rules-based nature. A hierarchy of rules may be modified without requiring modification to the application that implements it. Thus, embodiments may be used in applications that may need to be changed periodically, for example due to new \u201cbest practices\u201d and\/or patterns; the hierarchy of rules may be modified to reflect the changes in best practices and\/or patterns without requiring modification to the application code. Embodiments may also be used in applications that may need to be expanded; for example, in the code generation application described above, the hierarchy of rules  may be modified to generate default web service wrappers and\/or default user interface front ends.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["109","103","105","105","150","150","150","107","103","101","107","107","103","109","105","109","107","109"]},"In different embodiments, a computer system  that includes the hierarchy of rules  may take various forms including a personal computer system, desktop computer, notebook computer, workstation, server, mainframe computer system, network appliance, network computer, Internet appliance, personal digital assistant (PDA), embedded device, smart phone, television system, another suitable device, or combinations thereof. In general, the term computer system may be broadly defined to encompass any device having a processor that executes instructions from a computer-accessible medium.","The computer system  may be configured to execute one or more computer programs stored on a computer-accessible medium. The hierarchy of rules  and\/or application software configured to evaluate the hierarchy of rules  may be stored on various computer-accessible media. The hierarchy of rules  may be read from a computer-accessible medium into memory , generated in memory  at run-time, or provided to memory from other sources (e.g. from network via network interface ). Examples of computer-accessible media include hard disk storage, floppy disk storage, removable disk storage, flash memory or random access memory (RAM). Computer-accessible media may include an installation medium, e.g., a CD-ROM or floppy disk, a computer system memory such as DRAM, SRAM, EDO RAM, SDRAM, DDR SDRAM, Rambus RAM, etc., or a non-volatile memory such as a magnetic media, e.g., a hard drive or optical storage. Computer-accessible media may include other types of memory as well, or combinations thereof. In addition, a computer-accessible medium may be located in a first computer in which the computer programs are executed, or may be located in a second different computer. The second computer may connect to the first computer, for example over a network, through one or more components such as network interface . In the latter instance, the second computer may provide the program instructions to the first computer via the network for execution.","Requirements or conditions for various operations may be modeled and included in the hierarchy of rules . For example, automated processes (e.g., actions, command sequences, etc.) provided by an application may be modeled and included in the hierarchy of rules . Each rule in the hierarchy of rules  may represent the requirements or conditions needed for performing a particular automated process of the application. Each rule may test whether the requirements or conditions are met before the particular automated process is performed.","Each rule in the hierarchy of rules  may include a precondition and an action to be executed if the precondition is met. When evaluating and executing the rules, if a precondition of a rule in the hierarchy is not met (e.g. evaluates to false), then the action of the rule is not executed. Further, rules that descend from the rule in the hierarchy of rules  are precluded from evaluation and execution.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["101","101","102","101","102","101","102","102","102","102","102","101","102","101","102","101"]},"The hierarchy of rules  may be configured differently than shown in . For example, the hierarchy of rules  may be a binary tree (e.g., at most two child rules for each parent rule), a tertiary tree (e.g., at most three child rules for each parent rule) or a multiway tree (e.g., any number of child rules F for each parent rule).","Each of the rules  may include a precondition and an action configured to be executed if the precondition is met. The precondition may represent the requirements or conditions for performing a particular action. The precondition may define qualitative (e.g., categorical such as names of cars) and\/or quantitative (e.g., numeric such as a number of cars) conditions. The action may represent the outcome (e.g., send an email, create new variable) when the precondition is satisfied. For example, the action may prevent, cause or recommend further outcomes based on whether the precondition is met.","In one embodiment, the hierarchy of rules  may be configured for evaluation by a rules engine. In one embodiment, a rules engine interface  may serve as an interface between the rules engine and the hierarchy of rules  for evaluation of the rules . A rules engine may evaluate preconditions of rules  within the hierarchy of rules  to determine if requirements or conditions for the rules have been met. If a precondition of a rule in the hierarchy is not met (e.g. evaluates to false), then the action of the rule is not executed. Further, rules that descend from the rule in the hierarchy of rules  are precluded from evaluation and execution by the rules engine.","In various embodiments, the hierarchy of rules  may be a collection of rules  such as a rule set, rule execution set or some other set of rules organized as a hierarchy of rules. Various types of rules  may be included in the hierarchy of rules  including one or more of, but not limited to, deduction, inference, derivation, reaction or other types of rules. For example, a deduction, inference or derivation rule  may be configured to derive information from existing data or other derived information as needed. An example of a derivation rule  is: \u201cthe rental rate of a rental car is inferred from the rental rate of the type of car assigned to the rental car\u201d. Reaction rules  may be configured to determine if an event has occurred and recommend possible actions based on information obtained as a result of the event. The action of a reaction rule  may be executed in response to the event. An example of a reaction rule  is: \u201cwhen receiving the request to reserve a car of some specified car type, the current status of the specified car type is checked\u201d.","In one embodiment, each rule  of the hierarchy of rules  may be implemented as an object class of an object-oriented programming language. The object classes may implement the particular preconditions and actions for each rule. In one embodiment, the object-oriented programming language may be Java. In one embodiment, each rule  may be implemented as an object class, and each object class may be configured with access to a rules engine via rules engine interface . The hierarchy of rules  may be stored in a repository in compiled form or some other format configured for execution. In one embodiment, Java object classes (e.g., a class for each rule ) may be configured as Java class files and packaged as part of a Java rules-based application. In one embodiment, rules  may be developed and\/or generated with a rules authoring tool (e.g., a builder tool via a graphical user interface).","In another embodiment, the hierarchy of rules  may be configured by embedding rules  in triggers and\/or stored procedures developed with a structured query language (SQL). For example, SQL may be provided by a relational database management system (e.g., Oracle\u00ae RDMS from Oracle Corporation) and SQL-based triggers may be used to implement the hierarchy of rules . In other embodiments, object tables of an object-relational database (ORDB), object classes of a bean framework (e.g., Enterprise JavaBeans\u2122) or other types of technologies may be used to configure the hierarchy of rules . For example, the hierarchy of rules  may be implemented with rules markup language (RuleML), extensible rule markup language (XRML), business rules markup language (BRML), artificial intelligence markup language (AIML) or some other markup language.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 3","b":["101","303","101","303","101","306","308","101","303","101","101"]},"The input  may include information (e.g., a collection of facts, variable-free tuples, etc.) used by the hierarchy of rules  during evaluation. One or more relationships may be expressed within the information. For example, data that depends on other data (e.g., data inferred from existing data) may be needed to evaluate a precondition of a rule. Examples of input  for a quantitative precondition may be \u201care-four cars maximum\u201d and \u201care-five cars minimum.\u201d An example of input  for a qualitative precondition may be \u201cis-a auto car\u201d which expresses the fact that \u201cthe auto is a car.\u201d Another example of input  for a qualitative precondition may be \u201chas-types-of auto car truck cycle\u201d which expresses the fact that \u201cthe auto has types of car, truck and cycle.\u201d","In various embodiments, rules engine  may be a rules-based application, an inference engine, an expert system including a rules engine , an event management system or some other software configured to access and evaluate the hierarchy of rules . An evaluation cycle may include evaluation of a portion or all of hierarchy of rules . The rules engine  may use different methods to evaluate the hierarchy of rules . For example, the rules engine  may use forward-chaining, backward-chaining or some other semantic for evaluation of the rules.","Note that each rule, if the precondition of the rule is met, may produce output . The output  of the rule may include information and\/or other actions resulting from performing the action of the rule. The output  of a rule from a rules engine  may be determined by the input  to the rule and may include the original input  with possible modifications, additional input  and\/or some other action (e.g., send an email, create new output) as a result of performing the specified action of the rule. The action of the rule may represent the outcome (e.g., send an email, create new output) when the precondition of the rule is satisfied. At least a portion of output  of a rule may be input to one or more child rules of the rule. In addition to the output of each individual rule in the hierarchy of rules , evaluating the preconditions and performing the actions of all the rules in the hierarchy of rules  for which the preconditions are met may produce output  of the hierarchy of rules .","As an exemplary implementation, a hierarchy of rules  may be configured for use in an application for drawing various figures based upon input  including specifications for the figure. Evaluating the input  against the hierarchy of rules  may produce output  (e.g. a particular figure as specified by the input ). As another example, a hierarchy of rules  may be used in a code generation application, e.g. a J2EE application generator. In this exemplary application, the expected output  may include Java code and XML and database creation schema, and potentially other application components. Input  to the application may specify particulars of the code and other components to be produced as output .","The hierarchy of rules  may define an inheritance relationship between a parent rule and descendant rules of the parent rule. In an object-oriented language such as Java\u2122, an inheritance relationship between classes satisfies a generalization-specification relationship. As an example, consider the classes Mammal and Human. Mammal is a generalization of Human; therefore, it is the parent class. Human is a specification of Mammal; therefore, it is the child class. In one embodiment, rules may be implemented as Java classes, and hierarchy relationships of the rules are implemented as inheritance relationships. In this embodiment, in addition to the hierarchy relationship represented by an inheritance relationship, the generalization-specification nature of inheritance relationship is also maintained. As an example, the StickFigure rule and the UprightStickFigure rule as illustrated in  are joined by an inheritance relationship. Therefore, the rules also have a generalization-specification relationship.","When evaluating the hierarchy of rules, the rules engine  may need information indicating child rules, if any, of a rule being evaluated so that the rules engine  can evaluate the preconditions of the child rules if the precondition of the rule being evaluated is met. This information may be referred to as the hierarchical relationship of the rules in the hierarchy of rules . This hierarchical relationship information may also be used by the rules engine  to determine which rules to skip (i.e. ignore or not evaluate) if the precondition of a particular rule is not met. Embodiments may provide a mechanism for the rules engine  to determine the hierarchical relationship among the rules.","In one embodiment, hierarchical relationship information may be included in the rules themselves. A parent rule may include an indication (e.g. a reference, a name, a pointer, etc.) of its one or more child rules. If the precondition of the parent rule is not met, the rules engine  may access this information, if necessary, to \u201cignore\u201d the child rules (and thus the entire branch of the hierarchy of rules  beginning at the parent rule.) If the precondition of the parent rule is met, the rules engine  may access this information to continue evaluation of the branch at the indicated one or more child rules of the parent rule.","In another embodiment, a parent rule may not include indications of what rules descend from the parent rule. In general, using object classes (e.g. Java object classes), a class includes no indication of other classes derived from it. In this embodiment, the rules engine  may use introspection to determine the hierarchical relationship among the rules. Introspection may be defined as a process of inspecting classes for meta-information about the classes. Introspection may be performed statically or dynamically. In static introspection, the \u201craw\u201d class data (e.g. in a file) may be inspected to determine how classes in the class data are defined. In dynamic introspection, classes are inspected after being loaded. Thus, some embodiments of a rules engine  may use static introspection to determine a hierarchical relationship for a hierarchy of rules  to be evaluated before loading the rules. Other embodiments may use dynamic introspection to determine a hierarchical relationship for a hierarchy of rules  to be evaluated after loading the rules. In some embodiments, dynamic introspection (static or dynamic) may be used on a rule only if necessary. In this embodiment, for example, the root rule may be evaluated and, if the precondition of the root rule is met, introspection may be used to determine child rules of the root rule. Introspection may then be used on each child rule if the precondition of the child rule is met to determine child rules, if any of the child rule.","In one embodiment, a reflection application programming interface (API) may be used by a rules engine  to dynamically build the hierarchy of rules  for evaluation. A reflection API is an introspection facility for object classes. In one embodiment implemented with Java classes, the Java Reflection API may be used. In one embodiment, the reflection API may be called when an object (e.g., a root rule) extending from the rules engine  is instantiated. Instantiation of the object may build that instance of the object into a hierarchy of rules  with a root rule. The reflection API may be used to determine the hierarchical relationship among the rules, and thus to determine which rules in the hierarchy are to be evaluated or not evaluated based on the results of the outcome of the evaluation of the precondition of rules in the hierarchy of rules.","Note that other embodiments may use other methods to determine a hierarchical relationship among a plurality of rules.","In some embodiments, when determining the hierarchical relationship among the rules in the hierarchy of rules, the rules engine  may generate a representation of the hierarchical relationship. This representation may be in memory or alternatively may be written into a file. This representation may, for example, include pointers, names, references or other indications of rules and their relationships with other rules in the hierarchy. The rules engine  may then use this representation when evaluating the hierarchy of rules ","In one embodiment, the classes may be implemented as Java classes, and the hierarchy of rules  may extend from a Rule object class of the rules engine  that implements a Java IRule interface. The IRule interface may provide an interface or contract between a class and the user of the class. The IRule interface may be considered as the definition of a rule seen by its user. The rules engine may be the user of these rule classes. In this embodiment, since an application may include many rules and therefore many Java rule classes, for each of these classes to be considered a rule in the application, the class may implement the IRule interface. In one embodiment, the rule hierarchy relationships may be expressed as inheritance relationships between the rule classes. In this embodiment, the root rule (or the parent of the root rule) may implement the IRule interface. Since in this embodiment rules inherit properties of their parent rules, all child rules of the root rule (i.e. all other rules in the hierarchy of rules) inherit the IRule interface. Therefore, in this embodiment, the IRule interface may not be directly implemented by all of the rule classes. In one embodiment, the rules engine  may be implemented by the Rule object class and the root rule of the hierarchy of rules  may extend from the rules engine .","In one embodiment, the hierarchy of rules  may be external to the rules engine  and loaded into the rules engine  for evaluation. For example, the hierarchy of rules  may be configured as part of an application or may be in a file external to the rules engine  and accessed by the rules engine  via a rules engine interface. In one embodiment, a rules engine  may be a lightweight engine that may load and evaluate the rules , and then delegate interpretation and execution of the output  to the application external to the rules engine . In other embodiments, interpretation and execution of the output  may be executed directly by the rules engine .","In one embodiment, the hierarchy of rules  for an evaluation cycle may be selected based on current input  in memory. For example, a rule may be ready for evaluation if the rule has a precondition that matches the input  in memory. In one embodiment, pattern matching may be used to identify a common pattern between an input  and a rule. For example, inputs  may be matched to the hierarchy of rules  (e.g., search until a common pattern between an input and a rule is identified) to select rules for evaluation. The precondition may include a pattern that serves as a guide for determining if the precondition should be evaluated against the input . An example of a precondition of a rule is \u201c(is-a auto ?X)\u201d which matches the fact that \u201cis-a auto car\u201d. In other embodiments, a different approach (e.g., an algorithm) may be used to determine if preconditions of rules within the hierarchy of rules  are candidates for evaluation.","An evaluation cycle may end for various reasons. An evaluation cycle may stop, for example, when no more rules can be matched with input , when all rules in the hierarchy have been evaluated or skipped, or when the rules engine detects that additional input  has not changed from a previous evaluation cycle. As another example, an action of a rule may be configured to stop the evaluation cycle. As yet another example, evaluation may stop if an application external to the rules engine aborts evaluation of the rules. In one embodiment, if the action of a rule executes, then additional input  may be added to memory for evaluation and the added input  may be used to match more rules until an evaluation cycle ends.","An execution context may exist for each evaluation cycle of a rules engine . For example, more than one evaluation cycle may execute concurrently and share the same rules. In one embodiment, the preconditions of one or more descendant rules may be met, and thus more than one branch may be evaluated in the same evaluation cycle. For example, independent parent rules (e.g., child rules with the same parent rule) and descendant rules of each of the independent parent rules may be evaluated during the same evaluation cycle.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 4","b":["400","402"]},"In one embodiment, the method illustrated in  may be implemented in a computer application that accepts data input, evaluates preconditions of the plurality of rules against the data input, and generates output of evaluation and execution of the plurality of rules as specified by the data input. In one embodiment, the application may be a code generation application that generates computer-executable code as output. Other embodiments may generate other types of output.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 5","FIG. 4"],"b":["402","410","412","414"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 6","FIG. 2"]},"A rules engine may access a parent rule of a branch of a hierarchy of rules, as indicated at . In one embodiment, rules for a given evaluation cycle may be loaded into the rules engine for evaluation, as illustrated in . The precondition of the parent rule may be evaluated as indicated at . As indicated at , if the precondition of the rule is met, then the action of the rule may be performed, as indicated at . In one embodiment, if the action of the rule is executed, additional input may be added to memory and the added input may be used to evaluate descendent rules. As indicated at , if the precondition of the rule is not met, then evaluation of this branch of the hierarchy of rules may be done.","As indicated at , if there are child rules of the parent rule to be evaluated, then a next child rule may be determined as indicated at  and the process may return to  to evaluate the precondition of the child rule. Note that the child rule may be considered a parent rule of a branch of the hierarchy of rules starting at the child rule. If there are no more child rules to be evaluated, then evaluation of this branch of the hierarchy of rules may be done. In one embodiment using evaluation cycles, if there are no more rules to be evaluated in this evaluation cycle, then the evaluation cycle has been completed and a new execution cycle may begin, if necessary (e.g. if there are more rules to be evaluated).","Using the method of , the precondition of each descendant rule of a parent rule may be evaluated only if the precondition of the parent rule is met. Evaluating the precondition of a parent rule before evaluating the precondition of each child rule may preclude the action of the parent rule and descendant rules of the parent rule from being executed if the precondition of the parent rule is not met. Consequently, each branch of the hierarchy of rules may be evaluated only if the precondition of the parent rule for that branch is met. If the precondition of the parent rule of the branch is not met, the branch and child rules of the branch may be ignored during evaluation.","When the evaluation of the hierarchy of rules is complete, then output of evaluation and execution of the hierarchy of rules may be generated. For example, in a code generation application, an application and its components as specified by the input may be output. As another example, in figure drawing application, a figure as specified by the input may be produced (e.g. drawn on a display screen, dumped to a file, or printed a printer).","The hierarchy of rules may be modified to reflect changes made to rules within the hierarchy of rules. In one embodiment, the hierarchy of rules may be modified without requiring modification to an application implementing the hierarchy of rules. Modifications to the hierarchy of rules may include one or more of, but are not limited to, adding a new rule to the hierarchy, removing an existing rule from the hierarchy, modifying a precondition or action of a rule, or some other change that may modify the inheritance relationship among the rules. In one embodiment, rules may be modified at run-time. In some embodiments, the hierarchy of rules may be modified with a rules authoring tool. Rules may be modified within intermediate levels of the hierarchy of rules by changing, if necessary, an inheritance relationship of each child rule of the modified rule. In one embodiment, the inheritance relationship of each child rule implemented as an object class of the modified object class may be redefined to reflect the modification made to the hierarchy of rules. Leaf rules may be added to or deleted from the hierarchy of rules without modification to other rules within the hierarchy of rules.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 7","FIG. 2"],"b":["102","102","102","102","102","102","102","102","102","102","102","102","102","102","102"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 8","FIG. 2"],"b":["102","102","102","102","102","102","102","102","102","102","102","102","102"]},"In one embodiment, redefining the inheritance relationship between rules may include executing a refresh mechanism to rebuild the hierarchy of rules after a modification. For example, a refresh trigger may be executed at different intervals to detect if rules have been added and\/or removed from the hierarchy of rules. The hierarchy of rules may then be rebuilt to reflect the changes. In some embodiments, rules with new inheritance relationships within the hierarchy of rules may be rebuilt.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 9","FIG. 9"],"b":["101","780","772","771","775","778"]},"Client tier  may include a number of different clients A through N (e.g., device, system, user interface) communicating with business logic components  (e.g., servlets, server pages, beans) in the middle tier  via the Intemet\/Intranet . In one embodiment, a client  may be configured as a rules authoring tool to build, modify and\/or manage the hierarchy of rules . A client  may also provide interactive access for entering input used by the system. For example, a client  may include a Web browser (e.g., Internet Explorer) and facts for input into a rules engine may be collected via the Web browser.","The middle tier  may include a number of different application servers A through N. Some of the application components operating within the middle tier  may be configured to run within a component container  included in application server A. Some standard services (e.g., security, transaction management, state management, multi-threading) may be built into a platform and provided automatically to the application components via the container  and\/or application server A. The backend tier  may include a number of different systems such as database A through backend system N. Application components may communicate with other application components using different types of protocols such as Hyper Text Transfer Protocol Secure sockets (HTTPS), Java\u2122 Database Connectivity (JDBC), eXtensible Markup Language (XML) and\/or Simple Object Access Protocol (SOAP), among others.","Application logic of the computer system may be configured to include the hierarchy of rules  and business logic components A through N. The computer system may implement a rules-based system including a rules engine. In one embodiment, object classes may be configured as class files and packaged with business logic components  as part of the rules-based system. In one embodiment, the rules engine may be configured as a rules engine server running within component container . In one embodiment, the application may be implemented with Java\u2122 2 Platform, Enterprise Edition (J2EE\u2122) with the business logic components  configured as Enterprise JavaBeans (EJBs). The class files may be loaded by a virtual machine such as Java Virtual Machine (JVM).","The business logic components  and the hierarchy of rules  may be accessed during evaluation and execution of the hierarchy of rules. For example, the rules engine may invoke program methods of the business logic components  and access data (e.g., a collection of facts) provided by the business logic components . An inheritance relationship among the rules may provide a modular architecture for maintaining rules of the application. The hierarchy of rules  may be modified without changing the application. Rules may be removed and\/or added to the hierarchy of rules  with limited or no effect on other rules.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 10","b":["810","810","810"]},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 11","b":["930","930","920","930","930"]},"The exemplary application may be configured to draw stick figures based on information collected by the application. The information may include inputs received interactively. For example, input may be entered via a Web browser and provided to the application as a collection of facts. The facts may include data such as age of a user, stick figure walking habit (upright, crawl), pose (resting, standing) and other options such as antenna. In one embodiment, a single object may be configured to store the collection of facts.","The following is exemplary rule definition pseudocode for the stick figure application, and is not intended to be limiting:\n\n","As illustrated in , rules for an evaluation cycle may be loaded into a rules engine of the stick figure application. Thus, a portion or all of the above rules may be loaded into the rules engine. As an example, the input received via the Web browser may include \u201c10, upright, standing and antenna\u201d. The preconditions of the loaded rules may then be evaluated. The StickFigure rule is evaluated as the first rule of the loaded rules. The precondition of each child rule of a parent rule may be evaluated only if the precondition of the parent rule is met. Consequently, based on the exemplary collected facts, the precondition of the StickFigure rule is not met and child rules of the StickFigure rule are precluded from being evaluated. In addition, the action of the StickFigure rule is not executed. The evaluation cycle stops since no other rules are available for evaluation.","As another example, the input received via the Web browser may include \u201c3, upright and standing\u201d. UprightUprightThe preconditions of the loaded rules may then be evaluated. The StickFigure rule may then be evaluated as the first rule of the loaded rules. Upon evaluation, the precondition of the StickFigure rule is met since 3 is less than 5. Consequently, the action of the StickFigure rule may be performed; for example, a new drawing file may be opened. Child rules Uprightof the StickFigure rule (CrawlingStickFigure and UprightStickFigure) may then be evaluated. Upon evaluation, the precondition of the CrawlingStickFigure rule is not met since the upright walking habit for the figure was specified. The action of the CrawlingStickFigure rule is not performed, and all rules descending from CrawlingStickFigure are not evaluated. The precondition of the UprightStickFigure rule is met since the upright walking habit for the figure was specified. Consequently, the action of the UprightStickFigure rule may be performed; for example, the stick figure's head and body connected by the neck vertically may be drawn. Child rules Uprightof the UprightStickFigure rule (UprightResting, UprightStanding, and UprightWithAntenna) are evaluated. Upon evaluation, the preconditions of the UprightResting and UprightWithAntenna rule are not met since the standing pose for the figure was chosen. Consequently, actions of the UprightResting and UprightWithAntenna rules are not performed. Upon evaluation, the precondition of the UprightStanding rule is met since the standing pose for the figure was specified. Evaluation stops since no other rules are available for evaluation. The action of the UprightStanding rule may be performed; for example, the stick figure may be drawn in an upright standing position. Although not described in this example, the preconditions of one or more child rules may be met, and thus more than one branch of a hierarchy of rules may be evaluated.","The hierarchy of rules for the stick figure application may be modified. For example, the application may be extended to include additional rules such as the following rule for drawing the stick figure on a skateboard:\n\n","Rules may be modified to reflect the addition of a new input. For example, the new input may include \u201cskateboard\u201d and new rules may be added so that the stick figure for different poses may be drawn without changing the stick figure application. The new rules may be added as leaf child rules or added between existing rules as illustrated in .","The flow charts described herein represent exemplary embodiments of methods. The methods may be implemented in software, hardware, or a combination thereof. The order of method may be changed, and various elements may be added, reordered, combined, omitted, modified, etc.","Various modifications and changes may be made to the invention as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended that the following claims be interpreted to embrace all such modifications and changes and, accordingly, the specifications and drawings are to be regarded in an illustrative rather than a restrictive sense.","Various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a computer readable medium. Generally speaking, a computer readable medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc. as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
