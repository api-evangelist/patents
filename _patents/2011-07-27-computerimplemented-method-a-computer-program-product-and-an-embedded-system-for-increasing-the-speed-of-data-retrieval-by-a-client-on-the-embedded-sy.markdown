---
title: Computer-implemented method, a computer program product and an embedded system for increasing the speed of data retrieval by a client on the embedded system
abstract: The present description refers in particular to a computer-implemented method, a computer program product, and an embedded system for increasing the speed of data retrieval by a client on the embedded system. The embedded system executes a client and an intermediary, wherein the client and the intermediary are executed separately, and wherein the intermediary manages the storing component. A request may be received from the client at the intermediary, for a first content element of a document. The intermediary determines whether the first content element is stored in a storing component and when the first content element is stored in the storing component: retrieves the first content element from the storing component; and sends the first content element from the intermediary to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08667080&OS=08667080&RS=08667080
owner: Accenture Global Services Limited
number: 08667080
owner_city: Dublin
owner_country: IE
publication_date: 20110727
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["PRIORITY","SUMMARY","TECHNICAL DEFINITIONS","DETAILED DESCRIPTION"],"p":["This application claims foreign priority to European patent application serial number 10 425 263.0, filed on Jul. 29, 2010, and entitled \u201cA Computer-Implemented Method, A Computer Program Product and an Embedded System for Increasing the Speed of Data Retrieval by a Client on the Embedded System\u201d, which is incorporated by reference in its entirety.","The present application relates to a computer-implemented method, a computer program product and an embedded system for increasing the speed of data retrieval by a client on the embedded system.","According to an aspect, a computer-implemented method for increasing the speed of data retrieval by a client on an embedded system is provided. The embedded system may comprise a storing component. The method may comprise executing the client on the embedded system. The method may further comprise executing an intermediary on the embedded system, wherein the client and the intermediary are executed separately, and wherein the intermediary manages the storing component. The method may further comprise receiving a request, from the client at the intermediary, for a first content element of a document. Moreover, the method may comprise determining, by the intermediary, whether the first content element is stored in the storing component. When the first content element is stored in the storing component, the method may further comprise retrieving the first content element from the storing component, and sending the first content element from the intermediary to the client.","In some cases, when the first content element is not stored in the storing component, the method further comprises retrieving the first content element from a server, and","determining, by the intermediary, whether to store the first content element in the storing component based on a storing rule.","Moreover, the storing rule may include at least one the following: an expiration,","a string of a Uniform Resource Locator, and a content type.","Also, the embedded system may include a non-volatile memory. A firmware may be stored in the non-volatile memory as a binary image.","Furthermore, the storing component may be stored separately from the firmware.","In some embodiments, executing the client on the embedded system may further comprise copying the firmware from the non-volatile memory to a volatile memory. Copying the firmware to the volatile memory may comprise copying the entire contents of the non-volatile memory into the volatile memory.","In addition, the client and the intermediary may be executed as separate processes.","Moreover, the document may include a second content element. The first content element may be infrequently modified. Furthermore, the second content element may be frequently modified. Accordingly, the method may further comprise storing the first content element in the storing component. Also, the method may further comprise determining not to store the second content element in the storing component.","In some cases, the embedded system is a set-top box. Also, the server may include software for delivering Internet Protocol Television. The software may be referred to as IPTV middleware.","The client may include a web browser.","In addition, the intermediary may be implemented as an external component of the client. More specifically, the intermediary may be implemented as a plugin of the client.","According to another aspect, a computer program product comprising computer-readable instructions is provided. The computer readable instructions, when loaded and executed on an embedded system, cause the system to perform operations according to the method described above.","According to yet another aspect, an embedded system is provided. The embedded system may comprise a client. The embedded system may further comprise a storing component operable to store data. The embedded system may also comprise an intermediary. The intermediary may be operable to manage the storing component. The intermediary may be further operable to receive a request, from the client, for a first content element of a document. The intermediary may also be operable to determine whether the first content element is in the storing component. When the first content element is in the storing component, the intermediary may be further operable to retrieve the first content element from the storing component, and send the first content element to the client. The client and the intermediary may be operable to be executed separately.","An \u201cembedded system\u201d may be understood as a computer system or a device designed to perform one or a few dedicated functions. The embedded system may be contrasted with a general purpose computer system, e.g. a desktop PC.","A \u201cset-top box\u201d (STB), also known as a digibox, a set-top unit or an integrated receiver\/decoder (IRD), is an example of the embedded system. The STB may be operable to connect to a display device (e.g. a television or a computer) and an external signal source (e.g. a content server). The STB may be operable to convert a signal received from the external signal source into content which is then displayed on the display device.","An \u201cintegrated circuit\u201d (also known as a microcircuit, microchip, or chip) may refer to a miniaturized electronic circuit that has been manufactured in the surface of a thin substrate of semiconductor material.","A \u201cdigital signal processor\u201d (DSP) may be understood as a specialized microprocessor optimized for certain operations, possibly including the processing (e.g. conversion) of signals. In comparison to a general purpose microprocessor, a DSP may have reduced hardware complexity, reduced functionality, lower cost, better performance, and reduced power consumption.","A \u201csystem on a chip\u201d (SoC) may refer to the integration of the storing components of a computer system on a single integrated circuit. Extra memory and\/or peripherals may be needed in order for the SoC to achieve full functionality. The SoC may include the DSP.","A \u201cDigital Media Processor\u201d (DMP), also referred to as a media processor, may be understood as an SoC which is designed to process a stream of data (e.g. media such as video or audio) in real time (or near real time). The DMP may include one or more of the following: a DSP, a memory interface, a media interface, and an audio\/video accelerator. The DMP may be capable of decoding, transcoding (converting from one format to another), encoding, and transrating (scaling from a higher to a lower bit rate) various types of media (e.g. images) and media streams.","A \u201cstring\u201d may be understood as a finite sequence of characters, where each character is a unit of information such as a symbol. \u201cText\u201d may include one or more strings.","A \u201ccache\u201d may refer to a storing component that stores data so that future requests for the data can be served faster.","\u201cMobile code\u201d may refer to software transferred between systems, possibly executed on a local system without an explicit trigger for installation or execution by the recipient. Examples of mobile code include JavaScript, VBScript, Java applets, and ActiveX controls.","\u201cInternet Protocol television\u201d (IPTV) may be understood as a system through which digital television service is delivered using the architecture and network methods of the Internet Protocol (IP) suite over a packet switched network infrastructure. IPTV may be delivered using an STB.","A \u201cproxy\u201d may refer to software that acts as an intermediary for requests from a client seeking resources (e.g. a file or a web page).","\u201cStatic\u201d content elements (also referred to as static contents) may refer to content elements that are modified infrequently. For example, static content elements may be modified less than once per month, less than once every two months, less than once per year, or even less frequently.","\u201cDynamic\u201d content elements (also referred to as dynamic contents) may refer to content elements that are modified frequently. For example, dynamic content elements may be modified more than once per month, more than twice per month, more than once per week, or even more frequently. In general, dynamic content elements are modified more frequently than static content elements.","Dynamic content elements may be generated using server logic. Examples of server logic that can be used to generate dynamic content elements are Common Gateway Interface (CGI), PHP: Hypertext Preprocessor (PHP), JavaServer Pages (JSP), and Active Server Pages (ASP).","A \u201cprocess\u201d may be understood as an instance of an executing program. The process may include current values of the program counter (containing the memory address of the next instruction to be fetched), register values and variables. The process may manage a set of resources and have its own address space, as well as signal handlers and accounting information.","A \u201cthread\u201d is also referred to as a thread of control, a thread of execution, a miniprocess or a lightweight process. Multiple threads may exist within a process. The thread may share an address space and other resources of the process with other threads. Each thread generally has its own program counter, register values, a stack (including input parameters, local variables and temporary variables) and state.","A \u201cfiber\u201d can be created by allocating a stack and a data structure for storing register values and data associated with the fiber. A fiber may be understood as similar to a thread. Switching between threads may require entering and exiting the operating system (OS) kernel. However, fibers may be cooperatively scheduled, and the operating system kernel has no knowledge of fibers.","A \u201cplugin\u201d may be understood as a module or application used to realize a specific function or to increase the performance of an existing function. This may be achieved by implementing the plugin in a low level programming language (i.e. relatively close to machine level) such as C.","Processes, threads and fibers may be further understood with reference to by Andrew S. Tanenbaum, 3ed., 2009.","In the following text, a detailed description of examples will be given with reference to the drawings. It should be understood that various modifications to the examples may be made. In particular, elements of one example may be combined and used in other examples to form new examples.","The subject matter described in this specification can be implemented as a method or on a device, possibly in the form of one or more computer program products. The subject matter described in the specification can be implemented in a data signal or on a machine readable medium, where the medium is embodied in one or more information carriers, such as a semiconductor memory, or a hard disk. Such computer program products may cause a data processing apparatus to perform one or more operations described in the specification.","In addition, subject matter described in the specification can also be implemented as a system including a processor, and a memory coupled to the processor. The memory may encode one or more programs to cause the processor to perform one or more of the methods described in the specification. Further subject matter described in the specification can be implemented using various machines.","Details of one or more implementations are set forth in the exemplary drawings and description below. Other features will be apparent from the description, the drawings, and from the claims.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 1","b":["100","102","102","102","102"]},"Some implementations of the embedded system  include a first non-volatile memory, such as a flash memory . Alternatively, the embedded system  may include another form of non-volatile memory. The first non-volatile memory of the embedded system  may be electronically addressable. In some cases, the first non-volatile memory of the embedded system  may be another form of solid-state memory, such as a Silicon-Oxide-Nitride-Oxide-Silicon (SONOS) memory, or a non-volatile Random Access Memory. Other types of non-volatile memory are also possible.","The flash memory  may be fixed to the embedded system . In particular, the flash memory  may be built into a chip and the chip may be wired to the embedded system . The contents of the flash memory  may be referred to as firmware.","In some cases, the firmware stored by the flash memory  may include an operating system, e.g. Linux with kernel version 2.6, for the embedded system . The firmware may also include a client (e.g. as depicted in ), and basic user interface components that can be used to build a user interface (see ) even if the client is not connected to a server (e.g. as depicted in ).","According to one example, the embedded system  may include a second non-volatile memory (not depicted). The second non-volatile memory may be implemented as a hard drive, e.g. a Universal Serial Bus (USB) hard drive.","The embedded system  may include minimal hardware, e.g. hardware required to execute basic networking tasks and no other hardware, in order to lower costs. Accordingly, programs on the embedded system , e.g. the client and the proxy depicted in , may be implemented in a low level programming language such as C for performance reasons. In this context, \u201clow level\u201d may be understood to refer to a programming language that requires more knowledge of underlying hardware and (generally) more coding hours than a higher level programming language (e.g. Java). Moreover, it may be difficult to recover from errors in a particular program on the embedded system . For example, memory leaks may have a particularly heavy impact on the embedded system  due to the limited capacity of the RAM . Therefore, extensive debugging and testing of programs deployed on the embedded system  may be necessary. Thus, programs that might be relatively easy to develop on a general purpose computer may be difficult to develop for the embedded system .","The embedded system  may be implemented as an STB or as a mobile device. For example, the embedded system  may be implemented on a smart phone or a mobile computer with Linux OS or Android OS. Specifically, the embedded system  may be implemented as a Nokia N900, an OpenMoko Neo Free Runner, an HTC Hero or a Motorola Droid. Other implementations are also possible.","Moreover, the contents of the flash memory  (e.g. operating system and applications) may be stored on the embedded system  in a monolithic approach, i.e. as a single closed block. For example, the contents of the flash memory  may be stored as a binary image or as a compressed binary image. In other words, the flash memory  may contain a binary firmware image or a compressed binary firmware image. This may reduce the amount of flash memory required on the embedded system , and thus reduce the cost of producing the embedded system .","In addition, the use of the binary image on the embedded system  may be advantageous for a manufacturer or maintainer of the embedded system . For example, use of the binary image may make it simpler for a user to update the embedded system .","The binary firmware image may contain the complete contents and structure representing a storage medium, e.g. the flash memory . The binary image may be stored in a single file. According to a conventional technique, the contents of the firmware may include static content elements. The storage of static content elements in the firmware may be easy and simple to implement. Moreover, this technique may allow static content elements to be updated and manipulated without requiring a software component (e.g. the proxy depicted in ) to manage the static content elements.","Examples of static content elements include elements of the native GUI of the embedded system . In other words, it is possible that static content elements are not associated with a particular application","However, storing static content elements in the flash memory  as part of the binary firmware image may have the effect that the only way to update the static content elements is to perform a full firmware upgrade.","It may be difficult or undesirable to perform the full firmware upgrade in order to replace content elements, e.g. static content elements, stored in the firmware of the embedded system . The full firmware upgrade may result in the use of more bandwidth, possible errors may have more severe consequences, and the full firmware upgrade may disrupt operations of the embedded system . For example, downloading the full firmware in order to update one or more static content elements may require more bandwidth than only downloading the static content elements to be updated. Furthermore, it is possible that the full firmware upgrade can fail, causing the embedded system  to become unusable. Also, the full firmware upgrade often causes an interruption of operation of the embedded system , since reboot of the embedded system  is normally required.","The embedded system  may further include a volatile memory, such as random access memory (RAM) . Furthermore, the embedded system  may include a Digital Video Broadcasting-Terrestrial (DVB-T) interface .","Also, the embedded system  may include an interface, such as a USB port . The USB port  may be operable to connect USB devices to the embedded system .","The embedded system  may also include a means of access connectable to an external network, such as an Ethernet port . The embedded system  may also support wireless access, e.g. by means of wireless fidelity (WiFi). The external network may provide access to an external signal source.","In addition, the embedded system  may include a reset button  that can be used to return the embedded system  to a standard or default configuration. The embedded system  may further include a power connector  that can be used to connect the embedded system  to a power source.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 2","b":["100","202"]},"The server  may be capable of sending a signal, such as an IPTV signal, to a client . The server  may include an IPTV middleware, i.e. software packages associated with delivering an IPTV service.","It may be possible to execute the client  on the embedded system . The client  may be implemented as a web browser (e.g. Microsoft Internet Explorer, Mozilla Firefox, Opera, Fresco), a custom-made graphical user interface, or some other form of user interface. The client  may be stored in the firmware of the flash memory . The client  may be capable of displaying documents, e.g. web pages. The documents may be made up of content elements. Examples of content elements are images in various formats, e.g. Joint Photographic Experts Group (JPG), Graphics Interchange Format (GIF), Portable Network Graphics (PNG), and markup language text, e.g. Hypertext Markup Language (HTML), Extensible Markup Language (XML). Content elements may also include presentation semantics, such as cascading style sheets (CSS), and mobile code, e.g. JavaScript.","The client  may be operable to display images and markup language text according to the presentation semantics. The client  may also be capable of executing the mobile code.","In addition, the client  can be configured to run various applications. For example, the client  can be configured to execute a video on demand catalog, which enables a user to browse categories of videos, select a video for viewing and retrieve information about the video. The client  may also execute an electronic program guide. The electronic program guide enables a user to browse television channels, view a schedule of programs for each channel and retrieve information about TV programs (e.g. start time, end time, description).","In some cases, in order to minimize costs, the embedded system  is manufactured with limited resources. For example, the embedded system  may include a 300 MHz CPU, 128 MB RAM, and 32 MB flash. Moreover, it may not be feasible to use modern software to provide a user interface on the embedded system. Accordingly, the client  of the embedded system may be implemented using a web browser that is 4 to 10 years old and does not include certain functionality. For example, the client  of the embedded system may not support Java applets or ActiveX controls.","Furthermore, it may be possible to execute an intermediary on the embedded system . The intermediary may be implemented as a proxy . The proxy  may be executed separately from the client . Implementing the proxy  as an external component may have the advantage that it is not necessary to integrate the proxy  with the client .","In some embodiments, the proxy  may be implemented as an external component of the client . For example, the client  may be implemented as a browser and the proxy  may be implemented as a browser plugin. In this case, the proxy  operates within the memory space of the client . Thus, the proxy  may communicate with the client  using function calls rather than HTTP. Communication using function calls may have the effect of improving performance.","Alternatively, the client  and the proxy  are executed as separate processes. In this context, a process may be understood as an instance of executing program. For example, the client  is a first executing program and the proxy  is a second executing program. The client  and the proxy  can also be executed as mini processes, e.g. threads or fibers.","Thus, executing the intermediary separately from the client  may be achieved by implementing the proxy  as an external component of the client , or by implementing the proxy  as a separate process. Other implementations are also possible.","The proxy  may include a management component. The management component may be capable of managing a storing component. In some cases, the management component is implemented as a cache manager . The storing component may be implemented as a cache . The size of the cache  may be limited due to limited resources of the embedded system . The client  may interact with the proxy  in order to access data in the cache . Although the cache  is depicted separately from the proxy , the cache  may be included as part of the proxy .","The proxy  may also include an interface, such as a Hypertext Transfer Protocol (HTTP) interface . The client  may communicate with the proxy  using the HTTP interface . Adding the proxy  to the embedded system  may have the effect of enhancing the performance of the embedded system . For example, bandwidth requirements between the embedded system  and the server  may be reduced.","The proxy  may use a signaling mechanism in order to manage and generate events. The events may be used by other applications. For example, the proxy  may generate an event when a preset maximum cache size is reached, i.e. when a filesystem usage limit has been reached. The proxy  may also generate an event when CPU utilization reaches a preset threshold, e.g. due to execution of an operation.","The embedded system  may also include an HTTP core application programming interface (API) . The client  and the proxy  may use the HTTP core API  to communicate with the server . For example, the client  may communicate with the server  in order to select an IPTV program to watch.","In some cases, the client  may communicate with the proxy  and the proxy  communicates with the server using the HTTP Core API . In other cases, the client  may interact with the HTTP core API  in order to communicate with the server directly.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 3","b":"300"},"The client  may be capable of displaying the user interface . The user interface  may include static images , e.g. a background image in JPG format. Also, the user interface  may include static layout  in the form of presentation semantics. In particular, the static layout  may determine a style and a position of static and dynamic content elements in the user interface .","In addition, the user interface  may include mobile code . For example, the mobile code  may be embedded in a document downloaded from the server  to the client , and may be executed by the client .","The static images , the static layout , and the mobile code  may be understood as static content elements that are infrequently modified. According to conventional techniques, the static content elements may be stored in the firmware with the client . Storing the static content elements in the firmware may be simple and easy to implement. Moreover, according to conventional techniques, the proxy  is not required to be executed on the embedded system . It may be particularly difficult and time consuming to write programs (e.g. the proxy ) for the embedded system  since the embedded system  may require programs to be particularly stable and efficient (particularly in comparison to programs on a general purpose computer). Thus, programs for the embedded system  may require extensive testing and debugging, as well as the use of a low level programming language such as C or assembly language.","However, in accordance with some embodiments of the invention, the cache  may be stored separately from the firmware, i.e. not in the flash memory . For example, the cache  may be stored in the second non-volatile memory, separate from the flash memory . Storing the cache  in a non-volatile memory could be advantageous since the contents of the cache  would be available after disconnecting the power connector  from the power source.","Content elements, e.g. static content elements, may be stored in the cache . Storing content elements in the cache , i.e. separate from the firmware, leads to the technical effect that the content elements can be updated without performing the full firmware upgrade.","A conventional embedded system interacts with a conventional server in order to download content elements, e.g. static content elements, and store the downloaded content elements in a volatile memory. However, this may lead to failure of the conventional server in certain situations, e.g. when many embedded systems start up and attempt to download content elements at the same time. For example, such a failure (also referred to as a chain reaction failure) could occur in the case of an upgrade of many embedded systems or in the case of a power outage affecting many embedded systems.","Storing the content elements in the cache , where the cache  is stored in the non-volatile memory (e.g. the second non-volatile memory) of the embedded system , leads to the technical effect that some or all failures due to many embedded systems starting up at the same time (i.e. chain reaction failures) can be avoided. For example, if there is a power outage that causes the embedded system  to restart, the client  may be able to retrieve substantial portions of the user interface  (e.g. static content elements) by means of the proxy . Similarly, other embedded systems configured according to the present application may be able to retrieve static content elements from corresponding proxies. The reduction in HTTP requests to the server  resulting from the retrieval of static content elements from proxies may prevent the server  from failing.","Also, use of the proxy  may reduce the data the server  is required to transmit, thereby reducing the load on the server . Moreover, use of the proxy  may result in a reduced boot time for the embedded system  and a faster display of the user interface .","Dynamic images  may also be part of user interface . Furthermore, the user interface  may include dynamic text . Dynamic images  and dynamic text  may be understood as dynamic content elements. Examples of dynamic images in the context of a video on demand catalog application are film titles and film posters, where a film poster is a visual advertisement of a movie that may illustrate a scene from the movie. Examples of dynamic text, also in the context of a video on demand catalog application, are a description of a film and a cast of a film.","Determining whether a specific content element is a dynamic content element or a static content element may be based on an analysis of how often the specific content element has been modified over a time interval. A storing rule (e.g. a filter) may be created if the specific content element is determined to be a static content element. The storing rule may be based on a type of the specific content element and\/or a URL of an HTTP request. Content types may refer to the composition of a user interface on the embedded system . Exemplary content types include JPEG images (image\/jpeg), gif images (image\/gif), html pages (text\/html), cascading style sheets (text\/css), and javascript code (application\/javascript).","The storing rule may also include an expiration, i.e. an indication as to how long the specific content element will be stored. Storing rules may be maintained and implemented by the cache manager .",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 4","b":["204","100"]},"According to the method depicted, the client  and the proxy  are executed on the embedded system  at step S. For example, the client  and the proxy  can be executed automatically. Furthermore, the client  and the proxy  may be executed separately, e.g. as separate processes.","Although steps S to S refer to HTTP requests, the use of other protocols is also possible, e.g. file transfer protocol or real time streaming protocol. Minor changes to the method described may be necessary in order to use the other protocols.","At step S, the client  may request a first content element of a document (also referred to as a component of a page). For example, the document may be requested in response to user input and the request may be processed beginning with the first content element of the document. The first content element may be one of multiple content elements in the document. Alternatively, the first content element may be the only content element in the document. According to some embodiments of the present invention, the document contains multiple content elements and the client  performs an HTTP request for each content element. The HTTP requests may occur in series or in parallel.","Moreover, at step S, the client  sends a request for the first content element of the document to the proxy . For example, the client  sends each HTTP request described in step S to the HTTP interface . The proxy  may analyze (e.g. parse) each HTTP request.","At step S, the proxy  may determine whether the content element identified in an HTTP request sent in step S is stored in the cache . For example, the HTTP request may identify the first content element. In some cases, a content element is stored in the cache  when the content element is received.","Step S and step S are two alternatives that can be taken depending on the outcome of step S. When the first content element is stored in the cache , step S can be carried out. When the first content element is not stored in the cache , then step S can be carried out. When step S is carried out, steps S, S, and optionally, step S, can also be performed.","Accordingly, when the first content element is stored in the cache , the proxy  may retrieve the first content element from the cache  at step S. Subsequently, the proxy  may send the first content element to the client  at step S.","Alternatively, when the first content element is not stored in the cache , the proxy  may request the first content element from the server  at step S. For example, the proxy  may make an HTTP request to the server . The server  may respond to the proxy  at step S. At step S, a determination is made as to whether the first content element matches at least one storing rule. In other words, step S involves determining whether to store the first content element based on the storing rule. A caching rule is an example of the storing rule.","Either step S or step S may be performed after step S, depending on the outcome of step S. For example, when the first content element matches the storing rule, the first content element may be stored in the cache  at step S. When the first content element does not match the storing rule, step S may be carried out after step S.","According to a specific example, an exemplary HTTP request made at step S could include the following uniform resource locator (URL): \u201chttp:\/\/iptv-provider\/GUI\/images\/background.png.\u201d.","For example, storing rule A is as follows:",{"@attributes":{"id":"p-0100","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<rule>"]},{"entry":[{},"<filter>\/GUI\/images<\/filter>"]},{"entry":[{},"<expiration>43200<\/expiration>"]},{"entry":[{},"<\/rule>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"According to storing rule A, if the HTTP request includes a URL with the string \u201c\/GUI\/images\u201d, such as the URL of the exemplary HTTP request above, the proxy  may do the following:\n\n","Also, according to storing rule A, the content element (e.g. the background.png image referred to by the URL) may be stored in the cache  for 43,200 minutes (30 days). In other words, the content element has an expiration time of 43,200 minutes. If the client  requests the same URL in the future, the proxy  retrieves the background.png image from the cache .","In a further example, storing rule B is as follows.",{"@attributes":{"id":"p-0104","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<rule>"]},{"entry":[{},"<content-type-filter>image\/jpeg<\/content-type-filter >"]},{"entry":[{},"<expiration>43200<\/expiration>"]},{"entry":[{},"<\/rule>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Similar to storing rule A, according to storing rule B, if the HTTP request includes a content-type field specifying \u201cimage\/jpeg\u201d, the proxy  may do the following:\n\n","In another example, storing rule C is as follows:",{"@attributes":{"id":"p-0107","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<or-condition>"]},{"entry":[{},"<rule>"]},{"entry":[{},"<content-type-filter>image\/jpeg<\/content-type-filter >"]},{"entry":[{},"<expiration>43200<\/expiration>"]},{"entry":[{},"<\/rule>"]},{"entry":[{},"<rule>"]},{"entry":[{},"<content-type-filter>image\/gif<\/content-type-filter >"]},{"entry":[{},"<expiration>43200<\/expiration>"]},{"entry":[{},"<\/rule>"]},{"entry":[{},"<\/or-condition>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Storing rule C includes an OR expression, such that there rule matches if the content element is a JPEG image or a GIF image.","In a rule defined using an OR expression, the entire rule matches if at least one sub-rule inside the OR rule matches. Moreover, if a rule is defined using an AND expression, the entire rule matches if all the sub-rules inside the AND expression match. In some cases (e.g. storing rule C), each sub-rule is defined using the <rule> <\/rule> tags. Other logical expressions (e.g. XOR) are also possible.","Thus, in some cases, when the one or more filter expression(s) of a storing rule match an HTTP request, the one or more content element(s) of the HTTP request are stored according to the expiration time.","Different storing rules can be implemented for different content elements depending upon expiration policies associated with content elements. In some cases, storing rules are implemented for static content elements and not for dynamic content elements. In other words, storing rules might be applicable to infrequently modified content elements, whereas storing rules might not be applicable to frequently modified content elements. For example, the background.png image referred to in the URL of the exemplary HTTP request above may be an infrequently modified content element. The document may also contain a second content element that is frequently modified. It is possible that there is no storing rule corresponding to the second content element. Accordingly, at step S, a determination is made not to store the second content element in the cache .","Advantageously, storing content elements in the cache  may significantly improve the performance of the client , since content elements stored in the cache  do not need to be downloaded from the server .","At step S, responses to the HTTP requests referred to in step S may be collected by the client . The responses may be assembled and rendered as a coherent user interface document, i.e. the user interface .","Implementing the method of  may result in all static contents of the user interface  being stored in the cache . Alternatively, a portion of the static contents may be stored in the cache  due to limitations in the storage capacity of the cache .","By means of the proxy  in the cache , processing of content elements on the embedded system  can be accelerated. Content elements, e.g. static content elements, can be retrieved more quickly from the cache  in comparison to the server . Moreover, because proxy  is executed separately from the client , there is no need to integrate the client  with the proxy . Also, by distinguishing between static content elements (i.e. infrequently modified content elements) and dynamic content elements (i.e. frequently modified content elements) the limited capacity of the cache  can be used in an advantageous way. In addition, by separating the cache  from the firmware of the embedded system , content elements stored in the cache  can be updated without upgrading the firmware."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
