---
title: Method and apparatus for adapting and hosting legacy user interface controls
abstract: A method and apparatus for adapting and hosting legacy user interface controls is provided. Legacy user interface controls are exposed within a new window manager as native user interface objects. A bridge between a hosted legacy user interface control and the legacy window manager intercepts messages intended for the hosted user interface control. The messages are filtered to determine if they should be passed to the new window manager. If a message is to be forwarded, the message is forwarded to a root Visual Gadget in the new window manager. The message is processed and routed down the window tree to an adapter control for hosting the legacy user interface control. The adapter control processes the message and routes the message to any listener objects attached to the adapter. If the message has not been completely handled, the message is “bubbled” up the window tree to the parent objects of the adapter control for additional processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06961945&OS=06961945&RS=06961945
owner: Microsoft Corporation
number: 06961945
owner_city: Redmond
owner_country: US
publication_date: 20010620
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims the benefit of U.S. provisional application No. 60\/244,384, filed Oct. 30, 2000, which is expressly incorporated herein by reference.","This invention generally relates to the field of computing devices with graphical user interfaces. More specifically, this invention relates to hosting legacy user interface controls within new window managers.","Graphical user interfaces typically employ some form of a window manager to organize and render windows. Window managers commonly utilize a window tree to organize windows, their child windows, and other user interface controls to be displayed within the window such as buttons, menus, etc. To display the windows on a display screen, a window manager will parse the window tree and render the windows and other user interface objects in memory. The memory can then be displayed on a video screen. A window manager may also be responsible for \u201chit-testing\u201d input to determine in which window input was received. For instance, when a user moves a mouse cursor into a window and \u201cclicks,\u201d the window manager must determine the window in which the click was made and generate a message to that window.","When creating an entirely new window manager, it is typically necessary to create new user interface controls, otherwise known as visual objects, that can be utilized by the window manager. For instance, it may be necessary to build new buttons, pull-down menus, and other visual objects that are compatible with the new window manager. However, creating an entirely new set of user interface controls can be extremely time consuming and difficult. Moreover, creating an entirely new set of user interface controls for a new window manager seems wasteful considering that there are thousands of user interface controls available for use with previous window managers.","Methods exist for hosting legacy user interface controls within new window managers. However, these previous methods suffer from several serious drawbacks. In particular, these previous methods are unable to handle messages intended for the legacy user interface controls without requiring window sub-classing or modifying the user interface message loop to pre-translate messages. Moreover, existing methods either require changing sources of the existing controls, or severely limit the integration of the existing controls. Requiring the sources to be changed prevents using existing controls without modification, a severe problem for the thousands of existing user interface controls available in the market today. Another previous solution is to expose the existing user interface control as a \u201cforeign\u201d object. This, however, requires other controls to treat that object with special knowledge and calling different application programming interfaces (\u201cAPIs\u201d). Accordingly, these previous methods are unable to handle messages intended for legacy user interface controls in a high-performance and robust manner.","Therefore, in light of the above, there is a need for a method and apparatus for adapting and hosting legacy user interface controls that can utilize a legacy user interface control in a new window manager without requiring window sub-classing or modifying the message loop to pre-translate messages. There is a further need for a method and apparatus for adapting and hosting legacy user interface controls that can utilize legacy user interface controls in a new window manager without requiring modification of the controls or treating the controls differently than native controls.","The present invention solves the above-problems by providing a method and apparatus for adapting and hosting legacy user interface controls in a new window manager. Generally described, the present invention exposes legacy user interface controls, such as window handles (\u201cHWNDs\u201d), as native user interface controls, or Visual Gadgets, to the new window manager. The present invention also hooks into the messaging infrastructure of the legacy window manager and intercepts messages intended for the hosted legacy user interface control. The messages can then be provided to the hosted legacy user interface control and other native Visual Gadgets.","Additionally, the present invention allows using existing user interface controls in a new window manager, without requiring source modification of the controls and without requiring other controls to treat the existing controls specially. It also allows existing controls to be identified as being \u201cadapted,\u201d without requiring special handling for handling other existing controls. By not requiring special handling of individual \u201cforeign\u201d object types, new object types can be added without requiring modifications in the legacy window manager. Also, existing adapter implementations can be modified without requiring modifications in either the legacy window manager or requiring modifications on existing controls.","More specifically described, the present invention exposes legacy user interface controls in a new window manager by exposing the legacy user interface controls as native Visual Gadgets. The present invention also provides a bridge between a hosted legacy user interface control and the legacy window manager. The bridge intercepts messages intended for the hosted user interface control. The messages are filtered to determine if they should be passed to the new window manager. If a message is to be passed, the message is forwarded to the root Visual Gadget in the new window manager. The message is processed and routed down the window tree to an adapter control for hosting the legacy user interface control. The adapter control processes the message and routes the message to any listener objects attached to the adapter. The new window manager may also clip the hosted visual gadget. If the message has not been completely handled, the message is \u201cbubbled\u201d up the window tree to the parent objects of the adapter control for additional processing.","The present invention also provides a method, computer-controlled apparatus, and a computer-readable medium for adapting and hosting legacy user interface controls.","The present invention is directed to a method and apparatus for adapting and hosting legacy user interface controls. Aspects of the invention may be embodied in a computer operating system capable of providing a graphical user interface. Referring now to the figures, in which like numerals represent like elements, an actual embodiment of the present invention will be described.","Referring now to , an illustrative personal computer  for implementing aspects of the present invention will be described. The personal computer  comprises a conventional personal computer, including a processing unit , a system memory , and a system bus  that couples the system memory to the processing unit . The system memory  includes a read only memory (\u201cROM\u201d)  and a random access memory (\u201cRAM\u201d) . A basic input\/output system  (\u201cBIOS\u201d) containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive , a magnetic disk drive , e.g., to read from or write to a removable disk , and an optical disk drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media such as a Digital Versatile Disk (\u201cDVD\u201d).","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage for the personal computer . Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD-ROM disk, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed by the personal computer . By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid-state memory technology, CD-ROM, digital versatile disks (\u201cDVD\u201d) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the personal computer .","A number of program modules may be stored in the drives and RAM , including an operating system , such as Windows 98\u00ae, Windows 2000\u00ae, or Windows NT\u00ae from Microsoft\u00ae Corporation. As will be described in greater detail below, aspects of the present invention are implemented within the operating system  in the actual embodiment of the present invention described herein.","A user may enter commands and information into the personal computer  through input devices such as a keyboard  or a mouse . Other input devices (not shown) may include a microphone, touchpad, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus , but may be connected by other interfaces, such as a game port or a universal serial bus (\u201cUSB\u201d). A monitor  or other type of display device is also connected to the system bus  via an display interface, such as a video adapter . In addition to the monitor, a personal computer  may include other peripheral output devices, such as speakers  connected through an audio adapter  or a printer (not shown).","As described briefly above, the personal computer  may operate in a networked environment using logical connections to one or more remote computers through the Internet . The personal computer  may connect to the Internet  through a network interface . Alternatively, the personal computer  may include a modem  and use an Internet Service Provider (\u201cISP\u201d)  to establish communications with the Internet . The modem , which may be internal or external, is connected to the system bus  via the serial port interface . It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the personal computer  and the Internet  may be used.","Referring now to , additional aspects of the operating system  will be described. The operating system  comprises a number of controls for executing applications  and communicating with the hardware that comprises the personal computer . At the lowest level, the operating system  comprises device drivers  for communicating with the hardware . The operating system  also comprises a virtual machine manager , an installable file system manager , and a configuration manager . Each of these managers may store information regarding the state of the operating system  and the hardware  in a registry . The operating system  also provides a shell , which includes user interface tools. An operating system core  is also provided which provides low-level functionality and hardware interfaces. According to the actual embodiment of the present invention described herein, aspects of the present invention are implemented in the operating system core . The operating system core  is described in greater detail below with respect to .","Turning now to , an illustrative operating system core  will be described. As mentioned above, the Windows\u00ae operating system provides an illustrative operating environment for the actual embodiment of the present invention described herein. The operating system core  of the Windows\u00ae operating system comprises three main controls: the kernel ; the graphical device interface (\u201cGDI\u201d) ; and the User component . The GDI  is a graphical system that draws graphic primitives, manipulates bitmaps, and interacts with device-independent graphics drivers, including those for display and printer output devices. The kernel  provides base operating system functionality, including file I\/O services, virtual memory management, and task scheduling. When a user wants to start an application, the kernel  loads the executable (\u201cEXE\u201d) and dynamically linked library (\u201cDLL\u201d) files for the application. The kernel  also provides exception handling, allocates virtual memory, resolves import references, and supports demand paging for the application. As an application runs, the kernel  schedules and runs threads of each process owned by an application.","The User component  manages input from a keyboard, mouse, and other input devices and output to the user interface (windows, icons, menus, and so on). The User component  also manages interaction with the sound driver, timer, and communications ports. The User component  uses an asynchronous input model for all input to the system and applications. As the various input devices generate interrupts, an interrupt handler converts the interrupts to messages and sends the messages to a raw input thread area, which, in turn, passes each message to the appropriate message queue. Each Win32-based thread can have its own message queue.","In order to manage the output to the user interface, the User component  maintains a window manager . The window manager  comprises an executable software component for keeping track of visible windows and other user interface controls, and rendering these controls into video memory. Because the window manager  comprises an existing portion of the Microsoft Windows\u00ae operating system, the window manager may also be referred to herein as a legacy window manager. Also, although the invention is described as implemented within the Windows\u00ae operating system, those skilled in the art should appreciate that the present invention may be advantageously implemented within any operating system that utilizes a windowing graphical user interface.","As shown in , applications  are executed in User mode while the operating system core  is executed in kernel mode. Additionally, a new window manager  may be provided that executes in User mode and provides additional window manager functionality. Aspects of the actual embodiment of the present invention described herein are implemented as a part of the new window manager .","Several types of user interface controls may be available to the new window manager . Native user interface objects, or Visual Gadgets, that are specifically designed to operate with the new window manager  may be available. Additionally, legacy user interface objects designed to work with the legacy window manager  may also be available within the computing environment. For instance, according to the actual embodiment of the present invention described herein, the new window manager  is operative to utilize user interface controls called Visual Gadgets, or HGADGETS. Through the process that will be described in greater detail below, however, the new window manager  can also utilize legacy user interface controls such as HWNDS, which are handles to a window in the Win32 environment, utilized by the legacy window manager . Other types of legacy user interface controls may also be hosted in a similar manner.","Referring now to , an illustrative software architecture for implementing aspects of the present invention will be described. A legacy window tree  is shown in  that is maintained by a legacy window manager. For example, an illustrative legacy window tree  may include a Root HWND , a Host HWND , and a Control HWND . As known to those skilled in the art, the Host HWND  and the Control HWND  have associated procedures for handling unprocessed messages, DefWndProc  and , respectively. The Host HWND  also provides trapping of \u201cparent-only\u201d messages, including the WMCOMMAND message, and forwards them into the root Visual Gadget  for processing. The Host HWND  also provides clipping regions that can be set on the parent. In this manner, the painting of the existing child control may be clipped in a way that works with APIs, such as ScrollWindow( ), that may have problems if the clipping region was set on the child instead. It should be appreciated by those skilled in the art that a visible region may be set on the Host HWND  so that the Host HWND  is made aware of any Visual Gadget that would overlap the Host HWND . This way, the Host HWND  can compensate for the Visual Gadgets that would obscure it. Procedures for calculating a visible region are known to those skilled in the art.","According to an actual embodiment of the present invention, software bridges  and  are provided for intercepting messages intended for the hosted legacy user interface control. In the illustrative example, the bridge  receives messages from the DefWndProc  and the bridge  receives messages from the EditWndProc . The bridge  forwards received messages to the HostWndProc  and the bridge  forwards messages to the CtrlWndProc . As will be described in greater detail below with respect to , the HostWndProc  and the CtrlWndProc  may forward the message to the root Visual Gadget in the new window tree  for processing.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4","b":["82","82","82","104","106","108","108","110"]},"Referring now to , an illustrative Routine  for adapting and hosting legacy user interface controls will be described. The Routine  begins at block , where a message is received at the Host HWND , such as a WMCOMMAND message, or the Control HWND , such as WMLBUTTONDOWN. From block , the Routine  continues to block , where the message is intercepted by the appropriate bridge  or . The Routine  then continues to block , where the intercepted message is redirected to either the HostWndProc  or the CtrlWndProc  object, respectively. The Routine  then continues to block .","At block , a determination is made at either the HostWndProc  or the CtrlWndProc  object as to whether the message should be forwarded to the new window manager. According to one actual embodiment of the invention, the HostWndProc  and the CtrlWndProc  may be customized to handle similar messages differently depending upon external variables. For instance, some controls utilize an alternate WndProc to process messages. It may be advantageous not to forward some messages, such as mouse movement messages, to this type of control. On the other hand, mouse movement messages should be forwarded to many other types of controls.","If, at block , it is determined that the message should not be forwarded, the Routine  branches to block , where the message is sent to the original WndProc. The Routine  then continues to block , where additional messages are processed. If, at block , it is determined that the message should be forwarded, the Routine  continues to block . At block , the intercepted message is converted to a format usable by the new window manager and is forwarded to the root Visual Gadget . When the message is received at the root Visual Gadget , the message no longer contains information indicating that it originated from a legacy user interface control.","From block , the Routine  continues to block , where the message state is synchronized in the root Visual Gadget , updating any cached state such as keyboard focus. From block , the Routine  continues to block , where the message is routed down the window tree to the adapter control . During this routing process, all parent objects of the adapter control  are given an opportunity to process the message. At block , the message is processed at the adapter control , if it reaches the adapter control . As a part of its processing of the message, the adapter control  may convert the message back into a message format understood by the legacy window manager, such as Win32, and transmit the message back to the EditWndProc object . In this manner, the original EditWndProc object  is provided an opportunity to process the message at block . The EditWndProc object  is unaware that the message originated in the new window manager.","From block , the Routine  continues to block , where the message is routed from the adapter control  to any attached listener objects, such as listeners A\u2013B. In this manner, the listeners A\u2013B are provided an opportunity to process the message. This allows other Visual Gadgets to take part in processing the message without requiring C++ or WNDPROC sub-classing. From block , the Routine  continues to block  where a determination is made as to whether the message has been completely processed. If the message has been completely processed, the Routine  branches to block , described below. If the message has not been completely processed, the Routine  continues to block , where the message is \u201cbubbled up\u201d the window tree, thereby providing all of the parent objects with an opportunity to process the message after the EditWndProc object  has completed its processing. The Routine  then continues to block .","At block , control is returned to the CtrlWndProc object  or the HostWndProc object . If the message was not originally sent to the new window manager, or the message was not fully processed, the message is sent to the original EditWndProc  for the control, or the DefWndProc  for the host. The Routine  then returns to block  where additional messages are processed.","In light of the above, it should be appreciated by those skilled in the art that the present invention provides a method, apparatus, and computer-readable medium for adapting and hosting legacy user interface controls. While an actual embodiment of the invention has been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 5A and 5B"}]},"DETDESC":[{},{}]}
