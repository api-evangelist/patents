---
title: System and method of processing content using a uniform resource identifier
abstract: A host server receives a content request in the form of a Uniform Resource Identifier (URI) from a client. The URI identifies a first content resource and describes a first service resource to be applied to a representation of the first content resource. The URI is translated into an instruction set. The host server causes execution of the instruction set to apply the first service resource to a representation of the content resource. A processed representation of the first content resource is then provided to the client in response to the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09223890&OS=09223890&RS=09223890
owner: HEWLETT-PACKARD DEVELOPMENT COMPANY, L.P.
number: 09223890
owner_city: Houston
owner_country: US
publication_date: 20110315
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["The invention relates to the field of electronic systems, and in particular to providing data processing web services (e.g. digital imaging web services) across a distributed, resource-oriented computing environment.","As used herein, a web service refers to a software service or system designed to support interoperable machine-to-machine interaction over a network (e.g., via HTTP (R. Fielding et. al., \u201cHypertext Transfer Protocol\u2014HTTP\/1.1\u201d, RFC2616 (Internet Engineering Task Force, 1999)), FTP (J. Postel and J. Reynolds, \u201cFile Transfer Protocol\u201d, RFC959 (Internet Engineering Task Force, 1985)), etc.). Web services capable of processing requests without the need for a server to persist information (or state) between requests from a client are considered to be \u201cstateless\u201d web services. REST (Representational State Transfer) and Computational REST (or CREST) are examples of stateless architectures for web services.","Data processing pipelines (e.g., digital imaging pipelines) are traditionally constructed from various component blocks. For example, in digital imaging pipelines, the component blocks might include image analysis, noise reduction, scaling, color adjustment, etc. These component blocks are typically deployed in rigid architectures that are tailored for specific applications and predefined tasks. These pipelines may optimize one or more goals, such as providing efficient processing, minimal memory consumption, etc. Software implementing these pipelines ranges from machine code for specialized hardware to procedural, modular, or object-oriented frameworks in more general-purpose languages.","Data-oriented programs resulting from traditional data processing pipelines are robust and efficient; however, they are also self-contained and tied directly to physical computing layers such that constituent algorithms are highly interconnected and interdependent with software interfaces that vary between implementations. When extended to web-based solutions, the complexity of maintaining and synchronizing separate pipeline implementations for a growing number of applications and services becomes prohibitively burdensome.","XML-RPC (XML for remote procedure call), grid computing, and SOA (Service Oriented Architecture) are example approaches to interfacing with data pipelines for providing data processing (e.g., digital imaging) services. Such approaches may be used, for example, in providing several web-based photo editors for user-directed image processing. This type of service has a multi-stage execution model whereby a client accesses a stateless, persistent factory service that subsequently creates an instance of a transient, stateful session to manage client-server interactions. This can include a series of mutually dependent client requests regarding the open session directing the uploading of image data to the server, the manipulating of that data, and the downloading of the final processing results to the client.","Ad-hoc REST interfaces to traditional imaging pipelines may also be used. These services provide limited interfaces for purposing image content for particular applications (e.g., image resizing, cropping, etc.). While stateless methods of encapsulating a web service in REST avoid many of the disadvantages of stateful services, the limited interfaces associated with the stateless methods mentioned above make it difficult to implement multi-device conversation models, deferred processing, forwarded processing, custom pipeline construction, etc.","Accordingly, various embodiments described herein provide data processing pipelines as dedicated stateless web services that can be centrally maintained while also being generally available for a wide range of applications. While particular examples described herein focus on digital imaging, it should be noted that general embodiments are not so limited and may be applied in data processing environments other than digital imaging.","In various embodiments, server-side resources are made available as services to websites, cloud-based drivers (e.g., print drivers), mobile devices, and other suitable applications. In various examples, these services are concerned with processing available image content, including image uses and transformations. The services are specified with an API (Application Programming Interface) that allows both content and service resources to be combined to implement various complex operations (e.g., processing an image with two or more concatenated transformations, arranging various graphic elements and one or more images on a page, alpha compositing two of more images, stiching two of more images into panoramas, collages, or mosaics, etc.). While particular examples included herein describe the services being accessed statelessly using standard HTTP requests, it should be noted that general embodiments are not so limited and may involve other suitable protocols.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 1","FIG. 1"]},"Host server  is a server device that receives content requests from client device . For example, client device  might send a request for a transformed (e.g., resized, color corrected, cropped, etc.) version of an image. In various embodiments, content requests are sent to host server  as valid HTTP requests. All of the information necessary to produce the requested processed content is contained in the request. The request URI (T. Berners-Lee, R. Fielding, and L. Masinter, \u201cUniform Resource Identifiers (URI): Generic Syntax\u201d, RFC3986 (Internet Engineering Task Force, 2005)) identifies at least one content resource (e.g., an image) and describes at least one service resource (e.g., resizing, color correction, cropping, etc.) to be applied to the content resource(s).","Message interpreter  comprises message translator  and instruction dispatcher . In various embodiments, message translator  translates the request URI into an executable instruction set (e.g., direct function calls, pipes to external executable programs on host server , direct sockets to executable programs on other devices, requests to external web services, etc.) that applies the described service resources to the identified content resource(s). Instruction dispatcher  then causes execution of the instruction set. Instruction dispatcher  may execute all or part of the instruction set, including retrieving representation(s) of the content resource(s) from an external location (e.g., website) if the content resource(s) are not maintained locally. Upon execution of the instruction set, network interface  provides a processed representation of the content resource to client device .","In some embodiments, an HTTP request from client device  might include an entity enclosed in the request, allowing the client to provide a block of data to host server . The actual use of a request entity is determined by message interpreter  and is dependent on the request URI. For example, based on the request URI, message interpreter  might determine that the request entity is image data provided by client device  for processing by service resources identified by the request URI. Accordingly, message interpreter  might make available the identity of the request entity during one or both translation and execution of the instruction set. For another request URI, message interpreter  might determine that the request entity provides details regarding the capabilities of client device . Accordingly, message interpreter  might analyze the request entity in order to optimize response results according to the provided capabilities of client device . Other uses of the request entity are also possible.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 2"]},"Host server  is a server device that receives content requests from client device . For example, client device  might send a request for a transformed (e.g., resized, color corrected, cropped, etc.) version of an image. In various embodiments, content requests are sent to host server  as HTTP requests. All of the information necessary to produce the requested processed content is contained in the request. The request URI identifies at least one content resource (e.g., an image) and describes at least one service resource (e.g., resizing, color correction, cropping, etc.) to be applied to the content resource(s). Service resources are maintained on host server  (e.g., stored in memory  and executed by processor ). Service resources may also be maintained, for example, on remote server .","Message interpreter  comprises URI normalizer , message translator , instruction analyzer , instruction dispatcher , communication module , and key module . URI normalizer  examines the request URI to produce a normalized request URI. URI normalization is accomplished by rewriting the request URI (e.g., to produce a standardized form to facilitate the generation of keys for caching intermediate and final processing results) based on properties on one or both of the identified content resource(s) and the described service resource(s). Key module  determines a unique key from the normalized URI to identify one or more stages of the execution pipeline. Normalizations may include, but are not limited to, re-ordering URI path segments, replacing URI path segments with preferred alternates that describe and\/or identify the same or similar resources, etc. Message translator  then translates the normalized URI and any subordinate request entity (e.g., posted image data, resource catalog, macro, etc.) into an executable instruction set that applies the described service resource(s) to the identified content resource(s).","Instruction analyzer  analyzes the instruction set to determine which resources are needed to produce the requested processed content. Then, instruction analyzer  generates an execution pipeline for the resources. For example, an instruction set might include obtaining an image along with performing a color correction transformation and an image resizing transformation. Based on the service resources needed to execute these instructions, instruction analyzer  generates an execution pipeline that directs the loading into memory  of image data from the content resource, executing instructions associated with the service resources that perform the color correction and resizing transformations, providing the transformed image data to network interface , and cleaning up memory . Instruction dispatcher  then causes the execution of the instruction set according to the execution pipeline generated by instruction analyzer .","While a content resource may be stored locally (e.g., in memory ), the request may identify a location for retrieving a representation of the content (e.g., an image) from a network (e.g., via HTTP, FTP, etc.). If a service resource needed to process the request is maintained on host server , host server  is directed by the execution pipeline to execute instructions from the instruction set that are associated with that, service resource. If a needed service resource is not maintained on host server  or it is otherwise determined that a service resource should be applied remotely, communication module  is directed to generate and to send an HTTP request (e.g., to remote server  via network interface ) for executing instructions associated with that service resource. In alternate embodiments, communication module  initiates a connection to remote server  via a direct socket or other suitable connection mechanism. In general, instructions can be distributed across any combination of host server , remote server  and\/or additional remote servers based on resource availability, processing requirements, etc.","In various embodiments, instruction analyzer  may generate an execution pipeline that optimizes execution performance by directing, for example, instruction dispatcher  to retrieve prior cached results rather than causing the execution of instructions associated with corresponding resources. Conversely, the execution pipeline may direct instruction dispatcher  to cache one or both intermediate and final results to improve subsequent execution performance. The normalized request URI facilitates determining unique keys for caching the results of executing the instruction set both whole and in part. Other optimizations (e.g., for processing efficiency, quality, etc.) may include, but are not limited to, re-ordering the application of service resources, selecting different services to achieve the same or similar result, balancing instruction distribution, etc. For example, in the case of mobile clients, distribution of resources could be dynamically balanced for best performance in a particular network bandwidth. If a device currently has a slow connection, one distribution may be preferred. In faster network conditions, a different distribution may be preferred. Distribution of instructions may be accomplished by generating new HTTP requests on the fly that are sent to remote server(s) for translation and execution.","In various embodiments, the HTTP request received by host server  may include references to variables, referred to herein as variable resources. These variable resources can store constant values and\/or references to resource representations of various types, and they can be used in specifying content resources and service resources along with corresponding named and unnamed API parameters, as well as API access instructions allowing, for example, a portion of a resource representation to be selected for providing a parameter value or for identifying one or more alternate content resources. Often a variable resource can be resolved before the initial execution pipeline is generated. Other times a variable resource is assigned a reference to the execution result of a service resource. In this case, the variable resource cannot be resolved until after execution of the instruction set has started. Resolving a variable resource during execution of the instruction set can cause the execution pipeline to be modified, in which case instruction dispatcher  causes the execution of the instruction set to continue according to the modified execution pipeline.","Further, the HTTP request received by host server  may additionally identify one or more macros, referred to herein as macro resources. In various embodiments, macro resource representations are XML (Extensible Markup Language) data, although other suitable representation types could also be used. Message interpreter  can often translate a macro resource when generating the instruction set. Subsequently, the instructions obtained by translating the macro resource are treated the same as any instructions obtained by translating the request URI. Macro resources are maintained on host server  (or alternatively on remote server ). Macros can also be maintained on client  or generated by converting a request URI, for example, during resource balancing negotiations. In some embodiments, a macro may be produced as an execution result of a service resource. A subsequent service resource may then cause the execution pipeline to be modified to direct the execution of instructions generated by translating the macro into an instruction set separate from the first instruction set, in which case instruction dispatcher  causes the execution of both instruction sets to continue according to the modified execution pipeline.","In other embodiments, an XML representation of a macro resource may be returned to client device  as the response to the original content request, signaling to client device , for example, a request from host server  to defer to client device  requested processing that is unavailable server-side. Based on the response, client device , which may include a message interpreter similar to message interpreter , might determine that it can indeed process part of the instruction set. Accordingly, client device  might send to host server  for completion the content request together with only those service request(s) that host server  can process. Upon completion, the requested partially processed content is provided back to client device  for processing to be completed. Alternately, client device might send to host server  a full request, encoding in the request URL explicit instructions regarding how to request unavailable processing from alternate remote server(s) or web service(s).","In addition to the functions and operations described above, client device , host server , remote server , and other remote servers can make available respective lists of available resources (referred to herein as resource catalogs). Resource catalogs can be made available, for example, as message entities in both HTTP responses and requests. In this way, client device  can request a list of available resources from host server . Host server  can return its own resource catalogs and\/or the resource catalogs of available remote partners (e.g., remote server ). Client device  can similarly provide a catalog of client-side resources that it maintains and\/or resource catalogs of available remote partners to host server . Also, host server  and remote server  can exchange resource catalogs as part of content delivery negotiations.","Various modules and\/or components illustrated in  may be implemented as a computer-readable storage medium containing instructions executed by a processor (e.g., processor ) and stored in a memory (e.g., memory ).",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 3"]},"A host server receives  a content request in the form of a valid HTTP request from a client. The request URI identifies one or more content resources (e.g., images) and describes one or more service resources (e.g., image manipulations, transformations, etc.) to be applied to one or more representations of the content resource(s). The path component of a URI consists of a sequence of segments separated by a slash (\/) character. In various embodiments, URI paths are restricted to consist of a service context segment followed by path segments constrained to include only identifiers of content resources or else service resources, where each segment may also be divided into one or more subsegments (e.g., to provide parameter values) and where each subsegment may also include one or more modifiers (e.g., to provide access instructions for a content resource). URIs of content resources may be percent-encoded to prevent reserved characters used therein from conflicting with reserved characters used in the containing URI. Further, the URIs of API requests can be percent encoded to allow them to be included in another API request (e.g., providing a means of explicitly forwarding processing to other remote servers within a request to the host server).","In addition, multiple operators can be concatenated via slash (\/) characters to produce an aggregate result. For example, appending \u201c\/grayscale\/png\u201d to a URI that identifies a JPEG image produces an aggregate result that converts the image to grayscale and converts the JPEG to PNG format. In other words, multiple additional instructions can be appended to a URI to further transform the content resource(s). The output of an aggregate processing result can be conceptualized as the execution of the service resources in terms of pushdown automata. Service resources pop content off an operand stack and then push their results back on. This conceptual framework helps to clarify how the API can direct various service resources to work together to produce complex results.","The host server translates  the path segments of the URI into an instruction set. In other words, the host server interprets the URI to determine the service context, the content resource(s), and the service resource(s) to be applied to the content resource(s). The host server then causes  execution of the instruction set. The host server may execute some or all of the instructions in the instruction set locally, or it may trigger execution of some or all of the instructions on one or more remote servers or defer processing to the client device or subsequent device. Results of instructions executed remotely are returned to the host server. In various embodiments, the host server provides  the final representation of the processed content (e.g., image) to the requesting client.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIG. 4"]},"A host server receives  a content request in the form of a valid HTTP request from a client. The request URI identifies one or more content resources (e.g., images) and describes one or more service resources (e.g., image manipulations, transformations, etc.) to be applied a representation of the content resource. The host server translates  the request URI and any subordinate request entity into an instruction set. In other words, the host server interprets the request to determine from the request message the content resource(s), service resource(s), variable resource(s), macro resource(s), etc. needed for fulfilling the request.","The host server evaluates  the instruction set to generate an execution pipeline for the resources. For example, the translated URI might set forth a particular order of operations. In evaluating the translated instruction set, the host server can determine that a different order of operations would optimize (e.g., increase processing efficiency, improve output quality, etc.) the processing results.","The instruction set may call for one or more stages of the execution pipeline to be processed remotely. Accordingly, the host server generates and sends  an HTTP request that describes the content and service resource(s) associated with the relevant pipeline stage(s) to a remote server similarly capable of translating and executing HTTP messages, as described herein. In other embodiments, the HTTP request for remote processing is encoded into the syntax of a non-related API for transmission to an independent, third party web service. The host server receives  an execution result from the remote server in response to sending the HTTP request. In addition, the host server executes  one or more stages of the execution pipeline.","The host server further executes  to combine pipeline execution stage results. For example, the host server may send an HTTP request to a remote server to have the remote server perform color correction on a representation of a specified image. Upon receiving the color corrected representation from the remote server, the host server may perform a resizing of the color corrected representation. The host server provides  the processed content (e.g., the aggregate image) to the client in response to the request.","In alternate embodiments, the host server can defer execution of pipeline stages to the requesting client. In other words, the host server can execute part of the instruction set generated from the URI content request and return the executed portion of the instruction set along with a response indicating the unexecuted portion of the instruction set to the client. Upon receiving the response, the client device can complete execution of the instruction set to generate the processed representation of the content resource or the client device can generate another URI request for a different server to complete execution of the instruction set and return the result.","In some embodiments, deferral of execution may be client-initiated. In such cases, the client might send a partial URI to the host server and complete processing upon receipt of the returned processed result from the host server. In other embodiments, deferral may be client-requested. The client may send a resource catalog, of available resources to the server, allowing the server to choose to defer processing to the client. In such cases, the server sends an XML file to the client describing which resources the server has chosen to defer. The client may then perform a client-initiated deferral.","In other embodiments, deferral may be server-initiated. When deferral is server-initiated, the server recognizes that a request service is unavailable. In such cases, the server sends back to the client a response (e.g., XML data) describing to the client which resources are unavailable. The client may then decide whether it can perform the unavailable processing itself or request it from yet another server. After making these decisions, the client can perform a client-initiated deferral to obtain the processed content. In yet other embodiments, deferral may be server-requested. In response to a service request, the server can send back a file (e.g., XML file) describing the service resources is has but that it prefers not to have to execute. The client can choose to respect this request, performing a client-initiated deferral, or else the client can choose to resend an amended request forcing the server to perform the processing.","Various modifications may be made to the disclosed embodiments and implementations of the invention without departing from their scope. Therefore, the illustrations and examples herein should be construed in an illustrative, and not a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The following description includes discussion of figures having illustrations given by way of example of implementations of embodiments of the invention. The drawings should be understood by way of example, not by way of limitation. As used herein, references to one or more \u201cembodiments\u201d are to be understood as describing a particular feature, structure, or characteristic included in at least one implementation of the invention. Thus, phrases such as \u201cin one embodiment\u201d or \u201cin an alternate embodiment\u201d appearing herein describe various embodiments and implementations of the invention, and do not necessarily all refer to the same embodiment. However, they are also not necessarily mutually exclusive.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
