---
title: System and method for delayed fetching of designated members of a user defined type
abstract: A number of members of a user defined type may be designated as delayable members. During an initial fetch of the type, the type may be returned from the database without the delayable members, thereby preserving valuable bandwidth and reducing the amount of time required to perform the initial fetch. Upon request, selected delayable members may be re-fetched from the database at a later time without returning the other members provided during the initial fetch.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07548901&OS=07548901&RS=07548901
owner: Microsoft Corporation
number: 07548901
owner_city: Redmond
owner_country: US
publication_date: 20040629
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The present invention relates to the field of data retrieval and manipulation, and, more specifically, to retrieval and manipulation of user defined types.","Microsoft SQL SERVER is a comprehensive database management platform that provides extensive management and development tools, a powerful extraction, transformation, and loading (ETL) tool, business intelligence and analysis services, and other capabilities. Two improvements to SQL SERVER have recently been implemented. First, the Microsoft WINDOWS .NET Framework Common Language Runtime (CLR) has been integrated into the SQL SERVER database, and second, a new object, referred to as a User Defined Type (UDT), can now be created with managed code in the CLR environment and persisted in the database store.","The CLR is the heart of the Microsoft NET Framework, and provides the execution environment for all .NET code. Thus, code that runs within the CLR is referred to as \u201cmanaged code.\u201d The CLR provides various functions and services required for program execution, including just-in-time (JIT) compilation, allocating and managing memory, enforcing type safety, exception handling, thread management and security. The CLR is now loaded by SQL SERVER upon the first invocation of a NET routine.","In previous versions of SQL SERVER, database programmers were limited to using Transact-SQL when writing code on the server side. Transact-SQL is an extension of the User defined Query Language as defined by the International Standards Organization (ISO) and the American National Standards Institute (ANSI). Using Transact-SQL, database developers can create, modify and delete databases and tables, as well as insert, retrieve, modify and delete data stored in a database. Transact-SQL is specifically designed for direct structural data access and manipulation. While Transact-SQL excels at data access and management, it is not a full-fledged programming language in the way that Visual Basic .NET and C# are. For example, Transact-SQL does not support arrays, collections, for each loops, bit shifting or classes.","With the CLR integrated into the SQL SERVER database, database developers can now perform tasks that were impossible or difficult to achieve with Transact-SQL alone. Both Visual Basic NET and C# are modern programming languages offering full support for arrays, user defined exception handling, and collections. Developers can leverage CLR integration to write code that has more complex logic and is more suited for computation tasks using languages such as Visual Basic .NET and C#.","In addition to CLR integration, SQL SERVER also adds support for User Defined Types (UDT)\u2014a new mechanism that enables a developer to extend the scalar type system of the database. UDTs provide two key benefits from an application architecture perspective: they provide strong encapsulation (both in the client and the server) between the internal state and the external behaviors, and they provide deep integration with other related server features. Once a UDT is defined, it can be used in all the contexts that a system type can be used in SQL SERVER, including in column definitions, variables, parameters, function results, cursors, triggers, and replication.","The process of defining a UDT on a database server is accomplished as follows:\n\n","When a UDT definition is created in managed code, the type must meet the following requirements:\n\n","Co-pending, commonly assigned, patent application Ser. No. 10\/692,225, entitled \u201cSystem And Method For Object Persistence In A Database Store\u201d, which is hereby incorporated by reference in its entirety, describes another feature of UDTs in which the fields and behaviors of a CLR class definition for a UDT are annotated with storage attributes that describe a layout structure for instances of the UDT in the database store. Specifically, each field of a CLR class that defines a UDT is annotated with a storage attribute that controls the storage facets of the type, such as size, precision, scale, etc. In one embodiment, this is achieved by annotating each field with a custom storage attribute named SqlUdtField( ). This attribute annotates fields with additional storage directives. These directives are enforced when the object is serialized to disk. In addition, every managed behavior (e.g., a method that can be invoked on the UDT object, for example, to return the value of a field) defined in the CLR class is annotated with an attribute that denotes an equivalent structural access path for that managed behavior. In one embodiment, the custom attribute used for this purpose is named SqlUdtProperty( ), and the database server (e.g., SQL SERVER) assumes that the implementation of properties annotated with this custom attribute will delegate to a field specified as part of the attribute definition. This lets the server optimize access to the property structurally without creating an instance and invoking the behavior on it.",{"@attributes":{"id":"p-0011","num":"0020"},"figref":"FIG. 1","b":["5","8","37","49","11","24"]},"The CLR class that defines the UDT is then compiled into a dynamic link library (dll). An Assembly containing the compiled class may then be created using the following T-SQL script commands:","create assembly test from \u2018c:\\test.dll\u2019","go","The following T-SQL script commands may then be used to create the UDT on the server:","create type BaseItem","external name [test]: [BaseItem]","go","Once the UDT has been created on the server, a table (e.g., \u201cMyTable\u201d) can be created defining an attribute of the table as the UDT type, as follows:",{"@attributes":{"id":"p-0020","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"create table MyTable"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Item BaseItem,"]},{"entry":[{},"ItemId as item::ID"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},"go"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A new item can be added to the table, as follows:","declare@i BaseItem","set@i=convert(BaseItem,\u201d)","insert into MyTable values (@i)","go","The UDT expression can then be used in a query such as: SELECT Item.ID, Item.Name FROM MyTable.","With the integration of the CLR into SQL SERVER and the ability to define UDTs from a class definition in managed code, applications can now instantiate objects of the type defined by the managed code class and have those objects persisted in the relational database store as a UDT. Moreover, the class that defines the UDT can also include methods that implement specific behaviors on objects of that type. An application can therefore instantiate objects of a type defined as a UDT and can invoke managed behaviors over them.","When an object of a class that has been defined as a UDT is instantiated in the CLR, the object can be persisted in the database store through the process of object serialization, wherein the values of the variables of the class are transferred to physical storage (e.g., hard disk).  illustrates the serialization of an object in memory to its persisted form on disk. The object may be persisted in the database store in a traditional relational database table of the format illustrated in . As shown, the table comprises a column of the specified UDT. The serialized values of a persisted object of the specified UDT occupy a cell of the UDT column.","Referring again to , when an application generates a query that includes a predicate or an expression that references a managed behavior of a UDT object that has been persisted in the database store (e.g., a behavior that returns the value of a field of the UDT object), the persisted object must be de-serialized (sometimes also referred to as \u201chydrating\u201d) and the CLR must allocate memory for the full object in order to receive its stored values. The CLR must then invoke the actual method (i.e., behavior) of the UDT class that returns the value(s) that is the subject of the query. As described in the aforementioned co-pending application Ser. No. 10\/692,225, the SqlUdtField( )and SqlUdtProperty( ) annotations in the CLR class definition of a UDT can be used by the database server to also allow direct structural access to the values of certain UDT fields without the need for object hydration.","One new technology that takes advantage of the CLR integration and the provision of UDTs in SQL SERVER is the storage platform described in co-pending, commonly assigned, patent application Ser. No. 10\/646,646, filed Aug. 21, 2003, entitled \u201cStorage Platform For Organizing, Searching, And Sharing Data,\u201d the disclosure of which is hereby incorporated by reference in its entirety.  is a block diagram illustrating the architecture of the storage platform  described in this co-pending application. The storage platform is sometimes referred to as \u201cWinFS.\u201d As shown in , the storage platform  comprises a data store  implemented on a database engine . In one embodiment, the database engine comprises a relational database engine, such as the Microsoft SQL SERVER relational database engine.","The data store  implements a data model  that supports the organization, searching, sharing, synchronization, and security of data in the form of Items and relationships between items, as described more fully below. Specific types of Items are described in schemas, such as schemas , and the storage platform  provides tools  for deploying those schemas as well as for extending those schemas, as described more fully below.","A change tracking mechanism  implemented within the data store  provides the ability to track changes to the data store. The data store  also provides security capabilities  and a promotion\/demotion capability . The data store  also provides a set of application programming interfaces  to expose the capabilities of the data store  to other storage platform components and application programs (e.g., application programs and ) that utilize the storage platform.","The storage platform still further comprises an application programming interface (API) , which enables application programs, such as application programs and to access the capabilities of the storage platform and to access the data stored in the database. The storage platform API  may be used by application programs in combination with other APIs, such as the OLE DB API  and the Microsoft WINDOWS Win32 API .","The storage platform  may also provide a variety of services  to application programs, including a synchronization service  that facilitates the sharing of data among users or systems. For example, the synchronization service  may enable interoperability with other data stores  having the same format as data store , as well as access to data stores  having other formats. The storage platform  also provides file system capabilities that allow interoperability of the data store  with existing file systems, such as the WINDOWS NTFS files system .","In at least some embodiments, the storage platform  may also provide application programs with additional capabilities for enabling data to be acted upon and for enabling interaction with other systems. These capabilities may be embodied in the form of additional services , such as an Info Agent service  and a notification service , as well as in the form of other utilities .","In at least some embodiments, the storage platform is embodied in, or forms an integral part of, the hardware\/software interface system of a computer system. For example, and without limitation, the storage platform of the present invention may be embodied in, or form an integral part of, an operating system, a virtual machine manager (VMM), a Common Language Runtime (CLR) or its functional equivalent, or a Java Virtual Machine (JVM) or its functional equivalent.","Through its common storage foundation, and schematized data, the storage platform enables more efficient application development for consumers, knowledge workers and enterprises. It offers a rich and extensible programming surface area that not only makes available the capabilities inherent in its data model, but also embraces and extends existing file system and database access methods.","In the following description, and in various ones of the figures, the storage platform  of the present invention may be referred to as \u201cWinFS.\u201d However, use of this name to refer to the storage platform is solely for convenience of description and is not intended to be limiting in any way.","The data model of the WinFS platform defines units of data storage in terms of Items, Item extensions, and Relationships. An \u201cItem\u201d is the fundamental unit of storage information. The data model provides a mechanism for declaring Items and Item extensions and for establishing relationships between Items. Items are the units that can be stored and retrieved using operations such as copy, delete, move, open, and so forth. Items are intended to represent real-world and readily-understandable units of data like Contacts, People, Services, Locations, Documents (of all various sorts), and so on. Item extensions are a way to extend the definition of an existing Item, and Relationships are a defined link between Items.","In WinFS, different Item types are defined for storing information. For example, Item types are defined for Contacts, People, Locations, Documents, etc. Each Item type is described by a schema that defines the properties and characteristics of a given Item. For example, a \u201cLocation\u201d Item may be defined as having properties such as EAddresses, MetropolitanRegion, Neighborhood, and PostalAddresses. Once a schema is defined for a given Item type, deployment tools are used to translate the schema into a corresponding CLR class definition for that Item type, and then a UDT is created in the database store from the CLR class definition (in the manner described above) in order for instances of the WinFS Item type to be persisted in the database store. Using the WinFS API , applications (e.g., applications etc.) can create instances of the Item types supported by the data store in order to store and retrieve information from the storage platform data store. Each instance of an Item type stored in the data store has a unique identifier (e.g., Item_ID) associated with it; in one embodiment, each item identifier is a globally unique identifier, i.e. \u201cguid.\u201d Thus, the WinFS platform leverages the CLR integration and UDT capabilities of the database store to provide a platform for storing Items of information.","As with any instance of a UDT in SQL SERVER, instances of WinFS Items are ultimately stored in tables of the database store in the manner illustrated in . Applications can then submit queries to the WinFS platform to search for and retrieve Items from the data store that satisfy the search criteria.  illustrates how a query is executed against the data store to retrieve instances of an Item type called \u201cPerson.\u201d In step (1), an application uses a \u201cFindAll\u201d method of the WinFS API  to initiate a query for all Items that satisfy a particular search criteria\u2014in this case, all instances of the Person type in which the value in a \u201cBirthday\u201d field of the type is greater than a particular date (e.g., Dec. 31, 1999). At step (2), the WinFS API  translates the \u201cFindALL\u201d operation into a SQL query and submits it to the underlying database engine, e.g., SQL SERVER. In step (3), the database engine executes the query against the corresponding instances of the Person UDT and returns the stored values for each matching instance of the Person UDT. In this example, at step (4), ADO.Net turns the bits returned from the database store into CLR objects (i.e., the process of object hydration discussed above) and returns them to the WinFS API . ADO.Net is a component of the Microsoft .NET Framework that provides managed code access via the CLR to data sources such as SQL SERVER. The WinFS API then wraps the Person UDT objects and returns them to the application as Items of the Person type.","Each instance of a UDT may include a number of members which represent large objects such as, for example, digital images, video, audio, etc. Such large objects are usually stored in data type instances such as, for example, BLOB, CLOB, and NCLOB or more specifically stored in varbinary(max), varchar(max), nvarchar(max). The retrieval of large members from a database often requires a large amount of time and considerable bandwidth. Furthermore, the majority of UDT retrieval usage scenarios do not require access to large embedded members. Thus, there is a need in the art for systems and methods for delayed fetching of designated members of a UDT. It is desired that such systems and methods enable the UDT to be initially fetched without the designated members, and the designated members to be re-fetched upon request at a later time. The present invention satisfies these and other needs.","The present invention is directed to systems and methods for delayed fetching of designated members of a user defined type (UDT). The designated members may be large objects such as, for example, digital images, video, audio, etc. According to the invention, upon an initial fetch of the UDT from a database server, a serialized version of the UDT is returned in which the designated members are removed, thereby preserving valuable bandwidth and reducing the amount of time required to perform the initial fetch. Upon request, the designated members may be re-fetched from the database server at a later time and returned without the other UDT members provided during the initial fetch.","According to an aspect of the invention, the initial fetch may be executed by generating a UDT container reference that identifies a path to the UDT within an underlying database. A serialized representation of the UDT may be retrieved from the database, and the designated members may be removed from the serialized representation. The container reference may then be pre-fixed to the serialized representation, and the serialized representation may be returned to a client application.","According to another aspect of the invention, the client application may receive and de-serialize the serialized representation. As part of the de-serialization process, for each designated member, a type instance may be constructed that includes context information corresponding to the location of the designated member within the database. The context information may include the container reference to the entire UDT and an individual member path to the corresponding designated member. Each designated member may be then be re-fetched at a later time by providing its context information to the database server.","According to another aspect of the invention, during re-fetch, the designated members may be returned as they were at the time of the initial fetch. To enable this feature, an update sequence marker (USM) identifying a version of the UDT at the time of the initial fetch may also be returned to the client application along with the serialized representation. During re-fetch, the USM may be returned to the database server along with the context information. The USM may be used to identify and retrieve prior versions of the designated members at the time of the initial fetch.","According to another aspect of the invention, after the initial fetch, the entire UDT or individual designated members may be returned back to the database server. If the entire UDT is returned, then the context information is provided to the database server in place of the designated members. Upon being retuned to the database server, the context information is used to identify and replace the designated members. If only individual designated members are returned, then the context information is returned along with the a metadata annotation indicating the designated members as such.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments that proceeds with reference to the accompanying drawings.","The subject matter of the present invention is described with specificity to meet statutory requirements. However, the description itself is not intended to limit the scope of this patent. Rather, the inventors have contemplated that the claimed subject matter might also be embodied in other ways, to include different acts or elements similar to the ones described in this document, in conjunction with other present or future technologies.","As stated above, the present invention is directed to systems and methods for delayed fetching of designated members of a user defined type (UDT). Generally, the present invention enables specific members of a UDT, particularly members representing large objects, to be designated as delayable members. During an initial fetch of a UDT, it may be returned from a database without the delayable members, thereby preserving valuable bandwidth and reducing the amount of time required to perform the fetch. Upon request, selected delayable members may be re-fetched at a later time without returning the other members provided during the initial fetch. As should be appreciated, the process of delayed retrieval may also be referred to as a lazy materialization process, however the particular term used to refer to the systems and methods described below is not intended to limit the scope of the invention.","An exemplary system for delayed fetching of designated members of a UDT in accordance with the present invention is shown un . Generally, database server  includes an underlying data store , which stores data in relational form such as in data table . Table  includes a UDT column  with a number of rows each including an instance of a UDT. Each UDT instance may, although need not necessarily, include a number of large objects -Table  also includes a primary key column  which organizes the UDT instances according to a unique identifier such as a globally unique identifier (GUID). As should be appreciated, table  may also include other UDT columns and other relational columns (not shown). Client  enables a user to generate and submit queries to database server , and such queries may request a fetch of particular UDT instances from data store .","Database server  may also include a common language runtime (CLR) , which enables the UDT instances to be defined according to a CLR class definition. An exemplary class definition for a UDT is shown below:",{"@attributes":{"id":"p-0064","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Person"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String FirstName;"]},{"entry":[{},"String LastName;"]},{"entry":[{},"Blob Photo;"]},{"entry":[{},"Collection<Address> Addresses;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Address"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String Zip;"]},{"entry":[{},"Blob Map;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As stated above, in accordance with an aspect of the present invention, specific members of a UDT may be designated as delayable members. If a query is later submitted to database server  that requests a fetch of the UDT, then, upon request, the delayable members may be removed from the UDT as part of the query execution. The delayable members may then be re-fetched upon request at a later time. Delayable members may be designated by annotating them as such using a custom attribute recognized by the CLR . For example, delayable members may be annotated using an \u201cIsDelayable\u201d attribute. A UDT with exemplary annotated delayable members is shown below:",{"@attributes":{"id":"p-0066","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Person"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String FirstName;"]},{"entry":[{},"String LastName;"]},{"entry":[{},"[SqlUdtField(IsDelayable=true;)]"]},{"entry":[{},"SqlBytes Photo;"]},{"entry":[{},"MultiSet<Address> Addresses;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"Address"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String Zip;"]},{"entry":[{},"[SqlUdtField(IsDelayable=true;)]"]},{"entry":[{},"SqlBytes Map;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Once the UDT has been defined and delayable members have been annotated, the query is registered with data store . Data store  will read the attributes of the UDT and identify the delayable members of the UDT based on the annotation. Upon registration of the UDT at data store , the UDT may be retrieved with delayed fetching for the annotated delayable members as set forth below.","A flowchart of an exemplary method for delayed fetching of designated members of a UDT in accordance with the present invention is shown in . At act , an initial fetch query requesting a fetch of the UDT is submitted to database server . As stated above, to provide advantages such as preserving bandwidth and reducing the time required to perform the fetch operation, a fetch query in accordance with the present invention may request delayed fetching of designated delayable members of the UDT. Preferably, the fetch query does not, by default, delay the fetching of the delayable members. Rather, the fetch query preferably must include a specific request to invoke delayed fetching. Thus, to enable delayed fetching, a projection list of the SELECT statement may be extended to support a delayed fetching clause. Such a delayed fetching clause may be, for example, a WITH [REFERENCE] LOCATOR clause. An exemplary projection list including a WITH [REFERENCE] LOCATOR clause is shown below:",{"@attributes":{"id":"p-0069","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"< column_specifier > ::= {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003column_name"]},{"entry":[{},"| \u2003\u2003<Delayable-value> \u2003\u2003[WITH ([REFERENCE]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LOCATOR)]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"| expression"]},{"entry":[{},"| IDENTITYCOL"]},{"entry":[{},"| ROWGUIDCOL"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Delayable-value> ::= {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003delayable_column_name"]},{"entry":[{},"| <Delayable-value>.<UDT-valued-udt-member>"]},{"entry":[{},"| TREAT (<Delayable-value> AS <type>)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<UDT-valued-udt-member> \u2003\u2003::= {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003<public-udt-valued-field>"]},{"entry":[{},"| <public-udt-valued-sql-property>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The syntax enhancement shown above enables delayed fetching for any UDT instance. Such a UDT instance may be, for example: a top level UDT, an embedded UDT-valued member within some other UDT, a UDT that has been cast to one of its subtypes or supertypes, or a combination of any of the first three types.","An exemplary fetch query requesting delayed fetching is shown below:\n\n","There are two manners in which delayed fetching may be implemented: reference semantics and value semantics. In the reference semantics approach, the re-fetch operation retrieves the delayed members as of the time of the re-fetch operation itself. Thus, any changes made to the delayed members after the initial fetch are propagated and retrieved along with the re-fetch. In the value semantics approach, the re-fetch operation retrieves the delayable members as of the time when the initial fetch is executed. Thus, value semantics provides read consistency among the delayed and the non-delayed members. The implementation of reference semantics and value semantics is discussed throughout the description below.","At act , the fetch query is executed at database server . An exemplary method for executing a fetch query in accordance with the present invention is shown in . Acts - shown in  are sub-acts within act . At act , database server  verifies that the requested UDT is uniquely identifiable. The verification involves establishing that the requested UDT is stored in a table or view to which an access path may be generated. Such an access path enables re-fetching of the exact same requested logical UDT at a later time. The verification may include ensuring that all tables in the access path contain either a primary key or a unique index such as, for example, key column . If the UDT is not uniquely identifiable, then an error message may be returned.","At act , database server  generates a UDT container reference. The UDT container reference includes the UDT access path discussed above and ultimately encodes all the logical names of databases, schemas, tables\/views, key columns, and key column values for the UDT path. All information in the container reference is \u201clogical\u201d with respect to objects which may be accessed by client . Thus, for as long as the container reference is present, the semantics of the container reference are understandable to the client  in connection with actions and operations that may be requested by client . The container reference is not subject to implementation details of the database server . An additional grammar may be added to database server  to encode the container reference.","At act , database server  ensures that the UDT container reference does not compromise security with improper or unauthorized information disclosure. Act  is optional. Security may be achieved, for example, by verifying that a user submitting the query has access to all columns and values that are included in the key columns part of the access path. Alternatively, security may be achieved by encrypting the values and returning them in encrypted form.","At act , a serialized representation of the UDT instance is retrieved from data store . At act , the delayable members of the UDT are removed from the retrieved UDT. Specifically, as each UDT instance is being returned to the client , metadata is loaded for the specific type being returned, and delayable members are enumerated and logically removed from the serialized representation. At act , the retrieved UDT is prefixed with the UDT container reference. Thus, the instance is returned to the client  with the UDT container reference and the serialized form of the UDT omitting members marked as IsDelayable=true.","For value semantics, database server  performs some additional acts as part of the fetch query execution. Specifically, database server  ensures that the statement containing the fetch query is being executed within the context of a user transaction. Furthermore, server  generates and returns as part of the UDT instance an Update Sequence Marker (USM), which is a versioning timestamp used to provide read consistency on the re-fetch operation.","Returning to , at act , the UDT with removed delayed members and the prefixed container reference is returned to client . At act , the returned UDT is deserialized. As part of the deserialization process, a managed deserializer at the client  identifies the omitted, delayed UDT members, and, for each such delayed member, constructs a corresponding CLR type such as, for example, SqlBytes and SqlChars. The constructed CLR type for each delayed member includes the prefixed UDT container reference for the entire UDT as well as an individual member path for the individual delayed member. Thus, the CLR type instance for each member is a cookie that provides a path to the individual member within database server . The cookie is a sequence of bytes that unambiguously identifies an individual instance of a delayed member on the database server , but does not refer to client . Programs at client  generally do not make changes to the cookie and use the cookie in its original form in re-fetch requests to the database server .","Setting the full context of each delayed member including the individual member path is done at client  to achieve better performance and scalability. The client deserializer does a full type traversal on all returned UDT instances regardless of whether the instances include delayed members. Thus, as opposed to setting the full context at database server , setting the full context at client  does not require an additional traversal of the returned UDT. Furthermore, setting the full context at client  offloads additional work from the database server , resulting in a scalability gain.","The CLR types in accordance with the present invention may be enhanced to support a backed by cookie state. Furthermore, the types may be enhanced to return an exception if an attempt is made to use a corresponding instance when not fully materialized.","Importantly, the CLR types may also be enhanced to provide a \u201cFill\u201d method that automatically re-fetches the full representation for a corresponding instance from the database server . The Fill method takes a connection to the database server  as an argument. Alternatively to using the Fill method, a reference to the server connection may be implicitly stored at client  during deserialization.","At act , client  submits a request to re-fetch a selected delayed member. The re-fetch operation enables the selected delayed member to be retrieved without retrieving the non-delayed members that were returned during the initial fetch. The re-fetch operation is implemented so as to minimize the amount and complication of tasks to be performed by the user. The re-fetch is preformed via the Fill methods on corresponding CLR type instances. These methods invoke a newly added remote procedure call (RPC) entry point that takes a cookie and returns a corresponding singleton delayed member.","Specifically, to re-fetch a particular member, the user need only call the Fill method for the corresponding instance and specify a connection to database server . For value semantics, the USM of the initial fetch is also provided. Upon invocation of the Fill method, a stored procedure is executed on the database server  that receives the UDT container reference, the corresponding individual member path, and, if applicable, the USM.","At act , the re-fetch operation is executed at database server . To execute the re-fetch, the database server entry point parses the UDT container reference using the delayed fetching grammar, and builds a query tree that can be executed to retrieve the entire UDT. Once the entire UDT is obtained, the individual member path information is used to traverse down to the selected individual member that needs to be returned. This operation may include casts between subtypes and supertypes of the instance. For value semantics, the provided USM is used to identify and retrieve a prior version of the requested member from the time of the initial fetch.","At act , after the requested member is located, it is returned back to client . At act , the returned member is received by client . The CLR type instance reads the member representation, sets the member representation to the backing representation, and sets the internal state of the instance to \u201cfilled\u201d.","Thus, as set forth above with reference to , the present invention enables delayed retrieval of designated members of a UDT. In addition to providing methods for fetching UDT members from database server , the present invention may also be employed to submit an \u201cinbound\u201d UDT with delayed members to server . This feature of the present invention is particularly advantageous when client  makes a change to members of the UDT and returns the UDT or the individual changed members back to database server  for storage at data store . In this scenario, client , may submit the UDT or the individual changed members to database server  without having to first retrieve the delayable members of the UDT. Client  may return back to the database server  as an input parameter either an entire UDT instance that contains un-filled members or un-filled instances of a CLR type.","In the case of returning the entire UDT with un-filled members, a managed serializer on the client  sends the full cookie including the UDT reference  and the corresponding individual member path in place of each un-filled member value. On input, the database server  checks the UDT for embedded delayed members and expands and replaces any found delayed members. Expansion of the un-filled members is performed on the input boundary to guarantee the correct semantics. The members may be assigned from other instances, or from other versions of the same instance.","In the case of standalone instances of a CLR type, the client driver sends the cookie representation along with a metadata annotation indicating the identity of the instances. The metadata annotation makes it possible to differentiate between a cookie and an actual binary\/character value with a matching sequence.","As is apparent from the above, all or portions of the various systems, methods, and aspects of the present invention may be embodied in hardware, software, or a combination of both. When embodied in software, the methods and apparatus of the present invention, or certain aspects or portions thereof, may be embodied in the form of program code (i.e., instructions). This program code may be stored on a computer-readable medium, such as a magnetic, electrical, or optical storage medium, including without limitation a floppy diskette, CD-ROM, CD-RW, DVD-ROM, DVD-RAM, magnetic tape, flash memory, hard disk drive, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer or server, the machine becomes an apparatus for practicing the invention. A computer on which the program code executes will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. The program code may be implemented in a high level procedural or object oriented programming language. Alternatively, the program code can be implemented in an assembly or machine language. In any case, the language may be a compiled or interpreted language.","The present invention may also be embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, over a network, including a local area network, a wide area network, the Internet or an intranet, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention.","When implemented on a general-purpose processor, the program code may combine with the processor to provide a unique apparatus that operates analogously to specific logic circuits.","Moreover, the invention can be implemented in connection with any computer or other client or server device, which can be deployed as part of a computer network, or in a distributed computing environment. In this regard, the present invention pertains to any computer system or environment having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes, which may be used in connection with the present invention. The present invention may apply to an environment with server computers and client computers deployed in a network environment or distributed computing environment, having remote or local storage. The present invention may also be applied to standalone computing devices, having programming language functionality, interpretation and execution capabilities for generating, receiving and transmitting information in connection with remote or local services.","Distributed computing facilitates sharing of computer resources and services by exchange between computing devices and systems. These resources and services include, but are not limited to, the exchange of information, cache storage, and disk storage for files. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may implicate processing performed in connection with the present invention.",{"@attributes":{"id":"p-0094","num":"0106"},"figref":"FIG. 9","b":["10","10","110","110","110","14","10","10","110","110","110"],"i":["a, ","b, ","a, ","b, ","c, ","a, ","b, ","a, ","b, ","c, "]},"It can also be appreciated that an object, such as may be hosted on another computing device etc. or etc. Thus, although the physical environment depicted may show the connected devices as computers, such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs, televisions, MP3 players, etc., software objects such as interfaces, COM objects and the like.","There are a variety of systems, components, and network configurations that support distributed computing environments. For example, computing systems may be connected together by wired or wireless systems, by local networks or widely distributed networks. Currently, many of the networks are coupled to the Internet, which provides the infrastructure for widely distributed computing and encompasses many different networks. Any of the infrastructures may be used for exemplary communications made incident to the present invention.","The Internet commonly refers to the collection of networks and gateways that utilize the TCP\/IP suite of protocols, which are well-known in the art of computer networking. TCP\/IP is an acronym for \u201cTransmission Control Protocol\/Internet Protocol.\u201d The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the network(s). Because of such wide-spread information sharing, remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services, essentially without restriction.","Thus, the network infrastructure enables a host of network topologies such as client\/server, peer-to-peer, or hybrid architectures. The \u201cclient\u201d is a member of a class or group that uses the services of another class or group to which it is not related. Thus, in computing, a client is a process, i.e., roughly a set of instructions or tasks, that requests a service provided by another program. The client process utilizes the requested service without having to \u201cknow\u201d any working details about the other program or the service itself. In a client\/server architecture, particularly a networked system, a client is usually a computer that accesses shared network resources provided by another computer, e.g., a server. In the example of , computers etc. can be thought of as clients and computer etc. can be thought of as servers, although any computer could be considered a client, a server, or both, depending on the circumstances. Any of these computing devices may be processing data in a manner that implicates the invention.","A server is typically a remote computer system accessible over a remote or local network, such as the Internet. The client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server. Any software objects utilized pursuant to the invention may be distributed across multiple computing devices.","Client(s) and server(s) may communicate with one another utilizing the functionality provided by a protocol layer. For example, Hypertext Transfer Protocol (HTTP) is a common protocol that is used in conjunction with the World Wide Web (WWW), or \u201cthe Web.\u201d Typically, a computer network address such as an Internet Protocol (IP) address or other reference such as a Universal Resource Locator (URL) can be used to identify the server or client computers to each other. The network address can be referred to as a URL address. Communication can be provided over any available communications medium.","Thus,  illustrates an exemplary networked or distributed environment, with a server in communication with client computers via a network\/bus, in which the present invention may be employed. The network\/bus  may be a LAN, WAN, intranet, the Internet, or some other network medium, with a number of client or remote computing devices etc., such as a portable computer, handheld computer, thin client, networked appliance, or other device, such as a VCR, TV, oven, light, heater and the like in accordance with the present invention.","In a network environment in which the communications network\/bus  is the Internet, for example, the servers etc. can be servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers etc. may also serve as clients etc., as may be characteristic of a distributed computing environment.","Communications may be wired or wireless, where appropriate. Client devices etc. may or may not communicate via communications network\/bus , and may have independent communications associated therewith. For example, in the case of a TV or VCR, there may or may not be a networked aspect to the control thereof. Each client computer etc. and server computer etc. may be equipped with various application program modules or objects  and with connections or access to various types of storage elements or objects, across which files or data streams may be stored or to which portion(s) of files or data streams may be downloaded, transmitted or migrated. Any computer etc. may be responsible for the maintenance and updating of a database, memory, or other storage element  for storing data processed according to the invention. Thus, the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network\/bus  and server computers etc. that may interact with client computers etc. and other like devices, and databases .",{"@attributes":{"id":"p-0104","num":"0116"},"figref":["FIG. 10","FIG. 9"]},"Although not required, the invention can be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application or server software that operates in accordance with the invention. Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, the invention may be practiced with other computer system configurations and protocols. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like.",{"@attributes":{"id":"p-0106","num":"0118"},"figref":"FIG. 10","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media include both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embody computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD-RW, DVD-RW or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules  and program data . Operating system , application programs , other program modules  and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A graphics interface  may also be connected to the system bus . One or more graphics processing units (GPUs)  may communicate with graphics interface . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked or distributed environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","As the foregoing illustrates, the present invention is directed to delayed fetching of designated members of a UDT. The present invention is particularly advantageous for delaying fetching of large objects such as, for example, digital photos, video, etc. It is understood that changes may be made to the embodiments described above without departing from the broad inventive concepts thereof. For example, while an embodiment of the present invention has been described above as being implemented in Microsoft's SQL SERVER database management system, it is understood that the present invention may be embodied in any database management system that supports the creation of user defined types. Additionally, while certain aspects of the present invention have been described as being embodied in the context of the WinFS storage platform described above, it is understood that those aspects of the present invention are by no means limited to implementation in that environment. Rather, the methods and systems of the present invention can be embodied in any system in which storage and retrieval of members of a user defined type is desirable. Accordingly, it is understood that the present invention is not limited to the particular embodiments disclosed, but is intended to cover all modifications that are within the spirit and scope of the invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The illustrative embodiments will be better understood after reading the following detailed description with reference to the appended drawings, in which:",{"@attributes":{"id":"p-0050","num":"0059"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0051","num":"0060"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0052","num":"0061"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0053","num":"0062"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0054","num":"0063"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0055","num":"0064"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0056","num":"0065"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0057","num":"0066"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0058","num":"0067"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0059","num":"0068"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
