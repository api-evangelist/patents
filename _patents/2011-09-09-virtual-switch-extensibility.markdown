---
title: Virtual switch extensibility
abstract: An extensible virtual switch allows virtual machines to communicate with one another and optionally with other physical devices via a network. The extensible virtual switch includes an extensibility protocol binding, allowing different extensions to be added to the extensible virtual switch. The extensible virtual switch also includes a miniport driver on which the extensions are loaded, tying the lifetimes of the extensions to the lifetime of the extensible virtual switch.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08966499&OS=08966499&RS=08966499
owner: Microsoft Technology Licensing, LLC
number: 08966499
owner_city: Redmond
owner_country: US
publication_date: 20110909
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Virtual machines are software implementations of a physical device that can run programs analogous to a physical device. Virtual machines can oftentimes communicate with one another, as well as other physical devices, using a switch. Virtual machines provide various benefits, but are not without their problems. One such problem is that situations can arise in which developers desire to implement switches having different functionality. However, designing new switches for each different desired functionality or combination of functionalities can be time consuming and burdensome for the developer.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","In accordance with one or more aspects a data packet is received, at an extensible virtual switch of a computing device, from a source. The extensible virtual switch allows one virtual machine of the computing device to communicate with another virtual machine of the computing device. The data packet is passed through one or more extensions to the extensible virtual switch, the extensible virtual switch communicating with the one or more extensions using a common protocol. After passing the data packet through the one or more extensions, the data packet is provided to a destination of the data packet.","In accordance with one or more aspects, a virtual switch miniport is included in an extensible virtual switch of a computing device. The extensible virtual switch allows a first virtual machine of the computing device to communicate with a second virtual machine of the computing device. One or more extensions to extend the functionality of the extensible virtual switch are loaded on the virtual switch miniport.","Virtual switch extensibility is discussed herein. An extensible virtual switch allows virtual machines to communicate with one another and optionally with other physical devices via a network. The extensible virtual switch includes an extensibility protocol binding and miniport driver, allowing different extensions to be added to the extensible virtual switch and thus extending the functionality of the extensible virtual switch. The extensions are loaded on the miniport driver, essentially tying the lifetimes of the extensions to the lifetime of the extensible virtual switch.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100","102","104","104","102","102"]},"Computing device  includes a physical interface , a virtual machine manager , and one or more virtual machines (), . . . , (). Physical interface  is a communication component, such as a wired and\/or wireless network adapter (e.g., network interface card (NIC)). Virtual machine manager  manages the creation, operation, and termination of virtual machines , including access to the functionality provided by physical interface  for virtual machines . Although a single physical interface  is illustrated in , it should be noted that computing device  can include multiple physical interfaces of the same and\/or different types, and that virtual machine manager  can manage access to the functionality provided by those multiple physical interfaces.","Virtual machine manager  allows one or more virtual machines  to run on computing device . Any number of virtual machines can run be on computing device . A virtual machine refers to a software implementation of a computing device (or other machine or system) that can run programs analogous to a physical computing device. Each virtual machine  can execute an operating system and other applications, and each such operating system and application need have no knowledge that it is executing in a virtual machine.","Virtual machine manager  includes a virtual machine (VM) control module , an extensible virtual switch , and a miniport driver . Virtual machine control module  manages the execution of virtual machines , allowing virtual machines to be run (launched) and terminated, controlling migrating of virtual machines from one computing device to another (e.g., between computing device  and another computing device via network ), and so forth. Extensible virtual switch  allows virtual machines  to communicate with one another as well as optionally other physical devices via physical interface  and network . Extensible virtual switch  is extensible, allowing different extensions to be added to extensible virtual switch  as discussed in more detail below. Miniport driver  is an interface providing operations specific to physical interface  and allowing extensible virtual switch  to communicate with physical interface . Although a single miniport driver  is illustrated in computing device , if computing device  includes multiple physical interfaces  then computing device  also typically includes multiple miniport drivers  (one corresponding to each physical interface ).","Although a single extensible virtual switch  is illustrated in computing device , it should be noted that computing device  can include any number of extensible virtual switches. Each extensible virtual switch can allow virtual machines  to communicate with one another and\/or with other physical devices via physical interface  and\/or other physical interfaces. Each extensible virtual switch can have different extensions loaded and\/or have extensions loaded in different orders. The loading and ordering of extensions is discussed in more detail below.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["202","202","124","202","204","206","204","202","204","126"]},"Data is referred to herein as being communicated as data packets. A data packet refers to data plus various metadata associated with the data, such as an indication of the source of the data packet (e.g., a network address or other identifier of a virtual machine, a network address or other identifier of a physical device, etc.), an indication of the target or destination of the data packet (e.g., a network address or other identifier of a virtual machine, a network address or other identifier of a physical device, etc.), and so forth. Although discussed herein as being communicated using data packets, it should be noted that data can be communicated using various other data structures.","Each switch port  is a communication connection with a virtual machine network adapter (e.g., NIC). A virtual machine (e.g., each virtual machine  of ) includes a VM network adapter that is similar to (but is a software implementation of) a physical network adapter (e.g., physical interface  of ). A VM network adapter can connect or attach to a switch port , and a virtual machine can optionally have multiple VM network adapters each connecting or attaching to a different switch port . An operating system as well as other applications can execute on the virtual machine using the VM network adapter as they would using a physical network adapter, sending data packets to and receiving data packets from the VM network adapter.","Extensible virtual switch  also includes a virtual switch extensibility protocol binding . Extensibility protocol binding  exposes a set of interfaces that can be used by one or more extensions  to extend the functionality provided by extensible virtual switch . Extensions  are essentially inserted into the data flow path of extensible virtual switch , allowing data packets to be modified by extensions . Any number (y) of extensions  can be inserted into the data flow path of extensible virtual switch . Extensions  can provide various functionality, and extensible virtual switch  need not be modified in order for different extensions  to provide their functionality. Rather, extensible virtual switch  remains the same but the functionality provided by switch  can be extended using different extensions  with different functionality.","Extensible virtual switch  also includes a virtual switch miniport . Virtual switch miniport  is an interface that is presented to extensions  as if the interface were a conventional miniport driver (e.g., a miniport driver  of ). However, virtual switch miniport  is an interface provided to support the extensibility of extensible virtual switch . Data packets received by virtual switch miniport  are passed back through extensions  rather than being communicated to a physical interface, as discussed in more detail below. Virtual switch miniport  can also be referred to as a hidden miniport or phantom miniport due to miniport  being used to support the extensibility of extensible virtual switch  rather than communicating data to and\/or from a physical interface.","When extensible virtual switch  is created (e.g., instantiated) on a computing device, a VM control module (e.g., VM control module  of ) allows one or more extensions  to be loaded on virtual switch miniport . Extensions  as loaded create an extension stack, analogous to a network stack that would be loaded on a conventional miniport driver (e.g., a miniport driver  of ), except that the extension stack includes extensions loaded on a hidden miniport or phantom miniport.","The VM control module can determine which extensions are loaded in a variety of different manners. Generally, a request to have an extension loaded is received, such as from the extension itself or another component or module as part of a registration process. The VM control module can approve or disapprove an extension from being loaded, such as based on an identity of a vendor from which the extension is received, based on input from a user or administrator of the computing device running the VM control module, and so forth. Once an extension  is approved for loading, the VM control module loads the extension  each time the extensible virtual switch  is created on the computing device.","The VM control module can also determine the order in which extensions  are loaded in a variety of different manners. For example, the order in which extensions are loaded can be received as inputs from a user or administrator of the computing device running the VM control module, can be received from another component or module, and so forth. The VM control module maintains a record of this ordering, and loads extensions  in this ordering each time the extensible virtual switch  is created on the computing device.","It should be noted that the order in which extensions are loaded can be changed (reordered) at any time, resulting in a different ordering of extensions  the next time extensions  are loaded. The VM control module can determine the reordered ordering in which extensions are loaded in a variety of different manners. For example, the reordered ordering in which extensions are loaded can be received from a user or administrator of the computing device running the VM control module, can be received from another component or module, and so forth. The VM control module maintains a record of this reordered ordering, and loads extensions  in this reordered ordering each time the extensible virtual switch  is created on the computing device (unless the ordering is subsequently changed yet again).","Because extensions  are loaded on virtual switch miniport , each time the extensible virtual switch  is created on the computing device virtual switch miniport  is created and the extensions  are loaded on the virtual switch miniport . Thus, the extensions  are automatically loaded each time extensible virtual switch  is created. And, the extensions  are not loaded if extensible virtual switch  is not created. Similarly, if extensible virtual switch  is created but then deleted, then in response to deletion of extensible virtual switch  both virtual switch miniport  and the extensions  loaded on virtual switch miniport  are also deleted. Thus, the lifetimes of the extensions  are tied to the lifetime of extensible virtual switch \u2014if extensible virtual switch  exists (has been created and is running) then extensions  also exist (have been loaded and are running), but if extensible virtual switch  does not exist (has not been created or is not running) then extensions  do not exist (have not been loaded or have been unloaded).","In one or more embodiments, virtual switch extensibility protocol binding  conforms to a common protocol, exposing a common application programming interface (API) that can be used by one or more extensions . This common API allows communication between extensions  and extensibility protocol binding . This communication includes communicating data packets, communicating control and\/or status information, and so forth. The protocol being a common protocol refers to the protocol being a well-known protocol. In one or more embodiments, extensibility protocol binding  conforms to the Network Device Interface Specification (NDIS) protocol, including current and\/or later versions of the NDIS protocol. However, in other embodiments extensibility protocol binding  can conform to other versions of the NDIS protocol and\/or other protocols (such as the Open Data-Link Interface (ODI) protocol).","It should be noted that, by extensibility protocol binding  conforming to the NDIS or other known protocol and by the loading of extensions on virtual switch miniport , a break point in extensible virtual switch  is exposed. This break point appears as a conventional network stack to extensions , allowing developers of extensions  to design extensions  to insert into this break point using a known protocol and model that they are accustomed to working with. Developers need not redesign extensions  to work in a virtual machine environment, as the protocol the extensions  would use to communicate with a miniport driver in a non-virtual machine environment is the same protocol that is being supported by extensibility protocol binding . Thus, the virtual switch extensibility techniques discussed herein allow developers of extensions  to readily use extensions developed for non-virtual machine environments in virtual machine environments, and vice versa.","Virtual switch extensibility protocol binding  allows one or more extensions to communicate with extensible virtual switch , receiving data packets from and\/or providing data packets to extensible virtual switch . Extensions  form an extension stack, each extension receiving a data packet, optionally performing one or more operations based on the data packet, and providing the data packet to the next extension in the stack. Data can be provided bi-directionally in the extension stack, both in an ingress direction and in an egress direction as discussed in more detail below. The ingress direction refers to the direction of data flow from binding  or a switch port  towards the virtual switch miniport , and the egress direction refers to the direction of data flow from the virtual switch miniport  towards binding  or a switch port . How extensions  are to provide data packets to one another and\/or virtual switch miniport  can be determined in different manners. For example, when an extension  is loaded on virtual switch miniport , part of the loading process can be establishing (e.g., informing the extensions ) how to provide data packets to one another and\/or virtual switch miniport . By way of another example, the manner in which extensions  are to provide data packets to one another and\/or virtual switch miniport  can be inherent in the protocol to which virtual switch extensibility protocol binding  conforms.","In one or more embodiments, extensions  are configured to directly receive data packets from and transfer data packets to other extensions . For example, the extension  illustrated as \u201cWFP Extension\u201d can receive data packets from extensible virtual switch , perform one or more operations based on the data packet, and transfer the data packet to the extension  illustrated as \u201cExtension()\u201d. Alternatively, extensions  can be configured to communicate with other extensions  via extensible virtual switch . For example, the extension  illustrated as \u201cWFP Extension\u201d can receive data packets from extensible virtual switch , perform one or more operations based on the data packet, and return the data packet to extensible virtual switch , which can then transfer the data packet to the extension  illustrated as \u201cExtension()\u201d.","Extensions  can perform any of a variety of different operations based on the data packet. These operations can include transforming or modifying data packets so that a data packet received by an extension  is different than the data packet transferred by that extension  to another extension . These operations can also include generating or modifying other data based on the data packet so that a data packet received by an extension  is the same as the data packet transferred by that extension  to another extension . For example, extensions  can encrypt and\/or decrypt data in a data packet, can perform malware checks on data in a data packet, can monitor where data is being sent to and\/or received from, can translate data in a data packet from one format to another, can restrict which other virtual machines another virtual machine can communicate with, can restrict which other physical devices a virtual machine can communicate with, and so forth. It should also be noted than an extension  need not perform any operation based on the data packet, and can simply transfer the data packet to another extension .","In one or more embodiments, one or more extensions  are protocol conversion extensions, allowing data packets to be converted from one protocol to another. Such a conversion extension can communicate with one or more additional extensions  using a different protocol or API, allowing various different extensions  to be used even if those extensions do not conform to the same protocol or API as extensibility protocol binding . For example, the extension  illustrated as \u201cWFP Extension\u201d can receive data packets from extensible virtual switch  and convert those data packets from the protocol used by extensibility protocol binding  (e.g., the NDIS protocol) to the Windows Filtering Platform (WFP). The extension can communicate with extensibility protocol binding  using the NDIS protocol API, can communicate with one or more other extensions using the WFP protocol API, and translates or converts data as appropriate between the NDIS and WFP protocols. Thus, one or more additional extensions , such as the extension  illustrated as \u201cWFP driver\u201d can be included in extensions  even though such additional extensions  do not use the same API as extensibility protocol binding .","During operation the data flow path for data packets through extensible virtual switch  and extensions  is as follows. A data packet is received by extensible virtual switch  via binding  or a switch port , and provided to virtual switch extensibility protocol binding . Extensibility protocol binding  provides the data packet to an extension . The extension  to which the data packet is provided is the top extension  in the extension stack, and the data packet is transferred in the ingress direction through the extension stack. The order of the extensions can be determined in different manners as discussed above. One extension  is determined to be the top of the extension stack, and is the extension  illustrated as \u201cWFP Extension\u201d in the example of . Another extension  is determined to be the bottom of the extension stack, and is the extension  illustrated as \u201cExtension (y)\u201d in the example of . The extension at the top of the extension stack (also referred to as the top extension) is the extension  that initially (before any other extension ) receives data packets from extensible virtual switch . The extension at the bottom of the extension stack (also referred to as the bottom extension) is the extension  that last (after all other extensions ) receives data packets prior to transferring the data packets to virtual switch miniport . Data packets being transferred from the top of the extension stack to the bottom of the extension stack are also referred to as passing in the ingress direction through the extension stack. Data packets being transferred from the bottom of the extension stack to the top of the extension stack are also referred to as passing in the egress direction through the extension stack.","After passing in the ingress direction through extensions , the data packet is received by virtual switch miniport . Virtual switch miniport  provides the data packet  to ingress filtering module . Ingress filtering module  can perform various filtering of data packets (whether received from binding  or a switch port ), preventing or allowing data packets from being communicated to their requested destination based on various ingress filtering criteria. For example, the ingress filtering criteria can identify (e.g., based on network addresses) one or more data packet sources, and ingress filtering module  prevents a data packet from being communicated to its destination if the data packet is received from one of the identified one or more data packet sources.","If ingress filtering module  determines the data packet is not allowed to be transferred to its requested destination, then module  stops the data packet (e.g., deletes or otherwise ignores the data packet). However, if ingress filtering module  determines that the data packet is allowed to be transferred to its requested destination, then ingress filtering module  provides the data packet to forwarding module , which performs one or more forwarding operations on the data packet. Generally, such forwarding operations include modifying or generating a network address of the destination of the data packet (as modified, if at all, by extensions ). For example, the forwarding can include translating the network address of the destination from one format to another, translating the network address of the destination from one network address space to another, and so forth.","Forwarding module  provides the data packet to egress filtering module , which can perform various filtering of data packets, preventing or allowing data packets from being communicated to their requested destination based on various egress filtering criteria. For example, the egress filtering criteria can identify (e.g., based on network addresses) one or more data packet destinations, and egress filtering module  prevents a data packet from being communicated to its destination if the destination is one of the identified one or more data packet sources.","If egress filtering module  determines the data packet is not allowed to be transferred to its requested destination, then module  stops the data packet (e.g., deletes or otherwise ignores the data packet). However, if egress filtering module  determines that the data packet is allowed to be transferred to its requested destination, then egress filtering module  provides the data packet to an extension . The extension  to which the data packet is provided is the bottom extension  in the extension stack, and the data packet is transferred in the egress direction through the extension stack.","Each extension  can perform various operations based on the data packet as the data packet passes in the ingress direction and in the egress direction through the extension stack. It should be noted that an extension  need not perform an operation based on each data packet as the data packet passes in the ingress direction and in the egress direction through the extension stack. For example, an extension  may perform an operation based on the data packet (e.g., encrypting the data in the data packet) as the data packet passes in the ingress direction through the extension stack, but not perform any operation based on the data packet as the data packet passes in the egress direction through the extension stack. By way of another example, an extension  may perform an operation based on the data packet (e.g., encrypting the data in the data packet) as the data packet passes in the ingress direction through the extension stack, and perform another operation based on the data packet (e.g., decrypting the data in the data packet) as the data packet passes in the egress direction through the extension stack.","After passing in the egress direction through extensions , the data packet is received by virtual switch extensibility protocol binding . Extensibility protocol binding  provides the data packet to the appropriate one of binding  (which transfers the data packet to its destination via a physical interface) or switch port  (which transfers the data packet to its destination virtual machine). Extensibility protocol binding  can determine whether to provide the data packet to binding  or a switch port  based on, for example, the network address of the destination of the data packet.","The data flow for each data packet (that is not stopped due to ingress filtering module  or egress filtering module , or a filter of an extension ) follows the same paths in the ingress direction and in the egress direction through the extensions . Thus, the virtual switch extensibility techniques discussed herein provide a deterministic ordering of the extensions  for data packets. Each data packet passes in the ingress direction through the extensions  in the extension stack beginning at the same top of the extension stack and finishing at the same bottom of the extension stack, and passes in the egress direction through the extensions  in the extension stack beginning at the same bottom of the extension stack and finishing at the same top of the extension stack.","Extensible virtual switch  is illustrated as including both binding  and one or more switch ports . Alternatively, an extensible virtual switch  can be implemented that excludes support for communication with other devices via a physical interface. For example, an extensible virtual switch  may only support communication among virtual machines, or among virtual machines and a host operating system on the computing device implementing the virtual machines. In such embodiments, extensible virtual switch  need not include binding .","Additionally, in one or more embodiments, virtual machine network adapters can have various extension criteria that are to be satisfied by an extensible virtual switch in order for the virtual machine network adapter to connect to an extensible virtual switch. These extension criteria identify various extensions  that are to be loaded by an extensible virtual switch and\/or are not to be loaded by an extensible virtual switch in order for the virtual machine to use the extensible virtual switch. A virtual machine network adapter has associated extension criteria (e.g., set by a user or administrator), and the virtual machine control module (e.g., module  of ) verifies that an extensible virtual switch satisfies the associated extension criteria before connecting the virtual machine network adapter to a switch port of the extensible virtual switch.","For example, a particular virtual machine network adapter may be configured to transmit data packets to other physical devices over the Internet, and thus have extension criteria indicating that the extensible virtual switch is to have an extension loaded that performs encryption of data packets. The virtual machine control module verifies that a particular extensible virtual switch has an extension loaded that performs encryption of data packets. If the particular extensible virtual switch has an extension loaded that performs encryption of data packets, then the virtual machine control module allows the particular virtual machine network adapter to connect to that particular extensible virtual switch. However, if the particular extensible virtual switch does not have an extension loaded that performs encryption of data packets, then the virtual machine control module does not allow the particular virtual machine network adapter to connect to that particular extensible virtual switch.","The extension criteria can be used when virtual machines and\/or extensible virtual switches are created. For example, the virtual machine control module verifies that a particular extensible virtual switch satisfies the extension criteria when a virtual machine and\/or extensible virtual switch is created, and allows or prevents a virtual machine network adapter from connecting to a switch port of the extensible virtual switch based on whether the extensible virtual switch satisfies the extension criteria. The extension criteria can also be used when a virtual machine is migrated from one computing device to another computing device. In one or more embodiments, a virtual machine is migrated to another computing device only if an extensible virtual switch on the other computing device satisfies the extension criteria of the virtual machine network adapter. If the extension criteria of the virtual machine network adapter are not satisfied by an extensible virtual switch of another computing device, then the virtual machine having that virtual machine network adapter is not migrated to that other computing device.","Additionally, in one or more embodiments, virtual switch extensibility protocol binding  receives indications (e.g., via the API exposed by extensibility protocol binding ) from an extension  when that extension  desires to perform an operation based on data packets. If one or more extensions  desire to perform at least one operation based on data packets, then the data flow path for data packets through extensible virtual switch  and extensions  is as discussed above. However, if none of extensions  desire to perform an operation based on data packets, then the data packets need not be provided to extensions . Rather, the data flow path for data packets can be from extensibility protocol binding  to virtual switch miniport  to ingress filtering module  to forwarding module  to egress filtering module  to extensibility protocol binding , bypassing extensions .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 1"],"b":["300","300","102","300","300"]},"In process , a data packet is received at an extensible virtual switch of the device implementing process  (act ). The data packet can be received from a virtual machine of the device implementing process  or from another device, as discussed above.","The data packet is passed through one or more extensions to the extensible virtual switch (act ). The extensible virtual switch communicates with the one or more extensions using a common protocol, such as the NDIS protocol as discussed above.","The data packet is provided, after being passed through the one or more extensions, to a destination of the data packet (act ). The destination can be a virtual machine of the device implementing process  or another device, as discussed above.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 1"],"b":["400","400","102","400","400"]},"In process , a virtual switch miniport is included in an extensible virtual switch of the device implementing process  (act ). The extensible virtual switch allows virtual machines of the device implementing process  to communicate with one another, and optionally to other devices as discussed above.","One or more extensions to extend the functionality of the extensible virtual switch are loaded on the virtual switch miniport (act ). The lifetime of each of the one or more extensions is thus tied to the lifetime of the virtual switch miniport, as discussed above.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 5","FIG. 1"],"b":["500","500","102"]},"Computing device  includes one or more processors or processing units , one or more computer readable media  which can include one or more memory and\/or storage components , one or more input\/output (I\/O) devices , and a bus  that allows the various components and devices to communicate with one another. Computer readable media  and\/or one or more I\/O devices  can be included as part of, or alternatively may be coupled to, computing device . Processor , computer readable media , one or more of devices , and\/or bus  can optionally be implemented as a single component or chip (e.g., a system on a chip). Bus  represents one or more of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, a processor or local bus, and so forth using a variety of different bus architectures. Bus  can include wired and\/or wireless buses.","Memory\/storage component  represents one or more computer storage media. Component  can include volatile media (such as random access memory (RAM)) and\/or nonvolatile media (such as read only memory (ROM), Flash memory, optical disks, magnetic disks, and so forth). Component  can include fixed media (e.g., RAM, ROM, a fixed hard drive, etc.) as well as removable media (e.g., a Flash memory drive, a removable hard drive, an optical disk, and so forth).","The techniques discussed herein can be implemented in software, with instructions being executed by one or more processing units . It is to be appreciated that different instructions can be stored in different components of computing device , such as in a processing unit , in various cache memories of a processing unit , in other cache memories of device  (not shown), on other computer readable media, and so forth. Additionally, it is to be appreciated that the location where instructions are stored in computing device  can change over time.","One or more input\/output devices  allow a user to enter commands and information to computing device , and also allows information to be presented to the user and\/or other components or devices. Examples of input devices include a keyboard, a cursor control device (e.g., a mouse), a microphone, a scanner, and so forth. Examples of output devices include a display device (e.g., a monitor or projector), speakers, a printer, a network card, and so forth.","Various techniques may be described herein in the general context of software or program modules. Generally, software includes routines, programs, applications, objects, components, data structures, and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example, and not limitation, computer readable media may comprise \u201ccomputer storage media\u201d and \u201ccommunication media.\u201d","\u201cComputer storage media\u201d include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer. Computer storage media refer to media for storage of information in contrast to mere signal transmission, carrier waves, or signals per se. Thus, computer storage media refers to non-signal bearing media, and is not communication media.","\u201cCommunication media\u201d typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also include any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.","Generally, any of the functions or techniques described herein can be implemented using software, firmware, hardware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule\u201d and \u201ccomponent\u201d as used herein generally represent software, firmware, hardware, or combinations thereof. In the case of a software implementation, the module or component represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices, further description of which may be found with reference to . In the case of hardware implementation, the module or component represents a functional block or other hardware that performs specified tasks. For example, in a hardware implementation the module or component can be an application-specific integrated circuit (ASIC), field-programmable gate array (FPGA), complex programmable logic device (CPLD), and so forth. The features of the virtual switch extensibility techniques described herein are platform-independent, meaning that the techniques can be implemented on a variety of commercial computing platforms having a variety of processors.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like features.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
