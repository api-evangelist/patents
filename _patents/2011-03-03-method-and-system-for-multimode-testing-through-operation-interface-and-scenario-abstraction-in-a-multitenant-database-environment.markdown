---
title: Method and system for multi-mode testing through operation interface and scenario abstraction in a multi-tenant database environment
abstract: Embodiments are described for a system and method for testing a hosted application through a test framework that uses the same operational test code for any one of a plurality of application interfaces. A method under embodiments defines a set of test operations comprising a test for the hosted application, each test operation interacting with the application through an interface of a plurality of interfaces; defines a set of test scenarios, with each test scenario including a number of generic test steps and test operations, and wherein each test scenario includes a function call to the test operation corresponding to the interface to be tested; and executes one or more of the test scenarios to implement a test on the interface to be tested for the hosted application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09529698&OS=09529698&RS=09529698
owner: salesforce.com, inc.
number: 09529698
owner_city: San Francisco
owner_country: US
publication_date: 20110303
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application 61\/363,988 entitled METHODS AND SYSTEMS FOR TESTING AN INTERFACE IN A MULTI-TENANT DATABASE ENVIRONMENT, by Keng-Woei Tan et al., filed Jul. 13, 2010, the entire contents of which are incorporated herein by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","One or more implementations relate generally to multi-tenant database systems, and more specifically to multi-mode testing of database components.","The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly, a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches, which in and of themselves may also be inventions.","In multi-tenant database systems, such as the salesforce.com service, a multi-tenant architecture is used wherein users or customer organizations (i.e., tenants) share database resources that are organized as one logical database. The database tables themselves are typically shared and logical structures are employed to ensure differentiation and security among the different tenants. For example, each entity in the data model typically contains an organization_id column that distinguishes rows for each tenants. All queries and data manipulations for a tenant use a filter on this indexed column to ensure proper security and the appearance of virtual private databases. The data structure can be used to expose standard entities, such as Account, Contact, Lead, and Opportunity entities to customers.","In a multi-tenant database system, there are typically various applications and processes that are exposed to users through multiple modes of operation. For example, interfacing to the system applications could accomplished through user interfaces (UI), application program interfaces (API), or other development platforms that allow developers to access back-end processes and client-server interfaces. Each of these interfaces represents a different mode of operation. Oftentimes, these applications and processes are required to be tested for all the different supported modes of operation to ensure proper operation across all possible operational modes. In a traditional testing approach, a system administrator or other personnel needs to create test automation for those each of these different modes of operation independently. This results in the replication of the same test scenarios across multiple test suites for different operations, which results in an increase in the effort of test automation and in the deployment and use of redundant test code.","Accordingly, it is desirable to provide techniques enabling efficient testing of multi-tenant database components for different operational modes.","In an embodiment and by way of example, there are provided mechanisms and methods for providing a multi-mode testing scheme for components of a multi-tenant database system. For applications that have multiple modes of interaction with a user or system, such as through a user interface (UI), remote API interface, or local API interface, embodiments include a test framework that abstracts and separates the operational functions from the test scenarios. In this manner, the same test code for the operational functions can be used regardless of the interface to the application. A method under embodiments defines a set of test operations comprising a test for the hosted application, with each test operation interacting with the application through an interface of a plurality of interfaces, and it defines a set of test scenarios, with each test scenario including a number of generic test steps and test operations, and wherein each test scenario includes a function call to the test operation corresponding to the interface to be tested. The one or more test scenarios can then be executed to implement a test on the interface to be tested for the hosted application.","While one or more implementations and techniques are described with reference to an embodiment in which a method for providing an efficient test scheme for multiple for an on-demand database service capable of supporting multiple tenants, the one or more implementations and techniques are not limited to multi-tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures, i.e., ORACLE\u00ae, DB2\u00ae by IBM and the like without departing from the scope of the embodiments claimed.","Any of the above embodiments may be used alone or together with one another in any combination. The one or more implementations encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art, which may be discussed or alluded to in one or more places in the specification, the embodiments do not necessarily address any of these deficiencies. In other words, different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification, and some embodiments may not address any of these deficiencies.","Systems and methods are described for a testing framework that provides an efficient method for testing a multi-tenant database system through multiple modes of interface accessibility. Aspects of the one or more embodiments described herein may be implemented on one or more computers executing software instructions. The computers may be networked in a client-server arrangement or similar distributed computer network, and one or more of the networked computers may execute application programs that require periodic testing to ensure continuing functionality.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","104","102","110","104","102","110"]},"The client computer  of system  may be a workstation computer or it may be a computing device such as a workstation, personal computer, notebook computer, personal digital assistant, or the like. The server computer  may likewise be implemented within any suitable networkable computing device, such as server-class computers, workstations, personal computers, or any similar device capable of hosting applications accessed over network .","In a typical implementation, server computer  may be a World-Wide Web (WWW) server that stores data in the form of web pages and transmits these pages as Hypertext Markup Language (HTML) files over the Internet  to client computer . In a web-based network in which network  is the Internet, network server  executes a web server process  to provide HTML documents, typically in the form of web pages, to client computers coupled to the network. To access the HTML files provided by server , client computer  executes a web browser process  to access web pages available on server  and other Internet server sites, such as other content providers.","One or more of the computers in system  may execute application programs to perform certain functions. The applications may be installed and executed locally on client computer  through local application programs . Applications executed on or for client computer  may also be hosted on the server computer  through hosted application programs . The applications  and\/or  may need to be tested at least periodically to ensure functionality. Specialized test routines are usually developed to run the applications through a full suite of tests, depending on system requirements and constraints. Such test programs can be part of an overall test framework that is provided by server . In an embodiment, the server computer  executes one or more test programs that may be part of an overall routine to test the functionality of applications  and\/or .","In one embodiment, the server  is an enterprise server computer that provides comprehensive application and data management functions to a large number of client computers, such as client . In this case, the server  (which may be implemented as a plurality of separate server computers) functions as a platform for certain customer relationship management (CRM) and database management functions. CRM is generally understood to be a strategy for managing a company's interactions with customers, clients and sales prospects. The CRM platform includes components that organize, automate, and synchronize business processes, such as sales, marketing, customer service, technical support, and other similar activities. CRM functions help companies find and manage clients. For the embodiment of , server  may be embodied as an enterprise cloud computing server that distributes business software on a subscription basis and hosts applications  offsite of the client  site. These applications can be part of a CRM platform that is provided through a Software as a Service (SaaS) model in which software is deployed over the Internet  and\/or is deployed to run behind a firewall on the client .","In a large scale SaaS enterprise system, such as the Salesforce.com system, there are various applications and processes that are exposed to users through multiple modes of access or operation. These modes of operation include access through web-based user interface, application program interfaces (API), and local host access, among others.  illustrates various modes of access to hosted applications in a CRM platform, under an embodiment. As shown in system , a CRM platform server computer hosts a plurality of applications . These applications are typically developed by different developers or service providers and hosed on the CRM platform for access by remote users over the Internet. Each hosted application  in turn may include a number of different processes or sub-applications. The applications are exposed to users through various different interfaces. These can include a web browser user interface  or an API-based interface , which both represent remote interfaces to platform  by users or processes that are separate from the platform servers.","The interface to the hosted applications  can also be provided locally through interface , which is resident on the platform server . In an embodiment, the local interface is an Apex\u2122 interface. Apex is a development platform for building software as a service (SaaS) applications on top of the customer relationship management (CRM) functionality provided by Salesforce.com. A local interface, such as Apex allows developers to access the back-end database  and client-server interfaces to create third-party SaaS applications. The Apex interface  includes an API that developers can use to access user data stored in the one or more databases  on the CRM platform . Such an API generally allows developers to use common SaaS components, like web widgets or a multi-tenant database, without the need to develop much of the infrastructure traditionally associated behind SaaS programs. As shown in , Apex applications are usually hosted and run directly from the CRM platform server . As a hosted application, no installation of the application is necessary on the user's client computer. The Apex API is a method of retrieving raw data from the CRM server  for use by the client. The API is local to the CRM server, but is used by programs that are external to the CRM server, such as Java applications that need access to information on a client CRM account.","The applications and processes  within the CRM platform  are generally required to be tested for all the different supported modes of operation. In the traditional testing approach, one would create tests for each of the different modes of operation independently, and replicate the same test scenarios across multiple test suites for different operations. This obviously increases the effort of test automation and results in redundant test code. To eliminate this problem, a test framework under embodiments comprises a test automation approach that performs tests for all of the different operation modes using a common program base. The multi-mode test framework comprises two main components of (1) operation interface and (2) scenario abstraction.","Each application  typically comprises both a front-end component and a back-end component. The front-end component includes processes that interact with the user through a user interface, such as the web browser . The front-end component provides an interface through which a user can access and log into an application and then perform tasks, such as creating or modifying database records. The back-end component includes processes that interact with the application through API-based processes  and\/or . Through the API interface, users can write custom program code and call an API to create or modify records. The API can be either remote to the system or it may be local to the system. A remote API is usually executed on the client computer  for interfacing to the hosted applications  on the server , whereas the local API is executed directly on the server . One example of a local API interface is the Apex code provided by Salesforce.com for use with their CRM platform. Using Apex, a user writes code in the Apex language and uses the API that is hosted locally on the server computer .","In general, the front-end and back-end processes may perform many of the same tasks, with the difference being in the interface to the user through the different paths of UI, API, or Apex code. The test framework separates and isolates the actions from the operations. The operations are standard steps initiated by the user and are performed through the UI, remote API, or server-side API (e.g., Apex) interface. With respect to a database system, example operations include starting a sync, stopping a sync, adding a record, editing a record, and so on. Each of these operations can be performed through any one of the interfaces, and the core functionality of each operation remains the same regardless of the interface that is used. The actions comprise the actual processing steps within the operation and that are generic to the operation regardless of the interface. The test framework defines the different standard operations that can be performed by the user. The test framework also defines the different test scenarios for the test or tests that can be performed on the operations. In a database system, an example test scenario could include the steps of: setting up the records, perform the operations, and verify the results. These test scenario steps are abstracted out of the test environment, so that when a test is implemented it only needs to be executed once for any or all of the possible interfaces (UI, API, Apex). The operation actions are provided in a separate class then the test. In this way, the core test functions are separated and decoupled from the operation actions and do not need to be replicated or rewritten for the separate interfaces. The test framework thus comprises the generic operations defined as a separate class and the test steps which are passed in to the different interface operations. In this manner, the test steps are run in the context of each specific interface.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 3"],"b":["300","302","304"]},"Next, an abstract class is created that defines the structure of a test scenario that takes SimpleOperation as an input parameter, block . For example, in the BaseTestScenario class, there is a method called run( ) that invokes setup( ), runScenario( ) and cleanup( ) methods to execute a test scenario. There can be many different implementations of BaseTestScenario class that are developed for testing various distinct scenarios, e.g. TestScenario, TestScenario, . . . TestScenarioN, and so on. These test scenario implementations are reusable in conjunction with different concrete operation class to achieve multi-mode testing in which the same test is performed for each of the three interface modes of operation, block .","A traditional test performed for each of the interfaces of UI, API, and Apex may be implemented as three separate sets of test code as follows:",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"UI Interface","API Interface","Apex Interface"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Test 1 ( )","Test 1 ( )","Test 1 ( )"]},{"entry":[{},"\u2002setup ( )","\u2002setup ( )","\u2002setup( )"]},{"entry":[{},"\u2002UI operation","\u2002API operation","\u2002Apex operation"]},{"entry":[{},"\u2002verify( )","\u2002verify( )","\u2002verify( )"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"As can be seen in the above case, three different tests need to be executed, one for each of the interfaces, with the operation steps distinguished on the basis of the interface. In an embodiment, the multi-mode testing framework separates the test scenario from the operations steps so that the operational steps can be reused. In this case, the test scenario is made generic with respect to the interface, and the operation is then defined with respect to the functions of the operation and the different interfaces. This can be illustrated as follows:",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Test Scenario (operation)","Operation ( )"]},{"entry":[{},"\u2002setup ( )","\u2002startsync ( )"]},{"entry":[{},"\u2002operation","\u2002stopsync ( )"]},{"entry":[{},"\u2002verify ( )","\u2002cancel ( )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"\u2003-","UI operation"]},{"entry":[{},{},"\u2003-","API operation"]},{"entry":[{},{},"\u2003-","Apex operation"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"As can be seen, the abstraction allows the operation to be passed as an argument to the test scenario. The setup and verify, and other common functions are common to the different test scenarios and can be statically defined. The operation portion is passed through the appropriate interface, e.g., UI, API, or Apex. If the UI operation is called, the operation will be called through the UI, if the API operation is called, the operation will be called through the API, and if the Apex operation is called, the operation will be called through Apex. In this manner, the operation is only defined once and used multiple times depending on the interface that is used.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["414","1","412","2","416","3","418","405","406","403","404","401","402","410","414","410"]},"In an embodiment, the testing framework creates an extensible scenario based automation that is created to test sync operations between opportunities and quotes. One common application in a CRM application is to synchronize (sync) quotes with opportunities, with or without line items. The sync operation is usually called near the end of the sales process and is done to ensure that the quote received by a client is a mirror image of the desired opportunity and products with the quote and quote line items. Any mismatch between the database records or fields that are defined as necessary to be in sync will cause a test error, as the quote does not necessarily apply to requested item in this case. The sync process is critical to the operation of the database and is often tested on a frequent periodic basis (e.g., daily or hourly) within an organization. The test platform automation tests the same processes from the UI and the local or remote API interfaces. The automation approach was to create scenarios that emulated the entire process of creating an opportunity through syncing the final quote. This solved the problem of testing the same business process with two different sets of code and avoided all the overhead of setup for the scenario as well. The implementation involved utilizing: abstract classes to provide the basic containers for what needs to be implemented; classes that implement just the operations; classes that described the scenarios; and classes that brought the implementations (UI or API) together with the requisite scenarios. This framework allows the combination and integration of what would have been separate test cases and even test complex business scenarios.","In an embodiment, the test plan for the sync operation implemented within the test framework covers the following areas: (1) quote & quote line entity save; (2) quote-opportunity sync; and (3) quote sync scrutiny. The test focuses on quote specific functionalities, e.g., calculated summary fields, sync fields and so on. Basic testing functions provided within the base (CRM) platform can be leveraged for testing generic functionalities, such as basic CRUD, DML (data manipulation language) operations and entity save. For quotes-specific entity save and sync testing, operations are grouped into the following categories: basic save and sync, bulk save and sync, partial save and sync, and recursive save and sync. With reference to , example test scenarios for the sync function will be described.  illustrates the flow associated with quote-opportunity (Opp) sync testing, under an embodiment.","One test scenario is the quote entity save operation. The standard base platform functionality that needs to be tested is (1) basic API\u2014insert, update, delete, undelete of Quote & Quote Line  entity functionality; (2) entity save\u2014validation, workflow, trigger, RSF (RSF from QuoteLine to Quote , RSF from Quote to Opp , (RSF from Opp to Acc, RSF from Quote to Account , and bulk DML with partial save; (3) standard summary fields for API\/Apex\/workflow operations that affect Quote\/QuoteLine summary fields (Quote: Subtotal, Quote: % Discount, Quote: Discounted Total, Quote: Grand Total, QuoteLine: Sales Price, QuoteLine: Quantity, QuoteLine: Total Price, QuoteLine: Subtotal, QuoteLine: Grand Total). The test checks to see whether these fields have correct value during entity save operations, e.g., workflow\/validation rule priorvalue, trigger.new, trigger.old, RSF value, and so on. The test also: verify entity field history tracking on Opp or Quote for sync changes (if Quote support history tracking) and for syncedQuoteld (Opp) and IsSyncing (Quote) when start\/stop sync; verifies big deal alerts on Opp, verifies stage history on Opp; verifies approval process on Opp and Quote; verifies sync with entity lock on Quote & QuoteLine or Opp and OppLine ; verifies sync with validation on Quote & QuoteLine or Opp & OppLine; verifies lookup filtered on syncedQuoteID field.","The Quote-Opp sync occurs when at least one of the following occurs: (1) change synced Quote on Opp; change pricebook on Opportunity or synced Quote; add\/delete OppLine on the parent Opportunity or QuoteLine on synced Quote; change any related fields on QuoteLineItem. The fields that are affected are: Quantity, UnitPrice (Sales Price); Discount; HasQtySchedule (OppLine only); HasRevSchedule (OppLine only).","There are certain basic scenarios for changes on synced Quote or Opp parent through UI, API and Apex code. These are as follows: (1) Set initial synced Quote on Opp; (2) Set initial synced Quote on Opp w\/ OppLine; (3) Set initial synced Quote from Opp w\/ schedules; (4) Insert\/Update\/Delete QuoteLine on synced Quote; (5) Undelete QuoteLine on synced Quote; (6) Change synced Quote; (7) Insert\/Update\/Delete OppLine Schedules; (8) Insert\/Update\/Delete OppLine; (9) Delete synced Quote, (10) Undelete synced Quote; (11) Change pricebook on opp; (12) Change pricebook on synced Quote; (13) Change synced Quote to another Quote w\/different pricebook; (14) Delete opp (w\/ line & schedules) w\/ multiple Quotes; (15) Undelete opp (w\/ line & schedules) w\/ multiple Quotes; and (16) Multi-line edit on QuoteLine\/OppLine","In an embodiment, bulk DML operations can be tested through API and Apex code. The tests include (1) Bulk insert\/update\/delete QuoteLines across multiple synced Quotes for different Opps; (2) Bulk insert\/update\/delete QuoteLines across multiple Quotes for same Opp parent; (3) Bulk insert\/update\/delete OppLines across multiple Opps; (4) Bulk insert\/update\/delete OppLine schedules on different OppLine across multiple Opps; (4) Bulk insert\/update\/delete\/undelete Quotes w\/ same Opp parent; (5) Bulk insert\/update\/delete\/undelete Quotes w\/ different Opp parent. The above test scenarios can determine wither partial save and verify changes are rollback correctly for: error on QuoteLines, error on Quote, error on OppLines, or error on Opp.","The quote sync scrutiny function can be used to check for the following: (1) Quote\/QuoteLine summary fields are correct; (2) Quote-Opp fields are not out of sync; (3) Orphan Quotes\/QuoteLine; (4) Invalid OppLine reference from QuoteLine; (5) Invalid reference to Quote\/QuoteLine; and (6) Invalid synced Quote.","As will be appreciated by those of ordinary skill in the art, many special test scenarios and even negative test scenarios can be implemented with regard to certain sync operations using the test framework for multi-mode operation in a CRM system.","The multi-mode test framework is used to create test scenarios that emulate the process of syncing Opportunity records with Quote records, and which can be utilized to execute via the UI, API or Apex operations. The following portions of program code illustrate the implementation of this multi-mode test framework, under an embodiment.",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public abstract class QuoteSyncOperation {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void cleanup( ) throws Exception { }"]},{"entry":[{},"abstract public void startSync(UserInfo user, String... quoteIds)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throws Exception;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"abstract public void stopSync(UserInfo user, String... quoteIds)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throws Exception;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void startSync(UserInfo user, boolean cancel, boolean error, boolean"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"stopSyncWarning, String beforeMsg, String afterMsg,"]},{"entry":[{},"String... quoteIds) throws Exception {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new UnsupportedOperationException(\u201cThis method is not"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"supported\u201d);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"void stopSync(UserInfo user, boolean error, String errorMsg,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"String... quoteIds) throws Exception {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new UnsupportedOperationException(\u201cThis method is not"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"supported\u201d);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public class QuoteSyncOperationImpl {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static QuoteSyncOperation syncApex(BaseTest test) throws"]},{"entry":[{},"Exception"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return new SyncApex(test);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public static QuoteSyncOperation syncAPI(BaseTest test) throws"]},{"entry":[{},"Exception"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return new SyncAPI(test);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public static QuoteSyncOperation syncUi(BaseTest test) throws"]},{"entry":[{},"Exception {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return new SyncUi(test);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public abstract class QuoteSyncScenario {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"protected BaseTest baseTest = null;"]},{"entry":[{},"protected QuoteSyncOperation syncOp = null;"]},{"entry":[{},"protected UserInfo user;"]},{"entry":[{},"public QuoteSyncScenario (BaseTest test, QuoteSyncOperation op,"]},{"entry":[{},"UserInfo"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"user) {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"this.baseTest = test;"]},{"entry":[{},"this.syncOp = op;"]},{"entry":[{},"this.user = user;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"protected abstract void setupTestData( ) throws Exception;"]},{"entry":[{},"protected abstract void cleanupTestData( ) throws Exception;"]},{"entry":[{},"abstract void runScenario( ) throws Exception;"]},{"entry":[{},"public void run( ) throws Exception {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"try {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"setupTestData( );"]},{"entry":[{},"runScenario( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} finally {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cleanupTestData( );"]},{"entry":[{},"syncOp.cleanup( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public class QuoteSyncTest extends BaseTest {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public void testQuoteSyncApi( ) throws Exception {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QuoteSyncScenario scenario = new"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QuoteSyncScenarioImpl.BasicQuoteSyncScenario("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"this, QuoteSyncOperationImpl.syncAPI(this),"]},{"entry":[{},"testUser);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"scenario.run( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public void testQuoteSyncApex( ) throws Exception {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QuoteSyncScenario scenario = new"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QuoteSyncScenarioImpl.BasicQuoteSyncScenario("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"this, QuoteSyncOperationImpl.syncApex(this),"]},{"entry":[{},"testUser);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"scenario.run( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public class QuoteSyncUiTest extends SeleniumTest {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public void testQuoteSyncUi( ) throws Exception {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QuoteSyncScenario scenario = new"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"QuoteSyncScenarioImpl.BasicQuoteSyncScenario("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"this, QuoteSyncOperationImpl.syncUi(this),"]},{"entry":[{},"testUser) {"]},{"entry":[{},"@Override"]},{"entry":[{},"void runScenario( ) throws Exception {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ implement scenario based on UI actions"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"scenario.run( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The above code segments are provided primarily for purposes of illustration and are not intended to limit the embodiments to any specific code structure, content, or programming language.","Although embodiments of the testing framework have been described in the context of a database sync operation, it is to be understood that such embodiments can also be directed to other operations that involve interaction through two or more interfaces. Thus, the test automation pattern is applicable to many different applications and processes. One example is a social network communication application, such as the Chatter\u2122 application provided by Salesforce.com. Chatter is a collaboration application for the enterprise to connect and share information securely with people at work in real-time. The Chatter application defines an operation interface with the functions: share( ), comment( ), like( ), follow( ), unfollow( ), delete( ), and provides UI, API and APEX implementations for these operations. Using the multi-mode test framework, reusable test scenarios can be created to efficiently run in multi-modes of operation. Similarly, within the CRM context, for processes like lead conversion, workflow approval, merge record operations, and so on can be performed through multiple modes of operation. Each of these operations can be abstracted into operation interface and scenario abstraction and then tested using the test framework.","System Overview","Embodiments of the multi-mode test platform for testing applications can be used in any number IP based network environments. One such environment is a distributed database application that is implemented over a local or wide area network. One example of such an application is a multi-tenant database system. As used herein, the term multi-tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example, a given application server may simultaneously process requests for a great number of customers, and a given database table may store rows for a potentially much greater number of customers. As used herein, the term query plan refers to a set of steps used to access information in a database system.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 6","FIG. 6"],"b":["600","610","610","612","614","616","617","618","620","622","624","626","628","610"]},"Environment  is an environment in which an on-demand database service exists. User system  may be any machine or system that is used by a user to access a database user system. For example, any of user systems  can be a handheld computing device, a mobile phone, a laptop computer, a work station, and\/or a network of computing devices. As illustrated in , user systems  might interact via a network  with an on-demand database service, which is system .","An on-demand database service, such as system , is a database system that is made available to outside users that do not need to necessarily be concerned with building and\/or maintaining the database system, but instead may be available for their use when the users need the database system (e.g., on the demand of the users). Some on-demand database services may store information from one or more tenants stored into tables of a common database image to form a multi-tenant database system (MTS). Accordingly, the terms \u201con-demand database service \u201d and \u201csystem \u201d may be used interchangeably herein. A database image may include one or more database objects. A relational database management system (RDMS) or the equivalent may execute storage and retrieval of information against the database object(s). Application platform  may be a framework that allows the applications of system  to run, such as the hardware and\/or software, e.g., the operating system. In an embodiment, on-demand database service  may include an application platform  that enables creation, managing and executing one or more applications developed by the provider of the on-demand database service, users accessing the on-demand database service via user systems , or third party application developers accessing the on-demand database service via user systems .","The users of user systems  may differ in their respective capacities, and the capacity of a particular user system  might be entirely determined by permissions (permission levels) for the current user. For example, where a salesperson is using a particular user system  to interact with system , that user system has the capacities allotted to that salesperson. However, while an administrator is using that user system to interact with system , that user system has the capacities allotted to that administrator. In systems with a hierarchical role model, users at one permission level may have access to applications, data, and database information accessible by a lower permission level user, but may not have access to certain applications, database information, and data accessible by a user at a higher permission level. Thus, different users will have different capabilities with regard to accessing and modifying application and database information, depending on a user's security or permission level.","Network  is any network or combination of networks of devices that communicate with one another. For example, network  can be any one or any combination of a LAN (local area network), WAN (wide area network), telephone network, wireless network, point-to-point network, star network, token ring network, hub network, or other appropriate configuration. As the most common type of computer network in current use is a TCP\/IP (Transfer Control Protocol and Internet Protocol) network, such as the global internetwork of networks often referred to as the \u201cInternet\u201d with a capital \u201cI,\u201d that network will be used in many of the examples herein. However, it should be understood that the networks that the one or more implementations might use are not so limited, although TCP\/IP is a frequently implemented protocol.","User systems  might communicate with system  using TCP\/IP and, at a higher network level, use other common Internet protocols to communicate, such as HTTP, FTP, AFS, WAP, etc. In an example where HTTP is used, user system  might include an HTTP client commonly referred to as a \u201cbrowser\u201d for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system  and network , but other techniques might be used as well or instead. In some implementations, the interface between system  and network  includes load sharing functionality, such as round-robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server, each of the plurality of servers has access to the MTS' data; however, other alternative configurations may be used instead.","In one embodiment, system , shown in , implements a web-based customer relationship management (CRM) system. For example, in one embodiment, system  includes application servers configured to implement and execute CRM software applications as well as provide related data, code, web pages and other information to and from user systems  and to store to, and retrieve from, a database system related data, objects, and Webpage content. With a multi-tenant system, data for multiple tenants may be stored in the same physical database object, however, tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant's data, unless such data is expressly shared. In certain embodiments, system  implements applications other than, or in addition to, a CRM application. For example, the system may provide tenant access to multiple hosted (standard and custom) applications, including a CRM application. User (or third party developer) applications, which may or may not include CRM, may be supported by the application platform , which manages creation, storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .","One arrangement for elements of system  is shown in , including a network interface , application platform , tenant data storage  for tenant data , system data storage  for system data accessible to system  and possibly multiple tenants, program code  for implementing various functions of system , and a process space  for executing MTS system processes and tenant-specific processes, such as running applications as part of an application hosting service. Additional processes that may execute on system  include database indexing processes.","The applications  within system  each represent a set of operations that interact with system components and user systems  through one or more operational interfaces. As described above, the applications may comprise front-end and back-end components that interface between the user and the system through a UI component  and\/or through remote API processes or local API processes (e.g., Apex). A test platform  in accordance with embodiments described above tests the functionality of an application using a common set of test code for the operations of the application, and different test scenarios for the interfaces. The test platform is typically provided as part of an automated test process that is provided as part of the overall system functionality provided to the users. The test platform can include tests that are run as part of an automated test suite that is initiated manually by the user, performed periodically on an automated basis (e.g., hourly, daily, weekly, etc.), or run upon triggering by a defined event (e.g., logon by a user).","Several elements in the system shown in  include conventional, well-known elements that are explained only briefly here. For example, each user system  could include a desktop personal computer, workstation, laptop, PDA, cell phone, or any wireless access protocol (WAP) enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system  typically runs an HTTP client, e.g., a browsing program, such as Microsoft's Internet Explorer browser, Netscape's Navigator browser, Opera's browser, or a WAP-enabled browser in the case of a cell phone, PDA or other wireless device, or the like, allowing a user (e.g., subscriber of the multi-tenant database system) of user system  to access, process and view information, pages and applications available to it from system  over network . Each user system  also typically includes one or more user interface devices, such as a keyboard, a mouse, trackball, touch pad, touch screen, pen or the like, for interacting with a graphical user interface (GUI) provided by the browser on a display (e.g., a monitor screen, LCD display, etc.) in conjunction with pages, forms, applications and other information provided by system  or other systems or servers. For example, the user interface device can be used to access data and applications hosted by system , and to perform searches on stored data, and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above, embodiments are suitable for use with the Internet, which refers to a specific global internetwork of networks. However, it should be understood that other networks can be used instead of the Internet, such as an intranet, an extranet, a virtual private network (VPN), a non-TCP\/IP based network, any LAN or WAN or the like.","According to one embodiment, each user system  and all of its components are operator configurable using applications, such as a browser, including computer code run using a central processing unit such as an Intel x86 processor or the like. Similarly, system  (and additional instances of an MTS, where more than one is present) and all of their components might be operator configurable using application(s) including computer code to run using a central processing unit such as processor system , which may include an Intel x86 processor or the like, and\/or multiple processor units. A computer program product embodiment includes a machine-readable storage medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system  to intercommunicate and to process web pages, applications and other data and media content as described herein are preferably downloaded and stored on a hard disk, but the entire program code, or portions thereof, may also be stored in any other volatile or non-volatile memory medium or device as is well known, such as a ROM or RAM, or provided on any media capable of storing program code, such as any type of rotating media including floppy disks, optical discs, digital versatile disk (DVD), compact disk (CD), microdrive, and magneto-optical disks, and magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data. Additionally, the entire program code, or portions thereof, may be transmitted and downloaded from a software source over a transmission medium, e.g., over the Internet, or from another server, as is well known, or transmitted over any other conventional network connection as is well known (e.g., extranet, VPN, LAN, etc.) using any communication medium and protocols (e.g., TCP\/IP, HTTP, HTTPS, Ethernet, etc.) as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and\/or server or server system such as, for example, C, C++, HTML, any other markup language, Java\u2122 JavaScript, ActiveX, any other scripting language, such as VBScript, and many other programming languages as are well known may be used. (Java\u2122 is a trademark of Sun Microsystems, Inc.).","According to one embodiment, each system  is configured to provide web pages, forms, applications, data and media content to user (client) systems  to support the access by user systems  as tenants of system . As such, system  provides security mechanisms to keep each tenant's data separate unless the data is shared. If more than one MTS is used, they may be located in close proximity to one another (e.g., in a server farm located in a single building or campus), or they may be distributed at locations remote from one another (e.g., one or more servers located in city A and one or more servers located in city B). As used herein, each MTS could include one or more logically and\/or physically connected servers distributed locally or across one or more geographic locations. Additionally, the term \u201cserver\u201d is meant to include a computer system, including processing hardware and process space(s), and an associated storage system and database application (e.g., OODBMS or RDBMS) as is well known in the art. It should also be understood that \u201cserver system\u201d and \u201cserver\u201d are often used interchangeably herein. Similarly, the database object described herein can be implemented as single databases, a distributed database, a collection of distributed databases, a database with redundant online or offline backups or other redundancies, etc., and might include a distributed database or storage network and associated processing intelligence.","In certain embodiments, user systems  (which may be client systems) communicate with application servers to request and update system-level and tenant-level data from system  that may require sending one or more queries to tenant data storage  and\/or system data storage . System  may automatically generate one or more SQL statements (e.g., one or more SQL queries) that are designed to access the desired information. System data storage  may generate query plans to access the requested data from the database.","Each database can generally be viewed as a collection of objects, such as a set of logical tables, containing data fitted into predefined categories. A \u201ctable\u201d is one representation of a data object, and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that \u201ctable\u201d and \u201cobject\u201d may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example, a CRM database may include a table that describes a customer with fields for basic contact information such as name, address, phone number, fax number, etc. Another table might describe a purchase order, including fields for information such as customer, product, sale price, date, etc. In some multi-tenant database systems, standard entity tables might be provided for use by all tenants. For CRM database applications, such standard entities might include tables for Account, Contact, Lead, and Opportunity data, each containing pre-defined fields. It should be understood that the word \u201centity\u201d may also be used interchangeably herein with \u201cobject\u201d and \u201ctable\u201d.","It should also be noted that the various functions disclosed herein may be described using any number of combinations of hardware, firmware, and\/or as data and\/or instructions embodied in various machine-readable or computer-readable media, in terms of their behavioral, register transfer, logic component, and\/or other characteristics. Computer-readable media in which such formatted data and\/or instructions may be embodied include, but are not limited to, physical (non-transitory), non-volatile storage media in various forms, such as optical, magnetic or semiconductor storage media.","For the purpose of the present description, a data object is any type of distinguishable data or information, such as an image, video, sound, text, or other type of data. A data object may include multiple types of distinguishable data, such as an image combined with descriptive text, and it may also comprise a dynamic signal such as a time varying signal. A data object as used herein is to be interpreted broadly to include stored representations of data including for example, digitally stored representations of source information. A data set is a collection of data objects, and may comprise a collection of images, or a plurality of text pages or documents. A user is utilized generically herein to refer to a human operator, a software agent, process, or device that is capable of executing a process or control.","Unless the context clearly requires otherwise, throughout the description and the claims, the words \u201ccomprise,\u201d \u201ccomprising,\u201d and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense; that is to say, in a sense of \u201cincluding, but not limited to.\u201d Words using the singular or plural number also include the plural or singular number respectively. Additionally, the words \u201cherein,\u201d \u201chereunder,\u201d \u201cabove,\u201d \u201cbelow,\u201d and words of similar import refer to this application as a whole and not to any particular portions of this application. When the word \u201cor\u201d is used in reference to a list of two or more items, that word covers all of the following interpretations of the word: any of the items in the list, all of the items in the list and any combination of the items in the list.","While one or more implementations have been described by way of example and in terms of the specific embodiments, it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary, it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore, the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the following drawings like reference numbers are used to refer to like elements. Although the following figures depict various examples, the one or more implementations are not limited to the examples depicted in the figures.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
