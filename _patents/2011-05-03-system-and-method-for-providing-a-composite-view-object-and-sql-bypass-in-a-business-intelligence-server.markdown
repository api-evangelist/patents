---
title: System and method for providing a composite view object and SQL bypass in a business intelligence server
abstract: Systems and methods are described for performing a SQL bypass in a business intelligence (BI) server environment. The BI server initially receives a SQL query and constructs an extensible markup language (XML) representation of the SQL query. The XML representation is sent to an application server that hosts an application developer framework (ADF). The ADF receives the XML representation of the SQL query and constructs a composite view object at runtime, to access the appropriate data. It then generates a database-specific query based on the composite view object and returns it to the BI server. The BI server replans the database-specific query and sends it to a database storing the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08868588&OS=08868588&RS=08868588
owner: Oracle International Corporation
number: 08868588
owner_city: Redwood Shores
owner_country: US
publication_date: 20110503
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF INVENTION","DETAILED DESCRIPTION"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The current invention relates generally to business intelligence and in particular to efficiently accessing data by utilizing a business intelligence server.","In recent years, business intelligence tools have become increasingly utilized by large business enterprises and other organizations. Business intelligence provides current and historical views of business operations by analyzing internal, structured data and business processes of the organization. It is often used to create future models and predictions in order to support better business decision making. As such, business intelligence tools can lead to decreased costs and increased efficiency, productivity and profit margins for many companies.","Business intelligence is usually implemented as software and\/or hardware tools that are used to collect and analyze data and to transform the raw data into meaningful and useful information used to enable more effective strategic, tactical, and operational insights and decision-making. As such, a typical business intelligence server relies on data that may reside in a variety of places, including but not limited to databases, repositories, content management systems, application servers, software development frameworks and many other sources.","In a typical business intelligence server, data is collected from all (or some) of these sources and placed into a (virtual or physical) data warehouse or data mart, where it can then be modeled and analyzed before being presented to the user. For example, in the context of collecting data from an application development framework (ADF) source, one approach is to implement a physical layer within the business intelligence server, where data is modeled as a consolidated table that mirrors objects in the ADF layer. An application developer can assemble these compound objects by hand, using a subset of the entities relevant to the domain; the synthesized objects can subsequently be imported into the business intelligence server's metadata and decomposed into dimensions and facts.","However, this composition is usually a manual effort, often requires domain experts, and can be prone to errors in model translation. Another problem arises from having to decide at design-time what the composition should be. Involving all the possible columns of interest can lead to model bloat. Queries against such large objects will accordingly take longer to execute since many unneeded joins are introduced in the execution. On the other hand, limiting what is composed into the consolidated object reduces the flexibility of ad-hoc querying.","An alternative to using compound objects is to retain the original architectural separation and use the constituent objects as defined in the ADF source model. However, this also requires the business intelligence server to model the linkages between these objects. These links can be sufficiently complex that remodeling them in the business intelligence layer is just another variant of the model translation issue.","Additionally, from a performance perspective, since the data sources often do not support aggregation, such queries tend to be slow because aggregations are performed on low level data in business intelligence server. Potentially going through additional servers (e.g. Java Host and ADF) in the network is slower than directly querying the database.","In various embodiments, systems and methods are described for allowing a business intelligence (BI) server to perform a structured query language (SQL) bypass when accessing data over an application developer framework (ADF). In addition, the various embodiments provide a runtime composite view object (VO) at the application developer framework (ADF) that can be used by a query to reference multiple view objects in the ADF layer.","In accordance with an embodiment, the BI server initially receives a SQL query and constructs an extensible markup language (XML) representation of the SQL query. The XML representation is sent to an application server that hosts an application developer framework (ADF). The ADF receives the XML representation of the SQL query and constructs a composite view object at runtime, to access the appropriate data. It then generates a database-specific query based on the composite view object and returns the query to the BI server. The BI server re-plans the database-specific query and sends it to a database storing the data.","The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. References to embodiments in this disclosure are not necessarily to the same embodiment, and such references mean at least one. While specific implementations are discussed, it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.","In the following description, numerous specific details are set forth to provide a thorough description of the invention. However, it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail so as not to obscure the invention.","In accordance with various embodiments of the invention, a structured query language (SQL) bypass and composite view object features are enabled in a business intelligence (BI) server. In accordance with an embodiment, when the BI server receives a SQL query that accesses multiple objects in an application server, the BI server can determine whether to perform an SQL bypass. If the BI server determines to perform an SQL bypass, it sends a representation (XML) of the query to the application server hosting the ADF, which creates a composite view object at runtime to access the data. The ADF then provides a database-specific query to the BI server, and the BI server can re-plan the database-specific query and invoke the re-planned query directly against the database.","Alternatively, the BI server can transmit a representation XML of the query to the application server, which can in turn execute the query against the database. A composite view object can still be created on the application server at runtime to reflect the data accessed by the SQL query. This composite view object enables the BI server to model multiple objects or entities in the application server, without having to declare and create it beforehand at design time.","The above embodiments of the present application enable a plurality of forms of business analytics within a set of applications. These analytics cover:","Ability of the business intelligence (BI) server to query a java based (J2EE) application as a data source;","Ability to express a query against a service, have the service generate a SQL statement (that includes session context, user security around data etc), generate an improved plan around this SQL statement to further function ship computations and send it to the underlying database for performance gains;","Ability to write-back data through the business intelligence (BI) server frontend while respecting the business logic defined in the application layer;","Ability to facilitate a SQL endpoint on top of a Java based application to empower SQL based tools and data movement (ETL tools) strategies; and","Ability to blend the various application concepts (setid, DFF, KFF, effective dates, lookup etc.) to their corresponding BI counterpart to offer a cohesive overall usage model to consumers.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},"As illustrated, a user  can submit a SQL query to a business intelligence (BI) server . In accordance with an embodiment, the BI server  can be comprised of a presentation layer, a logical layer and a physical layer. The physical layer can map one-to-one to the view objects in the application developer framework (ADF) . The logical layer can logically arrange those objects and perform the needed database table joins to reflect the business intelligence views of the entities in the ADF. Finally, the presentation layer allows users to access BI functionality, generate reports, provide security, and the like.","In the illustration, once the BI server  receives the SQL query from the user, it can convert it into an extensible markup language (XML) representation and transmit the XML document to the application server  hosting the ADF . In accordance with an embodiment, a BI shared library  can be deployed on the application server to allow the BI server to communicate with the ADF  and to allow the BI server to access the application programming interface (API) of the ADF via the ADF shared library .","Continuing with the illustration, once the ADF receives the XML data, it can generate the database-specific query and return the query to the BI server. In accordance with an embodiment, the BI server then re-plans the query and issues it against the database .","In this manner, the BI server can access Java and J2EE based applications as a data source. Additionally, the BI server can utilize the ADF to construct database-specific queries by invoking the APIs published by the ADF, while at the same time being able to invoke computations performed within the database. In accordance with an embodiment, the SQL bypass enables the BI server to invoke functionality to perform certain computations within the database, rather than stream all of the relevant data back to the server and then perform the computations on the actual server. For example, if the request includes a summation query, rather than streaming a massive amount of results from the database and then computing the results at the server, the BI server is enabled to re-plan the query and invoke the summation on the database end. In this manner, an improvement in performance is achieved due the reduction in results being transmitted back to the BI server.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2"},"In this illustration, a composite (multiple) view object (VO) model  is shown in comparison to the single view object model . In the single VO model , the physical layer of the BI server metadata models a consolidated table (SalesAnalyticsVO ) that is associated with the respective entities in the ADF layer . The application developer assembles this VO by hand using a subset of the entity objects (, , ) relevant to the domain. The synthesized VO is subsequently imported into the BI metadata  and decomposed into dimensions and facts.","This composition is usually a manual effort, requires a domain expert and can be prone to possible errors in model translation. Another problem may arise from having to decide at design time what the composition should be. Involving all possible columns of interest can lead to model bloat. Queries against such large VO will accordingly take longer to execute since many unneeded joins are introduced in execution.","In the composite VO model , a set of new extensions is incorporated into the ADF API that allow the automatic creation of a runtime composite VO  or the generation of an equivalent SQL bypass query that incorporates the projection columns, filters and joins required by the BI query. Thus, rather than having to decide at design time which data fields and information will be useful and designing the appropriate view objects, the API now enables a user  to create a runtime composite object  based on the query and the filters contained in it, wherein the composite VO object can be used to model the object constituents into the BI server metadata .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3"},"This illustration represents the transformations a query can go through. The SQL Bypass rewrite rule  first checks with the ADF layer if a bypass SQL query  is available. If it is available, the query is rewritten, remarked, re-planned (to push down aggregations), and executed directly against the database  via the gateway (e.g. Oracle gateway ). If no bypass SQL is available, the multi-VO join graph is sent down to Java Host  via the ADF gateway , where the composite VO is created and immediately executed on the ADF . In the BI server code, this rewrite can be done using a rewrite rule in the scheduler or request generator component.","In accordance with various embodiments, the SQL bypass functionality can be enabled or disabled by an administrator or other user of the BI server. It should also be noted, that the gateways , , as well as other components in this figure are not necessary to all embodiments of the invention and are shown for illustration purposes only. Other embodiments will include a lesser or greater number of components, within the scope of the present disclosure.","In the business intelligence server metadata, multiple VOs can be modeled as separate BI physical tables which are connected with dummy complex joins. In accordance with an embodiment, these joins serve only to represent the view links in the ADF model and need not necessarily be executed by the BI server. Instead, they can be used to check that a query is legal; i.e. a query can only span VOs that are linked.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4"},"As illustrated, a user  can request a set of information (e.g. \u201cview report\u201d) from the business intelligence presentation layer . The BI presentation layer can relay the request as an Open Database Connectivity (ODBC) query against the logical model of the BI server . The BI server can navigate to the physical model and issue a query as an extensible markup language (XML) message to the application server, or any broker that enables a connection thereto. The ADF layer on the application server  can then create a composite view object (VO) and generate a Bypass SQL statement, which it returns to the BI server . The BI server  can then replan the query using the bypass SQL statement and execute it directly against the database  for improved performance. The database can then return the result set directly to the BI server.","In addition to the process described above (or alternatively), the ADF  can execute the query for the BI server without using the Bypass SQL feature. For example, once the BI server  issues an XML query against the ADF, the ADF can generate a composite VO and execute the query against the database. Once the database returns the result set to the ADF, it can forward the result set to the BI server and its presentation layer.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5"},"As illustrated, the logical query  can be a standard ODBC query to obtain access to a set of data. In accordance with an embodiment, the XML message  is generated by the BI server and transmitted to the application server hosting the ADF, or to a particular broker that enables this connection. Furthermore, the Bypass SQL  returned to the BI server includes the SQL generated by the composite view object .","In accordance with various embodiments, when using SQL Bypass, the BI server can rewrite and re-plan the query before executing it against the database. Query plans or query execution plans are well known in the art of computed data access and are frequently used to optimize the way a query will be executed against the database. Since SQL queries are declarative, there are typically multiple alternative ways to execute a given query, where each of those ways yields a different performance (latency, etc). Query optimizers or planners usually aim to provide an optimal way to execute the query so as to provide the best performance. It is noted that there are many techniques to plan or re-plan a query and that no single technique is intended to be limiting to this disclosure. For example, in accordance with one embodiment, the query is replanned to push down aggregations so that they are executed in the database. In accordance with other embodiments, the query is replanned in other ways in order to improve performance.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 6"},"As shown in step , the BI server can receive a Structured Query Language (SQL) query from a client. In accordance with an embodiment, the SQL query can request data from multiple objects in an application server. In step , the BI server provides the SQL query to an application server hosting an application development framework (ADF). In accordance with an embodiment, the BI server can generate an XML message that describes the SQL query and transmits the XML message to the application server or a broker agent in communication with the application server. In step , once the application server receives the XML message, it constructs a composite view object at runtime, generates a database-specific query based on the composite view object and returns the database-specific query to the BI server. In step , the BI server receives the database-specific query from the application server and re-plans the database-specific query. In accordance with an embodiment, the query can be replanned to push down aggregations. In step , the BI server executes the re-planned query directly against the database.","Throughout the various contexts described in this disclosure, the embodiments of the invention further encompass computer apparatus, computing systems and machine-readable media configured to carry out the foregoing systems and methods. In addition to an embodiment consisting of specifically designed integrated circuits or other electronics, the present invention may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings of the present disclosure, as will be apparent to those skilled in the computer art.","Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits, as will be readily apparent to those skilled in the art.","The various embodiments include a computer program product which is a storage medium (media) having instructions stored thereon\/in which can be used to program a general purpose or specialized computing processor(s)\/device(s) to perform any of the features presented herein. The storage medium can include, but is not limited to, one or more of the following: any type of physical media including floppy disks, optical discs, DVDs, CD-ROMs, microdrives, magneto-optical disks, holographic storage, ROMs, RAMs, PRAMS, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs); and any type of media or device suitable for storing instructions and\/or information. The computer program product can be transmitted in whole or in parts and over one or more public and\/or private networks wherein the transmission includes instructions which can be used by one or more processors to perform any of the features presented herein. In various embodiments, the transmission may include a plurality of separate transmissions. In one embodiment, the computer readable storage medium is non-transitory.","The foregoing description of the preferred embodiments of the present invention has been provided for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations can be apparent to the practitioner skilled in the art. Embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the relevant art to understand the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
