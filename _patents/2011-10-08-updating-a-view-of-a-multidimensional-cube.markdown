---
title: Updating a view of a multidimensional cube
abstract: Some embodiments provide a method for updating a cube view relating to a cube stored in a cube data storage. The method displays the cube view by rendering a first cube data set relating to a first set of entities associated with the cube. The method receives a user interaction with the cube view that identifies a second set of entities associated with the cube. The method renders a second cube data set related to the second set of entities. The method then uses results of the rendering of the second cube data set to modify only a first part of the cube view while maintaining a second part of the cube view that is based on the rendering of the first cube data set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09081830&OS=09081830&RS=09081830
owner: BAY DYNAMICS
number: 09081830
owner_city: San Francisco
owner_country: US
publication_date: 20111008
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION","I. Distributed Cube-Browsing System","II. A Cube-Browsing Client Example","III. Example Data Structures","IV. An Example Cube-Browsing Client with Multiple Cube Views","V. Example Operations of Cube-Browsing Client","VI. Alternative Embodiments","VII. Electronic System"],"p":["Online analytical processing (OLAP) is an approach that allows users to view multidimensional data from different points of view. Typical applications of OLAP include financial reporting, management reporting, budgeting and forecasting, business reporting, and marketing.","The core of any OLAP system is an OLAP cube, which is a data structure that allows data to be manipulated and analyzed from different perspectives. OLAP cubes contain values (e.g., numeric values) called measures that are categorized by dimensions. A dimension is typically a set of data attributes (e.g., customer, product, date). The purpose of the dimension is to categorize each item in a data set into non-overlapping regions. This provides the means to \u201cslice and dice\u201d cube data in many different ways. In some cases, each dimension has one or more attributes, and may have one or more hierarchies applied to it. An attribute is a descriptive element that may have one or more predefined values. For example, a dimension for \u201cdate\u201d may have an attribute for \u201cMonth\u201d with values including \u201cJanuary\u201d, \u201cFebruary\u201d, \u201cMarch\u201d, etc. A hierarchy is a series of parent-child relationships, where a parent member usually represents the consolidation of the members that are its children. For example, a dimension for \u201cdate\u201d can have several alternative hierarchies such as \u201cDay:Month:Year\u201d, \u201cDay:Week:Year\u201d, \u201cDay:Month:Quarter:Year\u201d, etc.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1","b":["100","100","120","130","110","100","110","130","150","120","150","120","110","140","110","135","120","145","130","135","145","130","160"]},"There are several shortcomings with the system described above. For example, each time an end-user performs an action that requires a change to the displayed data, one or more queries will be performed against the cube database. It will request the cube database to provide the same data multiple times for the same end-user during the cube browsing experience, and require a complete re-rendering of the cube data each time a request is made. In a network environment, these frequent round trips to the multidimensional database server for large sets of data may add burden to the multidimensional database server and negatively affect the performance of the cube browsing system and the end-user experience.","Some embodiments of the invention provide a novel multidimensional data storage (MDDS) cube viewer that efficiently retrieves and presents different views of an MDDS cube. In some embodiments, the cube viewer (1) separately stores the cube data and the presentation data that relates to the presentation of the cube, and (2) uses the separated cube and presentation data to generate one or more cube views. When it receives a request to modify a cube view (e.g., through a user's request or action), the viewer quickly examines the stored presentation data to identify any part of the presentation data that it needs to update the cube view. When part of the presentation data needs to be updated, the viewer uses the identified part of the presentation data to formulate a customized query to the MDDS to retrieve additional cube data and\/or presentation data. The viewer then updates the displayed cube view or renders a new cube view based on the newly retrieved data and at times based on the previously retrieved data. In some embodiments, the viewer receives metadata along with the new cube data in response to a query, and uses the newly retrieved metadata to modify the presentation data that it stores.","To efficiently provide a cube view, the viewer of some embodiments performs novel intelligent caching and querying operations. In performing these operations, the viewer identifies cube data that is cached and retrieves, based on the identification, any other cube data that is not already cached. In some embodiments, the customized query that is formulated by the viewer is based on the data that is not available in the cache. The intelligent caching and querying features are particularly useful in a network environment as the same cube data does not have to be downloaded repeatedly. In other words, by checking the cache, the viewer can assess whether a change in a cube view, or a change from one cube view to another cube view, requires new cube data to be queried from the MDDS, and can forego a query to the MDDS when the cube data is available in the cube cache.","The viewer of some embodiments stores the presentation data in a cube configuration storage structure (e.g., a cube axes configuration file), while it stores the cube data in a cube data storage structure (e.g., a cube data file). In some of these embodiments, the viewer derives the cube configuration structure from a cube definition structure, which specifies several entities (measures, dimensions, etc.) that define the cube. The configuration structure in some embodiments stores (1) a subset of the entities that are specified in the cube definition and (2) the relationships between these entities. The entities in this subset are the entities that are selected (e.g., by a user or by a user's actions) from the cube definition to identify a portion of the cube for viewing. In some embodiments, the cube configuration structure is an axes configuration structure as it specifies one or more axes that define the relationships between a subset of entities from the cube definition. For instance, the axes configuration structure can specify a first axis that identifies a set of measures or other numeric cube entities for a cube view, a second axis that identifies a set of dimension attributes as row attributes of the cube view, and a third axis that identifies another set of dimension attributes as column attributes of the cube view.","In some embodiments, the viewer uses the subset of entities in the cube configuration structure to formulate queries for retrieving cube data and associated metadata from the MDDS cube. Also, in some embodiments, the viewer uses the combination of the cube data structure, the cube configuration structure and the cube definition structure to generate one or more views of the cube for concurrent or selective display. The different views provide different perspectives of the cube data set. In addition, the cube configuration of some embodiments is dynamically updated based on the metadata that is retrieved from the MDDS in response to a query.","Separating the cube content data and the cube presentation data into separate storage structures (e.g., into respectively the cube data structure and axes configuration structure) also allows the viewer of some embodiments to intelligently render only those regions in a cube view that change in each particular instance (e.g., in response to a received user interaction with the cube view). For example, when the cube view is expanded to display additional cube data, the viewer of some embodiments redraws only the region of the presentation that shows the additional cube data and not the entire presentation. This is because by using the axes configuration the viewer can identify the affected portion of the presentation, retrieve cube data for this affected portion from the cache or MDDS, and redraw only this affected portion in the displayed cube view.","Alternatively, or conjunctively with this intelligent rendering operation, the viewer of some embodiments can generate more than one cube view each time it receives new cube and presentation data from the MDDS, and can quickly switch between these cube views at different instances in time (e.g., in response to different user interactions). For instance, in some embodiments, the viewer presents one cube view as an interactive presentation (e.g., an interactive matrix) that a user can manipulate to interactively obtain a particular perspective of the underlying cube data. In conjunction with the interactive presentation, the viewer of some embodiments generates other cube views (such as charts (e.g., pie charts, bar charts), graphs, tables, lists, etc.) and displays these other cube views in response to interactions with the interactive presentation. For example, one or more graphs or charts may be displayed upon a user selecting (e.g., clicking on a cursor, moving the cursor over, etc.) a member or cell of the interactive presentation. By pre-generating these other cube views, the viewer can quickly display them as needed when the user interacts with the interactive presentation. Also, in some embodiments, the viewer can simultaneously display different cube views that provide different perspectives of the same segment of a cube, or provide different views of different segments of the cube. In some embodiments, one or more of the cube views is not presented in a user interface but is used as a part of a larger system. For instance, the cube view can be used to interchange data, be a part of a scheduled task, etc.","In some embodiments, the viewer is implemented as a stand-alone cube-browsing client application, while in other embodiments it is integrated into another application. For instance, the cube-browsing client of some embodiments is provided as a plug-in component for a web browser, while in other embodiments the client might be implemented as its own program within an operating system. Furthermore, in some embodiments, the cube-browsing client is a component of a server-based solution. In some such embodiments, the cube-browsing client is provided via a thin client. In a thin client solution, some or all of the logic and\/or processing is performed on a server while a user interacts with a client application via a separate client machine connected to the server. In some embodiments, the cube-browsing client accesses a cube database through a network using one or more middleware components (e.g., Web services, application servers).","In some embodiments, the cub-browsing client can operate offline by using the above-described cube definition, cube configuration, cube data structures. Specifically, in these embodiments, the cube-browsing client does not need to access a cube database containing the cube to generate a cube view. For example, the cube-browsing client can use previously cached cube data from the cube database and generate different cube views according to the cube definition and the cube configuration. One advantage of such a client is that it allows a user to continue to browse cube data even when there is no connection (e.g., a network connection) to communicate with a cube database.","The preceding Summary is intended to serve as a brief introduction to some embodiments of the invention. It is not meant to be an introduction or overview of all inventive subject matter disclosed in this document. The Detailed Description that follows and the Drawings that are referred to in the Detailed Description will further describe the embodiments described in the Summary as well as other embodiments. Accordingly, to understand all the embodiments described by this document, a full review of the Summary, Detailed Description and the Drawings is needed. Moreover, the claimed subject matters are not to be limited by the illustrative details in the Summary, Detailed Description and the Drawing, but rather are to be defined by the appended claims, because the claimed subject matters can be embodied in other specific forms without departing from the spirit of the subject matters.","In the following description, numerous details, examples and embodiments are set forth for purpose of explanation. However, one of ordinary skill in the art will realize that the invention is not limited to the embodiments set forth and that the invention may be practiced without some of the specific details and examples discussed. In other instances, well-known structures and devices are shown in block diagram form in order not to obscure the description of the invention with unnecessary detail.","Some embodiments of the invention provide a novel multidimensional data storage (MDDS) cube viewer that efficiently retrieves and presents different views of an MDDS cube (e.g., OLAP cube). In some embodiments, the cube viewer (1) separately stores the cube data and the presentation data that relates to the presentation of the cube, and (2) uses the separated cube and presentation data to generate one or more cube views. When it receives a request to modify a cube view (e.g., through a user's request or action), the viewer quickly examines the stored presentation data to identify any part of the presentation data that it needs to update the cube view. When part of the presentation data needs to be updated, the viewer uses the identified part of the presentation data to formulate a customized query to the MDDS to retrieve additional cube data and\/or presentation data. The viewer then updates the displayed cube view or renders a new cube view based on the newly retrieved data and at times based on the previously retrieved data. In some embodiments, the viewer receives metadata along with the new cube data in response to a query, and uses the newly retrieved metadata to modify the presentation data that it stores.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 2","b":["200","250","250","240","245","250","255","250","230","220","210","250"]},"The MDDS may be implemented in any number of different ways. For instance, a MDDS of some embodiments may be implemented as a database (e.g., a relational database, a hierarchical database, a flat file database, or any other type of database for storing data). Alternatively, a data storage may be implemented as a file (e.g., an XML file, a spreadsheet file, a comma-separated values (CSV) file, a text file, etc.), or as any other type of object that serves as a source of data. Also, a MDDS in some embodiments is implemented by a single storage unit (e.g., a hard drive) or by several storage units (e.g., hard drives).","The cube definition  is a storage structure that defines an MDDS cube within an MDDS storage. That is, the cube definition  specifies a full scope of entities used to create the cube. Example of such entities includes dimensions, measures, and hierarchies. In some embodiments, a dimension specifies a set of data attributes of the cube, while a hierarchy specifies a hierarchical relationship between the set of attributes. On the other hand, measures are values (e.g., numeric values) derived from the cube based on the dimensions. In some embodiments, the cube definition  is created using a standard Extensible Markup Language (XML) schema. One such standard schema is a XML for Analysis (XMLA), which is an industry standard XML schema for defining a cube. However, one of ordinary skill in the art will realize that different schemas can be used to differently define the cube.","The cube configuration  in some embodiments stores (1) a subset of the entities that are specified in the cube definition  and (2) the relationships between these entities. For example, the cube configuration can include one or more entities (e.g., attributes, measures, etc.) defined in the cube definition . In some embodiments, the entities in this subset are the entities that are selected (e.g., by a user or by a user's actions) from the cube definition to identify a portion of the cube for viewing. The CVRE  in some such embodiments includes a user interface that allows a user to specify a set of entities (e.g., attributes, measures, Key Performance Indicator (KPI) values, KPI goals, KPI statuses, or KPI trends) that is to be included in the cube configuration . The set of entities is then used to generate a query. Accordingly, the cube configuration  allows the user to selectively extract (e.g., slice and dice) a particular section of cube data. Also, by utilizing the cube configuration , several different queries can be consolidated into one query. This optimizes cube data retrieval as it prevents multiple queries being sent when the user wants to browse related cube data.","The cube configuration  of some embodiments is an axes configuration structure as it specifies one or more axes that define the relationships between a subset of entities from the cube definition. In some such embodiments, the cube axes configuration  indicates the relationship between its entities by grouping several attributes or measures into different axes or hierarchies. For example, the cube axes configuration  can include a first axis that specifies a set of measures or other numeric cube entities (e.g., KPI values, etc.) for the cube view. The cube axes configuration can further include a second axis (e.g., row axis) that specifies a set of dimension attributes as row attributes of the cube view, and a third axis (e.g., column axis) that specifies another set of dimension attributes as column attributes of the cube view. In some embodiments, the cube axes configuration includes additional axes such as a \u201cfilter\u201d axis that specifies a set of attributes for filtering the cube view so that certain data are not shown in the rendered cube view.","In some embodiments, other types of elements define the cube axes configuration . These elements include metadata that define how the configuration or cube view is rendered on a display. For example, the cube axes configuration of some embodiments includes different flags that indicate whether each member of an axis is loaded for display, expanded, collapsed, etc. In some embodiments, the cube-browsing system derives metadata from reviewing a cube cache or a query result set. For example, a \u201cComputer\u201d dimension in a cube may have a hierarchy called \u201cManufacturer\u201d. The \u201chierarchy\u201d can have \u201cmembers\u201d named \u201cDell\u201d, \u201cHP\u201d, \u201cApple\u201d, etc. Those members are not contained in the cube definition but are part of a query result set. These query results are used in the cube axes configuration of some embodiments to indicate hierarchical relationships, performing filtering operations, etc. Accordingly, the cube axes configuration is a definition that provides the means to retrieve and render cube data. Several example cube axes configurations will be described in detail below by reference to .","The cube data  is used to display or render a cube view. In the example illustrated in , the cube data  is received at the CVRE  by querying the MDDS . Specifically, the MDDS is queried using a set of entities (e.g., attributes, measures) in the cube axes configuration . The MDDS  of some embodiments also stores cube definitions. In some embodiments, the MDDS  is a local data storage that the system  accesses to display the cube view . Alternatively, the system  accesses the MDDS  through a network (e.g., the Internet) using one or more middleware components (e.g., Web services, application servers). In some embodiments, the cube data  is indexed and cached locally so that the cube data can be easily retrieved to render the cube view .","The MDDE  is an engine via which the CVRE  accesses data stored in the MDDS . Specifically, the CVRE  receives the cube data  and\/or the cube definition  from the MDDS  through the MDDE . To retrieve data from the MDDS, the MDDE  of some embodiments facilitates generation of queries (e.g., MDX queries) based on requests from the CVRE . In some embodiments, the MDDE  does not generate queries but is used as an interface that the CVRE  uses to receive copies of data files from one or more data storages. As will be described in detail below by reference to , the MDDE  of some embodiments includes different components to facilitate the generation of one or more cube views.","As shown, the CVRE  receives the cube definition , cube axes configuration , and cube data . Based on these data structures, the CVRE  generates a cube view . The cube view , in some embodiments, enables an end-user to swiftly analyze multidimensional data from multiple perspectives. In some embodiments, the CVRE  presents the cube view as an interactive presentation (e.g., an interactive matrix) that a user can manipulate to interactively obtain a particular perspective of the underlying cube data. That is, the user can interact with the presentation to selectively extract a particular perspective of the underlying multidimensional data. In conjunction with, or instead of the interactive object, the CVRE  of some embodiments generates other items such as charts (e.g., pie charts, bar charts), graphs, tables, lists, etc. In some embodiments, the CVRE  does not present the cube view  as a user interface or a view. Instead, the cube view  is part of a larger system of interchanging data, a scheduled task, etc.","In some embodiments, the CVRE  generates a single cube view . However, by separating the content from the presentation, the CVRE  of some embodiments renders multiple cube views. For example, one or more graphs or charts may be displayed upon a user selecting (e.g., clicking on a cursor, moving the cursor over, touch operation, etc.) a member or cell of an interactive matrix. Alternatively, several cube views are simultaneously displayed by sharing the same cube data. In some embodiments, the CVRE  may render several cube views using different segments of the available portion of the cube. In addition, the CVRE  of some embodiments is able to intelligently update or render only those regions in a cube view that has changed. In some embodiments, the cube data  is a separate data structure that is not tied to any particular cube view. As such, multiple cube views  can be generated using the cube data .","In some embodiments, a cube-browsing system  performs a series of operations to generate a display of a cube view.  illustrates a data flow diagram that provides an example of generating the cube view based on a cube definition , a cube axes configuration , and cube data . Specifically, this figure illustrates the relationship between these data structures that allow the CVRE  to generate a display of the cube view. As shown, the cube-browsing system  includes a multidimensional database engine (MDDE)  and a cube view rendering engine (CVRE) . The CVRE  is the same as the one described above by reference to . However, the MDDE  includes a cube definition manager  for managing cube definitions, (2) an axes configuration manager  for managing cube axes configurations, (3) a query generator  for generating queries, and (4) a data retriever  for retrieving data based on the queries. In some embodiments, one or more components of the MDDE  are server components, while the CVRE  is a client component. Alternatively, in some embodiments, the MDDE  and the CVRE  operate on one computing device to provide one or more cube views.","In some embodiments, the MDDI  is an interface via which the other components access data stored in the data storage. Specifically, the cube definition manager  and the data retriever  receive the cube definition and the cube data from the data storage through the MDDI .","As shown in , the cube definition manager  receives a cube definition through the MDDI . The cube definition includes a metadata (e.g., dimensions, measures) that specifies a configuration of a multidimensional cube. In some embodiments, the cube definition manager  receives the cube definition based on a request from the CVRE . For example, based on user input, the CVRE  of some embodiments directs the cube definition manager  to retrieve the cube definition from a data storage (not shown). In some embodiments, the cube definition is retrieved from a data storage that stores the definition's corresponding multidimensional cube.","Once the cube definition is received, the cube definition manager  sends the cube definition  to the axes configuration manager  and the CVRE , or stores the cube definition so that it will be available for the CVRE . The axes configuration manager  also creates a cube axes configuration based on the received cube definition . In some embodiments, the axes configuration manager  creates the cube axes configuration based on a user interfacing with a display that is generated by the CVRE . For example, the CVRE  of some embodiments displays a set of selectable user interface items for entities (e.g., dimension attributes, measures) associated with the multidimensional cube. The user can then select one or more of these items to create the cube axes configuration .","In the example illustrated in , the axes configuration manager  sends the cube axes configuration  to the query generator . The query generator  then formulates one or more multidimensional database queries using the cube axes configuration . As shown, the cube axes configuration  is also sent to the CVRE . In some embodiments, the CVRE  uses the cube axes configuration  to display a representation of the cube axes configuration. This allows an end-user to see which entities (e.g., dimensions, measures) are included in the cube axes configuration . In some embodiments, the cube axes configuration is presented on a display such that the user can also see the relationship between entities in the cube axes configuration. Several examples of creating and displaying such a cube axes configuration are described below by reference to .","The data retriever  receives the one or more queries from the query generator  and retrieves cube data based on the queries. Specifically, the data retriever  queries the multidimensional database through the MDDI . As shown in , the data retriever  receives cube data that satisfy the query. The data retriever  then forwards the cube data to the CVRE . In some embodiments, the data retriever  parses the query result set and extracts cube data from the query result set. Alternatively, in some embodiments, the CVRE  parses and extracts the cube data.","Once the cube data is received, the CVRE  then generates a display of a cube view using the cube data. As mentioned above, the CVRE  of some embodiments displays the cube view as an interactive presentation (e.g., interactive matrix). In some embodiments, the interactive presentation is represented as an interactive spreadsheet with different columns and rows. A user of the system  can interact with this presentation to quickly extrapolate a particular perspective of the underlying multidimensional database. For example, the user can select on an item on a particular row or a particular column to expand or collapse the interactive presentation in order to display another dimension of the cube. In conjunction with, or instead of the interactive presentation, the CVRE  of some embodiments generates other items such as charts (e.g., pie charts, bar charts), graphs, tables, lists, etc.","In the examples described above, several separate entities (e.g., a cube axes configuration, cube data) are used to extrapolate one or more cube views from a cube stored in a cube database. By separating the content and the presentation, the system of some embodiments is able to intelligently update or render only those regions in the cube view that has changed. For example, when the cube view is expanded to display additional cube data, the system of some embodiments redraws only the region of the cube view that shows the additional cube data and not the entire cube view. In some embodiments, the method renders the updated cube view by accessing the cube cache and\/or dynamically retrieving any necessary cube data from the cube database.","In some embodiments, the cube viewer of some embodiments provides one or more cube presentations. For example, one or more graphs or charts may be displayed upon a user selecting (e.g., clicking on a cursor, moving the cursor over, etc.) a member or cell of the interactive presentation. By pre-generating these other cube views, the viewer can quickly display them as needed when the user interacts with the interactive presentation. Also, in some embodiments, the viewer can simultaneously display different cube views that provide different perspectives of the same segment of a cube, or provide different views of different segments of the cube.","In the examples described above, three separate entities or storage structures (i.e., a cube definition, a cube axes configuration, and cube data) are used to extrapolate a cube view from a cube stored in a cube database. One of ordinary skill in the art would understand that these three entities could further be separated into other entities. For example, the cube axes configuration can be further separated into several separate entities, such as a first cube axes configuration for querying a multidimensional database and a second separate cube axes configuration for rendering a cube view on a display.","Several more detailed embodiments of the invention are described below. Section I describes a cube-browsing system with novel querying and caching features. Section II describes an example cube-browsing client. Section III then describes several example data structures for the cube-browsing system. Section IV describes an example cube-browsing client with multiple presentations. Next, Section V describes several example operations of a cube-browsing client. Section VI then describes several alternate embodiments of the cube browsing system. Finally, Section VII describes an electronic system with which some embodiments of the invention are implemented.","In the example illustrated above in , the cube data is accessed locally or through a network (e.g., the Internet). To provide a cube view efficiently, a cube-browsing system of some embodiments performs novel intelligent caching and querying operations. In performing these operations, the system identifies cube data that is cached and retrieves, based on the identification, any other cube data that is not already cached. In some embodiments, the customized query that is formulated by the system is based on the data that is not available in the cache. The intelligent caching and querying features are particularly useful in a network environment as the same cube data does not have to be downloaded repeatedly. Several examples of such a cube-browsing system that implements the intelligent caching and querying features will now be described by reference to .","A. Example Data Flow",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 4","b":["400","400","400","400","410","420","430","470","440","450","460","480"]},"The cube definition manager , the axes configuration manager , and the CVRE  are similar to those described above by reference to . Specifically, the cube definition manager  receives a cube definition from a multidimensional database. The cube definition manager  then sends the cube definition  to the axes configuration manager  and the CVRE . The axes configuration manager  then creates a cube axes configuration based on the received cube definition . In some embodiments, the axes configuration manager  creates the cube axes configuration  based on user interaction with a user interface (UI) of the CVRE .","In the example illustrated in , the axes configuration manager  sends the cube axes configuration  to the query preprocessor . The query preprocessor  receives the cube axes configuration  and determines the cube data required to display the cube view. For example, the query preprocessor  might determine that a data result set for a set of entities (e.g., dimensions, measures) defined in the cube axes configuration  is required to display the cube view. To make this determination, the query preprocessor  of some embodiments interfaces with the cache manager . For example, the query preprocessor  may send, based on the cube axes configuration , one or more requests to the cache manager  in order to determine what cube data needs to be downloaded.","Based on a request from the query preprocessor , the cache manager  determines whether a particular set of cube data (e.g., for a set of entities in the cube axes configuration ) is available in the cube cache . The cache manager  of some embodiments makes this determination by accessing or reading the cube cache . In some embodiments, the cube cache  is a storage structure or a computer file (e.g., a XML file). In some embodiments, the cube cache  is a storage area (e.g., memory space, disk storage space) that stores cube data. Also, in some embodiments, the cube data in the cube cache is at least partially cleared or deleted using one or more cache replacement algorithms. For example, at least some of the data in the cube cache can be cleared based on any one or more of the following factors: the amount of space allocated for the cache, the frequency of the cached data being used, the time the cached data was last accessed, etc. One of ordinary skill in the art would understand that other known techniques can be used to differently clear the cube cache. Several examples of the cube cache of some embodiments are described below by reference to .","After accessing the cube cache , the cache manager  provides input to the query preprocessor . This input allows the query preprocessor  to determine whether to execute a query against the multidimensional database for a particular set of data. Once a determination is made on what cube data is not present in the cache and needs to be downloaded, the query preprocessor  directs the query generator  to generate one or more queries. Specifically, the one or more queries are constructed for data that is not currently stored in the cube cache . For example, the query generator  may formulate a query that requests a data result set for several of the entities included in the cube axes configuration  but not all of the entities.","The data retriever  receives the one or more queries from the query generator  and retrieves cube data based on the queries. In the example illustrated in , the data retriever  queries the multidimensional database through a network connection and receives cube data that satisfies the queries in return. The data retriever  then forwards the received cube data to the cache manager , which in turn stores the cube data into the cube cache . In some embodiments, the data retriever  parses the query result set and extracts cube data from the query result set. The data retriever  of some embodiments also extracts metadata from the query result set and sends the metadata to the axes configuration manger  to update the cube axes configuration. In some embodiments, the metadata in the axes configuration is then used to render a cube view. Several examples of a cube axes configuration being dynamically populated with metadata based on a result set will be described in detail by reference to .","Having received the cube data, the cache manager  stores the cube data in the cube cache . This allows the cache manager  to access and retrieve the cube data from the cube cache  at a later time. As shown in , the CVRE  receives cube data  from the cache manager . In some cases, the cube data  includes other data stored in the cube cache  in addition to the cube data just received from the data retriever .","Once the cube data  is received, the CVRE  then generates a display of one or more cube views using the cube data. As mentioned above, the CVRE  of some embodiments displays a cube view  as an interactive matrix. A user of the system  can interact with this matrix to quickly extrapolate a particular view of the underlying cube. In conjunction with, or instead of the interactive matrix, the CVRE  of some embodiments generates other items such as charts (e.g., pie charts, bar charts), graphs, tables, lists, etc.","In the examples described above, a web-based cube-browsing client is able to access a cube database to retrieve only the data that it needs to render a cube view. Accordingly, the intelligent caching and querying features allow a web-based version of the client application to provide its end-users with a rich Internet application experience or an application experience similar to that of an installed desktop application. For example, with the client application fetching only the data that it needs to render the cube view, an end-user does not have to wait for other cube data to be downloaded. This is different from prior cube browsing systems that re-download all the cube data each time a portion of a presentation is updated.","B. Example System Architecture",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 5","b":["500","510","560","510","510","510"]},"As shown in , the cube-browsing client  includes a cube definition manager , an axes configuration manager , a query generator , a query preprocessor , a data retriever , a cache manager , a cube cache , and a cube view rendering engine (CVRE) . These components are the same as the ones described above by reference to . However, in this example, several different components of the MDDI  are introduced. The MDDI  of some embodiments includes a cube definition handler  and a cube MDX query handler . This figure also illustrates a set of multidimensional databases  that are accessed through the MDDI .","In some embodiments, the cube definition handler  and the cube MDX query handler  process data requests from the cube-browsing client . In some embodiments, the cube definition handler  and the cube MDX query handler  are Web services that act as middleware components between the cube-browsing client  and the set of multidimensional databases .","In the example illustrated in , the cube definition handler  processes cube definition requests from the cube-browsing client . Specifically, the cube definition handler  receives a cube definition request from the cube definition manager . Based on the request, the cube definition handler  accesses the multidimensional database to retrieve a cube definition. The cube definition handler  then sends the retrieved cube definition to the cube definition manager .","By contrast, the cube MDX query handler  processes cube data requests. Specifically, the cube MDX query handler  receives a MDX query from the data retriever . The cube MDX query handler  then queries a multidimensional database to retrieve cube data. Upon receiving the cube data, the MDX query handler  then sends the cube data to the data retriever .","An example operation of the system  will now be described by reference to . Specifically,  illustrates a process  that some embodiments perform to render a cube view. In some embodiments, the cube-browsing client  performs the process . As shown, the process  receives (at ) a cube definition.","In the example illustrated in , the cube definition manager  sends a request for a cube definition to the MDDI . In some embodiments, the request identifies a particular multidimensional cube so that the corresponding cube definition can be retrieved. The request is received at the cube definition handler  that processes the request. Specifically, the cube definition handler  generates a request to send to a particular multidimensional database that stores the cube data. The MDDI  then sends the request to the particular multidimensional database. In response to the request, the particular multidimensional database returns the corresponding cube definition to the MDDI . The cube definition handler  then forwards the cube definition to the cube definition manager .","Referring to , the process  specifies (at ) a cube axes configuration. As mentioned above, the cube axes configuration includes a subset of entities from the cube definition, and indicates the relationships between this subset of entities. As shown in , the cube definition manager  sends the cube definition to the CVRE . In some embodiments, the CVRE  generates a display of the cube definition. This allows an end-user to specify different entities (e.g., dimension attributes, measures) for the cube axes configuration.","Based on the cube definition, the axes configuration manager  creates a cube axes configuration. In some embodiments, the cube axes configuration is created based on user interactions with a user interface (UI) of the cube-browsing client . The axes configuration manager  of some embodiments also receives updates to the cube axes configuration from the data retriever .","As shown in , the process  identifies (at ) a set of entities in the cube axes configuration. In some embodiments, the set of entities correspond to a set of UI items selected by the user of the cube-browsing client. The process  generates (at ) a query based on the set of entities and data in a cube cache. The process  then executes (at ) the query against the cube database to receive a result set relating to any one or more entities in the set of entities that is not already cached in the cube cache.","In the example illustrated in , the axes configuration manager  sends the cube axes configuration to the query preprocessor . The query preprocessor  receives the cube axes configuration and determines what cube data is required for a cube view. To make this determination, the query preprocessor  of some embodiments interfaces with the cache manager . For example, the query preprocessor  may send, based on the cube axes configuration, one or more requests to the cache manager  in order to determine what cube data needs to be downloaded.","Based on a request from the query preprocessor , the cache manager  determines whether a particular set of cube data is available in the cube cache . As mentioned above, the cache manager  of some embodiments makes this determination by accessing the cube cache . In some embodiments, the cube cache  is a storage area (e.g., memory space, disk storage space) that stores cube data. After accessing the cube cache , the cache manager  provides input to the query preprocessor . This input allows the query preprocessor  to determine whether to execute a query against the multidimensional database for a particular data set.","Once a determination is made on what cube data needs to be downloaded, the query preprocessor  directs the query generator  to generate an MDX query. Specifically, the MDX query is constructed for a data set that is not currently stored in the cube cache . The query generator  then sends the MDX query to the data retriever .","The data retriever  then sends the MDX query to the cube MDX query handler . The MDX query handler  then queries the particular multidimensional database. Upon receiving the query result set, the MDX query handler  returns the query result set to the data retriever . After receiving the query result set, the data retriever  sends the cube data to the cache manager .","Referring to , the process  updates (at ) the cube cache and the cube axes configuration. In some embodiments, the update operation includes storing the result set in the cube cache. The update operation in some embodiments entails dynamically updating the axes configuration with metadata from the result set in order to render the cube view. In some embodiments, this update operation is only performed when it is required. For instance, when all the data required to render the cube view is already in the cube axes configuration and the cube cache. The cube cache and the cube axes configuration might not be updated based on the result set. As shown in , the cache manager  stores the query result set in the cube cache . The cache manager  also sends any required cube data stored in the cube cache  to the CVRE .","The process  renders (at ) the cube view based on the cube axes configuration and the cube cache. As shown in , once the required cube data is received, the CVRE  generates a display of a cube view using the cube data. As mentioned above, the CVRE  of some embodiments displays the cube view as an interactive matrix.","Some embodiments provide a cube-browsing client that receives different data structures to provide a perspective of a cube stored in a cube database. For example, the cube-browsing client of some embodiments receives a cube definition including several entities that define the cube, a cube configuration including a set of entities for a cube view, and a cube data set including data related to the set of entities. The cube-browsing client then renders the cube view by presenting the cube data set on a display based on the cube configuration.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIG. 7","FIGS. 8-13","FIG. 8"],"b":["700","700","700","800","800","810","830","820"]},"As shown in , the process  initializes (at ) the cube-browsing client with a cube definition. To perform the initialization, the cube-browsing client of some embodiments accesses a data storage that stores the cube definition. In some embodiments, the selection of the cube definition is based on user input. For example, when there are multiple different multidimensional databases, the cube-browsing client might allow a user to select a particular multidimensional database and a cube within that particular multidimensional database. In some embodiments, the initialization entails retrieving the cube definition, parsing the cube definition into a list (e.g., field list), and presenting a representation of the list in a GUI (e.g., by loading the list).",{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 8","b":["800","810","810","812","816","816","816","815","800","814","812"]},"In the example illustrated in , the GUI  displays a representation of the cube definition in a sidebar area. However, the cube definition can be presented differently, in some embodiments. For example, instead of the sidebar area, the cube definition can be presented in a separate window or a different area of the GUI .","Returning to , the process  receives (at ) user input. The process  then determines (at ) whether the user input specifies a configuration change (e.g., change to a cube axes configuration). When the configuration has not changed, the process  proceeds to , which is described below. Otherwise, the process  analyzes (at ) the change to the configuration. In some embodiments, the change to the configuration includes creating a new configuration or modifying an existing configuration.",{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 9","b":["800","910","912","830","930","830","820"]},"Similarly, several attributes of the \u201ccomputer\u201d dimension  are selected from the cube definition area . Specifically, \u201ccomputer\u2014manufacturer\u201d , \u201ccomputer\u2014model\u201d , and \u201ccomputer\u2014name\u201d  are selected and added to the \u201crows\u201d section  of the configuration area . Also, \u201ccomputer\u2014system role\u201d  and \u201ccomputer\u2014system type\u201d  are selected and added to a \u201ccolumns\u201d section . In addition, \u201ccomputer\u2014number of processors\u201d  is selected and added to a \u201cfilters\u201d section  of the configuration area . The user might have added these attributes to the different sections by dragging and dropping these items, through a context menu, or through other UI operations. In some embodiments, the GUI includes other UI items to specify a value or a range of values for each attribute selected as a filter for the cube view and displayed in the \u201cfilters\u201d section  of the configuration area .","In some embodiments, each time an item is added, moved, or removed in the configuration area , a configuration update event is triggered. This allows the cube-browsing client to determine whether there is a configuration change. Alternatively, the cube-browsing client triggers a configuration update event based on the occurrence of a particular event (e.g., a user's selection of a particular button, the user's selection of a hotkey, etc.). In some embodiments, the analysis (at  of ) includes identifying changes to the configuration area  based on user input. For example, a user modification to a row or column dimension attribute may cause the interactive matrix to be re-rendered on the cube display area .","Returning to , the process  determines (at ) whether a root (e.g., a grid root) of the cube view (e.g., interactive matrix) has changed. In some embodiments, the root of cube view is its top-level members for row, column, and measures. When the process  determines (at ) that the root has changed, the process renders (at ) the root. Otherwise, the process  proceeds to , which will be described below.",{"@attributes":{"id":"p-0121","num":"0120"},"figref":["FIG. 10","FIG. 10"],"b":["820","1010","820","830","940","830","1010","1015","1025","1030","1010","1020","935","1035"]},"As mentioned above, the root of an interactive matrix is its top-level members for row, column, and measures. In some embodiments, each cell at an intersection of a column and a row represents a measure of the cube at the corresponding intersection of dimension members. In the example illustrated in , the measure is either a \u201ccomputer count\u201d or a \u201cprogram count\u201d, as specified in the \u201cmeasures\u201d section  of the configuration area . For example, the cell  indicates that there are 2 Hewlett-Packard sever computers; and the cell  indicates that there are 13 programs on Fujitsu workstations.","To populate the interactive matrix , the cube-browsing client of some embodiments formulates a query (e.g., a root MDX query) to retrieve data from the cube. Based on the retrieved data, the cube-browsing client then performs operations to render the grid axes and data cells of the interactive matrix .","As shown in , when the root has not changed, the process  adjusts (at ) an interactive matrix by determining whether to collapse or expand (e.g., hide or reveal) data. In some embodiments, the collapse and expand operations facilitate changes that occur below the grid root level being reflected on the cube display area . The process  then performs (at ) the determined member collapse or expand operations. For example, if any change is detected below the top-level row members, the cube-browsing client of some embodiments identifies on the row axis all expanded instances that are at a level higher than where the change occurs and performs the collapse operation. This effectively removes all the expanded rows used in the hierarchy. After performing the member collapse or expand operation, the process  proceeds to , which is described below.","The process  determines (at ) whether to perform a member collapse operation. When the process  determines (at ) that a member collapse operation has been initiated (e.g., through a cursor click, through a touch operation), the process performs (at ) the member collapse operation. Otherwise, the process  determines (at ) whether a member expand operation has been initiated. When the member expand operation is initiated, the process  performs (at ) the member expand operation.",{"@attributes":{"id":"p-0126","num":"0125"},"figref":"FIG. 11","b":["800","1115","1110","1115","1010","1135","935","830","1120"]},"As shown in , each cell at an intersection of a column and a row represents a measure of the cube at the corresponding intersection of dimension members. For example, the cell  indicates that there are 2 Dell Inc. \u201cOptiPlex \u201d servers, while the cell  indicates that there are 251 programs on Dell Inc. \u201cLatitude D630\u201d workstations. In some embodiments, to populate the interactive matrix  in , the cube-browsing system checks the cache first and formulates an appropriate MDX query to retrieve data for the expanded instance from a multidimensional database. On return of query result data, the cube browsing system performs operations to render the expanded grid axis and data cells of the interactive matrix .",{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 11","b":"1010"},"In some embodiments, the cube-browsing client may identify or calculate where new rows or columns need to be inserted in the presentation. For example, an interactive matrix can include a grid defined by a collection of objects. These objects can be independently drawn and\/or have their own layers. When expanding a level in the grid, the cube-browsing client of some embodiments calculates the number of new members (e.g., rows, columns) to show and insert that number of members as new objects into the grid. That is, the cube-browsing client does not redraw other parts of the grid but only redraws the new objects corresponding to the new members. Hence, by maintaining a separation of content and presentation, the cube-browsing client is able to efficiently redraw the cube presentation as it renders only the additional new data that is accessed either from a local storage structure (e.g., the cube cache) or a cube database.",{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 12","b":["1010","1010","1210","1215","1010","1215"]},"As illustrated in , each cell at an intersection of a column and a row represents a measure of the cube at the corresponding intersection of dimension members. For example, the cell  indicates that there are 166 programs on the \u201cPowerEdge \u201d x64-based PC servers manufactured by Dell Inc.; and the cell  indicates that there are 2 \u201cOptiPlex \u201d X86-based PC servers manufactured by Dell Inc. In some embodiments, to populate the interactive matrix  in , the cube-browsing system initially checks the cache and formulates an appropriate MDX query to retrieve data for the expanded instance from a multidimensional database. On return of query result data, the cube browsing system performs operations to render the expanded grid axis and data cells of the interactive matrix .",{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 13","b":["1010","1010","1310","1010","1320"]},"As illustrated in , each cell at an intersection of a column and a row represents a measure of the cube at the corresponding intersection of dimension members. For example, the cell  indicates that there is 1 \u201cPowerEdge SC440\u201d x64-based PC server manufactured by Dell Inc. with the name \u201cSVSFSP001\u201d; and the cell  indicates that there are 328 programs on \u201cPowerEdge SC440\u201d X86-based PC server manufactured by Dell Inc. with the name \u201cSVSFNS 006\u201d.","Returning to , when the expansion operation is not initiated, or after finishing operations at , , , or , the process  determines (at ) whether there is any more user interaction. When the process  determines (at ) that there is more user interaction, the process  returns to , which is described above. Otherwise, the process  ends.","Some embodiments perform variations on the process . For example, the specific operations of the process  may not be performed in the exact order shown and described. The specific operations may not be performed in one continuous series of operations, and different specific operations may be performed in different embodiments. Furthermore, the process  could be implemented using several sub-processes, or as part of a larger macro process. Also, in the many of the examples described above, the cube-browsing client displays a cube view as an interactive matrix. However, one of ordinary skill in the art will realize that some embodiments of the invention might display a cube view differently. For example, instead of presenting the cube view as an interactive matrix, the method of some embodiments present the cube view as a simple list, a pie chart, a bar chart, a graph, a table, or some other forms.","In some embodiments, the cube-browsing client is an iOS application that presents a list of measures as a table. In some such embodiments, after a user choosing one or more measures, the application presents a list of hierarchies. After the user choosing one or more hierarchies, the application updates the cube axes configuration and provides the results as a list that the user can drill into one level at a time, corresponding to the hierarchies chosen. In any event, how the cube axes configuration and cube data are viewed is independent of how the cube data is populated.","In many of the examples described above, the cube-browsing system generates a cube view based on several different data structures. The data structures include a cube definition, a cube axes configuration, and cube data. Several examples of these data structures will now be described by reference to .","A. Cube Definition","A cube definition is a data structure that defines a cube in a multidimensional database. That is, the cube definition includes a full scope of entities used to create the cube as well as any references to other entities in the multidimensional database that it is dependent on. As mentioned above, the cube definition of some embodiments is defined using XMLA, which is an industry standard XML schema for defining a multidimensional cube. However, one of ordinary skill in the art will realize that different schemas can be used to differently define the cube.  illustrates an example of a cube definition  according to some embodiments. In this example, the cube definition  is the same as the one that is parsed and loaded in the cube definition area  as shown in .","As shown in , the cube definition  includes several elements. These elements include (1) a \u201ccube\u201d element  that represents the cube, (2) a \u201cname\u201d element  that indicates the name of the cube, (3) a \u201cdimensions\u201d element  that represents a set of dimensions associated with the cube, (4) a \u201ckey performance indicators\u201d element  that represents a set of key performance indicators associated with the cube, and (5) a \u201cMeasureGroups\u201d element  that represents a set of measures associated with the cube.","In the example illustrated in , the \u201cname\u201d element  indicates that the name specified for the cube is \u201cSCCM Windows Computers\u201d. The \u201cdimensions\u201d element  includes a \u201cComputer\u201d dimension . The \u201cComputer\u201d dimension  includes an identifier  that identifies the dimension, a name  that identifies the name of the dimension, attributes  that identify the dimension's attributes, and hierarchies  that identify the dimension's hierarchies. As shown, the attributes  includes a set of \u201cattribute\u201d  associated with the \u201cComputer\u201d dimension. These attributes include \u201ccomputer\u2014current time zone\u201d, \u201ccomputer\u2014domain\u201d, \u201ccomputer\u2014system role\u201d, etc.","In some embodiments, the cube definition is parsed to identify measures, key performance indicators, dimensions, etc. in order to create a field list of entities. The field list is then rendered in an UI, which allows a user to interact with the field list of entities and create a cube axes configuration based on the field list. An example of a field list that is derived from the cube definition  is described above by reference to .","B. Cube Axes Configuration","As mentioned above, a cube axes configuration includes a subset of entities from a cube definition. In some embodiments, the cube axes configuration also indicates the relationship between the subset of entities. The cube axes configuration of some embodiments includes other elements that define how a cube view is rendered on a display.  shows an example format of a cube axes configuration  according to some embodiments. Specifically, this figure illustrates the cube axes configuration  that is defined based on the cube definition  illustrated in . A representation of this cube axes configuration  is illustrated in the configuration area  of .","As shown in , the cube axes configuration  includes an axes element . Several different axes are defined under this axes element . These axes include Axis0 , Axis1 , Axis2 , and SlicerAxis . In some embodiments, the organization of entities into these different axes defines the relationship between several entities selected from the cube definition  described above by reference to . For example, the Axis0  represents a set of measures from the cube definition . In , the Axis0  includes a computer count measure  and a program count measure . These measures  and  correspond to the ones selected from the cube definition area  and displayed in the \u201cmeasures\u201d section  of the configuration area  in .","In addition to measures, the Axis1  contains several hierarchies. Each of these hierarchies corresponds to a particular attribute of the \u201ccomputer\u201d dimension  from the cube definition  described above by reference to . The attributes includes \u201ccomputer\u2014manufacturer\u201d , \u201ccomputer\u2014model\u201d , and \u201ccomputer\u2014name\u201d . The Axis2  contains two hierarchies, namely \u201ccomputer\u2014system role\u201d  and \u201ccomputer\u2014system type\u201d . Referring to , the Axis1  is represented as row items in the \u201cRows\u201d section  of the configuration area . In addition, the Axis2  is represented as column items in the \u201cColumns\u201d section .","The SlicerAxis  includes a hierarchy . Specifically, the hierarchy  includes the attribute \u201ccomputer\u2014number of processors\u201d from the \u201ccomputer\u201d dimension  described above by reference to . Referring to , the hierarchy  is represented as a filter item in the \u201cFilters\u201d section  of the configuration area . In some embodiments, each attribute of the SlicerAxis  represent a particular dimension attribute that can be used to filter a cube view (e.g., an interactive matrix).","In the example illustrated in , the cube axes configuration  includes other elements that are not part of the cube definition. For example, the cube axes configuration  includes an \u201cAllMembersLoaded\u201d flag  that is used to render the cube view on a display. Here, the \u201cAllMembersLoaded\u201d flag  indicates whether all members of the corresponding dimension attribute \u201ccomputer\u2014manufacturer\u201d  are contained in the cube axes configuration as a result of a previous query. In some embodiments, it is desirable to present a user with the complete set of members that exist for an attribute when they are choosing which members to include or exclude from filter criteria. Utilizing the \u201cAllMembersLoaded\u201d flag indicates if a query is or is not necessary before rendering the complete set can occur. In , the \u201cAllMembersLoaded\u201d flag  is specified as \u201cfalse\u201d, which indicates that a query is necessary before rendering the complete set of members for dimension attribute \u201ccomputer\u2014manufacturer\u201d .",{"@attributes":{"id":"p-0149","num":"0148"},"figref":["FIG. 16","FIG. 10"],"b":["1500","1500"]},"As shown in , the hierarchy \u201ccomputer\u2014manufacturer\u201d  of Axis1  is populated with a set of members , such as \u201cDell Computer Corporation\u201d, \u201cDell Inc.\u201d , \u201cFujitsu\u201d, etc. Each member of the hierarchy \u201ccomputer\u2014manufacturer\u201d  has an instance-loaded flag and an instance-expanded flag. For example, as illustrated in text block  of the cube axes configuration , the instance-loaded flag and the instance-expanded flag of \u201cDell Inc.\u201d  are both specified as \u201cfalse\u201d. This indicates that the cube data associated with \u201cDell Inc.\u201d  is not currently expanded, and if an expansion is requested, a query is required. The instance-loaded flag is set to true after an expansion operation occurs, and is utilized to minimize unnecessary queries in the event that this instance is collapsed and then expanded again. In addition, the hierarchy \u201ccomputer\u2014system role\u201d  of Axis2  is populated with a \u201cserver\u201d  and a \u201cworkstation\u201d . Each member of hierarchy \u201ccomputer\u2014system role\u201d  has an instance-loaded flag and an instance-expanded flag. Also, as illustrated in text block  of the cube axes configuration , the instance-loaded flag and instance-expanded for \u201cserver\u201d  are both specified as \u201cfalse\u201d. The state of these metadata indicates that the instance for \u201cserver\u201d  has not been loaded and expanded.",{"@attributes":{"id":"p-0151","num":"0150"},"figref":["FIG. 17","FIG. 11","FIG. 17","FIG. 17","FIG. 16"],"b":["1500","1500","1532","1530","1620","1532","1710","1500","1535","1530","1720","1725","1535","1730","1500","1725","1725"]},{"@attributes":{"id":"p-0152","num":"0151"},"figref":["FIG. 18","FIG. 12","FIG. 18","FIG. 18","FIG. 16"],"b":["1500","1500","1542","1540","1630","1542","1830","1500","1545","1540","1810","1820"]},{"@attributes":{"id":"p-0153","num":"0152"},"figref":["FIG. 19","FIG. 13","FIG. 19","FIG. 19","FIG. 17"],"b":["1500","1500","1535","1530","1725","1535","1910","1500","1538","1530","1920"]},"In many of the examples described above, the cube axes configurations are defined using XML. However, one of ordinary skill in the art would understand that the configurations could be defined using different formats. For example, instead of using matching tags, the cube axes configuration can be defined using different identifiers for different entities (e.g., measures, dimension, etc.).","Moreover, in some embodiments, this schema of cube axes configuration supports defining one or more axes outside of Axis0  and SlicerAxis . The example described above by reference to  shows that the cube axes configuration defines Axis1  and Axis2  in addition to Axis0  and SlicerAxis . In some embodiments, the cube axes configuration could also define Axis3, Axis4, etc. In some embodiments, the cube axes configuration may only define Axis1  in addition to Axis0  and SlicerAxis . The cube axes configuration of such embodiments can be used to render a simple list.","C. Cube Data","As mentioned above, some embodiments display or render a cube view based on cube data. In some such embodiments, the cube data is retrieved by formulating a query based on a cube axes configuration. In some embodiments, the retrieved cube data is stored in a cube cache. In some embodiments, the cube cache is a storage structure or a computer file (e.g., XML file) that includes all available cube data. For some embodiments of the inventions,  shows an example format of a cube data file. Specifically, this figure illustrates a cube cache file  that is used to present the interactive matrix shown in .","As shown in , the XML cube cache file  includes several cells. Each of these cells includes (1) a particular data value of the cell and (2) metadata that describes the cell. For example, a cell  has a value of 35. Also, the metadata of the cell  indicates that it is the cached data for the measure \u201ccomputer count\u201d at the intersection of member \u201cDell Inc.\u201d of hierarchy \u201ccomputer\u2014manufacturer\u201d and member \u201cserver\u201d of hierarchy \u201ccomputer\u2014system role\u201d. Similarly, a cell  has a value of 4737. The metadata of the cell  indicates that it is the cached data for the measure \u201cprogram count\u201d at the intersection of member \u201cDell Inc.\u201d of hierarchy \u201ccomputer\u2014manufacturer\u201d and member \u201cserver\u201d of the hierarchy \u201ccomputer\u2014system role\u201d. Furthermore, a cell  has a value of 21. The metadata of the cell  indicates that it is the cached data for the measure \u201ccomputer count\u201d at the intersection of member \u201cDell Inc.\u201d of hierarchy \u201ccomputer\u2014manufacturer\u201d and member \u201cserver\u201d of hierarchy \u201ccomputer\u2014system role\u201d. Also, a cell  has a value of 3456. The metadata of the cell  indicates that it is the cached data for the measure \u201cprogram count\u201d at the intersection of member \u201cDell Inc.\u201d of hierarchy \u201ccomputer\u2014manufacturer\u201d and member \u201cserver\u201d of hierarchy \u201ccomputer\u2014system role\u201d.","At any given time, the cube cache of some embodiments can have more or less cube data than a set of cube data required to completely render a cube view for a cube axes configuration. When a result set that is required to render the cube view does not exist in the cube cache, the cube browsing system of some embodiments renders the cube view with a set of default values. For example, if the computer count for servers manufactured by Dell Inc. does not exist in the cube cache, a default value of \u201c0\u201d will be displayed for the corresponding cell in an interactive matrix.",{"@attributes":{"id":"p-0160","num":"0159"},"figref":["FIG. 21","FIG. 11","FIG. 21","FIG. 21"],"b":["2000","2000","2000","2110","2110","2120","2120"]},"In some embodiments, data values of the cell  and  are dynamically retrieved based on an expansion operation. For example, in , when the user expands the hierarchy \u201ccomputer\u2014model\u201d, the expansion causes the cube browsing system of some embodiments to retrieve cube data (e.g., from the multidimensional database, from a previously cached storage).",{"@attributes":{"id":"p-0162","num":"0161"},"figref":["FIG. 22","FIG. 12","FIG. 22","FIG. 22","FIG. 12"],"b":["2000","2000","2000","2210","2210","2220","2220","2210","2220"]},{"@attributes":{"id":"p-0163","num":"0162"},"figref":["FIG. 23","FIG. 13","FIG. 23","FIG. 23","FIG. 13"],"b":["2000","2000","2000","2310","2310","2320","2320","2310","2320"]},"The cube viewer of some embodiments can generate more than one cube view each time it receives new cube and presentation data from the MDDS, and can quickly switch between these cube views at different instances in time (e.g., in response to different user interactions). For instance, in some embodiments, the viewer presents one cube view as an interactive presentation (e.g., an interactive matrix) that a user can manipulate to interactively obtain a particular perspective of the underlying cube data. In conjunction with the interactive presentation, the viewer of some embodiments generates other cube views (such as charts (e.g., pie charts, bar charts), graphs, tables, lists, etc.) and displays these other cube views in response to interactions with the interactive presentation. For example, one or more graphs or charts may be displayed upon a user selecting (e.g., clicking on a cursor, moving the cursor over, etc.) a member or cell of the interactive presentation. By pre-generating these other cube views, the viewer can quickly display them as needed when the user interacts with the interactive presentation. Also, in some embodiments, the viewer can simultaneously display different cube views that provide different perspectives of the same segment of a cube, or provide different views of different segments of the cube.",{"@attributes":{"id":"p-0165","num":"0164"},"figref":"FIG. 24","b":["1010","2410","2420","2430","820","800"]},"The interactive matrix  is similar to the one described above by reference to . However, in addition to the interactive matrix , the cube-browsing client simultaneously displays several thumbnails of the other presentations in the cube display area . This allows a user to view the underlying cube data from different perspectives at the same time. In some embodiments, each of the presentations is based on a portion of the cube data retrieved from a cube database. As mentioned above, the portion of the cube data in some embodiments is retrieved according to one or more entities specified in the cube axes configuration.","In the example illustrated in , when an end-user selects the thumbnail of a particular presentation (e.g., through a cursor, through the application's user touching a touch screen), the particular presentation is scaled to fill up the primary display area whereas the interactive matrix  is scaled down. In this example, each of the thumbnails of the different presentations is also repositioned accordingly. The cube-browsing client of some embodiments provides options for selecting a set of cube presentations to display. In some embodiments, the selection of a particular presentation causes the cube-browsing client to update the cube axes configuration. This updated cube axes configuration is then evaluated in order to render the particular cube presentation. In some embodiments, the modification to the cube axes configuration instigates a request to the cube database and\/or the cube cache to retrieve additional cube data.","As shown in , four different types of presentations are shown. However, one of ordinary skill in the art will realize that different types and\/or numbers of presentations could be used to differently present the cube view. For example, instead of displaying four presentations simultaneously, the cube-browsing client could display three or five presentations at the same time. In addition, instead of displaying the types of presentations described above, the cube-browsing client could display a graph, a table, a list, or some other visualization forms.",{"@attributes":{"id":"p-0169","num":"0168"},"figref":"FIG. 25A","b":["2510","820","2530","2550","2540","820"]},"In the example illustrated in , the column chart  displays several columns, each of which represents a particular computer manufacturer. There might be two regions on each column, one region  that is drawn in black color represents a measure relating to servers of that particular manufacturer and the other region  that is drawn in gray color represents a measure relating to workstations of the particular manufacturer.",{"@attributes":{"id":"p-0171","num":"0170"},"figref":"FIG. 25B","b":["2520","820","2530","2560","2540","820","2520","2522","2525"]},{"@attributes":{"id":"p-0172","num":"0171"},"figref":"FIGS. 17A and 17B","b":"820"},"As mentioned above, the cube-browsing client of some embodiments renders a cube view and dynamically generates one or more other cube views based on user-interaction with the cube view. For example, one or more graphs or charts may be displayed upon a user selecting (e.g., clicking on a cursor, moving the cursor over, etc.) a member or cell of an interactive matrix.  illustrates such an example of a cube view that is dynamically updated with an additional cube view. Specifically, in the cube display area  of the GUI , a position indicator hovers over a cell  on an interactive matrix  and causes a pie chart  to be displayed as a tooltip overlaying the interactive matrix. The cell  represents that there are 35 sever computers manufactured by Dell Inc. The pie chart  shows the relative proportions of the number of different computer models  among those 35 computers.","In some embodiments, the cube-browsing client detects that a user has selected an element (e.g., a member name or a cell in the grid of an interactive matrix) for a set period of time (e.g., two seconds). For example, the user has moved a position indicator (e.g., a cursor) over the element for the set period of time. If the position indicator hovers over the element more than the set period of time, the cube-browsing client determines that a tooltip detail overlay should be presented. The cube-browsing client then reviews the cube axes configuration and the cube cache to determine whether the data for the tooltip overlay is stored in the cube cache. If the data is in the cube cache, the cube-browsing client renders the tooltip overlay immediately. If the data is not in the cube cache, it queries the sever asynchronously for the result data set. Once the result data set has been processed, the cube-browsing client determines whether the current user interaction is still valid. If it is still valid, the tooltip overlay presentation will be rendered. This is the same operation in building a query as the one performed by an expansion operation. However, the rendering result is different.",{"@attributes":{"id":"p-0175","num":"0174"},"figref":["FIG. 27","FIG. 26","FIG. 26"],"b":["820","800","2720","1010","2710","2720","2710","2630","2740","2750","1010","2710","2720"]},{"@attributes":{"id":"p-0176","num":"0175"},"figref":["FIG. 28","FIG. 28"],"b":["2800","2800","2800","2805"]},"The process  then retrieves (at ) cube data based on the cube axes configuration and data stored in a cube cache. In some embodiments, this operation includes generating one or more queries based on the cube axes configuration and data in the cube cache, executing the queries against the cube database to receive a result set, and updating the cube cache and the cube axes configuration based on the result set.","At , the process  renders a set of presentations and displays at least a first presentation on a display. In some embodiments, the display operation includes displaying the first presentation in the primary area of the display and displaying the other presentations as thumbnails. In some embodiments, only the first presentation is displayed and the other presentations are hidden from the view.","The process  then receives (at ) user interaction which causes a second presentation to be displayed. A user interaction may cause a change in the cube axes configuration. The change then instigates an update in the display, e.g., updating the first presentation and displaying the second presentation. In some embodiments, the user interaction is selecting the thumbnail representing the second presentation. In some embodiments, the user interaction is hovering a position indicator over an element in the first presentation for a set period of time (e.g., two seconds).","The process  determines (at ) whether the second presentation is already rendered. When the second presentation is already rendered, the process  proceeds to , which will be described below. When the second presentation has not been rendered, the process  determines (at ) whether the data for rendering the second presentation is already stored in the cube cache. In some embodiments, this operation includes reviewing the cube axes configuration and the cube cache.","When the data for rendering the second presentation exists in the cube cache, the process  proceeds to , which will be described below. When the data for rendering the second presentation has not been stored in the cube cache, the process  retrieves (at ) cube data for displaying the second presentation. In some embodiments, this operation includes generating one or more queries based on the cube axes configuration and data in the cube cache, executing the queries against the cube database to receive a result set, and updating the cube cache and the cube axes configuration based on the result set.","At , the process  renders the second presentation. In some embodiments, this operation also updates the set of rendered presentations based on the updated cube axes configuration and cube cache. The process  then displays (at ) the second presentation. After displaying the second presentation, the process  terminates.","In the example described above, the cube browsing system performs a number of different operations to display a cube view. In some embodiments, these operations include (1) cube initialization, (2) cube axes configuration analysis, (3) data retrieval, (4) rendering, (5) expanding and collapsing data, and (6) intelligent caching and querying. Several example processes for such operations will now be described below by reference to .","A. Cube Client Initialization","For some embodiments of the invention,  conceptually illustrates a process  for initializing a cube-browsing client with a cube definition. In some embodiments, the process  is an elaboration of the initialization operation  illustrated in . In some embodiments, the purpose of the process  is to provision or provide a generic cube-browsing UI with the cube definition. This allows an end-user to create or modify a cube axes configuration by selecting different entities from the cube definition.","Process  of some embodiments starts when a cube-browsing client application is launched. As shown in , the process  begins by connecting (at ) to a multidimensional database. The process  then selects (at ) a cube. In some embodiments, the cube-browsing client includes one or more user-selectable items that a user can use to select which multidimensional database to connect to and\/or which cube to select. In some embodiments, some or all of these parameters for creating the connection and selecting the cube are pre-defined. In other words, the user does not need to provide any input for the cube-browsing client application to make the connection and\/or selection.","The process  then initiates (at ) a request to the multidimensional database to retrieve a definition of the cube. At , the process  receives the cube definition and stores it in metadata in order to present the cube definition in a user interface (UI). As mentioned above, the cube definition of some embodiments is in a XMLA format.","The process  then parses (at ) the cube definition into a field list. In some embodiments, the parsing entails parsing the XMLA cube definition to identify measure groups and associated measures, key performance indicators (KPIs), dimensions, etc. At , the process  renders the field list in the UI. The process  then ends.","In some embodiments, the process  is performed independently from operations relating to rendering of the cube view. The process  of some embodiments is an input to any cube-browsing client. That is, the first point of user interaction generally starts with viewing the entities that define the cube, including measure groups, measures, KPIs, dimensions, etc. In some embodiments, the process  does not place a constraint on the actual configuration (e.g., the cube axes configuration) or rendering that occurs after the process ends.","In addition, the process  of some embodiments supports a UI manifestation of the cube with multiple axes. Alternatively, the process  supports a UI manifestation of the cube with one axis in the case of a simple grid or chart. In some embodiments, the process  supports a UI manifestation of the cube with three axes (rows, columns, and filters) in the case of an interactive matrix as described above by reference to . Therefore, the process  supports any manifestation of a cube-browsing UI that leverages the entities within a cube definition as a part of describing its cube axes configuration.","B. Presentation Configuration",{"@attributes":{"id":"p-0192","num":"0191"},"figref":["FIG. 30","FIG. 29"],"b":["3000","3000","3000"]},"As shown in , the process  begins by receiving (at ) user interactions on entities within a cube definition and a cube axes configuration. In some embodiments, the user interactions include expanding or collapsing field list tree items, checkbox activation on a field list, drag and drop operations, different cursor or touch operations (e.g., right clicking on an item). In some embodiments, different entities (e.g., measures, dimension attributes) are added or removed from cube axes configuration, thus potentially changing the cube presentation.","The process  then instigates (at ) an update event. In some embodiments, the update event is automatically triggered when the configuration has changed. Alternatively, the update event is triggered manually (e.g., with a user's selection of a UI item, hotkey, etc.).","At , the process  then analyzes cube configuration change to determine how to render the updated presentation configuration. In some embodiments, this operation is equivalent to analysis operation  illustrated in . In some embodiments, the analysis operation entails identifying updates to the cube view based on configuration changes made at . In some embodiments, the process  checks at what level to start the changes. Based on the level to start the changes, the process  then decides on appropriate rendering operations to reflect the changes. In some embodiments, the analysis operation includes evaluating the cube axes configuration to determine how to render the updated cube view. For example, if the process  determines that a root hierarchy in Axis1 or Axis2 of the cube axes configuration has changed, the process will run the render root operation.","C. Cube Data Retrieval","As described above, a cube-browsing client of some embodiments retrieves cube data by sending a query (e.g., a MDX query) to a multidimensional database. In some embodiments, the query result set is returned in XML format.  shows an example format of a query result set (e.g., a MDX query result set) contained in a XML file. As shown, the MDX query results  include an \u201cOlapInfo\u201d element , an \u201cAxes\u201d element , and a \u201cCellData\u201d element .","The \u201cOlapInfo\u201d element  contains metadata about the cube, the cube axes configuration, and the format of cube data. The \u201cAxes\u201d element  includes information related to three axes: \u201cAxis0\u201d , \u201cAxis1\u201d , and \u201cSlicerAxis\u201d . \u201cAxis0\u201d  describes the measures included in this query. In this example, the measures are computer count and program count. \u201cAxis1\u201d  includes \u201ctuples\u201d , which in turn includes several tuples. Each tuple contains detailed location information about where the returned cube data belongs or should be displayed in the cube view. For example, tuple  includes three hierarchy members: member \u201call\u201d of hierarchy \u201ccomputer\u2014system type\u201d , member \u201call\u201d of hierarchy \u201ccomputer\u2014manufacturer\u201d , and member \u201cserver\u201d of hierarchy \u201ccomputer\u2014system role\u201d . As such, tuple  indicates associated cube data (cells) are the measures for servers of all computer manufacturers and all computer system types. \u201cSlicerAxis\u201d  describes filter information related to the query. In some embodiments, the member information for each hierarchy contained in the MDX query results  is used to update the cube axes configuration.","In some embodiments, the \u201cCellData\u201d element  includes the entire set of cube data returned from the MDX query. Each \u201ccell\u201d in the \u201cCellData\u201d element  contains a returned cube data. For example, cell  contains a cube data that has a value of 74 and cell  contains a cube data that has a value of 9482.","Since there are two measures (computer count and program count) in the cube axes configuration, every tuple is associated with two cells. In the example illustrated in , cell  and cell  are associated to tuple  because these two cells are the first two cells in \u201cCellData\u201d  and tuple  is the first tuple in \u201cAxis1\u201d . Here, the MDX query results  indicates that the computer count for servers of all system types and all manufacturers is 74, and the program count for servers of all system types and all manufacturers is 9482.",{"@attributes":{"id":"p-0201","num":"0200"},"figref":"FIG. 32","b":["3200","3200"]},"As shown in , the process  begins by determining (at ) whether the cube has been processed since the last time a MDX query result set was received and parsed. When the process  determines (at ) that the cube has been processed, the process dumps (at ) all existing data. In some embodiments, this means deleting all cube data in the cube cache and throwing away the received MDX query result set. The process  then notifies (at ) the cube-browsing client to re-render the root of cube presentation. After sending out the notice to the cube-browsing client at , the process  terminates.","When the cube has not been processed, the process  finds (at ) a list of members for a hierarchy in the query result set. The process  then checks (at ) a member in the member list against existing members for that hierarchy in the cube axes configuration. At , the process  determines whether a match for that member is found in the cube axes configuration.","When there is a match for the member in the cube axes configuration, the process  proceeds to  which is described below. When there is no match, the process  adds (at ) the member to the cube axes configuration. Here, the cube axes configuration is dynamically updated based on the MDX query result set. Specifically, the process  adds each member in the member that is not already contained in the cube axes configuration. The process  then proceeds to , which is described below.","At , the process  then determines whether there are more members in the member list. When there are more members in the member list, the process  returns to , which is described above. Otherwise, the process  determines (at ) whether there is any other hierarchy in the query result set.","When the there is another hierarchy, the process  returns to , which is described above. When the process  determines (at ) that there is no additional hierarchy in the query result, the process creates (at ) a cell for each cube data in the query result set. The process  then adds (at ) each cell into the cube cache if the cell does not already exist in the cube cache. Here, the cube cache is dynamically updated with cube data from the MDX query result set. Specifically, the process  populates the cube cache with cell data when the cell data is not stored in the cache. After adding cells into the cube cache at , the process  terminates.","D. Matrix Grid Root Rendering",{"@attributes":{"id":"p-0208","num":"0207"},"figref":["FIG. 33","FIG. 7","FIG. 33"],"b":["3300","3300","3300","730","3300","3300","3300","3305","3300","3310"]},"When the process  determines (at ) that a MDX query is required, the process constructs (at ) a root MDX query. In order to construct a root MDX query, the process  of some embodiments analyzes the cube axes configuration. In some embodiments, the analysis entails identifying which measures are defined in Axis0 and which root hierarchies are defined in Axis1 and Axis2, and constructing the query accordingly. The process  then performs (at ) asynchronous request to run the MDX query via Web service. At , the process  receives a MDX query result set from Web service. The process  then parses (at ) the MDX query result set. After the parsing of MDX query result set, the process  proceeds to , which is described below.","When the process  determines (at ) that a MDX query is not required, the process renders (at ) grid cells root. In some embodiments, the process  makes this determination by analyzing the cube axes configuration. For example, the process  of some embodiments may check if there are any hierarchies in Axis1 and Axis2. If there are Axis1 and Axis2 hierarchies, the process  finds a list of members for each root hierarchy in the cube axes configuration and renders the grid cells root accordingly.","The process  then renders (at ) data cells based on data in the cube cache. In some embodiments, if the cube data for a particular cell is not stored in the cube cache, the process renders a default value for the cell. At , the process  renders all member instance expansions. The process  then determines (at ) whether there is any instance that is expanded but not loaded.","When there is an instance that is expanded but not loaded, the process performs (at ) a expand operation. The process  then returns to . When the process  determines (at ) that all expanded instances are loaded and rendered, the process terminates.","E. Axis Expansion",{"@attributes":{"id":"p-0214","num":"0213"},"figref":["FIG. 34","FIG. 7"],"b":["3400","3400","760","3400"]},"As shown in , the process  begins by initializing (at ) the expand instance operation. In some embodiments, the process  performs the initialization by identifying the axis that is being expanded, finding member name that is being expanded, changing a UI expand button to a collapse button, updating the cube axes configuration to set the attribute \u201cexpanded\u201d as \u201ctrue\u201d for the expanding instance, and\/or some other operations. The process  then determines (at ) whether cube data is loaded. When the process  determines (at ) that cube data is not loaded, the process constructs (at ) an appropriate MDX query for this expanded instance.","The process  then performs (at ) asynchronous request to run the MDX query against a Web service. At , the process  receives a MDX query result set from the Web service. The process  then parses (at ) the MDX query result set, as described above by reference to . After parsing the MDX query result set, the process  proceeds to , which will be described below.","When the process  determines (at ) that cube data is loaded, the process renders (at ) the new grid axis level. In some embodiments, the process  performs the rendering by analyzing the cube axes configuration to identify the hierarchy at next level of the expanding hierarchy, identify members to be drawn, determine new rows or columns to be drawn, shift existing cells, and perform some other operations.","The process  then renders (at ) data cells based on cube data stored in the cube cache. The process  determines (at ) whether there is any missing cell in the cell queue. Missing cells are the cells that do not have a corresponding cube data value stored in the cube cache. Once a cell is determined to be a missing cell, it will be put into the cell queue so that a query will be constructed to retrieve the cube data value for the cell. When the process  determines (at ) that there is missing cell in the cell queue, the process queries (at ) for cells in the cell queue. The process  then returns to . When the process  determines (at ) that there is no missing cell in the cell queue, the process terminates.","F. Axis Collapse",{"@attributes":{"id":"p-0220","num":"0219"},"figref":["FIG. 35","FIG. 7"],"b":["3500","3500","750","3500"]},"As shown in , the process  begins by finding (at ) member name that is being collapsed. The process  then finds (at ) the correct instance in the cube axes configuration that uniquely identifies the instance of the member being collapsed. At , the process  sets expanded flag to \u201cfalse\u201d for the identified collapsing instance in the axes configuration.","The process  then identifies (at ) all rows or columns to be collapsed. At , the process  removes the rows or columns that comprise the collapsing instance on the grid. The process  then adjusts (at ) all remaining rows and columns accordingly to keep the integrity of the matrix. The process  then terminates.","G. Intelligent Caching and Querying","For some embodiments of the invention,  illustrates a cube-browsing client  with intelligent caching and querying features. This figure illustrates the cube-browsing client  at three different stages , , and . In particular, these stages show how the cube-browsing client  intelligently queries and caches cube data in order to reduce the number of data requests executed against the multidimensional database. Each of these stages will be described in detail below after an introduction of the cube-browsing client . As shown in , the cube-browsing client  includes a cube viewer , a cell cache , and a cell queue .","In some embodiments, the cube viewer  is an interactive matrix that displays the cube data that the end-user wants to view and interact with. In the example illustrated in , the cube viewer  intends to display three cube data: cell 1 , cell 2 , and cell 3 . In this figure, when the cube data for a data cell is not yet displayed in the cube viewer , the box representing the data cell is drawn with dotted lines. When the cube data for a data cell is displayed in the cube viewer , the box representing the data cell is drawn with a solid line.","The cell cache  is a data storage where local cube data is stored or a data structure that contains the cube data. At any point in time, the cell cache  may have more or less cube data stored in it than the set of cube data necessary to completely render a cube view. In the example illustrated in , there are two cube data (cell 1  and cell 2 ) in the cell cache  at the beginning stage . In some embodiments, the cell queue  is a first-in-first-out (FIFO) data structure for placing cube data that the cube-browsing client  wants to query against the multidimensional database. There is no cube data in the cell queue  at the beginning stage .","Having described the components of the cube-browsing client , the operations of intelligently querying and caching cube data will now be described by reference to the state of this cube-browsing client during the three stages , , and  that are illustrated in . In the first stage , the cube viewer  requires several pieces of cube data to render a cube view. Specifically, the cube viewer  requires data relating to cell 1 , cell 2 , and cell 3 . The data relating to these data cells are not yet displayed as they are drawn with dotted lines. The cell cache  stores two cube data: cell 1  and cell 2 . The cell queue  is empty at this stage .","The second stage  shows the cube-browsing client  after the cube viewer  has searched the cell cache  for the required cube data. Since cube data cell 1 and cell 2 are available in the cell cache , they are displayed in the cube viewer . Since cell 3  is not found in the cell cache , it is not displayed in the cube viewer . In order to query for cell 3, the cube-browsing client  puts cell 3  into the cell queue .","As shown in the third stage , the cube-browsing client  has processed the cell queue , generated query for cell 3, and received a query result set. Accordingly, cell 3  is removed from the cell queue  and a new cube data cell 3  is inserted into the cell cache . The cube viewer  also displays the cube data cell 3  because it is now available in the cell cache .","In the example described above, the cube viewer  of some embodiments first accesses or analyzes the cell cache  to find cube data relating to one or more entities. The cube viewer  then queries for data that is not available in the cell cache . The cell cache  stores all the locally available cube data. As a result, the cube-browsing client  minimizes data communication to the multidimensional database, therefore improves its performance. In some embodiments, the cube viewer  presents the cube view as an interactive matrix. In some embodiments, the cube viewer  presents the cube view as a bar chart, a pie chart, a simple list, a graph, a table, or some other visualization forms.",{"@attributes":{"id":"p-0231","num":"0230"},"figref":"FIG. 37","b":["3700","3700"]},"In the expansion process described above by reference to , there is an operation that alters parts of the grid that represent the axes and the members of one or more axis, and draws empty data cells on the grid that need to be evaluated for their actual values. In some embodiments, the process  deals with these empty cells.","As shown in , the process  begins by looking (at ) for matching value in a cell cache for an empty cell that is not yet being processed. The process  then determines (at ) whether there is a matching value found in the cell cache. When a matching value is found in the cell cache, the process  renders (at ) the empty cell with the matching value. When the process  determines (at ) that a matching value is not found in the cell cache, the process inserts (at ) the empty cell into a cell queue and marks that cell as processed.","The process  then determines (at ) whether there are more empty cells left unprocessed. When there are more unprocessed empty cells, the process  returns to . When the process  determines (at ) that there is no additional empty cell left unprocessed, the process determines (at ) whether there are any cells in the cell queue.","When there are cells in the cell queue, the process  performs (at ) one or more queries for cells in the cell queue. In some embodiments, the operation  is elaborated in process  described below by reference to . After receiving query results, the process  adds (at ) query results into the cell cache. The process  then returns to . When the process  determines (at ) that there are no cells in the cell queue, the process terminates.",{"@attributes":{"id":"p-0236","num":"0235"},"figref":["FIG. 38","FIG. 37","FIG. 37","FIG. 34"],"b":["3800","3700","3800","3800","3735","3800","3700"]},"As shown in , the process  begins by determining (at ) whether there is any cell in the cell queue. When the process  determines (at ) that there is cell in the cell queue, the process proceeds to , which is described below. When the process  determines (at ) that there is no cell in the cell queue, the process terminates.","The process  evaluates (at ) the cube axes configuration for each expanded instance that is flagged as un-reviewed on a non-expanding axis from the most granular position to the least granular position to find matching non-expanding axis instances in the cell queue. The process  then determines (at ) whether any cells in the cell queue matching the non-expanding axis instance are found.","When the process  determines (at ) that matching non-expanding axis instances are found, the process constructs (at ) a query based on the matching non-expanding axis instances. When the process  determines (at ) that matching non-expanding axis instances are not found, the process proceeds to , which is described below.","The process  flags (at ) the expanded instance as reviewed. The process  then removes (at ) cells that match instances from the cell queue. After removing matching instances from the cell queue at , the process  returns to  to check whether there are more cells in the cell queue. When the process  determines (at ) that there is no additional cell in the cell queue, the process terminates.","In some embodiments, when the process  finishes, the process  described above in  will be performed. So, process  initiates the process  and is also called at the end of the process . The loop only ends when process  completes with no cells in the cell queue.","The specific operations of the processes described above may not be performed in the exact order shown and described. The specific operations may not be performed in one continuous series of operations, and different specific operations may be performed in different embodiments. Furthermore, the processes could be implemented using several sub-processes, or as part of a larger macro process.","Some of the processes described above illustrate themselves by using a cube-browsing client with an interactive matrix as an example. However, irrespective of the example described above, one of ordinary skill in the art will realize that some embodiments of the invention might use other methods to present a cube view. For instance, instead of presenting the cube view as an interactive matrix, the method of some embodiments may present the cube view as a simple list, a pie chart, a simple list, or some other forms.","As mentioned above, the cube-browsing client of some embodiments is implemented as a stand-alone application or as a plug-in component. Several examples of such embodiments will now be described by reference to . In some embodiments, the cube-browsing system is implemented as part of a larger system of interchanging data, scheduled tasks, etc. An example of such embodiments will be described by reference to . In addition, the cube-browsing client of some embodiments is implemented as a part of a multidimensional data storage (MDDS) system. An example system diagram of an MDDS system will be described by reference to .","A. Stand-Alone Cube-Browsing System",{"@attributes":{"id":"p-0246","num":"0245"},"figref":["FIG. 39","FIGS. 14-23"],"b":["3900","3910","3910","3920","3930","3940","3950"]},"In some embodiments, the cube-browsing system  is initialized with a pre-populated cube definition , cube axes configuration , and cube data . The cube definition  defines all the entities (measures, dimensions, hierarchies, etc.) available to define the cube axes configuration . The cube axes configuration  includes a subset of entities defined in the cube definition  and the relationships between the subset of entities. The cube axes configuration  could be blank or a very simple configuration as a starting point.","In some embodiments, all cube data  belong to the multidimensional cube defined by the cube definition . In the example illustrated in , the cube data cannot be updated because the cube-browsing system  is not connected to a multidimensional database that stores the related cube data.","In some case, the cube data  is populated with more cube data than is necessary for the initial cube axes configuration. Upon modification to the cube axes configuration , the CVRE  of some embodiments analyzes the cube data  to determine whether the data it needs is contained in the cube data . When the necessary cube data is not available, the CVRE  of some embodiments uses a set of default values. When the cube data is available, the CVRE  integrates the cube data into the cube view .","Similar to many of the examples described above, the cube axes configuration  can be dynamically modified based on user input. For example, the cube axes configuration of some embodiments is modified with the user selecting different entities from the cube definition . The CVRE  of some embodiments updates the cube view  based on the cube axes configuration  and available cube data .","One advantage of the cube-browsing system  is that it allows a user to continue to browse multidimensional data even when there is no connection (e.g., a network connection) to communicate with a multidimensional database. For example, with this stand-alone system, the user can continue to browse multidimensional data when the user is on an airplane, or even during a natural disaster that shuts down data communications.","B. Web Browser Plug-in",{"@attributes":{"id":"p-0253","num":"0252"},"figref":["FIG. 40","FIG. 40"],"b":["4000","4030","4010","4010","4015","4020","4025","4030","4033","4036"]},"The network services manager  provides the plug-ins with an application programming interfaces (\u201cAPIs\u201d) related to network communication, such as requesting data from web servers, retrieving data, etc. The UI service manager  provides the plug-ins with a set of APIs related to user interface, such as drawing a UI, modifying a UI, and other operations on a UI. The plug-in manager  provides a way for plug-ins to register themselves with the web browser . The plug-in manager  also allows the web browser  to manage the plug-ins. For example, through the plug-in manger , the web browser  can add, remove, or update a plug-in.","The browser services interface  allows the cube-browsing plug-in client  to access services provided by the host browser. Those services may be provided through a set of APIs. In some embodiments, the browser services interface  requests service from the host browser by calling those APIs. The plug-in interface  registers the cube-browsing plug-in client  with the host browser and receives instructions from the host browser.","In some embodiments, the cube-browsing plug-in client  functions similar to a regular cube-browsing client. However, as a plug-in component, the cube-browsing plug-in client  cannot function independently. In other words, the plug-in component relies on the services provided by the web browser .","In the example illustrated in , the browser services interface  invokes the APIs provided by the network services manager  and the UI services manager  in order to perform its networking and UI functionalities. The plug-in interface  registers the cube-browsing plug-in client  with the web browser  through a request to the plug-in manger . The plug-in interface  also receives instructions from the plug-in manger . As a result of adding the cube-browsing plug-in client  into the web browser , the web browser is able to browse multidimensional data.","C. Alternate Cube Data Processing System",{"@attributes":{"id":"p-0259","num":"0258"},"figref":["FIG. 41","FIG. 2"],"b":["4100","4100","4110","245","250","255","4110","4120","4110"]},"D. Multidimensional Data Storage System","Some embodiments of the invention provide an MDDS system for managing different MDDS cubes and provisioning these cubes for MDDS clients to access the data in these cubes. In some embodiments, an MDDS cube is a multidimensional data structure that facilitates quick viewing of data from a set of data sources. The system of some embodiments receives definitions of different MDDS cubes, and based on the definitions, performs an automated process that (1) analyzes the system's available resources (such as the data storages and data in the data storages), and (2) based on the identified system resources, identifies MDDS cubes that can be installed from several MDDS cubes that are candidates for installation. In some embodiments, the system installs MDDS cubes that the system has determined can be installed, and then processes the MDDS cube in order to populate and provision the cube to MDDS clients for consumption. The system in some embodiments installs an installable MDDS cube automatically upon determining that an MDDS cube can be installed or upon receiving input from a user to install the MDDS cube.",{"@attributes":{"id":"p-0262","num":"0261"},"figref":"FIG. 42","b":["4200","4200","4220","4210","4215","4225","4230","4235","4200","4205","4235","4260","4260"]},"The N data storages  store data that can be retrieved and viewed by a user through one or more MDDS cubes that are installed in the system. These N data storages  are provided by M different storage vendors in some embodiments, where N and M are integer values that can differ. In some embodiments, a data storage  is any type of data storage that stores data to which MDDS tools may be applied (e.g., for business intelligence purposes).","Each of the data storages  may be implemented differently in different embodiments. In the example illustrated in , the data storages  include different instances of one data storage of one product from one vendor, and include different instances of different data storages of different products from one vendor or different vendors. Examples of different storage products include Microsoft System Center Configuration Manager\u00ae, Microsoft System","Center Operations Manager\u00ae, Microsoft Forefront Endpoint Protection\u00ae, Symantec Management Platform\u00ae, Symantec Endpoint Protection\u00ae, or any type of product that has data to which MDDS tools may be applied (e.g., for business intelligence purposes). In other embodiments, the system  of  is just used with the same storage product and\/or different storage products of just one vendor.","In the example illustrated in this figure, each of the products for each of the vendors 1-M generates and\/or collects data, and then stores the products' data in one of the data storages 1-N. For instance, a product for vendor 1 generates and\/or collects data and stores such data in data storage 1, another product for vendor 1 generates and\/or collects data and stores such data in data storage 2, a product for vendor 2 generates and\/or collects data and stores such data in data storage 3, a product for vendor 3 generates and\/or collects data and stores such data in data storage 4, etc.","Each data storage  may be implemented in any number of different ways. For instance, a data storage  of some embodiments may be implemented as a database (e.g., a relational database, a hierarchical database, a flat file database, or any other type of database for storing data). Alternatively, a data storage  may be implemented as a file (e.g., an XML file, a spreadsheet file, a comma-separated values (CSV) file, a text file, etc.), or as any other type of object that serves as a source of data. Each data storage  in some embodiments is implemented by a single storage unit (e.g., a hard drive) or by several storage units (e.g., hard drives).","As mentioned above, each data storage stores data that can be viewed through one or more installed MDDS cubes. The system  installs the MDDS cubes by using the MDDS cube definitions. Each MDDS cube definition  describes a multidimensional data structure for a corresponding MDDS cube (not shown). For example, in some embodiments, an MDDS cube definition  specifies data (e.g., measures) for an MDDS cube, data attributes (e.g., dimensions) for categorizing the data along a set of dimensions, and a set of data sources that contains the data and the data attributes.","In , an MDDS cube definition may specify data for an MDDS cube (not shown), and such data is contained in one of the data storages 1-N. For example, the MDDS cube 1 definition specifies an MDDS cube that contains data from data storage 1, the MDDS cube 2 definition specifies an MDDS cube that contains data from data storage 2, the MDDS cube 3 definition specifies an MDDS cube that contains data from data storage 3, etc. In addition, an MDDS definition of some embodiments further specifies the manner in which the data in the set of data sources is organized (e.g., database schema).","As mentioned above, the system  can manage and install different MDDS cubes defined by the same or different authors for different products offered by the same or different vendors. In some embodiments, an author may be a company specializing in MDDS cube design, an MDDS cube designer, a database administrator, or any entity that develops MDDS cubes. For instance, an author may define different MDDS cubes for different vendors. As shown in , author C has defined an MDDS cube definition for the MDDS cube 3 for vendor 1 and an MDDS cube definition for the MDDS cube 6 for vendor 3 As another example, an author may define different MDDS cubes for different products from the same vendor. In , author B has defined MDDS cube definitions for the MDDS cube 5 and MDDS cube 7 for different products (not shown in ) for the same vendor M. As illustrated, the system  manages MDDS cubes that are defined by any author for any product from any vendor.","Before installing a cube, the cube availability detector  of some embodiments analyzes MDDS cube definitions  to determine which MDDS cubes are available and which MDDS cubes are not available. For a particular MDDS cube, the cube availability detector  in some embodiments determines that the particular MDDS cube is available when this detector determines that it can access the data and data attributes that define the MDDS cube from the set of data storages  to install and deploy the MDDS cube for consumption by MDDS clients. The detector in some embodiments determines that it can access such data and data attributes when it determines that the following three conditions are met: (1) a set of data storages  (i.e., a set of data sources) specified in an MDDS cube definition  for the MDDS cube exists, (2) data specified in the MDDS cube definition  for the MDDS cube is stored in the set of data storages , and (3) the data attributes for the data are stored in the set of data storages . In some embodiments, the detector determines that the set of data storages  specified in an MDDS cube definition  for the MDDS cube exists when this detector can establish connections to, or can access data from, the set of data storages .","Alternatively, the cube availability detector  of some embodiments determines that a particular MDDS cube is not available when any of the three conditions mentioned above are not met. Also, in some embodiments, the cube availability detector  determines that a particular MDDS cube is not available when this detector  determines that the data for the MDDS cube is not organized in the set of data sources according to a schema specified for the MDDS cube. In addition, the cube availability detector  of some embodiments determines that an MDDS cube is not available when the cube availability detector  cannot access the data or the data attributes that define the MDDS cube.","The cube installer  installs MDDS cubes that are determined to be available (e.g., by the cube availability detector ) and not yet installed. For a particular MDDS cube that is available, the cube installer  of some embodiments installs an instance of the particular MDDS cube based on the corresponding MDDS cube definition for the particular MDDS cube. To install the particular MDDS cube, the cube installer  creates a data structure according to the MDDS cube definition of the particular MDDS cube. The installing of the particular MDDS cube may also be referred to as creating an instance of the particular MDDS cube.","In some embodiments, the cube installer  stores the instance of the particular MDDS cube in the MDDS cube storage . In some such embodiments, the MDDS cube is stored in the MDDS cube storage  in a multidimensional database while, in other such embodiments, the MDDS cube is stored in the MDDS cube storage  in a relational database. In some embodiments, the MDDS cube is stored in the MDDS cube storage  in a hybrid database that includes a multidimensional database and a relational database (e.g., some data may be stored in the multidimensional database and some data may be stored in the relational database).","After a particular MDDS cube is installed, the particular MDDS cube may be processed. The cube installer  of some embodiments processes the particular MDDS cube by aggregating the data and data attributes specified by the MDDS cube definition from the set of data sources (e.g., by querying the data and the data attributes from the set of data sources) specified by the MDDS cube definition and populating the data structure of the particular MDDS cube with the aggregated data and data attributes. After the particular MDDS cube has been processed, the particular MDDS cube is ready for consumption by an MDDS client. For this example, the installed MDDS cubes are MDDS cubes that the cube installer  has installed and processed. Thus, installed MDDS cubes may be consumed by MDDS clients.","In some embodiments, the cube installer  installs an MDDS cube based on input from a user. In some instances, the MDDS system  receives input (e.g., through a graphical user interface (\u201cGUI\u201d), a command line interface, or any other type of interface for receiving input) from a user to install and deploy an MDDS cube that the cube availability detector  has determined as available.","The web services module  of some embodiments is an MDDS viewing tool that allows MDDS clients to consume the installed MDDS cubes. For instance, in some embodiments, the web services module  is an interface of the MDDS system  through which MDDS clients consume MDDS cubes. The web services module  provides a list of installed and consumable MDDS cubes to an MDDS client upon connection to the web services module  in some embodiments. The web services module  may receive requests to consume a particular installed MDDS cube. In response to the requests, the web services module  may access the particular installed MDDS cube and transmit a portion of or all of the data and\/or data attributes of the MDDS cube to the MDDS client.","Different embodiments of the web services module  provide different techniques for the MDDS clients  to consume MDDS cubes. For instance, the web services module  of some embodiments allows the MDDS clients  to consume MDDS cubes through a multidimensional expressions (MDX) query language while other embodiments of the web services module  allow the MDDS clients  to consume MDDS cubes through an object linking and embedding, database (OLE DB) for OLAP application programming interface (API). Still, in other embodiments, the web services module  allows the MDDS clients  to consume MDDS cubes through an extended markup language for analysis (XMLA). In some embodiments, the web services module  provides a combination of the previously mentioned techniques and\/or any other technique for consuming MDDS cubes.","In some embodiments, the web services module  implements functions through a set of web services that are provided to the MDDS clients  over the network  (i.e., the set of web services are interfaces through which the MDDS clients  consume MDDS cubes managed by the MDDS system ). For instance, the set of web services provided by the web services module  may include (1) a service for receiving requests from the MDDS client  to consume installed MDDS cubes (which are not shown in ), (2) a service for providing a list of installed and consumable MDDS cubes to the MDDS clients , (3) a service for transmitting MDDS cube definitions to the MDDS clients , (4) a service for transmitting a portion of or all of the data and\/or data attributes of MDDS cubes to the MDDS clients  (as shown by MDDS cubes ), etc. In some embodiments, the web services module  provides an MDX query language, an OLE DB API, XMLA, or a combination of these techniques and\/or any other technique for the MDDS clients  to consume MDDS cubes.","In some embodiments, an MDDS client  is any application that is configured to consume MDDS cubes. An MDDS client  of some embodiments consumes an MDDS cube by accessing the MDDS cube's data or retrieving data from the MDDS cube (e.g., by using an MDX query language, an OLE DB API, XMLA, etc.). Different embodiments of the MDDS clients  may consume an MDDS cube differently. For example, an MDDS client  of some embodiments consumes an MDDS cube by displaying a portion of or all of the MDDS cube's data and data attributes. In some embodiments, an MDDS client  consumes an MDDS cube by processing the MDDS cube's data. Other embodiments of an MDDS client  consume an MDDS cube by storing a portion of or all of the MDDS cube's data and data attributes. An MDDS client  of other embodiments may consume an MDDS cube in other ways as well.","Different embodiments of the MDDS clients  are implemented differently. In some instances, an MDDS client  is implemented as a standalone application while, in other instances, an MDDS client  is implemented as an application that is part of another application. In addition, an MDDS client  of some embodiments is implemented as a thick client (e.g., a component that is included in the MDDS system ) while an MDDS client  of other embodiments is implemented as a thin client (e.g., a third party web browser).","One example operation of the MDDS system  that is based on an MDDS cube definition  of an MDDS cube will now be described for some embodiments of the invention. The cube availability detector  initially analyzes the MDDS cube definition  to identify data for the MDDS cube, data attributes that categorizing the data along a set of dimensions, and a set of data sources that contains the data and the data attributes.","The cube availability detector  determines that the MDDS cube is available when the set of data sources exists and the data and data attributes are stored in the set of data sources. In some embodiments, the cube availability detector  determines that the set of data sources exists when the cube availability detector  establishes a connection to each data source in the set of data sources and accesses data in the data sources. On the other hand, the cube availability detector  determines that the MDDS cube is not available when the cube availability detector  cannot establish a connection to one of the data sources in the set of data sources exists, or cannot access the data or the data attributes (e.g., some or all of the data and\/or data attributes is not stored in the set of data sources).","When the cube availability detector  determines that the MDDS cube is available, the cube installer  installs the MDDS cube. To install the MDDS cube, the cube installer  utilizes the MDDS cube definition to generate an instance of the MDDS cube. The cube installer  of some embodiments stores the instance of the MDDS cube in the MDDS cube storage . In some embodiments, the cube installer  automatically installs the MDDS cube upon the cube availability detector  determining that the MDDS cube is available while, in other embodiments, the cube installer  installs the MDDS cube upon the MDDS system  receiving input (e.g., through a graphical user interface (\u201cGUI\u201d), a command line interface, or any other type of interface for receiving input) from a user.","Once the MDDS cube is installed, the cube installer  may process the instance of the MDDS cube to aggregate the data and data attributes that define the MDDS cube and populate the data structure of the MDDS cube with the aggregated data and the data attributes so that the cube may be consumed by one of the MDDS clients .","Many of the above-described features and applications are implemented as software processes that are specified as a set of instructions recorded on a computer readable storage medium (also referred to as computer readable medium). When these instructions are executed by one or more processing unit(s) (e.g., one or more processors, cores of processors, or other processing units), they cause the processing unit(s) to perform the actions indicated in the instructions. Examples of computer readable media include, but are not limited to, CD-ROMs, flash drives, RAM chips, hard drives, EPROMs, etc. The computer readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.","In this specification, the term \u201csoftware\u201d is meant to include firmware residing in read-only memory or applications stored in magnetic storage, which can be read into memory for processing by a processor. Also, in some embodiments, multiple software inventions can be implemented as sub-parts of a larger program while remaining distinct software inventions. In some embodiments, multiple software inventions can also be implemented as separate programs. Finally, any combination of separate programs that together implement a software invention described here is within the scope of the invention. In some embodiments, the software programs, when installed to operate on one or more electronic systems, define one or more specific machine implementations that execute and perform the operations of the software programs.",{"@attributes":{"id":"p-0288","num":"0287"},"figref":"FIG. 43","b":["4300","4300","4300","4305","4310","4315","4320","4325","4330","4335","4340","4345"]},"The bus  collectively represents all system, peripheral, and chipset buses that communicatively connect the numerous internal devices of the electronic system . For instance, the bus  communicatively connects the processing unit(s)  with the read-only memory , the GPU , the system memory , and the permanent storage device .","From these various memory units, the processing unit(s)  retrieves instructions to execute and data to process in order to execute the processes of the invention. The processing unit(s) may be a single processor or a multi-core processor in different embodiments. Some instructions are passed to and executed by the GPU . The GPU  can offload various computations or complement the image processing provided by the processing unit(s) .","The read-only-memory (ROM)  stores static data and instructions that are needed by the processing unit(s)  and other modules of the electronic system. The permanent storage device , on the other hand, is a read-and-write memory device. This device is a non-volatile memory unit that stores instructions and data even when the electronic system  is off. Some embodiments of the invention use a mass-storage device (such as a magnetic or optical disk and its corresponding disk drive) as the permanent storage device .","Other embodiments use a removable storage device (such as a floppy disk, flash drive, or ZIP\u00ae disk, and its corresponding disk drive) as the permanent storage device. Like the permanent storage device , the system memory  is a read-and-write memory device. However, unlike storage device , the system memory  is a volatile read-and-write memory, such a random access memory. The system memory  stores some of the instructions and data that the processor needs at runtime. In some embodiments, the invention's processes are stored in the system memory , the permanent storage device , and\/or the read-only memory . For example, the various memory units include instructions for processing multimedia clips in accordance with some embodiments. From these various memory units, the processing unit(s)  retrieves instructions to execute and data to process in order to execute the processes of some embodiments.","The bus  also connects to the input and output devices  and . The input devices  enable the user to communicate information and select commands to the electronic system. The input devices  include alphanumeric keyboards and pointing devices (also called \u201ccursor control devices\u201d). The output devices  display images generated by the electronic system. The output devices  include printers and display devices, such as cathode ray tubes (CRT) or liquid crystal displays (LCD). Some embodiments include devices such as a touchscreen that function as both input and output devices.","Finally, as shown in , bus  also couples electronic system  to a network  through a network adapter (not shown). In this manner, the computer can be a part of a network of computers (such as a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), or an Intranet, or a network of networks, such as the Internet. Any or all components of electronic system  may be used in conjunction with the invention.","Some embodiments include electronic components, such as microprocessors, storage and memory that store computer program instructions in a machine-readable or computer-readable medium (alternatively referred to as computer-readable storage media, machine-readable media, or machine-readable storage media). Some examples of such computer-readable media include RAM, ROM, read-only compact discs (CD-ROM), recordable compact discs (CD-R), rewritable compact discs (CD-RW), read-only digital versatile discs (e.g., DVD-ROM, dual-layer DVD-ROM), a variety of recordable\/rewritable DVDs (e.g., DVD-RAM, DVD-RW, DVD+RW, etc.), flash memory (e.g., SD cards, mini-SD cards, micro-SD cards, etc.), magnetic and\/or solid state hard drives, read-only and recordable Blu-Ray\u00ae discs, ultra density optical discs, any other optical or magnetic media, and floppy disks. The computer-readable media may store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code, such as is produced by a compiler, and files including higher-level code that are executed by a computer, an electronic component, or a microprocessor using an interpreter.","While the above discussion primarily refers to microprocessor or multi-core processors that execute software, some embodiments are performed by one or more integrated circuits, such as application specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs). In some embodiments, such integrated circuits execute instructions that are stored on the circuit itself.","As used in this specification and any claims of this application, the terms \u201ccomputer\u201d, \u201cserver\u201d, \u201cprocessor\u201d, and \u201cmemory\u201d all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification, the terms display or displaying means displaying on an electronic device. As used in this specification and any claims of this application, the terms \u201ccomputer readable medium,\u201d \u201ccomputer readable media,\u201d and \u201cmachine readable medium\u201d are entirely restricted to tangible, physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals, wired download signals, and any other ephemeral signals.","The present application describes a graphical user interface that provides users with numerous ways to perform different sets of operations and functionalities. In some embodiments, these operations and functionalities are performed based on different commands that are received from users through different input devices (e.g., keyboard, track pad, touchpad, mouse, etc.). For example, the present application describes the use of a cursor in the graphical user interface to control (e.g., select, move) objects in the graphical user interface. However, in some embodiments, objects in the graphical user interface can also be controlled or manipulated through other controls, such as touch control. In some embodiments, touch control is implemented through an input device that can detect the presence and location of touch on a display of the device. An example of such a device is a touch screen device. In some embodiments, with touch control, a user can directly manipulate objects by interacting with the graphical user interface that is displayed on the display of the touch screen device. For instance, a user can select a particular object in the graphical user interface by simply touching that particular object on the display of the touch screen device. As such, when touch control is utilized, a cursor may not even be provided for enabling selection of an object of a graphical user interface in some embodiments. However, when a cursor is provided in a graphical user interface, touch control can be used to control the cursor in some embodiments.","While the invention has been described with reference to numerous specific details, one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. In addition, a number of the figures (including , , , , , , , , , , and ) conceptually illustrate processes. The specific operations of these processes may not be performed in the exact order shown and described. The specific operations may not be performed in one continuous series of operations, and different specific operations may be performed in different embodiments. Furthermore, the process could be implemented using several sub-processes, or as part of a larger macro process. Thus, one of ordinary skill in the art would understand that the invention is not to be limited by the foregoing illustrative details, but rather is to be defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features of the invention are set forth in the appended claims. However, for purpose of explanation, several embodiments of the invention are set forth in the following figures.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 25A"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 25B"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 43"}]},"DETDESC":[{},{}]}
