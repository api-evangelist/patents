---
title: Automated method for creating a graphical user interface for a document management system that is visually integrated with an application having limited native GUI-integration capabilities
abstract: An add-on application, running on a computer, allows a user to store, in a repository, information such as (for example) document images, and to associate particular information with specified states of a host application such as the QUICKBOOKSÂ® accounting software. When the add-on application determines, for example, that a bill is being displayed (or is about to be displayed) on the screen by the host application, the add-on application automatically obtains, and displays on the screen, information associated with the bill, such as a list or count of one or more electronic documents that are associated with the bill. In our particular embodiment, the auxiliary window is a toolbar or sidebar window located within the host application window itself. The foregoing is achieved utilizing standard host-application SDK and operating-platform API functionality, thus reducing the risk of degrading the host application's performance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08286199&OS=08286199&RS=08286199
owner: SmartVault Corporation
number: 08286199
owner_city: Houston
owner_country: US
publication_date: 20090520
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS"],"p":["This application claims priority based on provisional patent application No. 61\/091,331, filed Aug. 22, 2008, which is incorporated herein by reference.","The invention we are disclosing and claiming here had its origins in our work developing a software package ('application') for online electronic document management, known as the SmartVault\u2122 application, as an add-on to the well-known QUICKBOOKS\u00ae small-business accounting software published by Intuit Inc. In hindsight, it became apparent that our invention can be adapted to work with a wide variety of other software applications.","The user could also invoke the attachment functionality in other conventional ways, such as (i) by selecting the appropriate item from the menu ; or (ii) by dragging and dropping a file from an external application such as Windows Explorer; or (iii) by actuating a suitable scanner, such as the commercially-available FUJITSU\u00ae SCANSNAP\u2122 scanner, to scan a hard-copy document into an electronic image, possibly invoking optical character recognition functions in the process.","Some host applications, such as Microsoft Outlook, provide extensive software development kits (SDK) that enable third-party developers to create plug-in applications that can include a rich graphical user interface to provide an apparently-seamless extension of the functionality of the host application. Unfortunately, many and even most host applications, including QuickBooks, provide little if any support for such a capability in their SDKs (assuming they have an SDK at all).","Some add-on applications for QuickBooks offer a limited extended-GUI capability along these lines. None, however, provides what we considered a desirable user experience from a document-management perspective.","Some of these QuickBooks add-on products suffer from what we consider to be a significant usability problem: When (for example) a user navigates from one data record to another in QuickBooks, these add-on products do not automatically provide a conspicuous visual indicator, such as for example an icon on the QuickBooks toolbar, to let the user know that related information is available for that particular data record. If the user wants to find out whether any such documents are available, s\/he must intentionally navigate to a QuickBooks menu item and click on it (or perform some other action). In our view, this leads to a lower-quality user experience.","Some such add-on products attempt to overcome this usability problem by writing a message in the memo field of the QuickBooks data record (for example, \u201cdocuments have been saved for this transaction\u201d), and\/or by appending a special character such as an asterisk * to the end of the memo field. The difficulty with this approach, however, is that the user could accidentally or inadvertently overwrite the message or the special character if s\/he were to edit the memo field. Moreover, a user could simply overlook the special character and not realize that documents associated with the data record were available.","In one embodiment of our invention, an add-on application, running on a computer, allows a user to store, in a repository, supplemental records containing information such as (for example) document images, and to associate particular supplemental records with specified states of a host application such as QuickBooks. The add-on application then monitors the host application as the user utilizes the host application's various capabilities. When the add-on application determines that a particular data record is being displayed (or is about to be displayed), or that some other particular state exists (or is about to exist) in the host application, the add-on application automatically obtains information about the specified data record or the specified state, such as a list or count of one or more supplemental records (for example, electronic documents) that are associated with the specified data record or the specified state. The add-on application then automatically displays, in an auxiliary window, summary information about the supplemental records (for example, a count of the number of documents that are associated with a bill being viewed on the screen), and\/or the contents of one or more of the supplemental records themselves, and\/or other status information. In our particular embodiment, the auxiliary window is a toolbar or sidebar window located within the host application window itself. The foregoing is achieved utilizing standard host-application SDK and operating-platform API functionality, thus reducing the risk of degrading the host application's performance.","We describe below how to make and use some specific embodiments of the invention we are claiming. In the interest of brevity and clarity, we focus on what might colloquially be called the \u2018secret sauce,\u2019 omitting various routine software design- and implementation details that would be apparent to (or readily discoverable by) suitably diligent persons of ordinary skill. We do not discuss, for example, the selection of appropriate programming languages; the development of user interfaces except to a limited extent; considerations of data security; and the like.","As an illustrative example, we describe how the invention helps one particular add-on application, namely the SmartVault application, interoperate with a particular host application, namely the QuickBooks application. In hindsight, of course, those of ordinary skill will quickly see that the invention can be implemented in other add-on applications to support other host applications.","THE OPERATING PLATFORM: Referring to  a conventional operating platform  provides support for a host application , both running on a conventional computer (not shown). In some implementations, the operating platform  may be an operating system such as Microsoft Windows\u00ae or a species of Unix\u00ae such as Linux\u00ae, Mac OS\u00ae X, etc. In Web-based implementations, the operating platform  may be a Web browser such as Firefox\u00ae, Internet Explorer\u00ae, Chrome\u2122, Opera\u2122, Flock\u2122, Safari,\u00ae etc.","THE ADD-ON APPLICATION AND ITS AUXILIARY WINDOW: Referring to , an add-on application  in accordance with our invention, also running on the computer, displays an auxiliary window . In our specific implementation, the auxiliary window  takes the form of a toolbar that appears to form part of a host application window . The host application window is generated by the operating platform  at the request of the host application  (in this example, the QuickBooks application). In our view, this visual integration of the add-on application  \u2018into\u2019 the host application  provides an enhanced user experience. The auxiliary window  may be generated to appear as if were the rightmost portion of the host application window , as shown in , or as another suitable portion of the host application window . (Some alternative display modes are discussed below.)","DEFINITION: \u2018DATA RECORD\u2019: As used here, the term \u2018data record,\u2019 in respect of the host application , refers to identifiable information (1) that exists in one or more data stores maintained by the host application, or (2) that exists elsewhere but is expected to be imported into such a data store; or (3) that exists elsewhere but is accessed and displayed by the host application.","DEFINITION: \u2018SUPPLEMENTAL RECORDS\u2019: As used here, the term \u2018supplemental record\u2019 refers to, for example, text documents; graphic image files such as pictures; audio files; user-generated notes; emails and their attachments; contact information records such as vCards; calendar entries; and other data entities.","STARTUP of the add-on application  and the auxiliary window  can be conventionally accomplished in various ways. For example, the add-on application  could be started automatically when the host application  itself is started. Or, the add-on application  could be started separately from the host application , and then later be associated with the host application  through user intervention. Or, the add-on application  could be made to load automatically when the operating platform  itself starts up, and then be associated with the host application  when the host application is started.","REGISTRATION OF MENU ITEM: In our particular implementation with QuickBooks, at start-up (or other suitable time) the add-on application  registers itself with the host application , using the host application's SDK, to add a new menu item to the host application's menu structure. If a user were to click on the new menu item while viewing a particular data record, the host application would automatically invoke a call-back function of the add-on application, passing as one or more arguments an identifier of the relevant data record. The use of this new menu item is discussed in more detail below.","OPERATIONAL OVERVIEW: As shown at a high level in , in one embodiment the add-on application  displays the auxiliary window , which includes an icon and\/or link allowing the user to \u2018attach\u2019 supplemental records to a data record. Importantly, the add-on application updates the auxiliary window automatically in response to certain state changes in the host application , through what we believe to be a novel combining of the following: (1) using \u2018hooking\u2019 techniques to monitor the state of the host application , that is, registering with the operating platform  to receive messages relating to potential state changes in the host application, indicating that the auxiliary window  might need to be updated; (2) in some cases, obtaining additional information from the host application  via its software developer kit (SDK)\u2014or alternatively by more-laborious (and thus potentially more-problematic) methods such as screen-scraping\u2014to get more detail regarding a potential state change, such as a record identifier for a data record currently being viewed by the user; and (3) updating the information displayed in the auxiliary window , possibly including retrieving related information from the repository . Our particular implementation uses the application programming interface (API) of the operating platform , in this case the Windows API, to inject the auxiliary window  into the host application window .  depicts some typical relevant data flows.","ASSOCIATING SUPPLEMENTAL RECORDS WITH DATA RECORDS OR HOST-APPLICATION STATES: In the example shown in , a conventional paperclip icon  offers a convenient and familiar way for a user to associate a supplemental record such as a document, file, etc., with either a specified data record or a particular state of the host application . For example, by clicking on the paperclip icon , the user causes the add-on application to store an electronic copy of the document, etc., along with related information obtained from the host application , in a suitable repository  and to associate that electronic copy with a data record then being displayed by the host application or with the then-current state of the host application. (In other implementations, associating a supplemental record with a specified data record might entail associating information with a data record that has yet to be imported into a host application data store.)","The repository  may be implemented as a Web server using well-known Internet protocols, or it may be local, or it may be or some combination of the two (local caching of remotely-stored data being a well-known example of the combination approach). The repository might take the form of data stored in a database or other data store maintained by the host application , using the host application's SDK and\/or API to cause it to store repository data if that functionality is available.","The user could also invoke the attachment functionality in other conventional ways, such as (i) by selecting the appropriate item from the menu ; or (ii) by dragging and dropping a file from an external application such as Windows Explorer; or (iii) by actuating a suitable scanner, such as the commercially-available Fujitsu ScanSnap scanner, to scan a hard-copy document into an electronic image, possibly invoking optical character recognition [OCR] functions in the process.","In , a document icon  shows the summary information that five documents are thus \u2018attached\u2019 to the Kristie Abercrombie invoice record. By clicking on this icon, the user can display a list of the attached documents (the list being retrieved from the repository  by the add-on application ) and select one or more of them for display or other processing.","Likewise, a notes icon  indicates that someone has used the add-on application to \u2018attach\u2019 a note in the repository .","(Those of ordinary skill in the art will appreciate in hindsight that supplemental records can be stored in the repository  via means other than the add-on application , then later \u2018imported\u2019 into the host application  by associating particular supplemental records with particular host-application data records.)","Near the bottom of the auxiliary window , an optional menu icon  can be clicked as one way to pull up a menu  (which may be a multi-level menu if desired). If the menu icon  is not used, any convenient technique may be used to invoke the menu , for example by right-clicking a mouse on the auxiliary window , and the vacant \u2018real estate\u2019 in the auxiliary window may be used for other purposes, e.g., to display notification messages.","INJECTING THE AUXILIARY WINDOW: In our implementation, the add-on application  makes use of certain functions built into the Windows API to \u2018inject\u2019 the auxiliary window  into the host application window  by attaching the auxiliary window as a child window of the host application. Doing so keeps the auxiliary window  appropriately placed if the user takes action to move, resize, minimize, maximize, restore, etc., the host application window . Those of ordinary skill would of course consult the API documentation for additional details specific to their desired implementation. We found it convenient to use the CBT functions of the Windows API, which conventionally are used to help facilitate the development of computer-based training applications. These functions permit the add-on application  to run code within the host application process, and to directly access \u2018protected\u2019 memory of the host application thread. That allows the add-on application to replace the window messaging procedure (\u201cWindow Proc\u201d in Microsoft Windows) with one supplied by the add-on application, allowing the add-on application not to only monitor the host application  but also to change its behavior in minor respects\u2014for example, by handling the window message NC_CALCSIZE, thereby allowing the add-on application to resize the host application's content to make room for the auxiliary window. Extensive documentation about the CBT functions, as with other portions of the published Windows API, is readily available on the Web.","HOOKING OF HOST APP WINDOW UPDATE MESSAGES: Those of ordinary skill in the art of software development will recognize that hooking of windowing messages and other operating-platform function calls can be accomplished through a variety of known methods, including but not necessarily limited to: proxy digitally linked libraries (DLLs); import address table (IAT) patching; registering of call back functions with the host application API or the operating-system API; and API patching of the host application API. The subjects of hooking generally, and hooking of Windows function calls specifically, are discussed in publicly-available documentation, for example at the Microsoft Web pages \u201cHooks\u201d (msdn.microsoft.com\/en-us\/library\/ms632589(VS.85).aspx); \u201cAbout Hooks\u201d (msdn.microsoft.com\/en-us\/library\/ms644959.aspx#wh_cbthook); \u201cCBTProc Function\u201d (msdn.microsoft.com\/en-us\/library\/ms644977(VS.85).aspx). Likewise, documentation about QuickBooks' particular SDK is available at Intuit's Web site, for example at developer.intuit.com\/technical_resources\/default.aspx?id=1488. Moreover, extensive information about a wide variety of related topics can be found by using a search engine such as Google to search the World Wide Web\u2014we note that such searching has become something of a standard practice commonly employed by persons of ordinary skill.","Our implementation makes use of Windows CBT functions (in addition to injecting the auxiliary window ) in monitoring state change within the host application . The add-on application  uses this capability to re-sync the state when the keyboard focus changes within the host application. This prevents the add-on application from needing to \u2018poll\u2019 or constantly query the windowing API for the foreground window. In addition, the Windows CBT functions provide the add-on application  with the ability to monitor user events on UI elements, e.g., button-clicked events. That in turn allows the add-on application to know that the user has clicked a button and the ID of the button. From that information, the add-on application can determine that the user clicked, say, \u201cSave and New\u201d or other relevant UI buttons.","Portions of the display in the auxiliary window  may take the form of one or more icons that serve (a) as prompts to remind the user of the information and functions available via the add-on application , and\/or (b) as ways for the user to access the information and\/or functions, for example by clicking on an appropriate icon to display the contents of an \u2018attached\u2019 document. Text could of course be used in lieu of one or more icons.","DISPLAYING INFORMATION IN THE AUXILIARY WINDOW: The add-on application  watches for the occurrence of potentially relevant states in the host application , as described above, for example, changes in the data record being displayed or changes in other relevant states of the host application. If appropriate, the add-on application updates the auxiliary window  with information about the state, perhaps querying the repository  in the process.","Consider a hypothetical example: Suppose that, in response to a user command, the host application  switches from displaying data record X to displaying data record Y. The add-on application , when alerted of this state change, updates the display in the auxiliary window  to indicate what (if any) documents, etc. are associated with data record Y, as opposed to data record X, along with other information as appropriate.","The current state of the host application , at any given time, might include the user's context in the host application, for example, the fact that the user is at the host application home screen and\/or has invoked a command to navigate to a different screen or take some other action. The state might also include, say, information from or about a specific data entity such as a data record.","Host-application state changes deemed \u2018relevant\u2019 might include, for example, the user's switching to a new area in the host application, such as going from the QuickBooks Home screen to its Report Center screen. Other relevant state changes might include, say, the user's creating a new data record, or navigating from viewing one record to viewing a different record, or any of a variety of others.","In some implementations, the information provided by the operating platform  might indicate only that a host-application state change could possibly have occurred. In those cases (and perhaps in others), the add-on application's logic functions might require obtaining additional information from the operating platform and\/or from the host application . Information so obtained from the host application will usually include an identifier for the data record being or about to be displayed. The add-on application , therefore, should do appropriate testing to determine whether a state change has indeed occurred in the host application  and, if so, whether it is a relevant one.","In a Windows-based implementation, the add-on application  may test for a potentially relevant state change in the host application  in response to being notified (via the operating-platform API) that a new windowing event has occurred, for example, that the user has clicked a particular button or that a new window is being displayed for the host application.","In monitoring the state of the host application  and updating the auxiliary window , the add-on application  might find it necessary to query the host application , for example using the software developer's kit (SDK) of the host application, to obtain information about the data record (which could include some or all data contained in the record itself). In our SmartVault implementation for QuickBooks, the information so obtained generally includes the unique QuickBooks identifier of the data record. Our implementation queries the QuickBooks application indirectly: As noted above, the add-on application  previously registered itself with QuickBooks (that is, with the host application ), using its SDK, to add a new menu item to the QuickBooks menu structure. As a result, if a user were to click on the new menu item, QuickBooks would automatically invoke a call-back function of the add-on application, passing as one or more arguments an identifier of the relevant data record. To automate this action and eliminate the need for the user to click the new menu item, the add-on application inserts a simulated menu selection into the windowing message queue. When the QuickBooks application detects this simulated menu selection, it responds in the same way as if the user had clicked on the new menu item, that is, by passing the data record's identifier to the add-on application .","A significant advantage is derived from this combination of automatically monitoring the host application  for possible state changes, coupled with simulating a user-generated menu selection to retrieve the data record identifier. This combination enables our implementation to provide a document-management system that is visually integrated with the host application , even though the host application's only relevant user-interface integration capability is that of adding an item to the host application's menu structure. Furthermore, injecting the auxiliary display inside the host application window  provides a still-more enhanced user experience. As a result, when a user of the host application browses from one data record to another, our implementation provides the appearance of a seamlessly integrated document-management capability as part of the overall experience of using the host application.","In implementations where the host application  is Web-based, additional information needed by the add-on application  might be obtainable from arguments encoded in the uniform resource locator (URL); depending on the host application, such arguments might include detailed information about the then-current state of the host application, such as for example an identifier of the data record then being displayed. As a simple analogous example, consider a Google search-results page where the term being searched is the word \u201cpatent.\u201d The URL for the page may contain considerable information not just about the search term, but about the language used, the browser, etc., such as \u201cwww.google.com\/search?q=patent&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a.\u201d In Web-based applications such as SalesForce.com and Outlook Web Access, the URL may include an identifier of a data record; the add-on application  can obtain this identifier as needed by conventionally parsing the URL.","In appropriate cases, the add-on application  queries the repository  whether any documents or other information stored there are associated with the data record in question (typically using the data record identifier as a search key) or other state of the host application . If so, then the add-on application  accordingly updates the information displayed in the auxiliary window .","The add-on application may also make use of information retrieved from the host application  or from the repository  to customize aspects of the functionality and\/or the user interface of the auxiliary window .","If the host application  provided an SDK with appropriate support for monitoring state changes and allowing third parties to add graphical user interface elements, then another approach would be to create a plug-in that used that SDK. Even in this case, using the approach of our invention would advantageously allow (1) for such a plug-in to attach documents to relevant states in the host application that may be beyond those that would be given via the SDK, and (2) for the auxiliary window  to have a consistent \u2018look and feel\u2019 across a variety of host applications .","An advantage of being alerted to possible host-application state changes by the operating platform , as opposed to depending on notifications issued by the host application  itself, is that the former approach can be used with a host application that does not support the latter approach, either at all or as to particular information desired by the add-on application .","INFORMATION DISPLAYED IN AUXILIARY WINDOW: The information displayed in the auxiliary window , relating to a given data record or a given state of the host application , can include, for example, one or more of (1) a list of supplemental records, some or all of which may be stored in the repository ; (2) a count of such records; (3) user-created notes associated with the current state of the host application (which could be regarded as a type of supplemental record); and\/or (4) status information such as the status of a network, a remote server, database connectivity, etc., etc.","A wide variety of supplemental records may be \u2018attached\u2019 as described here. They may be attached not only to a data record of the host application  (for example, to a QuickBooks data record), but also to a specific screen display of the host application (for example, the QuickBooks Home screen).","Moreover, the auxiliary window  could be used to display information that might be independent of the state of the host application . As a hypothetical example, if the current system date were within X days of a deadline for taking an action (e.g., filing a tax return), the auxiliary window  could display an alert message and\/or an attached document or other supplemental record relating to that action.","POSSIBLE USES: Those of ordinary skill having the benefit of this disclosure will realize in hindsight, as we did, that the system described here can be adapted for use with a wide variety of host applications . We came to realize that many such applications, that could likewise benefit from a visually-integrated document management solution, were \u2018in the same boat\u2019 as QuickBooks, in that they had limited ways (if any) to enhance the user's experience. We believe our approach would be especially useful with data-centric applications such as accounting systems; customer-relationship management (CRM) systems; personal-information management (PIM) systems; health-information systems; and any of a wide variety of other so-called vertical applications.","POSSIBLE VARIATIONS: In cases where the host application  generates multiple host application windows , the add-on application  may need to generate and update multiple respective auxiliary displays  for some or all of the various windows .","(The auxiliary window  can also be updated, of course, in response to \u2018external\u2019 status changes that are deemed relevant, e.g., changes in the status of a network-connected repository .)","The auxiliary window  may be displayed outside the host application window  at any other convenient point on the screen. In such a case, it would be desirable to have the auxiliary window  be attached to the host application window , so that the auxiliary window will appear to be an extension of the host application window. In such a state, the auxiliary window  would move with the host application window  as it is dragged to different locations on the screen, and\/or resize itself in synchronization with the host application window if the user takes such action.","An attached auxiliary window  could be designed so that the user can selectively \u2018undock\u2019 it from the host application window , that is, make it free-standing on the screen, and\/or re-dock it by dragging the auxiliary window  into close proximity to one of the edges of the host application window , or by selecting a graphical input element that causes the auxiliary window to snap onto the host application window. Docking and undocking of windows are known conventional techniques.","Our investigations indicated, however, that an attached auxiliary window  likely would be a more complex undertaking (and therefore more \u2018expensive\u2019 in terms of time required for software development and maintenance and of processor performance), because it would necessitate greater attention to \u2018corner cases\u2019 and the like. We also believe that the visually-integrated approach previously described, involving injecting the auxiliary window  into the host application window , will often be preferred by users.","The add-on application  could use other, non-hooking methods to monitor the host application  for potentially relevant state changes. These might include, for example, polling- and screen-scraping techniques to obtain information about the current active window being displayed by the host application .","The add-on application  may expand the auxiliary window , perhaps creating (for example) a pop-up or pop-under window or bubble (not shown), to provide additional information and options associated with the data record in question. The additional information could include, for example, the file name of a given document associated with the data record; a brief description of the document; the date the document was stored or added to the repository ; the name of the user who added the document; the current status of the document; or the content of one or more attached documents, either verbatim or in some representative form such as a thumbnail image.","PROGRAMMING; PROGRAM STORAGE DEVICE: The add-on application described above may be implemented by providing suitable programming for a general-purpose computer. The programming may be accomplished through the use of one or more program storage devices readable by the computer, either locally or remotely, where each program storage device encodes all or a portion of a program of instructions executable by the computer for performing the operations described above. The specific programming is conventional and can be readily implemented by those of ordinary skill having the benefit of this disclosure. A program storage device may take the form of, e.g., a hard disk drive, a flash drive, a network server (possibly accessible via conventional Internet communication protocols), or other forms of the kind well-known in the art or subsequently developed. The program of instructions may be \u201cobject code,\u201d i.e., in binary form that is executable more-or-less directly by the computer; in \u201csource code\u201d that requires compilation or interpretation before execution; or in some intermediate form such as partially compiled code. The precise forms of the program storage device and of the encoding of instructions are immaterial here."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
