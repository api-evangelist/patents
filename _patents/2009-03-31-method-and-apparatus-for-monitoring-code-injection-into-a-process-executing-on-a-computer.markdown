---
title: Method and apparatus for monitoring code injection into a process executing on a computer
abstract: Method, apparatus, and computer readable medium for monitoring code injection in a computer is described. In some examples, at least one application programming interface (API) call configured to inject data into a process executing on the computer is intercepted. The data is parsed to identify instruction code to be performed by the process. The instruction code is compared with instances of predetermined instruction code to produce a score for the instruction code. The data is prevented from being injected into the process in response to the score satisfying a threshold score. The data may be allowed to be injected into the process in response to the score not satisfying the threshold score.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08612995&OS=08612995&RS=08612995
owner: Symantec Corporation
number: 08612995
owner_city: Mountain View
owner_country: US
publication_date: 20090331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","The present invention relates generally to computers. More particularly, the present invention relates to a method and apparatus for monitoring code injection into a process executing on a computer.","2. Description of the Related Art","In computing, a \u201cprocess\u201d is generally a set of instructions (\u201ccode\u201d) being executed by a computer. A computer typically executes several different processes. A process may include one or more \u201cthreads\u201d. A thread is generally an individual task being performed by the process. Computer operating systems are typically multi-threaded such that multiple threads can execute concurrently.","Some operating systems support the injection of data into a process from a source outside of the process (generally referred to \u201cinjection\u201d). For example, some MICROSOFT WINDOWS operating systems support application programming interface (API) functions for writing data to an area of memory dedicated to a process, e.g., the WriteProcessMemory function as defined in the WIN32 API. Such API functions can be used to inject code into a process (\u201ccode injection\u201d) with the intent that the process execute the injected code. Code injection can be used as a valid mechanism for modifying execution of a process. However, code injection can also be used to inject malicious code into a process in order to achieve various malevolent purposes, such as gaining information, privileges, or computer access without authorization. For example, code injection can be used to execute in a trusted process as a way to circumvent security software. Some mechanisms for dealing with malicious code injection involve alerting the user every time a code injection operation is requested, and allowing the user to accept or deny the proposed code injection. Such alerts, however, presuppose that the user is experienced enough to understand why the code injection is being request and whether to allow or deny such code injection. Less savvy users may be confused and\/or frustrated by such alerts, which increases the chances that they will inadvertently allow malicious code to be executed by their computers.","Accordingly, there exists a need in the art for monitoring code injection into a process executing on a computer that overcomes the aforementioned deficiencies.","An aspect of the invention relates to monitoring code injection in a computer is described. In some embodiments, at least one application programming interface (API) call configured to inject data into a process executing on the computer is intercepted. The data is parsed to identify instruction code to be performed by the process. The instruction code is compared with instances of predetermined instruction code to produce a score for the instruction code. The data is prevented from being injected into the process in response to the score satisfying a threshold score. The data may be allowed to be injected into the process in response to the score not satisfying the threshold score.","Another aspect of the invention relates to analyzing instruction code at a server. In some embodiments, the instruction code is received in a submission from a computer over a network, the instruction code being identified by the computer in response to intercepting at least one application programming interface (API) call configured to inject the instruction code into a process executing on the computer. The instruction code is analyzed to determine operation codes and operands therein. The instruction code is classified as known malicious instruction code or potentially malicious instruction code in response to the operation codes and the operands. The instruction code as classified is sent to the computer over the network.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","100","102","104","106","104","104","102","106","104","104","104"]},"The client computer  illustratively includes a processor , a memory , various support circuits , an I\/O interface . The processor  may include one or more microprocessors known in the art. The support circuits  for the processor  include conventional cache, power supplies, clock circuits, data registers, I\/O interfaces, and the like. The I\/O interface  may be configured for communication with the network . The memory  may include one or more of the following random access memory, read only memory, magneto-resistive read\/write memory, optical read\/write memory, cache memory, magnetic read\/write memory, and the like.","The client computer  includes an operating system (OS) , application software , and security software . The operating system  may be any type of operating system known in the art, such as any MICROSOFT WINDOWS, APPLE MACINTOSH, or like type operating systems known in the art. The application software  may include any of a myriad of programs configured for execution within the operating system . The security software  is configured to monitor the client computer  to detect, isolate, and remove malware. The security software  may include an agent  and a code injection monitor . The agent  is configured for communication with the server  via the network . The agent  may be used to receive update data from the server  to facilitate detection of malware, as discussed below.","The code injection monitor  is configured to monitor code injection in the client computer . In some embodiments, the code injection monitor  is configured to intercept one or more function calls to the application programming interface (API) of the operating system  (\u201cAPI calls\u201d). The API calls intercepted by the code injection monitor  are configured to inject data into a process executing on the client computer . In some embodiments, the type of API calls intercepted by the code injection monitor  can include functions configured to write data to an area of the memory  dedicated to a process. For example, in the WIN32 API of some MICROSOFT WINDOWS operating systems, the WriteProcessMemory function is configured to write data to a process. The code injection monitor  can intercept the API calls using system hooks registered with the operating system .","Thus, for a WIN32 API, the code injection monitor  may monitor calls to the WriteProcessMemory function. It is to be understood that the code injection monitor  can monitor other types of API calls, such as those that create new execution threads of a process (e.g., WIN32 API CreateRemoteThread in WIN32 API), those that modify context of threads of a process (e.g., WIN32 API SetThreadContext), those that insert a procedure call to the execution queue of a process (e.g., WIN32 QueueUserApc), and the like. Further, while specific WIN32 API function calls have been described by example, it is to be understood that the code injection monitor  can intercept similar function calls in different APIs of different types of operating systems.","Upon intercepting an API call, the code injection monitor  is configured to parse the injected data to identify instruction code to performed by the target process. That is, an API call may be attempting to inject instruction code into an area of the memory  dedicated to the instructions of the target process so that the process executes the injected instruction code. The instruction code to be injected may be procedure call(s), new threads, modifications of existing threads, and the like. To detect the instruction code to be injected, the code injection monitor  can identify particular patterns in the data, such as patterns indicative of operation codes (opcodes), operands, and the like.","Having identified potential injected instruction code, the code injection monitor  is configured to compare the instruction code with instances of predetermined instruction code to produce a score for the instruction code. In some embodiments, the instances of predetermined instruction code include instance(s) of known malicious instruction code. The instance(s) of known malicious instruction code may be represented as a signature or the like against which the injected instruction code can be compared. In some embodiments, the instances of predetermined instruction code include instance(s) of potentially malicious instruction code. Potentially malicious instruction code is code that is not malicious by itself, but may be maliciously used in particular contexts. For example, an instruction to erase a file is a valid instruction if issued by the user using file management software, but is likely maliciously used if injected into a process unrelated to file management. This type of comparison to identify potentially malicious instruction code is referred to as a heuristic analysis.","The score produced by the code injection monitor  for injected instruction code can be indicative of the likeliness of it being malicious code. For example, if the injected instruction code matches a signature of known malicious code, the score may indicate that the injected instruction code is malicious or very likely malicious. If the code injection monitor  employs a heuristic analysis, the score may be variable based on number and\/or arrangement of instructions identified as potentially malicious. For example, the more potentially malicious instructions detected, the more likely the injected instruction code is malicious.","The code injection monitor  can then compare the score given to the injected source code with a threshold score. If the score satisfies the threshold score, then the code injection monitor  can prevent the instruction code from being injected to the target process. If the score does not satisfy the threshold score, then the code injection monitor  can allow the instruction code to be injected into the target process. In this manner, the code injection monitor  can automatically detect malicious or likely malicious injection of code into a process. The code injection monitor  does not require input from the user in response to an alert or the like. The code injection monitor  may allow a user to set the threshold score in order to have some control over the process. The code injection monitor  may also produce a log file or the like for reporting which code injection attempts have been blocked and for what reason.","In some embodiments, the code injection monitor  may provide information related to detected code injections to the agent . The agent  may include this information in a submission to the server . The server  may be managed by the provider of the security software . In this manner, the provider of the security software  may collect statistics related to code injections across many users. The statistics can be used to identify known malicious code injections, potentially malicious code injections, and benevolent code injections. The agent  can then receive information from the server  to provide the predetermined instruction code against with the injected instruction code is compared. In this manner, the code injection monitor  can be updated over time to adapt to new types of malicious, potentially malicious, and benevolent code injections.","The server  illustratively includes a processor , a memory , various support circuits , an I\/O interface . The processor  may include one or more microprocessors known in the art. The support circuits  for the processor  include conventional cache, power supplies, clock circuits, data registers, I\/O interfaces, and the like. The I\/O interface  may be configured for communication with the network . The memory  may include one or more of the following random access memory, read only memory, magneto-resistive read\/write memory, optical read\/write memory, cache memory, magnetic read\/write memory, and the like.","The server  is configured with a code analyzer . The code analyzer  may include software (e.g., program code), stored in the memory , configured for execution by the processor . The code analyzer  is configured to cooperate with security software  in the computer  to receive submissions from the computer  and to provide classified instruction code to the computer . In particular, the code analyzer  is configured to receive instruction code in a submission from the computer  over the network. As noted above, the instruction code can be identified by the code injection monitor  in response to intercepting API call(s) configured to inject the instruction code into a process executing on the computer . The code analyzer  can analyze the instruction code to determine operation codes and operands therein. Operation codes can include codes executable by a processor for performing some function (e.g., assembly language codes, machine codes, etc.). Operands can include data operated on by the operation codes. The code analyzer  can classify the instruction code as known malicious instruction code or potentially malicious instruction code in response to the analysis of the operation codes and the operands. The code analyzer  can then send the classified instruction code to the computer  over the network . It is to be understood that the code analyzer  may receive submissions from, and provide classified instruction code to, multiple computers on the network.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","102","200","116","118","200","202","204","206","208","210"]},"At step , a determination is made whether the score satisfies a threshold score. If so, the method  proceeds to step , where the data is prevented from being injected into the process. If the score does not satisfy the threshold, the method  proceeds to step , where the data is allowed to be injected into the process. The method  may be repeated as API calls are made to inject data into various processes over time.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 1"],"b":["300","300","106","300","138","130","106","300","302","102","102","102","304"]},"At step , the instruction code is classified as known malicious instruction code or potentially malicious instruction code in response to the operation codes and the operands. For example, the code analyzer  can compare the operation codes and operands as configured with known malicious or potentially malicious configurations of operation codes and operands. The code analyzer  may interact with a user to receive indications of malicious or potentially malicious operation codes and operands. At step , the instruction code as classified is sent to the computer over the network. For example, the computer  can use the instruction code as classified as the instances of predetermined instruction code against which injected instruction code is scored.","Aspects of the methods described above may be implemented as a program product for use with a computer system. Program(s) of the program product defines functions of embodiments and can be contained on a variety of computer readable media, which include, but are not limited to: (i) information permanently stored on non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM or DVD-ROM disks readable by a CD-ROM drive or a DVD drive); and (ii) alterable information stored on writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive or read\/writable CD or read\/writable DVD). Such computer readable media, when carrying computer-readable instructions that direct functions of the invention, represent embodiments of the invention.","While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of a preferred embodiment should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features of the present invention can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to embodiments, some of which are illustrated in the appended drawings. It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3","b":"300"}]},"DETDESC":[{},{}]}
