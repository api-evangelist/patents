---
title: Programmable command-line interface API for managing operation of a network device
abstract: A method of managing a network device, includes providing a command-line interface application programming interface (CLI-API) compatible with a command-line interface (CLI) of the network device, receiving instructions from an application that calls one or more routines in the CLI application programming interface, and generating at least one command in response to receiving instructions from the application wherein the at least one command is compatible with the CLI of the network device. An apparatus includes a remote serial command-line interface (RS-CLI) device having a storage device capable of storing instructions, a network port capable of being connected to the network and capable of processing a network protocol stack in addition to receiving the instructions, a serial port capable of processing a serial protocol and capable of being connected to the non-application enabled network device, and a processor capable of processing instructions stored in the storage area of the RS-CLI device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07039724&OS=07039724&RS=07039724
owner: Nortel Networks Limited
number: 07039724
owner_city: 
owner_country: CA
publication_date: 20001229
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation-in-part and claims priority from U.S. application Ser. No. 09\/522,332, entitled METHOD AND APPARATUS FOR ACCESSING NETWORK INFORMATION ON A NETWORK DEVICE, filed Mar. 9, 2000.","This invention generally relates to performing network management remotely on network devices connected to a network.","Computer networks are becoming increasingly complex and difficult to manage. This is driven in part by the ever-increasing variety of network devices, computers, and software being combined together to integrate large enterprise-based intranets with the Internet. Network management tools have been produced to monitor these combinations of hardware and software and help troubleshoot network failures when they occurred.","Traditional network management tools use a protocol called simple network management protocol (SNMP) to monitor network devices such as routers, switches, hubs, remote access devices, or even computers in a network. The protocol used to interface with SNMP includes rudimentary commands to operate on data such as to \u201cget\u201d a variable, \u201cset\u201d a variable, or \u201ctest\u201d a variable.","Having just a few simple commands can make it difficult to perform network management tasks. Specifically, it can be difficult using these basic commands to develop sophisticated network management applications to monitor and troubleshoot a network. Each task may need to be customized to the parameters and capabilities of each network device. Further, a network management task sending combinations of these commands to one or more network devices connected to the network may wait a significant period of time for all the necessary results to be returned. Network delays can be caused by network congestion and the unique processing bottlenecks associated with each network device.","Network management tasks must also be performed securely to prevent accidental or even malicious interlopers from altering network configurations and operation. The most widely used SNMP based networks do not provide the appropriate levels of security because commands are transmitted in the \u201cclear\u201d. Confidential information such as a community string and private string can be captured and used to gain access to networks. Further, sensitive business information transmitted in the course of an electronic business transaction can also be captured and misused for monetary gain. Advanced versions of SNMP such as SNMP Version 3 provide a degree of security but have not been widely adopted and therefore cannot be relied on.","It is also difficult to manage networks having network devices from different vendors and with different capabilities. Each network device generally requires the network administrators managing the network to have special network management training. Additionally, the interface used to manage the network devices may also hinder effective network management practices. For example, some network devices can only be managed using a terminal connected to a serial port on the network device while others can be managed by logging into the network device over a network connection using telnet, rlogin, or other remote login services. Often the network devices receiving commands over the serial interface implement proprietary command-line interfaces (CLI) and commands only accessible by a user entering commands on the serially attached terminal. Unfortunately, these command-line interfaces (CLI) are not standard and require the network administrators to learn and use different commands and network management methods.","In one aspect of the present invention, a method of managing a network device, includes providing a command-line interface application programming interface (CLI-API) compatible with a command-line interface (CLI) of the network device, receiving instructions from an application that calls one or more routines in the CLI application programming interface, and generating at least one command in response to receiving instructions from the application wherein the at least one command is compatible with the CLI of the network device.","In another aspect of the invention, a network having network management capabilities, includes a non-application enabled network device having a CLI capable of controlling one or more network management aspects of the non-application enabled network device, and an application-enabled network device capable of executing applications that use a CLI-API to generate one or more commands compatible with the non-application enabled network device CLI and transmits the one or more commands to the non-application enabled network device over the network for execution.","Yet another aspect of the invention is a remote serial CLI (RS-CLI) device having a storage device capable of storing instructions, a network port capable of being connected to the network and capable of processing a network protocol stack in addition to receiving the instructions, a serial port capable of processing a serial protocol and capable of being connected to the non-application enabled network device, and a processor capable of processing instructions stored in the storage area of the RS-CLI device that at least generates commands compatible with a CLI of the non-application enabled network device in response to processing the instructions stored in the storage area.","Another aspect of the invention includes a method of managing a network device that receives an application having instructions compatible with a CLI application programming interface (CLI-API) configured to work with a CLI of the network device, creates CLI commands capable of controlling the network device in response to processing one or more of the instructions compatible with the CLI-API, transmits the CLI commands created by the CLI-API over a network to the network device, and processes the CLI commands on the network device.","In the various aspects of the invention and where appropriate, Java object-oriented applications and applets are executed that manage one or more network devices over the network. The instructions in these applications and applets generate command-line interface (CLI) commands through the CLI-API to manage the network devices.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features of the invention will be apparent from the description and drawings, and from the claims.","Systems and methods described herein are used to distribute network management tasks to one or more network devices connected to a network. A network application distributed to each network device collects relevant network parameters from each network device and transmits the results back to a central NMS or to other network devices on the network for further analysis. Each network application can be programmed to perform a series of operations using an object-oriented programming language such as Java. The network application interfaces on each network device provides an application programming interface (API) compatible with the particular programming language. This API is compatible with legacy network management protocols such as simple network management protocol (SNMP) and, therefore, can be adapted to work with a wide range of legacy compatible devices.","Tools used to generate the API consistent with the present invention include a management information database (MIB) to object-oriented software compiler and a MIB map. The compiler uses existing MIB information to generate an object oriented MIB interface to the underlying MIB information collected on each network device. The compiler also generates a MIB map to determine if access to the MIB information is made directly to the storage location of the MIB database or through a network address and network management protocol associated with the network device.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["100","102","104","106","112","102","104","106","112"]},"Network device  facilitates the transfer of applications from an application server  to the other network devices and nodes on the network. Server  provides applications that can execute directly on network devices \u2013 and target network device . The variety of network applications available for downloading from application server  increases the network management capabilities of each network device. For example, application server  may provide an application to a network device that enables the device to filter network traffic containing data packets generated from activities not critical to business, such as browsing the Internet. The resulting increase in bandwidth can be used for more critical business needs.","Network device  enables authentication server  to authenticate downloading of applications from application server  to other network devices within communication system . Authentication server  can identify a network device on the network and determine if that device should or should not receive a particular application. For example, authentication server  may authenticate a particular application and determine if the application should be downloaded to a network device in communication system . This feature could be used to prevent introduction of viruses or other unauthorized software onto the network. Additionally, authentication server  may also determine if a network device within communication system  has proper authorization to download an application.","Network device  facilitates communication between a network monitor server (NMS)  and other network nodes and processes within communication system . Traditionally, an NMS will send network commands to the network devices and, in return, receive input from the network devices, including network parameters. This traditional approach to network management requires NMS  to perform a majority of the processing for network management. In contrast, system  distributes processing to the network devices that are in communication with the network. This reduces the processing load and frees up NMS  so that it can process more critical tasks. For example, network device  may monitor network traffic between it and network  to reduce the processing load on NMS server . In such a case, NMS  might receive a notification from network device  when device  detects that the network bandwidth has exceeded a predetermined threshold.","Target network device  depicts an example network device monitored by either a user or central NMS . The client node user interface  allows the user to perform network management tasks that execute directly on target network device . NMS  is used to monitor larger and more frequent management tasks dealing with groups of network devices or the overall network. For example, NMS server  can execute software agents on different network devices and monitor overall traffic being processed by a group of network devices connected to the network.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 2"],"b":["112","112","202","204","206","208","210","211","112"]},"Network communication port  is compatible with a variety of physical and logical network protocols including, for example, TCP\/IP and Novell NetWare. A loop back address  enables network management applications executing on target device  to access local storage areas and resources using the local network protocol stack and local network parameters rather than accessing the storage area on the network device directly. By using the network protocol stack, network applications can access network parameters on a local device and a remote device in a uniform manner. For example, a network management application executing on target network device  can access network parameters associated with a remote network device or a local network device through network communication port  by specifying either the network address of the remote network device or the local device respectively. Specifically, the network management application executing on the local device can access network parameters of the local network device by specifying loop back address . In effect, loop back address  provides indirect access to the network parameters of the local device through the network protocol stack.","Secondary storage  may include a disk drive, CD-ROM, or any other storage device used by target network device . Input-output ports  include physical connections for terminals, printers, pointing devices, keyboards, or any other device useful for configuring, operating, or controlling target network device .","During execution of one embodiment, modules in memory  include a real time operating system (RTOS) , an annotation layer , a native variable interface , a simple network management protocol (SNMP) stack , a virtual machine runtime environment , a management information database (MIB) map , a MIB compiler , an object-oriented MIB interface , a mobile agent module , and a client application . Alternate embodiments of the invention can include additional or fewer modules depending on the specific functions required for operation and the design decisions made to implement the invention. For example, RTOS  provides improved performance on target network device  by executing instructions as they arrive without interruption or delay. However, if the design allows for a reasonable delay while processes are preempted and swapped out of memory, then a general-purpose operating system may be used in lieu of RTOS . The general-purpose operating system may also be used if it is less costly to implement than the real-time system and compatible with a wider variety of existing software packages.","Annotation layer  provides an interface between applications accessing the MIB database associated with a network device and the actual storage locations for the MIB database on the network device. This layer is necessary because different hardware devices tend to store the underlying MIB database information in different locations on the network device. For example, one network device may store port speed address in a central lookup table of RAM while other network devices may store the port speed addresses for each port on separate ASIC chips associated with each port. Using annotation layer , an application can request MIB database information without specifying the actual location of data on the network device.","SNMP stack  implements a network management protocol used by different networks to exchange network management information while monitoring network communication. Typically, SNMP stack  exchanges network information with other nodes on the network through messages called protocol data units (PDUs). The PDUs contain variables with titles and values and are generally capable of \u201cgetting\u201d network parameters, \u201csetting\u201d network parameters, or \u201ctesting\u201d for network events occurring on network devices. For example, SNMP stack  may transmits a PDU to a remote network device to determine if the remote device has a terminal attached to it. If the terminal is attached to the remote network device, SNMP stack  will receive back a PDU containing information that may identify and describe the specific terminal. Each PDU typically includes a variable title and a value of the variable.","Native variable interface  provides direct access to underlying SNMP data stored on a network device. Each device on the network requires a different native variable interface  customized to the specific features of the device hardware and software. As new network devices are produced or added to a network, a new interface  is customized to the specific hardware and software requirements. While this customization process increases the research and development costs, it also increases the efficiency associated with retrieving network parameters from a network device because the information is accessed directly.","Alternatively, network parameters may also be retrieved using SNMP stack  and loopback address . This eliminates the need for native variable interface  and reduces the corresponding costs associated with developing the native variable interface. In lieu of accessing the network parameters directly, a network management application submits requests to loopback address  of a network device. Within the requests are SNMP compatible commands formulated to retrieve the desired network parameters. Local processes on the network device monitoring loopback address  pass the request to SNMP stack  which, in turn, accesses the network parameters as requested. The same local processes then return the resulting network parameters back through SNMP stack  and through loopback address  and back to the network management application requesting the information.","Virtual machine runtime environment  processes object-oriented instructions for execution on processor , and may include a virtual machine (VM) and a corresponding development kit (DK) having object-oriented class libraries. The VM simulates a processor and executes on many different hardware platforms. Instructions from a variety of applications are interpreted by the VM and executed on processor . One virtual machine run time environment  includes a Java virtual machine (JVM) and the Java foundation classes. The Java virtual machine is one type of virtual machine that promotes platform independent computing using the Java programming language.","In operation, MIB map  facilitates converting object-oriented requests for MIB information into requests for network parameters either through SNMP stack  or native variable interface . MIB map  determines how network parameters in a MIB should be accessed for different types of network devices. For example, MIB map  can be implemented with a table that converts requests for network parameters through native variable interface  or SNMP stack  into a series of object-oriented method calls. The map includes a database listing the network parameters related to the management of a network device and a set of object-oriented methods for manipulating the network parameters. MIB map  maps requests for network parameters from a set of operations to access and manipulate the network parameters to a database having the actual network parameter information. Each request for a network parameter may invoke one or more object-oriented methods depending on the complexity associated with retrieving and processing the data.","If a new type of network device is added to the network, MIB map  will initially access the network parameters using SNMP stack  and loopback address  in the manner previously discussed. This allows a network management device to access network parameters on an SNMP compatible network device using existing SNMP features built into the network device. Once a native variable interface  is developed for the network device, MIB map  can be reconfigured to access network parameters through the faster and more efficient native variable interface .","Object-oriented MIB interface  provides an interface for applications to access MIB information using object-oriented classes and methods. Initially, a MIB compiler , discussed in further detail below, receives a list of MIB variables and generates the classes and method found in the object-oriented MIB interface . At least two types of variables\u2014scalar variables and table variables\u2014are accessible through object-oriented MIB interface . A scalar variable is a single variable with an identifier that identifies the variable and a value associated with the variable. If an application requests a scalar variable, object oriented MIB interface  returns an object-oriented instance of that scalar variable. For example, a network management application may request a scalar variable identifying the number of resent packets on the network device. Alternatively, object-oriented MIB interface  may request a table of information from the underlying SNMP layer. In response, the underlying SNMP layer would provide an object table and corresponding methods for accessing each of the entries within the table. As an example, one type of object table may include a list of network addresses associated with network devices in a subnet and methods for an application to manipulate the entries in such a table.","Mobile agent module  provides a framework for executing a variety of mobile agents. Client application  represents one such mobile agent application as illustrated in . Accordingly, mobile agent module  interfaces between the mobile agent and the underlying execution environment, thus allowing a mobile agent to operate on a variety of network devices and operating environments.","For example, mobile agent module  implemented in accordance with the Java Bean\u2122 application-programming interface defines a portable, platform-neutral set of APIs for software components to communicate with each other in accordance with the Java Beans conventions. In addition, mobile agents implemented using Java Bean components are able to plug into other component architectures, such as Microsoft's COM\/DCOM\/Active X architecture. In this capacity, mobile agent module  acts as a bridge between mobile agents developed using Java Beans and other component object models or component architectures. For example, mobile agent module  may receive Java instructions from client application  and convert them into instructions compatible with the COM\/DCOM\/Active X environment or alternatively, may convert these same Java instructions into byte codes to run on a virtual machine in virtual machine run time environment . It should be appreciated that client application  may be any type of network management application designed for execution on target network device .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3","FIG. 4"],"b":["221","222","221","302"]},"Next, MIB compiler  extracts network parameters for the specific network device from the MIB definitions (). This involves lexically recognizing and parsing each token in the MIB definitions for the network device. MIB compiler  then generates an object-oriented MIB application-programming interface or MIB interface and MIB map  corresponding to the MIB definitions (). The object-oriented MIB interface creates classes corresponding to the MIB hierarchy and methods for accessing each of the variables in the MIB definition. MIB map  assists in mapping object-oriented class definitions and method calls into corresponding combinations of SNMP primitives (e.g., get, set, and test) used by SNMP stack  or native variables.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4","b":["400","403","400","402","404","406","408","410","412","414"]},"For example, vendor specific group A includes an area that vendors can define their own network parameters and proprietary information. SNMP group A includes definitions for protocol data units (PDUs) used for network nodes to communicate. IP group A includes information corresponding to the network communication layer. For example, IP group A may include the IP address of a network device and nearby routers or switches. TCP group A, which includes information corresponding to the transport protocol layer, may include a list of all active connections communicating using a \u201csocket\u201d interface as well as the ports and corresponding services.","MIB compiler  in  receives the MIB definitions  in  in a database that lists the network parameters related to the management of a network device. MIB compiler  converts these MIB definitions  into corresponding MIB objects  including data class B, vendor's specific class B, SNMP class B, system class B, IP class B, TCP class B, and interface class B. Through this conversion, MIB compiler  then creates the methods an application can use to access network parameters in the MIB database corresponding to the classes.","In operation, an object-oriented network management application is downloaded into a network device accesses the MIB database through the object-oriented interface.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 5","b":"502"},"In response to the request to load a set of operations, the network device accesses an application server having the application(s) capable of performing the set of operations associated with the task (). For example, an application server  as shown in  stores hundreds of network applications ready for execution on target network device . Application server  receives the request, locates the application, and then transfers it to the appropriate network device (). In one implementation, application server  transfers a network application from application server  to the network device each time or session the network device executes the application. Alternatively, an application may remain resident in a network device permanently or for a given period of time once it is initially downloaded from the application server.","The network device loads and executes the requested application (). Using the application, the network device may perform a variety of network management functions. For example, the network device may be asked to monitor network traffic on a nearby network and notify the central NMS when a node on the network becomes inactive or the network traffic increases beyond a particular threshold.","Once the information or results are generated, the network device provides information back to the NMS for processing (). If a central NMS is not present, the network device may broadcast results over the network to other network devices monitoring and processing the network information.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 6","FIG. 2"],"b":"226"},"As shown in , a network management application initially begins execution on a local network device. The network management application executing on the local network device requests a network parameter typically found in the MIB (). For example, a network management application may request MIB information corresponding to the current count and the cumulative count of packets being transmitted to determine if the capacity of a network device has been met or exceeded.","The network management application then determines if the requested network parameter is associated with the local network device or a remote network device (). If the network parameter is associated with a remote network device, the network management application forms and sends a request for the network parameter to the remote network address of the network device (). For example, the network management application may request that SNMP stack  (see ) create a PDU to gather MIB information on the remote device. This request can be formed using an object-oriented programming language such as Java. SNMP stack  then transmits the request for a network parameter over the network to the remote network device for processing. A network protocol such as TCP\/IP associated with that remote network device receives the request for the network parameter. The SNMP stack on the remote device processes the request and retrieves the requested network parameter, which includes MIB information (). Once the network parameter is received on a remote network device, the corresponding SNMP stack packages the result into a PDU and sends the results back to SNMP stack  for processing by the network application executing on a local network device ().","If the network management application requests network information associated with the local network device (), the network management application can access the requested network parameters in at least two different ways. The network management application can access the network parameters on the local network device directly () using a software interface customized for the network device (). For example, the network management application can use a native variable interface to access network parameters on the local network device.","Alternatively, the network management application may access local network parameters on a local network device using existing network protocol. Initially, the network management application sends a request for a network parameter through the network protocol of the local network device using the \u201cloopback\u201d address (). This loopback address is a self-referential address which identifies the local network device on the network without sending packets of information over the actual network. For example, sending a request to the loop back address establishes a data route directly back to the network protocol stack on the local network device. The network management application essentially uses SNMP stack  on the local network device to create a PDU to request the corresponding network parameter (). SNMP stack  then retrieves the requests for the particular network parameter (). The results are then returned to network management application  executing on local network device ().",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 7","FIG. 7"],"b":["700","702","704","706"]},"Network management application  can transmit network management commands over an unsecured link  or over a secure link  to network device . Network management commands transmitted over unsecured link  are in the clear and can be easily intercepted and used. This is the typical scenario on most SNMP-based networks because the most common versions of SNMP do not support encryption or other forms of data security. Secure commands transmitted directly to a network management protocol stack such as SNMP  can not be decrypted and utilized. As a result, conventional network management routines communicating directly with the network management protocol stack in the clear can result in a breech of the network and system security.","An alternative approach is to communicate over secure communications link  to client application  running on network device . In this approach, network management application  can encrypt all information before sending it over the network using an encryption protocol as secure socket layer (SSL) or allowing hardware in secure communications link  to encrypt the information. Numerous other methods of sending secure information over the network can also be used.","Client application  receives the secured information and extracts the network management routines using an agreed upon decryption method. In addition, client application  may even authenticate and authorize the network management application and user transmitting the secured information before applying any decryption methods. These decrypted network management commands are then transmitted through object-oriented MIB interface  and loop-back address  to SNMP stack  for processing. Resulting information is returned to network management application over a similar secure channel by reversing the above operations.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 8","b":["802","804","806"]},"The decrypted network commands are then transmitted to the local network device through a loopback address (). The data transmitted over the loopback address remains secure because the data is transmitted along the backplane of the network device and not over an external network port. In addition, the network management commands are immediately processed by the network management protocol such as the SNMP stack. Results are then returned to the client application on the network device where they are encrypted and returned to the network management application ().",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 9","FIG. 2"],"b":["902","226","226"]},"In this implementation, CLI-API  includes a set of classes compatible with the Java programming language to perform a variety of functions necessary when communicating over a network or serial link to a command-line interface. These classes include session management classes , input-output classes , configuration classes , macro-generation classes , and other classes  as needed to interface with the various network devices on a network. Of course, these classes are given only as an example to perform one set of functions and greater or fewer classes may be required depending on the applications specific requirements.","Session management classes  control the resources associated with establishing a communication session with a network device through the command-line interface. This may include performing authentication and authorization of the user and application. For example, obtaining a login name, an application identification, and\/or a password. It also includes establishing network sessions, obtaining handles to references of the one or more sessions, and relinquishing the resources associated with the network device when the sessions are completed.","Sending and receiving data through the command-line interface occurs through input-output classes . Data written to the network device and read from the network device may be buffered and converted into different character sets through the input-output classes .","Configuration classes  are used to change the operating characteristics of different network devices. Common configuration processes associated with configuring a network device are included in methods defined in configuration classes . For example, this can include getting and setting IP address information for the network device, taking a network device up or down, or other typical network device configuration operations.","Macro generation classes  allows an application to create and register customized macro routines. For example, an application can be run that sets up numerous macros and stores them in persistent storage on a central server or network device for other applications to use later. This would make it easier to enhance the available functions using the CLI-API with a network device. Other classes  represent any other additional classes that client application  may use to interact with a network device.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 10","b":["1000","1000","1002","1004","1006","1008","1010"]},"JEN device  includes elements described in  and associated with network device . Because JEN device  includes a virtual machine, object-oriented applications and byte-codes can be processed. In particular, JEN device  executes object-oriented applications, for example Java object-oriented applications or applets, and transmits commands to other network devices using the CLI-API described above.","In contrast, NJEN device  does not include a virtual machine and other features present in JEN device  and therefore is not able to execute object-oriented applications written in a programming language like Java. NJEN device  can receive commands through the CLI-API interface and send results back through the CLI-API interface to JEN device . These commands can be sent from an application on JEN device  directly to NJEN device  over network .","SNJEN device  is unique in that it cannot process object-oriented applications written in Java or any other high-level programming language and cannot receive command-line instructions over the network. Instead, SNJEN device  can only receive commands over a serial connection. For example, some network devices made by Cisco, Inc. cannot process object-oriented applications and further can only process certain commands received over a serial interface. To overcome this limitation, remote serial-command line interface (RS-CLI) device  has a serial interface to connect to a serial port on SNJEN device  and a network interface to connect to network .","In one implementation, RS-CLI device  includes a serial interface, a network interface, operating system support for an object-oriented language like Java, a virtual machine, a set of object-oriented components and APIs to enable execution of object-oriented applications. A serial interface writer writes CLI commands to the serial interface and serial interface reader reads commands from the serial interface. A CLI generator within RS-CLI device  creates CLI commands to send to the serial port and a corresponding CLI response parser analyzes the results of the CLI commands coming from the network device such as SNJEN device . RS-CLI device  can be fabricated using an inexpensive processor such as a x86 compatible chip, a serial port and driver, a Ethernet port and driver, a storage device having the software described above and a TCP\/IP network protocol stack.","In operation, JEN device  sends commands to SNJEN device  through RS-CLI device . RS-CLI device  processes object-oriented commands received over the network and transmits command-line instructions to SNJEN device . This enables even non-Java enable network devices requiring a serial communications line to indirectly process object-oriented instructions. With this type of interface, a single network device like JEN device  can manage a heterogeneous collection of network devices from many different vendors.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 11","b":["1100","902","1008","1102","1002","1004","1006"]},"The application can include instructions for controlling the configuration of the target network device, gathering information on the network interfaces on the target the target network device, bringing a network device up or down on the network, downloading a new image to the target network device using a network copy command like Trivial File Transfer Protocol (TFTP), or any other set of operations possible using a command-line interface (CLI).","If the target network device accepts CLI commands only over a serial interface (), CLI-API  directly transmits instructions from the application over the network to the network port on RS-CLI device  attached to the target network device (). RS-CLI device  creates corresponding CLI commands in response to application instructions () and transmits them to the target network device over a serial port (). For example, RS-CLI device  executes Java object-oriented applications or applets that generate CLI commands. While the application instructions in the Java object-oriented application are standard, the CLI commands generated by RS-CLI device  are specific to the CLI used by the particular network device.","Alternatively, CLI-API  creates corresponding CLI commands in response to application instructions (). For example, an application executes application instructions on JEN device  that calls CLI-API  and generates CLI commands for execution on another network device such as NJEN device . CLI-API  then establishes a network session and transmits corresponding CLI commands directly to the target network device (). In most cases, CLI-API  establishes a session with a target network device using the telnet, rlogin, or other remote login type communication protocols.","The target network device then executes the CLI commands provided through the application (). Each CLI command may cause the target network device to operate differently and send back different information. As a result, the CLI commands being generated by the application can change dynamically as the conditions on the target network device change or are modified. Once the target network device executes all the CLI commands, the results are returned to the application for further processing ().","While specific implementations have been described herein for purposes of illustration, various modifications may be made without departing from the spirit and scope of the invention. For example, encryption and other security measures can be implemented using software methods as well as specially configured hardware designed to process the data for secure transmission over a communication link. Implementations of the invention can be implemented using an object-oriented programming language such as Java, C++, C#, Eiffel, SmallTalk, or Objective C, a procedural programming language such as \u201cC\u201d, or assembly code and various combinations of these languages as used to execute on general purpose processors and processors used within a network devices. With respect to session protocols, remote login protocols such as telnet and rlogin were suggested however many other types of client-server type protocols which achieve the same or similar results could also be adapted to work with implementations of the present invention. Further, although aspects of the present invention are described as being stored in memory and other storage mediums, they can also be stored on or read from other types of computer-readable media, such as secondary storage devices, like hard disks, floppy disks, or CD-ROM, a carrier wave from the Internet, or other forms of RAM or ROM. Accordingly, the invention is not limited to the above-described embodiments, but instead is defined by the appended claims and their full scope of equivalents."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate an embodiment of the invention and, together with the description, serve to explain principles of the invention.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
