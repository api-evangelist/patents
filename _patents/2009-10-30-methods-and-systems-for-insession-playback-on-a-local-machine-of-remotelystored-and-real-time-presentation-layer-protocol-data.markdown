---
title: Methods and systems for in-session playback on a local machine of remotely-stored and real time presentation layer protocol data
abstract: Methods and systems for reviewing previously recorded and real-time user session data of presentation layer protocol data. Methods describing a shadowing tool receiving a streaming real-time presentation layer protocol data stream from a shadowing agent service executing on a server; receiving a recorded presentation layer protocol data stream from the shadowing agent service; and combining the streaming real-time presentation layer protocol data stream and the recorded presentation layer protocol data stream producing a single output stream. Systems describing a shadowing tool executing on a computing device receiving a streaming real-time presentation layer protocol data stream from a shadowing agent service executing on a server; the shadowing tool receiving a recorded presentation layer protocol data stream from the shadowing agent service; and the shadowing tool combining the streaming real-time presentation layer protocol data stream and the recorded presentation layer protocol data stream producing a single output stream.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935316&OS=08935316&RS=08935316
owner: Citrix Systems, Inc.
number: 08935316
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20091030
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a continuation-in-part of U.S. application Ser. No. 11\/036,486, entitled \u201cMethod and Systems for Capture and Replay of Remote Presentation Protocol Data,\u201d filed on Jan. 14, 2005, now abandoned, the entire disclosure of which is incorporated herein by reference in its entirety for any and all purposes.","This application also is a continuation-in-part of U.S. application Ser. No. 11\/035,851, entitled \u201cMethod and System for Real-Time Seeking During Playback of Remote Presentation Protocols,\u201d filed on Jan. 14, 2005, now U.S. Pat. No. 8,145,777, the entire disclosure of which is incorporated herein by reference in its entirety for any and all purposes.","This application also is a continuation-in-part of U.S. application Ser. No. 11\/555,611, entitled \u201cMethods and Systems for Recording and Real-Time Playback of Presentation Layer Protocol Data,\u201d filed Nov. 1, 2006, now U.S. Pat. No. 7,996,549 which:\n\n","This application also is a continuation-in-part of U.S. patent application Ser. No. 11\/555,615, entitled \u201cMethods and Systems for Real-Time Seeking During Real-Time Playback of a Presentation Layer Protocol Data Stream,\u201d filed on Nov. 1, 2006, now U.S. Pat. No. 7,831,728 which:\n\n","the entire disclosures of all of which are incorporated herein by reference in their entirety for any and all purposes.","The present invention relates to systems and methods for providing shadowing of recorded and real-time playback of presentation layer protocol data and, in particular, for providing single-stack shadowing of recorded and real-time playback of presentation layer protocol data.","A corporate environment may include several different kinds of computers utilized by users of all different skill levels. Often, corporations provide technical support to people working in the corporate environment. Such assistance may include support for user-errors and hardware malfunctions.","Generally, due to the large scale of corporations, it is difficult for technical support staff to provide assistance in person, especially if the corporation has offices in different geographic areas, perhaps globally. When dealing with inexperienced users or with a wide variety of computer models and manufacturers which may be running different software, it may be difficult to accurately assess or diagnose the technical problem from a distance, especially if the user is unable to accurately communicate the actions they have taken on the computer to the support staff. Shadowing is a technique employed by support staff to service technical problems. Shadowing is the ability of a third party to connect to a user's session, typically through a server, to monitor the current session and take control of the user session in order to provide assistance.","Different types of problems are commonly encountered in such a setting. The technologies currently available to deal with the above described problems generally have scalability issues. Many companies utilize virtualization or remote access software. Each time a user logs on to a system, they create a virtual session on a server. Currently, when users encounter technical problems, support staff may shadow the user's session by creating another virtual session and communicating between the sessions. A significantly negative impact on the system occurs when the server is not capable of adequately processing user requests due to limited available resources.","Additionally, when certain operating systems and software programs do not have multi-session capabilities, support staff is prevented from shadowing to provide technical assistance using known methods and technologies.","In its broadest interpretation, this disclosure describes methods and systems for single-stack shadowing of presentation layer protocol data. The present invention provides shadowing capabilities to operating systems that do not have multi-session capabilities by utilizing a single presentation layer protocol stack. A remote presentation layer protocol may be the ICA protocol manufactured by Citrix Systems, Inc., of Ft. Lauderdale, Fla., the X protocol by the X.org Foundation, the Virtual Network Computing protocol of AT&T Corp., or the RDP protocol, manufactured by Microsoft Corporation of Redmond, Wash. Additionally, by utilizing a single presentation layer protocol stack, the present invention overcomes issues of scalability and permits several shadowers to shadow a user session. The approach also allows support staff to provide technical support to individuals using an operating system or software that does not have multi-session capabilities. Furthermore, the present disclosure describes methods and systems that may be used in a variety of ways besides shadowing, such as broadcasting a session to a large number of users during a presentation or in a classroom environment.","In one aspect, described herein are embodiments of methods for controlling a real-time user session of presentation layer protocol data. A server establishes a shadowing agent service and a user session comprising a single presentation layer protocol stack for communication with a client agent. The shadowing agent service receives a connection request from a shadowing tool executing on a computing device. The shadowing agent service initiates a rollover operation responsive to receipt of the connection request. The rollover operation includes reinitializing the single presentation layer protocol stack and receiving a first presentation layer protocol data stream from the single presentation layer protocol stack. The shadowing agent service receives a second presentation layer protocol data stream from the shadowing tool. The shadowing agent service inserts data from the second presentation layer protocol data stream into the single presentation layer protocol stack.","In one embodiment the shadowing agent service stores the first presentation layer protocol data stream in a plurality of files stored on the server. In a further embodiment, the shadowing agent service deletes the plurality of files once the client agent disconnects from the server.","In another embodiment, the shadowing agent service initiates the rollover operation when either a predetermined file size or a durational threshold is met and creates a new file to store the first presentation layer protocol data stream.","In another embodiment, the shadowing agent service deletes an oldest existing file storing the first presentation layer protocol data stream, retaining at least two files storing the first presentation layer protocol data stream.","In another embodiment, the shadowing agent service stores the first data stream in volatile memory of the server. In a further embodiment, the shadowing agent service encrypts the stored data stream in volatile memory. In still a further embodiment, the shadowing agent service stores the first data stream as a process-local temporary file designated for deletion upon close of the process.","In another embodiment, the shadowing agent service communicates with a permission agent executing in the user session to obtain permission to grant the connection request from the shadowing tool.","In another embodiment, the shadowing agent service deletes the stored data stream once the client agent disconnects from the server.","In another aspect, described herein are embodiments of systems for controlling a real-time user session of presentation layer protocol data. A server establishing a shadowing agent service and a user session comprising a single presentation layer protocol stack for communication with a client agent. A controller of the shadowing agent service receiving a connection request from a shadowing tool executing on a computing device. A recorder of the shadowing agent service initiating a rollover operation responsive to receipt of the connection request. The rollover comprises reinitializing the single presentation layer protocol stack and receiving a first presentation layer protocol data stream from the single presentation layer protocol stack. The controller receiving a second presentation layer protocol data stream from the shadowing tool. The controller inserting data from the second presentation layer protocol data stream into the single presentation layer protocol stack.","In another embodiment, the shadowing agent service stores the first presentation layer protocol data stream in a plurality of files stored on the server. In a further embodiment, the shadowing agent service deletes the plurality of files once the client agent disconnects from the server.","In another embodiment, the shadowing agent service initiates the rollover operation when one of a predetermined file size and durational threshold is met and creating a new file to store the first presentation layer protocol data stream. In still a further embodiment, the shadowing agent service deletes an oldest existing file storing the first presentation layer protocol data stream, retaining at least two files storing the first presentation layer protocol data stream.","In another embodiment, the shadowing agent service stores the first data stream in volatile memory of the server. In a further embodiment, the shadowing agent service encrypts the stored data stream in volatile memory. In still a further embodiment, the shadowing agent service stores the first data stream as a process-local temporary file designated for deletion upon close of the process.","In another embodiment, the shadowing agent service communicates with a permission agent executing in the user session to obtain permission to grant the connection request from the shadowing tool.","In another embodiment, the shadowing agent service deletes the stored data stream once the client agent disconnects from the server.","In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements.",{"@attributes":{"id":"p-0037","num":"0042"},"figref":"FIG. 1A","b":["100","105","120","115","105","120","105","120","120","105","105","120"]},"A client machine  within the computing environment may in some embodiments, be referenced by any of the following terms: client machine(s) ; client(s); client computer(s); client device(s); client computing device(s); client node(s); endpoint(s); endpoint node(s); or a first machine. The server  in some embodiments may be references by any of the following terms: server(s); server farm(s); host computing device(s); or a second machine(s).","A client  may comprise any personal computer (e.g. based on a microprocessor from the x86 family, the Pentium family, the 680x0 family, PowerPC, PA-RISC, MIPS families, the ARM family, the Cell family), network computer, wireless device (e.g. mobile computer, PDA, smartphone), information appliance, workstation, minicomputer, mainframe computer, telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.","Operating systems supported by the client  can include any member of the WINDOWS family of operating systems from Microsoft Corporation of Redmond, Wash.; Mac OS from Apple Inc. of Cupertino, Calif.; JAVA OS from Sun Microsystems of Santa Clara, Calif.; various varieties of Unix (e.g. Solaris, SunOS, Linux, HP-UX, A\/IX, and BSD-based distributions), any embedded operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices, or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include: WINDOWS 3.x, WINDOWS 95, WINDOWS 98, WINDOWS 2000, WINDOWS NT. 3.51, WINDOWS NT 4.0, WINDOWS CE, WINDOWS XP, WINDOWS VISTA, WINDOWS 7, all of which are manufactured by Microsoft Corporation of Redmond, Wash.; Mac OS X, manufactured by Apple Inc. of Cupertino, Calif.; OS\/2, manufactured by International Business Machines of Armonk, N.Y.; and Linux, an open source operating system distributed by, among others, Red Hat, Inc., and any type and\/or form of a Unix operating system, among others.","A client  may execute, operate or otherwise provide an application, which can be any type and\/or form of software, program, or executable instructions such as any type and\/or form of web browser, web-based client, client-server application, a thin-client computing client, an ActiveX control, or a Java applet, or any other type and\/or form of executable instructions capable of executing on the client . In some embodiments, the application may be a server-based or a remote-based application executed on behalf of the client  on a server . In one embodiment, the server  may display output to the client  using any thin-client or remote-display protocol, such as the Independent Computing Architecture (ICA) protocol from Citrix Systems, Inc. of Ft. Lauderdale, Fla. or the Remote Desktop Protocol (RDP) manufactured from the Microsoft Corporation of Redmond, Wash. The application can use any type of protocol and it can be, for example, an HTTP client, an FTP client, an Oscar client, or a Telnet client. In other embodiments, the application comprises any type of software related to voice over internet protocol (VoIP) communications, such as a soft IP telephone. In further embodiments, the application comprises any application related to real-time data communications, such as applications for streaming video and\/or audio.","In one embodiment, the client machine  can be a virtual machine, such as those manufactured by XenSolutions, Citrix Systems, IBM, VMware, or any other virtual machine able to implement the methods and systems described herein.","The server  may be a file server, application server, web server, proxy server, appliance, network appliance, gateway, application gateway, gateway server, virtualization server, deployment server, SSL VPN server, or firewall. In some embodiments, a server  may have the capacity to function as either an application server or as a master application server. In one embodiment, a server  may include an Active Directory.","In some embodiments, a server may include a hypervisor. A hypervisor is a computer platform virtualization software that allows multiple operating systems to run on a computing device concurrently. A hypervisor may provide virtual resources to an operating system in any manner that simulates the operating system having access to a physical device. In some embodiments, a computing device executes one or more types of hypervisors. In these embodiments, hypervisors may be used to emulate virtual hardware, partition physical hardware, virtualize physical hardware, and execute virtual machines that provide access to computing environments. Hypervisors may include those manufactured by VMWare, Inc., of Palo Alto, Calif.; the XenServer provided by Citrix Systems, Inc.; HyperV, VirtualServer or virtual PC hypervisors provided by Microsoft, or others. In some embodiments, a computing device executing a hypervisor, which creates a virtual machine platform on which guest operating systems may execute is referred to as a host server. In one of these embodiments, for example, the computing device is a XexServer provided by Citrix Systems, Inc.","In some embodiments, a hypervisor executes within an operating system executing on a computing device. In one of these embodiments, a computing device executing an operating system and a hypervisor may be said to have a host operating system (the operating system executing on the computing device), and a guest operating system (an operating system executing within a computing resource partition provided by the hypervisor). In other embodiments, a hypervisor interacts directly with hardware on a computing device, instead of executing on a host operating system. In one of these embodiments, the hypervisor may be said to be executing on \u201cbare metal,\u201d referring to the hardware including the computing device.","In some embodiments, a hypervisor may create a virtual machine in which an operating system executes. In one of these embodiments, for example, the hypervisor loads a virtual machine image to create a virtual machine. In another of these embodiments, the hypervisor executes an operating system within the virtual machine. In still another of these embodiments, the virtual machine executes an operating system.","In some embodiments, the server  may be executing one or more applications, such as an application providing a thin-client computing or remote display presentation application. In one embodiment, the server  executes as an application, any portion of the Citrix Delivery Center\u2122 by Citrix Systems, Inc., such as the XenServer\u2122, and\/or any of the MICROSOFT WINDOWS Terminal Services manufactured by the Microsoft Corporation. In another embodiment, the application includes a Remote Desktop Protocol (RDP) client, developed by Microsoft Corporation of Redmond, Wash., or an X11 client, maintained by the open source X.org Foundation. In still another embodiment, the server  may execute an application, which for example, may be an application server providing email services such as MICROSOFT EXCHANGE manufactured by the Microsoft Corporation of Redmond, Wash., a web or Internet server, or a desktop sharing server, or a collaboration server. In yet another embodiment, any of the applications may comprise any type of hosted service or products, such as GOTOMEETING provided by Citrix Systems, Inc. of Fort Lauderdale, Fla.; WEBEX provided by Cisco Systems Inc., of San Jose, Calif.; or LIVE MEETING provided by Microsoft Corporation of Redmond, Wash.","The network  is configured to communicatively connect the client  and the server . The network  may be a wired or wireless network. Examples of the network  include the Internet, an intranet, a WiFi network, a WiMAX network, a mobile telephone network, or a combination thereof. The network  may be any type and\/or form of network and may include any of the following: a point to point network, a broadcast network, a wide area network, a local area network, a telecommunication network, a data communication network, a computer network, an ATM (Asynchronous Transfer Mode) network, a SONET (Synchronous Optical Network) network, a SDH (Synchronous Digital Hierarchy) network, a wireless network, and a wireline network. In some embodiments, the network  may comprise a wireless link, such as an infrared channel or satellite band. The topology of the network  may be a bus, star, or ring network topology. The network  and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein. The network  may comprise mobile telephone networks utilizing any protocol or protocols used to communicate among mobile devices, including AMPS, TDMA, CDMA, GSM, GPRS, or UMTS. In some embodiments, different types of data may be transmitted via different protocols. In other embodiments, the same types of data may be transmitted via different protocols. Although  shows a network  between the client  and the server , the clients  and the server  may be on the same or different network . In some embodiments, there are multiple networks  between the client  and the server . In such embodiments, the multiple networks  may be any combination of public and private networks.","In some embodiments, an optional appliance  may reside within the computing environment, generally between the server  and the network . The appliance  may be an application acceleration appliance. The appliance  may provide functionality including firewall functionality, application firewall functionality, or load balancing functionality. In some embodiments, the appliance  comprises an appliance such as one of the line of appliances manufactured by the Citrix Systems, Inc., of Fort Lauderdale, Fla., or Silver Peak Systems, Inc., of Mountain View, Calif., or of Riverbed Technology, Inc., of San Francisco, Calif., or of F5 Networks, Inc., of Seattle, Wash., or of Juniper Networks, Inc., of Sunnyvale, Calif.",{"@attributes":{"id":"p-0050","num":"0055"},"figref":["FIG. 1B","FIG. 1B"],"b":["150","105","110","120","150","152","154","156","172","150","168","164","164","164"],"i":["a ","b"]},"Referring now to , each computing device  may also include additional optional elements, such as one or more I\/O devices -, and a cache memory  in communication with the CPU .","The CPU  is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments, the CPU  is provided by a microprocessor unit, such as: those manufactured by Intel Corporation of Santa Clara, Calif.; those manufactured by Motorola Inc., of Schaumburg, Ill.; those manufactured by Transmeta Corporation of Santa Clara, Calif.; those manufactured by International Business Machines of Armonk, N.Y.; or those manufactured by Advanced Micro Devices, Inc. of Sunnyvale, Calif. The computing device  may be based on any of these processors, or any other processor capable of operating as described herein.","Main memory unit  may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the CPU , such as static random access memory (SRAM), burst SRAM or synchburst SRAM (BSRAM), dynamic random access memory (DRAM), Fast Page Mode DRAM (FPM DRAM), Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM), Extended Data Output DRAM (EDO DRAM), Burst Extended Data Output DRAM (BEDO DRAM), Enhanced DRAM (EDRAM), synchronous DRAM (SDRAM), JEDEC SRAM, PC100 SDRAM, Double Data Rate SDRAM (DDR SDRAM), Enhanced SDRAM (ESDRAM), SyncLink DRAM (SLDRAM), Direct Rambus DRAM (DRDRAM), or Ferroelectric RAM (FRAM). The main memory  may be based on any of the above described memory chips, or any other available memory chips capable of operating as described herein. In the embodiment shown in , the CPU  communicates with main memory  via a system bus .  depicts an embodiment of a computing device  in which the CPU  communicates directly with main memory  via a memory port .",{"@attributes":{"id":"p-0054","num":"0059"},"figref":["FIG. 1C","FIG. 1C","FIG. 1C","FIG. 1C"],"b":["152","182","152","182","160","182","154","152","164","160","152","164","164","168","152","168","150","152","164","152","164","164"],"i":["c ","d ","c "]},"The computing device  may support any suitable installation device , such as a floppy disk drive for receiving floppy disks such as 3.5-inch, 5.25-inch disks or ZIP disks, a CD-ROM drive, a CD-R\/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, hard-drive or any other device suitable for installing software and programs such as any client agent , or portion thereof. The computing device  may further comprise a storage device , such as one or more hard disk drives or redundant arrays of independent disks, for storing an operating system and other related software, and for storing application software programs such as any program related to the client agent . Optionally, any of the installation devices  could also be used as the storage device . Additionally, the operating system and the software can be run from a bootable medium, for example, a bootable CD, such as KNOPPIX\u00ae, a bootable CD for GNU\/Linux that is available as a GNU\/Linux distribution from knoppix.net.","Furthermore, the computing device  may include a network interface  to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above. The network interface  may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing the computing device  to any type of network capable of communication and performing the operations described herein.","A wide variety of I\/O devices  may be present in the computing device . Input devices include keyboards, mice, trackpads, trackballs, microphones, and drawing tablets. Output devices include video displays, speakers, inkjet printers, laser printers, and dye-sublimation printers. The I\/O devices may be controlled by an I\/O controller  as shown in . The I\/O controller  may control one or more I\/O devices  such as a keyboard and a pointing device, e.g., a mouse or optical pen. Furthermore, an I\/O device  may also provide storage  and\/or an installation medium  for the computing device . In still other embodiments, the computing device  may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry, Inc. of Los Alamitos, Calif.","In some embodiments, the computing device  may comprise or be connected to multiple display devices , which each may be of the same or different type and\/or form. As such, any of the I\/O devices  and\/or the I\/O controller  may comprise any type and\/or form of suitable hardware, software, or combination of hardware and software to support, enable or provide for the connection and use of multiple display devices  by the computing device . For example, the computing device  may include any type and\/or form of video adapter, video card, driver, and\/or library to interface, communicate, connect or otherwise use the display devices . In one embodiment, a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments, the computing device  may include multiple video adapters, with each video adapter connected to one or more of the display devices . In some embodiments, any portion of the operating system of the computing device  may be configured for using multiple displays . In other embodiments, one or more of the display devices  may be provided by one or more other computing devices, where other clients , shadowers , or server  are connected to the computing device , for example, via a network . These embodiments may include any type of software designed and constructed to use another computer's display device as a second display device  for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device  may be configured to have multiple display devices .","In further embodiments, an I\/O device  may be a bridge  between the system bus  and an external communication bus, such as a USB bus, an Apple Desktop Bus, an RS-232 serial connection, a SCSI bus, a FireWire bus, a FireWire 800 bus, an Ethernet bus, an AppleTalk bus, a Gigabit Ethernet bus, an Asynchronous Transfer Mode bus, a HIPPI bus, a Super HIPPI bus, a SerialPlus bus, a SCI\/LAMP bus, a FibreChannel bus, or a Serial Attached small computer system interface bus.","A computing device  of the sort depicted in  typically operates under the control of operating systems, which control scheduling of tasks and access to system resources. The computing device  can be running any operating system such as any of the versions of the MICROSOFT WINDOWS operating systems, the different releases of the Unix and Linux operating systems, any version of the MAC OS for Macintosh computers, any embedded operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices, or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include: WINDOWS 3.x, WINDOWS 95, WINDOWS 98, WINDOWS 2000, WINDOWS NT 3.51, WINDOWS NT 4.0, WINDOWS CE, and WINDOWS XP, all of which are manufactured by Microsoft Corporation of Redmond, Wash.; MAC OS, manufactured by Apple Computer of Cupertino, Calif.; OS\/2, manufactured by International Business Machines of Armonk, N.Y.; and Linux, a freely-available operating system distributed by Caldera Corp. of Salt Lake City, Utah, or any type and\/or form of a Unix operating system, among others.","In some embodiments, the computing device  may have different processors, operating systems, and input devices consistent with the device. For example, in one embodiment the computing device  is a Treo 180, 270, 600, 650, 680, 700p or 700w smart phone manufactured by Palm, Inc. In some of these embodiments, the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five-way navigator device.","In other embodiments the computing device  is a mobile device, such as a JAVA-enabled cellular telephone or personal digital assistant (PDA), such as the i55sr, i58sr, i85s, i88s, i90c, i95cl, or the im11000, all of which are manufactured by Motorola Corp. of Schaumburg, Ill., the 6035 or the 7135, manufactured by Kyocera of Kyoto, Japan, or the i300 or i330, manufactured by Samsung Electronics Co., Ltd., of Seoul, Korea.","In still other embodiments, the computing device  is a Blackberry handheld or smart phone, such as the devices manufactured by Research In Motion Limited, including the Blackberry 7100 series, 8700 series, 7700 series, 7200 series, the Blackberry 7520, or the Blackberry Pearl 8100. In yet other embodiments, the computing device  is a smart phone, Pocket PC, Pocket PC Phone, or other handheld mobile device supporting Microsoft Windows Mobile Software. In other embodiments, the computing device  is an iPhone from Apple Inc. Moreover, the computing device  can be any workstation, desktop computer, laptop or notebook computer, server, handheld computer, mobile telephone, any other computer, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.","Referring now to , a block diagram depicts an embodiment of a system for single stack shadowing of remote presentation layer protocol data. In brief overview, the system  includes a client  in communication with a server , a shadower  in communication with a server , and a network  installed between the client , server  and shadower . In some embodiments, the shadower  and client  may be of any type of computing device as described herein. In some embodiments, the shadower  and the server  may execute on the same computing device. In other embodiments, the shadower  and the server  may be separate computing devices.","One embodiment includes a single client machine  communicating with more than one server  and more than one shadower . In another embodiment, a single client machine  communicates with a single server  and more than one shadower . In another embodiment, more than one client  communicates with a single server  and a single shadower . In another embodiment, a single client machine  communicates with more than one server  and a single shadower . In another embodiment, more than one client  communicates with more than one server  and a single shadower . In another embodiment, more than one client  communicates with a single server  and more than one shadower . In another embodiment, more than one client  communicates with more than one server  and more than one shadower .","A client machine  within the computing environment  may in some embodiments be referred to as any one of the following terms: client(s) ; client machine(s); client device(s); client computing device(s); client node(s); endpoint(s); or a first machine; The server  in some embodiments may be referenced by any of the following terms: server ; server farm(s); host computing device(s); or a second machine. A shadower  in some embodiments may be referenced by any of the following terms: shadower ; shadowing device(s); shadowing computing device(s); or a third machine.","Referring now to  in more detail, in the depicted computing environment  a client  establishes communication with a server  over a network . A shadower  may establish a connection with the server  after the client  has established a connection. In some embodiments, a shadower  is able to monitor the real-time session of the client  through the server  by establishing a connection with the server  over the network after the client  has already established a connection with the server . In other embodiments, a shadower  is able to monitor a recorded session of the client  by establishing a connection to the server  over the network  and accessing the recorded session stored in a storage element of the server . In some embodiments the storage element may be separate from the server  but accessed by establishing a connection to the server . In some embodiments, a shadower  is able to monitor both the real-time and recorded sessions in a seamless session where there is no visual difference between the recorded and real-time sessions where the shadower  establishes a connection over the network  to the server where real-time presentation layer protocol is extracted from the user session established when the client  established a connection over the network  to the server . In some embodiments, a shadower  is able to control a monitored real-time user session.","Referring now to , a block diagram depicting an embodiment of a system for single stack shadowing in more detail. In brief overview, the system  includes a client , a server , and a shadower . A client agent  executes on the client . A shadowing tool  executes on the shadower . The client  establishes a connection with the server  over the network . The server  establishes a user session  containing a remote presentation layer protocol stack . The server  also executes a shadowing agent service . The shadowing tool  executing on the shadower  establishes a connection with the shadowing agent service  executing on the server . The server  may optionally include a permission agent . The shadowing agent service  processes data received from the remote presentation layer protocol stack  and data received from the shadower  sent by the shadowing tool . The shadowing agent service  communicates over the network  to permit the shadower  to control the user session . The shadowing agent service  also is capable of recording the history of the user session  by receiving and storing a data stream from the client . A recorded remote presentation layer protocol data stream and a real-time remote presentation layer protocol data stream are transmitted to the shadowing tool  which is then seamlessly joined and presented to the shadower.","Although  shows a network  between the client , the shadower , and the server , the client , server , and shadower  may be on the same network  or on different networks, as discussed above.","Referring now to , and in more detail, the client  establishes a connection with the server . The server  establishes a user session  containing a remote presentation layer protocol stack . The client agent  executing on the client  communicates with the user session  executing on the server . The client agent  transmits and receives protocol data streams to and from the server . In some embodiments, a plurality of clients  executing client agents  may connect with a server . In other embodiments a client  executing a client agent  may connect with a plurality of servers . In other embodiments a plurality of clients  executing client agents  may connect with a plurality of servers . In some embodiments, the shadowing agent service  is a software module executing on the server . The shadowing agent service  transmits and receives protocol data streams to and from the remote presentation layer protocol stack  and a shadowing tool  executing on a shadower .","A shadower  establishes a connection with the shadowing agent service  executing on the server . A shadowing tool  executes on the shadower . In some embodiments, when a shadower establishes a connection with the shadowing agent service , the shadowing agent service  communicates with the permission agent  to determine the level access granted to the shadower, prior to initiating a rollover, described herein. In some embodiments, when a shadower establishes a connection with the shadowing agent service , the shadowing agent service  generates a request to initiate a rollover and transmits the request to the remote presentation layer protocol stack  executing within a user session  of the server .","The shadowing tool  communicates with the shadowing agent service  executing on the server. The shadowing tool  transmits and receives data to and from the shadowing agent service . In some embodiments, a plurality of shadowers  executing shadowing tools  may establish a connection with a shadowing agent service . In some embodiments, a shadower  executing a shadowing tool  may establish a connection with a plurality of shadowing agent services  each executing on a different server . In some embodiments, a shadower  executing a shadowing tool  may establish a connection with a shadowing agent service  executing on a single server  but communicating with a plurality of user sessions .","In some embodiments, a shadower  may monitor and control the user session  of a client . The shadowing agent service  processes data streams received from the remote presentation layer protocol stack  and the shadowing tool  and injects the data stream from the data stream from the shadowing tool  into the remote presentation layer protocol stack, permitting the shadower  to take control of the user session . The presentation layer protocol data stream generated from the shadowing tool may include keyboard and mouse events.","In some embodiments, a shadower  may monitor but not control the user session  of a client . The shadowing tool  receives the unmodified remote presentation layer protocol data stream from the remote presentation layer protocol stack  which is then rendered by the shadower . The data stream is also transmitted from the remote presentation layer protocol stack  to the client  displaying the session controlled by the client .","In some embodiments, the shadowing agent service  receives and stores the modified first data stream from the remote presentation layer protocol stack . In some embodiments, the data stream is stored in a plurality of files using rollover. Upon reaching a certain predetermined file size or durational threshold, a rollover is initiated causing the remote presentation layer protocol stack  to clear its virtual channels and reset them to their original state, close the file currently recording data from the user session, and creating a new file to continue storing data from the current user session. Threshold based limits prevent overwhelming the shadower with excessive recorded data. The threshold based limits also prevent excessive storage on the server  hosting the shadowing agent service . In some embodiments, a new file is created when a predetermined file size threshold is met. In other embodiments, a new file is created when a predetermined durational threshold is met. The shadowing agent service  deletes the oldest existing file while keeping at least two files in order to provide the shadower with adequate recorded data. This creates a rolling window of recorded data over the session ensuring enough data is always available to the shadower, no matter when a shadower connects. As the file formats for the stored data streams are so compact, the impact on memory and disk space will be minimal. If the shadower requests to review past session activity, the completed recording files not yet deleted and current recording file are available to the shadower . In some embodiments, the shadowing agent service will stitch the files into a single data stream by concatenating the files sequentially. In some embodiments, the shadowing tool receives the recording files and the current recording file and stitch, merge, or concatenate the files to provide a single data stream. The single stream is provided to the shadower  allowing the user to view the recorded and real time data as one seamlessly joined stream. In some embodiments the composite file may be any pre-determined duration. In other embodiments, the composite file may be limited by the storage resources available on the server or other storage element. In other embodiments, the composite file may be between four and eight hours in length, assuming the user session has been running for at least four hours.","In some embodiments, the shadowing agent service  deletes the plurality of files containing a stored presentation layer protocol data stream when the client agent  disconnects from the server . This prevents the server  from running out of storage space because too many historic recordings are saved on the server . In some embodiments, the shadowing agent service  stores the presentation layer protocol data stream in volatile memory of the server. In further embodiments, the shadowing agent service  encrypts the stored data stream in volatile memory on the server . In still further embodiments, the shadowing agent service  stores the stored data stream as a process-local temporary file designated for deletion upon close of the process.","In some embodiments, the shadowing agent service  transmits a recorded data stream from the remote presentation layer protocol stack . In some embodiments, where the recorded data stream is stored in multiple files, the shadowing agent service  merges or stitches the files together and transmits a single file containing the recorded data stream to the shadowing tool . At the same time, or substantially the same time, a first real time presentation layer protocol data stream from remote presentation layer protocol stack  is injected with data from a second real-time presentation layer protocol data stream from the shadowing tool . The shadowing agent service  then transmits the modified first real-time presentation layer protocol data stream to the shadowing tool . The shadowing tool  merges, stitches, concatenates or otherwise joins the transmitted recorded data stream with the modified first real-time presentation layer protocol data stream to generate an output stream that seamlessly joins the stored data stream and the data stream representing the shadower  controlling the user session  of the client . Generating a single data stream composed of recorded session data and real-time data permit easier consumption by the rendering agent of the shadowing tool.","In some embodiments, the shadowing tool  enables the shadower to generate an output stream using standard video playback features (such as play, stop, pause) as well as several other modes. These modes include, but are not limited to real-time, fast-forward, slow-forward, random seeking, and fast review. In some embodiments, the shadowing tool  enables the end-user to view the generated output stream using the standard features and modes describe above. The shadowing tool  joins the real-time data stream transmitted by the controller  and the saved data stream transmitted by the recorder  of the shadowing agent service  to provide a single output data stream that displays both historic and real-time session data.","In some embodiments, the shadowing tool  receives the pre-recorded presentation layer protocol data stream and a real-time presentation layer protocol data stream from the shadowing agent service  at substantially the same time. In some embodiments, when the shadowing tool  displays the single output data stream to the end-user, the shadowing tool may indicate the point of transition from the recorded presentation layer protocol data stream to the real-time presentation layer protocol data stream by displaying a message on the screen. In some embodiments, the message may indicate either that the display is showing pre-recorded data or real-time data. The message may be displayed in different fonts, colors, sizes, or with any other perceptibly different methods to indicate the state of the output stream. In other embodiments, the shadowing tool  may indicate a transition from historic and real-time session data by displaying the recorded presentation layer data stream in either a visually different hue or saturation in color than the real-time presentation layer protocol data. In some embodiments, when a shadowing tool disconnects from the shadowing agent service, the shadowing tool  deletes the files containing the received recorded presentation layer protocol data stream and any data stored from the real-time presentation layer protocol data stream.","Some embodiments may include a permission agent . The permission agent  is a software module executing in the user session . In some embodiments, the shadowing agent service  may communicate with the permission agent .","The permission agent  is a module executing within a user session . In some embodiments, the permission agent  displays a message within the session requesting information from the user. In some embodiments, the message generated by the permission agent  asks the user whether a shadower may connect to the user session to monitor the user session. In other embodiments, the message generated by the permission agent  asks the user whether a shadower may connect to the user session to control and monitor the user session. In some embodiments, the permission agent  obtains an amount of time from the client the application is permitted to record of the end-user's session. In some embodiments, the amount of time is at least four hours. In some embodiments, the amount of time may be up to eight hours. In some embodiments, the end-user may specify an amount of data from the end user's session that may be recorded. In some embodiments, record durations are determined or specified through a system policy and not the permission agent . In some embodiments, file lengths are determined or specified through a system policy and not the permission agent . In some embodiments, the permission agent  obtains permission from the end user of the client  to allow the shadower  to control or shadow their session.","In some embodiments, the permission agent  displays a notification to the client user when a shadower establishes a connection to the user session . In other embodiments, the permission agent  displays a notification to the client user when a shadower disconnects from the user session . In some embodiments, the notification contains the name or handle of the shadower. In other embodiments, the notification also contains contact information, such as an email or phone number of the shadower. In some embodiments, the permission agent  initiates when the user session  is established by the server . In other embodiments, the permission agent  is initiated when the shadowing agent service  initiates on the server . In still other embodiments, the permission agent  is initiated when a shadower  connects to the server . In still other embodiments, the permission agent  is initiated when the client  connects to the server .",{"@attributes":{"id":"p-0083","num":"0088"},"figref":["FIG. 2C","FIG. 2B","FIG. 2C"],"b":["250","105","120","210","120","210","220","210","220","210","230"]},{"@attributes":{"id":"p-0084","num":"0089"},"figref":"FIG. 2D","b":["230","282","284","286","288","290","292","294"]},"Now referring to  in greater detail, virtual channels of remote presentation layer protocol stacks can be stateful and any loss of data renders a data stream unplayable. Previously, in order to shadow a user, it was necessary to record all session data from the beginning of the stream to ensure that playback was possible. Rollover creates resynchronization points where the current file could be closed and a new file created. Rollover overcomes the problem of unmanageably large files resulting from graphically intense sessions or long-lived sessions. Rollover also provides a point in the protocol data stream from where session data can be played. In some embodiments, the recorded content of the new file is a continuation of the previous file except that it can be played back independently because the new file is recorded starting from a re-synchronization point. In other embodiments, the presentation layer protocol data stream is modified to contain a marker indicating the resynchronization point, from which point a session can be played independently from the data preceding the point. The virtual channel state machines are reset to their original state when a session is started. Rollover is the ability to reinitialize the state of various virtual channels being recorded without interrupting the user's session.","In one embodiment, a shadowing agent service  executing on a server  generates a request to initiate a rollover (Step ). In some embodiments, request to initiate a rollover is generated each time a shadower  connects to the shadowing agent service . In other embodiments, a request to initiate a rollover is generated each time a shadowing tool  establishes a connection with the shadowing agent service . In other embodiments, a request to initiate a rollover is generated periodically according to a predetermined durational threshold. In some embodiments, the predetermined durational threshold may be set by an administrator in the system. In other embodiments, the predetermined durational threshold may be set by the manufacturer or distributor. In some embodiments, a request to initiate rollover is generated when a presentation layer protocol data stream stored in a storage element reaches a predetermined file size. In some embodiments, the predetermined file size threshold may be set by an administrator in the system. In other embodiments, the predetermined file size threshold is set by a system policy which determines the available space in the storage device and calculating a file size threshold based on the size of the available space. In some embodiments, the storage device resides on the server. In other embodiments, the storage device resides outside of the server. In other embodiments, the predetermined file size threshold may be set by the manufacturer or the distributor of the system. The data stream being recorded is stored to a file stored on a storage element on the server . When the file reaches the predetermined file size threshold or predetermined durational threshold, the file is closed and a new file is created. The new file continues to record the user session  as a continuation of the previously closed file.","In some embodiments, the shadowing agent service  generates a request to shadow a user session  which includes the number of shadowers  connecting to the server . In other embodiments, the shadowing agent service  generates a request each time a shadower  establishes a connection to the server . In other embodiments, the shadowing agent service  generates a request only after a permission agent  grants permission for the shadower  to shadow the user session . In other embodiments, the shadowing agent service  generates a request containing the specific virtual channel drivers that require re-initialization. In other embodiments, the shadowing agent service  generates a request for all virtual channel drivers to be re-initialized. In some embodiments, the request generated by the shadowing agent service  contains a high priority that requires immediate re-initialization of the virtual channel drivers. In other embodiments, the request generated by the shadowing agent service  contains a lower priority, which request re-initialization but permits the virtual channels to complete all prior existing processes.","In step , the request is intercepted by the remote presentation layer protocol stack . In some embodiments, the remote presentation layer protocol stack  intercepts all rollover requests from the shadowing agent service . In other embodiments, the remote presentation layer protocol stack  intercepts only requests from shadowing agent service  when the request is generated as a result of durational threshold rule. In other embodiments, the remote presentation layer protocol stack  intercepts only request from the shadowing agent service  when the request is generated as a result of a file size threshold rule. In other embodiments, the remote presentation layer protocol stack  intercepts only requests from the shadowing agent service  if the permission agent  has granted access to the shadower to shadow the user session .","In step , the remote presentation layer protocol stack initiates a re-initialization request to the virtual drivers. As the virtual channels of remote presentation layer protocol stacks  are stateful, in order to avoid data loss that renders the data stream unplayable, the virtual channels must be re-initialized. Re-initialization allows data to be extracted and streamed to the shadowing agent service without any loss. In some embodiments, the re-initialization request is sent to all the virtual channel drivers in the remote presentation layer protocol stack . In other embodiments, the re-initialization request is sent to only the virtual channel drivers specified by the generated request intercepted from the shadowing agent service .","In step , the remote presentation layer protocol stack  monitors each virtual channel during re-initialization. In some embodiments, the remote presentation layer protocol stack  monitors the type of data processed by the virtual channel. In other embodiments, the remote presentation layer protocol stack  monitors the time required to finish processing existing requests. In other embodiments, the remote presentation layer protocol stack  monitors the progress of the processing of existing requests in the virtual channels.","In step , each virtual channel continues processing requests until the re-initialization request is encountered. In some embodiments, re-initialization request will be queued and processed behind existing outstanding requests.","In step , a re-synchronization point is created as each virtual channel resets and sends an indicator to the remote presentation layer protocol stack . In some embodiments, an indicator is sent to the remote presentation layer protocol stack  after completion of all existing requests and another is sent after completion of the re-initialization. In other embodiments, the indicator is sent only after completion of the re-initialization of the virtual channel.","In step , the remote presentation layer protocol stack  extracts presentation layer protocol data from the virtual channels into a buffer for delivery to the shadowing agent service . In some embodiments, the presentation layer protocol data from the virtual channels is extracted and directly delivered to the shadowing agent service . In other embodiments, the remote presentation layer protocol stack  extracts data from certain virtual channels into a buffer for delivery to the shadowing agent service  while other data from other channels are delivered directly to the shadowing agent service . In other embodiments, the presentation layer protocol data is extracted into more than one buffer for delivery to the shadowing agent service .",{"@attributes":{"id":"p-0094","num":"0099"},"figref":"FIG. 2E","b":["120","200","120","220","230","225","225","250","252","254","254","225","254","240","230","232","234"]},"Now referring to  in greater detail, the controller  is a module of the shadowing agent service  that determines which of either the client  or the shadower  controls the user session . The controller  receives a real-time data stream from the remote presentation layer protocol stack . The controller  also receives a data stream from the shadowing tool  executing on the shadower . The shadowing tool  generates a data stream representing input device events, such as a mouse or keyboard. As such, specific keyboard strokes are not recorded, providing further security when a shadower is monitoring a user's session. In some embodiments, the controller  determines that a shadower may take control of the user session. The controller  injects or otherwise adds to the remote presentation layer protocol stack with data from the data stream from the shadowing tool . When the controller  determines that a shadower may not take control of the user session, data stream from the shadowing tool  is not injected into the stack .","The controller  is responsible for accepting connection requests from the one or more shadowers. In some embodiments, the controller  determines the shadowing permissions and policy. In some embodiments, the controller  initiates a rollover each time a shadower establishes a connection with the shadowing agent service . In some embodiments, the controller  receives a presentation layer protocol data stream from the shadowing tool . In some embodiments, the presentation layer protocol data stream is comprised of all of the user session data generated on the shadower . In other embodiments, the presentation layer protocol data is comprised of only input data, such as keyboard and mouse input, from the shadower . In some embodiments, there may be multiple shadowing tools , where multiple shadowers  all shadow a single user session  of a client. Only one shadower  may control the user session at a time. The controller  receives presentation layer protocol data streams from the multiple shadowing tools  and determines which of the shadowing tools  controls the user session . In some embodiments, control of the user session is determined by the time at which a shadowing tool  connected to the shadowing agent service . In other embodiments, control is determined by pre-set or pre-determined permissions. When a permission agent  is available, the controller  may communicate with the permission agent  to determine which shadowing tool  controls the user session . In other embodiments, the controller may determine which shadowing tool  controls the user session using a combination of factors, such as time connected, hierarchy of privileges, and number of shadowing tools .","The recorder  is a module of the shadowing agent service . The recorder  is responsible for recording a presentation layer protocol data stream. The recorder  initiates a rollover and receives and stores a data stream from the remote presentation layer protocol stack . The recorder  initiates a rollover when a predetermined file size or durational threshold is met. The recorder stores the data stream from the remote presentation layer protocol stack  in multiple files, in accordance with rollover, described above. Each file is independently playable. The beginning of each file is considered a re-synchronization point, the point from which a data stream can be viewed.","A receiver  is a module of the remote presentation layer protocol stack . The receiver  receives a message from the shadowing agent service . In some embodiments, the controller  of the shadowing agent service  sends the message. In other embodiments, the recorder  of the shadowing agent service  sends the message. The receiver also receives a presentation layer protocol data stream from a client agent executing on a computing device. The receiver may also receive a presentation layer protocol data stream from the shadowing agent service. The presentation layer protocol data stream from the shadowing agent service .","A rollover agent  is a module of the remote presentation layer protocol stack . The rollover agent  receives the rollover message from the receiver  and generates requests to the virtual channel . The rollover agent then enters a mode of monitoring for the virtual channel to complete its initialization. The virtual channel , (or each virtual channel , when there are a plurality of virtual channels) continues processing it existing backlog of requests as normal before encountering the reinitialization request. In some embodiments, the virtual channel pauses the processing of its existing backlog of requests and processes the reinitialization request. Once the virtual channel  completes processing the reinitialization request, the rollover agent  resets a virtual channel state machine to an original state. The rollover agent  then receives an indicator that the reinitialization of that virtual channel is complete. The indicator is the re-synchronization point, the point from which the data stream can be played independently from the data prior to that point. Once the virtual channel has completed its reinitialization, the rollover agent starts extracting presentation layer protocol data into a buffer for delivery to the shadowing agent service .","Although  shows a shadowing agent service  containing a controller  and a recorder , the controller  and the recorder  may be exist individually or grouped with other shadowing agent service modules, either within the a shadowing agent service  that may be executing on a single server  or on multiple servers .",{"@attributes":{"id":"p-0101","num":"0106"},"figref":"FIG. 3A","b":["300","230","120","110","230","110","110","220","225"]},"In step , a client  establishes a connection with a server . The server  establishes a user session  which contains a remote presentation layer protocol stack . The client agent  on the client  communicates with the remote presentation layer protocol stack . The shadowing agent service  communicates with the remote presentation layer protocol stack .","In step , a shadower  establishes a connection with the shadowing agent service  executing on the server . In some embodiments, multiple shadowers  may establish connections with the shadowing agent service  at the same time. In other embodiments, multiple shadowers  may be in communication with the shadowing agent service , each shadower  establishing a connection with the shadowing agent service  at a different time.","In step , the remote presentation layer protocol stack  receives a first data stream transmitted by the client agent . A rollover is initiated by the controller  of the shadowing agent service  each time a shadower  establishes a connection with the shadowing agent service . The virtual channels of the remote presentation layer protocol stack  are then reset to their original state, the file storing the data stream is closed, and a new file is created to continue storing the data stream from the remote presentation layer protocol stack .","In step , the shadowing agent service  receives a second data stream transmitted by the shadowing tool  executing on a shadower . The second data stream from the shadowing tool  represents input of the shadower . In the case of multiple shadowers , the shadowing agent service  determines which shadower will control the user session . In some embodiments, the shadowing agent service  determines which shadower of a plurality of shadowers has control by using the times at which the shadowers  established a connection with the shadowing agent service . In some embodiments, the first shadower to connect may control the user session. In other embodiments, the last shadower to connect may control the user session. In some embodiments, the shadowing agent service may determine which shadower has control based upon permissions of the shadowers. In other embodiments, the shadowing agent service may determine which shadower has control based upon shadower profile, which may include a person's name, position, geographic location, seniority, or experience. In other embodiments, the shadowing agent service may determine which shadower has control based upon a pre-determined list provided by an administrator of the system.","In step , in the case of multiple shadowers, the shadowing agent service  determines which of the shadowers  controls the end-user's session. Control is determined by whether the shadowing agent service  injects data from the second data stream from the shadowing tool  executing on the shadower  into the remote presentation layer protocol stack . In some embodiments, the shadowing agent service  may determine that a shadower may not take control of the end-user's session. Then, the shadowing agent service  will not inject any data from the second data stream from the shadowing tool  into the remote presentation layer protocol stack . In other embodiments, the shadowing agent service  may determine that a shadower may take control of the end-user's session. The shadowing tool  captures input from the shadower . In some embodiments, the shadowing tool  does not capture keyboard input from the shadower  but will capture mouse and keyboard events which will be injected into the data stream from the remote presentation layer protocol stack .","In step , the shadowing agent service  transmits the modified first data stream from the remote presentation layer protocol stack  containing data from the second data stream from the shadowing tool  to the remote presentation layer protocol stack  and the shadowing tool  for display. In some embodiments, the shadowing agent service  also records the controlled user session . In further embodiments, the shadowing agent service  records the controlled user session  using rollover, as described above, where the virtual channels of the remote presentation layer protocol stack  are reset and files are closed and created according to file size or durational thresholds.",{"@attributes":{"id":"p-0108","num":"0113"},"figref":"FIG. 3B","b":["350","230","120","105","110","230","105","230","110","105","110","105"]},"In step , a client  establishes a connection with the server . The server  establishes a user session  containing a remote presentation layer protocol stack .","In step , the shadowing agent service  executing on the server , receives and stores a first data stream from the remote presentation layer protocol stack . In some embodiments, prior to receiving and storing a data stream, the shadowing agent service communicates with the permission agent  to obtain permission from the client to record any data received from the presentation layer protocol stack . In some embodiments, the data stream is stored using rollover. Rollover resets the virtual channels of the remote presentation layer protocol stack , closes the file storing the data stream and creates a new file to continue recording the data stream. The files are closed and newly recreated when pre-determined durational or file-size thresholds are met or each time a shadower establishes a connection with the shadowing agent service. The specified duration may be pre-determined within the system  or by an administrator.","In step , a shadower  establishes a connection with the shadowing agent service  executing on the server .","In step , the shadowing agent service  receives a second data stream from the shadowing tool  executing on the shadower . If there are a plurality of shadowers , then the shadowing agent service  determines the shadower that controls the user session  and receives the data stream from the shadowing tool . The data received from the shadowing tool may comprise input events, such as from a mouse or keyboard.","In step , the shadowing agent service  injects the second data stream from the shadowing tool  executing on the shadower  into the remote presentation layer protocol stack . This step enables the shadower  to take control of the user session  of the client .","In step , the shadowing agent service transmits the recorded presentation layer protocol data stream and the real-time presentation layer protocol data stream to the shadowing tool . In some embodiments the recorded data stream is multiple files residing on the server or a separate storage device that has not yet been deleted as a result of rollover. In other embodiments, the recorded data stream is transmitted to a buffer of the shadowing tool. In other embodiments, the recorded data stream is transmitted to a buffer residing on the shadower. In some embodiments, the real-time presentation layer protocol data stream transmitted from the remote presentation layer protocol data stream is received by a buffer residing in the shadowing tool . In other embodiments, the data stream is received by a buffer residing outside of the shadowing tool on the shadower .","In step , the shadowing tool merges, concatenates, or otherwise joins the received recorded data stream and the received real-time data stream to create a single output stream.","In some embodiments, the recorded session data may be exported by the shadower  for later analysis. In other embodiments, the recorded session data may be saved by the shadower  for later analysis. In some embodiments the exported or saved recorded session data may be in their native recording format for playback. In other embodiments, the exported or saved recorded session data may be transcoded to other formats, allowing the shadower  to playback the data using a variety of tools. In further embodiments, the formats of the transcoded saved recorded session data may include, but are not limited to, AVI or MPEG.","In some embodiments, a user session is automatically shadowed when the user session  starts. This embodiment permits live monitoring of user activity without the need for manual intervention every time a session starts.","In other embodiments, user session activity is recorded along side a monitoring service. In an embodiment of a monitoring service, the monitoring service may include any type and form performance monitoring service. The performance monitoring service may include monitoring, measurement and\/or management software and\/or hardware, including data collection, aggregation, analysis, management and reporting. In one embodiment, the performance monitoring service includes one or more monitoring agents. The monitoring agent includes any software, hardware or combination thereof for performing monitoring, measurement and data collection activities on a device, such as a client, server or an appliance. In some embodiments, the monitoring agent includes any type and form of script, such as Visual Basic script, or Javascript. In one embodiment, the monitoring agent executes transparently to any application and\/or user of the device. In some embodiments, the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment, the monitoring agent is installed and operated without any instrumentation for the application or device.","In some embodiments, the monitoring agent monitors, measures and collects data on a predetermined frequency. In other embodiments, the monitoring agent monitors, measures and collects data based upon detection of any type and form of event. For example, the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example, the monitoring agent may collect data upon detection of any user input events, such as a mouse click. The monitoring agent may report or provide any monitored, measured or collected data to the monitoring service. In one embodiment, the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment, the monitoring agent transmits information to the monitoring service upon detection of an event.","In some embodiments, the monitoring service and\/or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element, such as a client, server, server farm, appliance, appliance, or network connection. In one embodiment, the monitoring service and\/or monitoring agent performs monitoring and performance measurement of any transport layer connection, such as a TCP or UDP connection. In another embodiment, the monitoring service and\/or monitoring agent monitors and measures network latency. In yet one embodiment, the monitoring service and\/or monitoring agent monitors and measures bandwidth utilization.","In other embodiments, the monitoring service and\/or monitoring agent monitors and measures end-user response times. In some embodiments, the monitoring service performs monitoring and performance measurement of an application. In another embodiment, the monitoring service and\/or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment, the monitoring service and\/or monitoring agent monitors and measures performance of a browser. In another embodiment, the monitoring service and\/or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments, the monitoring service and\/or monitoring agent monitors and measures performance of a Voice over IP (VoIP) application or session. In other embodiments, the monitoring service and\/or monitoring agent monitors and measures performance of a remote display protocol application, such as an ICA client or RDP client. In yet another embodiment, the monitoring service and\/or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment, the monitoring service and\/or monitoring agent monitors and measures performance of a hosted application or a Software-As-A-Service (SaaS) delivery model.","In some embodiments, the monitoring service and\/or monitoring agent performs monitoring and performance measurement of one or more transactions, requests or responses related to application. In other embodiments, the monitoring service and\/or monitoring agent monitors and measures any portion of an application layer stack, such as any .NET or J2EE calls. In one embodiment, the monitoring service and\/or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment, the monitoring service and\/or monitoring agent monitors and measures any method, function or application programming interface (API) call.","In one embodiment, the monitoring service and\/or monitoring agent performs monitoring and performance measurement of a delivery of application and\/or data from a server to a client via one or more appliances, such as appliance and\/or appliance. In some embodiments, the monitoring service and\/or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments, the monitoring service and\/or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment, the monitoring service and\/or monitoring agent monitors and measures performance of delivery of a desktop application to a client and\/or the execution of the desktop application on the client. In another embodiment, the monitoring service and\/or monitoring agent monitors and measures performance of a client\/server application.","In one embodiment, the monitoring service and\/or monitoring agent is designed and constructed to provide application performance management for the application delivery system. For example, the monitoring service and\/or monitoring agent may monitor, measure and manage the performance of the delivery of applications via the Citrix XenApp. In this example, the monitoring service and\/or monitoring agent monitors individual ICA sessions. The monitoring service and\/or monitoring agent may measure the total and per session system resource usage, as well as application and networking performance. The monitoring service and\/or monitoring agent may identify the active servers for a given user and\/or user session. In some embodiments, the monitoring service and\/or monitoring agent monitors back-end connections between the application delivery system and an application and\/or database server. The monitoring service and\/or monitoring agent may measure network latency, delay and volume per user-session or ICA session.","In some embodiments, the monitoring service and\/or monitoring agent measures and monitors memory usage for the application delivery system, such as total memory usage, per user session and\/or per process. In other embodiments, the monitoring service and\/or monitoring agent measures and monitors CPU usage the application delivery system, such as total CPU usage, per user session and\/or per process. In another embodiments, the monitoring service and\/or monitoring agent measures and monitors the time required to log-in to an application, a server, or the application delivery system, such as Citrix Presentation Server. In one embodiment, the monitoring service and\/or monitoring agent measures and monitors the duration a user is logged into an application, a server, or the application delivery system. In some embodiments, the monitoring service and\/or monitoring agent measures and monitors active and inactive session counts for an application, server or application delivery system session. In yet another embodiment, the monitoring service and\/or monitoring agent measures and monitors user session latency.","In yet further embodiments, the monitoring service and\/or monitoring agent measures and monitors measures and monitors any type and form of server metrics. In one embodiment, the monitoring service and\/or monitoring agent measures and monitors metrics related to system memory, CPU usage, and disk storage. In another embodiment, the monitoring service and\/or monitoring agent measures and monitors metrics related to page faults, such as page faults per second. In other embodiments, the monitoring service and\/or monitoring agent measures and monitors round-trip time metrics. In yet another embodiment, the monitoring service and\/or monitoring agent measures and monitors metrics related to application crashes, errors and\/or hangs.","In some embodiments, the monitoring service includes performance counters are used to determine causes of response problems. In some embodiments, a monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. In another embodiment, the performance monitoring service and\/or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto, Calif. In one embodiment, the performance monitoring service and\/or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco, Calif. In other embodiments, the performance monitoring service and\/or monitoring agent includes any portion of the business service management products, such as the BMC Performance Manager and Patrol products, manufactured by BMC Software, Inc. of Houston, Tex."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The foregoing and other objects, aspects, features, and advantages of the present invention will become more apparent and better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0027","num":"0032"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0028","num":"0033"},"figref":"FIGS. 1B and 1C"},{"@attributes":{"id":"p-0029","num":"0034"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0030","num":"0035"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0031","num":"0036"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0032","num":"0037"},"figref":"FIG. 2D"},{"@attributes":{"id":"p-0033","num":"0038"},"figref":"FIG. 2E"},{"@attributes":{"id":"p-0034","num":"0039"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0035","num":"0040"},"figref":"FIG. 3B"}]},"DETDESC":[{},{}]}
