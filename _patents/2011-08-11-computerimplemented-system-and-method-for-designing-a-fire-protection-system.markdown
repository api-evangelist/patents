---
title: Computer-implemented system and method for designing a fire protection system
abstract: A computer-implemented system for designing a fire protection and/or piping system comprising a personal computer for loading programs into dynamic memory and storing data on a static memory device, means for providing user input, and program files comprising a process algorithm, traversing algorithm, and tagging algorithm. The process algorithm performs data validation, error checking and error resolution, saves data to a start point inserted by a user, pulls layer details into programming variables, applies processing logic to the system, and comprises a main pipes algorithm and a branch resizing algorithm. The traversing algorithm travels the system and presents objects to the process, main pipes and branch resizing algorithms in a logical order. The tagging algorithm attaches to each pipe in the system a tag with property set data pulled into and displayed in the tag. A method of using the foregoing system to design a fire protection and/or piping system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08874413&OS=08874413&RS=08874413
owner: Rael Automatic Sprinkler Company, Inc.
number: 08874413
owner_city: Lynbrook
owner_country: US
publication_date: 20110811
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF INVENTION","A. Overview","B. Figures"],"p":["This application claims priority back to U.S. Patent Application No. 61\/502,857 filed on Jun. 29, 2011, the contents of which are incorporated herein by reference.","1. Field of the Invention","The present invention relates generally to the field of software programs, and more specifically, to a computer-implemented system that interfaces with AUTOCAD\u00ae software to design fire protection systems for commercial buildings.","2. Description of the Related Art","As a mechanical subcontractor, Rael Automatic Sprinkler Company, Inc. (\u201cRael\u201d) of Lynbrook, N.Y., has been undertaking projects to design and implement fire protection systems for major construction projects in and around New York since 1963. During the company's initial days, designs were generated manually using traditional drawing methods. Typically, designs were drafted manually on drawing sheets, and the final list of materials was also prepared manually.","Over the course of the ensuing decades, as computer systems came into use, computer-aided design and drafting (\u201cCADD\u201d) become popular in the mechanical construction field. Around this time, Rael began using CADD tools like AUTOCAD\u00ae owned by Autodesk, Inc. (\u201cAutodesk\u201d) of Sausalito, Calif., to draft its fire protection system designs. Although computer-assisted drafting was initially two-dimensional, Rael adopted three-dimensional CADD methods when Autodesk introduced its AUTOCAD\u00ae mechanical, electrical and plumbing (\u201cMEP\u201d) software product.","Even though Rael was using state-of-the-art CADD software from an industry leader, some portions of the design process were still inordinately time-consuming. For example, it was taking a lot of time for the draftsmen to list out the materials. All of the materials were counted manually from the finished drawing, the list was sent to shops for fabrication, and the list was sent\u2014together with the fabricated pipe and materials\u2014to the worksites for implementation (construction) of the design. To identify each piece in the system, it was necessary to tag each piece during the drafting and listing process. The fabricated pieces were later marked with the same tags for easy identification in the field. This tagging process was manual, required significant time, and was prone to human error.","To overcome the limitations described above, Rael decided to develop its own software program that would function as an add-on tool to AUTOCAD\u00ae MEP. The AUTOCAD\u00ae software provides an application program interface (\u201cAPI\u201d) for customization of the AUTOCAD\u00ae software, and Rael used this API to develop the present invention.","One object of the present invention is to provide a three-dimensional CADD software program for piping systems that is capable of building information modeling (\u201cbim\u201d). It is a further object of the present invention to provide software that can be used from the earliest design stages through fabrication and installation drawings. Yet another object of the present invention is to reduce drafting hours by providing a software program that makes low-level design decisions automatically.","The present invention is a computer-implemented system for designing a fire protection system comprising: a personal computer for loading programs into dynamic memory and storing data on a static memory device; means for providing user input; and program files comprising a process algorithm, a traversing algorithm, and a tagging algorithm; wherein the process algorithm performs data validation, error checking and error resolution, saves data to a start point inserted by a user, pulls layer details into programming variables, applies processing logic to the system, and comprises a main pipes algorithm and a branch resizing algorithm; wherein the traversing algorithm supports the process algorithm, the main pipes algorithm, the branch resizing algorithm, and the tagging algorithm by traveling the system and presenting objects to each of these algorithms in a logical order; and wherein the tagging algorithm attaches to each pipe in the system a tag with property set data pulled into and displayed in the tag.","In a preferred embodiment, the system comprises an output device for generating hard copies of drawings and fabrication lists. In a preferred embodiment, the main pipes algorithm breaks main pipes at cut lengths specified by the user, rotates main pipes in a model space, and inserts couplings to the main pipes that have been broken at the specified cut lengths. In yet another preferred embodiment, the traversing algorithm presents a current object to the branch resizing algorithm, and the branch resizing algorithm determines whether the current object is a branching object, creates and stores path relation collections for branching objects, updates a head count when a sprinkler head is found on a run of the current object, stores a root connector for the current object in a root connectors list, loops through the root connectors list and applies the head count that is found for each root connector to all objects in a run that are attached to an incoming connector, and loops through each branch line and automatically resizes branch pipes and replaces fittings according to sizing specifications provided by the user.","In a preferred embodiment, the path relation collection for a current object comprises a parent object ID for the incoming connector, a connector number, a head count, and path relationships including branching objects upstream of the current object. In a preferred embodiment, the user inserts a parent start point on a main pipe, and the system stores fabrication parameters in the parent start point. In yet another preferred embodiment, the fabrication parameters include start point ID, job number, job name, level, description of project, ship date, list date, and system type.","In a preferred embodiment, the fabrication parameters include a branch resizing schedule, and the branch resizing schedule is used by a branch resizing algorithm to resize branch pipes and replace fittings. In a preferred embodiment, the traversing algorithm begins at the parent start point inserted by the user. In yet another preferred embodiment, the system allows the user to insert a child start point in each of one or more separate piping systems, the system groups the child start points together to connect separate piping systems for fabrication purposes, and the traversing algorithm traverses from the parent start point and from all child start points in all of the connected piping systems.","In a preferred embodiment, property set data is attached to objects in the system, and the property set data comprises custom property set definitions. In a preferred embodiment, the tagging algorithm validates start point data, identifies orphaned tags, obtains parent layer details for the tags, and dynamically creates child tag layers. In yet another preferred embodiment, the tagging algorithm creates and maintains a tag index that is attached to every tag and incremented by one each time the system is tagged.","In a preferred embodiment, the tag index for all tags in the system is stored in the parent start point. In a preferred embodiment, the tagging algorithm creates a tag dynamically by cloning a required property set from a drawing template, attaching the cloned property set to an object, cloning an mvblock for the tag in the drawing template, modifying the cloned mvblock to match the required property sets, and anchoring the tag to the object. In yet another preferred embodiment, the tagging algorithm groups branch pipes into branch lines and numbers both mains and branch lines.","In a preferred embodiment, tags in a given layer are shown or not shown based on parent layers specified by the user. In a preferred embodiment, tag components in a given layer are shown or not shown based on child layers created automatically by the system. In yet another preferred embodiment, the system further comprises a head annotation utility that automatically adds block symbols to installation drawings. Preferably, the system allows the user to switch block symbols assigned to a multi-view part sprinkler head from standard to below and from below to standard.","The present invention is also a computer-implemented method for designing a fire protection system comprising: providing a personal computer for loading programs into dynamic memory and storing data on a static memory device; providing means for providing user input; and installing on the personal computer program files comprising a process algorithm, a traversing algorithm, and a tagging algorithm; wherein the process algorithm performs data validation, error checking and error resolution, saves data to a start point inserted by a user, pulls layer details into programming variables, applies processing logic to the system, and comprises a main pipes algorithm and a branch resizing algorithm; wherein the traversing algorithm supports the process algorithm, the main pipes algorithm, the branch resizing algorithm, and the tagging algorithm by traveling the system and presenting objects to each of these algorithms in a logical order; and wherein the tagging algorithm attaches to each pipe in the system a tag with property set data pulled into and displayed in the tag.","In a preferred embodiment, the method further comprises providing an output device for generating hard copies of drawings and fabrication lists. In a preferred embodiment, the main pipes algorithm breaks main pipes at cut lengths specified by the user, rotates main pipes in a model space, and inserts couplings to the main pipes that have been broken at the specified cut lengths. In yet another preferred embodiment, the traversing algorithm presents a current object to the branch resizing algorithm, and the branch resizing algorithm determines whether the current object is a branching object, creates and stores path relation collections for branching objects, updates a head count when a sprinkler head is found on a run of the current object, stores a root connector for the current object in a root connectors list, loops through the root connectors list and applies the head count that is found for each root connector to all objects in a run that are attached to an incoming connector, and loops through each branch line and automatically resizes branch pipes and replaces fittings according to sizing specifications provided by the user.","In a preferred embodiment, the path relation collection for a current object comprises a parent object ID for the incoming connector, a connector number, a head count, and path relationships including branching objects upstream of the current object. In a preferred embodiment, the method further comprises allowing the user to insert a parent start point on a main pipe and storing fabrication parameters in the parent start point. In yet another preferred embodiment, the fabrication parameters include start point ID, job number, job name, level, description of project, ship date, list date, and system type.","In a preferred embodiment, the fabrication parameters include a branch resizing schedule, and the branch resizing schedule is used by a branch resizing algorithm to resize branch pipes and replace fittings. In a preferred embodiment, the traversing algorithm begins at the parent start point inserted by the user. In yet another preferred embodiment, the method further comprises allowing the user to insert a child start point in each of one or more separate piping systems and grouping the child start points together to connect separate piping systems for fabrication purposes, and the traversing algorithm traverses from the parent start point and from all child start points in all of the connected piping systems.","In a preferred embodiment, the method further comprises attaching to objects property set data comprising custom property set definitions. In a preferred embodiment, the tagging algorithm validates start point data, identifies orphaned tags, obtains parent layer details for the tags, and dynamically creates child tag layers. In yet another preferred embodiment, the tagging algorithm creates and maintains a tag index that is attached to every tag and incremented by one each time the system is tagged.","In a preferred embodiment, the tag index for all tags is stored in the parent start point. In a preferred embodiment, the tagging algorithm creates a tag dynamically by cloning a required property set from a drawing template, attaching the cloned property set to an object, cloning an mvblock for the tag in the drawing template, modifying the cloned mvblock to match the required property sets, and anchoring the tag to the object. In yet another preferred embodiment, the tagging algorithm groups branch pipes into branch lines and numbers both mains and branch lines.","In a preferred embodiment, tags in a given layer are shown or not shown based on parent layers specified by the user. In a preferred embodiment, tag components in a given layer are shown or not shown based on automatically created child layers. In yet another preferred embodiment, the method further comprises providing a head annotation utility that automatically adds block symbols to installation drawings. Preferably, the method further comprises allowing the user to switch block symbols assigned to a multi-view part sprinkler head from standard to below and from below to standard.","The present invention is also a computer-implemented system for designing a piping system comprising: a personal computer for loading programs into dynamic memory and storing data on a static memory device; means for providing user input; and program files comprising a process algorithm, a traversing algorithm, and a tagging algorithm; wherein the process algorithm performs data validation, error checking and error resolution, saves data to a start point inserted by a user, pulls layer details into programming variables, applies processing logic to the system, and comprises a main pipes algorithm and a branch resizing algorithm; wherein the traversing algorithm supports the process algorithm, the main pipes algorithm, the branch resizing algorithm, and the tagging algorithm by traveling the system and presenting objects to each of these algorithms in a logical order; and wherein the tagging algorithm attaches to each pipe in the system a tag with property set data pulled into and displayed in the tag.","In a preferred embodiment, the system further comprises an output device for generating hard copies of drawings and fabrication lists. In a preferred embodiment, the main pipes algorithm breaks main pipes at cut lengths specified by the user, rotates main pipes in a model space, and inserts couplings to the main pipes that have been broken at the specified cut lengths. In yet another preferred embodiment, the traversing algorithm presents a current object to the branch resizing algorithm, and the branch resizing algorithm determines whether the current object is a branching object, creates and stores path relation collections for branching objects, updates a head count when a sprinkler head is found on a run of the current object, stores a root connector for the current object in a root connectors list, loops through the root connectors list and applies the head count that is found for each root connector to all objects in a run that are attached to an incoming connector, and loops through each branch line and automatically resizes branch pipes and replaces fittings according to sizing specifications provided by the user.","In a preferred embodiment, the path relation collection for a current object comprises a parent object ID for the incoming connector, a connector number, a head count, and path relationships including branching objects upstream of the current object. In a preferred embodiment, the user inserts a parent start point on a main pipe, and the system stores fabrication parameters in the parent start point. In yet another preferred embodiment, the fabrication parameters include start point ID, job number, job name, level, description of project, ship date, list date, and system type.","In a preferred embodiment, the fabrication parameters include a branch resizing schedule, and the branch resizing schedule is used by a branch resizing algorithm to resize branch pipes and replace fittings. In a preferred embodiment, the traversing algorithm begins at the parent start point inserted by the user. In yet another preferred embodiment, the system allows the user to insert a child start point in each of one or more separate piping systems, the system groups the child start points together to connect separate piping systems for fabrication purposes, and the traversing algorithm traverses from the parent start point and from all child start points in all of the connected piping systems.","In a preferred embodiment, property set data is attached to objects in the system, and the property set data comprises custom property set definitions. In a preferred embodiment, the tagging algorithm validates start point data, identifies orphaned tags, obtains parent layer details for the tags, and dynamically creates child tag layers. In yet another preferred embodiment, the tagging algorithm creates and maintains a tag index that is attached to every tag and incremented by one each time the system is tagged.","In a preferred embodiment, the tag index for all tags in the system is stored in the parent start point. In a preferred embodiment, the tagging algorithm creates a tag dynamically by cloning a required property set from a drawing template, attaching the cloned property set to an object, cloning an mvblock for the tag in the drawing template, modifying the cloned mvblock to match the required property sets, and anchoring the tag to the object. In yet another preferred embodiment, the tagging algorithm groups branch pipes into branch lines and numbers both mains and branch lines.","In a preferred embodiment, tags in a given layer are shown or not shown based on parent layers specified by the user. In a preferred embodiment, tag components in a given layer are shown or not shown based on child layers created automatically by the system. In yet another preferred embodiment, the system further comprises a head annotation utility that automatically adds block symbols to installation drawings. Preferably, the system allows the user to switch block symbols assigned to a multi-view part sprinkler head from standard to below and from below to standard.","The present invention is also a computer-implemented method for designing a piping system comprising: providing a personal computer for loading programs into dynamic memory and storing data on a static memory device; providing means for providing user input; and installing on the personal computer program files comprising a process algorithm, a traversing algorithm, and a tagging algorithm; wherein the process algorithm performs data validation, error checking and error resolution, saves data to a start point inserted by a user, pulls layer details into programming variables, applies processing logic to the system, and comprises a main pipes algorithm and a branch resizing algorithm; wherein the traversing algorithm supports the process algorithm, the main pipes algorithm, the branch resizing algorithm, and the tagging algorithm by traveling the system and presenting objects to each of these algorithms in a logical order; and wherein the tagging algorithm attaches to each pipe in the system a tag with property set data pulled into and displayed in the tag.","In a preferred embodiment, the method further comprises providing an output device for generating hard copies of drawings and fabrication lists. In a preferred embodiment, the main pipes algorithm breaks main pipes at cut lengths specified by the user, rotates main pipes in a model space, and inserts couplings to the main pipes that have been broken at the specified cut lengths. In yet another preferred embodiment, the traversing algorithm presents a current object to the branch resizing algorithm, and the branch resizing algorithm determines whether the current object is a branching object, creates and stores path relation collections for branching objects, updates a head count when a sprinkler head is found on a run of the current object, stores a root connector for the current object in a root connectors list, loops through the root connectors list and applies the head count that is found for each root connector to all objects in a run that are attached to an incoming connector, and loops through each branch line and automatically resizes branch pipes and replaces fittings according to sizing specifications provided by the user.","In a preferred embodiment, the path relation collection for a current object comprises a parent object ID for the incoming connector, a connector number, a head count, and path relationships including branching objects upstream of the current object. In a preferred embodiment, the method further comprises allowing the user to insert a parent start point on a main pipe and storing fabrication parameters in the parent start point. In yet another preferred embodiment, the fabrication parameters include start point ID, job number, job name, level, description of project, ship date, list date, and system type.","In a preferred embodiment, the fabrication parameters include a branch resizing schedule, and the branch resizing schedule is used by a branch resizing algorithm to resize branch pipes and replace fittings. In a preferred embodiment, the traversing algorithm begins at the parent start point inserted by the user. In yet another preferred embodiment, the method further comprises allowing the user to insert a child start point in each of one or more separate piping systems and grouping the child start points together to connect separate piping systems for fabrication purposes, and the traversing algorithm traverses from the parent start point and from all child start points in all of the connected piping systems.","In a preferred embodiment, the method further comprises attaching to objects property set data comprising custom property set definitions. In a preferred embodiment, the tagging algorithm validates start point data, identifies orphaned tags, obtains parent layer details for the tags, and dynamically creates child tag layers. In yet another preferred embodiment, the tagging algorithm creates and maintains a tag index that is attached to every tag and incremented by one each time the system is tagged.","In a preferred embodiment, the tag index for all tags is stored in the parent start point. In a preferred embodiment, the tagging algorithm creates a tag dynamically by cloning a required property set from a drawing template, attaching the cloned property set to an object, cloning an mvblock for the tag in the drawing template, modifying the cloned mvblock to match the required property sets, and anchoring the tag to the object. In yet another preferred embodiment, the tagging algorithm groups branch pipes into branch lines and numbers both mains and branch lines.","In a preferred embodiment, tags in a given layer are shown or not shown based on parent layers specified by the user. In a preferred embodiment, tag components in a given layer are shown or not shown based on automatically created child layers. In yet another preferred embodiment, the method further comprises providing a head annotation utility that automatically adds block symbols to installation drawings. Preferably, the method further comprises allowing the user to switch block symbols assigned to a multi-view part sprinkler head from standard to below and from below to standard.","As the construction industry evolves, so will the tools that are used to aid in the design, fabrication and installation of mechanical piping systems. In the United States, Autodesk's CADD software is the dominant product used in the construction industry. Specifically, Autodesk's AUTOCAD\u00ae MEP CADD software is designed to meet the needs of the mechanical trades. Autodesk's AUTOCAD\u00ae MEP software includes the following mechanical disciplines: heating, ventilation and air conditioning; piping; electrical; and plumbing. The AUTOCAD\u00ae MEP software creates a generic foundation for these disciplines.","Although the AUTOCAD\u00ae MEP software provides an excellent foundation, the design environment it provides is very generic. This default environment is suitable for the type of basic design that is performed primarily by mechanical engineering firms, that is, piping systems that convey the design intent but are not intended to result in fabricated materials or installation drawings. For mechanical contractors (such as Rael), a more robust implementation of the AUTOCAD\u00ae MEP software is needed. This more robust implementation must be capable of taking the piping design from the early design stages through the fabrication and installation processes, as noted above.","By design the AUTOCAD\u00ae MEP software is highly customizable and automatable. The user interface of the AUTOCAD\u00ae MEP software can be customized by creating profiles, workspaces, menus, drawing templates, tool palettes, property sets, tags, part catalogs and additional constructs of the software environment. The AUTOCAD\u00ae MEP software can be automated via the built-in API, which exposes the AUTOCAD\u00ae MEP classes to allow other software applications (including the present invention) to control the AUTOCAD\u00ae MEP environment.","The PYROCAD\u2122 software is a tightly integrated extension of the AUTOCAD\u00ae MEP software environment. This integration is achieved in two ways\u2014first, by customizing the AUTOCAD\u00ae MEP software environment from the generic to the specific, and second, by providing new automated functionality via the built-in API. It is with this customization and automation that the present invention uniquely advances the art of computer-aided piping design.","Regarding customization, PYROCAD\u2122 offers a specific piping design environment through custom tools and a user interface that aid in the assembly of a library of parts created specifically for this invention. When piping systems are designed in PYROCAD\u2122 from the earliest design stages to final fabrication, the three-dimensional piping model always represents specific parts from specific manufacturers of accurate size in three-dimensional space. As such, the three-dimensional piping model generated by the present invention is a WYSIWYG (what-you-see-is-what-you-get) model.","The importance of this approach needs to be considered in light of the recent changes in the construction industry. With the adoption of building information modeling (BIM) methods by owners and construction management companies, piping systems need to be always available for integration into an overall composite model. This composite model is an integration of all of the construction disciplines, for example, steel, concrete, architectural walls, piping systems, heating and ventilation systems, and electrical systems. The composite model is a cost-saving tool used by owners and construction management companies to find and eliminate problems in a virtual model prior to the construction process. With the present invention, information is derived from the model and not vice versa, which means that information needed for fabrication, annotation and coordination with other disciplines is inherent and maintained within the model.","Regarding automation, the foundational component provided by the present invention is the traversing algorithm. The function of the traversing algorithm is to travel through the three-dimensional piping model at run time, originating from the defined start point and continuing out along all possible paths of the piping model, and make available to other functions within the application individual pieces of the piping model in a logical order. These possible paths include both looping and branching configurations within the same piping system. A spider's web by comparison is a good example of a looping configuration because there are many paths that loop back upon themselves. A tree branch by comparison is a good example of a branching configuration because, starting at the base, there are many branching paths until the final end of the branch is reached.","The traversing algorithm of the present invention relies exclusively on the AUTOCAD\u00ae MEP object connectors. The AUTOCAD\u00ae MEP connectors can be thought of like snaps that hold the pipes, fittings and multi-view parts together. These connectors can be used to travel (or \u201ctraverse\u201d) from one object to another. It is the combination of this traversing algorithm and the AUTOCAD\u00ae MEP connectors that create the unique advantages found only in this invention. Specifically, the traversing allows PYROCAD\u2122 to automate formerly manual tasks, such as error detection, segmenting, resizing, grouping and tagging for fabrication, and reporting and summarization of materials. The result of this automation is a tremendous savings in drafting time, which provides a competitive advantage over other piping software available.","In sum, PYROCAD\u2122 is a solution to a long-felt but unsolved need in the piping industry for an automated solution that allows designers of piping systems to build those systems precisely and efficiently. PYROCAD\u2122 builds on the industry standard Autodesk product AUTOCAD\u00ae MEP, and it allows for a BIM-compatible design process. PYROCAD increases profits by saving drafting hours with a more efficient design environment, and it results in a higher quality design through the WYSIWYG model. Finally, it creates drawings with unique characteristics that aid in expediting the installation process.","The present invention is described more fully below in connection with the figures. As used herein, the term \u201cPYROCAD\u201d refers to the present invention. From this point forward, for clarity of reading, the \u201c\u2122\u201d designation will not be used with the term PYROCAD; however, the PYROCAD name is a trademark owned by Rael. For ease of reference, reference numbers used herein shall refer to both the figure number and the reference number; for example, reference number  on  is referred to as ., reference number  on  is referred to as ., etc.","As noted above, the present invention has been designed to allow mechanical contractors to more effectively design, coordinate, fabricate and install piping systems. The subsequent discussion will walk the user through the PYROCAD application as it is used to create a piping system from inception to the final installation drawing and fabrication reports.","To get started, the user launches the PYROCAD application with the desktop icon () as a standard Microsoft WINDOWS\u00ae application. The AUTOCAD\u00ae MEP would be installed as a prerequisite. It is important to note that PYROCAD does not overwrite the toolbars, menus and palettes of the AUTOCAD\u00ae MEP install, unlike most third party applications developed for AUTOCAD\u00ae products. Although overwriting the toolbars, menus and palettes is the most expedient way to create a custom interface, it is not the best way. The entire integration of PYROCAD into the AUTOCAD\u00ae MEP environment is done with a parallel approach. PYROCAD is loaded with a partial menu ., its own tool palette group ., and its own tab on the ribbon ..","Although it is more complicated to implement in the development process, this design approach is preferred because it allows for an easier upgrade path and a better user experience. Autodesk releases an upgrade to its AUTOCAD\u00ae MEP product on a yearly basis. These updates typically add new features that result in changes to the toolbars, menus and palettes. If the third party application is designed to overwrite the toolbars, menus and palettes, then the new features that were added by the latest version of AUTOCAD\u00ae MEP get overwritten, and the user is unaware of them. Thus, the user will suffer a loss of features. The parallel install approach taken by PYROCAD avoids this loss of features.","After launching the PYROCAD application, the user is presented with an AUTOCAD\u00ae MEP environment with the PYROCAD application installed parallel. By default a blank drawing is loaded; this blank drawing originates from the pyrocad 2011.dwt template file .. In a preferred embodiment, this file is the default template file for the current AUTOCAD\u00ae MEP version copied, renamed and supplemented with any additional requirements and settings needed by PYROCAD.","To draw the piping system, a fire protection system architectural plan is needed for a background. Typically, the architectural drawings for a project are provided to the mechanical contractor in an AUTOCAD\u00ae-compatible file format. If this is not the case, then the architectural plan can be designed using the tools provide by AUTOCAD\u00ae MEP. In , the drawing has a rudimentary building structure with four walls and one door. The drawing area is divided into two views; on the left is the top view, and on the right is an isometric view. The need for multiple views is now common practice when working in three-dimensional space and will be used throughout the overview and explanation of the figures.","As noted above, the purpose of the present invention is to design a piping system for fire protection. The examples discussed below and shown in the figures are provided for purposes of illustrating the structure and functionality of the present invention but are not intended to limit the present invention to any particular configuration of the fire protection system. A typical fire protection system is comprised of the following components: pipes, fittings and fire sprinkler heads. The pipe finish is either unfinished steel (referred to as \u201cblack\u201d) or hot dip galvanized steel (referred to as \u201cgalvanized\u201d). The pipes come in different wall thicknesses (commonly referred to as the \u201cpipe schedule\u201d). Common pipe schedules are 10, 40 and 80. (The term \u201cpipe schedule\u201d is a term commonly used in the industry to indicate the thickness of pipe.) The pipes may have different end finishes, such as threaded, grooved or flanged.","Fittings are either unfinished or painted cast iron (both of which are referred to as \u201cblack\u201d) or hot dip galvanized cast iron (referred to as \u201cgalvanized\u201d). Fittings come from many different manufacturers and come in numerous different models. Fittings also come with different end finishes, such as threaded, grooved or flanged, to allow them to connect to pipes. Fittings come in different types, such as elbows, tees, cross tees, couplings and takeoffs, as shown in .","Fire sprinkler heads come from many different manufacturers and come in numerous different models and types. One type of fire sprinkler head is an upright typically used in spaces without ceilings with the head deflector in the up position. The deflector is the portion of the head against which the water sprays to be dispersed into the smaller water droplets. Another type of fire sprinkler head is a pendent typically used in spaces without ceilings with the head deflector in the down position. Another type of fire sprinkler head is a concealer typically used in spaces with ceilings and aesthetic requirements with the head deflector in the down position. Fire sprinkler heads come in different finishes, such as chrome, brass and painted. They also come in different temperature settings, which determine when the sprinkler head opens. Fire sprinkler heads also come with different diameters for the threaded connection used to attach them to the piping system.","Having obtained or drawn the architectural plan, the user next inserts the fire sprinkler heads he will need to design the fire protection system. In this example, the user inserts an upright fire sprinkler head and copies it into three rows and four columns, filling the footprint of the room (). The user then places the fire sprinkler heads onto the rael-heads layer A.. Layers are a construct of the AUTOCAD\u00ae software used to group objects together, assign properties and control behavior. Layers control visibility on the screen, line thickness, line type and color when plotting. In a preferred embodiment, there are seven layers within each piping system: arm over layer, elevation layer, base tag layer, main layer, branch layer, head layer and cross connect layer. (These layer names are provided by way of illustration, but the present invention is not limited to any particular layer names.) Note that there may be more than one piping system in the model space at one time. The purpose and function of these layers is described more fully below.","The terms main, branch, cross connect and arm over are used in the fire protection industry as terms to categorize the pipes that make up the fire protection system. The main pipe is the relatively large diameter pipe (relative to the other pipes) that is connected to the water source and that supplies the smaller diameter branch pipes, which in turn supplying water to the fire sprinkler heads. The branch pipes are connected to each other and originate from one connection point on the main. The cross connect is a connection of two main pipes with a group of smaller diameter pipes. The arm over is the last few pieces of the branch line as it connects to the fire sprinkler head, as shown in . The arm over pieces are placed on their own layer (named rael-arm in this example).","Arm overs are used when there is an installation requirement with a very small tolerance; they are most often used with concealer type fire sprinkler heads. For example, if an owner wanted the fire sprinkler head to be no greater than plus or minus one half inch from the center of the ceiling tile, arm overs would be used. The arm over pieces would not be fabricated, shipped or installed during the initial installation of the fire protection system because the exact location of the center of the ceiling tiles cannot be determined at the time of the initial installation; however, as the ceiling is installed, the arm over is assembled by field personnel to locate the fire sprinkler head in the center of the tile within the desired tolerance.","Once the fire sprinkler heads have been inserted, they need to be connected together with branch piping. To do this, the user would go to the py_pipe tool palette shown in  and select pipe with the desired characteristics for the branch piping.  shows the first piece of branch piping added to the drawing. All branch piping is initially drawn as 1\u2033 diameter and later resized and replaces by the PYROCAD automation. All branch pipes will be placed on their own layer (named rael-branch in this example).","In , the user adds a main pipe using the same technique described for the branch piping. All main pipes are placed on their own layer (named rael-main in this example). The user then adds a takeoff fitting to the main B. to allow the smaller diameter branch pipe to connect into the main. The branch line is then copied by the user three times to connect the rest of the fire sprinkler heads to the main pipe shown in .","To demonstrate the function of the arm over, a vestibule with a two-foot by four-foot tile ceiling has been added by the user in the southwest corner of the building (see ). In , the branch piping has been added by the user, and the two concealer heads have been connected back to the main pipe by the user.  is an enlarged view of an arm over used to connect the concealer type fire sprinkler heads to the branch piping.","In , a few pieces of ductwork have been added by the user for the heating and air conditioning of the space.  also shows two pendent type fire protection heads added below the ductwork that have been connected with branch piping back to the main pipe. At this point, the user runs the PYROCAD head annotation utility to add the block symbol (). The block symbols are used on the installation drawings to inform the field personnel as to what type of fire sprinkler head to install at each location. The block symbol refers to a legend on the installation drawing, which lists all of the fire sprinkler head characteristics by block symbol.  shows a fire sprinkler head with the block symbol attached. In , additional main pipes have been added by the user to create a looped main. In , the user turned the northern most branch line into a cross connect by connecting the east end back into a main pipe .; the pipes making up this cross connect are then placed on their own layer (named rael-cross connect in this example).","With these steps completed, the design work has been finished; however, the user must add a start point at the open end of the main shown in  before fabrication can begin. The start point is an AUTOCAD\u00ae MEP object created for PYROCAD to indicate where the piping system starts fabrication and to store information about fabrication parameters (discussed below). The start point can be thought of as the water supply point.","In a preferred embodiment, the present invention generates two items for use by the mechanical contractor in installing the pipe system in building. The first item is the fabrication reports, which include pipes, fittings, fire sprinkler heads and other miscellaneous material (for example, the types of parts shown in ). The fabrication reports are used by the fabrication personnel to manufacture the piping system from the raw materials. The important part is that all pipes get specific labeling (or \u201ctags\u201d) generated by PYROCAD that makes each pipe unique. This information is then applied by the fabrication personnel either with a sticker or paint to each pipe. The tags that are not applied to pipes are used for informational purposes during the install.","The second item generated by the present invention and used by the mechanical contractor is the installation drawings. The installation drawings show the piping system with each piece of pipe tagged (via the tagging algorithm, described more fully below). To create the installation drawings, the user starts with the labeled piping system (each label or \u201ctag\u201d being unique to a particular piece of pipe within the piping system) and then takes additional steps, including positioning the unique labels (or \u201ctags\u201d) on the pipes, and annotating the piping system with dimensions, elevations and notes. The user would also take steps in the AUTOCAD\u00ae \u201cpaper space\u201d (as opposed to the \u201cmodel space\u201d) that are not discussed here. Field personnel use the installation drawings to assemble and build the fire protection system that is designed in PYROCAD.","As used herein, the term \u201cfabrication process\u201d incorporates the following five algorithms of this invention: the process algorithm (), the main pipes algorithm (), the traversing algorithm (), the branch resizing algorithm (), and the tagging algorithm (). Although each of these algorithms is discussed more fully below, a brief description is provided here. The main pipes and branch resizing algorithms are both encompassed within the process algorithm. The process algorithm performs a number of functions, including, but not limited to, data validation, error checking and resolution, saving data to the start point inserted by the user, pulling layer details into programming variables, and applying processing logic to the system. The traversing algorithm supports the process algorithm, the branch resizing algorithm, and the tagging algorithm by traveling (or \u201ctraversing\u201d) the system and presenting objects to each of these algorithms in a logical order. The tagging algorithm attaches to each pipe in the system, and to other points within the system, a \u201ctag\u201d (which is a multi-view block) with the property set data (defined below) pulled into and displayed in the tag.","The fabrication process is controlled by the user through the PYROCAD application form (). To launch the PYROCAD application form, the user clicks the icon on the toolbar or types py at the command line (). The user is then prompted to insert or select a start point. The start point that was placed on the end of the main is selected ().",{"@attributes":{"id":"p-0214","num":"0213"},"figref":["FIG. 56","FIG. 57"]},"The PYROCAD application form holds the user input parameters for the fabrication process stored in the various text boxes and drop-down list boxes shown in . There are a number of fields that are related to layers, specifically, ., ., ., ., ., . and .. PYROCAD has implemented a unique approach to utilizing layers that makes this invention more flexible and powerful than prior art applications. In PYROCAD, the layer name chosen by the user is matched to the type of component it represents in the piping system. For example, in . there is a field labeled Main Layer and a select button adjacent to the right. The user presses the select button and picks a piece of main pipe in the drawing. In this example, the selected pipe is on the rael-main layer. The user specifies the layer in field .. The present invention applies certain logic to each layer, as discussed more fully below in connection with , , A and A. In PYROCAD there are seven fields (., ., ., ., ., . and .) that need to be matched with layer names. The assignment of layers to specific constructs of the piping system guides PYROCAD's interpretation of the piping system during the fabrication process.","As used herein, the term \u201cfabrication parameters\u201d means the data entered by the user into the PYROCAD application form. Once the fabrication parameters have been filled out on the PYROCAD application form, the fabrication process is ready to begin. The fabrication process (which, as stated above, incorporates five algorithms, two of which are part of the process algorithm) is divided broadly into three steps. The first step is the process algorithm ., which includes error checking, segmenting pipes to set lengths . and ., and replacing branch pipes and fittings according to the branch sizing schedule .-.. The second step is the tagging algorithm ., which involves error checking, applying the main tag labels according to the user setting ., and applying the branch tag labels according to the user setting .. These labels will appear on the installation drawing per each pipe showing the field personnel where to place the pieces. The third step is the generation of reports ., which entails error checking, summarizing and formatting the fabrication information extracted from the model into a number of reports.","In a preferred embodiment, the present invention generates the following reports: shop, field, summary and draftsman. The shop report is formatted to make the fabrication process as efficient as possible; it contains barcodes and sorts the pipes by descending diameter and length. The field report is used by the field personnel; this report does not have barcodes, and the pipe is sorted by main numbers and branch line numbers. The summary report is a summary of materials and is used for inventory and job costing. The draftsman report includes all of the three foregoing reports and is used by the draftsman to validate and error check the fabrication while preparing the installation drawing.","Referring to , the PYROCAD operating environment is a typical Microsoft WINDOWS\u00ae operating system. This operating environment typically includes a personal computer of any form (desktop, laptop, tablet computer, etc.) that has the ability to load programs into dynamic memory and store data on a static memory device such as a hard drive. Preferably, all PYROCAD files are placed on this static storage device in a dedicated folder structure. The user has means of input, which typically consist of a keyboard, mouse, touch screen, digitizing tablet and\/or voice command. The operating environment optionally includes an output device for hard copies of drawings and fabrication lists. Output may also be transmitted in electronic form via email or other electronic media.","The PYROCAD software program is started by clicking on an icon on the desktop () that will launch AUTOCAD\u00ae MEP and bring up the PYROCAD profile.  is the properties form for the desktop icon shown in . The \u201c\/p\u201d seen in the target text box . causes AUTOCAD\u00ae MEP to launch into the PYROCAD 2011 profile. The profile is a file installed on the hard drive during the PYROCAD installation named PYROCAD 2011.arg. This file contains the settings for the AUTOCAD\u00ae MEP environment as required by PYROCAD.",{"@attributes":{"id":"p-0220","num":"0219"},"figref":["FIG. 4","FIG. 5","FIG. 2","FIG. 2"],"b":["5","1","5","2","5","1","5","1"]},"In a preferred embodiment, the PYROCAD.dll is created using the Microsoft integrated development environment (\u201cIDE\u201d) called visual studio.net or vs.net for short. Within vs.net and the PYROCAD.dll, project references to AUTOCAD\u00ae MEP.dll files are added B.. ( shows many references shown to AUTOCAD\u00ae MEP assemblies otherwise known as dynamic-link libraries. The references to the AUTOCAD\u00ae MEP assemblies allow PYROCAD\u2122 to make AUTOCAD\u00ae MEP application programming interface calls.) This allows the PYROCAD.dll to gain access to the AUTOCAD\u00ae MEP API. The AUTOCAD\u00ae MEP API allows for broad control of the AUTOCAD\u00ae MEP application by programmatically controlling almost all aspects of AUTOCAD\u00ae MEP. The AUTOCAD\u00ae MEP API also allows the creation and registering of new custom commands. The PYROCAD.dll registers two new commands, namely, \u201cpy\u201d and \u201cpydh\u201d (discussed further below).","The PYROCAD environment contains many customizations to the user interface to create more productive piping design software.  is the custom tab created for the PYROCAD software. This tab is created by first creating and loading our custom PYROCAD menu . that resides in the PYROCAD 2011.cuix file. The latter file is created through the use of the AUTOCAD\u00ae MEP cui command and the customize user interface form (). In addition, custom graphics are created for the images used on the buttons. The PYROCAD menu . is considered a partial menu and loads alongside the default AUTOCAD\u00ae MEP menu. Within the custom tab shown in , there is a custom panel . that contains buttons for launching the py and pydh commands. PYROCAD also has a number of display configurations . that affect the way objects are displayed on screen and for printing. These display configurations were created using the AUTOCAD\u00ae MEP display manager (). In a preferred embodiment, the invention comprises a MEP basic two-line display configuration . and a MEP conceptual display configuration ..",{"@attributes":{"id":"p-0223","num":"0222"},"figref":["FIGS. 9A","FIG. 9A","FIG. 9D","FIG. 10","FIGS. 10A","FIG. 9C","FIG. 9E"],"b":["10","9","9","10","10","10","10","10","10","10","9","1","9","1","4","4"]},"In addition to the many visible customizations to the AUTOCAD\u00ae MEP interface, the present invention comprises numerous back-end customizations that provide the functionality described more fully below. Specifically, the PYROCAD software includes the following modules () integrated within AUTOCAD\u00ae MEP: PYROCAD parts catalog ., PYROCAD tools catalog ., PYROCAD tools palette ., PYROCAD profiles ., PYROCAD menus ., PYROCAD property sets ., PYROCAD tags ., PYROCAD workspace ., PYROCAD drawing templates ., PYROCAD application . and PYROCAD reports .. Following is a discussion of each of these modules.","The PYROCAD parts catalog . is a custom part catalog unique to the present invention. The default AUTOCAD\u00ae MEP catalog contains parts that are generic in nature. As noted above, PYROCAD is designed to be a WYSIWYG pipe design software so that the model can proceed seamlessly from design to fabrication. For PYROCAD to allow the designer the ability to create accurate models, the parts must be specific and not generic; that is, the parts must be specific to manufacturer, model, material, pressure class and all other properties that make a part unique. The parts must also be accurate dimensionally so that they take up the correct three-dimensional space within the drawing model.","The process of creating a new parts catalog is done through the AUTOCAD\u00ae MEP catalog editor (). In a preferred embodiment, the invention has two catalogs\u2014named PYROCAD (us imperial).apc and PYROCAD mvpart.apc\u2014that are stored in their respective folders under the PYROCAD 2011 installation folder. Once these files are created, they are populated by creating parts and storing them into their respective catalog. The PYROCAD (us imperial).apc catalog is used to store parametric pipes and fittings . that have been created for use with the present invention. These pipes and fittings are created and edited through the AUTOCAD\u00ae MEP content builder (). The nature of a parametric part is such that the dimensional properties of the part are controlled by a variable related to a data table. The PYROCAD mvpart.apc catalog is used to store multi-view parts . that have been created for use with the present invention. These parts are created and edited through the AUTOCAD\u00ae MEP content builder () and can be both parametric and block-based.","The block-based multi-view parts are created first using the AUTOCAD\u00ae MEP block editor to create the block. Then the blocks are loaded into the AUTOCAD\u00ae MEP content builder (). The PYROCAD tools catalog . is a file named PYROCAD 2011_catalog.atc that is stored in its respective folder under the PYROCAD 2011 installation folder. This file can be viewed via the Autodesk content browser C.. Within this browser, the PYROCAD tools palette group D. and the individual tool palettes D. are stored. Both the function and the graphics of the individual tool palettes (, B, C, D, E, F, G and H) were created specifically for implementation of the present invention.","PYROCAD profiles . and menus . have been previously explained. PYROCAD property sets . are a collection of custom property set definitions that are created through the use of the AUTOCAD\u00ae MEP style manager (). These property set definitions are sets of data that are attached to the AUTOCAD\u00ae MEP objects. The present invention reads and writes data to the objects via this property set data. In a preferred embodiment, some but not all of this data is pulled into and displayed within a \u201ctag\u201d attached to an object. PYROCAD tags . are a collection of AUTOCAD\u00ae MEP multi-view block definitions that are created through the use of the AUTOCAD\u00ae MEP style manager (). The PYROCAD tags have place holders inside of them that link to the PYROCAD property set data and will display this data when attached to their respective AUTOCAD\u00ae MEP objects.","The PYROCAD workspace . is a collection of custom workspaces that are used to store the settings of the user interface. The user manages these workspaces with the workspace settings form (). These settings include, but are not limited to, menu or palette location, open\/closed state, and docked\/undocked state. The PYROCAD drawing template . is an AUTOCAD\u00ae MEP drawing template file named PYROCAD 2011.dwt stored in its respective folder under the PYROCAD 2011 installation folder .. This file contains customizations required by the present invention including, but not limited to, PYROCAD property sets, PYROCAD tags and their multi-view block definitions, block definitions, routing preferences, layers and text styles.","The PYROCAD application . is a dynamic-link library that is loaded upon startup of AUTOCAD\u00ae MEP. This application allows a user to programmatically control the AUTOCAD\u00ae MEP environment and objects. PYROCAD reports . is a dynamic-link library that is loaded by the PYROCAD application . and is used to output the reports.","In most cases, a piping system is drawn on top of an architectural plan (). If an architectural plan is not provided, then the architectural tool palette () found in AUTOCAD\u00ae MEP can be used to prepare the architectural drawing.  shows both a plan or top view of the model space (on the left) and an isometric view of the model space (on the right).","The first step in drawing piping system is to insert a fire sprinkler head into the drawing. The user goes to the py_sprinkler heads tab on the PYROCAD 2011_Tools tool palette . and selects the fire sprinkler head button A.. This will launch the AUTOCAD\u00ae MEP add multi-view parts form (), which is linked to the PYROCAD mvparts catalog ., .. Next, the user must select the exact part that is needed. Upon opening the PYROCAD multi-view parts catalog folder, the categories folders are displayed .. Upon opening one of the categories folders, the types folders are displayed ., and upon opening one of the types folders, the manufacturer folders are displayed .. Upon opening one of the manufacturer folders, the individual multi-view parts are displayed ..","To narrow down the multi-view parts, the user selects the part filter tab .. As each custom property is selected ., the list is narrowed until the desired part is identified .. The user then places this part into the drawing (). In this example, the fire sprinkler head (is a multi-view part) now resides in the drawings model space ..  provides an enlarged view A., A. of the views shown in  ., .. In , the fire sprinkler head has been copied into multiple locations as required by the design. Next, the user selects the fire sprinkler heads and sets the elevation A. and layer A. in the properties palette.","Once the sprinkler heads have been added, the next step is to add the pipe that will supply water to the fire sprinkler heads. To do this, the user goes to the py_pipe tab on the PYROCAD 2011_Tools tool palette . and selects the desired pipe and fitting button B.. This will execute the AUTOCAD\u00ae MEP \u201cpipe add\u201d command with the parameters that have been defined in the properties of the button on the palette (). Each button on the palette corresponds to a specific routing preference with specific settings. The custom PYROCAD routing preferences are defined in the AUTOCAD\u00ae MEP style manager () and are assembled from the pipes and fittings within the PYROCAD parts catalog ., specifically, the parametric pipes and fittings stored in the PYROCAD (us imperial).apc file. In , the tool properties for the button B. are displayed, showing both the routing preference A. and the drawing template in which the routing preference is found A., ..","Next, the user must draw the pipe connecting the sprinkler heads. This pipe is considered to be a branch line. For the purposes of explaining the AUTOCAD\u00ae MEP pipe connectors,  shows the pipe and fitting disconnected and moved to the side of the sprinkler head in both plan and isometric view.  is an enlarged view of the isometric view shown in  that shows the dialog box with which the user would be presented if he hovered the cursor over the triangle warning sign presented by AUTOCAD\u00ae MEP. The dialog box states that \u201cthe pipe connector is not connected to another object.\u201d In AUTOCAD\u00ae MEP, connectors are the glue that holds the individual parts or objects of the mechanical disciplines together. There are AUTOCAD\u00ae MEP connectors of the following types: schematic, duct, pipe, electrical, and wire ways.","Pipe connectors are attached to the PYROCAD parts during construction of the pipe connectors in the model space. The pipe connector type is another important property that is determined at the time of the construction of the part (). The type of connector also gives AUTOCAD\u00ae MEP certain intelligence in handling the points of connection. For instance, if the connector is grooved type, then AUTOCAD\u00ae MEP knows that to connect grooved pipe and fittings together, there must be a coupling in between. If the connector is threaded type, AUTOCAD\u00ae MEP knows that the pipe will engage or thread into the fitting a certain distance as defined in the catalog. In addition, in AUTOCAD\u00ae MEP a pipe with an undefined connector type inherits its connector type from the connector to which it is joined.",{"@attributes":{"id":"p-0237","num":"0236"},"figref":["FIG. 26","FIG. 26","FIG. 10D.1","FIG. 24A"],"b":["26","1","26","2","10","4","10","1","10","2","26","1","26","2","26","1","27","1"]},"For explanatory purposes, this branch pipe will be copied three times to create a total of four branch lines connected to a main pipe (). Next, the user adds a vestibule and ceiling grid (). This is done using the tools shown in  and provided with AUTOCAD\u00ae MEP. The user then adds an additional sprinkler head to the ceiling of the vestibule .. This sprinkler head is a concealer type, which means there will be a decorative cover plate to cover it at the ceiling. In , the sprinkler head shows that it has two connectors by indicating two triangle warnings .. The reason this sprinkler head has two connectors is to attach the decorative cover plate at the ceiling on one connector and the supply piping at the other connector. Next, to add the adjustable drop nipple onto the sprinkler head, the user goes to the py_sprinkler heads tab on the PYROCAD 2011_Tools tool palette . and selects the desired button A..","Next, the user selects the exact multi-view part () that will be connected to the sprinkler head .. This part is one that allows a height adjustment in the installation process and is commonly used in ceiling installations. Next, to add the cover plate onto the sprinkler head, the user goes to the py_sprinkler heads tab on the PYROCAD 2011_Tools tool palette . and selects the desired button A.. Next, the user selects the exact multi-view part () that will be connected to the sprinkler head A.. The remaining branch pipe is drawn and connected to the main pipe ..","Next, the user creates a new layer named rael-arm layer using the PYROCAD layer standard (,  and A). This layer standard is used to guide the creation of layers by predefining choices that are concatenated together into new layers. In , the adjustable drop nipple and the two nearest elbows and pipes are put onto the rael-arm layer. The parts are put onto different layers so that they can be treated differently when the system is processed for fabrication.","In , a piece of duct work has been added to the architectural background. This will allow the demonstration of additional features of this invention in relation to the \u201cpyhd\u201d command .. Next, using the AUTOCAD\u00ae MEP \u201cmvpartadd\u201d command, the user inserts a new pendent sprinkler () with a protective guard () under the duct (). Then the sprinkler head is copied north to create an additional head under the duct. Next, the sprinkler heads are connected with branch piping to the main pipe using the AUTOCAD\u00ae MEP \u201cpipeadd\u201d command. In , the resulting branch piping is shown .. Next, the user selects the \u201cpydh\u201d command . from the PYROCAD panel .. This launches the PYROCAD head annotation form (), which is discussed more fully below.","As shown in  and , the multi-view part sprinkler heads that are used in the piping model are of real scale, which means they are tiny. In the present invention, a visual symbol is used to make the sprinkler heads visible and distinct from each other on the final output, whether electronic or paper (see . and .). The PYROCAD head annotation form () automates the process of assigning block symbols representing different sprinkler head types to their matching multi-view parts in the model space. When launched, the \u201cpydh\u201d command programmatically makes a selection set of all sprinkler heads in the drawing and then looks at each head to see if the PYROCAD_sprinkler_head property set data is attached. If the PYROCAD_sprinkler_head property set data is not attached, this means that the \u201cpydh\u201d command has not been run since this multi-view part sprinkler head has been placed in the drawing. In , an image is shown in column . if the multi-view part sprinkler head comes from the PYROCAD multi-view part catalog. Column . displays the name of the sprinkler head with its corresponding properties, such as national pipe thread size, orifice size, manufacturer, model, temperature, type, finish, cover or escutcheon finish, and head guard.","In , each unique sprinkler head is assigned its own row and two unique block symbols. The standard annotation symbol is selected and shown in column ., and the below annotation symbol is selected and shown in column .. The standard annotation symbol is the default symbol that is applied to the multi-view part sprinkler head. The below annotation symbol is applied when the users wants to designate that the multi-view part sprinkler head is under an obstruction such as a piece of heating and ventilation ductwork. (The way the user switches from standard to the below annotation is explained below.) If desired, the user can assign up to six characters in the attribute column . and . to display in the drawing next to the block symbols. Attributes may be used to distinguish similar parts with different characteristics. For example, two multi-view part sprinkler heads might have the same manufacturer, model, size, orifice, and color but a different temperature setting. The user is limited to a certain number of block symbol choices in . and ., but the attribute fields of . and . allow the user to create numerous annotations (i.e., block symbol plus attribute(s)) for each multi-view part sprinkler head.",{"@attributes":{"id":"p-0244","num":"0243"},"figref":["FIG. 46","FIG. 47"],"b":["46","7","46","7","46","8","46","7","46","9","46","8","46","10"]},{"@attributes":{"id":"p-0245","num":"0244"},"figref":["FIG. 48","FIG. 48","FIG. 49"]},"In , the user added additional main pipe and created a loop .. In , the northern most branch line has been connected into the opposing main pipe, causing what would be termed a cross connection ..","At this point, the design work has been completed to represent an actual three-dimensional piping system. The next steps in the process include defining the fabrication parameters, processing, annotating and reporting of the system for fabrication. To define the fabrication parameters, the user first inserts a start point and places it on the main pipe. In a preferred embodiment, the start point object is a custom AUTOCAD\u00ae MEP multi-view part that was developed for PYROCAD. Preferably, the start point object is shaped like an arrow with a pipe connector at the arrows tip, and it can be attached to a MEP object like a pipe or fitting. PYROCAD uses the start point to both indicate the starting point of the piping system ready for fabrication and to store the fabrication parameters.","To insert a start point, the user selects the start point from the PYROCAD tool palette E.. Selection of the start point launches the AUTOCAD\u00ae MEP add multi-view parts form () and opens the start point category. (Since there is only one start point we do not need to narrow down our selection and can proceed with the default start point that is already selected ..) Next, the user places the start point on the main pipe in a location that would be indicative of the water supply point (). Once the start point has been added to the piping system, the user launches the PYROCAD application form and fills out the required fields. These fields are shown in  and are the fabrication parameters that will be stored in the property set data attached to the start point. To launch the PYROCAD application form (), the user goes to the PYROCAD tools panel of the PYROCAD tab on the ribbon . or types the \u201cpy\u201d command at the command line .. The user will be prompted on the command line to \u201cplease insert and select a start point object\u201d at this point; because the start point has already been inserted, the user needs only to select it.","The start point object is used to define the actual source point or the starting point from which the user wants the system to start traversing. Upon selection of a start point, the PYROCAD application form () is displayed. The initial view of this form is a compact view, but the button . expands the form to the full-size view shown in . (This button . will both expand and contract the PYROCAD application form depending on its current state.)","When the PYROCAD application form is loaded, it will check to see if the selected start point has the required PYROCAD property sets attached. If there are no PYROCAD property sets attached, this fact would indicate that this is a new start point. If the start point is new, PYROCAD will attach the required PYROCAD property sets to the start point. The required PYROCAD property sets are used to store the data that will be entered into the PYROCAD application form.  shows the extended data tab of the AUTOCAD\u00ae MEP properties palette with a start point selected. The PYROCAD property sets named pyrocadheaderdata and pyrocadstartpoint are both present and filled with data from the PYROCAD application form ().","The next step is to fill out all of the fields on the form. A non-editable text field . is the start point ID; this field is filled out automatically by the PYROCAD application. The job number field . is a text field in which a company-specific job number is entered. For example, 4459 could be the reference number for a new parking garage at a certain location. The job name field . is a text field in which a company-specific job name is entered. For example, \u201cBig Trucks Parking Garage\u201d could be the name of the job. The level field . is a text field indicating the level of the building with which the pipe system is associated. For example, \u201cGround Floor\u201d would indicate that the system is for the ground floor of the building. The description field . allows a description of the project, such as \u201cPreaction System West Side,\u201d to be entered. Text fields ., . and . allow the street address, city and zip code, respectively, of the location of the job to be entered.","Text field . is for the ship date of the pipe system to the job site. Text field . is for the list date of the pipe system. The list date is the date on which the fabrication reports or lists are generated; the text field . is filled in automatically when the user presses the reports button .. Text field . identifies the draftsman working on the project and is filled out automatically by the PYROCAD application based on the WINDOWS\u00ae login information. Text field . indicates the system type, examples of which include wet, dry and preaction.","The next field is the first field of seven fields that require a layer name. PYROCAD gets the layer names by prompting the user to select an object of the piping system on the desired layer. Then PYROCAD retrieves the layer name from the object via the AutoCAD MEP API. This method has been chosen for PYROCAD because it eliminates the need to validate the layer name. In contrast, if the layer name were filled in by the user typing the layer name into a text box, PYROCAD would have to confirm that the layer existed in the drawing. Additionally, the user may have typed a layer name that does exist in the drawing but was not the correct name corresponding to the construct in the piping system. Another approach could have been to ask the user to choose the layer from a drop-down list box. The disadvantage to this approach is that a drawing may contain many hundreds of layers, which would make it cumbersome to choose a layer from a list box. For these reasons, PYROCAD has been designed to procure the layer name by having the user select an object on that layer.","Text field . indicates the arm over layer. This field is filled by pressing the adjacent select button, resulting in a prompt in the command line to select an object that is already drawn in the arm over layer (). Text field . indicates the elevation layer. This field is filled by pressing the adjacent select button, resulting in a prompt in the command line to select an object that is already drawn in the elevation layer (). Text field . indicates the base tag layer. This field is filled by pressing the adjacent select button, resulting in a prompt in the command line to select an object that is already draw in the base tag layer (). Text field . indicates the maximum length. This is a numerical number, designated in inches, for the maximum pipe length of an individual pipe to be allowed during the fabrication process.","Text field . shows a sample of a main tag label that will be used during the tagging process () and applied to the individual pieces of main pipe. To designate the main tag label, the user selects the adjacent create button on .. This adjacent create button displays the create label form (), which is used to designate the labeling for the main and branch numbering. In , the user enters a prefix into the text field labeled field. Then the user enters a number in the starting # field. This number will be the first number from which the mains will start numbering with an increment of one. For example, the main tag labels could be m-100, m-101, m-102, etc. The add button concatenates field and starting # together and shows an example in the tag label field. When the user confirms that the tag label field shows the desired combination, he presses save, and the form closes, returning the results to text field ..","Text field . indicates the main layer. This field is filled by pressing the adjacent select button and selecting an object in the drawing on the desired layer. The user will also be prompted in the command line similar to . Text field . indicates the main pipe diameter. This field is used to validate the main pipes diameter in the model and to warn the user to make a correction if any deviation is found. Text field . indicates the main pipe type, examples of which include black, galvanized, copper, etc. This field is used to validate the main pipe type in the model and to warn the user to make a correction if any deviation is found. Text field . indicates the main pipe schedule. This will be used to validate the main pipe schedule in the model and to warn the user to make a correction if any deviation is found. Text field . indicates the cut length of the main pipes. This is a numerical number, designated in inches, for the desired cut length of the mains for the fabrication process.","Text field . shows the branch tag label. This field . has the same function and purpose as . previously described except it is for the branch lines. Text field . indicates the branch layer. This field is filled by pressing the adjacent select button and selecting an object in the drawing on the desired layer. The user will also be prompted in the command line similar to . Text field . indicates the head layer. This field is filled by pressing the adjacent select button and selecting an object in the drawing on the desired layer. The user will also be prompted in the command line similar to . Text field B. indicate the cross connect layer. This field is filled by pressing the adjacent select button and selecting an object in the drawing on the desired layer. The user will also be prompted in the command line similar to . Text field . is a text field for the diameter of the cross connect layer.","Text field . indicates the branch pipe type, examples of which include black, galvanized, copper, etc. This field is used to validate the branch pipe type in the model and to warn the user to make a correction if any deviation is found. Text field . indicates the branch pipe schedule. This field is used to validate the branch pipe schedule in the model and to warn the user to make a correction if any deviation is found. The text fields . thru . make up the branch sizing schedule. The branch sizing schedule is determined by doing a hydraulic calculation of the piping system with hydraulic calculation software. The branch sizing schedule determined by the hydraulic calculation software is then be placed into text fields . thru .. Text field . indicates the number of sprinkler heads one-inch pipe can supply, text field . indicates the number of sprinkler heads 1\u00bc\u2033 pipe can supply, and text field . indicates the number of sprinkler heads 1\u00bd\u2033 pipe can supply. Text field . indicates the number of sprinkler heads 2\u2033 pipe can supply, text field . indicates the number of sprinkler heads 2\u00bd\u2033 pipe can supply, and text field . indicates the number of sprinkler heads 3\u2033 pipe can supply. Text field . indicates the number of sprinkler heads 4\u2033 pipe can supply, text field . indicates the number of sprinkler heads 6\u2033 pipe can supply, and text field . indicates the number of sprinkler heads 8\u2033 pipe can supply. Text field . indicates the number of sprinkler heads 10\u2033 pipe can supply.","The area entitled \u201cgrouped start points\u201d on  is used to group together child start points to connect separate piping systems from the model for fabrication purposes. If there were more than one piping model in the drawing space that were not connected, but the user desired to have the piping models fabricated together, the user would place the start point on one, and the \u201cchild start points\u201d on the other piping models. PYROCAD would start traversing from the parent start point and then traverse all the child start points, thereby causing the piping systems to be fabricated together (i.e., included in the same fabrication reports and\/or installation drawings). Label . is for the tag index. The tag index (explained more fully below) is an incremented value for the number of times the piping system has been listed. Button . launches the PYROCAD tag history form (), which allows the user to review the fabrication history for the piping system to which this selected start point is attached. Button . allows the user to remove tags either one index at a time or all tags at once.","Now that the user has filled in all the required fields on the PYROCAD application form (), PYROCAD is ready to process the piping system. The next step is to press the process button . to start the processing of the piping system.  is a flowchart representing the process algorithm of PYROCAD. PYROCAD begins by validating the start point data .. This procedure validates the data entered by the user for basic errors. For example, it checks if the mandatory fields like maximum length, main layer, branch layer, head layer and branching schedule are filled out correctly. PYROCAD creates process results and error results documents .. This procedure creates xml files for storing the process results and error reports. The process results file stores all information that is not an error, such as warnings. An example of a warning would be \u201ca small pipe found.\u201d The error results file stores all information related to errors. An example of an error would be \u201cAutodesk.AutoCAD.Runtime.Exception: eKeyNotFound.\u201d These files are used by the development team for debugging purposes. These files are xml files named in a format <drawing file name>(<start point id>).xml for process results and <drawing file name>(<start point id>)-errorlog.xml for error reports. These files are stored under c:\\program files\\PYROCAD 2011\\PYROCADresults folder.","PYROCAD will save the start point data .. This process automatically takes the data entered by the user into the PYROCAD form () and stores the data into corresponding property sets attached to the start point. The saving of the form () data is handled automatically, relieving the user of managing when and how to save.","PYROCAD gets layer details from start point .. This step retrieves the layers defined by the user: main layer, branch layer, arm over layer, base tag layer, elevation layer, cross connect layer and head layer. PYROCAD next traverses through the pipes on the main layer . for the purpose of error checking. (The traversing algorithm begins with the start point, which is always on the main layer.) As explained above, layers are defined by the user at the time of PYROCAD start point data entry. The purpose of the traversing algorithm is to travel all possible paths through the three-dimensional piping model.","The traversing algorithm supports many of the automated tasks PYROCAD performs on the piping system. The traversing algorithm is explained in greater detail in connection with the PYROCAD traversing algorithm flowchart () and  (a partial piping system). Generally, the traversing algorithm steps through each object of the piping system and enables PYROCAD to perform any necessary processing on the current MEP object by providing it for read-write operations (only one object is the \u201ccurrent object\u201d at any point in time). In this example, because the traversing is being used for the error checking of the main pipes (i.e., in support of the process algorithm .), PYROCAD will error check each main pipe while traversing.","The traversing logic is as follows: Leaving step ., the process proceeds to step . and begins a recursive loop. In , the numbers represent objects such as the start point, pipes, fittings and fire sprinkler heads. In , the letters represent the connectors. In , the paths are labeled P thru P. The traversing algorithm utilizes the following five variables: current object, initial point, previous object, unused connectors list and connectors to visit list. In , two loops are shown: the connectors to visit . and the path loop ..","In . the current object is set to be the start point .. Next, the current object is passed from the connectors to visit loop to the path loop. The path loop is controlled by the condition found in .. The path loop repeats as long as there is a current object; otherwise, the path loop exits, returning to the connectors to visit loop ..","The next step within the path loop . is to get all the connectors of the current object that are not connected to the previous object or the defined initial point. At this point, because this is the first object, there is no previous object, and the initial point has not been set. Continuing with ., the current object being ., the start point has one connector .A. This connector .A is placed into the unused connectors list .. The next step . is to do all processing on the current object. In this particular example, \u201cdo all processing\u201d . means error checking; however, the traversing algorithm supports other automation processes, such as coupling insertion, pipe and fitting resizing, tagging and reporting, which would all fall within the \u201cdo all processing\u201d step .. To clarify, these processes do not happen all in one traversing, but each process uses the traversing functionality to accomplish its goal. The traversing algorithm is the wrapper around each of these processes.","If at this process of error checking ., an error is found on the current object, PYROCAD stops the traversing and returns to .. Because the condition in . is yes, PYROCAD proceeds to . and ., which display the results of the error checking process in the results frame ., and stops until the user has resolved the errors. Returning to ., from this point forward it will be assumed that all current objects are error-free, and the traversing will continue uninterrupted. In . PYROCAD is continuing the path loop with each unused connector. In . the initial point is set from the unused connectors list .. By way of reminder, the current object is the start point ., and in step . the connector .A was placed in the unused connectors list .. In . PYROCAD stores the rest of the unused connectors in the connectors to visit list .. With the current object of . as the start point, there is only one connector and, therefore, no connectors to be placed in connectors to visit list ..","The next part of the traversing algorithm is ., where the current object is tested for conditions. In . the current object is checked to confirm that (a) it is not a sprinkler and its unused connector count is not zero or (b) it is a start point. Because the current object . is a start point, the traversing will continue with a yes onto .. The other conditions in . are explained below in connection with the next pass through the path loop with the next current object.","The next step . is to get the connected object at the initial point and set the next initial point. In step ., PYROCAD queries the AUTOCAD\u00ae MEP API to return the object that is connected to the connector .A of the current object .. It should be noted that at the lettered references in  (such as .A, .B., etc.), there are two connectors (one from each adjoining object) at each point. At .A the start point object . has a connector, and the pipe . also has a connector. The two objects (the start point object . and the pipe .) are joined together by these connectors; therefore, when PYROCAD queries the AUTOCAD\u00ae MEP API for the connected object at the start point's . connector .A, it will return the pipe's . connector at .A. To finish this step, the initial point is set to the pipe's connector at .A.","The next step is to make the connected object the current object ., which means that the current object start point . is finished being traversed, and the new current object becomes pipe .. The path loop . then loops back to the top . and checks the condition and repeats until current object becomes nothing (i.e., until there is no current object). Because the current object is now the pipe ., the path loop will continue.","PYROCAD now continues the traversing with the next current object pipe .. The next step . is to get all connectors of the current object that are not connected to the previous object or the initial point. Because the initial point is now the pipe's . connector .A, the only remaining connector of the pipe is .B. The latter connector is placed in the unused connectors list .. The next step . is do all processing on current object. The pipe will be assumed to be error-free for purposes of this example.","PYROCAD will now go to . and continue to loop with each unused connector. In . the pipe's . connector .B stored in the unused connectors list . is now assigned as the initial point. In step ., there are no extra connectors to place in the connectors to visit list .. In . the current object pipe . is checked to confirm that (a) it is not a sprinkler and its unused connector count is not zero or (b) it is a start point. The pipe . still has one unused connector .B because what is connected to it has not been determined yet (that happens in step .). Step . will, therefore, evaluate as a yes because either the first two conditions are true or the current object is a start point. Because the first two conditions are true, the path loop continues to step .. At step ., PYROCAD queries the AUTOCAD\u00ae MEP API to return the object that is connected to the current object's . connector .B. This will return the cross tee fitting .. Also in step ., PYROCAD sets the cross tee fitting's . connector .B to the new initial point. In . the cross tee fitting . becomes the new current object, and the path loop returns to the top ..","In , there are a total of six paths defined (.P through .P). At this point, the third object in the .P path has been reached. The current object is cross tee fitting ., and the initial point is .B. If the current object is an object (i.e., not nothing), the path loop continues .. In the next step ., PYROCAD places connectors .C, .D and .E of the current object into the unused connectors list .. Step . can be skipped assuming no errors. Step . continues the loop with each unused connector. In step ., the first unused connector from the unused connectors list . is assigned as the new initial point. The unused connectors list . works on a first-in-first-out basis (FIFO). The new initial point will now be the cross tee fitting's . connector .C.","The cross tee fitting . that is the current object is the first object that has more than two connectors. This causes something new to happen in step .. In . the remaining connectors in the unused connectors list . are moved onto the connectors to visit list .. The connectors to visit list . exists in the connectors to visit loop . outside of the path loop .. The connectors to visit list . restarts the path loop with a new object when a path has been completed.","The remainder of this path .P is described briefly in this paragraph by the changing of the values until the sprinkler head is reached. The current object is ., the unused connectors list . is empty, the connectors to visit list has connectors .D and .C, and the initial point is .C. Step . evaluates to yes. Step . gets pipe . and sets new initial point to its connector at .C. At step ., the new current object becomes pipe .. Step . is true and continues. Step . places connector .F into the unused connectors list .. Step . is error-free and skipped. Step . continues. Step . set .F from the unused connectors list . as the new initial point. At step ., there are no unused connectors. Step . evaluates to yes. Step . sets the new initial point to the connector .F of the tee fitting .. Step . sets the new current object to the tee fitting .. The path loop returns to ..","With the current object as a tee fitting ., the condition . evaluates true, and the path loop continues. Step . places connectors .G and .H into the unused connectors list .. Step . is error-free and skipped. Step . continues. At step ., PYROCAD sets .G from the unused connectors list . as the new initial point. In . the remaining connector .H in the unused connectors list . is moved onto the connectors to visit list .. Step . evaluates to yes. Step . sets the new initial point to the connector .G of the pipe .. Step . sets the new current object to the pipe .. The path loop returns to ..","With the current object as a pipe ., the condition . evaluates true, and the path loop continues. Step . places connector .I into the unused connectors list .. Step . is error-free and skipped. Step . continues. At step ., connector .I from the unused connectors list . is set as the new initial point. At step ., there are no unused connectors. Step . evaluates to yes. Step . sets the new initial point to the connector .I of the elbow fitting .. Step . sets the new current object to the elbow fitting .. The path loop returns to ..","With the current object as an elbow fitting ., the condition . evaluates true, and the path loop continues. Step . places connector .J into the unused connectors list .. Step . is error-free and skipped. Step . continues. At step ., connector .J from the unused connectors list . is set as the new initial point. At step ., there are no unused connectors. Step . evaluates to yes. Step . sets the new initial point to the connector .J of the sprinkler head .. Step . sets the new current object to the sprinkler head .. The path loop returns to ..","With the current object as a sprinkler head ., the condition . evaluates true, and the path loop continues. In step ., there are no unused connectors. Step . is error-free and skipped. Step . passes the current object directly to . because the unused connectors list is empty. Step . evaluates to no because the current object is a sprinkler. This sets the current object to nothing, and the path loop returns to .. PYROCAD now ends the path loop because the condition on . of the current object being nothing is true. This completes the path .P and returns control back to the connectors to visit loop ..","This is the point where the recursive nature of the traversing algorithm begins. At this time, the connectors to visit list . has connectors .D, .E and .H. The connectors to visit loop . takes the first connector .D in the connectors to visit list . and retrieves its connected object (pipe .) and then restarts the path loop with this pipe . as the current object. This path .P will be traversed by the path loop . terminating at the sprinkler head. PYROCAD adds one connector .K to the connectors to visit list .. PYROCAD then returns to the connectors to visit loop ..","The connectors to visit loop . will continue to restart the path loop as long as there are connectors in the connectors to visit list .. At this time, the connectors to visit list . has connectors .E, .H and .K. The connectors to visit loop . takes the first connector .E in the connectors to visit list . and retrieves its connected object (pipe .) and then restarts the path loop with this pipe . as the current object. This path .P will be traversed by the path loop . terminating at the sprinkler head, and no connectors will be added to the connectors to visit list .. PYROCAD then returns to the connectors to visit loop ..","At this point, the connectors to visit list . has connectors .H and .K. The connectors to visit loop . takes the first connector .H in the connectors to visit list . and retrieves its connected object (pipe .) and then restarts the path loop with this pipe . as the current object. This path .P will be traversed by the path loop . terminating at the sprinkler head. PYROCAD adds one connector .L to the connectors to visit list .. PYROCAD then returns to the connectors to visit loop ..","At this time, the connectors to visit list . has connectors .K and .L. The connectors to visit loop . takes the first connector .K in the connectors to visit list . and retrieves its connected object (pipe .) and then restart the path loop with this pipe . as the current object. This path .P will be traversed by the path loop . terminating at the sprinkler head, and no connectors will be added to the connectors to visit list .. PYROCAD then returns to the connectors to visit loop ..","At this time, the connectors to visit list . has connector .L. The connectors to visit loop . takes the first connector .L in the connectors to visit list . and retrieves its connected object (pipe .) and then restarts the path loop with this pipe . as the current object. This path .P will be traversed by the path loop . terminating at the sprinkler head, and no connectors will be added to the connectors to visit list .. PYROCAD then returns to the connectors to visit loop .. The traversing of the piping system is complete when there are no connectors in the connectors to visit list ..","As noted above, the process involved in step . was error checking, and the traversing algorithm was used to support this process; however, the traversing algorithm is used to support other processes of the present invention, such as coupling insertion, pipe and fitting resizing, tagging and reporting. The traversing algorithm enables these processes to have access to each object in all paths.","The above discussion of the traversing algorithm is in the context of the process algorithm (and error checking in particular). From a user perspective, when the user presses the process button ., the following text appears on the PYROCAD application form .: \u201cPYROCAD checking main lines for errors . . . . \u201d In AUTOCAD\u00ae MEP, the user will see the main piping becoming selected one pipe at a time as the processing traverses through the main pipes until they are all selected; when an object is selected in AUTOCAD\u00ae MEP, it visually changes to hidden lines. This is a visual indication that the error checking is taking place.","When the user sees the pipes being selected, PYROCAD is error checking the main pipes .. This step takes each main (a MEP pipe object) and validates it to find out if there are any drafting errors that may cause the rest of the process () to fail. If any errors are found, the process results are loaded ., the results are displayed ., and the process stops .. The results of the error checking process are displayed in the results frame . until the user has resolved the errors.","PYROCAD error checking is called from a number of different points in the fabrication process and may involve error checking any of the objects found in the piping system. The \u201ccurrent object\u201d is the object that causes the error. The following are examples of conditions that would evaluate as errors and would be presented to the user via the results frame ..","An error would occur if a takeoff fitting connected to a main pipe is not on the same layer as the main designates in field .. The brief description in the results frame . would read \u201ctakeoff not in main layer.\u201d An error would occur if any object in the piping system has an unconnected connector. The brief description in the results frame . would read \u201copen ended pipe found\u201d if the object type were a pipe. An error would occur if more than two objects are connected at the same connector. The brief description in the results frame . would read \u201ca point found to which more than two objects are connected.\u201d An error would occur if any object other than a sprinkler guard or a cover plate is connected at the remaining connection point of a sprinkler head with two connectors.","If a sprinkler head that has an additional connector is used, then the user must connect a sprinkler guard or a cover plate to its second connection point. The brief description in results frame . would read \u201can invalid object connected to the connector of the sprinkler head.\u201d An error would occur if the same type of objects are connected together. For example, it is not allowed to connect a pipe to another pipe directly or an elbow to another elbow directly. This has to be done using the interconnecting fittings like reducer, coupling etc. The brief description in results frame . would read \u201ca connection between same type objects is found.\u201d An error would occur if the current object is not in one of the layers defined by the user during the start point data entry. The brief description in results frame . would read \u201can object on a unspecified layer found in piping system.\u201d","Referring back to step ., if an error is found in the PYROCAD sprinkler fabrication form (), the fabrication frame . displays a message informing the user that \u201cPYROCAD found listed errors on main line. Please clear all errors and try again!\u201d In the instruction frame ., the user is told that the error is \u201ca branch line starting with takeoff not in main layer.\u201d In the results frame ., a new line item has been entered. It starts with a red circle with a white x in it, indicating that this is a critical error and PYROCAD cannot proceed until the error is resolved. The text states \u201ctakeoff not in main layer\u201d to indicate which error this is.","To resolve the error, the user will then double left mouse click the line in the results frame, which will cause the AUTOCAD\u00ae model to zoom to and select the object that is causing the error. Then the user will fix the error, which in this case entails changing the layer of the takeoff fitting to the main piping layer ().","The user would press the process button . again. This will continue the process algorithm shown in . If all errors have been resolved, the insert couplings to main step . will begin.  indicates in the fabrication frame . \u201cPYROCAD inserting couplings to main . . . . \u201d This part of the process breaks the main into the cut length indicated in . and places a coupling at the break. The logic for the main pipes algorithm is shown in , which is an expansion of ..","At step ., PYROCAD traverses through the entire piping system . and sequentially provides each object used in the system as the current object. The first condition . checks if the pipe is in the main layer specified in field .. In step ., PYROCAD checks the pipe's length; PYROCAD inserts couplings only to main pipes that are longer than maximum length. This maximum length is defined by the user in the PYROCAD application form () and is called maximum length .. All the pipes that evaluate yes on condition . need a coupling inserted into them and are placed into a collection ..","Next, PYROCAD loops through each pipe from the collection that needs a coupling . and performs the processes shown in ., . and .. In . PYROCAD rotates the pipe 180 degrees if it is not in the correct orientation. (AUTOCAD\u00ae MEP pipes have a start and end point that defines its location in the 3D model space.) Orientation of the pipe as it was drawn is checked and rotated 180 degrees if not drawn in the direction in which the traversing is taking place. This is necessary to ensure the correctness of any main pipes fabricated with takeoff fittings. The takeoff fittings are always dimensioned from the pipe's AUTOCAD MEP\u00ae endpoint; therefore, this AUTOCAD\u00ae MEP endpoint always needs to be consistent in its relation to the traversing direction when the fabrication processing occurs.","The final portion of the main pipes algorithm continues with PYROCAD breaking the pipe at cut length and inserting coupling .. The cut length is defined by the user in the PYROCAD application form () at .. The pipe cut length can be extended up to the maximum length under two conditions. The first condition is if extending the pipe saves a coupling, in which case the pipe is allowed any length above the cut length and less than the maximum length. The second condition is if the cut length falls on a takeoff fitting, in which case the pipe is extended in 6-inch increments up to the maximum length.","After breaking the pipe at cut length, it becomes two pieces. This new pipe is again evaluated, checked for its length and cut at cut length if necessary. This process is done in a repeating loop and continued until the length of the new piece of pipe becomes less than the maximum length ..  shows the main pipes after this portion of the process algorithm is completed, the main pipes having been cut into their respective pieces and new coupling added. Once the main pipes algorithm is completed, PYROCAD proceeds to step . in the process algorithm.","In step ., PYROCAD traverses through main pipes again and collects branch connectors. The branch lines are the branch pipes that begin from the mains with a takeoff fitting and end at the sprinkler heads. This routine traverses through the main pipe and identifies if there are any takeoffs and places those branch lines into a collection .. The distance of each takeoff is stored from the starting end of the main pipe to which it is connected. At the end of the procedure, the branches are sorted based on the distance from the starting end of the pipe so that all of the branch labels are in correct order when the tagging process is run.","The process algorithm continues to step . and the traversing of the branch lines for the purpose of error checking. The user receives the message indicated in the fabrication frame . \u201cPYROCAD checking branch lines for errors . . . . \u201d If errors are found such as in , they will be listed in the results frame .. In . there are three results; one of the results is an error, thereby stopping the processing until resolution. The other two results presented are yellow triangles with a black apostrophe in the middle. These are warnings and will not stop the processing but should be reviewed by the user as a precaution.","In this scenario ., some small pipes have been found that could become a problem in the next step, which is resizing. The branch line warnings and errors are fixed and reviewed in the same fashion as done with the main pipe errors. The user selects the line in the results frame ., which causes text to be displayed in the instructions frame . for the selected result. The user double left mouse clicks the line in the results frame . to switch to AUTOCAD\u00ae MEP and fix or review the result. After the user reviews the warnings and fixes the errors, the processing resumes when the user presses the process button ..","When all branch pipe errors have been resolved, PYROCAD continues with the resizing of the branch line pipes and fittings .. The branch lines and fittings are resized to conform to the schedule that is defined in the PYROCAD application form . through ..  is a flowchart showing the branch resizing algorithm of the present invention.  is a diagram that explains the logic behind the head count calculation of the branch system. The way PYROCAD resizes the branch lines is explained in connection with both of these figures.","It should be noted that the branch resizing algorithm is taking place within the process algorithm, which utilizes (or is supported by) the traversing algorithm. Note that the term \u201ccurrent object\u201d refers to the object that is made available by the traversing algorithm () to other processes within the present invention. The first current object would be from the collection of takeoff fittings that were collected in .. In  the current object would be takeoff fitting B.. In , PYROCAD needs to determine whether the current object is a branching object A.. This check is done by looking at the layer in which the object is drawn and the type of object it is. Any MEP object that can split a traversing path into more than one direction is known as a branching object. In other words, a MEP object with more than two connectors is considered a branching object. Examples of branching objects are tees, cross tees, and takeoffs.","Because the current object takeoff fitting B. is a branching object, PYROCAD moves to step A.. In this case, the current object B. is the first branching object, which means that a new path relation collection is created. PYROCAD uses the path relation collection A. to store the path from the root of the branch up to the current object. Every branching object's incoming connector is designated as the root connector, and the path relation collection stores objects in relation to the root connector. The path relation collection contains the current branching object and all the previous branching objects through which the traversing algorithm passed until it reached the current object.","Now that PYROCAD has created the path relation collection, the path data is stored as the branch line is traversed. In step A., the current object's information is stored in the path relation collection. The particular information that is stored is shown in A.. The first piece of information is the incoming connector's parent object ID, which is the object ID of the object to which this incoming connector is connected. In the example provided in B., the current object is a takeoff fitting. An object ID is an AUTOCAD\u00ae MEP-created value that is assigned to each object and is unique to that object. PYROCAD queries the AUTOCAD\u00ae MEP API with an object ID, and the AUTOCAD\u00ae MEP API returns the actual object.","The second piece of information that is stored in the path relation collection is the connector's number. As explained above, objects can have multiple connectors. AUTOCAD\u00ae MEP gives each connector of an object a number. For example, an elbow fitting might have a connector number one and a connector number two. A tee fitting might have three connectors connector numbers one, two and three. By keeping track of the connector number, PYROCAD knows which connector on the fitting is the incoming connector. The third piece of information that is stored in the path relation collection is head count. The head count is the number of sprinkler heads that are on the outgoing side of that connector. The fourth piece of information that is stored in the path relation collection is the path relationships, which contain the branching objects upstream of the current object.","Continuing with the example, at step A. PYROCAD stores for takeoff fitting B. the following information in the path relation collection. For the connector parent object ID, PYROCAD stores the object ID of the takeoff fitting B.. For the connector number, PYROCAD stores number one. (For the sake of this example, all incoming connectors are number one.) For the head count, PYROCAD leaves this field blank because it is updated at step A.. For the path relationships, PYROCAD stores takeoff fitting B., indicating that this is the first root connector. For the override diameter, PYROCAD leaves this field blank because it is updated at step A.. Now that the initial values for the current object have been set in the path relation collection, PYROCAD moves to step A..","The next step in the branch resizing algorithm is A., which involves updating the head count when a sprinkler head is found on a run of the current object. As used herein, the term \u201crun\u201d means a straight traversing path with no branching objects terminating in a sprinkler head. In , paths B.P, B.P and B.P are all runs because there are no branching fittings. PYROCAD uses a function found in the AUTOCAD\u00ae MEP API called \u201cgetrun\u201d to check to see what objects are attached to the other connectors of the current object and whether they terminate in a sprinkler head. In this case, the getrun function is called using the outgoing connector of the current object, which is the takeoff fitting B.. AUTOCAD\u00ae MEP returns only the pipe that is the next object along the B.P path.","The reason the AUTOCAD\u00ae MEP getrun function only returns one pipe is because the cross tee fitting B. is a branching object and, therefore, terminates the run. Note that a run can only have one traversing path. Because no sprinkler heads are found with the getrun function for this current object, the head count is not changed. In step A. the root connector for the current object, the takeoff fitting B., is stored in the root connectors list A.. In step A., the branch resizing algorithm is finished with the current object and returns control to the traversing algorithm, which will present the next current object to the branch resizing algorithm. This completes the gathering of information into the path relation collection for the first branching object (takeoff fitting B.) in .","The next current object encountered by PYROCAD in traversing path B.P is a pipe. A pipe is not a branching object, which means that PYROCAD would skip to step A. and return control to the traversing algorithm to get the next current object (a cross tee fitting B.). The cross tee fitting B. is considered a branching object in step A.. Because the path relation collection already exists, PYROCAD needs only to add this current object's data to the path relation collection. The five pieces of data that are added are shown in A.: the cross tee fitting's object ID, the connector number (which is one for all branching objects in this example), head count (which is empty in this example), path relationship (takeoff fitting B. and cross tee fitting B.), and override diameter (which is empty in this example). In step A., one sprinkler head is found with the getrun function, which means that the head count of each root connection in the path relationship will be incremented by one. Takeoff fitting B. and the current object, which is the cross tee fitting B., each gets a head count of one. In step A., the root connector for the current object (the cross tee fitting B.) is stored in the root connectors list A.. This completes the second branching object in .","The next current object encountered by PYROCAD while traversing the path B.P is a pipe. Because a pipe is not a branching object, PYROCAD would skip to step A. and return control to the traversing algorithm to get the next object. The next current object is a tee fitting B., which is considered a branching object in step A.. Because the path relation collection already exists, PYROCAD need only add this current object's data to the path relation collection. Specifically, the five pieces of data shown in A. are added: the tee fitting's object ID, the connector number (which is one for all branching objects in this example), head count (which is empty in this example), path relationship (takeoff fitting B. and cross tee fitting B. and tee fitting B.), and override diameter (which is empty in this example).","In step A., one sprinkler head is found with the getrun function, which means that the head count of each root connection in the path relationship will be incremented by one. Takeoff fitting B. and cross tee fitting B. each now has a head count of two, and the current object tee fitting B. gets a head count of one. In step A., the root connector for the current object (tee fitting B.) is stored in the root connectors list A.. This completes the third branching object in .","The next three current objects encountered by PYROCAD while traversing the path B.P are a pipe, elbow fitting and sprinkler head. Neither a pipe, elbow fitting nor sprinkler head is a branching object; therefore, PYROCAD skips to step A. and returns control to the traversing algorithm to get the next object. The next three current objects in the path B.P are a pipe, elbow fitting and a pipe, none of which is a branching object; therefore, PYROCAD skips to step A. and returns control to the traversing algorithm to get the next object. The next current object is a tee fitting B., which is a branching object (step A.). Because the path relation collection already exists, PYROCAD need only add this current object's data to the path relation collection.","The five pieces of data that are added to the path relation collection are shown in A. and include: the tee fitting's object ID, the connector number (which is one for all branching objects in this example), head count (which is empty in this example), path relationship (takeoff fitting B. and cross tee fitting B. and tee fitting B.), and override diameter (which is empty in this example). In step A., two sprinkler heads are found with the getrun function, which means that the head count of each root connection in the path relationship is incremented by two. The result is that takeoff fitting B. and cross tee fitting B. each has a head count of four, and the current object tee fitting B. gets a head count of two. In step A., the root connector for the current object (tee fitting B.) is stored in the root connectors list A.. This completes the fourth branching object in .","The next three current objects PYROCAD encounters while traversing the path B.P are a pipe, elbow fitting and sprinkler head, none of which is a branching object; therefore, PYROCAD skips to step A. and returns control to the traversing algorithm to get the next object. The next three current objects encountered by PYROCAD while traversing path B.P are a pipe, elbow fitting and a pipe, none of which is a branching object; therefore, PYROCAD skips to step A. and returns control to the traversing algorithm to get the next object. The next current object is a tee fitting B., which is a branching object (step A.). Because the path relation collection already exists, PYROCAD need only add this current object's data to the path relation collection. The five pieces of data added are shown in A.: the tee fitting's object ID, the connector number (which is one for all branching objects in this example), head count (which is empty in this example), path relationship (takeoff fitting B. and cross tee fitting B. and tee fitting B. and tee fitting B.), and override diameter (which is empty in this example).","In step A., two sprinkler heads are found with the getrun function, which means that the head count of each root connection in the path relationship is incremented by two. Takeoff fitting B. and cross tee fitting B. will have a head count of six, tee fitting B. will have a head count of three, and current object tee fitting B. will now get a head count of two. In step A., the root connector for the current object (tee fitting B.) is stored in the root connectors list A.. This completes the fifth and final branching object in .","Now that all the branching objects and path relationships have been stored, the next step in the branch resizing algorithm is the actual resizing of the branch line. To begin the process of resizing of the branch line, PYROCAD proceeds to step A. and loops through the root connectors list A. and applies the head count that is found for each root connector to all of the MEP objects in the run that are attached to the incoming connector.","Turning to the example provided in , PYROCAD retrieves the takeoff fitting B. from the root connectors list A.. PYROCAD then uses the getrun function to retrieve all objects attached to the incoming connector of the takeoff fitting B.. The getrun function returns no objects. PYROCAD then uses the getrun function on the remaining connectors of the object to see if any run terminates in a sprinkler head. In the case of the takeoff fitting B., none of its connectors terminates in a sprinkler head. PYROCAD then places the takeoff fitting B. into the collection B. named member sizes B. with a head count of six. PYROCAD then proceeds to the next item in the root connectors list A..","PYROCAD retrieves the cross tee fitting B. from the root connectors list A. and then uses the getrun function to retrieve all objects attached to the incoming connector of the cross tee fitting B.. The getrun function returns one pipe. PYROCAD then places the cross tee fitting B. and the pipe into the collection B. named member sizes B. with a head count of six. PYROCAD then uses the getrun function on the remaining connectors of the object to see if any run terminates in a sprinkler head. The getrun function returns the pipe and elbow fitting from path B.P. PYROCAD then places the pipe and elbow fitting from path B.P into the collection B. named member sizes B. with a head count of one. PYROCAD then proceeds to the next item in the root connectors list A..","PYROCAD retrieves the tee fitting B. from the root connectors list A. and then uses the getrun function to retrieve all objects attached to the incoming connector of the tee fitting B.. The getrun function returns one pipe. PYROCAD then places the tee fitting B. and the pipe into the collection B. named member sizes B. with a head count of three. PYROCAD then uses the getrun function on the remaining connectors of the object to see if any run terminates in a sprinkler head. The getrun function returns the pipe and elbow fitting from the end of path B.P. PYROCAD then places the pipe and elbow fitting from the end of path B.P into the collection B. named member sizes B. with a head count of one. PYROCAD then proceeds to the next item in the root connectors list A..","PYROCAD retrieves the tee fitting B. from the root connectors list A. and then uses the getrun function to retrieve all objects attached to the incoming connector of the tee fitting B.. The getrun function returns two pipes and one elbow fitting. PYROCAD then places the tee fitting B. and the two pipes and one elbow fitting into the collection B. named member sizes B. with a head count of two. PYROCAD then uses the getrun function on the remaining connectors of the object to see if any run terminates in a sprinkler head. The getrun function returns the pipe and elbow fitting from the end of path B.P and the pipe and elbow fitting from path B.P. PYROCAD then places the pipe and elbow fitting from the end of path B.P and the pipe and elbow fitting from path B.P into the collection B. named member sizes B. with a head count of one. PYROCAD then proceeds to the next item in the root connectors list A..","PYROCAD retrieves the tee fitting B. from the root connectors list A. and then uses the getrun function to retrieve all objects attached to the incoming connector of the tee fitting B.. The getrun function returns two pipes and one elbow fitting. PYROCAD then places the tee fitting B. and the two pipes and one elbow fitting into the collection B. named member sizes B. with a head count of two. PYROCAD then uses the getrun function on the remaining connectors of the object to see if any run terminates in a sprinkler head. The getrun function returns the pipe and elbow fitting from the end of path B.P and the pipe and elbow fitting from path B.P. PYROCAD then places the pipe and elbow fitting from the end of path B.P and the pipe and elbow fitting from path B.P into the collection B. named member sizes B. with a head count of one. PYROCAD then proceed to the next item in the root connectors list A..","If the branch line objects are found to be on the cross connect layer A., then PYROCAD resizes the pipe and fittings that are in the cross connect layer to the size in the field on the PYROCAD application form  named cross connect pipe size .. At this stage, PYROCAD knows what the head count of each object in the branch line is and has stored this information in the member size collection A.. This member size collection A. is referenced by the resize pipe A. and resize fittings A.. PYROCAD loops through each object in the branch line and resizes each object in the branch line A.. The head counts for each object in the branch line are matched to the branch sizing schedule (.-.) to determine the diameter for each pipe and each fitting outlet. In step A., each fitting object in the branch line from the member size collection A. and its respective outlet diameters are determined from the head counts.","The fitting and the new diameters are then sent to an AUTOCAD\u00ae MEP fitting resizing API call to resize the fitting. Due to the nature of the AUTOCAD\u00ae MEP API and the fact that an existing fitting may be replaced with a larger fitting, the resized fittings connectors and center point are moved in the 3D model space. The center point of the fitting is the point where the pipes would intersect if a line were drawn along the center of the diameter of the pipes and projected into the fitting. PYROCAD keeps track of the old center point and moves the fitting to its old center point after resizing to maintain its original location. PYROCAD might also need to rotate the fitting a few times and flip it few times to get the new resized fitting in the correct orientation. Once all the fittings are resized, rotated and flipped, PYROCAD moves to the resizing of the pipes.","In this step A., the pipes that were connected to the original fittings become disconnected because the newly sized fittings connectors are in a slightly different location. The center points of the fittings are the same; therefore, to reconnect the pipes, PYROCAD needs to either extend or reduce the length of the pipes. In order to achieve this, PYROCAD draws new pipes, in new lengths and diameters, from one fitting connector to the next fitting connector. When PYROCAD has processed the entire member size collection A., the branch line resizing algorithm is completed.","By way of review, the branch line resizing algorithm began by traversing the branch line . starting with one of the takeoff fittings collected in step .. PYROCAD repeats this process of branch line resizing . until all of the takeoff fittings in . have been used as the starting current object for a branch line to be resized.","Returning to , the user is shown the message on the form () in the fabrication frame \u201cPYROCAD resizing branch lines . . . \u201d .. In the AUTOCAD\u00ae MEP screen, PYROCAD selects each branch line fitting and pipe in the order in which it would be processed by steps ., . and . When the branch line fittings and pipes are selected, they become dashed lines and change appearance on the screen. This is a visual indicator of the progress of the branch resizing algorithm (). In addition, the fabrication screen will now start to fill the progress bar to estimate completion of the process portion of the fabrication ..","After all the branch piping has been selected and analyzed, the new sizing is determined in accordance with the input provided by the user in . through .. PYROCAD now replaces all of the objects in the piping system that need to be resized using the geometry from the existing system. ,  and  show some of the newly resized pipe, sprinkler heads and fittings.  is an enlarged view of . showing a tee fitting that has been resized. The tee's first and second connectors are one-inch diameter, and the third connector is one and a quarter-inch diameter.  is an enlarged view of . showing a tee fitting that has been resized. The tee's first connector is one and a half-inch diameter, the second connector is one and a quarter-inch diameter, and the third connector is a half-inch diameter.  is provided as a reference for a typical tee's connector numbers.","Referring back to , the last steps in the process algorithm (after the branch resizing algorithm) are . and .. In these two steps, PYROCAD posts any final messages or warnings in the results frame . for the user's review prior to moving on to the tagging process. (Some examples of possible messages and\/or warnings are discussed above in connection with .)  displays in the fabrication frame the message \u201cPYROCAD completed processing\u201d ..","By way of review, referring to  (the process algorithm), the first step after the user presses the process button . is the validation . of the information filled out by the user on the PYROCAD application form . The next step is the traversing of the main pipes for error checking . and .. The next step is the traversing of the main pipes to insert couplings and segment pipes into cut length .. Moving onto the branch lines, PYROCAD traverses the main pipes, collecting all of the takeoff fittings to store the beginning point of each branch line .. PYROCAD also error checks the branch lines in . and .. Finally, PYROCAD traverses through each branch line, resizing each pipe and fitting as required by the branch sizing schedule (.-.).","In a preferred embodiment, if the user encounters an error that he considers outside of the normal operation of PYROCAD, he can send an error log to the support staff by selecting the send error logs button .. This will launch the PYROCAD error log submission form (), which allows the user to type comments and send a copy of the drawing file with the error logs to the support staff.","As stated above, the fabrication process can generally be thought of as comprising three steps, namely, the processing algorithm, the tagging algorithm, and the generation of reports. These three steps (or processes) are separate and distinct, and they need not be run in immediate succession. In fact, these processes could be run minutes or days apart. For this reason, PYROCAD runs error checking as one of the initial steps in each of the three processes. Because the state of the piping model is never assumed, it is always validated by PYROCAD (i.e., error checking always comes first in each of these processes). Having completed the discussion of the process algorithm, the present discussion will now turn to the tagging algorithm.","Now that the piping model has been resized, it represents an accurate depiction of what the user wants to fabricate.  is a flowchart showing the tagging algorithm of the present invention. The user presses the tag button . to begin the tagging portion of the fabrication process.","The first step in the tagging algorithm is to validate start point data A.. The validation of start point data is described above in connection with step .. Next, PYROCAD erases orphaned tags A.. (As explained above, the tags are labels that will appear on the installation drawing per each pipe, showing the field personnel where to place the pieces.) PYROCAD considers a tag an orphan when it is not anchored to any of the MEP objects. For example, when a user releases an anchored tag from a pipe or fitting and later deletes the pipe or fitting, the leftover tag becomes orphaned. The orphaned tags must be deleted before new tags can be added.","PYROCAD uses the property set data . that is attached to the pipes to identify whether a tag is orphaned. For example, the handle of the MEP object is stored in the property set data and attached to the MEP object. A handle is a unique value assigned to each object by AUTOCAD\u00ae MEP. When PYROCAD reviews the handle stored in the property set data that is attached to a given pipe, PYROCAD queries AUTOCAD\u00ae MEP API for the handle of that pipe. If the two values do not match, then PYROCAD knows that the tag is orphaned. Note that this step A. applies only when the user is revisiting a system that has already been tagged.","Next, PYROCAD obtains layer details for the tags . from the PYROCAD application form . AUTOCAD\u00ae MEP tags are custom multi-view block references .. Each of those blocks contains attribute definitions within it. Every PYROCAD tag is placed in a parent tag layer as a whole object, and each of the attribute definitions is placed in a PYROCAD-generated child tag layer. This layer structure helps the user to turn on or off a single group or multiple groups of tags when needed. PYROCAD gets the parent tag layer details from the user through the PYROCAD application form ., and it creates all the child tag layers dynamically during the tagging process.","Next, PYROCAD gets the user-defined tag details from the start point and stores them in variables for future tagging use ., .. For example, if the user selects a parent tag layer as \u201cmytaglayer,\u201d then PYROCAD puts all of the tags as parent objects into this particular layer and further creates child layers like \u201cmytaglayer-pipetagctc,\u201d \u201cmytaglayer-pipetagpieceid,\u201d \u201cmytaglayer-main\u201d and \u201cmytaglayer-branch\u201d and assigns each of the attribute definitions into these layers.","Next, PYROCAD traverses A., error checks A., and collects branch connectors A.. These routines have been explained in connection with  (the processing algorithm). Next, PYROCAD tags the main pipes A.. Users are allowed to tag a piping system a multiple number of times. A tag index is used for keeping track of the number of times each system is tagged. This tag index is attached to every tag and incremented by one each time the system is tagged, with the first tag index being zero. This tag index is also used for revisions and modifications. If the entire system has been processed, tagged and fabricated, and a change to the system is subsequently made, the newly created or modified portions of the system would receive a tag index of one upon the second tagging. This material could then be broken out separately at the reporting phase.","PYROCAD stores the tag index in the start point, and this value is fetched to find out how many times the system was tagged before. This information is presented to the user at the beginning of the tagging process and provides him with an option to retag the complete system with an initial index of zero or tag only the portion that has not previously been tagged with a new tag index. If the user chooses to retag only the new portion, then later he would be able to list only that portion separately for fabrication.","Main pipes are tagged with information like \u201ccenter to center length,\u201d \u201cpipe diameter,\u201d \u201cpipe direction\u201d and \u201cend to end length.\u201d Every time a tag is placed, PYROCAD checks to see whether the required tag is already available in the drawing database. If available, then PYROCAD uses it; if not available, then PYROCAD creates the required tag dynamically using the following procedure. First, PYROCAD clones the required property sets from property sets found in the PYROCAD drawing template . and then attaches the required property sets to the MEP object to which the tag is being anchored. PYROCAD then conducts another clone operation that duplicates the mvblock found in the PYROCAD drawing template . for the tag itself. Next, PYROCAD modifies the cloned mvblock to match with the newly created property sets, and this step makes the values appear on the screen after anchoring. It also modifies the layer details, as explained above. The location at which the tag should appear is calculated by taking the positional data of the MEP object to which it is anchored. Finally, the tag is anchored to the MEP object, and its angle of rotation is defined so that it appears in a desired orientation.","PYROCAD will now iterate through each of the branch lines and error check A., traverse and tag branch pipes A. with the branch tags. Unlike main pipes, branch pipes gets only one tag called PYROCAD_pipetag, which consists of a unique piece ID to each branch, pipe diameter, pipe center to center length, pipe direction and tag index. Branch tags are created and placed similar to the procedure found in tag main pipes section A..","Next, PYROCAD performs the error checking routines . and .. The text string in the fabrication frame . indicates \u201cPYROCAD tagging main lines . . . ,\u201d the text string in the fabrication frame . indicates \u201cPYROCAD tagging branch lines . . . ,\u201d and the progress bar . will fill. When tagging is completed, the text string in the fabrication frame . reads \u201cPYROCAD completed tagging.\u201d  shows the piping system with the newly created tags.","There are a number of tags that are applied by the tagging process. The PYROCAD_pipetag is the tag . that is placed as follows: on the midpoint of each pipe without takeoffs, on the midpoint distance between takeoffs, on the midpoint between a fitting (excluding coupling and takeoffs), and at the midpoint between two fittings (excluding couplings). The PYROCAD_pipetag tag contains a piece ID A.., which is a sequentially iterated alpha character that is given to each pipe on a branch line. The PYROCAD_pipetag tag contains a diameter A.. to represent the diameter of the pipe. The PYROCAD_pipetag tag contains a direction A.. to indicate if the pipe is going up, down or sloping. The PYROCAD_pipetag tag contains a center to center A.. to indicate the distance from centerline of pipe to pipe, pipe to takeoff of takeoff to takeoff. The PYROCAD_pipetag_ctc_split is the tag A. that is placed at the midpoint and below in the following locations: between two fittings, between two couplings, and between a fitting and a coupling. The PYROCAD_branch_main_riser_bulk_tag is the tag A. and A. that contains the branch line or main number and is placed on each main and each fitting starting a new branch line.  shows the ability for all of the PYROCAD tags to dynamically scale up or down according to the AUTOCAD\u00ae MEP annotation scale (compare to ).","The next step is to press the reports button ., which will again run error checking routines first. Any results will be presented in the results frame. Once the error checking is finished, the exporting of the fabrication data starts. This fabrication data is collected from the different custom property set data that have been attached and filled by the tagging process (FIG. A). A. shows the materials list frame found in the PYROCAD 2011 sprinkler fabrication form. This frame is filled in real-time while the exporting of the property set data is happening. This frame displays in a Microsoft WINDOWS\u00ae tree view a list of all the materials and quantities. This information is used for the user to quickly check for any unexpected results before proceeding to the next step.","The user will be presented with the progress in the fabrication frame. The steps will be \u201cPYROCAD exporting main lines . . . \u201d, \u201cPYROCAD exporting branch lines . . . \u201d and \u201cPYROCAD completed data export.\u201d When the export finishes, the PYROCAD reports selection () will display. The tag index is a drop-down list box . that will allow the user to select the desired tag index to which the system will be set to default. The different report groups in . are different subsets of the fabrication data. The draftsman report has all the data of the other reports and is the master report. The shop report has the fabrication data put into certain order that is desirable for fabrication, such as ordering the threaded pipe by diameter and descending length. The field report has the threaded pipe grouped by branch line number that is desirable for installation. The summary report is for inventory purposes.","The add dynamic report button in . launches the PYROCAD report template form (). This form allows the user to create a custom report by selecting the desired criteria and adding the template. When the user selects save to main report list, this will close this form. If the user presses the button to expand the form ., it will expand and look like . In the list of reports, the user would see the default reports and any new templates that were created. The user would check the check box associated with a desired custom report to include it in one of the four primary reports: draftsman, shop, field and summary.","If the user presses the view report button ., a viewer will open and allow the user to review the report. If the user presses the export to PDF (portable document format) button, the individual report will export to a PDF file .. If the user selects the export all to PDF button, all the reports will export to PDF files. Upon pressing either the view report button or the export to PDF button or the export all to PDF button, the PYROCAD hanging materials form () will display. The user will fill in the hanging material information specific to this piping system and continue with OK.","Next, the select location to export PDF form  is displayed. This form allows the user to browse to the desired location to save the PDF formatted reports. The name of the file has already been filled out and is a concatenation of the drawing name-start point id-report name-tag index. This can be changed if the user wants to type in another name. This select location to export PDF form () will display four times, once for each report being exported (draftsman, shop, field and summary). When the locations and file names have been selected, the reports will begin to export to PDF, and the progress will be displayed by the four progress bars on the PYROCAD report selection form ().",{"@attributes":{"id":"p-0348","num":"0347"},"figref":["FIG. 102","FIG. 102A","FIG. 57","FIG. 102B"]},"One unique aspect of this report () is the way the graphic is assembled at runtime from a series of premade images.  shows a screenshot of some of the images found in the PYROCAD\\images installation folder. These images are placed on the report at runtime depending on the data in the reports xml file. This creates a technique for creating unlimited combinations of outlet quantities and direction by placing the correct pictures in order.  represents a branch line portion of the shop report.","This completes the discussion of the reporting process (i.e., generation of reports), which is the final step in the fabrication process of the present invention. Other aspects of the invention are discussed below.","PYROCAD also allows the user to make revisions and additions to the piping system. If the user needs to add new piping, he would draw the new piping as desired and delete any tags that are no longer valid because of the addition. In the case of revising pipe, the user would erase, add and modify the piping as required and remove any tags that are no longer valid.  demonstrate this functionality.",{"@attributes":{"id":"p-0352","num":"0351"},"figref":"FIG. 103","b":["103","1","5","103","2"]},"In , the PYROCAD application form shows that the tag index is default, which means that this piping system has been tagged once. When the system has been tagged once, there are only a few fields that are still accessible to the user. These fields are: the description field, the ship date, the base tag layer (if the base tag layer is changed, the new tags for the additions\/modifications will be on the new base tag layer), and the main tag label and branch tag labels (both of which could be changed to a new convention if desired). The user may change any of these fields to create an indication of the reason for the addition or revision. By way of example, the architect may have issued a new drawing called addendum ; therefore, the user could add \u201caddendum #3\u201d in the description field. The base tag layer could be add-3. The main tag label could be m-add3-1. The branch line tag label could be b-add3-1. If the user changed the base tag layer, main tag label and branch line tag layer, this would help to isolate and manage the object per each revision and change in the drawing. This is important because there are costs associated with each revision.","Following the same steps as in the previous example, the user presses the process button . to resize any of the new pipe. Next, after pressing the tag button ., the user is presented with a new dialog box (). This PYROCAD retagging dialog is presented when a piping system has been previously tagged at least once. There are two choices that will allow the user to proceed with tagging. The \u201cyes\u201d button will renumber all the pipes with the current settings. The \u201cno\u201d button will not renumber existing tags. New pipe will be tagged with the current setting and the index number. In both conditions, all existing tags will maintain their position. This is important if the user has already positioned the tags as desired on the drawing because the user will only have to position the newly added tags.","In this example, the user will press the no button () to not renumber existing tags, and the tagging process runs and completes. In . the tag index is now set to one, indicating that this system has been tagged more than once. In addition, most of the fields on the form now become inaccessible. Only certain fields can be edited: description, ship date, base tag layer, main tag label and branch tag label. If the tag history button . is pressed, it will load and display the PYROCAD tag history form (). This form displays relevant information about each iteration of lists generated for the currently selected start point and piping system. The forward button . displays the next tag index, and the back button . displays the previous tag index.","In . (), the user selects the number one for the tag index from the drop-down list. This will control what portion of the system will report. The piping system will have multiple indexes due to revisions and modifications. In this case, it would have the default and a one because this system has been tagged two times. This drop-down list . allows the user to select the index for which the four reports (draftsman, shop, field and summary) will be generated. In this example, the index of one has been selected.","The naming convention that is automatically created for the PDF export of the reports will show the tag index in the file name (). The original reports have the (default) appended to the file name, indicating that these are the reports from the first tagging of the system. The files with the (tag1) appended to the file name are the reports from the second tagging of the system or index one.","In , the new branch line pieces a., b., c. and d. (.) on the branch line b-\/b-. (.) have the original piece ID with the tag index appended separated by a \u201c.\u201d. This gives a visual indicator that these pieces are part of tag index one. Also in . the new branch line number b-. has been concatenated onto the previous branch line number b- separated by a \u201c\/\u201d. This indicates that this branch line has new pieces on it for tag index one. In . the user sees a completely new branch line b-. for the tag index one. This happens because this was not a modification of an existing branch line but a completely new branch line.","Another feature of PYROCAD is the remove tag utility. In . the remove tag button allows the user to remove the tags from the system one index at a time or all tags at once.  is the dialog box with which the user is presented to make the selection to either delete all tags by pressing yes or only the latest tag index by pressing no. This is a useful utility if the user wants to set a piping system back to its original state prior to the fabrication process. This could be used if there was a desire to label the piping system with different branch . or main . tag labels or if the user wanted to change the base tag layer . to another layer.",{"@attributes":{"id":"p-0360","num":"0359"},"figref":["FIG. 113","FIG. 57.35","FIG. 113.9"],"b":["113","1","113","2","113","3","113","4","113","5","113","6","113","7","113","8"]},{"@attributes":{"id":"p-0361","num":"0360"},"figref":["FIG. 114","FIG. 114","FIG. 113","FIG. 114"],"b":["113","1","113","2","114","2","113","3","114","3","113","4","114","4","113","5","114","5","113","6","114","6","113","7","114","7","113","8","114","8"]},"In , the base tag layer . has been frozen, making all tag components invisible on the screen. In , the \u201cpipetagpieceid\u201d layer component . has been frozen, making the piece ID component . invisible on the screen. The screen visibility of each tag component for all tags in the system can be controlled in this manner. In addition, the visibility of all tags in the base tag layer may be turned on or off by the user. This is beneficial because not all information is always desirable for every drawing. For example, the installation drawing for the field personnel would show the piece ID .; however, the submission drawing for the engineer's review would not. In addition to generating installation drawings, PYROCAD also generates submission drawings, which are based on the installation drawings but omit any information the mechanical engineer may not need or want to see (such as the piece IDs .).","In  five examples of the custom PYROCAD elevation tags are shown. These elevation tags are accessed through the py_tags tool palette . Elevation tags are used to annotate the height of the pipe above a certain reference point and\/or below a certain reference point. As an example, the elevation could be given from the floor slab and the underside of the slab above. If the floor slab equals an elevation of zero, and the underside of the slab above equals 15\u2032-0\u2033, the results would be as shown in . through ..","In AUTOCAD\u00ae MEP pipe objects have inherent data within them that is added by AUTOCAD\u00ae MEP. One such value is the centerline height of the pipe above the zero point in the z coordinate. The PYROCAD elevation tags use this centerline height and apply a form of Visual Basic scripting language provided by AUTOCAD\u00ae MEP in the formula property definition form () to format and expand the usefulness of this information. The PYROCAD elevation tags are multi-view blocks, as are the PYROCAD pipe tags. Multi-view blocks can pull their data from property set data, and this is the case for the PYROCAD elevation tags. There are property set definitions named PYROCADpipeelevationtag, PYROCADpipe_ele_tag_floor_slab_ and PYROCADpipe_ele_tag_floor_slab_ that contain all of the property set definitions for the data that is used in the PYROCAD elevation tags.",{"@attributes":{"id":"p-0365","num":"0364"},"figref":["FIG. 118","FIG. 117","FIG. 118A","FIG. 118A"],"b":["117","1","117","5","118","1","188","2","118","1","118","2","118","1","118","2"]},"There is another variation of the PYROCAD elevation tag that allows the user to overcome an inherent limitation of AUTOCAD\u00ae MEP property set data related to the \u201cz\u201d coordinate. As has been stated, AUTOCAD\u00ae MEP pipe objects automatically have their centerline height information maintain by AUTOCAD\u00ae MEP relative to the zero \u201cz\u201d coordinate. This causes a problem when the floor slab is not at one universal height for the entire piping system. In  a top view of a floor plan that has three different floor slab heights 300\u2032-0\u2033, 299\u2032-0\u2033 and 298\u2032-0\u2033 is shown. As a standard drafting convention, the user will make a choice and decide which elevation in the real world\u2014typically 300\u2032-0\u2033, 299\u2032-0\u2033 or 298\u2032-0\u2033\u2014will be equal to the AUTOCAD\u00ae MEP zero \u201cz\u201d coordinate.","In  the AUTOCAD\u00ae MEP zero \u201cz\u201d coordinate will be considered to be equal to the 299\u2032-0\u2033 slab; therefore, any pipes that are above a 299\u2032-0\u2033 slab would have the correct height because AUTOCAD\u00ae MEP calculates the correct height automatically from zero \u201cz\u201d coordinate, and zero \u201cz\u201d equals 299\u2032-0.\u2033 If the pipe is over a slab of 300\u2032-0\u2033 (a foot higher) or 298\u2032-0\u2033 (a foot lower), the elevation tag needs to compensate. The PYROCAD_pipe_ele_tag_floor_slab_ and PYROCAD_pipe_ele_tag_floor_slab_ pipe tags allow the user to enter the base elevation as a substitute for the AUTOCAD\u00ae MEP zero \u201cz\u201d coordinate elevation. Then PYROCAD will automatically calculate the correct elevation relative to the deviation of slab heights.",{"@attributes":{"id":"p-0368","num":"0367"},"figref":["FIG. 119","FIG. 120","FIG. 119","FIG. 119"],"b":["1","120","1","2","120","2","120","3","120","4","119","1","2","120","2","119","2","119","2"]},"It should be noted that the processing and tagging algorithms, in combination with the traversing algorithm, work together to transform an \u201cunintelligent\u201d virtual piping model into an \u201cintelligent\u201d virtual piping system that can be used for fabrication purposes. Specifically, the processing algorithm analyzes the mains and segments them into proper lengths, adds couplings, resizes branch lines and replaces fittings according to business rules built into the system. The tagging algorithm traverses through the system in a logical manner, grouping branch pipes into branch lines for numbering purposes, numbering mains and branch lines, and attaching to every pipe in the system a tag that reflects the property set data for that pipe. This information is used to generate the installation drawings and fabrication reports that will be used by the shop and field personnel to install the physical piping system.","Although the preferred embodiment of the present invention has been shown and described, it will be apparent to those skilled in the art that many changes and modifications may be made without departing from the invention in its broader aspects. In addition, although the above description relates solely to a fire protection system, the software application described above may also be used in connection with any piping system."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 29"},"FIG. is a screenshot of the AUTOCAD\u00ae content browser from where the PYROCAD\u2122 library is managed shown at the tool palette group level and individual palette level.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 34","b":"2011"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 37","FIG. 36"]},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 39","FIG. 38"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 42"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 43","FIG. 17"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 45"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 50"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 51"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 53"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 55"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 57"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 58"},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 61"},{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 62"},{"@attributes":{"id":"p-0101","num":"0100"},"figref":["FIG. 63","FIG. 62"]},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 64"},{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 65"},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 66"},{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 67"},{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 68"},{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 69"},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 70"},{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 71"},{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 72"},{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 73"},{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 74"},{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 75"},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 76"},{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 77"},{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 78"},{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 79"},{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 80","b":"2011"},{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 81"},{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 82"},{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 83"},{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 84"},{"@attributes":{"id":"p-0123","num":"0122"},"figref":["FIG. 85","FIG. 81"]},{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 86"},{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 87"},{"@attributes":{"id":"p-0126","num":"0125"},"figref":"FIG. 88"},{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 89"},{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 90"},{"@attributes":{"id":"p-0129","num":"0128"},"figref":"FIG. 91"},{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 92"},{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIG. 93","FIG. 92"]},{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 94"},{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 95"},{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIG. 96"},{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 97"},{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 98"},{"@attributes":{"id":"p-0137","num":"0136"},"figref":"FIG. 99"},{"@attributes":{"id":"p-0138","num":"0137"},"figref":"FIG. 100"},{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 101"},{"@attributes":{"id":"p-0140","num":"0139"},"figref":"FIG. 102"},{"@attributes":{"id":"p-0141","num":"0140"},"figref":"FIG. 103"},{"@attributes":{"id":"p-0142","num":"0141"},"figref":"FIG. 104"},{"@attributes":{"id":"p-0143","num":"0142"},"figref":"FIG. 105"},{"@attributes":{"id":"p-0144","num":"0143"},"figref":"FIG. 106"},{"@attributes":{"id":"p-0145","num":"0144"},"figref":"FIG. 107"},{"@attributes":{"id":"p-0146","num":"0145"},"figref":"FIG. 108"},{"@attributes":{"id":"p-0147","num":"0146"},"figref":"FIG. 109"},{"@attributes":{"id":"p-0148","num":"0147"},"figref":"FIG. 110"},{"@attributes":{"id":"p-0149","num":"0148"},"figref":"FIG. 111"},{"@attributes":{"id":"p-0150","num":"0149"},"figref":"FIG. 112"},{"@attributes":{"id":"p-0151","num":"0150"},"figref":"FIG. 113"},{"@attributes":{"id":"p-0152","num":"0151"},"figref":["FIG. 114","FIG. 112"]},{"@attributes":{"id":"p-0153","num":"0152"},"figref":"FIG. 115"},{"@attributes":{"id":"p-0154","num":"0153"},"figref":"FIG. 116"},{"@attributes":{"id":"p-0155","num":"0154"},"figref":"FIG. 117"},{"@attributes":{"id":"p-0156","num":"0155"},"figref":"FIG. 118"},{"@attributes":{"id":"p-0157","num":"0156"},"figref":"FIG. 119"},{"@attributes":{"id":"p-0158","num":"0157"},"figref":"FIG. 120"},{"@attributes":{"id":"p-0159","num":"0158"},"figref":"FIG. 121"},{"@attributes":{"id":"p-0160","num":"0159"},"figref":"FIG. 122"},{"@attributes":{"id":"p-0161","num":"0160"},"figref":"FIG. 123"},{"@attributes":{"id":"p-0162","num":"0161"},"figref":"FIG. 124"},{"@attributes":{"id":"p-0163","num":"0162"},"figref":["FIG. 125","FIG. 123"]},{"@attributes":{"id":"p-0164","num":"0163"},"figref":"FIG. 126"},{"@attributes":{"id":"p-0165","num":"0164"},"figref":"FIG. 127"},{"@attributes":{"id":"p-0166","num":"0165"},"figref":"FIG. 128"},{"@attributes":{"id":"p-0167","num":"0166"},"figref":"FIG. 129"},{"@attributes":{"id":"p-0168","num":"0167"},"figref":"FIG. 130"},{"@attributes":{"id":"p-0169","num":"0168"},"figref":"FIG. 131"},{"@attributes":{"id":"p-0170","num":"0169"},"figref":"FIG. 132"},{"@attributes":{"id":"p-0171","num":"0170"},"figref":"FIG. 133"},{"@attributes":{"id":"p-0172","num":"0171"},"figref":"FIG. 134"},{"@attributes":{"id":"p-0173","num":"0172"},"figref":"FIG. 135"},{"@attributes":{"id":"p-0174","num":"0173"},"figref":"FIG. 136"},{"@attributes":{"id":"p-0175","num":"0174"},"figref":"FIG. 137"},{"@attributes":{"id":"p-0176","num":"0175"},"figref":"FIG. 138"},{"@attributes":{"id":"p-0177","num":"0176"},"figref":"FIG. 139"},{"@attributes":{"id":"p-0178","num":"0177"},"figref":"FIG. 140"},{"@attributes":{"id":"p-0179","num":"0178"},"figref":"FIG. 141"},{"@attributes":{"id":"p-0180","num":"0179"},"figref":["FIG. 142","FIG. 140"]},{"@attributes":{"id":"p-0181","num":"0180"},"figref":"FIG. 143"},{"@attributes":{"id":"p-0182","num":"0181"},"figref":"FIG. 144"},{"@attributes":{"id":"p-0183","num":"0182"},"figref":["FIG. 145","FIG. 144"]}]},"DETDESC":[{},{}]}
