---
title: Method and system for authoring a soundscape for a media application
abstract: A method and system are provided for allowing a sound designer to design and implement interactive soundscapes based on existing waveform audio files, MIDI files, or audio streams. This is accomplished by using a set of tools consisting of an authoring tool for creating specifications of interactive soundscapes visually without having to write complex code, and a graph builder object that recreates the authored soundscape and interacts with it in real-time according to its specification. To give non-programmers the ability to specify and test how a soundscape will interact with programmatic events and user input in an application, the following tools are also provided: an interface to construct a “control panel;” a graphical “trigger-condition-action” specification that defines what actions to take when input from the control panel or application interface is received; a preview mode that enables the sound designer to interact with the soundscape in the same way that the application will; and the ability to save the soundscape as a file that can be edited or used at run-time to recreate the soundscape. Once the interface between the soundscape and the application has been agreed to, the tools allow the sound designer to work independently of the programmer of the media application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07039478&OS=07039478&RS=07039478
owner: Microsoft Corporation
number: 07039478
owner_city: Redmond
owner_country: US
publication_date: 20040616
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application is a continuation of U.S. application Ser. No. 09\/433,612, filed Nov. 2, 1999, now U.S. Pat. No. 6,757,573 priority from the filing date of which is hereby claimed under 35 U.S.C. \u00a7 120.","This invention relates generally to writing media computer applications, and more particularly to designing and implementing interactive soundscapes.","The demand for sophisticated interactive audio designs in interactive media applications today is great, for example, in the area of computer games. However, there is a lack of skilled developers who also have strong sound design skills. To address this deficiency, many development groups use the services of sound designers and other multimedia professionals with expertise in producing and designing audio for applications.","The dichotomy of skills between developer and sound designer naturally creates a dependent relationship. Unfortunately, this relationship can be quite inefficient for a number of reasons. First, existing tools for interactive sound design are more complicated than desired for the average skilled sound designer or other non-programmer. Thus, sound designers are completely dependent on developers for all experimentation, testing, and editing of their soundscapes. Second, the lack of tools for sound designers requires developers to spend time modifying code in order to make changes that are purely aesthetic in nature. Developers generally have many responsibilities in addition to the audio portion of an application, and therefore have little time to iterate with sound designers over aesthetic changes in the audio design. These first two problems create a third problem: audio designs cannot be created and modified simultaneously while code is being written. Therefore, the interactive sound and the non-audio design aspects of the application design are a linear process, rather than a parallel process. This inefficiency often results in higher costs for audio design and\/or poorly implemented audio design.","Another significant problem for interactive media developers is the lack of media management tools for either the developer or the sound designer. Therefore, there exists a need for a tool that allows a sound designer to develop and test a soundscape. This tool should enable the sound designer to work independently of the developer of a media application, thereby allowing for the parallel development of the audio and non-audio portions of a media application.","The present invention is directed to providing a set of tools for designing and implementing interactive soundscapes based on existing audio files, such as waveform audio files, MIDI files, or audio streams. These tools allow the sound designer to work independently of, and in parallel with, the developer of a media application.","In accordance with an aspect of the invention, the tools include a user interface that enables a sound designer to create, test and modify a soundscape independently of the application.","In accordance with other aspects of the present invention, the user interface includes a media graph display that enables a sound designer to associate an existing sound file with a node. The media graph gives the sound designer the capability of connecting various nodes.","In accordance with yet other aspects of the present invention, the user interface includes: a control panel display that allows the sound designer to define controls, an action editor that allows the sound designer to associate sounds based on the controls, and a preview display that allows the sound designer to test the media graph using the controls and actions specified.","In accordance with further aspects of the present invention, application programming interface (API) calls are provided that allow the developer access to the soundscape defined by the sound designer.","In accordance with still further aspects of the invention, a run-time engine is provided that accesses the soundscape as specified by the APIs used in the application.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1"},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer , including a processing unit , system memory , and a system bus  that couples various system components including the system memory  to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive  for reading from and writing to a hard disk , a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk , such as a CD-ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer-readable instructions, data structures, program modules, and other data for the personal computer . Although the exemplary environment described herein employs a hard disk , a removable magnetic disk , and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer-readable media that can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus , but may also be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). A display in the form of a monitor  is also connected to the system bus  via an interface, such as a video card or adapter . One or more speakers  may also be connected to the system bus  via an interface, such as an audio adapter . In addition to the display and speakers, personal computers typically include other peripheral output devices (not shown), such as printers.","The personal computer  may operate in a networked environment using logical connections to one or more personal computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local area network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer  or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary, and other means of establishing a communications link between the computers may be used.","The present invention consists of two primary components: a Media Author which is an authoring tool for creating specifications of interactive soundscapes visually without having to write complex code and a media graph run-time graph builder object that recreates the authored soundscape and interacts with it in real-time according to its specification. Sound designers use the Media Author to create media graphs (or soundscapes), that can be graphically represented to display sound sources, filters that manipulate each source, and output mechanisms for playing back the sources. Media graphs created with Media Author are made up of nodes, which are small Active X controls that can provide an audio source, provide a means of audio processing, or play audio data. Nodes have input and output pins to which connections are made by a user in order to establish a series of audio processors for any given audio source. Media Author is also used to specify behaviors of the soundscape in response to programmatic events and input from the host application or Web page. These can be tested in real-time by the sound designer using a preview mode that emulates the real-time responses of the soundscape.","While the present invention was developed to run on a computer with a Microsoft Windows 95, Microsoft Windows 98 or Microsoft Windows NT operating system, it will be appreciated that the invention can be implemented in environments using other operating systems.  is an architecture diagram ideally suited for implementation of the present invention in either a Windows 95, Windows 98 or Windows NT environment running in a computing environment as shown in .","A set of tools  formed in accordance with the invention for designing and implementing interactive soundscapes includes an authoring tool  and soundscape objects , both of which are described later. The soundscape objects  include the objects necessary to build a run-time graph, as described later.","The core audio processing layer  shown in  provides the interface between a DirectSound\/DirectSound 3D component , the SoundScape objects  and custom components .","The DirectSound\/DirectSound 3D component  is preferably a Direct X element that uses hardware to its greatest advantage whenever possible, and emulates hardware features in software if the feature is not present in the hardware. This component is standard in the Windows 95, Windows 98 and Windows NT operating environments.","The other media Application Programming Interfaces (APIs)  are optional media APIs other than DirectSound , such as DirectMusic which is used for interactive music and sampled Musical Instrument Digital Interface (MIDI) instrument playback and DirectShow which is used for streaming audio and video playback, that can be used in conjunction with the interactive soundscape tools .","The custom components  are optional components built by customers to work on top of the Direct Sound Design Studio (DSDS) API  using a set of core audio processing functions. Such components are independent of the authoring tool . For example, a plug-in for a non-Active X platform, such as Netscape or Director, could form a custom component.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3","FIG. 5","FIG. 4"],"b":["200","202","202","204","202","204"]},"It will be appreciated that the development of the media application  and the creation of the sound design  are iterative processes and will complete at different times. The key is that the present invention takes what used to be a linear process and makes it a parallel process. The present invention is directed to a set of tools that allow a sound designer to create and test the audio aspects of a media application independently of the development of the non-audio aspects of the media application. This is accomplished with a user interface, such as the one shown in  and described below.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 4","FIG. 7","FIG. 8","FIG. 9","FIG. 10"],"b":["220","222","224","226"]},"Next, the logic moves to decision block  where a test is made to determine if processing is complete. If so, the logic ends and processing returns to . If not, the logic returns to block , and the logic of blocks \u2013 is repeated until it is determined in decision block  that processing is done.","It will be appreciated that the order of blocks \u2013 may vary depending on the user's selection. In other words, preferably, user interfaces include a graph editor such as the one shown in , a control editor such as the one in , an action editor such as the one in , and a preview display such as the one in , and the user can move between the various user interfaces as desired. There are a few restrictions, such as media graphs must first be in place before controls can be assigned to nodes. The node and controls must be in place before an action can be assigned.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5","b":["240","200"]},"Below is a simple example using high-level APIs:","MFStreamFromFileCreate(&pStream, \u201cFilename.htm\u201d, 0);","MGMediaGraphFromStreamCreate(&pMediaGraph, g_hwnd, 0, NULL, pStream);","pMediaGraph->SetInputValue(L\u201cLoadMySound\u201d, VT_I4, 1);",". . .","pMediaGraph->SetInputValue(L\u201cPlayMySound\u201d, VT_I4, 1);",". . .","pMediaGraph->Release( )","pStream->Release( );","In the example illustrated above, the first few lines load the media graph, \u201cFilename.htm,\u201d provided by the sound designer. The calls to \u201cSetInputValue\u201d may cause one or more triggers in the media graph to \u201cfire\u201d (e.g., the \u201cPlayMySound\u201d SetInputValue may start playing a sound). The calls to \u201cRelease\u201d free the resources used by the program.","Below is an example for playing a sound from disk using low-level APIs:",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003ISECreate (NULL, &pise);"},{"entry":"\u2003\u2003pise\u2192RegisterSoundFileOrURL\u2003(\u201cmusic.wav\u201d,\u2003REGISTER_LOADNONE,"},{"entry":"REGISTER_FILETYPESIMPLE, NULL, NULL, NULL, NULL, &psound);"},{"entry":"\u2003\u2003pise\u2192CreateChannel (CHANNEL_CONTROLVOLUME, NULL, &pchannel);"},{"entry":"\u2003\u2003pise\u2192LoadSoundIntoChannel (pchannel, psound, CHANNEL_LOADOPEN,"},{"entry":"CHANNEL_OPTIMIZEMEMORY, NULL, NULL);"},{"entry":"\u2003\u2003pise\u2192PlaySound (pchannel, psound, 1.0, 0.0, 1.0);"},{"entry":"\u2003\u2003Below is another example using low-level APIs. This example plays three"},{"entry":"gunshots using DirectSound buffers:"},{"entry":"\u2003\u2003ISECreate (NULL, &pise);"},{"entry":"\u2003\u2003pise\u2192RegisterSoundFileOrURL\u2003(\u201cgunshot.wav\u201d, REGISTER_LOADNONE,"},{"entry":"REGISTER_FILETYPESIMPLE, NULL, NULL, NULL, NULL, &psound);"},{"entry":"\u2003\u2003pise\u2192CreateChannel\u2003\u2003\u2003(CHANNEL_FIREANDFORGET\u2003\u2003\u2003|"},{"entry":"CHANNEL_CONTROLVOLUME | CHANNEL_CONTROLPAN, NULL, &pchannel);"},{"entry":"\u2003\u2003pise\u2192LoadSoundIntoChannel (pchannel, psound, CHANNEL_LOADALLFILE,"},{"entry":"CHANNEL_OPTIMIZEPLAYLATENCY, NULL, NULL);"},{"entry":"\u2003\u2003pise\u2192PlaySound (pchannel, psound, 0.8, 0.2);"},{"entry":"\u2003\u2003pise\u2192PlaySound (pchannel, psound, 0.8, 0.2);"},{"entry":"\u2003\u2003pise\u2192PlaySound (pchannel, psound, 0.8, 0.2);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The source code is compiled and linked to create the media application in block . A soundscape API library is linked in the media application. Once the desired application is created, the logic of  ends and processing returns to .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 6","FIG. 5"],"b":"250"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIGS. 7\u201310","FIGS. 7\u201310","FIG. 3","FIGS. 7\u201310","FIGS. 12\u201315"],"b":"204"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 7"},"A node is an Active X control that acts as a media object, that is, an object that is a sound source (produces media data), a sound sink (consumes media data or routes data to an output), a sound filter (transforms media data), a controller (controls behavior of other nodes, for example, stores external data, such as timing information), or some combination thereof (for example, a CrossFade is both a sink because it plays sound from a speaker and a filter because it fades the sound in\/out while playing it out of the speaker). Nodes send and receive data through pins, or input\/output ports, that can be joined with connections to create a data flow graph.","Examples of source nodes include MIDI, Phrase Construction, Record, StreamWav, and URLWave. A MIDI source node provides a sound source for musical data in MIDI format. A Phrase Construction source node allows for the building of a phrase out of individual wave audio files. A wave audio file is used as the source URL that contains cue points (or placeholders) that indicate where to insert the other sounds. The Phrase Construction source node is connected to one or more URLWave or URL collection nodes that provide the individual source wave audio files. The Phrase Construction source node uses the wave audio file referenced by the URL containing cue points to merge the individual wave audio files into a single phrase. A Record source node provides a way for a recording sound in Media Author using devices such as a microphone. The record source node can be used in preview mode, but the recorded sound does not become part of the soundscape of the media application. A stream StreamWav node provides a way to read wave data from an attached IStream object. IStream is an interface that supports reading and writing data to stream objects. The StreamWav node is similar to a URLWave node, except it takes an IStream as the source instead of a URL. A URLWave node provides a sound source from a wave audio file, or a set of wave audio files. It will be appreciated that the source nodes described above are exemplary, and that other source nodes can be used.","A sink node accepts the wave input but does not have any output pins, so data cannot be routed to another node. Sink nodes are the nodes that a sound designer would use to send wave output to a sound device for playback. A sink node constitutes the end of a flow graph and cannot have wave-out pins. Examples of sink nodes include: Channel, ChannelPool, CrossFade, StaticChannelPool, and WavWrite. A Channel node plays audio data that is sent to it. In other words, it allows audio data to be streamed to a local sound device. A ChannelPool node allows for the playing of different sounds simultaneously. A ChannelPool node should be used in situations where sounds need to be played one after another; for example, for the sound of gunshots being fired in rapid succession. A CrossFade node allows for cross-fading different source files between channels. This is done by allocating a new channel, connecting the input pin to the new channel, and increasing the volume of the new channel while decreasing the volume of the existing channel. CrossFade nodes can also be used to fade in or fade out a single sound. A StaticChannelPool node allows for the playing of different sounds simultaneously, and differs from the ChannelPool node in that it loads wave audio data ahead of time, i.e., before playing the sound, into a static buffer. A WavWrite node copies sound data from its input to an IStream in wave audio format. It will be appreciated that the sink nodes described above are exemplary, and that other sink nodes can be used.","Examples of filter nodes include: Append, Clip, Envelope, Loop, Mix, Resample, Speed, and Splitter. An Append node allows for the stringing of multiple sound sources one after the other. A Clip node allows for the use of a part of a sound source by clipping the sound file either at the beginning or the end. An Envelope node allows for the creation of a \u201cfade in\u201d and \u201cfade out\u201d effect which is accomplished by increasing and decreasing the volume to and from silence as the sound sources plays. A Loop node allows for the repeated playing of a sound source. A Mix node allows for the combination of multiple sound sources into a single output. The Mix node differs from the Append node in that the Append node plays source files sequentially, whereas the Mix node plays source files simultaneously. A Resample node allows for the modification of the number of channels and the sample rate that a sound source uses. For example, if the original sound source is stereo, the data rate can immediately be reduced by half by using the Resample node to change the sound to a mono sound. Data rate is affected by sample rate. In the stereo vs. mono example above, the data rate is reduced by half because the number of channels, or streams, is reduced by half, i.e., mono only uses one channel, whereas stereo uses two discrete channels. A Speed node allows for the changing of the frequency (pitch) of a sound source. A Splitter node allows for the separation of a single sound source into multiple outputs. This allows for the use of the same source file in two or more channel nodes. It will be appreciated that the filter nodes described above are exemplary, and that other filter nodes can be used.","An example of a control node is a URLCollection Node. A URLCollection node provides a way to specify a set of URLs as the source files. The source files can be played randomly or in a specific order and do not have to be located in the same directory. It will be appreciated that the control node described above is exemplary, and that other control nodes can be used.","The example media graph shown in the graph editor user interface of  is a simple media graph that includes two nodes: a StaticChannelPool node , and a URLCollection node . The URLCollection node  is connected to the StaticChannelPool node  by attaching a connector  between an input node pin  and an output node pin . Each node has properties associated with it. For example, some of the properties associated with a StaticChannelPool node include a title, and attributes, such as: allowing volume control, allowing pan control, loading media asynchronously, and a maximum channels value. Properties for a URLCollection node include: whether or not the selection of URLs is random, and a list of URLs associated with the URL collection node .",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 8","FIG. 7","FIG. 10","FIG. 8","FIG. 7","FIG. 8","FIG. 10"],"b":["310","312","314","316","318","320","322"]},"Actions are assigned to the controls created in the control editor of  using the action editor shown in . Actions can be performed in response to a trigger, such as clicking a button. Actions can be performed based on whether or not a certain condition is true. For example, a specific wave audio file can be played when a command button is clicked or when an event from a node is received. Events are set up by creating triggers, conditions, and actions.","A trigger sets the ball in motion. Once a trigger occurs, conditions defined in the action editor are tested. The actions are executed if the conditions are met. There are two ways to set off a trigger: interacting with one of the controls, or receiving an event from a node.","A condition is an expression that is tested to see if it is true or false. If the condition is true, the actions are executed. There are three types of conditions: checking the value of a control, checking the parameter value of an event, or checking the value of a node property.","An action occurs when the condition is true and when the trigger happens. There are three types of actions: setting a control to a specific value, calling a method on a node, or setting a node property.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 10","FIG. 7","FIG. 9","FIG. 8"]},"Preferably, the user can also save the soundscape as a HyperText Markup Language (HTML) file. The sound designer can then test the soundscape using a Web browser.  is a browser screen display of the preview display shown in . Appendix A is the HTML file used to render the display shown in .",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIGS. 12\u201315","FIGS. 7\u201310","FIG. 12","FIG. 13","FIG. 14","FIG. 15","FIG. 12","FIG. 13","FIG. 14"]},"While the preferred embodiment of the invention has been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention as defined by the appended claims.",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}},"thead":{"row":[{"entry":"APPENDIX A"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<HTML>"},{"entry":"<HEAD>"},{"entry":"\u2003\u2003<TITLE>User Interface Sound Effects DSDS MediaGraph Object 2.2<\/TITLE>"},{"entry":"<\/HEAD>"},{"entry":"<BODY BGCOLOR=#000000 TEXT=#00FF00 LANGUAGE=\u201cVBScript\u201d"},{"entry":"OnLoad=\u201cDoOnLoad\u201d>"},{"entry":"<object CLASSID=\u201cclsid:1E9CB887-EAAF-11D1-A3BF-0060B0C2587C\u201d"},{"entry":"width=\u201c0%\u201d height=\u201c0%\u201d id=MediaGraph>"},{"entry":"<PARAM name=\u201cConnections(1)\u201d value=\u201c1:21\u20132:2\u201d>"},{"entry":"<PARAM name=\u201cEvents(1)\u201d"},{"entry":"value=\u201c0,T,,S:LeftCheckBox,A,,EvaluateCheckBoxes=0,A,,UISoundPool.Play(1\u20322C3\u20322"},{"entry":"C1\u20322C-1)\u201d>"},{"entry":"<PARAM name=\u201cEvents(2)\u201d"},{"entry":"value=\u201c0,T,,S:MiddleCheckBox,A,,EvaluateCheckBoxes=0,A,,UISoundPool.Play(1\u20322C"},{"entry":"3\u20322C1\u20322C0)\u201d>"},{"entry":"<PARAM name=\u201cEvents(3)\u201d"},{"entry":"value=\u201c0,T,,S:RightCheckBox,A,,EvaluateCheckBoxes=0,A,,UISoundPool.Play(1\u20322C3\u2032"},{"entry":"2C1\u20322C1)\u201d>"},{"entry":"<PARAM name=\u201cEvents(4)\u201d"},{"entry":"value=\u201c0,T,,S:LoadMediaInput,CB,,LoadMediaInput=1,A,,UISoundPool.LoadMedia(1\u2032"},{"entry":"2C1\u20322C1),CE,CB,,LoadMediaInput=2,A,,UISoundPool.LoadMedia(1\u20322C2\u20322C2),CE,CB,,"},{"entry":"LoadMediaInput=3,A,,UISoundPool.LoadMedia(1\u20322C3\u20322C3),CE,CB,,LoadMediaInput=4,"},{"entry":"A,,UISoundPool.LoadMedia(1\u20322C4\u20322C4),CE,CB,,LoadMediaInput=5,A,,UISoundPool."},{"entry":"LoadMedia(1\u20322C5\u20322C5),CE\u201d>"},{"entry":"<PARAM name=\u201cEvents(5)\u201d"},{"entry":"value=\u201c0,T,,S:ActionList,CB,,ActionList=\u203222MouseOver\u203222,A,,UISoundPool.Play(1\u20322"},{"entry":"C1\u20322C1\u20322C0),CE,CB,,ActionList=\u203222ActionButton\u203222,A,,UISoundPool.Play(1\u20322C2\u20322C"},{"entry":"1\u20322C0),CE,CB,,ActionList=\u203222LeftCheckBox\u203222,A,,UISoundPool.Play(1\u20322C3\u20322C1\u20322C-"},{"entry":"1),CB,,LeftCheckBox=0,A,,LeftCheckBox=1,A,,EvaluateCheckBoxes=1,CE,CB,,LeftCheck"},{"entry":"Box=1,A,,LeftCheckBox=0,CE,CE,CB,,ActionList=\u203222MiddleCheckBox\u203222,A,,UI"},{"entry":"SoundPool.Play(1\u20322C3\u20322C1\u20322C0),CB,,MiddleCheckBox=0,A,,MiddleCheckBox=1,A,,Evaluate"},{"entry":"CheckBoxes=1,CE,CB,,MiddleCheckBox=1,A,,MiddleCheckBox=0,CE,CE,CB,,"},{"entry":"ActionList=\u203222RightCheckBox\u203222,A,,UISoundPool.Play(1\u20322C3\u20322C1\u20322C1),CB,,RightCheck"},{"entry":"Box=0,A,,RightCheckBox=1,A,,EvaluateCheckBoxes=1,CE,CB,,RightCheckBox=1,"},{"entry":"A,,RightCheckBox=0,CE,CE,CB,,ActionList=\u203222ComboBox\u203222,A,,UISoundPool.Play("},{"entry":"1\u20322C5\u20322C1\u20322C0),CE\u201d>"},{"entry":"<PARAM name=\u201cEvents(6)\u201d"},{"entry":"value=\u201c0,T,,S:EvaluateCheckBoxes,CB,,LeftCheckBox=1,CB,,MiddleCheckBox=1,CB,,"},{"entry":"RightCheckBox=1,A,,EvaluateCheckBoxes=0,A,,UISoundPool.Play(1\u20322C4\u20322C1\u20322C0),"},{"entry":"CE,CE,CE\u201d>"},{"entry":"<PARAM name=\u201cInputs(1)\u201d value=\u201c0,LoadMediaInput,,3,1\u201d>"},{"entry":"<PARAM name=\u201cInputs(2)\u201d value=\u201c0,ActionList,,8,\u203222MouseOver\u203222\u201d>"},{"entry":"<PARAM name=\u201cInputs(3)\u201d value=\u201c0,LeftCheckBox,,11,0\u201d>"},{"entry":"<PARAM name=\u201cInputs(4)\u201d value=\u201c0,MiddleCheckBox,,11,0\u201d>"},{"entry":"<PARAM name=\u201cInputs(5)\u201d value=\u201c0,RightCheckBox,,11,0\u201d>"},{"entry":"<PARAM name=\u201cInputs(6)\u201d value=\u201c0,EvaluateCheckBoxes,,8,\u203222\u203222\u201d>"},{"entry":"<PARAM name=\u201cInputs(7)\u201d value=\u201c0,notusedatruntime,,8,\u203222When all checkboxes are"},{"entry":"checked a flourish will sound\u203222\u201d>"},{"entry":"<PARAM name=\u201cNodes(1)\u201d value=\u201cStaticChannelPool,Name:UISoundPool\u201d>"},{"entry":"<PARAM name=\u201cNodes(2)\u201d"},{"entry":"value=\u201cURLCollection,Name:UISoundCollection,URLs(1):\\\\Imt\\public\\DSDS22_Demos\\"},{"entry":"RefBU\\Sounds\\m_over.wav,URLs(2):\\\\Imt\\public\\DSDS22_Demos\\RefBU\\Sounds\\m_down."},{"entry":"wav,URLs(3):\\\\Imt\\public\\DSDS22_Demos\\RefBU\\Sounds\\snap01.wav,URLs(4):"},{"entry":"\\\\Imt\\public\\DSDS22_Demos\\RefBU\\Sounds\\servoL2R.wav,URLs(5):\\\\Imt\\public\\DS"},{"entry":"DS22_Demos\\RefBU\\Sounds\\flydownC2RQ.wav\u201d>"},{"entry":"(The MediaGraph Object has failed to load.)"},{"entry":"<\/object>"},{"entry":"<SCRIPT LANGUAGE=\u201cVBScript\u201d>"},{"entry":"Sub DoOnLoad"},{"entry":"\u2003\u2003InitializeSounds"},{"entry":"End Sub"},{"entry":"Sub InitializeSounds"},{"entry":"on error resume next"},{"entry":"if( Err ) then"},{"entry":"\u2003\u2003msgbox \u201cMediaGraph is not installed.\u201d"},{"entry":"\u2003\u2003Window.location.href = \u201c..\/Install\/Default.htm\u201d"},{"entry":"\u2003\u2003Err.Clear"},{"entry":"end if"},{"entry":"\u2003\u2003\u2032Load the WAV Sources..."},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cLoadMediaInput\u201d) = 1"},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cLoadMediaInput\u201d) = 2"},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cLoadMediaInput\u201d) = 3"},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cLoadMediaInput\u201d) = 4"},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cLoadMediaInput\u201d) = 5"},{"entry":"End Sub"},{"entry":"Sub btnAction_OnClick"},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cActionList\u201d) = \u201cActionButton\u201d"},{"entry":"End sub"},{"entry":"Sub ref1_OnMouseOver"},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cActionList\u201d) = \u201cMouseOver\u201d"},{"entry":"End Sub"},{"entry":"Sub SelectBox_OnChange"},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cActionList\u201d) = \u201cComboBox\u201d"},{"entry":"End Sub"},{"entry":"Sub DoCheckBox1"},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cActionList\u201d) = \u201cRightCheckBox\u201d"},{"entry":"End Sub"},{"entry":"Sub DoCheckBox2"},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cActionList\u201d) = \u201cMiddleCheckBox\u201d"},{"entry":"End Sub"},{"entry":"Sub DoCheckBox3"},{"entry":"\u2003\u2003MediaGraph.InputValues(\u201cActionList\u201d) = \u201cLeftCheckBox\u201d"},{"entry":"End Sub"},{"entry":"<\/SCRIPT>"},{"entry":"<CENTER>"},{"entry":"<H1>DirectSound Design Studio 2.2<\/H1>"},{"entry":"<H2>Simple UI Sound Effects Using the MediaGraph Object<\/H2>"},{"entry":"<\/CENTER>"},{"entry":"<br>"},{"entry":"<br>"},{"entry":"<CENTER>"},{"entry":"<FORM NAME=\u201cMainForm\u201d>"},{"entry":"\u2003\u2003<A NAME=ref1>Pass Mouse Over me!<\/A><P>"},{"entry":"\u2003\u2003Click Me! <INPUT TYPE=BUTTON NAME=btnAction VALUE=\u201cAction"},{"entry":"Button\u201d><P>"},{"entry":"\u2003\u2003<INPUT TYPE=CHECKBOX NAME=cbCheck1"},{"entry":"OnClick=\u201cDoCheckBox3\u201d>Check Left Speaker!"},{"entry":"\u2003\u2003<INPUT TYPE=CHECKBOX NAME=cbCheck2"},{"entry":"OnClick=\u201cDoCheckBox2\u201d>Check Both Speakers!"},{"entry":"\u2003\u2003<INPUT TYPE=CHECKBOX NAME=cbCheck3"},{"entry":"OnClick=\u201cDoCheckBox1\u201d>Check Right Speaker!<p>"},{"entry":"\u2003\u2003Select one of my items:"},{"entry":"\u2003\u2003<SELECT NAME=\u201cSelectBox\u201d SIZE=\u201c1\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<OPTION VALUE=\u201c0\u201d>One"},{"entry":"\u2003\u2003\u2003\u2003<OPTION VALUE=\u201c1\u201d>Two"},{"entry":"\u2003\u2003\u2003\u2003<OPTION VALUE=\u201c2\u201d>Three"},{"entry":"\u2003\u2003\u2003\u2003<OPTION VALUE=\u201c3\u201d>Four"},{"entry":"\u2003\u2003<\/SELECT><p>"},{"entry":"<\/FORM>"},{"entry":"<\/CENTER>"},{"entry":"<HR>"},{"entry":"UI Sounds:"},{"entry":"<UL>"},{"entry":"\u2003\u2003<LI> Mousing Over Text (IE 4 only)"},{"entry":"\u2003\u2003<LI> Clicking a button"},{"entry":"\u2003\u2003<LI> Selecting an Item from a drop down list"},{"entry":"\u2003\u2003<LI> Clicking CheckBoxes"},{"entry":"\u2003\u2003<LI> Special SoundFX when all CheckBoxes are checked"},{"entry":"<\/UL>"},{"entry":"<\/BODY>"},{"entry":"<\/HTML>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 9","FIG. 7","FIG. 8"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 10","FIG. 7","FIG. 8","FIG. 9"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 11","FIGS. 7\u201310"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 13","FIG. 12"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 14","FIG. 12","FIG. 13"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 15","FIG. 12","FIG. 13","FIG. 14"]}]},"DETDESC":[{},{}]}
