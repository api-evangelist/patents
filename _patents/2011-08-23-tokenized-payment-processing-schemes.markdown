---
title: Tokenized payment processing schemes
abstract: A payment processing system for accepting manually-entered payment-card numbers. Rather than entering a payment-card account number into an application module, the card number is instead captured and stored within a tokenizer prior to being sent to the application module. The tokenizer then returns a random token to the calling application as a pointer to the original payment-card number. The token has no algorithmic relationship with the original payment-card number, so that the payment-card number cannot be derived based on the token itself. Since the token is not considered cardholder data, the token may be used in an application module without the module or its connected hardware from being subject to regulatory standards compliance. Some embodiments involve browser-based schemes, and some embodiments involve PIN-entry device-based schemes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08763142&OS=08763142&RS=08763142
owner: Princeton Payment Solutions
number: 08763142
owner_city: Princeton
owner_country: US
publication_date: 20110823
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Tokenizer","Payment-Card Number Input","Application Module","Payment-Card Middleware","Bulk Data Migration","Packet Inspector","Browser-Based Embodiments","PIN-Pad-Based Embodiments","Alternative Embodiments and Variations"],"p":["This application claims priority to U.S. Provisional Patent Application Ser. No. 61\/376,245, filed Aug. 23, 2010, the disclosure of which is incorporated herein by reference in its entirety. This application also claims priority to co-pending U.S. Provisional Patent Application Ser. No. 61\/426,074, filed Dec. 22, 2010, the disclosure of which is incorporated herein by reference in its entirety. This application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 12\/755,459, filed Apr. 7, 2010, which claims priority to co-pending U.S. Provisional Patent Application Ser. No. 61\/167,221, filed Apr. 7, 2009, the disclosures of both of which are incorporated herein by reference in their entirety.","1. Field of the Invention","The present invention relates to the introduction, storage, and use of confidential information in corporate enterprise systems, and, more specifically but not exclusively, to the use of tokens as substitutes for confidential information in such systems.","2. Description of the Related Art","The payment-card industry (PCI), in response to the growing theft of payment-card data resulting from inadequate information technology security, has had an evolving set of security standards. Initially, the payment-application best-practices (PABP) guidelines promulgated by the industry required merchants to encrypt card numbers.","Limitations in the PABP guidelines resulted in the September, 2006 release of version 1.1 of the PCI Data-Security Standard (DSS) and the related PCI Security-Audit Procedures. These programs required more than mere encryption and mandated compliance in order to process payment-card transactions. Under these programs, merchants are required to document their compliance with the DSS, depending on their annual volumes. The largest merchants must undergo an on-site audit to verify merchant and processor compliance. Medium-sized and smaller merchants are permitted to complete a self-assessment, attesting that various security features and programs have been implemented.","According to the DSS standards, cardholder data is defined as any clear or encrypted primary account number (PAN). The DSS standards declare that any system that \u201cprocesses, stores, or transmits\u201d cardholder data, as well as any system on the same network segment (e.g., one of a plurality of subnetworks making up a corporate network), must comply with the requirements of the DSS standards.","Additionally, certain personally-identifiable information (PII) may also give rise to regulatory scrutiny, e.g., by federal law or the laws of individual states in the United States. The term PII refers to information that can be used to uniquely identify, contact, or locate a single person or can be used with other sources to uniquely identify a single individual. For example, in a 2007 memorandum from the Executive Office of the President, Office of Management and Budget (OMB), the U.S. Government defined PII information as: \u201cInformation which can be used to distinguish or trace an individual's identity, such as their name, social security number, biometric records, etc. alone, or when combined with other personal or identifying information which is linked or linkable to a specific individual, such as date and place of birth, mother's maiden name, etc.\u201d","Similarly, in the European Union, Article 2a of EU directive 95\/46\/EC defines \u201cpersonal data\u201d as meaning \u201cany information relating to an identified or identifiable natural person (\u2018data subject\u2019); an identifiable person is one who can be identified, directly or indirectly, in particular by reference to an identification number or to one or more factors specific to his physical, physiological, mental, economic, cultural or social identity.\u201d","Likewise, \u201cpersonal information\u201d is defined in a section of the California data breach notification law, SB1386, as meaning \u201can individual's first name or first initial and last name in combination with any one or more of the following data elements, when either the name or the data elements are not encrypted: (1) social security number; (2) driver's license number or California Identification Card number; (3) account number, credit or debit card number, in combination with any required security code, access code, or password that would permit access to an individual's financial account.\u201d","Compliance with DSS standards and other regulatory requirements of various jurisdictions typically requires that all computer systems involved in the processing of unencrypted sensitive data, such as PCI and PII data, and possibly including an entire corporate data center, be compliant with such standards and requirements. The cost of compliance, as well as the cost of verifying compliance, can be substantial, both operationally and financially.","Problems in the prior art are addressed in accordance with the principles of the present invention by providing a data-processing system, such as a payment processing system, including a tokenizer, such as a card encryption and storage system (CES) employing a tokenization feature. With tokenization, rather than entering confidential information, such as a payment-card account number, into an application module, such as an enterprise resource-planning (ERP) system (e.g., SAP ERP), the confidential information is instead captured and stored within the tokenizer prior to being sent to the application module. The tokenizer then returns a random string called a \u201ctoken\u201d to the calling application as a pointer to the original payment-card number. The token preferably has no algorithmic relationship with the original payment-card number, so that the payment-card number cannot be derived based on the token itself (such as by merely applying a decryption algorithm to the token). Accordingly, this token is not considered cardholder data, because it is a random string from which it is not possible to extrapolate any original cardholder data without the use of the tokenizer, which contains a list of payment-card numbers and the tokens to which they correspond. As such, the token may be used in an application module without the application module having to comply with regulatory standards, e.g., the PCI DSS standards.","Under the PCI DSS regulatory scheme, if cardholder data (including any clear or encrypted payment-card account number) is present in an application module, either alone or together with a cardholder name, service code, and\/or expiration date, then the application module is within the scope of regulatory scrutiny. Accordingly, if cardholder data can be replaced by some other, non-account-number string, then a host application no longer employs cardholder data and is out of the scope of PCI DSS regulatory scrutiny.","Various embodiments of the invention provide systems, methods, and apparatuses for preventing the transmission of confidential information between computers in a card-payment processing scheme in which payment-card numbers can be manually entered. Some embodiments involve browser-based schemes, and some embodiments involve PIN-entry device-based schemes.","In one embodiment, the present invention provides a first-computer-implemented method for preventing the transmission of confidential information between a first computer and a second computer in communication with the first computer. The method includes: (a) the first computer receiving information for performing a transaction, the information including confidential information manually entered by a user; (b) the first computer sending the confidential information to a third computer; (c) the first computer receiving, from the third computer, an executable script containing a token having no algorithmic relationship to the confidential information; (d) the first computer executing the script to obtain the token; and (e) the first computer sending to the second computer (i) the information for performing the transaction, except for the confidential information, and (ii) the token.","In another embodiment, the present invention provides an apparatus for preventing the transmission of confidential information to a second computer in communication with the apparatus. The apparatus is adapted to: (a) receive information for performing a transaction, the information including confidential information manually entered by a user; (b) send the confidential information to a third computer; (c) receive, from the third computer, an executable script containing a token having no algorithmic relationship to the confidential information; (d) execute the script to obtain the token; and (e) send to the second computer (i) the information for performing the transaction, except for the confidential information, and (ii) the token.","In yet another embodiment, the present invention provides a first-computer-implemented method for preventing the transmission of confidential information between a first computer and a second computer in communication with the first computer. The method includes the steps of: (a) the first computer receiving, from an entry device in communication with the first computer, information for performing a transaction, the information including confidential information manually entered by a user on the entry device; (b) the first computer sending the confidential information to a third computer; (c) the first computer receiving, from the third computer, a token having no algorithmic relationship to the confidential information; and (d) the first computer sending to the second computer (i) the information for performing the transaction, except for the confidential information, and (ii) the token.","In a further embodiment, the present invention provides an apparatus for preventing the transmission of confidential information between a first computer and a second computer in communication with the first computer. The apparatus is adapted to: (a) receive, from an entry device in communication with the first computer, information for performing a transaction, the information including confidential information manually entered by a user on the entry device; (b) send the confidential information to a third computer; (c) receive, from the third computer, a token having no algorithmic relationship to the confidential information; and (d) send to the second computer (i) the information for performing the transaction, except for the confidential information, and (ii) the token.","In some embodiments, the executable script is a JavaScript Object Notation (JSON) script.","In some embodiments, in step (b), the first computer sends the confidential information to a third computer via a proxy server; and in step (c), the first computer receives the executable script from the third computer via the proxy server.","In some embodiments, at least one of steps (b) and (c) employs a port-forwarding scheme.","In some embodiments, the scheme further includes the first computer receiving the confidential information by means of the user typing the confidential information into an entry field of a window displayed by a software program; and the first computer replacing the confidential information in the entry field of the window of the software program with the token.","In some embodiments, the first computer receives the token in the form of a function call argument.","In some embodiments, the confidential information manually entered by the user on the entry device is provided to the first computer in encrypted form; the form of encryption employs one or more keys for decrypting the confidential information; and the first computer does not have the one or more keys.","In some embodiments, the entry device is coupled to the first computer via a Universal Serial Bus (USB) interface.","In some embodiments, the entry device is a PIN-entry pad having firmware configured to: accept, via keypad entry, a number longer than four digits and sufficiently long to accommodate a payment-card number; encrypt the number; and output, to the first computer, the encrypted number in step (a).","In some embodiments, the number is encrypted using a Derived Unique Key Per Transaction (DUKPT) key-management scheme.","In still a further embodiment, the present invention provides a method for generating an encrypted payment-card number. The method includes: accepting, via a keypad, a number longer than four digits and sufficiently long to accommodate a payment-card number; encrypting the number; and outputting, via an interface, the encrypted number.","In yet a further embodiment, the present invention provides a payment-card number entry device. The device includes: a keypad; a processor; an interface; and a memory containing instructions for the processor to: accept, via the keypad, a number longer than four digits and sufficiently long to accommodate a payment-card number; encrypt the number; and output, via the interface, the encrypted number.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 1","b":["100","100","120","110","140","150","130","110","140","120","110","140","150","150","130","150","120","160"]},"Whether payment-card data is entered through web store  or through input module , by tokenizing before capture, tokenizer  protects and isolates cardholder data by providing tokens for downstream processing, which prevents application module  from being subject to regulatory scrutiny.","Payment-processing system  is compliant with, e.g., the PCI DSS standards, which require that \u201cin-scope\u201d systems (i.e., systems falling within the scope of regulation of the PCI DSS standards) be isolated from the rest of the corporate network, e.g., via a firewall. The DSS standards also require that public Internet-facing web servers be isolated as well. Payment-processing system  therefore employs three \u201cin-scope\u201d network segments, or zones, for PCI purposes: (i) a web-server zone including web store , (ii) a customer-service zone including input module , and (iii) a PCI server zone including tokenizer  and payment-card middleware . Achieving and maintaining PCI compliance using these three well-defined and limited network segments and their corresponding functionality can be considerably simpler and more manageable to implement than remediating or modifying large sections of a corporate network.","Tokenizer  includes one or more computers containing a token database  and a token application . Token database , may be implemented using, e.g., a simple look-up table or a more complex database system, such as Oracle Database 10g available from Oracle Corporation of Redwood City, Calif. Token database  contains encrypted payment-card numbers, along with a corresponding token for each encrypted payment-card number in the database.","Token application  encrypts payment-card numbers as they are received and generates random tokens corresponding to those payment-card numbers. In one embodiment, a payment-card number having a value of \u201c371449635398183\u201d might have a corresponding token with a randomly-generated alphanumeric string value of \u201cNc4xWKms.\u201d In another embodiment, part of the token might contain part of the payment-card number, e.g., such that the payment card type (first two digits of the payment-card number, where \u201c37\u201d represents American Express, \u201c40\u201d represents Visa, and \u201c54\u201d represents Mastercard) and last four digits of the card are actually part of the token itself, to assist customers and customer-service representatives in confirming or identifying, generally, the card corresponding to the token. For example, a payment-card number having a value of \u201c371449635398183\u201d might have a corresponding token with a value of \u201c37-Nc4xWKms-8183,\u201d where (i) the first two digits, \u201c37,\u201d identify the card as being of type American Express, (ii) the middle portion of the token is a randomly-generated alphanumeric string, and (iii) the last four digits, \u201c8183,\u201d are usable to confirm the card number with the cardholder, if necessary.","Token application  is desirably implemented as a Java application, so that it can execute on any platform with the Java Runtime Environment (from Sun Microsystems, Inc. of Santa Clara, Calif.) installed. For most workloads (e.g., under 10 million payment-card transactions per year), token application  preferably executes on a machine such as the SunFire 4100 from Sun Microsystems, Inc., System x3650 from IBM Corporation of Armonk, N.Y., or Poweredge 2950 from Dell, Inc. of Round Rock, Tx.","Token application  interfaces with token database  to write information to token database , e.g., to write an encrypted payment-card number and corresponding newly-generated token as a new entry in token database . In one embodiment, a table stored in token database  might contain a table with entries such as the following payment-card number\/token pairs:",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["PAYMENT-CARD NUMBER","CORRESPONDING TOKEN"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["371449635398183","37-Nc4xWKms-8183"]},{"entry":["371449635398290","37-waPaPcx6-8290"]},{"entry":["4012000033330232","40-sdkKXnO8-0232"]},{"entry":["4012000033330497","40-dTXeX5NN-0497"]},{"entry":["5424180279790213","54-9HcfZNH2-0213"]},{"entry":["5424180279790494","54-2CZYVkSt-0494"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Token application  also interfaces with token database  to read information from token database , e.g., to retrieve a payment-card number based on a given token, or to retrieve a token for a payment-card number that has already been stored. Token application  further interfaces, using a secure-socket layer (SSL) protocol, with one or both of web store  and input module , e.g., to respond to a request to generate a new token or retrieve a previously-generated token from token database  based on a payment-card number. Token application  further interfaces with payment-card middleware , e.g., to respond to a request to retrieve a payment-card number based on a supplied token.","It is desirable that multiple instances of token application  execute in parallel within tokenizer , to provide redundancy and stability, and it is further desirable that at least two instances of token application  be running full-time, one in a primary location and one in a backup location (e.g., on different computers\/processors). Likewise, token database  is desirably stored in more than a single location to provide redundancy, and tokenizer  may therefore include a primary database server in the primary location, which is backed up by a recovery database server in the backup location.","For interfacing with source applications, such as web sites and related applications (e.g., web store ), tokenizer  employs (i) either a hyper-text transport protocol (HTTP) or secure-HTTP (HTTPS) socket interface, in conjunction with (ii) an SSL socket interface. In this scenario, tokenizer  uses two different APIs corresponding to these two interfaces, respectively: (i) an HTTP API, e.g., for communicating name-value pairs (e.g., MIME Type URL Form Encoded, such as \u201caction=CE&data=1234123412341234\u201d), and (ii) a socket API communicating in a fixed format, e.g., \u201cFF0027CE01bbbbbbb1234123412341234,\u201d where the character \u201cb\u201d represents a blank. In both cases, SSL is used to encrypt the transmission. The reason for having two APIs is that the HTTP protocol uses a socket setup\/teardown procedure for each transaction, whereas a socket connection is persistent across many transactions and is therefore more suitable for high-volume interactions, such as with payment-card middleware , which needs to detokenize many transactions in short timeframes.","A single request-response call from web store  sends the payment-card number in clear-card form to tokenizer  and receives a corresponding token from tokenizer  before passing the tokenized transaction along to application module .","With reference now to , an exemplary algorithm  for token application  will now be described. The algorithm is instantiated at step . Next, at step , token application  waits to receive an input string from a calling module, e.g., one or more of web store , input module , and payment-card middleware . Next, at step , an input string is received from the calling module. Next, at step , a determination is made whether the input string is a payment-card number or a token. If, at step , it is determined that the input string is a payment-card number, then token application  proceeds to step . If, at step , it is determined that the input string is a token, then token application  proceeds to step .","At step , a search of token database  is performed to determine whether the payment-card number already exists in the database. If, at step , it is determined that the payment-card number does not already exist in the database, then token application  proceeds to step . If, at step , it is determined that the payment-card number already exists in the database, then token application  proceeds to step .","At step , token application  generates a token, which is desirably a random alphanumeric string. This alphanumeric string is not generated, in any way, based on the payment-card number and does not have any algorithmic relationship to the payment-card number. Accordingly, the token cannot be later be used to generate the payment-card number without the use of tokenizer .","Next, at step , token application  stores the payment-card number in encrypted form, together with the token, in token database . Next, at step , token application  outputs the token to the calling module and then returns to step .","At step , the token corresponding to the payment-card number is retrieved from token database , and then the algorithm proceeds to step .","At step , a search of token database  is performed to determine whether the token exists in the database. If, at step , it is determined that the token does not exist in the database, then token application  returns to step . If, at step , it is determined that the token does already exist in the database, then token application  proceeds to step . At step , the payment-card number corresponding to the token is retrieved from token database . Next, at step , token application  outputs the payment-card number to the calling module and then returns to step .","The PCI DSS provisions require that applications be separated from database functions. Thus, compliance with the DSS standards involves a minimum configuration of four computer systems: an application system and a database system in the primary location, along with another pair of such systems in the backup location. Because tokenizer  can be adapted to function properly using only generic user privileges, other payment-card applications can also be hosted on these four computer systems.","In an alternative embodiment, token application  is a payment-card middleware application (e.g., in lieu of payment-card middleware ) and resides on an isolated network segment so as to be compliant with, e.g., PCI DSS requirements.","Payment-processing system  employs two different possible sources of payment-card information: (i) public Internet-facing web sites and related applications implementing shopping card, one-time pay, or account-maintenance functions, and (ii) customer-service call centers or physical points of sale, where end customers provide cardholder data to customer-service representatives, who enter the cardholder data. Accordingly, payment-processing system  includes both a web store  and an input module  to achieve this functionality. In alternative embodiments, only one of web store  and input module  might be provided.","Web store  includes one or more computers containing an application used by an end user (e.g., a consumer making a purchase from an online web merchant) to purchase one or more goods and\/or services. During the payment portion of a purchase transaction, web store  employs an application-programming interface (API) to transmit a payment-card number to tokenizer , which returns a token for web store  to send to application module  along with other transaction data.","Input module  includes one or more computers containing an order-taking application interface, e.g., SAP graphical user interface (SAP GUI), or other software used by a customer-service representative to enter customer data. The customer-service representative uses input module , e.g., to take an order by phone or in person at a physical point of sale. Input module  includes a desktop token interface , which interfaces with tokenizer . Desktop token interface  transmits a payment-card number to tokenizer , which returns a token for input module  to send to application module  along with other transaction data.","Input module  is desirably implemented in a customer-service workstation of a customer-service center. Desktop token interface  is an application (e.g., a Microsoft Windows applet written in the Visual Basic programming language) into which a customer-service representative manually enters a customer's payment-card number (e.g., by typing). Desktop token interface  uses an application-programming interface (API) to send the payment-card number in clear-card form to tokenizer , which encrypts and stores the payment-card number in token database  and returns to desktop token interface  a token corresponding to the card number. Desktop token interface  then saves the token to the Windows clipboard (although a buffer other than an operating-system clipboard could alternatively be used to achieve similar functionality in other embodiments), thus allowing a single-key or mouse-click \u201cpaste\u201d operation to enter the token into the relevant entry-screen field within input module . Accordingly, with only about four additional key strokes or mouse clicks (i.e., in addition to the customer data-entry operations ordinarily being performed), a customer-service representative can use desktop token interface  to tokenize a payment-card number.","With reference now to , an exemplary algorithm  for desktop token interface  will now be described. At step , the applet is instantiated. Next, at step , the applet waits in the background for a predefined keystroke (e.g., ALT-F12) to be pressed. This keystroke will be pressed by a customer-service representative using the order-taking software running on input module  to effect a purchase of goods or services, at the moment the customer-service representative is ready to enter a customer's payment-card number. Instead of entering the payment-card number directly into the order-taking software (such that the order-taking software would be subject to regulatory compliance), the customer-service representative uses the predefined keystroke to activate the applet.","Next, at step , a relatively small entry window is displayed on the screen of the customer-service representative (e.g., on top of or adjacent to the order-taking software window). It is desirable that the entry window contain only a single input field. The window might also contain a clickable \u201csubmit\u201d button. The customer-service representative types a customer's payment-card number into the input field of the entry window and presses the Enter key (or clicks the \u201csubmit\u201d button, if one is provided).","Next, at step , the customer's payment-card number is received, in clear-card form, from the input field of the entry window. Next, at step , a determination is made whether the payment-card number entered is a valid card number using, e.g., a Luhn check (also called a Mod 10 check). If, at step , it is determined that the card number is invalid, then, at step , an error message is displayed on the screen of the customer-service representative, and the applet returns to step . If, at step , it is determined that the card number is valid, then the algorithm proceeds to step .","At step , a tokenization request containing the payment-card number is sent via an encrypted socket using the HTTPS protocol to tokenizer , which returns a token corresponding to the payment-card number. Next, at step , the token is received from tokenizer . Next, at step , the token is copied to the Windows OS clipboard. The token may also be displayed on the screen to confirm to the customer-service representative that the tokenization was successful. Following step , the applet returns to step . At this point, the token has been stored in the Windows OS clipboard.","Next, the customer-service representative changes application focus from the applet window to the order-taking software window. (It is noted that this may not be necessary in certain embodiments in which the applet closes the entry window once a token has been generated, because the application focus automatically returns to the order-taking software window upon closure of the applet's entry window.) The customer-service representative then pastes the token from the Windows OS clipboard into the payment-card number field of the order-taking software. This can be done, for example, using a sequence of mouse controls (e.g., right-click, then selecting \u201cPaste\u201d from a drop-down menu) or keystroke (e.g., CTRL-V). The customer-service representative then submits the order to application module  for processing, e.g., by pressing a \u201csend\u201d button on a screen of the order-taking software window.","In the foregoing manner, at no point does the payment-card number in clear-card form ever enter application module , and application module  is therefore not subject to regulatory scrutiny.","Further details are provided in -, which show exemplary Visual Basic program code for implementing algorithm  of .","One exemplary algorithm  in one embodiment of desktop token interface  has been described above, in which a customer-service representative manually requests a token from tokenizer  and then, before initiating a clearing-house transaction, manually pastes the token into a field within input module  that would conventionally be filled with a payment-card number in clear-card form. In an alternative embodiment that will now be described, desktop token interface  automatically extracts a payment-card number in clear-card form that was entered by a customer-service representative into a field within input module , requests a token from tokenizer , and replaces the clear-card form payment-card number with the token, all before initiating a clearing-house transaction.","With reference now to , an exemplary algorithm  for an alternative embodiment of desktop token interface  will now be described. Instead of being embodied in a Windows applet as in the case of algorithm , algorithm  is embodied in a script. For example, the SAP ERP software employs a Windows application front-end interface called SAP GUI, which provides a method for SAP customers to develop their own scripts to extend the functionality of SAP ERP. Accordingly, algorithm  is desirably implemented as a SAP GUI script within input module .","In this scenario, a customer-service representative uses the SAP GUI order-taking application interface running on input module  to effect a purchase of goods or services. The customer-service representative takes the customer's order and enters all of the relevant order information, including a customer's payment-card number, into a standard order screen (e.g., the VA01 Create Sales Order screen). After entering all of the information, the customer-service representative presses the \u201cSave\u201d icon on the standard order screen. Normally, pressing \u201cSave\u201d would cause all of the information on the order screen, including any payment-card numbers in clear-card form, to be submitted to an application module for processing, which would subject the application module to regulatory scrutiny. However, in this embodiment, the SAP GUI script is configured so that pressing \u201cSave\u201d instantiates the script that implements algorithm  before any information is sent to application module .","At step , the script is instantiated. Next, at step , the script searches all fields present on the standard order-screen form for one or more fields labeled CCNUM (or uses other criteria to locate fields that contain payment-card numbers in clear-card form) to determine whether the order-screen form contains any fields populated with payment-card numbers. If, at step , it is determined that the order-screen form has no fields that contain payment-card numbers in clear-card form, then the script proceeds to step , at which an error message is displayed on the screen of the customer-service representative, and the script subsequently exits with an error condition at step . If, at step , it is determined that the order-screen form has fields that contain payment-card numbers in clear-card form, then the script proceeds to step .","At step , the script reads the payment-card number in clear-card form from the field of the order-screen form. Next, at step , a determination is made whether the payment-card number entered is a valid card number using, e.g., a Luhn check (also called a Mod 10 check). If, at step , it is determined that the card number is invalid, then, at step , an error message is displayed on the screen of the customer-service representative, and the script subsequently exits with an error condition at step . If, at step , it is determined that the card number is valid, then the algorithm proceeds to step .","At step , a tokenization request containing the payment-card number is sent via an encrypted socket using the HTTPS protocol to tokenizer , which returns a token corresponding to the payment-card number.","Next, at step , the token is received from tokenizer . Next, at step , the script removes the payment-card number in clear-card form from the field of the order-screen form and replaces it with the received token.","Next, at step , a determination is made whether there are additional payment-card numbers on the order-screen form, in which case the script returns to step  to process the next payment-card number found on the order-screen form. Otherwise, the script proceeds to step .","At step , the script submits all of the information on the order-screen form, including tokens that replace the payment-card numbers in clear-card form, to application module . Next, at step , the script exits with a success condition.","If the script exits with an error condition at step , then the customer-service representative is taken back to the order-entry screen to make corrections, e.g., supplying a missing payment-card number or correcting an invalid payment-card number. Once appropriate correction has been made, the customer-service representative can then press \u201csave\u201d to retry, and algorithm  is once again instantiated.","In the foregoing manner, it is not necessary for the customer-service representative to manually activate an applet or paste a token into any application (as in the case of algorithm ), and the entire tokenization process can occur seamlessly and in the background without any special knowledge or actions on the part of the customer-service representative.","Further details are provided in -, which show exemplary SAP GUI program code for implementing algorithm  of .","Application module  is a commercial enterprise system including one or more computers containing software adapted to handle sales orders, delivery tracking, billing, account settlement, and related functionality, e.g., a system including mySAP\u2122 Business Suite software available from SAP Americas, located in Newtown Square, Pa. Application module  receives from web store  tokenized web transactions, e.g., by means of an API capable of accessing functionality within application module  (such as SAP Business Application Programming Interface (BAPI)). Alternatively or additionally, application module  receives from input module  tokenized customer service transactions and account updates, e.g., by means of a universal client interface (e.g., SAP GUI) within input module , which is capable of accessing functionality within application module . Application module  sends tokenized requests for authorization and settlement to payment-card middleware  and receives from application module  tokenized responses to those requests, e.g., by means of a standard interface for communication with application module  (such as SAP Remote Function Call (RFC)).","It should be understood that application module  does not process, transmit, or store any PCI or PII data and is therefore not subject to regulatory scrutiny. The transactions that take place between application module  and web store  and\/or input module  are all in tokenized form and do not include any PCI or PII data. Similarly, authorization and settlement transactions between application module  and payment-card middleware  are also in tokenized form and do not include any PCI or PII data. This scheme may be referred to as a \u201ctokenize-before-capture\u201d approach, whereby all front-end sources of entry for payment-card accounts (e.g., web store  and input module ) are configured to tokenize the clear-card form of the payment-card number before passing the transaction along to back-end systems (e.g., application module ) for processing.","Payment-card middleware  includes one or more computers containing software that receives and responds to the tokenized authorization and settlement requests from application module , with each request including a supplied token for which the corresponding payment-card number is to be retrieved from token database . Payment-card middleware  interfaces with tokenizer  via an SSL interface to send requests for detokenization using the supplied token and to receive responses to those requests in the form of a payment-card number in clear-card form. Payment-card middleware  interfaces, e.g., via SSL or private lines, with a clearing house , e.g., the Automated Clearing House (ACH) payment system, to provide a clearing-house transaction request that includes the clear-card form payment-card number, for the purpose of effecting the actual payment transaction.","Payment-card middleware  may include card-processing software, such as PPS PayWare\u2122 available from Princeton Payment Solutions of Princeton, N.J. Embodiments of payment-card middleware  may be token-aware, i.e., may be configured to distinguish automatically between tokens and payment-card numbers in clear-card form. In this manner, if a settlement request contains a payment-card number in clear-card form, then payment-card middleware  provides the clearing-house transaction request to clearing house  without using tokenizer . If, however, a settlement request contains a token instead of a payment-card number, then payment-card middleware  first uses tokenizer  to obtain the corresponding payment-card number prior to providing the clearing-house transaction request to clearing house . Accordingly, payment-card middleware  can be used as middleware for processing both tokenized transactions and non-tokenized transactions (e.g., from applications other than application module ).","In addition to having utility for payment-card data entry and processing at a point of sale, embodiments of payment-processing system  can also be used to migrate bulk cardholder data stored in commercial enterprise system tables (e.g., the SAP BSEGC or FPLTC tables) to tokenizer . In this scenario, one or more modules of tokenizer  (e.g., payment-card middleware ) are provided with software to effect such data migration. Migration is desirably performed while no active payment transactions are taking place (to avoid locked payment-card entries in the source table), but this is not a requirement, and the migration routine can be performed one or more additional times to ensure the migration of table entries locked during previous runs of the migration routine. If payment-card middleware  is configured to distinguish automatically between tokens and payment-card numbers in clear-card form and automatically return one when the other is supplied, as described above, then a migration to tokens can be performed with minimal commercial enterprise system downtime.","With reference now to , a second exemplary payment-processing system  consistent with one embodiment of the invention will now be described. Payment-processing system  is similar to payment-processing system , except as described below.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 5","FIG. 5"],"b":["500","500","545","500","540","545","550","545"]},"Packet inspector  receives packets containing transactions in non-tokenized form from input module , inspects each incoming packet for payment-card numbers in clear-card form, and tokenizes those payment-card numbers prior to passing the packet along to application module . Packet inspector  tokenizes the payment-card numbers by sending the payment-card numbers in clear-card form to tokenizer , which encrypts and stores the payment-card numbers in token database  and returns to packet inspector  a token corresponding to the card number. Packet inspector  replaces the clear-card form payment-card numbers found in packets passing through packet inspector  with tokens prior to sending those packets to application module , so that packets containing transactions that are sent to application module  contain only tokenized transactions.","With reference now to , an exemplary algorithm  for packet inspector  will now be described. Algorithm  is desirably embodied in a script running on packet inspector , e.g., a tool command language (TCL) script used in conjunction with the BIG-IP product series from F5 Networks, Inc. TCL scripts have access to all traffic passing through packet inspector  and have the ability to inspect and alter any data passing through packet inspector .","At step , the script is instantiated. Next, at step , a packet arriving at packet inspector  is received. Next, at step , the script inspects the packet to determine whether the referring page from which the packet originated is a \u201ctarget\u201d web page, which is a web page that is known or expected to request a payment-card number from a customer-service representative. This is done by comparing the Referrer field (which indicates the web page from which the packet originated) in the HTTP header with a list of known target web pages. If, at step , it is determined that the packet is not from a target web page, then the script returns to step  to receive the next packet. If, at step , it is determined that the packet is from a target web page, then the script proceeds to step . At step , the script inspects the packet to determine whether a field named CCNUM exists (or uses other criteria to locate fields that contain payment-card numbers in clear-card form), the presence of which indicates that the packet contains at least one field populated with a payment-card number. If, at step , it is determined that the packet has no fields that contain payment-card numbers in clear-card form, then the script returns to step  to receive the next packet. If, at step , it is determined that the packet has fields that contain payment-card numbers in clear-card form, then the script proceeds to step .","At step , the script reads the payment-card number in clear-card form from the field of the packet. Next, at step , a determination is made whether the payment-card number is a valid card number using, e.g., a Luhn check (also called a Mod 10 check). If, at step , it is determined that the card number is invalid, then there is no actual card number that needs to be tokenized, and the script returns to step  to receive the next packet. If, at step , it is determined that the card number is valid, then, at step , a tokenization request containing the payment-card number is sent via an encrypted socket using the HTTPS protocol to tokenizer , which returns a token corresponding to the payment-card number.","Next, at step , the token is received from tokenizer . Next, at step , the script removes the payment-card number in clear-card form from the field of the packet and replaces it with the received token.","Next, at step , a determination is made whether there are additional payment-card numbers in the packet, in which case the script returns to step  to process the next payment-card number found in the packet. Otherwise, the script proceeds to step .","At step , the modified packet, including tokens that replace the payment-card numbers in clear-card form, is sent to application module , after which the script returns to step .","Further details are provided in -, which show exemplary TCL program code for implementing algorithm  of .","There are two principal ways in which browser-based embodiments of the present invention are used. In some browser-based embodiments, online merchants take orders from customers who use a web browser to enter order and payment information on merchant web pages at the merchants' web sites. In other browser-based embodiments, online merchants employ customer-service representatives who take customers' orders by phone or in person and use a web browser to enter, on merchant web pages, order and payment information provided by the customers.","As discussed above, the PCI DSS standards impose certain requirements on merchants who \u201cprocess, store, or transmit\u201d credit card information. These requirements, while important to protect credit card information from loss or theft, impose significant burdens upon merchants and their IT staff. Methods that can reduce or eliminate credit-card data from the Merchant IT environment have a significant impact on IT Staff allocation and IT costs. Numerous companies operate facilities to offload credit-card processing, and the associated compliance tasks and costs, from merchants.","Web browsers are subject to viruses and other malware, and a significant defense against these attacks is the \u201csame origin\u201d policy, which requires that all components of a web page, including any response, must originate or terminate at the same URL (protocol, host and port). This policy prevents a web page from originating at one URL and sending the response to a different URL. The effect of this policy has conventionally been to require a merchant's order entry web page containing credit card data to be sent through the merchant's own web servers, even if the merchant has outsourced card-payment operations to another provider, which causes the merchant to remain \u201cin scope\u201d for purposes of DSS requirements.","With reference now to , a third, browser-based exemplary payment-processing system  consistent with one embodiment of the invention will now be described. Payment-processing system  is similar to payment-processing system , except as described below.",{"@attributes":{"id":"p-0109","num":"0108"},"figref":["FIG. 10","FIG. 10","FIG. 10"],"b":["1000","1040","1010","1000","1021","1021","1024","1040","1010","1021","1040","1010","1024","1020","1030","1021","1040","1010","1022","1024","3306"]},"To overcome the restrictions caused by the \u201csame origin\u201d policy mentioned above, certain embodiments of the invention take advantage of one resource that is exempt from the \u201csame origin\u201d policy, namely, web page scripts. Normally written in JavaScript, these functions are not source-restricted by the browser, and thus any arbitrary web page can reference one or more scripts from any other arbitrary URL. Further, it is possible for a script to contain data, if such data is properly formatted. This technique will be referred to as the \u201cJavaScript Object Notation\u201d (JSON) technique.","The JSON technique provides a means for a client browser, when processing an order entry web page sourced from a merchant site, to obtain a credit card token from an arbitrary third party site and to send the credit card token (rather than the payment information itself) to the merchant site. By removing the credit card number from the order data the merchant receives, the merchant is no longer \u201cprocessing, transmitting, or storing\u201d credit card data and thus is no longer subject to compliance with the DSS requirements.","In certain embodiments of the invention, a merchant order-entry web page is coded with a function similar to the getToken( ) function provided in , which shows exemplary JavaScript program code for implementing algorithm  of .","As shown in , at step , the script is instantiated. Next, at step , the script waits for tokenization to be initiated by the user interacting with an appropriate user-interface element within the order-entry web page (e.g., a user pressing ENTER or TAB after typing a payment-card number in clear-card form, or a user clicking OK after entering complete order information).","At step , the script searches all fields present on the standard order-screen form for one or more fields labeled CCNUM (or uses other criteria to locate fields that contain payment-card numbers in clear-card form) to locate fields populated with payment-card numbers and reads the payment-card number in clear-card form from one or more fields of the order-screen form.","At step , a determination is made whether the payment-card number entered is a valid card number using, e.g., a Luhn check (also called a Mod 10 check). If, at step , it is determined that the card number is invalid, then, at step , an error message is displayed on the screen of the customer-service representative, and the script subsequently exits with an error condition at step . If, at step , it is determined that the card number is valid, then the algorithm proceeds to step .","At step , a JSON request (containing the payment-card number) to receive a tokenized script is sent via an encrypted socket using the HTTPS protocol to proxy server , which forwards the request (e.g., via HTTPS port ) to tokenizer . At step , tokenizer  returns, via proxy server , a tokenized response in the form of a script containing a token that corresponds to the payment-card number. One example of a tokenized response to a JSON request might be:\n\n","At step , the tokenized response is then downloaded by the browser and executed. If the downloaded script includes data and calls a function, then the data can be assigned by the called function to existing variables in the form to be returned to the merchant site. In this manner, the browser can send the credit card number to tokenizer , tokenizer  can return a token to the browser in the form of a function call argument, and the browser will then replace the order-entry credit-card field value with the token.","Next, at step , a determination is made whether there are additional payment-card numbers on the order-screen form, in which case the script returns to step  to process the next payment-card number found on the order-screen form. Otherwise, the script proceeds to step .","At step , the script submits all of the information on the order-screen form, including tokens that replace the payment-card numbers in clear-card form, to application module . Next, at step , the script exits with a success condition.","If the script exits with an error condition at step , then the customer-service representative or web customer is taken back to the order-entry screen to make corrections, e.g., supplying a missing payment-card number or correcting an invalid payment-card number. Once appropriate correction has been made, the customer-service representative or customer can then click \u201cOK\u201d to retry, and algorithm  is once again instantiated.","In the foregoing manner, it is not necessary for the customer-service representative or customer to manually activate an applet or paste a token into any application (as in the case of algorithm ), and the entire tokenization process can occur seamlessly and in the background without any special knowledge or actions on the part of the customer-service representative or customer placing a web order.","It should be understood that, in certain embodiments, payment-card middleware  is configured to receive and forward to clearing house , along with tokenized payment-card numbers, CVV (\u201cCard Verification Value\u201d) or CVV2 (second-generation algorithm CVV) numbers. Such codes are typically 3-digit codes printed (but not magnetically encoded) on VISA-, MasterCard- and Discover-branded credit and debit cards, and 4-digit codes printed (but not magnetically encoded) on American Express-branded credit and debit cards. CVV2 numbers, which are also known as Card Security Code (CSC) numbers, employ a second-generation algorithm that makes the CVV2 numbers difficult for a thief to guess. Supplying the CVV2 code in a transaction is intended to verify that the customer has the card in their possession. Knowledge of the code proves that the customer has seen the card, or has seen a record made by somebody who saw the card.","In certain embodiments of the invention, a hardware device, which will be referred to herein as a \u201cpad\u201d or \u201centry device\u201d can be used for manual entry of payment-card information, to limit the impact of the DSS standards. In one embodiment, the pad is a modified conventional \u201cPIN-pad\u201d device normally used at a point-of-sale (POS) terminal to process credit card payments.","A pad consistent with embodiments of the invention may have particular utility, e.g., in mail or telephone order-processing environments where payment card data (typically, primary account number (PAN), expiration date, CVV2, cardholder name, and the like) is received either by telephone, paper mail, or fax, and then manually entered into a merchant's order-processing system by a customer-service representative. In this scenario, the customer-service representative typically uses a desktop computer that runs a data-entry software application into which order and payment details are entered and then transmitted to a main order-processing system. Because this desktop computer has knowledge of the payment card details, even if only for a few seconds, the desktop computer is considered to be subject to all of the PCI DSS requirements.","For many merchants, it is not practical or even possible to subject such a desktop computer to DSS requirements. Merchants might have substantial part-time staff to handle peak-hour order-taking. Merchants might have a large number of employees who handle orders for only very short periods of time, perhaps an hour a day or less. These employees might be scattered throughout a merchant's plurality of physical locations. Accordingly, merely identifying the computers that are subject to DSS requirements can be a challenge. Further, the DSS requirements dictate that any computer that processes, stores, or transmits a payment card number is \u201cin scope,\u201d and any computer on the same network as an in-scope computer is also in scope. In order to comply with DSS requirements, a merchant might be forced to make sure that every computer that the merchant owns is compliant, which can be a cost-prohibitive or difficult task.","To address the foregoing problems, the Payment Card Industry employs a scheme known as Point-to-Point Encryption (P2PE). In a P2PE scheme, if a merchant can show that the payment card data was encrypted at a \u201cpoint of interaction,\u201d and that no computer other than the payment-card-processing server has access to the encryption keys, then the rest of the merchant environment is considered out of scope. This arrangement relaxes merchant requirements substantially. For \u201ccard-present\u201d environments, the merchant swipes a customer's card in one of the ubiquitous payment-card terminals. The terminal encrypts the relevant information and sends it to the register, which combines it with other information and forwards all of the information to a clearing house or the like to effect payment-card processing. In this scenario, neither the register nor any other computer in the merchant network has the keys for decrypting the payment-card number. Since the payment-card information is encrypted at its \u201cpoint of interaction,\u201d and no computer other than the card-processing server can access the encryption keys, other computers in the merchant environment are not \u201cin scope.\u201d","For \u201ccard-not-present\u201d environments, processing is somewhat different. A human actor types the card number into a keypad  of a device, such as pad  of  (which shows a top plan view of one embodiment of pad ) and  (which shows pad  as part of a larger system ). The payment-card industry requires that all devices that accept Personal Identification Numbers (PINs) be certified as complying with the PIN-entry device (PED) requirements of the DSS standards. In one embodiment, pad  is a standard PIN-pad that has been modified to accept a full 19-digit primary account number in lieu of a conventional 4-digit PIN number and to encrypt that value in the same way it would have encrypted a PIN number, as will be described in further detail below. This allows pad  to qualify as a point of interaction for purposes of the aforementioned P2PE exception to the DSS standards.","In one embodiment, pad  is a combination hardware\/software add-on product to a payment-card encryption and tokenization system (e.g., as described above with reference to ). In this embodiment, pad  is a secure PIN-entry device that has been certified by the Payment Card Industry Security Standards Council as meeting all the of security requirements for PIN-entry devices. Pad  is constructed by modifying the firmware of a conventional off-the-shelf PIN-entry device to accept a longer string of numbers that consists of or represents a primary account number. For example, pad  may be a modified off-the-shelf PIN-entry device (PED), as manufactured by, e.g., IdTech (using the SmartPIN Application Programming Interface (API)), Verifone, Hypercom, and the like. The manufacturer of the PED device pre-loads a Base Derivation Key (BDK) to into each PED device that is intended for use as pad . The manufacturer also installs a modified version of its firmware to support 19-digit values in the PIN field, which would otherwise normally support only 4-digit values.","A unique BDK key may be assigned for each instantiation of pad  (or, alternatively, a unique BDK key may be assigned for each different merchant), so that each pad  (or merchant) can be uniquely identified.","Turning now to , pad  includes a Universal Serial Bus (USB) interface , a processor , keypad , and memory . USB interface  is desirably connected via a USB cable to a respective USB interface of a customer-service representative's desktop computer running an operating system, such as Microsoft Windows, and running an input module , which is used by a customer-service representative to enter a customer's order. Input module  includes a desktop token interface , similar to that illustrated in , which communicates with both pad  and tokenizer . Desktop token interface  sends encrypted data to tokenizer , and the encryption keys used to encrypt that data are known only to pad  and tokenizer . Since desktop token interface  has no access to the encryption keys used by pad  or tokenizer , desktop token interface  has no access to any cardholder data entered via pad  and is not considered to be \u201cin scope.\u201d","Pad  contains appropriate software, executed by processor , for communicating with desktop token interface  and performing certain functions using instructions stored in memory  (e.g., firmware), to perform the following functions. Pad  receives a payment-card number (or \u201cprimary account number\u201d (PAN)) from a customer-service representative who manually enters the PAN into keypad  and presses the \u201cOK\u201d (or \u201cEnter\u201d) button when done. Pad  encrypts the PAN into the same field that would normally contain a 4-digit PIN. Pad  then sends the encrypted data via USB to desktop token interface , which reads the encrypted data from pad  and forwards the encrypted data, via an encrypted HTTPS call, to tokenizer . Tokenizer  receives and decrypts the data and searches its database  to see if a token for this data already exists. If a token is found, then tokenizer  returns the token to desktop token interface , which is configured to buffer the token in the operating-system clipboard, as described above with respect to step  of . If a token is not found, then tokenizer  re-encrypts the data for storage, generates and stores in database  a new random token corresponding to the payment-card number, and returns the token.","With the token in the operating-system clipboard, the token can be pasted into order-taking software running on input module  in lieu of a clear-card form payment-card number. Since the token is not subject to the DSS requirements, the order-taking software is not considered \u201cin scope.\u201d","With reference now to , an exemplary algorithm  for desktop token interface  will now be described. Algorithm  can be embodied, e.g., in a script, such as a SAP GUI script within input module , in an applet, or the like.","At step , the script is instantiated. Next, at step , a customer-service representative manually enters a PAN into keypad  of pad . At step , pad  encrypts the PAN, e.g., using the next available future key in a Derived Unique Key Per Transaction (DUKPT) sequence, which is a key-management scheme in which, for every transaction, a unique key is used, with the unique key being derived from a fixed key. The DUKPT process defines a Key Sequence Number that is combined with the BDK to create, for each transaction, a transaction-specific encryption key. In this embodiment, the fixed key is the BDK key that was pre-loaded by the manufacturer. Next, at step , pad  sends a tokenization request, including the encrypted PAN, to desktop token interface  via USB interface .","At step , desktop token interface  reads and packages the encrypted data into an HTTPS request (i.e., SSL-encrypted HTTP request) and sends the HTTPS request to tokenizer . (It should be understood that, in alternative embodiments, instead of desktop token interface  performing this function, additional software could be included within pad  so that pad  can perform this function.)","Next, at step , tokenizer  decrypts the HTTPS request, which operation returns a DUKPT-encrypted PAN. At step , tokenizer  decrypts the DUKPT-encrypted PAN, which operation returns the original payment-card number in clear-card form.","At step , a search of token database  is performed to determine whether the payment-card number already exists in the database. If, at step , it is determined that the payment-card number already exists in the database, then token application  proceeds to step . If, at step , it is determined that the payment-card number does not already exist in the database, then token application  proceeds to step .","At step , the token corresponding to the payment-card number is retrieved from token database , and then the algorithm proceeds to step .","At step , token application  generates a token, which is desirably a random alphanumeric string. This alphanumeric string is not generated, in any way, based on the payment-card number and does not have any algorithmic relationship to the payment-card number. Accordingly, the token cannot be later be used to generate the payment-card number without the use of tokenizer .","Next, at step , token application  stores the payment-card number in encrypted form, together with the token, in token database . At step , token application  outputs, to the desktop token interface, an encrypted (HTTPS) response containing the token.","Next, at step , desktop token interface  decrypts the HTTPS response, parses out the token from the response, and buffers the token in the operating-system clipboard. Finally, at step , the customer-service representative pastes the token from the operating-system clipboard into input module , e.g., using a sequence of mouse controls (e.g., right-click, then selecting \u201cPaste\u201d from a drop-down menu) or keystroke (e.g., CTRL-V).","In the foregoing manner, at no point does the payment-card number in clear-card form ever enter input module  or application module , and those components are therefore not considered to be \u201cin scope.\u201d","It should be understood that various changes in the details, materials, and arrangements of the parts which have been described and illustrated in order to explain the nature of this invention may be made by those skilled in the art without departing from the scope of the invention as expressed herein.","For example, it should be understood that the inventive concepts of embodiments of the invention may be applied not only in payment-processing systems as described above but also in any other systems involving the use of confidential information.","Accordingly, although the embodiments described herein are generally in the context of a payment-processing system that uses tokens as a substitute for payment-card numbers, it should be understood that the present invention includes the use of tokens as substitutes for other information desirably kept separate from one or more applications, even outside the context of payment-processing systems, e.g., medical records management systems, age-verification systems that use driver's licenses, etc. Such information can include payment-card numbers and other payment-related information, e.g., bank account numbers, credit or debit card numbers, security codes, access codes, and passwords, as well as other identifying information, e.g., first and\/or last names, social security numbers, driver's license numbers, government-issued or school-issued identification numbers, biometric records, birth dates and places, mother's maiden name, etc., and it should be understood that the term \u201cconfidential information\u201d as used herein encompasses all of the foregoing, as well as other information desirably kept separate from one or more applications, computers, or computer systems. Likewise, the term \u201ctransaction\u201d should be understood as encompassing all transactions that employ confidential information, including, e.g., medical-insurance transactions (such as might be used by a medical provider to bill a patient's insurance company), age-verification transactions (such as might be used to verify the age of a patron ordering alcoholic beverages using a driver's license), transactions for identifying individuals (such as social security number verification systems), and the like.","Conventionally, when encryption is used to protect data representing confidential information, the resulting encrypted string or number is often larger than the data representing the original confidential information. In the case of ERP applications that restrict the size and\/or type of data, such as a social security number, to a predetermined format, the process of encryption can result in a value larger that the field allotted, thereby making it difficult or impossible to re-introduce the encrypted value back into the original field. However, because a tokenizer consistent with embodiments of the invention uses tokens having a predefined format as a substitution for confidential information, tokens can be generated that conform with a predefined field length or type. For example, if the confidential information being tokenized is a social security number, which is limited to 9 numeric characters, then a random token having 9 numeric characters can be generated in place of an actual social security number, so that the token can be used in the original social security number field. Thus, using tokens in embodiments of the invention permits a predefined and formatted value substitution with conventional software applications, while exempting those software applications from regulatory scrutiny.","It should be understood that the term \u201crandom,\u201d as used herein, should not be construed as being limited to pure random selections or pure random character and\/or number generations, but should be understood to include pseudo-randomly-generated alphanumeric strings, including seed-based selections or alphanumeric generations, as well as other selection or character\/number generation methods that might simulate randomness but are not purely random. A hashing function might be used in embodiments of the present invention, and such hashing function may be based on random numbers, non-random numbers, or combinations of random and non-random numbers, provided that the hashing function is not based on confidential information itself. The term \u201crandom\u201d should also be construed as including other non-random alphanumeric sequences, provided that such sequences have no algorithmic relationship with any confidential information to which such sequences correspond.","The term \u201cpacket inspector\u201d as used herein refers to any combination of hardware and\/or software used to receive packets of data, examine the contents of those packets, selectively modify the contents of those packets, and forward those packets to other hardware and\/or software systems for further processing. In certain embodiments, a packet inspector is implemented purely in software and may reside on a general-purpose computer (e.g., the same computer as input module ) or other computing device, and in other embodiments, a packet inspector may be a separate, dedicated hardware packet-inspection appliance. A packet inspector as used in embodiments of the invention may also include other functionality, e.g., load-balancing or fail-over protection.","As used herein, the term \u201cmodule\u201d refers to any of an application-specific integrated circuit (ASIC), an electronic circuit, a processor (shared, dedicated, or group) that executes one or more software or firmware programs, a combinational logic circuit, and\/or other suitable components that provide the described functionality","The terms \u201cPIN-entry device,\u201d \u201cPED,\u201d and \u201centry device\u201d refer to any hardware device adapted to encrypt confidential information, such as payment-card numbers, and provide the encrypted data via a communications interface to a computer, which forwards that encrypted data to a tokenizer that will return a token having no algorithmic relationship to the confidential information. Such devices can include dedicated hardware devices, e.g., modified PIN-entry devices (as would normally be used to encrypt 4-digit PIN numbers for use as security codes with credit or debit cards) that can encrypt up to 19-digit card numbers, as described herein. Such devices can also include other devices that perform the same functionality, e.g., general-purpose computers running appropriate hardware and software to perform some or all of the pad functionality shown in  herein and described above.","An entry device consistent with embodiments of the invention can be coupled to its respective computer by USB or other wired or short-range or long-range wireless interface, including, e.g., Bluetooth, WiFi, Ethernet, a wireless telephonic network, or the like.","Although embodiments are described herein that employ HTTPS transport for encryption, secure-shell (SSH) port forwarding could alternatively be used to create an encrypted transport (or channel) in a similar manner, i.e., causing a port from one host to appear on another, using a connection through SSH through which traffic to the forwarded port is encrypted. In one embodiment, port forwarding occurs in two directions. First, the customer-service representative or customer initiates an SSH tunnel when requesting a token via the proxy server, thereby allowing a reverse connection from the proxy server to a single host and\/or port at the customer-service order-input module or web store. Second, payment-card middleware opens a connection to a local SSH port, which is forwarded to the application module so that the application module can interface with the tokenizer to send requests for detokenization using supplied tokens.","The present invention can be embodied in the form of methods and apparatuses for practicing those methods. The present invention can also be embodied in the form of program code embodied in tangible media, such as magnetic recording media, optical recording media, solid state memory, floppy diskettes, CD-ROMs, hard drives, or any other non-transitory machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing embodiments of the invention. The present invention can also be embodied in the form of program code, for example, stored in a non-transitory machine-readable storage medium including being loaded into and\/or executed by a machine, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing embodiments of the invention. When implemented on a general-purpose processor, the program code segments combine with the processor to provide a unique device that operates analogously to specific logic circuits.","The present invention can also be embodied in the form of a bitstream or other sequence of signal values stored in a non-transitory recording medium generated using a method and\/or an apparatus of the present invention.","It will be appreciated by those skilled in the art that although the functional components of the exemplary embodiments of the system of the present invention described herein may be embodied as one or more distributed computer program processes, data structures, dictionaries and\/or other stored data on one or more conventional general purpose computers (e.g., IBM-compatible, Apple Macintosh, and\/or RISC microprocessor-based computers), mainframes, minicomputers, conventional telecommunications (e.g., modem, T1, fiber-optic line, DSL, satellite and\/or ISDN communications), memory storage means (e.g., RAM, ROM) and storage devices (e.g., computer-readable memory, disk array, direct access storage) networked together by conventional network hardware and software (e.g., LAN\/WAN network backbone systems and\/or Internet), other types of computers and network resources may be used without departing from the present invention. One or more networks discussed herein may be a local area network, wide area network, internet, intranet, extranet, proprietary network, virtual private network, a TCP\/IP-based network, a wireless network (e.g., IEEE 802.11 or Bluetooth), an e-mail based network of e-mail transmitters and receivers, a modem-based, cellular, or mobile telephonic network, an interactive telephonic network accessible to users by telephone, or a combination of one or more of the foregoing.","Embodiments of the invention as described herein may be implemented in one or more computers residing on a network transaction server system, and input\/output access to embodiments of the invention may include appropriate hardware and software (e.g., personal and\/or mainframe computers provisioned with Internet wide area network communications hardware and software (e.g., CQI-based, FTP, Netscape Navigator\u2122, Mozilla Firefox\u2122, Microsoft Internet Explorer\u2122, or Apple Safari\u2122 HTML Internet-browser software, and\/or direct real-time or near-real-time TCP\/IP interfaces accessing real-time TCP\/IP sockets) for permitting human users to send and receive data, or to allow unattended execution of various operations of embodiments of the invention, in real-time and\/or batch-type transactions. Likewise, the system of the present invention may include one or more remote Internet-based servers accessible through conventional communications channels (e.g., conventional telecommunications, broadband communications, wireless communications) using conventional browser software (e.g., Netscape Navigator\u2122, Mozilla Firefox\u2122, Microsoft Internet Explorer\u2122, or Apple Safari\u2122). Thus, the present invention may be appropriately adapted to include such communication functionality and Internet browsing ability. Additionally, those skilled in the art will recognize that the various components of the server system of the present invention may be remote from one another, and may further include appropriate communications hardware\/software and\/or LAN\/WAN hardware and\/or software to accomplish the functionality herein described.","Each of the functional components of the present invention may be embodied as one or more distributed computer-program processes running on one or more conventional general purpose computers networked together by conventional networking hardware and software. Each of these functional components may be embodied by running distributed computer-program processes (e.g., generated using \u201cfull-scale\u201d relational database engines such as IBM DB2\u2122, Microsoft SQL Server\u2122, Sybase SQL Server\u2122, or Oracle 10g\u2122 database managers, and\/or a JDBC interface to link to such databases) on networked computer systems (e.g., including mainframe and\/or symmetrically or massively-parallel computing systems such as the IBM SB2\u2122 or HP 9000\u2122 computer systems) including appropriate mass storage, networking, and other hardware and software for permitting these functional components to achieve the stated function. These computer systems may be geographically distributed and connected together via appropriate wide- and local-area network hardware and software. In one embodiment, data stored in the token database or other program data may be made accessible to the user via standard SQL queries for analysis and reporting purposes.","Primary elements of embodiments of the invention may be server-based and may reside on hardware supporting an operating system such as Microsoft Windows NT\/2000\u2122 or UNIX.","Components of a system consistent with embodiments of the invention may include mobile and non-mobile devices. Mobile devices that may be employed in the present invention include personal digital assistant (PDA) style computers, e.g., as manufactured by Apple Computer, Inc. of Cupertino, Calif., or Palm, Inc., of Santa Clara, Calif., and other computers running the Android, Symbian, RIM Blackberry, Palm webOS, or iPhone operating systems, Windows CE\u2122 handheld computers, or other handheld computers (possibly including a wireless modem), as well as wireless, cellular, or mobile telephones (including GSM phones, J2ME and WAP-enabled phones, Internet-enabled phones and data-capable smart phones), one- and two-way paging and messaging devices, laptop computers, etc. Other telephonic network technologies that may be used as potential service channels in a system consistent with embodiments of the invention include 2.5G cellular network technologies such as GPRS and EDGE, as well as 3G technologies such as CDMA1xRTT and WCDMA2000, and 4G technologies. Although mobile devices may be used in embodiments of the invention, non-mobile communications devices are also contemplated by embodiments of the invention, including personal computers, Internet appliances, set-top boxes, landline telephones, etc. Clients may also include a PC that supports Apple Macintosh\u2122, Microsoft Windows 95\/98\/NT\/ME\/CE\/2000\/XP\/Vista\/7\u2122, a UNIX Motif workstation platform, or other computer capable of TCP\/IP or other network-based interaction. In one embodiment, no software other than a web browser may be required on the client platform.","Alternatively, the aforesaid functional components may be embodied by a plurality of separate computer processes (e.g., generated via dBase\u2122, Xbase\u2122, MS Access\u2122 or other \u201cflat file\u201d type database management systems or products) running on IBM-type, Intel Pentium\u2122 or RISC microprocessor-based personal computers networked together via conventional networking hardware and software and including such other additional conventional hardware and software as may be necessary to permit these functional components to achieve the stated functionalities. In this alternative configuration, since such personal computers typically may be unable to run full-scale relational database engines of the types presented above, a non-relational flat file \u201ctable\u201d (not shown) may be included in at least one of the networked personal computers to represent at least portions of data stored by a system according to the present invention. These personal computers may run the Unix, Microsoft Windows NT\/2000\u2122 or Windows 95\/98\/NT\/ME\/CE\/2000\/XP\/Vista\/7\u2122 operating systems. The aforesaid functional components of a system according to the present invention may also include a combination of the above two configurations (e.g., by computer program processes running on a combination of personal computers, RISC systems, mainframes, symmetric or parallel computer systems, and\/or other appropriate hardware and software, networked together via appropriate wide- and local-area network hardware and software).","A system according to the present invention may also be part of a larger computerized financial transaction system including multi-database or multi-computer systems or \u201cwarehouses\u201d wherein other data types, processing systems (e.g., transaction, financial, administrative, statistical, data extracting and auditing, data transmission\/reception, and\/or accounting support and service systems), and\/or storage methodologies may be used in conjunction with those of the present invention to achieve an overall information management, processing, storage, search, statistical and retrieval solution for a particular lock box service provider, e-payment warehouser, biller organization, financial institution, payment system, commercial bank, and\/or for a cooperative or network of such systems.","In one embodiment, source code may be written in an object-oriented programming language using relational databases. Such an embodiment may include the use of programming languages such as C++ and toolsets such as Microsoft's .Net\u2122 framework. Other programming languages that may be used in constructing a system according to the present invention include Java, HTML, Perl, UNIX shell scripting, assembly language, Fortran, Pascal, Visual Basic, and QuickBasic. Those skilled in the art will recognize that the present invention may be implemented in hardware, software, or a combination of hardware and software.","Accordingly, the term \u201ccomputer,\u201d as used herein, should be understood to mean a combination of hardware and software components including at least one machine having a processor with appropriate instructions for controlling the processor. The term \u201ccomputer\u201d can be used to refer to more than a single computing device, e.g., multiple personal computers, or one or more personal computers in conjunction with one or more other devices, such as a router, hub, packet-inspection appliance, firewall, etc.","A system consistent with the present invention may interact with established payment networks, e.g., the Automated Clearing House (ACH) to provide payment options such as ACH debits, credit or procurement card payments, and\/or paper checks, which may be generated internally or by an external software module, wherein an output file in a format capable of being read by the external module may be generated. Payment by a payer system user using a credit or procurement card may also be effected, to be processed by Internet or other means. In this scenario, additional security levels may be included, e.g., for initiating credit or debit card payments and approving credit or debit card payments, and such appropriate payment-card processing functionality as may be appropriate may be included, as well.","It should also be appreciated from the outset that one or more of the functional components may alternatively be constructed out of custom, dedicated electronic hardware and\/or software, without departing from the present invention. Thus, the present invention is intended to cover all such alternatives, modifications, and equivalents as may be included within the spirit and broad scope of the invention.","Unless explicitly stated otherwise, each numerical value and range should be interpreted as being approximate as if the word \u201cabout\u201d or \u201capproximately\u201d preceded the value of the value or range.","It should be understood that the steps of the exemplary methods set forth herein are not necessarily required to be performed in the order described, and the order of the steps of such methods should be understood to be merely exemplary. Likewise, additional steps may be included in such methods, and certain steps may be omitted or combined, in methods consistent with various embodiments of the present invention.","Reference herein to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments necessarily mutually exclusive of other embodiments. The same applies to the term \u201cimplementation.\u201d"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other aspects, features, and advantages of the present invention will become more fully apparent from the following detailed description and the accompanying drawings in which like reference numerals identify similar or identical elements.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIGS. 7","FIG. 3"],"i":["a","e "],"b":"7"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIGS. 8","FIG. 4"],"i":["a","c "]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIGS. 9","FIG. 6"],"i":["a","c "]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
