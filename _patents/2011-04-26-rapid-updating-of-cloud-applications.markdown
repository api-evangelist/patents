---
title: Rapid updating of cloud applications
abstract: A method for facilitating the uploading of web applications to a cloud computing environment utilizes hashes or fingerprints of each file in a web application. Prior to submitting all the files of a web application to the cloud computing environment for deployment, fingerprints of each file in the web application are transmitted to the cloud computing environment to assess whether the cloud computing environment may already possess the file as a result of receiving it from previously uploaded web applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448790&OS=09448790&RS=09448790
owner: Pivotal Software, Inc.
number: 09448790
owner_city: Palo Alto
owner_country: US
publication_date: 20110426
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application claims the benefit of U.S. provisional patent application 61\/327,908 filed on Apr. 26, 2010 and entitled \u201cRapid Updating of Cloud Applications,\u201d which is hereby incorporated by reference. The present application is further related by subject matter to U.S. patent application Ser. No. 12\/767,010 filed on Apr. 26, 2010 and entitled \u201cCloud Platform Architecture\u201d, U.S. patent application entitled \u201cPolicy Engine for Cloud Platform\u201d and filed on even date herewith, and U.S. patent application entitled \u201cDroplet Execution Engine for Dynamic Server Application Deployment\u201d and filed on even date herewith, each of which is hereby incorporated by reference.","\u201cPlatform-as-a-Service\u201d (also commonly referred to as \u201cPaaS\u201d) generally describes a suite of technologies provided by a service provider as an integrated solution that enables a web developer (or any other application developer) to build, deploy and manage the life cycle of a web application (or any other type of networked application). One primary component of PaaS is a \u201ccloud-computing platform\u201d which is a network (e.g., Internet, etc.) infrastructure run and maintained by the service provider upon which developed web applications may be deployed. By providing the hardware resources and software layers required to robustly run a web application, the cloud computing platform enables developers to focus on the development of the web application, itself, and leave the logistics of scalability and other computing and storage resource requirements (e.g., data storage, database access, processing power, facilities, power and bandwidth, etc.) to the cloud computing platform (e.g., at a cost charged by the service provider). A service provider may additionally provide a plug-in component to a traditional IDE (i.e., integrated development environment) that assists a developer who creates web applications using the IDE to properly structure, develop and test such applications in a manner that is compatible with the service provider's cloud computing platform. Once the developer completes a web application using the IDE, the plug-in component assists the developer in deploying the web application into the cloud computing platform. However, during the web application development process, the repeated uploading of revised versions of the web application to the cloud computing platform to test the web application in a deployment environment can be time consuming due to the significant size of the web application, which can be comprised of multiple files, including library files and other files related to the web application's runtime environment and application framework.","One or more embodiments of the present invention provide methods for facilitating the updating of web applications to a cloud computing environment by providing \u201cfingerprints\u201d of the web application to the cloud computing environment prior to transmitting selected files of the web application to the cloud computing environment. One method, according to an embodiment, for receiving a web application for deployment in a cloud computing environment, comprises the steps of receiving a list of hash values from a development environment, wherein each hash value corresponds to a file in a web application package to be submitted to the cloud computing environment, comparing the list of hash values with a local list of hash values corresponding to locally stored files from previously submitted web applications, identifying a subset of files in the web application package, wherein each file in the subset does not have a corresponding entry in the local list of hash values, requesting the subset of files from the development environment, and receiving the subset of files.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":["100","102","102","104","106","102","100","102","108","100"]},"Cloud computing platform provider  provides service provider  an infrastructure platform  upon which a cloud computing environment  may be executed. In the particular embodiment of , infrastructure platform  comprises hardware resources , such as servers to and one or more storage array networks (SAN), such as SAN , which are configured in a manner to provide a virtualization environment  that supports the execution of a plurality of virtual machines across servers to . As further detailed below, these virtual machines provide the various services and functions that make up cloud computing environment .","Virtualization environment  of  additionally includes an orchestration component  (e.g., implemented as a process running in a virtual machine in one embodiment) that monitors the infrastructure resource consumption levels and requirements of cloud computing environment  (e.g., by monitoring communications routed through addressing and discovery layer  as further detailed below) and provides additional infrastructure resources to cloud computing environment as needed or desired. For example, if cloud computing environment  requires additional virtual machines to host newly deployed web applications or to scale currently running web applications to support peak demands, orchestration component  can initiate and manage the instantiation of virtual machines on servers to to support such needs. In one example implementation of an embodiment similar to that of , virtualization environment  may be implemented by running VMware ESX\u2122 based hypervisor technologies on servers to provided by VMware, Inc. of Palo Alto, Calif. (although it should be recognized that any other virtualization technologies, including Xen\u00ae and Microsoft Hyper-V virtualization technologies may be utilized consistent with the teachings herein).","In the embodiment of , cloud computing environment  supports an application execution space  that comprises a plurality of virtual machines (referred to as container VMs to ) instantiated to host deployed web applications. For example, the deployment by enterprise  of a web application  on the cloud computing platform of service provider  results in the hosting of web application  in container VM of application execution space  at cloud computing platform provider .","Web application  can access a set of base services  (e.g., run in one or more virtual machines) provided by cloud computing environment  as well as third-party services such as those that may be provided directly by service provider  (e.g., custom database , CRM service , etc.). For example, a relational database service (e.g., MySQL, etc.), monitoring service, background task scheduler, logging service, messaging service, memory object caching service and the like may comprise base services  in one embodiment. A service provisioner  (e.g., run in one or more virtual machines) serves as a communications intermediary between these available services (e.g., base services  and other third party provided services such as custom database  and CRM service ) and other components of cloud computing environment  (e.g., cloud controller , health manager , router , container VMs to , etc.) and assists with the task of provisioning or binding such available services to web applications during the web application deployment process.  depicts a component architecture for service provisioner  of cloud computing environment , according to one embodiment. In the embodiment of , service provisioner  maintains a shim or similar stub component (sometimes also referred to as a \u201cservice gateway\u201d) for each service available in cloud computing environment  (see, e.g., shims , and , respectively, for base services and , and CRM service ). Each shim component itself maintains service provisioning data for its corresponding service, such as a description of the service type, service characteristics (e.g., multi-tenancy versus single tenancy, etc.), login credentials for the service (e.g., root username, password, etc.), network address and port number of the service, and the like. Each shim component is configured to communicate with its corresponding service utilizing an API or other similar communications protocol that is supported by such service. For example, in order to bind web application  to base service during deployment, service provisioner  may direct shim to log into base service and generate new credentials (e.g., a new username and password) specifically for web application  so that web application  can directly log into and access base service with such credentials during its execution. In certain embodiments, service provisioner  further comprises an addressing and discovery layer communications client  that enables service provisioner  to communicate with other components of cloud computing environment  through addressing and discovery layer . In an alternative embodiment, service provisioner  may communicate with other components of cloud computing environment  through HTTP or other network protocols rather than through addressing and discovery layer , for example, to eliminate any compatibility requirements of third party services such as customer database  and CRM service  to utilize communication protocols of addressing and discovery layer .","It should be recognized that service provisioner  as depicted in  is only one embodiment of a communications intermediary between available services and other components of cloud computing environment  and that alternative embodiments may be implemented consistent with the teachings herein. For example, an alternative embodiment of service provisioner  comprises independently operating shim components. Each shim component operates, for example, as an independent process and comprises its own addressing and discovery layer communications client to interact with addressing and discovery layer  (although, in alternative embodiments, such shim components may communicate with other components of cloud computing environment  through HTTP or other network protocols rather than utilizing such an address and discovery layer communications client ). In such an embodiment, shim components may be implemented in different locations, so long as they are able to effectively communicate with address and discovery layer . For example, a shim for CRM service  may be implemented as a process running on a server at service provider  while shim components for base services and may be implemented as processes running within allocated virtual machines at cloud computing service provider .","Returning to , addressing and discovery layer  provides a common interface through which components of cloud computing environment , such as service provisioner , cloud controller , health manager , router  and container VMs to in application execution space , can communicate and receive notifications. For example, in one embodiment, service provisioner  may communicate through addressing and discovery layer  to broadcast the availability of services and to propagate service provisioning data for such services during deployment of web applications in cloud computing environment  (in other embodiments, service provisioner  may communicate with other components of cloud computing environment  through HTTP or other network protocols rather than address and discovery layer ). Similarly, container VM may broadcast a notification through addressing and discovery layer  to indicate the successful deployment of web application  and to provide routing information (e.g., hostname and network address information, bound port number, etc.) for the successfully deployed web application . In one embodiment, addressing and discovery layer  is implemented as a message brokering service (e.g., running in one or more virtual machines) that defines a common protocol and message format through which components of cloud computing environment  can exchange messages and broadcast notifications and other information. In such an embodiment, the components of cloud computing environment  establish a connection with the message brokering service (e.g., also sometimes referred to as \u201csubscribing\u201d to the message brokering service), for example, through known authentication techniques (e.g., passwords, etc.) and, once connected to the message brokering service, can provide, receive and request messages, notifications and other similar information to and from other components that have also subscribed to the message brokering system. Examples of a message brokering service that may be used in an embodiment is RabbitMQ\u2122 which is based upon the AMPQ (Advanced Message Queuing Protocol) open protocol standard or NATS, an open source publish-subscribe messaging system. It should be recognized, however, that alternative interfaces and communication schemes may be implemented for addressing and discovery layer  other than such a message brokering service.","Cloud controller  (e.g., run in one or more virtual machines) orchestrates the deployment process for web applications that are submitted to cloud computing environment  for deployment. Cloud controller  receives web applications submitted to cloud computing environment  and, as further detailed below, interacts with other components of cloud computing environment  to bind available services required by submitted web applications and package web applications for transmission to available container VMs (e.g., container VMs to ) for deployment. In the embodiment depicted in , web applications, such as web application , received by cloud controller  may be developed by an application developer  in enterprise  using an integrated development environment (IDE)  installed on the developer's laptop or terminal IDE  includes an installed plug-in provided by service provider  that facilitates the development and submission of web application  to cloud computing environment . In order to provide enterprise  the ability to impose enterprise-wide rules on web applications (e.g., permitted accessible services, computing resource consumption limitations, etc.), service provider  may also provide to enterprise  a policy engine  to be run, for example, as a proxy server within enterprise . As depicted in the embodiment of , policy engine  is situated in the communications path between the cloud controller  and entities that communicate with cloud computing environment  through cloud controller ), such as application developer  or an administrator , as further discussed below. For example, policy engine  intercepts web applications submitted for deployment by developer  and reviews the requested requirements of such submitted web applications, prior to releasing them to cloud computing environment  for deployment. Administrator  in enterprise  is able to set policies for policy engine  as well as review analytics for web applications currently deployed in cloud computing environment  through a policy engine user interface  that communicates with policy engine  and can be accessed via a web browser or other client application. In one embodiment, policy engine  is further able to provide the same or similar functions as cloud controller  locally within enterprise . It should be recognized that policy engine  is an optional feature that may be provided by service provider  to enterprise  and that alternative embodiments or implementations may not utilize or include policy engine . For example, as depicted in , application developer  and administrator  may communicate directly with cloud controller , without utilizing policy engine . Furthermore, it should be recognized that in alternative embodiments, policy engine  may be situated at any location within the communications path to cloud controller , for example, within service provider  or cloud platform provider  rather than enterprise , as is depicted in . It should further be recognized that multiple policy engines , enforcing policies for different organizations, may be situated between in communications paths to cloud controller , for example, both within enterprise  and service provider . Cloud computing environment  further comprises a health manager  (e.g., run in one or more virtual machines) that tracks and maintains the \u201chealth\u201d of cloud computing environment  by monitoring messages broadcast on addressing and discovery layer  by other components of cloud computing environment . For example, health manager  may notice the failure of an instance of a deployed web application and automatically broadcast a request to cloud controller  to re-start the web application. Similarly, health manager  may be further configured to itself initiate the re-starting of failed available services or other components of cloud computing environment  (e.g., cloud controller , service provisioner , router , etc.).","Once cloud controller  successfully orchestrates the deployment of web application  in container VM , an enterprise customer  can access web application , for example, through a web browser or any other appropriate client application residing on a computer laptop or other computer terminal. Router  (e.g., run in one or more virtual machines) receives the web browser's access request (e.g., a uniform resource locator or URL) and routes the request to container VM which hosts web application . More generally, router  maintains mappings in internal routing tables between URLs and deployed web applications in order to properly route URL requests from customers to the appropriate container VMs hosting the requested web applications (as well as maintain load balancing among web application instances, etc.). These mappings are received by router  through address and discovery layer , as detailed further below, when a container VM successfully deploys a web application and thus broadcasts routing information (e.g., hostname, network address information, port number, etc.) for the web application through addressing and discovery layer .","It should be recognized that the embodiment of  is merely exemplary and that alternative cloud computing architectures may be implemented consistent with the teachings herein. For example, while  implements cloud computing environment  on an infrastructure platform  hosted by cloud computing platform provider , it should be recognized that cloud computing environment  may be implemented by entities other than cloud computing platform provider , on top of any type of hardware infrastructure. In one alternative embodiment, infrastructure platform  is provided by service provider  itself. Furthermore, unlike , in which infrastructure platform  comprises a virtualization environment  in which components of cloud computing environment  are implemented as processes or daemons running in one or more virtual machines, in alternative embodiments, the components of cloud computing environment  are run in a non-virtualized infrastructure platform , as processes or daemons directly on hardware resources . It should be recognized that embodiments may configure cloud computing environment  and infrastructure platform  in a loosely coupled manner with communication between computing environment  and infrastructure  only occurring through orchestration component  of infrastructure platform  which monitors hardware resource consumption by connecting to addressing and discovery layer ). In such loosely coupled embodiments, it should be recognized that cloud computing environment  may be implemented on any infrastructure platform, including on a laptop or personal computer (e.g., in which case, each component of cloud computer environment  runs as a separate process or daemon on the laptop or personal computer).",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIGS. 2A and 2B"],"b":["134","300","142","140","142","302","134","134","304","306","134","134","308","306","308","310","134","112","112","312","134","132","130","314","130","132","316"]},"Upon receipt of such service provisioning data, in step , cloud controller  is then able to transmit the identity of available services to IDE  as requested in step . Upon receipt of the identity of available services, in step , the IDE plug-in then determines and transmits a selection of desired available services to bind to the submitted web application. It should be recognized that such a selection process may, in certain embodiments, be automated, in accordance with pre-configured preferences set in the IDE, or may involve manual selection by developer  in other embodiments. Upon receipt of the selection of services, in step , cloud controller  begins a \u201cstaging process\u201d to stage, or otherwise modify the contents of the WAR file (or other package) of the submitted web application to bind the selected services to the web application. In one embodiment, this staging process involves unpacking the WAR file or extracting its constituent directory structure and files, accordingly inserting new files and\/or modifying existing files to bind the selected services, and repacking the WAR file (e.g., or otherwise creating a new WAR file that replaces the previous WAR file). For example, in step , cloud controller  and the shim components of service provisioner  for the selected services may exchange messages through addressing and discovery layer  to establish or otherwise obtain additional service provisioning data such as service login credentials (e.g., username\/password combinations), hostname, network address and port number to access the service and any requisite software drivers\/libraries that may be needed to enable the submitted web application to communicate with the services upon deployment. Cloud controller  is then able to incorporate such service provisioning data into the contents of the WAR file as part of the staging process. In one embodiment, set-up information identifying the application framework utilized to develop the submitted web application (i.e., that was received by cloud controller  in step ) enables cloud controller  to properly insert service provisioning data into the contents of the WAR file to bind selected services based upon a data organization structure of the WAR file that is imposed by the application framework (e.g., inserting additional environmental variables, entries in configuration files, additional system parameters and the like reflecting, for example, the hostname, network address, port number and login credentials for the service, etc.). For example, if the application framework is the Spring framework, cloud controller  inserts service provisioning data into the contents of the WAR file in accordance with how a Spring framework developed web application organizes its data within the WAR file. Once the contents of the WAR file have been modified to bind selected services to the submitted web application, in step , cloud controller  generates a start script file that can be executed by a container VM to start a runtime environment and launch the submitted web application in the runtime environment. For example, if the WAR file is intended to be deployed in a runtime environment such as Apache Tomcat application server, the start script file may include commands to start Apache Tomcat and then start the servlet (or servlets) that comprises web application  (e.g., via a net start command, etc.). In an alternative embodiment, such staging as described in steps - may be deferred until the submitted web application is actually deployed, as further described below (when describing ).","In step , cloud controller  then creates a web application deployment package that can be unpacked by any available container VM. In one embodiment, such a web application deployment package is a \u201ctar\u201d file (also referred to as a tarball) that includes the start script file, an instance of the runtime environment (e.g., Apache Tomcat, etc.) to be installed and started in a container VM, and the WAR file for web application  (e.g., embedded in an appropriate directory within the directory structure of the instance of the runtime environment).","Alternative embodiments may include further optimizations to streamline the communication (and utilized network bandwidth) between the IDE plug-in at enterprise  and cloud controller . For example, in one embodiment, in step , IDE plug-in may include as part of the transmission of set-up characteristics, a \u201cfingerprint\u201d list of hash values (e.g., SHA-1 values, etc.) and file sizes for each file in the WAR file.  depicts data structures for fingerprinting data structures to facilitate transmission of web applications to a cloud controller. IDE plug-in maintains a web application package fingerprint file  comprising a list of entries for each file in a web application file such as a WAR file. Each entry comprises the name of a file, a hash value of the file (e.g., SHA-1 hash value, etc.) and the file size of the file. Upon preparing to deploy a web application, for example, in step  of , IDE plug-in transmits web application fingerprint file  to cloud controller . Cloud controller , in turn, maintains its own table of fingerprint entries for hash value\/file size pairs as cloud controller fingerprint file , with each entry further comprises a reference to a stored file. Upon receipt of web application package fingerprint file  from the IDE plug-in, cloud controller  determines whether it already has any of the files in the WAR file stored in cloud controller storage  by reviewing cloud controller fingerprint file . In such manner, cloud controller  can specifically request only those files with associated hash values and file sizes for which cloud controller  does not have an entry in its table. In the embodiment of , for example, instead of transmitting all of files A through Z that make up the web application, cloud controller  can inform IDE plug-in to only send file A and file X since cloud controller  has already locally stored the rest of the files that make up the web application. Such an optimization can significantly reduce the amount of data transmitted by IDE plug-in to cloud controller . For example, if only a few lines of code have been changed in a single library file of an already uploaded web application, the foregoing fingerprinting process enables the IDE plug-in to transmit only the library file itself, rather than the entire WAR file. Similarly, since different web applications often share common application framework files, the foregoing fingerprinting process can further significantly reduce the uploading times for different web applications.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4B","b":["450","400","452","400","134","454","134","400","456","400","400","134","400","458","400","405","134","460","462","464","134","134","134","466","134","468","470","134","410","405","410"]},"It should be recognized that other fingerprinting methods and data structures may be utilized other than those set forth in  consistent with the teachings herein. For example, in an alternative embodiment, only hash values are utilized without utilizing file sizes to determine missing files. It should also be further recognized that although an IDE (or IDE plug-in) is described in , alternative embodiments may initiate the flows in  performed by the IDE plug-in using other non-IDE environments. For example, developer  may interact with cloud controller  through a command line interface (\u201cCLI\u201d), other applications, or any other similar process or tool capable of initiating a network request (e.g., HTTP request) to communicate with cloud controller . Furthermore, it should be recognized that embodiments may include a policy engine  that intercepts communication between IDE plug-in (or CLI or other similar tool) and cloud controller , altering communications in order to adhere to set policies and\/or performing steps on behalf of the IDE plug-in (e.g., selecting services in step  according to pre-defined policies, etc). It should also be recognized that functionalities described herein as provided in a plug-in IDE (or CLI or other application or tool) may be alternatively provided inside the cloud computing environment , for example, in cloud controller , in alternative embodiments. For example, in one alternative embodiment, determination of the application framework as part of the \u201cset-up\u201d characteristics in step  may be performed by cloud controller  upon its receipt of the web application.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 5","FIG. 5","FIG. 3","FIG. 3"],"b":["134","125","500","134","100","140","125","502","134","132","134","504","428","126","132","126","125","506","134","132","428","126","125","328","508","428","510","428","430","125","512","428","126","125"],"sub":["1 ","1 ","1 ","1 "]},"In certain embodiments, base services  and\/or third party services (such as custom database  and CRM service ) are dynamically bound to web application  upon its launch in step  rather than during steps - of the staging process as previously described in the context of . In one such embodiment, cloud controller  may maintain globally accessible environment variables for available services in cloud computing environment . For any particular service, the values of such environment variables may provide service provisioning data such as the hostname, network address and port number or login credentials for the service. In one embodiment, such environment variables are initialized by cloud controller  during the staging process, for example, after step  of , when a service has been identified to cloud controller  to be used by web application  during its deployment. In such an embodiment, the staged web application  itself includes code (i.e., the web programmer knows to programmatically check the values of such environment variables or such code is otherwise injected into web application  during the staging process) that the searches for the names of environment variables for services that are utilized by web application  and binds web application  to those services using the values of such environment variables. As such, launch of web application  in step  causes such code in web application  to be executed, thereby dynamically binding the services to web application  upon its launch by utilizing the service provisioning data values of the environment variables.","Once deployment agent  recognizes that web application  has successfully launched (e.g., by confirming the successful binding of a port number to web application  in one embodiment), deployment agent  broadcasts the hostname, network address information of container VM and the bound port number of deployed web application , in step , through addressing and discovery layer . In turn, router  retrieves the broadcast hostname, network address information and bound port number though the addressing and discovery layer  in step  and updates its internal routing table in step , thereby enabling router  to properly route URL requests received from enterprise customer  for web application  to container VM . It should be recognized that the process of dynamically updating routing information in router  upon successful deployment of a web application through steps  to  provides cloud computing environment  flexibility to more easily migrate, move or otherwise re-deploy web applications to different containers VM to for any of a number of reasons (e.g., during hardware failures, for load balancing purposes, etc.). For example, in one exemplary scenario, health manager  may recognize that web application  has stopped running because server that hosts container VM in which web application  has been deployed has suffered a hardware failure. Upon such recognition, health manager  may initiate a request to cloud controller  to re-deploy web application  in a different container VM running on a different server. Once web application  has been successfully re-deployed by cloud controller , as a result of steps  to , router  will be automatically updated with new routing information to properly route requests to web application  which is now deployed on a different container VM on a different server (and therefore is associated with new network routing information). It should be recognized that although the foregoing description utilizes hostnames, network addresses and port numbers to generally describe network address information for a web application, any type of network information may be utilized as network address information in embodiments, depending upon the structure of the connected network and communications protocols implemented by cloud computing environment . Additionally, in step , deployment agent  also identifies a process identifier for the deployed web application  and generates a stop script file, in the event that cloud controller  receives a command to stop web application  in the future (e.g., by request of administrator , etc.).","It should be recognized that various modifications and changes may be made to the specific embodiments described herein without departing from the broader spirit and scope of the invention as set forth in the appended claims. For example, while the foregoing description has discussed embodiments using web applications or Internet applications, it should be recognized that any network utilizing application can leverage the techniques disclosed herein, and as such, \u201cweb application\u201d as used herein shall be interpreted to include any type of client-server based application that employs network based communications. Furthermore, although the foregoing embodiments have focused on the use of container VMs to host deployed web applications, it should be recognized that any \u201capplication container\u201d may be used to host web applications, including such container VMs, processes in virtual machines, kernel level containers, processes in traditional non-virtualized operating systems and any other execution environment that provides an isolated environment capable of running application level code. Similarly, while the various components of cloud computing environment  have been generally described as being implemented in one or more virtual machines (e.g., for load balancing and scalability purposes), it should be recognized that any type of \u201capplication container\u201d (as previously discussed above) can also implement such components, including, for example, traditional non-virtualized computing environment background processes, threads or daemons. Furthermore, any combination of different types of \u201capplication containers\u201d to host web applications and implement other components (e.g., cloud controller , router , health manager , base services , service provisioner , addressing and discovery layer , etc.) can comprise any particular cloud computing environment  implementation. It should further be recognized that multiple instances of the various components of cloud computing environment  (e.g., cloud controller , router , health monitor , service provisioner , etc.) may be implemented in alternative embodiments, for example, for scalability purposes.","The various embodiments described herein may employ various computer-implemented operations involving data stored in computer systems. For example, these operations may require physical manipulation of physical quantities usually, though not necessarily, these quantities may take the form of electrical or magnetic signals where they, or representations of them, are capable of being stored, transferred, combined, compared, or otherwise manipulated. Further, such manipulations are often referred to in terms, such as producing, identifying, determining, or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition, one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The various embodiments described herein may be practiced with other computer system configurations including hand-held devices, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive, network attached storage (NAS), read-only memory, random-access memory (e.g., a flash memory device), a CD (Compact Discs) CD-ROM, a CD-R, or a CD-RW, a DVD (Digital Versatile Disc), a magnetic tape, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.","Although one or more embodiments of the present invention have been described in some detail for clarity of understanding, it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly, the described embodiments are to be considered as illustrative and not restrictive, and the scope of the claims is not to be limited to details given herein, but may be modified within the scope and equivalents of the claims. In the claims, elements and\/or steps do not imply any particular order of operation, unless explicitly stated in the claims.","Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention(s). In general, structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements may fall within the scope of the appended claims(s)."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
