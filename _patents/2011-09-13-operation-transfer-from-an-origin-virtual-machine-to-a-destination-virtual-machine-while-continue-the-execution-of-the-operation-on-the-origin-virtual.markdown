---
title: Operation transfer from an origin virtual machine to a destination virtual machine while continue the execution of the operation on the origin virtual machine
abstract: Technologies and implementations for transferring operation from an origin virtual machine to a destination virtual machine while the origin virtual machine continues to execute an origin executable are generally disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189271&OS=09189271&RS=09189271
owner: Empire Technology Development, LLC
number: 09189271
owner_city: Wilmington
owner_country: US
publication_date: 20110913
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application is a U.S. national stage application filing under 35 U.S.C. \u00a7371 claiming the benefit of International Application No. PCT\/US2011\/051387, filed on Sep. 13, 2011, the entire contents of which are incorporated herein by reference.","Unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","Current cloud computing services may be stopped and then restarted over again when moving between virtual machines that have different capabilities such as memory and API types. Accordingly, components that can't be distributed between servers (e.g., as may often be the case with database services) may be run on the largest hardware virtual machine so that they can reasonably handle peak usage conditions. The alternative to selecting virtual machines based on peak usage conditions is to face a significant delay and loss of transient state data. Such delay and loss of transient state data may be due to services being stopped and then restarted during switchovers to larger hardware virtual machines.","Accordingly, current cloud computing services may typically be run at all times on virtual machines selected to be capable of handling peak usage conditions. However, virtual machines selected to be capable of handling peak usage conditions may only need maximum resources for less than five percent of the time. For example, Amazon Elastic Compute Cloud (EC2) pricing takes advantage of this to some degree with a \u201clarge\u201d virtual machine priced at four times the price of a \u201csmall\u201d virtual machine and an \u201cextra large\u201d virtual machine priced at eight times the price of a \u201csmall\u201d virtual machine.","Some example methods, apparatus, and systems related to transferring operation from an origin virtual machine to a destination virtual machine may be implemented in a cloud computing system. Such a cloud computing system may include several modules. A first module may be configured to generate an origin pointer index associated with an origin executable, where the origin executable is configured to be executed on an origin virtual machine. A second module may be configured to generate a destination pointer index associated with a destination executable, where the destination virtual machine has different characteristics from the origin virtual machine. Such a destination executable may be configured to be executed on a destination virtual machine. A third module may be configured to transfer persistent state data from the origin virtual machine to the destination virtual machine. A fourth module may be configured to transfer delta data from a delta queue associated with the origin virtual machine to the destination virtual machine while the origin virtual machine continues to execute the origin executable. The fourth module may be configured to transfer delta data based at least in part on the origin pointer index and the destination pointer index.","Some example methods may include operations for transferring operation from an origin virtual machine to a destination virtual machine. Such operations may launch a destination executable on a destination virtual machine while an origin virtual machine may continue to execute an origin executable, where the destination virtual machine may have different characteristics from the origin virtual machine. Persistent state data may be transferred from the origin virtual machine to the destination virtual machine. Delta data may be transferred from a delta queue associated with the origin virtual machine to the destination virtual machine while the origin virtual machine may continue to execute the origin executable. A switch from the origin virtual machine to the destination virtual machine may be performed when the launching of the destination executable has been completed and the delta queue is empty.","Some example articles may include machine-readable instructions for transferring operation from an origin virtual machine to a destination virtual machine. Such machine-readable instructions may launch a destination executable on a destination virtual machine while an origin virtual machine may continue to execute an origin executable, where the destination virtual machine may have different characteristics from the origin virtual machine. Persistent state data may be transferred from the origin virtual machine to the destination virtual machine. Delta data may be transferred from a delta queue associated with the origin virtual machine to the destination virtual machine while the origin virtual machine may continue to execute the origin executable. A switch from the origin virtual machine to the destination virtual machine may be performed when the launching of the destination executable has been completed and the delta queue is empty.","The foregoing summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects, embodiments, and features described above, further aspects, embodiments, and features will become apparent by reference to the drawings and the following detailed description.","The following description sets forth various examples along with specific details to provide a thorough understanding of claimed subject matter. It will be understood by those skilled in the art, however, that claimed subject matter may be practiced without some or more of the specific details disclosed herein. Further, in some circumstances, well-known methods, procedures, systems, components and\/or circuits have not been described in detail in order to avoid unnecessarily obscuring claimed subject matter.","In the following detailed description, reference is made to the accompanying drawings, which form a part hereof. In the drawings, similar symbols typically identify similar components, unless context dictates otherwise. The illustrative embodiments described in the detailed description, drawings, and claims are not meant to be limiting. Other embodiments may be utilized, and other changes may be made, without departing from the spirit or scope of the subject matter presented here. It will be readily understood that the aspects of the present disclosure, as generally described herein, and illustrated in the Figures, can be arranged, substituted, combined, and designed in a wide variety of different configurations, all of which are explicitly contemplated and make part of this disclosure.","This disclosure is drawn, inter alia, to methods, apparatus, and systems related to transferring operation from an origin virtual machine to a destination virtual machine while the origin virtual machine continues to execute an origin executable.","To avoid stopping and restarting cloud computing services when moving between virtual machines of different capabilities, current cloud computing services may typically be run at all times on virtual machines selected to be capable of handling peak usage conditions. As will be discussed in greater detail below, instead of stopping and restarting cloud computing services when moving between virtual machines of different capabilities, a transfer of operation from an origin virtual machine to a destination virtual machine may be possible while the origin virtual machine continues to execute an origin executable.","As will be discussed in greater detail below, transferring operation from an origin virtual machine to a destination virtual machine may be performed \u201con-the-fly.\u201d In some examples, such a transfer of operations may occur where the origin virtual machine and the destination virtual machine have different characteristics, such as, by way of example, the origin virtual machine being 32-bit based while the destination virtual machine is 64-bit based, or the origin virtual machine and the destination virtual machine having processors with different memory models altogether, or the like. Such transferring operation may include a combined strategy of booting a new service that is native to the destination virtual machine along with an origin and destination pair of pointer indexes that may allow translation between memory models. For example, such an origin and destination pair of pointer indexes may be utilized for memory translation to allow live service transfer to higher or lower capability virtual machines.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["100","100","102","104"]},"In some examples, cloud computing system  may transfer operation from origin virtual machine  to destination virtual machine . In such an example, cloud computing system  may include a transfer service  that may include several modules. In the illustrated example, transfer service  sets forth various functional modules, which may be performed by hardware, software, and\/or firmware. Those skilled in the art in light of the present disclosure will recognize that numerous alternatives to the functional modules shown in  may be practiced in various implementations. For example, although transfer service , as shown in , may comprise one particular organization of functions distributed into the set of functional modules, the organization of these functions among one or more functional modules does not necessarily limit claimed subject matter to any particular organization. Likewise, intervening functions not shown in  and\/or additional functions not shown in  may be employed and\/or some of the functions shown in  may be eliminated, without departing from the scope of claimed subject matter.","As illustrated, transfer service  may include a persistent state transfer module , an origin pointer index module , a destination pointer index module , and\/or a delta data transfer module . Persistent state transfer module  may be configured to transfer persistent state data from origin virtual machine  to destination virtual machine . Destination virtual machine  may have different characteristics from origin virtual machine . As used herein, the term \u201cdifferent characteristics\u201d may refer to variations that may include variations in a memory capacity-type characteristic, variations in a processing capacity-type characteristic, variations in an application programming interface-type characteristic, variations in an address-type characteristic, variations in an operating system-type characteristic, the like, and\/or combinations thereof. Even in cases where origin virtual machine  and destination virtual machine  have different characteristics, the persistent disk state may be utilized in the same format for both origin virtual machine  and destination virtual machine .","Origin pointer index module  may be configured to generate an origin pointer index associated with an origin executable. Such an origin executable may be configured to be executed on origin virtual machine . Additional details regarding the origin executable and origin pointer index are discussed below with regard to .","Destination pointer index module  may be configured to generate a destination pointer index associated with a destination executable. As mentioned above, destination virtual machine  may have different characteristics from origin virtual machine . Accordingly, such a destination executable may be configured to be executed on destination virtual machine , as opposed to being configured for execution on origin virtual machine . Additional details regarding the destination executable and destination pointer index are discussed below with regard to .","Delta data transfer module  may be configured to transfer delta data from a delta queue associated with origin virtual machine  to destination virtual machine . As used herein, the term \u201cdelta data\u201d may refer to environmental state data that is not associated with persistent state memory, such as environmental state data that is associated with dynamic state memory, and may also refer to persistent state data for disk updates as long as the persistent state data transfer between virtual machines is in progress. In some examples, such a transfer of delta data from origin virtual machine  to destination virtual machine  may occur while origin virtual machine  continues to execute the origin executable. Delta data transfer module  may be configured to transfer delta data based at least in part on the origin pointer index and the destination pointer index.","In operation, the transfer of data between origin virtual machine  and destination virtual machine  may involve matching the environmental state (e.g., including persistent state memory and dynamic state memory) as well as the program state (e.g., the line of code the executable is currently processing). Persistent state transfer module  may be utilized to transfer persistent state-type environmental state data from origin virtual machine  to destination virtual machine . However, as destination virtual machine  may have different characteristics from origin virtual machine , the locations within the origin executable associated with dynamic state data and program state data may not be the same locations within the destination executable. Accordingly, delta data transfer module  may be configured to adjust for location variation between origin virtual machine  and destination virtual machine  during the transfer of delta data (e.g., dynamic state-type environmental state data). For example, delta data transfer module  may utilize the origin pointer index and the destination pointer index in combination to transfer delta data (e.g., dynamic state-type environmental state data) from origin virtual machine  to destination virtual machine . Additionally or alternatively, delta data transfer module  may utilize the origin pointer index and the destination pointer index in combination to adjust for location variation between origin virtual machine  and destination virtual machine  to translate the program state data (e.g., what line of code the origin executable is currently processing). Additional details regarding the transfer of data between origin virtual machine  and destination virtual machine  are discussed below with regard to .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["200","203","202","205","204","104","102","204","104","102"]},"Uncompiled code  may include various procedures, application programming interface (API) calls, and\/or functions (referred to generally hereafter as procedures ). Uncompiled code  may be compiled via origin compiler  into origin executable  with an arrangement of procedures  into origin procedures . Similarly, uncompiled code  may be compiled via destination compiler  into origin executable  with an arrangement of procedures  into destination procedures .","In some examples, certain transfer points  may be identified from uncompiled code . Such transfer points  may be utilized to identify when switching operation from origin virtual machine  (see, e.g., ) to destination virtual machine  (see, e.g., ) would be acceptable. Such transfer points  may be identified by origin compiler  and\/or by destination compiler . Such transfer points  may represent the same place in the logic and loop flow for both destination virtual machine  (see, e.g., ) and origin virtual machine  (see, e.g., ), so both compilers  and  get the same transfer points. Such an operation may be done either by having both compilers  and  use the same algorithm to determine transfer points  (e.g., by explicitly defining transfer points  in code), or by using an algorithmic tool to add transfer points  to uncompiled code  before compiling. For example, origin compiler  may identify transfer points  and insert corresponding origin bookmark locations  into origin executable . Similarly, destination compiler  may identify transfer points  and insert corresponding destination bookmark locations  into destination executable . As mentioned previously, destination virtual machine  (see, e.g., ) may have different characteristics from origin virtual machine  (see, e.g., ). Accordingly, the position of destination bookmark locations  within destination executable  may not correspond to the respective position of origin bookmark locations  in origin executable .","In some examples, certain uses of memory may be identified from uncompiled code , such as variable declarations, procedure calls, and\/or procedure returns (referred to generally hereafter as variables ). Such variables  may be gathered as delta data during dynamic data transfer when switching operation from origin virtual machine  (see, e.g., ) to destination virtual machine  (see, e.g., ). Such variables  may be associated with an origin variable location  in origin executable . Similarly, such variables  may be associated with a destination variable location  in destination executable . As mentioned previously, destination virtual machine  (see, e.g., ) may have different characteristics from origin virtual machine  (see, e.g., ). Accordingly, the position of destination variable locations  within destination executable  may not correspond to the respective position of origin variable locations  in origin executable .","Origin compiler  may include origin pointer index module . Origin pointer index module  may be configured to generate an origin pointer index  associated with origin executable . Similarly, destination compiler  may include destination pointer index module . Destination pointer index module  may be configured to generate a destination pointer index  associated with destination executable .","As discussed above, the position of destination bookmark locations  in destination executable  may not correspond to the respective position of origin bookmark locations  in origin executable . Accordingly, origin pointer index  may include a multiple number of origin bookmark pointers . For example, such origin bookmark pointers  may be associated with individual points (e.g., origin bookmark locations ) within origin executable  designated as logical points to switch from origin virtual machine  (see, e.g., ). Similarly, destination pointer index  may include a multiple number of destination bookmark pointers . For example, Individual destination bookmark pointers  may indicate the equivalent position in destination executable  for the equivalent origin bookmark pointer  in the origin pointer index .","As discussed above, the position of destination variable locations  within destination executable  may not correspond to the respective position of origin variable locations  in origin executable . Accordingly, origin pointer index  may include a multiple number of origin persistent pointers . For example, such origin persistent pointers  may be associated with corresponding origin variables (e.g., via origin variable location ), where origin persistent pointers  may indicate where corresponding origin variable locations  are located in the origin executable . Additionally, origin variable locations  themselves may operate as origin variable pointers, where such origin variable pointers may indicate where corresponding origin variables are located in an origin memory (not shown). Similarly, destination pointer index  may include a multiple number of destination persistent pointers . For example, such destination persistent pointers  may be associated with corresponding destination variables (e.g., via origin variable location ), where destination persistent pointers  may indicate where corresponding destination variable locations  are located in the destination executable . Additionally, destination variable locations  themselves may operate as origin variable pointers, where such origin variable pointers may indicate where corresponding origin variables are located in a destination memory (not shown).","Accordingly, data regarding a given variable stored in memory may be pointed to from destination executable  via a corresponding destination variable location , while the position of destination variable location  may be pointed to from destination pointer index  via a corresponding destination persistent pointer . Likewise, data regarding a given variable stored in memory may be pointed to from origin executable  via a corresponding origin variable location , while the position of origin variable location  may be pointed to from origin pointer index  via a corresponding origin persistent pointer . Additional details regarding the transfer of data between origin virtual machine  (see, e.g., ) and destination virtual machine  (see, e.g., ) are discussed below with regard to .","In operation, origin pointer index module  and destination pointer index module  may, at compile time, generate pointer indexes  and  that may contain persistent pointers  and  to variables used in the code. For example, when code is compiled the executable binary code may typically convert variables to access pointer storage so that when memory space is dynamically allocated a pointer (e.g., origin variable pointers and\/or destination variable pointers) can be stored linking to wherever the operating system (OS) dynamic memory allocation happens to put the variable contents. Variables that do not operate in this way may include type-defined globals. Pointer indexes  and  generated at compile time may include persistent pointers  to the origin variable pointers (e.g., pointers to pointers). Additionally or alternatively, pointer indexes  and  may include pointers to any pre-allocated globals as well. Pointer indexes  and  may not include a copy of the origin variable pointers and\/or destination variable pointers, but rather may include pointers to where in the executable code one can find the origin variable pointers and\/or destination variable pointers. Thus, accessing a variable through the pointer indexes  and  may involve a multi-step process of looking an address up in the pointer indexes  and  and following it to the destination variable pointers, which might then be followed to access the actual value. Such pointer indexes  and  may allow one to find the same variable in memory for differently compiled executables on different memory modeled systems.","In operation, uncompiled code  may use variable declarations  that may be dynamically declared (as well as procedure call and return points). Such uncompiled code  may be compiled for both different virtual machine characteristics (e.g., a 32-bit environment and a 64-bit environment). The resulting compiled origin executable  (e.g., 32-bit) and compiled destination executable  (e.g., 64-bit) may be significantly different as they use different libraries, different memory models, and likely some different procedure versions. Origin pointer index module  and destination pointer index module  may be utilized to generate pointer indexes  and , respectively, to the variables used in origin executable  and destination executable . Pointer indexes  and  may not point to the variables themselves (which may not be allocated until well into runtime) but rather point to the places within origin executable  and destination executable  which will contain executable pointers  and  to the ultimate variable locations. The pointer indexes  and  may be considered an index that allows one to find the same variables in two differently compiled versions of the same code. This pointer-to-pointers approach may work for even complex variable types like pointer linked lists (e.g., pointer linked lists which may be iterated through), expandable arrays, and\/or the like.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["102","104","102","104","202"]},"Persistent state transfer module  may be utilized to transfer persistent state-type environmental state data from origin virtual machine  to destination virtual machine . For example, persistent state transfer module  may be utilized to transfer persistent state-type environmental state data from an origin persistent state  to a destination persistent state . In some examples, persistent state transfer module  may copy origin persistent state  (such as disk storage) to destination persistent state  via delta detection and updating for consistency and\/or the like. See for example, R. Bradford et al., \u201cLive wide-area migration of virtual machines including local persistent state,\u201d in Proceedings of the 3rd international conference on Virtual execution environments (ACM, 2007), 169-179.","While persistent state transfer module  may transfer persistent state-type environmental state data from origin persistent state  to destination persistent state , persistent state transfer module  may additionally be configured to launch a copy of the destination-appropriate binary (e.g., destination executable ) instead of directly copying the origin-appropriate binary (e.g., origin executable ). For example, origin executable  may be a 32-bit executable, by way of example, while destination executable  may be a 64-bit executable, rendering the origin-appropriate binary (e.g., origin executable ) unsuitable for destination virtual machine . Such a launch-instead-of-copy approach may save bandwidth during virtual machine migration. However, such a launch-instead-of-copy approach may be unconventional as such an approach may normally leave one unable to copy origin dynamic memory state  without additional procedures (e.g., such as procedures that may be describe in greater detail below with regard to  and\/or ).","As destination virtual machine  may have different characteristics from origin virtual machine , the locations within origin executable  associated with dynamic state data and program state data likely will not be the same locations within destination executable . Accordingly, delta data transfer module  may be configured to adjust for location variation between origin virtual machine  and destination virtual machine  during the transfer of delta data (e.g., dynamic state-type environmental state data). For example, delta data transfer module  may utilize origin pointer index  and destination pointer index  in combination to transfer delta data (e.g., dynamic state-type environmental state data) from origin virtual machine  to destination virtual machine . For example, delta data transfer module  may utilize origin pointer index  and destination pointer index  in combination to transfer delta data from an origin dynamic memory state  to a destination dynamic memory state .","In operation, delta data transfer module  may gather past delta data from a delta queue (not shown) associated with the origin virtual machine. For example, delta data transfer module  may gather past delta data from origin dynamic memory state . In some examples, delta data may be gathered via delta data-update based techniques and\/or live network connection transfer techniques. For example, virtual machine (VM) migration techniques may include systems for moving the disk image, virtual machine image, and memory state information. In such an example a copy may be made of the disk state, the virtual machine, and\/or the memory state while capturing any changes that occur after the time of copy (e.g., delta data). As a further example, a Xen-type hypervisor may incorporate a split driver architecture for block devices to allow use of a raw block device (blkfront) interception of messages to storage. The block tap (blktap) framework can thus be used to generate change maps or \u201cdelta data\u201d once copying starts and thus keep the destination state information updated. In such an example, whenever the delta queue is empty, the two machines are in sync. See for example, A. Warfield, S. Hand, K. Fraser and T. Deegan, \u201cFacilitating the Development of Soft Devices\u201d, in USENIX, 2005. Additionally, a virtual machine hypervisor may support commands like \u201ciproute2\u201d which may establish an IP tunnel for network redirection until the Dynamic Domain Name System (DNS) entry for the service can be updated. See for example, C. Perkins, \u201cIP encapsulation within IP\u201d, 1996, RFC 2003 and\/or B. Wellington, \u201cSecure DNS Dynamic Update\u201d, RFC 3007. In such cases, a service may have two addresses for a while (the old address responding to requests that have not yet processed the address update, and the new address for new connections and updated requestors) until all requestors have updated.","In some examples, delta data transfer module  may request dynamic memory allocations for variables as they are copied. Delta data transfer module  may locate an origin variable read location (e.g., origin variable location ) by looking up the gathered past delta data in origin pointer index . For example, delta data transfer module  may locate origin variable location  by looking up the gathered past delta data in origin pointer index  based at least in part on persistent pointers . Delta data transfer module  may determine a destination write location by referring through destination pointer index  based at least in part on the origin variable read location (e.g., origin variable location ). For example, delta data transfer module  may determine a destination write location by referring through destination pointer index  based at least in part on persistent pointers . Delta data transfer module  may write a memory state in destination memory state  based at least in part on such a destination write location.","Additionally or alternatively, delta data transfer module  may utilize origin pointer index  and destination pointer index  in combination to adjust for location variation between origin virtual machine  and destination virtual machine  to translate the program state data (e.g., what line of code origin executable  is currently processing). For example, bookmark pointers  of origin pointer index  may be associated with individual points within origin executable  designated as logical points (e.g., origin bookmark locations ) to switch from origin virtual machine . For example, bookmark pointers  may be associated with frequent execution points (e.g., such as each procedure and\/or function call) and the actual transfer may be made when the execution location of origin virtual machine  is at one of these points.","Similarly, bookmark pointers  of destination pointer index  may be associated with individual points within the destination executable designated as logical points (e.g., destination bookmark locations ) to switch to destination virtual machine . In operation, delta data transfer module  may adjust for location variation between origin virtual machine  and destination virtual machine  by referring through bookmark pointers  of origin pointer index  to bookmark pointers  of destination pointer index . Once the environmental state of origin virtual machine  and destination virtual machine (e.g., including matched persistent state memory and dynamic state memory having return coordinates and state all translated to be compatible with the destination executable ) are matched, any procedure call may be a viable point to transfer the process. Thus, transfer may be triggered when the delta queue is empty, when execution of origin executable  is at an indexed bookmark pointer, and when destination executable  has finished launching.","In the illustrated example, origin virtual machine  and destination virtual machine  may have their own version of APIs, functions, and\/or system services (e.g., origin APIs, functions, and\/or system services  and destination APIs, functions, and\/or system services ). Such APIs, functions, and\/or system services  and  may become available when destination virtual machine  is booted in preparation for moving the service. The same or similar APIs and libraries may be generally available on each virtual machine type.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 4","FIG. 4"],"b":["400","400","400","400","402","404","406","408"]},"As illustrated, process  may be implemented for transferring operation from an origin virtual machine to a destination virtual machine (see, e.g., ). Processing may begin at operation , \u201cLAUNCH A DESTINATION EXECUTABLE\u201d, where a destination executable on may be launched on a destination virtual machine. For example, a destination executable may be launched on a destination virtual machine while an origin virtual machine may continue to execute an origin executable. In some examples, the destination virtual machine may have different characteristics from the origin virtual machine. In some examples, the launching of the destination executable on the destination virtual machine may include running the destination executable with an initially empty memory during declaration of variables and during a determination of memory locations associated with the declared variables. For example, the destination executable may access an initially empty memory (e.g., either a memory that is completely empty or a memory that includes preliminary dummy data) and set up variables so as to allocate memory and to generate variables (e.g., such variables may be used with the origin and\/or destination pointer indexes to perform find and replace operations with origin data). In such an example, the destination executable may be running as close to the origin executable as possible prior to transfer of persistent state data and\/or delta data, at which point a hypervisor might freeze the destination executable until transfer of the persistent state data and delta data is complete.","Processing may continue from operation  to operation , \u201cTRANSFER PERSISTENT STATE DATA\u201d, where persistent state data may be transferred. For example, persistent state data may be transferred from the origin virtual machine to the destination virtual machine.","Processing may continue from operation  to operation , \u201cTRANSFER DELTA DATA\u201d, where delta data may be transferred. For example, delta data may be transferred from a delta queue associated with the origin virtual machine to the destination virtual machine. In some examples, such a transfer of delta data may be done while the origin virtual machine may continue to execute the origin executable. In some examples, transferring dynamic state data in bulk may be done prior to transfer of delta data (or simultaneous to an initial transfer of delta data), and then the transfer of delta data may be performed to keep the dynamic state data updated.","In some examples, such a transfer of the delta data may further include transferring the delta data from the origin virtual machine to the destination virtual machine based at least in part on an origin pointer index. For example, the origin pointer index may include multiple persistent pointers associated with corresponding origin variables. In such an example, the persistent pointers may indicate where corresponding origin variable pointers are located in the origin executable, and the origin variable pointers may indicate where corresponding origin variables are located in an origin memory. Thus, the transfer of delta data may include iterating through the origin pointer index.","In some examples, such a transfer of the delta data may further include transferring the delta data from the origin virtual machine to the destination virtual machine based at least in part on a destination pointer index. For example, the destination pointer index may include multiple persistent pointers associated with corresponding destination variables. In such an example, the persistent pointers may indicate where corresponding destination variable pointers are located in the destination executable, and the destination variable pointers may indicate where corresponding destination variables are located in a destination memory. Thus, the transfer of delta data may include iterating through the destination pointer index.","Processing may continue from operation  to operation , \u201cSWITCH FROM THE ORIGIN VIRTUAL MACHINE TO THE DESTINATION VIRTUAL MACHINE\u201d, where a switch from the origin virtual machine to the destination virtual machine may be performed. For example, such a switch from the origin virtual machine to the destination virtual machine may be performed when the launching of the destination executable has been completed and the delta queue is empty.","Some additional and\/or alternative details related to process  may be illustrated in one or more examples of implementations discussed in greater detail below with regard to .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 5","b":["500","502","504","506","508","510","512","514","516","518","520","522","524","526"]},"As illustrated, process  may be implemented for transferring operation from an origin virtual machine to a destination virtual machine (see, e.g., ). Processing may begin at operation , \u201cLAUNCH A DESTINATION VIRTUAL MACHINE\u201d where a destination virtual machine may be launched. For example, a destination virtual machine that has different characteristics than an origin virtual machine may be launched.","Processing may continue from operation  to operation , \u201cDESTINATION VIRTUAL MACHINE IS DONE BOOTING\u201d, where a determination may be made whether the destination virtual machine is done booting. For example, a determination may be made whether the destination virtual machine is done booting. In cases where the destination virtual machine not done booting, operation  may be repeated. In cases where the destination virtual machine is done booting, processing may continue from operation  to operations  and\/or .","Processing may continue from operation  to operation , \u201cLAUNCH A DESTINATION EXECUTABLE\u201d, where a destination executable on may be launched on a destination virtual machine. For example, a destination executable may be launched on a destination virtual machine, where the destination executable may be appropriate for the destination virtual machine, as opposed to the origin virtual machine (e.g., as may be the case when the destination virtual machine has different characteristics from the origin virtual machine). In some examples, the destination executable may be launched on the destination virtual machine while the origin virtual machine may continue to execute an origin executable. In some examples, the launching of the destination executable on the destination virtual machine may include running the destination executable with an initially empty memory during declaration of variables and during a determination of memory locations associated with the declared variables.","Processing may also continue from operation  to operation , \u201cCOPY PERSISTENT STATE DATA\u201d, where persistent state data may be copied. For example, persistent state data may be copied from the origin virtual machine for use by the destination virtual machine. Processing may continue from operation  to operation , \u201cWRITE PERSISTENT STATE AT DESTINATION\u201d, where persistent state data may be written. For example, persistent state data may be written to the destination virtual machine to complete the transfer of persistent state data from the origin virtual machine to the destination virtual machine.","Processing may continue from operation  to operation , \u201cREADY FOR SWITCH\u201d, where a determination may be made whether the destination virtual machine is ready for switching operation from the origin virtual machine to the destination virtual machine. For example, such a determination of whether the destination virtual machine is ready for switching operation may be based at least in part on a determination that the launching of the destination executable has been completed, the delta queue is empty, and\/or an execution address for the destination executable is associated with one of the multiple bookmark pointers in the destination pointer index. As discussed above, such bookmark pointers in the destination pointer index may be associated with individual points within the destination executable designated as logical points to switch to the destination virtual machine. In cases where the destination virtual machine is ready for switching operation, processing may continue from operation  to operation . In cases where the destination virtual machine is not ready for switching operation processing may continue from operation  to operation .","Processing may continue from operation  to operation , \u201cGATHER DELTA DATA\u201d, where past delta data may be gathered from the origin virtual machine. For example, such past delta data may be gathered via block operations or the like from a delta queue associated with the origin virtual machine. In some examples, transferring dynamic state data in bulk may be done prior to transfer of delta data, and then the transfer of delta data may be performed to keep the dynamic state data updated.","Processing may continue from operation  to operation , \u201cLOOK UP ORIGIN VARIABLE LOCATION IN ORIGIN POINTER INDEX\u201d, where an origin variable location may be looked-up in the origin pointer index. For example, locating an origin variable read location (e.g., for translation from origin executable to destination executable) may be located by looking up the gathered past delta data via the origin pointer index. In such an example, the origin pointer index may include multiple persistent pointers associated with corresponding origin variables. In some examples, the origin index pointer may take delta data and utilize a persistent pointer to refer to an address associated with an origin variable pointer (e.g., a pointer in the origin executable), the origin variable pointer may in turn refer to an origin variable in origin memory. For example, the origin pointer index may include multiple persistent pointers associated with corresponding origin variables. In such an example, the persistent pointers may indicate where corresponding origin variable pointers are located in the origin executable, and the origin variable pointers may indicate where corresponding origin variables are located in an origin memory (e.g., the origin variable pointers indicate the origin read location).","Processing may continue from operation  to operation , \u201cREFER THROUGH DESTINATION POINTER INDEX TO WRITE LOCATION\u201d, where a write location associated with a destination variable may be looked-up via the destination pointer index. For example, a destination write location (e.g., for translation from origin executable to destination executable) may be located by referring through the destination pointer index based at least in part on the origin variable read location (see, e.g., Operation ). In some examples, the destination index pointer may include persistent pointers that may refers an address associated with a destination variable pointer (e.g., a pointer in the destination executable), where the destination variable pointer may in turn refer to an address to write the origin variable into destination memory. For example, the destination pointer index may include multiple persistent pointers associated with corresponding destination variables. In such an example, the persistent pointers may indicate where corresponding destination variable pointers are located in the destination executable, and the destination variable pointers may indicate where corresponding destination variables are located in a destination memory (e.g., the destination variable pointers indicate the destination write location).","Processing may continue from operation  to operation , \u201cIF INDEX VARIABLE IS AN EXECUTION REFERENCE, UPDATE VALUE\u201d, where delta data that is an execution reference may trigger an updated value. For example, such execution references may refer to the line of origin executable currently being processed. When the delta data indicates a change in the execution reference associated with the origin executable, operation  will update a corresponding execution reference value associated with the destination executable. In some examples, the destination pointer index may includes multiple bookmark pointers, where the bookmark pointers may be associated with individual points within the destination executable that have been designated as logical points to switch to the destination virtual machine or points that may appear in execution references such as procedure return points, if\/then statements, or loops. In such examples, the updated corresponding execution reference value associated with the destination executable may be utilized in operation , where a determine is made whether the execution address for the destination executable is associated with one of the multiple bookmark pointers in the destination pointer index.","Additionally or alternatively, updating the execution reference value may occur where the execution reference includes one or more of a procedure location within the destination executable, a return location within the destination executable, a return register from procedures, the like, and\/or combinations thereof. In such examples, the execution reference value may be referred to in multiple locations within the destination executable. In such a case, Operation  may operate so that all of these locations will be updated throughout the destination executable. Such an update to the locations within the destination executable may be performed because the transferring of operation between origin virtual machine and destination machine may be done mid-process while execution pointers to return points or the like may be needed. For example, the origin pointer index and\/or the destination pointer index may contain pointers to individual procedure locations within the associated executable (e.g., the bookmark pointers may be associated with individual points within the destination executable that have been designated as logical points to switch to the destination virtual machine or points that may appear in execution references such as procedure return points, if\/then statements, or loops). In such an example, the return locations and return registers from procedures, when translated, may not only be copied but also have their contents updated so that the return is to the equivalent location in the destination executable. In operation, the return locations and return registers from procedures may be updated via an iterative performance of relatively simple indexing operations, for example.","Processing may continue from operation  to operation , \u201cWRITE MEMORY STATE IN INDEXED LOCATION AT DESTINATION\u201d, where writing to destination memory may be performed based at least in part on the destination write location looked-up via the destination pointer index. For example, the write location associated with the destination variable that was previously looked-up via the destination pointer index, at Operation , may be utilized to write to destination memory.","Processing may continue from operation  to operation , \u201cDONE WITH DELTAS\u201d, where a determination may be made whether the gathered deltas have been exhausted. In cases where the gathered delta data has not been exhausted processing may continue from operation  back to operation  in an iterative loop. For example, such an iterative loop may repeat the looking-up the origin variable location in the origin pointer index (see, e.g., Operation ), determining the destination write location (see, e.g., Operation ), updating the execution reference value (see, e.g., Operation ), and\/or writing the memory state (see, e.g., Operation ) until the gathered past deltas have been processed (see, e.g., Operation ). In cases where the gathered delta data has been exhausted, processing may continue from operation  to operation . For example, the gathering of past deltas (see, e.g., Operation ) may be repeated until the destination executable is ready, the delta queue is empty, and the current execution address corresponds to a bookmark pointer in the destination pointer index (see, e.g., Operation ).","In cases where the destination virtual machine is ready for switching operation, processing may continue from operation  to operation . Processing may continue from operation  to operation , \u201cSWITCH TO DESTINATION WITH EXECUTABLE ADDRESS TRANSLATION\u201d, where a switch from the origin virtual machine to the destination virtual machine may be performed. For example, such a switch from the origin virtual machine to the destination virtual machine may include utilizing an execution address that has been translated from a position in the origin executable to an associated position in the destination executable. In some examples, such a switch from the origin virtual machine to the destination virtual machine may be performed when the launching of the destination executable has been completed and the delta queue is empty.","In operation, process  (and\/or process  of ) may be utilized for moving from a lower capacity origin virtual machine to a higher capacity destination virtual machine. Similarly process  (and\/or process  of ) may be utilized for moving from a higher capacity destination virtual machine to a lower capacity origin virtual machine. For example, moving to a virtual machine with less capability (e.g., as might be done after a demand peak is over, for example) may be done in the same or similar manner as the moving to a virtual machine with greater capability. In such an example, operations may be added to process  (and\/or process  of ) that may be directed to having the application clear unneeded memory (e.g., garbage collection).","In operation, process  (and\/or process  of ) may allow the use of smaller cloud virtual machines when they will do the job, and larger ones only as needed, with reduced or eliminated down time. Such a capability has been calculated as likely to save many users as much as ninety percent or more under current pricing models and may also provide additional efficiencies and market share for micro-servers during slower times, allowing future data centers to support more customers with less power and heat. For example, many users may find that the impact of having to stop and move a process during what would, by definition, be their busiest moments, is unacceptable and so they may have to purchase \u201cLarge\u201d or even \u201cExtra Large\u201d virtual machines to protect against the few times when it is needed. In cases where \u201clarge\u201d virtual machine are priced at four times the price of a \u201csmall\u201d virtual machine and an \u201cextra large\u201d virtual machine is priced at eight times the price of a \u201csmall\u201d virtual machine, such users might have their costs decrease almost 4-8\u00d7 if they could simply run on a small virtual machine most of the time and seamlessly move to larger virtual machines without stopping.","Additionally or alternatively, process  (and\/or process ) may be performed in a just-in-time environment. In such an example, the origin virtual machine and the destination virtual machine may be run in parallel with duplicate inputs. Output from the origin virtual machine and the destination virtual machine may be compared based at least in part on the duplicate inputs prior to switching from the origin virtual machine to the destination virtual machine. Such compilation systems may iterate through operation of dynamically compiled code, tracking the heavy demand procedure calls, and then focusing on those heavy demand procedure calls. Such just-in-time-type compilation systems may receive uniform partially compiled binaries or \u201cthin binaries\u201d and then may have local optimizations that may be adjusted to be as specific as desired to the device that the program is running on. In cases where process  (and\/or process ) are performed in a just-in-time environment, operations associated with origin pointer index module  and\/or destination pointer index module  may be implemented instead at the JIT compiler level, while other operations may be performed in the same and\/or similar manner to that described in processes  and\/or . In cases where the code is subject to continuous optimization, such optimization may be turned off for both the origin virtual machine and the destination virtual machine for the duration of the migration.","Additionally or alternatively, process  (and\/or process ) may be performed in an arbitrary binary-type environment. A variety of methods may be utilized for attempting to map out an already compiled binary including building call trees and branching maps, for example. For example, local topology may be matched within such a call tree to build an identity for each variable and execution reference so that pointer indexes for the origin virtual machine and the destination virtual machine can match origin variables to destination variables.","Additionally or alternatively, process  (and\/or process ) may generate special cloud versions of the software in cases where memory management is needed. For example, when exact memory management (e.g. management dependent on mapping certain objects to particular addresses) is in use (e.g. for software license locks), such special cloud versions of the software may be generated that do not require such special memory management but instead may rely on communication directly with a virtual machine hypervisor.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 6","FIG. 4","FIG. 5","FIG. 1","FIG. 4","FIG. 5"],"b":["600","600","602","602","604","100","604","602"]},"In some implementations, signal bearing medium  may encompass a non-transitory computer-readable medium , such as, but not limited to, a hard disk drive, a Compact Disc (CD), a Digital Versatile Disk (DVD), a digital tape, memory, etc. In some implementations, signal bearing medium  may encompass a recordable medium , such as, but not limited to, memory, read\/write (R\/W) CDs, R\/W DVDs, etc. In some implementations, signal bearing medium  may encompass communications medium , such as, but not limited to, a digital and\/or an analog communication medium (e.g., a fiber optic cable, a waveguide, a wired communications link, a wireless communication link, etc.).",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 7","b":["700","701","700","710","720","730","710","720"]},"Depending on the desired configuration, processor  may be of any type including but not limited to a microprocessor (\u03bcP), a microcontroller (\u03bcC), a digital signal processor (DSP), or any combination thereof. Processor  may include one or more levels of caching, such as a level one cache  and a level two cache , a processor core , and registers . The processor core  may include an arithmetic logic unit (ALU), a floating point unit (FPU), a digital signal processing core (DSP Core), or any combination thereof. A memory controller  may also be used with the processor , or in some implementations the memory controller  may be an internal part of the processor .","Depending on the desired configuration, the system memory  may be of any type including but not limited to volatile memory (such as RAM), non-volatile memory (such as ROM, flash memory, etc.) or any combination thereof. System memory  may include an operating system , one or more applications , and program data . Application  may include a transfer algorithm  that is arranged to perform the functions as described herein including the functional blocks and\/or actions described with respect to process  of  and\/or process  of . Program Data  may include delta data  for use with transfer algorithm . In some example embodiments, application  may be arranged to operate with program data  on an operating system  such that implementations of transferring operation from an origin virtual machine to a destination virtual machine while the origin virtual machine continues to execute an origin executable may be provided as described herein. For example, cloud computing system  (see, e.g., ) may comprise all or a portion of computing device  and be capable of performing all or a portion of application  such that implementations of transferring operation from an origin virtual machine to a destination virtual machine while the origin virtual machine continues to execute an origin executable may be provided as described herein. This described basic configuration is illustrated in  by those components within dashed line .","Computing device  may have additional features or functionality, and additional interfaces to facilitate communications between the basic configuration  and any required devices and interfaces. For example, a bus\/interface controller  may be used to facilitate communications between the basic configuration  and one or more data storage devices  via a storage interface bus . The data storage devices  may be removable storage devices , non-removable storage devices , or a combination thereof. Examples of removable storage and non-removable storage devices include magnetic disk devices such as flexible disk drives and hard-disk drives (HDD), optical disk drives such as compact disk (CD) drives or digital versatile disk (DVD) drives, solid state drives (SSD), and tape drives to name a few. Example computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data.","System memory , removable storage  and non-removable storage  are all examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which may be used to store the desired information and which may be accessed by computing device . Any such computer storage media may be part of device .","Computing device  may also include an interface bus  for facilitating communication from various interface devices (e.g., output interfaces, peripheral interfaces, and communication interfaces) to the basic configuration  via the bus\/interface controller . Example output interfaces  may include a graphics processing unit  and an audio processing unit , which may be configured to communicate to various external devices such as a display or speakers via one or more A\/V ports . Example peripheral interfaces  may include a serial interface controller  or a parallel interface controller , which may be configured to communicate with external devices such as input devices (e.g., keyboard, mouse, pen, voice input device, touch input device, etc.) or other peripheral devices (e.g., printer, scanner, etc.) via one or more I\/O ports . An example communication interface  includes a network controller , which may be arranged to facilitate communications with one or more other computing devices  over a network communication via one or more communication ports . A communication connection is one example of a communication media. Communication media may typically be embodied by computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave or other transport mechanism, and may include any information delivery media. A \u201cmodulated data signal\u201d may be a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media may include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared (IR) and other wireless media. The term computer readable media as used herein may include both storage media and communication media.","Computing device  may be implemented as a portion of a small-form factor portable (or mobile) electronic device such as a cell phone, a personal data assistant (PDA), a personal media player device, a wireless web-watch device, a personal headset device, an application specific device, or a hybrid device that includes any of the above functions. Computing device  may also be implemented as a personal computer including both laptop computer and non-laptop computer configurations. In addition, computing device  may be implemented as part of a wireless base station or other wireless system or device.","Some portions of the foregoing detailed description are presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is here, and generally, is considered to be a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a computing device, that manipulates or transforms data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing device.","Claimed subject matter is not limited in scope to the particular implementations described herein. For example, some implementations may be in hardware, such as employed to operate on a device or combination of devices, for example, whereas other implementations may be in software and\/or firmware. Likewise, although claimed subject matter is not limited in scope in this respect, some implementations may include one or more articles, such as a signal bearing medium, a storage medium and\/or storage media. This storage media, such as CD-ROMs, computer disks, flash memory, or the like, for example, may have instructions stored thereon, that, when executed by a computing device, such as a computing system, computing platform, or other system, for example, may result in execution of a processor in accordance with claimed subject matter, such as one of the implementations previously described, for example. As one possibility, a computing device may include one or more processing units or processors, one or more input\/output devices, such as a display, a keyboard and\/or a mouse, and one or more memories, such as static random access memory, dynamic random access memory, flash memory, and\/or a hard drive.","There is little distinction left between hardware and software implementations of aspects of systems; the use of hardware or software is generally (but not always, in that in certain contexts the choice between hardware and software can become significant) a design choice representing cost vs. efficiency tradeoffs. There are various vehicles by which processes and\/or systems and\/or other technologies described herein can be effected (e.g., hardware, software, and\/or firmware), and that the preferred vehicle will vary with the context in which the processes and\/or systems and\/or other technologies are deployed. For example, if an implementer determines that speed and accuracy are paramount, the implementer may opt for a mainly hardware and\/or firmware vehicle; if flexibility is paramount, the implementer may opt for a mainly software implementation; or, yet again alternatively, the implementer may opt for some combination of hardware, software, and\/or firmware.","The foregoing detailed description has set forth various embodiments of the devices and\/or processes via the use of block diagrams, flowcharts, and\/or examples. Insofar as such block diagrams, flowcharts, and\/or examples contain one or more functions and\/or operations, it will be understood by those within the art that each function and\/or operation within such block diagrams, flowcharts, or examples can be implemented, individually and\/or collectively, by a wide range of hardware, software, firmware, or virtually any combination thereof. In one embodiment, several portions of the subject matter described herein may be implemented via Application Specific Integrated Circuits (ASICs), Field Programmable Gate Arrays (FPGAs), digital signal processors (DSPs), or other integrated formats. However, those skilled in the art will recognize that some aspects of the embodiments disclosed herein, in whole or in part, can be equivalently implemented in integrated circuits, as one or more computer programs running on one or more computers (e.g., as one or more programs running on one or more computer systems), as one or more programs running on one or more processors (e.g., as one or more programs running on one or more microprocessors), as firmware, or as virtually any combination thereof, and that designing the circuitry and\/or writing the code for the software and\/or firmware would be well within the skill of one of skill in the art in light of this disclosure. In addition, those skilled in the art will appreciate that the mechanisms of the subject matter described herein are capable of being distributed as a program product in a variety of forms, and that an illustrative embodiment of the subject matter described herein applies regardless of the particular type of signal bearing medium used to actually carry out the distribution. Examples of a signal bearing medium include, but are not limited to, the following: a recordable type medium such as a flexible disk, a hard disk drive (HDD), a Compact Disc (CD), a Digital Versatile Disk (DVD), a digital tape, a computer memory, etc.; and a transmission type medium such as a digital and\/or an analog communication medium (e.g., a fiber optic cable, a waveguide, a wired communications link, a wireless communication link, etc.).","Those skilled in the art will recognize that it is common within the art to describe devices and\/or processes in the fashion set forth herein, and thereafter use engineering practices to integrate such described devices and\/or processes into data processing systems. That is, at least a portion of the devices and\/or processes described herein can be integrated into a data processing system via a reasonable amount of experimentation. Those having skill in the art will recognize that a typical data processing system generally includes one or more of a system unit housing, a video display device, a memory such as volatile and non-volatile memory, processors such as microprocessors and digital signal processors, computational entities such as operating systems, drivers, graphical user interfaces, and applications programs, one or more interaction devices, such as a touch pad or screen, and\/or control systems including feedback loops and control motors (e.g., feedback for sensing position and\/or velocity; control motors for moving and\/or adjusting components and\/or quantities). A typical data processing system may be implemented utilizing any suitable commercially available components, such as those typically found in data computing\/communication and\/or network computing\/communication systems.","The herein described subject matter sometimes illustrates different components contained within, or connected with, different other components. It is to be understood that such depicted architectures are merely exemplary, and that in fact many other architectures can be implemented which achieve the same functionality. In a conceptual sense, any arrangement of components to achieve the same functionality is effectively \u201cassociated\u201d such that the desired functionality is achieved. Hence, any two components herein combined to achieve a particular functionality can be seen as \u201cassociated with\u201d each other such that the desired functionality is achieved, irrespective of architectures or intermedial components. Likewise, any two components so associated can also be viewed as being \u201coperably connected\u201d, or \u201coperably coupled\u201d, to each other to achieve the desired functionality, and any two components capable of being so associated can also be viewed as being \u201coperably couplable\u201d, to each other to achieve the desired functionality. Specific examples of operably couplable include but are not limited to physically mateable and\/or physically interacting components and\/or wirelessly interactable and\/or wirelessly interacting components and\/or logically interacting and\/or logically interactable components.","With respect to the use of substantially any plural and\/or singular terms herein, those having skill in the art can translate from the plural to the singular and\/or from the singular to the plural as is appropriate to the context and\/or application. The various singular\/plural permutations may be expressly set forth herein for sake of clarity.","It will be understood by those within the art that, in general, terms used herein, and especially in the appended claims (e.g., bodies of the appended claims) are generally intended as \u201copen\u201d terms (e.g., the term \u201cincluding\u201d should be interpreted as \u201cincluding but not limited to,\u201d the term \u201chaving\u201d should be interpreted as \u201chaving at least,\u201d the term \u201cincludes\u201d should be interpreted as \u201cincludes but is not limited to,\u201d etc.). It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended, such an intent will be explicitly recited in the claim, and in the absence of such recitation no such intent is present. For example, as an aid to understanding, the following appended claims may contain usage of the introductory phrases \u201cat least one\u201d and \u201cone or more\u201d to introduce claim recitations. However, the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles \u201ca\u201d or \u201can\u201d limits any particular claim containing such introduced claim recitation to inventions containing only one such recitation, even when the same claim includes the introductory phrases \u201cone or more\u201d or \u201cat least one\u201d and indefinite articles such as \u201ca\u201d or \u201can\u201d (e.g., \u201ca\u201d and\/or \u201can\u201d should typically be interpreted to mean \u201cat least one\u201d or \u201cone or more\u201d); the same holds true for the use of definite articles used to introduce claim recitations. In addition, even if a specific number of an introduced claim recitation is explicitly recited, those skilled in the art will recognize that such recitation should typically be interpreted to mean at least the recited number (e.g., the bare recitation of \u201ctwo recitations,\u201d without other modifiers, typically means at least two recitations, or two or more recitations). Furthermore, in those instances where a convention analogous to \u201cat least one of A, B, and C, etc.\u201d is used, in general such a construction is intended in the sense one having skill in the art would understand the convention (e.g., \u201ca system having at least one of A, B, and C\u201d would include but not be limited to systems that have A alone, B alone, C alone, A and B together, A and C together, B and C together, and\/or A, B, and C together, etc.). In those instances where a convention analogous to \u201cat least one of A, B, or C, etc.\u201d is used, in general such a construction is intended in the sense one having skill in the art would understand the convention (e.g., \u201ca system having at least one of A, B, or C\u201d would include but not be limited to systems that have A alone, B alone, C alone, A and B together, A and C together, B and C together, and\/or A, B, and C together, etc.). It will be further understood by those within the art that virtually any disjunctive word and\/or phrase presenting two or more alternative terms, whether in the description, claims, or drawings, should be understood to contemplate the possibilities of including one of the terms, either of the terms, or both terms. For example, the phrase \u201cA or B\u201d will be understood to include the possibilities of \u201cA\u201d or \u201cB\u201d or \u201cA and B.\u201d","Reference in the specification to \u201can implementation,\u201d \u201cone implementation,\u201d \u201csome implementations,\u201d or \u201cother implementations\u201d may mean that a particular feature, structure, or characteristic described in connection with one or more implementations may be included in at least some implementations, but not necessarily in all implementations. The various appearances of \u201can implementation,\u201d \u201cone implementation,\u201d or \u201csome implementations\u201d in the preceding description are not necessarily all referring to the same implementations.","While certain exemplary techniques have been described and shown herein using various methods and systems, it should be understood by those skilled in the art that various other modifications may be made, and equivalents may be substituted, without departing from claimed subject matter. Additionally, many modifications may be made to adapt a particular situation to the teachings of claimed subject matter without departing from the central concept described herein. Therefore, it is intended that claimed subject matter not be limited to the particular examples disclosed, but that such claimed subject matter also may include all implementations falling within the scope of the appended claims, and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Subject matter is particularly pointed out and distinctly claimed in the concluding portion of the specification. The foregoing and other features of the present disclosure will become more fully apparent from the following description and appended claims, taken in conjunction with the accompanying drawings. Understanding that these drawings depict only several embodiments in accordance with the disclosure and are, therefore, not to be considered limiting of its scope, the disclosure will be described with additional specificity and detail through use of the accompanying drawings.","In the drawings:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
