---
title: Context-aware request dispatching in clustered environments
abstract: The present disclosure involves systems, software, and computer implemented methods for providing context-aware request dispatching in a clustered environment. One process includes operations for receiving an event at a first computer node. The contents of the event are analyzed to determine a target process instance for handling the event. A target computer node hosting the target process instance is determined, and the event is sent to the target computer node for handling by the target process instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08584136&OS=08584136&RS=08584136
owner: SAP AG
number: 08584136
owner_city: Walldorf
owner_country: DE
publication_date: 20110815
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates to software, computer systems, and computer implemented methods for providing context-aware request dispatching in a clustered environment.","The increased use of high bandwidth networks and data connections, and high capacity data storage servers, coupled with a growing need for scalability in response to increased workload demands, has resulted in the implementation of different computing models such as distributed computing systems, cloud computing networks, and clustered environments. In a clustered environment, the workload of a server can be distributed across multiple computers. Additional computers, or nodes, can be added to (or removed from) the clustered environment as needed to accommodate and manage increases (or decreases) in workload. In some instances, load balancers can be used to distribute incoming requests to the various nodes within the clustered environment for processing of the requests.","The present disclosure describes techniques for providing context-aware request dispatching in a clustered environment. A computer program product is encoded on a tangible storage medium, where the product comprises computer readable instructions for causing one or more processors to perform operations. These operations can include receiving an event at a first computer node. The contents of the event are analyzed to determine a target process instance for handling the event. A target computer node hosting the target process instance is determined, and the event is sent to the target computer node for handling by the target process instance.","These and other embodiments can optionally include one or more of the following features. The target computer node is the first computer node. The event is one of a message or a request. The event is received from a load balancer, the load balancer configured to distribute events to computer nodes within a clustered environment associated with the first computer node and the target computer node. The load balancer is further configured to distribute events to computer nodes without analyzing contents of the events. The first computer node and the target computer node are computing devices utilized in a clustered business process management environment. Determining the target computer node comprises identifying an authoritative indexer node associated with the target process instance; requesting resolution information from the authoritative indexer node; and identifying the target computer node based on resolution information received from the authoritative indexer node. Identifying the authoritative indexer node comprises applying a hash function to an identifier of the target process instance to determine the authoritative indexer node associated with the target process instance. The resolution information is determined by retrieving index data associated with the target process instance from a computer node other than the authoritative indexer node.","While generally described as a computer program product encoded on a tangible storage medium that processes and transforms the respective data, some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the disclosure will be apparent from the description and drawings, and from the claims.","This disclosure generally describes computer systems, software, and computer implemented methods for providing context-aware request dispatching in a clustered environment. In cluster node infrastructures, multiple computer nodes, or cluster node instances, can be used to provide an application or service to external components. In some instances, the nodes within a cluster can be configured to perform one or more similar functions and can also share a resource, such as a common database. An incoming request or event received at a first cluster node instance (hereafter referred to as a \u201ccluster node\u201d) may need to be forwarded to a second, receiving cluster node for processing. As used in the present disclosure, an event is a message or request exchanged between applications and\/or business processes. Accordingly, when referring to incoming items received by components within a cluster, the terms \u201cevent,\u201d \u201crequest,\u201d and \u201cmessage\u201d can be used interchangeably, unless indicated otherwise, without departing from the scope of the present disclosure. The incoming request can comprise a message or work request exchanged between applications and\/or business processes. The first cluster node can include dispatcher functionality for performing semantic evaluation of the incoming request to determine if the incoming request should be connected to an active target process. The request can then be rerouted to the appropriate cluster node containing the target process.","Business processes are run by business process management (BPM) applications, orchestrating process steps such as automated activities, user tasks, and events that synchronize a process with other components. These process steps often interact with external applications and devices. For instance, a user task may be sent to a user's mobile device where it is processed, passing back data to the underlying business process. In another example, an radio frequency identification (RFID) reader may send a signal to a business process where it is consumed in an event to trigger certain follow-up actions. In another example, a business process calls out from an automated activity to an enterprise resource planning (ERP) system to alter a business object (e.g., an invoice or a material) that is managed there.","In some implementations, BPM applications can be offered as on-demand installations in a cloud computing network to support on-demand business applications and to benefit from a low total cost of ownership that comes with the intrinsic elasticity and scalability characteristics of the cloud infrastructure. Technically, a single BPM installation is distributed across a dynamic range of computer \u201cnodes\u201d provided by the underlying clustered infrastructure. Those nodes jointly run a number of business processes. The number of nodes may grow whenever there is a larger workload to be processed at a time or shrink whenever there is a smaller workload to be processed. Some of the nodes may execute different instances of particular business processes, while other nodes may execute entirely different business processes in various implementations.","Turning to the illustrated example,  illustrates an example environment  for executing business processes in a cluster node infrastructure. The illustrated environment  includes or is communicably coupled with a plurality of components in a network such as network . In general, environment  depicts an example configuration of a system capable of orchestrating process steps such as automated activities, user tasks, and events within network  in synchronization with external applications and devices, such as mobile devices  or clients . In the illustrated example, BPM applications are executed in a distributed computing system. The BPM applications can be distributed across multiple cluster nodes in the network , including nodes , , and so on. Each of the cluster nodes can be a computer, processor, server, or any appropriate computing device. Further, each node in a cluster can share resources, such as a common database . In some instances, the cluster computing infrastructure can be implemented within a cloud computing environment (not illustrated), and the terms \u201ccloud instance\u201d may be also analogous to a \u201ccluster node.\u201d","Each cluster node in network  can include a plurality of different components needed to run a number of business processes or process instances. For example, as depicted in , the cluster nodes can include a business process management (BPM) runtime environment, messaging middleware, or communication adapters. The internal components at the cluster nodes allow the cluster node to perform process steps associated with applications, such as a BPM application, communicate with other cluster nodes or external components, receive and respond to events from external components, and execute business processes. The implementation of the BPM application in a cluster computing environment provides flexibility and scalability to the BPM application by assigning additional cluster nodes when needed to handle additional workload.","As seen in , a BPM application in a cluster infrastructure can also be connected to other external software components for providing services to the external software components. For example, the BPM application can be connected to external components including one or more clients , mobile devices , on-premise systems , and other business partner systems . The external components can run client software components that interact with the BPM application through network . Business processes running at computer nodes  and  can exchange events with the external software components. Further, network  can also include components for facilitating communications between the external components and computer nodes, such as interfaces  for managing and synchronizing communications in network  and\/or a load balancer  for managing distribution of workload among cluster nodes. A typical load balancer  can be used to divide a total workload into smaller work packages of fixed size before assigning the work packages to available work processes. Generally, the typical load balancer  receives a message and distributes the message to an available cluster node, although not necessarily to a particular cluster node associated with the received message. In some instances, the load balancer  may include a J2EE dispatcher or other request dispatcher for forwarding requests to specified resources.","In certain implementations, a cluster-enablement protocol can be used to address problems with scalability in a cluster-based BPM implementation. A cluster-enablement protocol can rely on an eviction algorithm to transport full process instances between two cluster nodes. In some instances, a software component issues a request on a first cluster node while the affected process instance that is supposed to receive the request is currently running on a second, different cluster node. The process instance associated with the first cluster node may be evicted from the first cluster node and migrated to the second, different cluster node in order to process the incoming request while maintaining synchronization with the request.","For example, as depicted in , an external software component (e.g., task management software) running on an external device at client  can submit a request to a BPM application distributed across multiple cluster nodes, including nodes  and . In some implementations, the request is first received at load balancer , which determines a particular cluster node to which to distribute the request. Load balancer , however, may not dispatch the incoming request to the most advantageous cluster node. For example, the dispatch functionality of load balancer  may randomly distribute incoming requests to different cluster nodes even though a particular request may be targeted at a specific running process instance which may be currently executed on a specific cluster node.","In the illustrated example, the request may be received by a particular process instance at node , but the processing of the request may need to be performed by a different process instance at a different node . Based on a cluster-enablement protocol, the BPM application waits for the process instance at node  to reach an idle state, such as when waiting for a user task to be completed. During the idle state, the process instance at node , including its state information, is evicted from node  and persisted onto a database. Node  then recovers the process instance by loading the state information from the database and resuming the process instance at node . The received event is then passed to the process instance at node , which effectively synchronizes the process state. In other words, the request is \u201cpassed\u201d to the target process instance through dehydration of the target process instance from a different cluster node  and hydration of the target process instance onto the cluster node  at which the event is presently located. As described in further detail below, hydration of a process instance includes pulling the process instance and state information from a database and generating synchronized process instances. Dehydration includes pushing or storing information in a database along with current state information.","The cluster-enablement protocol may result in latency and throughput issues in certain situations. First, performance of the business processes in the BPM implementation may be adversely affected when the process instances are associated with complex states. Many customer scenarios come with large process models that employ deeply nested subflow invocations. In effect, the process state that needs to be persisted and fetched to and from the database in a cluster transport may be prohibitively large and may generate substantial load on the database. Further, certain factors may cause frequent cluster transports, which can further occupy system resources. Some business process models contain many artifacts that may trigger a cluster transport. Examples of artifacts that may trigger cluster transports are human activities, intermediate message events, timer events, and synchronous process interfaces. Generally, each occurrence of these artifacts may trigger transporting a process instance across a cluster, which can be a costly operation for system resources.","Additionally, many process models may rarely encounter an idle state, which is a prerequisite for performing a cluster transport. A number of artifacts can inhibit idle situations, such as sequential or parallel loops, automated activities invoking long-running services (e.g., ERP Enterprise Services), and customer-provided data mapping functions which can be arbitrarily complex and, hence, consume processing time in an unpredictable manner. When the artifacts reside on parallel branches in any subflow of the calling stack, they may temporarily inhibit the process from being evicted as part of a cluster transport. In effect, the request to deliver an event to the process fails and needs to be repeated later.","In a cluster-based infrastructure, the requests transmitted by an external component can arrive at a particular cluster node while the receiving process instance that will be processing the request may reside on another cluster node. A protocol to consistently dispatch the events to the receiving business processes in a distributed cluster infrastructure can be provided. As used in the present disclosure, the receiving process instance that ultimately handles the received event can also be referred to as the \u201ctarget process instance.\u201d When either the number of events or the number of process instances increases, both process turnaround times and overall process end-to-end throughput can be easily compensated for by assigning additional cloud instances to handle the additional workload.","Further, by performing semantic evaluation of an incoming event and rerouting the event to an appropriate cluster node, the target process instance does not need to be transported across clusters or nodes in the clustered infrastructure. Accordingly, an event no longer needs to wait for the target process instance to be transported across the cluster in order to complete the delivery transaction. For example, in some cases, the target process instance may be in an execution state on its host cluster node and may not be able to be migrated. Depending on the particular state or the current execution status of the target process instance, the target process instance may be locked, preventing it from being dehydrated for migration. Finally, the likelihood of failing to deliver an event is also substantially reduced because a process instance that is unable to be transported across a node cluster can no longer block the event from being delivered.","The present disclosure addresses the challenges associated with high-load processing in a cluster computing infrastructure by introducing second-level dispatcher functionality capable of performing semantic, or context-aware, evaluation of incoming requests to determine an appropriate cluster node to receive or process the incoming request. In some implementations, incoming requests are targeted at or associated with active process instances located at certain cluster nodes. The requests are rerouted to the appropriate cluster node containing the target process instance for processing of the incoming request. The logic for this second-level dispatcher functionality can be provided at each cluster node within a cluster so that, regardless of where an incoming event is initially dispatched, the event can be rerouted as necessary to the appropriate cluster node housing the target process instance for processing.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1"],"b":["200","202","200","250","202","212","200","202","202","250"]},"In general, node  can be any electronic computing device, such as a server, operable to receive, transmit, process, store, or manage data and information associated with the environment . Node  can be a server that stores one or more business process applications , where at least a portion of the business process applications are executed via requests and responses sent to users or clients within and communicably coupled to the illustrated environment  of . In some instances, node  can store a plurality of various business process applications , while in other instances, node  can be a dedicated server meant to store and execute only a single business process application . In some instances, node  can comprise a web server or be communicably coupled with a web server, where the business process applications  represent one or more web-based applications accessed and executed via network  by remote system  to perform the programmed tasks or operations of the business process application .","Node  illustrated in  can be responsible for receiving application requests (i.e., events) from one or more client applications or business applications associated with the remote system  of environment , responding to the received requests by processing said requests in the business process application , and sending the appropriate response from the business process application  back to the requesting client application. Node  may also receive requests and respond to requests from other components on network , such as other nodes within the same cluster not illustrated in . Alternatively, the business process application  at node  can be capable of processing and responding to requests from a user locally accessing node . Accordingly, in addition to requests from the remote system  illustrated in , requests associated with the business process applications  may also be sent from internal users, external or third-party customers, other automated applications, as well as any other appropriate entities, individuals, systems, or computers.","As used in the present disclosure, the term \u201ccomputer\u201d is intended to encompass any suitable processing device. For example, although  illustrates a single node  comprising a computer, environment  can be implemented using one or more nodes, as well as computers other than servers, including a server pool. Indeed, node , remote system , and messaging system  can be any computer or processing device such as, for example, a blade server, general-purpose personal computer (PC), MACINTOSH, workstation, UNIX-based workstation, or any other suitable device. In other words, the present disclosure contemplates computers other than general purpose computers, as well as computers without conventional operating systems. Further, illustrated nodes , remote system , and messaging system  may be adapted to execute any operating system, including LINUX, UNIX, WINDOWS, MAC OS, or any other suitable operating system. According to one implementation, node  may also include or be communicably coupled with a mail server.","In the present implementation, and as shown in , node  includes a processor , an interface , a memory , and one or more business process applications . The interface  is used by the node  for communicating with other systems in a client-server or other distributed environment (including within environment ) connected to the network  (e.g., remote system , as well as other systems communicably coupled to the network ). Generally, the interface  comprises logic encoded in software and\/or hardware in a suitable combination and operable to communicate with the network . More specifically, the interface  may comprise software supporting one or more communication protocols associated with communications such that the network  or interface's hardware is operable to communicate physical signals within and outside of the illustrated environment .","In some implementations, node  may also include a user interface, such as a graphical user interface (GUI). The GUI comprises a graphical user interface operable to, for example, allow the user of the server  to interface with at least a portion of the platform for any suitable purpose, such as creating, preparing, requesting, or analyzing data, as well as viewing and accessing source documents associated with business transactions. Generally, the GUI provides the particular user with an efficient and user-friendly presentation of business data provided by or communicated within the system. The GUI may also provide general interactive elements that allow a user to access and utilize various services and functions of business process application . The GUI is often configurable, supports a combination of tables and graphs (bar, line, pie, status dials, etc.), and is able to build real-time portals, where tabs are delineated by key characteristics (e.g., site or micro-site). Therefore, the GUI contemplates any suitable graphical user interface, such as a combination of a generic web browser, intelligent engine, and command line interface (CLI) that processes information in the platform and efficiently presents the results to the user visually.","Generally, example node  may be communicably coupled with a network  that facilitates wireless or wireline communications between the components of the environment  (i.e., between node  and remote system ), as well as with any other local or remote computer, additional clients, servers, or other devices communicably coupled to network  but not illustrated in . In the illustrated environment, the network  is depicted as a single network in , but may be a continuous or discontinuous network without departing from the scope of this disclosure, so long as at least a portion of the network  may facilitate communications between senders and recipients.","The network  may be all or a portion of an enterprise or secured network, while in another instance at least a portion of the network  may represent a connection to the Internet. In some instances, a portion of the network  may be a virtual private network (VPN), such as, for example, the connection between remote system  and node . Further, all or a portion of the network  can comprise either a wireline or wireless link. Example wireless links may include 802.11a\/b\/g\/n, 802.20, WiMax, and\/or any other appropriate wireless link. In other words, the network  encompasses any internal or external network, networks, sub-network, or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network  may communicate, for example, Internet Protocol (IP) packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information between network addresses. The network  may also include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), all or a portion of the Internet, and\/or any other communication system or systems at one or more locations.","Remote system  may have access to resources such as node  within network . In certain implementations, the servers within network , including node  in some instances, may comprise a cloud computing platform for providing cloud-based services. The terms \u201ccloud,\u201d \u201ccloud computing,\u201d and \u201ccloud-based\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure. Cloud-based services can be hosted services that are provided by servers and delivered across a network to a client platform to enhance, supplement, or replace applications executed locally on a client computer. Remote system  can use cloud-based services to quickly receive software upgrades, applications, and other resources that would otherwise require a lengthy period of time before the resources can be delivered to the remote system . Additionally, other devices may also have access to cloud-based services, such as on-demand services provided by servers accessible through network . In certain instances, the servers provided through network  can be implemented in a clustered network as an on-premise solution, instead of or in addition to a cloud computing system.","As described in the present disclosure, on-demand services can include multiple types of services such as products, actionable analytics, enterprise portals, managed web content, composite applications, or capabilities for creating, integrating, using and presenting business applications. For example, a cloud-based implementation can allow remote system  to transparently upgrade from an older user interface platform to newer releases of the platform without loss of functionality.","As illustrated in , node  includes a processor . Although illustrated as a single processor  in , two or more processors may be used according to particular needs, desires, or particular embodiments of environment . Each processor  may be a central processing unit (CPU), a blade, an application specific integrated circuit (ASIC), a field-programmable gate array (FPGA), or another suitable component. Generally, the processor  executes instructions and manipulates data to perform the operations of node  and, specifically, the one or more plurality of business process applications . Specifically, the server's processor  executes the functionality required to receive and respond to requests from the remote system  and their respective client applications , as well as the functionality required to perform the other operations of the business process application .","Regardless of the particular implementation, \u201csoftware\u201d may include computer-readable instructions, firmware, wired or programmed hardware, or any combination thereof on a tangible, non-transitory, medium operable when executed to perform at least the processes and operations described herein. Indeed, each software component may be fully or partially written or described in any appropriate computer language including C, C++, JAVA, VISUAL BASIC, assembler, Perl, any suitable version of 4GL, as well as others. It will be understood that while portions of the software illustrated in  are shown as individual modules that implement the various features and functionality through various objects, methods, or other processes, the software may instead include a number of sub-modules, third party services, components, libraries, and such, as appropriate. Conversely, the features and functionality of various components can be combined into single components as appropriate. In the illustrated environment , processor  executes one or more business process applications  on node .","At a high level, each of the one or more business process applications  is any application, program, module, process, or other software that may execute, change, delete, generate, or otherwise manage information according to the present disclosure, particularly in response to and in connection with one or more requests received from the illustrated remote system  and its associated client applications  or from other servers or components through a network . In certain cases, only one business process application  may be located at a particular node . In others, a plurality of related and\/or unrelated business process applications  may be stored at a single node , or located across a plurality of other nodes , as well. In certain cases, environment  may implement a composite business process application . For example, portions of the composite application may be implemented as Enterprise JAVA Beans (EJBs) or design-time components may have the ability to generate run-time implementations into different platforms, such as J2EE (JAVA 2 Platform, Enterprise Edition), ABAP (Advanced Business Application Programming) objects, or MICROSOFT's .NET, among others.","Additionally, one or more of the business process applications  may represent web-based applications accessed and executed by remote system  or client applications  via the network  (e.g., through the Internet). Further, while illustrated as internal to node , one or more processes associated with a particular business process application  may be stored, referenced, or executed remotely. For example, a portion of a particular business process application  may be a web service associated with the application that is remotely called, while another portion of the business process application  may be an interface object or agent bundled for processing at a remote system . Moreover, any or all of the business process applications  may be a child or sub-module of another software module or enterprise application (not illustrated) without departing from the scope of this disclosure. Still further, portions of the business process application  may be executed by a user working directly at node , as well as remotely at remote system .","As illustrated, node  can also include a business process management (BPM) runtime  that provides services, libraries, and tools for executing business process applications  and business process instances. A business process instance is an executing instance of a particular business process. In some cases, multiple instances of the same business process can be running (e.g., multiple discrete purchase orders may be generated simultaneously by different business process instances). Further, multiple instances of the same business process can be running at different nodes such that each business process instance is associated with information specific to the node hosting the business process instance.","The BPM runtime  can also handle any state changes to business processes, including state changes associated with execution of process steps based on received events, messages, or requests. Node  also includes messaging middleware . Messaging middleware  can comprise a software or hardware infrastructure configured to facilitate sending and receiving messages between distributed systems. Generally, messaging middleware  allows application modules to be distributed over heterogeneous platforms, and reduces the complexity of developing applications that span multiple operating systems and network protocols by insulating the application developer from the details of the various operating system and network interfaces. In some instances, the messaging middleware  can provide methods and techniques for sending messages to and receiving messages from other components connected to network , such as other distributed systems, clusters of computer nodes, or business applications. The messaging middleware  of node  can also provide messaging middleware application programming interfaces (API)  that allows interaction between node  and diverse platforms across different networks.","One or more incoming message adapters  can also be included in node . The incoming message adapter  comprises hardware or software components used to receive messages or events received from external components such as remote system , other nodes, or a load balancer  or dispatcher. The incoming message adapter can also be coupled with a message analyzer module . Message analyzer module  can be any application configured to analyze received events to determine an appropriate recipient for the event. For example, message analyzer module  can determine that the event should be forwarded to a shared database comprising a messaging queue. In some instances, message analyzer module  can determine a specific business process instance and the particular node containing the business process instance that will be the recipient of the event. The event may need to be consumed at a particular node or by a specific process instance based on the external component transmitting the event or on other context information associated with the event. In some instances, the message analyzer module  may identify a received event as an event associated with a business process instance executing on the same node . In those instances, the received event or message can be consumed without forwarding or sending the message to another node within the cluster system.","In general, node  also includes memory  for storing data and program instructions. Memory  may include any memory or database module and may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, random access memory (RAM), read-only memory (ROM), removable media, or any other suitable local or remote memory component. Memory  may store various objects or data, including classes, frameworks, applications, backup data, business objects, jobs, web pages, web page templates, database tables, repositories storing business and\/or dynamic information, and any other appropriate information including any parameters, variables, algorithms, instructions, rules, constraints, or references thereto associated with the purposes of node  and its one or more business process applications .","Memory  can also store data objects such as business process models  and business process metadata . Business process models  can include data objects representing various aspects or processes of an enterprise, and business process metadata  can include any metadata associated with business processes that node  is managing or interacting with. In some implementations, memory  can be a shared database that may be accessed by other nodes within a cluster associated with node . Accordingly, memory  can be located remotely with respect to node  and\/or located at a different node within the cluster. Further, memory  can be distributed across a plurality of physically or logically distinct repositories.","In some implementations, one or more of the nodes within the cluster can function as an \u201cauthoritative indexer\u201d node that manages and tracks one or more process instances. The location and status of process instances executing within a particular cluster can be tracked and managed using an index. In some instances, the index can be partitioned into multiple portions and distributed across different nodes. While a partition of the index can belong to one node, a particular node may be authoritative for multiple partitions or the entire cluster. If an index partition belongs to a given node, the node can be called the \u201cauthoritative\u201d node, or \u201cauthoritative indexer,\u201d for this partition and all index entries within this partition. The index entries for a partition can comprise, for example, process identifiers for each of the process instances indexed in the partition.","For each process instance associated with a cluster, the index partition can be used to determine which cluster node is responsible for handling that process instance. As such, the index partitions may be used to determine which cluster node is the authoritative indexer for a given process instance, and the authoritative indexer has the task to maintain the current ownership state for process instances that are indexed by the authoritative indexer. The authoritative node may be responsible for providing the location of a process instance using its part of a distributed hash table (or other similar look-up mechanism), although the authoritative node may also own (i.e., execute) one or more process instances as well. The mapping of process instances to partitions can be evenly distributed across the nodes of a cluster or distributed in different proportions, depending on the context.","As illustrated in , node  represents the authoritative indexer node for the cluster containing nodes  and . In some implementations, authoritative indexer node  can include many of the same or similar components as other nodes within the cluster. For example, authoritative indexer node  can include a processor , BPM runtime , incoming message adapater(s) , messaging middleware , middleware messaging API , message analyzer module , business process application , and other components needed for node  to execute process instances like other nodes within the cluster. Authoritative indexer node  can also include components for providing indexing information for process instances currently executing within a cluster. For example, authoritative indexer module  can include any software or hardware components needed to receive and respond to requests for resolution information regarding the location of active process instances.","The authoritative indexer module  can also update index data  stored in memory  regarding the location of active process instances. Index data  can be an index comprising entries identifying the location and status of currently active process instances within a cluster. The identification information regarding the process instances can include information regarding whether a particular process instance is hydrated or dehydrated in a database. In some implementations, the index data  can also be partitioned and distributed across various systems such as other nodes within a cluster. In other words, each node within a cluster can include a portion of the indexed data. The authoritative indexer module  in authoritative indexer node  can retrieve index data from each of the nodes as needed to determine the location for a particular process instance. In some implementations, authoritative indexer module  and\/or index data  can be provided as in-memory components.","The illustrated environment of  also includes one or more remote systems . Each remote system  may be any computing device operable to connect to or communicate with at least node  and\/or via the network  using a wireline or wireless connection. Further, as illustrated in , remote system  includes a processor , an interface , a graphical user interface (GUI) , a client application , and a memory . In general, remote system  comprises an electronic computer device operable to receive, transmit, process, and store any appropriate data associated with the environment  of . It will be understood that there may be any number of remote system  associated with, or external to, environment . For example, while illustrated environment  includes remote system , alternative implementations of environment  may include multiple clients communicably coupled to node , or any other number of clients suitable to the purposes of the environment . Additionally, there may also be one or more additional remote systems external to the illustrated portion of environment  that are capable of interacting with the environment  via the network . The term \u201cremote system\u201d may also refer to any computer, application, or device, such as a mobile device, that is communicably coupled to one or more servers through a network . Moreover, while each remote system  is described in terms of being used by a single user, this disclosure contemplates that many users may use one computer, or that one user may use multiple computers.","The GUI  associated with remote system  comprises a graphical user interface operable to, for example, allow the user of remote system  to interface with at least a portion of the platform for any suitable purpose, such as creating, preparing, requesting, or analyzing data, as well as viewing and accessing source documents associated with business transactions. Generally, the GUI  provides the particular user with an efficient and user-friendly presentation of business data provided by or communicated within the system. The GUI  may comprise a plurality of customizable frames or views having interactive fields, pull-down lists, and buttons operated by the user. Generally, GUI  may also provide general interactive elements that allow a user to access and utilize various services and functions of application . The GUI  is often configurable, supports a combination of tables and graphs (bar, line, pie, status dials, etc.), and is able to build real-time portals, where tabs are delineated by key characteristics (e.g. site or micro-site). Therefore, the GUI  contemplates any suitable graphical user interface, such as a combination of a generic web browser, intelligent engine, and command line interface (CLI) that processes information in the platform and efficiently presents the results to the user visually.","As used in this disclosure, remote system  can encompass a personal computer, touch screen terminal, workstation, network computer, kiosk, wireless data port, smart phone, personal data assistant (PDA), one or more processors within these or other devices, or any other suitable processing device. For example, each remote system  may comprise a computer that includes an input device, such as a keypad, touch screen, mouse, or other device that can accept user information, and an output device that conveys information associated with the operation of the node  (and business process application ) or the remote system  itself, including digital data, visual information, the client application , or the GUI . Both the input and output device may include fixed or removable storage media such as a magnetic storage media, Compact Disc Read-only Memory (CD-ROM), or other suitable media to both receive input from and provide output to users of remote system  through the display, namely, the GUI .","While  is described as containing or being associated with a plurality of elements, not all elements illustrated within environment  of  may be utilized in each alternative implementation of the present disclosure. For example, one or more of the elements described herein may be located external to environment , while in other instances, certain elements may be included within or as a portion of one or more of the other described elements, as well as other elements not described in the illustrated implementation. Further, certain elements illustrated in  may be combined with other components, as well as used for alternative or additional purposes in addition to those purposes described herein.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["300","304","306","308","310","302","312","302","302","302"]},"In the illustrated example, dispatcher  distributes the incoming event to a first cluster node  (\u201cNode \u201d) at . If cluster node  contains a target process instance associated with the event, the event may be processed locally at cluster node  by that target process instance as long as there is not a lock on the process instance. If there is not a particular active process instance that is identified as an appropriate target for the event, the event can be automatically processed locally at the receiving cluster node  or assigned to a currently active process instance. In some situations, there may be no active process instances at cluster node  or any of the other nodes within the same cluster. Since no process instances are available to process the event, a new process instance can be instantiated at cluster node  so that the event does not need to be routed to a different cluster node. Similarly, when there are no active process instances at any node in a cluster, or no target process instance is identified for the particular event, a new process instance can be instantiated at the node at which the event is first received from the load balancer.","In certain situations, the first cluster node  to receive the event from dispatcher  may not have a process instance that is suitable to process the event. Instead, one or more business process instances located at other cluster nodes may be the appropriate recipients of the event. For example, as determined from the context of information associated with the received event, a particular process instance located at cluster node  (\u201cNode s\u201d) may be the targeted process instance that should process the event even though the event initially resides at cluster node  after it was distributed by dispatcher . Instead of migrating the target process instance from cluster node  to cluster node  to handle the event, the event can be rerouted to the appropriate cluster node  for processing if the target process instance is currently active at cluster node .","Node  can perform a context-based evaluation of the received event to determine the target process instance that will handle the event. In some instances, the event may specify a particular process instance with which the event is associated, while in other instances, the particular process instance associated with the event may be derived based on a rule set or other method of association. Node , however, may not have information regarding where the target process instance is located. For example, due to the dynamic and flexible nature of clustered environments, process instances can be frequently reassigned when cluster nodes are added or removed from the cluster.","In some implementations, the determination of which cluster node is the \u201cowner\u201d of the target process instance can be performed in connection with a distributed indexing mechanism. For example, an index associated with the nodes of a cluster can be provided to track ownership of process instances within the cluster. The index can represent a snapshot view of the authoritative data (e.g., which node is responsible for handling a particular process instance) of the cluster at a given point in time and can be updated to reflect structural changes to the cluster (e.g., after a node joins or drops from the cluster). In certain implementations, the cluster can use a distributed hash map to determine where the processes are located (e.g., at which node of cluster), and to re-allocate ownership of a process instance (e.g., if a process instance was owned by a departing node) to other nodes after a structural change. The content of the distributed hash map can be separated into partitions, where each partition is distributed to one of the nodes in the cluster. While a partition of the index can belong to one node, a particular node may be authoritative for multiple partitions or the entire cluster. If an index partition belongs to a given node, the node can be called the \u201cauthoritative\u201d node, or \u201cauthoritative indexer,\u201d for this partition and all index entries within this partition. The index entries for a partition can comprise, for example, process identifiers for each of the process instances indexed in the partition.","For each process instance associated with a cluster, the index partition can be used to determine which cluster node is responsible for handling that process instance. As such, the index partitions may be used to determine which cluster node is the authoritative indexer for a given process instance, and the authoritative indexer has the task to maintain the current ownership state for process instances that are indexed by the authoritative indexer. The authoritative node may be responsible for providing the location of a process instance using its part of a distributed hash table (or other similar look-up mechanism), although the authoritative node may also own (i.e., execute) one or more process instances as well. The mapping of process instances to partitions can be evenly distributed across the nodes of a cluster or distributed in different proportions, depending on the context.","In some implementations, the authoritative index does not include the complete distributed hash table, but only a part of the hash table. The distributed hash table can function as a \u201clookup\u201d table in which a name-value pair is stored in the distributed hash table, so that the distributed hash table can efficiently lookup a node given a key (e.g., a process identifier). As such, the distributed hash table may be used to determine the location of a process instance. For example, certain nodes can manage a partition of the distributed hash table, which exclusively contains process instances alongside their physical location at a node. A particular node, which holds the information of where a particular process instance is located, is the authoritative indexer for this process instance. If a node other than the authoritative indexer attempts to determine where a process instance is located, the node first determines the authoritative indexer of the process instance by applying a hash function on the process instance identity, such as a particular identifier associated with the process instance. The node can then send a request to the authoritative indexer to return the current physical location of the process instance. The authoritative indexer can retrieve this information from its hash table fragment and return the location to the requesting node. Although the use of a distributed hash table is described in the present example, other look-up mechanisms can be used to determine the location of a process instance within a cluster and are within the scope of the present disclosure, such as database look-ups, table look-ups, and the like.","In the illustrated example, the nodes of the depicted cluster, including cluster node , can each store a portion of the distributed hash table. Cluster node  can determine that the authoritative indexer associated with the target process instance is cluster node  by applying a hash function on the identifier of the target process instance. Accordingly, cluster node  can then request resolution information from the authoritative indexer at cluster node  at . In particular, the resolution information can include information identifying the particular cluster node at which the target process instance can be found. In the present example, the target process instance is located at cluster node , and accordingly, cluster node  can forward the event to cluster node  at . In essence, the cluster node that initially receives the event can act as a proxy that redirects the event to the appropriate cluster node containing the target process instance. Similarly, the cluster node can also redirect responses back to the dispatcher or requestor from which the event was initially received.","In some instances, task management and user interfaces associated with the event may still reside at cluster node . If the incoming event is associated with a synchronous request, the processes and tasks may need to be synchronized between the task parent node (cluster node ) and the task processor (cluster node ) in accordance with the BPEL4People specification. In the case of an incoming asynchronous request, if the target process instance is not running at the incoming node, the event may be stored in a message pool from which the process instance running on another node can retrieve the event for processing at another time.","In certain instances, the context-aware dispatching functionality of the present disclosure can differ based on the status of the target process instance. In some instances, the target process instance may be currently active at a particular cluster node when an incoming event is received at a different cluster node. In this situation, as described above in relation to , the cluster node that initially receives the event from the dispatcher directly forwards the event to the appropriate cluster node. In some instances, however, the target process instance may not be presently active at a cluster node. In other words, the target process instance may be dehydrated, or stored in a database. Process instances can be hydrated or dehydrated depending on the context. Process instances can be dehydrated when the process instance is in an idle state, such as when the process instance is delayed or awaiting a response from a different component or user. Dehydration of a process instance can include releasing the process instance from memory and persisting, or storing, the process instance in a database. In some instances, a persistence service can also be used to save or persist the state of the process instance to facilitate rehydration of the process instance when the process instance is re-activated. Hydration or rehydration of a previously dehydrated process instance can include reloading the process instance into memory and resuming the process instance from the previous state before the process instance was dehydrated.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 4","FIG. 4","FIG. 3","FIG. 4"],"b":["400","412","404","414","404","404","404","408","416","408","430","430","408","430","408"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 5","b":["500","505","510","515"]},"In certain instances, the target process instance may be located at a different cluster node than the first node that received the event. Thus, the location of the target process instance is determined at . The specific cluster node containing the target process instance can be determined using any suitable means, such as through an authoritative indexer node based on a distributed hash map, as described above in connection with . If the target process instance is determined to be located at a second cluster node, the event is routed to the second node at which the target process instance is located at .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 6","b":["600","602","604","606","616","604"]},"If it is determined from the analysis that the event is associated with a target process instance, a further determination can be made as to whether the target process instance is executing on the first cluster node at . In some instances, the target process instance can be located at the same cluster node that first receives the event from an external source or from a first-level dispatcher such as load balancer . If so, the event is provided to the process instance locally at the first node at . If the target process instance is not executing on the first node but at a different cluster node, the appropriate cluster node at which the target process instance is located needs to be determined.","In some implementations, a distributed index mechanism as described above in connection with  can be used to identify the location of the target process instance. In this method, a particular cluster node can serve as the authoritative indexer for the target process instance. The authoritative indexer node can manage the states and locations of a number of process instances within the cluster. Accordingly, in order to determine the location of the target process instance, the authoritative indexer associated with the target process instance is identified at . In certain implementations, the first node can apply a hash function to an identifier of the target process instance to determine the authoritative indexer for that process instance.","Once the authoritative indexer is determined, resolution information can be requested from the authoritative indexer at . The resolution information can indicate the status of the target process instance, such as the particular cluster node currently housing the target process instance and whether the target process instance is currently active or dehydrated. If the target process instance is currently active at a second cluster node as determined at , the first cluster node can route the event to the second cluster node at  based on the resolution information obtained from the authoritative indexer. If the resolution information from the authoritative indexer indicates that the target process instance is not currently active, it may be because the target process instance has been dehydrated or stored in a database. If it is determined that the target process instance is dehydrated at , the first node can rehydrate, or restore, the target process instance from the database at . Generally, the nodes within a cluster can share access to certain resources, such as a shared database. Accordingly, the first node can rehydrate the target process instance locally at the first node. Alternatively, the target process instance may be rehydrated at a different cluster node as needed. If it is determined from the resolution information that the target process instance is neither active at a particular cluster node nor dehydrated in the database, the event can be assigned a different process instance for handling at .","The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment  (or its software or other components) contemplates using, implementing, or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time, including concurrently, individually, or in combination. In addition, many of the steps in these processes may take place simultaneously and\/or in different orders than as shown. Moreover, environment  may use processes with additional steps, fewer steps, and\/or different steps, so long as the methods remain appropriate.","In other words, although this disclosure has been described in terms of certain embodiments and generally associated methods, alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly, the above description of example embodiments does not define or constrain this disclosure. Other changes, substitutions, and alterations are also possible without departing from the spirit and scope of this disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 6","FIG. 2"]}]},"DETDESC":[{},{}]}
