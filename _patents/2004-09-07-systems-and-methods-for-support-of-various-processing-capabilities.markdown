---
title: Systems and methods for support of various processing capabilities
abstract: Systems and methods are described for support of various computing device and target entity capabilities. In an implementation, a method includes determining one or more processing capabilities of a computing device to process data for rendering by a rendering device. A selection is made, based on the determining, of one or more filters to provide data configured for rendering by the rendering device and that provides at least one processing capability that is not included in the one or more processing capabilities of the computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07755786&OS=07755786&RS=07755786
owner: Microsoft Corporation
number: 07755786
owner_city: Redmond
owner_country: US
publication_date: 20040907
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["This application incorporates by reference the entire disclosure of each of the following U.S. Provisional Patent Applications, and claims priority under 35 U.S.C. \u00a7119(e) to the following U.S. Provisional Patent Applications, each of which was filed on May 3, 2004:",{"@attributes":{"id":"p-0003","num":"0002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Ser. No.","Inventor(s)","Title"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["11\/912,794","Foehr et al.","SYSTEMS AND"]},{"entry":[{},{},"METHODS FOR"]},{"entry":[{},{},"PASSING DATA"]},{"entry":[{},{},"IN A FILTER"]},{"entry":[{},{},"PIPELINE"]},{"entry":["10\/912,975","Foehr et al.","SYSTEMS AND"]},{"entry":[{},{},"METHODS FOR"]},{"entry":[{},{},"HANDLING A"]},{"entry":[{},{},"FILE WITH"]},{"entry":[{},{},"COMPLEX"]},{"entry":[{},{},"ELEMENTS"]},{"entry":["10\/935,681","Foehr et. al.","SYSTEMS AND"]},{"entry":[{},{},"METHODS FOR"]},{"entry":[{},{},"SUPPORT OF"]},{"entry":[{},{},"VARIOUS"]},{"entry":[{},{},"COMPUTER"]},{"entry":[{},{},"AND"]},{"entry":[{},{},"PRINTER"]},{"entry":[{},{},"CAPABILITIES"]},{"entry":["10\/938,476","Sedky and Emerson","SPOOLING"]},{"entry":[{},"et al.","STRATEGIES"]},{"entry":[{},{},"USING"]},{"entry":[{},{},"STRUCTURED"]},{"entry":[{},{},"JOB"]},{"entry":[{},{},"INFORMATION"]},{"entry":["10\/935,025","Foehr et al.","PLANAR"]},{"entry":[{},{},"RENDERING"]},{"entry":["10\/938,357","Foehr et al.","SHARING OF"]},{"entry":[{},{},"DOWNLOADED"]},{"entry":[{},{},"RESOURCES"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The present invention generally relates to computing devices and rendering devices, and more particularly relates to support of various processing capabilities of computing devices and\/or rendering devices.","The range of functionality available to users of computing devices is ever increasing. From traditional desktop personal computers (PCs) and laptops to tablet PCs and personal digital assistants (PDAs), computing devices may be configured to provide functionality in different environments. Additionally, the range of target entities, and particularly rendering devices, which may be utilized by these computing devices also continues to increase. For example, a computing device configured as a desktop PC may include a display device that provides an output for viewing by a user and a color printer for printing color images to a printable medium.","The computing device may communicate with each of the target entities through use of a respective device driver. A device driver, when executed, is utilized to convert input\/output instructions received from the computing device into a form that is compatible with the respective target entity. Likewise, the device driver, when executed, may be utilized to convert responses to the input\/output instructions from the respective target entity into a form that is compatible with the computing device. Because of the wide range of computing devices and target entities that are available to users, however, manufacturers of computing devices and target entities are faced with the challenge of deriving device drivers for each particular environment that may be encountered by their products. For example, a manufacturer of a printer may be required to develop a device driver for each particular configuration of computing device that may utilize the printer. Further, each device driver that is developed for a particular computing device may be inflexible in that the device driver is not able to support changing capabilities that may be provided through further development of the computing device and\/or the printer. Therefore, a new device driver was traditionally required when additional functionality was added to the computing device and\/or the printer.","Accordingly, there is a continuing need for systems and methods that support various computing device and target entity capabilities.","Systems and methods are described that support various computing device and\/or target entity processing capabilities. For example, computing devices and\/or target entities may each support various processing capabilities to process data for being rendered. In an embodiment, a plurality of filters is provided, each corresponding to a respective processing capability for processing data for being rendered. The filters may be arranged to form a filter pipeline such that one or more of the filters provides an output, which is then provided as an input to another one of the filters. In this way, the filter pipeline may be formed by arranging the filters, thereby providing a flexible infrastructure to address a variety of functionality that may be provided on a computing device and\/or target entity.","The plurality of filters, for instance, may be arranged to form a device driver which is executable to convert input\/output instructions from a computing device into a form that is compatible with a target entity, and vice versa. In an implementation, the filters are selected based on the processing capabilities of the computing device to process data for being rendered by the printer. In another implementation, the filters are selected based on the processing capabilities of the rendering device to process data for being rendered by the rendering device. For instance, the rendering device (e.g., a printer) may support particular processing capabilities, such as to convert a color image to black-and-white. Therefore, a device driver may be formed by selecting one or more of a plurality of filters for execution on the computing device that are compatible with the particular processing capabilities of the rendering device. Thus, the plurality of filters may be arranged to take advantage of the particular processing capabilities of the rendering device such that the device driver that is executed on the computing device does not provide redundant functionality. Likewise, one or more filters may be implemented on the rendering device to take advantage of the processing capabilities of a computing device.","By providing the processing capabilities through use of a plurality of filters, the processing workload may be divided between the computing device and the target entity. Continuing with the previous example, the functionality of filters utilized to process data for being rendered by a rendering device may be provided for execution on either the computing device or the rendering device. Therefore, both the computing device and the rendering device may contribute one or more processing capabilities such that the data is processed by both the computing device and rendering device.","The plurality of filters may also be grouped to form various collections that address the different processing capabilities of different respective computing devices and\/or target entities. For instance, a computing device may be communicatively coupled to a plurality of printers, each having different processing capabilities, one to another. The computing device may utilize different collections of the plurality of filters based on the processing capabilities of the respective printers. In this way, the different collections of the plurality of filters may each act as a device driver for the respective printers. In another instance, a rendering device may likewise include a plurality of filters to access different processing capabilities of a plurality of computing devices, one to another.","The plurality of filters may also be utilized to support legacy devices. For instance, a device driver may be formed from a plurality of filters. A new rendering device, however, may be encountered which supports functionality that is not supported by the plurality of filters. Therefore, one or more filters may be generated for addition to the plurality of filters such that a new device driver is formed having the one or more additional filters and the plurality of filters. Thus, the new device driver that includes the one or more filters may provide an output that is compatible with the functionality of the new rendering device. Likewise, the functionality of one or more filters may be added to a target entity to address changing functionality of the computing device.","The same numbers are used throughout the disclosure and figures to reference like components and features.","Overview",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 1","FIG. 5"],"b":["100","102","102","104","1","104","2","104","104","104","1","104","104","1","104","104","1","104","104","1","104","104","1","104","104","1","104","102"]},"The filter pipeline , for instance, may be provided as a processing module  that is utilized to process an output of an application  such that it may be rendered by a target entity rendering mechanism , such as a printing mechanism. The plurality of filters ()-(N), when taken together, provides device driver functionality. Device drivers are typically implemented as software that is targeted to a particular type of target entity, such as printers, display devices, storage devices, removable media devices, and so forth. The device driver \u201cprocesses\u201d general input\/output instructions into a form that the particular device can understand, and thus may also be referred to as a processing module  as illustrated.","In another instance, by forming the processing module  as a plurality of filters ()-(N), a processing workload may be divided between a computing device and a rendering device. For example, a computing device  may include an application  and filters (), (). A rendering device, illustrated as a printer , may include filters (n), (N) that process the output of filters (), () such that the target entity rendering mechanism  can render the result. Further discussion of arrangement of filters for workload sharing may be found in relation to .","In a further instance, the filter pipeline  may also be \u201ctapped\u201d at various points such that a data stream processed by particular filters ()-(N) is routed to a corresponding device. For example, computing device  may include the application  and the filter pipeline . In other words, computing device  includes a version of each of the filters ()-(N) in the filter pipeline . Therefore, the computing device  may provide an output to a printer  that does not include any of the filters ()-(N). The computing device  may also provide an output from filters (), () that may be further processed by printer  that includes filters (n), (N). In this way, the processing module  may route the data processed by the filters ()-(N) according to the processing capabilities of the target entities (e.g., printers , ). A further discussion of filters that are individually executable by a rendering device to address differing computing device processing capabilities may be found in relation to .","In yet another instance, the filter pipeline  may be utilized to implement a versioning strategy as new processing functionality becomes available. For example, filters that are used to process a new version of a document may be added to the filter pipeline  that is configured to process an earlier (e.g., older) version of a document. Therefore, the filter pipeline , through addition of the new filter, may process both versions of the document. Further discussion of arrangement of filters for support of a legacy rendering device may be found in relation to .","Exemplary Environment",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1"],"b":["200","202","102","106","202","200","204","202","206"]},"As broadly indicated in , the job information  includes a defined structure . The structure  generally includes a plurality of nodes that are connected together according to a set of established rules. The same general rules apply to the construction of the structure  regardless of the application and application platform used to generate the job information .","In the exemplary case of , the structure  uses a hierarchical scheme to connect the nodes together. A hierarchical scheme couples the nodes together using parent-child relationships. That is, a \u201ctop-most\u201d node defines a so-called root node. Thus, the use of the terms \u201ctop\u201d and \u201cbottom\u201d refer to placement in the hierarchical scheme relative to the root node. The root node includes one or more child nodes, and the child nodes, in turn, can include one or more of their own respective child nodes, and so on. If so configured, child nodes can generally inherit properties associated with their respective parent\/ancestor nodes.","Generally, the structure  is a logical concept that may or may not map to actual parts of a document to be rendered. That is, each node may be considered an object. Certain objects may represent actual parts of a document to be rendered (such as various image resources and font resources). Other objects may not have a one-to-one relationship with parts of the documents to be rendered. These latter types of nodes are therefore analogous to folders in a file hierarchy; that is, the folders may store individual files that contain content that maps to actual parts of the document, but the folders themselves may not have a one-to-one relationship with actual parts of the document.","The production and consumption aspects (, ) of the processing of job information  will be addressed separately below. First, by way of overview, the system  includes an application module  and conversion logic  that has access to a spool storage  via application programming interfaces (APIs) . The spool storage  stores the job information . This chain of components implements the production aspects () of the processing of the job information .","Spool storage  represents storage for storing job information implemented using any physical storage medium. In one case, a device may implement the spool storage using RAM memory. In another case, the device may implement the spool storage using disk storage, and so on. The spool storage may define a single file, a collection of associated files, or some other storage strategy. A unit of spool storage (such as a single file) that stores an entire package defining a job is also referred to as a \u201ccontainer.\u201d Alternatively, the spool storage can refer to transitory information transmitted via a communication channel and inherently stored on that channel during transport","The system  also includes a spooling module  that is configured to retrieve the job information  from the spool storage  and process the job information  to provide an output result. This chain of components implements the consumption () aspects of the processing of the job information , and thus may correspond to the processing module  of . Processing can refer to any kind of action performed on the job information , which may or may not modify the content of the job information . The processing may include printing the job information , displaying the job information , routing the job information  to a target location (with or without modifying it), archiving the job information , and so on. In any case, the recipient of the output result generated by the spooling module  can include one or more of the target entities (, , . . . , ) associated with different usage cases . A variety of the usage cases  will be discussed below.","The modules, logic and storage units shown in the system  can be implemented by any variety and grouping of physical mechanisms and devices. In one exemplary case, a computing device executes the application module , the conversion logic , the APIs , the spool storage  and the spooling module . More specifically, the various logic and modules (, , , ) can be implemented by machine readable code that is storable in the memory of the computing device and executed by a processing unit(s) of a computing device. As previously described, the spool storage  can be implemented by a storage medium (e.g., hard disk) provided by the computing device. The computing device can operate using any kind of platform (e.g., as defined by the operating system and\/or other software configuration of the computing device). In other words, in one implementation, the functionality and associated formats to be described below are specifically configured to operate on different computing platforms, thus defining a standard approach that has wide applicability to different technical environments and which thus serves to facilitate interaction among different technical environments and associated users.","In one case, the target entities (, , . . . , ) can be implemented as devices which are separate from the computing device which implements the other components (-) of the system . The computing device can be communicatively coupled to the target entities (, , . . . , ) via any kind of communication channel, such as a USB coupling, a parallel coupling, a removable media coupling, a network coupling of any kind, and so forth. In a common case, for instance, one or more of the target entities (, , . . . , ) are configured as rendering devices for rendering documents, such as printers for printing documents that are provided by the spooling module . The computing device can be communicatively coupled to the printer(s) via any kind of hardwired and\/or wireless links using any kind of communication protocol. The target entities (, , . . . , ) can alternatively represent display devices, storage devices, other computing devices, and so on.","The above allocation of system  functions to particular devices is only exemplary. In other implementations, different aspects of the system  can be implemented by separate computing devices. For instance, a first computing device can implement the application module  and a separate computing device can implement the spooling module . In other implementations, the spool storage  can also be implemented as a separate unit which couples to the computing device which implements the application module  and\/or the spooling module . In other implementations, the target entities (, , . . . , ) can be integrated into the same computing device which implements the application module  and\/or the spool module . Still other configurations are possible, examples of which are illustrated throughout the present description.","In any event, where one or more computing devices are used to perform aspects of the system , those computing devices can correspond to any type of computing devices, such as general purpose computing devices (e.g., desktop PCs), application-specific computing devices (e.g., game consoles), portable computing devices (e.g., personal digital assistants and mobile phones), and so on.","Further details regarding each of the above-identified components of the system  will follow. Beginning with the production aspect () of the system , the system  can use any kind of application module  to generate any kind of job information , typically associated with any kind of document. Common types of application modules  include text processing programs, spreadsheet processing programs, graphics processing programs, markup language processing programs, database search and retrieval programs, and so on. There is no constraint on the type of application module that can be used to supply job information  to be processed using the system .","Conversion logic , in association with APIs , ensures that the job information sent to the spooler storage  has the required structure . In one case, the application module  can itself supply the conversion logic  as part of its tools. In another case, the system  may employ a separate module to implement the conversion logic . In this case, different commercial providers can supply the application module  and the conversion logic . The specific nature of the transformations performed by the conversion logic  is dictated by the prescribed format of the structure . The forthcoming explanation of the format of the structure  will also provide detail regarding the nature of the transformation performed by the conversion logic  (if, in fact, any transformation is required). Alternatively, or in addition, the spooling module  can play a role in the generation of the job information  having the required structure .","APIs  define one or more interfaces for facilitating interaction among the components shown in the system . For example, the APIs  facilitate the storage of job information  in the spool storage  and the subsequent retrieval of the job information  from the spool storage . More specifically, exemplary and non-limiting functions performed by the APIs  can include: (1) submitting job information  to the spooling module  for scheduling and printing; (2) querying the state of the job while in the spooling module ; (3) monitoring different stages of the job production and hooking up to back end notifications to inform any interested listening entities; (4) monitoring different stages of the job consumption and hooking up to back end notifications to inform any interested listening entities; (5) enabling the spooling module  to send output data to the target entities (, , ), and so on. Job information can be supplied to and retrieved from the spool storage  in a number of different modes, such as, for example, a streaming mode. In a streaming mode, portions of the job information are stored or processed in piecemeal fashion as it is being received.","The APIs  can generally be implemented as a plurality of methods and properties. In the context of an object-oriented programming paradigm, the APIs  can be defined by a collection of classes which specify such methods and properties.","With respect to the consumption () aspect of the system , the system  retrieves the resource information  from the spool storage  and supplies it to the spooling module  for processing. The spooling module  can represent a software program implemented by the same computing device that provides the application module . It includes processing logic  for processing the job information . This processing logic , in turn, can include management logic  for governing various operations performed by the processing logic . As previously described, the spooling module  relates to the consumption  aspects of the system , and therefore may correspond to the processing module  of .","The processing logic  can also include filter logic  for actually performing the required processing on the job information . As will be described in greater detail below in relation to , the filter logic  can include one or more filters (, , . . . , ) for performing different processing functions on the job information  to generate an output result. The spooling module  then feeds the final output result to one or more of the target entities (, , . . . , ) via a device port logic . Although illustrated separately, the device port logic  may be implemented as one or more of the filters -. In the common case of printing, one or more of the target entities (, , . . . , ) include a printer which receives the output result and prints the document(s) specified by the output result. Finally, the spooling module  can also include generically-labeled other logic  for performing other related and unrelated functions.","Further details regarding the filter logic  are provided as follows. In one implementation, the job information  that is processed by one or more of the filters (, , . . . ) has the same format structure  as the job information  stored in the spool storage . Thus, in this exemplary implementation, the filter logic  does not require that the job information  be converted into an intermediary form in order to process it. This, in turn, enables the spooling module  to process job information  in a more efficient manner compared to those techniques that require such conversion. This also yields a more uniform approach compared to some other techniques, which may resort to a complicated assortment of disparate and ad hoc processing techniques to deal with different proprietary formats that can be used to store job information in the spooler storage .","The functions performed by the individual filters (, , . . . , ) can be generalized in the following manner. A first class of filters accepts job information  which conforms to the structure , performs some kind of processing on this information  (which may or may not modify the information ), and then generates an output result which also conforms to the structure . A second class of filters accepts job information  which conforms to the structure , performs some kind of processing on this information , and then generates an output result which does not conform to the structure  (or which only partially conforms to the structure ). A third class of filters accepts job information  which has already been converted into a non-structured format, and provides yet further modification or processing of such non-structured information.","More specifically, for example, one or more initial filters of the first class can be set up to process the job information  in various ways (e.g., by adding a watermark, and so on), but do not otherwise change its basic format structure . A terminal filter of the second class can be set up to process the job information  by changing its format, such as by either completely removing its format structure  or at least partially modifying its format structure . More specifically, the terminal filter (e.g., filter N ) can be used to convert job information  having the format structure  into a non-structured form that can be interpreted by an identified target entity (, , . . . , ). In effect, the filters (-), when taken together, thus serve the role of a device driver. For instance, filter N  may convert the job information  having the structure  into a page description language (PDL) format that can be fed to a printer which accepts such format.","Suppose, as explained above, that the terminal filter N  is a filter of the first class which generates an output result having job information  which still conforms to the structure . A target entity  represents an appropriate device to receive such an output result. This target entity  is referred to as \u201cstructure-aware\u201d because it receives job information  conforming to the structure  and thus includes processing functioning to recognize such information  and process it appropriately.","Suppose, alternatively, that the terminal filter N  is a filter of the second class or third class which generates job information which no longer conforms to the structure . A target entity  represents an appropriate entity to receive such an output result. This target entity  is referred to as \u201cstructure-unaware\u201d because it receives job information  that no longer conforms to the structure , and thus the entity  does not need to devote any specialized functionality for processing information expressed in this structure ; indeed, the target entity  need not, and generally will not, be aware that the job information  its receives (e.g., in an appropriate PDL format) was ever originally expressed using the structure .","There is a third case where the terminal filter N  generates an output result which modifies the structured format  to some extent, but still maintains some vestiges of the structure . Target entity  is an example of a kind of entity that can receive and processing this output result.  identifies this kind of entity  as being \u201cpartially structure-aware\u201d because it should include at least some processing functionality for interpreting whatever remnants of the structure  that still remain in the output result.","Different jobs may require that different filtering operations be performed on the associated job information . The filter logic  can be used to define what filters (, , . . . , ) are to be invoked in processing a particular job, how the individuals filters (, , . . . , ) are to be configured, and how the filters (, , . . . , ) are to be chained together. In other words, the filter logic  can select and chain the filters (, , . . . , ) together in different ways to produce different net effects. In a series configuration shown in , for example, filter A  feeds its output result into the input of filter B , and filter B  feeds its output result into to the input of another filter, and so on.","More specifically, the type of processing that the filter logic  performs on the job information  can be controlled, in part, by one or more \u201cprint tickets\u201d associated with the job information . The print tickets include attribute information that defines the operations that should be performed on the job information  as it passes through the filter logic . Different print tickets can be associated with different parts of the structure  of the job information . For instance, a print ticket can be associated with the root of the structure , so as to globally apply print instructions to the entire job. A print ticket can be associated with another node farther down in the hierarchy of the structure  to apply more localized print instructions with respect to some part of the job. For example, this feature allows different processing rules to be assigned to two different pages of a single print job, or different parts of a single page, and so on.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 3","FIG. 2","FIG. 1"],"b":["300","202","208","300","202","210","210","208","212","216","210","202","208","218","106","208"]},"The top level of the hierarchy specifies job-related information  that identifies the entire job itself. For instance, the job may pertain to the printing of a book including multiple chapters, and each chapter, in turn, can include multiple pages, and each page, in turn, can include font resources and image resources. In this example, the top level of the hierarchy identifies a logical package which encapsulates the entire job, that is, the entire book. A \u201cpackage\u201d is a logical concept that refers to a collection of job information that comprehensively specifies an entire job. The package can contain multiple \u201cparts\u201d which are provided in differing levels of the hierarchy. A \u201cpayload\u201d, for instance, corresponds to a collection of parts treated as a single unit, and which satisfies certain characteristics. For instance, a package may specify multiple payloads that respectively define different versions of a single document, and each of these payloads can contain multiple parts (e.g., image resources, font resources, and so forth).","A next level of the hierarchy specifies information  that identifies the documents associated with the job. In the example of the book, the document level might specify individual chapters in the book. Or this level of the hierarchy may specify different kinds of documents to be printed in a single print job, such a first document created using a text editor, and a second document created using a spreadsheet program, and so on, where these two documents together form a report of some kind. The next level of the hierarchy specifies information  that identifies different versions of the documents identified in the preceding level. For instance, consider the case of a chapter of a book. This chapter can be specified in a first version that requires that the chapter be printed in a black and white mode, and a second version that requires that the chapter be printed in a color mode. Or different versions may correspond to different languages used to present information in the document, and so on. Depending on configuration information and other factors, the spooling module  or other processing logic can select an appropriate one of the versions to process and present to an appropriate target entity (, , . . . , ). The next level of the hierarchy specifies information  that identifies different pages within the versions of the documents identified in the proceeding level.","Resources can be associated with any level of the hierarchy defined by schema . For instance, exemplary resource  can be associated with the versions level of the hierarchy. Such resource  can comprise an image resource , a font resource , or some other resource . Resource , on the other hand, is associated with the page level of the hierarchy, rather than version level.  is exemplary and non-limiting; for instance, resources can be associated with yet additional levels in the hierarchy, although not shown in .","Further, although not shown in , metadata can be associated with any of the levels of the hierarchy of the schema . Metadata specifies any supplemental information pertaining to the job information , such as an author who created a document contained in the job, a time when the document was created, and so on. There are no restrictions on the type of, and meaning assigned to, metadata that can be appended to different parts of the schema .","In the same manner, print tickets can be associated with any level of the hierarchy of the schema . Print tickets define the types of processing operations that should be performed on associated parts of the hierarchy. For instance, a print ticket associated with the job container level  will apply to the entirety of the package defined by the job information . A print ticket associated with an individual page of the job information  will have a localized effect by only affecting that page.","In general, if so configured, lower levels of the hierarchy defined by the schema  can inherent the properties defined in higher levels. In other words, if so configured, a child object in the hierarchy will inherit the properties defined for its parent and ancestors. This means that, if so configured, a print ticket, resource, or metadata associated with a parent node can also be, through inheritance, available to its associated child nodes.","In summary, the schema  shown in  provides a powerful, uniform and versatile mechanism for representing complex job information, particularly for those jobs that involve multiple documents and\/or multiple versions of documents. Traditional techniques provide no provisions for representing these kinds of complex scenarios in spool storage; therefore, these traditional techniques suffer from the inefficiencies described above, which can be significant.","To further clarify the exemplary schema ,  shows one exemplary instantiation  of the schema . The entire collection of nodes shown in  defines a package. The package includes a root node  associated with the entire package, e.g., the entire job. An index can be associated with the package, and hence with the root node . This index can be used to locate the package in the spool storage .","The job defined by the root node  includes a number of documents, as identified by document node  and document node . Also, a metadata node  is associated with the root node . If so configured, the metadata associated with this metadata node  defines properties which apply to the job as a whole.","Each of the documents associated with nodes  and  can include multiple versions associated therewith. For example, the document represented by node  includes at least two versions identified by nodes  and . As explained in connection with , a document may allocate separate versions for printing a document in black and white mode, color mode, and so on. No limitation is placed on what a developer may define as a version in the context of a particular application environment.","By virtue of the above-identified provisions, the job information  having the structure  serves as a general blueprint from which many versions can be generated. In general, the specification of such version information within the spool storage  itself is a particularly unique and beneficial feature. For instance, this provides an efficient mechanism for printing different versions of the same document without having to store entire separately-tailored copies of the same document in the spool storage . Storing separate copies may overwhelm the storage and processing resources of the printing subsystem.","In addition to version nodes (, ), node  also includes nodes  and  associated therewith. Node  specifies metadata associated with node  and node  specifies a resource associated with node . A resource can include an image resource, a font resource, or some other resource that goes into the composition of the document represented by node .","Each version includes one or more pages associated therewith. Nodes  and , for example, represent pages associated with version node . Metadata node  indicates that metadata can be associated with the version level of the hierarchy (as it can for any level). Resource node  indicates that resource information can be associated with the version level (as it can for any level).","Finally, each page can include page data associated therewith as well as metadata. For example, page node  includes page data node  and metadata node  associated therewith, indicating that page data and metadata can be associated with this page. Page node  includes page data node  and metadata node  associated therewith, indicating that page data and metadata can be associated with this page.","The package associated with root node  can also include a collection of resources for shared use by different nodes in the job. Such collection of resources thus defines a shared library of resources that can be applied at different points within a document represented by the package. Particular types of resources include image resources, as represented by general image node . Individual image nodes (, ) are children of the parent image node , and respectively represent individual image resources. A metadata node  depends from the general image node , which represents metadata that, if so configured, applies to all of the image resources. Another metadata node  depends from an individual image node , representing metadata that applies to only this image resource associated with this node .","The same structure applies to font resources. A general font node  represents the inclusion of a plurality of font resources to select from, indicated by font nodes  and . Metadata can be associated with the general font node , as indicated by metadata node , or can be associated with a particular font resource, as indicated by metadata node . If so configured, metadata associated with the general font node  applies to all font resources while metadata associated with a particular font resource (such as found resource ) applies only to that particular font resource.","The resources can also include a number of other types of resources, as generally indicated by resource node . Metadata can be associated with this node , as indicated by metadata node .","Any document-related node in the package can reference any reference node, indicating that a particular part or aspect of the document is referencing a particular resource for use thereat. For instance, in the exemplary case of , page node  references resource extensions node . This association is indicated with a dashed line. This means that the resource represented by node  is used in the page represented by page . Further, page node  is associated with image node  and font node , indicting that an image resource associated with node  and a font resource associated with node  are used in the page associated with node . These associations are indicated by two respective dashed lines.","The hierarchies shown in  can be created in different ways. The hierarchy itself is a logical entity, where the nodes correspond to respective objects. Objects can reference other objects in different ways. In one technique, the individual objects can be modified so that they point to linked objects. Linking can be provided by pointers, Uniform Resource Locators (URLs), or some other referencing mechanism. Alternatively, or in addition, separate relationship information can be defined that specifies how separate objects are linked together. This mechanism eliminates the need for individual objects to be modified to define their interrelationship to other objects. This separate relationship information thus serves a blueprint for linking together separate objects in the job information. Likewise, metadata can be associated with individual nodes in the hierarchical structure in different ways. For instance, individual nodes can provide linking information that points to associated metadata, or the objects themselves can embeds such metadata. The Extensible Markup Language (XML), or other markup language, can be used to create the structured format shown in .","As noted above, the nodes shown in  are logical entities. Mapping rules define how the nodes map to actual physical entities used to constitute a document that is to be rendered. In one case, some of the nodes directly correspond to parts that are to be rendered, such as image resources and font resources. In another case, other of the nodes do not map, in one-to-one fashion, to actual renderable content of the document, but rather serve to communicate the organization of content in the document, or other aspect of the document.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 5","FIG. 1","FIG. 2","FIG. 2"],"b":["500","106","106","504","512","222","106","218"]},"For example, the plurality of filters - of the processing module  are arranged to form a filter pipeline, such as the filter pipeline  of . Each of the filters -, for instance, may be configured to process complex elements in a file that cannot be effectively processed by a legacy printer into simpler elements that the printer can efficiently print. Outline filter , for instance, is configured to process elements with complex outlines. Outline filter  is executable to process a complex outline of a graphical element into a simple primitive(s) that can be handled by a legacy printer. Simple primitives may include lines, polygons, areas, vector shape elements, and the like.","Gradient filter  is configured to process elements with complex gradients. Gradient filter , for instance, is executable to process a complex gradient into multiple polygons with fill colors that approximate the gradient, convert the gradient into a series of bitmaps, and so on.","Transparent vector shape filter  is configured to process vector shape elements with transparency functionality. As previously described, a first graphical element that supports transparency functionality (e.g. alpha value less than one) allows a second graphical element that is overlapped by the first graphical element with transparency to be partially shown. The region of the second graphical element covered by the first graphical element (i.e. overlapping portion) may therefore have a color that is \u201cbetween\u201d the colors of the first and second graphical elements. For example, if the transparency value is high (i.e., an alpha value is set closer to 1.0 such that the graphical element is more opaque), the color of the overlapping portion will be closer to the color of the element with transparency (i.e., the first, overlapping graphical element). If the transparency value is low (i.e., an alpha value is set closer to 0.0 such that the graphical element is more transparent), the color of the overlapped region will be closer to the color of the overlapped element (i.e., the second graphical element). Transparent vector shape filter , for instance, may be executed to process the transparency element and the overlapped element into two new elements with solid fill colors but without the overlapped region. Transparent vector shape filter  may also create another new element with for the overlapping portion with a solid fill color that approximates the original overlapping portion.","Transparent image filter  is configured to process image elements with transparency. Transparent image filter  determines the overlapping region of image elements and creates a new image element that approximates the overlapping region using shape elements and other image elements. Transparent image filter  is configured to apply alpha computation and subsequent clipping to polygonal paths. It is to be appreciated that transparent vector shape filter  and transparent image filter  are separately discussed in this document for clarity reasons. In an implementation, both filters may be combined into a single filter.","Processing module  may include other filters for performing other processing steps. For example, processing module  may include a filter to convert file data to information that a legacy printer can understand, such as page description language (PDL) command streams. Processing module  may also include filters that are not configured to modify file data. For example, processing module  may include a filter that sends a copy of the file data to an archive.","It is to be understood that filters - are modularly configured and form a filter pipeline where the output of one filter is served as the input of another filter. The modular configuration enables different filters to be easily added, modified or removed. The filter pipeline enables a file to be converted efficiently to a format understood by a legacy printer. This capability allows processing module  to provide a file to a legacy printer for printing without converting the complex elements in the file to computationally-intensive pixel-based elements, such as rasterized graphical elements (e.g., bitmaps).","Filter Pipeline",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIGS. 6","b":["7","8","600","700","800"]},"Generally, any of the functions described herein can be implemented using software, firmware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule,\u201d \u201cfunctionality,\u201d and \u201clogic\u201d as used herein generally represents software, firmware, or a combination of software and firmware. In the case of a software implementation, the module, functionality, or logic represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices. The features of the filter pipeline strategies described below are platform-independent, meaning that the filter pipeline strategies may be implemented on a variety of commercial computing platforms having a variety of processors. Processors are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example, processors may be comprised of semiconductor(s) and\/or transistors (e.g., electronic integrated circuits (ICs)). In such a context, processor-executable instructions may be electronically-executable instructions. Alternatively, the mechanisms of or for processors, and thus of or for a computing device, may include, but are not limited to, quantum computing, optical computing, mechanical computing (e.g., using nanotechnology), and so forth.","A set of processing capabilities may be provided through the use of software and hardware components to ensure that the file is rendered as intended. For example, a computing device and a printer may provide a system for processing and rendering a file having an electronic drawing. The system includes software components having processing capabilities to convert the drawing from a native format to a page description language (PDL), which may include providing digital rights management (DRM), page ordering, and so on, such that the file may be rendered by a rendering device. These processing capabilities, provided through execution of corresponding software components, may be divided between the computing device and the printer in a variety of ways.","In the first system  depicted in , the processing capabilities are provided on the computing device , which is illustrated as a desktop PC that is communicatively coupled to a printer . The printer , in this instance, only understands a particular PDL that does not match the original application file format. Therefore, the computing device  in this example includes each of the software components  having processing capabilities that are utilized to process (e.g., convert) a file container  to a PDL  representation of the file container . In other words, the PDL  is a converted form of the file container  such that the printer  can render the contents of the file container  as intended. Thus, the computing device  provides an output of the PDL  which causes the printer  to render the data described therein. In this instance, the printer  is a structure-unaware target entity  as described in relation to .","In the second system  depicted in , the processing capabilities are provided on the printer , such as a \u201cthick\u201d or \u201cintelligent\u201d printer having significant hardware and software resources that together provide the processing capabilities. In such an instance, the computing device  merely communicates the file container to the printer  for processing without performing conversions, DRM, and the like. Thus, the printer  is a structure-aware target entity  as described in relation to .","The printer , for instance, may include software components  that convert a file container  to a model-specific PDL  representation of the file container . The model-specific PDL  may then be utilized by the software components  to cause the printing mechanism  to print the PDL  representation of the file container  on a printable medium.","The system  of  may be considered a general opposite of the system  of . In the system  of , the printer  is a structure aware target entity (e.g., the structure aware target entity  of ), and thus may be considered \u201cintelligent\u201d in that it has considerable hardware and\/or software capabilities that enable the printer  to process and render data.","In the illustrated implementation, the printer  has a bidirectional interface  that provides bidirectional communication back to the computing device . For instance, the printer  may utilize the bidirectional interface  to gather additional information or resources (e.g., from the Internet, and so on) that are utilized to process and render the file container .","In the third system  of , the processing capabilities are divided between the computing device  and a printer . Therefore, unlike in the previous examples (e.g., the first and second systems , ) where the rendering capabilities were generally provided by either the computing device or the printer, the processing capabilities in the third system  are provided by both the computing device  and the printer .","The computing device , for instance, may include a first collection  of software components having the functionality of a \u201clight\u201d printer driver in that, the software components in the first collection  do not provide a model-specific PDL output. The printer  includes a second collection of software components  that accepts the output of the first collection  from the computing device . The printer  may then execute the second collection of software components  to produce rendering instructions  of a file  from the computing device .","The computing device  of  is illustrated as having a file  for output. The file  is processed by the first collection of software components  to form an intermediate version  of the file. The computing device  then communicates the intermediate version  of the file  to the printer . The printer , upon receipt of the intermediate version  of the file , executes the second collection of software components  to convert the intermediate version  of the file  to specific rendering instructions  for the file. The rendering instructions  are suitable for causing the printing mechanism  to print the file , i.e. for rendering the PDL version of the file . Thus, the third system  is a \u201cmiddle ground\u201d in the spectrum between the first and second systems ,  of , respectively. In this instance, the printer  is a partially structure-aware target entity  as described in relation to .","By employing the system  of , device and software manufactures may negotiate which processing capabilities are to be provided on the respective devices. In an implementation, this negotiation may be provided dynamically by software modules that are executed on the computing device and\/or the printer. In another implementation, the negotiation may be performed by a developer and the result of the negotiation provided as a driver for corresponding devices.","Filter Hierarchies",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIGS. 9","FIG. 7","FIG. 6","FIG. 8"],"b":["10","11"]},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 9","b":["900","902","904","906","908","910","912","902","904","906","914","902","906","904","914","916","918","902","920","922","924","926"]},"Each of the computing devices , ,  is communicatively coupled to a respective printer , , . Each of the printers , ,  is also arranged in a hierarchy  of processing capabilities from low to high, respectively. For example, printer  does not have processing capabilities, while printer  includes processing capabilities  that are provided by a filter . Printer  has a greater amount of processing capabilities  that are provided through execution of filters , , .","To illustrate the flexibility of the system  through use of the filters, each of the computing device , ,  and printer , ,  combinations that are depicted may be considered to have matching processing capabilities, one to another. For example, computing device , which is illustrated as a desktop PC, has significant processing capabilities, while the corresponding printer  does not have processing capabilities. Therefore, the output of the filters , ,  provides the processing capabilities and is printed directly by the printing mechanism .","Computing device , which is illustrated as a personal digital assistant (PDA), does not have processing capabilities. In this instance, the printer  includes processing capabilities  that are provided by filters -. Thus, this may be considered an opposite scenario to the computing device  and corresponding printer  that were previously described.","A middle scenario is illustrated by the computing device , illustrated as a laptop computer, and the printer . In this scenario, both the computing device  and the printer  include respective processing capabilities , . Thus, the printing mechanism receives an input that was processed utilizing the processing capabilities of both the computing device  and the printer .","As shown in the illustration of , the arrangement of the filters of the computing devices - and the printers - may be used to efficiently implement and address the processing capabilities of each of the devices. For instance, processing capabilities of one device (e.g., printer ) may be utilized to offset the lack of those particular processing capabilities on another device (e.g., computing device ).",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 10","FIG. 10","FIG. 10","FIG. 10"],"b":["1000","1002","1004","1006","1008","1010","1004","1006","1008","1002","1004","1006","1010","1004","1006","1008"]},"Computing device , for example, is illustrated as including an application  that is compatible with the processing capabilities  of the printer . Specifically, the application , when executed, is compatible with a filter  that is executable to enable an output from the application  to be printed by the printing mechanism . Therefore, the computing device  and application  are directly compatible with the processing capabilities  of the printer .","Computing device , however, is illustrated as including an application  having additional processing capabilities such that an output from the application  is not compatible with the processing capabilities  of the printer . Therefore, the computing device  includes processing capabilities  provided by a plurality of filters ,  which are executable to process the output of the application  such that it is compatible with the processing capabilities  of the printer .","Likewise, computing device  is illustrated as including an application  having additional processing capabilities over that of application  of computing device . Therefore, an output from the application  is also not compatible with the processing capabilities  of the printer . The computing device  includes processing capabilities  provided by a plurality of filters , ,  which convert the output of the application  such that it is compatible with the processing capabilities  of the printer. Therefore, in the system  of , different collections of filters are provided on the respective computing devices to provide \u201cbackward\u201d compatibility with a legacy device (e.g., printer ).",{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 11","b":["1100","1102","1104","1106","1102","1106","1108","1110","1112","1114","1104","1116"]},"Computing device  includes filters (), () that provide processing capabilities . The reference numbers for filters (), () are utilized to illustrate that filters (), () provide similar processing capabilities to respective filters ,  that are included on the printer . Therefore, because the computing device  and the printer  share some processing capabilities, the output from the computing device  is not reprocessed by the shared filters ,  of the printer . Rather, the output of the computing device  is passed to filter  for processing to a form that is suitable for being rendered by the printing mechanism .","Likewise, computing device  includes filters (), (), () that provide processing capabilities . The reference numbers for filters (), (), () are utilized to illustrate correspondence of the processing capabilities  with the processing capabilities  provided by respective filters , ,  that are included on the printer . In this instance, because the computing device  and the printer  share similar processing capabilities , , the output from the computing device  is not reprocessed by any of the filters , ,  of the printer . Rather, the output of the computing device  is in a form that is suitable for being rendered by the printing mechanism  directly. In this way, the system  of  provide differing levels of processing capabilities which are separately executable to process an output from different computing devices based on the processing capabilities of the computing devices. The different levels of processing capabilities are also depicted in  through use of an arrow  that illustrates a spectrum of processing capabilities provided by the respective computing devices , , .","Exemplary Procedures","The following discussion describes the different processing techniques that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware, firmware, or software, or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks.",{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 12","b":["1200","1202","1204","1206","1208","1206","1204","1204"]},"The application , package , and printer driver  are included on a computing device , such as a desktop PC. The printer driver  is provided by a plurality of filters (), where \u201ck\u201d can be any integer from one to \u201cK\u201d. As previously described, each of the plurality of filters () is executable to provide particular processing capabilities.","The package  is illustrated as having a plurality of pages, which are depicted in  as pages , . Each of the plurality of pages ,  is separately encrypted, which is illustrated with the italicized word \u201cencrypted\u201d in  above each of the pages , . In this implementation, the pages ,  are encrypted for DRM purposes. It should be noted that there is no lock on the overall package, i.e. the package  format itself is not encrypted, and therefore the package is recognizable by structurally-aware software and hardware as described in relation to .","At block , the printer driver  executes a DRM filter () to process the package . For example, the printer driver  may be configured to determine whether a printer is capable of recognizing that the package  is encrypted for DRM purposes. In this instance, the printer is incapable of recognizing encryption supported by the DRM system. Therefore, the DRM filter () is executed to gain DRM access rights to the pages , , such as by providing necessary payment information, determining whether a user has already obtained DRM access rights to the pages , , and so on. When the DRM access rights have been obtained, the DRM filter () is executed to process the package  to form package (). Package () has the encryption provided through DRM removed, which is illustrated through the absence of the italicized \u201cencrypted\u201d text in package () from package . The processed package () utilizes reference number () to indicate that the processed package () corresponds to package  and was processed by DRM filter ().","At block , the printer driver  executes a printer encryption filter () to re-encrypt the file package () for the particular printer. For example, the printer encryption filter () may utilize a public key of a public\/private key pair of an asymmetric encryption algorithm. The printer includes the corresponding private key to decrypt data that is encrypted utilizing the public key. In this way, the pages ,  are protected from unauthorized access. It should be noted again that in this implementation other components of the package () are not encrypted, meaning that each of the page ,  is open within the structure of the package ().","At block  the printer driver  forms the package () for communication over an output interface  to a printer . The output interface  may be configured as a wide variety of output interfaces that provide local and\/or remote (i.e., network) communication with the printer . The printer  includes an input interface  for receiving the package ().","Thus, in this implementation, one or more of the filters are configured to separately address the structure of the package . For instance, the DRM filter () that performed the DRM operation does not need to \u201cunderstand\u201d how to render the pages , , or even understand the concept of a page. The DRM filter () simply understands that there are two objects in the package  that have DRM (i.e. conditional access) information. The DRM filter (), therefore, determines whether the user has obtained conditional rights to the content, obtains a key to decrypt the pages, and processes the pages. Thus, the described hierarchical (i.e. layered) model provides targeted functionality based on the structure of the container through use of the plurality of filters (). This, in turn, enables the provision of a software module composed of one or more of the filters that need not address each of the components of the container. In existing PDLs, this is not possible because the formats are intermixed and entangled, therefore preventing the splitting of functionality, such as workload sharing as previously described.",{"@attributes":{"id":"p-0118","num":"0117"},"figref":["FIG. 13","FIG. 12","FIG. 2","FIG. 12"],"b":["1300","1226","1206","2","1302","1226","1304","232","1306","1206","2","1306","1308","1226","1212","1306","1210","1226","1208","1210","1308","1206","1206","2","1208","1206","1204","1226"],"i":["j","j","k","j"]},"The filter selection module  may select one of more of the plurality of filters () in a variety of ways. For example, the package () may include one or more print tickets, as previously described in relation to , that identify particular processing operations that have been performed and\/or are to be performed to process the package () into a renderable format. The filter selection module , when executed, therefore examines the package () to determine what processing should be performed, and selects one or more of the filters () based on the determination. Although the filter selection module  is illustrated separately from the filters (), the functionality of the filter selection module  may be incorporated into the filters (). For instance, each of the filters () may be executable to determine whether the package () is to be processed by that filter, and if so, perform the processing.","At block , the printer  executes the selected filters. For example, the filter selection module  may select a printer decryption filter (), color conversion filter () and a PDL emitter filter () from the plurality of filters () at block . The selected filters process the package () in succession to provide an output of a PDL  having the pages , . For instance, the printer decryption filter (), when executed, utilizes a private key in an asymmetric decryption algorithm to decrypt the encrypted pages , . The color conversion filter (), when executed, processes the decrypted pages ,  to process the pages ,  to have colors which are compatible with the printer . The color processed pages are then processing by the PDL emitter filter () to form the PDL  having the pages ,  which is recognizable (i.e., compatible) such that the pages ,  can be rendered.","At block , the interpreter  passes the PDL  to a printing mechanism  for being rendered. At block , the PDL  causes the printing mechanism  to render the pages , .",{"@attributes":{"id":"p-0122","num":"0121"},"figref":["FIG. 14","FIGS. 5-11"],"b":"1400"},"At block , for example, a processing module that includes a plurality of filters examines the capabilities of a rendering device to process application content. At block , the processing module is executed to derive a processing capabilities model of the rendering device based on the examination. For example, the processing module may determine the processing capabilities of rendering device and select a processing capabilities model that has corresponding processing capabilities from a plurality of preconfigured processing capabilities models that are stored in memory.","At block , the processing module selects one or more of the plurality of filters based on the processing capabilities model. Each processing capabilities model, for instance, may reference one or more of the filters that are to be utilized to process application content such that it can be rendered by the rendering device. At block , the selected filters are arranged to form a device driver for the rendering device. For example, the processing module may determine an order each filter should be arranged such that each filter provides an output that is compatible with a successive filter in a filter pipeline. At this point, the processing module may also add additional filters to supply any necessary conversions. At block , the processing module forms a communication having the device driver for storage on a computing device. A variety of communications can be formed, such as a message that is storable in memory of a computing device that executes the processing module, computer executable instructions that are written to a computer readable medium for use by another computing device, computer executable instructions that are to be transmitted over a network, and so on. Although the procedure  of  described the creation of a device driver based on the processing capabilities of the rendering device, an interpreter may also be configured in a similar manner by the rendering device based on the processing capabilities of a computing device.","In the described procedure  of , the processing module installs filters on a computing device based on the processing capabilities of the rendering device, thereby providing differing collections of filters based on the rendering capabilities of the rendering device. The processing capabilities may be determined in a variety of other ways. For instance, a stack description may be provided by a vendor that defines the processing capabilities of the rendering device. In another instance, the rendering device and\/or computing device can announce its processing capabilities such that the device driver and\/or interpreter may be formed. In response to the announcement, for example, a computing device may add additional filters to a device driver based on the announced capabilities, thereby providing dynamic negotiation of capabilities between the device and the driver. In another example, both the computing device and the rendering device select and arrange filters based on the collective processing capabilities. Thus, the device driver and the interpreter may negotiate based on the processing capabilities of each device, such as through negotiations of features. In an implementation, the rendering device has fixed capabilities such that there is a static set of capabilities and the processing module determines which additional processing capabilities are desired to process a document. In another instance, the rendering device has changing capabilities and the processing module dynamically derives the device driver and\/or interpreter based on those capabilities.","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 6","b":["7","8"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 13","FIG. 12"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
