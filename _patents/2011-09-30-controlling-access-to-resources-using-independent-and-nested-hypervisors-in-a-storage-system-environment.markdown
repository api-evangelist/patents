---
title: Controlling access to resources using independent and nested hypervisors in a storage system environment
abstract: Operating a hypervisor includes running a hypervisor as a thread of an underlying operating system and loading a guest operating system using the hypervisor based on the thread of the underlying operating system, where the hypervisor runs independently of the guest operating system and independently of other hypervisors running as other threads of the underlying operating system. The hypervisor may be a first hypervisor and operating a hypervisor may further include running a second hypervisor nested with the first hypervisor, where the guest operating system may be loaded using both the first hypervisor and the second hypervisor. The underlying operating system may be an operating system of a storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075642&OS=09075642&RS=09075642
owner: EMC Corporation
number: 09075642
owner_city: Hopkinton
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF VARIOUS EMBODIMENTS"],"p":["This application is related to the field of virtualized computing environments and, more particularly, the use of hypervisors.","Host processor systems may store and retrieve data using a storage device containing a plurality of host interface units (I\/O modules), disk drives, and disk interface units (disk adapters). Such storage devices are provided, for example, by EMC Corporation of Hopkinton, Mass. and disclosed in U.S. Pat. No. 5,206,939 to Yanai et al., U.S. Pat. No. 5,778,394 to Galtzur et al., U.S. Pat. No. 5,845,147 to Vishlitzky et al., and U.S. Pat. No. 5,857,208 to Ofek, which are incorporated herein by reference. The host systems access the storage device through a plurality of channels provided therewith. Host systems provide data and access control information through the channels to the storage device and the storage device provides data to the host systems also through the channels. The host systems do not address the disk drives of the storage device directly, but rather, access what appears to the host systems as a plurality of logical disk units. The logical disk units may or may not correspond to the actual disk drives. Allowing multiple host systems to access the single storage device unit allows the host systems to share data stored therein.","A hypervisor is a software implementation providing a software virtualization environment in which other software may run with the appearance of having full access to the underlying system hardware, but in which such access is actually under the complete control of the hypervisor. The software running in such a hypervisor managed environment may execute within a virtual machine (VM) and multiple VMs may be managed simultaneously by a hypervisor. Hypervisors may generally be classed as type 1 or type 2, depending on whether the hypervisor is running in a supervisor mode on \u201cbare metal\u201d (type 1) or is itself hosted by an operating system (OS) (type 2). A bare metal environment describes a computer system in which a VM is installed directly on hardware rather than within a host OS. ESX and ESXi, produced by VMware of Palo Alto, Calif., are examples of bare-metal hypervisors that may run directly on server hardware without requiring an additional underlying operating system. For discussions of the use of known hypervisors (or \u201cvirtual machine monitors\u201d) in virtualized computing environments, see, for example, U.S. Pat. Nos. 7,665,088; 7,743,389; and 7,945,436, which are all assigned to VMware, Inc. and which are all incorporated herein by reference. Although the term \u201chypervisor\u201d is principally used herein, this term should be understood herein to refer to any appropriate software layer having the described features and functions discussed herein.","Accordingly, it would be desirable to provide a system and techniques for advantageously operating hypervisors in connection with the scheduling and sharing of resources, particularly in connection with storage systems.","According to the system described herein, operating a hypervisor includes running a hypervisor as a thread of an underlying operating system and loading a guest operating system using the hypervisor based on the thread of the underlying operating system, where the hypervisor runs independently of the guest operating system and independently of other hypervisors running as other threads of the underlying operating system. The hypervisor may be a first hypervisor and operating a hypervisor may further include running a second hypervisor nested with the first hypervisor, where the guest operating system may be loaded using both the first hypervisor and the second hypervisor. The underlying operating system may be an operating system of a storage system. The hypervisor may be embedded with the storage system. Operating a hypervisor may also include modifying code of the hypervisor independently of code of the guest operating system. Operating a hypervisor may also include modifying code of the hypervisor independently of code of the other hypervisors. The hypervisor may share resources with the other hypervisors according to scheduling processes of the underlying operating system.","According further to the system described herein, a non-transitory computer readable medium stores software for operating a hypervisor. The software includes executable code that runs a hypervisor as a thread of an underlying operating system and executable code that loads a guest operating system using the hypervisor based on the thread of the underlying operating system, where the hypervisor runs independently of the guest operating system and independently of other hypervisors running as other threads of the underlying operating system. The hypervisor may be first hypervisor, and the software may further include executable code that runs a second hypervisor nested with the first hypervisor, where the guest operating system is loaded using both the first hypervisor and the second hypervisor. The underlying operating system may be an operating system of a storage system. The hypervisor may be embedded with the storage system. The software may further include executable code that modifies code of the hypervisor independently of code of the guest operating system. The software may further include executable code that modifies code of the hypervisor independently of code of the other hypervisors. The hypervisor may share resources with the other hypervisors according to scheduling processes of the underlying operating system.","According further to the system described herein, a system using hypervisors includes at least one processor providing processing resources for an underlying operating system and a computer-readable medium storing software for operating a hypervisor. The software includes executable code that runs the hypervisor as a thread of the underlying operating system and executable code that loads a guest operating system using the hypervisor based on the thread of the underlying operating system and uses the processing resources, where the hypervisor runs independently of the guest operating system and independently of other hypervisors running as other threads of the underlying operating system. The hypervisor may be a first hypervisor, and the software may further include executable code that runs a second hypervisor nested with the first hypervisor, where the guest operating system is loaded using both the first hypervisor and the second hypervisor. The underlying operating system may be an operating system of a storage system. The hypervisor may be embedded with the storage system. The at least one processor may include at least one CPU core of the storage system. The hypervisor may share the processing resources with the other hypervisors according to scheduling processes of the underlying operating system.","According further to the system described herein, operating at least one hypervisor includes running a first hypervisor as a first thread of an underlying operating system, running a second hypervisor as a second thread of the underlying operating system, loading a first guest operating system using the first hypervisor based on the first thread of the underlying operating system, loading a second guest operating system using the second hypervisor based on the second thread of the underlying operating system, and scheduling sharing of resources of the underlying system between the first hypervisor and the second hypervisor according to a scheduler of the underlying operating system, where the first hypervisor and the second hypervisor run independently of each other. The scheduler of the underlying operating system may schedule fractional time shares for the first hypervisor and the second hypervisor to access the same resource. The resource may be a CPU core of a storage system operating, and where the underlying operating system may operate the storage system. The scheduler of the underlying operating system may schedule fractional time shares for the first hypervisor and the second hypervisor to access multiple resources operating in a symmetric multi-processing regime. The first hypervisor and the second hypervisor may be part of the same hypervisor running the first and second threads independently. The first hypervisor and the second hypervisor may run independently of the first and second guest operating systems. The underlying operating system may operate a storage system, and the first and second hypervisors may be embedded with the storage system.","According further to the system described herein, a non-transitory computer readable medium stores software for operating at least one hypervisor. The software includes executable code that runs a first hypervisor as a first thread of an underlying operating system, executable code that runs a second hypervisor as a second thread of the underlying operating system, executable code that loads a first guest operating system using the first hypervisor based on the first thread of the underlying operating system, executable code that loads a second guest operating system using the second hypervisor based on the second thread of the underlying operating system, and executable code that schedules sharing resources of the underlying system between the first hypervisor and the second hypervisor according to a scheduler of the underlying operating system, where the first hypervisor and the second hypervisor run independently of each other. Executable code that schedules sharing of the resources may schedule fractional time shares for the first hypervisor and the second hypervisor to access the same resource. The same resource may include a CPU core of a storage system, and the underlying operating system may operate the storage system. Executable code that schedules sharing of the resources may schedule fractional time shares for the first hypervisor and the second hypervisor to access multiple resources operating in a symmetric multi-processing regime. The first hypervisor and the second hypervisor may be part of the same hypervisor running the first and second threads independently. The first hypervisor and the second hypervisor may run independently of the first and second guest operating systems. The underlying operating system may operate a storage system, and the first and second hypervisors may be embedded with the storage system.","According further to the system described herein, a system using hypervisors includes at least one processor providing processing resources for an underlying operating system and a non-transitory computer readable medium storing software for operating at least one hypervisor. The software includes executable code that runs a first hypervisor as a first thread of an underlying operating system, executable code that runs a second hypervisor as a second thread of the underlying operating system, executable code that loads a first guest operating system using the first hypervisor based on the first thread of the underlying operating system, executable code that loads a second guest operating system using the second hypervisor based on the second thread of the underlying operating system, and executable code that schedules sharing of the processing resources of the underlying system between the first hypervisor and the second hypervisor according to a scheduler of the underlying operating system, where the first hypervisor and the second hypervisor run independently of each other. Executable code that schedules sharing of the resources may schedule fractional time shares for the first hypervisor and the second hypervisor to access the same resource. The same resource may include a CPU core of a storage system, and the underlying operating system may operate the storage system. Executable code that schedules sharing of the resources may schedule fractional time shares for the first hypervisor and the second hypervisor to access multiple resources in a symmetric multi-processing regime. The first hypervisor and the second hypervisor may be part of the same hypervisor running the first and second threads independently. The underlying operating system may operate a storage system, and the first and second hypervisors may be embedded with the storage system.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["20","22","24","24","26","24","24","22","24","28","22","24","20","22","28"]},"In an embodiment of the system described herein, data from the storage device  may be copied to the remote storage device  via a link . For example, the transfer of data may be part of a data mirroring or replication process, that causes the data on the remote storage device  to be identical to the data on the storage device . Although only the one link  is shown, it is possible to have additional links between the storage devices ,  and to have links between one or both of the storage devices ,  and other storage devices (not shown). The storage device  may include a first plurality of adapter units (RA's) , , . The RA's -may be coupled to the link  and be similar to the I\/O Module , but are used to transfer data between the storage devices , .","The storage device  may include one or more disks, each containing a different portion of data stored on each of the storage device .  shows the storage device  including a plurality of disks , , . The storage device (and\/or remote storage device ) may be provided as a stand-alone device coupled to the host  as shown in  or, alternatively, the storage device  (and\/or remote storage device ) may be part of a storage area network (SAN) that includes a plurality of other storage devices as well as routers, network connections, etc. The storage devices may be coupled to a SAN fabric and\/or be part of a SAN fabric. The system described herein may be implemented using software, hardware, and\/or a combination of software and hardware where software may be stored in a computer readable medium and executed by one or more processors.","Each of the disks -may be coupled to a corresponding disk adapter unit (DA) , , that provides data to a corresponding one of the disks -and receives data from a corresponding one of the disks -. An internal data path exists between the DA's -, the TOM  and the RA's -of the storage device . Note that, in other embodiments, it is possible for more than one disk to be serviced by a DA and that it is possible for more than one DA to service a disk. The storage device  may also include a global memory  that may be used to facilitate data transferred between the DA's -, the IOM  and the RA's -. The memory  may contain tasks that are to be performed by one or more of the DA's -, the IOM  and the RA's -, and a cache for data fetched from one or more of the disks -","The storage space in the storage device  that corresponds to the disks -may be subdivided into a plurality of volumes or logical devices. The logical devices may or may not correspond to the physical storage space of the disks -. Thus, for example, the disk may contain a plurality of logical devices or, alternatively, a single logical device could span both of the disks , . Similarly, the storage space for the remote storage device  that comprises the disks -may be subdivided into a plurality of volumes or logical devices, where each of the logical devices may or may not correspond to one or more of the disks ",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["40","24","42","42","37","42","42","28","30","30","35","35","40","44","42","42","42","42","44","42","42","42","42","26","44","42","42","42","42","44","42","42","42","42","42","42","42","42","42","42"],"i":["a","n ","a","n ","a","c","a","c","a","n","a","n ","a","n ","a","n ","a","n ","a","n","a","n ","a","n ","a","n","a","n ","a","n "]},"In some embodiments, one or more of the directors -may have multiple processor systems thereon and thus may be able to perform functions for multiple directors. In some embodiments, at least one of the directors -having multiple processor systems thereon may simultaneously perform the functions of at least two different types of directors (e.g., an IOM and a DA). Furthermore, in some embodiments, at least one of the directors -having multiple processor systems thereon may simultaneously perform the functions of at least one type of director and perform other processing with the other processing system. In addition, all or at least part of the global memory  may be provided on one or more of the directors -and shared with other ones of the directors -. In an embodiment, the features discussed in connection with the storage device  may be provided as one or more director boards having CPUs, memory (e.g., DRAM, etc.) and interfaces with Input\/Output (I\/O) modules, and in which multiple director boards may be networked together via a communications network, such as, for example, an internal Ethernet communications network, a serial rapid I\/O (SRIO) fabric and\/or Infiniband fabric (v3).",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIGS. 1 and 2"],"b":["100","100","110","100","120","100","120"]},"An instance is a single binary image of the OS that performs a specific set of operations. In an embodiment, there may be up to eight instances configured on a director board at any given time. A thread is a separately schedulable set of code or process of an instance. Threads may be co-operative and\/or preemptive, and may be scheduled by the OS. An instance may run on more than one core, that is, an instance may provide a symmetric multiprocessing (SMP) environment to threads running within the instance.","According to the system described herein, a thread may be provided that runs as a hypervisor within the storage system OS environment. As previously discussed, a hypervisor is a software implementation providing a software virtualization environment in which other software may run with the appearance of having full access to the underlying system hardware, but in which such access is actually under the complete control of the hypervisor. The hypervisor running as the OS thread may be called a container hypervisor. The container hypervisor may manage a virtual hardware environment for a guest operating system (Guest OS), and, in an embodiment, the container hypervisor may run multiple OS threads (e.g., 1 to N threads) within a single instance. The Guest OS is an operating system that may be loaded by a thread of the container hypervisor, and runs in the virtual environment provided by the container hypervisor. The Guest OS may also access real hardware devices attached to a director board using a virtual device provided by the container hypervisor or via a peripheral component interconnect (PCI) pass-through device\/driver. There may be multiple container hypervisors running within a single instance at the same time. There may also be multiple container hypervisors running within different instances on the same director board at the same time.","In , a hypervisor layer  is shown as including hypervisor-A  and hypervisor-B  that may be examples of container hypervisors in accordance with the system described herein. Each of the container hypervisors ,  may run as threads embedded within the storage system OS operating environment (the storage system OS ). The container hypervisor  is shown running as a thread tand may be running independently of the container hypervisor . The container hypervisor  is shown running two threads tand t. These threads may run independently of each other as well as the thread tof the container hypervisor . The independent operation of the threads tand tof the container hypervisor  is shown schematically with a dashed line. In each case, the threads t, tand tof the container hypervisors ,  may run as threads of one or more instances of the storage system OS . For example, in an embodiment, the container hypervisors ,  may be threads running as part of an Enginuity instance or a Linux instance. The container hypervisors ,  may be scheduled like any other thread and may be preempted and interrupted as well as started and stopped. Advantageously, since the container hypervisors ,  runs as threads within the storage system OS environment, physical resource sharing of the underlying hardware is already provided for according to the storage system OS scheduling.","According to an embodiment of the system described herein, a Guest OS  is loaded using the thread tof the container hypervisor-A  and, for example, runs an application in the virtual environment provided thereby. As shown, a Guest OS  may be loaded using independent threads t, tof the container hypervisor . As further discussed elsewhere herein, threads t, tand tmay all be run independently of each other. The ability to run a container hypervisor as a storage system OS thread provides that the storage system  may run with no performance penalty until the container hypervisor thread is enabled. Even when the hypervisor thread is enabled and running an application in a Guest OS, the performance impact may be controlled. Additionally, developments in physical hardware may be accommodated through a software development process that is decoupled from modifications to the hypervisor code. Accordingly, releases of new storage device code, hypervisor code and Guest OS, and applications code may all be realized in an independent manner.","In various embodiments, the container hypervisors ,  may each provide for one or more of the following features: boot a Guest OS; run the Guest OS as a storage system OS thread (e.g., Symm\/K); be scheduled, preemptable, etc.; reset the Guest OS without restarting the instance; allow the Guest OS to access storage devices (e.g., Symmetrix) using a Cut-through Device (CTD), as further discussed elsewhere herein; and allow the Guest OS to access the I\/O Modules using a PCI pass-through device.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["200","100","200","210","220","240","231","232","232","250","250","250","200","251","252","250","232"],"sub":"0 "},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5","b":["300","302","302","304","304","306","306"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 6","b":["350","352","352","354","354","356","356"]},"According to the system described herein, when the container hypervisor starts the Guest OS, the Guest OS may run in the context of the container hypervisor. The container hypervisor may access all of the Guest's memory while the Guest may only access the memory given to it by the container hypervisor. In order to avoid time-consuming calls that cause an exit from a VM (e.g., vmexit) as a result of certain Guest OS activities, virtual PCI devices may be used in connection with the container hypervisor. A virtual PCI device looks and behaves like normal PCI hardware to the Guest OS. Guest OS access to memory mapped I\/O (MMIO) space does not necessarily cause a vmexit, depending on the virtual PCI device code of the container hypervisor. To allow I\/O with the storage system (e.g., Symmetrix), a Cut-through Device (CTD) may be used that may be a virtual PCI device used in connection with the container hypervisor.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7","b":["400","400","400","410","411","413","400","415","405","400","425","420","416","417","418","421","422","423","416","400","405","401","426","426","426","427","430","431","432"],"i":["a","b"]},"According to another embodiment, by using a thread of a container hypervisor in the storage system OS environment (e.g., Enginuity running Symm\/K), it is possible for a Guest OS to operate in several modes. The container hypervisor thread may inherit the same number of CPU cores as that of the OS instance and may run as a single thread on those cores when active. However, since the container hypervisor is running as a thread, rather than being scheduled as an OS instance, as described elsewhere herein, other OS threads may also continue to run on other cores in the same SMP environment. The use of the OS scheduling algorithms (e.g., Symm\/K) for scheduling the threads of the container hypervisors thus provide the ability to schedule fractions of CPU time on multiple cores for the Guest OS's. Furthermore, it is possible for the container hypervisor to allocate fewer virtual cores than physical cores available to the instance, and allow the Guest OS to operate SMP on those cores while still allowing other OS threads to operate with full CPU core resources, and to adjust the CPU allocation between Guest OS's and other threads. In an embodiment, in a VMAX system from EMC Corporation of Hopkinton, Mass., the granularity of the CPU time scheduling according to the system described herein may be on the order of 500 microseconds or less.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 8","b":["500","540","551","552","500","510","520","530","531","532","540","551","552","531","532","531","532","511","512","510","510","531","532","540","551","552"],"sub":["0","1","2 "]},"The scheduling of fractional CPU time on the physical CPU cores ,  is shown schematically as fractions -and -of each of the CPU cores , . Each of the threads t, t, and tof the container hypervisors ,  may operate in an SMP regime on multiple ones of the cores ,  while allowing others of the threads to also operate with full CPU core resources. The system described herein provides for flexible control of physical CPU allocation between Guest OS's , ,  without causing one or more of the Guest OS's , ,  to become inactive due to resource overlaps. In this way, the Guest OS's , ,  may run based on the threads of the container hypervisors ,  using varying amounts of CPU time per CPU core in an SMP regime.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 9","b":["600","602","602","604","604","606","606","608"]},"After the step , processing proceeds to a step  where the first and second container hypervisors may share resources according to fractional resource sharing scheduled by the scheduler (Symm\/K) of the storage system OS and in connection with separate resource requirements of the first and second Guest OS's (and\/or an application of the first and second Guest OS's). It is noted that, in various embodiments, the fractional resource scheduling depicted in illustration  may be implemented according to systems like that shown in . One or more of the above-noted processing steps may be implemented via executable code stored on a non-transitory computer readable medium and executable by at least one processor according to an embodiment of the system described herein.","Various embodiments discussed herein may be combined with each other in appropriate combinations in connection with the system described herein. Additionally, in some instances, the order of steps in the flowcharts, flow diagrams and\/or described flow processing may be modified, where appropriate. Further, various aspects of the system described herein may be implemented using software, hardware, a combination of software and hardware and\/or other computer-implemented modules or devices having the described features and performing the described functions. Software implementations of the system described herein may include executable code that is stored in a computer readable medium and executed by one or more processors. The computer readable medium may include a computer hard drive, ROM, RAM, flash memory, portable computer storage media such as a CD-ROM, a DVD-ROM, a flash drive and\/or other drive with, for example, a universal serial bus (USB) interface, and\/or any other appropriate tangible or non-transitory computer readable medium or computer memory on which executable code may be stored and executed by a processor. The system described herein may be used in connection with any appropriate operating system.","Other embodiments of the invention will be apparent to those skilled in the art from a consideration of the specification or practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only, with the true scope and spirit of the invention being indicated by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the system described herein are explained with reference to the several figures of the drawings, which are briefly described as follows.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
