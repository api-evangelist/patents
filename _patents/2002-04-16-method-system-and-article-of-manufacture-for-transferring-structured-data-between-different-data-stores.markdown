---
title: Method, system, and article of manufacture for transferring structured data between different data stores
abstract: Provided is a method, system, and an article of manufacture for transferring structured data between different data stores. Data stores include a type identifier with every instance of a structured data type. A typeID-typeName map within each data store includes the mapping between the type identifiers and the type names of the structured data types. The typeID-typeName map is sent as metadata while transferring data from a source database to a target database. An application replaces the type identifiers of the source database with the corresponding type identifiers of the target database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07136872&OS=07136872&RS=07136872
owner: International Business Machines Corporation
number: 07136872
owner_city: Armonk
owner_country: US
publication_date: 20020416
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE PREFERRED EMBODIMENTS","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Additional Implementation Details"],"p":["1. Field of the Invention","The present invention relates to a method, system, and an article of manufacture for transferring structured data between different data stores.","2. Description of the Related Art","A database management system, such as a relational database management system, may store data in tables comprised of rows and columns. The types of data in the columns of a table are defined when the table is created. In some database management systems the types of data may be limited to instances of a base data type, such as instances of an integer data type, a real data type, a string data type, a character data type etc.","In other database management systems, values within the columns of a table are not limited to instances of a base data type but can be instances of user-defined structured data types. A structured data type is a data type made up of a collection of one or more attributes, where each attribute may be of a base data type or a structured data type. A type name identifies a structured data type. Subtypes may extend an existing structured data type reusing all of the attributes of the structured data type and contain additional attributes specific to the subtype. For example, a structured data type with the type name Person might contain attributes for Name, Age, and Address. A subtype of Person might be named Employee, where the subtype Employee contains the attributes Name, Age, and Address and in addition contains attributes for SerialNumber, Salary, and BusinessUnit. An instance of a structured data type includes an identifier, where the identifier identifies the structured data type in the database management system where the structured data type was created.","If a column is of a particular structured data type, the values within the column can be instances of either the structured data type or of any subtype of the structured data type. Further details of structured data types in database management systems are described in the publication entitled \u201cIBM DB2 Universal Database: Application Development Guide, Version 7\u201d (copyright, IBM 2001), which publication is incorporated herein by reference in its entirety.","Database management systems may transfer data from a source database to a target database. In prior art database management systems, when values within a column are instances of a well-known base data type, the target database can interpret the transferred data. However, if the values within a column are instances of user-defined structured data types, in prior art database management systems the target database cannot interpret the transferred data.","Hence, there is a need in the art to provide techniques for transferring structured data between database management systems.","Provided are a method, system, and article of manufacture for transforming structured data, wherein each structured data is an instance of one of a plurality of structured data types and wherein each structured data type has a type name. A first mapping of type names to first identifiers is received, wherein the first identifiers uniquely identify the structured data types. Further received is the structured data wherein the structured data has the first identifiers. A second mapping of the type names to second identifiers is received, wherein the second identifiers uniquely identify the structured data types. The structured data is modified by first mapping the first identifiers in the structured data to corresponding type names from the first mapping. Next, the corresponding type names are mapped to the second identifiers from the second mapping. Finally, the first identifiers in the structured data are substituted with the second identifiers.","In further implementations, the first mapping is provided in a source, wherein the first identifiers uniquely identify the structured data types within the source. The second mapping is provided in a target, wherein the second identifiers uniquely identify the structured data types within the target. The modified structured data is sent to the target after replacing the first identifiers. In one implementation, the source and target are databases.","Further implementations provide a method in a database for processing structured data, wherein each structured data is an instance of one of a plurality of structured data types. The method comprises providing a mapping between structured data types and identifiers within the database, wherein the identifiers uniquely identify structured data types within the database and in response to a request to the database for the mapping from an application, sending the mapping to the application. In one implementation, in response to a request to the database for the structured data, the database sends the structured data including identifiers to the application. In another implementation, the database receives the structured data including identifiers from the application, wherein each received identifier is valid within the database.","The implementations enable data stores to exchange structured data and interpret the exchanged structured data without an intermediary inspecting the contents of the data, i.e. a mapping is sufficient to interpret the exchanged structured data. The implementations can be used for data replication or for exporting data from databases.","In the following description, reference is made to the accompanying drawings which form a part hereof and which illustrate several implementations. It is understood that other implementations may be utilized and structural and operational changes may be made without departing from the scope of the present implementations.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","102","104","106","100","104","106","100","104","106","107","107","100","104","106"],"i":["a","b "]},"Computational device  comprises a source database , and computational device  comprises a target database . The source database  and the target database , may comprise any database management system known in the art, such as an object-relational database, a hierarchical database, an object-oriented database etc.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["108","200","202","200","204","204","206","206"],"i":"i "},"Each structured data includes a source type identifier , where the source type identifier  uniquely identifies the structured data type corresponding to the structured data , within the source database . The structured data does not include the type name  to conserve space in the source database . Otherwise, including a potentially long character string, where the long character string describes the structured data type corresponding to structured data , with each structured data would greatly increase the size of the source database . The source type identifier  corresponding to a structured data type with type name  is specific to the source database  and is a unique identifier within the source database . In certain situations, another database management system may not be able to interpret the source type identifier  used in the source database . Furthermore, since structured data can be nested, a nested structured type instance contains identifiers that identify the nested type.","The source type map  stores a mapping of the source type identifiers  to type names  within the source database . Although, the source type identifiers  and type names  have a unique mapping to each other in the source database , the unique mapping may be invalid in any other database.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 2"],"b":["110","110","300","302","300","304","304","308","308","304","110","302","308","306","110","102","108","110"],"i":"i "},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["102","110","102","102","110","102","110","102","102","102"]},"The client application  fetches (at block ) the source type map  from the source database . The client application  inserts (at block ) the source type map  to the target database  for the duration of a session. Control proceeds to block , where the client application  fetches a structured data from the source database . In alternative implementations, the client application  may fetch a stream of data, where the stream of data comprises a plurality of structured data . In some implementations, the fetching may be done by a Structured Query Language (SQL) \u201cselect\u201d statement.","The next series of blocks  to  is part of a larger block , where the logic of block  performs insert processing in the target database . Insert processing in the target database  inserts the structured data in an appropriate manner within the target database . Blocks  to  perform various steps of the insert processing in the target database . The substitution of target type identifiers in the structured type data is an action that is part of insert processing in the target database. Among other reasons, insert processing is performed within the target database because the target database cannot always trust the data received by the target database.","As part of the insert processing, the client application  inspects (at block ) the source type identifier  within the fetched structured data . Control proceeds to block , where the client application  looks up the type name  corresponding to the source type identifier  in the source type map . Control proceeds to block , where the client application , uses the type name  to lookup the corresponding target type identifier  in the target database  by inspecting the target type map . The client application  may lookup the corresponding target type identifier  by requesting the target database  to send the target type map . The typename  and the typename  in the source database  and the target database  are the same in certain implementations. The client application  modifies (at block ) the fetched structured data by replacing the source type identifier  with the corresponding target type identifier  of the target database , and creates a modified structured data . Control proceeds to block , where the client application  inserts the modified structured data into the target database table  in the target database . In one implementation, at block , the client application  uses an SQL \u201cinsert\u201d statement to insert the data to the target database . At the conclusion of block  insert processing in the target database is completed.","Control proceeds to block , where the client application  determines if any more structured data  is to be fetched from the source database . If yes, control proceeds to block , and the logic of blocks  to  are repeated. If not, control proceeds to block  where the client application  discards the source type map  and terminates the session. Subsequently the process stops (at block ).",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["102","108","110","102","404","406","108","204","202","108","202","204","102"],"i":["i ","i "]},"Similarly, in support of the logic executed in block , the target database  may in response to a request for the target type map  from the client application , send the target type map  to the client application . In support of the logic executed in block , the target application  may receive the modified structured data from the client application .",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 4","FIG. 3","FIG. 3","FIG. 4","FIG. 3","FIG. 4"],"b":["202","1","2","3","4","0","1","2","3","302","1","2","3","4","0","1","2","3","204","200","1","1","204","404","102","204","204","1","502","102","1","2","2","1","412","204","304","1","504","102","102","304","300"],"i":["i ","i","i","i ","i","i ","i "]},"The implementations store type identifiers with structured data and enable data stores to exchange structured data and interpret the exchanged structured data. The length of type identifiers within the data stores are small when compared to the length of the type names of the structured data types. Hence, the size of the data stores do not increase significantly when the structured data includes type identifiers. The implementations may be used for data replication, where a client application gets newly fetched data from a source database, modifies the newly fetched data and saves the data to a target database. The implementations can be also be used for exporting structured data from within a data store to a target database on a data store.","The described techniques for transferring data between data stores may be implemented as a method, apparatus or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof. The term \u201carticle of manufacture\u201d as used herein refers to code or logic implemented in hardware logic (e.g., an integrated circuit chip, Programmable Gate Array (PGA), Application Specific Integrated Circuit (ASIC), etc.) or a computer readable medium (e.g., magnetic storage medium, such as hard disk drives, floppy disks, tape), optical storage (e.g., CD-ROMs, optical disks, etc.), volatile and non-volatile memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, DRAMs, SRAMs, firmware, programmable logic, etc.). Code in the computer readable medium is accessed and executed by a processor. The code in which implementations are made may further be accessible through a transmission media or from a file server over a network. In such cases, the article of manufacture in which the code is implemented may comprise a transmission media, such as a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. Of course, those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the implementations, and that the article of manufacture may comprise any information bearing medium known in the art.","The described implementations show the client application, the source database, and the target database in three different computational devices. In alternative implementations the client application, the source database and the target database may be in a single computational device or may be distributed in a plurality of computational devices. The client application may also be part of either the target database or the source database. Furthermore, the source and target databases need not be instances of the same database management system. The source database and target database must in such a case expose their respective application programming interfaces and metadata formats to the client application.","The client application connects to a single target database in the described implementations. In alternative implementations, the client application may connect to a plurality of target databases, where the plurality of target databases comprise one or more computational devices. When the client application connects to a plurality of target databases the client application does not have to perform identifier substitution while sending data to each target. The insert process corresponding to a target database performs the identifier substitution. The client behavior does not depend on the target database or the target type map. Also by deferring identifier substitution to the insert processing on the target database, the functions of the client application are simplified.","The implementations of  describe specific operations occurring in a particular order. Further, the steps may be performed in parallel as well as sequentially. In alternative embodiments, certain of the logic operations may be performed in a different order, modified or removed and still implement preferred embodiments of the present invention. Morever, steps may be added to the above described logic and still conform to the preferred embodiments. In further implementations, integrity checks may be performed on structured data before inserting the structured data into the target database in a manner known in the art. Also, the conversion of byte-orders and codepages are not described in the implementations and are performed in a manner known in the art.","Therefore, the foregoing description of the implementations has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
