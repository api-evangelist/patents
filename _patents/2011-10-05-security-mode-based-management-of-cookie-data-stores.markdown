---
title: Security mode based management of cookie data stores
abstract: The subject technology provides a cookie data store with a unique identifier that is implemented for one or more web clients. Each browser can have different cookie storage schemes and limited access to cookie data. The cookie data store ID unifies disparate cookie storage schemes in one or more different web clients in order to perform one or more different operations on one or more cookie data stores in a particular web client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08200833&OS=08200833&RS=08200833
owner: Google Inc.
number: 08200833
owner_city: Mountain View
owner_country: US
publication_date: 20111005
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["In a given web client (e.g., a web browser), web content can be displayed in the web client. For example, web content can include a mixture of text and graphics (e.g., images or photos, etc.). The web client can maintain one or more cookies to store different data associated with a browsing session(s) on the web client.","The subject technology provides for determining a cookie data store assigned to a tab in a window frame of a web client. For a session associated with the tab in the window frame of the web client, the subject technology determines a process identifier of the window frame. The subject technology generates a first string based on the process identifier of the window frame. The subject technology determines a security mode of the tab. Next, the subject technology generates a second string based on the security mode of the tab in which the second string indicates the security mode of the tab. The subject technology then assigns the first and second strings as an identifier to the cookie data store assigned to the tab.","The subject technology further provides a system for providing access to a cookie data store. The system includes memory, one or more processors, and one or more modules stored in memory and configured for execution by the one or more processors. The system includes a browser module configured to provide an identifier for a cookie data store of a web client. The system further includes a cookies module configured to determine the cookie data store associated with the identifier from the browser module, and perform one or more operations on the cookie data store based on the identifier.","Additionally, the subject technology provides, for a session associated with a tab in a window frame of a web client, determining a process identifier of the window frame. The subject technology generates a first string based on the process identifier of the window frame. A security mode of the tab is then determined. The subject technology generates a second string based on the security mode of the tab in which the second string indicates the security mode of the tab. The subject technology assigns the first and second strings as an identifier to the cookie data store assigned to the tab. Further, one or more different operations are performed on the cookie data store based on the identifier to the cookie data store.","It is understood that other configurations of the subject technology will become readily apparent to those skilled in the art from the following detailed description, wherein various configurations of the subject technology are shown and described by way of illustration. As will be realized, the subject technology is capable of other and different configurations and its several details are capable of modification in various other respects, all without departing from the scope of the subject technology. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.","The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology may be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a thorough understanding of the subject technology. However, it will be clear and apparent to those skilled in the art that the subject technology is not limited to the specific details set forth herein and may be practiced without these specific details. In some instances, well-known structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology.","The subject technology provides a extensions cookies API for accessing cookies associated with one or more sessions in different web browsers. In particular, the disclosed API will provide a way of accessing cookies in a cookie data store of a browser without requiring network connectivity and the use of HTTP requests. Typically, a browser will implement a proprietary scheme for managing and accessing cookies. Developers therefore have to utilize different browser APIs in order to programmatically access cookies in different browsers. The disclosed cookies API will provide unified API calls to access cookies in a cookie data store irrespective of the browser hosting a session. A developer therefore can utilize the unified API calls in the same manner for any browser in which the cookies API is implemented.","Thus, the cookies API described herein creates a concept of a \u201ccookie data store with a unique identifier\u201d that is implemented for multiple browsers. Each browser can have different cookie storage schemes and with limited API access to those schemes. In that sense, the \u201ccookie data store ID\u201d concept in the cookies API unifies what were previously disparate cookie storage schemes in the different browsers. For instance, a first example web browser can provide a cookie management scheme based on profiles and whether the browser is in a private browsing mode. In contrast, a second example web browser can utilize one cookie store for all cookies (and irrespective of the browsing mode). Further, a third example web browser can implement different browsing modes and sessions and, as a result, have no clear identification of \u201ccookie stores\u201d whatsoever.","Moreover, some browser APIs do not provide a user friendly scheme for tracking multiple sessions within a browser in which each session could utilize its own cookie data store. The subject technology further provides an easier way to determine a corresponding cookie data store of a session in a browser. Depending on the browsing mode of the browser, different security modes could be utilized by the browser. For instance, each tab for a respective session for a web browser can run in a protected or unprotected security mode. The web browser can further provide several security zones corresponding to different levels of trust that grant different permissions to a corresponding session in a tab. Thus, each window frame of the web browser can have multiple tabs and each tab can either be in protected or unprotected mode and\/or in a particular security zone. To implement this security model, the web browser maintains separate cookie data stores depending on whether the tab instance is in protected or unprotected mode and\/or based on the security zone assigned to the session. As a result of the multiplicity of cookie data stores utilized for managing different sessions, developers could have difficulty in determining a cookie data store assigned to a session for a corresponding tab.","To address the aforementioned issues, the subject technology utilizes the aforementioned cookies API to assign a unique identifier to a tab that corresponds to a cookie data store utilized by the tab. In one example, a process identifier of a window frame is determined to generate a first string. The security mode of the tab (e.g., protected or unprotected mode) is then determined. In an instance in which the security mode is a protected mode, a second string is generated and appended to the first string to form a unique ID for the cookie data store assigned to the tab. The unique ID can then be subsequently used to query for a specific cookie in the cookie data store assigned to the tab. Other operations can be performed using the unique ID. For instance, the cookies API of the subject technology provides the following additional functions: 1) get all cookies in a cookie data store; 2) get all cookie data stores; 3) setting a cookie in a cookie data store; and 4) deleting a cookie in a cookie data store.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","100"]},"The process  at  receives an identifier for a cookie data store of a web client. In some configurations, the identifier can be associated with a cookie data store that includes one or more cookies for the web client. Each cookie from the one or more cookies contains arbitrary data that can include session data. The identifier in some configurations can indicate a first window type for one or more windows of the web client. For instance, the first window type indicates a browsing mode of the web client. The browsing mode is a private browsing mode in one example. The private browsing mode can be implemented differently depending on the web client. In one example, the private browsing mode for the web client can implement one or more privacy features so that the web client does not store browsing information for selected browsing sessions. Consequently, the web client can utilize a different cookie data store when the web client is in a private browsing mode than when in a non-private browsing mode.","At , the process  determines the cookie data store associated with the identifier. The process  at  then performs one or more operations on the cookie data store based on the identifier. The one or more operations do not require one or more Hypertext Transfer Protocol (HTTP) requests to complete the one or more operations in some configurations. By way of example, the one or more operations can includes an operation to retrieve information for a single cookie, an operation to retrieve all cookies from the cookie data store, an operation to store a cookie in the cookie data store, an operation to delete a cookie in the cookie data store, or an operation to get all cookie data stores for the web client. After performing the one or more operations, the process  ends.","Additionally, the process  can receive a second identifier for a second cookie data store. The process  can determine the second cookie data store associated with the second identifier and repeat the operation described above at . The process  can then perform any of the aforementioned operations discussed at . In this manner, the process  can manage one or more different cookie data stores based on different identifiers for the web client.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","100"]},"For a session associated with the tab in the window frame of the web client, the process  at  determines a process identifier of the window frame. The process at  generates a first string based on the process identifier of the window frame. In some embodiments, the tab in the window frame includes a second process identifier. The second process identifier is a child process of a parent process associated with process identifier of the window frame in some configurations. The child process of the tab in some configurations can be spawned or forked from the parent process associated with the window frame. Additionally, each tab in the window frame of the web client can include a respective process identifier (e.g., a respective child process of the parent process of the window frame).","At , the process  determines a security mode of the tab. The security mode is one of a protected or unprotected mode in some configurations. In some configurations, a different cookie data store is utilized based on the security mode. A respective session can be associated to each security mode so that different sessions are provided for each security mode. The security mode indicates an integrity level of the tab in which the integrity level is one of a low integrity level, a medium integrity level, and a high integrity level. The integrity level can be understood as a level of trust granted to a corresponding tab based on its security mode. In one example, the protected mode is associated with the low integrity level. The protected mode disallows write access to one or more system files in some configurations. The protected mode, however, allows access to a corresponding cookie data store associated with the protected mode. Therefore, for a given tab in protected mode, the tab can have access to its corresponding cookie data store but is disallowed access to system files. Further, the unprotected mode is associated with the medium integrity level that grants more privileges to a corresponding tab (e.g., in comparison to a low integrity level of a tab in protected mode).","The process  at  generates a second string based on the security mode of the tab. The second string indicates the security mode of the tab in some configurations. The process  continues to  to assign the first and second strings as an identifier to the cookie data store assigned to the tab. In one example, the process  can generate the identifier by processing the first and second strings (e.g., concatenation or another string operation). The identifier indicates a first window type in some configurations. For example, the first window type can indicate a browsing mode of the web client such as a private browsing mode. Further, the process  can then access the cookie data store based on the identifier. For instance, the process  can access the cookie data store by performing one or more different operations similar to those operations described in . In some configurations, the one or more operations do not require network connectivity. Therefore, the one or more operations can forgo a requirement for utilizing an HTTP request and response communication flow in order to access one or more cookies in the cookie data store. By way of example, the one or more operations includes an operation to retrieve information for a single cookie, an operation to retrieve all cookies from the cookie data store, an operation to store a cookie in the cookie data store, an operation to delete a cookie in the cookie data store, and\/or an operation to get all cookie data stores of the web client. Other operations can be provided and still be within the scope of the subject technology. The process  then ends.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 3","FIGS. 1 and 2"],"b":["305","305","305"]},"As shown in , the system  includes several modules for providing different functionality. The system  is configured to include a browser module  and a cookies module . The browser module  is configured to provide an identifier associated with a cookie data store of a web client. The cookies module  is configured to determine the cookie data store associated with the identifier from the browser module , and perform one or more operations on the cookie data store based on the identifier. The one or more operations include at least one of a first operation to retrieve information for a single cookie, a second operation to retrieve all cookies from the cookie data store, a third operation to store a cookie in the cookie data store, a fourth operation to delete a cookie in the cookie data store, or a fifth operation to get all cookie data stores for the web client.","As further shown in , each of the aforementioned modules can be configured to communicate between each other. For instance, different data, messages, API calls and returns can be passed between the different modules in the system .","Many of the above-described features and applications are implemented as software processes that are specified as a set of instructions recorded on a machine readable storage medium (also referred to as computer readable medium). When these instructions are executed by one or more processing unit(s) (e.g., one or more processors, cores of processors, or other processing units), they cause the processing unit(s) to perform the actions indicated in the instructions. Examples of machine readable media include, but are not limited to, CD-ROMs, flash drives, RAM chips, hard drives, EPROMs, etc. The machine readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.","In this specification, the term \u201csoftware\u201d is meant to include firmware residing in read-only memory and\/or applications stored in magnetic storage, which can be read into memory for processing by a processor. Also, in some implementations, multiple software components can be implemented as sub-parts of a larger program while remaining distinct software components. In some implementations, multiple software subject components can also be implemented as separate programs. Finally, any combination of separate programs that together implement a software component(s) described here is within the scope of the subject technology. In some implementations, the software programs, when installed to operate on one or more systems, define one or more specific machine implementations that execute and perform the operations of the software programs.","A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","Some configurations are implemented as software processes that include one or more application programming interfaces (APIs) in an environment with calling program code interacting with other program code being called through the one or more interfaces. Various function calls, messages or other types of invocations, which can include various kinds of parameters, can be transferred via the APIs between the calling program and the code being called. In addition, an API can provide the calling program code the ability to use data types or classes defined in the API and implemented in the called program code.","One or more APIs may be used in some configurations. An API is an interface implemented by a program code component or hardware component (\u201cAPI implementing component\u201d) that allows a different program code component or hardware component (\u201cAPI calling component\u201d) to access and use one or more functions, methods, procedures, data structures, classes, and\/or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.","An API allows a developer of an API calling component (that could be a third party developer) to utilize specified features provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computing system or program library provides to support requests for services from an application. An operating system (OS) can have multiple APIs to allow applications running on the OS to call one or more of those APIs, and a service (such as a program library) can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.","In some configurations the API implementing component may provide more than one API, each providing a different view of or with different aspects that access different aspects of the functionality implemented by the API implementing component. For example, one API of an API implementing component can provide a first set of functions and can be exposed to third party developers, and another API of the API implementing component can be hidden (not exposed) and provide a subset of the first set of functions and also provide another set of functions, such as testing or debugging functions which are not in the first set of functions. In other configurations the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.","An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example, an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations (embodied for example by function or method calls) exposed by the API and passes data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call (e.g., how to invoke the API call and what the API call does), the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling (API calling component) and an API implementing component. Transferring the API calls may include issuing, initiating, invoking, calling, receiving, returning, or responding to the function calls or messages. In other words, transferring can describe actions by either of the API calling component or the API implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant, key, data structure, object, object class, variable, data type, pointer, array, list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.","Furthermore, data types or classes may be provided by the API and implemented by the API implementing component. The API calling component therefore can declare variables, use pointers to, use or instantiate constant values of such types or classes by using definitions provided in the API.","Generally, an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example, the API implementing component and the API calling component may each be any one of an operating system, a library, a device driver, an API, an application program, or other module (it should be understood that the API implementing component and the API calling component may be the same or different type of module from each other). API implementing components may in some cases be embodied at least in part in firmware, microcode, or other hardware logic. In some configurations, an API may allow a client program to use the services provided by a Software Development Kit (SDK) library. In other configurations an application or other client program may use an API provided by an Application Framework. In these configurations the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these configurations provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations, an API call can report to an application the capabilities or state of a hardware device, including those related to aspects such as input capabilities and state, output capabilities and state, processing capability, power state, storage capacity and state, communications capability, etc., and the API may be implemented in part by firmware, microcode, or other low level logic that executes in part on the hardware component.","The API calling component may be a local component (i.e., on the same data processing system as the API implementing component) or a remote component (i.e., on a different data processing system from the API-implementing component) that communicates with the API-implementing component through the API over a network. It should be understood that an API implementing component may also act as an API calling component (i.e., it may make API calls to an API exposed by a different API implementing component) and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.","The API can allow multiple API calling components written in different programming languages to communicate with the API implementing component (thus the API may include features for translating calls and returns between the API implementing component and the API calling component). The API however can be implemented in terms of a specific programming language. An API calling component can, in one configuration, call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug-in provider and another set of APIs from another provider (e.g. the provider of a software library) or creator of the another set of APIs.","The following description describes an example API architecture in which configurations of the subject technology can be implemented.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 4","FIG. 4"],"b":["400","415","410","410","405","410","405","410","415","410","415","410","405"]},"It will be appreciated that the API implementing component  can include additional functions, methods, classes, data structures, and\/or other features that are not specified through the API  and are not available to the API calling component . It should be understood that the API calling component  can be on the same system as the API implementing component  or can be located remotely and accesses the API implementing component  using the API  over a network. While  illustrates a single API calling component  interacting with the API , it should be understood that other API calling components, which can be written in different languages (or the same language) than the API calling component , can use the API .","The API implementing component , the API , and the API calling component  can be stored in a machine-readable medium, which includes any mechanism for storing information in a form readable by a machine (e.g., a computer or other data processing system). For example, a machine-readable medium includes magnetic disks, optical disks, random access memory, read only memory, flash memory devices, etc.","The following description describes an example system in which aspects of the subject technology can be implemented.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5","b":["500","500","500","505","510","515","520","525","530","535","540"]},"The bus  collectively represents all system, peripheral, and chipset buses that communicatively connect the numerous internal devices of the system . For instance, the bus  communicatively connects the processing unit(s)  with the read-only memory , the system memory , and the storage device .","From these various memory units, the processing unit(s)  retrieves instructions to execute and data to process in order to execute the processes of the subject technology. The processing unit(s) can be a single processor or a multi-core processor in different implementations.","The read-only-memory (ROM)  stores static data and instructions that are needed by the processing unit(s)  and other modules of the system . The storage device , on the other hand, is a read-and-write memory device. This device is a non-volatile memory unit that stores instructions and data even when the system  is off. Some implementations of the subject technology use a mass-storage device (such as a magnetic or optical disk and its corresponding disk drive) as the storage device .","Other implementations use a removable storage device (such as a flash drive, a floppy disk, and its corresponding disk drive) as the storage device . Like the storage device , the system memory  is a read-and-write memory device. However, unlike storage device , the system memory  is a volatile read-and-write memory, such a random access memory. The system memory  stores some of the instructions and data that the processor needs at runtime. In some implementations, the subject technology's processes are stored in the system memory , the storage device , and\/or the read-only memory . For example, the various memory units include instructions for processing multimedia items in accordance with some implementations. From these various memory units, the processing unit(s)  retrieves instructions to execute and data to process in order to execute the processes of some implementations.","The bus  also connects to the optional input and output interfaces  and . The optional input interface  enables the user to communicate information and select commands to the system. The optional input interface  can interface with alphanumeric keyboards and pointing devices (also called \u201ccursor control devices\u201d). The optional output interface  can provide display images generated by the system . The optional output interface  can interface with printers and display devices, such as cathode ray tubes (CRT) or liquid crystal displays (LCD). Some implementations can interface with devices such as a touchscreen that functions as both input and output devices.","Finally, as shown in , bus  also couples system  to a network interface  through a network adapter (not shown). In this manner, the computer can be a part of a network of computers (such as a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), or an Intranet, or an interconnected network of networks, such as the Internet. Any or all components of system  can be used in conjunction with the subject technology.","These functions described above can be implemented in digital electronic circuitry, in computer software, firmware or hardware. The techniques can be implemented using one or more computer program products. Programmable processors and computers can be included in or packaged as mobile devices. The processes and logic flows can be performed by one or more programmable processors and by one or more programmable logic circuitry. General and special purpose computing devices and storage devices can be interconnected through communication networks.","Some implementations include electronic components, such as microprocessors, storage and memory that store computer program instructions in a machine-readable or computer-readable medium (alternatively referred to as computer-readable storage media, machine-readable media, or machine-readable storage media). Some examples of such computer-readable media include RAM, ROM, read-only compact discs (CD-ROM), recordable compact discs (CD-R), rewritable compact discs (CD-RW), read-only digital versatile discs (e.g., DVD-ROM, dual-layer DVD-ROM), a variety of recordable\/rewritable DVDs (e.g., DVD-RAM, DVD-RW, DVD+RW, etc.), flash memory (e.g., SD cards, mini-SD cards, micro-SD cards, etc.), magnetic and\/or solid state hard drives, read-only and recordable Blu-Ray\u00ae discs, ultra density optical discs, any other optical or magnetic media, and floppy disks. The computer-readable media can store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code, such as is produced by a compiler, and files including higher-level code that are executed by a computer, an electronic component, or a microprocessor using an interpreter.","While the above discussion primarily refers to microprocessor or multi-core processors that execute software, some implementations are performed by one or more integrated circuits, such as application specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs). In some implementations, such integrated circuits execute instructions that are stored on the circuit itself.","As used in this specification and any claims of this application, the terms \u201ccomputer\u201d, \u201cserver\u201d, \u201cprocessor\u201d, and \u201cmemory\u201d all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification, the terms display or displaying means displaying on an electronic device. As used in this specification and any claims of this application, the terms \u201ccomputer readable medium\u201d and \u201ccomputer readable media\u201d are entirely restricted to tangible, physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals, wired download signals, and any other ephemeral signals.","To provide for interaction with a user, implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.","Configurations of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some configurations, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.","It is understood that any specific order or hierarchy of steps in the processes disclosed is an illustration of example approaches. Based upon design preferences, it is understood that the specific order or hierarchy of steps in the processes can be rearranged, or that all illustrated steps be performed. Some of the steps can be performed simultaneously. For example, in certain circumstances, multitasking and parallel processing can be advantageous. Moreover, the separation of various system components in the configurations described above should not be understood as requiring such separation in all configurations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","The previous description is provided to enable any person skilled in the art to practice the various aspects described herein. Various modifications to these aspects will be readily apparent to those skilled in the art, and the generic principles defined herein can be applied to other aspects. Thus, the claims are not intended to be limited to the aspects shown herein, but is to be accorded the full scope consistent with the language claims, wherein reference to an element in the singular is not intended to mean \u201cone and only one\u201d unless specifically so stated, but rather \u201cone or more.\u201d Unless specifically stated otherwise, the term \u201csome\u201d refers to one or more. Pronouns in the masculine (e.g., his) include the feminine and neuter gender (e.g., her and its) and vice versa. Headings and subheadings, if any, are used for convenience only and do not limit the subject technology.","A phrase such as an \u201caspect\u201d does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect can apply to all configurations, or one or more configurations. A phrase such as an aspect can refer to one or more aspects and vice versa. A phrase such as a \u201cconfiguration\u201d does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration can apply to all configurations, or one or more configurations. A phrase such as a configuration can refer to one or more configurations and vice versa.","The word \u201cexample\u201d is used herein to mean \u201cserving as an example or illustration.\u201d Any aspect or design described herein as \u201cexample\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs.","All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover, nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features of the subject technology are set forth in the appended claims. However, for purpose of explanation, several configurations of the subject technology are set forth in the following figures.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
