---
title: Client device using a web browser to control a periphery device via a printer
abstract: A device control system has a terminal  with a web browser , and a printer  that controls a connected device. The terminal  calls an object that controls a device and is instantiated by the device API  to support the device, and sends a request to the printer , by the web application ; and the printer  executes a device control script  that controls the device, receives requests sent through the device API , and controls the device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09052853&OS=09052853&RS=09052853
owner: Seiko Epson Corporation
number: 09052853
owner_city: Tokyo
owner_country: JP
publication_date: 20131224
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","CITATION LIST","Patent Literature","SUMMARY OF INVENTION","Technical Problem","Solution to Problem","DESCRIPTION OF EMBODIMENTS","EXAMPLE"],"p":["The present invention relates to a device control system that controls a device, a printer, and a control method of the device control system.","A device (such as a computer) used as a controller for controlling devices is conventionally part of a system that controls devices such as a keyboard and barcode scanner by means of a terminal connected to a network.",{"@attributes":{"id":"p-0004","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":"[PTL 1] JP-A-2004-152256"}},"However, there is also a need to use devices such as above by means of a simple configuration.","The present invention is directed to the foregoing problem, and an object of the invention is to provide a device control system, a printer, and a control method of a device control system that can control devices by a terminal connected to a network.","To achieve the foregoing object, a device control system according to the invention has a device; a device control device including a connection unit configured to connect to the device, and a device control unit configured to control the device connected to the connection unit; and a terminal that runs a web browser executing a device application programming interface that connects to the device control device, displays a web application, and controls the device.","The invention enables controlling a device connected to a device control device through the web browser of a terminal.","In the invention, the device application programming interface has an object that supports the device; and the web application calls the object and sends a request to the device control device.","In another aspect of the invention, the device control device executes a device control script that controls the device; and the device control script connects to the object, receives the request sent by the terminal, and controls the device connected to the connection unit.","In another aspect of the invention, the device control script has a device connection object that sends and receives data with the device, and a client connection object that sends data to the device API.","In another aspect of the invention, the request is a start control request specifying the device connected to the device control device and instructing starting control of the device; the command is a start control command instructing starting control of the device; and when the terminal sends the start control request to the device control device, the device control device sends the start control command to the device specified by the start control request, and enables control of the device by the terminal.","Another aspect of the invention also has a second terminal running a web browser that executes a second device application programming interface that connects to the device control device, displays a second web application, and controls the device; the second the device application programming interface having a second object that supports the device.","In another aspect of the invention, when the device can be controlled by the terminal, the device control device exclusively locks the device, and if the second web application calls the second object and sends a second request to the device control device, does not allow control of the device in the second request.","In another aspect of the invention, if the second terminal sends the second request to the device control device when the device can be controlled by the terminal, the device control device sends a report indicating the device is busy to the second terminal.","In another aspect of the invention, the device is a printer configured to print; and if the second terminal sends the second request to the device control device when the printer can be controlled by the terminal, the device control device enables the second terminal to control the printer by the device control script based on the second request.","In another aspect of the invention, the web application of the terminal calls the object and sends a stop control request specifying the device and instructing ending control of the device to the device control device; and when the terminal sends the stop control request to the device control device, the device control device sends a second command instructing stopping control by the device control script to the device specified by the stop control request, and stops control of the device by the terminal.","In another aspect of the invention, when the second terminal sends the second request to the device control device after the device control device stops control of the device by the terminal, the device control device enables control by the second terminal of the device by the device control script based on the second request.","In another aspect of the invention, the device application programming interface detects connection of the object and the device control script of the device control device.","In another aspect of the invention, the object calls an event contained in the device control script.","In another aspect of the invention, the device is a display configured to display content; the request is a display request that specifies the display and requests displaying content on the display; and when the terminal sends the display request to the device control device, the device control device sends a display command requesting display by the device control script to the display specified by the display request.","In another aspect of the invention, the display request requests displaying time on the display.","In another aspect of the invention, the request is a registration request that specifies the device and requests registering image data in the device; and when the terminal sends the registration request to the device control device, the device control device sends a registration command instructing registering the image by the device control script to the device specified by the registration request.","The terminal also sends the image data to the device control device; and the device control script converts the image data to the raster image data.","The request is also an encryption request that specifies the device, and instructs whether or not to encrypt data sent and received between the device and the terminal.","Another aspect of the invention is a printer including: a connection unit configured to connect to a device; a device control unit configured to execute a device control script that controls a device, and to control the device connected to the connection unit; and a print unit configured to print.","Another aspect of the invention is a control method of a device control system, including: a terminal that runs a web browser, a device, and a device control device configured to connect to the device; calling an object supporting the device by a web application that runs on the web browser; sending a request to the device control device; executing a device control script that controls the device by the device control device; sending to the device a command that controls the device by the device control script based on the request received by the device control device; and establishing control of the device by the terminal.","The request is a start control request specifying the device connected to the device control device and instructing starting control of the device; and when the terminal sends the start control request to the device control device, the device control device sends the control command to the device, and starts control of the device by the terminal.","A preferred embodiment of the invention is described below with reference to the accompanying figures.",{"@attributes":{"id":"p-0221","num":"0220"},"figref":"FIG. 1","b":["100","2"]},"The device control system  includes the application server , a terminal , and a printer  (intelligent printer). In this device control system , the application server , terminal , and printer  are connected over a communication network. In the example shown in , the device control system  has a wireless LAN access point , and the application server , printer , and wireless LAN access point  are connected by a wired LAN. The wireless LAN access point  connects the terminal  to the wired LAN. The terminal  can therefore be used anywhere within communication range of the wireless LAN access point .","A network printer , customer display , and barcode scanner  are connected to the printer  as controlled devices. The network printer  is connected to the printer  through a network. The customer display  and barcode scanner  are connected through a USB interface described below. These devices are generally called peripheral devices (peripherals), and are referred to below as devices.","Devices that connect to the printer  are not limited to the devices shown in . For example, displays, and key input devices such as keyboards are also included. Also included are devices that can be controlled by a HID (human interface device) driver standard to the OS, serial communication devices that can be operated using a serial communication driver standard to the OS, and USB devices that can be controlled in the same way as serial communication devices.","The terminal  has a network-connectable web browser, and devices connected to the printer  can be controlled through this web browser.","The terminal  can be any terminal with a network-connectable web browser, and a tablet computer known from the literature such as shown in  can be used. A separate device (such as a computer) used as a controller for controlling the devices does not to be included in the device control system .","Operation of the device control system  is described next.","(1) Place a web application on the application server .","(2) Display the web application with the web browser of the terminal .","(3) The web browser of the terminal  sends a request message to the printer .","(4) The printer  receives the request message. Based on the received request message, the printer  sends data to a device that can be controlled by the printer .","(5) The network printer , customer display , and barcode scanner  connected to the printer  are controlled.","(6) The printer  returns a response to the web application.",{"@attributes":{"id":"p-0234","num":"0233"},"figref":["FIG. 2","FIG. 2"],"b":["200","2","200","3","5","200","2","3","8","5"]},"Operation of this device control system  is described next.","(1) Place a web application on the application server .","(2) Display the web application with the web browser of the terminal .","(3) The web browser of the terminal  sends a request message to the printer .","(4) The printer  receives the request message. Based on the received request message, the printer  sends data to a device that can be controlled by the printer .","(5) The network printer , customer display , and barcode scanner  connected to the printer  are controlled.","(6) The printer  returns a response to the web application.",{"@attributes":{"id":"p-0242","num":"0241"},"figref":"FIG. 3","b":["300","300","300","3","5"]},"Operation of the device control system  is described next.","(1) Place a web application on the printer .","(2) Display the web application with the web browser of the terminal .","(3) The web browser of the terminal  sends a request message to the printer .","(4) The printer  receives the request message. Based on the received request message, the printer  sends data to a device that can be controlled by the printer .","(5) The network printer , customer display , and barcode scanner  connected to the printer  are controlled.","(6) The printer  returns a response to the web application.","Ina system applying the invention, a terminal  with an installed web browser can thus display a web application and control a device connected to the printer .","The configuration of the printer  is described next.","The printer  has a CPU, RAM, flash ROM, nonvolatile memory, a video controller, an auxiliary storage device (SSD: solid state drive), interface, and a local printer (print unit). The printer  could also have a speaker. The local printer is a thermal printer that can print on 80 mm wide or 58 mm wide roll paper.","The printer  can be installed in a POS (point of sale) system. The operating system (OS) of the printer  is Windows (R) based, for example, and is stored in the auxiliary storage device.","A device control program, which is software for the terminal  to control devices connected to the printer , is installed to the printer . As a result, installing a driver program to the terminal  is not necessary.","The printer  also has a Windows (R) standard device driver program (APD), UPOS driver, OPOS driver, or other software for controlling devices and the local printer of the printer .","A web application can be installed to the printer . This enables using the printer  as an application server as shown in . The web application could, for example, be a PHP and Perl server-side script or SQLite database access script (server-side script).",{"@attributes":{"id":"p-0257","num":"0256"},"figref":"FIG. 4","b":"5"},"The foregoing network printer , customer display , and barcode scanner  can be connected to the printer . A display , cash drawer , and keyboard  can also be connected to the printer .  shows the external appearance of the printer .","A roll paper cover  is disposed to the top of the printer . The roll paper cover opens when the cover open button  is pressed, and roll paper can be loaded. A manual cutter  for manually cutting the roll paper, and a cutter cover , are disposed to the paper exit from which the roll paper is discharged after printing. The cutter cover  is opened when a paper jam occurs in the local printer of the printer , and when the roll paper cover  does not open. The blade of the manual cutter  returns to the home position when the cutter cover  opens. The printer  also has a power switch B, reset button A, LED display unit , and control panel . The LED display unit  includes a disc access LED indicating accessing the auxiliary storage device, and status LEDs. The status LEDs report the operating state of the OS, the standby mode of the OS, that the power is off, the OS start-up sequence, and a high CPU temperature warning.","The control panel  includes a power LED, error LED, roll paper LED, and paper feed button. The power LED lights when power is supplied. The error LED is off during normal operation, and lights when the printer resets and when the end of the roll paper is detected and printing stops. The paper LED is off when sufficient roll paper remains, lights steady when little paper is left, and blinks when the self-diagnostic test is running. Pressing the feed button advances the roll paper one line at a time or continuously.","A connector cover  is disposed to the back of the printer . Removing the connector cover  exposes the connector panel (connection panel) on the back of the printer .",{"@attributes":{"id":"p-0262","num":"0261"},"figref":"FIG. 6","b":["60","60","61","62","63","64","65","66","67","60","55","5","5","60","5"]},"The cash drawer  or an optional buzzer is connected to the drawer kick-out connector . The Ethernet connector  is connected to the network. The USB connector  has six USB ports. The customer display , barcode scanner , keyboard , and other devices are connected to the USB connector . The display  is connected to the VGA connector . A serial interface for serial communication devices connects to the COM connector . The line output  connects to an external speaker.",{"@attributes":{"id":"p-0264","num":"0263"},"figref":"FIG. 7","b":["17","17","15","15","63","5"]},"An embodiment of the invention is described in detail below using the device control system  as an example.",{"@attributes":{"id":"p-0266","num":"0265"},"figref":"FIG. 8","b":"100"},"The web browser  of the terminal  displays a web application  provided by the application server . The web application  calls a device application programming interface (API)  of the web browser . The device API  is, for example, a Java (R) script, and as described below instantiates an object that controls a device connected to the printer . The web application  calls (APICall) an object of the device API . The device API  sends a request (Request) to the printer  by a function of the called object.","The device service interface  of the printer  receives the request, and controls a device control script . The device control script  controls a key input device  and serial communication device . The device control script  acquires data input by the key input device , and outputs data to the device service interface . The device control script  handles data communication with the serial communication device , and outputs data received from the serial communication device  to the device service interface . The key input device  in this example includes the keyboard , and the serial communication devices  include the barcode scanner  and cash drawer .","The device service interface  exchanges data with the local printer . The local printer  is the local print unit of the printer . The device service interface  also exchanges data with the network printer  and customer display . The device service interface  outputs device events (Event) and device responses (Response) to the device API . The device API  outputs a response (Callback) to the web application .","A terminal  controls a device connected to a printer  in the device control system  by the operation described above.","The invention is thus used to control devices (peripherals) connected to a printer  in a multi-platform environment. By using this system, devices can be controlled using a personal computer, smartphone, or tablet computer in which a web browser is installed.","The device API  has the following features.\n\n","The device API  also has the following features.\n\n","Building a device service interface  environment is described next.",{"@attributes":{"id":"p-0275","num":"0280"},"figref":"FIG. 10"},"1. Network Settings","Configure the system and printer  network. These settings can be made using the same procedure used for configuring a windows (R) network.","2. Register Web Content","Register the web content in the printer  from the web browser.","The printer  can function as a web server to register web content. The registered web content can be viewed from the web browser  of the terminal .","The registered web content is compressed to a single file in ZIP format containing all content files. The name of the ZIP file can be specified as desired. The ZIP file name and subfolder names are written using ASCII characters.","Web content cannot be appended, and all files are registered by overwriting the old files. When accessing web content registered in the printer  from the terminal , for example, the URL that is accessed differs according to the folder structure of the ZIP file. Specific examples are shown in  (1) and (2).","3. Connect a Device to the Printer ","Connect a device to the printer . As described above, connectable devices include the customer display , barcode scanner , display , cash drawer , and keyboard . Also included are devices that can be controlled by a HID driver standard to the OS, serial communication devices that can be operated using a serial communication driver standard to the OS, and USB devices that can be controlled in the same way as serial communication devices. The connection panel  in  shows only one COM connector , but plural serial communication devices can be connected if a serial-USB conversion cable is used and the driver program is compatible with serial-USB conversions.","4. Register Device Control Script","A device control script prepared by the user is registered in order for the printer  to control devices other than products with which the printer  is compatible. Registration is done from the web browser.","5. Register Device","Register the device connected to the printer  in the printer  software. Registration is done from the web browser.","The web browser used for steps 1 to 5 includes the web browser .","The method of registering web content in step 2 is described in detail.","The web content registration file is registered by the web browser displaying the TMNetWebConfig utility as shown in .","The registration steps are as follow.","(1) Combine the web content to register in a single ZIP file.","(2) Turn the printer  power on.","(3) Start the web browser, and input the URL (http:\/\/IP address of printer \/TMNetWebConfig\/).","(4) The TMNetWebConfig utility starts. Click on [Web service settings]\u2014[Update settings] in the window shown in .","(5) The Web Content Update Settings screen is displayed. Click on [Browse] in the web content file field, and select the ZIP file containing the web content that was prepared in step (1).","(6) Click [Upload].","Registering a device control script in step 4 is described in detail.","The device control script prepared by the user is registered by the web browser displaying the TMNetWebConfig tool as shown in . This method enables the user to connect a prepared device to the printer  and control the device, and enables the user to develop and register a device control script to customize device data processing.","The registration steps are as follow.","(1) Prepare a customized device control script.","(2) Turn the printer  power on.","(3) Start the web browser, and input the URL (http:\/\/IP address of printer \/TMNetWebConfig\/).","(4) Start the TMNetWebConfig utility. Click on [Web service settings]\u2014[Register\/delete] in the window shown in .","(5) The Control Script screen is displayed. Click on [Browse] in the Control script to be registered field, and select the device control script to register.","(6) Click [Register]. The device control script is registered and listed in the Registered control scripts field in the bottom of the window.","Registering a device in step 5 is described in detail.","A device is registered by the web browser displaying the TMNetWebConfig tool as shown in .","The registration steps are as follow.","(1) Start the web browser, and input the URL (http:\/\/IP address of printer \/TMNetWebConfig\/).","(2) Start the TMNetWebConfig utility. From [Web service settings]\u2014[Device registration] in the window shown in , click on the type of device to register. A device list  is displayed under Device registration in the screen shown in . Click on the type of device to register from the device list . The type of device in this embodiment can be selected from five types, printer, display, key input device, serial communication device, and other as shown in . Details about the types of devices are as shown in .","(3) A configuration screen is displayed for each device. The connected device is registered in the printer .","(3-1) To register a printer","Registration of the local printer incorporated in the printer  can be confirmed as follows.","(3-1-1) Check that \u201cprinter \u201d is registered for the device ID \u201clocal_printer\u201d in the Registered Printer field in the screen shown in .","(3-1-2) Click on [Test printing]. Check that TEST_PRINT is printed by the local printer.","(3-1-3) Register the connected network printer .","Register the network printer  by the following steps.","(3-1-3-1) Set the items shown in  (device ID, type, model number, IP address, retry interval), and click [Register].","(3-1-3-2) After confirming the printer is added to the Registered Printer list, click [Test printing]. Confirm that TEST_PRINT is printed by the registered network printer .","(3-2) To register a display (customer display )","The device ID of the customer display is a constant, \u201clocal_display\u201d. Register the connected customer display  by the following steps.","(3-2-1) Select Use in the screen shown in .","(3-2-2) Set the items (communication settings, brightness settings) in , and click [Register].","(3-2-3) Click [Test display]. Confirm that text is displayed on the customer display .","(3-3) To register a key input device ","Register the connected key input device  by the following steps.","(3-3-1) Set the items (device ID, device name, control script) in , and click [Register].","(3-3-2) After confirming the registered device was added to the Registered Key Input Device field, click [Operating test].","(3-3-3) A screen will be displayed by the web browser. Operate the key input device , and confirm that the result is displayed as operated.","(3-4) To register a serial communication device ","Register the connected serial communication device  by the following steps.","(3-4-1) Set the items (device ID, device name, control script, communication speed, data bit, parity, stop bit, flow control) shown in  for the connected serial communication device , and click [Register].","(3-4-2) Confirm that the device is added to the Registered Serial Communication Device field.","(3-5) To register another device","Register another connected device by the following steps.","(3-5-1) Set the items (device ID, control script) shown in  for the connected device, and click [Register].","(3-5-2) Confirm that the device is added to the Registered Other Devices field.","The programming method for developing an application using the device API  is described next.","The device API  is embedded as follows.","The device API  is provided to enable using the device control function of this system from a client-side JavaScript. The device API  is written in JavaScript. An example of a filename is device-*.js.","First, embed the device-*.js file in the application for use.","In preparation, place the device-*.js file on the web server to use the device API .","Next, embed the script in the web page. Embed the script in the web page using the HTML <script> tag.","(Sample tag)","<scripttype=\u201ctext\/javascript\u201dsrc=\u201cdevice-1.0.0.js\u201d><\/script>","The programming flow is shown in .","Applications in  corresponds to a web application , Device Control corresponds to a device control function (device API  and device service interface ), and Device denotes the controlled device.","1: Web application  sends the \u201cnewEpsonDevice( )\u201d command, and a device object is instantiated.","2: Web application  sends the \u201cConnect( )\u201d command, and establishes a communication path to the device control function.","2.1: The device control function returns \u201cCallback(OK)\u201d.","3: Web application  sends the \u201cCreateDevice(DEVICE_TYPE_PRINTER)\u201d command.","3.1: Device service interface  sends the \u201cCmd( )\u201d command to the device.","4: Device returns \u201cDeviceopen\u201d.","4.1: Device control function returns \u201ccallback(Object, \u2018OK\u2019)\u201d.","Web application  gets a device object by steps 3 to 4.1.","5: Web application  registers a callback according to the device.","6: Web application  calls a method according to the device.","6.1: \u201cCmd( )\u201d command is sent to the device.","6.1.1: Device executes the command.","5.1: Device returns the result of command execution.","5.2: Device control function returns \u201ccallback(\u2018success\u2019)\u201d.","7: Web application  sends \u201cdeleteDevice(Object)\u201d, and releases the device object.","7.1: \u201cCmd( )\u201d command is sent to the device.","8: Device returns device closed.","8.1: Device control function returns \u201ccallback(\u2018OK\u2019)\u201d.","9: Web application  sends \u201cdisconnect( )\u201d command, closes communication link to device service interface .","The device API  is described in detail next.","The device API  provides the following objects.\n\n","The Device object is described in detail.","Constructor","Constructor of a Device object. Instantiates and initializes a Device object.","[Syntax]","Device( );","[Return value]","Device object","connect method","Establishes communication link to device service interface .","[Syntax]","connect (ipAddress, port, callback);","[Parameters]","ipAddress:object type: (String)","Specifies the IP address of printer .","port: object type: (Number)","Specifies  (port number of device service interface ).","callback: object type: (Function)","Specifies the callback that receives the process result. A string shown in  is returned in the first parameter of the callback.","disconnect method","Closes the communication path established by the connect method.","[Syntax]","disconnect( );","isConnect method","Obtains the status of the communication path established by the connect method.","[Syntax]","isConnect( );","[Return value]","The return value is the status of the communication path as shown in .","The deviceAP object is described in detail.","createDevice method","Gets a device object to act as the interface to the device.","When this method executes successfully, the specified device is exclusively locked, and DEVICE_IN_USE is returned when createDevice is called from another browser. Because the printer is not exclusively locked, a device object can be obtained by createDevice from plural browsers.","If createDevice is executed immediately during a return process after an ondisconnect event, DEVICE_IN_USE is returned. In this event, the createDevice method retries until a value other than DEVICE_IN_USE is obtained.","[Syntax]","createDevice (deviceId, deviceType, crypto, callback);","[Parameters]","deviceId: object type: (String)","Specifies the device ID.","Declare \u201clocal display\u201d when DEVICE_TYPE_DISPLAY is specified in the second parameter (deviceType).","deviceType: object type: (String)","Specifies any device type shown in .","crypto: object type: (Boolean)","Specifies whether or not to encrypt communications data.","callback: object type: (Function)","Specifies the callback that receives the process result. If the second parameter of the callback is OK, the device object is returned in the first parameter. The second parameter is a string shown in .","deleteDevice method","Releases a device for use by another client.","[Syntax]","deleteDevice (deviceObject, callback);","[Parameters]","deviceObject: object type: (Object)","Specifies the device object.","callback: object type: (Function)","Specifies the callback that receives the process result. The parameter of the callback is a string shown in .","getAdmin method","Obtains the administrator set in the printer . (The administrator can be set using the TMNetWebConfig utility.","[Syntax]","getAdmin( );","[Return value]","String of administrator's name (String)","getLocation method","Gets the installation location value set in the printer . The location string can be set using the TMNetWebConfig utility.","[Syntax]","getLocation( );","[Return value]","String of the installation location (String)","ondisconnect event","Obtains failure of the reconnect process. When this event occurs, a process for handling the network disconnection, such as establishing a connection again, is executed.","[Syntax]","Function( )","The Common to Device Object object is described next.","callEvent method","Calls any event on the device control script  side corresponding to the device object. Details about device control script  events are described below in the description of the device control script .","[Syntax]","callEvent (eventName, data);","[Parameters]","eventName:object type: (String)","Specifies the event name on the device control script side.","data: object type: (Object)","Specifies the data passed to the called event.","Simple JSON data comprising a property name and value set can be declared.","The Display object is described next.","reset method","Adds the initialization settings of the customer display  to the command buffer. Initialization results in the following.\n\n","[Syntax]","reset( );","[Return value]","Display object","createWindow method","Adds window settings to the command buffer. Windows are defined to not overlap previously defined windows. A window size that fits in the size of the display (20 columns\u00d720 rows) is specified.","[Syntax]","createWindow (number, x, y, width, height, scrollMode);","[Parameters]","number: object type: (Number)","Specifies a window number in the range 1 to 4.","x: object type: (Number)","Specifies the x-coordinate of the window origin on the display.","Specify a value from 1 to 20.","y: object type: (Number)","Specifies the y-coordinate of the window origin on the display.","Specify 1 or 2.","width: object type: (Number)","Specifies the width of the window.","height: object type: (Number)","Specifies the height of the window.","scrollMode: object type: (String)","Specifies the scrolling mode of the window. Select from the parameters shown in .","[Return value]","Display object","destroyWindow method","Adds the destroy setting of a defined window to the command buffer.","[Syntax]","destroyWindow (number);","[Parameters]","number: object type: (Number)","Specifies the number of the window to destroy. Specify a number from 1 to 4.","[Return value]","Display object","setCurrentWindow method","Adds a setting to change the current window to the command buffer. Makes the specified window the current window, and then moves the cursor to the origin of the current window.","[Syntax]","setCurrentWindow (number);","[Parameters]","number: object type: (Number)","Specifies the number of the window to switch to. Specify a number from 1 to 4.","[Return value]","Display object","clearWindow method","Adds a command to clear the current window to the command buffer.","[Syntax]","clearWindow( );","[Return value]","Display object","setCursorPosition method","Adds a cursor position setting to the command buffer.","[Syntax]","setCursorPosition (x, y);","[Parameters]","x: object type: (Number)","Specifies the x-coordinate of the destination. Specify a value from 1 to 20.","y: object type: (Number)","Specifies the y-coordinate of the destination. Specify 1 or 2.","[Return value]","Display object","moveCursorPosition method","Adds the cursor position settings in the current window to the command buffer.","[Syntax]","moveCursorPosition (position);","[Parameters]","position: object type: (String)","Specifies the destination of the cursor in the current window.","Select from the parameters shown in .","[Return value]","Display object","setCursorType method","Adds the cursor display settings to the command buffer.","[Syntax]","setCursorType (type);","[Parameters]","type: object type: (String)","Specifies the cursor display method. Select from the parameters shown in .","[Return value]","Display object","addText method","Adds string display to the command buffer.","[Syntax]","addText (data);","addText (data, lang);","addText (data, x, y);","addText (data, x, y, lang);","[Parameters]","data: object type: (String)","Specifies the string to be displayed.","lang: object type: (String)","Specifies the display language of the string. Select from the strings shown in .","x: object type: (Number)","Specifies the x-coordinate of the display position. Specify a value from 1 to 20.","y: object type: (Number)","Specifies the y-coordinate of the display position. Specify 1 or 2.","[Return value]","Display object","addReverseText method","Adds reversed string display to the command buffer.","[Syntax]","addReverseText (data);","addReverseText (data, lang);","addReverseText (data, x, y);","addReverseText (data, x, y, lang);","[Parameters]","data: object type: (String)","Specifies the string to be displayed.","lang: object type: (String)","Specifies the display language of the string. Select from the strings shown in .","x: object type: (Number)","Specifies the x-coordinate of the display position. Specify a value from 1 to 20.","y: object type: (Number)","Specifies the y-coordinate of the display position. Specify 1 or 2.","[Return value]","Display object","addMarquee method","Adds a marquee display to the command buffer. The marquee is displayed in the horizontal scroll mode on one line regardless of the scroll mode setting of the display window.","[Syntax]","addMarquee (data, format, unitWait, repeatWait, repeatCount, lang);","[Parameters]","data: object type: (String)","Specifies the string to be displayed.","format: object type: (String)","Specifies the string display method. Select from .","unitWait: object type: (Number)","Specifies the display interval (ms) for each character. A value from 1 to 2000 can be set.","repeatWait: object type: (Number)","Specifies the interval (ms) for repeating the string display.","A value from 1 to 2000 can be set.","repeatCount: object type: (Number)","Specifies the number of times to repeat the string display. A value from 0 to 127 can be set. Display repeats indefinitely if 0 is specified.","lang: object type: (String)","Specifies the display language of the string. Select from the strings shown in .","[Return value]","Display object","setBlink method","Adds the screen blinking settings to the command buffer.","[Syntax]","setBlink (interval);","[Parameters]","interval: object type: (Number)","Specifies the blinking interval (ms). Specify a number from 0 to 12700. The specified setting is rounded in 50 ms increments. The display lights steady when 0 is specified.","[Return value]","Display object","setBrightness method","Adds the display brightness setting to the command buffer.","[Syntax]","setBrightness (brightness);","[Parameters]","brightness: object type: (Number)","Specifies the display brightness setting. Select from the parameters shown in .","[Return value]","Display object","showClock method","Adds a clock display to the command buffer.","When the clock is displayed, all displayed strings are cleared. Clock display ends if another command is sent while the clock is displayed.","[Syntax]","showClock( );","[Return value]","Display object","addCommand method","Adds a command to the command buffer.","[Syntax]","addCommand (data);","[Parameters]","data: object type: (String)","Specifies an ESC\/POS command as a string. The command string is separated by \u201c\u00a5x\u201d. Example: \u201c\u00a5x1B\u00a5x40\u201d","[Return value]","Display object","send method","Sends the command in the command buffer.","[Syntax]","send( );","onreceive event","Receives the command execution results.","[Syntax]","Function (response);","[Parameters of the callback function]","response: object type: (Object)","Receives the result of command execution. The properties shown in  are included. Success values are shown in ; code values are shown in .","The Keyboard object is described next.","setPrefix method","Specifies the key code used to detect the beginning of a string when keyboard input is received as a batch of strings.","[Syntax]","setPrefix (data);","[Parameters]","data: object type: (Array)","Specifies the key code array. The key codes are as shown in the key code list in , for example.","onkeypress event","Receives a key press event.","[Syntax]","Function (data);","[Parameters of the callback function]","data: object type: (Object)","Receives the properties shown in .","onstring event","Receives a string of character input starting with any character combination specified by setPrefix and ending when the Enter key is detected.","[Syntax]","Function (data);","[Parameters of the callback function]","data: object type: (Object)","Receives the properties shown in .","The Printer object is described next.","addTextAlign method","Adds the text alignment setting to the command buffer.","This API setting also applies to barcodes and 2D symbols.","To set text rotation when the print mode is set to the page mode, use the addPageDirection method described below instead of this API.","[Syntax]","addTextAlign (align);","[Parameters]","align (Required parameter, object type: String)","Specifies the text alignment.","Constants are shown in , return values in , and exceptions in .","addTextLineSpace method","Adds the line feed distance setting to the command buffer.","[Syntax]","addTextLineSpace (linespc);","[Parameters]","linespc: (Required parameter, object type: Number)","Specifies the line feed distance (in dots). Specify an integer from 0 to 255.","The return value is shown in , exceptions in .","addTextRotate method","Adds the text rotation setting to the command buffer.","This API setting also applies to barcodes and 2D symbols.","To set text rotation when the print mode is set to the page mode, use the addPageDirection method described below instead of this API.","[Syntax]","addTextRotate (rotate);","[Parameters]","rotate (Required parameter, object type: Boolean)","Specifies whether or not to rotate text.","Settings are shown in , return values in , exceptions in .","addText method","Adds printing text to the command buffer.","To print content other than text after printing text, execute a line feed or paper feed.","In the page mode, characters are printed from the current character position referenced to the baseline dot of the character (see appendix on page ).","[Syntax]","addText (data);","[Parameters]","data (Required parameter, object type: String)","Specifies a character string to be printed.","For the horizontal tab\/line feed, use the escape sequences shown in .","Return values are shown in , and exceptions in .","addTextLang method","Adds the language setting to the command buffer.","[Syntax]","addTextLang (lang);","[Parameters]","lang: (Required parameter, object type: String)","Specifies the target language as shown in . The printable character codes depend upon the printer specifications.","Return values are shown in , exceptions in .","addTextFont method","Adds the character font setting to the command buffer.","[Syntax]","addTextFont (font);","[Parameters]","font: (Required parameter, object type: String)","Specifies the font as shown in .","The return values are shown in , exceptions in .","addTextSmooth method","Adds a text smoothing setting to the command buffer.","[Syntax]","addTextSmooth (smooth);","[Parameters]","smooth: (Required parameter, object type: Boolean)","Specifies whether to apply text smoothing.","The return values are shown in , exceptions in .","addTextDouble method","Adds a double-size text setting to the command buffer.","[Syntax]","addTextDouble (dw, dh);","[Parameters]","dw: (Optional parameter, object type: Boolean)","Specifies the double-size width. Settings are shown in .","dh (Optional parameter, object type: Boolean)","Specifies the double-size height.","When both dw and dh parameters are set to ture\/1, double width and double height characters are printed. Settings are shown in .","The return values are shown in , exceptions in .","addTextSize method","Adds the text scaling setting to the command buffer.","[Syntax]","addTextSize (width, height);","[Parameters]","width: (Optional parameter, object type: Number)","Specifies the horizontal scaling. Settings are shown in .","height (Optional parameter, object type: Number)","Specifies the vertical scaling. Settings are shown in .","The return values are shown in , exceptions in .","addTextStyle method","Adds a text styling setting to the command buffer.","[Syntax]","addTextStyle (reverse, ul, em, color);","[Parameters]","reverse: (Optional parameter, object type: Boolean)","Specifies black\/white inversion for text. Settings are shown in .","ul (Optional parameter, object type: Boolean)","Specifies underlining. Settings are shown in .","em (Optional parameter, object type: Boolean)","Specifies bold text. Settings are shown in .","color (Optional parameter, object type: String)","Specifies the text color. Settings are shown in .","The return values are shown in , exceptions in .","addTextPosition method","Adds the horizontal print start position to the command buffer.","[Syntax]","addTextPosition (x);","[Parameters]","x: (Required parameter, object type: Number)","Specifies the horizontal print start position (in dots). Specify an integer from 0 to 65535.","The return values are shown in , exceptions in .","addFeedUnit method","Adds paper feeding in dot units to the command buffer.","[Syntax]","addFeedUnit (unit);","[Parameters]","unit: (Required parameter, object type: Number)","Specifies the paper feed distance (in dots). Specify an integer from 0 to 255.","The return values are shown in , exceptions in .","addFeedLine method","Adds paper feeding in line units to the command buffer.","[Syntax]","addFeedLine (line);","[Parameters]","line: (Required parameter, object type: Number)","Specifies the paper feed distance (in lines). Specify an integer from 0 to 255.","The return values are shown in , exceptions in .","addImage method","Adds raster image printing to the command buffer.","Prints graphics rendered in HTML5 Canvas.","Converts the specified range in a RGBA full-color HTML5 Canvas image to raster image data according to the halftone property and brightness property settings. One pixel in an image equals one printer dot. When an image includes a transparent color, the background of the image is assumed to be white.","To print a raster image at high speed, specify ALIGN_LEFT for the addTextAlign method described above, and set the width parameter of this API to a multiple of 8 not exceeding the paper width of the printer.","Inpagemode, a raster image is printed at the current print position referenced to the bottom left dot of the raster image. The print position does not move.","HTML5 Canvas images containing images downloaded from a different domain cannot be printed. A security error is returned in accordance with JavaScript's same-origin policy.","[Syntax]","addImage (context, x, y, width, height, color, mode);","[Parameters]","context: (Required parameter, object type: Context)","Specifies the HTML5 Canvas 2D context.","x: (Required parameter, object type: Number)","Specifies the horizontal starting position of the print area.","Specify an integer from 0 to 65535.","y: (Required parameter, object type: Number)","Specifies the vertical starting position of the print area.","Specify an integer from 0 to 65535.","width: (Required parameter, object type: Number)","Specifies the width of the print area. Specify an integer from 0 to 65535.","height: (Required parameter, object type: Number)","Specifies the height of the print area. Specify an integer from 0 to 65535.","color: (Optional parameter, object type: String)","Specifies the color. Settings are shown in .","mode (Optional parameter, object type: String)","Specifies the color mode. Settings are shown in .","The return values are shown in , exceptions in .","addLogo method","Adds printing a logo stored in nonvolatile memory to the command buffer.","Prints a logo stored in nonvolatile memory in the printer.","The logo is previously registered in the printer using a model-specific utility or a logo registration utility (TMFLogo).","In page mode, a logo is printed from the current printing position referenced to the bottom left dot of the logo.","[Syntax]","addLogo (key1, key2);","[Parameters]","key1 (Required parameter, object type: Number)","Specifies key code 1 of a logo in nonvolatile memory. Specify an integer from 0 to 255.","key2 (Required parameter, object type: Number)","Specifies key code 2 of a logo in nonvolatile memory. Specify an integer from 0 to 255.","The return values are shown in , exceptions in .","addBarcode method","Adds barcode printing to the command buffer.","In page mode, the barcode is printed from the current print position referenced to the bottom left dot (except for HRI) of the barcode.","[Syntax]","addBarcode (data, type, hri, font, width, height);","[Parameters]","data (Required parameter, object type: String)","Specifies the barcode data as a string. Barcode types are shown in , , and .","To specify binary data that cannot be expressed by a character string, use the escape sequences in .","type (Required parameter, object type: String)","Specifies the barcode type. Constants are shown in .","hri (Optional parameter, object type: String)","Specifies the HRI position. Constants are shown in .","font (Optional parameter, object type: String)","Specifies the HRI font. Constants are shown in .","width (Optional parameter, object type: Number)","Specifies the width of one module in dots. Specify an integer from 2 to 6.","height (Optional parameter, object type: Number)","Specifies the barcode height in dots. Specify an integer from 1 to 255.","The return values are shown in , exceptions in .","addSymbol method","Adds 2D symbol ping to the command buffer.","In page mode, the barcode is printed from the current printing position referenced to the bottom left dot of the 2D symbol.","[Syntax]","addSymbol (data, type, level, width, height, size);","[Parameters]","data (Required parameter, object type: String)","Specifies the 2D symbol data as a character string. 2D code types are shown in  and .","Specifies an escape sequence shown in  to pass binary data that cannot be expressed by a character string.","type (Required parameter, object type: String)","Specifies the type of the two-dimensional symbol. Constants are shown in .","level (Optional parameter, object type: String)","Specifies the error correction level. Constants are shown in .","The error correction level is selected according to the type of two-dimensional symbol. LEVEL_DEFAULT is selected for MaxiCode and two-dimensional GS1DataBar symbols.","width (Optional parameter, object type: Number)","Specifies the module width. Specify an integer from 0 to 255.","This parameter is ignored for MaxiCode symbols.","height (Optional parameter, object type: Number)","Specifies the module height. Specify an integer from 0 to 255.","This parameter is ignored for QRCode and MaxiCode symbols.","size (Optional parameter, object type: Number)","Specifies the maximum size of the two-dimensional symbol. Specify an integer from 0 to 65535. This parameter is ignored for QRCode and MaxiCode symbols.","The return values are shown in , exceptions in .","addHLine method","Adds horizontal line printing to the command buffer. Draws horizontal lines. Cannot be used in page mode.","[Syntax]","addHLine (x1, x2, style);","[Parameters]","x1: (Required parameter, object type: Number)","Specifies the start position of the horizontal line (in dots).","Specify an integer from 0 to 65535.","x2: (Required parameter, object type: Number)","Specifies the end position of the horizontal line (in dots).","Specify an integer from 0 to 65535.","style: (Optional parameter, object type: String)","Specifies the type of line. Constants are shown in .","The return values are shown in , exceptions in .","addVLineBegin method","Adds the beginning of a vertical line to the command buffer. Starts drawing vertical lines. Cannot be used in page mode. Vertical lines are drawn until the end is specified by addVLineEnd. This API function is used together with the addVLineEnd method.","[Syntax]","addVLineBegin (x, style);","[Parameters]","x (Required parameter, object type: Number)","Specifies the start position of the vertical line (in dots).","Specify an integer from 0 to 65535.","style (Optional parameter, object type: String)","Specifies the type of line. Constants are shown in .","The return values are shown in , exceptions in .","addVLineEnd method","Adds the end of a vertical line to the command buffer. Finishes drawing vertical lines. Cannot be used in page mode. This API is used together with the addVLineBegin method described above.","[Syntax]","addVLineEnd (x, style);","[Parameters]","x (Required parameter, object type: Number)","Specifies the end position of the vertical line (in dots). Specify an integer from 0 to 65535.","style (Optional parameter, object type: String)","Specifies the type of line to stop drawing. Constants are shown in .","The return values are shown in , exceptions in .","addPageBegin method","Adds starting the page mode to the command buffer. Page mode processing starts.","Vertical lines are processed in page mode until the page mode is ended by the PageEnd method described below. This API is used together with the PageEnd method.","[Syntax]","addPageBegin( );","The return values are shown in .","addPageEnd method","Adds the end of the page mode to the command buffer. Processing in page mode ends. This API is used together with the addPageBegin method described above.","[Syntax]","addPageEnd( );","The return values are shown in .","addPageArea method","Adds the page mode print area to the command buffer. Specifies the page mode print area (coordinates). After this API function, specify a print data API function such as the addText method.","The print area is specified according to the content to be printed. If the print data extends beyond the print area, the print data will not be completely printed in the printout. This API is used between the above addPageBegin method and the above PageEnd method.","[Syntax]","addPageArea (x, y, width, height);","[Parameters]","x (Required parameter, object type: Number)","Specifies the origin of the horizontal axis (in dots). Specify an integer from 0 to 65535. 0 is at the left edge of the printable area of the printer.","y (Required parameter, object type: Number)","Specifies the origin of the vertical axis (in dots). Specify an integer from 0 to 65535. 0 is the position without feeding the paper.","width (Required parameter, object type: Number)","Specifies the width of the print area (in dots). Specify an integer from 0 to 65535.","height (Required parameter, object type: Number)","Specifies the height of the print area (in dots). Specify an integer from 0 to 65535.","The width and height of the print area are determined according to the print direction setting. The print data may otherwise not be completely printed.","The return values are shown in , exceptions in .","addPageDirection method","Adds the page mode print direction setting to the command buffer. Specifies the print direction in page mode. This function can be omitted if rotation is not required. This API is used between the above addPageBegin method and the PageEnd method.","[Syntax]","addPageDirection (dir);","[Parameters]","dir (Required parameter, object type: String)","Specifies the page mode print direction. Constants are shown in .","The return values are shown in , exceptions in .","addPagePosition method","Adds the print position setting area in the page mode to the command buffer. Specifies the print start position (coordinates) in the area specified by the addPageArea method. This API is used between the above addPageBegin method and the PageEnd method.","[Syntax]","addPagePosition (x, y);","[Parameters]","x: (Required parameter, object type: Number)","Specifies the print position on the horizontal axis (in dots).","Specify an integer from 0 to 65535.","y: (Required parameter, object type: Number)","Specifies the print position on the vertical axis (in dots).","Specify an integer from 0 to 65535.","The print start position (coordinates) is set according to the content to be printed. Refer to the following.\n\n","Specify the left end of the baseline for the first character. This can be omitted for left-aligned printing of standard-sized characters. To print double-sized height characters, specify a value equal to or greater than 42 for y.\n\n","Specify the bottom left of the symbol. Set y to the barcode height.\n\n","Specify the bottom left of the graphic data. Set y to the height of the graphic data.\n\n","Specify the top left of the symbol. This can be omitted when printing from the top left.","The return values are shown in , exceptions in .","addPageLine method","Adds line drawing in page mode to the command buffer. Draws a line in page mode. Diagonal lines cannot be drawn. This API is used between the above addPageBegin method and the PageEnd method.","[Syntax]","addPageLine (x1, y1, x2, y2, style);","[Parameters]","x1 (Required parameter, object type: Number)","Specifies the start position on the horizontal axis (in dots).","Specify an integer from 0 to 65535.","y1 (Required parameter, object type: Number)","Specifies the start position on the vertical axis (in dots).","Specify an integer from 0 to 65535.","x2 (Required parameter, object type: Number)","Specifies the end position on the horizontal axis (in dots).","Specify an integer from 0 to 65535.","y2 (Required parameter, object type: Number)","Specifies the end position on the vertical axis (in dots). Specify an integer from 0 to 65535.","style (Optional parameter, object type: String)","Specifies the line type. Constants are shown in .","The return values are shown in , exceptions in .","addPageRectangle method","Adds drawing a rectangle in the page mode. Draws a rectangle in the page mode. This API is used between the above addPageBegin method and the PageEnd method.","[Syntax]","addPageRectangle (x1, y1, x2, y2, style);","[Parameters]","x1 (Required parameter, object type: Number)","Specifies the start position on the horizontal axis (in dots).","Specify an integer from 0 to 65535.","y1 (Required parameter, object type: Number)","Specifies the start position on the vertical axis (in dots).","Specify an integer from 0 to 65535.","x2 (Required parameter, object type: Number)","Specifies the end position on the horizontal axis (in dots).","Specify an integer from 0 to 65535.","y2 (Required parameter, object type: Number)","Specifies the end position on the vertical axis (in dots). Specify an integer from 0 to 65535.","style (Optional parameter, object type: String)","Specifies the line type. Constants are shown in .","The return values are shown in , exceptions in .","addCut method","Adds a paper cut to the command buffer. Sets the paper cut. Cannot be used in page mode.","[Syntax]","addCut (type);","[Parameters]","type (Optional parameter, object type: String)","Specifies the paper cutting method. Settings are shown in .","The return values are shown in , exceptions in .","addPulse method","Adds a drawer kick to the command buffer. Sets the drawer kick.","Cannot be used in page mode. The drawer cannot be used with the buzzer.","[Syntax]","addPulse (drawer, time);","[Parameters]","drawer (Optional parameter, object type: String)","Specifies the drawer kick connector. Settings are shown in .","time (Optional parameter, object type: String)","Specifies the ON time of the drawer kick signal. Settings are shown in .","The return values are shown in , exceptions in .","addSound method","Adds sounding the buzzer to the command buffer. Sets the buzzer.","Cannot be used in page mode.","The buzzer function cannot be used with the drawer.","This API cannot be used if the printer does not have a buzzer.","[Syntax]","addSound (pattern, repeat);","[Parameters]","pattern: (Optional parameter, object type: String)","Specifies the buzzer pattern. Settings are shown in .","repeat (Optional parameter, object type: String)","Specifies the number of times the buzzer sounds. Settings are shown in .","To stop the buzzer after setting the repeat parameter to 0, execute this API again and set the pattern parameter to PATTERN_NONE.","The return values are shown in , exceptions in .","addCommand method","Adds commands to the command buffer. Sends ESC\/POS commands.","When sending a command to the command buffer with the addCommand method, declare the command data strings using \u00a5x as a separator.","Example: \u00a5x1B\u00a5x40","[Syntax]","addCommand (data);","[Parameters]","data (Optional parameter, object type: String)","Specifies an ESC\/POS command as a character string.","The return values are shown in , exceptions in .","send method","Sends a command to the command buffer.","[Syntax]","send( );","print method","Prints an image rendered in HTML5 Canvas.","Converts the specified range in a RGBA full-color HTML5 Canvas image to raster image data according to the halftone property and brightness property settings. One image pixel equals one printer dot. When an image contains a transparent color, the background color of the image is assumed to be white.","HTML5 Canvas images containing images downloaded from a different domain cannot be printed. A security error is returned in accordance with JavaScript's same-origin policy.","[Syntax]","print (canvas, cut, mode);","[Parameters]","canvas (Required parameter, object type: canvas)","Specifies the HTML5 Canvas object to print.","cut (Optional parameter, object type: Boolean)","Specifies whether or not to cut the paper. Settings are shown in .","mode (Optional parameter, object type: String)","Specifies the color mode. Settings are shown in . Exceptions are shown in .","startMonitor method","Enables a status event. Reports the printer status as an event. Updates the status at the interval specified in the interval property.","[Syntax]","startMonitor( );","stopMonitor method","Disables a status event.","[Syntax]","stopMonitor( );","halftone property","Specifies the halftone processing method to apply to monochrome (two tone) printing. The default is HALFTONE_DITHER.","object type: String","Settings are shown in .","brightness property","Specifies brightness correction as a gamma value in the range 0.1 to 10.0. The default is 1.0.","object type: Number","timeout property","Specifies the timeout time (ms) of the message sent with the send method described above. The default value is 10,000.","object type: Number","nterval property","Specifies the interval for updating the status.","object type: Number","[Description]","Specifies the interval for updating the status in milliseconds.","Default value: 3000 (3 second)","Minimum value: 1000 (1 second or more)","If an invalid value is specified, 3000 is used.","onreceive event","Registers a callback function and gets a response message receipt event.","[Syntax]","Function (response)","[Parameters of the callback function]","Parameters: response (see the response object property described below)","Name: response message","Object type: object","[Response object properties]","See the list of properties in .","[Success value]","See the list of success values in .","[Code value]","See the list of code values in .","[Status values]","See the list of status values in .","onerror event","Registers a callback function and gets a communication error event.","[Syntax]","Function (error)","[Parameters of the callback function]","Parameters: error (see the error object properties described below)","Name: communication error data","Object type: object","[Error object properties]","See the list of error object properties in .","onstatuschange event","Registers a callback function and gets a status change event.","[Syntax]","Function (status)","[Parameters of the callback function]","Parameter: status","Name: status","Object type: Number","ononline event","Registers a callback function and gets an online event.","object type: Function( )","onoffline event","Registers a callback function and gets an offline event.","object type: Function( )","onpoweroff event","Registers a callback function and gets a no-response event.","object type: Function( )","oncoverok event","Registers a callback function and gets a cover-closed event.","object type: Function( )","oncoveropen event","Registers a callback function and gets a cover-open event.","object type: Function( )","onpaperok event","Registers a callback function and gets a paper-remaining event.","object type: Function( )","onpapernearend event","Registers a callback function and gets a paper near-end event.","object type: Function( )","onpaperend event","Registers a callback function and gets a paper end event.","object type: Function( )","ondrawerclosed event","Registers a callback function and gets a drawer-closed event.","object type: Function( )","ondraweropen event","Registers a callback function and gets a drawer-open event.","object type: Function( )","The Scanner object is described next.","ondata event","Receives a barcode information scanning event.","[Syntax]","Function (data);","[Parameters of the callback function]","data","Object type: (Object)","Receives the property shown in .","The iSimpleSerial object is described next.","The specifications of this API can be customized by creating a device control script.","sendCommand","Sends a desired command.","[Syntax]","sendCommand (data);","[Parameters]","data","Object type: (String)","Specifies the command with a hexadecimal string.","Declare command strings using \u00a5x as a separator.","To send 0x020x1F0x03, declare the string \u00a5x02\u00a5x1F\u00a5x03.","oncommandreply event","Receives a response event from the device.","[Syntax]","Function (data);","[Parameters of the callback function]","data","Object type: (String)","Receives a hexadecimal string of response data.","The received hexadecimal string is separated with \u00a5x.","Example: \u00a5x1B\u00a5x40","The device control script  is described next.","Programming is described first.",{"@attributes":{"id":"p-1151","num":"1170"},"figref":"FIG. 81"},"By using a device control script  provided by the device control function of the invention, data processing by a device can be customized and new devices can be used from a web application. As shown in , a device control script  has a DeviceConnection object  and a ClientConnection object . In , devices of the printer  are collectively referred to as device .","When the createDevice method of the Device object described above is executed, an object is instantiated so that the device service interface  of the printer  can use the device control script corresponding to the requested device. The device can then be controlled through the instantiated object.","The objects shown in  are then passed to the device control script  from the device service interface . By using the DeviceConnection object  and ClientConnection object , the device control script  can communicate with the web application  and device  as shown in . The DeviceConnection object  is an object that sends\/receives data with the device . The ClientConnection object  is an object that sends data to a device object on the web browser  side, and accesses the device service interface .","Functions using objects of the device control script are described next.","The following functions can be used using device control script APIs.\n\n","The configuration of a device control script is described next.","A device control script is coded to meet the following conditions.\n\n","(Only one file can be registered when configuring a device using the TMNetWebConfig utility.)\n\n","(Example) file name: Keyboard_Generic.ver1.0.js->constructor name: Keyboard_Generic\n\n","(Example) exports.Keyboard_Generic=Keyboard_Generic;\n\n","DEVICE_TYPE property (object type: String)","A list of settings is shown in .","DEVICE_GROUP property (object type: String","A list of settings is shown in .\n\n","The configuration of a sample device control script  is shown in .","The device control script API is described next.","The following objects are provided in the device control script API.\n\n","The ClientConnection object is described next.","This object is passed to the first parameter of the constructor of the device control script .","The API \u201csend\u201d command sends data to a device object that runs on a browser.","[Syntax]","send (event, data);","[Parameters]\n\n","Sets the event name of the device object.\n\n","Specifies the data passed to the device object event.","An example is shown in . In this example, the on key press event of the device object is called, and 49 is received from data.keycode and 1 is received from data.ascii using the data parameter of the onkeypress event.","The DeviceConnection object is described next.","This object is passed to the second parameter of the constructor of the device control script .","The API \u201csend\u201d command sends data to a serial communication device.","Note that data is not sent to an input device that can be controlled by an HID driver.","[Syntax]","send (data);","[Parameters]","data: object type: (Buffer)","Specifies the data to send to the device.","The device control script Name object is described next.","onDeviceData event (input device that can operate with an HID driver)","This event receives data detected from a key input device.","Events are described in this format in a device control script  for a key input device.","[Syntax]","onDeviceData (event, keycode, ascii);","[Parameters]","event: object type: (Number)","Receives the direction of key operation. For a list of values, see .","keycode: object type: (Number)","Receives the key code. For a list of key codes, see .","ascii: object type: (String)","Receives the character corresponding to the operated key.","If no character corresponds to the key code (such as with the F1 key), undefined is returned.","onDeviceData event \u201c(serial communication device)","This event receives data detected from a serial communication device.","Events are described in this format in a device control script  for serial communication.","[Syntax]","onDeviceData (data);","[Parameters]","data: object type: (Buffer)","Receives data received from a serial communication device.","Any event","This event is used to receive the results of API execution by a device object that runs on a browser.","[Syntax]","Name specified by callEvent (data);","[Parameters]","data: object type: (Object)","Receives the object specified by the callEvent parameter of the device object.","A sample program is described next.","The sample program described below enables use as a POS system. Sample code for a device API  can be created for each device.",{"@attributes":{"id":"p-1218","num":"1251"},"figref":["FIG. 91","FIG. 92"]},"The environment required to run the sample program is described below.","(1) Required devices (The sample program can be used without having all of the devices.)\n\n","(2) Required to operate the printer \n\n","(3) Other\n\n","The work flow for configuring the sample program environment is shown in .","If the Windows Security screen appears while using the TMNet TMNetWebConfig utility, enter your username and password.","1. Connect LAN cable\n\n","2. Register sample program\n\n","3. Connect devices\n\n","4. Configure devices\n\n","Registering the sample program is described next.",{"@attributes":{"id":"p-1230","num":"1276"},"figref":"FIG. 94","b":"5"},"Register the program using the following procedure.","1. Turn the printer  on.","2. Start the TMNet TMNetWebConfig using the shortcut on the desktop.","Select [Web service settings], [Web content], and then [Update settings] indicated by [2] in .","3. The \u201cWeb content update settings\u201d screen is displayed as shown in the frame on the right side of . Click on [Browse] indicated by [3] in , and select the sample program.","4. Next, click the [Upload] button indicated by [4] in  to register the sample program in the printer .","Configuring devices is described next.","Devices are configured using the TMNet TMNetWebConfig utility in this example.\n\n","Configuring the customer display is described next.",{"@attributes":{"id":"p-1240","num":"1289"},"figref":"FIG. 95"},"Register the display using the following procedure.","1. Start the TMNet TMNetWebConfig using the shortcut on the desktop.\n\n","2. The customer display settings screen shown in  is displayed. Select [Use] indicated by [2] in  and click the [Apply] button. There is no need to change the settings in this example.","Configuring a POS keyboard\/barcode scanner is described next.",{"@attributes":{"id":"p-1245","num":"1295"},"figref":"FIG. 96"},"Register the devices using the following procedure.","1. Check that a POS keyboard\/MSR\/barcode scanner is connected to the printer .","2. Start the TMNet TMNetWebConfig using the shortcut on the desktop.\n\n","3. The Key Input device screen shown in  is displayed. Set the Device ID, Device name, and Control script for each device in the appropriate places indicated by [3] in , and click the [Registration] button. Sample settings are shown in . Register one device at a time.","4. The registered device will be displayed in the [Registered key input device] field at [4] in .","Starting the sample program is described next.","Start the sample program (device_API_UM_J_Sample.zip) as follows.","1. Start the web browser, and enter the IP address of the printer  to the address bar. The default IP address of the printer  is \u201c192.168.192.168\u201d.","2. The sample program is displayed. An example of the display is shown in . If the sample program is not displayed, check if the LAN cable is connected.","Using the sample program","The sample program includes the following items. Selecting an item goes to the corresponding screen. Details of each sample are described below.\n\n","The Customer Display Sample is described in detail next.","This sample program enables operating the customer display and generating sample code for the customer display.","This sample is used as follows.","1. Start the sample program. Select [Customer Display Sample] in .","2. The Customer Display Sample screen shown in  is displayed. Click the [Connect] button in this screen. If connection is successful, the following message will be displayed in the Console frame. The display on the customer display will also change.","There is no need to change the settings in the Device Setting frame. However, if the IP address, for example, has changed, change the setting in the Device Setting frame accordingly.","3. Select the function to use in the screen shown in , and click the [Add] button.","4. The source code of the function added in step 3 is displayed in the [Display Object Sample Code] frame in . This code can be copied and reused.","5. When the [Send] button in the screen in  is clicked, the screen display will change according to the function added in step 3.","The Keyboard Sample is described in detail next.","This sample program enables acquiring input from a POS keyboard.","This sample is used as follows.","1. Start the sample program. Select [Keyboard Sample] in .","2. The Keyboard Sample screen shown in  is displayed. Click the [Connect] button. If connection is successful, the following message will be displayed in the Console frame.","There is no need to change the settings in the Device Setting frame. However, if the IP address, for example, has changed, change the setting in the Device Setting frame accordingly.","3. Select the key used to determine the beginning of a string, and click the [Set] button.","This setting must first be made on the POS keyboard side.","Example: F1+specified string+Enter","4. When there is input from the POS keyboard, the input result is displayed in the ePOS Device API Keyboard Object shown in . An example of input and the result is shown in .","The Printer Sample is described in detail next.","This sample program enables operating the printer and generating sample code for the printer.","The Printer Sample is used as follows.","1. Start the sample program. Select [Printer Sample] in .","2. The Printer Sample screen in  is displayed. Click the [Connect] button. If connection is successful, the following message will be displayed in the Console frame.","There is no need to change the settings in the Device Setting frame. However, if the IP address, for example, has changed, change the setting in the Device Setting frame accordingly.","3. Select the function to use in the screen shown in , and click the [Add] button.","4. The source code of the function added in step 3 is displayed in the [printer-Print API Sample Code] frame in . This code can be copied and reused.","5. When the [Send] button in the screen is clicked, a test print will be printed according to the function added in step 3.","The Barcode Scanner Sample is described in detail next.","This sample program enables acquiring input from a barcode scanner.","The Barcode Scanner Sample is used as follows.","1. Start the sample program. Select [Barcode Scanner Sample] in .","2. The Barcode Scanner Sample screen in  is displayed. Click the [Connect] button. If connection is successful, the following message will be displayed in the Console frame.","There is no need to change the settings in the Device Setting frame. However, if the IP address, for example, has changed, change the setting in the Device Setting frame accordingly.","3. When there is input from the barcode scanner, the read information is displayed in the ePOS Device API Scanner Object shown in .","The POS Terminal Sample is described in detail next.","This sample program enables operating like a POS system.","The POS Terminal Sample is used as follows.","Preparation is required first. In this preparation, start the sample program and configure each device.","1. Start the sample program. Select [POS Terminal Sample] in .","2. The POS Terminal Sample screen in  is displayed. Click the [Settings] button.","3. The Settings screen in  is displayed. The IP address, port, and device ID can be set in this screen. If a setting is changed, click the [Connect] button and confirm that the status is OK. After confirmation, close the window. Note that there is usually no need to change a setting.","Operation is described next.","The procedure from reading a product to issuing a receipt is described below.","1. Input a product from the barcode scanner or POS keyboard.\n\n","2. Enter the amount received in the screen shown in . Click the [Ent] button after entering the amount.","3. The amount of change due is displayed as shown in , and a receipt is printed from the printer.","As described above, a device control system  according to this embodiment of the invention has an application server  that serves a web application ; a terminal  that is connected to the application server  through a network and has a web browser  that displays the web application ; and a printer  that has a connection panel  to which a device connects, and controls the device connected to the connection panel . By means of the web application , the terminal  calls an object that controls a device and is instantiated by the device API  to support the device, and sends a request to the printer  by the web application ; and the printer  executes a device control script  that controls the device, receives requests sent through the device API , and controls the device connected to the connection panel .","The invention is not limited to device control system , and device control systems ,  can be similarly configured. In device control system , the printer  has the functions of the application server  ().","In device control system , the device control script  has a DeviceConnection object that sends\/receives data with a device, and a ClientConnection object that sends data to the device control API.","In device control system , the terminal  specifies a device connected to the printer  and sends a request to start control of the device to the printer , and the printer  sends a command by the device control script  to the device specified by the request and enables controlling the device.","When the device control system  has a first terminal  and a second terminal , the first terminal  specifies a device connected to the printer , sends a request to start control of the device to the printer , and the printer  enables controlling the device specified in the request, the device is exclusively locked and cannot be controlled by a request sent by the second terminal .","In this configuration, the printer  reports to the second terminal  that the device is busy when the second terminal  calls an object corresponding to the device of the device API .","In the device control system , the device connected to the printer  is a local printer or a network printer , and when the printer  enables control of the device specified by the request, the local printer or the network printer  can be controlled by the device control script  according to the request sent by the second terminal .","In the device control system , the terminal  specifies a device connected to the printer  and sends a request instructing ending device control to the printer , and the printer  sends a command by the device control script  to the device specified by the request and terminates the state enabling control of the device.","In the device control system , the terminal  specifies a device connected to the printer  and sends a request instructing ending device control to the printer ; the printer  sends a command by the device control script  to the device specified by the request and terminates the state enabling control of the device; and the device can be controlled by the printer  in response to a request sent by the second terminal .","In the device control system , the terminal  detects the connection status of an object instantiated by the device API  and the device control script  of the printer  by means of the device API .","In the device control system , the terminal  controls an object of the device API  by the web application , and calls an event of the device control script .","In the device control system , a customer display is connected to the printer  as a device, the terminal  sends a request to display on the customer display, and the printer  controls displaying on the customer display by the device control script  in response to the request.","In the device control system , a customer display is connected to the printer  as a device, the terminal  sends a request to display on the customer display, and the printer  displays the time on the customer display by the device control script  in response to the request, and stops displaying the time when a second request is sent while the time is displayed.","In the device control system , a printer is connected to printer  as a device, the terminal  sends a request to register image data in the printer by an object of the device control API, the printer  registers the image data in the printer specified by the request, and the printer prints the registered image data.","In the device control system , color image data rendered by HTML5 Canvas is converted to raster image data and registered in the printer according to a request sent by the terminal .","In the device control system , the terminal  specifies a device and sends a request instructing whether or not to encrypt data sent and received between the device and the terminal  by an object of the device control API.","The terminal  has an application server  that serves a web application , and a connection panel  to which devices connect, is connected through a network to a printer  that controls a device connected to the connection panel , has a web browser  that displays a web application , and through the web application  calls an object that controls a device and is instantiated by the device API  to support the device, sends a request to the printer , and causes the printer  to execute a device control script  that controls the device.","The foregoing embodiment obviously describes one example of the invention, and can be modified and adapted as desired within the scope of the accompanying claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 26A"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 26B"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 26C"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 42A"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 42B"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 42C"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 44"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 45A"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 45B"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 45C"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 46A"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 46B"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 47A"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 47B"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 47C"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 48A"},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 48B"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 48C"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 49A"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 49B"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 49C"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 50A"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 50B"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 50C"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 51A"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 51B"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 51C"},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 52A"},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 52B"},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 52C"},{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 52D"},{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 53A"},{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 53B"},{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIG. 53C"},{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 53D"},{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 54A"},{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 54B"},{"@attributes":{"id":"p-0107","num":"0106"},"figref":"FIG. 54C"},{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 54D"},{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 54E"},{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 54F"},{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 55A"},{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 55B"},{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 56A"},{"@attributes":{"id":"p-0114","num":"0113"},"figref":"FIG. 56B"},{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 57A"},{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 57B"},{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 58A"},{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 58B"},{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 58C"},{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 58D"},{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 59A"},{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 59B"},{"@attributes":{"id":"p-0123","num":"0122"},"figref":"FIG. 60A"},{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 60B"},{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 60C"},{"@attributes":{"id":"p-0126","num":"0125"},"figref":"FIG. 60D"},{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 60E"},{"@attributes":{"id":"p-0128","num":"0127"},"figref":"FIG. 60F"},{"@attributes":{"id":"p-0129","num":"0128"},"figref":"FIG. 60G"},{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 60H"},{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 60I"},{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 61A"},{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 61B"},{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIG. 61C"},{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 61D"},{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 61E"},{"@attributes":{"id":"p-0137","num":"0136"},"figref":"FIG. 61F"},{"@attributes":{"id":"p-0138","num":"0137"},"figref":"FIG. 61G"},{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 62A"},{"@attributes":{"id":"p-0140","num":"0139"},"figref":"FIG. 62B"},{"@attributes":{"id":"p-0141","num":"0140"},"figref":"FIG. 62C"},{"@attributes":{"id":"p-0142","num":"0141"},"figref":"FIG. 63A"},{"@attributes":{"id":"p-0143","num":"0142"},"figref":"FIG. 63B"},{"@attributes":{"id":"p-0144","num":"0143"},"figref":"FIG. 63C"},{"@attributes":{"id":"p-0145","num":"0144"},"figref":"FIG. 64A"},{"@attributes":{"id":"p-0146","num":"0145"},"figref":"FIG. 64B"},{"@attributes":{"id":"p-0147","num":"0146"},"figref":"FIG. 64C"},{"@attributes":{"id":"p-0148","num":"0147"},"figref":"FIG. 65"},{"@attributes":{"id":"p-0149","num":"0148"},"figref":"FIG. 66"},{"@attributes":{"id":"p-0150","num":"0149"},"figref":"FIG. 67A"},{"@attributes":{"id":"p-0151","num":"0150"},"figref":"FIG. 67B"},{"@attributes":{"id":"p-0152","num":"0151"},"figref":"FIG. 68A"},{"@attributes":{"id":"p-0153","num":"0152"},"figref":"FIG. 68B"},{"@attributes":{"id":"p-0154","num":"0153"},"figref":"FIG. 68C"},{"@attributes":{"id":"p-0155","num":"0154"},"figref":"FIG. 69A"},{"@attributes":{"id":"p-0156","num":"0155"},"figref":"FIG. 69B"},{"@attributes":{"id":"p-0157","num":"0156"},"figref":"FIG. 70A"},{"@attributes":{"id":"p-0158","num":"0157"},"figref":"FIG. 70B"},{"@attributes":{"id":"p-0159","num":"0158"},"figref":"FIG. 70C"},{"@attributes":{"id":"p-0160","num":"0159"},"figref":"FIG. 71A"},{"@attributes":{"id":"p-0161","num":"0160"},"figref":"FIG. 71B"},{"@attributes":{"id":"p-0162","num":"0161"},"figref":"FIG. 71C"},{"@attributes":{"id":"p-0163","num":"0162"},"figref":"FIG. 72A"},{"@attributes":{"id":"p-0164","num":"0163"},"figref":"FIG. 72B"},{"@attributes":{"id":"p-0165","num":"0164"},"figref":"FIG. 72C"},{"@attributes":{"id":"p-0166","num":"0165"},"figref":"FIG. 73A"},{"@attributes":{"id":"p-0167","num":"0166"},"figref":"FIG. 73B"},{"@attributes":{"id":"p-0168","num":"0167"},"figref":"FIG. 73C"},{"@attributes":{"id":"p-0169","num":"0168"},"figref":"FIG. 73D"},{"@attributes":{"id":"p-0170","num":"0169"},"figref":"FIG. 74A"},{"@attributes":{"id":"p-0171","num":"0170"},"figref":"FIG. 74B"},{"@attributes":{"id":"p-0172","num":"0171"},"figref":"FIG. 74C"},{"@attributes":{"id":"p-0173","num":"0172"},"figref":"FIG. 74D"},{"@attributes":{"id":"p-0174","num":"0173"},"figref":"FIG. 75A"},{"@attributes":{"id":"p-0175","num":"0174"},"figref":"FIG. 75B"},{"@attributes":{"id":"p-0176","num":"0175"},"figref":"FIG. 76A"},{"@attributes":{"id":"p-0177","num":"0176"},"figref":"FIG. 76B"},{"@attributes":{"id":"p-0178","num":"0177"},"figref":"FIG. 76C"},{"@attributes":{"id":"p-0179","num":"0178"},"figref":"FIG. 77"},{"@attributes":{"id":"p-0180","num":"0179"},"figref":"FIG. 78A"},{"@attributes":{"id":"p-0181","num":"0180"},"figref":"FIG. 78B"},{"@attributes":{"id":"p-0182","num":"0181"},"figref":"FIG. 78C"},{"@attributes":{"id":"p-0183","num":"0182"},"figref":"FIG. 78D"},{"@attributes":{"id":"p-0184","num":"0183"},"figref":"FIG. 79"},{"@attributes":{"id":"p-0185","num":"0184"},"figref":"FIG. 80"},{"@attributes":{"id":"p-0186","num":"0185"},"figref":"FIG. 81"},{"@attributes":{"id":"p-0187","num":"0186"},"figref":"FIG. 82"},{"@attributes":{"id":"p-0188","num":"0187"},"figref":"FIG. 83"},{"@attributes":{"id":"p-0189","num":"0188"},"figref":"FIG. 84"},{"@attributes":{"id":"p-0190","num":"0189"},"figref":"FIG. 85","b":"502"},{"@attributes":{"id":"p-0191","num":"0190"},"figref":"FIG. 86"},{"@attributes":{"id":"p-0192","num":"0191"},"figref":"FIG. 87"},{"@attributes":{"id":"p-0193","num":"0192"},"figref":"FIG. 88"},{"@attributes":{"id":"p-0194","num":"0193"},"figref":"FIG. 89"},{"@attributes":{"id":"p-0195","num":"0194"},"figref":"FIG. 90"},{"@attributes":{"id":"p-0196","num":"0195"},"figref":"FIG. 91"},{"@attributes":{"id":"p-0197","num":"0196"},"figref":"FIG. 92"},{"@attributes":{"id":"p-0198","num":"0197"},"figref":"FIG. 93"},{"@attributes":{"id":"p-0199","num":"0198"},"figref":"FIG. 94"},{"@attributes":{"id":"p-0200","num":"0199"},"figref":"FIG. 95"},{"@attributes":{"id":"p-0201","num":"0200"},"figref":"FIG. 96"},{"@attributes":{"id":"p-0202","num":"0201"},"figref":"FIG. 97"},{"@attributes":{"id":"p-0203","num":"0202"},"figref":"FIG. 98"},{"@attributes":{"id":"p-0204","num":"0203"},"figref":"FIG. 99A"},{"@attributes":{"id":"p-0205","num":"0204"},"figref":"FIG. 99B"},{"@attributes":{"id":"p-0206","num":"0205"},"figref":"FIG. 99C"},{"@attributes":{"id":"p-0207","num":"0206"},"figref":"FIG. 100A"},{"@attributes":{"id":"p-0208","num":"0207"},"figref":"FIG. 100B"},{"@attributes":{"id":"p-0209","num":"0208"},"figref":"FIG. 100C"},{"@attributes":{"id":"p-0210","num":"0209"},"figref":"FIG. 101A"},{"@attributes":{"id":"p-0211","num":"0210"},"figref":"FIG. 101B"},{"@attributes":{"id":"p-0212","num":"0211"},"figref":"FIG. 101C"},{"@attributes":{"id":"p-0213","num":"0212"},"figref":"FIG. 102A"},{"@attributes":{"id":"p-0214","num":"0213"},"figref":"FIG. 102B"},{"@attributes":{"id":"p-0215","num":"0214"},"figref":"FIG. 103A"},{"@attributes":{"id":"p-0216","num":"0215"},"figref":"FIG. 103B"},{"@attributes":{"id":"p-0217","num":"0216"},"figref":"FIG. 104A"},{"@attributes":{"id":"p-0218","num":"0217"},"figref":"FIG. 104B"},{"@attributes":{"id":"p-0219","num":"0218"},"figref":"FIG. 104C"}]},"DETDESC":[{},{}]}
