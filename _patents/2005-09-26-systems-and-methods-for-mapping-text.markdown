---
title: Systems and methods for mapping text
abstract: Methods and apparatus, including computer program products, are provided for mapping at run time a value, such as a technical identification (ID) key, to text based on a text association. In one exemplary embodiment, a computer-implemented method includes receiving at run time a request, from a user interface at a client computer, the request associated with an object at a server; instantiating, at a server, a service for mapping at run time the value to text based on the text association, the text association being determined before run time; and at run time providing to a user interface at the client computer, the text based on the text association, such that the text is responsive to the request from the user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685114&OS=07685114&RS=07685114
owner: SAP AG
number: 07685114
owner_city: Walldorf
owner_country: DE
publication_date: 20050926
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["I. Field of the Invention","The present invention relates to data processing and, more particularly, to mapping, at run time, a value, such as a technical identification (ID) key, to text.","II. Background of the Invention","A service represents a self-contained, self-describing program (also referred to as an application) that can be found and accessed by other applications. A service, such as a Web service, is self-contained because the application using the service does not have to depend on anything other than the service itself. A service is also self-describing because all the information on how to use the service can be obtained from the service itself. One example of the use of services is a Service Oriented Architecture (SOA). The SOA can be implemented as middleware, an example of which is SAP's Enterprise Service Framework (ESF).","The SOA can be used to aggregate services into enterprise services that provide meaningful building blocks for the task of automating business processes or tasks. These aggregated services are often referred to as business objects. An \u201cobject\u201d means a bundle of variables (e.g., data) and related methods accessed by a software application (also referred to herein as a program or an application). In object-oriented programming, an object is a concrete realization (instance) of a class that consists of data and the operations associated with that data. The phrase business object (BO) thus refers to a bundle of variables and related methods that can be used for describing a business process or task.","Aggregating services allows information technology (IT) organizations to efficiently develop composite applications, which are defined as applications that compose functionality and information from existing services to support new business processes or scenarios. The services can communicate using standard protocols, such as Simple Object Access Protocol (SOAP) and can be described in a central repository.","Furthermore, a SOA may use a repository for organizing services and the information that the services use and produce. An example of a service repository is the Enterprise Services Repository (ESR) of the Enterprise Service Framework (ESF), both of which are commercially available from SAP AG, Walldorf, Germany.","The present invention provides methods and apparatus, including computer program products, to automatically provide, at run time, a text instead of a value, such as an ID.","In one aspect of the present invention, a computer-implemented method may be provided for mapping at run time a value to a text. The method includes receiving at run time a request, from a user interface at a first computer, the request being associated with one or more object nodes; instantiating, at a second computer, a service for mapping at run time the value to the text based on a text association, the text association being determined before run time; and providing to the user interface at run time, the text determined based on the text association, such that the text is responsive to the request from the user interface.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention, as described. Further features and\/or variations may be provided in addition to those set forth herein. For example, the present invention may be directed to various combinations and subcombinations of the disclosed features and\/or combinations and subcombinations of several further features disclosed below in the detailed description.","Reference will now be made in detail to the invention, examples of which are illustrated in the accompanying drawings. The implementations set forth in the following description do not represent all implementations consistent with the claimed invention. Instead, they are merely some examples consistent with certain aspects related to the invention. Wherever possible, the same reference numbers will be used throughout the drawings to refer to the same or like parts.","A business object node (also referred to herein as an object node or a node) refers to a component of a business object. For instance, \u201cPurchase Order\u201d may be a business object, while a \u201cPurchase Order Item\u201d (e.g., a product such as a screw) may be a business object node. Every business object node may be uniquely identified. Each node may be assigned an identification number, which typically is a technical identifier (referred to herein as an ID). The identifier may not be meaningful (or readable) to a human reader.","A business object node may have a text description stored in a text field. A text field is a data structure that holds alphanumeric data, such as a name or an address. A text node may be a business object node containing at least one text field. A description of a business object node may be stored as text in a text field of a text node.","A business object node may have many text descriptions. For instance, if a business object node is a \u201cproduct,\u201d the product may map to various text descriptions. The product can be called \u201cscrew\u201d in English, \u201cschraube\u201d in German, and \u201ctornillo\u201d in Spanish, and so forth. Systems and methods consistent with the present invention may map, at run time, an ID to its corresponding text, and provide the corresponding text instead of the ID to a user interface.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","120","170","170","130","140","130","131","132","140","142","133","150"],"i":["a","b"]},"System  may be implemented as part of an enterprise services framework. An enterprise services framework is a computer framework that allows applications, such as services, to be aggregated to form composite business-level applications. Although  is described with respect to an enterprise services framework, system  can utilize any other framework or software architectural environment. For example, front end system  may be implemented as a client, and back end system  may be implemented as a server in a client server environment.","User  may be any entity. For example, user  may be a purchasing manager who fills out a purchase form through a user interface . User interface  may provide content, such as visual displays, to user . Moreover, user interface  may include a browser configured on front end system  for interacting with services, such as service adaptation . For example, the browser of user interface  may connect, at run time, to UI pattern engine  through network connections to view and interact with content from back end system  using the generic client proxy . User  may request, at run time, an instance of a business object (e.g., a purchase order form) through user interface . User interface  may then request a purchase order form configuration from front end system .","Network connections -may include, alone or in any suitable combination, a telephony-based network, a local area network (LAN), a wide area network (WAN), a dedicated intranet, wireless LAN, the Internet, a wireless network, a bus, or any other communication mechanisms. Further, any suitable combination of wired and\/or wireless components and systems may be used to provide network connections -. Moreover, network connections -may be embodied using bi-directional, unidirectional communication links, or direct links. Further, network connections -may implement protocols, such as Transmission Control Protocol\/Internet Protocol (TCP\/IP), Hyper Text Transfer Protocol (HTTP), Simple Object Access Protocol (SOAP), Remote Procedure Call (RPC), and the like.","UI pattern engine  may receive configuration information of the requested user interface design, such as the configuration information of the purchase order form, from user interface . The configuration information, such as the purchase order form and its configuration, may be predetermined (e.g., designed before run time). At run time, UI pattern engine  may interpret the configuration information, and transform the configuration information into an Application Programming Interface (API) call to service adaptation  through service manager  and generic client proxy . Run time represents the time period corresponding to the interactions of a user interface with applications, such as services, at a server.","Generic client proxy  may have an API that is accessible to UI pattern engine  and user interface . The service manager  at backend system  may provide an interface, such as a Remote Procedure Call (RPC) or a SOAP interface, to the generic client proxy  through network connection . Generic client proxy  may be implemented to control the functionality available to user interface . For example, service manager  may include a variety of functions, but user interface  may be allowed access only to a subset of those functions. Moreover, generic client proxy  may buffer data requested by user interface  and delivered by service manager .","Generic client proxy  may call an API at service manager . Service manager  may include a message handler for handling messages to and from service manager ; a change handler for handling changes affecting service adaptation  (e.g., changes that occur when data at the user interface  changes, such as button clicks, that affect a service provider or the corresponding business objects); a stack for storing changes associated with the change handler in a last in, first out manner is provided; and a controller for controlling dynamic properties of the instance (e.g., controlling at runtime whether a field is read-only, mandatory, invisible, enabled, and the like).","Service manager  may analyze the incoming API call from generic client proxy  that contains the configuration information of the requested user interface design, such as the configuration information of the purchase order form. If the configuration information requires ID to text mapping, service manager  may instantiate an instance of service adaptation  and pass the configuration information to service adaptation . Service manager  may ask service adaptation  to create an adapted object node, which has a structure containing all ID to text mapping text fields. For example, a designer may design a purchase order form to indicate that a product ID should be replaced at run time with descriptive text corresponding to the ID. In this example, service manager  may instantiate an instance of service adaptation  to implement ID to text mapping. Service manager  may ask service adaptation  to create an adapted object node containing a text field, which may be used for mapping product ID to product description.","Service adaptation  may instantiate a business object node according to the configuration information received from front end system . As noted above, a business object node refers to a component of a business object. At run time, service adaptation  creates an adapted business object node according to the configuration information received from front end system . Adapted business object node  is described below with respect to . Adapted business object node  may then be used by service manager  when responding to the incoming API call from generic client proxy  to map ID to text.","Enterprise services repository  stores and organizes metadata about business objects and the related services. Enterprise services repository  may also store business object attributes, business object node structures, and relations among business objects. At design time, designer (also referred to as developer) may retrieve existing services from enterprise services repository  to help design new services and inter-relationships between services. At run time, service adaptation  may search for information stored in enterprise services repository .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2A","FIG. 2A"],"b":["220","221","230","230","231","226","150","231","231","220","230","230","230","220","231","230","220","231","230","133","220","231"],"i":["a ","b","a","a ","a ","a ","a "]},"The composition of the nodes of  may be considered a schema. A schema is the organization or structure, such as the organization of a database or the structure of an object in an object oriented program. In object oriented programming, modeling (i.e., the analysis of objects that are used in a business or other context and the identification of the relationships among these data objects) leads to a schema, which can be stored in repository .","Business object node  may be referred to as a primary node since it may be primary to one or more text nodes. The ID-to-text mapping provided by service adaptation  may associate business object node  to a corresponding text node  by following text association . Business object node  may include a field to indicate whether it has a text association. For example, business object node  may include a \u201cText Enabled\u201d field  to indicate whether node  is associated with a text node, such as node . Business object node  may be implemented so that when node  has a text association, the text enable field  is checked (e.g., true or yes); when node  does not have a text association, the text enable field  is not checked (e.g., false or no). The use of text enable field  may improve the processing at run time for ID to text mapping. Alternatively, users of business object node  may loop over all available associations and look for any association with type \u201cID-Text-Mapping.\u201d","At design time, a designer may separate text description  from primary node  by first creating a data field of type having a declared type (e.g., ccts:Description ). The separation of text  from primary node  thus enables the designer to create a text association to map an ID to text for business objects. At run time, service adaptation  may provide an ID to text mapping by using the declared type (e.g., \u201cccts:Description\u201d ) as an indicator for finding the text field for the ID to text mapping of text node .","Text node  may also include a language code attribute  for describing the language of text field . Moreover, to maintain the consistency of text nodes, at design time, a designer may create text nodes by making copies from a common template stored in enterprise services repository . The following table provides an example of a text node template stored in enterprise services repository , although other templates can also be used to create text nodes.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Structure","Description","Type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BONodeText",{},{}]},{"entry":[{},"LanguageCode","Language Code","xsd:token"]},{"entry":[{},"CountryCode","Country Code","xsd:token"]},{"entry":[{},"LongText","Long Text","xsd:string"]},{"entry":[{},"MediumText","Medium Text","xsd:string"]},{"entry":[{},"ShortText","Short Text","xsd:string"]},{"entry":[{},"MobileText","Text for Mobile Devices","xsd:string"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"Referring to Table 1, \u201cLanguageCode\u201d indicates the language of the text. \u201cCountryCode\u201d represents a country associated with the selected language code. \u201cLongText,\u201d \u201cMediumText,\u201d \u201cShortText,\u201d and \u201cMobileText\u201d refer to different text formats. For example, if the text is provided over a mobile phone, the format, in this example \u201cMobileText,\u201d may be different when compared to providing text over a wired network.","Node  may be considered a primary node, and may have many text associations, such as and . Each ID may map to many text fields, but each text field may map to only one ID. For example, one product ID \u201c4711\u201d may have text associations and to its product descriptions in many languages, such as English , German , and so forth. But text field  (e.g., \u201cscrew\u201d) may map to only one product ID \u201c4711.\u201d A designer may create a text association filter to filter out all but one text association at run time. For example, when primary node  has multiple text associations, at run time, service adaptation  may use a text association filter for filtering out all but one text association when mapping the ID to text. The text association filter can use the language code to filter out text associations for all languages but the specified language code. In some cases, the logon language may be the specified language for the text association filter. Alternatively, if the text association filter is not used, the logon language can be the default language of text delivered to front end system  when the ID is mapped to text.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2B","b":["225","133","225","133","133","225","225","220","133","225","228","227"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 2C","b":["220","330","355","330","221","220","220","330","220","360","355","355","330","220"]},"When service adaptation  provides ID to text mapping, service adaptation may determine the foreign key associations, such as foreign key association  of primary node , and the corresponding secondary nodes, such as node . Secondary node  may have a text field or, if it is text enabled, a text association . When secondary node  has a text association , service adaptation  may determine, based on text association , text node  and then retrieve text . Alternatively, the secondary node may have a text field instead of a text association. In that case, service adaptation  may retrieve the text directly from the text field of the secondary node. As such, service adaptation  for ID to text mapping may automatically resolve foreign key associations and deliver requested text to front end system  at run time.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIGS. 1"],"b":["2","2","2","120","110","110","133","120","132","142","220","222"]},"At run time, UI pattern engine  may determine the configuration information of the requested business object node  and transform the configuration information for node  into instructions for an API call to other components, such as generic client proxy , service manager , and\/or service adaptation . For example, by making such an API call, UI pattern engine  may retrieve text corresponding to an ID for business object node . To request the text corresponding the ID , UI pattern engine  may call the API of generic client proxy , which makes an outbound call to the API of service manager  (step ). Returning to the above example of a purchase order form, the purchase order form design may require that the product description be displayed instead of the product ID  for business object node . UI pattern engine  may make an API call to generic client proxy  to request the retrieval of the product description corresponding to product ID .","In response to the API call from generic client proxy , service manager  may instantiate, at back end system , service adaptation  for ID to text mapping (step ).","To service the call from generic client proxy  for an ID to text mapping, service adaptation  may instantiate an adapted node, such as node  at  (step ). Returning to the above example of a purchase order form, the API call from generic client proxy  contains the configuration information for displaying node  in a purchase order form at user interface . The configuration information may indicate that a text description is required to display node . Service adaptation  for ID to text mapping may create adapted node  with an additional text field . Text field  may be blank when the adapted node is first instantiated. However, text field  will hold the text for product description when service adaptation  for ID to text mapping retrieves the text based on text association ","As shown in , primary node  has text association . When service adaptation  makes a call for ID to text mapping, service adaptation  may perform a text retrieval operation on primary node . From primary node , service adaptation  may resolve text association by following text association to text node  (step ). For example, text association may be a pointer or key that maps node  to node . After finding text node , service adaptation  may copy the product description text \u201cscrew\u201d from text node  into text field  of adapted node  (step ).","As shown in , when primary node  has a foreign key association, service adaptation  may follow the foreign key association, such as foreign key association  of primary node , to find the corresponding secondary node, such as node . Secondary node  may have a text field or, if it is text enabled, a text association . When secondary node  has a text association , service adaption  may navigate to, based on text association , text node , and then retrieve text . Alternatively, the secondary node may have a text field instead of a text association. In that case, service adaptation  may retrieve the text directly from the text field of the secondary node (step ).","After the text has been retrieved and placed into the text field  of the adapted node , service adaptation  has mapped ID to text and may thus deliver the text to front end system  as adapted node  (step ).","The systems and methods disclosed herein may be embodied in various forms including, for example, a data processor, such as a computer that also includes a database, digital electronic circuitry, firmware, software, or in combinations of them. Moreover, the above-noted features and other aspects and principles of the present invention may be implemented in various environments. Such environments and related applications may be specially constructed for performing the various processes and operations according to the invention or they may include a general-purpose computer or computing platform selectively activated or reconfigured by code to provide the necessary functionality. The processes disclosed herein are not inherently related to any particular computer, network, architecture, environment, or other apparatus, and may be implemented by a suitable combination of hardware, software, and\/or firmware. For example, various general-purpose machines may be used with programs written in accordance with teachings of the invention, or it may be more convenient to construct a specialized apparatus or system to perform the required methods and techniques.","The systems and methods disclosed herein may be implemented as a computer program product i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine readable storage device, for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","It is to be understood that the foregoing description is intended to illustrate and not to limit the scope of the invention, which is defined by the scope of the appended claims. Other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which constitute a part of this specification, illustrate various embodiments and aspects of the present invention and, together with the description, explain the principles of the invention. In the drawings:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
