---
title: Techniques to remotely access form information and generate a form
abstract: Techniques to remotely access form information are described. An apparatus may comprise a logic device and an application having a form manager component operative on the logic device to manage one or more forms for a user interface of the application. The form manager component may be arranged to generate a form with form information retrieved from a web service using a form information query. The form information query may comprise a data structure having static form configuration information, dynamic form configuration information, or a combination of static form configuration information and dynamic form configuration information. The dynamic form configuration information may have one or more dynamic form parameters used to retrieve information from the web service. The dynamic form parameters may be dynamically generated during runtime operation of the application. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09524283&OS=09524283&RS=09524283
owner: SAS INSTITUTES INC.
number: 09524283
owner_city: Cary
owner_country: US
publication_date: 20110830
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A user interface is a system by which people (users) interact with an electronic device, such as a computer. In general, a user interface allows users to input information to manipulate an electronic device. A user interface also allows an electronic device to output information as to the effects of the manipulation. In computing, a graphical user interface (GUI) is a type of user interface that allows users to interact with electronic devices with images rather than text commands. A GUI represents the information and actions available to a user through graphical icons and visual indicators such as secondary notation, as opposed to text-based interfaces, typed command labels or text navigation. The actions are usually performed through direct manipulation of the graphical elements.","A form is a type of GUI view that is specifically designed to allow a user to enter data in a structured manner for processing by an electronic device. A form provides an input template comprising various combinations of checkboxes, radio buttons, text fields, and other GUI elements designed to query and display data. This type of form is sometimes referred to as an \u201celectronic form\u201d to distinguish it from its physical counterpart, such as a paper document with blank spaces for insertion of required or requested information.","Conventional electronic forms typically present a list or column of valid values for certain fields so that the user can be prompted to select a value. These values may either come from a static data source or a dynamic data source. A static data source, such as a list, may be encoded in an application program as source code during development prior to compilation as an executable file. Use of a static data source for a form makes changing values of the static list difficult, and in some cases, technically infeasible. Dynamic data sources of values are typically different application programs, such as databases or spreadsheets that can be edited by a user or form designer. For instance, a spreadsheet may have a series of cells, with each cell holding a value for presentation in a value list for a field of a form. When a user changes a value of a given cell in the spreadsheet, the value list reflects the change when presented by a field of the form. In many cases, a dynamic data source is implemented in a same device as an application generating a form. This type of implementation severely limits a number of dynamic data sources and forces a user to manage a given dynamic data source. In some cases, a dynamic data source is implemented in a different device as an application generating a form. For instance, a web form on a web page allows a user to enter data that is sent to a web service implemented on a server for processing. In some cases, a web form can present values in a field of the web form that are stored by the server. However, similar to static lists, a web form is limited to a static query of the web service that must be specified at design time. It is with respect to these and other considerations that the present improvements are needed.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended as an aid in determining the scope of the claimed subject matter.","One embodiment may be implemented as an apparatus comprising a logic device and an application having a form manager component operative on the logic device to manage one or more forms for a user interface of the application. The form manager component may be arranged to generate a form with form information retrieved from a web service using a form information query. The form information query may comprise a data structure having static form configuration information, dynamic form configuration information, or a combination of static form configuration information and dynamic form configuration information. Other embodiments are described and claimed.","These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.","Embodiments are generally directed to enhanced form management techniques to remotely access form information for an electronic form generated as part of a user interface for an application. Some embodiments are particularly directed to enhanced form management techniques arranged to allow a form generated by an application executing on a client device to obtain form information for the form from a dynamic data source located on a server device, such as a web service, during execution of the application generating the form. The dynamic data source may store static form information or dynamic form information suitable for presentation in one or more fields of an electronic form.","A remote dynamic data source, such as a web service, tends to be multi-purpose and therefore is capable of returning a lot of information fields. The enhanced form management techniques allow for extracting a set of form values and associated data (e.g., label fields) from that plethora of information. A form designer of a field prompt using a web service for values will supply configuration information as properties of the enhanced form management technique. This information may include, for example, a uniform resource location (URL) of a web service, one or more query statements (e.g., extensible markup language (XML) path language (XPATH) style statements), namespaces (e.g., XML namespaces), security parameters, proxy or firewall parameters, a software architecture for the web service (e.g., SOAP or REST), and so forth. Configuration options may vary depending upon a particular web service style selected for a given implementation. The enhanced form management techniques also provide a unique data structure for the configuration information.","The enhanced form management techniques use the supplied configuration information (e.g., XPATH statements and XML namespaces) to extract values from the form information (e.g., XML document) returned by the web service at runtime. Because form values can be represented as either XML elements or attributes, the enhanced form management techniques support extracting from many different software architectures.","The enhanced form management techniques provide several advantages over conventional form management techniques. For instance, the use of a dynamic data source located remotely from the application generating the form allows for remote or third-party management of form information, thereby reducing or eliminating the burden of form value management from a user or form developer. This also facilitates software updates by allowing changes to static or dynamic form information in a centralized location rather than modifying a distributed number of application programs or devices. In another example, the use of a dynamic data source allows for up-to-date form information for a given form, thereby providing robust and timely form values for the given form and the application generating the form. In yet another example, rather than limiting a form designer to a static query of a web service that must be specified at design time, the enhanced form management techniques allow for dynamic queries based on other values specified in the form and on heuristically derived values from the user's computer or mobile device. The form designer can supply a form information query with designated places for substitution parameters. The enhanced form management techniques may then supply the substitution values which will be placed into the form information query, where designated, before calling the web service. In still another example, the XML resulting from conventional web service queries is all read as text even though some of the results should be considered as numbers, dates, times, or other non-text values. The enhanced form management techniques allow a form designer to specify a data type for the returned values. This data type can then be used to coerce the data returned from the web service into a standard form for that data type. By examining the data type, a viewer can display the values in a suitable format. It may be appreciated that other advantages exist as well.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 1","FIGS. 25, 26","FIG. 1"],"b":["100","100","100","100"]},"In various embodiments, the dynamic form system  may comprise or implement multiple components or modules. As used herein the terms \u201ccomponent\u201d and \u201cmodule\u201d are intended to refer to computer-related entities, comprising either hardware, a combination of hardware and software, software, or software in execution. For example, a component and\/or module can be implemented as a process running on a processor, a hard disk drive, multiple storage drives (of optical and\/or magnetic storage medium), an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component and\/or module. One or more components and\/or modules can reside within a process and\/or thread of execution, and a component and\/or module can be localized on one computer and\/or distributed between two or more computers as desired for a given implementation. The embodiments are not limited in this context.","In various embodiments, the dynamic form system  may be implemented by one or more electronic devices each having computing and\/or communications capabilities. Example computing devices may include without limitation a mobile device, a personal digital assistant, a mobile computing device, a smart phone, a cellular telephone, a handset, a one-way pager, a two-way pager, a messaging device, a computer, a personal computer (PC), a desktop computer, a laptop computer, a notebook computer, a handheld computer, a tablet computer, a server, a server array or server farm, a web server, a network server, an Internet server, a work station, a mini-computer, a mainframe computer, a supercomputer, a network appliance, a web appliance, multiprocessor systems, processor-based systems, or any combination thereof. The embodiments are not limited in this context.","In various embodiments, components and\/or modules of the dynamic form system , and any electronic devices implementing some or all of the components and\/or modules of the dynamic form system , may be communicatively coupled via various types of communications media as indicated by various lines or arrows. The devices, components and\/or modules may coordinate operations between each other. The coordination may involve the uni-directional or bi-directional exchange of information. For instance, the devices, components and\/or modules may communicate information in the form of signals communicated over the communications media. The information can be implemented as signals allocated to various signal lines. In such allocations, each message is a signal. Further embodiments, however, may alternatively employ data messages. Such data messages may be sent across various connections. Exemplary connections within a device include parallel interfaces, serial interfaces, and bus interfaces. Exemplary connections between devices may comprise network connections over a wired or wireless communications network.","In various embodiments, the dynamic form system  may be implemented as part of a distributed system. A distributed system typically comprises multiple autonomous computers that communicate through a computer network. The computers interact with each other in order to achieve a common goal, such as solving computational problems. For example, a computational problem may be divided into many tasks, each of which is solved by one computer. A computer program that runs in a distributed system is called a distributed program, and distributed programming is the process of writing such programs. Examples of a distributed system may include without limitation a client-server architecture, a 3-tier architecture, an N-tier architecture, a tightly-coupled or clustered architecture, a peer-to-peer architecture, a master-slave architecture, a shared database architecture, and other types of distributed systems. It is worthy to note that although some embodiments may utilize a distributed system when describing various enhanced interactive form techniques, it may be appreciated that the enhanced interactive form techniques may be implemented by a single computing device as well. The embodiments are not limited in this context.","In the illustrated embodiment shown in , the dynamic form system  comprises a logic device  and a web service  communicatively coupled by a network . The logic device  may further comprise an application  and a user interface component . The application  may further comprise a form manager component . The web service  may further comprise a form information source  having one or more sets of form information . The dynamic form system  may further comprise a form viewer , with the form viewer  arranged to present a user interface view , a form  and various amounts of form information .","The logic device  may comprise any electronic device capable of executing a defined set of logic. In one embodiment, the logic device  may comprise a processing system. The processing system may comprise, for example, a general purpose processor or a special purpose processor and one or more memory units, as described in more detail with reference to . The embodiments, however, are not limited in this context.","The application  may comprise any application program that generally allows a user to accomplish one or more specific tasks. In various implementations, the application  may provide a graphical user interface (GUI) to communicate information between the application  and a user via an output device, such as an electronic display. Examples of applications  may include without limitation information technology (IT) management applications, human resource management applications, financial management applications, business intelligence applications, customer relationship management applications, report generating applications, statistical analysis applications, business planning applications, project management applications, productivity applications, word processing applications, spreadsheet applications, database applications, and so forth. In one embodiment, for example, the application  may be implemented as one or more SAS\u00ae software application programs made by SAS Institute Inc., Cary, N.C., such as SAS\/Management Console, SAS Information Map Studio, SAS Web Report Studio, Business Intelligence (BI) Dashboard, and so forth. The embodiments, however, are not limited to these examples.","The form manager component  may be operative on the logic device  to generate, modify, or otherwise manage one or more forms  for the application . In one embodiment, the forms  may be implemented as part of a user interface view  of the application .","A form  is a type of GUI view, or portion of a GUI view, that is specifically designed to allow a user to enter data in a structured manner for processing by the logic device . A form  provides an input template comprising various GUI elements, such as checkboxes, radio buttons, text fields, and other GUI elements designed to query and present data for a user. Similar to a paper form, a form  may comprise a combination of GUI elements arranged in a defined pattern to solicit requested or required information from a user. In one embodiment, a form  may comprise one or more fields capable of receiving or presenting values of different data types (e.g., text, numbers, symbols, etc.). In one embodiment, a form  may comprise one or more fields each capable of presenting a list or column of valid form values for the respective field. A user may then select a form value from the list of the form values to populate a respective field. In one embodiment, for example, the lists of form values may be stored by a dynamic data source, such as the web service .","The form manager component  may be generally arranged to generate a form  with form information  retrieved from a web service  using a form information query . The form information query  may comprise a data structure having, among other types of information, static form configuration information, dynamic form configuration information, or a combination of static form configuration information and dynamic form configuration information. The form information query , and associate types of information, may be described in more detail with reference to .","In various embodiments, the user interface component  may generally provide a user interface, such as a GUI, for the application . The user interface component  may be implemented natively as part of the application , or as part of another software program, such as an operating system (OS) or other system program. In one embodiment, the user interface component  may be operative on the logic device  to generate the user interface view  with the form  and the received form information  in the form  for presentation on an electronic display.","The network  may communicate information between the logic device  and the web service , as well as any other network devices connected to the network . The network  may comprise any type of private or public network, including packet-switched networks (e.g., public networks such as the Internet, private networks such as an enterprise intranet, and so forth), circuit-switched networks (e.g., the public switched telephone network), or a combination of packet-switched networks and circuit-switched networks (with suitable gateways and translators). Further, the network  may be implemented as a wired network, a wireless network, or a combination of both.","When implemented as a wired network, for example, the network  may include one or more elements arranged to communicate information over one or more wired communications media. Examples of wired communications media may include a wire, cable, printed circuit board (PCB), backplane, switch fabric, semiconductor material, twisted-pair wire, co-axial cable, fiber optics, and so forth. The wired communications media may be connected to a device using an input\/output (I\/O) adapter. The I\/O adapter may be arranged to operate with any suitable technique for controlling information signals between elements using a desired set of communications protocols, services or operating procedures. The I\/O adapter may also include the appropriate physical connectors to connect the I\/O adapter with a corresponding communications medium. Examples of an I\/O adapter may include a network interface, a network interface card (NIC), disc controller, video controller, audio controller, and so forth. The embodiments are not limited in this context.","When implemented as a wireless network, for example, the network  may include one or more wireless elements arranged to communicate information over one or more types of wireless communication media. An example of wireless communication media may include portions of a wireless spectrum, such as the radio-frequency (RF) spectrum. The wireless elements may include components and interfaces suitable for communicating information signals over the designated wireless spectrum, such as one or more antennas, wireless transmitters, receiver, transmitters\/receivers (\u201ctransceivers\u201d), amplifiers, filters, control logic, antennas, and so forth. The embodiments are not limited in this context.","The web service  may comprise any software system designed to support interoperable machine-to-machine interaction over the network . In one embodiment, the web service  has an interface described in a machine-processable format, such as a web services description language (WSDL) format. Other systems interact with the web service  in a manner prescribed by its description using simple object access protocol (SOAP) messages, typically conveyed using hypertext transfer protocol (HTTP) with an XML serialization in conjunction with other web-related standards. The web service  may use different classes of web services. Two major classes of web services may include representational state transfer (REST)-compliant web services, in which the primary purpose of the service is to manipulate XML representations of web resources using a uniform set of \u201cstateless\u201d operations, and arbitrary web services, in which the service may expose an arbitrary set of operations. The web service  may implement web services using a number of different techniques, including without limitation remote procedure call (RPC) techniques, service-oriented architecture (SOA) techniques, and REST techniques. The embodiments are not limited in this context.","In various embodiments, the web service  may comprise one or more form information sources . Each of the form information sources  may comprise dynamic data sources storing various types of form information . The form information sources  may be implemented using various database technologies, such as a database management system (DBMS). The form information  may comprise any defined multimedia information suitable for presentation in a given form , including media content, voice information, video information, audio information, image information, textual information, numerical information, alphanumeric symbols, graphics, and so forth.","In various embodiments, the form viewer  is arranged to present a form  as part of a user interface view . The form viewer  may be implemented as part of the logic device  or some other electronic device. In one embodiment, the form viewer  may comprise software integrated with the application , or implemented as a separate stand-alone software program. Additionally or alternatively, the form viewer  may comprise an electronic device having specialized viewing software. In one embodiment, the form viewer  may be operative on the logic device  to present the user interface view  with the form  and the received form information  in the form  on the electronic display.","The form manager component  may be used for two general classes of operations. The first class of operation is associated with designing a form  for use with the application . This includes designing a specific instance of a form information query  to retrieve form information  from the web service . The first class of operations is typically performed in response to control directives received from a form designer of a given form . The second class of operation is associated with using the form information query  defined during the design phase to make a web service call to retrieve form information  for the form  from the web service  at run-time of the application , and presenting the web information  on an electronic display. The second class of operations is typically performed in response to control directives received from a user of a given form .","In a model-view-controller (MVC) design pattern of the application , the form manager component  is part of the model. Any user interface view  can be implemented to allow configuration of properties of the form manager component  and for displaying its results. Setting properties and obtaining results may be accomplished via one or more application programming interfaces (APIs) provided by the form manager component  (or associated libraries).","The form manager component  may support a number of different types of web services techniques. In one embodiment, for example, the form manager component  is arranged to support both the REST and SOAP style of web service calls. Some configuration options may vary for each style so the form manager component  provides correspondingly different data schemas for each style. Each data schema can handle the settings that are common to either style of web service call. In this case, the form manager component  provides two concrete subclasses with an API suitable for setting the options of each style.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 2","FIG. 2"],"b":["100","200","122","202","110","204"]},"The static form configuration information  may comprise one or more static form parameters -used to retrieve form information  from the web service . The static form parameters -are configuration parameters that normally do not change during run-time operation of the application  and\/or the form manager component . As such, the static form parameters -are typically stored before the application  and\/or the form manager component  is executing on the logic device . For instance, the static form parameters -may be stored as part of a configuration file for a form  during the design phase of the form .","It is worthy to note that \u201ca\u201d and \u201cb\u201d and \u201cc\u201d and similar designators as used herein are intended to be variables representing any positive integer. Thus, for example, if an implementation sets a value for a=5, then a complete set of static form parameters -may include static form parameters -, -, -, - and -. The embodiments are not limited in this context.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["100","300","122","302","110","302","154","152","120","154","304","144","304","306","306","304","1","304","1"],"i":["b ","b "]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 4","FIG. 4","FIG. 1"],"b":["100","400","122","402","110","404","404","104","404","144","304","154","140","204"],"i":"b "},"In various embodiments, the static form configuration information  may comprise one or more static query parameters -. The static query parameters -may represent parameters that typically do not change over time or during run-time of the application . As such, the static query parameters -may be hard-coded parameter values provided by a form designer during a design phase for a form , such as network information, web service information, form information, form field information, and so forth. As shown in , examples of static query parameters -for a form information query  may include without limitation a network address - for the web service , a command (CMD) - comprising a control directive for the web service , a service request identifier (ID) - indicating a web service style, and a company name - comprising form field information. It may be appreciated that the form information query  may include other static query parameters -as well. The embodiments are not limited in this context.","In operation, the form information module  may retrieve the static query parameters -of the static form configuration information , and generate a web service call  to the web service . For instance, as shown in , a web service call  may comprise:\n\n",{"@attributes":{"id":"p-0066","num":"0066"},"figref":"FIG. 5","b":["100","500","500","122","144","140","404","404","144","304","1","154","140","204","402","144","508","1","140","304","1","154"]},"In the illustrated embodiment shown in , the form manager component  of the application  may generate a form  presented as part of a user interface view  generated by the user interface component . A user may select a form field - of the form  via the pointer  as illustrated in . The form manager component  may implement the form information module  operative on the logic device  to generate the form information query  as described with reference to , and send the form information query  to the web service .","The web service  may receive the form information query , and retrieve form information  from a form information source  in response to the form information query . The form information  may comprise one or more form value sets -. The web service  may retrieve a form value set - from among the form value sets -, and send the form value set - to the logic device . The form manager component  may receive the form value set -, and present one or more form values from the form value set - in the form field - of the form  in the user interface view .",{"@attributes":{"id":"p-0069","num":"0069"},"figref":["FIG. 6","FIG. 6"],"b":["100","600","122","602","110","604","606","144","140","122","606","120","110"],"i":["e ","e "]},"The dynamic form configuration information  may comprise one or more dynamic form parameters -used to retrieve form information  from the web service . The dynamic form parameters -are configuration parameters that can change during run-time operation of the application  and\/or the form manager component . As such, the dynamic form parameters -do not need to be stored before the application  and\/or the form manager component  is executing on the logic device  (e.g., during the design phase of the form ). For instance, a dynamic form parameter -may be predicated on user control directives when selecting certain form information , such as a form value from the form value set - previously retrieved by the form manager component  and presented in the form field -. In another example, a dynamic form parameter -may be predicated on a current location for the logic device . Other examples are described in more detail below, and the embodiments are not limited in this context.",{"@attributes":{"id":"p-0071","num":"0071"},"figref":["FIG. 7","FIG. 7"],"b":["100","700","122","402","704","704","104","704","144","304","154","140","604"],"i":"b "},"In various embodiments, the dynamic form configuration information may comprise one or more dynamic query parameters -. The dynamic query parameters -may represent parameters that typically do change over time or during run-time of the application . As such, the dynamic query parameters -may not necessarily be hard-coded parameter values provided by a form designer during a design phase for a form . As shown in , examples of dynamic query parameters -for a form information query  may include without limitation a location value - for the logic device , a query value - for the form information query , a query text - for the form information query , and a form value - comprising form value for the form . It may be appreciated that the form information query  may include other dynamic query parameters -as well. The embodiments are not limited in this context.","In operation, the form information module  may retrieve the dynamic query parameters -of the dynamic form configuration information , and generate a web service call  to the web service . For instance, as shown in , a web service call  may comprise:\n\n","Additionally or alternatively, the form information query  may retrieve form information  for a form field -of the form  from the web service  using a combination of static form configuration information  and dynamic form configuration information . Along with one or more dynamic query parameters -, the form information query  may optionally include one or more static query parameters -",{"@attributes":{"id":"p-0075","num":"0076"},"figref":["FIG. 8","FIG. 8","FIG. 8","FIG. 5","FIG. 8"],"b":["100","800","122","302","110","154","152","120","154","304","144","304","1","508","1","802","508","1","154","122","304","306","306","304","1","802","508","1","306","802","2","304","1"],"i":["b ","g","b ","g "]},{"@attributes":{"id":"p-0076","num":"0077"},"figref":["FIG. 9","FIG. 9"],"b":["100","900","122","402","110","704","144","304","2","154","140","604"]},"In one embodiment, the dynamic form configuration information  may comprise a form value - from a first form value set - of a first form field - of the form . The form information module  may receive the form information  comprising a second form value set - from the web service  for presentation in the second form field - of the form .","In the illustrated embodiment shown in , the form manager component  of the application  may generate the form  presented as part of the user interface view  generated by the user interface component . A user may select a form value - from a first form value set - of a first form field - of the form  as illustrated in . The form manager component  may implement the form information module  operative on the logic device  to generate the form information query  with the form value - as a dynamic query parameter -(e.g., a form value -) as described with reference to , and send the form information query  to the web service .","The web service  may receive the form information query , and retrieve form information  from a form information source  in response to the form information query . The form information  may comprise one or more form value sets -. The web service  may retrieve a form value set - from among the form value sets -, and send the form value set - to the logic device . The form manager component  may receive the form value set -, and present one or more form values from the form value set - in the form field - of the form  in the user interface view .",{"@attributes":{"id":"p-0080","num":"0081"},"figref":["FIG. 10","FIG. 10","FIG. 10"],"b":["100","1000","122","302","110","154","152","120","154","304","144","304","1","802","2","306","508","1","304","2","508","2","902","802","2","304","1"],"i":["b ","h "]},"In the illustrated embodiment shown in , the form viewer  illustrates a user interface view  having the form  with the form value - presented in the form field -, as previously selected by a user via pointer  as described with reference to , and a list of form values -from the value set - in the form field -, as previously retrieved from the web service  via the form information query  with the form value - as described with reference to . A user may then select one of the form values -, and repeat retrieval operations for a next form field -. These operations may continue for as many nested levels of the form fields -as desired for a given implementation. The embodiments are not limited in this context.","Form Design Phase","As previously described, different forms  may be designed and coded by various form designers during a form design phase. The enhanced form management techniques may include a software development kit (SDK) and\/or software library comprising a collection of resources used to develop a form . The SDK and\/or software library may include application programming interfaces (APIs), pre-written code and subroutines, classes, values or type specifications useful in form design.","During the form design phase, an initial determination is made regarding a web services style used by the form manager component  for a given web service . Exemplary web services styles include REST-style web services and SOAP-style web services. The form manager component  may generate different form information queries  for each web service style.","For REST-style web services, a form designer may define a set of static form parameters -needed for REST-style web service call. The first static form parameter - needed is an endpoint URL for the web service . The static form parameter - may comprise a network address - of the web service  that will return the form information . The URL may contain a query with one or more parameters and values. An example of this (similar to the web service call ) is shown as follows:\n\n","For SOAP-style web services, three static query parameters -are needed for a SOAP-style service call. The form designer needs to provide: (1) the endpoint reference; (2) the SOAP message; and (3) the action to invoke upon the web service . The action is defined by the WSDL of the web service  that will be invoked.","As described with reference to , the form manager component  may provide a substitution string as defined by one or more dynamic query parameters -for any value in an endpoint URL or value in a SOAP message at run-time of the application  rather than being a hard-coded constant supplied by the form designer during the design phase. One possible implementation is for a form designer to represent a substituted value as a field by a special delimiter character (\u201cA\u201d) in front of the name. For example, assume the following web service endpoint:\n\n","The form manager component  may provide these user-selections at run-time. The form manager component  accepts a collection of fields and values as defined by the dynamic query parameters -for query substitution into its storage structure. The dynamic query parameters -will be used at run-time to match up user selections in a form  with the appropriate fields identified by the special delimiter character in the endpoint URL or SOAP message so that proper substitution occurs. The form manager component  provides URL encoding of the query values in case values contain blanks or other characters that are invalid in a URL. Continuing with the above-referenced example, if the collection of user-selected values contains ^hueLo=blue and ^hueHigh=purple, the form manager component  will send a service endpoint request of\n\n","In addition to the above, a form designer needs to supply some additional static query parameters -and\/or dynamic query parameters -that are common to both REST-style and SOAP-style web services, as follows:\n\n","Form Execution Phase","Once a form  has been designed, the application  and\/or the form manager component  may store the form  for use by the application . When the application  is executing, that is operating in a run-time mode, the form manager component  may enter a form execution phase to generate the form  for rendering by an electronic display. A user may interact with the form  to cause the form information module  of the form manager component  to initiate retrieval operations for form information  from the web service . Run-time operations during the form execution phase may be described with reference to .","Operations for the above-described embodiments may be further described with reference to one or more logic flows. It may be appreciated that the representative logic flows do not necessarily have to be executed in the order presented, or in any particular order, unless otherwise indicated. Moreover, various activities described with respect to the logic flows can be executed in serial or parallel fashion. The logic flows may be implemented using one or more hardware elements and\/or software elements of the described embodiments or alternative elements as desired for a given set of design and performance constraints. For example, the logic flows may be implemented as logic (e.g., computer program instructions) for execution by a logic device (e.g., a general-purpose or specific-purpose computer).",{"@attributes":{"id":"p-0093","num":"0102"},"figref":"FIG. 11","b":["1100","1100","1100","100","122"]},"In the illustrated embodiment shown in , the logic flow  may generate a form for a user interface of an application at block . For instance, the form manager component  may generate a form  for a user interface view  generated by the user interface component  of the application .","The logic flow  may generate a form information query for the form, the form information query comprising a data structure having static form configuration information, dynamic form configuration information, or a combination of static form configuration information and dynamic form configuration information, at block . For instance, the form information module  of the form manager component  may generate one or both of form information queries ,  for the form . The form information queries ,  may each comprise a data structure having static form configuration information , dynamic form configuration information , or a combination of static form configuration information  and dynamic form configuration information .","The logic flow  may send the form information query to a web service at block . For instance, the form information module  may send one or both of the form information queries ,  to the web service . The web service  may process the received form information queries , , retrieve one or more form value sets -of form information  from the form information source , and send the retrieved form value sets -to the logic device . It is worthy to note that a given form value set -may comprise zero or more members. It is also worthy to note that a form value set -may be sent in a number of different data formats, such as an XML document, for example. The embodiments are not limited in this context.","The logic flow  may receive form information in response to the form information query from the web service at block . For instance, the form manager component  may receive the form information  in response to the form information queries , from the web service . The form manager component  may process the form information  to retrieve the form value sets -prior to presenting the form information . For instance, if the form value sets -are sent as part of an XML document, the form manager component  may parse the XML document using the static query parameters -and\/or dynamic query parameters -to retrieve the form value sets -","The logic flow  may present the form information in a field of the form on the user interface of the application at block . For instance, the form manager component  may present the form information  in a field -of the form  on the user interface view  of the application . In one embodiment, the form manager  may present the form information  in the form  using the form viewer .",{"@attributes":{"id":"p-0099","num":"0108"},"figref":"FIG. 12","b":["1200","1200","1200","100","122","122","204","604"]},"The form information module  may optionally receive context options as dynamic form configuration information . The context options are settings that are independent of those needed to define the web service calls , . Examples include a URL and port number of a proxy server needed for passage through a firewall. Another example would be security credentials since these tend to change over time and should not be stored as static form configuration information . The keys in the map of options should start with a prefix specified as static form configuration information  during the design phase for a form . The keys should end with constants published in an API of the form information module . The form information module  will look for keys in the options map and set all available options on itself.","In the illustrated embodiment shown in the logic flow , the form information module  may generate a form information query ,  which may optionally include receiving query substitution values selected by a user as stored by the dynamic query parameters -at block . In the case of a REST-style web service, this may include receiving an endpoint URL , a REST web service configuration , and a query type  (e.g., HTTP GET or HTTP POST). In the case of a SOAP-style web service, this may include receiving a SOAP web service configuration , an endpoint reference , a SOAP message , and a web service action . The form information module  will then insert any substitution values into a form information query , using a templating algorithm, before it is submitted to the web service . Referring to a previous example, the form information module  may receive \u201cDuke Energy\u201d as the name of the power company whose carbon emissions a user wants to retrieve. Then the form information module  will insert \u201cDuke%20Energy\u201d into a form information query  as previously described.","The form information module  performs URL encoding at block , and executes the form information query  at block . The form information module  makes the framework call to the web service  which returns an XML result with the form information . The form information module  may use any third-party framework that can contact the web service  and apply XPATH statements to the returned XML. The form information module  initializes the third-party framework by applying static query parameters -and dynamic query parameters -from a storage object to the framework. Specifically, the form information module  applies any run-time options passed in via keys on the context. It also applies the REST-style or SOAP-style query to the framework.","The form information module  receives the XML result with the form information , and processes the results at block . In order to process the XML results, the form information module  retrieves static query parameters -and\/or dynamic query parameters -representing value column XPATH statements with optional attributes , label columns XPATH statements and optional attributes , XML namespaces , and output data type .","The form information module  uses information ,  and  to extract form values -, -from the XML result at block . The form information module  applies the XPATH statements with optional attributes  for the value column and the XPATH statements with optional attributes  for all label columns to the XML result along with all of the XML namespace definitions . If any value or label column is associated with an XML attribute, that attribute is inserted into the XPATH statement before the statement is applied to the XML result.","The form information module  then converts the extracted form values -, -using the output data type  at block . The character data obtained from the value and label XML results are put into lists for each column. The lists are set on a data structure representing a column of values. Header text is also taken from a storage structure for the form information module , and put on each column data structure. The data type of the value column is taken from the storage structure and put on the column data structure for the value column.","The form information module  passes the collection of all column data structures to the form manager component  as the return value of an API method so that the values and labels can be displayed to the user on the form . The user can then select from among the form values -, -shown in order to answer the particular prompt associated with the form .",{"@attributes":{"id":"p-0107","num":"0116"},"figref":["FIG. 13","FIG. 12"],"b":["1300","1300","1300","100","122","1202"]},"In the illustrated embodiment shown in , the logic flow  may determine whether a prompt depends on other prompts at block . For instance, the form information module  may determine whether the form information module  should generate a form information query  with static query parameters -, or a form information query  with dynamic query parameters -or a combination of static query parameters -and dynamic query parameters -","If the form information module  determines to generate a form information query , without any substitution strings, the form information module  moves on to perform URL encoding at block .","If the form information module  determines to generate a form information query , with substitution strings, the form information module  obtains prompt values from the answered prompts at block . For instance, the form information module  may obtain prompt values as stored by one or more form values - of the dynamic query parameters -. The form information module  may match up the prompt values by prompt name with the delimited fields in the web service call  at block . The form information module  may then replace the delimited fields with the answered prompts at block . The form information module  then performs URL encoding at block .",{"@attributes":{"id":"p-0111","num":"0120"},"figref":["FIG. 14","FIG. 12"],"b":["1400","1400","1400","100","122","1210"]},"In this illustrated embodiment shown in , the form information module  may extract from information  from a returned XML result for a given column at block . The form information module  may prepare an XPATH statement by combining a path, an attribute name and all supplied XML namespaces at block . The form information module  may apply the XPATH statement to the XML result and put form information  into a data transfer object for the column at block . The form information module  may apply a data type to the data transfer object to convert extracted form information  at block . The form information module  may determine whether more columns remain to be processed at diamond . If yes, then the operations of blocks ,  and  are repeated. If no, then the form information module  returns the data transfer objects to the form manager component  for presentation on an electronic display.",{"@attributes":{"id":"p-0113","num":"0122"},"figref":"FIG. 15","b":["1500","1500","100","1520"]},"The computing device  may execute processing operations or logic for the system  using a processing component . The processing component  may comprise various hardware elements, software elements, or a combination of both. Examples of hardware elements may include devices, logic devices, components, processors, microprocessors, circuits, circuit elements (e.g., transistors, resistors, capacitors, inductors, and so forth), integrated circuits, application specific integrated circuits (ASIC), programmable logic devices (PLD), digital signal processors (DSP), field programmable gate array (FPGA), memory units, logic gates, registers, semiconductor device, chips, microchips, chip sets, and so forth. Examples of software elements may include software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. Determining whether an embodiment is implemented using hardware elements and\/or software elements may vary in accordance with any number of factors, such as desired computational rate, power levels, heat tolerances, processing cycle budget, input data rates, output data rates, memory resources, data bus speeds and other design or performance constraints, as desired for a given implementation.","The computing device  may execute communications operations or logic for the dynamic form system  using communications component . The communications component  may implement any well-known communications techniques and protocols, such as techniques suitable for use with packet-switched networks (e.g., public networks such as the Internet, private networks such as an enterprise intranet, and so forth), circuit-switched networks (e.g., the public switched telephone network), or a combination of packet-switched networks and circuit-switched networks (with suitable gateways and translators). The communications component  may include various types of standard communication elements, such as one or more communications interfaces, network interfaces, network interface cards (NIC), radios, wireless transmitters\/receivers (transceivers), wired and\/or wireless communication media, physical connectors, and so forth. By way of example, and not limitation, communication media  includes wired communications media and wireless communications media. Examples of wired communications media may include a wire, cable, metal leads, printed circuit boards (PCB), backplanes, switch fabrics, semiconductor material, twisted-pair wire, co-axial cable, fiber optics, a propagated signal, and so forth. Examples of wireless communications media may include acoustic, radio-frequency (RF) spectrum, infrared and other wireless media .","The computing device  may communicate with other devices ,  over a communications media  using communications signals  via the communications component . For instance, assume the logic device , the application , the form manager component , and the user interface component  are implemented by a server as part of a cloud computing framework. For instance, the application  may comprise a SAS software application such as BI software or statistical analysis software implemented as a hosted application by a server array represented by the computing device . The client device  may comprise a smart phone or a tablet computer accessing the computer device  to execute and manipulate the application  and the form manager component , including generating and populating a form . The server device  may host a web service  for storing form information  for the form . Form information  may be communicated between the devices , ,  as communications signals  via communications media .",{"@attributes":{"id":"p-0117","num":"0126"},"figref":"FIG. 16","b":["1600","1600","100","1600","3"]},"The client system  and the server system  may process information using the processing components , which are similar to the processing component  described with reference to . The client system  and the server system  may communicate with each over a communications media  using communications signals  via communications components , which are similar to the communications component  described with reference to .","In one embodiment, for example, the distributed system  may be implemented as a client-server system. A client system  may implement the dynamic form system , a browser , a processing component , and a communications component . A server system  may implement the web service , a processing component , and a communications component . In various embodiments, the client system  may comprise or employ one or more client computing devices and\/or client programs that operate to perform various methodologies in accordance with the described embodiments. For instance, assume the logic device , the application , the form manager component , and the user interface component  are all implemented by a client system , such as a smart phone, hand held computer, or tablet computer. In this case, the application  may comprise a SAS software application such as BI software or statistical analysis software implemented as a client application on the client system . The client system  may execute and manipulate the application  and the form manager component , including generating a form . The form manager component  may populate the form  with form information  stored by the server system .","In various embodiments, the server system  may comprise or employ one or more server computing devices and\/or server programs that operate to perform various methodologies in accordance with the described embodiments. For example, when installed and\/or deployed, a server program may support one or more server roles of the server computing device for providing certain services and features. Exemplary server systems  may include, for example, stand-alone and enterprise-class server computers operating a server OS such as a MICROSOFT\u00ae OS, a UNIX\u00ae OS, a LINUX\u00ae OS, or other suitable server-based OS. Exemplary server programs may include, for example, communications server programs for managing incoming and outgoing messages, messaging server programs for providing unified messaging (UM) for e-mail, voicemail, VoIP, instant messaging (IM), group IM, enhanced presence, and audio-video conferencing, and\/or other types of programs, applications, or services in accordance with the described embodiments. In one embodiment, the server system  may implement a web services framework for hosting a web service . The web service  may store form information  for the form  managed by the client system . Form information  may be communicated between the client system  and the server system  as communications signals  via communications media .",{"@attributes":{"id":"p-0121","num":"0130"},"figref":"FIG. 17","b":["1700","100","1700","1702","1704","406","154","1700","1702","1704","1706"],"i":"c "},{"@attributes":{"id":"p-0122","num":"0131"},"figref":"FIG. 18","b":["1800","100","1800","1802","1804","406","140","154","1800","1802","1804","1806"],"i":"c "},{"@attributes":{"id":"p-0123","num":"0132"},"figref":"FIG. 19","b":["1900","100","1900","144","140","1900","1902","1904","1904","1902","1902","1904","404","704","406","706"],"i":["c ","f "]},{"@attributes":{"id":"p-0124","num":"0133"},"figref":"FIG. 20","b":["2000","100","2000","154","144","140","154","144","1900","140"]},"More particularly, the GUI view  illustrates an example of a simple cascading prompt using two form fields -, - as prompts. A label  for \u201cPower Company\u201d prompts a form information query  to the web service  for all US power companies as form values -. The returned values populate the combo box of available values for the first prompt labeled \u201cPower Company.\u201d The GUI view  shows that the user selected \u201cDuke Energy\u201d as a form value - from among form values -as described with reference to . The form  may further comprise a label  of \u201cPlant Name\u201d and an empty form field -. After a user selects the form field -, the form manager component  may generate a form information query  specifying \u201cDuke Energy\u201d as part of the query string to retrieve a set of power plants associated with the name \u201cDuke Energy.\u201d",{"@attributes":{"id":"p-0126","num":"0135"},"figref":["FIG. 21","FIG. 20"],"b":["2100","100","2100","154","144","140","304","1","704","2004","902","2100","902","2006","120","154"],"i":["h","h"]},{"@attributes":{"id":"p-0127","num":"0136"},"figref":"FIG. 22","b":["2200","100","2200","150","154","140","2202","304","1","802","1","802","122"],"i":"g "},{"@attributes":{"id":"p-0128","num":"0137"},"figref":["FIG. 23","FIG. 22"],"b":["2300","100","2300","140","404","704","140","144","304","1","304","2","304","3","304","4"]},{"@attributes":{"id":"p-0129","num":"0138"},"figref":["FIG. 24","FIG. 23"],"b":["2400","100","2400","150","2402","2404","2402","2404"]},{"@attributes":{"id":"p-0130","num":"0139"},"figref":"FIG. 25","b":["2500","100","2500","2500"]},"As shown in , the computing architecture  comprises a processing unit , a system memory  and a system bus . The processing unit  can be any of various commercially available processors. Dual microprocessors and other multi-processor architectures may also be employed as the processing unit . The system bus  provides an interface for system components including, but not limited to, the system memory  to the processing unit . The system bus  can be any of several types of bus structure that may further interconnect to a memory bus (with or without a memory controller), a peripheral bus, and a local bus using any of a variety of commercially available bus architectures.","The system memory  may include various types of memory units, such as read-only memory (ROM), random-access memory (RAM), dynamic RAM (DRAM), Double-Data-Rate DRAM (DDRAM), synchronous DRAM (SDRAM), static RAM (SRAM), programmable ROM (PROM), erasable programmable ROM (EPROM), electrically erasable programmable ROM (EEPROM), flash memory, polymer memory such as ferroelectric polymer memory, ovonic memory, phase change or ferroelectric memory, silicon-oxide-nitride-oxide-silicon (SONOS) memory, magnetic or optical cards, or any other type of media suitable for storing information. In the illustrated embodiment shown in , the system memory  can include non-volatile memory  and\/or volatile memory . A basic input\/output system (BIOS) can be stored in the non-volatile memory .","The computer  may include various types of computer-readable storage media, including an internal hard disk drive (HDD) , a magnetic floppy disk drive (FDD)  to read from or write to a removable magnetic disk , and an optical disk drive  to read from or write to a removable optical disk  (e.g., a CD-ROM or DVD). The HDD , FDD  and optical disk drive  can be connected to the system bus  by a HDD interface , an FDD interface  and an optical drive interface , respectively. The HDD interface  for external drive implementations can include at least one or both of Universal Serial Bus (USB) and IEEE 1394 interface technologies.","The drives and associated computer-readable media provide volatile and\/or nonvolatile storage of data, data structures, computer-executable instructions, and so forth. For example, a number of program modules can be stored in the drives and memory units , , including an operating system , one or more application programs , other program modules , and program data . The one or more application programs , other program modules , and program data  can include, for example, the dynamic form system , the IPC component , the remote event bridge , and other software elements described with the embodiments.","A user can enter commands and information into the computer  through one or more wire\/wireless input devices, for example, a keyboard  and a pointing device, such as a mouse . Other input devices may include a microphone, an infra-red (IR) remote control, a joystick, a game pad, a stylus pen, touch screen, or the like. These and other input devices are often connected to the processing unit  through an input device interface  that is coupled to the system bus , but can be connected by other interfaces such as a parallel port, IEEE 1394 serial port, a game port, a USB port, an IR interface, and so forth.","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adaptor . In addition to the monitor , a computer typically includes other peripheral output devices, such as speakers, printers, and so forth.","The computer  may operate in a networked environment using logical connections via wire and\/or wireless communications to one or more remote computers, such as a remote computer . The remote computer  can be a workstation, a server computer, a router, a personal computer, portable computer, microprocessor-based entertainment appliance, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although, for purposes of brevity, only a memory\/storage device  is illustrated. The logical connections depicted include wire\/wireless connectivity to a local area network (LAN)  and\/or larger networks, for example, a wide area network (WAN) . Such LAN and WAN networking environments are commonplace in offices and companies, and facilitate enterprise-wide computer networks, such as intranets, all of which may connect to a global communications network, for example, the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a wire and\/or wireless communication network interface or adaptor . The adaptor  can facilitate wire and\/or wireless communications to the LAN , which may also include a wireless access point disposed thereon for communicating with the wireless functionality of the adaptor .","When used in a WAN networking environment, the computer  can include a modem , or is connected to a communications server on the WAN , or has other means for establishing communications over the WAN , such as by way of the Internet. The modem , which can be internal or external and a wire and\/or wireless device, connects to the system bus  via the input device interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, can be stored in the remote memory\/storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.","The computer  is operable to communicate with wire and wireless devices or entities using the IEEE 802 family of standards, such as wireless devices operatively disposed in wireless communication (e.g., IEEE 802.11 over-the-air modulation techniques) with, for example, a printer, scanner, desktop and\/or portable computer, personal digital assistant (PDA), communications satellite, any piece of equipment or location associated with a wirelessly detectable tag (e.g., a kiosk, news stand, restroom), and telephone. This includes at least Wi-Fi (or Wireless Fidelity), WiMax, and Bluetooth\u2122 wireless technologies. Thus, the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices. Wi-Fi networks use radio technologies called IEEE 802.11x (a, b, g, etc.) to provide secure, reliable, fast wireless connectivity. A Wi-Fi network can be used to connect computers to each other, to the Internet, and to wire networks (which use IEEE 802.3-related media and functions).",{"@attributes":{"id":"p-0141","num":"0150"},"figref":"FIG. 26","b":["2600","100","130","2600","2600"]},"As shown in , the communications architecture  comprises includes one or more clients  and servers . The clients  may implement the client systems , . The servers  may implement the server system . The clients  and the servers  are operatively connected to one or more respective client data stores  and server data stores  that can be employed to store information local to the respective clients  and servers , such as cookies and\/or associated contextual information.","The clients  and the servers  may communicate information between each other using a communication framework . The communications framework  may implement any well-known communications techniques, such as techniques suitable for use with packet-switched networks (e.g., public networks such as the Internet, private networks such as an enterprise intranet, and so forth), circuit-switched networks (e.g., the public switched telephone network), or a combination of packet-switched networks and circuit-switched networks (with suitable gateways and translators). The clients  and the servers  may include various types of standard communication elements designed to be interoperable with the communications framework , such as one or more communications interfaces, network interfaces, network interface cards (NIC), radios, wireless transmitters\/receivers (transceivers), wired and\/or wireless communication media, physical connectors, and so forth. By way of example, and not limitation, communication media includes wired communications media and wireless communications media. Examples of wired communications media may include a wire, cable, metal leads, printed circuit boards (PCB), backplanes, switch fabrics, semiconductor material, twisted-pair wire, co-axial cable, fiber optics, a propagated signal, and so forth. Examples of wireless communications media may include acoustic, radio-frequency (RF) spectrum, infrared and other wireless media. One possible communication between a client  and a server  can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and\/or associated contextual information, for example.","Some embodiments may comprise an article of manufacture. An article of manufacture may comprise a storage medium to store logic. Examples of a storage medium may include one or more types of computer-readable storage media capable of storing electronic data, including volatile memory or non-volatile memory, removable or non-removable memory, erasable or non-erasable memory, writeable or re-writeable memory, and so forth. Examples of the logic may include various software elements, such as software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. In one embodiment, for example, an article of manufacture may store executable computer program instructions that, when executed by a computer, cause the computer to perform methods and\/or operations in accordance with the described embodiments. The executable computer program instructions may include any suitable type of code, such as source code, compiled code, interpreted code, executable code, static code, dynamic code, and the like. The executable computer program instructions may be implemented according to a predefined computer language, manner or syntax, for instructing a computer to perform a certain function. The instructions may be implemented using any suitable high-level, low-level, object-oriented, visual, compiled and\/or interpreted programming language.","Some embodiments may be described using the expression \u201cone embodiment\u201d or \u201can embodiment\u201d along with their derivatives. These terms mean that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","Some embodiments may be described using the expression \u201ccoupled\u201d and \u201cconnected\u201d along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example, some embodiments may be described using the terms \u201cconnected\u201d and\/or \u201ccoupled\u201d to indicate that two or more elements are in direct physical or electrical contact with each other. The term \u201ccoupled,\u201d however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other.","It is emphasized that the Abstract of the Disclosure is provided to comply with 37C.F.R. Section 1.72(b), requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment. In the appended claims, the terms \u201cincluding\u201d and \u201cin which\u201d are used as the plain-English equivalents of the respective terms \u201ccomprising\u201d and \u201cwherein,\u201d respectively. Moreover, the terms \u201cfirst,\u201d \u201csecond,\u201d \u201cthird,\u201d and so forth, are used merely as labels, and are not intended to impose numerical requirements on their objects.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 26"}]},"DETDESC":[{},{}]}
