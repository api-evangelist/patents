---
title: System and method for managing connections
abstract: Embodiments of the invention are generally directed to a system and method for managing connections. A filter may receive a client request message having one or more parameters. In an embodiment, the filter may modify the request message based, at least in part, on the one or more parameters. The modified request message may indicate that a connection to the client is to remain open after a corresponding response message is sent. In an embodiment, the modified request message is passed to an application for processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07571236&OS=07571236&RS=07571236
owner: SAP AG
number: 07571236
owner_city: Walldorf
owner_country: DE
publication_date: 20040607
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","Listing 1","Listing 2","Listing 3"],"p":["Embodiments of the invention generally relate to the field of data processing systems and, more particularly, to a system and method for managing connections.","Many businesses are providing access to their products and services through applications that are delivered over computer networks such as the Internet. These applications typically have a multi-tiered architecture. In those cases where the applications are delivered over the Internet they are commonly referred to as Web applications.  is a block diagram of a Web application  having a multi-tiered architecture.","Web application  includes client layer , application layer , and database layer . Client layer  includes user interface  that runs on a client computing device such as a desktop computer, a laptop computer, a personal digital assistant, a telephone, and the like. In a Web-based environment, user interface  is typically a Web browser. User interface  may collect input from a user and provide that input to application layer  for processing.","Application layer  includes application server  to receive and process input from client layer . Application server  typically includes a number of subcomponents including, for example, connectivity layer , presentation logic , business logic , and database interface . Connectivity layer  provides connections to client layer  using protocols such as the HyperText Transfer Protocol (HTTP). The HTTP protocol refers to any of the HTTP protocols including, for example, the protocol described in Request For Comments (RFC) 2616 entitled, \u201cHyperText Transport Protocol\u2014HTTP\/1.1,\u201d June 1999 (hereinafter, the HTTP protocol). Presentation logic  generates a Graphical User Interface (GUI) using, for example, a markup language such as the Hyper Text Markup Language (HTML). Business logic  represents the core of the application, for example, the rules governing the underlying business process (or other functionality) provided by the application. Database interface layer  provides an interface to database layer . The Java 2 Enterprise Edition Specification v1.3, published on Jul. 27, 2001 (the J2EE Standard) defines an increasingly popular architecture for application layer .","Database layer  includes data access logic used by business logic  to store and retrieve data in database . Database  provides non-volatile storage (sometimes referred to as a persistent store) for the data accessed and\/or processed by application layer . Database  may be, for example, a relational database or an object-oriented database.","In a Web-based environment, presentation logic  may be provided by a Web component such as a servlet. A servlet refers to a server-side Web component that interacts with a client through a request\/response protocol. For example, the servlet may receive a request message, perform some processing, and return a response message to the client. A servlet processes a request message using a service method. Typically, the request\/response messages are implemented according to one of the HTTP protocols.","In conventional Web applications, the connection to a client is automatically closed when the servlet exits its service method and the response message is sent to the client. Also, conventional Web applications release the message processing resources (e.g., finalize request\/response objects) after the response message is sent to the client. Thus, in conventional Web applications, the client is no longer accessible after the response message is sent.","Embodiments of the invention are generally directed to a system and method for managing connections. A filter may receive a client request message having one or more parameters. In an embodiment, the filter may modify the request message based, at least in part, on the one or more parameters. The modified request message may indicate that a connection to the client is to remain open after a corresponding response message is sent. In an embodiment, the modified request message is passed to an application for processing.","Embodiments of the invention are generally directed to a system and method for managing connections. A filter may receive a client request message having one or more parameters. In an embodiment, the filter may modify the request message based, at least in part, on the one or more parameters. The modified request message may indicate that a connection to the client is to remain open after a corresponding response message is sent. As is further described below, the modified request message may be passed to an application for processing.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["200","200","200","210","220","230"]},"Client  provides request messages to (and receives response messages from) application server  over, for example, network . Client  may be, for example, a personal computer, a laptop computer, a personal digital assistant, a telephone, another application server, and the like. In one embodiment, client  provides request messages that are based, at least in part, on the HTTP protocol. Network  may be, for example, any combination of a wired or wireless Local Area Network (LAN), Wide Area Network (WAN), Metropolitan Area Network (MAN), intranet, and\/or the Internet.","Application server  receives the request message from client  and may generate a response message after processing the request message. In an embodiment, application server  is based, at least in part, on the J2EE standard. In an alternative embodiment, application server  may be based on a different platform such as Microsoft Corporation's .Net platform or IBM's Websphere platform. The illustrated embodiment of application server  includes connectivity provider , Web container , Enterprise Java Bean container , and persistency layer . In an alternative embodiment, application server  may include more elements, fewer elements, and\/or different elements.","In an embodiment, connectivity provider  provides the low-level communication service that enables Web container  to exchange request\/response messages with client . In one embodiment, connectivity provider  implements, at least in part, the HTTP protocol. Connectivity provider  may receive request messages having Uniform Resource Identifiers (URIs) that map to a given server\/port combination. Connectivity provider  may parse the received request message to determine which resource (e.g., which application) is invoked by the request.","In an embodiment, the invoked resource includes Web component  of Web container . The term Web component broadly refers to server-side software that extends the functionality of application server . Web component  may be, for example, a servlet, a Java Server Page (JSP), a portlet, and the like. In an embodiment, Web container  provides one or more services to Web component . The services provided by Web container  may include, for example, lifecycle management, security, connectivity, transactions, and\/or persistence.","In an embodiment, Web container  receives a request message from connectivity provider  and parses it to determine which Web component is invoked by the request. In one embodiment, the request message is modified to indicate that a connection to the client is to remain open after a corresponding response message is sent to client . Similarly, the request message may be modified to indicate that the request message is to be maintained (e.g., in memory) after the corresponding response message is sent to client . Modifying the request message is further discussed below with reference to .","The modified request message is passed to Web component  for processing. In an embodiment, Web component  may, for example, access static HTML content or generate dynamic HTML content to generate a response message. In addition, Web component  may access business logic to process the modified request message. For example, in a J2EE environment, Web component  may invoke one or more methods of Enterprise Java Bean (EJB)  to process a request message. EJB  is a server-side component that encapsulates business logic and\/or represents persistently stored data. In such an embodiment, EJB container  may provide one or more services to EJB  such as lifecycle management, security, connectivity, transactions, and\/or persistence. In an embodiment, persistency layer  provides Web component  with access to a persistent store.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":["300","300","310","320","330","300"]},"Filter  is a class that wraps itself around Web component  and intercepts inbound request messages (and\/or outbound response messages). Filter  may perform various pre and\/or post processing on the intercepted request\/response message. As is further discussed below, in one embodiment, filter  modifies inbound request messages to indicate that a connection to the client is to be maintained after the corresponding portion of a response message is sent. Typically, Web component  writes only a portion of a response message. For ease of discussion, the term \u201cresponse message\u201d may refer to that portion of a response message that is written by a Web component (e.g., Web component ).","Web container  receives request message  from, for example, connectivity provider , shown in . Web container  parses request message  to determine which Web component to invoke and also to obtain one or more parameters (e.g., input parameters such as a URI that specifies a requested resource). In one embodiment, Web container  maintains a pool of request\/response objects -. Each request\/response object may include methods that Web component  may use to manipulate the object. In such an embodiment, Web container  may initialize a pair of request\/response objects with the parameters obtained from the request message. The initialized request\/response objects may then be passed to filter .","Various properties of Web container  and the applications deployed to it may be described in one or more descriptor files. The descriptor files may be written in a markup language (e.g., the extensible Markup Language (XML)) to ensure portability of the files. A globally accessible descriptor file may define initial settings that may be relevant to all Web applications running within Web container . This globally accessible file may be used to declare the availability of various filters, application components, etc. For example, the global file may declare the availability of filter . Listing 1 illustrates one example of declaring filter  in a globally accessible file for Web container .",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<filter>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<filter-name>Filter310<\/filter-name>"]},{"entry":[{},"<filter-class >Name of the package containing"]},{"entry":[{},"the filter class(es) <\/filter-class >"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/filter>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In addition to the globally accessible file, in one embodiment, each Web application has an associated descriptor file (e.g., a J2EE deployment descriptor). The availability of Web component  may be declared in this application specific descriptor (often referred to as a Web.xml file) file. In an embodiment, filter  is applied to Web component  by providing an appropriate filter mapping for filter  in Web component 's descriptor file. Listing 2 illustrates one example of specifying that filter  maps to Web component .",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<filter-mapping>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<filter-name>Filter310<\/filter-name>"]},{"entry":[{},"<url-pattern>\/WebComponent320 <\/url-pattern >"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/filter-mapping >"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Filter  receives request\/response objects - from Web container . In one embodiment, Filter  generates modified request\/response objects - by copying the parameters from request\/response objects - into modified request\/response objects -. The original request\/response objects - may then be returned to object pool . Thus, the resources used by Web container  to process HTTP request message  (e.g., HTTP threads and request\/response objects -) are available to process another inbound HTTP request message.","In one embodiment, modified request\/response objects - include an indication that the response stream to the client is to be maintained (rather than automatically closed) after the response message is sent to the client. Similarly, in an embodiment, modified request\/response objects - may include an indication that they are to be maintained (e.g., in memory) rather than finalized (as per the J2EE specification) after the response message is sent. In one embodiment, the \u201cindication\u201d provided by modified request\/response objects - is one or more flags set to indicate, for example, that a connection to the client is to be maintained after the response message is sent. In alternative embodiments, the \u201cindication\u201d provided by modified request\/response objects - may be different than one or more set flags.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4"},"State diagram  includes HTTP handler , filter , and servlet . The term \u201chandler\u201d refers to a software routine that performs a particular task. In one embodiment HTTP handler  is an implementation of one or more interfaces specified in the HTTP protocol. HTTP handler  takes request\/response objects - from object pool  and initializes them with connection information . The term \u201cconnection information\u201d broadly refers to information used to form (and\/or manage) a connection in a request\/response protocol such as a sender's address, a destination address, a port number, and the like. The term \u201cconnection information\u201d also refers to internal connection information such as a dispatcher node identifier, an identifier of the connection on the dispatcher processing the relevant socket, and the like.","In an embodiment, HTTP handler  parses request object  to determine if filter  is mapped to the requested URI (e.g., the URI of servlet ). If filter  is not mapped to the requested URI, then HTTP handler  may pass request\/response objects - to servlet  as shown by reference numeral . If filter  is mapped to the requested URI, then HTTP handler  may pass request\/response objects - to filter  as shown by reference numeral .","Filter  generates modified request\/response objects - and copies connection information  to modified request\/response objects -. In an embodiment, at least one of modified request\/response objects - include flag(s) . Flag(s)  may specify that the connection to the client is to be maintained after the response message is sent to the client. Flag(s)  may also specify that modified request\/response objects - are to be maintained (e.g., in memory) after the request message is sent to the client. In an embodiment, filter  marks request\/response objects - as \u201cblocked\u201d (e.g., by setting a flag) so that any attempt to send data to the client using request\/response objects - will fail. In one embodiment, filter  may delete connection information  from request\/response objects -. Request\/response objects - may then be returned to pool .","In an embodiment, servlet  is invoked and filter  passes modified request\/response objects - to the servlet as shown by reference numeral . Servlet  processes modified request\/response objects - to generate a response message. After processing modified request\/response objects -, servlet  may exit its service method. In an embodiment, modified request\/response objects - are maintained after servlet  exits its service method. Similarly, the connection to the client may be maintained after servlet  exits its service method.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5","b":["500","500","510","521","528","510","521","528"]},"In one embodiment, each of clients - \u201cregister\u201d with sharer element  by sending a request message (e.g., an HTTP request message) having a destination address (e.g., a URI) that maps to Web component . Filter  may intercept the incoming request message (or corresponding request\/response objects) and generate modified request\/response objects (e.g., modified request\/response objects -) by copying parameters from the request message into the request\/response objects. In an embodiment, the modified request\/response objects are maintained (e.g., in memory) after the corresponding response message is sent to the client. In an embodiment, Web component  is able to process multiple requests in parallel in its service method. A limitation occurs, however, when a Web container (e.g., Web container , shown in ) is not able to pass more connections to any Web component because all application threads are in use. Web component  exits its service method and releases the application thread without closing the connection to the client. Since the application thread is released, the server can accept and process new request messages.","After the initial access, connections - may be maintained. Maintaining the connection broadly refers to maintaining an input stream, maintaining an output stream, maintaining an input socket, and\/or maintaining an output socket. Sharer element  may periodically use modified request\/response objects - to send information to clients - through connections -. For example, if data is updated after Web component  has processed an initial request message, an updated response message may be sent to one or more of clients -. Similarly, Web component  may provide new data to clients - as it becomes available. Examples of environments in which Web-based notification system  may be used include chat systems, messaging systems, file sharing systems, and the like.","In an embodiment of the invention, Web component  is a servlet. The term \u201cservlet\u201d broadly refers to server-side software that extends the functionality of an application server. In one embodiment, the servlet is implemented in accordance with one of the servlet specifications such as, Java Specification Request (JSR) 000053 Servlet 2.3 Specification promulgated by the Java Community Process (hereinafter, the servlet specification). The servlet specification describes a filter Application Programming Interface (API) for intercepting a servlet's invocation. In one embodiment, filter  is based, at least in part, on the filter API of the servlet specification.","Turning now to , the particular methods associated with embodiments of the invention are described in terms of computer software and hardware with reference to a flowchart. The methods to be performed by a computing device (e.g., an application server) may constitute state machines or computer programs made up of computer-executable instructions. The computer-executable instructions may be written in a computer programming language or may be embodied in firmware logic. If written in a programming language conforming to a recognized standard, such instructions can be executed on a variety of hardware platforms and for interface to a variety of operating systems. In addition, embodiments of the invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein. Furthermore, it is common in the art to speak of software, in one form or another (e.g., program, procedure, process, application, etc.), as taking an action or causing a result. Such expressions are merely a shorthand way of saying that execution of the software by a computing device causes the device to perform an action or produce a result.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 6","FIG. 3"],"b":["610","310"]},"Referring to process block , the server-side component (e.g., filter , shown in ) modifies the request message. In an embodiment, the request message is modified to indicate that a connection to the client is to remain open after a corresponding response message is sent. In one embodiment, the connection is a Transmission Control Protocol\/Internet Protocol (TCP\/IP) connection. The term \u201cmodifying\u201d the request message broadly refers to generating a copy of the request message, setting data in the request message (e.g., a flag or a value of a setting), adding data to the message, removing data from the message, and the like.","In one embodiment, the server-side component is a Java servlet. In such an embodiment, receiving a request message may include receiving request\/response objects from, for example, a Web container (such as Web container , shown in ). The term \u201cmodifying\u201d the request message may refer to generating modified copies of the request\/response objects. In one embodiment, the modified request\/response objects have one or more flags set to indicate that the connection to the client is to remain open after the response message is sent to the client.","Similarly, the modified request\/response objects may have one or more flags set to indicate that the modified request\/response objects are to be maintained after the response message is sent. In one embodiment, the modified request\/response objects are maintained in volatile memory. In an alternative embodiment, the modified request\/response objects may be maintained in a persistent store.","Referring to process block , the modified request message is passed to an application for processing. In on embodiment, the application is a Web application. In such an embodiment modified request\/response objects may be passed to a Web component. The term Web component broadly refers to a servlet, a JSP, a portlet, and the like. In an embodiment in which the connection is an HTTP connection, passing the modified request message may include passing a modified HTTP request object and\/or a modified HTTP response object to the Web component of the Web application.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 7","b":"710"},"Referring to process block , one or more request processing resources are released responsive to sending the response message to the client. The term \u201crequest processing resources\u201d broadly refers to releasing an application thread (e.g., a thread of Web component , shown in ) and\/or releasing memory resources associated with processing the request message.","Referring to process block , the modified request message is stored in memory. The term \u201cstored in memory\u201d broadly refers to storing the modified request message in volatile and\/or persistent memory. In one embodiment, storing the modified request message may include storing the modified request\/response objects in memory. In an embodiment, the system (e.g., application server , shown in ) may maintain information about the modified request message such as its location in memory and\/or the application that stored the message.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 8","FIG. 5","FIG. 5"],"b":["810","530","791","820","530"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 9","FIG. 5"],"b":["910","530"]},"In one embodiment, \u201creceiving an indication\u201d may include receiving a closed client notification from an event listener. An \u201cevent listener\u201d is a software entity that monitors, for example, various life-cycle events such as application context initialization, session creation, connection closure, and the like. In one embodiment, the event listener may be an implementation, at least in part, of one of the listener interfaces described in the servlet specification. The event listener may be declared, for example, in the deployment descriptor of the application. Listing 3 is an example of a tag for declaring the event listener.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<listener>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<listener-class >ClientLostListener<\/ listener-class >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ listener >"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}],"in-line-formulae":[{},{}]},"In an embodiment, the communication protocol used by a client and a server is the HTTP protocol. In such an embodiment the servlet may receive an HTTP request message from the client.  is a flow diagram illustrating certain aspects of a method for managing a HyperText Transfer Protocol (HTTP) connection, according to an embodiment of the invention.","Referring to process block , an application server (or an element of an application server) receives an HTTP request message from the client. In one embodiment, an HTTP handler initializes a pair of request\/response objects with client connection data obtained from the HTTP request message. The HTTP handler may then determine whether a filter (e.g., filter , shown in ) is mapped to the requested URI. If the filter is not mapped to the requested URI, then the HTTP handler may invoke a servlet (e.g., servlet , shown in ) at . The servlet may process the request\/response objects and them return them to the object pool (e.g., object pool , shown in ) at .","If the filter is mapped to the requested URI, then the HTTP handler may pass the request\/response objects to the filter at . In an embodiment, the filter marks the request\/response objects as \u201cblocked\u201d so that any attempt to send data to the client using them will be blocked. The filter may generate modified request\/response objects (e.g., modified request\/response objects -, shown in ), for example, by copying client connection data from the initialized request\/response objects to the modified request\/response objects at .","In an embodiment, the servlet is invoked at process block  and the modified request\/response objects are passed to the servlet. In one embodiment, the servlet stores the modified request\/response objects in memory as shown by reference numeral . The servlet may access the modified request\/response objects to, for example, periodically contact the client(s). The blocked request\/response objects may be returned to the object pool as shown by reference numeral .","Elements of the present invention may also be provided as a machine-readable medium for storing the machine-executable instructions. The machine-readable medium may include, but is not limited to, flash memory, optical disks, CD-ROMs, DVD ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, propagation media or other type of machine-readable media suitable for storing electronic instructions. For example, the present invention may be downloaded as a computer program which may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection).","It should be appreciated that reference throughout this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore, it is emphasized and should be appreciated that two or more references to \u201can embodiment\u201d or \u201cone embodiment\u201d or \u201can alternative embodiment\u201d in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures or characteristics may be combined as suitable in one or more embodiments of the invention.","Similarly, it should be appreciated that in the foregoing description of exemplary embodiments of the invention, various features of the invention are sometimes grouped together in a single embodiment, figure, or description thereof for the purpose of streamlining the disclosure aiding in the understanding of one or more of the various inventive aspects. This method of disclosure, however, is not to be interpreted as reflecting an intention that the claimed invention requires more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive aspects lie in less than all features of a single foregoing disclosed embodiment. Thus, the claims following the detailed description are hereby expressly incorporated into this detailed description, with each claim standing on its own as a separate embodiment of this invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
