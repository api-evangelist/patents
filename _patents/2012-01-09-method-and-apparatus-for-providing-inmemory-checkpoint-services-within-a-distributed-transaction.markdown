---
title: Method and apparatus for providing in-memory checkpoint services within a distributed transaction
abstract: A method and apparatus for performing in-memory checkpoint services as a callable resource within a distributed transaction. As such, in-memory checkpoint processes can be utilized by an application as the application would use any resource available to the computer network via a distributed transaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08504873&OS=08504873&RS=08504873
owner: Symantec Operating Corporation
number: 08504873
owner_city: Mountain View
owner_country: US
publication_date: 20120109
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. patent application Ser. No. 10\/880,383, entitled \u201cMethod and Apparatus for Providing In-Memory Checkpoint Services Within a Distributed Transaction\u201d, filed Jun. 29, 2004, now U.S. Pat. No. 8,095,826 naming Pavan Vijaykumar Deolasee as inventor. This application is assigned to Symantec Operating Corporation, the assignee of the present invention, and is hereby incorporated by reference, in its entirety and for all purposes.","1. Field of the Invention","Embodiments of the present invention generally relate to highly available fault tolerant server networks, and more particularly, to a method and apparatus for providing in-memory checkpoint services within a distributed two-phase transaction.","2. Description of the Related Art","Modern computer networks generally comprise a plurality of user computers (referred to herein as client computers or clients) connected to one another and to a computer server via a communications network. To provide redundancy and high availability of computer services provided by a computer server, multiple computer servers may be arranged in a cluster of nodes forming a server cluster. The application software in such systems are executed in a distributed manner providing various services to many client computers. Many of these so-called enterprise applications must be highly available and therefore cannot tolerate downtime, either planned or unplanned. Whenever a failure does occur, the downtime must be as short as possible. To reduce the downtime and improve the process used to restart a failed application on another server, known as a failover process, applications periodically save critical memory and file state information to persistent storage using a technique known as checkpointing. The so-called checkpoint data is used to reinitialize the application whenever the application is required to be restarted on the same or another node within the computer network. The checkpoint data is stored in a common storage volume that is accessible to both the failed server and the new node. Though the process checkpointing improves the application's failover response, the technique requires shared storage between applications and processors such that the information that is stored for one application from one server can be accessed and used by another server that is used in the failover process.","Therefore, there is a need in the art for a method and apparatus for improving the availability and failover response in a computer network.","The invention provides a method and apparatus for performing in-memory checkpoint services as a callable resource within a distributed transaction. As such in-memory checkpoint processes can be utilized by an application as the application would use any resource available to the computer network. In operation, an application sends a call to a transaction manager to, in effect, request a distributed transaction to be instantiated. The transaction may involve a database update or other computer process to be performed by a network resource. Within the transaction call for the database update, a checkpoint subsystem is requested to perform checkpoint services. The transaction manager utilizes an XA interface (or other similar interface) to instantiate the utilization of at least one resource manager to perform the computer process and another resource manager to perform the in-memory checkpoint process. As such, the checkpoint subsystem is used by applications within a computer network via an XA interface.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","102","102","102","104","106","108","106","108","106","106","102","102","102","108","106"],"sub":["1","2","3","n","1","2","n"]},"The production server  comprises a central processing unit (CPU) , support circuits  and memory . The CPU  may be one or more of any type of computer processor. The support circuits  are well known in the art and include circuits such as clock circuits, input\/output (I\/O) circuits, cache, power supplies and the like. The memory  may comprise, but is not limited to, random access memory, read-only memory, disk drive storage, removable memory, remotely located storage arrays, optical storage systems, and combinations of these forms of memory. Various combinations of memory are generally used within the server environment to provide storage for data, files and applications. The memory  stores various types of information and software, including application programs , an operating system , application program interfaces (APIs) , and an in-memory checkpoint subsystem . In an enterprise computer network, this information and software may be stored and executed on separate servers or combinations of servers.","The backup server  is configured in a similar manner to the production server . Specifically, the backup server  comprises a CPU , support circuits , and memory . The memory  stores all of the information that is supplied as backup information from the production server . In connection with this particular invention, checkpoint data  is stored in the backup server . The production server  and the backup server  may be connected through network . However, more typically, the backup server  and the production server  are connected by a private network  to facilitate rapid transfer of backup information and restoration of this information when necessary.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2","b":["200","200","202","122","108","130","106","202","130","202","202","130","106"]},"To utilize the in-memory checkpoint subsystem  as a resource to the application program , a two-phase distributed transaction  is utilized. In a two-phase distributed transaction , the application program  calls for the use of a resource by establishing a TX interface  to transaction manager . The transaction manager  then utilizes at least one XA interface  to communicate with at least one resource manager , , . . . . The use of TX and XA interfaces  and  within distributed transactions is well known in the art and described in detail in \u201cDistributed Transaction Processing: The XA Specification\u201d, X\/Open CAE Specification, X\/Open Company Ltd. (1991), and \u201cX\/Open Distributed Transaction Processing\u201d, X\/Open Company Ltd. (1989-1996). The interfaces are established in the first phase and then, in the second phase, the transaction manager commits to the use of the interlaces. Although XA interfaces are described as useful interfaces to use in connection with the invention, other distributed transaction technologies such as J2EE or CORBA (Common Object Request Broken Architecture) have interfaces that may be utilized to support in-memory checkpoint services. Interlaces related to J2EE technology are described in \u201cJava Transaction API (JTA) Specification\u201d, Version 1.0.1 B, Sun Microsystems Inc. (1999), and interfaces related to CORBA technology are described in \u201cTransaction Service Specification\u201d Version 1.4, Object Management Group (OMG), September 2003.","The application program  implements the desired function of the end user, e.g., a database update. Each application program  specifies the sequence of operations that involves resources such as data-bases and in-memory checkpoint subsystem services. The application program  defines the start and end of a transaction, access to the resources within transaction boundaries, and normally makes the decision whether to \u201ccommit\u201d or \u201crollback\u201d each transaction.","A transaction is a complete unit of work that may comprise many computational paths, including user interface, data retrieval, and communications.","These transactions are able to be rolled back i.e., undone. A human user may rollback the transaction in response to a real world event, such as a customer decision. Alternatively, a program can elect to rollback a transaction. For example, account number verification may fail or the account may fail a test of its balance. Transactions also rollback if a component of the system fails, keeping the system from retrieving, communicating, or storing data. As such, every distributed transaction software component subject to transaction control must be able to undo its work in a transaction, i.e., transactions must be able to be rolled back at any time. When the server determines that a transaction can complete without failure, the server commits the transaction enabling changes to shared resources take permanent effect.","The transaction manager  manages the transactions and coordinates the decision to start them as well as to commit them or roll them back. The transaction manager  also coordinates recovery activities of the resource managers , , . . . when necessary, such as after a component fails.","The resource managers , , . . . comprise a defined part of the computer network's shared resources. These resources may be accessed using services that each resource manager provides. Examples of resource managers are database management systems, in-point checkpoint services and file access methods such as X\/Open ISAM, print servers. The resource managers , , . . . structure all changes to the resources they manage as recoverable and atomic transactions. They allow the transaction manager  to coordinate completion of the transactions atomically with work performed by the resource managers .","In some instances of distributed transactions, a communications resource manager (not shown) may be coupled to the transaction manager . The communications resource manager allows one instance of a resource session to access another instance either inside or outside the current transaction manager domain. Use of a communication resource manager is optional in relation to the utilization of an in-memory checkpoint subsystem as a resource within a computer network.","To facilitate interaction between the application program  and the transaction manager  as well as the resource managers , , . . . , the application program  utilizes a number of application programming interfaces (APIs). A first API is used to facilitate the interface  between the application program  and the various resource managers , . . . that provide the access to the resources for the application program . A second API known as the TX interface  provides the communication between the application program  and the transaction management facilitated by the transaction manager . For example, when the application program calls tx_begin ( ) the transaction manager  informs the participating resource managers  of the start of a transaction. After each request is completed, the transaction manager provides a return value to the application program via another TX interface  reporting back the success or otherwise of the TX call. The transaction manager  to resource manager interface, known as the XA interface , enables the transaction manager  to structure the operation of the resource managers  into transactions and coordinate completion or recovery of their tasks. The XA interface  is the bidirectional interface between the transaction manager  and the resource managers .","The functions of the applications program , the transaction manager  and the resource managers , . . . may be performed on one or more servers. As such, the functionality is distributed to insure high availability and fault tolerance of network resources. By considering the in-memory checkpoint subsystem as a resource a common storage system to multiple servers is not required. Instead of common memory, the checkpoint data can be created, stored, backed up and recovered using distributed transactions.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 3"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["int","main {\n        \n        ","}"]}}}},"The transaction  is instantiated at step  and proceeds to step  where the application program calls for the use of a resource using the TX interface to the transaction manager. The typical TX interface that is used to start a resource use session is a tx_begin ( ) command. Other TX interface commands that are supported by the application would include tx_close, tx_commit, tx_open and tx_rollback. All of these TX interface commands are well known in the distributed transaction protocol art. See, for example, \u201cDistributed Transaction Processing: The XA Specification\u201d, X\/Open CAE Specification, X\/Open Company Ltd. (1991), \u201cX\/Open Distributed Transaction Processing\u201d, X\/Open Company Ltd. (1989-1996), and \u201cJava Transaction API (JTA) Specification\u201d, Version 1.0.1B, Sun Microsystems Inc. (1999). Those skilled in the art should understand that other forms of interfaces may be used. Upon receiving a TX interface command, the transaction manager, at step , establishes a resource session using an XA interface. The resource that is used may be as simple as performing the in-memory checkpoint process. However, in most situations, another resource will be accessed, such as a database, a messaging service, and the like, where that resource will be updated and, as that resource is updated and\/or utilized, the in-memory checkpoint information will be saved during the transaction that uses that resource. This process insures that a failure of the application or the server after the resource is used results in the checkpoint data being as up to date as possible and correspond to the latest transaction performed by the application. Thus, in transaction , it is assumed that the transaction manager establishes a first resource session for a resource such as a database operation using a first XA interface. Subsequently, the transaction manager performs the in-memory checkpoint process and, at step , establishes a second XA interface to the resource manager that handles the checkpoint process, e.g., the in-memory checkpoint subsystem.","The XA compliant resource manager that facilitates the in-memory checkpoint process supports at least the following interface commands: xa_close, xa_commit, xa_complete, xa_end, xa_forget, xa_open, xa_repair, xa_recover, xa_rollback, and xa_start. These XA compliant interface commands are well known in the art and are summarized in the following table:",{"@attributes":{"id":"p-0030","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ax_reg","Register a resource manager (RM) with a transaction "]},{"entry":[{},"manager (TM)."]},{"entry":["ax_unreg","Unregister an RM with a TM."]},{"entry":["xa_close","Terminate the application program (AP's) use of an RM."]},{"entry":["xa_commit","Tell the RM to commit a transaction branch."]},{"entry":["xa_complete ","Test an asynchronous xa_ operation for completion."]},{"entry":["xa_end","Dissociate the thread from a transaction branch."]},{"entry":["xa_forget","Permit the RM to discard its knowledge of a"]},{"entry":[{},"heuristically-completed transaction branch."]},{"entry":["xa_open","Initialise an RM for use by an AP."]},{"entry":["xa_prepare","Ask the RM to prepare to commit a transaction"]},{"entry":[{},"branch."]},{"entry":["xa_recover","Get a list of XIDs the RM has prepared or"]},{"entry":[{},"heuristically completed."]},{"entry":["xa_rollback ","Tell the RM to roll back a transaction branch."]},{"entry":["xa_start","Start or resume a transaction branch - associate"]},{"entry":[{},"an XID with future work that the thread requests"]},{"entry":[{},"of the RM."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"At step , the application commits the transaction using a tx_commit command via a TX interface. The transaction ends at step . In this manner, the transaction  calls for the resource, the resource such as a database update is performed, and simultaneously the in-memory checkpoint process is conducted. If no failures or other anomalies are detected, the transaction commits and performs the resource processes that were requested. As such, the checkpoint data and the resource utilization process are performed nearly simultaneously. This insures that any failover that occurs after the resource has been utilized will start the application program using checkpoint data that represent the most recent utilization of the application program.","If a transaction failure should occur, the transaction must be able to be rolled back.  depicts a flow diagram of a rollback process  wherein a transaction may be rolled back in accordance with the present invention. The process  begins at step  and proceeds to step  where a transaction failure is detected. Upon detection of a transaction failure, the application calls, at step , for a transaction rollback using a TX interface. At step , the transaction manager begins to rollback the process by establishing an XA interface through the appropriate resource managers. If the transaction manager is rolling back the process previously described with respect to , the database update will be rolled back at step  and then the in-memory checkpoint process will be rolled back a step . As such, an XA interface is used for both the resource manager for the database update and the resource manager for the in-memory checkpoint process. At step , the process  commits to a rollback using a TX interface and the process ends at step .","Using the method and apparatus described herein, the in-memory checkpoint subsystem is utilized as a resource to any number of applications which are capable of utilizing a distributed transaction protocol. Consequently, in-memory checkpointing can be performed without using a commonly accessible storage subsystem for all of the applications that need to use the checkpoint process. As such, the checkpointing subsystem can be used by legacy application designed to use distributed transactions but not designed to use checkpoint processes.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features of the present invention can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to embodiments, some of which are illustrated in the appended drawings. It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
