---
title: Method and system of synchronizing accounting objects between a client and server
abstract: A method and system of synchronizing accounting objects between a client and server are provided. In accordance with one embodiment, there is provided a method for use on a server of synchronizing data between a client accounting database on a client computer and the server accounting database on the server, the client computer and server being connected over a communication network by a persistent connection, each of the client accounting database and server accounting database comprising a number of tables, wherein accounting objects are defined by a group of one or more related records in one or more tables in the client accounting database and server accounting database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08589510&OS=08589510&RS=08589510
owner: 
number: 08589510
owner_city: 
owner_country: 
publication_date: 20090904
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["This application claims the benefit of and priority to provisional U.S. Patent Application No. 61\/094,441, filed Sep. 5, 2008, the content of which is incorporated herein by reference.","The present disclosure relates generally to the synchronization of data, and more particularly to a method and system of synchronizing accounting objects between a client and server.","Client-server applications often require the synchronization of data between client and server components of the application. Examples of client-server applications requiring the synchronization of data are third party applications built on the QuickBooks\u00ae accounting software provided by Intuit Inc. A software developer's kit (SDK) provided for QuickBooks provides an interface between third party applications and QuickBooks which allows third party applications to query, add, edit and delete records from a QuickBooks client accounting database via the QuickBooks SDK. Using the QuickBooks SDK, third party applications can send XML (eXtensible Markup Language) requests and receive XML responses to interact with QuickBooks and the respective client accounting database(s). Other accounting software products such as PeachTree\u2122 provided by Sage Software, Simply Accounting\u2122 provided by Sage Software, Microsoft Dynamics\u2122 provided by Microsoft Corporation, and Microsoft Small Business Accounting\u2122 provided by Microsoft Corporation, each have SDKs and\/or application programming interfaces (APIs) which provide similar functionality for third party application developers.","An example of a \u201csynching tool\u201d for synchronizing accounting data between a client and server is QuickBooks Web Connector\u2122. QuickBooks Web Connector is a local application on the client computer which acts as a shuttle between a third party developer's Web service and the QuickBooks SDK. The connection is initiated on the client computer which receives a set of \u201crequests\u201d from the Web service, processes the requests, and returns a set of responses to the developer's Web service. The initiation of a \u201csynchronization operation\u201d (also referred to as a \u201csynch operation\u201d) is made by the end user from the local application on demand or at specific intervals in accordance with application settings.","Existing synching tools; however, have shortcomings. For example, in the context of QuickBooks, there is no known method by which the QuickBooks Web Connector allows a synch operation to be initiated by a Web service on demand. A Web service developer can only specify an interval at which a Web service performs a synchronization operation. Moreover, there is no known method by which a developer can initiate a synch operation from the client computer automatically via programming code. Therefore, if a record is changed on the client computer there is no practical way to notify the Web service that the record has changed.","Thus, there remains a need for improved methods and systems of synchronizing accounting data between a client and server.","Like reference numerals are used in the drawings to denote like elements and features.","The present disclosure provides a method and system for performing synchronization between a client accounting database on a client computer and a remote client accounting database maintained by a server. The synchronization occurs in real-time in at least some embodiments. The synchronization takes into account changes in the client accounting database on the client computer and client accounting database on the server in accordance with applicable accounting rules such as, for example, Generally Accepted Accounting Principles (GAAP).","In accordance with one embodiment, there is provided a system and method for transferring and maintaining data replicated from a client accounting software's database to a database on a remote Web-server. The system extracts database records from the accounting software's database, and transfers them, via a Web service, to a remote database. Web-based applications, either using a direct database connection, or via a Web service, can then add and edit records on the remote Web-server as well as mark them for deletion. These changes then get synchronized to the client accounting software's database. Similarly, when records are added, edited and deleted on the client accounting software's database the changes are reflected, via a Web service, on the remote database. Synchronization can either be initiated manually, at timed intervals, or in real-time using a TCP\/IP (Transmission Control Protocol\/Internet Protocol) connection or other suitable type of connection.","In at least some embodiments, the synchronization system of the present disclosure has the following properties: it transfers records from the client database to the remote server database and maintains database relationships between records; it transfers records from the remote server database to the client database and ensures that the format is correct depending on the version of the client accounting software; it make entries in either the client or server database when the connection between the two is broken for whatever reason; it handles conflict resolution when records are changed on both the client and the remote database before synching; it takes into account that records need to be entered in a specific order so as to maintain dependency between records and to conform to accounting rules (for example, an invoice record cannot be entered before the named customer record has been entered); it maintains an error list or conflict resolution list that users can have access to in order to resolve problems; and it has a mechanism for changes that occur on the remote server to alert the client to process the changes, in real-time, without waiting for a timed-interval synch.","The method and synchronization system of the present disclosure shares the processing and business logic burden between the client computer and server. This reduces the bandwidth consumed by sending and receiving data and reduces the processing performed on the server compared with other synchronization techniques in which all business logic, such as analyzing and determining which records require synchronization, is performed by the Web service. This may also increase the efficiency and accuracy of synchronization compared with other synchronization techniques.","In accordance with another embodiment, there is provided a method for use on a server of synchronizing data between a client accounting database on a client computer and the server accounting database on the server, the client computer and server being connected over a communication network by a persistent connection, each of the client accounting database and server accounting database comprising a number of tables, wherein accounting objects are defined by a group of one or more related records in one or more tables in the client accounting database and server accounting database, the method comprising: detecting one or more records in the server accounting database which have changed since a previous synchronization; identifying one or more accounting objects to be synchronized in accordance with the one or more changed records; and sending instructions to the client computer to synchronize the one or more accounting objects defined by the one or more changed records in the server accounting database with the client accounting database, wherein the one or more accounting objects are synchronized in accordance with a synching order defining an order in which accounting objects are synchronized.","In accordance with a further embodiment, there is provided a method for use on a client computer of synchronizing data between a client accounting database on the client computer and a server accounting database on a server, the client computer and server being connected over a communication network by a persistent connection, each of the client accounting database and server accounting database comprising a number of tables, wherein accounting objects are defined by a group of one or more related records in one or more tables in the client accounting database and server accounting database, the method comprising: detecting one or more records in the client accounting database which have changed since a previous synchronization; identifying one or more accounting objects to be synchronized in accordance with the one or more changed records; and sending instructions to the server to synchronize the one or more accounting objects defined by the one or more changed records in the client accounting database with the server accounting database, wherein the one or more accounting objects are synchronized in accordance with a synching order defining an order in which accounting objects are synchronized.","In accordance with a further embodiment, there is provided a method of notifying a client computer of a change on a paired server accounting database on a server, the client computer and server being connected over a communication network by a persistent connection, each of the client accounting database and server accounting database comprising a number of tables, wherein accounting objects are defined by a group of one or more related records in one or more tables in the client accounting database and server accounting database, the method comprising: detecting one or more records in the server accounting database which have changed since a previous synchronization; identifying the persistent connection with client computer from the number of persistent connections using identifying information associated with the one or more changed records in server accounting database; and notifying the client computer of the one or more changed records using the persistent connection.","In accordance with a further embodiment of the present disclosure, there is provided a method of synchronizing data between a client accounting database on the client computer and a server accounting database on a server, the client computer and server being connected over a communication network by a persistent connection, each of the client accounting database and server accounting database comprising a number of tables, wherein accounting objects are defined by a group of one or more related records in one or more tables in the client accounting database and server accounting database, the method comprising: identifying one or more accounting objects to be synchronized in accordance with one or more changed records in the client accounting database, server accounting database, or both; sending instructions to the client computer to synchronize the one or more accounting objects defined by any changed records in the server accounting database with the client accounting database; and sending instructions to the server to synchronize the one or more accounting objects defined by any changed records in the client accounting database with the server accounting database; wherein the one or more accounting objects are synchronized in accordance with a synching order defining an order in which accounting objects are synchronized.","In accordance with a further embodiment of the present disclosure, there is provided a method of synchronizing data between a client accounting database on the client computer and a server accounting database on a server, the client computer and server being connected over a communication network by a persistent connection, each of the client accounting database and server accounting database comprising a number of tables, wherein accounting objects are defined by a group of one or more related records in one or more tables in the client accounting database and server accounting database, the method comprising: determining records in the client accounting database which have changed since a previous synchronization; identifying one or more accounting objects to be synchronized in accordance with any changed records in the client accounting database, server accounting database, or both; sending instructions to the client computer to synchronize one or more accounting objects defined by any changed records in the server accounting database with the client accounting database; and sending instructions to the server to synchronize one or more accounting objects defined by any changed records in the client accounting database with the server accounting database; wherein the one or more accounting objects are synchronized in accordance with a synching order defining an order in which accounting objects are synchronized.","In accordance with further embodiments of the present disclosure, there are provided a computer program products comprising a computer readable medium having stored thereon computer program instructions for implementing on a client computer the methods of synchronizing accounting objects as set forth herein, and a computer readable medium having stored thereon computer program instructions for implementing on a server computer the methods of synchronizing accounting objects as set forth herein.","Referring to , a synchronization system  in accordance with one embodiment of the present disclosure will now be described. The system  comprises one or more client computers  (one of which is shown in ) which can connect to a synchronization server  over a communication network  such as the Internet. The synchronization server  also connects to third party applications  on a remote server (not shown) over a communication network  such as, for example, the Internet. Each client computer  includes among the various software modules stored in its memory, an accounting software module for executing an accounting software application  such as, for example, QuickBooks\u00ae.","The accounting application  maintains at least one client accounting database  which comprises a number of accounting objects defined by one or more records in one or more tables. The accounting application  may maintain more than one client accounting database  in some embodiments. Each table is made up of a series of rows and columns in which each row represents a record and the columns represent fields in those records. The end user interacts with the client accounting database  indirectly using the graphical user interface (GUI) provided by the accounting application . Each record has a modification date representing the date it was last modified and typically also includes the time at which the record was last modified. The modification date is provided comprising a field in the respective record.","The client computers  have a listener , an integration engine  and client request interface . The listener  and integration engine  may be separate applications, or may be part of the client accounting application . The client request interface  is typically part of the client accounting application  but could be a separate application.","The synchronization server  implements a server application  that maintains at least one server accounting database . The server application  may maintain more than one server accounting database  in some embodiments. Each server accounting database  comprises a synchronized copy of at least of the database accounting objects in the client accounting database  of one or more client computers , possibly a synchronized copy of all the accounting objects in the client accounting database  of one or more client computers . In an example use case, a server accounting database  may be maintained by a franchiser and may comprise a copy of the records of the client accounting databases  of a number of franchisees or a subset of those records. In such cases, each of these client computers  may have the same or different version of the accounting application  in which case capabilities of the different versions may need to be taken into account.","The server application  comprises a number of software modules for performing various functions, comprising a Web server  for providing a Web service, an authentication module  for providing authentication of user accounts and\/or client computers , a TCP\/IP (transmission control protocol\/Internet protocol) server  for providing TCP\/IP connectivity for client computers to connect to, a server application interface  for interacting with third party applications , and a conflicts registry  for storing conflicts which occur during synchronization operations. Each of these modules will be described in more detail below. The server modules may be realized as a plurality of independent elements or some of the server modules may be combined. Moreover, one or more of the server modules may be implemented as part of other software modules. The server modules could be implemented using separate servers or server applications which are connected to the synchronization server . Synchronization preferences  are stored on the synchronization server  for access by the server application interface  and integration engine . The synchronization preferences  specify synchronization preferences including which transaction objects to synchronize, the last synchronization date, and preferences for conflict resolution (e.g., client application , synchronization server , or last modified wins when a conflict occurs). The synchronization preferences  could also be stored on the client computer  in addition to, or instead of, the synchronization server .","The server application  implements a synchronization Web service , typically via the Web server . The primary functions of the synchronization Web service  is to build XML files based on records in the server accounting database , provide the XML files to the integration engine  during synchronization operations, receive XML files from the integration engine  during synchronization operations, analyze the contents of XML files received from the integration engine , and update the relevant records in the server accounting database . In at least some embodiments, each accounting object is defined by a separate XML file which includes a complete set of records which make up that accounting object. In other embodiments, a different exchange interface other than XML may be used. This could, for example, a COM object option as a layer on top of the XML interface or something else. The different exchange interface may be used to accommodate the abilities of the client accounting application  or to improve the functionality of the server , for example, to improve the functionality with third party applications . The purpose of the synchronization Web service  is to keep the server accounting database  up-to-date with changes that occur in the client accounting database . The server accounting database  can be single-tenant (one server database for every client accounting database ) or multi-tenant (one server database used to share the data from multiple client accounting databases ), depending on the embodiment.","Third party applications  can access and interact with the server accounting database , via the Server Application Interface , instead of the client database  on client computers  and without having to use the software developer's kit (SDK) for the accounting software product. Using the paired server accounting database  rather than the client accounting database  on the client computer  eliminating the delays caused by exchanging data between the server or other computer running the third party application and the client computer , and eliminating the delays caused by waiting for data to be validated by the accounting application . Moreover, the provision of copies of the accounting objects in the paired server accounting database  obviates the need for the accounting application  to be connected to the third party applications  or server  to write and read data. Instead, third party applications can read and write data to the server accounting database  and any changes are synchronized with the client accounting database  when it reconnects to the system . It will be appreciated that, while not shown, the third party applications  could also interface directly with the accounting application  on the client computers , typically via the client request interface , but such communications are not related to the synchronization methods of the present disclosure.","Database Structure","The client accounting database  and server accounting database  typically have the same or substantially similar database schema. The databases ,  are relational databases in at least some embodiments. This typically requires the use of the same accounting application product or platform on the client computers  and complementary server-side applications which are capable of interpreting the database schema of the accounting application product or platform on the client computers . However, database records could be transcoded or transformed when copying records from a client accounting database  having records defined in accordance with a first database schema and a server accounting database  having records defined in accordance with a second database schema, and vice versa.","Typically, differences between the database schema exist because the client accounting database  uses an older version of the database schema used by the server accounting database . This may occur because the client accounting application  is an older version, and the server  is supporting other, newer client accounting applications  having a \u201cnewer\u201d database schema. Differences between database schemas of different versions are typically new field support and new field names for logically equivalent supported fields. The server  maintains information about the accounting objects and tables supported by the client accounting application  including the fields which are required fields to satisfy the supported accounting object definitions.","In some embodiments, if the field exists in the server accounting database  but not in the client accounting database  the field is ignored when synching. However, if the field exists in the client accounting database , and is exposed by the client request interface  it is always synchronized with the server accounting database . If one or more field of an older database schema on the client computer  have been replaced with similar field(s) in newer versions of the data schema, the synchronization system , in at least some instances, uses a common field convention on the server accounting database  and translate between the different fields in the server application interface  from the common field convention to the different database schema of different client accounting applications  on different client computers .","In some embodiments, the accounting application  is QuickBooks and the client accounting database  is a QuickBooks database. In such embodiments, the client accounting database  and server accounting database  and respective accounting objects, tables and records are defined in accordance with the QuickBooks database schema, and the client accounting database  and server accounting database  may be QuickBooks (QB) database files (e.g., QB files). The QuickBooks database schema is known in the art.","The accounting objects are independent, dependent, conditionally dependent, or interdependent. Each object and each table is associated with a flag or other identifier (ID) which identifies its dependency type. For each table, this relation is stored as a mapping separate from the table itself which associates the table by a table identifier (ID) with its respective table dependency flag. These mappings\/relations conform to the requirements of the SDK or API of the client accounting application  and are stored on the client computer  and possibly the server .","An independent object does not comprise any fields that are linked to records in tables of other objects. A dependent object comprises one or more fields that link to one or more records in one or more tables of other objects. The tables which are linked to may be tables in independent or dependent objects. A single dependent object depends on one or more tables in independent objects. A multiply dependent object depends on one or more tables in dependent objects. A conditionally dependent object can be independent or dependent depending on the particular table and its relationships with tables in other objects.","An interdependent object comprises one or more fields that link to one or more records in one or more tables in other objects, and in turn these tables have fields that link back to that same table. The tables which are linked to may be tables in independent or dependent objects, and the tables that are linked from are tables in dependent objects. For convenience, a dependency relationship in which fields in a table link to records in other tables will be referred to as a \u201cbackward dependency\u201d, and a dependency relationship in which records link to by fields in other tables will be referred to as a \u201cforward dependency\u201d.","The objects are either list objects comprising records from list tables or transaction objects comprising transaction records from transaction tables. List records are independent or dependent on any list record. However, every transaction record is dependent on at least one or more list record.","List objects comprise a number of records defined by tables such as an \u201cInventory Items\u201d table, \u201cAccount Type\u201d table and \u201cCustomer\u201d table. Transaction objects comprise a number of records defined by transaction tables such as an \u201cInventory Adjustment\u201d table, \u201cJournal Entry\u201d table and \u201cInvoice\u201d table. Transaction objects typically provide a historic tracking of each activity that affects and consumes list records.","In some embodiments, each record is identified in the server accounting database  using a \u201cRecordID\u201d field that is unique within each table (each having a unique table name). Each record in the client accounting database  is assigned a \u201cListID\u201d (for list records) or a \u201cTxnID\u201d (for transaction records). The ListID and TxnID are unique across all records in all tables in the client accounting database . The ListID and TxnID are stored in the server accounting  database so that the corresponding record in the client accounting database  can be determined. The ListID and TxnID cannot be used as the unique value in the server accounting database  because the client accounting database  and server account database  can exist in a disconnected state and each record in the server accounting database  must have a unique identifier in the disconnected state so that it can be referenced by another table or updated (e.g., records can be added to the server accounting database  in the disconnected state by third party applicators , etc.). As a result, the tables on the server accounting database  reference each other using the RecordID field because it is available and has a unique value in all circumstances.","The dependency type of the accounting objects in accordance with one embodiment of the present disclosure will now be described. In this example embodiment, the accounting application  is QuickBooks and the objects and tables correspond to those available in QuickBooks version 2008. In this example embodiment, the independent \u201clist\u201d objects comprise the following accounting objects: Company; DataExtDef; UnitOfMeasureSet; ShipMethod; Vehicle; ToDo; PaymentMethod; VendorType; Class; Terms; CustomerMsg; CustomerType; and JobType. In this example embodiment, the dependent \u201clist\u201d accounting objects comprise the following accounting objects: Preferences. The interdependent \u201clist\u201d accounting objects comprise the following accounting objects: Account; PayrollItemWage; PayrollItemNonWage; Item; BillingRate; SalesTaxCode; PriceLevel; Entity; and SalesRep.","In this example embodiment, there are no independent \u201ctransaction\u201d accounting objects; however, it is possible that \u201ctransaction\u201d accounting objects exist in other embodiments. The dependent \u201ctransaction\u201d accounting objects comprise the following accounting objects: Charge; TimeTracking; VehicleMileage; JournalEntry; InventoryAdjustment; Estimate; ReceivePayment; Deposit; Invoice; CreditMemo; Bill; VendorCredit; SalesOrder; PurchaseOrder; ItemReceipt; Check; ARRefundCreditCard; BillPaymentCheck; BillPaymentCreditCard; CreditCardCharge; CreditCardCredit; SalesReceipt; and BuildAssembly.","The content and function of the foregoing accounting objects and tables will be readily understood by persons ordinarily skilled in the art. Moreover, additional and different accounting objects and tables will be readily understood by persons skilled in the art. The teachings of the present disclosure apply equally to such additional and different accounting objects and tables.","In view of the above, it will be understood that the client accounting database  and the server accounting database  each comprise a number of tables. At least some of the tables in each of the client accounting database  and the server accounting database  define accounting objects. An accounting object is a logical object defined by a group of one or more related records in one or more tables in one of an accounting database  or . The relationships between the records are based one or more dependencies, one or more business accounting logic rules, or a combination thereof.","An example of an accounting object is a Bill payable to a vendor. A Bill object is comprised of a single record in the Bill table which contains the transaction date, accounts payable account number, and the vendor that the bill is payable to. The Bill object is also comprised of 0 to many bill expense line records from the BillLineExpense table, and 0 to many bill item records from the BillLineItem table. Thus, a Bill object is defined by one or more records in one or more of the Bill table, BillLineExpense table and BillLineItem table.","Accounting objects each belong to one of a number of predetermined categories which, in at least some embodiments, comprise the following categories: (1) independent list objects (e.g., Company, Currency, Classes and Customer Type); (2) dependent list objects (e.g., Items, Customers and Vendors); (3) all other transaction objects which do not affect Accounts Receivable or Accounts Payable (e.g., Time Tracking, Bank Transfers); (4) transaction objects that debit Accounts Receivable (e.g., Invoices, Statement Charges, and Sales Receipts); (5) transactions objects that credit Accounts Receivable (e.g., Receive Payments, Credit Memos); (6) transactions objects that credit Accounts Payable (e.g., Bills and Item Receipts); and (7) transactions objects that debit Accounts Payable (e.g., Bill Payments and Checks).","It will be appreciated that in some embodiments Accounts Receivable may be a single record in the Accounts table called \u201cAccounts Receivable\u201d which has the AccountType of \u201cAccountsReceivable\u201d. However, in other embodiments Accounts Receivable could comprise multiple records each with different names but all having the AccountType of \u201cAccountsReceivable\u201d. Similarly, in some embodiments Accounts Payable may be a single record in the Accounts table called \u201cAccounts Payable\u201d which has the AccountType of \u201cAccountsPayable\u201d. However, in other embodiments Accounts Payable could comprise multiple records each with different names but all having the AccountType of \u201cAccountsPayable\u201d.","In some embodiments, including those in which the client accounting application  is implemented using QuickBooks version 2008, the predetermined categories described above are comprised of the following accounting objects defined records in the following tables:","(1) Independent List Objects",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Object","Tables"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Company","Company"]},{"entry":[{},"BillingRate","BillingRate"]},{"entry":[{},{},"BillingRatePerItemRetList"]},{"entry":[{},"Class","Class"]},{"entry":[{},"CustomerMsg","CustomerMsg"]},{"entry":[{},"CustomerType","CustomerType"]},{"entry":[{},"DataExtDef","DataExtDef"]},{"entry":[{},"JobType","JobType"]},{"entry":[{},"PaymentMethod","PaymentMethod"]},{"entry":[{},"PriceLevel","PriceLevel"]},{"entry":[{},{},"PriceLevelPerItemRetList"]},{"entry":[{},"ShipMethod","ShipMethod"]},{"entry":[{},"Terms","Terms"]},{"entry":[{},"ToDo","ToDo"]},{"entry":[{},"UnitOfMeasureSet","UnitOfMeasureSet"]},{"entry":[{},{},"UnitOfMeasureRelatedUnit"]},{"entry":[{},"Vehicle","Vehicle"]},{"entry":[{},"VendorType","VendorType"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Object","Tables"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Account","Account"]},{"entry":[{},"Entity","Entity"]},{"entry":[{},{},"EmployeeEarningsRetList"]},{"entry":[{},"Item","ItemGroupOrAssemblyList"]},{"entry":[{},"PayrollItemNonWage","PayrollItemNonWage"]},{"entry":[{},"PayrollItemWage","PayrollItemWage"]},{"entry":[{},"Preferences","Preferences"]},{"entry":[{},"SalesRep","SalesRep"]},{"entry":[{},"SalesTaxCode","SalesTaxCode"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Object","Tables"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BuildAssembly","BuildAssembly"]},{"entry":[{},{},"BuildAssemblyLineItem"]},{"entry":[{},"Deposit","Deposit"]},{"entry":[{},{},"DepositLine"]},{"entry":[{},"InventoryAdjustment","InventoryAdjustment"]},{"entry":[{},{},"InventoryAdjustmentLine"]},{"entry":[{},"Estimate","Estimate"]},{"entry":[{},{},"EstimateLine"]},{"entry":[{},"JournalEntry","JournalEntry"]},{"entry":[{},{},"JournalEntryLine"]},{"entry":[{},"PurchaseOrder","PurchaseOrder"]},{"entry":[{},{},"PurchaseOrderLine"]},{"entry":[{},"SalesOrder","SalesOrderLine"]},{"entry":[{},"TimeTracking","TimeTracking"]},{"entry":[{},"VehicleMileage","VehicleMileage"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Object","Tables"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Charge","Charge"]},{"entry":[{},"Invoice","Invoice"]},{"entry":[{},{},"InvoiceLine"]},{"entry":[{},"SalesReceipt","SalesReceiptLine"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Object","Tables"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ARRefundCreditCard","ARRefundCreditCard"]},{"entry":[{},{},"ARRefundCreditCardAppliedToTxn"]},{"entry":[{},"CreditMemo","CreditMemo"]},{"entry":[{},{},"CreditMemoLine"]},{"entry":[{},"ReceivePayment","ReceivePayment"]},{"entry":[{},{},"ReceivePaymentAppliedToTxn"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Object","Tables"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Bill","Bill"]},{"entry":[{},{},"BillLineExpense"]},{"entry":[{},{},"BillLineItem"]},{"entry":[{},"Check","Check"]},{"entry":[{},{},"CheckLineExpense"]},{"entry":[{},{},"CheckLineItem"]},{"entry":[{},"CreditCardCharge","CreditCardCharge"]},{"entry":[{},{},"CreditCardChargeLineExpense"]},{"entry":[{},{},"CreditCardChargeLineItem"]},{"entry":[{},"ItemReceipt","ItemReceipt"]},{"entry":[{},{},"ItemReceiptLineExpense"]},{"entry":[{},{},"ItemReceiptLineItem"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Object","Tables"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BillPaymentCheck","BillPaymentCheck"]},{"entry":[{},{},"BillPaymentCheckAppliedToTxn"]},{"entry":[{},"BillPaymentCreditCard","BillPaymentCreditCard"]},{"entry":[{},{},"BillPaymentCreditCardAppliedToTxn"]},{"entry":[{},"CreditCardCredit","CreditCardCredit"]},{"entry":[{},{},"CreditCardCreditLineExpense"]},{"entry":[{},{},"CreditCardCreditLineItem"]},{"entry":[{},"VendorCredit","VendorCredit"]},{"entry":[{},{},"VendorCreditLineExpense"]},{"entry":[{},{},"VendorCreditLineItem"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In the accounting object definitions in the tables above, each accounting object has at least one primary record in a primary table and possibly one or more subsidiary records in subsidiary tables which are dependent on the primary record in the primary table. In the tables above, the primary table is the listed table when the accounting object is defined by a single table or the first list table when the accounting object is defined by more than one table. In at least some embodiments, the accounting objects are defined by XML, typically in the form of individual XML documents. In such embodiments, the integration engine  and client request interface  on the client computer  and the synchronization Web service  on the server  are configured to identify the accounting object by the XML code defining the respective accounting object. Once an accounting object is identified, a separate function for synchronizing the respective accounting object can be called on the client or server. Each function is provided with the respective accounting object definitions so that it can synchronize that accounting object. In other embodiments, some or all of the synchronizing functions could be combined into one or more larger functions.","The present disclosure provides a method and system of synchronizing the accounting objects in the client accounting database  with the corresponding accounting objects in the server accounting database , and vice versa. The present disclosure preserves, or at least attempts to preserve, the integrity of the accounting objects.","The integrity of accounting objects is maintained by synching the accounting objects in an order which preserves the relationships between the records. This order is referred to as the synching order for convenience. The relationships which define the accounting objects are: dependencies between records, business accounting logic rules, or a combination thereof. The synching order is typically predetermined and stored by the server  and client computer , but could be determined in real-time prior to synchronization in other embodiments.","The dependency relationships between one or more records in one or more tables are defined by the related records. The links define the value of one or more fields in the related records or provide a basis for calculating the value of one or more fields in the related records. The number of dependency relationships is typically quite large. In a typical implementation, the number of dependency relationships could number in the hundreds or more. The synching order is typically defined to preserve the logical relationships of the business accounting logic rules while minimizing the number of loops required to resolve conditionally dependent and interdependent records. Accordingly, the synching order is defined so that records are synchronized before other records that depend on fields in those records are synchronized.","The accounting business logic rules define predetermined mappings between one or more records in one or more tables in accordance with logical relationships between the one or more records based on business accounting rules which, for example, could be logical relationships based on Generally Accepted Accounting Principles (GAAP). The synching order is defined so as to preserve the logical relationships of the business accounting logic rules. The logical relationships are not merely dependencies. The predetermined mappings may operate on records or fields which may or may not have dependency relationships, depending on the accounting object and its related records. The number of predetermined mappings is typically quite large as within the dependency relationships. In a typical implementation, the number of predetermined mappings could number in the hundreds or more.","To maintain the integrity of accounting objects, each category of accounting object is synchronized in a predetermined order before the next category can be synchronized. The synching order defines the order in which the categories of accounting objects are synchronized so that accounting objects defined by one or more records in one or more tables are synchronized in accordance with a category of the respective accounting objects.","In addition, when synching a particular type of accounting object, each accounting object must be synchronized completely or not all. That is, either all the records that make up the accounting object are synchronized or none of records that make up the object will be synchronized. This preserves the integrity of the accounting objects and the respective dependencies and business logical rules of such objects. Within each category of accounting object, accounting objects may be synchronized in order (e.g. in series) or possibly in parallel depending on the dependencies affecting the particular accounting objects. Typically, the accounting objects in each category are synchronized in series to minimize potential conflicts. In some embodiments, a synching order may be defined for each category of accounting objects for synching accounting objects within each category.","In at least some embodiments, the each category of accounting object is synchronized in the following order:\n\n","Within the dependent list objects category and possibly other categories, accounting objects are preferably synchronized in an order which reduces or minimize conflicts requiring multiple loops. The exact order may vary based on the version and\/or accounting program.","The synching order may be affected based on the accounting objects supported by the client accounting database  (e.g., based on the software version). Typically the server accounting database  can support multiple versions of client accounting database . Thus, only tables of the supported accounting objects are synchronized in the client accounting database . However, it possible that the synching order is also based on the accounting objects supported by the server accounting database .","As noted above, every transaction record is dependent on at least one or more list record; however, no list record is dependent on a transaction record. When synching a particular accounting object or category of accounting object, all list objects to be synchronized should be synchronized before transaction objects which depend on them are synchronized to increase efficiency. In some embodiments, all list objects to be synchronized are synchronized before any transaction object is synchronized to increase efficiency. It will be appreciated that, although transaction objects typically have more business accounting logic rules associated with them, list objects may also have business accounting logic rules associated with them.","In some embodiments, when synching a particular accounting object or category of accounting object, all independent objects may be synchronized, followed by all dependent objects in an order in which multiply dependent objects which depend on one or more dependent objects are processed after the objects on which they depend, and lastly interdependent objects are synchronized. This typically involves processing some or all single dependent objects before multiply dependent objects.","In at least some embodiments, each accounting object within a category of accounting objects is synchronized in series. When some of the records in one or more tables are interdependent records having interdependencies between one or more records in two or more tables, the interdependent records are synchronized over a number of change operations (referred to as loops). One or more of the interdependent records are partially synchronized during each of the change operations and the change operations are repeated for the partially synchronized records until all of the interdependent records are fully synchronized. Advantageously, the synching order may be defined so as to minimize the number of change operations required to fully synchronize the interdependent records. In at least some embodiments, interdependent record which are partially synchronized in the change operations are marked with a \u201ctemporary\u201d status flag which is removed during subsequent change operations when the respective interdependent records are fully synchronized.","Due to the complexity of interdependent objects, it is necessary to perform two or more loops and only synch part of the object on the first (or initial) loop. For example, the Entity contains customers, vendors and employees. The SalesRep object links to the Entity object for vendors and employees. In turn the Entity object links back to the SalesRep object for sales representatives to be assigned to customers. Therefore, it is necessary to perform multiple loops to resolve interdependencies. When performing multiple loops to resolve interdependencies between interdependent records of interdependent objects, records which contain only partially synchronized data are marked with a \u201ctemporary\u201d status flag. When the object is fully synchronized on a subsequent loop, the \u201ctemporary\u201d status flag is removed. This prevents incomplete information from being exposed (made available) displayed to the server application interface  and third party applications  until they have been synchronized. Only fully synchronized records can be viewed. For example, on the first loop the Entity object is synchronized, and a customer \u201cJohn Smith\u201d is added. Since John Smith has been assigned to a Sales Rep. named \u201cMike\u201d who is not yet synchronized, John Smith's record is marked with a temporary status flag. The employee \u201cMike\u201d is then added, during the same loop as an employee in the Entity object. Next, the Sales Rep. \u201cMike\u201d is created, linking to the employee record in the Entity object. A second loop is then performed, and John Smith is finally assigned to the SaleRep \u201cMike\u201d, who now exists, and the temporary status flag is removed.","The selection of the synching order is important for several reasons. Firstly, the synching order reduces errors and thereby reduces the amount of conflict resolution which is necessary. Interdependent objects require a particular order of processing to reduce the number of rejected entries from the client accounting application  when a synch operation is performed from the synchronization server  to the client computer . Performing the synch in the synching order ensures that certain records are synchronized before other records that depend on those entries are synchronized. For example, for an Invoice, the Entity (Customer) is required. If a new Entity is created and a synch operation is performed on the Invoice record before the Entity record, the client accounting application  will generate an error and reject it. A corresponding conflict is then entered in the conflict registry  for resolution by the user. However, if the Entity record is synchronized before the Invoice record is synchronized, the record will be accepted.","Secondly, the synching order enforces business accounting logic rules. Some situations of interdependent objects will not generate an error. Instead there will be a break in the business accounting logic rules and a break with the intentions of the end user and the underlying business accounting logic. Some objects are conditionally dependent in that they can be independent or dependent, depending on the situation. The synching order is structured such that in situations of conditional dependency, business accounting logic rules are preserved. For example, synching an invoice before synching an associated payment will ensure that the payment is applied to the invoice. However, synching the payment first and the invoice second will result in an unpaid invoice (increasing Assets on the balance sheet), and outstanding \u201caccounting credit\u201d (increasing Equity on the balance sheet). No errors will be raised if the payment is synchronized first, but the actual intention of the user will not be honored, and there will be undesired effects on the financial statements of the company using the synching system.","Thirdly, the synching order minimizes the duration of synch operations, bandwidth, and processing requirements. Efficient ordering reduces the total number of records that get marked with a \u201ctemporary\u201d status flag, thereby reducing the number of times the same record must be synchronized, and reducing the number of loops the synching process must go through. Therefore, efficient ordering results in a shorter synch duration (time), less server and client bandwidth usage, and less server and client processing (less demand on the microprocessors , ).","In one example embodiment, to maintain their integrity, accounting objects are synchronized in the following order: Company; DataExtDef; UnitOfMeasureSet; Account; ShipMethod; Preferences; Vehicle; ToDo; PaymentMethod; VendorType; Class; PayrollItemWage; PayrollItemNonWage; Terms; CustomerMsg; CustomerType; JobType; Item; BillingRate; SalesTaxCode; PriceLevel; Entity; SalesRep; TimeTracking; VehicleMileage; Deposit; BuildAssembly; PurchaseOrder; SalesOrder; Estimate; InventoryAdjustment; JournalEntry; Charge; Invoice; SalesReceipt; CreditMemo; ARRefundCreditCard; ReceivePayment; Bill; CreditCardCharge; ItemReceipt; Check; CreditCardCredit; VendorCredit; BillPaymentCheck; and BillPaymentCreditCard. It will be appreciated that different synching orders which also respect the object dependencies and business accounting logic rules are possible.","The integration engine  of the client computer  and the synchronization Web service  of synchronization server  connect over the network  in a secure manner, typically using Hypertext Transfer Protocol over Secure Socket Layer (HTTPS). Similarly, the server application interface  of server application  and the third party applications  connect over the network  in a secure manner, typically using HTTPS. Other suitable methods of secure connection could be used in other embodiments.","As noted above, the server accounting database  provides a paired database structure which holds a synchronized copy of at least some of the accounting objects in the client accounting database  (e.g. QuickBooks accounting data). The server accounting database  can be accessed and interacted with using the server application interface  by external or \u201cthird party\u201d applications . Third party applications  may view (read), edit, add and delete records on the server accounting database  depending on the rights associated with the respective third party application  and the attributes associated with the respective accounting object, table or record in the server accounting database . Example third party applications  could be scheduling applications, reporting applications, payroll tracking applications, CRM (Customer Relationship Management), ERP (Enterprise Resource Planning), business management systems, etc.","Both the server application  and third party applications  apply business accounting logic rules to the server accounting database  when making changes. In the case of third party applications , business accounting logic rules is applied to data obtained from the server accounting database  applies business accounting logic rules before sending a change request to the server application interface  which then passes on the request to a client request interface  on the client computer . However, it is the business accounting logic rules of the client accounting application  that governs both the client accounting database  and the server accounting database . Because there be additional accounting rules and data that are hidden from the server application  and third party applications , they can only make a \u201cbest effort\u201d by applying as much of the business accounting logic rules as possible (i.e., applying all the known (or exposed) business accounting logic rules). However, the client request interface  finally determines whether a change made to the server accounting database  complies with the business accounting logic rules of the client accounting application  and client accounting database .","Because the client request interface  has to approve all server-side changes to the server accounting database , all server-side changes may be considered \u201cpending\u201d until approved by the client request interface . However, the converse is not true. That is, the server application  and third party applications  do not have to approve client-side changes to client accounting database .","Because the business accounting logic rules of the client accounting application  and client accounting database  needs to be maintained, client-side changes to the to client accounting database  need to be processed (e.g. synchronized) differently from server-side changes to the server accounting database  because the client accounting application  has the final say on data acceptance or refusal of a server-side change (e.g., additions, deletions or modifications). This also supports greater flexibility regarding adding, querying and editing records on the server accounting database  than on the client accounting database .","The client request interface  provides an interpreter\/interface layer between the client accounting database  and other applications such as the third party applications  and the synchronization Web service . The client request interface  is part of the SDK of the client accounting application  in some embodiments, but could be part of an application programming interface (API) of the client accounting application  in other embodiments. In embodiments in which the client accounting application  is QuickBooks, client request interface  is the QuickBooks SDK. The client request interface  receives requests from other applications, processes such requests, and sends responses to the respective requesting response to a request to change a record in the client accounting database , the client request interface  updates the client accounting database  and returns a response to the requesting application regarding the success or failure of the change operation.","The client request interface  is optional and is not required in embodiments in which other applications are provided sufficient direct access to the client accounting database . This may depend on the particular accounting software and its architecture, for example Microsoft Small Business Accounting\u2122 does not comprise nor require a client request interface  allowing other application to directly access the client accounting database . In some embodiments, other applications may communicate directly with the client accounting database  for some functions or operations, and indirectly by using the client request interface  for some functions or operations.","The accounting application  interfaces with the integration engine  via the client request interface . The integration engine  is a local application on the client computer  which communicates with the synchronization Web service  of the synchronization server  and the client request interface  during synchronization, typically via a TCP\/IP connection with the synchronization server  although other connections could be used in other embodiments. Other types of connections may be used instead of TCP\/IP connection in other embodiments. A suitable alternative connection should maintain a persistent connection between the client computer  and server , preferably without requiring a constant data stream between the client computer  and server , or a timer could be used to check for changes at a predetermined interval, for example, every 30 seconds. While functional, a timer uses more bandwidth and requires more server side processing than real-time synching. In yet other embodiments, for example when the client request interface  is not present, the client accounting application  directly interfaces with the integration engine .","As noted above, third party applications  may read, edit and add records on the server accounting database  depending on the rights associated with the respective third party application and the attributes associated with the respective object, table or record in the server database . The synchronization system  allows third party applications  to write data without having to be validated by the client accounting application , accepted and saved. In contrast, validation is performed by the server application interface . If there are any validation errors, these are reported to the third party applications . An entry is then added to the conflicts registry  with a description of the error and, when possible, a recommended action as to how to solve the respective validation error. A recommended action may be selected from one or more predetermined corrective actions based on the respective validation error, when available.","The server application  also comprises an authentication module  which maintains a list of valid user accounts including user identifiers (user ID) or user names and associated passwords or passcodes. In the case of a multi-tenant server accounting database  in which the server accounting database  comprises records of multiple client accounting database , a tenant identifier (tenant ID) associated with the respective user name and password. The primary function of the authentication server  is to validate users and user accounts, to maintain the current public IP address and port of the client computer's connection to the TCP\/IP server , and to direct the synchronization Web service  to the respective server accounting database .","The server application  also provides a server application interface . The server application interface  is an application layer interface which writes changes to the server accounting database  in response to requests from third party applications  (such as third party Web applications). The changes can be written either directly via a Web application that has access to the server accounting database , or via a Web service, typically accessed remotely. The server application interface  acts as a listener which monitors for changes in the server accounting database , and notifies the integration engine  either via synchronization with the Web service  or in real-time using the TCP\/IP server  that changes have occurred in the server accounting database  which require updating.","When a change is made by the server application interface  to the server accounting database  which warrants an update to the client accounting database , the server application interface  notifies the TCP\/IP server  to initiate a TCP\/IP call to the integration engine . Since there may be many integration engines  sharing a synchronization server , the TCP\/IP server  may have to locate the corresponding client computer  and integration engine  prior to establishing the TCP\/IP connection or using an established TCP\/IP connection. The authentication module  identifies the corresponding client computer  as described above. The synchronization Web service  notifies the corresponding integration engine  of the changes which are required to the client accounting database . The integration engine  can then initiate real-time synchronization.","The server application  also maintains a conflict registry  which comprises a list of all outstanding synchronization issues that need to be resolved by the user of the client accounting database  or by third party applications , depending on the nature of the conflict. Conflicts can occur when a user changes a record in the client accounting database  or a third party application  changes a record in the server accounting database  when the two are not connected to each other, i.e. when TCP\/IP connection is lost. A conflict may also occur because the client request interface  may reject a request to change the contents of the client accounting database , for whatever reason, necessitating resolution by the user. A change may be rejected for a number of reasons, including that the changed record is missing required fields, duplication of records, or breaking of business accounting logic rules (such as, for example, causing a customer's credit limit to be exceeded). Conflicts in the conflict registry  are resolved at the next synchronization operation.","A conflict may occur because the requested change violated one or more of a number of dependencies relationships and\/or business accounting logic rules. In some embodiments, records must conform to the following general rules: each numeric field has a maximum and minimum value (some fields cannot be negative); each text fields has a maximum number of characters; each date field has a maximum or minimum value; transactions each have a total maximum and minimum value (some transactions cannot be negative, and often cannot be zero); some transactions must have both negative and positive parts that total up to 0 (e.g., Journal Entries); some fields are required only in situations where other data has been entered into other fields in that record (e.g., a credit card expiry date is only required if there is a credit card number); some records (list and transactions alike) have a minimum and maximum number of detail lines (most transactions have a list of records that belong to it, such as, for example an itemized list of food and drinks bought on a single receipt at a restaurant); and some fields have a limited type of acceptable values based on the input of other fields for that record (e.g., if a journal entry specifies an Accounts Receivable account, a Customer must be also chosen but an Employee could not be chosen instead).","Client Computer","Reference is next made to  which shows in block diagram form a client computer  in accordance with one embodiment of the present disclosure. The client computer  comprises a controller comprising at least one processor  (such as a microprocessor) for controlling its overall operation connected to a circuit board (not shown) to which other components are connected. The client computer  also comprises a communication subsystem , such as an Ethernet connection or modem, for performing communication functions and providing access to the communication network  (e.g., Internet) including at least TCP\/IP connectivity and possibly Hypertext Transfer Protocol (HTTP) connectivity. The computer  may also comprise or be connected to a firewall (not shown) in which case the firewall should be set to allow remote TCP\/IP connections generally, or to allow remote TCP\/IP connections from the synchronization server  specifically (potentially blocking other remote TCP\/IP connections).","The client computer  also comprises a display screen  or monitor connected to the processor , one or more user input devices such as a keyboard  and navigation tool  (such as a mouse) connected to the processor  for sending user input signals to the processor  in response to user inputs, one or more memories or electronic storage elements connected to the processor  such as a hard disk drive (HDD)  or other non-volatile memory such as flash memory, random access memory (RAM) , and read only memory (ROM) . The client computer  may also comprise a data port  such as serial data port (for example, a Universal Serial Bus (USB) data port) and auxiliary input\/output (I\/O) devices .","The processor  operates under stored program control and executes software modules  stored in memory such as persistent memory, for example, in the HDD . The software modules  comprise operating system software , data , the accounting application  including one or more accounting databases , client request interface , listener , integration engine , and other software applications . Those skilled in the art will appreciate that the software modules  or parts thereof may be temporarily loaded into volatile memory such as the RAM . The RAM  is used for storing runtime data variables and other types of data or information, as will be apparent to those skilled in the art. Although specific functions are described for various types of memory, this is merely an example, and those skilled in the art will appreciate that a different assignment of functions to types of memory could also be used.","The listener  and integration engine  may, among other things, be stand-alone software applications, part of the operating system , or part of the accounting application  (for example, an \u201cadd-on\u201d or \u201cplug-in\u201d to the accounting application ) or other software application . In some embodiments, the functions performed by the listener  and the integration engine  may each be realized as a plurality of independent elements rather than single elements, and any one or more of these elements may be implemented as part of other software modules.","Synchronization Server","Reference is next made to  which shows in block diagram form a synchronization server  in accordance with one embodiment of the present disclosure. The synchronization server  is a computer implementing one or more server applications configured for performing the processes and functions described herein. The synchronization server  comprises a controller comprising at least one processor  (such as a microprocessor) for controlling its overall operation connected to a circuit board (not shown) to which other components are connected. The synchronization server  also comprises a communication subsystem  for performing communication functions for directly or indirectly communicating with various connection points of the synchronization system . The communication subsystem  provides access to the communication networks ,  (e.g., Internet) including at least TCP\/IP connectivity and possibly HTTP connectivity.","The synchronization server  may further comprise a display screen  or monitor connected to the microprocessor , one or more user input devices such as a keyboard  and navigation tool  (such as a mouse) connected to the microprocessor  for sending user input signals to the microprocessor  in response to user inputs, one or more memories or electronic storage elements connected to the microprocessor  such as a HDD  or other non-volatile memory such as flash memory, RAM , ROM , a data port  such as serial data port (for example, a USB data port), and auxiliary I\/O devices . Other features of the synchronization server  for implementing the processes and functions described herein will be appreciated by persons ordinarily skilled in the art.","The microprocessor  operates under stored program control and executes software modules  stored in memory such as persistent memory, for example, in the HDD . The software modules  comprise operating system software , data , the one or more server accounting databases , Web server  for providing the Web server, synchronization Web service module for providing the synchronization Web service , authentication module  for authenticating user accounts and\/or client computers , TCP\/IP server  for providing TCP\/IP connectivity for connection to client computers , server application interface module for provided the server application interface  for interacting with third party applications , and conflicts registry  storing conflicts which occurred during synchronization operations. Other data  and applications  necessary for performing the various functions of the synchronization server  are also stored on the HDD . Those skilled in the art will appreciate that the software modules  or parts thereof may be temporarily loaded into volatile memory such as the RAM . The RAM  is used for storing runtime data variables and other types of data or information, as will be apparent to those skilled in the art. Although specific functions are described for various types of memory, this is merely an example, and those skilled in the art will appreciate that a different assignment of functions to types of memory could also be used.","Full Synchronization","Referring now to , example operations  of a full synchronization method (sometimes referred to as a \u201cfull synch\u201d) in accordance with one embodiment of the present disclosure will now be described. The purpose of a full synchronization is to compare every record on the client accounting database  with every record in the server accounting database  and to update any client side or server side changes.","In the first step , a request to initiate a full synchronization is received by either from the integration engine  on the client computer  or the synchronization Web server  of the synchronization server . A full synchronization may be initiated in one of four ways: (1) in response to corresponding input received on the client computer  to perform a full synchronization, for example in response to user selection of a user interface element or menu option of the GUI of the accounting application  to perform a full synchronization; (2) in response to corresponding input received on the client computer  to connect to the client accounting database  when it has not been previously synchronized with the server accounting database , for example by user selection of a corresponding user interface element or menu option of the GUI of the accounting application  to \u201cconnect\u201d to the client accounting database ; (3) via the TCP\/IP server  when a Web service or Web application calls on it to request a full synchronization from the integration engine  (for example, it is initiated in a third party application  in response to user input, which results in a call from the third party application  to the server application interface  which then calls the TCP\/IP server ); or (4) at a periodic intervals in accordance with synchronization preferences  set by the end user (e.g., every 24 hours). Periodic synchronization is typically initiated on the client side by the integration engine  in accordance with the synchronization preferences . In embodiments in which the synchronization preferences  are stored on the synchronization server , the synchronization preferences  are checked every time a synchronization operation is performed at which time the integration engine  sets a timer in accordance with the next scheduled full synchronization.","Next, in step  the integration engine  determines the version of the client accounting application  on the client computer  via the client request interface . The integration engine  may determine the version directly from the client request interface , or based on information provided by the client request interface . Alternatively, the client request interface  may determine the version based on information stored by the client accounting application  and provided the version to the integration engine . When the full synchronization operations  are initiated by the synchronization server , the synchronization Web service  instructs the integration engine  to determine the version of the client accounting application . In other embodiments, information regarding the software capabilities including the accounting objects, tables and fields supported other than the version of the client accounting application  may be used (e.g. release information, edition information, metadata, product description, etc.).","Next, in step  the integration engine  sends identifying information (e.g., user name and company account), a password and the current public IP address and port number for the connection to the TCP\/IP server  to the synchronization Web service . The synchronization Web service  then sends this information to the authentication server  which validates the respective user account and determines whether there is a corresponding server accounting database  for the user account when initiated by the client, or whether there is a corresponding client accounting database  for the user account when initiated by the server. If a corresponding client accounting database  is not found, the synchronization operation fails.","When the synchronization operation fails, operations proceed to step  where the synchronization Web service  communicates the synchronization failure to the integration engine . The integration engine  may display a message including a notification of the synchronization failure on the display screen  of the client computer  to notify the user of the outcome, further processing stops and the operations  end.","When the user account is validated and a corresponding client accounting database  is found, processing proceeds to step .","Next, in step  the accounting objects to be synchronized is determined. This comprises downloading synchronization preferences  to the client computer  from the server , determining the tables supported by the client accounting application  and determining the respective permission attributes associated with each of the tables in the database . The integration engine  builds a list of the accounting objects in client accounting database  and server accounting database , determines changes in accounting objects between client accounting database  and server accounting database , and then builds a list of the accounting objects to be synchronized based on the determined changes.","Determining the tables supported by the client accounting application , in at least some embodiments, requires comparing the version of the client accounting application  with a predetermined mapping of version to tables to be synchronized. Thus, the list of tables to be synchronized can be different depending on the accounting software and the specific version of that accounting software.","Determining the respective permission attributes associated with each of the tables in the database  comprises determining whether the table permission attributes match a rule for synching the table. In some embodiments, each table has at least the following three flags (or other identifiers) associated with it: (1) Show\/Hide; (2) Edit (true\/false); and (3) Add (true\/false). Each of the permission attribute flags control a permission associated with the table: the Show\/Hide flag controls whether the table can be viewed; (2) the Edit flag controls whether the records in the table can be edited; and (3) the Add flag controls whether the records in the table can be added. The lowest level of permission is view (i.e. a table cannot be edited or added to if it cannot be viewed. In some embodiments, only tables supported by the client accounting application  which have a show (or view) permission flag are synchronized. For example, if the Invoice Table has a Show flag, a false Edit flag, and a true Add flag, the Invoice Table will be synchronized with the server accounting database  and will be viewable to the server  and third party applications . In addition, invoice records can be added to the table by the server  and third party applications , but invoice records cannot be edited by the server  and third party applications .","Each table's permission attributes are stored as a mapping separate from the table itself which associates the table by a table identifier (ID) with its respective permission attribute flags. These mappings\/relations conform to the requirements of the SDK or API of the client accounting application  and are stored on the client computer  by the client accounting application  and on the server . These mappings\/relations are updated during a synchronization operation to accommodate for changes to the client accounting application . This captures situations in which the client accounting application  has been upgraded from a lower version to a higher version and still maintains the same account with the server .","Next, in step  the first object to be synchronized in the list of objects is selected in accordance with the synching order described above.","The integration engine  requests a list of added, modified or deleted records from the synchronization Web service . The synchronization Web service  checks the server accounting database  for any records in the table that have been added, modified or marked for deletion and have not yet been synchronized to the accounting application . The synchronization Web service  then builds a list of these records and sends it back to the integration engine . As noted above, the records are provided in an XML file for each accounting object wherein each XML file includes a complete set of records for the respective accounting object.","If a record has been added to a table in the selected object on the server accounting database  and additions are permitted in accordance with the permission flags for the various fields in the table, the integration engine  will obtain the record from the server  and send an \u201cAdd Request\u201d to the client request interface . Typically, the integration engine  receives a preformatted XML file from synchronization Web service  which formats the record according to version of the client accounting application  in accordance with its database schema. The web service  determines which fields in the object's table(s) to synchronize in accordance with the fields supported by the client accounting database  in a preliminary step. This determination is typically performed by analysing the version of the client accounting application . If the field is not supported by the client accounting database , it will not be synchronized. If there are differences between logically equivalent fields in the client accounting database  and server account database , translations may be performed typically on the server side by the server application interface . The permission flags associated with the fields will be considered during this process. As with tables, view, edit and add tags are associated with each field. Only fields with a view flag will be synchronized. Edit and add flags are also considered when a corresponding modification or addition has been made to the respective field in the server accounting database . In embodiments where formatting is not performed by the synchronization Web server , the integration engine  formats the record.","The client request interface  sends the record to the client accounting database  unless the \u201cAdd Request\u201d is rejected. There are several reasons the request can be rejected, such as the record is a duplicate (e.g. duplicate name or number) or violates a business accounting logic rule. If the client request interface  rejects the \u201cAdd Request\u201d, the integration engine  notifies the synchronization Web service . In response to receiving a notification that the \u201cAdd Request\u201d was rejected, the synchronization Web service  adds a corresponding entry in the conflicts registry .","If a record has been modified in the selected table in the server accounting database  and modifications are permitted in accordance with the permission flags for the various fields in the table, the integration engine  requests the modification date of the record in client accounting database  via the client request interface . As noted above, each record has a modification date which comprises a respective field in the respective table. If a record has been modified in both the client accounting database  and server accounting database  since the last synchronization, a conflict occurs. The last synchronization is determined by a last synchronization date stored on the synchronization server , typically in the synchronization preferences , and typically also includes the time of the last successful synchronization. The last synchronization may also be stored on the client computer . The last synchronization date is typically the date at which the last successful synchronization was started rather than the date last successful synchronization completed to accommodate any changes which may have occurred between the start and end of the last successful synchronization. A check of the user preference is then performed, and the conflict is resolved in accordance with user preferences. If the preference is that the record in the server accounting database  is to be used when a conflict occurs, the integration engine  sends a request to the client request interface  to replace the record in the client accounting database  with the record from server database . The record in the client accounting database  is replaced by the client accounting application  in response to receiving the request. This may require the modified record from the server accounting database  to be formatted by the integration engine  in accordance with the version of the accounting application  in embodiments where formatting is not performed by the synchronization Web server .","If the preference is that the record in the client accounting database  is to be used when a conflict occurs, the integration engine  sends a request to the synchronization Web service  to replace the record in the server accounting database  with the record from client accounting database . This may require the modified record from the client accounting database  to be formatted in accordance with the database schema of the server accounting database .","If the preference is to prompt the user when a conflict occurs, the integration engine  sends a notification to the synchronization Web service . The synchronization Web service  in response to the notification enters a conflict into the conflict registry .","If there are no conflicts, the integration engine  requests a modification of the record via the client request interface . If the record no longer exists in the client accounting database  or the modification request is rejected, the client request interface  notifies the integration engine . The integration engine  then sends a notification to the synchronization Web service . The synchronization Web service  in response to the notification enters a conflict into the conflict registry . Otherwise, the record in the client accounting database  is replaced by the client accounting application  in response to receiving the request. This may require the modified record from the server accounting database  to be formatted in accordance with the version of the accounting application .","If a record has been marked for deletion by the server , the integration engine  will request that the record will be deleted in the client accounting database  via the client request interface . If the client request interface  approves of the request, the record in the client accounting database  is deleted by the client accounting application  and the integration engine  notifies the synchronization Web service  unless the request is rejected. The synchronization Web service  in turn deletes the record from the server accounting database . If the deletion request is rejected, the client request interface  notifies the integration engine . A deletion could be rejected for a number of reasons, but usually because there are dependent records which depended from the record for which deletion was requested. For example, a customer cannot be deleted if there are transactions already existing for that customer. The integration engine  then sends a notification to the synchronization Web service . The synchronization Web service  in response to the notification enters a conflict into the conflict registry .","Next, in step  a check is performed to determine if any records in the selected table have been deleted in the client accounting database  since the last successful synchronization. The integration engine  sends a request to the client request interface  for a list of deleted transactions for this table that have occurred since the last successful synchronization. In other embodiments where the client accounting application  does not support a list of deleted transactions for this table that have occurred since the last successful synchronization (such as, for example, Simply Accounting), this step is omitted.","If the client request interface  provides a non-empty list, the integration engine  sends the list to the synchronization Web service  and requests the deletion of the corresponding records in the server accounting database . In response to receiving the request and the list, the synchronization Web service  deletes the corresponding records in the server accounting database . If the client request interface  provides an empty list, there are no records to be updated in the server accounting database  and processing process to the step .","Next, in step  a check is performed to determine if there are any differences between the selected table in the client accounting database  and the selected table in the server accounting database . If there are differences between logically equivalent fields in the client accounting database  and server account database , translations may be performed typically on the server side by the server application interface . The permission flags associated with the fields will be considered during this process. As with tables, view, edit and add tags are associated with each field. Only fields with a view flag will be synchronized. Edit and add flags are also considered when a corresponding modification or addition has been made to the respective field in the server accounting database .","The step  identifies any additions and modifications to the client accounting database  as well as any records that have been deleted on the server accounting database  or client accounting database  that were not identified in the foregoing steps. Deleted records which would not be identified in the foregoing steps are likely rare, but can happen in situations such as, for example, when the user performs a database restore on the client computer .","The integration engine  first requests a list of all records from the server accounting database  via the synchronization Web service . Next, the integration engine  requests a list of all records in the client accounting database  via client request interface . Next, the integration engine  compares each record in both lists to determine if any records are out of synchronization or are missing from either the client accounting database  or the server accounting database .","For the records that are out of synchronization, the integration engine  requests the synchronization Web service  to update the server accounting database  with the updated records from the client accounting database . Because server-side changes were already processed in step , there is no need to look at synchronization preferences  so the client accounting application  will \u201cwin\u201d in the event of a conflict. For records that exist on the server accounting database  but no longer exist on the client accounting database , the integration engine  instructs the synchronization Web service  to make an entry in the conflict registry . This may require any added or modified record to be formatted in accordance with the version of the accounting application \/client accounting database , or from the server accounting database , as the case may be.","As each record in table is synchronized, it is marked as being either: (i) partially synchronized using a status flag or other identifier such as, for example, a \u201ctemporary\u201d status flag; or (ii) fully synchronized, for example, no \u201ctemporary\u201d status flag is present. When all records in the selected table have been synchronized, the table is marked as being either: (i) partially synchronized; or (ii) fully synchronized using a status flag or other identifier. In some embodiments, a \u201cContains Unsynchronized Records\u201d flag or \u201cDoes Not Contain Unsynchronized Records\u201d flag is used to indicate the synchronization state of the table.","Next, in step  the integration engine  determines whether there are any tables in the list of tables that have yet to be synchronized. This involves looking at the status flags of the tables. If any of the tables have yet to be synchronized, processing loops back to step  and the next table in the list of tables is selected in accordance with the synching order. The steps , , and  are then repeated. The synchronization operations  continue to loop until all tables in the list of tables to be synchronized have been synchronized. Once all the tables in the list of tables that have been synchronized, the operations  end.","Changes-Only Synchronization","Referring now to , example operations  of a \u201cChanges-Only\u201d synchronization method (sometimes referred to as a \u201cchanges-only synch\u201d) in accordance with one embodiment of the present disclosure will now be described. The purpose of a changes-only synchronization is to identify any changes on the client accounting database  and any changes on the server accounting database  since the last synchronization was performed, and to update any client side or server side changes since the last synchronization.","In the first step , a request to initiate a changes-only synchronization is received by either the integration engine  on the client computer  or the synchronization Web server  of the synchronization server . A changes-only synchronization may be initiated in one of four ways: (1) in response to corresponding input received on the client computer  to perform a changes-only synchronization, for example in response to user selection of a user interface element or menu option of the GUI of the integration engine  to perform a changes-only synchronization; (2) in response to corresponding input received on the client computer  to connect to the client accounting database , for example by user selection of a corresponding user interface element or menu option of the GUI of the integration engine  to \u201cconnect\u201d to the client accounting database ; (3) via the TCP\/IP server  when a Web service or Web application calls on it to request a changes-only synchronization from the integration engine ; or (4) at periodic intervals in accordance with preferences set by the end user (e.g., every 20 minutes).","Next, in step  the integration engine  determines the version of the client accounting application  on the client computer  via the client request interface . The integration engine  may determine the version directly from the client request interface , or based on information provided by the client request interface . Alternatively, the client request interface  may determine the version based on information stored by the client accounting application  and provided the version to the integration engine . When the changes-only synchronization operations  are initiated by the synchronization server , the synchronization Web service  instructs the integration engine  to determine the version of the client accounting application . In other embodiments, information regarding the software capabilities including the tables and fields supported other than the version of the client accounting application  may be used (e.g. release information, edition information, metadata, product description, etc.).","Next, in step  the integration engine  sends identifying information (e.g., user name and company account), a password and the current public IP address and port number for the connection to the TCP\/IP server  to the synchronization Web service . The synchronization Web service  then sends this information to the authentication server  which validates the respective user account and determines whether there is a corresponding server accounting database  for the user account when initiated by the client, or whether there is a corresponding client accounting database  for the user account when initiated by the server. If a corresponding client accounting database  is not found, the synchronization operation fails.","When the synchronization operation fails, operations proceed to step  where the synchronization Web service  communicates the synchronization failure to the integration engine . The integration engine  may display a message including a notification of the synchronization failure on the display screen  of the client computer  to notify the user of the outcome, further processing stops and the operations  end.","When the user account is validated and a corresponding client accounting database  is found, processing proceeds to step .","Next, in step  the accounting objects to be synchronized is determined. This comprises downloading synchronization preferences  to the client computer  from the server , determining the tables supported by the client accounting application  and determining the respective permission attributes associated with each of the tables in the database . The integration engine  builds a list of the accounting objects in client accounting database  and server accounting database , determines changes in accounting objects between client accounting database  and server accounting database  since the last successful synchronization, and then builds a list of the accounting objects to be synchronized based on the determined changes.","Determining the tables supported by the client accounting application , in at least some embodiments, requires comparing the version of the client accounting application  with a predetermined mapping of version to tables to be synchronized. Thus, the list of tables to be synchronized can be different depending on the accounting software and the specific version of that accounting software.","Determining the respective permission attributes associated with each of the tables in the database  comprises determining whether the table permission attributes match a rule for synching the table. In some embodiments, each table has at least the following three flags (or other identifiers) associated with it: (1) Show\/Hide; (2) Edit (true\/false); and (3) Add (true\/false). Each of the permission attribute flags control a permission associated with the table: the Show\/Hide flag controls whether the table can be viewed; (2) the Edit flag controls whether the records in the table can be edited; and (3) the Add flag controls whether the records in the table can be added. The lowest level of permission is view (i.e. a table cannot be edited or added to if it cannot be viewed. In some embodiments, only tables supported by the client accounting application  which have a show (or view) permission flag are synchronized. For example, if the Invoice Table has a Show flag, a false Edit flag, and a true Add flag, the Invoice Table will be synchronized with the server accounting database  and will be viewable to the server  and third party applications . In addition, invoice records can be added to the table by the server  and third party applications , but invoice records cannot be edited by the server  and third party applications .","Each table's permission attributes are stored as a mapping separate from the table itself which associates the table by a table identifier (ID) with its respective permission attribute flags. These mappings\/relations conform to the requirements of the SDK or API of the client accounting application  and are stored on the client computer  by the client accounting application  and on the server . These mappings\/relations are updated during a synchronization operation to accommodate for changes to the client accounting application . This captures situations in which the client accounting application  has been upgraded from a lower version to a higher version and still maintains the same account with the server .","Next, in step  an accounting object for synchronization is selected in accordance with the synching order.","Next, in step  changes in the selected table in the server accounting database  are synchronized. The integration engine  requests a list of added, modified or deleted records from the synchronization Web service . The synchronization Web service  checks the server accounting database  for any records in the table that have been added, modified or marked for deletion and have not yet been synchronized to the accounting application . The synchronization Web service  then builds a list of these records and sends it back to the integration engine . As noted above, the records are provided in an XML file for each accounting object wherein each XML file includes a complete set of records for the respective accounting object.","If a record has been added to the selected table on the server accounting database  and additions are permitted in accordance with the permission flags for the various fields in the table, the integration engine  will obtain the record from the server  and send an \u201cAdd Request\u201d to the client request interface . Typically, the integration engine  receives a preformatted XML file from synchronization Web service  which formats the record according to version of the client accounting application  in accordance with its database schema. The web service  determines which fields in the table to synchronize in accordance with the fields supported by the client accounting database , typically by analysing the version of the client accounting application . If the field is not supported by the client accounting database , it will not be synchronized. If there are differences between logically equivalent fields in the client accounting database  and server account database , translations may be performed typically on the server side by the server application interface . The permission flags associated with the fields will be considered during this process. As with tables, view, edit and add tags are associated with each field. Only fields with a view flag will be synchronized. Edit and add flags are also considered when a corresponding modification or addition has been made to the respective field in the server accounting database . In embodiments where formatting is not performed by the synchronization Web server , the integration engine  formats the record.","The client request interface  sends the record to the client accounting database  unless the \u201cAdd Request\u201d is rejected. There are several reasons the request can be rejected, such as the record is a duplicate (e.g. duplicate name or number) or violates a business accounting logic rule. If the client request interface  rejects the \u201cAdd Request\u201d, the integration engine  notifies the synchronization Web service . In response to receiving a notification that the \u201cAdd Request\u201d was rejected, the synchronization Web service  adds a corresponding entry in the conflicts registry .","If a record has been modified in the selected table in the server accounting database  and modifications are permitted in accordance with the permission flags for the various fields in the table, the integration engine  requests the modification date of the record in client accounting database  via the client request interface . As noted above, each record has a modification date which comprises a respective field in the respective table. If a record has been modified in both the client accounting database  and server accounting database  since the last synchronization, a conflict occurs. The last synchronization is determined by a last synchronization date stored on the synchronization server , typically in the synchronization preferences , and typically also includes the time of the last successful synchronization. The last synchronization date is typically the date at which the last successful synchronization was started rather than the date last successful synchronization completed to accommodate any changes which may have occurred between the start and end of the last successful synchronization. A check of the user preference is then performed, and the conflict is resolved in accordance with user preferences. If the preference is that the record in the server accounting database  is to be used when a conflict occurs, the integration engine  sends a request to the client request interface  to replace the record in the client accounting database  with the record from server database . The record in the client accounting database  is replaced by the client accounting application  in response to receiving the request. This may require the modified record from the server accounting database  to be formatted by the integration engine  in accordance with the version of the accounting application  in embodiments where formatting is not performed by the synchronization Web server .","If the preference is that the record in the client accounting database  is to be used when a conflict occurs, the integration engine  sends a request to the synchronization Web service  to replace the record in the server accounting database  with the record from client accounting database . This may require the modified record from the client accounting database  to be formatted in accordance with the database schema of the server accounting database .","If the preference is to prompt the user when a conflict occurs, the integration engine  sends a notification to the synchronization Web service . The synchronization Web service  in response to the notification enters a conflict into the conflict registry .","If there are no conflicts, the integration engine  requests a modification of the record via the client request interface . If the record no longer exists in the client accounting database  or the modification request is rejected, the client request interface  notifies the integration engine . The integration engine  then sends a notification to the synchronization Web service . The synchronization Web service  in response to the notification enters a conflict into the conflict registry . Otherwise, the record in the client accounting database  is replaced by the client accounting application  in response to receiving the request. This may require the modified record from the server accounting database  to be formatted in accordance with the version of the accounting application .","If a record has been marked for deletion by the server , the integration engine  will request that the record will be deleted in the client accounting database  via the client request interface . If the client request interface  approves of the request, the record in the client accounting database  is deleted by the client accounting application  and the integration engine  notifies the synchronization Web service  unless the request is rejected. The synchronization Web service  in turn deletes the record from the server accounting database . If the deletion request is rejected, the client request interface  notifies the integration engine . A deletion could be rejected for a number of reasons, but usually because there are dependent records which depended from the record for which deletion was requested. For example, a customer cannot be deleted if there are transactions already existing for that customer. The integration engine  then sends a notification to the synchronization Web service . The synchronization Web service  in response to the notification enters a conflict into the conflict registry .","Next, in step  a check is performed to determine if any records in the selected table have been deleted in the client accounting database  since the last successful synchronization. The integration engine  sends a request to the client request interface  for a list of deleted transactions for this table that have occurred since the last successful synchronization. In other embodiments where the client accounting application  does not support a list of deleted transactions for this table that have occurred since the last successful synchronization (such as, for example, Simply Accounting), this step is omitted.","If the client request interface  provides a non-empty list, the integration engine  sends the list to the synchronization Web service  and requests the deletion of the corresponding records in the server accounting database . In response to receiving the request and the list, the synchronization Web service  deletes the corresponding records in the server accounting database . If the client request interface  provides an empty list, there are no records to be updated in the server accounting database  and processing process to the step .","Next, in step  a check is performed on the client accounting database  to identify any recent changes that have occurred since the last synchronization in accordance with the last synchronization date.","The integration engine  first requests a list of any records modified since the last successful synchronization. For each changed record, the integration engine  requests the synchronization Web service  to update the server accounting database  with the updated records from the client accounting database . This may require any added or modified record to be formatted in accordance with the version of the server accounting database .","As each record in the table is synchronized, it is marked as being either: (i) partially synchronized using a status flag or other identifier such as, for example, a \u201ctemporary\u201d status flag; or (ii) fully synchronized, for example, no \u201ctemporary\u201d status flag is present. When all records in the selected table have been synchronized, the table is marked as being either: (i) partially synchronized; or (ii) fully synchronized using a status flag or other identifier. In some embodiments, a \u201cContains Unsynchronized Records\u201d flag or \u201cDoes Not Contain Unsynchronized Records\u201d flag is used to indicate the synchronization state of the table.","Next, in step  the integration engine  determines whether there are any tables in the list of tables that have yet to be synchronized. This involves looking at the status flags of the tables. If any of the tables have yet to be synchronized, processing loops back to step  and the next table in the list of tables is selected in accordance with the synching order. The steps , , and  are then repeated. The synchronization operations  continue to loop until all tables in the list of tables to be synchronized have been synchronized. Once all the tables in the list of tables that have been synchronized, the operations  end.","Real-Time (or \u201cOn-Demand\u201d) Client Initiated Synchronization","Referring now to , example operations  of a real-time client initiated synchronization method in accordance with one embodiment of the present disclosure will now be described. The purpose of real-time client initiated synchronization is to identify any changes on the client accounting database  in real-time and to synchronize those changes with the server accounting database . A real-time client initiated synchronization is initiated (or triggered) when a change is detected in the client accounting database  when the accounting application  and synchronization server  are connected to each other via the network .","In the first step , a change in one or more records occurs in the client accounting database . The change is detected by the client request interface  which notifies the listener  of the change. The listener  typically detects the notification from the client request interface , but could detect the change records in some embodiments.","Next, in step  the listener  notifies the integration engine  of the change in the client accounting database  in response to detection of the notification from the listener .","Next, in step  the integration engine  determines the version of the client accounting application  on the client computer  if the version information is not already known to the integration engine . The integration engine  may determine the version directly from the client request interface , or based on information provided by the client request interface . Alternatively, the client request interface  may determine the version based on information stored by the client accounting application  and provided the version to the integration engine . In other embodiments, information regarding the software capabilities including the accounting objects and\/or tables supported other than the version of the client accounting application  may be used (e.g. release information, edition information, metadata, product description, etc.).","Next, in step  the user identity is verified and it is determined whether there is a corresponding server accounting database  for the user account. Typically, this comprises the user logging in to the server application  by providing requested identifying information and password (if any). The integration engine  sends the version information, provided identifying information, password and the current public IP address and port number for the connection to the TCP\/IP server  to the synchronization Web service . The synchronization Web service  then sends this information to the authentication server  which validates the respective user account and determines whether there is a corresponding server accounting database  for the user account.","If the user account validation fails or a corresponding server accounting database  is not found, processing proceeds to step  in which the synchronization Web service  communicates the result (e.g., synchronization failure) to the integration engine . A message including a notification of the synchronization failure is displayed by the integration engine  on the display screen  of the client computer  to notify the user of the outcome, further processing stops and the operations  end.","If the user account is validated and a corresponding server accounting database  is found, processing proceeds to step .","Next, in step  the synchronization preferences  are downloaded to the client computer  from the server  and the integration engine  contacts the client request interface  and requests all accounting objects affected by the changed records from the client accounting database . The integration engine  sends the affected accounting objects to the synchronization Web service  in the form of an XML file for each accounting object, and instructs the synchronization Web service  to make corresponding changes to the affected accounting objects in the server accounting database . As noted above, each XML file includes a complete set of records for the respective accounting object.","Next, in step  the changed record is added to the respective table, deleted from to the respective table, or replaces the corresponding record in the respective table. This applies to additions, modifications and deletions to records. There is no chance for rejection or conflict between the client accounting database  and the server accounting database . The synchronization server  must accept all changes from the client accounting database . The operations  then end.","Real-Time (or \u201cOn-Demand\u201d) Server Initiated Synchronization","Referring now to , example operations  of a real-time server initiated synchronization method in accordance with one embodiment of the present disclosure will now be described. The purpose of real-time server initiated synchronization is to identify any changes on the server accounting database  in real-time and to synchronize those changes with the client accounting database . A real-time server initiated synchronization is initiated (or triggered) when a notifiable change is detected in the server accounting database  when the accounting application  and synchronization server  are connected to each other via the network . Only changes to accounting fields will cause a notification and which will be detected by the server application interface  and trigger a real-time server synchronization operation. For example, a user of a third party application  can add \u201cnon-accounting\u201d field on the server accounting database  to an accounting object, for example, for informational purposes only. If the change was in relation to a non-accounting field and not any of the accounting fields, it would not be a notifiable change.","In accordance with the example embodiments of the present disclosure, a TCP\/IP connection between the client computer  and a TCP\/IP server  of the synchronization server  is required for a real-time server synchronization operation to be performed. Each time the client accounting application  is started on the client computer , the integration engine  sends a request to the Web server  for the assignment of a TCP\/IP server . The synchronization server  may have one or more multiple TCP\/IP servers depending on the embodiment and implementation.","Next, the integration engine  then initiates a TCP\/IP connection with the assigned TCP\/IP server . With the TCP\/IP connection, the client computer  acts as a \u201cclient\u201d rather than a \u201cserver\u201d to avoid or reduce connectivity problems relating to firewalls and shared public IP addresses on multiple computers in a networked environment.","Next, a public IP address and port for connecting to the assigned TCP\/IP server  is assigned to the client computer  for use by the integration engine .","Next, the integration engine  notifies the Web server  that it has successfully made a connection to the TCP\/IP server , and registers an identifier (e.g., such as a user name and\/or company account) with the corresponding public IP address and port. Each TCP\/IP server  maintains many active simultaneous connections from many users\/company accounts, each with their own public IP address and port.","In the first step , one or more changes in the server accounting database  are detected by the synchronization server . The change in the server accounting database  may be made by the server application interface , for example, as a result of instructions from an authorization third party application , or detected by the server application interface .","Next, in step  the server application interface  communicates the one or more changes which have occurred in the server accounting database  to an integration engine  on a client computer  associated with the changed records(s) via a TCP\/IP call from the TCP\/IP server  to the client computer  via its public IP address and port. This step comprises a number of sub-steps.","First, the server application interface  checks a registry of the Web server  to ensure that a TCP\/IP connection currently exists to a client computer  associated with the server accounting database  have the changed records(s). As noted above, a TCP\/IP connection between the client computer  and a TCP\/IP server  of the synchronization server  is required for a real-time server synchronization operation to be performed. While this connection is typically established each time the client accounting application  is started on the client computer , the client computer  and synchronization server  can be disconnected for a number of reasons.","The registry check is performed using identifying information associated with the changed records(s) in server accounting databases , such as a user name or ID, a company account name or ID, a tenant ID, or any combination thereof. The identifying information associated with the changed records(s) is compared against identifying information associated with existing TCP\/IP connection.","Next, the server application interface  calls the assigned TCP\/IP server  to notify the integration engine  on the client computer  of the changed records(s) via its local TCP\/IP client. The TCP\/IP server  identifies the respective TCP\/IP connection from many possible TCP\/IP connections via the public IP address and port identified above which are passed to the TCP\/IP server  from the server application interface .","When a TCP\/IP connection does not exist for the respective client computer , the synch operations fail as the TCP\/IP connection must be established by a user on the client computer  for user authentication and security purposes.","Next, in step  a series of checks are performed by the integration engine  to validate the synchronization operation and obtain information required for the synchronization operation. First, the integration engine  sends identifying information (e.g., user name and company account) previously provided, password and the current public IP address and port number for the connection to the TCP\/IP server  to the synchronization Web service . The synchronization Web service  then sends this information to the authentication server  which validates the respective user account and determines whether there is a corresponding server accounting database  for the user account. If a corresponding client accounting database  is not found, the synchronization operation fails.","When the synchronization operation fails, operations proceed to step  where the synchronization Web service  communicates the synchronization failure to the integration engine . The integration engine  may display a message including a notification of the synchronization failure on the display screen  of the client computer  to notify the user of the outcome, further processing stops and the operations  end.","When the user account is validated and a corresponding client accounting database  is found, processing proceeds to step .","Next, in step  the synchronization Web service  requests and obtains from the integration engine  the version of the client accounting application  on the client computer  associated with the current public IP address and port number. The integration engine  determines the version of the client accounting application  on the client computer  via the client request interface  if the version information is not already known to the integration engine .","The integration engine  may determine the version directly from the client request interface  or based on information provided by the client request interface . Alternatively, the client request interface  may determine the version based on information stored by the client accounting application  and provide the version to the integration engine . In some embodiments, version information regarding the software capabilities of the client accounting application , such as the accounting objects, tables and fields supported by the client accounting application , may be used to determine the version of the client accounting application  rather than a version number, release information, edition information, metadata, product description, etc. This step is optional and may not be performed in all embodiments.","Next, in step  the synchronization preferences  are downloaded to the client computer  from the server  and the integration engine  requests from synchronization Web service  a list of the one or more changed records in the server accounting database . Next, a changes-only synchronization will be performed for the corresponding records in the client accounting database  and only those records. Unchanged records are not synchronized.","Next, in step  an accounting object is selected for synchronization in accordance with the synching order.","Next, in step  the selected accounting object in the client accounting database  is synchronized to match the pair version of the selected accounting object in the server accounting database  to reflect the change records detected by the server .","The integration engine  requests a list of added, modified or deleted records from the synchronization Web service . The synchronization Web service  checks the server accounting database  for any records in the selected accounting object that have been added, modified or marked for deletion and have not yet been synchronized to the client accounting application . The synchronization Web service  then builds a list of these records and sends it back to the integration engine .","If one or more records have been added to the selected accounting object in the server accounting database  and additions are permitted in accordance with the permission flags for the various fields in the record type, the synchronization Web service  will create an XML file on the server  comprising the selecting accounting object defined affected the added record and sent the XML file to the integration engine  on the client computer  with an \u201cAdd Request\u201d to the client request interface . The XML file comprises all records which make up the selected accounting object.","In the process of creating the XML file, the synchronization Web service  will determine the fields to include in the XML file based on the fields supported by the version of the client accounting application . If the field is not supported by the client accounting database , it will not be synchronized. If there are differences between logically equivalent fields in the client accounting database  and server account database , translations may be performed typically on the server side by the server application interface . The permission flags associated with the fields will be considered during this process. View, edit and add tags are associated with each field. Only fields with a view flag will be synchronized. Edit and add flags are also considered when a corresponding modification or addition has been made to the respective field in the server accounting database .","It will be appreciated that while XML is used in the described embodiment, document formats other than XML could be used in other embodiments.","The client request interface  will send the record to the client accounting database  to be added by the client accounting application  unless the add Request is rejected. If the client request interface  rejects the add request, the integration engine  notifies the synchronization Web service . In response to receiving a notification that the add request was rejected, the synchronization Web service  adds a corresponding entry in the conflicts registry . When the add request is accepted, the record is added to the client accounting database  by the client accounting application .","If one or more records have been modified in the selected accounting object in the server accounting database  and modifications are permitted in accordance with the permission flags for the various fields in the record type, the integration engine  requests the modification date of the record in client accounting database  via the client request interface . As noted above, each record has a modification date which comprises a respective field in the respective object. If a record has been modified in both the client accounting database  and server accounting database  since the last synchronization, a conflict occurs.","Conflicts are resolved in accordance with the synchronization preferences . If the preference is that the record in the server accounting database  is to be used when a conflict occurs, the integration engine  sends a request to the client request interface  to replace the record in the client accounting database  with the record from server database . The record in the client accounting database  is replaced by the client accounting application  in response to receiving the request. This may require the modified record from the server accounting database  to be formatted in accordance with the version of the accounting application .","If the preference is that the record in the client accounting database  is to be used when a conflict occurs, the integration engine  sends a request to the synchronization Web service  to replace the record in the server accounting database  with the record from client accounting database . This may require the modified record from the client accounting database  to be formatted in accordance with the database schema of the server accounting database .","If the preference is to prompt the user when a conflict occurs, the integration engine  sends a notification to the synchronization Web service . The synchronization Web service  in response to the notification enters a conflict into the conflict registry .","If there are no conflicts, the integration engine  requests a modification of the record via the client request interface . If the record no longer exists in the client accounting database  or the modification request is rejected, the client request interface  notifies the integration engine . The integration engine  then sends a notification to the synchronization Web service . The synchronization Web service  in response to the notification enters a conflict into the conflict registry . Otherwise, the record in the client accounting database  is replaced by the client accounting application  in response to receiving the request. This may require the modified record from the server accounting database  to be formatted in accordance with the version of the accounting application .","If one or more records in the selected accounting object in the server accounting database  have been marked for deletion by the server , the integration engine  will request that the record will be deleted in the client accounting database  via the client request interface . If the client request interface  approves of the request, the record in the client accounting database  is deleted by the client accounting application  and the integration engine  notifies the synchronization Web service  unless the request is rejected. The synchronization Web service  in turn deletes the record from the server accounting database . If the deletion request is rejected, the client request interface  notifies the integration engine . The integration engine  then sends a notification to the synchronization Web service . The synchronization Web service  in response to the notification enters a conflict into the conflict registry .","Next, in step  a check is performed to determine if any records in the selected accounting object have been deleted in the client accounting database  since the last successful synchronization. This requires the integration engine  to send a request to the client request interface  for a list of deleted transactions for this object that have occurred since the last successful synchronization. If the client request interface  provides a non-empty list to the integration engine , the integration engine  will in turn send the non-empty list to the synchronization Web service  and requests the deletion of the corresponding records in the server accounting database . In response to receiving the request and the list, the synchronization Web service  deletes the corresponding records in the server accounting database . If the client request interface  provides an empty list, there are no records to be updated in the server accounting database  and processing process to the step .","Next, in step  a check is performed on the client accounting database  to identify any changed or added records since the last synchronization in accordance with the last synchronization date. As a preliminary step, the integration engine  determines which records in the selected accounting object to synchronize in accordance with the fields supported by the client accounting database , typically by analysing the version of the client accounting application . If the field is not supported by the client accounting database , it will not be synchronized. If there are differences between logically equivalent fields in the client accounting database  and server account database , translations may be performed typically on the server side by the server application interface . The permission flags associated with the fields will be considered during this process. View, edit and add tags are associated with each field. Only fields with a view flag will be synchronized. Edit and add flags are also considered when a corresponding modification or addition has been made to the respective field in the server accounting database .","The integration engine  first requests a list of any records modified since the last successfully synchronization. For each changed record, the integration engine  requests the synchronization Web service  to update the server accounting database  with the updated records from the client accounting database . This may require any added or modified record to be formatted in accordance with the version of the server accounting database .","As each record in the selected accounting object is synchronized, it is marked as being either: (i) partially synchronized using a status flag or other identifier such as, for example, a \u201ctemporary\u201d status flag; or (ii) fully synchronized, for example, no \u201ctemporary\u201d status flag is present. When each record in the selected accounting object has undergone a change\/synchronization operation performed once, if partially synchronized records exist, the change\/synchronization operation is repeated on partially synchronized records until all of the interdependent records are fully synchronized.","It will be appreciated that steps  and  provide the synchronization of changes made in the client accounting database  in addition to changes made in the server accounting database . This is the result of calling shared functions between the operations  and  in the described embodiments. It will be appreciated that the synchronization of client-side changes not required for a real-time synchronization of server-side changes in the server accounting database . Accordingly, in other embodiments, for example embodiments in which functions are not shared between the processes  and , the steps  and  may be omitted.","Next, in step  the integration engine  determines whether there are any objects that have yet to be synchronized. Once all accounting objects have been synchronized, the operations  end.","While the operations , ,  and  have been described as occurring in a particular order, it will be appreciated to persons skilled in the art that some of the steps may be performed in a different order provided that the result of the changed order of any given step will not prevent or impair the occurrence of subsequent steps. Furthermore, some of the steps described above may be combined in other embodiments, and some of the steps described above may be separated into a number of sub-steps in other embodiments. For example, version information can be determined before or after validating the user and the existing of the required accounting databases.","While example embodiments have been described in the present disclosure in relation to the QuickBooks accounting software, the teachings of the present disclosure can be applied to other business accounting software which provide SDK, an API, or otherwise the ability to directly read and write to the accounting software database. Examples of suitable accounting software with which the teachings of the present disclosure may be used are QuickBooks\u00ae provided by Intuit Inc., PeachTree\u2122 provided by Sage Software, Simply Accounting\u2122 provided by Sage Software, Microsoft Dynamics\u2122 provided by Microsoft Corporation, and Microsoft Small Business Accounting\u2122 provided by Microsoft Corporation.","While the present disclosure is primarily described in terms of methods, a person of ordinary skill in the art will understand that the present disclosure is also directed to various apparatus such as a client computer and server including components for performing at least some of the aspects and features of the described methods, be it by way of hardware components, software or any combination of the two, or in any other manner. Moreover, an article of manufacture for use with the apparatus, such as a pre-recorded storage device or other similar computer readable medium including program instructions recorded thereon, or a computer data signal carrying computer readable program instructions may direct an apparatus to facilitate the practice of the described methods. It is understood that such apparatus, articles of manufacture, and computer data signals also come within the scope of the present disclosure.","The embodiments of the present disclosure described above are intended to be examples only. Those of skill in the art may effect alterations, modifications and variations to the particular embodiments without departing from the intended scope of the present disclosure. In particular, features from one or more of the above-described embodiments may be selected to create alternate embodiments comprised of a sub-combination of features which may not be explicitly described above. In addition, features from one or more of the above-described embodiments may be selected and combined to create alternate embodiments comprised of a combination of features which may not be explicitly described above. Features suitable for such combinations and sub-combinations would be readily apparent to persons skilled in the art upon review of the present disclosure as a whole. The subject matter described herein and in the recited claims intends to cover and embrace all suitable changes in technology."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
