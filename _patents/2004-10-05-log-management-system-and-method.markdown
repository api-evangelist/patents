---
title: Log management system and method
abstract: A system and method for managing log entries associated with execution events in an application. The system and method may include a log provider wrapper for receiving log entries associated with the event and log providers for receiving all or part of the information associated with a log entry. The log provider wrapper, through communication with a logging configuration, may filter the log entry, segment information contained in the log entry, format the information, and deliver the information to one or more log providers. The log providers may send the information to a respective destination medium.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07707189&OS=07707189&RS=07707189
owner: Microsoft Corporation
number: 07707189
owner_city: Redmond
owner_country: US
publication_date: 20041005
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The field of the invention generally relates to logging software events and particularly to a management system enabling a high degree of control over logging.","During the execution or running of an application, a multitude of events may take place. For example, the application may execute multiple steps multiple times. The application may run loops in multiple iterations. It may make and close numerous connections. Threads may be initiated and completed. An event may trigger other events, which may trigger still other events. Prior to execution of such events, an execution plan may be developed showing how the execution of the events will be completed.","An application or an event in an application may generate log events or a historical record of events occurring during the running of an application. After the execution plan is developed but before it is executed, it also may be logged. For troubleshooting purposes, a user may benefit from reviewing the application's logged events. A user may further benefit from viewing information about any of the events that occurred during the execution of an application. Such information may aid in diagnosing problems or answering questions related to results of the execution of the application.","When an event is to be executed, a decision may be made to create a log or not to create a log. That is, a choice may be provided to either log or to not log an event. If the event is to be logged, then information regarding the execution of the event may be sent to a log. Aside from being able to turn logging on or off, little flexibility may be included in the logging technique.","Typically, a logging event may be flat in the sense that all of the log event information may be sent to a single destination. Upon execution of an event, the event information may be logged without any segmenting of the information to retain, for example, desired information and delete undesired information. Instead, all of the event information may be logged. A user then may filter all of the logged events for viewing. That is, the user may view the information in which the user is interested but may not be able to select the event information to be logged. Additionally, some logging may include a filtering of the information before delivery to a single destination. Other logging may include logging to multiple destinations but may not include filtering. Logging options may not include the ability to send a piece of information related to a log event to one destination, and another piece to another destination.","As noted, typically, the event log or logs later may be searched depending on information desired. However, because information is logged and then filtered for viewing purposes, the log may provide information regarding only critical or essential events. System constraints or memory limitations may limit the logging of both critical and less critical events. For example, logging may not record data relating to an execution plan. A choice of only to log or not to log may not enable a user to selectively log a particular kind of event. Additionally, a user may not be able to send part of a log event to one destination and another part of the event to a second destination, even though certain events may be of interest to specific users but not to other users. The typical logging options may not enable a logging event to be selectively delivered to a user who may be interested in the event and to not be delivered to another user who may uninterested in the event.","Therefore, there is a need to enable a user to exercise a fine degree of control over the large volume and different types of logging information regarding execution plans, event executions, and other occurrences within an application. There is a need for a system enabling a log event to be disseminated to multiple destinations and to enable segmenting the log event such that part of the information may be sent to one destination and another part to a second destination. There is a need to enable a user to control logging configurations, log filtering, scope of logging, destination designations, and log formats.","The invention includes a log management system and method providing the capability of selectively logging events and for multiplexing information contained in log entries to multiple destinations. The system may enable selectively producing, maintaining, and delivering information contained in a log entry. The system may provide for filtering of events to determine which potential log entries should be generated. The system may provide for segmenting the log entry so that part of the log entry may be delivered to one user and another part delivered to a second user. The system may provide for segmenting a logging configuration according to the various scopes (i.e. parts, or sections) of the environment in which logging takes place. The system may also provide for the delivering of the log entries to one or more destinations in one or more formats.","The method may include receiving potential log entries related to an event execution or occurrence. The log management system may determine whether there is an interest within or outside of an application that justifies generating one or more of the kinds of log entries. If the log management system determines that there is no interest, then the event may be executed without generating a log entry. If the log management system determines, according to a logging configuration, that there is interest in a log entry, then the log entry may be generated upon or after event execution. The entry may be segmented so that some of the information contained in the log entry may be sent to one destination and some other information may be sent to three destinations. The system and method may also allow for adding an event to an application and providing for selection of log event information associated with the added event.","Other features of the invention are described below.","Example Computing Environment",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer or tester, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers (e.g., client workstations, servers, or other devices). Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, random access memory (RAM), read-only memory (ROM), Electrically-Erasable Programmable Read-Only Memory (EEPROM), flash memory or other memory technology, compact disc read-only memory (CDROM), digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as ROM  and RAM . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data . RAM  may contain other data and\/or program modules.","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the example operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit -through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client devices can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","Log Management System",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["200","200","210","220","230","240","254","256","272","274"]},"The application  may be any type of software application written in any format. For example, the application  may be written in a programming language such as C, Pascal, etc. Also for example, the application  may be written in an object-oriented language. The application  contains the event . The application  may contain numerous events, and the event  is shown as representative of such numerous events. The event  may be any type of action occurring within an application. The event  may be the performance of a function or task, or any other event which may generate a log entry . The application  may have numerous events such as event .","The log entry  may be any type of log entry related to the running of the event  or the application . The log entry , for example, may be related to an execution plan for the event  or for the application . Also for example, the log entry may be a start time or an end time for an execution of the event . The log entry may indicate when the event  triggered the execution of another event. Of course, the event  and the application  may generate numerous log entries.","The event  communicates with the log provider wrapper . Upon a start or execution event, the event  may contact the log provider wrapper and indicate that the log entry  may be available upon or after execution of the event . The event  may then query the log provider wrapper  to determine if the log provider wrapper  is interested in the log entry . The application  may have any number of log provider wrappers. (By way of example and not limitation, a single log provider wrapper  is shown in ).","The log provider wrapper  may be in communication with the logging configuration . If the application  is built on an object model, then the logging configuration  may be an object. Alternatively, the logging configuration  may be logic or code within the application . The log provider wrapper  may consult the logging configuration  associated with the application  to determine if there is interest in the potential log entry .","The logging configuration  may contain evaluation factors for determining whether a log entry  should be produced by the event  upon or after its execution. Such factors may include destinations  indicating which log providers ,  may be interested in the log entry . Additionally the logging configuration  may consider any filtering rules  for each interested log provider , . The filtering rules  indicate which information contained in the log entry  can be delivered to which log providers , . In other words, the entire log entry  may be delivered to each selected destination or just a part of the log entry  may be delivered.","Finally, the logging configuration  may also provide parameters for a format  of the log entry  to be delivered to the log providers , . In an alternative embodiment, the destination  of the log entry  may dictate the format for the log entry without the necessity of a separate determination by the logging configuration . That is, if the destination is the SQL database , then the log entry  may be formatted accordingly.","The log provider wrapper  may consult with the logging configuration  to identify the filtering rules , the potential destinations , and the format  for the log entry . From this, the log provider wrapper  may determine if there is interest within the application  to have the log entry  produced by the event . The logging configuration  may indicate, for example, that the log entry  should be sent to three different destinations in two different formats. In this case, the log provider wrapper  may inform the event  to generate the log entry  during or after execution. If the log provider wrapper  determines, in consultation with the logging configuration , that the application  is not interested in the log entry , then the log provider wrapper indicates to the event  to not generate the log entry .","In an alternative embodiment, the logging configuration  may not inherently contain the information that defines the filtering rules , the destinations , and the format . Instead the logging configuration  may determine this information from the log providers ,  contained in the application . That is, each log provider ,  provides the logging configuration  with the information necessary for the logging configuration  to consult with the log provider wrapper . The logging configuration  may relay information directly from the log providers ,  to the log provider wrapper . The log provider wrapper  then communicates accordingly with the event .","The log providers ,  may be created by the log provider wrapper  based on the logging configuration . The log providers ,  may be responsible for writing the log entry  in an applicable format and sending the log entry  to a particular destination. In an object-model application, the log providers ,  may be objects. In a programming language application, the log providers ,  may be logic or code in the form of a function or other form.","The log provider wrappers ,  each may perform a filtering function separate from, and in addition to, filtering completed by the logging configuration . Each log provider ,  may be configured to accept a log event and filter the log event, retaining only certain information related to the event. Therefore, in one embodiment of the invention, two filtering processes are used: one type for deciding if the log entry  is of interest to any log provider , , and another\u2014completed by the individual log providers , \u2014for deciding which part of the log entry may be retained within the log providers , . For example, a log entry may contain several columns of data such as a column indicating data time, another containing text, another containing data code, and still others containing other information. One log provider  may be interested in a log entry, and therefore the log provider wrapper  may deliver the log event to the log provider . The log provider  may then filter the data and only retain the column with text.","The log providers ,  may be defined by the destination of the log. For example the log provider  may be a file log provider, and the log entry from the log provider  is delivered to a file . Another log provider  may be a SQL database log provider, and therefore log entries from the log provider  are delivered to the SQL database. Formats for the delivery of the log entry  may be defined as the implicit implementation of the log provider , . Of course, those skilled in the art will recognize that there may be other destinations  in addition to the file  and the SQL database . Therefore, there may be other log providers , .","As noted above, the application  may be written in any programming language. If the application is based on an object model, then a default position may be that, if a logging configuration  is not provided in an object, then a default mode requires the event  or the log provider wrapper  to look to a parent object to determine filtering rules, destination, format, etc. If a parent object does not contain a logging configuration , then the default may be to go to the parent of the parent. This process continues until a parent with a logging configuration  is located. Similarly, in an application  written in a programming language that lacks the object structure referred to above, higher level functions containing logic for a logging configuration  may be a default for lower level functions that do not contain a logging configuration . Therefore, in one embodiment, there is a default mechanism, which may reduce the amount of repetitive logging configurations  that are required within the log management system .","After the event  is executed and the log entry  is delivered to the log provider wrapper , the log provider wrapper  may enable multiplexing of the log entry . That is the log provider wrapper  delivers the log entry  or parts of the log entry  to numerous log providers , . The log provider wrapper  enables a single log entry  to be delivered to many places without requiring that two different log events be specified within the event . For example, instead of producing a SQL log to log an event to a SQL database and a flat file log to log the same event to a flat file, one example embodiment of the invention may allow creation of one log entry  to be sent to both the SQL server  and the file .","Additionally, the log management system , through the log provider wrapper  may segment log entry  data so that it can be logged in different ways. For example, the log management system  enables error and warning information to be sent to one destination  to be viewed by system operators. Data processing sampling logging information is sent to another destination  for users focused on completing data quality analysis. Package execution information, time started, time completed, etc, information is sent to a third destination for viewing by users interested in high level reporting.","All of this multiplexed logging may be completed without the source level being involved in the logging event delivery. The configuration of logging events may be completed at a higher level, such as at a parent object level, or at a main function level. This not only aids in reducing duplication of log events  but also diminishes confusion regarding where each log event  is destined.","The ability to selectively retain various parts of the information in a logging event in various places throughout an application  or system  enables the application  or the system  to provide a higher volume of information. Instead of maintaining a log of only critical information or critical errors because of system or memory limitations, the log management system  may enable more selective retention of information.","Additionally, the log management system  and the ability to multiplex information contained in a log event  to numerous destinations  may enable selective viewing of a log event based on the security rights of a user. For example, certain, low security information may be sent to a destination  for viewing by users with lower security rights, and different, more sensitive logging information contained in a logging event  may be sent to a destination  for viewing by users with higher security rights.","The log management system  also allows for extensibility. When an event  (such as a task or function) is added to the application , such event  may contain algorithms in the form of coding, objects, or some other form for a log entry . Such an event may be a pluggable component. The log management system  may allow for a related addition of a log provider. That is, the log provider ,  may be extensible . The added event  may advertise its log entry  so that the logging configuration  knows what information may be logged. (Of course, the event  may have multiple log entries .) A user may then set the configurations for the potential logs from the pluggable component. A user may establish a filter, indicating which log providers ,  should receive a log entry , specify format (if applicable), etc. Then, when the added event  is executed or otherwise occurs, and the pluggable component generates a log, the log provider wrapper  may consult with the logging configuration . Upon consultation, the log provider wrapper  knows what to do with the log events.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIGS. 3A & 3B","b":["305","310","310","315","325","330","335"]},"At step , the event may assemble information for one or more log entries. The event then may provide the log entries to the log provider wrapper at step . Additionally, the event may provide specific information pertinent to the applicable log entry. For example, if the event involves implementation of an execution plan or a part of an execution plan, then assembling information may involve traversing internal instructions that represent workflow to generate a textual representation of the execution plan. The log provider wrapper may, at step , apply appropriate filters to the log entries. This filtering enables the log provider wrapper to send, for example, start event time data to one log provider and error information to a separate log provider. Before assembling the information for a log entry, it is possible for the generator of the log entry to determine whether the log entry will pass the log provider wrapper's filter. If it is determined that it does not, then the expense of assembling the information comprising the log entry can be avoided and higher runtime performance can be achieved.","After applying appropriate filters, the log provider wrapper may consult with the logging configuration as described with regard to  and send the filtered log entries to appropriate log providers at step . The individual log providers may also apply further filtering to the log entry information at step  as described with regard to . At step , the log providers may send the log entry to a respective destination such as, for example, a file, a SQL database, etc.","It should be recognized that, in accordance with an alternative method for performing a method of logging events in a log management system, the method may commence at step . That is, an event may assemble one or more log entries and send them to the log provider wrapper without first querying the log provider wrapper to ascertain whether to generate the log entries. Additionally, it should be understood that the individual log providers may pass the information or log entry provided by the log provider wrapper to the appropriate destination without performing any filtering on the data.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 4","b":["405","410","410"]},"At step , a medium such as a data structure or table may be populated with the potential log entries for viewing in a user interface. A user, at step , may open the medium that contains the potential log entries to view the entries. The user may view the potential log entries immediately after the events are loaded or instantiated. Alternatively, the user may view the entries at a later time. Also at step , the user may inspect the installed log providers.","At step , the user may inspect the potential log entries at the user interface and select the desired entries. Additionally, the user may enumerate the log providers based on the destination desired for each potential log entry. Based on the user's selection, at step , the log management system or, more specifically, the log provider wrapper and\/or the logging configuration may be updated.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the creation and\/or implementation of domain-specific programming models aspects of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. In no way is the present invention limited to the examples provided herein. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings example constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 3A-3B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
