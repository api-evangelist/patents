---
title: Apparatus and method for providing server state and attribute management for multiple-threaded voice enabled web applications
abstract: An application server generates and maintains a server-side data record, also referred to as a “brownie”, that includes application state information and user attribute information for multiple users within a single session controlled by a web-based browser. The brownie includes a session identifier that uniquely identifies the session, and a subsession identifier that uniquely identifies each corresponding user of the application session. As each new user is added to the session, for example by initiating a call to the new user, the application server stores the subsession identifier and corresponding application state information for the new user in the same brownie. In response to receiving a second web page request from the browser that includes the session identifier, the application server initiates a new web application instance, and recovers the brownie from the memory based on the session identifier included in the second page request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06883015&OS=06883015&RS=06883015
owner: Cisco Technology, Inc.
number: 06883015
owner_city: San Jose
owner_country: US
publication_date: 20000330
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to web browser-enabled control of audio operations for voice enabled web applications within a hypertext markup language (HTML) and hypertext transport protocol (HTTP) framework.","2. Description of the Related Art","The evolution of the public switched telephone network has resulted in a variety of voice applications and services that can be provided to individual subscribers and business subscribers. Such services include voice messaging systems that enable landline or wireless subscribers to record, playback, and forward voice mail messages. However, the ability to provide enhanced services to subscribers of the public switched telephone network is directly affected by the limitations of the public switched telephone network. In particular, the public switched telephone network operates according to a protocol that is specifically designed for the transport of voice signals; hence any modifications necessary to provide enhanced services can only be done by switch vendors that have sufficient know-how of the existing public switched telephone network infrastructure.","An open standards-based Internet protocol (IP) network, such as the World Wide Web, the Internet, or a corporate intranet, provides client-server type application services for clients by enabling the clients to request application services from remote servers using standardized protocols, for example hypertext transport protocol (HTTP). The web server application environment can include web server software, such as Apache, implemented on a computer system attached to the IP network. Web-based applications are composed of HTML pages, logic, and database functions. In addition, the web server may provide logging and monitoring capabilities.","In contrast to the public switched telephone network, the open standards-based IP network has enabled the proliferation of web based applications written by web application developers using ever increasing web development tools. Hence, the ever increasing popularity of web applications and web development tools provides substantial resources for application developers to develop robust web applications in a relatively short time and an economical manner. However, one important distinction between telephony-based applications and web-based applications is that telephony-based applications are state aware, whereas web-based applications are stateless.","In particular, telephony applications are state aware to ensure that prescribed operations between the telephony application servers and the user telephony devices occur in a prescribed sequence. For example, operations such as call processing operations, voicemail operations, call forwarding, etc., require that specific actions occur in a specific sequence to enable the multiple components of the public switched telephone network to complete the prescribed operations.","The web-based applications running in the IP network, however, are state-less and transient in nature, and do not maintain application state because application state requires an interactive communication between the browser and back-end database servers accessed by the browsers via a HTTP-based web server. However, an HTTP server provides asynchronous execution of HTML applications, where the web applications in response to reception of a specific request in the form of a URL from a client, instantiate a program configured for execution of the specific request, send an HTML web page back to the client, and terminate the program instance that executed the specific request. Storage of application state information in the form of a \u201ccookie\u201d is not practical because some users prefer not to enable cookies on their browser, and because the passing of a large amount of state information as would normally be required for voice-type applications between the browser and the web application would substantially reduce the bandwidth available for the client.","Commonly-assigned, copending application Ser. No. 09\/461,191, filed Dec. 15, 1999, entitled Apparatus and Method for Providing Server State and Attribute Management for Voice Enabled Web Applications, the disclosure of which is incorporated in its entirety herein by reference, discloses an application server that executes a voice-enabled web application by runtime execution of extensible markup language (XML) documents that define the voice-enabled web application to be executed. The application server includes a runtime environment that establishes an efficient, high-speed connection to a web server. The application server, in response to receiving a user request from a user, accesses a selected XML page that defines at least a part of the voice application to be executed for the user. The XML page may describe any one of a user interface such as dynamic generation of a menu of options or a prompt for a password, an application logic operation, or a function capability such as generating a function call to an external resource. The application server then parses the XML page, and executes the operation described by the XML page, for example dynamically generating an HTML page having voice application control content, or fetching another XML page to continue application processing. In addition, the application server accesses an XML page, referred to also as a \u201cbrownie\u201d, that stores application state information, enabling the application server to be state-aware relative to the user interaction. Hence, the XML page, which can be written using a conventional editor or word processor, defines the application to be executed by the application server within the runtime environment, enabling voice enabled web applications to be generated and executed without the necessity of programming language environments.","Hence, use of the above-described \u201cbrownie\u201d enables the application server to be state-aware relative to the user interaction, providing the user with the perception of a real-time interactive message retrieval session such as a voice mail session.","However, more complex telephony type services involve call control for multiple simultaneous call sessions such as conference bridging, or single number reach applications where a calling party attempts to reach a voice mail subscriber. In particular, a single number reach application provides a calling party an option to either leave a message, or wait while the single number reach application attempts to contact the subscriber at different telephone numbers (e.g., work, cellphone, home, etc.); assuming the single number reach application is able to locate the subscriber, the single number reach application plays an announcement identifying the calling party, allowing the subscriber to either connect with the calling party or send the calling party to the subscriber's voice mailbox. Hence, deployment of a single number reach application requires an architecture that enables call control for multiple simultaneous call sessions.","There is a need for an arrangement that enables voice applications involving control of multiple simultaneous call sessions to be implemented on an IP packet switched network using the open standards-based flexibility of the IP network.","There is also a need for an arrangement that enables unified voice messaging services to be provided via an IP network to a web browser, where state and attribute information may be maintained for multiple users during a unified interactive message service session, where each user within the unified interactive message service session has a corresponding independent application state.","These and other needs are attained by the present invention, where an application server configured for executing voice-enabled web applications for a web browser generates and maintains a server-side data record configured for storing application state information and user attribute information for multiple users within a unified application session. The application server, in response to receiving a new web page request from a browser of a first user, upon verifying that a new session with the first user is required, creates a transient application session and executes a web application instance to complete the request, and generates the server-side data record including application state information for the application session and user attribute information for the first user of the application session. The server-side data record also includes a session identifier that uniquely identifies the session and may include, for example, a subsession identifier that uniquely identifies the application state (e.g., first thread) for the first user of the application session. The application server stores the server-side data record in a memory resident within the server side of the network, and sends to the browser the session identifier and the corresponding web page requested by the web browser. In response to receiving a second web page request from the browser that includes the session identifier, the application server executes a new web application instance, and recovers the server-side data record from the memory based on the session identifier included in the second page request.","If the application server determines that a new (second) thread needs to be initiated for a second user based on a request from the first user of the application session, the application server stores application state information associated with the second thread and user attribute information for the second user within the same server-side data record as the first user. Hence, the application server can independently control the first and second threads for the respective users, enabling bridging of the two users followed by separation and continued independent operations by each of the two users.","According to one aspect of the present invention, a method is provided in a server configured for executing web-based voice application operations. The method includes receiving a first hypertext markup language (HTML) request, via a hypertext transport (HTTP) connection, for execution of a first web-based voice application operation for a first user. A session identifier is first stored in a data record, plus a first application state that specifies an execution by a first application instance of the first web-based voice application operation for the first user. The method also includes executing a second web-based voice application operation by a second application instance for a second user based on the execution of the first web-based voice application operation for the first user, and storing in the data record a second application state that specifies the execution by the second application instance of the second web-based voice application operation for the second user. Storage of the data record in the server enables the server to provide the appearance of a state-full session for the users, even when there is no continuity between the existence of the application instances. Moreover, maintaining application state information for multiple users within the same data record enables the server to coordinate voice application operations between the users, for example by bridging the users together, while maintaining the ability to provide independent voice application operations for the respective users as desired. Hence, the server can be used to execute voice application operations where users can be bridged, and where individual users can perform one-way voice application operations even during the bridging (for example is a user is placed on hold by another user) or after the bridge is disconnected.","Another aspect of the present invention provides a processor-based system configured for executing web-based voice application operations. The system includes a hypertext transport protocol (HTTP) interface and an application server. The HTTP interface is configured for receiving first and second hypertext markup language (HTML) requests by first and second users, respectively, and sending via an HTTP connection first and second HTML pages having a same session identifier and first and second subsession identifiers to browser instances serving the first and second users, respectively. The application server is configured for executing first and second web application instances for generation of the first and second HTML pages in response to the first and second HTML requests, respectively, the application server storing a data record that specifies a session state, a first subsession state for the first user based on execution of the first web application instance, and a second subsession state for the second user upon completion of the second web application instance, the application server accessing the data record in response to detecting the session identifier in a subsequent HTML request from one of the first and second users, and executing a selected web application operation based on at least one of the first and second subsession states in the accessed data record.","Additional advantages and novel features of the invention will be set forth in part in the description which follows and in part will become apparent to those skilled in the art upon examination of the following or may be learned by practice of the invention. The advantages of the present invention may be realized and attained by means of instrumentalities and combinations particularly pointed out in the appended claims.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 1","FIG. 3"],"b":["42","42","64","44","42","44","50","42","56"],"i":["a ","b","a ","b "]},"As shown in , each of the clients (tiny clients, skinny clients, thin clients and fat clients) are able to communicate via a single, unified architecture  that enables voice communications services between different clients, regardless of whether the client actually has browser capabilities. Hence, the fat client and the thin client are able to execute voice enabled web applications without any hardware modification or any modification to the actual browser; rather, the browsers  in the clients and merely are provided with an executable voice resource configured for providing browser audio control, described below.","The user devices , , and , illustrated as a cordless telephone , a fax machinehaving an attached telephone, and an analog telephone , are referred to herein as \u201cskinny clients\u201d, defined as devices that are able to interface with a user to provide voice and\/or data services (e.g., via a modem) but cannot perform any control of the associated access subnetwork.","The wireless user devices , , and , illustrated as a cellular telephone (e.g., AMPS, TDMA, or CDMA) , a handheld computing device (e.g., a 3-Com Palm Computing or Windows CE-based handheld device) , and a pager , are referred to as tiny clients. \u201cTiny clients\u201d are distinguishable from skinny clients in that the tiny clients tend to have even less functionality in providing input and output interaction with a user, rely exclusively on the executable application in an access subnetwork to initiate communications; in addition, tiny clients may not be able to send or receive audio signals such as voice signals at all.","Hence, the skinny clients , , and and the tiny clients , , and access the unified voice messaging services in the unified network  via a proxy browser , configured for providing an IP and HTTP interface for the skinny clients and the tiny clients. In particular, browsers operate by interpreting tags within a web page supplied via an HTTP connection, and presenting to a user media content information (e.g., text, graphics, streaming video, sound, etc.) based on the browser capabilities; if a browser is unable to interpret a tag, for example because the browser does not have the appropriate executable plug-in resource, then the browser typically will ignore the unknown tag. Hence, the proxy browser  can provide to each of the skinny clients and tiny clients the appropriate media content based on the capabilities of the corresponding client, such that the cordless telephone and telephone would receive analog audio signals played by the proxy browser  and no text information (unless a display is available); the fax machine and pager would only receive data\/text information, and the cellular telephone and the handheld computing device would receive both voice and data information. Hence, the proxy browser  interfaces between the IP network and the respective local access devices for the skinny clients and the tiny clients to provide access to the unified messaging network .","The proxy browser  and the web browsers  within the fat client and the thin client execute voice enabled web applications by sending data and requests to a web server , and receiving hypertext markup language (HTML) web pages from the web server , according to hypertext transport protocol (HTTP). The web server  serves as an interface between the browsers and an application server  that provides an executable runtime environment for XML voice applications . For example, the web server  may access the application server  across a common Gateway Interface (CGI), by issuing a function call across an application programming interface (API), or by requesting a published XML document or an audio file requested by one of the browsers  or . The application server , in response to receiving a request from the web server , may either supply the requested information in the form of an HTML page having XML tags for audio control by a voice resource within the browser, or may perform processing and return a calculated value to enable the browser  or  to perform additional processing.","The application server  accesses selected stored XML application pages (i.e., pages that define an application) and in response generate new XML pages during runtime and supply the generated XML pages to the web server . Since multiple transactions may need to occur between the browser  or  and the application server , the application server  is configured for storing for each existing user session a data record, referred to as a \u201cbrownie\u201d, that identifies the state of the existing user session; hence, the application server  can instantiate a procedure, return the necessary data, and terminate the procedure without the necessity of maintaining the instance running throughout the entire user session. Additional details regarding the brownie are described below.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 2"],"b":["60","1","70","72","74","76","78"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["42","42","64","82","84","42","64","42","56","86","42","64","10","87","88","64","89","90"],"i":["b ","a","b ","b ","b ","a "]},"Since the skinny clients and tiny clients  do not have browser resources, the skinny clients and tiny clients  access the proxy browser  via the PSTN  and the IP gateway . The IP gateway includes both a proxy browser  and a voice resource , enabling the IP gateway  to provide all audio control service for the skinny clients and tiny clients . Hence, the PSTN  is used merely for transfer of analog audio signals, with intelligent application processing being provided by the proxy browser . Note that if one of the telephones \u2032 is an IP telephone, then it can access the server  via an IP connection ; in this case, the browser internal to the IP telephone \u2032 would process only audio functions, and would ignore any tags associated with text or image content.","As shown in , the web server , the application server , and the voice web applications  reside within a gateserver . The gateserver  includes a browser based XML editor tool  that enables a web programmer to design voice applications using XML pages. The XML pages are stored as XML applications and functions , for example within a database accessible by the application server . The XML pages stored within the XML application and functions  may be stored as static pages to be fetched by the web server  and supplied to a browser, however the XML pages may also define the actual application to be executed by the application server  in runtime. Hence, the application server  may execute stored XML applications and functions , and in response generate dynamic HTML having XML tags, also referred to as HTML\/XML pages.","According to the disclosed embodiment, the browsers  and  provide audio control for voice enabled web applications based on the HTML-XML pages supplied by the application server  to the web server  for transport across an HTTP connection. The application server  executes stored XML applications, also referred to generally as a web applications, in response to HTML requests from the user. During execution of the stored XML applications, the application server  stores in a registry  a data record, also referred to as a \u201cbrownie\u201d, that specifies the application state for at least one XML application instance. As described below with respect to , the \u201cbrownie\u201d is configured for storing user attribute information and application state information for multiple users associated with a given voice applications session. Hence, the application server  may simultaneously and independently control voice application operations for multiple users that may be associated according to a prescribed application condition, for example the possibility of bridging the users together for a phone call or a phone conference.","Hence, the use of a \u201cbrownie\u201d configured for storing attributes and state information for multiple users enables the application server to effectively control multiple \u201clines\u201d for the proxy browser  controlling, for example, a voice over IP telephony switch.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIG. 3"],"b":["102","102","66","104","66","106","66","106","108","110","114","108","108","110","110","110","106","66","114","87","18"]},"The application server  also generates an XML tag  that specifies the application state with the user. For example, the state \u201creach_sub_menu.xm1\u201d specifies that the last page executed by the application server  for the corresponding user \u201cuser1\u201d under subsession ID \u201c1\u201d was the XML application page \u201creach_sub menu.xm1\u201d. Hence, the application server , upon determining that the prior application state was \u201creach_sub_menu.xm1\u201d, may be able to determine the next subsequent page that needs to be generated for the user session based on the user input. For example, if the user input was a value of \u201c2\u201d, the application server  would be able to interpret the input as selection \u201c2\u201d from a previously supplied main menu; hence, the application server  could execute the XML application that corresponds to selection \u201c2\u201d from the menu of the user subsession, providing the perception to the user of a state-full interactive voice application.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 4","FIG. 4"],"b":["200","66","62","87","66"]},"In response to detecting the session identifier in the HTML request, the application server  in step  searches for a brownie  in the storage registry  that corresponds to the session identifier contained in the query string of the post URL; alternatively, the session identifier may be specified in a cookie supplied by the browser  along with the HTTP request (e.g., the standard HTTP form post to the default URL). If in step  the application server  determines that the brownie does not exist for the supplied session identifier, the application server  generates a new session in step  and returns a new URL containing the valid session identifier (alternately, the new session ID may be supplied in a cookie to the browser). However if in step  the application server  determines that a brownie  exists for the corresponding session identifier , the application server  in step  parses the brownie  into an internal memory as an associative array.","The application server  then begins execution in step  of a selected web application instance based on the user input and the application state  supplied in the corresponding brownie . The application server  then determines in step  whether a new subsession  is needed for a new user, for example a second user that a first user is attempting to reach. Assuming a new subsession  needs to be generated within the brownie , the application server  creates a new subsession identifier (e.g., ), and adds the line attribute  and the user attributes (e.g., ,, and ) in step . Any common attributes between users specified within the same brownie  are also copied into the new subsession  in step .","The application server  selectively adds and removes state information from the associative array, used to temporarily store state and user attribute information, during the execution of the web application instance in step . In addition, the application server  uses file locking mechanisms to ensure that does not improperly delete application state information for one of the users within the brownie . Upon completion of the execution of the web application instance in step , the application server  converts the information stored in the associative array back into a brownie format , stores the brownie back into the registry , and terminates the executed web application instance.","Hence, the application server  is able to maintain state information for multiple users within a single shared session, giving the appearance to each corresponding user of a single, interactive application, when in fact the application server  actually executes separate web application instances for each user request, using the data record  to maintain application state and user attribute information. Hence, the application server  can provide the appearance of an interactive voice response system that provides intelligent decisions based on the user profile and based on the current position of the user within a menu structure. Moreover, the storage of information for multiple subsessions for respective within the same brownie  enables the application server  to selectively bridge and separate different users within the same overall session as specified by the session identifier .","Consider the example of a single-number reach application, illustrated in , where the first user \u201cuser1\u201d dials into the voice over IP gateway  in an attempt to reach the second user \u201cuser2\u201d. Instead of simply forwarding the first user into the voice mail system of the second user, the application server  executes the XML document \u201creach_sub_menu.xm1\u201d to generate for the first user in step  an HTML page (PLAY_GETDTMF_MAKECALL) including XML tags that enable the proxy browser  to play in step  a prompt to the first user for a single number reach application, indicating that the application server  will attempt to reach the second user unless the first user presses a key to leave a voice mail message. The HTML page (PLAY_GETDTMF_MAKECALL) is also used by the proxy browser in step  to send a command (MAKECALL) to the voice over IP gateway  to initiate a new telephone call to the second user. The HTML page typically will include an XML tag specifying input mask, enabling the proxy browser  to expect a response from the voice over IP gateway  indicating whether the call is complete to the second user.","Upon receiving in step  a response that the call to the second user is complete, the proxy browser  posts data in step  to a prescribed URL (RESUME(SUCCESS: Complete)) indicating that the call to the second user on the second line (e.g., (703) 555-1234) is complete. The application server  than executes an XML document (e.g., \u201cconnect_rq.xm1\u201d) to dynamically generate in step  an HTML page (PLAY_GETDTMF) having XML tags specifying media content for prompting the second user whether to connect with the first user. At this time, the application server  also generates the subsession data for the second user, illustrated in FIG. . The proxy browser , in response to receiving the HTML page (PLAY_GETDTMF), plays the .wav file specified by the XML tags in the HTML page in step  and coordinates with the voice over IP gateway  to collect the prompt digits from the second user in steps , , and . The proxy browser  then posts the digits collected from the second user in step  to the application server . In response to receiving the digits (SUCCESS: Complete: Digits), the application server  selectively executes an XML document based on the supplied digits and the user attributes specified in the brownie  to initiate a bridging operation.","The structure of the brownie  in distinct subsessions  enables the application server  to independently control interactions between the first user and the second user. For example, the prompt played by the proxy browser  in step  may allow the first user to perform optional voice messaging operations (e.g., access the first user's voice mailbox, stock quotes, etc.) while the application server  attempts to reach the second user. Hence, the first user may perform independent voice application operations with the application server  while the application server  attempt to reach the second user, as opposed to simply waiting on hold. Once the application server  detects in step  that a bridging operation should be performed, the application server  updates the subsessions and accordingly, and generates in step  an HTML page (PLAY_STOP) that specifies halting any interactive operations by the proxy browser  and the voice over IP gateway  in steps  and . If desired, the halted operation may be stored in the first user's brownie portion comma enabling the first user to continue after the bridge.","Upon receiving in step  confirmation that the first user is ready for the bridge, the application server  generates an HTML document (BRIDGE) having XML tags that specify to the proxy browser  to the voice over IP gateway  should bridge the first user and the second user in steps ,, and .","According to the disclosed embodiment, application state for multiple users is contained within a single XML document as each user is added to the application session, for example when the voice application makes an outbound phone call. Since the brownie is a structured XML document, the application server can easily copy the original state information into the new subsession, along with knowledge about the original subsession identifier. Hence, each user can be controlled independently throughout the common session, enabling each user a corresponding set of voice application operations even while in a bridged state, such that one user may press a key that is detected by the proxy browser but is inaudible to other users. Alternately, the independent control of respective users by the application server enables the application server to selectively grant different voice application operations to different bridge to users, such that only selected users may be able to terminate the bridge or add another user to the bridge.","While this invention has been described in connection with what is presently considered to be the most practical and preferred embodiment, it is to be understood that the invention is not limited to the disclosed embodiments, but, on the contrary, is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference is made to the attached drawings, wherein elements having the same reference numeral designations represent like elements throughout and wherein:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 3"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 5","FIGS. 1 and 2"]}]},"DETDESC":[{},{}]}
