---
title: Presenting and zooming a set of objects within a window
abstract: Systems, methods and articles of manufacture are disclosed for presenting a plurality of objects within a display area on a graphical display device. The size of the display area may be received. A plurality of categories may be generated based on the plurality of objects and the received size. A plurality of labels may be generated for the plurality of categories, the labels describing the objects associated with each category. The plurality of categories may be output for display within the display area. The plurality of categories may also form a hierarchy. Commands may be provided for navigating the hierarchy. A user may conveniently and efficiently view, browse, and select the plurality of objects using the hierarchy and the provided commands.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09335916&OS=09335916&RS=09335916
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09335916
owner_city: Armonk
owner_country: US
publication_date: 20090415
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The field of the invention relates to user interfaces. More specifically, the field of the invention relates to presenting a plurality of objects within a display area of a graphical display.","2. Description of the Related Art","Early computer systems used command-line operating systems and software applications. These command-based systems provided a user interface that required the user to memorize a relatively large number of commands in order to perform meaningful work. The user interfaces for these command-driven computer programs required a relatively high level of skill to operate, and were not considered to be \u201cuser-friendly.\u201d With the introduction of the IBM personal computer (PC), computers became more widely available, both in the workplace and in homes, and the computer industry soon recognized the need to provide more user-friendly interfaces to computer programs. As a result, many different operating systems were introduced that provided a graphical user interface (GUI). Software applications with graphical user interfaces soon followed, and the vast majority of computer programs running on personal computers today provide a user-friendly GUI.","A GUI provides a user with a graphical and intuitive display of information. Typically, the user interacts with a GUI display using a graphical selection pointer, which a user controls utilizing a graphical pointing device, such as a mouse, track ball, joystick, or the like. Depending upon the actions allowed by the application of operating system software, the user can select a widget by positioning the graphical pointer over the widget and depressing a button associated with the graphical pointing device. A widget is a user-discernible feature of the graphic display, such as a window, icon, menu, or object. A window may fill the entire display, or the display may be split into a number of different windows. Further, a window may in turn include a number of different widgets, which may be different areas that display text, drop-down lists, text entry fields, buttons, etc.","One embodiment of the invention includes a computer-implemented method comprising configuring one or more computer processors to perform an operation. The operation may generally include receiving a request to display a list of a plurality of objects in a display window on a graphical display device, the display window having an insufficient size to display all of the objects in the list simultaneously; determining a maximum number of elements which can be displayed simultaneously in the display window; generating a plurality of categories equal to the maximum number of elements which can be displayed simultaneously in the display window; distributing each of the plurality of objects to one of the generated categories; and outputting, in response to the request, a list of the generated plurality of categories for display within the display window on the graphical display device.","Another embodiment of the invention includes a computer program product comprising a computer usable medium having computer usable program code. The computer usable program code may generally be configured to receive a request to display a list of a plurality of objects in a display window on a graphical display device, the display window having an insufficient size to display all of the objects in the list simultaneously; determine a maximum number of elements which can be displayed simultaneously in the display window; generate a plurality of categories equal to the maximum number of elements which can be displayed simultaneously in the display window; distribute each of the plurality of objects to one of the generated categories; and output, in response to the request, a list of the generated plurality of categories for display within the display window on the graphical display device.","Still another embodiment of the invention includes a system having a processor and a memory containing a program, which when executed by the processor is configured to perform an operation. The operation may generally include receiving a request to display a list of a plurality of objects in a display window on a graphical display device, the display window having an insufficient size to display all of the objects in the list simultaneously; determining a maximum number of elements which can be displayed simultaneously in the display window; generating a plurality of categories equal to the maximum number of elements which can be displayed simultaneously in the display window; distributing each of the plurality of objects to one of the generated categories; and outputting, in response to the request, a list of the generated plurality of categories for display within the display window on the graphical display device.","Embodiments of the present invention generally present a plurality of objects within a display area on a graphical display device. One embodiment of the invention includes configuring a hardware processor to execute an object presenter application. The object presenter application may receive a plurality of objects and a size of the display area. Further, the object presenter application may generate a plurality of categories based on the plurality of objects and received size. The object presenter application may also generate a label for each category, the labels describing the objects associated with each category. Further, the plurality of categories may also form a hierarchy. The object presenter may also provide one or more commands for navigating the hierarchy. A user may conveniently and efficiently view, browse, and select the plurality of objects using the hierarchy and the provided commands.","In the following, reference is made to embodiments of the invention. However, it should be understood that the invention is not limited to specific described embodiments. Instead, any combination of the following features and elements, whether related to different embodiments or not, is contemplated to implement and practice the invention. Furthermore, although embodiments of the invention may achieve advantages over other possible solutions and\/or over the prior art, whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus, the following aspects, features, embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim(s). Likewise, reference to \u201cthe invention\u201d shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim(s).","One embodiment of the invention is implemented as a program product for use with a computer system. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable storage media. Illustrative computer-readable storage media include, but are not limited to: (i) non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM disks readable by a CD-ROM drive) on which information is permanently stored; (ii) writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive) on which alterable information is stored. Such computer-readable storage media, when carrying computer-readable instructions that direct the functions of the present invention, are embodiments of the present invention. Other media include communications media through which information is conveyed to a computer, such as through a computer or telephone network, including wireless communications networks. The latter embodiment specifically includes transmitting information to\/from the Internet and other networks. Such communications media, when carrying computer-readable instructions that direct the functions of the present invention, are embodiments of the present invention. Broadly, computer-readable storage media and communications media may be referred to herein as computer-readable media.","In general, the routines executed to implement the embodiments of the invention, may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and\/or implied by such nomenclature.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","102","102","130","130","130"]},"The computer  generally includes a processor  connected via a bus  to a memory , a network interface device , a storage , an input device , and an output device . The computer  is generally under the control of an operating system (not shown). Examples of operating systems include UNIX, versions of the Microsoft\u00ae Windows\u00ae operating system, and distributions of the Linux\u00ae operating system. (Note: Linux is a registered trademark of Linus Torvalds in the United States, other countries, or both. And Microsoft and Windows are trademarks of Microsoft Corporation in the United States, other countries, or both.) More generally, any operating system supporting the functions disclosed herein may be used.","The memory  may be a random access memory. While the memory  is shown as a single entity, it should be understood that the memory  may in fact comprise a plurality of modules, and that the memory  may exist at multiple levels, from high speed registers and caches to lower speed but larger DRAM chips.","The network interface device  may be any entry\/exit device configured to allow network communications between the computer  and other computers via the network . For example, the network interface device  may be a network adapter or other network interface card (NIC).","The storage  may be a hard disk drive storage device. Although the storage  is shown as a single unit, the storage  may be a combination of fixed and\/or removable storage devices, such as fixed disc drives, floppy disc drives, tape drives, removable memory cards, or optical storage. The memory  and the storage  may be part of one virtual address space spanning multiple primary and secondary storage devices.","The input device  may be any device for providing input to the computer . For example, a keyboard, keypad, light pen, touch-screen, track-ball, or speech recognition unit, audio\/video player, and the like may be used.","The output device  may be any device for providing output to a user of the computer . For example, the output device  may be any conventional display screen or set of speakers, along with their respective interface cards, i.e., video cards and sound cards (not shown). Although shown separately from the input device , the output device  and input device  may be combined. For example, a display screen with an integrated touch-screen, a display with an integrated keyboard, or a speech recognition unit combined with a text speech converter may be used.","As shown, the memory  of the computer  includes objects , a window size , an object presenter , categories , and labels .  and associated descriptions detail the structure and operation of the object presenter  running on the computer .","Although embodiments are described herein with reference to a client-server network model, network models other than client-server, such as peer-to-peer, are broadly contemplated.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1"],"b":["200","150","150","210","220","230","240","250"]},"In one embodiment, the object presenter  presents a plurality of objects  within a display area on a graphical display. A display area may also be referred to herein as a window. The object manager  receives a plurality of objects . The plurality of objects  may be any collection of discrete items capable of being displayed on the graphical display. Examples of the discrete items include text strings. For instance, the plurality of objects  may include filenames, table names, category names, or names of people. Table I provides an example of objects , in this case a list of database table names:",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Objects example"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Object ID","Object (table name)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["1","AcceptReqd_Type"]},{"entry":["2","AcctCur_Type"]},{"entry":["3","AcctFormat_Type"]},{"entry":["4","AcctHelpMsg_Type"]},{"entry":["5","AcctId_Type"]},{"entry":["6","AcctKey_Type"]},{"entry":["7","AcctMask_Type"]},{"entry":["8","AcctPayAcct_Type"]},{"entry":["9","AcctPayAcctId_Type"]},{"entry":["10\u2002","AcctRestrictMsg_Type"]},{"entry":[". . .",". . ."]},{"entry":["1000\u2003\u2002","Xfer_Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In this specific example, the database includes one thousand named tables. Each table name (such as \u201cAcceptReqd_Type\u201d) is associated with an object identifier (such as \u201c1\u201d). In one embodiment, the object manager  receives a plurality of objects  ordered according to predefined criteria (such as alphabetically by name). Alternatively, the object manager  may sort the plurality of objects . For example, the object manager  may sort a plurality of unordered objects  in alphabetical order by name. In another example, the object manager  may receive objects  in alphabetical order and sort the plurality of objects  in reverse alphabetical order. The object manager  may define the criteria based on user input.","In one embodiment, the category manager  receives a window size . The window size  specifies a size of a window in which the object presenter  may display the objects . For example, the category manager  could receive a window size  of \u201c320\u00d7200\u201d, i.e., three hundred and twenty pixels by two hundred pixels. The window size may specify the size of a window on a graphical display device (such as a computer monitor, a display for a personal digital assistant (PDA), a cell phone display, etc.). In one embodiment, the category manager  may receive the window size  via a function call. For example, the function may be provided by an operating system, windowing system, or window manager as part of an Application Programming Interface (API), such as in a widget toolkit (also known as a widget library). Examples of widget toolkits include Swing, Abstract Window Toolkit (AWT), Qt\u00ae, the GIMP Toolkit (GTK+), and Microsoft Foundation Classes (MFC).","In one embodiment, the category manager  determines a maximum number of rows that may be displayed simultaneously within a window having the window size . Each row may display one of the objects or a reference to a category of objects. For example, suppose that the window has a height of 200 pixels. Further, suppose that displaying a single object requires a height of twenty pixels. In such a case, the category manager  could determine that a maximum of ten rows may be simultaneously displayed in the form of a list within the window.","In one embodiment, the category manager  may generate a plurality of categories  based on the objects , the window size , and the maximum number of rows. Table II shows an example of a set of categories generated for 1000 database table names:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE II"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Categories example"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Category","Associated objects"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Category 1","Object ID 1-100"]},{"entry":[{},"Category 2","Object ID 101-200"]},{"entry":[{},"Category 3","Object ID 201-300"]},{"entry":[{},". . .",". . ."]},{"entry":[{},"Category 10","Object ID 901-1000"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In this specific example, the category manager  generates ten categories determined from the maximum number of rows. That is, the category manager  generates the maximum number of categories that may be displayed simultaneously within a window having a window size of 200 pixels in height. In this specific example, displaying a category requires the same height as displaying an object, i.e., a height of twenty pixels. Further, the category manager  may associate each category  with a subset of the objects. For example, as shown in Table II, the category manager  associates \u201cCategory 1\u201d with objects having an Object ID of 1 through 100. Thus, the subset of objects in category 1 includes objects having an Object ID of 1 through 100.","Other ways of generating a predefined number of categories  are broadly contemplated. For example, if displaying a category requires a different height as displaying an object, then the category manager  may determine a maximum number of categories that may be displayed simultaneously within a window having the window size . The category manager  may then generate a plurality of categories  based on the objects , the window size , and the maximum number of categories.","In another embodiment, the category manager  generates a predefined number of categories . For example, the category manager  may generate twenty-six categories, each category representing a different letter of the English alphabet. In another embodiment, the category manager  generates a plurality of categories  based on only the objects  and without regard to the window size  or the maximum number of rows. For example, the category manager  may generate ten times fewer categories than the number of objects  (e.g., one hundred categories for one thousand objects, thereby reducing the number of items for display by tenfold).","In one embodiment, the label manager  generates a label  for each category. For example, the label manager  may generate a label based on objects  associated with the respective category . Table III shows an example of labels generated for the 1000 database tables:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE III"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Labels example"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Category","Associated objects","Label"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Category 1","Object ID 1-100","Acc . . . Bil"]},{"entry":[{},"Category 2","Object ID 101-200","Bil . . . Clo"]},{"entry":[{},"Category 3","Object ID 201-300","Clo . . . Deb"]},{"entry":[{},". . .",". . .",". . ."]},{"entry":[{},"Category 10","Object ID 901-1000","Web . . . Xfe"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"In this specific example, the label manager  generates a label (such as \u201cAcc . . . Bil\u201d) for each category (such as Category 1) based on objects associated in that category (such as \u201cObject ID 1-100\u201d). For example, suppose \u201cObject ID 1\u201d is \u201cAcceptReqd_Type\u201d and \u201cObject ID 100\u201d is \u201cBilling_Type\u201d\u2014the first and last objects in this subcategory. The label manager  may generate a label  for Category 1 based on the first three letters of \u201cAcceptReqd_Type\u201d (i.e., \u201cAcc\u201d) and the first there letters of \u201cBilling_Type\u201d (i.e., \u201cBil\u201d), resulting in \u201cAcc . . . Bil\u201d. The generated label  for Category 1 indicates that Category 1 represents objects ranging from \u201cAcc . . . \u201d to \u201cBil . . . \u201d. Other ways of generating a label  for a category  are broadly contemplated.","In one embodiment, the navigation manager  navigates the objects  and the categories  based on user input. For example, the navigation manager  may receive a user request to expand a category  (such as Category 1). In one embodiment, the navigation manager  may display all objects  associated with the category  (i.e., Object ID 1-100) within a window. If the window is too small to display all associated objects  simultaneously, the navigation manager  may provide a mechanism for the user to scroll through the associated objects  (e.g., using a vertical scroll bar).","In another embodiment, the navigation manager  determines whether the number of associated objects  is greater than the maximum number of rows that may be displayed simultaneously within the window. Suppose the maximum number of rows is ten. Further, suppose that a user requests to expand Category 1. If Category 1 is associated with ten or fewer objects, the navigation manager  may display all of the associated objects simultaneously in the window (i.e., without the need for scrolling or having a scroll bar). However, if Category 1 is associated with more than ten objects, the category manager  may generate one or more categories  representing the greater than ten objects. The number of the one or more categories  may be fewer than or equal to the maximum number of rows. Suppose Category 1 is associated with twenty-one objects. The category manager  may generate three categories  representing the twenty-one objects, including a first category that represents the first ten objects, a second category that represents the next ten objects, and a third category that represents the last object.","Other distributions of objects  into categories  are broadly contemplated. For example, the category manager  may also generate three categories  representing the twenty-one objects , each category representing seven objects .","Taken together, Category 1, the three generated categories, and the twenty-one objects form a hierarchy (specifically, a tree). That is, Category 1 may be referred to as a \u201cparent category\u201d of the three generated categories (\u201cchild categories\u201d of Category 1). Further, the three generated categories may also be referred to as \u201csibling categories\u201d). Further, the three generated categories may be referred to as \u201cchild\u201d categories. Each child category may also be referred to as a \u201csub-category.\u201d Further still, the twenty-one objects may be referred to as \u201cchildren objects\u201d of the three generated categories. Table IV shows exemplary sub-categories for Category 1 for a plurality of one thousand objects:",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE IV"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Sub-categories example"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Category","Associated sub-category","Associated objects"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Category 1","Sub-category 1","Object ID 1-10"]},{"entry":[{},"Category 1","Sub-category 2","Object ID 11-20"]},{"entry":[{},"Category 1","Sub-category 3","Object ID 21-30"]},{"entry":[{},". . .",". . .",". . ."]},{"entry":[{},"Category 1","Sub-category 10","Object ID 91-100"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"In this specific example, the navigation manager  receives a user request to expand Category 1, which represents one hundred objects. Because one hundred objects cannot be displayed simultaneously within the window (which can display a maximum of ten objects simultaneously), the category manager  generates ten sub-categories  for the one hundred objects associated with Category 1, each sub-category representing ten objects (e.g., Sub-category 1 represents Object IDs 1-10). The label manager  may also generate labels  for each sub-category . For example, the label manager  may generate a label \u201cAcce . . . Acct\u201d for Sub-category 1. The navigation manager  then waits for a user to request to expand one of the sub-categories . For example, if the user requests to expand Sub-category 1, the navigation manager  may output the first ten objects of Table I to the presentation manager  for simultaneous display within the window of specified size .","In one embodiment, the object presenter  generates categories  dynamically (i.e., in response to user input) to facilitate navigating the objects being displayed in the interface. Further, the object presenter  may limit the number of categories it generates to the maximum number of rows that may be displayed simultaneously in a window of a given size. By not generating more categories than the maximum number of rows, the object presenter  need not include a scroll bar as part of a graphical user interface, even when the number of objects is large. For example, a user need not scroll through a list of ten thousand objects  in a window that only displays ten objects at a time. Instead, the object presenter  may generate a four-level hierarchy of categories (with the first level including a single root node; the hierarchy is five-levels if the objects are included), each category having ten children. A user may more conveniently and efficiently locate, view, select, etc., a specific object of the ten thousand objects  (e.g., by selecting a desired category from at most ten categories at a time, based on the labels ; and without having to scroll through ten thousand objects ). Further, GUI widgets may exhibit poor response time when receiving a large number of objects. For example, a selection list widget may take minutes to receive ten thousand object names for display. Thus, the object presenter  may present and navigate the plurality of objects  within a window of specified size  in a manner more convenient and efficient to a user.","Suppose, for example, a user is selecting a set of database tables to replicate from a large database schema. In such a case, a user may need to specify each table to replicate. However, the number of tables of a database may be large, e.g., one thousand tables. Scrolling up and down through a list of one thousand tables in a small window in order to select each next table may be inconvenient, inefficient, or even impractical. Instead, an object presenter  may be provided. The object presenter  may generate a hierarchy of categories . The object presenter  may also generate a plurality of labels  for the categories , each label  describing objects  associated with each respective category . The object presenter  may present a maximum of ten categories  (or sub-categories ) at a time to the user. The user may conveniently and efficiently view, select, and browse objects  using the hierarchy. Further, the user may also visualize the density of objects  across the entire set (i.e., the entire plurality of objects ). For example, if the category \u201cAcc . . . Bil\u201d represents one hundred objects , a user may recognize that exactly one hundred objects fall within an alphabetical range of \u201cAcc . . . \u201d to \u201cBil . . . \u201d.","In one embodiment, the object presenter  may generate categories  only in response to user input. For example, the object presenter  need not generate sub-categories of Category 2 if the user requests to expand Category 1. Only upon receiving a user request to expand Category 2 does the object presenter  generate sub-categories of Category 2, according to one embodiment. By generating categories only upon user request, the object presenter  may more efficiently present the plurality of objects  within a window of specified size . In one embodiment, the object presenter  may also determine a number of levels of the hierarchy based on the number of objects  and the maximum number of rows that may be displayed simultaneously in a window of a given size (e.g., based on the ratio of the latter to the former).","In one embodiment, the user interface may include commands for navigating and selecting categories  and objects  in a display. Table V shows an example set of commands used to navigate a large number of list elements displayed in an interface without using a scroll-bar. The set of commands of Table V are described in conjunction with a slider widget  and buttons , , , ,  of :",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE V"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Navigation Commands Example"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ID","Command","User input"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["1","Expand a category","Double-click a category"]},{"entry":["2","Specify a level in the hierarchy","Slider widget 378"]},{"entry":["3","Go down a level in the hierarchy","Click button 374"]},{"entry":["4","Go up a level in the hierarchy","Click button 380"]},{"entry":["5","Go to the highest level in the hierarchy","Click button 370"]},{"entry":["6","Go to the lowest level in the hierarchy","Keystroke: CTRL + L"]},{"entry":["7","Go to the previous sibling in the hierarchy","Click button 368"]},{"entry":["8","Go to the next sibling in the hierarchy","Click button 372"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In this specific example, the navigation manager  supports a plurality of commands. For example, the navigation manager  may define the plurality of commands, according to one embodiment. The navigation manager  may also associate each command with user input (e.g., a keystroke, clicking a GUI button, etc.). For example, the navigation manager  may expand Category 1 (i.e., present objects associated with Category 1 and\/or present sub-categories of Category 1) if the user double-clicks category 1. As a further example, the navigation manager  may expand a category at the lowest level in the hierarchy (e.g., by starting at the selected category and navigating through the middle subcategory at each level of the hierarchy during descent in the hierarchy) if the user inputs a predefined keystroke (such as CTRL+L). In one embodiment, the navigation manager  may also customize the keystroke based on user input.","In one embodiment, the presentation manager  outputs objects , categories , and labels  for display in a window having a window size  on the output device . The window may be also resized (e.g., by a user, by an operating system, etc.). If the window is resized, the presentation manager  may output objects , categories , and labels  based on the resized window. For example, if the window is resized from 320\u00d7200 to 320\u00d7180 (i.e., only nine objects may be displayed simultaneously in the newly resized window, instead of ten objects), the object presenter  may replace ten categories  with nine newly-generated categories  for display within the resized window. The newly-generated categories  may also include newly-generated labels  that reflect an updated distribution of objects within the nine categories based on the resized window. That is, the object presenter  may dynamically generate categories  based on the window being resized.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIGS. 3A-3F","FIG. 1","FIG. 3A","FIG. 3A"],"b":["300","150","302","302","307","306","302","150","156","306","320","322","307","320","307","302","322","306","320","302","306","302"]},"In one embodiment, the object presenter  may expand a category  based on user input. As shown in , for example, the object presenter  may present objects  associated with the expanded category  (i.e., the category with elements beginning with the letter A) within a window . Further, other ways of generating categories  are broadly contemplated. For example,  shows a window  that includes categories  generated by numbering the one thousand objects  (rather than the names of the objects  as depicted in  in window ).  also shows a window  that includes the objects  associated with an expanded category  (i.e., \u201cCategory 0 . . . 50\u201d). That is, window  shows the first 50 objects.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 3C","b":["340","344","150","342","342","342","348"]},"Referring now to , the object presenter  may also generate a number of categories  (e.g., ten categories) that may be simultaneously displayed within a window , according to one embodiment. In this example, the categories generated to display elements of the large list may eliminate user scrolling (as shown by a lack of a scroll bar  in a window ). Items in the list may be distributed in a variety of ways to reduce the number of categories to below that of the maximum number of rows (i.e., even distribution, uneven distribution, multiple levels of categories, etc.). Further, the object presenter  may generate labels  (e.g., \u201cAcct . . . Bil\u201d, \u201cBil . . . Clo\u201d, etc.) for each category  based on the objects  represented by the respective category .","In one embodiment, the object presenter  may receive a user request to expand one of the categories (e.g., the category  labeled as \u201cFor . . . Leg\u201d). In response, the object presenter  may generate sub-categories  for display within the window . The results of expanding the category  are shown in window . As shown, window  includes ten subcategories\u2014a first subcategory of \u201cFor . . . Gen\u201d through a tenth subcategory of \u201cLastP . . . LastY.\u201d In one embodiment, the object presenter  allows the user to navigate through any number of levels of a hierarchy. Further, at each level, the object presenter may generate sub-categories to display subsets of the large list in a display window such that the number of categories presented at any level in the hierarchy matches the number of rows that may be displayed in the window. For example, the object presenter  may allow a user to request to expand one of the subcategories in window  (e.g., category  labeled as \u201cInc . . . Ind\u201d). The results of such a request are shown in window . In this example, the subcategory labeled as \u201cInc . . . Ind\u201d includes ten elements. Thus, the window  displays the actual ten elements\u2014instead of additional subcategories.","In one embodiment, the object presenter  may provide a set of interface components  for viewing, navigating, and\/or selecting the plurality of objects . For example,  illustrates a window  which displays a hierarchy that includes an expanded node  (labeled \u201cSet\u201d) and a first level of categories . The expanded node  may also be referred to herein as the active node or the node having focus. In another embodiment, the root category of the hierarchy (\u201cSet\u201d in ) need not be generated. For example, the window  of  need not include a reference to the root level of list elements (\u201cSet\u201d in ). That is, as the interface is configured to present a dataset that is too large to be displayed at the root level, the reference to the root level element may be omitted. In such a case, the window itself acts as a container for the large set, without any labeling for the root element.","As shown in , the window  has the interface control component  that allows a user to navigate the plurality of objects . For example, the object presenter  may associate the control components , , , , , , , with commands shown in Table V. The control components may also be referred to herein as \u201cwidgets.\u201d For example, referring to window , a user may click on a \u201cmove up\u201d button  of the window  to expand the previous sibling of the active node (e.g., to expand \u201cDeb . . . For\u201d instead of \u201cFor . . . Leg\u201d ). Further, a user may click on button  of the window  to expand the next sibling of the active node (e.g., to expand the category labeled \u201cLeg . . . Num\u201d instead of the category labeled \u201cFor . . . Leg\u201d ). Similarly, if a user selects a category (e.g., the category  labeled \u201cInc . . . Ind\u201d), the object presenter  may expand and present objects in that category\u2014either additional subcategories or list elements. For example, window  shows the results of selecting the category  labeled as \u201cInc . . . Ind\u201d in window . Further, if the user clicks on widget  of the window , the object presenter  may expand the previous sibling of the active node (e.g., expand the category labeled \u201cHol . . . Inc\u201d) and display associated objects  (as shown in window ).","Window  of  shows elements at the \u201cFor . . . Leg\u201d level of the hierarchy with the category  labeled \u201cInc . . . Ind\u201d highlighted to indicate that this category currently has the focus of the interface. Thus, operations performed using the interface control components  operate on this selected subcategory. A user may also click on the slider widget  to move a slider  to a desired position on the slider widget , according to one embodiment. That is, the slider widget  includes a slider bar having a plurality of notches. Each notch may represent a level in the hierarchy. For example, the bottommost notch may represent the root level (Category \u201cSet\u201d) of the hierarchy, while the topmost notch may represent the leaf level (objects , e.g., four levels deep in the hierarchy). As shown, a user may move the slider  from a bottommost position in the window  (to display children  of root category \u201cSet\u201d ) to a middle position in the window  (to display children  of \u201cFor . . . Leg\u201d ) to a topmost position in the window  (to display child objects  of \u201cInc . . . Ind\u201d ).","Further, a user may also click on buttons ,  to move the slider  to a desired position on the slider widget , according to one embodiment. For example, a user may click on a button  of the window  to move the slider  upwards on the slider widget , i.e., descend in the hierarchy (e.g., expand the category ). If not category is currently selected, button  may be used to expand a category  at a predefined position, such as a middle category (\u201cIncA . . . IncE\u201d in this specific example). Descending in the hierarchy may also be referred to as \u201czooming in\u201d. In addition, a user may click on widget  to move the slider  downwards on the slider widget , i.e., ascend in the hierarchy (e.g., collapse \u201cFor . . . Leg\u201d  and expand the parent Category, \u201cSet\u201d , as shown in window ). Ascending in the hierarchy may also be referred to as \u201czooming out\u201d. Additionally, user may click on a button  of the window  to move the slider  to a lowest position on the slider widget , i.e., expand the highest level in the hierarchy (e.g., to expand the root Category, \u201cSet\u201d , as shown in window ). Other widgets and commands may be supported by embodiments of the invention.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 4","FIG. 1","FIG. 3"],"b":["400","152","154","400","150","400","350"]},"As shown, the method  begins at step , where the object manager  receives a plurality of objects . For example, the object manager  may receive the plurality of objects of Table I. At step , the category manager  receives a window size , e.g., \u201c320\u00d7200.\u201d At step , the object manager  may order the plurality of objects . For example, the object manager  may order the plurality of objects of Table I in alphabetical order.","At step , the category manager  generates a plurality of categories based on the ordered plurality of objects  and the received window size . For example, the category manager  may generate the plurality of categories of Table II. At step , the label manager  generates a plurality of labels  for the plurality of categories . For example, the label manager  may generate the plurality of labels of Table III. At step , the presentation manager  outputs the plurality of categories  for display in a window. For example, the presentation manager  may output the plurality of categories  for display in the window  of .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 5","FIG. 1","FIG. 3D","FIG. 3E"],"b":["152","154","500","150","500","350","362"]},"As shown, the method  begins at step , where the navigation manager  receives user input selecting a category  in a window. For example, the navigation manager  may receive user input selecting the category  of the window  of  (i.e. the category labeled \u201cFor . . . Leg\u201d). At step , the navigation manager  determines whether all of the objects  represented by the selected category  may be displayed simultaneously within the window. If so, the method  proceeds to step , where the presentation manager  outputs all of the objects  for simultaneous display within the window, after which the method  terminates. For example (supposing that a category \u201cInc . . . Ind\u201d is selected), the presentation manager  may output the objects  for simultaneous display within the window  of .","Otherwise, the method  proceeds to step , where the category manager  generates a plurality of sub-categories  based on the objects  represented by the selected category  and the received window size . For example, the category manager  may generate the plurality of sub-categories  based on the objects represented by the selected category  and the received window size for the window  of . As a further example, the category manager  may generate the plurality of sub-categories of Table IV.","At step , the label manager  generates a plurality of labels  for the plurality of sub-categories . For example, the label manager  may generate the plurality of labels for the plurality of sub-categories  in window  of  (i.e., \u201cFor . . . Gen\u201d, \u201cGen . . . Hol\u201d, \u201cHol . . . Inc\u201d, . . . , \u201cLastP . . . LastY\u201d). At step , the presentation manager  outputs the generated plurality of sub-categories  for simultaneous display within the window. For example, the presentation manager  may output the generated plurality of sub-categories  for simultaneous display within the window  of . After step , the method  terminates.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 6","FIG. 1","FIGS. 3D-3F"],"b":["600","152","154","600","150","600","300"]},"As shown, the method  begins at step , where the category manager  determines a maximum number of rows, N, based on the window size . For example, the category manager  may determine the maximum number of rows, based on text-character height and the size of the current display window. At step , the object manager  may receive a plurality of objects . For example, the object manager  may retrieve the plurality of objects  from the storage . As a further example, the object manager  may request the plurality of objects  (e.g., table names, such as those of Table I) from another computer (e.g., a database server) via the network . Responsive to the request, the database server may send the plurality of objects  to the object manager . In another embodiment, the object manager  may also execute on the database server. The object manager  executing on the database server may send only those of the plurality of objects  at the current focus level to the object manager  executing on the computer .","At step , the category manager  divides the objects  into categories . For example, the category manager  may divide the objects of Table I into the categories  of Table II. At step , the label manager  may generate labels  for the categories . For example, the label manager  may generate the labels of Table III.","At step , the category manager  may store category information. For example, the category manager  may store labels , categories , and associations (i.e., among categories and between categories and objects) into the storage . For instance, the category manager  may store the data of Table III onto a hard disk. The stored data may serve as a cache of category information to facilitate navigating through the hierarchy. At step , the presentation manager  populates the window with the categories . For example, the presentation manager  may populate the window  with the categories  of .","At step , if the navigation manager  receives user input for zooming out, the method  proceeds to step , where the category manager  loads categories  from one level above in the hierarchy. For example, if a user clicks on the button  in window  of , the category manager  may load categories . After step , the method  returns to step .","Otherwise, the method  proceeds to step . At step , if the navigation manager  does not receive user input for selecting a row, the method  proceeds to step , where the navigation manager  selects a middle row. For example, if a user does not select any row in window  of , the navigation manager  may select a middle row (e.g., the row labeled \u201cFor . . . Leg\u201d in window ). After step  or step , the method  proceeds to step .","At step , if the navigation manager  receives user input for zooming in, the method  proceeds to step , where the navigation manager  sets the selected category  as the active category, i.e., the category to be expanded. The active category may also be referred to as the category in focus or the category in scope. For example, if a user clicks on the button  in the window  of , the navigation manager  may set the category \u201cFor . . . Leg\u201d as the active category. After step , the method proceeds to step , where the navigation manager  determines whether the number of associated children of the active category is greater than N (i.e., the maximum number of rows). If so, the method  returns to step . Otherwise, the method  proceeds to step , where the presentation manager  displays all children (i.e., categories or objects) of the active category. For example, the presentation manager  may display all categories  in window  of . After step , the method  returns to step .","However, if the navigation manager  at step  does not receive user input for zooming in, the method  proceeds to step . At step , if the navigation manager  receives user input for moving focus (i.e., expanding the previous sibling node or the next sibling node of the active node), the method  proceeds to step , where the category manager  reads the next (or previous, depending on user input) category . For example, if a user clicks on the widget  in window  of , the category manager  may read the previous category  (including associated nodes ). After step , the method proceeds to step , where the category manager  sets the read category as the active category.","However, if the navigation manager  at step  does not receive user input for moving focus, the method  returns to step . Alternatively, the method  may also terminate.","Of course, the embodiments described herein are intended to be illustrative and not limiting of the invention, and other embodiments are broadly contemplated. Those skilled in the art will recognize, for example, that embodiments of the invention may be adapted to support other ways of generating categories, arranging categories into a hierarchy, generating labels, determining window size, determining maximum number of rows, defining commands, ordering objects, and distributing objects among categories.","Advantageously, embodiments of the invention presenting a plurality of objects within a display area on a graphical display device. In one embodiment, an object presenter may receive a plurality of objects and a size of the display area. The object presenter may generate a plurality of categories based on the plurality of objects and received size. The object presenter may also generate a plurality of labels for the generated plurality of categories, the labels describing the objects associated with each category. The plurality of categories may also form a hierarchy. The object presenter may also provide one or more commands for navigating the hierarchy. A user may conveniently and efficiently view, browse, and select the plurality of objects using the hierarchy and the provided commands.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features, advantages and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments thereof which are illustrated in the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"],"b":"150"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 3A-3F"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
