---
title: System and method for topology constrained QoS provisioning
abstract: A system and method for topology constrained Quality of Service (QoS) provisioning between a plurality of sites in a Virtual Private Network (VPN) is disclosed. The method comprises enabling graphical definition of relationships between the plurality of sites of the VPN and enabling graphical definition of at least one QoS rule for at least one pair of sites of the plurality of sites of the VPN based at least in part on the defined relationship.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08014283&OS=08014283&RS=08014283
owner: Fujitsu Limited
number: 08014283
owner_city: Kawasaki
owner_country: JP
publication_date: 20020429
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["This patent application claims the benefit of Provisional Patent Application Ser. No. 60\/295,142, entitled System and Method for Topology Constrained QoS Provisioning, filed on Jun. 1, 2001, the disclosure of which is incorporated herein by reference.","The present invention relates generally to the field of telecommunications and more particularly to a system and method for topology constrained Quality of Service (QoS) provisioning.","It is a unique aspect of a Virtual Private Network (VPN) that only certain sites are allowed to exchange packets with one another. Existing provisioning systems allow an operator of a service provider to configure the sites so that one site can talk to a second site but not to a third site. The service provider may be an ILEC (Incumbent Local Exchange Carrier), a CLEC (Competitive Local Exchange Carrier), an ICX (Incoming Exchange), an ISP (Internet Service Provider), and\/or the like. In order to operate properly it is desirable that the provisioning system be aware of the rules governing the communication between different sites of a VPN and allow configuration of the VPN based on those rules.","Existing provisioning systems allow an operator to provision Quality of Service (QoS) on different nodes supporting a VPN. However, such systems do not correlate provisioning of QoS to the topology of the VPN. Thus, provisioning of QoS can be error prone and inefficient and not sufficiently tied to the specific requirements of site-to-site service level guarantees in the VPN.","Accordingly, especially with the introduction of newer technologies, such as Border Gateway Protocol 4 (BGP) and Multi-protocol Label Switching (MPLS), there is a need in the art for a system and method for Quality of Service (QoS) provisioning in a network, such as topology constrained QoS provisioning in a Virtual Private Network (VPN), for example a BGP MPLS VPN. In the preferred embodiment, the present invention allows topology constrained QoS provisioning in a VPN by capturing the provisioning operator's intent regarding the sites that are allowed to communicate with each other.","A system and method for provisioning QoS relationships between customer sites constrained by the topology of the VPN is disclosed. In the preferred embodiment, this is accomplished by interpreting and understanding the rules governing VPN topology as specified, for example by BGP\/MPLS rules and then allowing the provisioning operator to provision QoS relationships for logical communication channels only between those sites of the VPN which have the right to exchange traffic with one another. These QoS relationships then take effect in the provider network.","The method comprises enabling graphical definition of relationships between the plurality of sites of the VPN and enabling graphical definition of at least one QoS rule for at least one pair of sites of the plurality of sites of the VPN based at least in part on the defined relationship.","Accordingly, it is a technical advantage of an exemplary provisioning system of the present invention that it is capable of understanding, displaying, storing and configuring VPNs in a provider network.","It is another technical advantage of an exemplary embodiment provisioning system that it is capable of understanding, displaying, storing and configuring the VPN topology and QoS provisioning, preferably in terms of the sites which are interconnected by VPN components and the type of VPN components, wherein the topology of the VPN components specifies the topology or permitted communication relationships between the sites.","It is yet another technical advantage of an exemplary embodiment provisioning system that it is capable of understanding, displaying, storing and configuring QoS specifications for point-to-point and\/or point-to-multipoint communication paths between the sites of a VPN.","It is yet another technical advantage of an exemplary embodiment provisioning system that it is capable of understanding and using the VPN topology for each VPN to constrain subsequent QoS provisioning operations between sites, wherein the set of point-to-point and\/or point-to-multipoint service level specifications for communication paths between sites is restricted to those other sites with permitted communication relationships, as opposed to the set of all sites reachable via an underlying shared packet switched network.","Other aspects and features of the invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.","The preferred embodiment of the present invention and its advantages are best understood by referring to  of the drawings, like numerals being used for like and corresponding parts of the various drawings.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","100","102","104","102","104","100","106","108","110","112","120"]},"It is a unique aspect of Border Gateway Protocol 4 (BGP) and Multi-protocol Label Switching (MPLS) VPNs that the VPN connectivity is provided by a dedicated provider edge-customer edge (PE-CE) peering relation combined with a shared packet-switched network operable to deliver packetized data between nodes\/sites thereof in an appropriately formatted protocol, e.g. IP, User Datagram Protocol (UDP), and\/or the like. The underlying network  may be embodied with any number of general transmission technologies. In an embodiment, the underlying network  is a fiber optic network carrying MPLS and IP formatted data therebetween and, accordingly, the nodes may be implemented as optical transport nodes although the particular transmission medium is irrelevant with regard to the scope of the invention. While the present invention contemplates an implementation on an optical network, the invention as described herein is not intended to be limited thereto and, accordingly, underlying network  may be any type of network capable of packet-switched data transmissions between various nodes thereof.","In the preferred embodiment, the BGP MPLS VPN topology is governed by constrained distribution of routing information between sites using the concept of Route Target attributes which are sent with routing updates. Any two sites of the VPN which are able to share routing information are said to be topologically related. If an underlying network transport mechanism, such as MPLS, exists to securely carry packets between sites that are topologically related, then the sites are able to communicate over the VPN.","Sites which are connected in a mesh configuration may exchange packets with one another. The mesh interconnection is useful for connecting sites, such as regional headquarters so that the different regional headquarters can exchange data with one another. In the preferred embodiment, a mesh VPN component employs one Route Target Tm(x). A BGP process serving each of the sites belonging to the mesh imports routes tagged with Route Target Tm(x) and exports routes tagged with Route Target Tm(x).","Sites which are connected in a hub-spoke configuration typically have restrictions on the exchange of packets. A site which is a hub may exchange packets with any spoke in that component, while a site which is connected as a spoke may only exchange packets with the hub. The hub-spoke arrangement is useful for connecting sites, such as sales offices in a particular region to the corresponding regional headquarters. In such an arrangement, the regional headquarters could be the hub and the sales offices could be the spokes. Thus, data from the sales office in a particular region can be transmitted to the regional headquarters from where it might be sent to other sales offices in the same region or to the headquarters of a different region.","In the preferred embodiment, a hub-spoke VPN component employs two Route Targets\u2014Th(x) for the hub and Ts(y) for the spokes. The BGP process serving the hub site imports routes tagged with Ts(y) and exports routes tagged with Th(x). The BGP process serving the spoke site imports routes tagged with Th(x) and exports routes tagged with Ts(y).","In the exemplary embodiment shown in , site  is a spoke of hub-spoke VPN component ; site  is a spoke of hub-spoke VPN component ; site  is the hub of hub-spoke VPN component  and is also a member of mesh VPN component ; and site  is a member of mesh VPN component . Thus, site  can only exchange packets with site ; site  can only exchange packets with site ; site  can only exchange packets with site ; and site  can exchange packets with site , site , and site . Connections between sites and VPN components are representative of the VPN topology and connections between the sites reflect the constrained topology upon which provisioning may be based.","Route Targets may be used to describe the topology of a VPN, for example the permitted combination of sites which may communicate securely over the VPN. A Virtual Routing Forwarding (VRF) table associated with a particular site S is populated only with routes that lead to other sites which have at least one VPN in common with site S. This prevents communication between sites which have no VPN in common. Every VRF is associated with one or more Route Target attributes. These are carried in BGP as attributes of the route. Any route associated with a Route Target T is distributed to every Provider Edge (PE) router that has a VRF associated with Route Target T. When such a route is received by a PE router, it is eligible to be installed on those of the PE's VRFs which are associated with Route Target T. An Export Target is a Route Target that a PE router attaches to a route received from site S. An Import Target is a Route Target that a PE router uses to determine whether a route received from another PE router could be placed in the VRF associated with site S. A particular VPN IPv4 route is eligible for installation in a particular VRF if there is some Route Target which is both one of the route's Route Targets and one of the VRF's Import Target.","Communication paths connecting the sites may be one of two general types: pipes and hoses. Pipes are defined herein as point-to-point communication channels between two sites and are operable to provide unidirectional or bi-directional communications with QoS (Quality of Service) guarantees for packets flowing between the two sites that terminate the pipe. A hose is defined herein as a collection of communication channels that allow point-to-multipoint communication between a site and other sites and is thus an interconnection between three or more sites. A hose is preferably operable to provide unidirectional or bi-directional communications with QoS guarantees for packets flowing between the nodes that terminate the hose.","The topology of a BGP MPLS VPN is not immediately evident from the capabilities of the underlying transport network which may offer communication between all PE nodes. Therefore, an understanding of the application of Route Targets, their import and export control, and BGP protocol behavior is desirable to properly determine the topology of the BGP MPLS VPN. It is desirable that the provisioning system be aware of the rules governing communication between different sites of the VPN and allow configuration of the VPN based on those rules.","Preferably a Management and Control System (MCS)  (), which is preferably a client-server based software system, is utilized for topology constrained QoS and routing policy provisioning according to the preferred embodiment of the present invention. A user interface  associated with MCS  allows a provisioning operator to graphically create the topological relationship between different sites. User interface  preferably also allows the provisioning operator to graphically set-up QoS and routing relationships between the different sites. However, user interface  only allows QoS and routing relationships to be set-up based on the constraints of the underlying topology. Thus, by being aware of the rules corresponding to the topology, MCS  allows provisioning of QoS and routing relationships based on the topology. MCS  captures the provisioning operator's intent, performs the desirable validation and translation into routing rules for different sites of the VPN, stores the information in a database, and transmits it to the appropriate routers, switches and\/or devices of the network.","A pointing device, such as a mouse, a trackball and\/or the like, which controls a graphical pointer on a display may be used. The graphical pointer is used to provide feedback to the provisioning operator. Utilizing the pointing device, the provisioning operator may point to a desired selection and receive feedback by viewing the graphical pointer. Furthermore, pointing and clicking on a representation of a VPN element by keeping the button of the pointing device depressed would allow the provisioning operator to \u2018drag\u2019 the selected VPN element. Releasing the button of the pointing device would allow the provisioning operator to \u2018drop\u2019 the selected VPN element.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["201","200","201","203","211","212","202","204","206","208","210","211","212","210","210"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":"206"},"VPN tree  shows a containment relationship of the various data objects in a VPN. Preferably when configuring VPNs, VPN tree  includes one or more of the following data categories: service provider, customers, sites, site interfaces, VPNs, VPN components, VPN interfaces, and\/or the like. In the preferred embodiment, when the selected view is VPN QoS or Topology\/QoS Overlay VPN tree  preferably contains QoS templates, for example, for differentiated services (DiffServ), policing, IP header classification, queuing parameters, and\/or the like. Preferably the different data categories appear as folder icons on VPN tree . Object instances reside within the data category folder icon on VPN tree . Preferably there is no category folder for Service Provider as in the preferred embodiment the provisioning operator will be logged on as a representative of a particular Service Provider.","A list view displays the items contained within the current VPN tree node selection. For example, clicking on the Customers folder preferably displays a list of all customers in the folder, preferably one per row. Clicking on a tree leaf\u2014for example, a specific Site Interface, displays the leaf as a single table row.","In the preferred embodiment, for VPN tab , the list view data for various tree elements is as shown in Table I:",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["TREE DATA ELEMENT","LIST VIEW DATA"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Customer","Name, Postal Address, Billing Address,"]},{"entry":[{},"Shipping Address, Contact Information"]},{"entry":["Site","Name, IP Address, Contact, Route"]},{"entry":[{},"Distinguisher"]},{"entry":["Site Interface","Name, interface IP Address, Subnet Mask,"]},{"entry":[{},"Route Distinguisher"]},{"entry":["VPN","Name, ID, Type"]},{"entry":["VPN Component","Name, Component Number, Component"]},{"entry":[{},"Topology, Primary Route Target, Secondary"]},{"entry":[{},"Route Target"]},{"entry":["VPN Interface ","VPN ID, VPN Component ID, Component"]},{"entry":[{},"Role, Primary (Boolean), Member Label"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A graphical view preferably shows the VPN components and the associated relationships for the most recently selected VPN. If the user clicks on a non-VPN data item in VPN tree , such as a customer, the most recently selected VPN remains on the graphical display. The individual VPN elements may be shown graphically. Thus, as shown in , a hub-spoke VPN component may be shown by a triangle; a mesh VPN component may be shown by an ellipse; and a site may be shown by a rectangle. Preferably a single click on a VPN component selects the corresponding entry in VPN tree  and a single click on a link between a site and a VPN component selects the corresponding VPN interface in VPN tree .","Utilizing the user interface of the present invention a VPN, a customer, and\/or a site may be added by right clicking on a customer entry and making the appropriate selection from a pop-up menu. The details for the particular selection can then be filled in.","For example, a site interface may be added by right clicking on a site entry and making the appropriate selection from the pop-up menu. The details for the site interface can then be filled in. The site interface details window preferably contains one or more of the following data fields to be filled by the provisioning operator: Name, interface IP Address, Subnet Mask, Route Distinguisher, and\/or the like. The default site interface name is the customer equipment name concatenated with the interface IP address. The site interface may be displayed on the graphical view by dragging and dropping one or more site interfaces from VPN tree  onto a VPN component on VPN tree  or display area .","When a site interface is added to a VPN component on the graphical view, the corresponding site graphic is added to the graphical view. A corresponding VPN interface is created in VPN tree  under the component. The name of the VPN interface defaults to VPNIF n where n is the next available integer.","A line designating a site's membership in a VPN component connects the site to the VPN component. If the VPN component is a hub-spoke VPN component, the first interface added becomes the hub and other interfaces become the spoke. If desired, however, the designation of an interface as a hub or a spoke can be changed. Also, if desired, a default communication channel, such as a hose, is added between the site and the VPN component. A default Policing template and DiffServ template are also preferably applied to the communication channel. For example, a default policing template may be for Best Effort (BE) traffic to the line rate and a traffic envelope of \u201cany\u201d. Alternatively, user provisioned defaults may be used, if desired.","A VPN component may be added to an existing VPN entry by right clicking on a VPN entry and making the appropriate selection from a pop-up menu. The details for the VPN component may then be filled in. The VPN component details window preferably contains one or more of the following data fields to be filled by the provisioning operator: Name, Component Number, Component Topology, Primary Route Target, Secondary Route Target, and\/or the like.","A Policing Template may be added by right clicking on a Templates Folder (not shown) and making the appropriate selection, for example \u201cAdd Policing Template\u201d, from a pop-up menu. The details for the Policing Template may then be filled in. The Policing Template details window preferably comprises one or more of the following data fields to be filled by the provisioning operator: Template Name, ICR (Ingress Commit Rate), IPR (Ingress Peak Rate), ECR (Egress Commit Rate), EPR (Egress Peak Rate), ICTBS (Ingress Commit Token Bucket Size), IPTBS (Ingress Peak Token Bucket Size), ECTBS (Egress Commit Token Bucket Size), EPTBS (Egress Peak Token Bucket Size), and\/or the like.","A DiffServ Template may be added by right clicking on the Templates Folder and making the appropriate selection, for example \u201cAdd DiffServ Template\u201d, from the pop-up menu. The details for the DiffServ Template may then be filled in. The DiffServ Template details window preferably comprises one or more of the following data fields to be filled by the provisioning operator: a Template Name, a Differentiated Services Code Point (DSCP) map, a 5-tuple map, and\/or the like.","In the preferred embodiment, the DiffServ template specifies the classification criteria for the packet flow which is subject to the QoS of the related communication channel between the sites of the VPN. The DSCP map preferably specifies a set of DiffServ code points in the packet header which identify the packets which are subject to the specified QoS. The 5-tuple map specifies a set of match criteria on fields in the packet header, for example, protocol, source address, destination address, source port, and destination port.","A communication channel, such as a hose or a pipe, between sites can be added by right clicking a VPN component to which the sites are connected. A dialog box appears with one section for hoses and one section for pipes. Preferably, sites are added to the hoses list and\/or the pipes list. The hoses list may contain multiple entries and the pipes list may contain two entries\u2014one for each endpoint of the pipe. Preferably the graphical display is updated to reflect the updating of the communication channels. Different colored lines may be used to denote the pipes and hoses.","The set of sites which are candidates for addition to the hoses list is computed and constrained preferably based on the component topology and site membership in the component. The set of sites which are candidates for addition as pipe endpoints is similarly restricted. These restrictions are preferably based on removing the already selected set of sites related to the communication channel from the total set of sites which are directly reachable through a hub-spoke topology or a mesh topology for the VPN components the sites in question are members of. Thus, the number of sites presented to the provisioning operator for consideration is significantly reduced.","A Policing template and\/or a DiffServ template of a communication channel may be updated by the provisioning operator by simply dragging and dropping the appropriate template onto a graphical communication channel. If desired, a communication channel's Policing and\/or DiffServ data may be changed to something outside of a preconfigured template by clicking on the graphical link and making the desired changes in a dialog box that appears in response to the clicking of the graphical link.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 3","b":["300","300","302","304","306","308","310","312","314","316","320","322","302","306","312","312","306","304","306","304","308","310","314","314","316","320","322","310","308"]},"The server architecture may be realized on any general purpose computing platform in which a sufficient development infrastructure and framework supporting application development is available. In the preferred embodiment, Java Software Development Kit (JDK), Java Runtime Environment (JRE) and other third party software tools are utilized.","A details object encapsulates data model entities, such as customers, VPNs, VPN components, sites, site interfaces, provider edge nodes and interfaces, communication channels, policing profiles, DiffServ profiles, and\/or the like, that are used preferably by both a client and server . These objects enable the client and the server to realize an internal computational model of the VPN topology and related communication channels. They also facilitate communication of information between the client and server .","In the preferred embodiment, the details object includes only the core information of the data it encapsulates and preferably does not store references to related objects. In cases, where references to other objects are desirable in a details object, the references are stored as unique IDs. Preferably the unique IDs are hidden from the clients. Also preferably details objects do not support one-to-many relationships. For example, a customer details object should not attempt to encapsulate references to its VPNs because the number of VPNs can be very large.","Server  supports storage and retrieval of one or more topology objects. Topology objects preferably map topology data to details objects for a given view. The view preferably uses the topology object to render its graphics. For example, a site topology object preferably includes: view type ID, x, y coordinates, icon object, site details object for a given site, and\/or the like. A pipe topology object preferably includes: view ID, icon object, details objects for the two VPN Interfaces connected by the pipe, a PipeReservation details object for the pipe, and\/or the like. The PipeReservation details object preferably contains information pertaining to the policing profile and the DiffServ classification profile of the associated pipe.","A request object preferably encapsulates details that event listeners interrogate for information on events, such as a ConfigurationChangeEvent, a VPNConfigChange event, a VPNTopologyChange event and\/or the like. For example, a ConfigurationChangeEvent object contains references to the details objects that have changed. Generally, each event object will map to a pair of Manager Application Programming Interfaces (APIs). For example, a \u201cVPNComponentMembershipChangeEvent\u201d object maps to \u201caddVPNInterfacetoVPNComponent\u201d and \u201cremoveVPNInterfacefromVPNComponent\u201d.","A VPNConfigChange event refers to changes to the configuration data or data relationships. It is triggered by VPN Storage object module  after a successful change to the VPN Configuration data model data. A create, delete, or modify operation on a VPN data triggers a configuration event. A VPNTopologyChange event refers to changes in existing topology data in database . It is triggered by VPN Storage object module  after a successful change to VPN topology data in VPN Datastore module .","VPN Configuration Manager  is preferably instantiated the first time a client attempts to access its services. VPN Configuration Manager  maintains a reference to VPN Storage object module . Preferably, VPN Configuration Manager  registers itself as a listener with Event Service module  to listen for configuration change events. VPN Configuration Manager  may perform one or more of the following functions: allow clients to register for VPN configuration change events through a framework, notify client listeners of VPN configuration changes through the framework, receive client requests for VPN configuration changes and map them to request objects, update VPN Storage object module  with any changes to the VPN configuration, and\/or the like.","VPN Topology Manager  is preferably instantiated the first time a client attempts to access its service. VPN Topology Manager  obtains a reference to VPN Storage object module  from VPN Configuration Manager  and maintains the reference for storing topology changes. Upon instantiation, VPN Topology Manager  registers itself as a listener with Event Service module  to listen for VPN topology changes. VPN Topology Manager  may perform one or more of the following functions: allow clients to register for VPN topology change events through the framework; notify client listeners of VPN topology changes through the framework; receive client requests for topology changes; update VPN Storage object module  with any changes to the VPN topology of a given view; map VPN data model topology objects to VPN details topology objects; and\/or the like.","VPN Storage object module  is preferably instantiated by VPN Configuration Manager . The reference to VPN Storage object module  is preferably stored in VPN Configuration Manager  and is retrievable by VPN Topology Manager . VPN Storage object module  maintains a reference to Event Service module  for publishing VPN related events. VPN Storage object module  may also maintain a reference to VPN Datastore module . Preferably VPN Storage object module  registers itself with VPN NE Event Manager  as a listener for VPN related events. VPN Storage object module  may perform one or more of the following functions: receive client request objects, topology objects, and details objects (preferably using VPN Datastore module  and VPN DAO ) in a configuration database for later retrieval; persists VPN related NE (Network Element) events and commands; control the order in which data storage takes place; retrieve the same type of data it stores; abstract VPN Configuration Manager  and VPN Topology Manager  from the details of how and where to store VPN data; abstract the VPN Network Distribution module  from the details of how and where to store NE events and commands; publish events to Event Service module  when VPN configuration or topology changes take place; and\/or the like.","VPN Network Distribution module  is preferably instantiated by VPN Storage object module . The reference to VPN Network Distribution module  is preferably stored in VPN Storage object module . VPN Network Distribution module  retrieves and maintains references to the appropriate Network Access module  for the specific piece of provider equipment. Network Access module  provides primitives and mediation services to the VPN Network Distribution module  allowing it to perform one or more of the following functions: map service requests to specific NEs as per a connectivity specification; implement retry policies for failed commands; log each failure and retry; and\/or the like.","VPN NE Event Manager  preferably maintains associations to the specific NE classes as per the connectivity specification. VPN NE Event Manager  maintains references to VPN Storage object module . VPN NE Event Manager  may perform one or more of the following functions: register as a listener to the NE classes as per the connectivity specification; store the NE events in the VPN Storage object module ; map the NE events to VPN events; perform validity checking on mapping of NE events to VPN events; log any errors detected and reinstates any affected VPN data by reissuing VPN commands to VPN Storage object module ; store valid VPN events in VPN Storage object module ; and\/or the like.","Event Service module  preferably maintains dynamic references to event listeners. Event Service module  may perform one or more of the following functions: provide publish subscribe messaging services for a predefined list of topics, including VPN topics; provide associated listener and event classes to notify interested parties of new messages; and\/or the like.","VPN Datastore module  may perform one or more of the following functions: provide APIs for storage and retrieval of VPN data items; persists VPN data to a particular type of database; abstract VPN Storage object module  from the details of the particular commands for the database; support transactions; and\/or the like.","A VPN DAO  is preferably instantiated and referenced by VPN Datastore module . Preferably, one VPN DAO per VPN object class per datastore is instantiated. VPN DAO  may perform one or more of the following functions: encapsulate knowledge of where and how to store and load Java objects of a particular class; encapsulate knowledge for retrieving multiple instances of a particular Java class; persists objects of a given class to a relational database given a handle to a vendor's relational database; and\/or the like.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 4","FIG. 4"],"b":["400","402","404","405"]},"In step , a createVPNInterface request object is created preferably by VPN Configuration Manager . In step , the createVPNInterface request object is populated with the details object. In step , VPNStorage.store is called, preferably by VPN Configuration Manager . In step , a determination is made as to whether the provisioning request is for a network element. Preferably, in this step createVPNInterface.isNERequest is called by VPN Storage object module . If the provisioning request is not for a network element, then the request is terminated.","If the provisioning request is for a network element, then in step , the request is stored in database , preferably by VPN Storage object module  calling DataStore.store. In step , database  is updated, preferably by VPN Storage object module  calling VPNDataStore.createVPNInterface. In step , the request is distributed to NEs. This is preferably done by VPN Storage object module  calling VPNNEDistribution.createVPNInterface. In step , EventService.publishEvent is called, preferably by VPN Storage object module . In step , all clients are informed of the VPNConfigChangeEvent. Preferably, VPN Configuration Manager  receives a VPNConfigChangeEvent and notifies all clients.","In step , NE provisioning event arrives at VPN NE Event Manager . In step , the VPNConfigChangeEvent that contains the corresponding VPNInterface details object (with no unique ID) and a CTAG (correlation tag) is called, preferably by the VPN NE Event Manager . A CTAG is preferably a unique identifier assigned by the server to correlate provisioning requests, responses and events. In step , the event is received preferably by VPN Storage object module . In step , the CTAG is checked against database . If there is no corresponding client request, then in step  DataStore.createVPNInterface is called, preferably by VPN Storage object module . In step , EventService.publishEvent is called, preferably by VPN Storage object module . In step , a VPNConfigChangeEvent event is received, preferably by LogService. LogService also preferably logs the date, time, userid and operation performed.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 5","FIG. 5"],"b":["500","502","504","506","508","302","510"]},"If the client has the appropriate permissions, then in step , an AddVPNInterfaceToVPN client request object is instantiated, preferably by VPN Configuration Manager . The request object includes data from the VPN and Interface details object. In step , storage of the configuration data in the configuration database is initiated, preferably by VPN Configuration Manager  calling VPNStorage.store. In step , the configuration request is stored preferably in the configuration database by calling DataStore.store. In step , a database is updated, preferably by calling VPNDataStore.store. In step , communication of the provisioning request to the affected network element is initiated thereby causing the provisioning change to take effect in the network. This is accomplished preferably by VPN Storage object module  calling VPNNEDistribution.store. In step , EventService.publishEvent is called, preferably by VPN Storage object module . In step , all clients are informed of the addVPNInterfaceToVPN event. Preferably, VPN Configuration Manager  receives an addVPNInterfaceToVPN and notifies all clients. In step , an addVPNInterfaceToVPN event is received, preferably by LogService. LogService also preferably logs the date, time, userid and operation performed.","DataStore.store preferably calls ClientRequestDAO.create to create a data access object for the client request. VPNDataStore preferably calls VPNInterface.addVPN. VPNInterface preferably adds a VPNUniqueID to its member data. VPNDataStore calls VPNInterfaceDAO.update to update the data access object. VPNNEDistribution preferably computes the appropriate NE command set. VPNNEDistribution preferably calls VPNStorage.store. VPNNEDistribution preferably spawns a separate thread for NECommandSet.execute.","The NECommandSet.execute preferably sends the next NE Command to network access module  and to the affected network element. If the send is successful, then the provisioning operation succeeds. If the send is not successful, then the send is repeated according to a retry policy. If it is not possible to complete the send, a NECommandExecutionException is triggered with the NECommand that failed. The process is repeated for all commands in the NECommandSet.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 6","FIG. 6"],"b":["600","602","603","604","302","605","302","606","306"]},"If the provisioning request is for a network element, then in step , the request is stored in database , preferably by VPN Storage object module  calling DataStore.store. In step , database  is updated, preferably by VPN Storage object module  calling VPNDataStore.addPipeReservationToVPNIF.","In step , VPN NE Event Manager  receives a NE Event indicating a new pipe reservation on a VPNInterface. In step  the VPNConfigChangeEvent that contains the corresponding VPNInterface and VPNPipeReservation details object (with no unique ID) and CTAG is called, preferably by the VPN NE Event Manager . In step , the event is received preferably by VPN Storage object module . In step , the CTAG is checked against the database. If there is no corresponding client request, then in step  datastore.createPipe is called, preferably by VPN Storage object module . In step , EventService.publishEvent is called, preferably by VPN Storage object module . In step , a VPNConfigChangeEvent event is received, preferably by LogService. LogService also preferably logs the date, time, userid and operation performed.","In the preferred embodiment, MCS  captures the intent of the provisioning operator as graphically expressed through the user interface and automatically translates it to provide topology constrained QoS provisioning. The implementation of QoS provisioning is managed as attributes of a VPN. Although the preferred embodiment of the present invention as described above contemplates an implementation of QoS guarantees that include provisioning of policing profiles and DiffServ type traffic categorization, the invention is not so limited. If desired, the present invention may be used for supporting any QoS guarantees and provisioning supported by the underlying network nodes.","While the invention has been particularly shown and described by the foregoing detailed description, it will be understood by those skilled in the art that various other changes in form and detail may be made without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention, the objects and advantages thereof, reference is now made to the following descriptions taken in connection with the accompanying drawings in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
