---
title: Uniform handling of external resources within structured documents
abstract: Methods, systems, and computer program products for improving globalization of document content. A globalization model is defined which enables separating and externalizing translation-sensitive resources. A content translation expert can then operate efficiently to provide translated content, and a content designer can more easily focus on the task at hand using a resource-neutral document format. Using the disclosed techniques, translation-sensitive resources identified in a structured document can be programmatically translated by resolving references to a particular supplemental document in which the translated content for a target language has been specified.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06934908&OS=06934908&RS=06934908
owner: International Business Machines Corporation
number: 06934908
owner_city: Armonk
owner_country: US
publication_date: 20011017
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to a computer system, and deals more particularly with translating identified information in structured documents into different languages.","2. Description of the Related Art","Companies have long recognized the desirability of \u201cglobalizing\u201d or \u201cinternationalizing\u201d computer software products. The globalization process is also sometimes known as providing \u201cnational language support\u201d or \u201cNLS\u201d. A formalized definition of globalization is that it combines processes known as \u201cinternationalization\u201d and \u201clocalization\u201d. Internationalization is sometimes referred to as \u201cNLS enablement\u201d, and localization is sometimes referred to \u201cNLS implementation\u201d. Internationalization is the process of producing a product such that it is independent of any particular language, script, culture, and\/or coded character set, and localization then adapts the internationalized product for a specific language, script, culture, and\/or coded character set.","For example, if a software product displays menus to users, a globalized version of the product provides for translating the text (or at least some portion of the text) on the menus into the particular language preferred by the user. Similarly, software products that generate text messages for recording in an error log may be globalized such that the text messages will be recorded in a preferred language.","Early globalization efforts were focused on identifying and externalizing the text strings produced by a software product. That is, in order to translate the text strings into multiple languages efficiently, it was recognized that those strings should be not embedded inline within the code of the software product. Instead, tables (such as message tables) were defined to store the strings, and software products were written to use mnemonics or numeric identifiers which then could be used to index into the tables. Having the text strings externalized in this manner made translation easier, as a translator could simply substitute an appropriate version of each string in place within the table (or provide replacement tables in different languages), and the software would then access the translated text using the original mnemonic or numeric identifier.","Many of today's software products are written to produce and consume information which is represented using structured documents encoded in markup languages. Use of structured documents has also become increasingly prevalent in recent years as a means for exchanging information between computers in distributed networking environments. The Hypertext Markup Language, or \u201cHTML\u201d, as one example, is a markup language which is widely used for encoding the content of structured documents which represent Web pages. The Web page content can be transmitted between computers of the public Internet for rendering to users, and may also be used for other purposes (and in other environments such as private intranets and extranets). The Extensible Markup Language, or \u201cXML\u201d, is another markup language which has proven to be extremely popular for encoding structured documents. XML is very well suited for encoding document content covering a broad spectrum, not only for transmission between computers but also, in some cases, to enable automated processing of document content. XML has also been used as a foundation for many other derivative markup languages which are adapted for specialized use, such as VoiceXML, MathML, and so forth.","In view of the vast amount of content being encoded in structured documents today, and the increasing tendency to distribute such content throughout the world over distributed computing networks, techniques are needed for efficient and reliable globalization of content encoded in structured documents.","An object of the present invention is to provide efficient and reliable techniques for globalization of content encoded in structured documents.","Another object of the present invention is to provide techniques for efficiently and reliably translating identified information in structured documents into different languages.","It is another object of the present invention to provide globalization techniques which programmatically locate content to be translated, and which programmatically find the proper content to be used in a translated result.","Other objects and advantages of the present invention will be set forth in part in the description and in the drawings which follow and, in part, will be obvious from the description or may be learned by practice of the invention.","To achieve the foregoing objects, and in accordance with the purpose of the invention as broadly described herein, one aspect of the present invention provides methods, systems, and computer program products for translating identified information in structured documents. This aspect preferably comprises: programmatically locating content to be translated in a structured document; programmatically finding content to be used in a translated result of the structured document; and programmatically replacing the content to be translated with the content to be used, thereby created the translated result.","In this aspect, translation-sensitive content is preferably externalized from the structured document, and the content to be used is preferably encoded in one or more supplemental structured documents. In preferred embodiments, these supplemental structured documents contain language-specific translated content. The structured document preferably remains unchanged after the programmatic replacement. The translated result may be created dynamically while rendering to a user, or perhaps while rendering to a consuming component. The content to be translated and the content to be used may be text. They might include graphic images.","Preferably, the content to be translated is marked with a translation key, wherein the translation key is specified as an attribute name. The programmatically finding may further comprise matching an attribute value of the marked content to an element name in a supplemental structured document.","The technique preferably further comprises selecting a target translation language, wherein the content to be used is preferably encoded in a supplemental structured document and is preferably translated into the selected language. Optionally, the selecting may comprise programmatically determining a locale, and using the determined locale to select the target translation language.","The present invention will now be described with reference to the following drawings, in which like reference numbers denote the same element throughout.","Practitioners of the art who enable their structured documents for translation into different languages understand that existing prior art techniques are difficult and error-prone. Typically, prior art globalization processes comprise writing a document in a specific language, normally English, and then handing the document to a translation team. The translators then produce documents in other languages by copying the original to create a new document wherein each element identified by the translation team as translatable has been manually replaced with the appropriate translated element. This process can also be very time-consuming and tedious. In addition, there is no standard technique known to the inventors for localizing structured document content (i.e. for adapting structured document content to one or more different languages). The present invention addresses these issues, and discloses novel techniques for efficiently and reliably translating content encoded in structured documents using programmatic techniques.","A globalization model is disclosed herein, whereby translation-sensitive resources (such as text strings) are isolated or externalized from the main structured document, and these resources are then localized using a set of language-specific \u201csupplemental\u201d documents which contain translated versions of the resources. When using this model, a content designer preferably prepares the main structured document, and one or more supplemental documents are preferably prepared by language translation experts. The techniques disclosed herein resolve the translation programmatically.","The model disclosed herein enables use of a uniform approach to globalization, allowing the main structured document to remain unchanged in response to translation, and to be expressed in a resource-neutral format. In this manner, translations may be performed with little or no impact on the original structured document.","The techniques of the present invention may be used advantageously for content that is designed for many different types of scenarios. As one example, a complex software product may have a number of graphical user interface (\u201cGUI\u201d) windows to display to users, each of which contains various titles, menu bar text, field labels, button labels, and so forth. A significant amount of help text and a large number of textual messages may also be provided with the software product. As another example, a software installation package which installs software may itself have a considerable amount of GUI information, help text, and messages. In order to facilitate use of such products by end users, information rendered to the user is preferably translated into his or her preferred language, as stated earlier. It should be noted, however, that the present invention is not limited to end-user scenarios: instead, translated content created according to the present invention may be used as input to another programmatic component. The term \u201cconsumer\u201d is used herein to encompass any type of component which receives the translated content created by the present invention, and includes (by way of illustration) rendering engines, automated processes which operate on structured content, and also storing translated content in a repository.","An example scenario is described herein to illustrate operation of the present invention. This example is based on structured documents encoded in XML, and the descriptions herein are in terms of documents encoded using XML, although this is for purposes of illustration and not of limitation. Many other markup languages might be used alternatively. Furthermore, while preferred embodiments are described with reference to translations of textual elements, it will be obvious to one of skill in the art that the present invention is not limited to use with translation of text: the disclosed techniques may be adapted for use with other types of elements in a straightforward manner, once the teachings of the present invention are known. (For example, rather than identifying a textual element that is to be resolved in a language-specific manner, the techniques of the present invention may also or alternatively be used to identify a choice of culture-specific icons or graphic images. Such adaptations are further discussed below at an appropriate location.)","In preferred embodiments, the present invention is implemented in software, although alternative embodiments may use a combination of software and hardware. Discussions hereinafter are in terms of a software implementation. The software is preferably implemented using an object-oriented programming language such as the Java\u2122 programming language. (\u201cJava\u201d is a trademark of Sun Microsystems, Inc.) Alternatively, the software may be implemented in other programming languages, including conventional procedural languages.","An implementation of the present invention may be executing in a distributed computing network, such as the Internet. For example, the programmatic translation process may be performed on a Web server, while preparing to serve content to requesters across a communications medium. Or, an implementation of the present invention may be executing in a stand-alone environment, for example on a device which is preparing translated content to be stored for subsequent use (including subsequent serving to a requester). It should also be noted that requesters of translated content are not necessarily end users, but may alternatively be other executing programs or software components. The devices on which an implementation of the present invention may operate include end-user workstations, mainframes or servers, or any other type of device having computing or processing capabilities capable of performing the operations discussed herein (or their functional equivalents). These devices, and the distributed computing networks in which they may optionally be executing, are well known to those of skill in the art, and a description thereof is not deemed necessary to an understanding of the present invention.","Preferred embodiments of the present invention will now be discussed in more detail with reference to .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIGS. 1A through 1E","FIG. 1A","FIG. 1B"],"b":["100","1","2","120","130","1","120","121","122","2","131","134","140","170","1"]},"In preferred embodiments, the main document  explicitly identifies the languages for which translated content is available. In the example of , a \u201c<translationLanguages>\u201d element  is used for defining this information. As shown therein, an optional feature of the present invention is to define a particular one of the languages (and therefore of the supplemental documents) as being a default. This default may be used when translated content is not found for a particular resource (as will be discussed with reference to the flowcharts). Use of the <translationLanguages> element enables programmatically determining the identification of the appropriate supplemental document. (The term \u201cappropriate\u201d supplemental document refers to the supplemental document for the language into which content is being translated.) In alternative embodiments, the <translationLanguages> element may be omitted, and the linkage between the main document and the appropriate supplemental document may be established in other ways which will be obvious to one of skill in the art (for example, by asking a human to specify a file name in which the supplemental document is stored).","Preferred embodiments use a specially-denoted attribute as a translation trigger or key. A content designer using the globalization model of the present invention specifies this translation key as an attribute name for each element to be translated. Preferably, a single such attribute name is used within a single main document, although in alternative embodiments, more than one translation key might be used. In the example main document , the translation key is \u201ctranslationKey\u201d, as shown at , , and . An implementation of the present invention which processes document  is preferably written to expect this attribute name as the translation key. In alternative embodiments, a sub-element might be specified in the <translationLanguages> element  to dynamically specify the attribute name which is to signify the translation key. For example, such a sub-element might be encoded as\n\n<triggerName>translationKey<\/triggerName>\n","Use of the translation key enables linking the translatable resources of the main document to the translated content provided in the supplemental documents, and thereby enables resolving the translation to provide a resulting document which may be rendered to a user or provided to a requester, or which may simply be stored for some subsequent use. The example documents in  illustrate how this resolution process occurs, as will now be described.","According to preferred embodiments of the globalization model disclosed herein, when the content designer specifies the translation key as an attribute name on the element for a translatable resource, he or she also specifies an attribute value which is associated with that resource. This attribute value is then used to programmatically scan the appropriate supplemental document to find the translated content which is to be rendered for this element. For example, the special translation key \u201ctranslationKey\u201d appears as an attribute name  for the \u201cwidgetLabel\u201d element  of , and this attribute's value is \u201cmyWidgetLabel\u201d .","Continuing with the example, suppose that main document  is to be rendered in English. By consulting the supplemental document which, for this example, is named \u201csample_english\u201d and is shown as element  in , it can be seen that attribute value  appears as a tag name at . This tag  has a value, which in the example is \u201cLabel text\u201d . According to the present invention, the linkage provided in this manner indicates that value  is to be used for the value of the widgetLabel tag  in FIG. A.  shows a document fragment  in which this programmatic resolution has occurred, yielding an English-language version of the panel tag  of FIG. A.","If, on the other hand, document  is to be translated into French, then attribute value  is used to scan the supplemental document which is named \u201csample_french\u201d, shown as element  in FIG. D. The tag at  uses this attribute value  as its tag name, and has a value of \u201cTexte etiquitte\u201d . Thus, the French-language version of the panel tag  of  is as shown in document fragment  of FIG. E.","In the same manner, it can be seen how the translated content for the fieldName element  and the buttonLabel element  of FIG. A\u2014which is expressed as \u201cName\u201d and \u201cHelp\u201d in the English supplemental document  (see  and  of ) and as \u201cNom\u201d and \u201cAssiste\u201d in the French supplement document  (see  and  of FIG. D)=can be located using the specified attribute values at  and , and it will be readily understood how the corresponding <panel> element appears after programmatic resolution has occurred. The translated content is shown at  and  of , and at  and  of FIG. D.","Turning now to , a diagram is provided which depicts an overview of components and their interactions, according to one embodiment of the present invention. This diagram is generally representative of an embodiment wherein the Java programming language is used to implement the present invention, and wherein the documents resulting from resolution of translation references may be created as Java resource bundles. As shown in , a main XML document  is processed by an application , as denoted by encircled numeral . Application  may be any type of software component which consumes structured documents (that is, which uses structured documents as input) and which has been augmented to include the functionality of the present invention; or, an application may invoke features of the present invention which have been implemented as a globalization utility. (Both scenarios are described hereinafter with reference to the application controlling the resolution process, for ease of reference.) To parse this input document , application  instantiates a parser and invokes the services of this instance, which in this embodiment is preferably a SAX parser . This invocation is represented by encircled numeral . \u201cSAX\u201d refers to a commercially-available event-based application programming interface (\u201cAPI\u201d), and is an abbreviation for \u201cSimple API for XML\u201d. (More information on the SAX API may be found at http:\/\/megginson.com\/SAX\/SAX1\/javadoc\/packages.html and http:\/\/www.megginson.com\/SAX\/sax.html.)","The SAX parser  parses the main XML document , as denoted by encircled numeral , and signals events that pass data back to application . Upon receipt thereof, application  registers the received data in a local properties object , using the translation key's attribute value (see element  of , for example). This registration is denoted by encircled numeral . At the conclusion of parsing the main XML document , one or more supplemental documents shown in  as , ,  are passed to the application  (as denoted by encircled numeral ). Application  then instantiates a new SAX parser instance (shown as parser  in ) to parse these supplemental documents. Encircled numeral  represents this instantiation.","According to the globalization model of the present invention, application  then matches data received from the supplemental documents during the parsing process to the previously-stored information in properties object , matching up attribute values from the main document to element names in the supplemental documents as described with reference to . This process is represented generally by encircled numeral . Finally, the data from properties object  is written out (as shown by encircled number ) to language-specific Java resource bundles  for subsequent consumption.","In an optional aspect of the present invention, programmatic techniques may be used in a Java language implementation of the present invention to obtain the locale of the device on which the process depicted in  is operating. This locale information may then be appended to a text string to construct a Java class file name in order to determine which of the supplemental files to use for a particular case. A locale object created for use with Java programs typically specifies a 2-character language code and a 2-character country code. For example, the characters \u201cfr\u201d and \u201cCA\u201d designate the French language and the country of Canada. A French Canadian supplemental document for use with the \u201csample.xml\u201d document  of  might therefore be named \u201csample_fr_CA.xml\u201d. Use of such a supplement document for translation would be appropriate for an end user having the \u201cfr\u201d, \u201cCA\u201d locale. It will be obvious to one of skill in the art how the locale information can therefore be used to identify a particular one of the supplemental files.","The flowcharts in  depict logic which may be used to implement an embodiment of the present invention. In this embodiment, a new document is created as a main document is parsed, where the new document contains content translated into a particular language (using translation content specified in a particular one of the supplemental documents corresponding to the main document). This process begins in Block , which retrieves the main document (such as document  in ) for which a translated version is being created. Block  then obtains an identification of the language of the translation. This identification may be obtained in a number of ways. As one example, a human user may be queried to provide a response, and (if desired) the selections presented to this user may be taken from the main document (by consulting a list which has been provided as shown at  of , for example). As another example, the locale of the device on which the implementation is executing may be programmatically determined, as explained above. The supplemental document corresponding to the selected translation language is then located (Block ). (For example, document  of  or document  of  might be located.)","Block  invokes a parser to operate on the structured documents. Block  then begins an iterative process that scans the markup language tags of the main document. Block  checks to see if this scanning process has reached the end of the main document. If so, then the new document which has been created according to the processing of  may be passed to a consumer such as a rendering engine (Block ), and the processing shown in these figures then ends. (Alternatively, if the document is not being rendered, then it may simply be stored or may be passed as input to a software component which is designed to operate on its content.)","When the test in Block  has a negative result, the parsing of the main document is not yet complete and thus processing continues at Block  which checks to see if the just-parsed markup language element contains the translation key (i.e. as an attribute, as described above with reference to  of FIG. A). If it does not, then processing of this element occurs as in the prior art (Block ), after which control returns to Block  to parse another element of the main document. Otherwise, when the translation key has been located, then processing continues as shown in FIG. B.","In , the attribute value for the located translation key is obtained (Block ), and is used to search the supplemental document (Block ) to locate that value. (Refer to the discussion of resolving references , , above, for example.) Block  tests to see if the attribute value was located as a markup language tag in the supplemental document. If so, then Block  extracts the value of that tag. (This corresponds to extracting the text at  in , for example.) Otherwise, if the attribute value is not found, then in optional processing, a default value may be located and used in the new document. Thus, Block  checks to see if there is a default language, and if so, Block  finds the default value. Suppose, for example, that a translation into French is being performed using documents  and  of , but that tag  was omitted for some reason. To resolve the \u201cfieldNameForPanel\u201d reference , Block  will have a negative result. However, if English has been specified as the default language, as shown at  of , then this negative result triggers a scan of the English language supplemental document  of , where this string value may be found on a markup language tag (see ). Thus, the default content value \u201cName\u201d  will be used in this case. On the other hand, if default processing is not supported, or if the default supplemental document also fails to resolve the reference, then error handling may be performed (Block ). As one example, this error handling may comprise inserting a hard-coded text string such as \u201cunknown\u201d or \u201cunresolved\u201d in place of the expected translated content.","When the translated content has been successfully located (i.e. after the processing of Block  and after a positive result in Block ), Block  inserts that value into the new document being created. Subsequently, control returns to Block  of  to continue parsing the main document. Similarly, the parsing process preferably resumes at Block  after the error handling of Block .","In this manner, a new document containing translated content is programmatically constructed. The documents which are input to this process provide a clean delineation of translated content, according to the globalization model provided by the present invention. This approach is efficient and reliable, and provides scalability for a virtually unlimited number of languages.","Note that if it is desired to use the teachings of the present invention for substituting objects other than translated text, such as was described earlier with reference to different images that may be appropriate for different cultures, then the approach used in  may remain unchanged, and the localized content in the supplemental documents may provide (for example) a file name or Uniform Resource Locator (\u201cURL\u201d) identifying the stored image as the value of the element which is linked to the main document. That is,\n\n<myWidgetLabel>Label text<\/myWidgetLabel>\n\nmight be replaced with\n\n<myWidgetLabel>http:\/\/myWidgetIcon.jpg<\/myWidgetLabel>.\n\nThus, the techniques of the present invention are easily adaptable to globalization of many types of content.\n",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIGS. 4 and 5","FIGS. 3A and 3B","FIG. 4","FIG. 5"]},"The processing of  is similar to that of , except that the parsing process (Block ) may begin immediately after retrieving the main document (Block ). That is, it is not necessary to determine a target translation language nor to locate the supplemental files at this time. During the parsing process, Block , , , and  preferably operate in the same manner as Blocks , , , and  of , respectively. A difference is in the positive result processing for Block , after locating a translation key reference in the main document. As has been stated above, this embodiment creates a table or other repository of such references, and this is reflected in Block . After creating the table entry, Block  may perform other processing of the markup language element using prior art techniques.","Once the parsing process is complete, as indicated by a positive result for the test in Block , control reaches Block  which checks to see if the translated document is to be rendered now. If not, then the processing of  ends. Otherwise, the table entries are resolved (Block ), and the main document and resolved table are passed to a consumer such as a rendering engine (Block ), which consumes\/renders the translated document. The table resolution of Block  is further described in FIG. .","The processing of  is similar to that of , but begins by determining which is the target translation language (Block ) and then locating the corresponding supplemental document (Block ). An additional difference is that this processing iterates for each entry in the table created in , and thus Block  retrieves an attribute value from that table. For example, for document  of , the processing of  will have created a table containing entries for attribute values , , and . Block  iteratively retrieves each of these attribute values. Upon reaching the end of the table, as indicated by Block , control returns to the mainline processing of the invoking program (such as Block  of FIG. ).","Otherwise, Block  searches the supplemental document identified in Block , attempting to find this attribute value specified as a markup language tag. The processing of the located value, or the processing in absence of locating a value, is shown by Blocks , , , , , and , and is analogous to Blocks , , , , , and , respectively, of FIG. .","In an optional aspect of the present invention, the translation key references which have been built into a main XML document may be used to automatically increase the likelihood that translated content is available (and thus provide a better translated document result). That is, with reference to the example, the main document  of  may be scanned to locate all of the embedded translation key references (or the table which represents a result of performing this processing according to  may be used), and the located references can be compared to each of the supplemental documents (or, alternatively, to selected ones thereof). If a particular supplemental document has no markup language element which provides content for a translation key reference, then an exception report may be generated, and\/or a prompt message may be issued to a content translator, and so forth.","As has been demonstrated, the present invention defines techniques for efficiently and reliably translating document content with use of structured documents. The disclosed techniques may be applied for translating textual elements, and may also be adapted for use with non-textual information, as has been described. Using the globalization model disclosed herein, which separates translated content in the supplemental documents from translation-sensitive resources identified in the main document, a content translation expert can operate efficiently to provide the translated content, without being hindered by content which is not pertinent to his or her task, and a content designer can more easily focus on the task at hand using a resource-neutral document format from which translatable resources have been removed.","U.S. Pat. No. 6,151,624, which is titled \u201cNavigating Network Resources Based On Metadata\u201d, describes a client\/server technique for naming and locating network resources in a language-independent way. It involves a registry of well-known metadata tags which describe Web pages, such as a title, description, language designation, or geographical location. The metadata is defined by an administrator of the server that stores the Web pages. Multilingual access to network resources is enabled by defining multiple \u201creal name\u201d values for a resource, each in a different language. (A \u201creal name\u201d is the name of a network resource expressed in conventional syntax of a natural language and is required to be unique across the Internet.) This network registry service approach contrasts to the flexible technique disclosed herein, where each content designer may select arbitrary attribute values for identifying and resolving translatable content using a set of supplemental structured documents.","As will be appreciated by one of skill in the art, embodiments of the present invention may be provided as methods, systems, or computer program products. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment combining software and hardware aspects. Furthermore, the present invention may take the form of a computer program product which is embodied on one or more computer-usable storage media (including, but not limited to, disk storage, CD-ROM, optical storage, and so forth) having computer-usable program code embodied therein.","The present invention has been described with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, embedded processor or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the flowchart and\/or block diagram block or blocks.","While the preferred embodiments of the present invention have been described, additional variations and modifications in those embodiments may occur to those skilled in the art once they learn of the basic inventive concepts. Therefore, it is intended that the appended claims shall be construed to include the preferred embodiments and all such variations and modifications as fall within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 1A-1E"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 4 and 5"}]},"DETDESC":[{},{}]}
