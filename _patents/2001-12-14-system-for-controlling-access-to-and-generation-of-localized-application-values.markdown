---
title: System for controlling access to and generation of localized application values
abstract: A system and method for controlling generation of and access to localized application values to applications. The system includes an administrative interface linked to a running application and to a communications network that is configured for receiving requests for application data from the application. The interface responds by determining obtaining localized application values from a cache or if not cached, from a central database or repository of network localized application values that is also linked to the communications network. Code or mechanisms are provided for creating and populating data structures or objects for storage in the cache. Mechanisms or background threads are also provided for monitoring changes to localized application values in the repository and automatically updating element values in the cache as and when they change.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07007026&OS=07007026&RS=07007026
owner: Sun Microsystems, Inc.
number: 07007026
owner_city: Palo Alto
owner_country: US
publication_date: 20011214
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates, in general, to the generation, storage, and use of localized values and data by a software application, and, more particularly, to a computer system including administrative interfaces linked to applications operating in a computer network with the interfaces controlling generation of and access to localized application values and\/or data stored in a centralized data store and, at least partially, in local memory.","2. Relevant Background","Applications are software programs that are used extensively in computers and computer networks to carry out a wide variety of useful tasks. Word processors, graphics programs, communications packages, spreadsheets, and database managers are well-known applications. To operate effectively, many applications utilize environmental variables or properties and other data or values that are localized to allow the application to have improved usefulness to a particular user. For example, if an application is used internationally, the application must be able to display text in a language useful to the user. An application may use localized properties and values to display information and function based on the geographic location of the user, based on the language preference of the user, or based on other user-specified or location-specific criteria.","Existing applications typically are configured to retrieve localized data from local system memory that is stored in either static files or databases for more dynamic values. A number of operating problems are associated with the present method of managing localized variables. Generally, an application will utilize an interface or program to handle accessing localized values in static files. For example, in Java\u2122 systems, Resource Bundles are utilized by an application to access static property files, but the application is responsible for linking property files to a ResourceBundle. Other programming language environments use similar techniques that require the application to be aware of the location and\/or identification of localization information and the localization options utilized for such values.","Further, inheritance of localized variables from one application to another application is typically not supported or difficult to implement by the programmer of the application. Instead of using inheritance, the localized values files will contain complete sets of needed values and as a result, contain many duplicate values or even conflicting values. Even if inheritance of localized values is provided between applications, presently each of the separate localized values static files is modified making inheritance inefficient and difficult to see its effects.","Existing methods of controlling access to and generation of localized application values often require the application to be shutdown and restarted to be able to make use of updated or new values. The changes to localized values tend to be all or nothing with all values required for an application being updated as a set, such as at the release of a new software package or the release of given database state. It is difficult to update one or selected sets of application values in existing systems. For example, for databases to support more flexible releases, additional attributes for each value need to be provided to reflect the value's state and this complicates select statements used to retrieve values. Further, localized values are typically limited to simple data structures, such as text strings and properties, because these are considered a low common denominator, but when more complex structures are desired, these data structures must be combined.","When a relational database management system (RDBMS) is associated with each application in a network, more dynamic localized data can be utilized but the data tends to be either a one dimensional (such as language only) or a flat, two dimensional (such as geographic specific and language) structure and fails to account for or allow inheritance, which would require complex select statements from the application. Additionally, applications that utilize a RDBMS are slow as a select statement must be issued to obtain each localized value, which results in numerous selects being issued. Alternatively, the RDBMS is used to feed values to static files that the application then accesses more directly. This alternative embodiment can still result in considerable delay.","Hence, there remains a need for an improved method and system for efficiently controlling generation of and access to localized application values, and preferably, such an improved method and system would be readily implemented within a distributed computer network in which numerous applications are operated on geographically diverse computer systems and would enable localized values to be easily updated by users rather than only highly trained information technology personnel and programmers.","The present invention provides a localized value control system that includes an interface linked to an application that is operable to obtain sets of pre-localized values, such as values in the form of Java\u2122 objects, eXtensible Markup language (XML) fragments, eXtensible Stylesheet Language (XSL) stylesheets and other forms. The values are extracted by the interface from one or more central repositories of localized values. Each value repository includes a library of named localized elements indexed by the applications that utilize the elements, which allows the interface to retrieve the correct set of localized values for a particular application. The repository also includes localized values for each localizable element indexed by geographical area, language, or localization criteria to enable the interface to select an appropriate localized value for an element based on a specific combination of localization criteria (such as a particular combination of language and geographical area).","In one embodiment, a hierarchical structure of geographical areas and a list of languages used in each geographical area are used to control the process of selecting the appropriate localized value. According to another aspect of the invention, each interface maintains recently used application values in a local memory (such as a fully normalized cache) to provide rapid access to the application. The local memory is preferably kept current and consistent with the repository by a background process that monitors the repository for changes to relevant values and updates the local memory values. The control system further includes security mechanisms to control user access to viewing and modifying all or portions of the localized values based on a user role assigned to each user.","In this manner, the present invention is operable to address numerous problems with prior methods of accessing localized application values and data. The localized value control system is useful for supplying different types of localized application data ranging from simple text strings and property values to localized pages that combine many simpler localized values, e.g., by using localized XSL stylesheets. The system is operable to supply dynamic and consistent localized values to an application without requiring the application to be stopped or restarted to update or add values. The system supports sharing of localized values among applications and allows non-technical staff to modify localized values with access being controlled by assigned user roles that may vary by geographical area (i.e., a user may have more than one user role within the system).","The system preferably supports the concept of inheritance of values from one application to another application unless overridden to localize the value. For example, a worldwide support telephone number may be inherited and in some applications, overridden locally to provide a telephone number useful in a particular geographic region. In the system, the application simply requests a set of values from the interface which operates to retrieve the appropriate localized application values from the local memory or central repository. Further, the system is operable to allow one or more value to be released without modifying the entire set of application values. Performance is enhanced by defining sets or hierarchies of application values to allow sets of relevant values to be retrieved when a single value is requested by the application, i.e., the system anticipates the application's future needs for data by relating or linking at least a portion of the localized application values.","To provide a full understanding of the present invention, the invention is first described generally as operating in a network environment of a localized application value control system , as shown in . The control system  includes an exemplary user node  in a first geographical area, a user computer system  in a second geographical area, and a central application value repository . Each of these devices is linked by the communications network  via communications links , , and .","The description of the invention then proceeds to more specific examples of how the control system  operates to facilitate providing localized application values to applications such as illustrated applications , , , and . From the general description of the control system  and data flow during generating and accessing localized application values, one skilled in the art will readily understand that the invention applies generally to the distribution of services within any distributed computing network or within a more simple computer system (such as a system of computers within a single office building).","Hence, the present invention applies specifically to a client-server model and generally to all communications systems configured for providing localized application values to one or more applications. In the following description, Java\u2122 programming language examples may be utilized to facilitate understanding of the concepts of the invention but it should be understood that one skilled in the art would readily be able to apply the features of the invention to other programming environments which are believed covered by the breadth of this disclosure.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1","FIG. 1"],"b":["10","14","60","10"]},"As illustrated, the localized application value control system  includes a user node  (although numerous user nodes  or clients will typically be provided) and a user computer system  that are in communication with an application value repository , which is used to store shared localized values  and other information, via the communications network  (e.g., the Internet, a LAN, a WAN, and the like) and communication links , , . In the following discussion, computer and network devices, such as user node , user computer system , application value repository , and data server  are described in relation to their function rather than as being limited to particular electronic devices and computer architectures. To practice the invention, the computer devices and network devices may be any devices useful for providing the described functions, including well-known data processing and communication devices and systems such as personal digital assistants, personal, laptop, and notebook computers with processing, memory, and input\/output components, and server devices configured to maintain and then transmit digital data over a communications network. The communication links , ,  may be any suitable data communication link, wired or wireless, for transferring digital data between two electronic devices. Data is typically communicated in digital format following standard communication and transfer protocols, such as TCP\/IP, HTTP, HTTPS and the like, but this is not intended as a limitation of the invention.","The user node  is positioned within a first geographical area and the user computer system  is positioned within a second, different geographical area to illustrate how the system  facilitates sharing of application values within a geographically diverse network while still facilitating inheritancy of system values and localization by overriding particular system values. Note, however, that the set of geographical areas that a user node ,  or administrative interface ,  serves is not limited by a physical location (with a typical administrative interface ,  serving multiple geographical areas). The set of geographical areas (and also, languages) that are cached in local memory  and\/or repository  is determined by selections made by users of the applications , , ,  which can lead to a particular node or system ,  serving a large number of geographical areas (and\/or languages).","The user computer system  is illustrated to include three applications , , and  that are all linked to a single administrative interface  which functions to receive requests for localized values from the applications , , and . The administrative interface  acts to generate and retrieve the appropriate localized values from the application value repository  and its localized values  and\/or from the data server  which stores cached values and user roles  via communications link . The administrative interface  (whose operation is discussed more fully with relation to interface ) may be an application programming interface (API) or other type of interface that is linked to the application , ,  code and functions to retrieve values from repository , cache retrieved values, provide the values to the applications, and periodically update and remove cached values.","Operation of the control system  will now be more fully explained with reference to the user node  which is simplified for ease of explanation to include a single administrative interface  that is linked to the code of a single application  (but, of course, more applications  may be serviced by interface  or by additional interfaces) and a single local memory . The local memory may be cache memory within the node  or a separate memory device accessible by the administrative interface . The local memory  is illustrated to store element values  (such as element value objects) and user roles  (such as application user objects) that are utilized relatively often by the application .","The local memory  is typically populated with values and user roles stored in localized values  in the application value repository . The repository  may be a database server or other data storage device that is linked directly to the node  or system  or linked via a communications network  as illustrated in . The geographic location of the repository  is not limiting to the invention and more than one repository  may be linked to the network  and accessed by the administrative interfaces , . The localized values  may be stored in the form of a database or other useful data storage structure to allow efficient indexing and retrieval of data. The source of the data used to populate the local memory  is stored for later use by the interface .","Generally, many values are cached in memory  with a smaller portion of the values such as file types being stored to disk. Significantly, element values are shared among applications served by the administrative interface  (i.e., administrative interface  can provide the same values to more than one application , , ) to save space in local memory . In this manner, an application is provided with a reference to a value rather than a copy of the value if the value is used in more than one application or language or geographical area.","The administrative interface  functions to accept requests for data from the application  and retrieve the required data or values from the local memory  and\/or the repository . In a preferred embodiment, the interface  is a set of mechanisms (such as thin classes in a Java programming environment) that provide access to values ,  held within the local memory  or cache. The mechanisms of the interface  hold indirect references that allow them to perform a lookup against the cached values when requested by the application  rather than holding references directly to the cached objects , . As a result of this reference scheme, the application  is automatically and on an ongoing basis provided with updated values ,  from the local memory . This is important because the control system  preferably operates to monitor changes to the localized values  in the repository  and responds by updating the cached values ,  in local memory .","As illustrated, the administrative interface  includes a set of mechanisms that operate in combination to provide many of the unique features of the control system . The mechanisms include, but are not limited to, an access service , a user role service , a properties service , a modification service , a menu service , and a derived objects service .","The access service  functions to provide access to localized application values  and\/or localized values . To facilitate retrieval of a localized value for an element, the application  supplies an application name, a geographical area code or identifier, a preferred language (e.g., a language code), a staged flag, and an element name. The staged flag is used to indicate whether the value returned by the interface  can be an unreleased value (i.e., a value that has been selectively modified prior to a full release of a software version or database state). In this manner, the access service  is able to provide unreleased values to select users prior to the full release to the general population of users.","Significantly, the user role service  functions to provide access by the application  to user role information. The administrative interface  allows a number of profiles to be assigned to users which are useful in granting each user with one or more roles within different geographical regions or areas of the world. For example, a user may be able to view only localized information in one area while being assigned a role that allows viewing and modification of localized values within a second area. To obtain the user role localized information, the user role service  receives a user name or identifier and a geographical area identifier or code. In some embodiments, the user role service  further functions to determine whether the user is able to view staged localized application data or only released localized application data. This may be accomplished by the service  checking to determine if the user has a role assigned to a particular application for seeing staged information.","As further explanation of the general usage of the user role service , the role assigned to an application  (shown in  in local memory ) for seeing staged data is stored within the application value repository . The general use of the user role service  does not include providing an application  name to the service. Instead, applications  simply invent roles for different restricted actions that a user must have in order to perform some function. The user role service  checks to see if a user has the required role in a particular geographical area. The modification service  specifies profiles for users that in turn grant roles within different geographical areas.","The properties service  is similar to the access service  except it functions to return localized property values, e.g., system and environment variables and parameters. As will be appreciated by those skilled in the art, this feature of the control system  of providing localized properties is important and powerful and more importantly, the localized properties are stored in the centralized repository  but are accessible by the interface  as if they were held and maintained in local files. With the interface  and the properties service , the control system  can be operated to efficiently perform complex reconfigurations of multiple remote systems (such as user node  and user system ) simply by modifying the localized properties  stored in the repository  and then operating the interface ,  to update cached values which reconfigures the application , , ,  as these updated properties are requested. For example, if the user node  obtains its connection information from a localized property set or object provided by the interface , the localized property set or object only needs to be modified once at the repository  and the interface  operates to provide this modified information to the application  as it is requested.","To ensure that current data is provided to the application , the administrative interface  includes the modification service . The modification service  is operable to monitor the repository  for changes to the localized values  and to flag that a change has been made. The modification service  may be configured to periodically refresh the local memory  when a value in the local memory  is changed in the localized values  of the repository . The modification service  may alternatively be configured to flag to the application  or the interface  when a request is made by the application  to a value that has been altered at the repository  but not yet at the local memory . In a further arrangement, the modification service  and\/or the interface  may be configured to block a value request from the application  until the local memory  is updated to reflect changes at the repository .","The menu service  is provided in the interface  to provide a dynamic menu structure for the application . In a preferred embodiment, the provided menu will be generated based on the user role to display only options, functions, and data that are accessible by that user. The menu service  is operable to use the localized values  to localize displayed text, such as titles, and to localize the actions to be performed within the menu.","The derived objects service  is included to construct and store data structures or objects made out of localized values. These constructed structures or objects are replaced when localized values are modified. The derived objects service  is configured to maintain the generic characteristics of the service  and to provide flexibility for future uses of the particular service . With this goal in mind, the derived objects service  is not aware of specific processes and information utilized in the construction process of the data structures. In order to make use of the derived objects service , a user of the service  provides the specifics of the object that the service  is to derive or construct.","Typically, the object includes certain features so that the constructed object can be properly managed by the service . For example, the object may implement a standard method that returns the name of the element(s) it is based on so the service  knows to pass in the localized element of this value upon construction and to keep track (i.e., monitor the constructed object) of this passed value so that the derived or constructed object can be invalidated if the value changes. Such value tracking enables the derived objects service  to refresh or update constructed objects as soon as the localized values the objects are based on are changed in the system . The constructed object based on old values is discarded and a new object is derived or constructed. Preferably, this refreshing process is performed by the service  in a fashion that is transparent to the operator of the user node .","In , the local memory  is illustrated to indicate that element values and user roles are cached or stored to support the administrative interface  in providing localized values to the application . Typically, however, the local memory  or cache would contain a number of caches, e.g., cache classes, each holding data structures or objects in order to supply element values and user roles to applications. An exemplary, but not limiting, illustration of this preferred embodiment of the local memory  is provided in .","As shown, the application combination cache  holds application combinations  that represent each combination of application name, geographical area identifier or code, language identifier or code, and staged flag requested by the application  via the access service  and the properties service . The application combinations  are preferably indexed on one or more of these four values. Each application combination  contains an indexed list of element values  that are appropriate for the given combination of application name, language code, geographical area code, and staged flag. The indexed list preferably includes a single element value  for each element  in the named application. As will become clear, the included element values  are specific ones for the specified geographical area, language, and staged indication.","If a request is made for the default language or an unsupported language in any geographical area, an additional application combination  is created with a null (or blank) language code, which allows the default and list of supported languages within each country to be changed in the administrative interface  without problems arising in the local memory . A null language application combination  simplifies the task of adding new application combinations  after the default language has been changed but before the local memory  has been updated to reflect the change.","The element value cache  holds element values  that might be useful to each application combination  in the application combination cache . Generally, this includes element values  for higher level (or inclusive) geographical areas even if there is a more specific value available. The element value cache  includes element values  for the required language or the null language (a language independent value) for each node in the geographical hierarchy required by each application combination . The element values  are preferably indexed on a unique element value ID that allows the element values  to be updated from the repository  and on a combination of element ID, geographical area code, language code, and staged flag that allows checks to be made for the existence of element values  to create a list of element values  for a given application combination .","Each element value  holds a single localized value for a single node in the geographical, language, and staged hierarchy tree structure (such as the structure  shown in ). Most element values  are shared when they are linked into an application combination , i.e., the application combination  simply takes a reference to the element value . If the element value  represents a file value, a copy is preferably made of both the element value  and the file. A temporary directory is used for file values held in the element value cache . Each of the application combinations  has a temporary directory into which a copy of the file value is stored. As will become clear, all the files for a single application combination  preferably exist in the same directory so they may refer to each other by relative path name.","Element values  are also created automatically for empty files, such as XML files, where there is no value for each element in the localized files  of the application value repository . An element value  may hold values in either a \u201cfinal\u201d state that may be returned directly via the interface  or in an initial \u201craw\u201d state that is utilized to create or construct the final state of the value. The state of the held value is based on the element type. For example, if the element is an XSL stylesheet, the final state can be constructed by performing an XSL transformation to include localized values. Prior to the first return, the value is constructed to allow a late loading to take place for values that demand more resources to create.","According to an important feature of the invention, the application cache  holds applications  that represent individual applications  (i.e., a conceptual application of elements rather than an actual application such as a help module). The cache  views each conceptual application  as a set of elements . Each application  also has a role associated with it to indicate if the user may or may not view staged values in that application . The application cache  identifies all elements  within a given application hierarchy that belong to a particular application . Each application  represents a single application, such as application  (or a subset of an application , which in turn may be defined to include sub applications  in a heirarchy) and holds a list of element IDs and the role required to see staged data.","The applications  also maintain a list of application combinations  and user roles  that refer to each application , which allows the applications  to know when it can remove itself from the application cache . The applications  further provide the element value cache  with the list of application combinations  so the element value cache  may construct repository retrieval requests (such as SQL statements) to identify elements  and their values  required in the element value cache . In addition to the element IDs, the application combinations  preferably provide geographical area codes and language codes to limit the number of results from the repository retrieval requests.","The element cache  is a temporary cache that holds a list of elements . The cache  is constructed by the element value cache  in order to add (if required) new element values  when a new application combination  is added and also to update element values  for existing application combinations . The element cache  is built each time by looking at the existing element values . While the element cache  could be resident in local memory , it is typically built each time to avoid having to determine when elements  should be removed. The element cache  is used by the element value cache  to identify element values  that are no longer needed in the local memory  as elements have been removed from an application for which element values  are maintained in the repository . The element cache  is also used to create empty (or null) element values  when there is no value  in the repository  for a given application element. Each element  includes an identifier (i.e., an element ID), an element name, and element type information. The elements  are referenced by element values  to allow proper interpretation of their values.","The area cache  holds geographical areas  objects which each represent a single geographical area code. The geographical areas  are linked to their \u201cparent area\u201d or area that includes them (e.g., worldwide is a parent area to the United States which is a parent area to the state of Texas and so on) to form a hierarchy in the cache . The geographical areas  may each hold a list of language codes supported and a default language code to use if none is supplied in the request or if an unsupported language is requested. Only those geographical areas  used by application combinations  currently loaded in the local memory  are populated with language codes.","The complete list of geographical areas in the application value repository  is generally small so all nodes in the geographic hierarchy can be read into the area cache . The area cache  is accessed by the geographical area code. The element value cache  can be configured to rebuild itself if the geographic hierarchy is modified to avoid problems with missing or extraneous element values . The element value cache  then can force all application combinations  to be replaced to pick up any changes in inheritance of element values  from one geographical area to another.","The inheritance cache  is a temporary cache used to hold hierarchy nodes  and is used to return a reference to a hierarchy node  (and optionally to create one) given a geographical area code, a language code, and a staged flag. The hierarchy nodes  are temporary objects that each represents a node in the inheritance hierarchy for values (see ). Each node  is defined by the combination of a geographical area code, a language code, and a staged flag. Each element value  and application combination  are aware of their place in this hierarchy and as a consequence, are able to create a hierarchy node  for themselves.","The nodes  are used by the element value cache  to determine which application combinations  are impacted by changes to element values . The list of changed (i.e., modified, new, or deleted) element values  is given to each application  to generate a list of hierarchy nodes  that the application  is concerned with. A hierarchy node  is added to the list if the application  contains an element for one of the modified element values . Each application combination  may then be asked if it uses any of the hierarchy nodes  for modified values. The application combination  does this simply by starting with its own combination of geographical area code, language code, and staged flag and checks to see if this node  is in the list of nodes returned by the application . If the node  is not in the list, the application combination  moves on to the next parent node  in the hierarchy until the top node (e.g., the worldwide, language independent, and released node) has been checked.","If the application combination  allows staged values, both staged and released nodes  in the hierarchy are checked and if not, only the released nodes  are checked. When an application combination  is building its list of element values , it performs a similar process for each element  by looking up the element value cache  to see if there is an element value . The application combination  starts with itself and works upward in the hierarchy until it reaches the top node . If an element value  is found it is added to its list and if not, a blank element value  of the correct type is added.","The application user cache  holds user roles  which include a list of roles within a given geographical area for a specific user. The user roles  represent each combination of application name, geographical area code, and user name and these three values are used for indexing the roles . The user roles  are requested via the user role service  of the interface . Generally, requests via the user role service  do not include an application  name, so the list of user roles  within a single geographical area is typically shared between different applications  regardless of the application  name.","Security of the localized values  and conceptual applications in the data server  and local memory  is provided by the control system  because in many computing environments numerous developers may have access to the repository . Typically, the security invoked by the control system  is based on the role assigned to the developer or user (which as discussed previously may vary based on the geographical area or based on other factors). In one embodiment, every application  (and sub-application) has an attribute that is used to identify a role the user must have in order to modify the application . The administrative interface  is then configured to verify if a user (or requester) has an appropriate role prior to allowing the user to modify any attributes or localized values of the application  or even link the application  to sub-applications (if the user has the correct role, the user can link to sub-applications without having the role of the sub-application).","Further security is provided by classifying each localizable value  (and\/or element  in cache ) by an element type, such as binary objects, environment properties, HTML files and fragments, XML files and fragments, text files and fragments, and the like. Every element type then has an attribute used to specify another role that users must have in order to modify localized values  (as well as  and ) for elements of that type. Again, the administrative interface  is adapted to determine the role of the requesting user matches the required goal prior to allowing the user to modify the localized value of an element. In other words, the user must have all the necessary roles for the application linked to the elements and for the individual elements themselves. Further, localized values often are specific to a geographic area which leads to the security check that the user have the correct roles for that particular geographical area (i.e., a user may have roles that allow them to modify an application and element values in one geographic area but only modify some or none of the element values in another geographic area).",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 3","b":["120","10","120","122","124","126","128","130","122","124","126","130","130","132","120","134","136","130","142","144","120"]},"When an application combination  constructs its indexed list of element values , it performs the following acts for each element  in the application . Starting with the application combination's  hierarchy node  value (such as France, French, and Staged) it progresses upward in the hierarchy  to each node until an element value  is found by performing a lookup against the element value cache . If an element value  is not found, a blank value of the requested type is used. The staged nodes  are only checked if the application combination  is flagged as staged but released nodes  are always checked.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 4","b":["150","20","82","98","152","16","20","156","162","34","34","82","116","168","20","16"]},"If the value set does not exist, the method  continues at  by creating an empty data structure. If the request of the cache  is for either an application combination  or a user role  that does not exist, one is created and added to the cache . In one embodiment, an empty object is created to minimize the time which requests for any object are blocked. At , the administrative interface  attempts to retrieve needed data, such as localized values, from the application value repository  in order to populate the empty data structure. If there are multiple requests for the same unpopulated object, one request is used to populate the object and the other requests are blocked until the object is populated or populating fails. Once populated, the object or data structure is returned at  and loading process ends at .","To more fully understand the population of application combinations  as explained above,  illustrates a detailed applications combinations populating process . At , a check is made to determine if the application combination  is populated and if not populated, a call is made to the element value cache  to begin populating the applications combination  for the requesting application . The populating process  continues at  with incrementing an add request counter to indicate that a new add request has been made. At , the method  continues with obtaining the geographical hierarchy from repository , which allows changes to element values to be provided to the application . The geographical area code for the new application combination  is added at  to an empty list of geographical areas that are to be checked in any selects or data retrievals issued against the localized values  of the repository .","At , the supported and default language information in the geographical areas  is updated for the list of areas to be checked in the geographical hierarchy. At , it is determined whether the request is for default or unsupported language. If yes, the indexed list of element values  of the application combination  with the same application name and geographical area code but a null language code is used at  to populate the new application combination . If required, a nested lookup is performed for the null language application combination  and its list reused. Then, the populating method  ends at .","If not a request for a default or unsupported language, the method  continues at  with the creation of a new element cache . The creation step  may include looking at the existing element values  in the element value cache . A single element array is also created that contains the requested application name to provide consistency with the processes used to update the cache . At  the process  continues with obtaining a list of element IDs from the localized values  of the repository  for each application in the single element array created in step . If there are any new elements in the array, their types are obtained from the localized values  of the repository  and the elements are added to the element cache .","At , all the required element values that have been changed or are new are retrieved from the localized values  of the repository . At , the local memory  is updated by updating the element value cache  with the retrieve new element values . The list of elements  in the application  are also updated so that when the memory  is automatically updated in future operations the current list of elements  in the application  is used. Next at , the application combination  is populated with the element values  from the element value cache .",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 6","b":["20","14","220","34","50","220","82","220","220","222","10","54","220","102","86","82","220","50"]},"The method  continues at  with storing the counter value that is incremented with a new add request. The counter value is used for the method  to determine if a new request has started since the method  has begun to update the existing application combinations  in the application combination cache . At least periodically and preferably frequently during the following actions, the method  acts to enter synchronized sections to check the counter. If it finds a request has taken place, the method  preferably stops the update and begins substantially immediately at . As new requests take place in a synchronized section, the method  the new request most likely will have finished by the time the method  again checks the counter.","At , the geographical area information and language information is updated. This involves obtaining the complete geographical hierarchy from the repository  so that changes can be included in updates. If there have been any changes, all application combinations  are marked as needing to be replaced to ensure that inheritance of values may have also been modified. The geographical area code of each existing application combination  is added to the list of areas that are to be checked in any selects or data requests against the localized values  of the repository . The supported and default language information in the geographical areas  of the cache  are updated for the areas in the updated list.","At , a new element cache  or data structure is created by looking at the existing element values  in the element value cache . An array of all existing application names is created from the application cache . The index into the array is used to identify element IDs for each application in results returned from the localized values  of the repository . At , an array of lists of element IDs from the localized values  is obtained for each application in the array of application names just created.","At , if there are any new elements, their types are obtained from the repository  and the new elements are added as element  in the element cache . If there are any additional elements  in the element cache  that are no longer in an application in the repository , the method  includes removing any element values  for these extra elements  from the element value cache . All required element values that have changed or are new are retrieved from the localized values  of the repository . A transaction ID on each element value in the repository  can be used to identify these changed or new values. The element value cache  is then updated with these retrieved new or changed values. For each application , a list of hierarchy nodes  is created that reflect changed element values  used by each application . This enables the application combinations  to determine if the element values  may need to be replaced. If the geographical hierarchy is known or determined to have been changed, this list is not necessary as all application combinations  preferably are replaced.","At , if the application combinations  have been marked as needing replacing because the geographical hierarchy has changed since it was last updated or the application no longer contains the same elements or an element value  in the hierarchy used by the application combination  has changed, a replacement application combination  is created. At , for each existing application combination , application combinations  with null language codes are replaced, and it may be necessary to create a new null language application combinations  if an existing one is for a language that has just been marked as unsupported. The existing application combination  is then replaced. At , memory used by the replaced application combination  is recovered as much as practical and the process ends at .","The system  further includes a mechanism (not shown) for removing localized values from the cache  when they have not been accessed for some selectable period of time (such as a time out period of one hour). According to this aspect of the invention, whenever an application combination  or user role  is accessed, a last accessed time parameter is updated to reflect such accessing. In the case of application combinations  that share the same indexed list of element values  as an application combination with a null language code, the last accessed time parameter of the application combination  with the null language code is also changed. The last accessed time parameter is periodically compared with the selected time period for deletion and as appropriate, the values are removed from the cache , thereby freeing up memory for other uses.","According to yet another feature of the invention, when an application combination  is created for a request to access a combination of application name, geographical area code, language code, and staged flag, an XML file is also created. The XML file contains XML elements for all localized values that are not file types. The XML file is configured to indicate which application, geographical area, language, and staged flag it contains and include the textual value of each element value . The XML file is generally used by XSL stylesheets stored in the repository  to incorporate localized values from the XML file in an output page, such as an HTML help page. One version of the XML stylesheet may be utilized in the system  or the XSL stylesheet themselves may be localized.","In addition to storing localized stylesheets in the repository , some embodiments of the control system  store stylesheets that automatically transform with the XML file to create another stylesheet that contains localized values from the XML file and incorporates additional application data that is supplied by the application as an XML file.","To stress important features of the control system  and services available using the invention, some of the key concepts are now discussed more fully that explain concepts used to maintain the localized data in the system . The present invention provides a localized value control system that allows application developers to define their system in terms of a network of \u201capplications.\u201d For example, a system may contain an application A (or page A), an application B, and an application C. To use the control system, the developer sets up four applications with applications A, B, and C being child applications of the system \u201capplication.\u201d If there is a common piece of functionality used on a number of these applications or pages, this common feature is created as another application, e.g., application D, and linked to the relevant applications or pages (such as applications A and B) as a child application. This linking allows developers to configure parts of their system as reusable components. The control system includes features that prevent circular links or relationships from being assigned (such as an application being both a child and a parent of another application).","Each of the applications within the application network (and control system) is linked to each of the localizable items it uses. For example, an application representing a web page is linked to each of the localizable items shown on the web page. The collection of localizable items in the control system is preferably a flat store (or other useful data storage arrangement) of all the items which could be used by client applications in the control system and is preferably indexed by name. This name is used by client computer systems to request a value for a particular item from the collection or cache of items (which is typically created by a service API such as the administrative interface ). To keep the list of localizable items manageably short for application developers, the use of an item may be limited to a single application and its child applications. This practice may be altered by providing a separate collection of shared or common items that are needed or useful to a number of applications within a particular network or computer system.","The service API uses the application network or linking to identify the localizable items that need caching for a particular client computer system (e.g., for a particular system \u201capplication\u201d). Identification of items to cache is achieved by loading values for all the localizable items that are linked to the application(s) specified by the client computer system or to child applications of the specified application. In this example, there is no inheritance of values with the application network being used to identify the list of localizable items for which values are required.","Users of the control system are able to use this application network to effectively and efficiently find the localizable items for which they want to maintain localized values. For example, if a user is a translator and is told to modify the Japanese value of a particular text item used on page or application D of the system application, the user can find the relevant item by displaying a list of the text items used on application D (a child of the system application). The localized value, i.e., the Japanese value, can then be modified by the translator.","For any one localizable item, there may be any number of values with each value being specific to a particular geographical area and\/or language. The service API or administrative interface utilizes a unique algorithm or methodology to determine the value to use for a localizable item given a user in a particular geographical area with a particular preferred language. The algorithm begins with determining if the user's preferred language is supported in the user's country. If supported, the interface language is set to the user's preferred language. If not supported, the interface language is set to the default language for the user's country. The control system maintains in memory a list of the languages supported in each geographical area.","The algorithm continues with setting the current geographical area to the geographical area that includes the user's country. If a value for the interface language exists for the current geographical area, the interface returns this value and exits the algorithm. If a language-independent value exists for the current geographical area, the interface returns this value to the user and exits the algorithm. If the current geographical area has a parent geographical area, then the interface sets the current geographical area to its parent's value and again checks for a value for the interface language. Otherwise, an empty value is returned to the user. In this manner, a value for a \u201cparent\u201d geographical area (e.g., worldwide) is inherited by its \u201cchild\u201d geographical area (e.g., Europe, Asia, Americas, and the like) unless there is a more specific value defined at the \u201cchild\u201d level.","As a more specific example of such inheritancy, a localizable item representing a piece of textual information on one or a number of web pages may have a value for the following areas and languages: (1) worldwide default (i.e., language-independent) value (region=world, language=none); (2) worldwide French value (region=world, language=French); (3) English value specific to Europe (region=Europe, language=English); (4) English value specific to United Kingdom (region=United Kingdom, language=English); and (5) French value specific to France (region=France, language=French). The result of such a configuration is that for an English user outside of Europe the interface will return value (1). For a French user outside of France, the interface returns value (2). For an English user in Europe but not in the United Kingdom, the interface returns value (3). For an English user in the United Kingdom, the interface returns the value (4) and finally, the interface returns the value (5) when the user is French and in France.","Although the invention has been described and illustrated with a certain degree of particularity, it is understood that the present disclosure has been made only by way of example, and that numerous changes in the combination and arrangement of parts can be resorted to by those skilled in the art without departing from the spirit and scope of the invention, as hereinafter claimed.","For example, it will be clear to those skilled in the art that the administrative interface and cache monitoring and updating of localized values may be performed by separate mechanisms operating on a user node as shown in  or as a single mechanism operating on the node  or a separate computing device linked to one or more applications and communicatively linked to a repository storing localized application values. Further, one centralized repository may be used or a number of repositories may be provided, such as one for each geographic region (e.g., one for each country or each continent). The repositories may also be positioned within a user computer system or at a user node."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 6","FIG. 1"]}]},"DETDESC":[{},{}]}
