---
title: Load balancing SCTP associations using VTAG mediation
abstract: Presented is a system and methods for routing Stream Control Transmission Protocol (SCTP) between a client and a back-end server by a front-end server operating transparently between the client and the back-end server. The front-end server uses a distribution key created by the front-end server to route the SCTP packets to the proper destination. The distribution key is comprised of a client SCTP port number, a back-end server SCTP port number and a back-end server Initiate-Tag. The front-end server arbitrates clashes between distribution keys of different back-end servers by replacing the back-end server generated SCTP Initiate-Tag with a front-end server generated SCTP Initiate-Tag.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08737210&OS=08737210&RS=08737210
owner: Telefonaktiebolaget L M Ericsson (publ)
number: 08737210
owner_city: Stockholm
owner_country: SE
publication_date: 20110309
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates generally to load balancing a series of servers and more specifically to load balancing a series of servers based on a verification tag associated with a Stream Control Transport Protocol (SCTP).","As the popularity of the internet and the functionality of websites continue to grow, many websites require multiple servers to handle the load of communications traffic directed toward their pages. In another use of the internet, Voice over Internet Protocol service has grown to a volume where many servers are required to handle the demand for a given service provider. As the requirement for multi-server systems evolves, a need arises for the ability to balance the load generated for the service across the number of deployed servers providing the service.","Further, the desire to handle the signaling of telecommunications over Internet Protocol (IP) and the growth in complexity of websites with regard to providing a rich multimedia experience combined with reliable and responsive communications has led to the development of communication protocols such as Stream Control Transmission Protocol (SCTP). SCTP provides a connection-oriented protocol, similar to Transmission Control Protocol (TCP), on top of the connectionless IP and includes the additional features of multi-homing and multi-streaming that are not available with TCP. These additional features allow a more efficient communication between a multitude of clients and servers.","A load-balancing system for multiple servers is desired that provides the features of SCTP but with one or more of: 1) no modifications to the SCTP protocol; 2) minimize the amount of SCTP chunk inspection; 3) minimize association state storing; 4) minimize SCTP checksum recalculation; 5) no modifications to the IP header; 6) support the SCTP multi-homing feature; 7) transparent to users of the socket Application Programming Interface (API); and 8) no modifications to the server IP communications stack. A number of attempts, based on a Network Address Translation (NAT) scheme, to provide a solution have been attempted but these solutions typically do not meet some or all of the characteristics specified above.","Consequently, market pressure is building for a load-balancing capable system which would meet the characteristics specified above and would also allow, among other things, the ability to scale the system capacity as required without interference with the currently operating servers or the applications and associations running on the operating servers.","Systems and methods address the market needs described above by providing an intermediate front-end server to route SCTP communications between clients requesting a service and back-end servers providing the service. The front-end server and a series of back-end servers share a Virtual Internet Protocol (VIP) address and SCTP port numbers allowing the clients to access the service without knowledge of the specific back-end server providing the service. In fact, according to an embodiment the back-end servers operate independently and are not aware that other back-end servers exist or that a front-end server is acting as an intermediary. In a similar fashion, the client is unaware of the presence of the front-end server and believes the SCTP communication interaction is directly with the back-end server.","In one exemplary embodiment, a method is illustrated for providing SCTP communication traffic distribution based on SCTP verification tags. In a first exemplary embodiment step, a request is received at a front-end server to initiate an SCTP association between a client and a back-end server. In the next exemplary embodiment step, the front-end server generates a distribution key, if clashing Verification-Tags are detected, for mediating SCTP communication packets between the client and the back-end server. In the next exemplary embodiment step, the front-end server transparently routes SCTP packets between the client and the back-end server.","In another exemplary embodiment, a system for providing a transparent intermediary SCTP communication routing front-end server is presented. The exemplary system embodiment includes the following components. The first exemplary system embodiment component is an initialization component for establishing an SCTP association between a client and a back-end server and creating a distribution key for the SCTP association based on SCTP information provided by the client and the back-end server. The next exemplary system embodiment component is an engine component for routing the SCTP communication traffic between the client and the back-end server based on the SCTP distribution key. Continuing, the next exemplary system embodiment component is a storage component for storing data associated with routing the SCTP communications between the client and the back-end server.","Further, in another exemplary embodiment, if a clash develops between the distribution key created for one SCTP association and the distribution key created for another SCTP association managed by the front-end server, then the front-end server generates a new distribution key by replacing a portion of the information provided by the back-end server with information provided by the front-end server. Continuing with the exemplary embodiment, the front-end server then manages this matched pair of distribution keys for the clashing distribution key association in verification tag translation table.","The following detailed description of the exemplary embodiments refers to the accompanying drawings. The same reference numbers in different drawings identify the same or similar elements. Also, the following detailed description does not limit the invention. Instead, the scope of the invention is defined by the appended claims.","Looking first to , a diagram of an exemplary embodiment of a load-balancing SCTP association system  for providing communication distribution based on verification tag mediation is illustrated. The exemplary embodiment of the load-balancing SCTP association system  includes but is not limited to an exemplary client , an exemplary network , an exemplary front-end node  and three exemplary back-end servers . It should be noted in this exemplary embodiment that the back-end servers  can be any number of back-end servers  operating independently.","In one aspect of the exemplary embodiment, the client  is any device capable of requesting a service from a front-end server  communicatively connected to the client  across a network . In one example of the exemplary embodiment the client  includes but is not limited to a personal computer running a web browser and accessing a web page located at a website on the internet. In another aspect of the exemplary embodiment, the client  is configured to communicate to the front-end server  with the Stream Control Transport Protocol (SCTP) for connection-oriented support. Further in the exemplary embodiment, the client  is a telephone connected to a Voice over Internet Protocol (VoIP) device to communicate across a network  such as the internet to a front-end server for voice communications.","In another aspect of the exemplary embodiment, the network  provides a communications link between the client  and the front-end server . In one configuration of the exemplary embodiment, the network  can be the internet. Continuing with the exemplary embodiment, a front-end node  provides the capability to transparently route communications between a client  and one of a series of back-end servers  by using the SCTP verification tag as a distribution key. In a further aspect of the exemplary embodiment, the series of back-end servers  provide the application services desired by the client . It should be noted that although a single client  is illustrated, a plurality of clients  can be connected to the series of back-end servers . In a further aspect of the exemplary embodiment, the back-end servers  are unaware of each other and operate independently with their connected clients . It should also be noted that the back-end servers  and the client(s)  are unaware of the front-end server , the front-end server is transparent to the connection between the client(s)  and the back-end servers  and routes communications between the client(s)  and the back-end servers  based on the SCTP verification tags created by the back-end server  for the SCTP association.","Looking now to , another exemplary embodiment  is depicted as a portion of exemplary embodiment . Exemplary embodiment  depicts a front-end server  including an initialization component , an engine component  and a storage component . In one aspect of the exemplary embodiment  the initialization component  can provide the capability to facilitate the creation of a non-clashing SCTP connection from either a client  or a back-end server .","In another aspect of the exemplary embodiment , the initialization component  can generate a distribution key based on a combination of the client  provided SCTP port number, the back-end server  provided SCTP port number and the back-end server  provided SCTP Initiate-Tag. Continuing with the exemplary embodiment, the front-end server  uses the distribution key to route communications between a client  and a back-end server  and guaranty that all communications received at the front-end server  are delivered to the appropriate end-point.","In another aspect of the exemplary embodiment , the initialization component  creates and maintains a verification tag translation table to prevent any clash between distribution keys. In this exemplary embodiment, a clash would develop if two client \/back-end server  pairs provided port numbers and an Initiate-Tag that combined to form identical distribution tags. Continuing with the exemplary embodiment, as the front-end server  is initiating an SCTP association between a client  and a back-end server  the front-end server creates the distribution key based on the client \/back-end server  port numbers and the Initiate-Tag provided by the back-end server . Next in the exemplary embodiment, the front-end server  looks in the verification tag translation table for an identical distribution key and if none is found then the SCTP association as initialized can continue with the front-end server  correctly routing communications between the client  and the back-end server  based on the distribution key.","Further in the exemplary embodiment, if the front-end server  finds a match of the distribution key in the verification tag translation table then the front-end server  generates a new Initiate-Tag value and creates a new non-conflicting distribution key. Next in the exemplary embodiment, the front-end server  creates a new entry in the verification tag translation table to hold the distribution key pair and the association initialization continues with the front-end server  correctly routing communications between the client  and the back-end server  based on the distribution key pair maintained in the verification tag translation table by the front-end server .","In another aspect of the exemplary embodiment, the engine component  provides the ability to distribute communications between a client  and a back-end server  after completion of the SCTP association initialization. In one aspect of the exemplary environment, the front-end server  receives a SCTP communication from a client  directed to one of the back-end servers  sharing a virtual internet protocol (VIP) address with the front-end server . Continuing with the exemplary embodiment, the engine component  of the front-end server  attempts to find the distribution key of the SCTP communication in the verification tag translation table and if the distribution key is not found in the verification tag translation table then the engine component  of the front-end server  forwards the SCTP communication to the back-end server  specified by the distribution key. Further in the exemplary embodiment, if the distribution key is found in the verification tag translation table then the engine component  of the front-end server  substitutes the distribution key in the communication with the associated distribution key in the verification tag translation table and recalculates the checksum, if required, for the communication and forwards the communication to the back-end server  specified by the replacement distribution key.","Continuing with another aspect of the exemplary embodiment, a storage component  provides the ability to store data associated with maintaining SCTP associations between a client  and a back-end server . Further in the exemplary environment, the storage component  comprises a verification tag translation table and a count of the number of entries in the verification tag translation table. The verification tag translation table counter in the exemplary environment storage component  can be used to determine if there is any need to inspect the verification tag translation table, as long as the count is zero, there have not been any clashes in distribution key generation and the communications from any clients  to any back-end servers  can be forwarded without a search of the verification tag translation table.","Turning now to , another exemplary embodiment  is depicted. A portion of the exemplary embodiment  depicts a client initialization component  and a back-end server initialization component . In one aspect of the exemplary embodiment , the client initialization component  provides the capability to manage an SCTP association initiated by a client . In the exemplary embodiment, the client initializing component  determines if the Initiate-Tag provided by the back-end server  would create a clashing distribution key with another SCTP association. Continuing with the exemplary embodiment, if a clashing distribution key is detected then the client initializing component  would replace the Initiate-Tag generated by the back-end server  with a non-clashing Initiate-Tag generated by the client initializing component , place the non-clashing Initiate-Tag in the INIT-ACK chunk and recalculate and replace the checksum in the SCTP common header.","Continuing with the exemplary embodiment, the back-end server initializing component provides the capability to manage an SCTP association initiated by a back-end server . In the exemplary embodiment, the back-end server initializing component  determines if the Initiate-Tag provided by the back-end server  would create a clashing distribution key with another SCTP association. Continuing with the exemplary embodiment, if a clashing distribution key is detected then the back-end server initializing component  would replace the Initiate-Tag generated by the back-end server  with a non-clashing Initiate-Tag generated by the back-end server initializing component , place the non-clashing Initiate-Tag in the INIT chunk and recalculate and replace the checksum in the SCTP common header.","Turning now to , illustrated is an exemplary embodiment . The exemplary embodiment  depicts the signaling flow for a client  initiating an SCTP association with a back-end server  through a front-end server . It should be noted in the exemplary embodiment that the front-end server  and one or more back-end servers  share a virtual internet protocol (IP) address and the back-end servers  operate independently of each other. It should be further noted in the exemplary embodiment that the operation of the front-end server  is transparent to both the client  and the back-end server  involved in the SCTP association.","First, at exemplary embodiment step , the client  sends an SCTP INIT chunk towards the virtual IP address shared by the front-end server  and the series of back-end servers . In the exemplary embodiment, the front-end server  receives the SCTP INIT chunk and makes a determination based on distribution policies which back-end server  will receive the SCTP INIT chunk. Continuing at step  with the exemplary embodiment, the front-end server  forwards the SCTP INIT chunk to the selected back-end server . Continuing with the exemplary embodiment, the back-end server  processes the SCTP INIT chunk by generating an SCTP INIT-ACK chunk including an Initiate-Tag and the SCTP port number used by the back-end server  and at , sends the INIT-ACK chunk towards the client .","In the exemplary embodiment, the front-end server  receives the SCTP INIT-ACK chunk and inspects the contents of the INIT-ACK chunk to create a distribution key to manage the communications between the initiating client  and the selected back-end server . The exemplary embodiment continues with the front-end server  combining the client  SCTP port number with the Initiate-Tag and the back-end server  SCTP port number to create a distribution key for the SCTP association. Continuing with the exemplary embodiment, the front-end server  checks the verification tag translation table to confirm that the newly created distribution key is not already in use by another SCTP association managed by the front-end server . In the exemplary embodiment, if the distribution key is found in the verification tag translation table then the front-end server  generates a new Initiate-Tag and creates a non-clashing distribution key.","Next in the exemplary embodiment, the front-end server creates a new entry in the verification tag translation table for the client  and back-end server  generated Initiate-Tags and stores the values in the verification tag translation table. Continuing with the exemplary embodiment, the front-end server  updates the SCTP INIT-ACK chunk with the new Initiate-Tag and a recalculated checksum and, at step , forwards the updated SCTP INIT-ACK chunk to the client . It should be noted in the exemplary embodiment that if the front-end server  does not detect a clash of distribution keys then the front-end server  does not create an entry in the verification tag translation table for the SCTP association.","Continuing at step  of the exemplary environment, the client  sends a COOKIE-ECHO chunk towards the back-end server  and the intermediate front-end server  inspects the COOKIE-ECHO chunk to determine if the distribution key is a match with any of the distribution keys stored in the verification tag translation table. In the exemplary embodiment, if the distribution key matches an entry of the verification tag translation table then the front-end server  replaces the Verification-Tag in the COOKIE-ECHO chunk with the Initiate tag from the verification tag translation table, replaces the checksum with a checksum recalculated based on the replaced Verification-Tag and, at step , forwards the COOKIE-ECHO chunk to the back-end server . Next in the exemplary embodiment at , the back-end server  sends a COOKIE-ACK chunk towards the client  and at step  the front-end server  transparently forwards the COOKIE-ACK chunk towards the client .","Turning now to , illustrated is an exemplary embodiment . The exemplary embodiment  depicts the signaling flow for a back-end server  initiating an SCTP association with a client  through a front-end server . It should be noted in the exemplary embodiment that the front-end server  and one or more back-end servers  share a virtual internet protocol (IP) address and the back-end servers  operate independently of each other. It should be further noted in the exemplary embodiment that the operation of the front-end server  is transparent to both the client  and the back-end server  involved in the SCTP association.","First, in the exemplary embodiment, the back-end server  generates an Initiate-Tag and sends the Initiate-Tag, at step , in an SCTP INIT chunk towards the client  transparently through the front-end server . Next in the exemplary embodiment, the front-end server  receives the SCTP INIT chunk from the back-end server  and transparently inspects the contents of the INIT chunk to create a distribution key to manage the communications between the destination client  and the initiating back-end server . The exemplary embodiment continues with the front-end server  combining the client SCTP port number with the back-end server  generated Initiate-Tag and the back-end server  SCTP port number to create a distribution key for the SCTP association.","Continuing with the exemplary embodiment, the front-end server  checks the verification tag translation table to confirm that the newly created distribution key is not already in use by another SCTP association managed by the front-end server . In the exemplary embodiment, if the distribution key is found in the verification tag translation table then the front-end server  generates a new Initiate-Tag to replace the back-end server  generated Initiate-Tag and creates a non-clashing distribution key. Next in the exemplary embodiment, the front-end server creates a new entry in the verification tag translation table for the client  and back-end server  generated Initiate-Tag and SCTP port numbers and stores the values in the verification tag translation table.","Continuing at step  with the exemplary embodiment, the front-end server  forwards the SCTP INIT chunk to the client  and the client  processes the SCTP INIT chunk by generating an SCTP INIT-ACK chunk including a client generated Initiate-Tag and a cookie associated with the client and, at step , sends the INIT-ACK chunk towards the back-end server  through the front-end server .","Next in the exemplary embodiment, the front-end server  receives the SCTP INIT-ACK chunk from the client  and transparently inspects the contents of the SCTP packet common header to retrieve the distribution key used to distribute the SCTP INIT-ACK to the appropriate back-end server . Continuing with the exemplary embodiment, the front-end server  checks the verification tag translation table to determine if the distribution key is in the verification tag translation table. In the exemplary embodiment, if the distribution key is found in the verification tag translation table then the front-end server  replaces the Verification-Tag in the SCTP common header of the INIT-ACK message with the associated back-end server  Initiate-Tag from the verification tag translation table and updates the checksum before forwarding the SCTP INIT-ACK to the appropriate back-end server  at step . It should be noted in the exemplary embodiment that if the front-end server  does not detect a clash of distribution keys then the front-end server  simply forwards the SCTP INIT-ACK to the appropriate back-end server  based on the Verification-Tag retrieved from the SCTP common header and the back-end server establishes an SCTP association with the client.","Continuing at step  of the exemplary environment, the back-end server  sends a COOKIE-ECHO chunk towards the client  through the front-end server  and the front-end server  transparently forwards, at step , the COOKIE-ECHO to the client  and the client establishes an SCTP association with the back-end server . Next in the exemplary embodiment at , the client  sends a COOKIE-ACK chunk towards the back-end server  and at step  the front-end server  determines if a distribution key exists for this SCTP association and accordingly if an exchange of Verification-Tags is required. The exemplary embodiment continues with the front-end server  transparently, with regard to the client  and the back-end server , forwarding the COOKIE-ACK chunk towards the back-end server .","Turning now to , illustrated is an exemplary embodiment . The exemplary embodiment  depicts the signaling flow for a client  communicating through a front-end server  to a back-end server  using an established SCTP association. It should be noted in the exemplary embodiment that the front-end server  and one or more back-end servers  share a virtual internet protocol (IP) address and the back-end servers  operate independently of each other. It should be further noted in the exemplary embodiment that the operation of the front-end server  is transparent to both the client  and the back-end server  involved in the SCTP association.","Next in the exemplary embodiment, a client  sends, at step , an SCTP packet through the front end server  towards a back-end server . The front-end server  receives the SCTP packet from the client  and transparently inspects the contents of the SCTP packet to retrieve the distribution key used to distribute the SCTP packet to the appropriate back-end server . Continuing with the exemplary embodiment, the front-end server  checks the verification tag translation table to determine if the distribution key is in the verification tag translation table. In the exemplary embodiment, if the distribution key is found in the verification tag translation table then the front-end server  replaces the Verification-Tag in the SCTP packet common header with the associated back-end server  Initiate-Tag from the verification tag translation table and updates the checksum before forwarding the SCTP packet to the appropriate back-end server  at step . It should be noted in the exemplary embodiment that if the front-end server  does not detect a clash of distribution keys then the front-end server  forwards the SCTP packet to the appropriate back-end server  based on the Verification-Tag retrieved from the SCTP packet common header.","Continuing at , an exemplary method embodiment  for providing SCTP communication traffic distribution based on SCTP verification tags. Starting at step , the exemplary method embodiment  can receive a request to initiate an SCTP association between a client  and a back-end server . In the exemplary embodiment the initiation request can come from the client  or the back-end server. It should be noted in the exemplary embodiment that method  operates on a front-end server  that is transparent to both the client  and the back-end server . Further, it should be noted in the exemplary that there are a plurality of back-end servers  that operate independently of each other and are not aware of the existence of each other.","Continuing with the exemplary embodiment at step , the front-end server  can generate a distribution key for routing SCTP communication packets between the client  and the back-end server  based on SCTP parameters collected from the client and the back-end server . Continuing with the exemplary embodiment, the front-end server  can use the SCTP port number from the client , the SCTP port number from the back-end server  and the SCTP Verification-Tag from the back-end server to generate a distribution tag that for this SCTP association.","Further, at step  of the exemplary embodiment, the method  transparently routes SCTP packets between the client  and the back-end server . The exemplary method embodiment  retrieves the distribution key from the SCTP packet and extracts the SCTP Verification-Tag from the distribution key. The SCTP Verification-Tag represents the identity of the client  or back-end server  destination connected to the SCTP association for this SCTP communication. The exemplary method embodiment  then sends this SCTP packet towards the identified client  or back-end server .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 8","b":["800","800","800","800"]},"Looking now to , an example of a device for implementing the previously described innovation includes a general purpose computing device in the form of a computer . Components of computer  can include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  can be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures.","Computer  can include a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer . By way of example, and not limitation, computer readable media can comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile as well as removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media can embody computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and can include any suitable information delivery media.","The system memory  can include computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM) and\/or random access memory (RAM). A basic input\/output system (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, can be stored in memory . Memory  can also contain data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of non-limiting example, memory  can also include an operating system, application programs, other program modules, and program data.","The computer  can also include other removable\/non-removable and volatile\/nonvolatile computer storage media. For example, computer  can include a hard disk drive that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive that reads from or writes to a removable, nonvolatile magnetic disk, and\/or an optical disk drive that reads from or writes to a removable, nonvolatile optical disk, such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM and the like. A hard disk drive can be connected to the system bus  through a non-removable memory interface such as an interface, and a magnetic disk drive or optical disk drive can be connected to the system bus  by a removable memory interface, such as an interface.","A user can enter commands and information into the computer  through input devices such as a keyboard or a pointing device such as a mouse, trackball, touch pad, and\/or other pointing device. Other input devices can include a microphone, joystick, game pad, satellite dish, scanner, or similar devices. These and\/or other input devices can be connected to the processing unit  through user input  and associated interface(s) that are coupled to the system bus , but can be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A graphics subsystem can also be connected to the system bus . In addition, a monitor or other type of display device can be connected to the system bus  through an interface, such as output interface , which can in turn communicate with video memory. In addition to a monitor, computers can also include other peripheral output devices, such as speakers and\/or printing devices, which can also be connected through output interface .","The computer  can operate in a networked or distributed environment using logical connections to one or more other remote computers, such as remote server , which can in turn have media capabilities different from device . The remote server  can be a personal computer, a server, a router, a network PC, a peer device or other common network node, and\/or any other remote media consumption or transmission device, and can include any or all of the elements described above relative to the computer . The logical connections depicted in  include a network , such as a local area network (LAN) or a wide area network (WAN), but can also include other networks\/buses.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter. When used in a WAN networking environment, the computer  can include a communications component, such as a modem, or other means for establishing communications over a WAN, such as the Internet. A communications component, such as a modem, which can be internal or external, can be connected to the system bus  through the user input interface at input  and\/or other appropriate mechanism.","In a networked environment, program modules depicted relative to the computer , or portions thereof, can be stored in a remote memory storage device. It should be noted that the network connections shown and described are exemplary and other means of establishing a communications link between the computers can be used.","Additionally, it should be noted that as used in this application, terms such as \u201ccomponent,\u201d \u201cdisplay,\u201d \u201cinterface,\u201d and other similar terms are intended to refer to a computing device, either hardware, a combination of hardware and software, software, or software in execution as applied to a computing device implementing a virtual keyboard. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program and a computing device. As an example, both an application running on a computing device and the computing device can be components. One or more components can reside within a process and\/or thread of execution and a component can be localized on one computing device and\/or distributed between two or more computing devices, and\/or communicatively connected modules. Further, it should be noted that as used in this application, terms such as \u201csystem user,\u201d \u201cuser,\u201d and similar terms are intended to refer to the person operating the computing device referenced above.","Further, the term to \u201cinfer\u201d or \u201cinference\u201d refer generally to the process of reasoning about or inferring states of the system, environment, user, and\/or intent from a set of observations captured from events and\/or data. Captured events and data can include user data, device data, environment data, behavior data, application data, implicit and explicit data, etc. Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example. The inference can be probabilistic in that the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher-level events from a set of events and\/or data. Such inference results in the construction of new events or actions from a set of observed events and\/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources.","The above-described exemplary embodiments are intended to be illustrative in all respects, rather than restrictive, of the present innovation. Thus the present innovation is capable of many variations in detailed implementation that can be derived from the description contained herein by a person skilled in the art. All such variations and modifications are considered to be within the scope and spirit of the present innovation as defined by the following claims. No element, act, or instruction used in the description of the present application should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article \u201ca\u201d is intended to include one or more items."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate exemplary embodiments, wherein:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
