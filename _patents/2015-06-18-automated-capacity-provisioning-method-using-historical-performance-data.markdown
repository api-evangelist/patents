---
title: Automated capacity provisioning method using historical performance data
abstract: The method may include collecting performance data relating to processing nodes of a computer system which provide services via one or more applications, analyzing the performance data to generate an operational profile characterizing resource usage of the processing nodes, receiving a set of attributes characterizing expected performance goals in which the services are expected to be provided, and generating at least one provisioning policy based on an analysis of the operational profile in conjunction with the set of attributes. The at least one provisioning policy may specify a condition for re-allocating resources associated with at least one processing node in a manner that satisfies the performance goals of the set of attributes. The method may further include re-allocating, during runtime, the resources associated with the at least one processing node when the condition of the at least one provisioning policy is determined as satisfied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09405587&OS=09405587&RS=09405587
owner: BMC SOFTWARE, INC.
number: 09405587
owner_city: Houston
owner_country: US
publication_date: 20150618
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE DISCLOSURE","BACKGROUND OF THE DISCLOSURE","SUMMARY OF THE DISCLOSURE","DETAILED DESCRIPTION"],"p":["This application is a continuation of, and claims priority to, U.S. patent application Ser. No. 11\/848,298, filed on Aug. 31, 2007, which claims priority to non-provisional U.S. Patent Application No. 60\/824,240 filed Aug. 31, 2006, both of which are incorporated herein by reference in their entirety.","The subject matter of the present disclosure relates to a system and method for automatically provisioning the capacity of a computer system.","Capacity planning tools can be used to plan the capacity of a computer system and manage its performance. To do this, capacity planning tools focus on (1) identifying performance bottlenecks in the computer system and (2) providing \u201cwhat-if\u201d functionalities that can be used to evaluate performance implications of different hardware configurations of that system. Other tools referred to as system provisioning tools can be used to provision the computer system with the goal of setting up a configuration that is cost effective from a business perspective. To effectively achieve this goal, provisioning tools need intelligent input to determine what and how many servers and other system components are needed to satisfy the service level objectives (SLOs) of the computer system.","Unfortunately, prior art capacity planning tools do not provide direct input to provisioning tools, nor do they receive any direct feedback from the provisioned computer system that could be used to validate or adjust the system's configuration. Instead, users have to translate performance information, such as reports and graphs, into system recommendations and then input those recommendations into the provisioning tool for execution because direct output from the prior art capacity planning tool would not be usable by the prior art provisioning tool. Due to these problems, prior art provisioning tools provision a computer system based merely on user-inputted rules or on rule of thumb. Moreover, prior art provisioning tools rely on policies that are static and that may or may not reflect historical demands of the computer system for resources. In short, prior art provisioning tools do not take provisioning actions on potential computing needs based on historic resource usage patterns. They are purely reactive rather than proactive.","In accordance with one embodiment, an automated system manages and provisions a computer system, which can be a physical or virtual enterprise system. During operation, the automated system obtains performance data pertaining to the computer system's processing nodes (e.g., servers), which are partitioned into partitions. Performance data can include. Inter alia, a performance rating and measured utilization values for each of the computer system's processing nodes. Performance data can also include measurements of actual service levels, such as response times, workloads, throughputs (units of work per unit of time), etc.","From the performance data related to performance rating and utilization values, for example, the automated system normalizes a utilization value for each of the processing nodes over a period of time and generates a weighted average for each utilization value. Also during operation, the automated system receives service level objectives (SLO) for the computer system and automatically determines provisioning policies based on these SLOs. For example, automated system can automatically determined provisioning policies using the received SLOs and the weighted average normalized utilization values determined from the performance data automatically determines provisioning policies. In such an example, the provisioning policies can thereby indicate desired outcome service level information, such as a number of processing nodes required to meet the SLOs, an arrival value (e.g., throughput) for transactions to each of the processing nodes, and a potential service level for each of the processing nodes.","Based on the provisioning policies, the automated system automatically provisions at least some of the processing nodes across the partitions to load balance the system's capacity. As used herein, provisioning the processing nodes by the automated system can include such actions as sending, routing, directing, or distributing system transactions to the processing nodes (e.g., servers) and such actions as installing (removing) or activating (deactivating) processing nodes (e.g., servers) to process transactions. With the automatically generated policies and provisioning, the automated system is both proactive and reactive. Its proactive aspect generates policies based on analysis of current and historical information, and its reactive aspect analyzes current and historical information and reacts accordingly using the generated policies.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 1"],"b":["100","300","160","170","180","100","100","110","112","114","110","300","160","170"]},"As discussed below, recommendation tool  automatically provides provisioning policies  to automatically manage and provision the computer system . In general, recommendation tool  can be a standalone software tool implemented and deployed as a Web Service capable of operating in conjunction with other tools. In addition, recommendation tool  can function automatically, implying that it does not rely on user intervention via a user interface. Preferably, an Application Programming Interface (API) allows recommendation tool  to use scripts and command line instructions to automate the run-time operation of the tool.","Provisioning tool  receives the provisioning policies  from recommendation tool  and automatically provisions the computer system  accordingly. Provisioning tool  is capable of physically and\/or logically provisioning system components into nodes of a physical or virtual system. For a virtual system, provisioning tool  can add a virtual layer to the computer system  using virtualization features. As will be appreciated, provisioning the computer system  as a virtual system requires that the system hardware (e.g., servers, applications, etc.) have sufficient processing power to support a specified number of virtual partitions (not shown). In addition, each virtual partition requires its own or shared operating system and applications that run on the operating system.","The data collection tool  collects performance data about system components from data collectors  distributed throughout computer system . For example, the data collectors  can be monitoring agents to collect performance data about processing nodes (e.g., servers ) and provide the collected performance data to the data collection tool . In turn, a data repository  stores the collected data for use by recommendation tool . Data repository  can be any database, data source, or file system known in the art for storing the collected data. Ultimately, recommendation tool  in conjunction with the provisioning tool  and data collection tool  manages the computer system's capacity using an automated capacity provisioning process, such as discussed below with reference to .","As shown in automated process  of , data collectors  collect performance data of computer system , and data collection tool () stores the performance data in data repository  (Block ). The performance data can include various metrics known and used in the art. As an example, BMC\u00ae Performance Manager or BMC\u00ae Performance Assurance Suite for Servers can be used to collect performance data and store it in a database or a file system. Other data collection tools can also be used, as long as the data is stored or can be retrieved in a predefined common format, such as CSV, ASCII, XML, or through a predefined API (Application Programming Interface).","With the performance data collected, recommendation tool  analyzes the collected data and generates a system operational profile  (Block ). In one embodiment, operational profile  can characterize resource usage of computer system  or partitions thereof over one or more time periods. In alternative embodiments, operational profile  can characterize service levels in computer system . Such service levels can represent response times of servers when subjected to given workloads or can represent the ability of servers to process given workloads or throughputs. In creating operational profile , recommendation tool  may focus on the collected data from system components, such as server processors and CPUs, and on fixed attachments, such as cache, memory, and onboard disks, as well as service level information above.","During the normal course of operation, recommendation tool  also receives a set of Service Level Objectives (SLOs)  (Block ). The SLOs  can come from any conventional source in computer system (), such as from controller . In addition, the SLOs  can be received or obtained from a workload manager, computing device, or other source having management and compliance information for one or more Service Level Objectives (SLO) or Service Level Agreements (SLA). As is known in the art, an SLA defines static and dynamic attributes that the system's services must satisfy between a consumer and a provider. The SLAs dynamic attributes relate to variables that may change in real-time and may depend on how the services are actually performing. Some examples of attributes include response times for transactions, expected time to finish tasks, SLA violation rates of a service, reliability of a service, availability of a service, etc. As is also known in the art, an SLO defines specific attributes of a given service associated with an SLA.","Based on the operational profile  and the received SLOs , recommendation tool  generates a set of provisioning policies  for use in provisioning the computer system's resources (Block ). Depending on the implementation, these provisioning policies  can be used to directly provision the computer system  or can be used at times when certain total workloads are expected, when such workloads are encountered in practice, or when certain performance characteristics are encountered. Preferably, the generated provisioning policies  factor in performance of the system components over a period of time that is long enough to account for variances in business cycles.","In general, the generated provisioning policies  define plans of action for guiding provisioning decisions to produce desired outcomes. The plans of action can be characterized as one or more statements, a set or collection of rules, and\/or a set of \u201cif . . . then, . . . else . . . \u201d predicates. For example, a given SLA may state that business application response time must be less than 1 second 95% of the time. To achieve this, analysis of the historical performance data is used to identify resource usage patterns for (near future) resource provisioning and allocation. Furthermore, the analysis can be used to generate provisioning policies  as a developed set of rules or the like to implement desired outcomes based on predictive analysis and what-if scenarios. The policies  can then be used to provision the computer system's resources in terms of what, how, and when available servers  and\/or other resources are needed to support applications  associated with the various SLOs .","To generate policies, recommendation tool  can use time-dependent information, utilization levels, response times, transaction arrival rates, and other resource usage information. Additionally, recommendation tool  can use trending analysis, predictive analysis, what-if scenarios, and user input to the resource usage information to generate the policies. For example, recommendation tool  can use trending analysis of predicted resource requirements to generate policies that match current\/past application performance. Moreover, to generate policies, recommendation tool  can perform predictive analysis on application performance requirements and can use \u201cwhat-if\u201d scenarios and user input.","As it operates, recommendation tool  can continually and automatically generate the policies (and modify existing policies) based on the historical and current information that has been collected and analyzed. In turn, the generated policies can provide different levels of reactivity and proactivity for provisioning computer system . For example, one type of policy can correlate time-dependent information (such as historical resource utilization) and needed servers and can state, for example, \u201cevery Monday at 7:55 AM allocate x serves.\u201d Another type of policy can correlate utilization and needed servers and can state, for example, \u201cif the average utilization of the servers is more than x % then allocate y additional servers with performance rating z.\u201d Yet another type of policy can correlate response time and needed servers and can state, for example, \u201cif and when average response time for transactions is measured over x minutes to be more than y seconds and existing server utilization is more than z %, then immediately allocate n additional servers then and there.\u201d Another type of policy can correlate arrival rate and needed servers and can state, for example, \u201cas soon as transaction arrival rate exceeds x transactions per minute for more than y minutes, allocate z additional servers.","Once generated, provisioning policies  can be used for look up by provisioning tool  when determining provisioning actions to perform to computer system . Alternatively, recommendation tool  can send the policy rules as provisioning decisions to provisioning tool  to be acted on directly. In the end, provisioning policies  may result in an indication of candidate servers  and other resources that can be repurposed or that can be physically or virtually consolidated to handle various applications and tasks. Besides focusing on servers , recommendation tool  may also take into consideration other features of a computer system , such as network connections and detached storage devices to ensure overall system performance.","Using the generated provisioning policies , provisioning tool  dynamically provisions a proper number of servers  of a certain computing power (or other resources) when needed so that the provisioned result ensures that the requirements of the received SLOs  are met (Block ). As an example, the Run Book Automation software from RealOps or a product similar to the previously available BMC\u00ae Virtualizer for Capacity on Demand product can be used for dynamic provisioning based on the generated provisioning policies. Alternatively, provisioning mechanisms in VMware\u00ae can be used.","As shown in , the automated process  of Blocks  through  can be implemented as an ongoing process so that collecting and analyzing performance data (including resource utilization, workload, and service levels), generating policies , and executing those policies  can be repeated as needed. The process  can also monitor and modify its performance as it continues. In this way, the process  can update policies  and validate SLOs  on a continuous basis. If the probability of meeting a given SLO  is below a certain level, for example, a policy  generated at Block  may need to be updated using more recently collected performance data from data repository . Alternatively, the attributes defined by an SLO  may need to be modified. In the end, the frequency with which provisioning policies  are updated may depend on the rate of change in resource demands and may also depend on updates to SLOs  by users and business applications.","By using performance data for long-term capacity provisioning, the process  may be less manually intensive and, as a result, require less specific performance modeling and capacity planning efforts than prior art provisioning techniques. Moreover, because the process  is automated in real-time, provisioning policies  can be quickly updated based on feedback of how applications  perform against the attributes of the SLOs .","Further details related to the automated system and process are shown in . As schematically shown by a graph, performance data  collected and stored in data repository () can include historical as well as real-time CPU utilization data for each of the various servers () of the computer system () and may have been collected for weeks or months from computer system (). As discussed previously, recommendation tool () analyzes this performance data  and generates an operational profile. In embodiments discussed previously, the operational profile can characterize service levels in computer system () in a certain configuration and having a certain capacity, such as response times of servers when subjected to given workloads or the ability of severs to process given workloads or throughputs.","In the present embodiment, operational profile characterizes resource usage of computer system () over time so that it can be termed a resource usage profile, such as schematically shown by graph . This resource usage profile  captures workload-oriented information related to resource usage and history of computer system () that can be used in its capacity management. In this example, resource usage profile  encompasses a one-week interval (7 days\u00d724 hours) with data points for each hour so that the profile  has 168 data points. Alternatively, resource usage profile  can encompass one or more one-week intervals, two-week intervals, monthly intervals, particular business seasons, or any other desirable time periods.","Based on the operational profile , recommendation tool () automatically generates several current and scheduled provisioning policies (). Details of how recommendation tool () automatically generates various provisioning policies () are discussed later. In general, the generated policies () can include a collection of rules for provisioning computer system (), and recommendation tool  can use trending analysis, predictive analysis, what-if scenarios, and user input to generate the policy rules from the information in the operational profile . Moreover, the generated policies () can be based on time-dependent information, utilization levels, response times, transaction arrival rates, and other information. Once generated, provisioning tool () can automatically use the provisioning policies () to provision the system components (e.g., servers ) of computer system ().","In addition to straight automation, the automated provisioning system can include a user interface having a summary screen  to display generated provisioning policies  for user intervention and control. In the present example, each policy  can have a name, a start (date, time, etc.), and a recurrence interval (e.g., every number of days or months with or without a particular end date). Using summary screen , users can manually change, add, and delete the automatically generated provisioning policies  as desired.","In addition, an additional screen  can allow a user to set up dynamic rules for adjusting the load balancing associated with a given provisioning policy . As shown in this additional screen , a user can indicate a priority for a service (e.g., LoadGenerator) and can assign a range of servers to that service. Then, the user can assign dynamic rules to the service. As one example, an assigned dynamic rule may stop one server of the service if the CPU utilization falls below 30% for 15-min. or add one server to the service if the CPU utilization exceeds 60% for 20-min. Other types of rules discussed herein could also be assigned.","After generating provisioning policies , a controller or computing device  executing provisioning tool () implements provisioning policies  among partitioned servers  in the computer system's virtual environment  so that servers  can efficiently handle various SLOs. Controller , in turn, monitors results from implementing provisioning policies  by collecting additional performance data that is subsequently used to create a current resource usage profile . In this way, the entire process can be repeated to account for new loads, changes in resources, workloads, new Service Level Objectives, etc.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":"300"},{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Notations Used to Describe Recommendation Tool"},{"entry":"and Other Components of the Present Disclosure"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["\u03bb","total arrival rate of transactions or service requests to be"]},{"entry":[{},"distributed among servers"]},{"entry":["\u03bb","arrival rate to a given server i"]},{"entry":["P","performance rating (a.k.a. processing power) of a given server i"]},{"entry":["P","performance rating of a reference server, which is server l, for"]},{"entry":[{},"example"]},{"entry":["s","mean time a task is serviced at a given server i"]},{"entry":["r","mean response time at a given server i"]},{"entry":["r","average response time of the system under consideration"]},{"entry":["u","utilization of a given server i"]},{"entry":["n","number of required servers (from the available servers)"]},{"entry":["N","total number of available server in the virtual system"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"As shown in further detail in , recommendation tool  includes an assessment module , a policy generating module , and a migrating module . Briefly, assessment module  analyzes performance data collected by data collection tool () and generates a system resource usage profile , such as discussed previously. In turn, policy generating module  uses resource usage profile  and received SLO information to generate provisioning policies  discussed previously that provisioning tool () can then directly execute or look up to provision servers () of computer system (). Independently, migrating module  also receives a copy of provisioning policies  and estimates a number of homogenous servers () needed to support the applications () currently running on heterogeneous servers () before migration.","Each of these modules , , and  are discussed individually in more detail with reference to . Currently, however, discussion focuses on the overall operational details of recommendation tool .","During operation, recommendation tool  obtains input data  that includes the number N of available servers () of the computer system (). For each available server i=1, 2, . . . , N, the input data  also includes the server's performance rating Pand the performance rating type, the server's SLO value (SLO) and the SLO type (e.g., utilization or mean response time), and the server's current measured utilization U. The performance rating Pcan be characterized by any commonly used performance rating system.","Based upon the input data , recommendation tool  produces output data  that determines (a) the number n of servers () required to meet the SLOs (), (b) the recommended arrival rate of transactions or service requests to each of the servers () used for load balancing, and (c) whether the overall service goal can be achieved (and provide a best possible solution if the service goal cannot be achieved). In general, output data  represents analytical information that provisioning tool () can use to perform \u201cbounded scale-out\u201d provisioning in the virtual environment of computer system (). The solution is bounded or limited in the sense that the virtual environment actually has a maximum number of physical servers (N) of given processing power",{"@attributes":{"id":"p-0044","num":"0043"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":"P","mo":"=","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"n"},"mo":"\u2062","msub":{"mi":["P","i"]}}},"mo":","}}},"br":{},"b":["380","112","162","160","114"]},"As shown, in one embodiment, output data  includes a number n of required servers (i=1, 2, . . . , n) from available servers () and an indication whether the requisite processing goal can be achieved (e.g., where \u201c0\u201d means not achievable and \u201c1\u201d means achievable). For each required server (i=1, 2, . . . , n), the output data  also includes a recommended arrival rate \u03bband a Potential Service Level (PSL) at the given server. The arrival rate, \u03bb, defines the recommended rate of arrival of transactions or service requests to a given server. By definition, the arrival rate, \u03bb, is greater than 0 and less or equal to 1 and is characterized by",{"@attributes":{"id":"p-0046","num":"0045"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"n"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["\u03bb","i"]}},"mo":"=","mn":"1."}}}},"Calculations performed by recommendation tool  can be based on various statistical assumptions. Using assumptions associated with an M\/M\/1 type queuing system, recommendation tool  can use the following set of computations to generate the illustrative output data . For a given server processing power, P(i=1, 2, . . . , n) the optimal arrival rate of transactions made to a given server i can be defined by:",{"@attributes":{"id":"p-0048","num":"0047"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"msub":{"mi":["\u03bb","i"]},"mo":"=","mrow":{"mfrac":[{"msub":{"mi":["P","i"]},"mrow":{"msub":[{"mi":"s","mn":"1"},{"mi":"P","mn":"1"}],"mo":"\u2062"}},{"mrow":[{"mrow":{"mo":["(",")"],"mrow":{"mfrac":{"mi":"P","mrow":{"msub":[{"mi":"s","mn":"1"},{"mi":"P","mn":"1"}],"mo":"\u2062"}},"mo":"-","mi":"\u03bb"}},"mo":"\u2062","msqrt":{"msub":{"mi":["P","i"]}}},{"munderover":{"mo":"\u2211","mrow":{"mi":"j","mo":"=","mn":"1"},"mi":"n"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msqrt":{"msub":{"mi":["P","j"]}}}]}],"mo":"-"}},{"mrow":[{"mi":["provided","that","P"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]},{"msub":[{"mi":"s","mn":"1"},{"mi":"P","mn":"1"}],"mo":["\u2062","\u2062"],"mrow":{"mi":"\u03bb","mo":"."}}],"mo":">"}],"mo":","}},{"mrow":{"mo":["(",")"],"mn":"1"}}]}}}}},"If the load is heavy, i.e., the total arrival rate to be distributed among servers \u03bb\u2192P\/(sP), then the arrival rate to each server () should approach the service rate of the server:",{"@attributes":{"id":"p-0050","num":"0049"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["\u03bb","i"]},"mo":"\u2192","mrow":{"mfrac":{"msub":{"mi":["P","i"]},"mrow":{"msub":[{"mi":"s","mn":"1"},{"mi":"P","mn":"1"}],"mo":"\u2062"}},"mo":"."}}}},"br":{},"b":"112"},{"@attributes":{"id":"p-0051","num":"0050"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msub":{"mi":["u","i"]},"mo":"=","mrow":{"msub":{"mi":["\u03bb","i"]},"mo":"\u2062","mfrac":{"mrow":{"msub":[{"mi":"s","mn":"1"},{"mi":"P","mn":"1"}],"mo":"\u2062"},"msub":{"mi":["P","i"]}}}}},{"mrow":{"mo":["(",")"],"mn":"2"}}]}}}}},"If the SLO type is a utilization value, then recommendation tool  tries to find a solution such that the utilization of a given server is less than or equal to the value of its SLO (i.e., u\u2266SLO) for all active n servers. If the SLO type is a mean response time, recommendation tool  tries to find a solution such that the mean response time at a given server is less than or equal to the value of its SLO (i.e., r\u2266SLO) for all active a servers. Consequently, the mean response time r at server i can be computed as:",{"@attributes":{"id":"p-0053","num":"0052"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msub":{"mi":["r","i"]},"mo":"=","mfrac":{"mrow":[{"msub":[{"mi":"s","mn":"1"},{"mi":"P","mn":"1"}],"mo":"\u2062"},{"msub":{"mi":["P","i"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"-","msub":{"mi":["u","i"]}}}}]}}},{"mrow":{"mo":["(",")"],"mn":"3"}}]}}}}},"In this case, the average response time r to the virtual system is characterized as:",{"@attributes":{"id":"p-0055","num":"0054"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"r","mo":"=","mrow":{"mfrac":{"mn":"1","mi":"\u03bb"},"mo":"\u2061","mrow":{"mo":["[","]"],"mrow":{"mfrac":{"msup":{"mrow":{"mo":["(",")"],"mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"k","mo":"=","mn":"1"},"mi":"n"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msqrt":{"msub":{"mi":["P","k"]}}}},"mn":"2"},"mrow":{"mi":"P","mo":"-","mrow":{"msub":[{"mi":"\u03bbs","mn":"1"},{"mi":"P","mn":"1"}],"mo":"\u2062"}}},"mo":"-","mi":"n"}}}}},{"mrow":{"mo":["(",")"],"mn":"4"}}]}}}}},"If not all the SLOs can be achieved, then recommendation tool  will provide the best possible load balancing to distribute transactions based on the various recommended arrival rates \u03bbof the available servers (l=1, 2, . . . , N).",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4","b":["400","400","400","410","410","420","480","500","400","100","112","400","100"]},"For a given node (i.e., server) and in one embodiment, the input  includes Node Name, Performance Rating Type, performance rating (i.e., processing power) (P), utilization service level objective (SLO), number of desired time intervals to be assessed (T\u2032), and CPU utilization data for T\u2032 intervals x, x, . . . , x.","For each interval of the time period (e.g., each hour of the 7\u00d724 period), statistical analysis algorithm  computes the following statistical values: a measured average utilization (), a weighted average utilization for the hour (), a weighted average normalized utilization for the hour (WANU), a minimum utilization for the hour (x), a maximum utilization for the hour (x), a coefficient of variation of CPU utilization for the hour (C), and a probability of exceeding the SLO for the hour (p). These statistical values over the current time period of interest forms the resource usage profile discussed previously that is used to generate provisioning policies.","Details of the calculations performed by assessment module  are as follows. For the T data points in the current time period, assessment module  computes a weighted average for the data points that places more emphasis on more recent data. To do this, it is assumed that the importance of a particular interval is an importance factor \u03b1 times more important than the previous interval so that weights wfor the T data points are assigned in the following fashion:",{"@attributes":{"id":"p-0061","num":"0060"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"msub":{"mi":["w","t"]},"mo":"=","mfrac":{"mrow":[{"msup":{"mi":"\u03b1","mrow":{"mi":"t","mo":"-","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"\u03b1","mo":"-","mn":"1"}}},{"msup":{"mi":["\u03b1","T"]},"mo":"-","mn":"1"}]}},{"mrow":{"mi":["for","t"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},"mo":"=","mn":"1"}],"mo":[",",",",",","\u2062",","],"mn":"2","mi":["\u2026","T"],"mstyle":{"mspace":{"@attributes":{"width":"1.1em","height":"1.1ex"}}}}},{"mrow":{"mo":["(",")"],"mn":"5"}}]}}}}},"In addition to the weights w, the assessment module  computes the measured average utilization () for the T data points, x, x, . . . , x, as follows:",{"@attributes":{"id":"p-0063","num":"0062"},"maths":{"@attributes":{"id":"MATH-US-00009","num":"00009"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msub":{"mover":{"mi":["x","_"]},"mi":"m"},"mo":"=","mrow":{"mfrac":{"mn":"1","mi":"T"},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"t","mo":"=","mn":"1"},"mi":"T"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["x","i"]}}}}},{"mrow":{"mo":["(",")"],"mn":"6"}}]}}}},"br":{},"o":["x","x"],"sub":["m","i"],"b":"400"},{"@attributes":{"id":"p-0064","num":"0063"},"maths":{"@attributes":{"id":"MATH-US-00010","num":"00010"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mover":{"mi":["x","_"]},"mo":"=","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"t","mo":"=","mn":"1"},"mi":"T"},"mo":"\u2062","mrow":{"msub":[{"mi":["w","t"]},{"mi":["x","i"]}],"mo":"\u2062"}}}},{"mrow":{"mo":["(",")"],"mn":"7"}}]}}}},"br":[{},{},{},{},{},{},{}],"in-line-formulae":[{},{},{},{},{},{}],"i":["P","x","x",",x",", . . . ,x","x","x",",x",", . . . ,x"],"sub":["min","min","1","2","T","max","max","1","2","T"]},{"@attributes":{"id":"p-0065","num":"0064"},"maths":{"@attributes":{"id":"MATH-US-00011","num":"00011"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mi":"\u03c3","mo":"=","msqrt":{"mrow":{"mrow":{"mfrac":{"mn":"1","mi":"N"},"mo":"\u2062","msup":{"mrow":{"mo":["(",")"],"mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"T"},"mo":"\u2062","msubsup":{"mi":["x","i"],"mn":"2"}}},"mn":"2"}},"mo":"-","msup":{"mover":{"mi":["x","_"]},"mn":"2"}}}}},{"mrow":{"mo":["(",")"],"mn":"11"}}]},{"mtd":[{"mrow":{"mrow":[{"mi":"C","mo":"=","mrow":{"mi":"\u03c3","mo":["\u2062","\u2062"],"mstyle":{"mtext":"\/"},"mover":{"mi":["x","_"]}}},{"mi":"e","mo":"\u2190","mn":"0"}],"mo":","}},{"mrow":{"mo":["(",")"],"mn":"12"}}]}]}}},"br":{},"sub":"SLO"},"For each x, i=1, 2, . . . , T,\n\nif 1;\u2003\u2003(13)\n\n\u2003\u2003(14)\n","After statistical analysis algorithm  computes the above statistical values, assessment module  generates output data  for each server that includes the node name (e.g., server), performance rating type, performance rating (P), and the above computed statistical values representing the resource usage profile of computer system (). This output data  is then made available to policy generating module () as described below.","In , illustrative policy generating module  includes a capacity module , a predictive module , and a what-if module , although other implementations may have only one such module or any combination thereof. Policy generating module  receives input  and generates one or more policies  for provisioning computer system. As mentioned previously, the policies  can be characterized as a collection of rules to be looked up by provisioning tool () when making provisioning decisions or can be characterized as provisioning decisions or commands sent to provisioning tool () to act on directly.","Capacity module  receives attributes defined in SLOs, server information, and historical information pertaining to resource utilization (e.g., the resource usage profile from assessment module) as its input . Using analysis described in more detail with reference to , capacity module  then generates policies  to match resources to the application demand \u201cjust-in-time\u201d.","As detailed below, predictive module  and what-if module  generate policies based on a combination of information pertaining to resources, workloads, service levels, and time. For example, the time information can be any given time interval, the workload information can be an average arrival rate of x transactions or jobs, the resource information can be the number of allocated servers, and the service level information can be average response times or throughput. What-if module  can further produce different combinations of workloads and resources to determine what the resulting performance would be in each of the different combinations and whether the system will be saturated or not.","Illustrative predictive module  receives various types of information as its input  such as an operational profile characterizing server utilization, actual workloads, actual service levels, and time-related information. Predictive module  applies historical trending and predictive analysis to the input information and generates policies  that can then match current\/past application performance based on predicted resource requirements. Therefore, predictive module  can use a form of curve matching analysis based on forecasted demand (i.e., expected workload). In other words, predictive module  can predict that at a given time a given number of x more servers may be needed, where this prediction is partly based on what workload the system may be required to handle at that time or based on the expected utilization at the time.","In one example, information about server utilization can be provided by the operational profile from assessment module, and module  can generate a policy  indicating that high utilization levels will drive allocation of more servers based on analysis of server utilization information. In another example, information about actual workloads can characterize what an application is attempting to do and can indicate, for example, transaction throughput (e.g., how many transactions arrived each second or minute) or job throughput (e.g., how many batch jobs were submitted per day). Based on an analysis of such workload information, module  can generate a policy  indicating that high workload requests will drive resource allocation before servers are utilized or before service levels deteriorate. In general, high workload requests are the same as a high workload arrival rate, which is the throughput in a steady state, non-saturated system.","In yet another example, information about actual service levels can indicate what was the response time for the transactions, how long it took to process batch jobs, what was the throughput, was the system able to execute all the workload, etc. In addition, service level agreements and objectives (SLAs and SLOs) can define such information as response time, throughput, and utilization. Based on an analysis of such service level information, module  can generate a policy  indicating that certain levels of near-poor service will drive certain resource allocation. Finally, the time-related information can indicate when the information pertaining to server utilization, workload, and service level occurred. Based on an analysis of this time-related information, module  can generate a policy  indicating that resources will be pre-allocated at certain times.","What-if module  receives information as its input  similar to that received by predictive module , and what-if module  applies historical trending and predictive analysis to that information. However, what-if module  further applies what-if scenarios in its analysis to generate policies. In this way, what-if module  can allow users to vary input of demand to produce what-if scenarios so the module  can then generate policies  that match resource requirements to the demand input by the user.","In one example, what-if module  accepts as user input a list of workldoad scenarios and desired service levels. The input may indicate, for example, that a response time of 1 second is expected at 100 transactions per second and that a response time of 2 seconds is expected at 1000 transactions per second. After analyzing the characteristics of the application, what-if module  runs a series of what-if scenarios to discover the desired amount of resources. In other words, in a scenario for 100 transactions per second, the module  may predict what would be the response time if 2 servers, 4 servers, 8 servers, 10 servers, and 20 servers were used.","After analysis, what-if module  then determines the smallest number of servers required to meet the desired service objective at the given workload level. In turn, this determined information is used to generate a policy  that can state a predicate, such as \u201cif transaction rate is 100 transactions per second for application having stated characteristics is encountered, then provision x servers with y processing power.\u201d Even if these conditions are not met, the generated policy  is still created to handle such an eventuality in a particular business scenario. If and when the eventuality does occur in the future, then the provisioning tool can implement the generated policy , and there would be no need to first experience and then detect poor performance.","As shown in , illustrative capacity module  receives input data , performs operations of the provisioning algorithm , and generates output data  to be used to provision the servers () of the computer system (). In the illustrated embodiment, the input data  includes a performance rating type, performance ratings of m servers available for provisioning (P, P, . . . , P), service level objectives of each of the m servers (SLO, SLO, . . . , SLO), and a headroom value added for the required servers (H). In addition, input data  includes weighted average normalized unitization values (WANU(i,j)) from assessment module (; ) for each hour i of the time period (e.g., 7\u00d724) and for each server j. This information essentially corresponds to the current historical performance data in the resource usage profile of the computer system ().","Using the input data , capacity module  begins operations of provisioning algorithm  by calculating server requirements for every hour of the 7\u00d724 time period (Block ). For example, for each hour i of the 7\u00d724 time period, capacity module  calculates a weighted average normalized unitization total (WANUT) using the weighted average normalized unitization values (WANU(i,j)) as follows:",{"@attributes":{"id":"p-0079","num":"0078"},"maths":{"@attributes":{"id":"MATH-US-00012","num":"00012"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":["W","A","N","U"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"mrow":{"mi":"T","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"i"}}},{"mrow":[{"munderover":{"mo":"\u2211","mrow":{"mi":"j","mo":"=","mn":"1"},"mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":["W","A","N"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"mrow":{"mi":"U","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["i","j"],"mo":","}}}}},{"mi":"A","mo":"\u2061","mrow":{"mo":["[","]"],"mn":"0"}}],"mo":"\u2261"}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"15"}}]}}}},"br":{},"b":"510"},{"@attributes":{"id":"p-0080","num":"0079"},"maths":{"@attributes":{"id":"MATH-US-00013","num":"00013"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mrow":[{"mi":"A","mo":"\u2061","mrow":{"mo":["[","]"],"mrow":{"msup":{"mi":["m","\u2032"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"i"}}}},{"mrow":[{"mi":["W","A","N","U"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"mrow":{"mi":"T","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"i"}}},{"munderover":{"mo":"\u2211","mrow":[{"mi":"k","mo":"=","mn":"1"},{"msup":{"mi":["m","\u2032"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"i"}}]},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mi":["S","L"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}],"msub":[{"mi":["O","k"]},{"mi":["P","k"]}]}}],"mo":["-","-"],"mi":"H"}],"mo":["\u2261","\u2264"],"mn":"0"},"mo":","}},{"mrow":{"mo":["(",")"],"mn":"16"}}]}}}},"br":{}},"With the above calculations, illustrative capacity module  calculates a list of 168 numbers, denoted as m\u2032(1), m\u2032(2), . . . , m\u2032(168). This list represents server requirements for every hour of the 7\u00d724 time period (i.e., 168 data points). Preferably, capacity module  determines server demands based a \u201csensitivity\u201d variable and divides the list of server demands into a plurality of segments so that the sensitivity variable can control how frequently policies should be updated to reflect the demands on servers (Block ). Moreover, capacity module  preferably consolidates the list of server demands by combining together those adjacent segments having identical server demands (Block ). In other words, capacity module  does not need to set a policy for every segment if two adjacent segments have the same server demand. In such a case, the later identical demand could be removed from the list, and such consolidation can continue until capacity module  obtains a list without identical adjacent server demands.","After obtaining the consolidated list of server demands, capacity module  sets policies for each listed server demand (Block ). To do this, capacity module  computes transaction weights wto supply to load balancer (; ) of provisioning tool () to control the arrival rate of transactions to the servers (). Based on the processing power Pof a given server k, the SLO for that server SLO, and the total server requirements, the transaction weight wfor a given server k is calculated as follows:",{"@attributes":{"id":"p-0083","num":"0082"},"maths":{"@attributes":{"id":"MATH-US-00014","num":"00014"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msub":{"mi":["w","k"]},"mo":"=","mfrac":{"mrow":[{"msub":[{"mi":["P","k"]},{"mi":["O","k"]}],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062"],"mi":["S","L"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]},{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"m"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":[{"mi":["P","i"]},{"mi":["O","i"]}],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062"],"mi":["S","L"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]}}]}}},{"mrow":{"mo":["(",")"],"mn":"17"}}]}}}},"br":{},"b":["554","162"],"sub":"k "},{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 6","FIG. 3"],"b":["600","600","112","100","112","114","112","600","610"],"sub":["1","2","N"]},"In addition to information on available servers, the input data  includes information on currently consolidated servers, including a performance rating (P) of the consolidated servers, a number of virtual partitions (Vn) over the consolidated servers, a utilization Service Level Objective (SLO) of the consolidated servers, a utilization overhead (H) introduced for each required server with a performance rating, and a utilization overhead (h) introduced for each virtual partition. Moreover, input data  includes information from assessment module (; ), including a maximum utilization U(i,j) for each hour i of the 7\u00d724 time period and each available server j.","Using input data , migrating module  performs a migrating algorithm  to determine how to migrate or consolidate available servers. First, migrating algorithm  calculates a maximum normalized unitization total (MNUT) for all of the available servers N over the 7\u00d724 time period (Block ). The calculation is as follows:",{"@attributes":{"id":"p-0087","num":"0086"},"maths":{"@attributes":{"id":"MATH-US-00015","num":"00015"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":["M","N","U","T"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]},{"mover":{"munder":{"mi":"max","mrow":{"mi":"i","mo":"=","mn":"1"}},"mn":"168"},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"j","mo":"=","mn":"1"},"mi":"N"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":["P","j"]},"mo":"\u2062","mrow":{"mi":"U","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["i","j"],"mo":","}}}}}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"18"}}]}}}}},"Migrating module  then determines whether the server overhead is grater than the partition overhead by determining if H+h\u00d7Vn>SLO (Decision ). If there is too much overhead, migrating module  sends out an error message, such as \u201cThe overheads are greater than the utilization SLO\u201d (Block ). If there is not too much overhead, migrating module  determines the number (n) of required servers with performance rating P (Block ) using the calculation:",{"@attributes":{"id":"p-0089","num":"0088"},"maths":{"@attributes":{"id":"MATH-US-00016","num":"00016"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"n","mo":"=","mrow":{"mo":["\u2308","\u2309"],"mfrac":{"mrow":[{"mi":["M","N","U","T"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]},{"mi":"P","mo":"\u00d7","mrow":{"mo":["(",")"],"mrow":{"mrow":[{"mi":["S","L","O"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]},{"mi":["h","Vn"],"mo":"\u00d7"}],"mo":["-","-"],"mi":"H"}}}]}}}},{"mrow":{"mo":["(",")"],"mn":"19"}}]}}}}},"Migrating module  produces output data  that includes the performance rating type, the performance rating (P), the maximum normalized utilization total (MNUT), and the number (n) of required servers with performance rating P. This output  can then be used by the provisioning tool () to migrate the various servers () among the virtual partitions.","The foregoing description of preferred and other embodiments is not intended to limit or restrict the scope or applicability of the inventive concepts conceived of by the Applicants. For example, the various modules disclosed herein can comprise one or more software tools executable on one or more independent computing devices operatively coupled to the computer system. In exchange for disclosing the inventive concepts contained herein, the Applicants desire all patent rights afforded by the appended claims. Therefore, it is intended that the appended claims include all modifications and alterations to the full extent that they come within the scope of the following claims or the equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2A","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5A","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 5B","FIG. 5A"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 6","FIG. 3"]}]},"DETDESC":[{},{}]}
