---
title: Conditional highlighting of given cells in a dynamic HTML table
abstract: A method operative at a server for generating a table having dynamic data. According to the method, a page developer may specify a given table cell in the table for conditional treatment. In response to a request for the table received from a client browser, the table is populated with dynamic data, preferably by instantiating a table format object. If the dynamic data in the table cell meets a given condition, the table cell is highlighted. Using this technique, the page developer may conditionally highlight a particular cell based on the characteristics of the dynamic data to be presented in the cell.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06851088&OS=06851088&RS=06851088
owner: International Business Machines Corporation
number: 06851088
owner_city: Armonk
owner_country: US
publication_date: 19991207
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","COPYRIGHT NOTICE","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENT","JSP\u2122 (Java\u2122 Server Page) Raw Data Getter","Highlight Certain Cells in Dynamic HTML Table","Rotation for JSP\u2122 (Java\u2122 Server Page) Formatted Table","JSPTableFormat","JSPTableFormatCustomizer","Table Attribute Chart Linking to Table Format Object Documentation"],"p":["The present application is related to the following copending U.S. patent application: Ser. No. 09\/455,709, entitled \u201cMETHOD FOR PROVIDING A VISUAL REPRESENTATION OF DYNAMIC HTML TABLE ATTRIBUTES\u201d filed, Dec. 7, 1999; Ser. No. 09\/455,713, entitled \u201cMETHOD FOR ROTATING A DYNAMIC HTML TABLE\u201d filed, Dec. 7, 1999; and Ser. No. 09\/455,711, entitled \u201cMETHOD FOR POPULATING A DYNAMIC HTML TABLE FROM A SET OF DATA OBJECTS THROUGH A COMMON INTERFACE\u201d filed, Dec. 7, 1999.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.","1. Technical Field","The present invention relates generally to Internet publishing technologies and, in particular, to techniques for dynamically serving web pages that include tables populated with dynamic data.","2. Description of the Related Art","Page serving technologies are evolving at a rapid pace. Since 1997, a number of major technologies have attempted to supplement, if not replace, dynamically generated HTML, i.e. database or CGI scripts used to generate a web page on the fly. These technologies are Sun Microsystems\u2122's Java\u2122 Server Page (JSP\u2122), Microsoft\u2122's Active Server Page (ASP), and the Extensible Style Sheet Language (XSL\/XSLT) being promoted by the World Wide Web Consortium (W3C). Such techniques provide for the generation and serving of dynamic web page content by enabling a page creator to write HTML and then to embed pure programming logic inside the page markup. Sun's JSP\u2122 and Microsoft's ASP\u2122 are similar in that they both are essentially web templates that enable given code (e.g., code written in Java\u2122) to be embedded in static HTML to be served in response to a client browser request.","Although techniques such as JSP\u2122 and ASP\u2122 allow page authors to quickly and easily create web pages with dynamically-generated content, these techniques still have limitations. One limitation, in particular, is the inability to format an HTML table from given input data or that exhibits given customization, e.g., the capability to display highlighted cells based on given data conditions or the ability to format the table to facilitate rotation about any row or column. As is well-known, an HTML table consists of headers, rows and columns. A column represents a type of data. A header is used to display proper name for each column. A row is a set of data that consists of one datum from each column.","Thus, for example, generating an HTML table from dynamic data in a Java\u2122 server page is a complicated task. To produce a formatted table, one must first obtain the data from given input object(s). The way to access the data is different depending on the implementation of those objects. One may implement their input as a JavaBean\u2122 that uses indexed properties or vanilla properties. Others may implement a series of data beans using a combination of indexed property and property. Additional ways of accessing data might be through an XML document object model (DOM) or a JDBC ResultSet. With all these variations, it is difficult to format an HTML table for a dynamically-generated page wherein input data objects may be retrieved from varying types of input data sources.","Once the dynamic data is obtained, it would also be desirable to format that data within the dynamic HTML table. One such type of formatting is highlighting. As is well-known, it is fairly simple to highlight a given column or row in a dynamically-generated HTML table, and it is also known to highlight a specific cell in a static HTML table. However, there is no known technique for highlighting a given cell in a dynamically-generated table when data in that cell satisfies a given condition. For example, for a bank online statement wherein the information returned to the requesting user is a table, it would be desirable to be able to highlight a given cell to indicate that the user's checking account balance, for example, has fallen below a given amount. Thus, it would be desirable to be able to convert dynamic data (such as the result of a database query) into a formatted tabular representation in which certain table cells are conditionally highlighted based on the characteristics of the dynamic data to be presented in the cell.","Another type of table functionality that is currently unavailable in the art is the ability to produce a single dynamic page that will render a table correctly in any given horizontal or vertical orientation. There are many reasons for rotating a tabular representation in a web page. To give a simple example, some languages, such as Hebrew, are read right-to-left. As another example, assume a table compares the prices of vegetables for five different groceries. Because there are hundreds of vegetable types, the page author will want to be able to rotate the table so that it has five columns but hundreds of rows. When a table is rotated, however, the corresponding attributes in the table should change as well. If there are many attributes in the HTML table, however, there will be significant changes required when the orientation is altered. With a formatted table, a formatter for a column should become a formatter for a row. Implementing formatters for all of the expected orientations, however, is quite difficult.","For a Java\u2122 programmer who is not an HTML expert, it is not easy to completely understand the behavior of the attributes in a table that is going to be rotated. In the example described above, this is because there are a large number of attributes associated with the HTML table. In the prior art, there is no means available to show the position and precedence of all of these attributes. Although the documentation generated from Java\u2122 class files contains the HTML table attributes, such documentation does not show any of the relations among the attributes. Thus, for example, a developer has no simple way to determine the behaviors of given attributes or what rule should govern if a behavior conflict occurs.","The present invention addresses these and other deficiencies of the prior art.","The present invention describes a table formatter that is useful in formatting a markup language page table having dynamic data. The table formatter provides a number of useful functions including a raw data acquisition object that enables page developers to access different types of data objects for the table using a common interface, a technique to enable a page developer to specify how to convert dynamic data into a formatted representation in which certain table cells are conditionally highlighted, and a technique to enable the page author to format the table so that the contents of the table are independent of the table's orientation. The table formatter is invoked to enable the page developer to set up properties that will be used to create the dynamic table in response to a client browser request for a page that includes the table. Upon receipt of that request at the server, a request object and a data object are passed into the table formatter to generate the table according to the properties and to populate the table from a data source defined by the raw data acquisition object. As noted above, the dynamically-generated table may include conditionally highlighted cells as well as a defined horizontal or vertical orientation. The page that includes this table is then returned to the requesting browser in the usual manner.","Thus, it is a primary object of the present invention to provide a table formatter that is useful at a server for writing a server page (e.g., using JSP\u2122) to produce a dynamic table.","Another object of the invention is to provide a method that allows a page designer to specify how to convert dynamic data (such as the result of a database query or an application transaction) into a formatted tabular representation in which certain table cells are conditionally highlighted based on the characteristics of the dynamic data to be presented in that cell.","In a preferred embodiment, a method is operative at a server for generating a table having dynamic data. According to the method, a page developer may first specify a given table cell in the table for conditional treatment. In response to a request for the table received from a client browser, the table is populated with dynamic data, preferably by instantiating a table format object. If the dynamic data in the table cell meets a given condition, the table cell is highlighted.","The foregoing has outlined some of the more pertinent objects and features of the present invention. These objects should be construed to be merely illustrative of some of the more prominent features and applications of the invention. Many other beneficial results can be attained by applying the disclosed invention in a different manner or modifying the invention as will be described. Accordingly, other objects and a fuller understanding of the invention may be had by referring to the following Detailed Description of the Preferred Embodiment.","The present invention is implemented within a page handling framework and runtime engine operative on a server in a computer network such as the Internet. As is well-known, in the Internet paradigm as illustrated in , a client machine, such as machine , may use an application, such as a web browser , to access a server  via a computer network . Network  typically includes other servers (not shown) for control of domain name resolution, routing and other control functions. A representative server  is a computer or workstation having at least one processor , system memory (e.g., RAM) , disk or other permanent storage , I\/O devices , an operating system , a server program , and an application programming interface (API)  that provides extensions to enable application developers to extend and\/or customize the core functionality thereof through software programs including plug-ins, CGI programs, Java\u2122 servlets, and the like. One such software program is a .jsp page handling mechanism , which processes an HTTP page request and generates a response by feeding data into an output stream as will be described. In an illustrative embodiment, the page handling mechanism is implemented in Java\u2122 and is executable in a Java\u2122 Virtual Machine (JVM) by a processor in a known manner. Alternatively, the program may be written in whole or in part in native code. The page handling functionality, of course, may be part of the integral web server program.","A representative server machine is an IBM\u2122 Netfinity\u2122 platform running the Unix\u2122 operating system and a server program such as IBM\u2122 WebSphere\u2122 Version 2.0. Of course, any other computer hardware or software may be used.","A representative client is a personal computer, notebook computer, Internet appliance or pervasive computing device (e.g., a PDA or palm computer) that is Pentium\u2122-, PowerPC\u00ae- or RISC-based. The client includes an operating system such as Microsoft\u2122 Windows\u2122, Microsoft\u2122 Windows CE\u2122 or PalmOS\u2122. A typical client includes a suite of Internet tools including a Web browser, such as Netscape\u2122 Navigator\u2122 or Microsoft\u2122 Internet Explorer\u2122, that has a Java\u2122 Virtual Machine (JVM) and support for application plug-ins or helper applications. Communications between the client and the server typically conform to the Hypertext Transfer Protocol (Version 1.0 or higher), and such communications may be made over a secure connection.",{"@attributes":{"id":"P-00035","num":"00035"},"figref":"FIG. 2","b":["200","202","204","206","208","210"]},{"@attributes":{"id":"P-00036","num":"00036"},"figref":"FIG. 3","b":["300","302","302"]},"Returning back to the figure, the high level routine then continues at step . At this step, the table format object is executed in response to a client request to format the HTML table for the dynamic page being generated. In particular, the request object and the data object (the data source) to be formatted are passed in to the tableFormatter, which then formats the table for use in the page. Thus, at runtime, the routine responds to the client request to the .jsp servlet, creates the HTML table and populates the table according to the properties set (at step ) in the table format object. This functionality, described as tableFormatter.format(request, dataObject), is described in more detail in the flowchart of FIG. .","The routine begins at step  in response to the client request. At step , an instance of the table format object receives the HttpServletRequest object and a dataObject that is to be formatted as input. At step , the table format object uses the rawDataGetter (as will be described below) to extract from the dataObject the data (from the specified data source) for each table cell and the headerNames for each of the columns and rows in the table. The routine then continues at step  with the table format object formatting the tableCellRawData according to its column formatters, which may include, for example, currency formatter ($, yen, or the like), date formatter, and the like. Step  may be effected using one or more formatbeans. The routine then continues at step  with the table format object attaching table, row, column and cell attributes to all individual table cell data according to the properties settings, which may include, for example, font, prefix, color, highlights, and the like. Among other things, this step allows conditional highlighting of given cell data on a per attribute basis. At step , the table format object attaches the attributes to each HeaderName. The routine then continues at step  with the table format object outputting the formatter table according to a tablestyle setting. These settings include, for example, DEFAULTHEADER_TABLESTYLE, LEFTHEADER_TABLESTYLE, RIGHTHEADER_TABLESTYLE, or BOTTOMHEADER_TABLESTYLE. The LEFTHEADER_TABLESTYLE setting rotates the whole table to the left. The RIGHTHEADER_TABLESTYLE rotates the whole table to the left. The BOTTOMHEADER_TABLESTYLE setting rotates the whole table upwards. Using the style settings, the table format object may selectively alter the orientation of the generated table on a dynamic basis. Step  completes the processing in response to the client browser request. The result of this process is an HTML table for a dynamically-generated server page.","The following is a more detailed description of several of the features of the inventive table formatter.","As described above, to produce a formatted table, one must first obtain the data from input object(s). The way to access the data typically is different depending on the implementation of those objects. The rawDataGetter interface of the present invention provides a technique that separates the method of gathering raw data for a dynamic page from the steps necessary to format the data. This interface allows developers to access data in the way they want, and then to apply formatters (e.g., Java\u2122 base classes) on the raw data. In particular, the rawDataGetter interfaces multiple data sources to the table format object so that third parties may plug in different ways to get their data out of various types of data object(s).","In a preferred embodiment, raw data is accessed using the so-called JSPTableRawDataGetter interface, which includes a setter and a getter for tableRawDataGetter on the JSPTableFormatter. A setter enables setting of an object that implements the interface, while a getter enables the retrieving of the last object that was set. A default implementation for the rawDataGetter handles indexed properties or collections. The interface may also include rawDataGetters for accessing data via a property path or through multiple Java\u2122 objects such as JavaBeans. These rawDataGetters cover a large number of cases. For special cases, developers may customize the rawDataGetter to read their special input objects. As a result, page developers thus implement the input to suit their design and provide the implementation of the JSPTableRawDataGetter to access their input inside a JSPTableFormat Class.","The following is the JSPTableRawDataGetter interface that a third party may implement to obtain raw data from its data sources:\n\n",{"@attributes":{"id":"P-d0e1511","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* *"]},{"entry":[{},"\u2009* @param object the data object for formatting."]},{"entry":[{},"\u2009* @param tableFieldTokens a vector of fields in a"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"table."]},{"entry":[{},"* @return a two dimensional array of object."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009*\/"]},{"entry":[{},"public Object [ ] [ ]"]},{"entry":[{},"getTableRawData (Object object,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Vector tableFieldTokens);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* *"]},{"entry":[{},"\u2009* @param object the data object for formatting."]},{"entry":[{},"\u2009* @param tableFieldTokens a vector of fields in a"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"table."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009* @param preferHeaders an array of customized"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"header names."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009* @return an array of header strings."]},{"entry":[{},"\u2009*\/"]},{"entry":[{},"public String [ ]"]},{"entry":[{},"getTableRawDataHeader (Object object,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Vector tableFieldTokens,"]},{"entry":[{},"String [ ] preferHeaders);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public boolean"]},{"entry":[{},"acceptType(Class aClass);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The following code represents an illustrative"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"implementation for the interface:"]},{"entry":[{},"Public class SimpleRawDataGetter implements"]},{"entry":[{},"JSPTableRawDataGetter"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public Object [ ] [ ]"]},{"entry":[{},"getTableRawData (Object object,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Vector tableFieldTokens)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2003return (Object [ ] [ ] object;"]},{"entry":[{},"}"]},{"entry":[{},"public String [ ]"]},{"entry":[{},"getTableRawDataHeader (Object object,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Vector fieldTokens,"]},{"entry":[{},"String [ ] headerNames)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2003return headerNames;"]},{"entry":[{},"}"]},{"entry":[{},"public bookean"]},{"entry":[{},"acceptType (Class aClass)"]},{"entry":[{},"55 "]},{"entry":[{},"\u2003if (aClass.equals (Object [ ] [ ] .class)) {"]},{"entry":[{},"\u2003\u2003return true;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003return false;"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In this example, the getTableRawData method creates a two-dimensional array of objects for the table and then loops through a vector of data field tokens to obtain the entries. The getTableRawDataHeader method then passes in the data object, the column indicators and the preferred header names (unless the data object dictates otherwise). It should be noted that the implementation of JSPTableRawDataGetter to allow JSPTableFormat to accept a two dimensional array is not meant to be limiting. This embodiment is shown merely to illustrate how easy it is to extend the JSPTableFormat bean to accept new object types. A page developer may readily supply implementations for other data source inputs including, without limitation, JDBC ResultSets or SQLJ Cursors.","Thus, the raw data acquisition interface affords developers freedom to gather data in the way they want and to populate dynamic HTML tables with that data. Unlike the prior art, developers do not need to change their design to use the table formatter. If, for example, they use standard Java\u2122 beans as their data beans, the default rawDataGetter can be used. Moreover, the interface provides flexibility to enable the developer to implement a custom way of accessing data. Thus, for example, if one wants to obtain data from a given database, all the developer need do is to write his or her own rawDataGetter Java\u2122 object. This developer-defined rawDataGetter object, which may be identified as JSPDataBaseRawDataGetter.java, then implements the JSPTableRawDataGetter to carry out the three methods in the interface. Those methods then obtain the data for a table and its headers. Thus, to activate the rawDataGetter in the JSPTableFormatter, the developer simply adds the above-illustrated code in his or her .jsp page. When the page request is received, the table formatter formats the data obtained from the JSPDataBaseRawDataGetter defined by the page developer. In this way, the invention provides an interface that can be used by third parties to plug-in ways to get data out of well-known or specialized data objects.","The present invention also enables a page author to establish conditions under which a given cell's data may be highlighted in some manner. In a simple example, if the page being returned includes an online bank statement, a table cell identifying the customer's checking account may be selectively highlighted if the data therein indicates that the account has less than a given amount (e.g., below $500). The purpose of conditionally highlighting given cell data is to draw the user's attention to the field.","To accomplish this function, the table formatter implements very flexible row, column and cell prefix\/suffix property methods. These methods allow page developers to overwrite default values and to specify the row number or column number in the dynamic table to set extra property information for a cell that satisfies a given condition. Preferably, this condition is then checked every time the dynamic page is formatted.","As noted above, the JSPTableFormatter formats dynamic data and produces the HTML table. Developers can extend the get prefix\/suffix methods for row, column and cell in the table format object to dynamically control cells that satisfy given conditions. The following is illustrative code (a MyTableFormat object or bean) that may be used for this purpose. This code highlights any cell in any column of the table if the value for that cell is less than zero. Of course, this is merely an illustrative condition.",{"@attributes":{"id":"P-d0e2300","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class MyTableFormat"]},{"entry":[{},"extends JSPTableFormat"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public String"]},{"entry":[{},"getCellPrefix (int [ ] order,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int row,"]},{"entry":[{},"int column,"]},{"entry":[{},"Object obj)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (column == 3) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"double amount = ((AccountSummary)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"obj) .getItemAmount (row);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (amount < 0) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return \u201c font size=3 color=red> \u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return \u201c \u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public String"]},{"entry":[{},"getCellSuffix (int [ ] order,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int row,"]},{"entry":[{},"int column,"]},{"entry":[{},"Object obj)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (column == 3) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"double amount = ((AccountSummary)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"obj) .getItemAmount (row);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (amount < 0) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return \u201c <\/font> \u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return \u201c \u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"figref":["FIGS. 5A and 5B","FIG. 5A","FIG. 5B"]},"Thus, according to the invention, the page designer may specify how to convert dynamic data (such as the result of a database query or an application transaction) into a formatted tabular representation in which certain table cells are conditionally highlighted based on the characteristics of the dynamic data to be presented in that cell.","As noted above, another feature of the table format object provides for the generation of a single JSP\u2122 that renders a table correctly irrespective of the table's desired orientation. This is achieved by associating all the attributes, prefixes and suffixes for an individual cell. Prefixes and suffixes are any starting and ending HTML tags that are used in a given cell, column, row or header to format the respective contents thereof. Thus, for example, if the developer wants to make a given cell red, the prefix would be <font color=red> and the suffix would be <\/font>. All the table row, table column and table cell attributes, prefixes and suffixes are \u201cassociated\u201d with a particular cell by performing a union operation on the attributes, the row prefixes and suffixes, the column prefixes and suffixes, and the table prefixes and suffixes. Using the table format object, the table attributes, row attributes, column attributes, prefixes and suffixes are then prioritized in the event of overlap. In particular, the cell data (that is subject to the union operation) is ordered according to the priority that is specified on the table format object. This data is then maintained in association with the particular cell so that, when the whole table is rotated, the data stays with the cell. The data of highest priority are then expressed.","To produce a desired table rotation, the page developer then sets a table rotation property in the table format object. In particular, the tablestyle property may be set to one of a given set of variants including, without limitation, DEFAULTHEADER_TABLESTYLE, LEFTHEADER_TABLESTYLE, RIGHTHEADER_TABLESTYLE or BOTTOMHEADER_TABLESTYLE. The first property provides a default action. As noted above, the LEFTHEADER_TABLESTYLE setting rotates the whole table to the left. The RIGHTHEADER_TABLESTYLE rotates the whole table to the left. The BOTTOMHEADER_TABLESTYLE setting rotates the whole table upwards.",{"@attributes":{"id":"P-00053","num":"00053"},"figref":["FIGS. 6A-6D","FIG. 6A","FIG. 6B","FIG. 6C","FIG. 6D"]},"As described above, the JSPTableFormat bean formats data into an HTML table. The data object can be any form of a JavaBean or other similar object. In a preferred embodiment, the default implementations require that the data object be an Iterator or List of data beans implemented using properties (excluding indexed properties), or the data object may be a JavaBean implemented using indexed properties, where each index value represents a row in the table. As noted above, one can implement the JSPTableRawDataGetter interface to obtain the table raw data from customized data beans.","Preferably, there are three ways to use JSPTableFormat. One way is to create a JSPTableFormat instance in the .jsp file, set up the all necessary attributes on the instance, and then call format method on the instance. This technique was illustrated generally in the flowchart of FIG. . The second way is to produce a serialized bean manually, use a JSPLookup object to obtain an instance in .jsp file, setup the additional properties if required, and call format method on the instance. The third way is the simplest\u2014using a tableFormat customizer to setup properties visually, saving the settings as a given file type (e.g., a .ser file). Then, use JSPLookup to obtain an instance in .jsp file, and call format method on this instance. Each of the techniques is now described.","Create and setup JSPTableFormatter on .jsp file:","The following is a representative table format object illustrating how properties are set on the table format object:\n\n","The second technique for using the JSPTableFormat bean is now described. This technique begins by creating an instance of the JSPTableFormat bean, setting some properties, and then serializing the object into a file called, for example, MyLeftheaderTable. In the .jsp file, the following is then provided:\n\n",{"@attributes":{"id":"P-d0e3082","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"protected void"},{"entry":"buildingSerFile ( )"},{"entry":"{"},{"entry":"JSPTableFormat table = new JSPTableFormat( );"},{"entry":"table.setTableAttributes (\u201c bgcolor=#cccccc align=center border=0\u201d);"},{"entry":"table.setHeaderAttributes (\u201cBGCOLOR=#b0c4de\u201d);"},{"entry":"table.setTableStyle (JSPTableFormat.LEFTHEADER_TABLESTYLE);"},{"entry":"table.setFields(\u201citemWithdrawal, itemBalance, itemDeposit, itemAmount,"},{"entry":"itemDate\u201d);"},{"entry":"table.setFormatString (\u201cNumberFormatCurrency, NumberFormatCurrency,"},{"entry":"NumberFormatCurrency, NumberFormatCurrency, DateFormatshort\u201d);"},{"entry":"try {"},{"entry":"FileOutputStream fileOutputStream = new FileOutputStream(path + \u201c\/\u201d +"},{"entry":"\u201cMyLeftHeaderTable\u201d);"},{"entry":"ObjectOutputStream out = new ObjectOutputStream(fileOutputStream);"},{"entry":"out.writeObject (jspTableFormat);"},{"entry":"out.flush ( );"},{"entry":"fileOutputStream.close ( );"},{"entry":"} catch (Exception e) {"},{"entry":"e.printStackTrace ( );"},{"entry":"throw new Error(\u201cUnable to produce .ser file\u201d);"},{"entry":"}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The two techniques described above produce the same table. Nevertheless, if an attribute value is misentered, the table may not look as the developer intended. Worse, if a property name for a field is not entered correctly or a format string for a data type is mismatched, the table may not be generated at all. To overcome these difficulties, the third technique involves use of a FormatBeanCustomizer that allows the developer to set up all attributes visually and then save the result to a serialized file. The table may then be created by the following.jsp file:\n\n","As is well known, the JSP\u2122 Format Bean Library consists of a rich set of helper beans supporting JSP\u2122 scripting. It makes tedious or complex operations very simple to code. With the JSPTableFormatCustomizer, the page author can instantiate a sophisticated dynamic table by modifying a single line of code in the .jsp template to point to a serialized table formatter. In addition, the page author can extend the JSPTableFormat to format any type of data in any way that is desired.","To produce a sophisticated table, the developer may configure a set of properties on the JSPTableFormat bean as has been described. The JSPTableFormatCustomizer is a tool that simplifies this formatting.","The JSPTableFormatCustomizer makes JSPTableFormat configuration very simple. The developer visually configures his or her dynamic table to produce a similarly patterned JSP\u2122 table.",{"@attributes":{"id":"P-00081","num":"00081"},"figref":"FIG. 7","b":["700","702","704","706"]},"In each of the six types of cells the developer may set color, font size, text style (normal, bold, italics), and alignment (right, left, center). For the dynamic data and HeaderName cells, preferably these attributes only affect the current cell. For the ColumnProperty, Row\/HeaderRow, and TableInfo, preferably the attributes affect the cells in the column, row, or table, respectively. Preferably, the final color of the cell is used by the table formatter in the JSP\u2122 page.","Preferably, the TableInfo cell gives the developer control over an entire table. As noted above, the TableStyle cell allows the developer to rotate the layout of the table at JSP\u2122 runtime. To select a Data Object, the user first selects DataObject Property Type and then clicks the Browse button. The user may then select a class file from the file dialog as the data object. The indicated properties of the selected data object are now available to choose in the ColumnProperty cells. The Reset button resets the whole table. The ColumnProperty cell allows the developer to specify the object properties or index properties that will fill that column's data cells. After the developer has chosen an object property to represent a column, then he or she may chose an appropriate FormatBean to format the data. For example, if the property assigned to this column is a float, one could format the value with the NumberFormatGeneral, NumberFormatCurrency, NumberFormatPercent, or the String, but not, for example, with the DateFormat bean.","If the Header Location in the TableInfo cell is Top or Bottom, then the HeaderRow allows the developer to specify a repeating header. The HeaderName cell allows the developer to name each column. The dynamic data, HeaderName, Row, and HeaderRow preferably only have customizable color, font, and alignment attributes.","When the developer has completed the process, the customization may be saved in two ways, Save as .ser, and Verbose Save. The Save as .ser produces a serialized file of the customized JSPTableFormat bean.","It also provides a skeleton JSP\u2122 file that instantiates an instance using JSPLookup and calls format on the data object that the developer needs to provide (and which is obtained through the rawDataGetter): Partial JSP\u2122 output from Save as .ser",{"@attributes":{"id":"P-00087","num":"none"},"ul":{"@attributes":{"id":"ul200005","list-style":"none"},"li":["<%","JSPTableFormat jspTableFormat=new (JSPTableFormat) JSPLookup.lookup(\u201ccom.ibm.jsp.samples.AccountSummaryTablel\u201d);","<%=jspTableFormat.format(request, dynamicData) %>\n\nThe Verbose Save produces a JSP\u2122 page with the JSPTableFormat bean and properties set just as if the developer had written the code directly: Listing . Partial JSP\u2122 output from Verbose Save\n","<%","JSPTableFormat jspTableFormat=new JSPTableFormat( );","jspTableFormat.","setTableAttributes(\u201cBGCOLOR=#c8c8c8 ALIGN=CENTER BORDER=0\u201d);","jspTableFormat.setHeaderOn(true);","jspTableFormat.setTableStyle (JSPTableFormat.LEFTHEADER_TABLESTYLE);","jspTableFormat.setHeaderAttributes (\u201cBGCOLOR=#00cccc ALIGN=CENTER\u201d);","jspTableFormat.setHeaderPrefix(\u201c<B>\u201d);","jspTableFormat.setHeaderSuffix(\u201c<\/B>\u201d);","String[ ] headerCellNames=new String[4];","headerCellNames[0]=\u201c \u201d;","headerCellNames[1]=\u201cWithdrawal\u201d;","headerCellNames[2]=\u201cDeposit\u201d;","headerCellNames[3]=\u201cDate\u201d;","jspTableFormat.setHeaderCellNames(headerCellNames);","Vector fields=new Vector( );","fields.addElement(\u201cItemLabel\u201d);","fields.addElement(\u201citemWithdrawal\u201d);","fields.addElement(\u201citemDeposit\u201d);","fields.addElement(\u201citemDate\u201d);","jspTableFormat.setVectorFields(fields);","String[ ] formatBeanNames=new String[4];","formatBeanNames[0]=\u201c \u201d;","formatBeanNames[1]=\u201ccom.ibm.jsp.NumberFormatCurrency\u201d;","formatBeanNames[2]=\u201ccom.ibm.jsp.NumberFormatCurrency\u201d;","formatBeanNames[3]=\u201ccom.ibm.jsp.DateFormatLong\u201d;","jspTableFormat.setFormatBeans(formatBeanNames);","String[ ] columnattributes=new String[4];","columnAttributes[0]=\u201cBGCOLOR=#00cccc ALIGN=CENTER\u201d;","columnAttributes[1]=\u201cBGCOLOR=#ffffcc ALIGN=RIGHT\u201d;","columnAttributes[2]=\u201cBGCOLOR=#ffccff ALIGN=RIGHT\u201d;","columnAttributes[3]=\u201cBGCOLOR=#ccffcc ALIGN=CENTER\u201d;","jspTableFormat.setColumnAttributes(columnAttributes);","%>","<%=jspTableFormat.format(request, dynamicData) %>"]}},"For illustrative purposes, the state of the customizer tool for the above code listing is shown in , and the respective dynamic table is shown in FIG. .","For a Java\u2122programmer who is not an HTML expert, it is not always easy to completely understand the behaviors of the attributes in a dynamic table that is going to be manipulated, for example, by conditional cell highlighting, horizontal or vertical rotation, or the like. Typically, a page author or programmer has available documentation that contains the HTML table attributes, but this documentation does not show the relations of the attributes. Thus, the documentation is not at all useful if the developer is attempting to understand the attribute behaviors and the potential for conflict.","The present invention addresses this deficiency in the art by generating a so-called table attribute chart, which includes a visual representation of what the output of the dynamic table will look like, and then linking each attribute in the chart to given information (about the attribute) in the table format object's documentation. Preferably, both the table attribute chart and the table format object's documentation are available in a markup language (such as HTML) and are accessible via conventional viewing software, e.g., a web browser (e.g., Netscape Navigator, Internet Explorer, or the like). Linking between the table attribute chart elements and the corresponding data and information in the format object's documentation using conventional hypertext anchors.",{"@attributes":{"id":"P-00129","num":"00129"},"figref":["FIG. 10","FIG. 11"]},"In a preferred embodiment, the bidirectional linking between the table attribute chart and the table format object documentation is effected using bidirectional links that conform to the World Wide Web Consortium's XML Linking Language, commonly referred to as XLink. XLink describes the use of so-called multidirectional links. A multidirectional link is a link whose traversal can be initiated from more than one of its participating resource. A participating resource is a resource that belongs to a link. In the context of the present invention, the table attribute chart and the table format object documentation are each participating resources, and the link is bidirectional as described above.","Linking between the table format object documentation (called JSPTableFormatter javadoc) and the table attribute chart maps the table attribute property methods to HTML table attribute definitions visually. From the javadoc to the chart, one can see how the table attribute property methods affect the HTML table. From the chart to the javadoc, the developer can ascertain which property needs to be set to produce a desired table. This technique affords the developer a clear view of the attribute behaviors as well as information about how to resolve potential conflicts.","The technique of establishing bidirectional links between a set of data representations may be generalized beyond the use with the dynamic table documentation as described above. More generally, it is known that technical documentation must explain concepts that are best communicated using very different presentations. For example, one concept might be best communicated with a graphic representation that shows relationships (such as ordering constants) between different elements of the topic of concern. Another concept might be best communicated in a text description in which each element in the topic of concern is separately discussed. The present invention provides a technique to leverage hypertext linking (such as is supported in HTML web browsers) to allow the reader to navigate electronically between the different presentation formats thus allowing the reader (the page developer) to navigate electronically between these formats. This allows the developer to produce different presentation of concepts concerning a particular element of the topic of concern more efficiently. As a result, the quality of the presentation and the reader's understanding of the material is improved.","As noted above, the inventive table formatter mechanism is preferably implemented in or as an adjunct to a web server, Thus, the invention does not require any modifications to conventional client hardware or software. Generalizing, the above-described functionality is implemented in software executable in a processor, namely, as a set of instructions (program code) in a code module resident in the random access memory of the computer. Until required by the computer, the set of instructions may be stored in another computer memory, for example, in a hard disk drive, or in a removable memory such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive), or downloaded via the Internet or other computer network.","In addition, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps.","Further, as used herein, a Web \u201cclient\u201d should be broadly construed to mean any computer or component thereof directly or indirectly connected or connectable in any known or later-developed manner to a computer network, such as the Internet. The term Web \u201cserver\u201d should also be broadly construed to mean a computer, computer platform, an adjunct to a computer or platform, or any component thereof. Of course, a \u201cclient\u201d should be broadly construed to mean one who requests or gets the file, and \u201cserver\u201d is the entity which downloads the file.","Having thus described our invention, what we claim as new and desire to secure by Letters Patent is set forth in the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention and the advantages thereof, reference should be made to the following Detailed Description taken in connection with the accompanying drawings in which:",{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIGS. 6A-6D"},{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 10"},{"@attributes":{"id":"P-00030","num":"00030"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"P-00031","num":"00031"},"figref":"FIG. 12","b":"11"}]},"DETDESC":[{},{}]}
