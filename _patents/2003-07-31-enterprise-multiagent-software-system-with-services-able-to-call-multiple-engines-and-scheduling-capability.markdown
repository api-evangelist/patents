---
title: Enterprise multi-agent software system with services able to call multiple engines and scheduling capability
abstract: A system and techniques are disclosed to provide a multi-agent software environment. The system provides several service modules that may be used by software programs to accomplish specific tasks. In one illustrative example, a first program module includes instructions to call core service software modules. The exemplary system further includes a second program module including instructions to call one of multiple intelligent service software modules. In some examples, an intelligent service software module includes program instructions that when executed perform an intelligent service function that includes execution of an intelligent engine. In some examples, the intelligent engine is callable by at least two of the intelligent service software modules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437703&OS=07437703&RS=07437703
owner: SAP AG
number: 07437703
owner_city: Walldorf
owner_country: DE
publication_date: 20030731
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60\/421,650, filed on Oct. 25, 2002.","This disclosure relates to an enterprise multi-agent software system.","Generally, an enterprise multi-agent software system is used to denote a particular arrangement of data structures, algorithms, and control flows, which agent\/systems (e.g. computer programs) use to decide what task to execute. Agent systems may be characterized by the nature of their decision-making. Example types of software agent systems include logical-based systems in which decision making is achieved via logical deduction, reactive systems in which decision making is achieved via a mapping from perception to action, belief-desire-intention systems in which decision making is viewed as practical reasoning of the type that we perform every day in furtherance of our goals, and layered multi-agent systems in which decision making is realized via the interaction of a number of task accomplishing software layers.","A computer system and techniques are disclosed to provide a multi-agent software environment. The computer system has several service modules (core service modules and intelligent service modules) that may be used by software programs, such as agent systems, to accomplish specific tasks.","For example, according to one aspect, the computer system includes core service software modules, intelligent service modules, and software programs. Each core service software module has program instructions that, when executed, perform core service functions that interact with a data source. Each core service software module also is callable by a software program module, and when called, the called core service software module provides information identifying a core service function to be performed and information identifying a data object upon which the identified core service function is to be performed.","Each intelligent service software module has program instructions that, when executed, perform an intelligent service function that includes the execution of an intelligent engine. Each intelligent service software module also is callable by a software program module, and when called, the called intelligent service software module is provided with information identifying an intelligent service function to be performed and information identifying parameters to be used during the performance of the intelligent service. Each software program, for example an agent system, has a set of program modules including instructions that, when executed, call at least one of the core service and the intelligent service software modules.","In another aspect, the system also includes organization service software modules. Each organization service software module has program instructions that, when executed, perform organization service functions that manage at least one software program module. Each organization service software module also is callable by the software program module, and when called, the called organization service software module is provided with information identifying the organization service function to be performed and information identifying the software program module upon which the identified organization service function is to be performed.","In some embodiments, one or more of the following advantages may be present. For example, multi-agent enterprise systems may play a decision-support role for a help-desk users interacting with customers in a more efficient and effective manner. Software agents may assist the help-desk user to identify problems and match solutions so that even inexperienced help-desk users may deliver the highest quality of service as expert help-desk users.","An additional benefit of the system relates to customer self-service. Software agents deployed in this system may directly interact with customers to provide solutions without human involvement. As a result, the system may reduce help-desk cost, increase the quality of 24-hour service, maintain service consistency via preserved expertise, and assure proper responses via tracking all the customer interactions.","A further benefit of the system relates to proactive awareness. Software agents may play a role to initiate a series of interactions with an application, another software agent, or an end-user to provide a user-oriented service or sell experience.","An additional benefit of the system may relate to knowledge discovery. Software agents may play a computational role to extract knowledge via exploration and identification of useful patterns from customer behavior and user interactions.","Additional features and advantages will be readily apparent from the following descriptions and attachments.","Like reference symbols in the various drawings indicate like elements.","As shown in , a multi-agent enterprise system is disclosed. The system provides a set of software modules that may be used as building blocks for constructing software agents as well as a set of software modules that support a multi-agent environment.","Referring to , components of the system include a knowledge repository , intelligent engines , intelligent services , enterprise application agents , core services  and organization services .","Referring to , knowledge repository  provides a generic framework to migrate, synchronize, and aggregate stored knowledge from multiple and distributed data sources for use by enterprise application agents. Stored knowledge may be represented in the system in a knowledge base . Knowledge base  may be a collection of business entities mapped to business data that are meaningful in business processes. In one embodiment, knowledge base  may include data structures that include pointers to collections of documents. For example, pointers may refer to electronic mail (e-mail messages), web pages, and business documents that may be searched and organized by enterprise application agents. The structure of knowledge within knowledge base  may be varied from free-form text to hierarchy attributes and include static as well as dynamic structures. Although only a single knowledge base  is illustrated in , knowledge repository  may be configured to support multiple knowledge bases.","In some embodiments, knowledge repository  provides a conversion service  that may flexibly manage the structures contained in knowledge base . In addition, knowledge repository  may provide a full generation process  that may manipulate and extend contents of knowledge base . For example, in external systems that store new electronic data sources, knowledge base  may be extended to incorporate access to such new data by enterprise application agents. Knowledge repository  may also provide an auto-generation process  that provides zero-maintenance for data synchronization. For example, as external data represented by knowledge base  is modified by external means, auto-generation process  may automatically modify knowledge representations in knowledge base .","One advantage of providing knowledge repository  within the system may be that enterprise application agents may process information independent of underlying data source structures. Another advantage of providing knowledge repository  may relate to a known and defined interface for application agents. Processes employed by enterprise application agents may be completely encapsulated inside knowledge base components so that enterprise application agents need not interpret underlying data structures.","Referring to , intelligent engines  provide software components that allow application agents to integrate technologies developed from artificial intelligence and data-mining. Each intelligent engine  may have its own well-defined functionality, operate independently, and process data from knowledge bases stored in knowledge repository . Typically, each intelligent engine  may have associated with it one or more intelligent services .","Referring to , in one embodiment, six different intelligent engines are disclosed. The engines include a search engine , text-mining engine , learning engine , knowledge discovery engine , optimization engine , and planning engine . Although six intelligent engines are illustrated in , the disclosure is not limited to only six.","Search engine  is provided which may be used to search the content of particular knowledge bases. Search engine  may point to one or more knowledge bases and process search queries using free form texts or structured formats. Search engine  may store indexes of terms from a set of documents that may later be retrieved quickly based on term-document relationships.","Search engine  may be composed of a free text search interface that performs a query-based free-text search against one or more knowledge bases, an attribute search interface that performs a search by exactly matching a set of attributes, a Boolean operation interface that defines a set of Boolean operations on top of search queries, a case-based search interface that retrieves a set of cases based on computations of similarity, a translated search interface that translates a search query into a different language, an interpreted search interface that interprets a search query based on a pre-defined ontological map which describes the concepts and relationships among a set of terms, a compilation interface that may be used to compile a corpus or index for a specific knowledge base, a search refinement interface that may apply techniques to refine search results, and a search expansion interface that applies a strategy to expand search results. In one embodiment, the SAP TREX search engine may be used as a default search engine. In other embodiments, web-based search engines (e.g., Yahoo, Excite, AltaVista, etc.) may be incorporated into the system to search the World Wide Web.","Text-mining engine  is provided which explores and identifies patterns from unstructured texts. For example, a business process may need to cluster documents into multiple classes based on the similarity of document contents, or generate a topic map automatically based on document contents.","Learning engine  provides a generic learning interface to learn pre-defined tasks using various machine learning technology. Due to the significant variation in learning methods, learning engine  may be designed as a generic wrapper wherein one or more learning algorithms may be developed and implemented separately. For example, learning engine  may need to incorporate supervised, unsupervised, case-based, association-based, sequence-based, statistic-based learning algorithms into various business processes.","Knowledge discovery engine  is provided to discover patterns from a large amount of data using data-mining technology. The basic interface supported for knowledge discovery engine  may include data cleansing, clustering, hierarchical clustering, classification, feature selection (identify variables with predictive power), qualitative modeling (identify structure and relationships among variables, e.g., decision trees, rules, or structures), quantitative modeling (mathematical models), prediction, and sensitive analysis (robustness of models via simulation). In one embodiment, knowledge discovery engine  has a special interface extension for time-series analysis that may be processed differently compared to non time-series analysis.","Optimization engine  is provided to solve optimization problems with pre-defined object functions and constraints. Solving linear, nonlinear, Boolean, and constraint-based optimization problems may require the use of different algorithms. Optimization engine  is designed to work with generic mathematical forms needed to solve such optimization problems. Optimization engine  is also designed to interface with external optimization engines.","Planning engine  is provided that may, given a set of goals, a set of known information, and resource constraints, search possible plans which are either optimal in a mathematic definition or approximately optimal if no plan may be found to meet all constraints. In one embodiment, planning engine  may utilize a stochastic process to simulate the uncertainty of information while evaluating various plans. In other embodiments, the uncertainty of information may be modeled via statistical distributions based on previously collected historical information. The sensitivity of plans may be evaluated and quantified by adjusting distribution parameters.","Intelligent services  are provided that interface to one or more intelligence engines as generic components. By interfacing with each intelligent engine as a generic component, intelligent services may modify intelligent engine inputs and parameters such that different results from the same intelligence engine may be achieved. For example, optimization engine  may be re-used for decision analysis, problem scheduling, and visualization layouts by manipulating optimization engine  parameters. In this example, three intelligent services may be built on top of optimization engine  to achieve different tasks that may be applied to different business processes. One advantage of this design may be that enterprise application agents may use different intelligent services that rely upon the same intelligent engine and thus provide additional functionality to solve specific business problems.","In one embodiment, referring to , intelligent services  may be structured into two service categories: design-time intelligent services  and run-time intelligent services . In one embodiment, design-time intelligent services  process data in batch mode and provide resultant information for run-time intelligent services. Design-time intelligent services  may be triggered automatically by a scheduled batch job using one of the services in core services component . Design-time intelligent services  include a compilation service , clustering service , adaptation service , pattern recognition service , optimization service , and a plan generation service .","Compilation service  provides a generic service that may retrieve contents of a knowledge base  defined in knowledge repository , convert the content of knowledge base  to proper format and create an index into search engine . Compilation service  also provides an interface to delete an existing search index, compile a full knowledge base, compile delta changes of a knowledge base and schedule batch jobs to automatically execute compilation tasks.","Referring to , in one embodiment, a methodology for compilation service  is disclosed. Initially, compilation service  may load configuration parameters  that indicate the location of a particular search engine, as well as access related information regarding search engine availability. Next, compilation service may determine whether to modify an index , create an index , or delete an index  based on parameters passed from application agents . If compilation service  determines that an index is to be deleted, compilation service  may delete the existing index in the search engine  by accessing search indexes , creating an action entry  representing the deletion, and storing the action entry in a compilation log . If compilation service  determines that an index is to be created , compilation service  may create a new index  by associating the new index with the search engine , creating an action entry  representing the addition, and storing the action entry in compilation log .","If compilation service  determines that a modification of an index is required , compilation service  may first retrieve business content from knowledge repository  in one or more sets of information . Next for each set of business entity information retrieved, compilation service  may retrieve individual business entity details , convert business entity content to text  using core services , convert business entity content to attributes  (e.g. author, creation date, etc.) using core services , and determine for each business entity retrieved whether an index update operation is required based on a business entity status  retrieved from knowledge repository . Once the final business entity in a set is processed , compilation service  may process subsequent sets of business entities  until all the sets have been processed. Next, compilation service  may aggregate information relating to the number of business entities that have been added, updated or deleted to an index , create an action entry  and store the action entry in compilation log .","Clustering service  provides a generic service that may create multiple clusters of a knowledge base based on content similarity. Clustering service  provides information relating to the similarity between large volumes of information. For example, clustering service  may aggregate information in a knowledge base into hierarchical clusters by grouping information into a set of clusters with a parent cluster at its center, or divide an already existing set of clusters into smaller sets of clusters with additional parent clusters.","Referring to , in one embodiment, a methodology for clustering service  is disclosed. Initially, clustering service  may load configuration information  that may indicate service initialization information. Next, clustering service may determine the type of clustering algorithm to be used for a specific knowledge base. In some embodiment, the clustering algorithm to use may be passed to clustering service  as input from application agents. Next, clustering service  may determine whether an index exists  for a particular knowledge base. If an index does not exist, clustering service  may create an index  and execute indexing  of the knowledge base via compilation service . Next, clustering service  may execute the clustering algorithm  and extract characteristic features  that distinguish one class of data from another. Next, clustering service will store these characteristic features  in a database, gather statistics relating to the process  (e.g. the number of additional classes that may be generated based on the clustering) and store these statistics in a clustering log .","Adaptation service  provides a generic service for learning engine  to adapt to new information. The adaptation of learning engine  may be configured via various approaches based on observational data formats or relationships to be adapted. In one embodiment, adaptation service  may have a generic API that may easily integrate with one or more learning engines depending upon the type of learning to be accomplished.","Referring to , in one embodiment, a methodology for an adaptation service is disclosed. Initially, adaptation service  may access configuration information  relating to learning engine  as well as learning parameters. Next, adaptation service  may collect new information  from application agents  and select an appropriate learning algorithm  based on the nature of the new information. In some embodiments, adaptation service  may receive appropriate learning algorithms from application agents  as input. Next, adaptation service  may determine learning parameters  (e.g. speed of learning for the learning engine). In some embodiments, learning parameters also may be passed from application agents . In other embodiment, learning parameters may be stored in configuration information for the adaptation service. Next, adaptation service  may submit both the new information collected and learning parameters  to learning engine  for processing. Next adaptation service  determines whether a sensitivity analysis is requested . Sensitivity analysis may be used to determine the impact of the new information on learning engine behavior. If sensitivity analysis is selected, adaptation service  may load test input patterns  and retrieve learning engine output  based upon submitted information. Sensitivity analysis may also be conducted by generating small variations of input patterns to check the robustness of a learning engine. Next, adaptation service  may compare test input patterns to learning engine output . In some embodiments, adaptation service  may use the results of the comparison and match that comparison to criteria for raising an alert .","Pattern recognition service  provides services to explore and identify meaningful patterns. In one embodiment, pattern recognition service  may have a heuristic rule engine which may automatically determine which knowledge discovery engine  should be used under what kind of data population. Also, pattern recognition service  may start with trial algorithms and determine steps for different knowledge discovery tasks. In some embodiments, data cleansing techniques may be implemented to remove outlier data from datasets so that knowledge discovery engine  may recognize meaningful patterns. In other embodiments, advanced data cleansing techniques may be utilized by pattern recognition service  to check the consistency and reliability of data based on pre-defined data integrity rules. Most of the actions require statistical information computed from the data set, which may be retrieved from one or more knowledge bases.","Referring to , in one embodiment, a methodology for pattern recognition service  is disclosed. Initially, pattern recognition service  may load configuration information  relating to the location of input data and knowledge discovery engine . Next, pattern recognition service  may import data  from knowledge repository  and transform the data  as may be required. For example, in some problem domains, there may be a requirement to transform a particular classification of data (e.g. alphabetic representation of data to numeric representation). Next, pattern recognition service  may process any missing data from the import data . For example, in time series data, missing dates may be filled with a calculated average for present data points. Next, pattern recognition service  may identify outlier data  in the import data from knowledge repository . In some embodiments, pattern recognition service  may build a data distribution from import data and determine whether a particular data point should be included or excluded depending upon the data points statistical significance to the data distribution. Next, pattern recognition service  may normalize the data  and perform a cross validation process . In some embodiments, the cross validation process prevents over fitting of data by dividing normalized data into different data sets and randomly selecting from these data sets values to be passed to a knowledge discovery engine. Next, pattern recognition service  may select algorithms for identifying patterns  in the import data. In some embodiments, pattern recognition service  may receive the pattern identification algorithms from application agents . Next, pattern-recognition service  may start pattern recognition  by executing knowledge discovery engine  for each data set generated during cross validation. Upon processing of all the cross validated data sets, pattern recognition service  evaluate the accuracy  generated by various pattern-recognition algorithms used by knowledge discovery engine  as well as evaluate the predictability of various pattern-recognition algorithms  by comparing results from knowledge discovery engine  to test data. Next, pattern recognition service  may generate a prediction model  based on the predictability of various pattern-recognition algorithms.","Optimization service  formulates mathematical equations representing goals for a particular optimization problem and may select and execute a particular optimization engine  to achieve such goals. Optimization service  provides guidance to users on how optimization problems may be formulated, what types of assumptions may be made, and how realistic the problem formulation may be to actual problems. Optimization service  may guide the user to construct quantitative formulae by generating object functions and constraints.","Referring to , in one embodiment, a methodology for optimization service  is disclosed. First, optimization service  may import problem definitions  that may be stored in configuration files. Next, optimization service may bind variables  stored in problem definitions with data representations stored in knowledge repository . Next, optimization service  may generate executable code that represents the problem definition . In some embodiments, optimization service  may generate programming objects (e.g., Java classes) that describe the problem definitions. Next, optimization service  may determine optimization algorithms that may be used to solve the particular problem. In some embodiments, optimization service  may receive the optimization algorithm as a parameter from application agents . In other embodiments, optimization service  may prioritize optimization algorithms based on the goal initially defined depending upon the suitability of selected algorithms to the optimization problem. In addition, the service may use one or more optimization algorithms in a hybrid fashion based on a particular set of conditions or criteria. Next, optimization service  may determine optimization parameters  (e.g., parameters indicating when to terminate execution of an optimization engine) to be used during the optimization process. Next, optimization service may initiate the optimization process  by executing optimization  and passing optimization parameters and an optimization algorithm as input. Upon completion of optimization engine execution, optimization service  may next evaluate optimization solutions  provided by optimization engine . For example, in some embodiments, optimization engine  may produce a set of solutions and optimization service  may select which solution of the set is most optimal by utilizing one or more mathematical algorithms. In some embodiments, optimization service  may monitor the progress of the optimization engine , and determine that different tuning parameters should be used during optimization engine  executions to assure that one or more solutions are found with reasonable accuracy.","Next, in some embodiments, optimization service  may then check decision boundaries . For example, in some embodiments, there may be several constraints and some solutions generated by optimization engine  may be more suitable than others under certain conditions. Next, optimization service  may then generate a decision model  based on the evaluation of solutions and decision boundary analysis.","Plan generation service  is provided that may direct individual agent functionality to achieve a goal based on observation of environment changes and feedback from other software agents.","Referring to , in one embodiment, a methodology for plan generation service  is disclosed. Initially, plan generation service  identifies a goal (e.g. an objective, plan) based on input from one or application agents . Next, depending upon the complexity of the plan, plan generation service  may decompose the goal  into several sub-plans so that a plurality of software agents may work simultaneously on reaching the goal simultaneously. Next, plan generation service  may bind particular software agents to sub-plans  based on the agent organizational hierarchy by using organization services . Next, plan generation service  may determine agent control policy  for binded agents by using organization services  so that resources may be distributed efficiently. Next, plan generation service  may fit and generate data distributions  from historical data  and simulate a plan  for execution by planning engine . Upon execution completion of planning engine , plan generation service  may evaluate plan performance  by comparing planning engine output to expected results. In some embodiments, plan generation service  may execute a sensitivity analysis wherein the simulated plan may be modified slightly to determine the effect on engine output. Next, plan generation service determines whether plan goals have been met . If plan goals have been met based on the evaluation of planning engine output, plan generation service  generates a plan .","Run-time intelligent services  are software modules that may be used by enterprise application agents  to accomplish assigned business tasks. Referring to , run-time intelligent services  include a query service , classification service , recommendation service , prediction service , decision service , and a plan adjustment service .","Query service  provides a set of application programming interfaces (\u2018APIs\u2019) that allow enterprise application agents  to compose search queries based on free-form text or data attributes. The Query service  also provides a set of search methods that may be used in the search query including a fuzzy search, linguistic search, exact-term search, and Boolean search to retrieve relevant information from knowledge repository .","Referring to , in one embodiment, a methodology for query service  is disclosed. Initially, query service  may access configuration information  relating to search engine  parameters and learning engine  parameters. Next, query service  may determine which search methods are supported by a particular language . For example, different languages may require different search methodologies. Next, query service  may collect input for free text searches , collect input for exact phrase searches , and collect inputs for either including or excluding specified attributes . Next, in some embodiments, query service  may process information security  relating to a query (i.e., a user need to have certain credentials established to retrieve specific information requested in a query). Next, query service  then may compose a Boolean logic query  based on the collected inputs and submit the Boolean query  to search engine . Upon completion of execution, query service  may receive search engine  output and process that output as a hit list . In some embodiments, query service may also refine the search engine  results and pass refined search results to learning engine  for recommendations . In addition, query service  may also access personal preferences  as input and refine search results based on those personal preferences . For example, search results may be sorted in a manner such that certain search results are always presented first in the hit list.","Classification service  provides a set of APIs that allow enterprise application agents  to pass text input descriptions into text mining engine  to classify information content stored in knowledge repository . Text-mining engine  then may compare the similarity of the input text description with the contents of a set of pre-compiled clusters stored in knowledge repository .","Referring to , in one embodiment, a methodology for classification service  is disclosed. Initially, classification service  may access a configuration information  that provides information relating to search engine  and text mining engine . Next, classification service  may transform input data into text using core services . For example, input data may be incoming e-mail or a form on the World Wide Web. Next, classification service  may execute text-mining engine  to determine the particular language contained in the text . Next, classification service  may execute a search engine  to parse the text for special terms and attributes . Next, classification service  may submit the text for classification  by executing text-mining engine  and passing the text as input. Upon text mining engine execution completion, classification service may receive text-mining engine results and determine classification quality  based on a predetermined value. In some embodiments, classification service  may access decision rules and actions  and determine whether an action, for example, a notification, is required based on the comparison. In the event the decision criterion for an action is met, classification service may execute an action .","Recommendation service  is provided to recommend proper and possible actions to enterprise application agents  based on collected information and user input received by enterprise application agent . Recommendation service  may accumulate interaction information and may determine an appropriate search space. For example, the same input information provided by application agent  at a first iteration and at a fifth iteration may generate different recommendations due to changes of possible action space between the first and the fifth iterations.","Recommendation service  may recommend a possible business process to application agent . For example, in one embodiment, business processes may be represented as interactive scripts. User interaction with such scripts and background information collected by enterprise application agents  may be used by recommendation service  as input to learning engine . Recommendation service  may then directly communicate with application agents  to recommend a business process.","In another embodiment, recommendation service  may recommend possible actions by an application agent. Similar to business process recommendations, interactive scripts may be used to represent a course of action. Given the inputs from a user, background information and allowable actions provided by application agent, recommendation process  may make a recommendation about which action an application agent may take. The recommendation process  may also expand the course of action for the interactive script or a set of interactive scripts. Since recommendation service  may not execute the actions, application agents  may consider the details and complexity related to a transaction.","Referring to , in one embodiment, a methodology for recommendation service  is disclosed. Initially, recommendation service  may access configuration information  relating to learning engine  parameters. Next, recommendation service  may collect input data  from application agents  requesting a recommendation. Next, recommendation service  may select the particular recommendation algorithm that learning engine  may utilize. For example, in some embodiments, spread activation algorithms may be selected to discover non-obvious relationships among data. In some embodiments, recommendation service  may select the recommendation algorithm based on the nature of collected data. In other embodiments, recommendation service  may select the recommendation algorithm based on input parameters received upon invocation. Next, recommendation service  may execute learning engine  and pass as input the collected data along with commands to execute a particular learning algorithm . Upon execution completion of learning engine , recommendation service  may evaluate learning engine output based on pre-defined criteria . If the learning engine output meets or exceeds the predefined criteria, recommendation service  may output a final recommendation  to application agents .","Prediction service  provides a set of APIs that allows enterprise application agents  to pass a set of known information to obtain predictions from previously constructed models using data stored in knowledge repository . The format of the models may be varied and utilize one or more data-mining techniques. For example, econometric models may utilize mathematic formula, one or more association rules, and a decision tree.","Referring to , in one embodiment, a methodology for prediction service  is disclosed. Prediction service  may collect data  from application agents  and execute prediction models  by passing as input collected data. Next, prediction service  may obtain predictions  from prediction models and determine whether a sufficient amount of data was passed  based on the quality of prediction results. In the event more data is needed, prediction service  may collect additional data from application agents .","Decision service  provides a set of APIs that allow application agents  to pass a set of known information, criteria, goals and constraints to optimization engine  to identify an optimal statistical decision, or a deterministic optimal decision based on either linear programming or a non-linear programming approach.","Referring to , in one embodiment, a methodology for decision service  is disclosed. Initially, decision service  may collect input data from application agents  and pass the input data to optimization engine . Next, decision service  may initiate an analysis  by executing optimization engine . Upon execution completion of optimization engine , decision service  may receive optimization engine  outputs. Next, decision service  may perform a sensitivity analysis  to determine, based on calculated statistics, whether additional input data may be needed  to generate a quality decision from optimization engine . If additional data is needed, decision service  may collect additional data from application agents . Otherwise, decision service  may return the decision  generated by optimization engine .","Plan adjustment service  is provided that may monitor plan performance, collect available information that may impact plan generations, and adjust plans based on a determination of whether plan goals may be achieved. In some embodiments, for example, planning engine  may not have sufficient information during initial plan generation to generate an optimal plan. Plan adjustment service  may monitor the performance of such plans and determine whether plan goals may be achieved. In one embodiment, collected information is the direct results of a current plan.","Referring to , in one embodiment, a methodology for plan adjustment service  is disclosed. Initially, plan adjustment service  may collect information  relating to application agent performance from application agents . Next, plan adjustment service  may generate new performance information  by accessing prior historical data  and adding application agent performance data. Next, plan adjustment service  may determine whether the generated new performance data continues to match goals established for the plan . If the new performance data no longer matches the goals associated with the plan, plan adjustment service  then may generate data distributions based on the updated data , adjust agent control policy , and execute planning engine  by passing as input the data distributions. Upon execution completion of planning engine , plan adjustment service  may receive a simulated plan from planning engine  and compare the simulated plan to goals . If the simulated plan does not match the goals, plan adjustment service  may further refine the plan by decomposing it further  and reinitiate execution of planning engine . In some embodiments, if the simulated plan meets the goals established, plan adjustment service  may generate a workflow  to propose a goal adjustment. In other embodiments, plan adjustment service  may automatically provide the new simulated plan to software agents.","Referring to , core services  are provided by the system to enterprise application agents  or intelligent services  to access, extract, transform, integrate, synchronize and route data in a distributed environment. Core services  are designed for flexibility. For example, a new service may be easily integrated into the system and the whole or part of core services  may be substituted by a new design without impacting enterprise application agents  or intelligent services .","Referring to , a multi-channel communication service  is provided that converts various input formats into recognizable formats for software agents. For example, information from various communication channels such as email, telephony, fax, paging message, or voice, may need to be converted into text formats with structure defined by extensible markup language (\u2018XML\u2019) or resource description architecture (\u2018RDF\u2019). By utilizing multi-channel communication service , enterprise application agents  may be independent of these various communication channels.","A scheduling service  is provided as part of core services that provides a centralized timer to control and schedule a sequence of tasks to be completed by enterprise application agents . In one embodiment, the scheduling service may use a scheduling timesheet that contains information about the schedule and the tasks to be executed by application agents.","A data connection service  is provided as part of core services that allows intelligent engines to manage and control information sources from relational databases, ERMs, as well as mainframes. In one embodiment, connection definitions are stored in an XML property file. One advantage of storing connection definitions in a XML property file may be the ease of switching from one data\/information source to another by redefining the connection in the XML property file.","A data transformation service  is provided that allows intelligent engines to work with consistent data structures. For example, there may be a requirement for an intelligent engine to interpret data stored in industrial specific XML formats (e.g. Rosettanet). In one embodiment, the conversion may be done using an XSLT engine with a repository of registered converters written in XSL to convert from one format to another.","A data routing service  is provided for data movement from one server to another based on pre-defined routing rules. In one embodiment, data routing rules may be defined in XML property files. XML property files may be routed from one place to another based on a routing plan obtained by a routing service. One advantage of this may be the avoidance of router maintenance for each server in a routing plan. In other embodiments, an intelligent business routing agent may manage rule-based routing.","A data integration service  is provided to resolve heterogeneous\/inconsistent data sources. In distinction to data transformation service  that may convert data from one format to another, the data integration service  consolidates information from multiple data sources. When the information comes from multiple data sources, there may be a requirement to merge or use additional processes to integrate the information based on content.","Enterprise application agents  are provided that execute business processes inside the system. Enterprise application agents  may be assembled from various intelligent services  and core services  to achieve goals defined for the agent. In one embodiment, for example, a workflow process may be built using data routing services  and scheduling services . Application agents  may perceive information from the environment and respond to environmental changes. Application agents  may or may not have adaptive capability components since some business applications require stable and predictable behavior (e.g., retrieve information from heterogeneous data sources). The determination of which system components may be assembled for agents may be determined by business process requirements.","Referring to , the conceptual layers for an enterprise application agent and possible interactions among layers are illustrated. The conceptual layers may include a perception layer , a business logic layer , a memorization layer  and an action layer . Perception layer  may retrieve information from different communication channels, and utilize core services  to convert information to formats understood by other components in the architecture. Business logic layer  may process input information received from perception layer  based on pre-defined business logic. Intelligent service , which may reside in business logic layer  and memorization layer  may be triggered to retrieve and restore complicated knowledge representation and learned information. The business logic layer then can make optimal decisions based on pre-defined goals. The decision may be executed by Action layer  may complete a task, communicate with other agents, or send feedbacks backto its own perception layer , business logic layer  and memorization layer  for further processing.","A multi-agent environment  provides a collaborative environment for enterprise application agents  to interact. As illustrated in , enterprise application agents  may be organized under an organizational hierarchy and perform various roles. Referring to , four different enterprise application agents are defined. The agents include a planning agent , an administration agent , an application agent  and a service agent . Although only four agent types are illustrated in , the system is not limited to these agent types. For example, complex organizational hierarchies may be introduced by adding additional agents (e.g., multi-layer management agents, policy making agents, performance evaluator agents, etc.) to the system. In other embodiments, collaboration among enterprise agents may be achieved without introducing planning or administration agents.","As illustrated in , planning agent  is provided which interacts via intelligent services  with planning engine  to provide a plan that may meet a goal assigned to an enterprise application agent. Each planning agent may interact with one or more administration agents, although such interaction is not required.","Administration agent  may control, coordinate and monitor enterprise application agents  directly under its control. Administration agent  may create new application agents; terminate inactive application agents, and other administration agents that may have inactive application agents under its supervision. In some embodiments, administration agent  may have a set of tasks defined for its execution and may assign individual tasks to application agents under its control. Administrative agents  also may receive directives from planning agents  and adjust system resources used by enterprise application agents dynamically on demand. Administration agents  also may monitor and optimize the performance of application agents under control by monitoring the efficiency and effectiveness of application agents and comparing application agent performance with a goal assigned by planning agent .","Application agents  may execute business actions for assigned tasks. In one embodiment, application agents  may maintain states indicating whether application agent  is executing a task or not executing a task. Application agents  not executing tasks may access a collaboration space  to query whether outstanding requests may need to be completed. If outstanding requests exist, application agent  may fetch the request from collaboration space  and attempt to complete the request. In some embodiments, once application agent  completes the task, application agent  may post a complete message to collaboration space  indicating a status message of success or failure.","Application agents  may be instantiated and terminated by administration agents  to optimize system resources. For example, application agents  may be subject to termination by a supervising administration agent  if an inactive state exists. In some embodiments, application agents  may be reinitialized with new tasks. In other embodiments, application agents  may not be terminated and may be immediately assigned to different business tasks under the demand of an administration agent.","Service agents  are provided that support inter-communication among one or more application agents and provide organization services  for other agents.","A collaborative space  is provided by the system for collaborative business scenarios. In one embodiment, collaborative space  allows application agents  to post requests, or take requests for processing. Service agents  also may provide a communication protocol for application agents  to interact with other application agents.","Organization services  may be provided by the system for communication among agents within an organizational hierarchy. Organization services may include a collaboration service , a coordination service , a monitoring service , and a controlling service . In one embodiment, organizational services may be restricted to different agent roles and thus provide a hierarchical structure among agents (e.g. service agents ).","Controlling service  provides for the fine-tuning and modification of application agent  behavior. Controlling service  is accessible to both administrative agents  and service agents . In some embodiments, administrative agents  and service agents  may conduct the following activities: test whether an application agent is executing, request an application agent to stop executing, modify a set of parameters pre-defined by an application agent to fine tune the agent functionality, redirect intelligent service used by an application agent, as well as initialize, reset or modify the learning parameters to modify application agent learning capability and speed. In other embodiments, controlling service  may be used to analyze an agent's activity log as well as summarize the performance of a group of application agents under control of either administrative agents  or service agents .","Coordination service  provides a service for administration agents  to coordinate activities of sub-ordinate agents. Coordination service  may be used by administration agents  to evaluate the performance of sub-ordinate administration agents and application agents  based on utilizations, efficiency and effectiveness. Furthermore, coordination service  may provide statistics to determine how application agent performance compares to goals set by a planning agent . In one embodiment, where application performance is a critical condition, coordination service  also may provide an escalation path to raise an alert to administration agents , planning agents , or a system administrator to remedy a particular situation.","An agent monitoring service  is provided to observe and record application agent performance. Information may be collected and reported to administration agents  which may make decisions to either modify an application agent's  learning capabilities, modify an application agent's  business layer or control application agent  overall execution. In one embodiment, administrative agent  may provide information to planning agent , the planning agent  responsible for providing specific commands and directives to control application agent . In one embodiment, agent monitoring service  may record the following information: basic log information including time and reason application agent is instantiated, the number of tasks executed by application agent , the amount of time each task requires, what communication may have been conducted between application agents to complete a task, and performance log information regarding the effectiveness and efficiency of application agents in solving assigned tasks.","Collaboration service  is provided which may assist application agents  and service agents  in interacting with other application agents in collaboration space . In one embodiment, application agents  and service agents  may utilize collaborative service  to communicate with other agents via a blackboard approach which may allow application agents to post requests on the blackboard and wait for a replies. In other embodiments, application agents  and service agents  may connect to collaboration space  to communicate with other agents via a peer-to-peer architecture where an agent, after registering for such a role, may freely interchange information with other agents.","The system provides a distributed environment where application agents may or may not reside on the same server. Such a distributed design may assure that information sources and business processes are distributed at multiple locations. For example, the location of information sources may be an ERP, a remote database management system, a legacy system, a mobile server, or even a client's workstation. With the development of peer-to-peer (\u2018PP\u2019) architecture, the distributed design may be extended even further. For example, the system may dispatch a PP agent to a client for tasks that require information exchange or knowledge transfer among PP agents without the need for the system to monitor such an activity.","Various features of the system may be implemented in hardware, software, or a combination of hardware and software. For example, some features of the system may be implemented in computer programs executing on programmable computers. Each program may be implemented in a high level procedural or object-oriented programming language to communicate with a computer system or other machine. Furthermore, each such computer program may be stored on a storage medium such as read-only-memory (ROM) readable by a general or special purpose programmable computer or processor, for configuring and operating the computer to perform the functions described above.","Other implementations are within the scope of the claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 7","FIG. 3"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 8","FIG. 3"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 9","FIG. 3"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 10","FIG. 3"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 11","FIG. 3"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 12","FIG. 3"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 13","FIG. 3"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 14","FIG. 3"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 15","FIG. 3"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 16","FIG. 1"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 17","FIG. 1"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
