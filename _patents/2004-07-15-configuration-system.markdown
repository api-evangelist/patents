---
title: Configuration system
abstract: A configuration system is described. In an implementation, a method includes determining through execution of a configuration system whether an application qualifies as a member of one or more of a plurality of groups. Each of the groups defines one or more criteria for membership and has at least one corresponding block having configuration data. The determining is performed based on whether the application satisfies the one or more criteria. For each of the groups, of which, the application qualifies as a member, the configuration data of the at least one corresponding block is loaded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07836458&OS=07836458&RS=07836458
owner: Microsoft Corporation
number: 07836458
owner_city: Redmond
owner_country: US
publication_date: 20040715
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Overview","Glossary of Terms","CONCLUSION"],"p":["This application claims priority under 35 U.S.C. \u00a7119(e) to U.S. Provisional Application No. 60\/541,387, filed Feb. 2, 2004 and claims priority under 35 U.S.C. \u00a7120 as a continuation-in-part of U.S. patent application Ser. No. 09\/704,625, filed Nov. 2, 2000, both of which are incorporated herein by reference in their entirety.","The present invention generally relates to configuration data and more particularly relates to a configuration system suitable for providing configuration data to applications that are executed in a variety of contexts.","An application may be executed in a wide variety of contexts to provide desired functionality to a user. The application, for instance, may be executed on a wide variety of computing devices, each being implemented to provide different functionality in different settings, such as a set-top box, a laptop computer, a personal digital assistant (PDA), a tablet personal computer (PC), and so forth. Additionally, the computing device may execute the application such that it communicates with another application that is executed on another computing device that provides a context to the application, such as a browser that communicates with a web application that provides a web page for output by the browser. In another instance, the application may be configured for use by servers arranged as a server \u201cfarm\u201d. The application, for example, may be executed by each server in a server farm to respond to web page requests by providing the desired web page.","Because of the wide variety of computing devices that may execute the application and the wide variety of functionality that may be provided by the computing devices, the application may encounter a wide variety of execution contexts. An execution context may be thought of as circumstances and conditions which contain the execution of the application, such as the hardware and\/or software resources available to the application when it is executed, where the application is executed (e.g., network address), network resources of a computing device that executes the application, and so on. For example, each of the servers in the server farm may provide a different execution context for execution of the application, such as by having differing amounts of processing and memory resources, different network addresses, different device drivers, and so on. Additionally, each computing device that communicates with the application when executed in a server farm may have a different execution context.","Previously, each computing device was supplied with a particular configuration file that included configuration data which was specific for that computing device. For example, in the previously described server farm scenario, each server having a particular execution context (e.g., particular hardware and software resources) was provided with a corresponding configuration file that contained configuration data that was specific for that execution context, such as a configuration file having configuration data for a particular address for purposes of load balancing. Therefore, each new server that was added to the server farm that had a different execution context required a new configuration file, which was both time consuming to develop and inefficient to implement. For example to make a change to the application for execution in a new execution context, a software developer was forced to modify each configuration file to implement the desired change.","Accordingly, there is a continuing need for a configuration system that can provide configuration data to applications for execution in different contexts.","A configuration system is described. The configuration system, when executed, provides access to configuration data by an application that may be based on the execution context of the application. In an implementation, the configuration system includes a configuration compiler that may be utilized during a build process of the application to generate custom runtime code for accessing configuration data from the configuration system. In another implementation, the configuration system includes a configuration runtime that provides access to configuration data during the execution of the application. The access to the configuration data may be provided during the initialization of the application and\/or dynamically during the execution of the application. For example, the custom runtime code generated by the configuration compiler may be utilized to access configuration data contained in a configuration file when the application is initialized. The custom runtime code may also be utilized to update the configuration data utilized by the application due to execution context changes that are encountered during the execution of the application.","In a further implementation, the configuration system locates one or more particular subsets of the configuration data from one or more configuration files that pertain to the application based on the execution context of the application. For example, the configuration file may include a plurality of groups and a plurality of blocks. Each of the groups corresponds, respectively, to at least one of the blocks. For instance, each block may identify a group, to which, it belongs. A given group may have multiple blocks corresponding to different subsets of the configuration data. The configuration data, for example may be split into two files, one containing webserver configuration data and the other containing mailserver configuration data. Both files, however, might have blocks for a live site group and a test lab group.","Additionally, each of the blocks contains a subset of the configuration data. At least one of the groups is \u201cconditional\u201d in that it includes one or more criteria for membership of the application. The configuration runtime, when executed, compares a selector which specifies a property in the execution context of the application with the criteria to find a match. The matches are utilized to determine a list of group memberships for the particular execution context. For each group membership, for instance, the subset of the configuration data of the corresponding block(s) is loaded for communication to the application. In this way, one or more configuration files may be provided for use in configuring the application for execution in a variety of contexts.","The same numbers are used in instances of the disclosure and figures to reference like components and features.","A configuration system is described. The configuration system, when executed, provides access to configuration data by an application that may be based on the execution context of the application. The configuration data may be utilized by the application in a variety of ways, such as to configure the application itself for a specific context, to supply data for processing by the application in the specific execution context, and so on.","In an implementation, the configuration system includes a configuration compiler that may be utilized during a build process of the application to generate custom runtime code for accessing configuration data from the configuration system. For example, the configuration compiler, when executed, may generate custom runtime code that, when executed by the application, calls the configuration system to access configuration data. The call to the configuration system may be configured by the custom runtime code such that a specific configuration property is called and an argument is supplied that is utilized as an input to select a particular subset of configuration data. The argument that is supplied may include a property of an execution context of the application.","The configuration system may also include a configuration runtime that provides access to configuration data during an execution of the application. The access to the configuration data may be provided during the initialization of the application and\/or dynamically during the execution of the application. Continuing with the previous example, the configuration runtime may be executed for locating one or more particular subsets of the configuration data that pertain to the application based on the execution context of the application. A configuration file, for instance, may be arranged into a plurality of groups and a plurality of blocks. Each of the groups corresponds, respectively, to one of the blocks, each of which containing a subset of the configuration data. At least one of the groups is \u201cconditional\u201d such that it includes one or more criteria for membership of the application. The configuration runtime, when executed, compares a property in the execution context of the application with the criteria to find a match. Each match is utilized to determine a list of group memberships for the particular execution context. The property may be provided by the application and\/or the configuration runtime by monitoring the execution of the application. For each match, the subset of the configuration data of the corresponding block is obtained for communication to the application. In another aspect, default configuration data may be provided for selectors which do not have a match. In this way, one or more configuration files may be provided for use in configuration the application for execution in a variety of contexts.","In the following discussion, a glossary of terms is first provided, which is then followed by a description of an environment suitable for employing the configuration system that is described in relation to . Detailed description of the configuration system in the described environment and procedures that may be executed therein is then described in relation to . For purposes of the following discussion, the terms \u201ccomputing device\u201d and \u201cmachine\u201d are synonymous.","The following terms are defined as follows for purposes of the following description.","Module","A module is an independent unit containing a subset of configuration data. Each module defines its own schema, which contains definitions and layout of properties contained in the module.","Configuration File","A configuration file is a data file that contains configuration data, such as configuration properties and their respective values. The configuration file is used during the execution of an application by a configuration runtime.","Include","Include is a directive which is defined in a configuration file and which refers to another configuration file that may be requested by the application. The content of the referenced configuration file replaces the include element in the configuration file during runtime.","Selectors","Selectors are special properties (i.e., settings) that are set by an application and are used as an input by the configuration system to determine the application's configuration data. A selector can include a variety of properties, such as machine IP, build type, user domain, application name, and so on. The collection of selectors, therefore, define the execution context.","Query","A query is a criterion which an application meets in order to become a member of a respective group. For example, a query might include a listing of network addresses that is utilized to define membership in a particular group. If the application is executed on a computing device having one of the network addresses included in the listing, the application is a member of the respective group.","Match","A match is a basic statement used in a query that defines a configuration selector evaluation expression. For example, a match may utilize a Boolean expression to evaluate whether the application is a member of a particular group.","Groups","Groups define membership of applications. Membership is defined in the configuration file and used to selectively load configuration data of an application. A query is defined in the group to evaluate the membership of an application. An application which satisfies the query defined in the group is said to be a member of that group as previously described.","Blocks","Blocks contain configuration data and are defined in a configuration file. Blocks are partitioned based on a group criteria which specifies a particular group, to which, that particular block is associated. An application loads the blocks whose respective groups include the application, i.e. groups whose members include the application. A block without a group attribute may contain default configuration data for the application.","Environment",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 1","b":["100","100","104","1","104","104","1","104","104","1","104","2","104","3","104","4","104","104","1","104"]},"Because of the wide variety of configurations that the plurality of computing devices ()-(N) may assume, each of the computing devices may provide different execution contexts, one to another, for an application. As previously described, the execution context may be thought of as circumstances and conditions which contain the execution of the application. For example, each of the plurality of computing devices includes a processor and memory, such as the processor  and memory  that are illustrated as included on computing device (). The processor and memory resources of each of the computing devices, however, may be different due to the different configurations. For instance, computing device () which is illustrated as a desktop PC may include a greater amount of processor and memory resources than those included on computing device () which is illustrated as a notebook computer. Therefore, the processing and memory resources utilizing in the execution of application  on computing device () provide a different execution context than that which is encountered by an application that is executed on computed device () which has a lesser amount of processing and memory resources.","A wide variety of other properties may also provide an execution context to the application . For example computing device () may include a plurality of input devices (), where \u201cj\u201d can be any integer from one to \u201cJ\u201d. Each of the input devices () may be configured in a variety of ways, such as to provide user interaction, to provide an input of content, and so on. Computing device () may also include a plurality of output devices (), where \u201ck\u201d can be any integer from one to \u201cK\u201d which may also be configured in a variety of ways, such as to output video for viewing by a user. Although the plurality of input and output devices (), () are illustrated separately, one or more of the input and output devices (), () may be combined into a single device, such as a television having buttons for input, a display device, and a speaker. The plurality of input and output devices (), () may be utilized in the execution of the application  and therefore provide an execution context to the application .","A network  that is communicatively coupled to the computing devices () which executes the application  may also provide an execution context to the application . Computing device (), for instance, is communicatively coupled to a network . The network  is illustrated as the Internet, and may include a variety of other networks, such as an intranet, a wired or wireless telephone network, a broadcast network, and other wide or local area networks. The network location of the computing device (), for instance, may provide an execution context for the application  such that different configuration values may be provided based on the network location, further description of which may be found in relation to .","The computing device () may also utilize the network  to access additional functionality that may provide an execution context to the application . For example, the computing device () may be communicatively coupled over the network  to one or more remote computing devices (e.g., computing devices ()-(N) such that the remote computing device may provide content to the computing device (). For example, computing device (N) may stream content over the network  for processing by the application , and therefore provide an execution context to the application .","Additionally, another application , when executed on a computing device (), may provide an execution context to the application . Application , for instance, is illustrated as stored in the memory  and is executable on the processor . Application  is illustrated as being executed on the processor  and is storable in the memory . Application , when executed in conjunction with application , may provide data to the application , accept data from the application , and so forth, and therefore provide an execution context to the application . For example, application  may be executed to provide content, such as documents, spreadsheets, video, audio, and so on, to the application  for processing by the application . Additionally, the application  may be configured to provide content interaction, such as encoding, editing, and\/or playback of the content that is processed by the application .","The application , when executed, may also be configured for use by multiple users. The application , for instance, may be configured as a server application that is executed on the computing device () for being accessed over the network  by a plurality of users (e.g., the other computing device ()-(N)). Each of the users has a respective thread in the execution of the application . A thread includes data associated with a single use of the application  which is utilized to serve a particular one of the users and\/or a particular service request. Therefore, when the plurality of users (e.g., the other computing device ()-(N)) access the application , a thread is created and maintained for each user. Thread data may be stored in a particular area of the memory . Thus, the application  may encounter a plurality of execution contexts even when executed on a single computing device (e.g., computing device ()). Further discussion of threads may be found in relation to . Although a variety of properties that provide an execution context to the application  have been described, a variety of other properties are also contemplated.","A configuration system  may be employed to enable the application  to be executed in the wide variety of execution contexts and\/or to provide execution context specific configuration data. For example, the configuration system , when executed, provides configuration data to the application  based on the execution of the application  in the variety of contexts, enables the application  to switch between execution contexts when executed on a single computing device (e.g., when the application  is a server application), and so on. The configuration system  is illustrated as being executed on the processor  and is storable in the memory . The configuration system , when executed, provides an application programming interface (API) such that the application  may access a plurality of configuration data (), where \u201cm\u201d can be any integer from one to \u201cM\u201d. Further discussion of configuration system  APIs may be found in relation to ,  and .","The configuration system  includes a configuration compiler  and a configuration runtime . The configuration compiler  is utilized during a build process of the application  to generate code that provides access to the configuration data (). Further discussion of execution of the configuration compiler  may be found in relation to . The configuration runtime , when executed, provides configuration access to the configuration data () during execution of the application . Further discussion of execution of the configuration runtime  may be found in relation to ,  and .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1","FIGS. 8 and 9"],"b":["200","120","110","120","110","122","110","122","120","140","1","120","110","122","120","110","110","120","122","120"],"i":["m","m","m","m"]},"The configuration system  includes a plurality of modules (), where \u201ca\u201d can be any integer from one to \u201cA\u201d. Each of the plurality of modules () is an independent unit containing a subset of the configuration data () of . Each module () defines its own schema, which contains definitions and provides a layout of the configuration data addressed by the module (). For example, the application  may define its own structure of configuration data and partition the structure into independent modules. Further discussion of the modules () may be found in relation to .","For each module (), the configuration compiler  is executed to generate custom runtime code (), where \u201cb\u201d can be any integer from one to \u201cB\u201d. The application  utilizes the custom runtime code () to access the configuration data () of . For instance, the custom runtime code () that is generated enables the application  to call corresponding modules () having a subset of the configuration data () of .","The application  accesses the modules () and the corresponding configuration data () through one or more configuration context objects () (hereinafter referred to as a \u201cconfiguration context\u201d), where \u201cc\u201d can be any integer from one to \u201cC\u201d. A configuration context () is created independently for each executing application thread. For example, the application , as previously described, may be configured as a server application for access by a plurality of users. A thread is created for each user having data that describes that user's execution context.","Configuration data () included in the configuration context () for a particular thread is selected through use of a directory . The directory  includes a plurality of groups (), where \u201cd\u201d can be any integer from one to \u201cD\u201d, having corresponding criteria for membership. Membership is used to selectively load conditional configuration data for a specific application, and more particular for a particular execution context of the particular application. A query is defined in the group to evaluate the membership of an application based on the criteria, such as IP address of the computing device () of  that executes the application . If the application  satisfies the criteria defined in the group, the application  is a member of that group.","The properties for membership to particular groups () may be provided by the application  through the use of one or more of a plurality of selectors (), where \u201ce\u201d can be any integer from one to \u201cE\u201d, which is illustrated in  by the arrow from the application  to the selectors (). Each selector () may be considered as a special property which is used to differentiate between execution contexts by the configuration runtime  when selecting conditional configuration data for a particular application, e.g. application . Comparison of the selectors () with criteria defined in the groups () is further described in relation to .","Each of the groups () has a corresponding subset of configuration data () that is partitioned into one or more of a plurality of blocks (), where \u201cf\u201d can be any integer from one to \u201cF\u201d. Each of the plurality of blocks (), for instance, may be partitioned based on a common attribute which specifies a particular group (), to which, that particular block () is associated. Therefore, after membership of the application  in one or more of the plurality of groups () has been determined, corresponding subset(s) of the configuration data may be obtained by loading one or more of a plurality of blocks () that correspond to the one or more groups (), of which, the application  is determined to be a member. A block without a group attribute may contain default configuration data values for the application .","The modules (), groups (), and blocks () are obtained from one or more configuration files (), where \u201cg\u201d can be any integer from one to \u201cG\u201d. Through use of groups () and blocks (), the configuration file () may supply a variety of configuration data to the application  based on the execution context of the application . In this way, the configuration file(s) () may be \u201cgeneric\u201d such that configuration files(s) () may be utilized to supply configuration data for a wide variety of execution contexts without having to write a particular configuration file for each particular configuration context. Further discussion of the configuration file () may be found in relation to .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 3","FIG. 2","FIG. 1","FIGS. 1 and 2","FIG. 2"],"b":["300","202","202","122","202","302","202","126","216","202"],"i":["a","a","m","a","a","g","a"]},"The module's () configuration data may be defined in more than one of the blocks () and\/or more than one the configuration files () of . Additionally, as previously described, some of those blocks () of  may be included conditionally, based on a group () membership evaluation. All relevant blocks are merged into a final data set when the module () is accessed by the application  of . The final data set may be utilized in the execution of the application  in a variety of ways, such as to configure the application itself for a particular execution context, to provide specific data for output in a particular execution context, and so forth. Although components of the module () are illustrated separately, one or more of the components may be combined and\/or further separated. The following discussion of the components of the module () shown in the exemplary implementation  of  will be described in relation to the system  of .","Module Schema ","The module schema  may be defined in a variety of ways, such as through a restricted eXtensible Markup Language (XML) Schema Definition (XSD). The application  may define one or more modules (), and may also use modules () defined by external components. Each module (), for instance, defines its module schema  in a separate XSD file, which becomes an input to the configuration compiler  of . The configuration compiler  utilizes the module schema  to generate a corresponding configuration class, which is used by the application  to access the configuration data ().","The following informal XSD module schema  shows a sample module () definition that illustrates exemplary constructs provided by this configuration implementation:",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u20331.0\u2033 encoding=\u2033utf-8\u2033 ?>"},{"entry":"<xsd:schema xmlns:xsd=\u2033http:\/\/www.w3.org\/2001\/XMLSchema\u2033"},{"entry":"xmlns=\u2033TestConfig.xsd\u2033"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003targetNamespace=\u2033TestConfig.xsd\u2033 elementFormDefault="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2033qualified\u2033 version=\u201d\u201d>"},{"entry":"\u2003<xsd:include schemaLocation=\u2033 \/>"},{"entry":"\u2003<xsd:element name=\u2033\u2033>"},{"entry":"\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003<xsd:documentation>Config module<\/xsd:documentation>"},{"entry":"\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003<xsd:complexType>"},{"entry":"\u2003\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u2033\u2033 type=\u2033\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:documentation>Single property<\/xsd:documentation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003<\/xsd:element>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u2033\u2033 type=\u2033\u2033 default=\u201d\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:documentation>Single property with default"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xsd:documentation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003<\/xsd:element>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u2033\u2033 type=\u2033\u2033 minOccurs=\u201d\u201d maxOccurs=\u201d\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:documentation>Property list<\/xsd:documentation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003<\/xsd:element>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u2033\u2033 minOccurs=\u201d\u201d maxOccurs=\u2033\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:documentation>Property dictionary<\/xsd:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003documentation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:simpleContent>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xsd:extension base=\u2033\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xsd:attribute name=\u2033\u2033 type=\u2033\u2033 use=\u2033required\u2033 \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/xsd:extension>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xsd:simpleContent>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:complexType>"},{"entry":"\u2003\u2003\u2003\u2003<\/xsd:element>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u2033\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:documentation>Single collection<\/xsd:documentation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<!-- collection items defined here -->"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:complexType>"},{"entry":"\u2003\u2003\u2003\u2003<\/xsd:element>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u2033\u2033 minOccurs=\u201d\u201d maxOccurs=\u201d\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:documentation>Collection list<\/xsd:documentation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<!-- collection items defined here -->"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:complexType>"},{"entry":"\u2003\u2003\u2003\u2003<\/xsd:element>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u2033\u2033 minOccurs=\u201d\u201d maxOccurs=\u201d\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:documentation>Collection dictionary"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xsd:documentation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:complexType>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003<!-- collection items defined here -->"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:attribute name=\u2033\u2033 type=\u2033\u2033 use=\u2033required\u2033 \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:complexType>"},{"entry":"\u2003\u2003\u2003\u2003<\/xsd:element>"},{"entry":"\u2003\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003\u2003<\/xsd:complexType>"},{"entry":"\u2003<\/xsd:element>"},{"entry":"<\/xsd:schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Version ","Version  is an attribute that should contain a valid version-type value. The configuration runtime  automatically registers a constant selector (containing this value) under a name \u201c{Module}_ConfigVersion\u201d, where {Module} is the name of the module's () top element.","Data Items","The following sections describe in greater detail an example of how to define the exemplary module schema  constructs shown above.","Configuration Property ","A single configuration property may be defined in the module schema  as follows:","<xsd:element name=\u2033\u2033 type=\u2033\u2033 minOccurs=\u201c1\u201d maxOccurs=\u201c1\u201d>\n\n","<\/xsd: element>","Both minOccurs and maxOccurs attributes may be omitted. Optionally, the configuration property  may have a default value defined, in the following scenario minOccurs has an implied value of zero:","<xsd:element name=\u2033\u2033 type=\u2033\u2033 minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d default=\u2033\u2033>","<xsd:annotation>\n\n","<\/xsd:annotation>","<\/xsd:element>","The configuration property  is represented as simple elements in the configuration file (). The following is an example of a configuration property  named Aaa containing the value xyz:","<Aaa>xyz<\/Aaa>","Configuration Property Type ","A configuration property type  may utilize one or more simple and defined XSD types. Optionally, each element that uses a configuration property type  may define its own value restrictions, as shown in the following example:","<xsd:element name=\u2033\u2033>\n\n","<\/xsd:annotation>","<xsd:restriction base=\u2033\u2033>\n\n","<\/xsd:restriction>","<\/xsd:element>","A variety of constraints may apply when using the above restrictions. For example, an enumeration restriction may be mutually exclusive with all other restrictions, i.e. no other restrictions may be defined if one or more enumeration elements is present. In another example, to use any of the value range restrictions, base configuration property type  implements a System.IComparable interface. To use value length restrictions, the type implements a public Length property of type System.Int32.","Collection ","A collection  is a container-type element, which is used to define hierarchical configuration data () structures. The collection  may contain configuration properties  and\/or other collections. In an implementation, there are no restrictions on how \u201cdeep\u201d collections can be nested, i.e. the number of hierarchical layers that may be included in the collection . An example of the collection  may be defined as shown in the following example:","<xsd:element name=\u2033\u2033>","<xsd:annotation>\n\n","<\/xsd:annotation>","<xsd:complexType>\n\n","<\/xsd:complexType>","<\/xsd:element>","The collection  is represented as a parent element in the configuration file (). In the following example, Eee is the collection  containing the configuration property  Ppp and another collection Hhh which is nested within the collection  Eee:","<Eee>","<Ppp>xyz<\/Ppp>","<Hhh>\n\n","<\/Hhh>","<\/Eee>","List ","If a data element (i.e., the configuration property  or the collection ) has maxOccurs value defined as greater then 1, than the data element becomes a list , an example of which is represented as follows:","<xsd:element name=\u2033\u2033 type=\u2033\u2033 minOccurs=\u201c0\u201d maxOccurs=\u201cunbounded\u201d>","<xsd:annotation>\n\n","<\/xsd:annotation>","<\/xsd:element>","In an implementation, duplicate values in the list  are ignored. Applications may retrieve list  items by using a zero-based index.","Dictionary ","A dictionary  is a list of data elements (e.g., configuration property  or collection ) indexed with an additional attribute, which is referred to as a \u201ckey\u201d. Configuration properties  and\/or collections  may define the key attribute in the dictionary  differently. The following is a first example of how to define the dictionary  of a configuration property :","<xsd:element name=\u2033\u2033 minOccurs=\u201c0\u201d maxOccurs=\u201cunbounded\u201d>\n\n","<\/xsd:element>","A dictionary  for a collection  may also be defined as shown in the following example:","<xsd:element name=\u2033\u2033 minOccurs=\u201c0\u201d maxOccurs=\u201cunbounded\u201d>","<xsd:annotation>\n\n","<\/xsd:annotation>","<xsd:complexType>\n\n","<\/xsd:complexType>","<\/xsd:element>","The previously described components of the module () may be utilized by the configuration compiler  to configure the application  to interact with the configuration data () through use of the configuration runtime , additional discussion of which may be found in relation to .",{"@attributes":{"id":"p-0117","num":"0151"},"figref":["FIG. 4","FIG. 2"],"b":["400","216","216","126","202","110","122","214","216"],"i":["g","g","a","m","f","g"]},"<?xml version=\u201c1.0\u201d encoding=\u201cutf-8\u201d ?>","<config xmlns=>\n\n","<\/config>","Module Declaration ","Each module () accessed by the application is declared. In an implementation, the placement and order, however, in which module elements appear is irrelevant. If a specified module's assembly is not found, or the class specified cannot be loaded from the assembly, configuration load fails.","The module declaration  declares a module class name generated by the configuration compiler  to the configuration runtime . This declaration enables the configuration runtime  to load the module's () data. In an implementation, the class is declared by using .NET (.NET is a trademark of the Microsoft Corp., Redmond, Wash.) assembly-qualified class name, for example:\n\n","Include Directive ","An include directive  is used to include other configuration files of the plurality of configuration files (). The configuration data () from the referenced configuration file is inserted at the location of the include element in the configuration file () at runtime. An example of the include directive  is represented as follows:","<include>path<\/include>","<include group=\u2033\u2033>path<\/include>","If a relative path is used, it is relative to the current configuration file () that contains the include directive .","Optionally, the include directive  may be qualified with a group name. In such a case, the include directive  is conditional and the configuration file will be included only if the current execution context is a member of the specified group. If the configuration file referenced by the include directive  is not found, the configuration load fails.","Groups ","Groups  are used to define membership of applications. Membership, as previously described, is used to selectively load configuration data () for a particular application, such as a particular execution context of the particular application. A group  may be considered a notation that utilizes selectors () and is defined in the configuration file (). As previously described, selectors () are properties defined by the application  which are used to determine the application's membership in one or more of the groups. Examples of selectors may include machine IP address, build type, application version, user domain, and so forth.","Groups  are differentiated based on one or more criteria. The configuration runtime , when executed, determines which of the groups , to which, the application  belongs based on the selectors () specified by the application  when compared with the criteria of each of the groups . For example, when the application  supplies a selector that satisfies a query defined in a particular group, the application is said to \u201cbelong\u201d to or is a \u201cmember\u201d of that particular group. An exemplary informal schema of a group element is represented as follows:","<group name=\u2033\u2033>","<documentation><\/documentation>1 . . . 1","<query\/>0 . . . 1","<memberOf\/>0 . . . n","<notMemberOf\/>0 . . . n","<\/group>","A group may be identified in the configuration file () by its \u201cname\u201d attribute. In an implementation, each group name is qualified with a namespace, separated by a:' character, for example:","<group name=\u201cMyApp.:LiveSiteMachines\u201d\/>","Queries ","Queries , as previously described, are utilized to define membership in a group, an example of which is represented as follows:","<query>\n\n","<\/query>","As previously described, a query may be thought of as a criterion which the application  meets in order to become a member of a respective group. For example, a query might include a listing of network addresses that is utilized to define membership in a particular group. If the application is executed on a computing device that has one of the network addresses included in the listing, the application is a member of the respective group. Statements in a query may be combined using a logical OR operator if the query contains more than one statement at the top level.","Match Statements ","A match is a basic statement used in a query that defines a configuration selector evaluation expression. For example, match and notMatch are basic query statements that define group membership evaluation expressions. A result of the match statements, for instance, may be true or false. NotMatch is an equivalent of negating the result of a match statement. Match and notMatch may be defined as follows:","<match selector=\u2033\u2033 operator=\u2033\u2033 valueType=\u2033\u2033>value<\/match>","<notMatch selector=\u2033\u2033 operator=\u2033\u2033 valueType=\u2033\u2033>value<\/notMatch>","In an implementation, the operator and valueType attributes shown in the above exemplary code are optional. In another implementation, the default operator is Equal and default value type is the same as the selector's type.","An IsMemberOf operator is used for evaluating conditional memberships in other groups. The IsMemberOf operator may be considered as a way to execute queries defined by other, already defined, groups. For the IsMemberOf operator, the other attributes may be omitted. The following table includes exemplary operators and corresponding argument types:",{"@attributes":{"id":"p-0150","num":"0198"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Operator","Selector Type","Value Type","Behavior"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Null","Any","n\/a","Evaluates if selector is"]},{"entry":[{},{},{},"null (undefined)"]},{"entry":["Equal","Any","Selector's type","Evaluates to true if"]},{"entry":[{},{},{},"the selector is equal to"]},{"entry":[{},{},{},"the specified value"]},{"entry":["Less","IComparable","Selector's type","Evaluates the"]},{"entry":["LessEqual",{},{},"expression:"]},{"entry":["Greater",{},{},"{Selector} operator"]},{"entry":["GreaterEqual",{},{},"{Value}"]},{"entry":["Contains","String","String","Evaluates the"]},{"entry":[{},{},{},"expression:"]},{"entry":[{},{},{},"{Selector} Contains"]},{"entry":[{},{},{},"{Value}"]},{"entry":["In","String","String","Evaluates the"]},{"entry":[{},{},{},"expression:"]},{"entry":["IsMemberOf","n\/a","Value is a group","Evaluates if current"]},{"entry":[{},{},"name","context is member of"]},{"entry":[{},{},{},"the specified group"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Membership Directives ","Membership directives  are used to build group hierarchies. In the following exemplary code, MemberOf and notMemberOf are membership directives which are used to build group hierarchies:","<group name=\u201cGroup1\u201d\/>","<group name=\u201cGroup2\u201d>\n\n","<\/group>","<group name=\u201cGroup3\u201d>\n\n","<\/group>","<group name=\u201cGroup4\u201d>\n\n","<\/group>","In the above example, Group1 does not define members on its own, but Group1 contains members of Group2 and Group3. However, Group1 does not contain Group4 because it explicitly declined membership, which would otherwise take place through Group2 membership.","Blocks ()","Each of the blocks () contains the configuration data values for defined configuration items grouped by modules (). Additionally, the block () may include a group attribute that specifies a corresponding group (). Following is an exemplary informal schema of a block ():","<block>0 . . . n\n\n","<\/block>","<block group=\u2033\u2033>0 . . . n\n\n","<\/block>","A block () without a group attribute is a default block and contains default values for configuration items. In this way, a default may be defined outside of the module schema  of  such that a new software release is not required due to changes in the module schema .","The configuration runtime , when executed, determines all the groups an application is a member of through comparison of the selectors with membership definitions (i.e., queries, criteria) specified in groups. Once the application's membership groups are decided, the corresponding blocks are loaded and configuration data is combined for communication to the application.","In an implementation, the blocks () are loaded in the order in which the blocks () appear in the configuration file (). Therefore, if a configuration value appears in more than one of the blocks () that are loaded, the values from the latter block override the configuration values of the prior block. Further discussion of execution of the configuration runtime  may be found in relation to .","Exemplary Procedures","The following discussion describes building and execution of an application that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware, firmware, or software, or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks.",{"@attributes":{"id":"p-0171","num":"0232"},"figref":"FIG. 5","b":["500","502"]},{"@attributes":{"id":"p-0172","num":"0233"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u20331.0\u2033 encoding=\u2033utf-8\u2033 ?>"},{"entry":"<xsd:schema xmlns:xsd=\u2033http:\/\/www.w3.org\/2001\/XMLSchema\u2033"},{"entry":"xmlns=\u2033HelloConfig.xsd\u2033"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003targetNamespace=\u2033HelloConfig.xsd\u2033 elementFormDefault="},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2033qualified\u2033>"},{"entry":"\u2003<xsd:include schemaLocation=\u2033\/ConfigTypes.xsd\u2033 \/>"},{"entry":"\u2003<xsd:element name=\u2033Hello\u2033>"},{"entry":"\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003<xsd:documentation>Hello application configuration<\/xsd:"},{"entry":"\u2003\u2003\u2003documentation>"},{"entry":"\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003<xsd:complexType>"},{"entry":"\u2003\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u2033Greeting\u2033 type=\u2033String\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:documentation>Greeting text<\/xsd:documentation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003<\/xsd:element>"},{"entry":"\u2003\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003\u2003<xsd:complexType>"},{"entry":"\u2003<\/xsd:element>"},{"entry":"<\/xsd:schema>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"At block , the configuration compiler is executed to generate code for the Hello module for implementation by the application, e.g. application  of . The configuration compiler generates code for the application that, when executed, provides access to the module's configuration data through use of a configuration context, e.g., configuration context () of . Thus, the configuration compiler may be used during the development process of the application to generate module-specific runtime code to be included within the application. From a developer's point of view, this approach has several advantages: (1) this approach provides strongly-typed, easy to use configuration data access interface; (2) this approach provides for easy and safe sharing of configuration data between applications; and (3) this approach makes schema changes safe (e.g., changing a name of the property will cause compiler errors in all code that uses this property, instead of waiting until the execution of the application to locate the errors).","The configuration compiler may be implemented as a command line tool that is used during the application build process. The configuration compiler accepts a module schema file as an input and produces one or two source code files at the specified location(s), an example of which is shown as follows:\n\n","At block , the generated code is added to the application and the application is built. For example, the generated HelloConfig.cs file may be represented as follows:",{"@attributes":{"id":"p-0176","num":"0238"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/"},{"entry":"\/\/ ConfigCompiler-generated file"},{"entry":"\/\/"},{"entry":"using System;"},{"entry":"using System.Net;"},{"entry":"using.Common.Config;"},{"entry":"namespace.HelloApp"},{"entry":"{"},{"entry":"\/\/\/ <summary>"},{"entry":"\/\/\/ Hello application configuration"},{"entry":"\/\/\/ <\/summary>"},{"entry":"public sealed class HelloConfig : ConfigModuleAccess"},{"entry":"{"},{"entry":"\u2003\/\/\/ <summary>"},{"entry":"\u2003\/\/\/ Current instance of configuration module \u2032Hello\u2032"},{"entry":"\u2003\/\/\/ <\/summary>"},{"entry":"\u2003public static HelloConfig Current"},{"entry":"\u2003{"},{"entry":"\u2003\u2003get"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003HelloConfig current =(HelloConfig)ConfigModuleAccess.GetCurrent(typeof(HelloConfig));"},{"entry":"\u2003\u2003\u2003if (current == null)"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003current = new HelloConfig( );"},{"entry":"\u2003\u2003\u2003\u2003ConfigModuleAccess.SetCurrent(current);"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003return current;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003\/\/\/ <summary>"},{"entry":"\u2003\/\/\/ Greeting text"},{"entry":"\u2003\/\/\/ <\/summary>"},{"entry":"\u2003public String Greeting { get { return (String)GetPropertyValue(0); } }"},{"entry":"\u2003private HelloConfig( ) : base(\u2033Hello\u2033, ConfigContext.Current) { }"},{"entry":"\u2003public static String _ModuleSchema"},{"entry":"\u2003{"},{"entry":"\u2003\u2003get"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003return @\u2033<?xml version=\u20331.0\u2033 encoding=\u2033utf-8\u2033 ?>"},{"entry":"<xsd:schema xmlns:xsd=\u2033http:\/\/www.w3.org\/2001\/XMLSchema\u2033"},{"entry":"xmlns=\u2033HelloConfig.xsd\u2033"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003targetNamespace=\u2033HelloConfig.xsd\u2033 elementFormDefault=\u2033qualified\u2033>"},{"entry":"\u2003<xsd:include schemaLocation=\u2033 \u2033 \/>"},{"entry":"\u2003<xsd:element name=\u2033Hello\u2033>"},{"entry":"\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003<xsd:documentation>Hello application configuration<\/xsd:documentation>"},{"entry":"\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003<xsd:complexType>"},{"entry":"\u2003\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u2033Greeting\u2033 type=\u2033String\u2033>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<xsd:documentation>Greeting text<\/xsd:documentation>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/xsd:annotation>"},{"entry":"\u2003\u2003\u2003\u2003<\/xsd:element>"},{"entry":"\u2003\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003\u2003<xsd:complexType>"},{"entry":"\u2003<\/xsd:element>"},{"entry":"<\/xsd:schema>"},{"entry":"\u2033;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"At block , the application that implements the configuration property (e.g., the Greeting property), is executed, an example of which is shown in the following example:","using System;","using System.Net;","using.Common.Config;","namespace.HelloApp","public class Hello","{\n\n","}","The Greeting property of this example, when executed, provides a different textual greeting for different types of machines. To accomplish this, groups of machines are defined in this example based on respective IP addresses. The following example illustrates a sample of how groups may be defined by using IP subnet definitions in a configuration file. The following sample also includes a default value (\u201cHello, World!\u201d) which is defined for instances in which the application is executed on an unknown machine. The HelloAppConfig.xml file is added to the application distribution as follows:","<?xml version=\u201c1.0\u201d encoding=\u201cutf-8\u201d ?>","<config xmlns=\u201d","<module>.HelloApp.HelloConfig, HelloApp<\/module>","<group name=\u201cHelloApp:LiveSite\u201d>\n\n","<\/group>","<group name=\u201cHelloApp:DevMachines\u201d>\n\n","<\/group>","<block>\n\n","<\/block>","<block group=\u201cHelloApp:LiveSite\u201d>\n\n","<\/block>","<block group=\u201cHelloApp:DevMachines\u201d>\n\n","<\/block>","<\/config>","The above configuration file, when implemented by the configuration runtime, may be executed as follows. At block , a determination is made as to whether a machine is a member of a particular group in the configuration file, and if so, a corresponding action is performed for the particular group (block ). For instance, the IP address for the machine that is executing the application may be compared with the IP addresses in each of the groups of the configuration file. If the IP address matches the IP address in the live site machines group, the greeting \u201cHello, Live Site!\u201d from the corresponding block is output. Likewise, if the IP address matches the IP address in the DevMachines group, the greeting \u201cHello, Developers!\u201d from the corresponding block of the configuration file is output.","If the machine is not a member of a particular group in the configuration file (block ), a default action is performed (block ). For instance, if the IP address for the machine that is executing the application does not match any of the IP addresses in each of the groups of the configuration file (i.e., the selectors do not satisfy the queries), the default greeting \u201cHello, World!\u201d from the default block is output. In this way, the Greeting property provides a greeting regardless of whether the machine has an IP address that matches any of the IP address in the configuration file.",{"@attributes":{"id":"p-0202","num":"0304"},"figref":["FIG. 6","FIGS. 1 and 2","FIG. 5","FIGS. 8 and 9"],"b":["600","126"]},"At block , execution of the application on a computing device is initiated. The application executes custom runtime code generated at block  of  to call a configuration property. In response to the call, the configuration system receives one or more selectors at an API (block ). As previously described, selectors are special properties (settings) that are used by the configuration runtime as an input when determining which subset of the configuration data pertains to the execution context of the application. The selectors, for instance, may be used primarily when evaluating match expressions for the purpose of determining group membership.","Selectors may be divided into two categories. A first such category is constant. A constant selector, for instance, has a value which is set during application initialization and cannot change later (e.g., a host machine's IP address). This type of selector allows the configuration runtime to optimize data access by pre-selecting certain conditional data blocks identified as \u201cconstant\u201d without having the re-evaluate conditional statements utilized to find matching selectors and criteria during the execution of the application. A second such category is variable. A variable selector has a value which can be changed by an application at any time, for any execution context (e.g., currently served user's domain name). In an implementation, each time a selector value changes, it may cause a current configuration context to re-compute its data set.","At block , the configuration runtime compares the one or more selectors with one or more criteria (i.e., queries) in one or more configuration files to find a match. In this way, the configuration runtime determines membership of the application in one or more groups defined in the one or more configuration files. For each match, the corresponding block of the group having the application as a member is loaded (block ).","At block , the loaded configuration data is combined. In this implementation, if a configuration value appears in more than one of the blocks that are loaded (block ), the values from the latter block override the configuration values of the prior block (block ). For example, a particular configuration property may be referenced by multiple groups in a configuration file. The configuration property, however, may produce different values based on which group is utilized to choose the particular configuration property. For instance, the application may be a member of a network address group and a time-of-day group for the configuration property Hello. Membership of the application in the network address group provides a \u201cHello, World!\u201d configuration value for the configuration property Hello. Membership of the application in the time-of-day group, however, may be utilized to provide a \u201cGood Morning!\u201d configuration value for the configuration property \u201cHello\u201d. In an implementation, the previously loaded configuration value is overwritten (i.e., replaced) with the latter configuration value based on the ordering of the blocks in the configuration file. At block , a communication is formed that contains the configuration values for communication to the application, thereby \u201cinsulating\u201d the application from the configuration data.",{"@attributes":{"id":"p-0207","num":"0309"},"figref":["FIG. 7","FIG. 7"],"b":["700","110","104","1","110","104","4","104","5","104","4","104","5","110","110","4","110","5","110","104","4","104","5","104","4","104","5","110","110","4","110","5","104","4","104","5"]},"Each thread accesses the configuration data of the configuration files () through a respective configuration context object, which is illustrated in  as configuration context (), () to depict correspondence of the respective configuration contexts (), (), threads (e.g., applications (), ()), and computing devices (), (), one to another. The configuration contexts (), () are created transparently by the configuration runtime  each time the configuration system  is accessed by a new thread. The application, for example, may utilize the configuration contexts (), () to set variable selector values for each of the threads, e.g. applications (), (), during the execution of the application . Thus, the configuration system  may be utilized to supply configuration data due to changing execution contexts of the application .","The application  may use the configuration context in a variety of other scenarios. For example, the application may use the configuration context once during initialization to register selectors and initialize a default configuration context. In another example, the application utilizes the configuration context once during shutdown to release allocated resources. If an error occurs during configuration access, the operation will throw an exception of type ConfigException, which may contain details that describe the error.","In an implementation, the configuration runtime  sets up one or more of a plurality of watchers (), where \u201cx\u201d can be any integer from one to \u201cX\u201d, to monitor the configuration files (). Each watcher () may be implemented as a software module that monitors a respective one of the configuration files () during initialization of the configuration system , i.e. when the configuration system  is called by the application . Whenever any one of the configuration files () is modified, the watcher () causes the configuration runtime  is executed to reload the configuration data, such as by performing the procedure  of  to update the configuration data for the application . In an implementation, this update is performed transparently to the executing application . Should a new set of configuration data fail to load, the configuration runtime  will keep using the previously loaded configuration data and an error will be recorded in the application's  event log. To receive notifications on dynamic updates from the configuration runtime , the application  may register for a callback that will notify the application  each time configuration data is successfully reloaded.","Application Programming Interfaces","The configuration system exposes one or more application program interfaces (APIs) that can be called by an application to access configuration data. An API describes how requests of the configuration system by the application are to be made. In an embodiment, the APIs of the configuration system may be called by the application without having to \u201cknow\u201d the details of how the configuration data was provided. The configuration system, therefore, may be implemented as a software layer which may be used as an infrastructure by the application to interact with the configuration data. The configuration system, for instance, may be utilized such that the application does not have to implement separate code for each execution context that may be encountered by the application, thereby programmatically \u201chiding\u201d the details of the provision of configuration data to the application. APIs of the configuration system may be provided for applications that are implemented in managed or unmanaged code, examples of which are described in relation to the following figures.",{"@attributes":{"id":"p-0213","num":"0315"},"figref":["FIG. 8","FIG. 9"],"b":["800","126","802","802"]},"A managed application , for instance, may access configuration data () of  directly using a configuration context  and generated custom runtime code , . As previously described in relation to , the configuration context  is created independently for each application thread that is executed. For example, the application  of  may be configured as a server application for access by a plurality of users. A thread is created for each user having data that describes that user's context. In the illustrated system , the managed application , configuration context , and custom runtime code ,  are each implemented through use of managed code .",{"@attributes":{"id":"p-0215","num":"0317"},"figref":["FIG. 9","FIG. 8","FIG. 9","FIG. 1"],"b":["900","902","904","800","900","806","808","810","122","904","902","900","802","902"],"i":"m"},"The unmanaged application  accesses configuration data () of  by using automatically generated component object model (COM) interfaces and unmanaged proxy objects. COM is a binary standard that provides code interaction by creating objects having callable methods. COM objects are utilized to transparently handle the \u201cdetails\u201d of method calls, such as between processes on a same address space, between address spaces of a singe computing device, and between separate computing devices. For example, the unmanaged application  may utilize proxy objects, which are denoted as a configuration context \u2032, a custom runtime code \u2032, and a custom runtime code \u2032 to indicate that each of the proxy objects correspond, respectively to the configuration context , the custom runtime code , and the custom runtime code . The proxy objects are \u201cstubs\u201d which may be used to manipulate a \u201creal\u201d object that is located elsewhere, which in this instance is located in the managed code .","Each of the proxy objects is configured to forward method calls, retrieve the results, and present the results to the unmanaged application . For instance, unmanaged application  may call configuration context \u2032 without \u201cknowing\u201d that the configuration context \u2032 is a proxy object. The configuration context \u2032 (i.e., proxy object) forwards the call over an interface  of the configuration context COM object, which is illustrated in  as \u201cconfiguration context interop \u201d. The interface  may be thought of as a group of methods, i.e. functions, which are callable via the proxy object (e.g., configuration context \u2032). The configuration context COM object (i.e., configuration context interop ) then forwards the call to the configuration context .","Communication from the configuration context to the unmanaged application may be performed similarly through use of the configuration context COM object (i.e., configuration context interop ), interface , and proxy object (i.e., configuration context \u2032). Likewise, the proxy objects (i.e., custom runtime code \u2032, \u2032) forward calls over respective interfaces ,  of respective configuration context COM objects, which are illustrated respectively in  by custom runtime code interop , . The custom runtime code interop ,  are configured to forward calls to respective custom runtime code , , which forward the calls to the configuration context . Through use of the proxy and COM objects, the unmanaged application  may retrieve configuration data through the configuration context  implemented in managed code .","As shown in , the access of configuration data for managed and unmanaged applications differs, one to another. The following sections provide configuration access code samples for both cases, in which C# is discussed as an example of managed code and C++ is discussed as an example of unmanaged code. Although C# and C++ are discussed as examples of managed and unmanaged code, respectively, a variety of the managed and\/or managed codes may be utilized.","The configuration compiler, as previously described, may be implemented as a command line tool that is used during application build process. The configuration compiler accepts a module schema file as an input and produces one or two source code files, which may be represented as follows:\n\n","The generated code contains a class to be used to access the configuration module's data by an application. This class also contains a copy of module's schema, which is used by the configuration runtime.","Module","A module may be represented by a C# public class, as specified in the module schema file that follows:","public sealed class AbcConfig","{\n\n","}","To access configuration, an application first calls a static property Current to obtain an instance of the module class for the current thread's configuration context. The module's items may then be accessed as properties of the object. In an implementation, each configuration module's item is represented as a single public C# property with the name as defined in the schema.","For unmanaged applications, the C++ module access class is slightly different, which may be represented as follows:","class AbcConfig","{","public:\n\n","};","There are two differences when comparing the unmanaged code with managed code that are shown in the previous examples. First, the application creates an instance of the module class explicitly (e.g., there is no Current property). Second, the module's items are represented as functions because there is no concept of a property in C++.","Properties","Single properties are generated as items that return a type as defined in the module's schema. In an implementation, the properties are guaranteed to return a valid value. For example, a string property Foo will have the following code generated:","<Abc>","<Foo>xyz<\/Foo>","<\/Abc>","Managed generated code may be represented as follows:","public sealed class AbcConfig","{\n\n","}","Unmanaged generated code is represented as follows:","class AbcConfig","{","public:\n\n","}","Collections","Collections are generated as nested classes that mirror the data hierarchy of the configuration module. For example, the Foo property may be put inside a collection De to see the generated access code and its use by an application:","<Abc>","<De>\n\n","<\/De>","<\/Abc>","Managed generated code for the Foo property may be represented as follows:","public sealed class AbcConfig","{\n\n","}","Managed application sample usage of the Foo property is represented as follows:","AbcConfig config=AbcConfig.Current;","String foo=config.De.Foo;","On the contrary, unmanaged generated code for the Foo property may be represented as follows:","class AbcConfig","{","public:\n\n","};","Unmanaged application sample usage of the Foo property is represented as follows:","std::wstring foo;","AbcConfig config;","foo=config.De( )Foo( );","Property Lists","Property lists are accessed through a special class that provides an array-like interface. For example, the Foo property may be made into a list as follows:","<Abc>\n\n","<\/Abc>","Managed generated code for the Foo property list may be represented as follows:","public sealed class AbcConfig","{\n\n","}","Managed application sample usage for the Foo property list may be represented as follows:","AbcConfig config=AbcConfig.Current;","Int count=config.Foo.Count;","String[ ] x=new String[count];","for (Int i=0; i<count; ++i)","{\n\n","}","On the other hand, unmanaged generated code for the Foo property list may be represented as follows:","class AbcConfig","{","public:\n\n","},","PropList_Foo Foo( );","};","Unmanaged application for the Foo property list may be represented as follows:","AbcConfig config;","int count=config.Foo( )Count( );","std::vector<std::wstring>x(count);","for (int i=0; i<count; ++i)","{","x[i]=config.Foo( )[i];","}","Collection Lists","Collection lists are handled in the similar way as the property lists previously described, as shown in the following example:","<Abc>\n\n","<\/Abc>","Managed generated code for the collection list may be represented as follows:","public sealed class AbcConfig\n\n","}","Managed application sample usage for the collection list may be represented as follows:","AbcConfig config=AbcConfig.Current;","Int count=config.De.Count;","String[ ] x=new String[count];","for (Int i=0; i<count; ++i)","{\n\n","}","Unmanaged generated code for the collection list may be represented as follows:","class AbcConfig","{","public:\n\n","};","Unmanaged application sample usage for the collection list may be represented as follows:","AbcConfig config;","int count=config.De( )Count( );","std::vector<std::wstring>x(count);","for (int i=0; i<count; ++i)","{\n\n","}","Property Dictionaries","Property dictionaries, similarly to lists, are accessed through a special class that provides a dictionary-like interface. For example, Foo may be defined as a property dictionary with a string key named id and value of type Guid, which may be represented as follows:","<Abc>\n\n","<\/Abc>","Managed generated code for the Foo property dictionary may be represented as follows:","public sealed class AbcConfig","{\n\n","}","Managed application sample usage for the Foo property dictionary may be represented as follows:","AbcConfig config=AbcConfig.Current;","Guid guid=config.Foo[\u201clmn\u201d];","On the contrary, unmanaged generated code for the Foo property dictionary may be represented as follows:","class AbcConfig","{","public:\n\n","};","Unmanaged application sample usage for the Foo property dictionary may be represented as follows:","AbcConfig config;","GUID guid=config.Foo( )[\u201clmn\u201d];","Collection Dictionaries","Collection dictionaries are also handled in the similar way as property dictionaries that were previously described, as shown in the following example:","<Abc>","<De id=\u201clmn\u201d>\n\n","<\/De>","<De id=\u201copq\u201d>\n\n","<\/De>","<De id=\u201crst\u201d>\n\n","<\/De>","<\/Abc>","Managed generated code for the Foo collection dictionary may be represented as follows:","public sealed class AbcConfig","{","public class Coll_De","{\n\n","}","public class CollDict_De\n\n","}\n\n","}","Managed application sample usage for the Foo collection dictionary may be represented as follows::","AbcConfig config=AbcConfig.Current;","Guid guid=config.De[\u201clmn\u201d].Foo;","Unmanaged generated code for the Foo collection dictionary may be represented as follows::","class AbcConfig","{","public:","class Coll_De","{","public:\n\n","};","class CollDict_De","{","public:\n\n","};","CollDict_De De( );","};","Unmanaged application sample usage for the Foo collection dictionary may be represented as follows::","AbcConfig config;","GUID guid=config.De( )[\u201clmn\u201d].Foo( );","Although the previous discussion described C# as an example of managed code and C++ as an example of unmanaged code, a variety of other managed and unmanaged codes may be utilized to implemented the configuration system as previously described.","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 6","FIGS. 1 and 2","FIG. 5"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
