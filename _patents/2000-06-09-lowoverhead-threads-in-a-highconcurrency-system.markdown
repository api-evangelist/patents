---
title: Low-overhead threads in a high-concurrency system
abstract: A method and system for providing the functionality of dynamically-allocated threads in a multithreaded system, in which the operating system provides only statically-allocated threads. With this functionality, a relatively large number of threads can be maintained without a relatively large amount of overhead (either in memory or processor time), and it remains possible to produce program code without undue complexity. A plurality of dynamically-allocated threads are simulated using a single statically-allocated thread, but with state information regarding each dynamically-allocated thread maintained within the single statically-allocated thread. The single statically-allocated thread includes, for each procedure call that would otherwise introduce a new simulated thread, a memory block including (1) a relatively small procedure call stack for the new simulated thread, and (2) a relatively small collection of local variables and other state information for the new simulated thread.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06874027&OS=06874027&RS=06874027
owner: Network Appliance, Inc.
number: 06874027
owner_city: Sunnyvale
owner_country: US
publication_date: 20000609
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/195,732, filed Apr. 7, 2000.","1. Field of the Invention","This invention relates to low-overhead threads in a high-concurrency system, such as for a networked cache or file server.","2. Related Art","In many computing systems, it is desirable in certain circumstances to be able to process, relatively simultaneously (such as in parallel), a relatively large number of similar tasks. For example, the same or similar tasks could be performed by a server device (such as a file server) in response to requests by a number of client devices. One such circumstance is in a networked cache or file server, which maintains and processes a relatively large number of sequences of requests (sometimes called \u201cconnections\u201d), so as to couple an information requester (such as a web client) to one or more information providers, which are also coupled to the same internetworking system. One known method in which an individual processor or a multiprocessor system is able to maintain a high degree of concurrency is for the system to process each connection using a separate processing thread. A \u201cthread\u201d is a locus of control within a process, indicating a spot within that process that the processor is then currently executing. In general, a thread has a relatively small amount of state information associated therewith, generally consisting only of a calling stack and a relatively small number of local variables.","High concurrency systems, such as networked caches and file servers used in an internetworking system, must generally maintain a large number of threads. Each information requester has its own separate connection for which the network cache or file server must maintain some amount of state information. Each such separate connection requires only a small amount of state information, such as approximately 100 to 200 bytes of information. Since there are in many cases a relatively large number of individual connections, it would be desirable to be able to maintain state information about each such connection using only a relatively minimal amount of memory and processor over-head, while simultaneously maintaining both relatively reliable programmability and relatively high processing speed.","One problem with known systems is that allocation of state information for individual threads does not generally scale well. One of the problems with relatively large numbers of individual threads is that of allocating memory space for a calling stack for each one of those threads. In a first set of known systems, stack space for individual threads is allocated statically; this has the drawback that relatively large numbers of threads require a relatively large amount of memory to maintain all such stack spaces. Although the amount of stack space statically allocated for each individual thread can be reduced significantly, this has the drawback that operations that can be performed by each individual thread are similarly significantly restricted. In a second set of known systems, stack space for individual threads is allocated dynamically; this has the drawback that the minimum size for dynamic allocation of memory is generally measured in kilobytes, resulting in substantial unnecessary memory overhead. Although virtual memory can be used to store and retrieve stack space for individual threads in smaller increments, this has the drawback that compression and decompression of stack space for individual threads imposes substantial unnecessary processor overhead. In a third set of known systems, such as those using the Java programming language, dynamic memory allocation is used to store and retrieve stack space for individual threads; this has the drawback that each procedure call within each thread imposes substantial unnecessary processor overhead.","An additional problem is introduced by the particular use made of multi-threading by the WAFL file system (as described in the Incorporated Disclosures). In the WAFL file system, the C language \u201csetjmp\u201d and \u201clongjmp\u201d routines are combined with message passing among threads so as to support high concurrency using threads. In particular, the requester of an initial file request to the WAFL file system packages the request in a message, which the WAFL file system processes using ordinary procedural program code, so long as data is available for processing the request and the thread need not have its execution suspended. If the thread is suspended for any reason (such as if a resource is not available,) the WAFL file system: (1) requests the needed resource, (2) 1.3 queues the message for signaling when the resource is available, and (3) calls the C routing \u201clongjmp\u201d to return to the origin of the routine for processing the message. Thus, the WAFL file system restarts processing the entire message from the very beginning until all needed resources are available and processing can complete without suspension. While this use of multithreading by the WAFL file system has the advantage that programmers do not need to encode program state when a routine is suspended, it has the disadvantage, when combined with multithreading, that all necessary data structures (to process any arbitrary message) must be collected before the entire message can be processed. In an internetworking environment, collecting all such structures can be difficult and subject to error.","Accordingly, it would be advantageous to provide a technique for creating and using relatively low-overhead threads in a high-concurrency system, such as for a networked cache or file server, that is not subject to drawbacks of the known art.","The invention provides a method and system for providing the functionality of dynamically-allocated threads in a multithreaded system in which the operating system provides only statically-allocated threads. With this functionality, a relatively large number of threads can be maintained without a relatively large amount of overhead (either in memory or processor time), and it remains possible to produce program code without undue complexity.","In a preferred embodiment, a plurality of dynamically-allocated threads are simulated using a single statically-allocated thread, but with state information regarding each dynamically-allocated thread maintained within the single statically-allocated thread. The single statically-allocated thread includes, for each procedure call that would other wise introduce a new dynamically-allocated thread, a memory block including: (1) a relatively small procedure call stack for the new dynamically-allocated thread, and (2) a relatively small collection of local variables and other state information for the new dynamically-allocated thread. When using multithreading in the WAFL file system, high concurrency among threads can be maintained without any particular requirement that the program code maintain a substantial amount of state information regarding each dynamically-allocated thread. Each routine in the WAFL file system that expects to be suspended or interrupted need maintain only a collection of entry points into which the routine is re-entered when the suspension or interruption is completed. A feature of the C language preprocessor allows the programmer to generate each of these entry points without substantial additional programming work, with the aid of one or more programming macros.","The invention provides an enabling technology for a wide variety of applications for multithreaded systems so as to obtain substantial advantages and capabilities that are novel and non-obvious in view of the known art. Examples described below primarily relate to networked caches and file servers, but the invention is broadly applicable to many different types of automated software systems.","In the following description, a preferred embodiment of the invention is de scribed with regard to preferred process steps and data structures. Embodiments of the invention can be implemented using general-purpose processors or special purpose processors operating under program control, or other circuits, adapted to particular process steps and data structures described herein. Implementation of the process steps and data structures described herein would not require undue experimentation or further invention.","Lexicography","The following terms refer or relate to aspects of the invention as described below. The descriptions of general meanings of these terms are not intended to be limit ing, only illustrative.\n\n","As noted above, these descriptions of general meanings of these terms are not intended to be limiting, only illustrative. Other and further applications of the invention, including extensions of these terms and concepts, would be clear to those of ordinary skill in the art after perusing this application. These other and further applications are part of the scope and spirit of the invention, and would be clear to those of ordinary skill in the art, without further invention or undue experimentation.","System Elements",{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 1"},"A system  includes a networked cache or file server (or other device) , a sequence of input request messages , and a set of software elements .","The networked cache or file server (or other device)  includes a computer having a processor, program and data memory, mass storage, a presentation element, and an input element, and is coupled to a communication network. As used herein, the term \u201ccomputer\u201d is intended in its broadest sense, and includes any device having a programmable processor or otherwise falling within the generalized Turing machine paradigm. The mass storage can include any device for storing relatively large amounts of information, such as magnetic disks or tapes, optical devices, magneto-optical devices, or other types of mass storage.","The input request messages  include a set of messages requesting the networked cache or file server  to perform actions in response thereto. In a preferred embodiment, the actions to be performed by the networked cache or file server  will involve access to the mass storage or to the communication network. In a preferred embodiment, the input request messages  are formatted in a known request protocol, such as NFS, CIFS, HTTP (or variants thereof), but there is no particular requirement for the input request messages  to use these known request protocols or any other known request protocols. In a preferred embodiment, the networked cache or file server  responds to the input request messages  with both: (1) a condign set of responsive actions involving the mass storage or the vacation network, and (2) a condign response to the input request messages , the response to the input request messages  preferably taking the form of a set of response messages (not shown.)","The software elements  include a set of programmed routines to be per formed by the networked cache or file server , using the functionality of low-overhead threads and high-concurrency as described herein. Although particular program code is described herein with regard to the programmed routines, there is no particular reason that the software elements  must use the specific program code described herein, or any other specific program code.","Method of Operation",{"@attributes":{"id":"P-00031","num":"00031"},"figref":"FIG. 2"},"A method  includes a set of flow points and a set of steps. The system  performs the method . Although the method  is described serially, the steps of the method  can be performed by separate elements in conjunction or in parallel, whether asynchronously, in a pipelined manner, or otherwise. There is no particular requirement that the method  be performed in the same order in which this description lists the steps, except where so indicated.","At a flow point , the networked cache or file server  is ready to receive and respond to the input request messages .","At a step , the networked cache or file server  receives an input re quest message , and forwards that input request message  to an appropriate soft ware element  for processing. In a preferred embodiment, the step  includes per forming a calling sequence for the software element , including possibly creating a simulated dynamically allocated thread (that is, a thread simulated so as to appear to be dynamically-allocated, hereinafter sometimes called a \u201csimulated thread\u201d or an \u201cS-thread\u201d) within which the software element  is performed. Thus, the software element  can be created using program code that assumes that the software element  is per formed by a separate thread and does not demand relatively excessive resources (either memory or processor time.)","As part of step , the networked cache or file server  allocates a procedure call block  and a local variable block , for use by the simulated dynamically-allocated thread performed by the software element . The procedure call block  includes a set of input variables for input to the software element , a set of output variables for output from the software element , and such other stack element as is known in the art of calling stacks for procedure calls. The local variable block  includes a set of locations in which to store local variables for the software element .","As part of step , the networked cache or file server  determines whether the software element  is a subroutine of a previously called software element  in the same simulated thread. If so, the networked cache or file server  indicates that fact in a block header  for the software element , so as to point back to the particular software element  that was the parent (calling) software element . If not, the networked cache or file server  does not indicate that fact in the block call or block header for the software element .","As part of this step, the networked cache or file server  determines whether the software element  is to be performed by a new simulated thread. If so, the networked cache or file server  adds the new thread block  to a linked list  of thread blocks  to be performed in turn according to a scheduler. In a preferred embodiment, the scheduler simply performs each simulated thread corresponding to the next thread block  in round-robin sequence, so that each simulated thread corresponding to a thread block  is performed in its turn, until it is suspended or completes. However, in alternative embodiments, the scheduler may select simulated threads in other than a round-robin sequence, so as to achieve a desired measure of quality of service, or other administrative goals.","At a step , the networked cache or file server  chooses the simulated thread for execution. The simulated thread, with appropriate data completed for the procedure call block  and local variable block , is performed in its turn, until it is suspended or completes. If the simulated thread is capable of completing its operation without being suspended or interrupted, the scheduler selects the next thread block  in the linked list of thread blocks  to be performed in turn.","After this step, the method  has performed one round of receiving and responding to input request messages , and is ready to perform another such round so as to continuously receive and respond to input request messages .","The method  is performed one or more times starting from the flow point  and continuing therefrom. In a preferred embodiment, the networked cache or file server  repeatedly performs the method , starting from the flow point  and continuing therefrom, so as to receive and respond to input request messages  periodically and continuously.","Program Structures","A set of program structures in a system for providing functionality of low-overhead threads in a high-concurrency system, such as for a networked cache or file server, includes one or more of, or some combination of, the following:\n\n",{"@attributes":{"id":"P-d0e1843","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ local variables"]},{"entry":[{},"int arg; \u2003\/\/ an example, not necessary"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} function_msg;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the program structure above, the definition for the structure type \u201cfunction_msg\u201d includes: (1) the local variables for the dynamically-allocated thread, (2) any input arguments to the dynamically-allocated thread, in this case just the one variable \u201carg\u201d, and (3) any output arguments from the dynamically-allocated thread, in this case none.\n\n",{"@attributes":{"id":"P-d0e1952","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"static void"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function_sthread(sthread_msg *m)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function_msg * const msg = m->data;"]},{"entry":[{},"STHREAD_START_BLOCK(m);"]},{"entry":[{},"\/\/ executable C code"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"STHREAD_RESTART_POINT (m);","\/\/ an example"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"blocking point"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ executable C code",{}]},{"entry":[{},"STHREAD_COND_WAIT (m, cond (m));","\/\/ encapsulated"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"blocking point"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ executable C code"]},{"entry":[{},"STHREAD_END_BLOCK;"]},{"entry":[{},"free (msg);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The program structure above includes, in its definition for the function \u201cfunction_sthread\u201d, an initial program statement obtaining access to the local variables for the simulated thread. This is the statement referring to \u201cm->data\u201d.","The program structure above includes a definition for a start-point for the simulated thread. This is the statement \u201cSTHREAD_START_BLOCK (m)\u201d, which makes use of a macro defined for the name \u201cSTHREAD_START_BLOCK\u201d.","The program structure above includes a definition for a restart-point for the simulated thread. This is the statement \u201cSTHREAD_RESTART_POINT (m)\u201d, which makes use of a macro defined for the name \u201cSTHREAD_RESTART_POINT\u201d.","The program structure above includes a definition for a conditional-wait point (a possible suspension of the simulated thread) for the simulated thread. This is the statement \u201cSTHREAD_COND_WAIT(m, cond(m))\u201d, which makes use of a macro defined for the name \u201cSTHREAD_COND_WAIT\u201d.","The program structure above includes, in its definition for the function \u201cfunction_sthread\u201d, a closing program statement for ending the simulated thread. This is the statement \u201cSTHREAD_END_BLOCK\u201d, which makes use of a macro defined for the name \u201cSTHREAD_END_BLOCK\u201d. The program structure above also includes a statement for freeing any data structures used by the simulated thread. This is the statement \u201cfree(msg)\u201d.","The macro definitions for \u201cSTHREAD_START_BLOCK\u201d, \u201cSTHREAD_RESTART_POINT\u201d, and \u201cSTHREAD_END_BLOCK\u201d collectively form a C language \u201ccase\u201d statement.\n\n",{"@attributes":{"id":"P-d0e2258","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#define STHREAD_START_BLOCK (m) switch (m \u2212> line) { case 0:"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul200009","list-style":"none"},"li":{"@attributes":{"id":"ul200010-li00010"},"ul":{"@attributes":{"id":"ul200010","list-style":"none"},"li":"The macro \u201cSTHREAD_RESTART_POINT\u201d includes an intermediate restart point in the \u201ccase\u201d statement:"}}}},{"@attributes":{"id":"P-d0e2304","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#define STHREAD_RESTART_POINT(m) case_LINE_: m \u2212> line ="},{"entry":"_LINE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The restart point uses the C preprocessor to generate tags that the switch statement uses as branch points. The C macro_LINE_substitutes the line number of the file being processed, so a series of restart points generates a series of unique cases within the switch. Setting m->line to the case just entered means that if the procedure is re-entered the switch statement will branch to the restart point and continue.\n\n",{"@attributes":{"id":"P-d0e2367","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#define STHREAD_END_BLOCK }"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Thus, the C preprocessor generates a \u201ccase\u201d statement in response to use of these macros, which allows the programmer to easily specify each of the proper restart points of the routine.\n\n",{"@attributes":{"id":"P-d0e2426","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"#define\u2003\u2003STHREAD_COND_WAIT(m, \u2003c)\u2003\u2003\\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"STHREAD_RESTART_POINT(m); \\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{\\ if (c) \\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"sthread_suspend( ); \\"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"At an individual restart point, the programmer can use the macro \u201cSTHREAD_COND_WAIT\u201d to conditionally either wait for an operation to complete, or to suspend and restart the simulated thread while waiting for resources for the operation to complete.\n\n",{"@attributes":{"id":"P-d0e2570","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#define STHREAD_INIT(m, msg, handler)\\m = malloc(sizeof(*m)); \\"},{"entry":"msg = zalloc(sizeof(*msg)); \\m \u2212> line = 0; \\m \u2212> data = msg;\\m \u2212>"},{"entry":"handler = handler"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul200017","list-style":"none"},"li":{"@attributes":{"id":"ul200018-li00018"},"ul":{"@attributes":{"id":"ul200018","list-style":"none"},"li":"A set of program structures for actually performing the simulated thread;"}}}},{"@attributes":{"id":"P-d0e2632","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function(int arg)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function_msg *msg;"]},{"entry":[{},"sthread_msg *m;"]},{"entry":[{},"STHREAD_INIT(m, msg, function_sthread);"]},{"entry":[{},"msg\u2212>arg = arg;"]},{"entry":[{},"sthread_run(m);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The program structure above includes, in its definition for the function \u201cfunction\u201d, program code for creating the data blocks for the simulated thread, and for placing data in those data blocks. These are the statements \u201cSTHREAD_INIT(m, msg, function_sthread)\u201d and \u201cmsg->arg=arg\u201d, which make use of a macro defined for the name \u201cSTHREAD_INIT\u201d.\n\n",{"@attributes":{"id":"P-d0e2801","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"switch (m\u2212>line){\u2003\/\/ a field in sthread_msg"]},{"entry":[{},"case 0:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ executable C code"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"STHREAD_RESTART_POINT(m);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ executable C code"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"STHREAD_RESTART_POINT(m);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ executable C code"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The program structure above includes, in its definition for the function \u201cfunction\u201d, program code for creating the data blocks for the simulated thread, and for placing data in those data blocks. These are the statements \u201cSTHREAD_INIT(m, msg, function_sthread)\u201d and \u201cmsg->arg=arg\u201d, which make use of a macro defined for the name \u201cSTHREAD_INIT\u201d.\n\n",{"@attributes":{"id":"P-d0e2990","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct sthread_msg {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int line;"]},{"entry":[{},"void *data;"]},{"entry":[{},"void (*handler)(sthread_msg *);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"jmp_buf sthread_env;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void"]},{"entry":[{},"sthread_run(sthread_msg *m)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (!setjmp(sthread_env)) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"m\u2212>handler(m);"]},{"entry":[{},"free(m);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"sthread_suspend( )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"longjmp(sthread_env, 0);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"sthread_msg *suspended_sthread;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int ready;"]},{"entry":[{},"int"]},{"entry":[{},"cond(sthread_msg *m)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (ready)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"P-d0e3429","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return 1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"suspended_sthread = m;"]},{"entry":[{},"sthread_suspend( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"int"]},{"entry":[{},"set_cond( )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ready = 1;"]},{"entry":[{},"if (suspended_sthread){"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"sthread_msg *m = suspended_sthread;"]},{"entry":[{},"suspended_sthread = 0;"]},{"entry":[{},"sthread_run(m);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ cond( ) changed"]},{"entry":[{},"sthread_run(suspended_sthread);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul200023","list-style":"none"},"li":{"@attributes":{"id":"ul200024-li00024"},"ul":{"@attributes":{"id":"ul200024","list-style":"none"},"li":"A set of program structures for performing simulated threads in conjunction with the WAFL file system, as shown above.\n\nGenerality of the Invention\n"}}}},"The invention has general applicability to various fields of use, not necessarily related to the services described above. For example, these fields of use can include devices other than file servers.","Other and further applications of the invention in its most general form, will be clear to those skilled in the art after perusal of this application, and are within the scope and spirit of the invention.","Technical Appendix","The technical appendix enclosed with this application is hereby incorporated by reference as if fully set forth herein, and forms a part of the disclosure of the invention and its preferred embodiments.","Alternative Embodiments","Although preferred embodiments are disclosed herein, many variations are possible which remain within the concept, scope, and spirit of the invention, and these variations would become clear to those skilled in the art after perusal of this application."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
