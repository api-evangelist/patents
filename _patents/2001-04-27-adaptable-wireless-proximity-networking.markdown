---
title: Adaptable wireless proximity networking
abstract: System and method for dynamic delivery of services and applications from a server to mobile computing devices in a wireless proximity framework. This wireless proximity framework allows users of mobile computing devices to dynamically access services and applications available in a given geographic area without preinstalling software for each service or application. Further, the wireless proximity framework allows developers to more quickly and easily adapt existing non-wireless services for use by heterogeneous mobile computing devices. Still further, the wireless proximity framework allows for services and applications to be delivered in a customized manner to each mobile computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06931429&OS=06931429&RS=06931429
owner: Left Gate Holdings, Inc.
number: 06931429
owner_city: Missouri City
owner_country: US
publication_date: 20010427
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","GLOSSARY","SUMMARY OF THE INVENTION","DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","REFERENCES"],"p":["1. Field of the Invention","The present invention relates generally to the fields of dynamic service provision in a wireless framework. More particularly, the present invention provides for interactions between one or more mobile computing devices and heterogeneous application servers.","2. Background of the Invention","The 1990's saw the rapid expansion and adoption of the Internet (and related technology) by businesses, universities and homes. Corporations invested heavily in building technology infrastructures consisting of servers, networks, and user stations that tied together operations around the world. With the advent of this new communications medium, organizations along with individual users enjoyed the ability to access, present, and manage information that users demanded.","Technology continues to develop into smaller, faster, and less expensive devices. IT infrastructures are extending themselves right into the user's hand via wireless technology. No longer confined by wire-based network connections, users are free to move about the globe accessing data at any time and any place. Along with this mobility comes the demand for a larger number of new software applications involving the combination of a much wider range of technology.","Mobile computing devices (\u201cMCDs\u201d) are one of the newer innovations in computer technology, and sales of MCDs now include personal digital assistants (\u201cPDAs\u201d), palmtop PC's, and handheld wireless communication devices. Traditionally, MCDs allow users to organize personal affairs, write memos, calculate equations, record contact numbers in an address book, and run other basic software applications. However, mobile computing devices have largely been limited in the applications that that they could run due to several factors including: limited processing power\/speed; the need to individually select and download useful applications; power consumption\/battery life; and\/or limited memory and storage. Accordingly, many useful applications are not developed for MCDs because of the limited computing resources possessed by many MCDs. In addition, developing applications for MCDs is complicated by the lack of a standard MCD operating platform. For example, to deliver a software solution to a majority of MCDs a developer would, at a minimum, have to create separate applications for WinCE-based devices, Palm, Inc.'s PALM OS\u00ae-based devices and Symbian Limited's EPOC\u00ae-based devices.","With respect to selecting and downloading useful applications, a MCD user typically would want to select applications and customize his\/her MCD to manage tasks relevant to the user. Initially, downloading an application to a MCD was accomplished via a hardwire connection with a personal computer. The MCD user typically would preinstall an application before the application would be available. The installation process was performed by accessing a web site and downloading the specific application.","As an improvement to interfacing and communicating with other computing devices, later improvements in wireless technologies have allowed the MCD user the opportunity to download an application from a computer without the need for a hardwired connection. However, the burden is still on the MCD user to manually locate a computer capable of interacting with the MCD and to download the appropriate application.","The continuing emergence of wireless network access will lead to a dramatic rise in sales of mobile computing devices. However, the same limitations (battery life, processor speed, etc.) that prevent MCDs from using intensive applications also limit wireless network access. Most existing wireless network access is limited largely to wireless Internet web browsing.","Current attempts to increase the wireless capabilities of PDAs generally have focused on service discovery, a term used to describe the protocols and mechanisms by which a network connected device or software service becomes aware of the network to which it is connected and discovers which network services are available. For example, a PDA needs to discover the home network, and find a service that will provide PDA to PC synchronization capabilities and use that synchronization service.","Service discovery can be pre-configured. This is the solution that techniques such as DHCP, DNS and LDAP provide for enterprise networks. For a relatively static system with infrequent addition of new devices or software services, this may be a viable approach. However, in many instances, new information and services will be added and changed. Present service discovery mechanisms have largely ignored the difficulties of providing services to a multitude of heterogeneous mobile devices, many with their own native operating systems and hardware.","Protocols and technologies have been developed to address new and changing services. Three popular technologies are Bluetooth SIG, Inc.'s BLUETOOTH\u2122, Sun Microsystems, Inc.'s JINI\u2122, and Universal Plug and Play (UPnP). Sun Microsystems developed the JINI\u2122 technology to address needs for networks of Java-enabled devices, using API's as the sole contract between vendors. BLUETOOTH\u2122 is a consortium developing short-range wireless communication protocol, which allows BLUETOOTH\u2122 devices to discover services offered by or through other BLUETOOTH\u2122 devices. Universal Plug and Play (UPnP) is marketed as a language- and operating system-neutral platform. Users of UPnP are able to dynamically download applications to wireless devices regardless of the device vendor.","The following illustrative explanations are provided to facilitate understanding of certain terms used frequently herein, particularly in the Description of Illustrative Embodiments. The explanations are provided as a convenience and are not limitative of the invention.","ADSI (Active Directory Service Interfaces)\u2014a set of interfaces that abstracts the capabilities of different directory services from different network vendors to present a single set of directory service interfaces for managing network resources. Administrators and developers can use ADSI to manage the resources in a directory service, regardless of which network environment contains the resource. Applications written to ADSI will work with any directory service that offers an ADSI provider.","API (Application Program Interface)\u2014a set of routines, protocols, and tools for building software applications.","AutoIP\u2014AutoIP is an enhancement to DHCP that allows devices to claim IP addresses in the absence of a DHCP server or similar IP configuration authority. IP addresses are claimed from a reserved range that is not allowed to be transmitted on the open Internet; thus they are only good for the local network. A device claims an address by randomly generating an address in the reserved range and then making an ARP request to see if anyone else has already claimed that address. AutoIP systems will continually check for the presence of a DHCP server so that if one should ever come online, all the AutoIP devices will attempt to switch their IP addresses to one provided by the DHCP server.","BLUETOOTH\u2122\u2014protocols for short-range radio technology aimed at simplifying communications among Net devices and between devices and the Internet. It also aims to simplify data synchronization between Net devices and other computers.","CORBA (Common Object Request Broker Architecture)\u2014CORBA relies on a protocol called the Internet Inter-ORB Protocol (IIOP) for remoting objects. Everything in the CORBA architecture depends on an Object Request Broker (ORB). The ORB acts as a central Object Bus over which each CORBA object interacts transparently with other CORBA objects located either locally or remotely. Each CORBA server object has an interface and exposes a set of methods. To request a service, a CORBA client acquires an object reference to a CORBA server object. The client can now make method calls on the object reference as if the CORBA server object resided in the client's address space. The ORB is responsible for finding a CORBA object's implementation, preparing it to receive requests, communicate requests to it and carry the reply back to the client. A CORBA object interacts with the ORB either through the ORB interface or through an Object Adapter\u2014either a Basic Object Adapter (BOA) or a Portable Object Adapter (POA). Since CORBA is just a specification, it can be used on diverse operating system platforms from mainframes to UNIX boxes to Windows machines to handheld devices as long as there is an ORB implementation for that platform. Major ORB vendors like Inprise have CORBA ORB implementations through their VisiBroker product for Windows, UNIX and mainframe platforms and Iona through their Orbix product.","DBMS (database management system)\u2014collection of programs that enables you to store, modify, and extract information from a database. There are many different types of DBMSs, ranging from small systems that run on personal computers to huge systems that run on mainframes.","DCOM (Distributed Component Object Model)\u2014an extension of the Component Object Model (COM) to support objects distributed across a network. DCOM was developed by Microsoft and has been submitted to the IETF as a draft standard. Since 1996, it has been part of Windows NT, and is also available for Windows 95. DCOM serves the same purpose as IBM's DSOM protocol, which is the most popular implementation of CORBA. Unlike CORBA, which runs on many operating systems, DCOM is currently implemented only for Windows. It supports remoting objects by running on a protocol called the Object Remote Procedure Call (ORPC). This ORPC layer is built on top of DCE's RPC and interacts with COM's run-time services. A DCOM server is a body of code that is capable of serving up objects of a particular type at runtime. Each DCOM server object can support multiple interfaces each representing a different behavior of the object. A DCOM client calls into the exposed methods of a DCOM server by acquiring a pointer to one of the server object's interfaces. The client object then starts calling the server object's exposed methods through the acquired interface pointer as if the server object resided in the client's address space. As specified by COM, a server object's memory layout conforms to the C++ vtable layout. Since the COM specification is at the binary level it allows DCOM server components to be written in diverse programming languages like C++, Java, Object Pascal (Delphi), Visual Basic and even COBOL. As long as a platform supports COM services, DCOM can be used on that platform. DCOM is now heavily used on the Windows platform. Companies like Software AG provide COM service implementations through their EntireX product for UNIX, Linux and mainframe platforms; Digital for the Open VMS platform and Microsoft for Windows and Solaris platforms.","DHCP\u2014The Dynamic Host Configuration Protocol (DHCP) is a mechanism for providing devices with configuration information needed to access the Internet. The mechanism functions through the use of a multicast request for configuration information that is generally responded to with an IP address and DNS server location.","EJB (Enterprise Java Beans)\u2014Java components that fit together in a standard way, and forms a software component architecture that enables creation, assembly and use of dynamic Java software components. A software component is a reusable software module that is supplied in a binary form. Interface to the component is at a binary level.","Central to Java Beans is a set of APIs called Beans APIs. Supporting the Beans APIs are a number of new Java features which include, without limitation, Reflections, Object Serialization, AWT Enhancements, Inner Classes, RMI, and IDL.","HTTP (HyperText Transfer Protocol)\u2014the underlying protocol used by the World Wide Web. HTTP defines how messages are formatted and transmitted, and what actions Web servers and browsers should take in response to various commands.","IMAP (Internet Message Access Protocol)\u2014a protocol for retrieving e-mail messages from a server to an e-mail client. The latest version, IMAP4, is similar to POP3 but supports some additional features.","JAR (Java Archive)\u2014a platform-independent file format that aggregates many files into one. Multiple Java applets and their requisite components (.class files, images and sounds) can be bundled in a JAR file and subsequently downloaded to a browser in a single HTTP transaction, greatly improving the download speed. The JAR format also supports compression, which reduces the file size, further improving the download time. In addition, the applet author can digitally sign individual entries in a JAR file to authenticate their origin. It is fully backward-compatible with existing applet code and is fully extensible, being written in Java.","Java\u2014an object-oriented language similar to C++, but simplified to eliminate language features that cause common programming errors. Java source code files (files with a java extension) are compiled into a format called bytecode (files with a class extension), which can then be executed by a Java interpreter. Compiled Java code can run on most computers because Java interpreters and runtime environments, known as Java Virtual Machines (VMs), exist for most operating systems, including UNIX, the Macintosh OS, and Windows. Bytecode can also be converted directly into machine language instructions by a just-in-time compiler (JIT). Java is a general purpose programming language with a number of features that make the language well suited for use on the World Wide Web. Small Java applications are called Java applets and can be downloaded from a Web server and run on your computer by a Java-compatible Web browser, such as Netscape Navigator or Microsoft Internet Explorer.","JDBC (Java Database Connectivity)\u2014a Java API that enables Java programs to execute SQL statements. This allows Java programs to interact with any SQL-compliant database. Since nearly all relational database management systems (DBMSs) support SQL, and because Java itself runs on most platforms, JDBC makes it possible to write a single database application that can run on different platforms and interact with different DBMSs.","JINI\u2122\u2014software from Sun Microsystems that defines a set of protocols for discovery, join, and lookup, and provides a leasing and transaction mechanism. JINI\u2122 seeks to simplify the connection and sharing of devices on a network.","JNI (Java Native Interface)\u2014a Java programming interface, or API, that allows developers to access the languages of a host system and determine the way Java integrates with native code.","LDAP (Lightweight Directory Access Protocol)\u2014a set of protocols for accessing information directories. LDAP is based on the standards contained within the X.500 standard, but is significantly simpler and supports TCP\/IP.","OOP (Object Oriented Programming)\u2014Object-oriented programming is based upon the object model where pieces of code called \u201cobjects\u201d contain data (called \u201cattributes\u201d) and may have actions (know as \u201coperations\u201d) performed on it. An object is defined by its interface. The interface defines the characteristics and behavior of a kind of object, including the operations that can be performed on objects of that interface and the parameters to each operations. A specific instance of an object is identified within a distributed object system by a unique identifier called an object reference.","RMI (Remote Method Invocation)\u2014a distributed object model, in which the methods of remote objects written in the Java programming language can be invoked from other Java virtual machines, possibly on different hosts.","RPC (Remote Procedure Call)\u2014a type of protocol that allows a program on one computer to execute a program on a server computer. Using RPC, a system developer need not develop specific procedures for the server. The client program sends a message to the server with appropriate arguments and the server returns a message containing the results of the program executed","SGML (Standard Generalized Markup Language)\u2014a system for organizing and tagging elements of a document; SGML itself does not specify any particular formatting. Rather, it specifies the rules for tagging elements. These tags can then be interpreted to format elements in different ways.","SMTP (Simple Mail Transfer Protocol)\u2014a protocol for sending e-mail messages between servers. Most e-mail systems that send mail over the Internet use SMTP to send messages from one server to another. In addition, SMTP is generally used to send messages from a mail client to a mail server.","SOAP (Simple Object Access Protocol)\u2014a protocol that allows applications to communicate with each other over the Internet, independent of platform. SOAP relies on XML to define the format of the information and then adds the necessary HTTP headers to send it.","SQL (Structured Query Language)\u2014a standardized query language for defining database objects and manipulating data.","SSDP (Simple Service Discovery Protocol)\u2014a Web\/XML standard for describing devices that provides a mechanism whereby network clients, with little or no static configuration, can discover network services. SSDP accomplishes this by providing for multicast discovery support as well as server based notification and discovery routing.","3G (Third Generation of wireless communication technology)\u2014a set of standards for wireless data and voice communications with an intermediate goal of raising transmission speeds up to 2M bit\/sec.","XML (eXtensible Markup Language)\u2014a specification developed by the W3C, XML is a pared-down version of SGML, designed especially for Web documents. It allows designers to create their own customized tags, enabling the definition, transmission, validation, and interpretation of data between applications and between organizations.","UPnP (Universal Plug and Play)\u2014an architecture for pervasive peer-to-peer network connectivity of PCs of all form factors, intelligent appliances, and wireless devices. UPnP is a distributed, open networking architecture that leverages TCP\/IP and the Web to enable seamless proximity networking in addition to control and data transfer among networked devices in the home, office, and everywhere in between.","URL (Uniform Resource Locator)\u2014a standard for writing a text reference to an arbitrary piece of data in the WWW. A URL looks like \u201cprotocol:\/\/host\/localinfo\u201d where protocol specifies a protocol to use to fetch the object (like HTTP or FTP), host specifies the Internet name of the host on which to find it, and localinfo is a string (often a file name) passed to the protocol handler on the remote host.","WAP (Wireless Application Protocol)\u2014a secure specification that allows users to access information instantly via handheld wireless devices.","WML (Wireless Markup Language)\u2014an XML language used to specify content and user interface for WAP devices.","wrapper\u2014an object that encapsulates and delegates to another object to alter its interface or behavior in some way. Also referred to as an \u201cenvelope.\u201d","It is an object of the present invention to promote the rapid development and deployment of wireless proximity network applications.","It is a further object of the present invention to provide a wireless framework for the dynamic delivery of service applications to mobile computing devices that come within the proximity of an application server.","It is a further object of the present invention to enable legacy applications to be easily ported for use by said mobile computing devices.","It is a further object of the present invention to provide customized services to said mobile computing devices.","Systems consistent with the present invention provide a framework that allows for the dynamic addition and deletion of service applications from the memory of mobile computing devices as they move into and out of geographic zones. This service allows for the update, i.e., addition and deletion of available services automatically, without user intervention and without requiring the user to install additional software.","In accordance with methods consistent with the present invention, a method is provided for enabling legacy applications to be quickly made available for use with wireless mobile computing devices, with a minimal amount of porting required.","In accordance with one aspect of the present invention a system for dynamically delivering service applications to a user of a mobile computing device is provided. The system comprises a proximity networking server (PNS) having an associated proximity zone and a client application executable on a mobile computing device. The PNS comprises an access module for communicating wirelessly within the associated proximity zone, a registry of one or more service applications with each service application having one or more associated GUI components configured to be executable on a mobile computing device, and with the PNS configured to expose one or more of the service applications to mobile computing devices within the associated proximity zone. The client application is operable to establish a wireless connection between the PNS and the mobile computing device when the mobile computing device is located within the proximity zone, is configured to retrieve a list of exposed services from the PNS, and is configured to automatically download and execute the associated GUI component of an exposed service application in response to a request by the user to access the exposed service application, with the exposed service application being executed on the PNS, but is accessible to the user through the associated GUI component executing on the mobile computing device. In a narrower respect, the wireless connection utilizes the UPnP protocol. In another narrow respect, the associated GUI component allows the user to access functions of the exposed service application by using remote procedure calls sent from the client application to the PNS. In yet a narrower respect, the PNS further comprises a translation module for translating RPC's received from the client application into the appropriate format for use by the exposed service application and for translating results from the exposed service application into an output readable by the associated client GUI component. In another narrow respect, all downloaded GUI components are deleted from the mobile computing device when the mobile computing device leaves the associated proximity zone.","In accordance with another aspect of the present invention, a method for dynamically providing service applications to mobile computing devices in a proximity networking framework, the proximity networking framework comprising a PNS having an associated proximity zone, the PNS operable to establish a wireless data connection with a mobile computing device located within said associated proximity zone, is described. The method comprises the steps of registering a service application with the PNS (referred to hereinafter as registered service application), with the step of registering the service application further comprising the steps of registering an execution component of a service application with the PNS with the execution component operable to be executed by the PNS to provide the functionality of the service application, and registering at least one associated GUI of the registered service application with the PNS, with the GUI component configured to be executed by a mobile computing device to provide a user interface to the execution component, exposing the registered service application to the mobile computing device coming into the associated proximity zone (referred to hereinafter as the exposed service application), providing to the mobile computing device the UI component of the exposed service application, executing the execution component of the exposed service application on the server, and permitting the mobile computing device to utilize the executing exposed service application through the GUI component executing on the MCD. In a narrower respect, the method further comprises registering an associated access profile of the registered service application with the PNS, with the associated access profile used to determine whether the registered service application should be exposed to the mobile computing device. In another narrow respect, the method further comprises retrieving information about MCD or the user of the MCD (referred to hereinafter as retrieved information) and using the retrieved information to determine whether the registered service application should be exposed to the mobile computing device. In another narrow respect, the method further comprises retrieving information about the MCD or the user of the MCD (referred to hereinafter as retrieved information) and using the retrieved information to customize the exposed service application to the mobile computing device.","The present invention addresses the shortcomings of the prior art with a proximity networking framework that is operable to dynamically offer services to mobile computing devices with minimal pre-configuration.","The term \u201cmobile computing device\u201d is used broadly in the present invention to mean a microprocessor-based device operable to execute software instructions and to communicate with other microprocessor-based devices or a network through a wireless connection. Examples of such microprocessor-based devices include, without limitation, personal digital assistants (PDAs), personal computers (PCs), notebook computers, palmtop computers, network computers, network terminals, Internet appliances, wireless communication devices (e.g., mobile wireless phones), and game consoles. These devices may be operative to communicate with other computing devices wirelessly through any means of wireless communication, including without limitation, infrared, RF, BLUETOOTH\u2122, 802.11, 3G, and cellular.","Overview of the Proximity Networking System","Methods and systems consistent with the present invention operate in a distributed system (\u201cthe exemplary system\u201d) with various components, including both hardware and software. The exemplary system (1) allows wireless users to dynamically access services and applications available in a given area; and (2) provides developers with tools to adapt applications and services for use by wireless mobile computing devices.","For purposes of the present disclosure, a \u201cservice\u201d or \u201capplication\u201d refers to a resource, data, software application or functionality that can be accessed by a user, program, device, or another service and that can be, without limitation, computational, storage-related, information-related, and\/or communication-related. Examples of service include, but are not limited to: providing information, facilitating purchases and other financial transactions, implementing secured access mechanisms, and messaging.","Advantageously, at most, a user only has one piece of software to install on his or her MCD to access services. Further, the services offered to a MCD may be tailored or customized based upon data contained on MCDs such as, without limitation, user preferences, security preferences, profiles, and user identification. For developers, existing applications are more easily delivered to many heterogeneous mobile computing devices than developing new applications from scratch or porting whole applications to MCD platforms. In addition, by utilizing the exemplary system, developers are not limited by the limited computational power and storage resources of many MCDs. Still further, unlike traditional HTML-based systems the exemplary system provides for eventing, or server-driven communication.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 1","b":["100","100","110","112","55","50","110","120","112"]},"Proximity zone  is the geographic area within which services are made available by proximity network server  to one or more clients. Though only one client  is depicted, in the exemplary system, services may be provided to a plurality of clients provided they are within proximity zone .","To access the services available within proximity zone , client application  must first be installed and running on client . In the exemplary system , client  is shown as a PDA. However, one skilled in the art would understand that the present invention contemplates the use of any mobile computing device and is not limited solely to PDAs. In some embodiments, client application  may be integrated into the client , for example, as part of the firmware, as part of the operating system, or as preloaded software. Advantageously, in these embodiments the user of client  would not have to install any software to access the services offered by PNS .","Proximity network server  is configured to perform two primary functions. First, it is operable to expose services to one or more clients within proximity zone . In addition, PNS  is operable to provide the underlying mechanism for executing some or all of an exposed service at the direction of a client. Advantageously, this reduces the computational and\/or storage resources needed by the client and also permits services to be delivered to a variety of heterogeneous client platforms. Generally, this underlying mechanism is based on distributed object computing, wherein the client  invokes object methods on the server  from the client application . One particular sample implementation is depicted in . It is noted, however, that many other configurations and variations utilizing distributed object computing techniques may be utilized in an implementation of the exemplary system without departing from the scope of the present invention.","Distributed object computing combines the concepts of distributed computing and object-oriented computing. Distributed computing consists of two or more pieces of software sharing information with each other. These two pieces of software could be running on the same computer or on different computers connected to a common network. Most distributed computing is based on a client\/server model. With the client\/server model, two major types of software are used: client application, which requests the information or service, and server software, which provides or implements the information or service.","Object-oriented computing is based upon the object model where pieces of code called \u201cobjects\u201d\u2014often abstracted from real objects in the real world\u2014contain data and may have actions (also known as \u201coperations\u201d) performed on them. An object is defined by its interface (or \u201cclass\u201d in C++ parlance). The interface defines the characteristics and behavior of a kind of object, including the operations that can be performed on objects of that interface and the parameters to that operation. A specific instance of an object is identified within a distributed","In a distributed object system, a client application sends a remote request (or \u201cinvocation,\u201d \u201cobject call,\u201d or \u201cprocedure call\u201d) to a server application containing an indication of the operation to be performed on a specific object, the parameters to that operation, the object reference for that object, and a mechanism to return error information (or \u201cexception information\u201d) about the success or failure of a request. The server application receives the request and carries out the request via a server \u201cimplementation.\u201d The implementation satisfies the client's request for an operation on a specific object. The implementation includes one or more methods, which are the portions of code in the server application that actually do the work requested of the implementation. If the implementation is carried out successfully, the server application returns a response to the client, if necessary. The server application may also return exception information.","Referring back to , though PNS  is depicted as a stand-alone server, PNS  may also be connected to a LAN or other network connection such as a WAN, the Internet, intranet, or an extranet. Accordingly, one or more of the services offered through PNS  may originate through another client or server operable to communicate with PNS  through the network connection.","In some embodiments proximity network system  may incorporate multiple PNS servers , each with its own proximity zone . In addition, PNS , at times, will also act as a client to other Proximity Network Servers. A component of application server software  will route method invocations to the appropriate server where the target application resides.","Client application  is configured to perform three primary functions. First, it is operable to detect and offer the proximity services. The list of exposed services (also known as the registry) may contain an index of all applications available from the proximity server to which client  is connected. The registry may include the services resident on PNS  and for which PNS  is acting as a proxy.","In some embodiments, PNS  will send native executables to be run by client . The client application  may be configured to act as a class loader for any native executables to be run by the client . For example, in embodiments with PALM OS\u00ae-based clients, client application  will act as a class loader for PRC executables as all executables on the Palm are PRC files, regardless of the language of the executable, e.g., C\/C++ or Java.","Finally, the client application generates the remote method invocation of the dynamically loaded services and transmits them to the proximity network server . One sample technique for generating such remote method invocations is discussed in conjunction with FIG. .","Although proximity network server  is shown in  as being located within proximity zone , it is not required to be located within. In addition, although proximity zone  is depicted in  as being circular, it is understood that proximity zone  can generally take on any shape or configuration.","As shown in , proximity zones may overlap and can take on almost any conceivable shape or configuration. Proximity zones may partially overlap, such as between zones and , zones and , and zones and . In addition, proximity zones may fully overlap such as with zone and zones , , and . Zones may be adjacent, such as with zones and ","The size and shape of proximity zone  is a design decision affected by many factors including, the wireless transmission mechanism(s) that are used, and desired geographic coverage. In some embodiments, the proximity zone may extend radially from one or more wireless transceivers operatively coupled to a proximity network server . In other embodiments, the proximity zone may extend throughout a fixed geographic area such as a floor or part of a floor (e.g., an office) in an office building.","As shown, the wireless transmission mechanism for each proximity zone  may be an access module , which is operably coupled PNS . As used in this disclosure, \u201coperatively coupled\u201d means connected in such a way that data may be exchanged. It is understood that \u201coperatively coupled\u201d does not require a direct connection, a wired connection, or even a permanent connection. It is sufficient for purposes of the present invention that the connection(s) be established for the sole purpose of exchanging information. Examples of access modules include, without limitation, wireless transceivers, 802.11 base stations, wireless bridges, RF sensors, and IR sensors. The particular type of access module utilized an any given implementation of the exemplary system is a design decision based upon many factors including, but not limited to, size of the proximity zone and the desired transmission protocol. The present invention is not limited to any particular implementation.","For example, in one embodiment, a high-rise office building may have an exemplary system installed. General building-related services may be offered through a building-wide proximity zone. Further, each floor may have specific services available to clients on that floor. Still further, on floors with multiple businesses sharing the floor, each business may have its own proximity zone with its own set of available services. Still further, each business office may be further subdivided to smaller sub-zones including, without limitation, offices, break rooms, and departments.","Proximity zones are limited only by the power and reach of the transmission mechanisms. In some embodiments, proximity zones may be as large as cities, states, or even countries. While in other embodiments, the proximity zone may be only very limited.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 3","b":["100","1","310","110","320"]},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 4","b":["320","50","410","410","50","50","50","420","410","50","50","430","430","50","430","430"]},"If a proximity network server responds  affirmatively to the discovery request , the client  and PNS will negotiate communication parameters . Here, the parameters defining the data communication mechanism are determined. Parameters may include, without limitation, transmission protocols to be used, transmission rate, whether error-checking is to be used, and the network addresses of both client  and PNS . Any transmission protocol available to both the client and PNS may be used without departing from the scope of the invention. Examples include, without limitation UPnP, JINI\u2122 and of Jabber.com, Inc's JABBER\u00ae technology.","In addition, in some embodiments, the client  and PNS may negotiate to utilize one or more transmission security mechanism or protocol may be utilized. In one particular embodiment, the transmission security mechanism may be based upon a digital certificate that is stored on client  and is accessible by client application . Similar, in some embodiments, the client  and PNS may negotiate  to use any compression scheme that both sides agree upon during the negotiation .","If the communication parameters and protocols are successfully negotiated , a data connection  may be established and client  may receive a list of services exposed by PNS .","In some embodiments, before the exposed services registry is received by the client, the client may provide the PNS with information  such as data about its capabilities, preferences of the user, personal information of the user, the identity of the user or client (e.g., by providing a copy of a digital certificate), and\/or security attributes of the user or client. This data may be used by the PNS in determining which service(s) from its registry to expose to client . In some embodiments, this information may be used in the actual provision of services.","In some embodiments, not depicted, PNS  can access data stored on client . This information may have originated from PNS  or from any other source such as a web browser or personal computer. For example, a user may use his or her MCD to connect to a web site and electronically buy a ticket to an event. A digital copy of the ticket may be stored on the MCD. A PNS at the venue for the event may be operable to retrieve the ticket information on the MCD and determine whether to permit entry and the services associated with entry into the venue.","In another embodiment, the list of exposed services  provided by the PNS comprises a service application stub for each exposed service. A \u201cstub\u201d is code and data that facilitates access to a remote function or service. Client application  can use the stub to access the service, and provide the description the service to the user.","Referring back to , client application  allows the user to browse the exposed services and execute one or more of the exposed service applications . In one example, an icon may be displayed on client  for each exposed service. The user could then click on each icon to get more detailed information about the service. If the user desires, he or she may then choose to utilize (or execute) a service application .","In some embodiments, after the data connection is established , MCDs with multitasking capability may reenter low priority listen mode . Advantageously, this allows the user to browse and execute one the exposed services  while simultaneously listening for new services. This functionality may be of particular interest in areas with overlapping proximity zones.","If the user chooses to utilize one or more of the exposed services , the appropriate and necessary software application is automatically transferred from PNS  and installed on client  by client application . Then, the user can use the service. As discussed below in conjunction with , the software application that is transferred to the client application  is usually (but is not required to be) the user interface portion of the service. Advantageously, the more storage-intensive and computational-intensive portions remain on and are executed by the PNS, allowing the client  to be relatively thin.","Alternatively, the entire service application may be transferred from PNS  and installed on client  during step .","As PDA  leaves  the proximity zone , client  is cleaned up . In particular, the services made available to client  are removed as well as any stubs, and software applications or portions thereof downloaded from the proximity network server. Advantageously, the usually limited storage capacity of client  does not become cluttered and full as the user enters several proximity zones. Further, if it is not already in a low priority listen mode  client  may reenter a low priority listen mode  to be ready to detect new services.","Many mechanisms may be employed for client  to determine that is has left proximity zone  and all are within the purview of one skilled in the art. For example, in one particular embodiment, after client  has established its connection with PNS , client  will periodically poll the PNS, which establishes a lease for a predetermined amount of time (which preferably exceeds the polling period). If the lease is not renewed by a subsequent successful poll of the PNS, the lease expires and the connection is terminated.","Optionally, a user may specify that specific applications, such as commonly-used or critical, applications be cached (retained) on the client rather than be deleted. This may be more common as MCD's are given increasing storage capacity. Advantageously, this practice may reduce loading times associated with the transfer and installation of the necessary portions of an exposed service to client prior to execution. The benefits of this practice may be diminished as wireless transmission bandwidth increases.","Proximity Network Architecture",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 5","b":["55","120","505","505","55","120"]},"The client platform adaptation layer  contains the necessary mechanisms to allow client application  to run on the software and hardware platforms of an MCD. Client UI layer  and client framework layer  run on top of platform adaptation layer  to provide the user interface and distributed object functionality, respectively. In particular, client UI layer  and client framework layer , provides the interface for the user of client  to retrieve, browse and utilize to the available exposed services provided through PNS .","Client communication layer  is configured to transmit data, including remote procedure calls, to PNS  and receive data, including application stubs and responses (including exception information) to remote procedure calls from PNS . As mentioned above, communication layer may include one or components for encryption, security, compression, or optimization of transmissions. Particularly with narrow-band wireless connections, compression and\/or optimization may be desirable.","Similarly, the PNS communication layer  is configured to receive data from client  and transform it into a format understandable by the translation, execution, and application layers of application server software . It is also configured to transform and\/or transmit data received from the other layers of application server software  to client . Like client communication layer , PNS communication layer  may also include one or more components for encryption, security, compression, or optimization of transmissions.","In some embodiments, both the client communication layer  and PNS communication layer  may utilize one or more protocols designed for optimal or efficient wireless communications and networking. Examples include UPnP, JINI\u2122 and JABBER\u00ae. In addition, both the client communication layer  and PNS communication layer  may utilize one or more service discovery protocols to facilitate the service discovery step . Examples of service discovery protocols, includes without limitation, SSDP, LDAP and ADSI.","PNS translation layer  is configured to take object procedure calls made by client , to route them to the appropriate target object, being instantiated on PNS  or onto another server operably coupled to PNS . In addition, the translation layer  translates the remote object calls received from the client application  into an appropriate format for the target object. Similarly, the translation layer  formats the response from the target object into an appropriate format for the client application . Further, translation layer  may also determine which services are made available to client application .","PNS application layer  may contain services offered by PNS  and vectors for which PNS  is acting as a proxy. (e.g., a web server or another PNS server).","Communication layer , translation layer , and application layer  are all based on PNS platform adaptation layer . PNS platform adaptation layer  plays a role similar to that played by client platform adaptation layer \u2014it allows the application server software to interact with the specific hardware and software (operating system) underlying PNS .","Each service in (or linked to through) application layer  contains at least two components: an execution component to be executed by PNS  in translation layer , and a remote component to be sent to client . In most cases, the remote component is primarily a UI component tied to the functionality of the execution component. The UI component is executed by client UI layer , permitting the user to access the functionality of the execution component which is actually running on the PNS .","Some service may have more than one associated remote components. Advantageously, this permits remote components to be tailored to the capabilities of particular MCDs. For example, a service may have remote components in the format of a platform-specific executable for the Palm OS, a platform-specific executable for the WinCE platform, and a platform-independent component written in WML. Advantageously, the execution component remains the same. Since the remote components take less time and resources to develop than execution components, developers can make the underlying service available through the several wireless platforms more easily than developing or porting multiple platform-specific software applications for each service. Thus, the present invention enables existing software applications to be easily configured for use in the dynamic proximity framework. Rather than rewriting the entire software program, developers merely need to create a GUI that is executable on a portable computing device, i.e., configured to interface with the actual software application running on a proximity network server.","Translation layer  may use any information about or relating to client  and\/or its user to determine which remote components may be used by client . More particularly, when a service is requested for the first time, the client application  (specifically initiated by UI layer ) will request the service object from PNS server . The PNS server framework  will determine the appropriate form of the remote object to send based upon the capabilities of the client . In one embodiment, the default GUI may be a WML interface. In others, it may be a native executable (e.g., a PRC file) for Palm, WinCE, Epic, and Microsoft Corporation's WIN32\u00ae application programming interface. In others it may be a Java Spotlet packaged in platform specific formats (e.g., by a dynamic spotlet packager in the PNS server framework ).",{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIGS. 6 and 7","b":["55","120"]},"Client and PNS Communication Layers","The embodiments shown in  utilize a UPnP engine for wireless transmissions and to assist with service discovery. The UPnP engine is utilized by both the client application  and the proximity network server . UPnP is built upon SOAP which is built upon XML. In some embodiments, to keep the transfer of data small and efficient, an optional XML tokenizer may be added to compress the data prior to transmission. The UPnP engine may be written in ANSI C++ and compiled for both the client and server. The client will have a native-executable layer exposed to the client application and the server will use Java to expose the UPnP engine to the Proximity Network Sever. Optionally, the Java Native Interface may be used instead of Java.","The configurations of both the client communication layer  and PNS communication layer  are that of a standard UPnP engine. XML parsers ( and ) are used extensively in UPnP. All description and control data is communicated by XML documents in UPnP, so the XML parser is used by both the core UPnP protocols and by the client or service software. In one particular embodiment, the Xerces XML parser is used.","The HTTP stack  accepts all HTTP requests for SSDP, SOAP, GENA, and the Mini Web server over TCP and UDP connections. It will parse all HTTP headers and hand the connection over to the appropriate module for processing.","The HTTP server  handles standard HTTP GET requests, allowing XML description, presentation, and control documents to be served from the PNS. This module manages the locations of documents that are available and implements the actual streaming of the data via the HTTP protocol.","The SSDP ( and ) implements the discovery phase of UPnP, allowing search requests to be multicast for devices or services and receive the response from those searches. Likewise, SSDP ( and ) enables devices to advertise their existence and services to clients when they are connected.","One skilled in the art will appreciate that other service discovery mechanisms and protocols may be utilized as a replacement or in conjunction with SSDP. Examples include, LDAP and ADSI, both commonly found in enterprise level systems.","The General Event Notification Architecture or \u201cGENA\u201d ( and ) implements the eventing phase of UPnP. Control points use this module to subscribe or unsubcribe to events from device services. Devices receive subscribe and unsubscribe requests from control points via this module and generate appropriate event notifications.","The SOAP libraries ( and ) provide the control phase of UPnP. Clients use this module to general appropriate XML documents to retrieve or change the state tables of device services. Devices use this module to decode the control requests and generate the correct response.","Memory pool  provides the memory management services that will be unique for each MCD platform.","A tokenizer (not shown) may be used in conjunction with all UPnP messages that are transferred to makes the data smaller and more efficient. The tokenizer layer encodes and decodes UPnP messages to the XML layer which passes the data to the SOAP layer which in turn passes it to the UPnP engine where the appropriate action is then executed. This engine will provide the Client Launcher Application with a registry list from which the class loader will determine which PRC files to load when the user requests it.","Advantageously, the presence of communication layers  and  makes it possible for the other layers of client application  and application server software  to operate without having to directly interpret the SSDP, GENA, and SOAP.","Client and PNS Platform Adaptive Layers","As mentioned above, the platform adaptive layers are used to allow the respective software application to interface with the underlying hardware and software (operating system\/platform) of the client and the PNS.","The intrinsic data types component  accounts for variations in intrinsic data types among different platforms. For example, some platforms do not have a \u201cSTRING\u201d data type. Here, intrinsic data types component  may simulate a STRING data type utilizing an array of available CHARACTER data types.","Localization component  may account for variations in text messages based upon geographic location by providing multi-language support.","Similarly, process management component , memory management component , time\/timer component , network support component , error\/exception handling component , and debug\/logging component  all account for platform-and operating system-specific variations and nuances in the enumerated area.","In the illustrated implementation, PNS is based upon the Java Platform. Accordingly, the combination of Java Virtual Machine  and operating system layer  performs the same functionality as client platform adaptation layer .","Client UI Layer","Through thin client , the user has control over many aspects of the proximity network services that he or she wishes to be a part of. For example, the user may be able to set service preferences, program options, identification information, security levels, length of the lease for time-out purposes, and\/or whether he or she wants to use secure transmissions.","Proximity network explorer  exposes a master list or \u201cregistry\u201d of services available to the user and allows the user to search for and browse available services. Each service may be a PRC (Palm-native executable) that is launched from the proximity application launcher. Native C-based PRC files will need to implement the API to communicate with the UPnP engine. Java-based PRC files will need to be implement a JNI wrapper API to the UPnP engine. WML\/WAP data will be viewed by a WML browser (which will be a native C PRC). In one embodiment, the proximity network explorer  functions as a desktop with icons depicting each of the available exposed services. In embodiments utilizing service stubs, proximity network explorer  would present the user with a brief description of the service in addition to the icon.","If the user selects a service to execute, and if the UI component of that service has not already been transferred to and installed on client , application launcher  will request that the PNS  send the UI component to client . Application launcher  will then execute the UI component, graphically depicting the operation of the service. In the case of native executables such as PRC files, client  will need to implement proprietary interfaces (or APIs) to communicate back through the UPnP engine. In particular, with native C\/C++ PRCs, the developer may simply implement the native C\/C++ APIs. In the case of Java there may be Java APIs, which are JNI wrappers around the C\/C++ APIs. Advantageously, the developer will never need to touch the UPnP layer or have to understand the protocol. All remote method invocations will be handled \u201cunder the hood.\u201d","As described above, though the service is depicted on client , the service is actually being implemented on PNS . Application launcher  will take any user requests and (through client framework layer ) generate RPC that are sent to PNS . Application launcher  will also display (with the assistance of client framework layer ) responses from PNS .","Client Framework Layer","Client framework layer  performs the majority of the functionality of client application . For example, it generates the actual RPCs from a user request through application launcher , and sends it to PNS  through communication layer . It also receives the responses from PNS  and sends them in the proper format to application launcher  for display. Client framework layer  is also responsive to requests for data from PNS .","PNS Applications Layer","Applications layer  may contain one or more existing applications (or services) . In some instances, these may be legacy non-wireless applications. In other cases, the application may not be contained within PNS . For example, applications layer  may contain a vector to an existing application running on another server, such as a web server or another proximity network server operatively coupled to PNS , for which PNS  is acting as a proxy. In some embodiments (not shown) one proximity network server may act as a client to other proximity networks servers.","The applications in the application layer  may be Java applications in the JAR format. The applications may need to implement our proprietary interfaces but should otherwise function as any Java object. As such they can be written to perform any function that Java can currently perform. Such abilities include interaction with Enterprise Java Beans (EJB), Email functionality via SMTP and IMAP, database interaction with JDBC, and a Java-to-COM bridge. Advantageously, by using the Java applications, legacy services can be integrated within the infrastructure of the present invention and ported to a mobile computing device with a thin-client user interface (e.g., a Palm).","PNS Translation Layer","Requests (such as RPCs and requests for UI components) generated by client , will arrive to the PNS translation layer after going through both the client and PNS communication layer. Remote request  is generally configured to determine where the intended recipient of the request is located and route the request there.","With respect to RPC requests, remote request  will take the RPC, remove any extraneous information added by the communication layer and direct the RPC to its intended target. In one particular embodiment, the RPC arrives to the remote request router  encapsulated in a SOAP envelope. In this embodiment, the remote request router  would remove the SOAP envelope before directing the RPC to its target.","To direct the RPC to its target, remote request router  would reference object registry . Object registry  may contain a listing of all accessible objects that are either available on PNS  or available on another server for which PNS  is acting as a proxy; a categorization and classification of the object; a unique identifier for each object (called a \u201cuuid\u201d) such that if multiple instances on an object exist in the registry, there will be a unique uuid for each instance; physical location of the object, and its preferred protocol for access; and various attributes about the object as appropriate to the application. Sample attributes may include, without limitation, icons, version number, description, and vendor name.","Also, during the service discovery step  discussed above in conjunction with , object registry  is configured to determine which of the services in applications layer  to serve up to client . As discussed above, object registry  may use any data collected from or about client  and\/or the user of client  in making this determination. In some embodiments, the services may have predetermined permissions associated with them which may be mapped to a directory service. In these embodiments, the object registry  may determine which services to serve up to the client by use of the mapping structure. In one specific embodiment, when the service discovery search request is sent from the client , remote request router  will convert that into a \u2018query\u2019 of object registry . The query as interpreted by object registry  will give a result set of services that meet the query criteria.","Before the RPC is delivered to the target object, the RPC goes through application protocol adaptive layer . Protocol adaptive layer contains one or more protocol adapters such as native Java adapter , EJB adapter (RMI) , and COM\/DCOM Adapter . Though specific adapter types are depicted, one skilled in the art will appreciate that the exemplary system is not limited to any particular protocol adapters. Application protocol adaptive layer  uses the protocol adapter that corresponds to the protocol of the RPC's target object to properly format the RPC.","If a service is offered on PNS , the associated objects would be found in object pool . Object pool  is an object repository used by programs within the exemplary system  to store objects. Programs use the application object pool to store objects persistently as well as to make them accessible to other devices within the exemplary system.","In embodiments utilizing a LDAP registry service, the LDAP registry may also serve as object pool . With LDAP, the underlying directory service can store binary data, which could be used to store the object itself. In these embodiments, the LDAP registry service may be physically located on a separate server operably coupled to PNS .","After the RPC reaches the target object, the response goes back through application protocol adaptive layer  and remote request router , where it's sent back to the appropriate client through the respective communication layers.","The server application will expose a list to the client application launcher using the UPnP protocol. The UPnP engine will be used to translate and compress UPnP information to and from the server. The server will then translate UPnP calls to java method calls. Thus, with a similar technology (RMI) the process of remote communication will be mostly removed from the programmer's responsibility. Applications can then be written to communicate with other existing technologies or applications just as a Java program would.","UI Packager","When client  requests a UI component for a service, UI Packager  is configured to select the appropriate associated UI component and transfer it to client . As mentioned above, PNS  may obtain information about the capabilities of client  and use that data to choose the UI component that would run the best on the particular client .","Although systems and methods consistent with the present invention are described as operating in the exemplary system in specific programming environments and utilizing specific protocols and standards, one skilled in the art will appreciate that the present can be practiced in other systems, other programming environments, and other protocols and standards. Additionally, although aspects of the present invention are described as being stored in memory, one skilled in the art will appreciate that these aspects can also be stored on or read from other types of computer-readable media, such as secondary storage devices, like hard disks, floppy disks, or other forms of RAM or ROM.","Operation of An Illustrative Embodiment","The following contains a description of the operation of one particular exemplary system. In this example, the user has a mobile computing device enabled with the PNS client application. When a user brings the MCD into the proximity zone of a proximity network server, the mobile computing device detects a ping from a proximity network server, a hardware interrupt signal is sent to the client application. The interrupt signal causes the client application to send out a discovery request known as an M-SEARCH request. The discovery request uses SSDP as required in the UPnP specification. The proximity network server returns a message to the client including a brief description of the service and the icon to be placed in the browser. The UPnP specification defines this process as DESCRIPTION. The MCD user now has the option to use any service that has been discovered.","When the user clicks a service icon, the client application makes an HTTP request to the service's application description document. An application description document is a standardized XML formatted document as defined by the UPnP specification. This document contains a detailed set of information about the service and most importantly, information necessary for the browser to locate the client interface to the application. The client application also makes an HTTP request for the client interface. The PNS UI packager determines the optimal client interface for the requesting hardware and returns the information in one of any number of formats including but not limited to WML, Java spotlet, or a native application (e.g., a .exe or .prc file). The PNS UI packager then sends the client interface to the browser using a standard HTTP response. Once the browser receives the client interface, the browser then loads the client interface into the memory of the client hardware (in this case the PDA).","When the user invokes a method or function on the client application, the underlying transport libraries package the information into a SOAP envelope (or message) and sends the message to the proximity network server. The proximity network server processes the message and invokes the proper remote method on the server's side and returns the response or error in SOAP format.","When the proximity network server receives a request, the server proceeds through a series of steps that are not exposed to the end user or developer. The application server compares the request with a registry of mapped services\/methods. If the requested method exists then the remote request router invokes the method (on the client's behalf) on one of the applications in the object pool. Applications are stored in the object pool through a registration process that occurs when the developer decides to wirelessly enable his application. The registration process also creates the method mappings in the applications registry.","If the method to be invoked is on a standard Java application or Java bean, the RPC is made using Java's introspection technique adapter. If the application is an Enterprise Java Bean, a COM\/DCOM exposed object or a CORBA enabled Unix application, the RPC proceeds through the protocol adaptive layer using one of the protocol adapters. The resulting data from the RPC is then translated back into a SOAP message and routed back to the client.","Vertical Applications","The systems and methods consistent with the present invention may be deployed in several varied applications and types of applications. Examples include but are not limited to: facilitating retail transactions, providing information at and about a variety of locations (including e.g., movie theaters, airports, government offices, taxi stands, bus stops, and private offices), instant messaging within a proximity zone, and facilitating a myriad of other services (such as ordering goods and services, reporting incidents, and utilizing equipment).","Airports","A mobile computing device (MCD) user enters a proximity zone in an airport and his\/her wireless MCD broadcasts a service discovery request which is detected by a proximity network access module. The proximity network server establishes communications with the user's MCD and determines the user's identity and profile information. At this point, the PNS sends a list of exposed services applications to the user's MCD. In an airport setting, these applications may include flight check-in, gate\/departure information, seating assignment\/plane configuration, etc. The user's MCD presents these applications as icons within a browser area. Customer can then begin selecting icons\/applications allowing them to check-in, change their seat assignment, and make sure their travel award account number has been credited.","Events","A user may purchase tickets to a baseball game or other event via the Internet and e-ticket confirmation is downloaded to the user's MCD. On game day, the user arrives at the baseball stadium and upon entering the gate area the user's MCD detects a ping from a proximity network server in the stadium. The MCD transmits a service discovery request and communications are established between the user's MCD and the PNS. The PNS verifies the user ID and e-ticket information allowing the user entrance to the stadium. As the user enters the ballpark area, information icons regarding seating, ballpark layout (including bathrooms and vending), and team line-ups may be transmitted to the user's MCD. During the seventh inning stretch, the user's MCD receives a special promotion icon promoting coupons\/incentives from team sponsors. In addition, the user may have instant replay services on his\/her MCD allowing the user to watch an instant replay video of some or all parts of the event. In some instances, before leaving the ballpark the user (using the MCD) may be able to purchase tickets to attend an upcoming game\/event.","Retail","Before traveling to a grocery store, a MCD user downloads information (e.g., coupons\/specials) for the neighborhood grocery store from their home network to their MCD. Upon entering the store, the MCD is in the proximity zone of a proximity network server. Alternatively, coupons and specials can be dynamically loaded to the MCD at the store utilizing the store's proximity network. After the MCD transmits a service discovery request, the MCD and the PNS establish communications, and the PNS determines the customer's identity and profile information, including shopping preferences. The PNS sends information on in-store specials to client device. All applications are presented on client device as icons within a browser area","From the browser area, the user can select an application by clicking on an icon, allowing them to see list of in-store specials, etc. As the user moves through the store, the MCD communicates with other PNS's in different proximity zones associated with different departments (seafood, dairy, meat, frozen foods, etc.). For each department, coupons can be sent to the user's MCD as they enter the department. When the user enters the proximity zone near the checkout area, automatic check-out scanners in communication with the user's MCD enable the user to check-out. The MCD transmits collected coupons and customer bank check card information to the proximity network server, allowing the user to pay for groceries in a cashless transaction.","The preceding examples are included to demonstrate specific embodiments of the invention. It should be appreciated by those of skill in the art that the techniques disclosed in the examples which follow represent techniques discovered by the inventor to function well in the practice of the invention, and thus can be considered to constitute preferred modes for its practice. However, it should be understood that the invention is not intended to be limited to the particular forms disclosed. Rather, the different aspects of the disclosed compositions and methods may be utilized in various combinations and\/or independently. Thus the invention is not limited to only those combinations shown herein, but rather may include other combinations. Further, those of skill in the art should, in light of the present disclosure, appreciate that many changes can be made in the specific embodiments which are disclosed and still obtain a like or similar result without departing from the spirit and scope of the invention.","The following references, to the extent that they provide exemplary procedural or other details supplementary to those set forth herein, are specifically incorporated herein by reference:\n\n","[UPnP] Microsoft Corporation. Universal Plug and Play Device Architecture, version 1.0. URL as of 27 Apr. 2001: http:\/\/www.upnp.org\/download\/UPnPDA1020000613.htm\n\n"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following drawings form part of the present specification and are included to further demonstrate certain aspects of the present invention. The invention may be better understood by reference to one or more of these drawings in combination with the detailed description of specific embodiments presented herein.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 7","FIG. 5"]}]},"DETDESC":[{},{}]}
