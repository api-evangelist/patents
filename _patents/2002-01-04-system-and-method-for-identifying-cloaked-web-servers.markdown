---
title: System and method for identifying cloaked web servers
abstract: A search engine receives from a client a representation of a first object that was returned by a web server to the client in response to a request from the client. The search engine receives from the web server a second object in response to an identical request from the search engine, and compares the representation of the first object to a representation of the second object. The web server is determined to be cloaked if the representation of the first object does not match the representation of the second object. Typically, the client receives a URL embedded in a response to a search request submitted to the search engine. A toolbar operating in conjunction with the web browser on the client processes the URL. The processing includes: directing the web browser to obtain an object corresponding to the URL from a web server addressed by the URL; converting the object to a feature vector; and delivering the feature vector and the URL back to the search engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06910077&OS=06910077&RS=06910077
owner: Hewlett-Packard Development Company, L.P.
number: 06910077
owner_city: Houston
owner_country: US
publication_date: 20020104
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The present invention relates generally to a system and method for detecting cloaked web servers, and more particularly to identifying web servers that provide a first object to a client and a second object to a search engine (i.e., web crawler) in response to an identical request from each.","Cloaking is the process by which a web server delivers a first version of an object, such as a web page or HTML document, to a user and a second version of the object to a search engine (or more specifically, a web crawler affiliated with the search engine) in response to essentially identical requests. A web crawler is a process that accesses a plurality of web servers to index the contents of the web servers. More specifically, the web crawler downloads objects from the web servers and stores the objects and their corresponding URLs (i.e., the network addresses of the objects) in a database. A search engine affiliated with the web crawler subsequently accesses the database to select zero or more objects that correspond to a search request received from a client (i.e., a user operating a personal computer).","Web servers are able to identify the program (i.e., a web crawler\/search engine or a user's web browser) that emitted a request (e.g., an HTTP request) for a particular object by reference to content of the request. Table 1 illustrates the contents of a typical HTTP request:",{"@attributes":{"id":"p-0005","num":"0004"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GET \/index.html HTTP\/1.0"]},{"entry":[{},"HOST: www.domain_name.com"]},{"entry":[{},"USER_AGENT: Mozilla\/4.71"]},{"entry":[{},"REFERER: http:\/\/search_engine.com"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The first line of Table 1 identifies the object sought and the location of the object on a corresponding web server. In this example, the object is an HTML document entitled \u201cindex.html\u201d and is located in the root directory. Additionally, the first line includes a protocol identifier. In this example, the protocol is version 1.0 of HTTP, which is used to request and transmit files, especially web pages and web page components, over the Internet or other computer network.","The second line of Table 1 identifies the hostname, which can be translated into an Internet address, of a web server. In this example, the hostname is \u201cwww.domain_name.com\u201d. The URL corresponding to the object of this request is, therefore, \u201chttp:\/\/www.domain_name.com\/index.html\u201d.","The third line of Table 1 is the USER_AGENT field, which identifies the program that emitted the request. In this example, \u201cMozilla\/4.71\u201d and the remaining text identifies the program as a Netscape\u00ae web browser. Note that web browsers are typically associated with users, not search engines.","The fourth line of Table 1 identifies the hostname of the entity that referred the requester to the identified web server. In this example, the referrer is a fictional search engine.","With respect to the present invention, line three of Table 1 is the most important. This line can indicate whether the request was sent by a web browser or a web crawler\/search engine. More specifically, most web browsers set the USER_AGENT field to a string that is easily recognizable by a web server as corresponding to a web browser, and thus not a search engine\/web crawler. Additionally, most web crawlers\/search engines have well known names, which are typically included in the USER_AGENT field. For example, a web crawler associated with the search engine Alta Vista\u00ae is named \u201cScooter.\u201d A request for an object from this web crawler would, therefore, typically include the string \u201cScooter\u201d in the USER_AGENT field. This field can, however, be arbitrarily set before being sent by a web browser or a web crawler\/search engine to a web server. The USER_AGENT field does not provide, therefore, a foolproof means for identifying the program that emitted the request.","However, an IP-address typically included with a request can also be used to identify the program that emitted the request. Persons skilled in the art recognize that HTTP is a protocol that operates in conjunction with but on a higher level than TCP\/IP, which is a packet based protocol, and that an IP-address is a 32-bit number that identifies each sender or receiver of TCP\/IP packets. HTTP requests are included in TCP\/IP packets, so HTTP requests are accompanied by the IP-address of the requestor.","Importantly, web server operators who engage in cloaking typically have lists of IP-addresses associated with web crawlers\/search engines. So when, for example, an HTTP request is received by a web server, the IP-address is checked to determine whether the requester is, or is associated with, a web crawler\/search engine. The IP-address of the requestor is thus another means for identifying the program that emitted the request.","Proponents of web cloaking claim a number of benefits from cloaking\u2014including code (i.e., the design of a given object) and copyright protection. The importance of protecting code stems largely from financial gain made possible by a large number of referrals induced by the code.","Whether a search engine refers a given web server to a user (i.e., returns a URL corresponding to the given web server in response to a query from a user) depends upon the relevance of objects available from the web server to a given query. Relevance is, in turn, determined in part by, for example, an analysis of keyword combinations, keyword density, or keyword positioning found in a given object. If a search engine determines that an object is highly relevant to a particular keyword or set of keywords submitted with a query, the object may become desirable to other web server operators, which may copy or emulate the object. In particular, a duplicate of the object can be placed on another web server, which has the effect of devaluing the original object, or the object's keyword combinations, keyword density, and\/or keyword positioning can be emulated to achieve the same level of relevance for another object. The comparative relevance of a given object can be determined by conducting searches designed to result in a referral of the object.","There is, however, a darker side to cloaking. Some web server operators seek to deceive search engines, and thus users, in order to increase the number of referrals to their web server. For example, an operator could supply an object that is highly relevant to common searches to search engines, but supply an unrelated page to a user in response to object queries. This action compromises search engine integrity and wastes user time.","There is needed in the art, therefore, a system and method for identifying cloaked web servers.","In summary, a method of the present invention includes a search engine receiving from a client a representation of a first object that was returned by a web server to the client in response to a request from the client. The search engine receives from the web server a second object in response to an identical request from the search engine, and then compares the representation of the first object to a representation of the second object. The web server is determined to be a cloaked web server if the representation of the first object does not match (i.e., exactly match or, preferably substantially match) the representation of the second object. The representations of the first object and the second object are preferably feature vectors. In some embodiments, the feature vector of the first object is said to match the feature vector of the second object if at least a predetermined number of features in the two feature vectors are the same.","In one embodiment, the client receives a URL embedded in a response to a search request submitted to the search engine. A toolbar operating in conjunction with the web browser on the client processes the URL. The processing includes directing the web browser to obtain an object corresponding to the URL from a web server addressed by the URL, converting the object to a feature vector, and delivering the feature vector and the URL back to the search engine.","Referring to , there is shown a diagram of a computer system  in which an embodiment of the present invention can be implemented. The computer system  includes at least one search engine , a plurality of clients  (also herein called client computers), a plurality of web servers , and a communications network . The communications network , which interconnects the search engine , the plurality of clients , and the plurality of web servers , is the Internet or other wide area network (WAN), an intranet, a local area network (LAN), metropolitan area network (MAN), or a combination of such networks.","As indicated in , the search engine  includes standard server components such as one or more processing units , an optional user interface  (e.g., keyboard, mouse, and a display), memory , a network interface  for coupling the search engine  to clients  and web servers  via communications network , and one or more system buses  that interconnect these components. Memory , which typically includes high speed random access memory as well as non-volatile storage such as disk storage, stores an operating system , a query processor module , a web crawler module , a feature vector module , a cloak detection module , and a database .","The operating system  includes procedures for handling various basic system services and for performing hardware dependent tasks. Further, the one or more processing units  execute the programs (i.e., the query processor module , the web crawler module , the feature vector module , and the cloak detection module ) under the control of the operating system , which also provides the programs with access to system resources, such as the memory  and user interface .","The query processor module  responds to queries from clients  for the URLs of documents stored on the web servers . Each query typically includes one or more search terms, and the response to the query includes zero or more (and preferably one or more) network addresses (e.g., URLs) of objects (e.g., documents maintained by one or more of the web servers ) corresponding to the one or more search terms. More particularly, the query processor module  typically selects zero or more URLs for inclusion in a response to the queries by reference to one or more search terms included in the query and to a table of URLs  maintained in a database . The particular methodology used for URL selection is not important to the present invention. Many techniques are known in the art, and all are within the scope of the invention.","The web crawler module  obtains objects from the web servers  that correspond to URLs included in the table of URLs . More specifically, the web crawler module  updates the list of URLs included in the table of URLs  periodically by downloading objects from web servers  and determining whether the objects have been modified since the last time a particular object was downloaded. If an object has been modified, information in the table of URLs  pertaining to the object is updated. The table of URLs  is preferably indexed by the words included in the objects corresponding to the URLs stored in the table of URLs .","The web crawler module  and query processor module  are well known in the art. Except as noted below, with reference to the cloak detection module , these two modules can operate according to any technique without departing from the scope of the present invention. Additionally, the web crawler module  and the query processor module  can also operate on separate servers.","The feature vector module  generates a feature vector for an object. A feature vector is a compressed representation of an object, comprising a plurality of discrete features, and is typically much smaller than the object. In preferred embodiments of the present invention, feature vectors are used to compare objects. The likelihood that a first object closely resembles a second object is very high when a feature vector derived from the first object and a feature vector derived from the second object include at least a predetermined number of features in common. For example, in an embodiment where the feature vector for each object contains eight features, two objects whose feature vectors have at least six features in common are assumed to be very similar. The generation of a feature vector is described in more detail below with reference to FIG. .","The cloak detection module  preferably augments the operation of the query processor module  and web crawler module  as indicated above. In particular, when the query processor module  receives a query from a client , the query processor module  notifies the cloak detection module , which responds by selecting, and forwarding to the query processor module , a URL corresponding to a web server . The selected URL returned to the query processor module  may be one of the URLs that is responsive to the client query, or it may be a URL that is unrelated to the URLs that are responsive to the client query.","In preferred embodiments, the cloak detection module  applies a predefined function to the table of web servers  to select a URL. As illustrated in , the table of web servers  preferably includes a plurality of records  including fields that store a URL, a date, and a state.","In some embodiments, the URLs include only an access protocol (e.g., http) followed by a hostname (e.g., www.domain_name.com). In these embodiments, therefore, the URLs stored in the table of web servers  do not specify a hierarchical description of an object or object location on a web server , which are typically configured to provide a default object when a hierarchical description of an object or object location are not included in an object request.","In other embodiments, however, a hierarchical description of an object or object location on a web server  is specified in each entry  (i.e., URL) of the table of web servers . In these embodiments, the table of web servers  can include a plurality of entries  that correspond to a single web server . In still other embodiments of the present invention, the table of web servers  may actually resemble, or be included in, the table of URLs .","The date field included with each entry  of the table of web servers  identifies the last date, if any, on which a web server  corresponding to the entry  was checked for cloaking. In preferred embodiments of the present invention, the date is a parameter of the function that selects a URL for inclusion with the response generated by the query processor module . Preferably, the odds of a given entry  being selected increase as the corresponding date becomes older.","The state field included with each entry  of the table of web servers  reflects the results of one or more determinations as to whether a corresponding web server  is cloaked. In some embodiments, the state is, effectively, either yes or no: \u201cYes\u201d, the corresponding web server  was cloaked as of the last test or \u201cNo\u201d, the corresponding web server  was not cloaked as of the last test.","Preferred embodiments of the present invention compare the feature vector of a page retrieved from a specified URL by a client computer  with the feature vector of the page retrieved from the same URL by the search engine , and use the results of this comparison to determine whether the web server  corresponding to the specified URL is cloaked. As noted above, a feature vector is a representation comprising a plurality of features. If, for example, all of the features included in two feature vectors match, the corresponding objects almost certainly match. And if none of the features included in two feature vectors match, the corresponding objects almost certainly do not match. But if just half of the features included in two feature vectors match, the corresponding objects are likely to be partially similar, but different in many respects. However, the amount of difference between the objects is somewhat indeterminate, although statistically the odds are very high that the two objects are significantly different. Such a situation may call for one or more states and corresponding policies. In some embodiments, therefore, an indefinite response (e.g., only half of the features match) will not change or set the state of a corresponding web server . In such embodiments, a predefined number of determinations that are consistently biased towards cloaked or not cloaked (e.g., most but not all of the features match) are required before a state is changed in the direction of the bias. Additionally, the state field in some embodiments indicates how consistently a corresponding web server  is determined to be cloaked or not cloaked. If, for example, a given web server  has, over an extended period of time, consistently been determined to be cloaked, the value of additional tests may decline. Similarly, if a given web server  has, over an extended period of time, consistently been determined to not be cloaked, the value of additional tests may decline. In such cases, additional testing of such web servers  may be delayed in favor of testing other, less stable or unknown, web servers . The state, therefore, preferably reflects these situations so that such web servers  are selected less frequently for testing. Additional states and policies for determining whether a web server is cloaked may be apparent to those skilled in the art and systems and methods of implementing these are within the scope of the present invention.","In preferred embodiments of the present invention, feature vector representations of objects are compared to determine if the objects are substantially similar. In some embodiments, the feature vector representation of a first object is said to match the feature vector representation of a second object if at least a predetermined number of features in the two feature vectors are the same.","At some point, a feature vector and a corresponding URL are received from a client  in response to the same URL being supplied to the client  in a query response. The feature vector from the client  (i.e., the client feature vector) is generated by the client  from an object corresponding to the URL. The cloak detection module  stores the feature vector and the corresponding URL from the client  in the table of URL and feature vector combinations . More specifically, the cloak detection module  creates a new entry  in the table of URL and feature vector combinations  and stores the feature vector and the corresponding URL in the new entry .","In preferred embodiments, the cloak detection module  subsequently directs the web crawler module  to obtain an object corresponding to the URL. In other embodiments, the cloak detection module  obtains a copy of the object corresponding to the URL from the table of URLs . In still other embodiments, the cloak detection module  obtains the object corresponding to the URL without the assistance of the web crawler module . In these embodiments, the cloak detection module  preferably runs on the same machine as the web crawler module  or on a machine that is known by web server operators to be associated with the web crawler module  (i.e., using an IP-address associated with the web crawler module ). Additionally, the USER_AGENT field of requests sent by the cloak detection module  is preferably identical to the USER_AGENT field of requests sent by the web crawler module . It is important that a web server  receiving a request directly from a cloak detection module  is able to determine that the request is associated with the web crawler module  (i.e., a web crawler\/search engine).","The cloak detection module  then directs the feature vector module  to create a feature vector (herein called the server feature vector) from the object corresponding to the URL obtained by, or under the direction of, the cloak detection module . In an alternate embodiment, the table of URLs  stores a copy of the server feature vector for the object corresponding to each URL in the table (or for each URL that has been successfully downloaded by the web crawler module ) and the cloak detection module  obtains the server feature vector for the object corresponding to the URL from the table of URLs , without having to compute the server feature vector. In other words, in this alternate embodiment the web crawler module , or another module of the search engine , uses the feature vector module  to process the objects downloaded by the web crawler module and to store the resulting feature vector in the table of URLs .","The cloak detection module  then preferably uses the URL as an index into the table of URL and feature vector combinations  to extract the corresponding client feature vector and compare the client feature vector to the server feature vector. Depending on the results of the comparison and the state of the URL as defined by an entry  in the table of web servers , the state of the URL is updated as described above. The cloak detection module  also updates the date field in the table of web servers  and removes the entry  in the table of URL and feature vector combinations .","In an alternate embodiment, the table of URL and feature vector combinations  is not used. Instead, the object corresponding to each URL to be checked by the cloak detection module is downloaded and processed by the search engine to generate a server feature vector prior to sending the URL to a client  for downloading. As indicated above, the server feature vector is preferably stored in the table of URLs . When the client feature vector is received back from the client , the cloak detection module compares the client feature vector with the server feature vector for the same URL and then updates a corresponding entry  in the table of web servers .","If a given web server  is determined to be cloaked, several steps can be taken to address this problem without departing from the scope of the invention. For example, the query processor module  can exclude from responses to requests from clients  information regarding a cloaked web server  or a specific URL corresponding to the web server  that would otherwise be included. Additionally, a cloaked web server  can be \u201cblack-listed\u201d so that it is not queried in the future by the web crawler module , thereby preventing the web crawler module  from determining what objects are available on the cloaked web server  and whether these objects have been modified. Finally, the query processor module  can include a warning with a query response indicating that a given URL corresponds to a cloaked web server .","As indicated in , the clients  preferably include standard computer components such as a central processing unit , a user interface  (e.g., keyboard, mouse, and a display), a memory , a network interface  for coupling the clients  to a search engine  and various web servers  via communications network , and one or more system buses  that interconnect these components. Memory , which typically includes high speed random access memory as well as non-volatile storage such as disk storage, stores an operating system , a web browser module , a web-browser assistant module , a feature vector module , and a database .","The operating system  includes procedures for handling various basic system services and for performing hardware dependent tasks. Further, the central processing unit  executes the programs (i.e., the web browser module , the web-browser assistant module , and the feature vector module ) under the control of the operating system , which also provides the programs with access to system resources, such as the memory  and user interface .","The web browser module  is used to access objects (e.g., HTML documents, graphics, etc.) available from web servers  and the search engine  via the communications network . As indicated above, the clients  query the search engine  for URLs corresponding to one or more web servers . More specifically, the clients  typically request a plurality of hyperlinks to objects available from the web servers . The web browser module  is typically the means by which these queries are submitted by the clients . Examples of web browsers known in the art include Microsoft\u00ae Internet Explorer and Netscape\u00ae Navigator. Either of these web browsers are suitable for the present invention.","In the preferred embodiment, the web-browser assistant module  comprises a plug-in that works in conjunction with the web browser module . In the preferred embodiment, the web browser module  loads the web-browser assistant module  each time the web browser module  is loaded (i.e., becomes an active, running program on a client ). The web-browser assistant module  preferably manifests visually as a tool bar that is accessible when operating the web browser module . Users of clients  can, furthermore, preferably enter search terms (also herein called keywords) and submit the search terms as a query to the search engine  directly from the web-browser assistant module .","In alternate embodiments, the web-browser assistant module  is not visible to users of the clients . In these embodiments, users of a client  submit queries to search engines  from the web browser module . The operation of the web-browser assistant module  is, therefore, largely invisible to users of the clients  in these embodiments.","As is known in the art, plug-ins and tool bars are able to communicate with, and control, web browsers using an application programming interface (\u201cAPI\u201d) that corresponds to the particular web browser used. In preferred embodiments, the web browser module  and the web-browser assistant module  interact in this way.","For example, in embodiments of the present invention in which the web browser module  comprises Netscape\u00ae Navigator, the web-browser assistant module  can use what is currently known as the Netscape.Network.1 automation object to access web servers  and the search engine  using mechanisms of Netscape\u00ae Navigator such as the SSL security protocol, proxy support, SOCKS support, cache support, and numerous Internet protocols. In particular, the web-browser assistant module  can use the Open ( ) function, which is included in the Netscape.Network.1 automation object, to direct the web browser module  to submit a query to the search engine  and to download an object corresponding to a URL from a web server . Use of the Netscape.Network.1 automation object does not necessarily result in the display, on user interface , of an object downloaded from a web server .","Similarly, the web-browser assistant module  can request notification each time the web-browser module  goes through an object transition (e.g., displays or loads a new HTML document). For example, in embodiments of the present invention in which the web browser module  comprises Netscape\u00ae Navigator, the web-browser assistant module  can use what is currently known as dynamic data exchange (\u201cDDE\u201d) to control Netscape\u00ae Navigator. In particular, the web-browser assistant module  registers with Netscape\u00ae Navigator using DDE, which has the effect of opening a communications channel between the web browser module  and the web-browser assistant module . The communications channel enables the web-browser assistant module  to obtain a copy of each search engine query response received by the web browser module  and to determine whether that object contains a request for the web-browser assistant to process a URL selected by the cloak detection module .","As noted above, the query processor module  of the search engine  includes a URL selected by the cloak detection module  with at least a subset of the responses to queries received from at least a subset of the clients . And as also noted above, the responses include a plurality of hyperlinks (i.e., URLs). Both the URL selected by the cloak detection module  and the plurality of hyperlinks are preferably delivered to the clients  in an HTML document. As is known in the art, HTML documents can include a header, which is demarcated by the tags \u201c<head>\u201d and \u201c<\/head>\u201d and stores a document title and other, optional elements. Each element of the header is typically demarcated by its own pair of complementary tags, such as <title> and <\/title>. The contents of the document header are typically not displayed by the web browser module . In some embodiments, therefore, the URL selected by the cloak detection module  is preferably inserted into the header of an HTML document comprising a response by the query processor module . For instance, in one embodiment the URL selected by the cloak detection module  is stored in an element (also called a field) of the document header demarcated by a pair of complementary tags, such as <cloakchk> and <\/cloakchk>, which need be recognizable only by the web-browser assistant module . If the web browser module , and other web browsers known in the art, do not recognize a given tag, which is likely in this case, the contents of the tagged element (i.e., the information between the pair of complementary tags) are ignored. An HTML document returned by the query processor module  can, therefore, include a URL selected by the cloak detection module  without adversely affecting a client  regardless of whether the client is configured in accordance with the present invention. Note that additional instructions need not be included with the URL since the tags recognizable only by the web-browser assistant module  effectively comprise an instruction to the web-browser assistant module  to take action. Nevertheless, additional information such as operating parameters for the feature vector module  or notification of software updates can be included along with the URL.","But in some embodiments, a URL selected by the cloak detection module  is instead included in the HTTP header of responses to queries received from the clients .","Table 2 illustrates the contents of a typical HTTP header modified in accordance with an embodiment of the present invention:",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTP\/1.0 200 OK"]},{"entry":[{},"Server: Microsoft-IIS\/5.0"]},{"entry":[{},"Date: Tue, 18 Dec 2001 06:31:55 GMT"]},{"entry":[{},"Content-Length: 10867"]},{"entry":[{},"Content-Type: text\/html"]},{"entry":[{},"X-Check-For-Cloak: http:\/\/www.some-site.com\/index.html"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The first line of Table 2 identifies the protocol used and whether the request was successful from the perspective of the protocol. In this example, the protocol is version 1.0 of HTTP. The second line of Table 2 is an optional aspect of HTTP headers that identifies the web server software run by the search engine  that sent the response. The third, fourth, and fifth lines of Table 2 indicate, respectively, the current date and time according to the search engine , the size of the accompanying object in bytes, and the format (i.e., content type) of the accompanying object. The sixth line of Table 2 identifies a URL selected by the cloak detection module . The first five lines of Table 2 are representative of typical HTTP headers. The sixth line is a modification consistent with an embodiment of the present invention.","As noted above, unknown tags are ignored by the web browser module  and other web browsers known in the art. The same is true of unknown elements, fields, or lines of an HTTP header. An HTTP header returned by the search engine  can, therefore, include a URL selected by the cloak detection module  without adversely affecting a client  regardless of whether the client is configured in accordance with the present invention. Note that additional instructions need not be included with the URL since an HTTP header element identifier (e.g., \u201cX-Check-For-Cloak\u201d) recognizable only by the web-browser assistant module  effectively comprises an instruction to the web-browser assistant module  to take action. Nevertheless, additional information such as operating parameters for the feature vector module  or notification of software updates can be included along with the URL.","Additionally, persons skilled in the art recognize that techniques similar to those described above permit the web-browser assistant module  to access the HTTP header to obtain information germane to the present invention.","The feature vector module  generates a feature vector from an object. As noted above, a feature vector is a representation of an object that comprises a plurality of discrete features and is typically much smaller than the object. Typically, the web-browser assistant module  directs the feature vector module  to create a feature vector from an object that corresponds to the URL selected by the cloak detection module .","The database , which comprises a cache of documents downloaded by the web browser module, preferably includes entries  for each URL selected by the cloak detection module  and received by a particular client . Initially, an entry  includes only the URL. But after the web-browser assistant module  receives the object corresponding to the URL, the entry  is updated to include the object. Furthermore, the entry  may also be subsequently updated to include a feature vector created by the feature vector module  from the object. In some embodiments, an identifier of the search engine  is included in the database  for use when the web browser module  delivers the URL and the feature vector to the search engine .","As indicated in , a typical web server  preferably includes standard computer components such as one or more central processing units , an optional user interface  (e.g., keyboard, mouse, and a display), a memory , a network interface  for coupling the web server  to a client  and a search engine  via communications network , and a bus  that interconnects these components. Memory , which typically includes high speed random access memory as well as non-volatile storage such as disk storage, stores an operating system , a client interface module  (sometimes called a protocol engine), and a database  of documents.","The operating system  includes procedures for handling various basic system services and for performing hardware dependent tasks. Further, the central processing unit  executes the programs (i.e., the client interface module ) under the control of the operating system , which also provides the programs with access to system resources, such as the memory  and user interface .","The client interface module  (e.g., Apache and Microsoft\u00ae Internet Information Server (IIS)) preferably serves static content (e.g., HTML documents and images) or dynamic content (e.g., content generated using the Common Gateway Interface standard) to a web browser module  operating on a client  or a web crawler module  operating on a search engine  via communications network  using well known principles.","Further, the client interface module  may store static content in the database  illustrated in FIG. . The database  typically includes an entry  for each object stored in the database . In other embodiments, the client interface module  stores the static content in a directory system instead of, or in addition to, the database .","Turning now to , there are illustrated steps used to implement a preferred embodiment of the present invention. In a first step, a client  issues a request for a search engine service (step ). As indicated above, this typically includes a user of the client  entering one or more search terms into the web-browser assistant module . The web-browser assistant module  then directs the web browser module  to send an HTTP message including the search terms to the search engine . To send the HTTP message, the web-browser assistant module  takes advantage of the networking capabilities of the web browser module . At this point, the web-browser assistant module  need not take any particular action in anticipation of, or in preparation for, processing a URL selected by the cloak detection module . Instead, the web-browser assistant module  preferably waits for notification from the web browser module  each time the web browser module  loads an object.","Once the request is received by the search engine , the query processor module  generates a response using techniques known in the art (step ). Briefly, the query processor module  scans the table of URLs  for zero or more URLs that best match the query. The best matching URLs, if any, are preferably assembled in an HTML document.","Additionally, the query processor module  solicits a URL from the cloak detection module  upon receiving the query from the client . In response, the cloak detection module  selects a URL from the table of web servers  (step ). The particular function used to select the URL is not critical to the present invention. But the table of web servers  preferably includes information such as the date on which the corresponding web server  was last selected and the current state of the corresponding web server  in the selection process. For example, the cloak detection module  in some embodiments of the invention selects the URL with the oldest date, i.e., the longest amount of time since the last test. In another embodiment, the cloak detection module  selects one of the URLs in the response to the query if any of the URLs in the response correspond to a web server whose cloak status needs to be checked, and otherwise selects a URL from the URLs stored in the table of web servers . In still another embodiment, the URLs in the table of web servers  are selected sequentially, in round robin fashion. In yet another embodiment, the cloak detection module  maintains a list of URLs previously selected from the table of web servers , but for which no response has been obtained from the client computer to which the URL was sent. URLs in this list that were last sent to a client computer more than a predefined amount of time ago (e.g., one minute) are re-selected by the cloak detection module .","After selecting a URL, the cloak detection module  forwards the URL to the query processor module , which inserts the URL into its query response and sends the response to the client  from which the query originated (step ).","Upon receiving the response at the client , the web browser module  preferably loads the HTML document included therein. The web browser module  also notifies the web-browser assistant module , which scans the HTML document, or alternatively the accompanying HTTP header, to extract the URL selected by the cloak detection module  (step ) and preferably stores the URL in a new entry  in the database .","The web-browser assistant module  then directs the web browser module  to download an object corresponding to the URL selected by the cloak detection module  from the web server  identified by a hostname included with the URL (step ).","After directing the web browser module  to download the object, the web-browser assistant module  typically requests status updates from the web browser module  to determine when the object is available to the web-browser assistant module . But in some embodiments, the web browser module  notifies the web-browser assistant module  when the object is available to the web-browser assistant module , so no action need be taken by the web-browser assistant module  with respect to this object until such notification is received.","Upon receiving the object request (e.g., HTTP request for an HTML document) at the web server , the client interface module  creates the object dynamically or locates the object in an entry  of the database  or on the disk storage of the memory  (step ). After locating or creating the object, the client interface module  sends the object to the client  (step ). As noted above, aside from engaging in cloaking, the operation of the web server  is not critical to the present invention.","Once the object is available to the web-browser assistant module , the web-browser assistant module  stores the object in a corresponding entry  of the database . The web-browser assistant module  then directs the feature vector module  to generate a feature vector from the object (step ).",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 6","b":["314","214","610","620","314","630","630","620"]},"The feature vector module  then creates a set of permuted identification elements (step ). Each set preferably consists of a permuted version of each of the identification elements assigned in step . Further, each permuted identification element in a given set of permuted identification elements is the result of a common permutation process. Further, a different permutation process is preferably used for each of the sets of permuted identification elements. The feature vector module  then selects a predetermined number of permuted identification elements, which the feature vector module  partitions into a plurality of groups (step ). The selected permuted identification elements are selected using a selection function. In some embodiments the selection function selects the identification elements with the lowest or highest value in each set of permuted identification elements. Other selection functions can be used without departing from the scope of the present invention.","Finally, the feature vector module  produces a feature value from each of the plurality of groups (step ). Each feature value is the result of applying a function (e.g., a hash function or a fingerprint function) to a corresponding group of permuted identification elements. The set of resulting feature values comprises the feature vector for the object. The result of this process is a representation (i.e., a feature vector) that is both accurate with respect to determining whether two objects match (i.e., exactly match or, preferably, substantially match) and compact in comparison to the object from which it is derived.","Methods for generating feature vectors for specified documents are disclosed in U.S. Pat. No. 6,119,124 entitled \u201cMethod For Clustering Closely Resembling Data Objects\u201d and U.S. Pat. Nos. 5,909,677 and 6,230,155 both entitled \u201cMethod For Determining The Resemblance Of Documents\u201d. Each of these patents is incorporated herein by reference as background information.","The feature vector comprises a plurality of feature values, and is preferably stored in a corresponding entry  of the database , which now includes the URL selected by the cloak detection module , an object corresponding to the URL, and a feature vector generated from the object. Referring once again to , the web-browser assistant module  directs the web browser module  to send the URL and the feature vector to the search engine  (step ).","Upon receiving the URL and the feature vector at the search engine , the cloak detection module  directs the web crawler module  to request the object corresponding to the URL received from the client  from the web server  identified by the URL (step ). In a preferred embodiment, the cloak detection module  stores the URL and feature vector received from the client  in an entry  of the table of URL and feature vector combinations  for subsequent processing.","Upon receiving the object request at the web server , the client interface module either creates the object dynamically or locates the object in an entry  of the database  or on the disk storage of the memory  (step ). If the web server  is cloaked, the client interface module  will probably detect that the request originated from a search engine  and create or locate an object specifically for that search engine . After locating or creating the object, the client interface module  sends the object to the search engine  (step ).","Once the object is received from the web server  at the search engine , the cloak detection module  directs the feature vector module  to create a feature vector (i.e., the server feature vector) from the object (step ), which preferably operates as described above with reference to FIG. . The cloak detection module  then compares the two feature vectors\u2014one created by the client  and the other created by the search engine  (step ).","As described above, in an alternate embodiment, steps , , ,  for downloading the object at the specified URL and generating a server feature vector for the object are performed prior to sending the specified URL to a client (at step ) for downloading.","As stated above, a feature vector comprises a plurality of feature values. The likelihood that a first object closely resembles (i.e., is substantially similar to) a second object is very high when a feature vector of the first object shares at least a predetermined number of features with a feature vector of the second object. If the first object closely resembles (or is substantially similar to) the second object (i.e., at least the predetermined number of features match), then it is unlikely that the web server  is cloaked. An exact match is not required because objects (i.e., web pages) may change in minor ways from time to time due to advertising content and other non-substantive changes. A web page at the specified URL may also vary slightly from one download to the next because it contains dynamically generated contact, such as the date and time of day, or the name of a user associated with the requesting computer. Additionally, a feature vector is only a representation and does not capture all of the features of a given object. It is therefore possible (but very unlikely), that non-matching objects may produce identical feature vectors. In addition, it is possible (but once again unlikely) that two objects that are different but substantially similar in all important respects may have feature vectors that do not have at least the predetermined number of features in common.","Depending on the result of the comparison, the cloak detection module  takes one or more predetermined steps (step ). For example, the cloak detection module  preferably updates the state of the URL in the table of web servers . Additionally, if the web server  is cloaked, the cloak detection module can modify the table of URLs  so that the query processor module  does not include URLs corresponding to this web server  in query responses until after subsequent testing indicates that the web server  is no longer cloaked.","The present invention can be implemented as a computer program product that includes a computer program mechanism embedded in a computer readable storage medium. For instance, the computer program product could contain the program modules shown in  or  or both. These program modules may be stored on a CD-ROM, magnetic disk storage product, or any other computer readable data or program storage product. The program modules may also be distributed electronically, via the Internet or otherwise, by transmission of a computer data signal (in which the program modules are embedded) on a carrier wave.","While the present invention has been described with reference to a few specific embodiments, the description is illustrative of the invention and is not to be construed as limiting the invention. Various modifications may occur to those skilled in the art without departing from the scope of the invention as defined by the appended claims.","For example, in alternate embodiments, the web-browser assistant module  operates independently of the web browser module . In these embodiments, the web-browser assistant module  includes functionality typically found in web browser, i.e., the ability to interact with web servers  and search engines  to send and receive objects.","In other embodiments, the web-browser assistant module  is not passive as described above. In these embodiments, the web-browser assistant module  requests the selection of a URL by the cloak detection module  periodically or according to some other schedule.","In still other embodiments, the cloak detection module  does not wait for requests for search engine  services to select a URL for cloak detection. Instead, the cloak detection module  selects such URLs on an on-going basis. The selected URLs are subsequently distributed to one or more clients  that are configured to receive unsolicited URLs from the cloak detection module  and that are known to the cloak detection module .","In some embodiments, the web-browser assistant module  monitors the web browser module  to determine whether a user operating the client  selects one of the URLs selected by the query processor module . If so, the web-browser assistant module  generates a feature vector from the object corresponding to the selected URL, and sends the selected URL and corresponding feature vector to the search engine . In these embodiments, therefore, network resource requirements of the present invention are reduced. And in some of these embodiments, the cloak detection module  selects a URL from among the zero or more URLs selected by the query processor module . So if a user operating the client  does not select one of the URLs selected by the query processor module , the web-browser assistant module  will instead process the URL selected by the cloak detection module .","Finally, some embodiments are designed for systems that have relatively large amounts of bandwidth available for use by the present invention. In these systems, feature vectors, which as noted above are compressed representations of objects, are not used. Instead, the client  forwards the object, a portion of the object, or an object representation dissimilar to the feature vector described above, to the search engine . Like the client , the search engine  does not use feature vectors and compares objects, portions of objects, or object representations dissimilar to the feature vector described above to determine whether the objects match."],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Additional objects and features of the invention will be more readily apparent from the following detailed description and appended claims when taken in conjunction with the drawings, in which:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
