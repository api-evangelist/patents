---
title: Integration functionality for a test tool for application programming interfaces
abstract: Methods and apparatus for enabling efficient testing of application programming interface (API) frameworks and application code are disclosed. According to one aspect of the present invention, a method for capturing a call to an API using a framework including an execution engine that communicate with an adapter to cause the API call to be executed involves making the API call and constructing an object using metadata associated with the API call. The constructed object is converted into a node that is of a declarative metadata format, and the node is stored.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07779036&OS=07779036&RS=07779036
owner: Oracle International Corporation
number: 07779036
owner_city: Redwood Shores
owner_country: US
publication_date: 20041117
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED PATENT APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE EMBODIMENTS"],"p":["This patent application claims priority of U.S. provisional patent application 60\/546,451, entitled \u201cAPI Test Tool,\u201d filed Feb. 19, 2004, which is incorporated herein by reference in its entirety. This patent application is related to copending U.S. patent application Ser. Nos. 10\/991,883 and 10\/991,607, filed concurrently herewith, which are each incorporated herein by reference in their entireties.","1. Field of Invention","The present invention relates to database systems. More specifically, the invention relates to an application programming interface (API) testing system which enables API frameworks and application code to be efficiently tested.","2. Description of the Related Art","An application programming interface (API) is the interface used, or the calling conventions used, to allow an application program to access an operating system, as well as other system resources. APIs are often defined at a source code level, and effectively enable a level of abstraction to be present between an application program and a kernel. In some instances, an API may provide an interface between a high level language and lower level services, particularly those services or utilities which may have been written without taking into account calling conventions of compiled languages.","Testing of framework and application code associated with APIs is important to ensure that APIs function as intended. Without thorough testing of the framework and the application code associated with APIs, any errors or other unexpected results which may occur when an API is put into use may not be found until the API is used. When an API that is in use fails to function as intended, an application program which uses the API may be prevented from operating as desired.","Typically, for each test case associated with an API, a specific API test is coded and developed. The requirements for valid API tests on a framework and application code may be prohibitive in that a generally high number of tests are typically needed, and many issues may arise relating to the management of the tests. Hence, the requirements for comprehensive API tests on a framework and application code are often considered to be too extensive for comprehensive tests to be productive. As a result, API tests are likely to only be written to test code or test cases which are considered to be critical. In other words, not all test cases may be thoroughly tested.","When only some test cases associated with an API are subjected to API testing, the reliability of the API may be compromised, as the framework and application code associated with the API is not fully tested. Since the overhead and the overall costs associated with comprehensively testing the framework and application code associated with the API are generally prohibitive, many developers and users are electing to write API tests for only the most crucial test code or test cases.","Therefore, what is needed is a method and an apparatus which enables the framework and application code associated with an API to be efficiently tested. That is, what is desired is an API test tool that provides a framework which allows API tests to be readily developed.","The present invention relates to the efficient testing of application programming interface (API) frameworks and application code. According to one aspect of the present invention, a method for capturing a call to an API using a framework including an execution engine that communicates with an adapter to cause the API call to be executed involves making the API call and constructing an object using metadata associated with the API call. The constructed object is converted into a node that is of a declarative metadata format, and the node is stored. In one embodiment, converting the object into the node includes passing the object to the execution engine which accesses the adapter to convert the object into the node.","By enabling an API call to effectively be recorded and stored allows the API call to effectively be subsequently duplicated by accessing the stored API call. Hence, the efficiency with which calls and tests may be executed is enhanced, as a user may execute the call once and have it captured for later use, rather than having to execute the call each time the call is to be made or to create a test script for the call.","According to another aspect of the present invention, a system for capturing a call to an API includes a recording tool, which constructs an object with metadata that is associated with the API call. The system also includes an execution engine to which the recording tool is arranged to pass the object, and an adapter with which the execution engine communicates to cause the adapter to convert the object into a node that is in a declarative metadata format. A repository of the system is arranged to store the node. In one embodiment, the adapter is further arranged to cause the API call to execute. In another embodiment, the declarative metadata format is an XML format and the node is an XML node.","In accordance with still another aspect of the present invention, a framework includes a metadata provider arrangement that stores declarative metadata, a metadata provider interface that obtains the declarative metadata associated with a test from the declarative metadata provider, and a first test adapter. The first test adapter includes logic used to process the declarative metadata, and accesses remote information. The framework also includes a test interface that cooperates with the first test adapter to create a Java test, an execution engine that communicates with the test interface to cause the test to be executed.","According to yet another aspect of the present invention, a method for running an API test includes obtaining test data and providing the test data to a test interface. The test data includes declarative metadata and is obtained using a test declarative metadata adapter of a first class. The method also includes executing a test associated with the test data using the test interface. Executing the test associated with the test data using the test interface includes calling a first test adapter of the first class to obtain testing logic for executing the test associated with the test data. The first test adapter is in communication with the test interface, and includes a generic test adapter portion that defines at least one tag that is common to a plurality of test adapters of the first class and a test adapter portion that defines at least one tag that is not common to the plurality of test adapters of the first class. The first test adapter is also arranged to access one of an application and a database.","In one embodiment, the application is an application that is arranged to execute on a virtual machine that is common to the first test adapter and the application. In another embodiment, the application is an application that is arranged to execute on a different virtual machine than a virtual machine that is associated with the first test adapter.","Other features and advantages of the invention will become readily apparent upon review of the following description in association with the accompanying drawings, where the same or similar structures are designated with the same reference numerals.","In the description that follows, the present invention will be described in reference to embodiments that test subsystems on a platform for a software application, such as a database application. However, embodiments of the invention are not limited to any particular architecture, environment, application, or implementation. For example, although embodiments will be described in reference to database applications, the invention may be advantageously applied to any software application. Therefore, the description of the embodiments that follows is for purposes of illustration and not limitation.","A framework which enables application programming interface (API) testing to occur without requiring that a specific API test be written for each test case enables testing of an API framework and API application code to occur efficiently. Such a framework may allow for relatively efficient development of API tests by effectively allowing functionality associated with different API tests to be shared and reused. When such a framework not only allows an API to be tested without requiring that significant amount of software be written, and further enables multiple API tests to be chained together, an API may be comprehensively tested in an efficient manner. Hence, the reliability of an API may be enhanced as developers may be more willing, as well as able, to more fully test an API since the need to write a significant amount of software code is effectively eliminated.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["100","100","138","148","148","138","148","140","144"],"i":"a"},"Database metadata provider  and XML metadata provider  are source specific providers that are arranged to transform data into a format that may be understood by an execution engine or layer . While only database metadata provider  and XML metadata provider  are shown, any number of providers may generally be included that interface with execution engine  via a metadata provider interface . Metadata provider interface  is generally arranged such that providers such as database metadata provider  and XML metadata provider  may communicate with execution engine .","API test XML adapter is arranged to enable custom tags of an XML schema definition, which will be described below with reference to , to be read and written. In general, API test XML adapter is an interface that is arranged to persist XML data. API test XML adapter may marshal XML test data into a custom test object, e.g., a custom Java test object, at run-time that may effectively be executed by execution engine . It should be understood that other types of test XML adapters, as for example a SQL test XML adapter , may be provided to interface with XML metadata provider  to enable custom tags of an XML schema definition associated with a SQL test to be read and written. XML metadata provider  is generally arranged to identify an appropriate test XML adapter or test type adapter for a test to be executed.","When execution engine  runs tests such as an API test, execution engine  accesses a security provider interface  which provides a security model that is used to enforce authorization rules which control access to a test and to test results. That is, security provider interface  is arranged to enforce security in terms of who may run a test and who may view the output of a test. In one embodiment, security provider interface  delegates a call to a security provider (not shown).","Execution engine  also logs information, e.g., the output of tests, for reporting purposes using a log provider interface . Log provider interface  is effectively a reporting storage interface. Repositories such as an XML writer  and a database writer  which are interfaced with execution engine  through log provider interface  are arranged to store reports which are persisted in log files. XML writer  may be used for the storage of reports associated with XML metadata, while database writer  may be used for the storage of reports associated with database metadata.","In general, execution engine  includes the core execution logic associated with architecture , and delegates calls or logic to appropriate sources. Execution engine  may take user commands and cause a test to be run and registered, and also cause test results or output to be displayed as appropriate. For example, when an API test is to be run, execution engine  calls into a test interface  which effectively provides handshaking between execution engine  and adapters such as API test adapter , SQL test adapter , and any custom adapters .","For each test type, an adapter which is arranged to run the test type is effectively interfaced with test interface . By way of example, API test adapter  is arranged to include the logic that is needed in order to understand a test definition provided in an XML file. API test adapter  is arranged to instantiate the method identified in the XML file, and to provide the results of the instantiation to execution engine . In general, adapters such as API test adapter  transform declarative metadata into objects that implement test interface . At runtime, when execution engine  runs a test, an object that implements test interface  invokes desired APIs on a desired entity with prescribed input parameters, and also captures output parameters and performs comparisons to determine the success or the failure of the test.","In general, an adapter such as API test adapter  is a program which has the ability to transform data, e.g., declarative metadata, from one format into another such that the data may be understood by execution engine . API test adapter , for example, transforms test metadata into a format that is understood by execution engine .","Java diagnostic tests  which contain runtime information, a PL\/SQL adapter , a declarative adapter , API test adapter , SQL test adapter , and any custom adapters  are all arranged to interface with execution engine  via test interface . Such elements effectively rewrite data into a language or format that is understood by test interface . Each of the elements which are effectively plugged into test interface  includes a generic adapter portion or a common layer . Specifically, each element plugged into test interface  essentially extends the functionality or logic associated with generic adapter portion . In one embodiment, while generic adapter portion  effectively handles common tags associated with a declarative metadata file, the extensions associated with each element, e.g., the extensions off of generic adapter portion  associated with API test adapter , handle custom or unique tags within the declarative metadata file. It should be appreciated that API test adapter  may include the capabilities associated with API test XML adapter . That is, API test adapter  may be arranged to persist XML data and to read and write custom tags, in addition to being arranged to provide a running test logic interface.","Extensibility enables custom adapters  to be written as needed, and then plugged into test interface  when additional functionality within architecture  is desired. Extensibility further enables such custom adapters  to utilize and build off of generic adapter portion .","A rendering interface , which may include the ability to serve as a user interface rendering interface, is in communication with execution engine , and enables information pertaining to tests to be displayed to a user. Rendering interface  may be JSP fronted for web-based user interfaces, and generally provides an abstraction away from what a user interface is expected to look like. There may be several different user interfaces that may be used to present diagnostics data to a user. In general, diagnostics user interfaces and command line or text user interfaces may be in communication with rendering interface  through renderers . For each available interface, an associated interface renderer  that implements methods or routines prescribed by rendering interface  typically exists. That is, renderers  implement rendering interface . Such renderers  may include, but are not limited to, a diagnostics renderer , a JDeveloper renderer , a command line renderer , and an integration renderer , which may effectively be used to record a test. JDeveloper renderer may be arranged to support a JDeveloper tool which is available commercially from Oracle, Incorporated of Redwood Shores, Calif. Integration renderer may generally support a variety of interface tools. Suitable tools which may be supported by integration renderer include, but are not limited to, diagnostic tools such as Winrunner which is available commercially from Mercury Interactive of Mountain View, Calif. In order for communication to be achieved with an interface layer (not shown), execution engine  invokes the methods of a suitable renderer  that is associated with a specified interface.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIGS. 9"],"b":["600","604","608","600","628","628","628","612","632","632","632","9","616","620","600","636","604"],"i":["a","b","c. ","a ","b"]},"Some API tests which are specified within XML schema definitions or, more generally, declarative metadata, such as XML schema definition  of  may be a part of a test suite. A test suite is generally an overall test application which includes a plurality of API tests. Referring next to , an XML tag structure which is used within an overall test application will be described in accordance with an embodiment of the present invention. An XML tag structure for a test application  includes a test suite tag  which may identify a name of the test suite, and provide some information pertaining to the test suite. Test suite  generally contains a plurality of tests that test a particular piece of functionality. Since a test suite typically includes a group of tests, e.g., a logical group of tests, test type tags such as test type tag  are effectively a component of test suite . As shown, test type tag  may be an API test type tag. An API test type tag is converted by a QA test interface object by an API test type adapter. In general, a QA test interface object is used by an execution layer for running the test specified by the API test type tag.","It should be appreciated that a test suite may generally contain a plurality of test type tags  which may include test type tags other than an API test type tag. Another suitable test type tag is a SQL test type tag, which will be described below with reference to . Different test types may generally exist within a test suite.","In one embodiment, a test application represents an overall product that is being tested, and may include one or more test suites. Substantially all test suites or, more generally, tests specified in a test application are pertinent to the overall product that is being tested. While any number of attributes may be specified with a test application, a test application is typically specified with at least a short name for the test application, a full name for the test application, and a file version of the test application.","A service bean information tag , which may be specified under API test type tag , is arranged to contain information relating to a service name and configuration information. Also specified under API test type tag  are an input parameters tag , an output parameters tag , a description tag , an error information tag , and an output exception tag . Input parameters tag  is arranged to encapsulate any number of input parameter tags . Similarly, output parameters tag  is arranged to encapsulate any number of output parameter tags .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4","b":["800","800","802","800","800","802","806","806","806"],"i":["a","d ","a","d ","a","d "]},"Each test type -, e.g., test type which is an API test type, is specified with additional information. The additional information typically includes input parameters , where each input parameter  is specified within input parameters . Similarly, the additional information specified in test types such as test type also includes output parameters , where each output parameter  is specified within output parameters . Error information  is also typically specified within test types with a type. An error message and error fix information are also included within error information . In the described embodiment, test type further includes a description  which describes test type ","As previously mentioned, a test suite may include test type tags other than, or in addition to, an API test type tag. By way of example, a test suite may include a SQL test type tag. A SQL test type and an API test type may have tags in common, as well as tags which are not in common. When an API test type adapter and a SQL test type adapter, e.g., API test type adapter  and SQL test type adapter  of , are created, each test type adapter includes generic tags. Further, an API test type adapter and a SQL test type adapter may each include custom tags. Specifically, each test type adapter effectively extends a generic adapter, e.g., generic adapter portion  of .","A system such as system  of  may generally be accessed remotely for purposes of running a remote test, e.g., running a remote API test, and of potentially debugging components associated with system . illustrates a remote invocation of a test which executes within an API testing framework in accordance with an embodiment of the present invention. A first element , which may be a provider node or a server, may invoke a test  that is resident on a second element , which may be a customer node or a client that includes an API testing framework such as system  of . In one embodiment, a provider or first element  may run test  on second element  to diagnose any issues with test . Alternatively, when there is a problem with second element , a provider or first element  may identify test  as being a test that is suitable for identifying the problem and, hence, perform a remote call invocation to run test . In other words, the ability for first element  to perform a remote call invocation to run test  may generally enable first element  to either \u201csee\u201d how test  runs on second element , or to use test  to effectively diagnose a problem associated with the framework on second element .","Elements within a system such as system  of  may access remote applications or database in the course of running a test. By way of example, an API test adapter such as API test adapter  of  may include remote call invocation functionality that allows remote calls to be made when an API test is being executed. Generally, as shown in , a virtual machine , e.g., a Java virtual machine, which is associated with an API testing framework, has a test  such as an API test to be executed. During the course of executing test , test  may access a remote application or a database  to obtain an application to execute or to obtain information stored in a database. As will be discussed below with respect to , functionality that enables remote application or database  to be accessed is imparted on adapters which interface with a test interface. Remote application or database  may generally be substantially any application or database which is not associated with virtual machine .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 6","FIG. 1"],"b":["100","168","154","154","154","168","154","176","172"]},"When an API test is executing within system , and access to a remote application or a database is necessary, API test adapter  may access the appropriate remote application or remote database. A remote call may be needed when a test script being executed within system  either references a remote application ,  or utilizes data stored in a remote database . In general, a remote method invocation or application call may be made to an application  which is on the same virtual machine as system , or to an application  that is on a remote virtual machine. In one embodiment, application  may be on a different computing system than system , and may be accessed by API test adapter through a network.","System  of  may generally be arranged to cooperate with external programs or applications such that the functionality of the external programs or applications may be used with the system. By way of example, programs or tools such as JDeveloper or Winrunner may be interfaced with system  of  through renderers . Renderers  generally serve to enable a rendering interface, e.g., rendering interface  of , to communicate with external tools. With reference to , the use of external tools with system  will be described in accordance with an embodiment of the present invention. Rendering interface  generally transform raw output data obtained from execution engine  into a format which may be understood by renderers . Renderers , in turn, are effectively adapters which extend the functionality of rendering interface  by transforming or marshalling data into a format that may be utilized by appropriate tools. By way of example, diagnostics renderer may extend rendering interface  by providing functionality which enables data to be transformed into a format which may be understood by a diagnostics tool . It should be appreciated that diagnostics renderer a may also be arranged to transform data received from diagnostics tool  into a format which may be understood by rendering interface . Diagnostics tool  may be substantially any tool, as for example a user interface tool, which enables diagnostics associated with a test such as an API test to be effectively monitored and recorded.","JDeveloper renderer is arranged to extend rendering interface  by providing functionality which enables data to be transformed into a format which may be understood by a JDeveloper tool , or to transform data provided by JDeveloper tool  into a format that may be understood by rendering interface . A JDeveloper tool  is generally an integrated development environment which provides support that enables Java applications and World Wide Web (WWW) services to be modeled, developed, debugged, optimized, and deployed. Among the developmental capabilities of the JDeveloper tool is an ability to enable integrated debugging, and an ability to both enable schemas such as XML schemas to be created and to be connected as application components.","A text console  is generally a tool which enables a log associated with the execution of a test such as an API test to be generated. Text console  may interface with system  through a command line renderer . Integration renderer is generally arranged to extend rendering interface  such that a variety of tools may be interfaced with system . Tools which may be interfaced through integration renderer include Winrunner  and substantially any tool  that may allow information to be provided in a log. Winrunner  enables user keystrokes or interactions to be captured, verified, and replayed.","It should be appreciated that some tools , rather than being interfaced with system  through integration renderer , may be interfaced directly to execution engine . By way of example, tools  with relatively simple functionality such as test which may be arranged to determine substantially only whether a test passes or fails may be interfaced directly with execution engine .","In general, renderer \u201clayer\u201d  provides an interface by which external tools such as diagnostics tool , JDeveloper , and Winrunner  may effectively be \u201cplugged\u201d into system , since renderer layer  provides the functionality needed to enable the external tools to communicate with rendering interface . Hence, renderer layer  serves to effectively provide a mechanism through which tools may be used with, e.g., interfaced with, system  to enhance the capabilities of system .","When an API test is effectively inputted by a user, as for example through a text console, in order for the substantially exact API test to be subsequently recreated, the API calls associated with the API test may be captured and recorded in a script or a file such that the API test may be subsequently accessed. Typically, an API call is intercepted by a recording tool which is interfaced with an execution engine that is involved in executing API tests. Once an API call is intercepted, a Java object, as for example a test information (testinfo) object, is created in memory to describe the API call.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 8","FIG. 1","FIG. 2"],"b":["902","100","906","907","906","907","908"]},"Once the API call is captured, a testinfo object is constructed using metadata pertaining to the API in step . The testinfo object is then passed in step  to an execution engine, as for example execution engine  of . The execution engine causes an appropriate adapter to be accessed to convert the testinfo object into an XML node. Typically, the execution engine delegates a call to the appropriate adapter to create the XML node, and the appropriate adapter returns the XML node to the execution after the XML node is created. In one embodiment, each API call is associated with a testinfo object, and each testinfo object is used in the creation of a single XML node. It should be appreciated that a plurality of XML nodes may be saved as an XML tree in a file which effectively encompasses a test suite of API calls.","Upon the creation of the XML node, the XML node is stored as a file in a repository, e.g., a XML repository, in step . It should be appreciated that once the XML node is stored as a file, the XML node may be accessed as a test script substantially any time the API call associated with the XML node is to be executed.","A recording tool may be substantially any program or application which allows API calls, inbound or input parameters, and output or outbound parameters to be captured. Such a recording tool may effectively be a standalone program or application which may be substantially directly interfaced with an execution engine. Alternatively, such a recording tool may be a part of another program or application that is interfaced with an execution engine through an appropriate renderer and a rendering interface. By way of example, a recording tool may be part of a tool such as JDeveloper.","In general, a system such as system  of  is suitable for \u201cplaying back\u201d recorded API calls that are stored in a repository. In addition to being used to effectively play back recorded API calls, some components of system  of  may also be used to record the API calls.  is a diagrammatic representation of a framework which is suitable for use in recording and storing a script associated with an API test in accordance with an embodiment of the present invention. A recording tool  generally interfaces either directly or indirectly with execution engine . Recording tool  is arranged to access execution engine  to capture an API call, as well as any inbound parameters associated with the API call and any outbound parameters associated with the API call.","Recording tool  causes a testinfo object  to be created, and passes testinfo object  to execution engine  which causes an appropriate adapter, as for example API test adapter , to be accessed to effectively convert testinfo object  into an XML node which may be stored in repository . API test adapter  generally includes the logic and the functionality needed to create an XML node which encapsulates an API call from testinfo object .","Generally, a recording tool such as recording tool  may record API test metadata for playback purposes, e.g., API playback in a sequential manner. In order for APIs to be played back in a sequential manner, APIs may share contextual data as they are being executed by a test tool. Hence, the recording tool, in addition to capturing API calls along with their associated inbound and outbound parameters, may mark some outbound parameters for pipelining to subsequent APIs. Pipelining, as discussed in copending U.S. patent application Ser. No. 10\/991,883, filed Nov. 17, 2007, which is been incorporated by reference, allows parameters generated as output from one API test to be used as inbound parameters to other API tests. At the time an API is played back, the testing tool may pipeline the actual outbound data, in part or as a whole, using an expression language which is in a format that is understood by a test engine. The recording tool may embed expressions of the expression language within outbound parameters, and may embed expressions of the same expression language within inbound parameters to indicate to the playback tool, or the testing tool, that inbound parameters values for an API may be pipelined, e.g., may be obtained from a runtime data store.","Although only a few embodiments of the present invention have been described, it should be understood that the present invention may be embodied in many other specific forms without departing from the spirit or the scope of the present invention. By way of example, while Java has generally been described as an API test type language, substantially any test type language may be used. Suitable test type languages may include, but are not limited to, SQL and PL\/SQL.","A system with an API test adapter has been described as also including a SQL test adapter and other custom test adapters. It should be appreciated that a system which includes an API test adapter may not necessarily also include a SQL test adapter or other custom test adapters. Conversely, a SQL test adapter or other custom adapters may be included in a system that does not include an API test adapter.","While declarative metadata has been described as being XML metadata, it should be appreciated that declarative metadata is not limited to being XML metadata. Other suitable types of declarative metadata may be used to create a schema that utilizes common and custom tags.","In general, the steps associated with methods of the present invention may vary widely. Steps may be added, removed, altered, and reordered without departing from the spirit or the scope of the present invention. Therefore, the present examples are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5","i":"a "},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5","i":"b "},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 6","FIG. 1"],"b":"100"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 7","FIG. 1"],"b":"100"}]},"DETDESC":[{},{}]}
