---
title: Cryptographic key manager for application servers
abstract: Embodiments relate to systems and methods for maintaining cryptographic keys for application servers. In particular, applications and/or services of the application servers can desire to encrypt and/or decrypt data during operation of the applications. A key management tool can receive requests, and associated digital certificates from applications of the application servers for associated keys for use by the applications to encrypt and/or decrypt the data. The key management tool can generate a new key for the applications, or locate and retrieve an existing key for the applications. Further, the key management tool can provide a copy of the key to the applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509504&OS=09509504&RS=09509504
owner: Red Hat, Inc.
number: 09509504
owner_city: Raleigh
owner_country: US
publication_date: 20110817
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","DESCRIPTION"],"p":["The invention relates generally to systems and methods for maintaining security, and more particularly, to platforms and techniques for maintaining a central key management tool for use by application servers.","Application servers are entities in system and network environments in which various applications or services can execute or operate. In particular, application servers are dedicated to the efficient execution of processes, procedures, routines, scripts, and software code for supporting the functionalities of applications and services. Software developers can access application servers via various application programming interfaces (APIs).","The Java Platform, Enterprise Edition, Java EE, or J2EE are widely used platforms for server programming in the Java programming language. A J2EE container is a runtime entity that provides services to specialized Java components. Services provided by a container typically include life cycle management, security, deployment, and component-specific services. Containers are used in a wide variety of Java components, such as Enterprise Javabeans (EJB), Web pages, Java Server Pages (JSP), servlets, applets, and application clients.","During operation of a Java EE application server, various services may need to encrypt and\/or decrypt information during operation of the applications and services. In particular, encrypting and decrypting information can sometimes be accomplished using cryptographic keys. However, most of the applications use their own cryptographic keys during operation of the applications. Because the cryptographic keys have different parameters, expiration policies, and other factors, it may be desirable to provide systems and methods for providing a central key management tool. In particular, it may be desirable to provide systems and methods for providing a central key management tool that manages cryptographic keys for applications of an application server.","Embodiments of the present teachings relate to systems and methods for maintaining security in a network. In particular, embodiments relate to platforms and techniques for generating and maintaining a cryptographic keys (\u201ckeys\u201d) for a set of applications or services of a set of application servers. A key management tool or similar logic or resources can be configured to connect to a set of application servers. In embodiments, the set of application servers can each be configured with a set of applications.","The key management tool can be configured to generate keys and\/or maintain keys for the applications of the set of applications. In particular, an application can request a symmetric or other type of key from the key management tool, which can be configured to validate the application via a digital certificate, generate a key for the application, locate an existing key for the application, or other functions. In embodiments, the key management tool can examine policies to determine whether to expire a key, destruct a key, or other functions.","Referring to , illustrated is an exemplary environment  in which the present systems and methods may be implemented. As shown in , the environment  can comprise a client , a web server , an application server , a directory server , and a provisioning server . These components can be coupled together via networks  and , respectively, or other networks. It should be appreciated that other configurations and inclusions of other components are envisioned in accordance with the present systems and methods.","In embodiments, the client  can be any computer system that utilizes the services of another computer system, i.e., the web server  and the application server . As shown in , the client  can be implemented using components well known to those skilled in the art, such as a personal computer, laptop computer, personal digital assistant, mobile phone, tablet device, and the like. In the embodiments as shown in , the client  can be used to run Web applications via an application, such as a web browser.","In embodiments, the web server  can be a computer system configured to accept requests from clients, such as the client , and serve responses along with optional data contents. For example, a user of the client  can execute a Web application via the web server . In the embodiment as shown, the data content served by the web server  can be one or more Web pages that can include hypertext markup language (HTML) documents and linked objects such as, for example, images, video, audio, and the like.","The web server  can be implemented on a machine that comprises well known hardware and software. Well known software for the web server  can include, but is not limited to, software such as Apache HTTP Server from the Apache Software Foundation, Internet Information Services by Microsoft Corporation\u00ae, and Sun Java System Web Server from Sun Microsystems Inc\u00ae. One skilled in the art will recognize that any of the many different Web server programs available are consistent with the principles of the present invention.","The application server  can be software that provides applications to the client . In particular, the application server  can be configured to handle security, business logic, and data access for the applications provided to the client . In embodiments, the application server  can be configured to provide a variety of Web-based applications, such as e-commerce applications, content management applications, customer relations management applications, and the like.","The application server  can be implemented on various software platforms. For example, the application server  can be implemented on the well known J2EE platform from Sun Microsystems Inc\u00ae. In addition, the application server  can comprise middleware configured to enable applications to intercommunicate with dependent applications, such as the web server , database management systems, etc.","In further embodiments, the application server  can be implemented using well known software. For example, the application server  can be implemented using software, such WebLogic server from BEA Systems Inc\u00ae., JBoss from Red Hat Inc.\u00ae, Websphere from the IBM Corporation\u00ae, and the like. Accordingly, the application server  can implement the Java programming language and provide Web modules using servlets and JavaServer pages. Other functions of the application server  can also employ Java. For example, business logic provided by the application server  can be built into Enterprise JavaBeans (EJBs). J2EE can provide standards for containing the Web components. In addition, security services, such as authentication and authorization, can be implemented using the Java Authentication and Authorization Service (JAAS) or similar service.","The directory server  can represent the components that store and organize information about the users of the system  and an administrator of the system  to manage those users' access to the resources of the system . In embodiments, the directory server  can comprise a database (not shown) that can store information about named objects that are managed. The directory server  can also provide the access interface to the data that is contained in this database. The directory server  can be implemented using well known technologies. For example, the directory server  can be implemented as an X.509 directory service or Lightweight Directory Access Protocol (LDAP) service. In embodiments, the directory server  can be implemented as services from various vendors such as, for example, Red Hat Directory Server from Red Hat Inc.\u00ae, Active Directory by the Microsoft Corporation\u00ae; Apache Directory Server by the Apache Software Foundation; and Sun Java System Directory Server by Sun Microsystems Inc\u00ae.","In embodiments, the provisioning server  can be software, hardware, or a combination thereof that can be configured to listen for provisioning requests in the system  and return provisioning responses. In some embodiments, the provisioning server  can be configured as a service provisioning markup language (SPML) provisioning service provider. The provisioning server  can be implemented as a separate software component of the system  or can be integrated with other components of the system . For example, the provisioning server  can be a component that is installed as part of the directory server .","In embodiments, the network  can represent the communications infrastructure for allowing the client  and the web server  to communicate with each other. For example, the network  can represent the Internet, which is a worldwide, publicly accessible network that uses the Internet Protocol (IP) suite of standards. In embodiments, the network  can represent the communications infrastructure that allows the web server , the application server , the directory server , and the provisioning server  to communicate with each other. In embodiments, the network  can be implemented as a local area network or may utilize one or more larger networks, such as the Internet.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 2"],"b":["200","200"]},"The technique  comprises both an encryption  and a decryption  of data. In embodiments, a user, such as User A, can represent an entity that encrypts the data, and an additional user, such as User B, can represent an entity that receives the encrypted data from User A, and decrypts the encrypted data. In embodiments as shown, the unencrypted data can start out as, for example, a plaintext document . Each of User A and User B can possess a symmetric key  that corresponds to an algorithm  that can be used to either encrypt or decrypt data.","As shown in , User A can use the symmetric key  and the associated algorithm  to encrypt the plaintext document  to generate a cipher text document . In embodiments, the cipher text  document can be sent to User B via a communication network or a direct transfer. Once User B receives the cipher text  document, User B can use the symmetric key  and the associated algorithm  to decrypt the cipher text document  into the plaintext document . In embodiments, the associated algorithm  can perform an opposite operation from the operation performed by the algorithm  of User A. Once the cipher text document  is decrypted, User B can access a copy of the plaintext document  that was originally encrypted by User A.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3","b":["300","300","305","310","315","305","310","315","305","310","315","305","310","315","305","310","315"]},"As shown in , each of the application servers , ,  can comprise a set of applications , ,  such as, for example, user-deployed applications. In embodiments, the sets of applications , ,  can correspond to sets of services that can be executed by the corresponding application server , , . For example, the services can be Enterprise JavaBean (EJB) services, web applications services, Java Connector Architecture (JCA) services, and other services. In embodiments, the number of applications , ,  in each of the application servers , ,  can vary. For example, the set of applications  in the application server  can comprise a file management application and a web-based storefront application. The sets of applications , ,  in the application servers , ,  can be configured to encrypt or decrypt information during operation of any of the sets of applications , , . For example, an application may need to encrypt data that is sent to a smart phone or other mobile device. For further example, the application may need to decrypt data that is received from the smart phone or other mobile device.","As shown in , the system  can further comprise a key management tool , wherein each of the application servers , ,  can be configured to connect to the key management tool  via, for example, a network  or other connections. In embodiments, the network  can be any wired or wireless data network such as the Internet or other public or private networks. According to embodiments, the key management tool  can be configured to generate, escrow, store, update, delete, and\/or maintain cryptographic keys, or keys, that can correspond to any of the application servers , ,  as well as to any of the sets of applications , ,  or services. In embodiments, the keys generated, escrowed, stored, updated, deleted, and\/or maintained by the key management tool  can comprise public and\/or private keys that can be used in symmetric and\/or asymmetric key algorithms. It should be appreciated that the key management tool  can be configured to manage keys that can be used in other cryptographic algorithms.","As shown in , the key management tool  can comprise a processing module  and a database . The processing module  can be configured to perform or otherwise execute the functions of the key management tool , and the database  can be configured to store any associated keys. For example, the processing module  can generate keys to be used by the sets of applications , , . Further, for example, the processing module  can be configured to provide keys to the database  for storage. It should be appreciated that the processing module  and the database  can perform other functions in accordance with embodiments as described herein.","According to embodiments, the sets of applications , ,  or the corresponding application servers , ,  can be configured to request a new or existing key from the key management tool . In embodiments, the sets of applications , ,  or the corresponding application servers , ,  can use a certificate such as, for example, an X509 digital certificate, or other certificates, to validate itself to the key management tool . In response to receiving the certificate, the processing module  can be configured to examine the certificate and validate the requesting entity. Further, in response to receiving the request or validating the entity, the processing module  can be configured to generate a key for the requesting application or application server. In embodiments, the sets of applications , ,  can be configured to request access to an existing key stored in the database  of the key management tool . Further, the processing module  can be configured to provide a copy of the key to the requesting application, which can use the copy of the key to encrypt or decrypt data, as necessary.","For example, assume that a web-based storefront application needs to encrypt data to send to a user purchasing a product. If the storefront application does not have an associated key to encrypt the data, the storefront application can send a request to the key management tool , along with an X509 digital certificate, to have the processing module  generate a key for the storefront application. The processing module  can examine the X509 digital certificate to validate the storefront application, create a copy of the key, and provide the copy of the key to the storefront application via, for example, the network . Upon receipt of the copy of the key, the storefront can use the key to encrypt data, such as shopping cart data, to the user, as well as decrypt data sent by the user.","In other embodiments, the processing module  can be configured to store or maintain existing keys for any of the sets of applications , , . For example, if the application  sends a request to the key management tool  to access the key corresponding to the application , the processing module  can retrieve a copy of the key from the database  and provide the copy of the key to the application , which can use the copy of the key to encrypt or decrypt data, as necessary.","In embodiments, the key management tool  and\/or components thereof can be configured to maintain a set of policies related to the keys. For example, one policy can dictate when keys are to expire, and another policy can dictate the destruction of keys. It should be appreciated that other key policies, and combinations of key policies, are envisioned. In embodiments, the set of policies can be tailored to individual application servers , ,  or individual sets of the applications , ,  or services. The processing module  can be configured to examine any associated policies to determine if any apply. For example, one policy can state that all keys in the database  are to expire at midnight every Sunday. As such, at midnight each Sunday, the processing module  can mark all the keys stored in the database  as expired. For further example, another policy can state that a key is to be destroyed after being used by the sets of applications , ,  two times. As such, once a key is used by one or more of the applications , ,  a total of two times, the processing module  can access that key from the database  and delete it from storage. In embodiments, a user, administrator, or other entity can specify the applicable policies for the keys.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4","b":["320","406","320","430","432","436","436","430","438","440","430","434","406","320"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5","b":["502","504","506"]},"In , the processing module  or other logic can determine whether the key request corresponds to a new key or to an existing key for the application. For example, if the application does not have a key, or the application's key is expired, then the key request can be for a new key. For further example, if the application already has a key that is not expired, the key request can be for an existing key. If a new key is required, then processing can proceed to  in which a new key can be generated. In embodiments, the key can be stored in memory such as, for example, the database . In other embodiments, the processing module  or other logic can examine any associated digital certificate to validate the requesting application. If, on the other hand, an existing key for the application exists, then processing can proceed to  in which the application's existing key can be retrieved from storage such as, for example, the database . In embodiments, the processing module  or other logic can generate a copy of the existing key.","In , a copy of the key can be provided to the application. In embodiments, the processing module  or other logic can record when the copy of the key is provided to the application. In , the processing module  or other logic can determine whether an applicable key policy exists for the key. In embodiments, the key policy can be an expiration policy, a destruction policy, or other policies. If there is an applicable key policy, then processing can proceed to  in which the key policy can be implemented. For example, if a key expiration policy applies, then the processing module  or other logic can mark the key as expired. For further example, if a key destruction policy applies, then the processing module  or other logic can delete the key from storage. If, on the other hand, there is not an applicable key policy, then processing can proceed to . In , processing can repeat, return to a prior processing point, jump to a further processing point, or end.","The foregoing description is illustrative, and variations in configuration and implementation may occur to persons skilled in the art. For example, while embodiments have been described in which the key management tool  resides in a single server or platform, in embodiments the key management tool  and associated logic can be distributed among multiple servers, services, or systems. Other resources described as singular or integrated can in embodiments be plural or distributed, and resources described as multiple or distributed can in embodiments be combined. The scope of the invention is accordingly intended to be limited only by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
