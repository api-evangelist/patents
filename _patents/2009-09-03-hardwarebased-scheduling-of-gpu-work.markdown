---
title: Hardware-based scheduling of GPU work
abstract: An apparatus and methods for scheduling and executing commands issued by a first processor, such as a CPU, on a second processor, such as a GPU, are disclosed. In one embodiment, a method of executing processes on a graphics processing unit (GPU) includes monitoring one or more buffers in a memory, selecting a first subset from the one or more buffers for execution on the GPU based on a workload profile of the GPU, and executing the first subset on the GPU. The GPU may also receive a priority ordering of the one or more buffers, where the selecting is further based on the received priority ordering. By performing prioritization and scheduling of commands in the GPU, system performance is enhanced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08310492&OS=08310492&RS=08310492
owner: Advanced Micro Devices, Inc.
number: 08310492
owner_city: Sunnyvale
owner_country: US
publication_date: 20090903
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF EMBODIMENTS OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates generally to the scheduling of commands on a processor.","2. Background Art","Graphics processor units (GPU) are rapidly increasing in processing power. The increase in processing power is, at least in part, due to multiple independent processing units (e.g., SIMD processors, ALU) that are included in a GPU. In many graphics applications, the multiple independent processing units are utilized to perform parallel geometry computations, vertex calculations, and\/or pixel operations. For example, graphics applications can often be characterized as single instruction multiple data (SIMD), where the same sequence of instructions can executed on multiple parallel data streams to yield substantial speedup of operations.","Another growing trend is the use of GPU for general purpose computations that may not necessarily be SIMD-type computations. The use of the GPU for general computations is referred to as GPGPU-style of computing. In the GPGPU-style of computing, the CPU can use the GPU for performing compute work items that were usually done in the CPU.","Conventionally, work for the GPU, for example, streams of vertices and texture information and instructions to process such information, are scheduled to operate on the GPU by the CPU. Software executing on the CPU may prioritize the various items of work (also referred to as \u201ccommands\u201d below) according to some priority order, and enqueue them in a system memory buffer. The GPU asynchronously retrieves the work item to be processed next from the system memory buffers. On the GPU, the selection of the work item to be processed next is based on a priority ordering specified by the CPU. In some instances, the CPU may specify priority on a per work item basis, and in other instances the CPU may specify a priority associated with each memory buffer, and any work item enqueued in a memory buffer will have the priority associated with that buffer.","With the rapid increase of processing capability in the GPU, and also with the increasing use of GPU for general purpose computations, more effective means of more fully utilizing the available computing power of the GPU are needed. What are needed, therefore, are methods and systems that can more effectively allocate the GPU resources to work items.","Apparatus and methods for scheduling and executing commands issued by a first processor, such as a CPU, on a second processor, such as a GPU, are disclosed. In one embodiment, a method of executing processes on a graphics processing unit (GPU) includes selecting a first subset of buffers from the one or more buffers in memory for execution of work items from the first subset on the GPU based on a workload profile of the GPU, and executing work items from the first subset on the GPU. The GPU may also receive a priority ordering of the one or more buffers, where the selecting is further based on the received priority ordering.","Another embodiment is a system for executing work items on a GPU. The GPU is configured to select a first subset of buffers from the one or more buffers in memory for execution of work items from the first subset on the GPU based on a workload profile of the GPU, and to execute the first subset on the GPU. The GPU may be further configured to receive a priority ordering of the one or more buffers, where the selecting is further based on the received priority ordering.","Further embodiments, features, and advantages of the present invention, as well as the structure and operation of the various embodiments of the present invention, are described in detail below with reference to the accompanying drawings.","Embodiments of the present invention may enable substantially improved utilization of graphics processing unit (GPU) resources. While the present invention is described herein with illustrative embodiments for particular applications, it should be understood that the invention is not limited thereto. Those skilled in the art with access to the teachings provided herein will recognize additional modifications, applications, and embodiments within the scope thereof and additional fields in which the invention would be of significant utility.","Embodiments of the present invention may be used in any computer system or computing device having at least two processors, such as a CPU that provides work items (e.g., commands or command buffers) and a GPU that processes work items provided by the CPU. For example and without limitation, embodiments may include computers including laptop computers, personal computers, game platforms, entertainment platforms, personal digital assistants, and video platforms.","In systems having a CPU and a GPU, the utilization of the GPU is a significant factor in overall system performance. Ideally, one would desire to have the GPU utilization at or near maximum. The CPU provides the instructions and data that are used in the GPU. In conventional systems, the CPU would provide substantially all of the instructions and data to the GPU in command buffers, and the GPU would simply take as input those command buffers and execute (i.e., execute the commands from the command buffers). A command buffer is a data structure containing instructions or commands along with associated data. In the conventional systems, any prioritizing of the command buffers was done by the CPU, and the GPU simply executed the commands queued and prioritized by the CPU, in the order specified by the CPU. Although efficient, the conventional approach of the GPU relying solely on the CPU for prioritization of work to be executed on the GPU leaves room for improvement. Embodiments of the present invention are directed towards enabling the GPU to prioritize and schedule the commands specified by the CPU. For example, the GPU can prioritize commands to be executed based on its local resource availability in a more dynamic manner and in a more efficient manner in comparison to the CPU. Furthermore, the GPU can perform a second level of prioritizing beyond any prioritization of commands specified by the CPU.","System for Hardware-Based Scheduling of Commands on GPU",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 1","FIG. 1"],"b":["100","101","102","103","104","105","100"]},"CPU  can be any commercially available CPU, a digital signal processor (DSP), application specific integrated processor (ASIC), field programmable gate array (FPGA), or a customized processor. CPU  can comprise of one or more processors coupled using a communication infrastructure, such as communication infrastructure . CPU  can also include one or more processors that have more than one processing core on the same die such as a multi-core processor. In the embodiment shown in , CPU  can be a dual core processor having processing cores core 1 and core 2 . CPU  executes an operating system (not shown) and one or more applications, and is the control processor for system . The operating system executing on CPU  controls and facilitates access to devices in system . One or more applications executing on CPU , including user applications, cause CPU  to coordinate the use of various devices of system , including GPU  and system memory , to accomplish the tasks.","System memory  includes one or more memory devices. Typically, system memory  can be a dynamic random access memory (DRAM) or a similar memory device used for non-persistent storage of data. In some embodiments, system memory  can include a memory device such as a flash memory device and or static RAM (SRAM) device. During execution of system  in an embodiment, system memory  can have residing within it, one or more memory buffers  through which CPU  communicates commands to GPU .","Memory buffers  through which CPU  communicates commands to GPU  can be implemented as ring buffers or other data structure suitable for efficient queuing of work items. In the following memory buffers  are referred also to as ring buffers . Commands from CPU  to GPU  can include instructions and data. In some embodiments, data structures having instructions and data are input to a ring buffer  by an application and\/or operating system executing on CPU . CPU  (or an application and\/or operating system executing on CPU ) can specify a priority associated with one or more ring buffers . Commands may be added to a ring buffer based on a determined priority level of each command. For example, CPU  may define one ring buffer each for a high priority commands, low priority commands, and low latency commands.","A set of indirect buffers  may be used to hold the actual commands (e.g., instructions and data). For example, when CPU  communicates a command buffer to the GPU , the command buffer may be stored in an indirect buffer  and a pointer to that indirect buffer can be inserted in the ring buffer of the corresponding priority level. It should be noted that indirect buffers  can be implemented to enable either a single level of indirection or multiple levels of indirection.","Ring buffer work registers  can be implemented in system memory  or in other register memory facilities of system . Ring buffer work registers  provide, for example, communication between CPU  and GPU  regarding commands in ring buffers . For example, CPU  as writer of the commands to ring buffers  and GPU  as reader of such commands may coordinate a write pointer and read pointer indicating the last item added, and last item read, respectively, in ring buffers . Other information such as list of available ring buffers , priority ordering specified by CPU , can also be communicated to GPU  through ring buffer work registers .","Graphics driver  can comprise software, firmware, hardware, or any combination thereof. In an embodiment, graphics driver  is implemented entirely in software. During the execution of system , graphics driver  software can reside in system memory . Graphics driver  provides an interface and\/or application programming interface (API) for the CPU  and applications executing on CPU  to access GPU . Generally, when system  comes up the operating system initializes the graphics driver  as appropriate for the particular GPU .","GPU  provides graphics acceleration functionality and other compute functionality to system . GPU  can include a plurality of processors, such as single instruction multiple data (SIMD) processors including processing elements such as arithmetic and logic units (ALU). Having multiple SIMD processors, in general, makes GPU  ideally suited for execution of data-parallel tasks such as is common in graphics processing. For example, when rendering an image on a display, the same or substantially the same instructions are executed on each pixel that is rendered on the display. GPU  can also be used for tasks other than graphics operations, such as various compute intensive tasks that can benefit from parallel execution of data streams. In the description below, graphics applications are used for ease of description. A person of skill in the art will, however, recognize that the teachings herein are applicable to numerous other tasks that can be executed on a graphics processor. Also, as will be understood by those of ordinary skill in the art, GPU  could be logic embedded in another device such as CPU , a bridge chip (such as a northbridge, southbridge or combined device) or the like.","GPU  comprises components including a GPU memory , a 3-dimension\/compute shader complex (3D\/CS complex) , a ring list controller (RLC) , and command processor . GPU memory  provides a local memory for use during computations in GPU , and may include DRAM or such memory device. In an embodiment, GPU  includes a plurality of context save areas (CSA) . Each CSA provides a memory area for saving the context of work items that are swapped out of execution in GPU  before completion as described below.","3D\/CS complex  is the main computation component within GPU , and comprises of a plurality of SIMD processors that facilitates computations including computations on parallel data streams. 3D\/CS complex, for example, can include vertex shaders, pixel shaders, geometry shaders, unified shaders, and other components necessary for data computation in GPU . In embodiments described below, 3D\/CS complex can be considered as comprising 3D computation components, compute shader components, and low latency computation components. The commands sent to the GPU  from CPU  are implemented using the 3D\/CS complex.","Ring list controller (RLC)  includes functionality to coordinate the access to memory buffers (such as ring buffers ). In an embodiment, RLC  determines the list of ring buffers  that is to be processed in GPU , receives any priority ordering of ring buffers  specified by CPU  (more specifically a process or operating system executing on CPU ), and determines the scheduling of the ring buffers on GPU  in a manner that optimizes the utilization of processing resources in GPU . For example, RLC  together with command processor  can schedule the ring buffers received from CPU  in a manner that keeps each SIMD processor in 3D\/CS complex  at or near maximum utilization.","Command processor  controls the processing within GPU . Command processor receives instructions to be executed from CPU , and coordinates the execution of those instructions on GPU . In some instances, command processor may generate one or more commands to be executed in GPU , that corresponds to each command received from CPU . In an embodiment, command processor  together with RLC  implements the prioritizing and scheduling of commands on GPU  in a manner that maximizes the utilization of GPU  resources. Logic instructions implementing the functionality of the command processor  and RLC  can be implemented in hardware, firmware, or software, or a combination thereof. In one embodiment, command processor  is implemented as a RISC engine with microcode for implementing logic including scheduling logic.","Communication infrastructure  provides coupling to devices and components of system . Communication infrastructure  can include one or more communication buses such as Peripheral Component Interconnect (PCI), Advanced Graphics Port (AGP), and the like.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["101","104","100","102","200","0","6","201","202","203","204","205","206","207","200","104","210","0","201","1","202","2","203","5","206","210","101","101","210","104","201","202","203","206","101","112","104","101","104","104"]},"GPU  periodically monitors the ring buffers in system memory , ring buffer work registers in system memory, and\/or other register locations that are updated by CPU  to determine if any ring buffers have command buffers that are ready to be processed by GPU . Upon detection that one or more ring buffers have command buffers ready to be executed GPU  can receive the command buffers for execution (i.e., execution of commands in the command buffers). In an embodiment, GPU  may use direct memory access (DMA) or the like to receive the ring buffers specified by the CPU  into GPU local memory or into a set of general purpose registers (GPR). The RLC  may perform the monitoring of the ring buffers and control the transfer of the ring buffers to GPU memory and\/or GPR. Having determined the set of ring buffers to be executed on GPU , RLC  determines the allocation of the ring buffers to GPU, the prioritization of the ring buffers, and prioritizations of the command buffers within the ring buffers. In some embodiments, the determination of prioritizations is performed by RLC  in coordination with command processor . For example, in the subset  of ring buffers received for execution on GPU , a priority ordering as shown of ring buffer  as priority level 1, ring buffer  as priority level 2, and ring buffers  and  as priority level 3 may be determined, based on the prioritizations determined by CPU  and prioritization determined by GPU .","CPU Processing",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["301","305","101","301","101","103","104","104","301","101","104","103","104"]},"Initialization can include memory allocation, the initialization of data structures corresponding to the ring buffers, and updating one or more registers used to communicate ring buffer configuration information to GPU . For example, the initialization of a ring buffer can include the memory allocation for the ring buffer data structure (e.g., a ring buffer ), allocation of one or more memory areas for holding the actual command buffers associated with ring buffer elements (e.g., indirect buffers ), and the initialization of one or more registers (e.g., one or more registers in ring buffer work registers ). The ring buffers and indirect ring buffers may be initialized based on configuration parameters or parameters dynamically determined based on applications that are executed. For example, the number of ring buffers, the size of the ring buffers, the size of indirect buffer area, and the like, can be provided as configuration parameters at system startup, and\/or one or more of those parameters can be determined based on application characteristics.","In an embodiment, each ring buffer  is implemented as a circular array. Each element of the circular array is intended to accommodate a pointer to a location in the indirect buffer area . Each ring buffer data structure would also have parameters needed for the maintenance of the ring buffer structure such as head and tail pointers, etc. The indirect buffer area  is intended to accommodate a plurality of data structures corresponding to command buffers. For example, each command buffer can include one or more commands to be executed by GPU and associated data. Storing the actual command buffers in locations different from the ring buffer is advantageous in relation to efficiency of memory utilization. The indirect buffer area  can be allocated in various ways including allocating on a per command basis, allocating an area for each ring buffer, or allocating one contiguous area for all ring buffers . Ring buffer work registers  can include registers and\/or other locations. Although ring buffer work registers  are shown as configured within system memory , a person of skill in the art would appreciate that the ring buffer work registers can include one or more registers in a location other than in system memory . For example, ring buffer work registers  can include one or more registers in GPU . Ring buffer work registers  can be utilized to convey information related to the ring buffer usage by CPU  to GPU . For example, information such as the list of currently active ring buffers, a priority ordering of the active ring buffers as determined by CPU , allocation of active ring buffers to one or more GPU elements, can all be conveyed to GPU  by CPU . In another example, ring buffer work registers  can also be used to convey information such as the current read and write pointers for each ring buffer.","In step , CPU  notifies GPU  of the ring buffer configuration. This step may occur at system startup or at application startup subsequent to the initialization of ring buffers in system memory  by CPU . In some embodiments, step  may be performed at system startup as well as at application startup. For example, if the configuration of the number of active ring buffers changes on application startup, such changes would be conveyed to GPU . In an embodiment of the present invention, ring buffer configuration information conveyed to GPU  includes number of ring buffers, location and size of each ring buffer, and CPU  determined priority ordering. Different and\/or additional configuration information regarding the frame buffer configuration can be conveyed in various embodiments of the present invention. The notification in step  may be based on the CPU  writing to one or more register locations monitored by GPU , such as ring buffer work registers . In another embodiment, an application executing on CPU  or the operating system of CPU  through the use of graphics driver  initiates the notification to the GPU . In embodiments of the present invention, graphics driver  can write information to be conveyed to GPU  into the system memory .","In step , commands are written to ring buffers. For example, during execution of application such as a game application numerous graphics related commands are executed in order to perform various graphics related tasks including the rendering of images on a display. The application code may utilize a graphics commands using a graphics processing platform such as DirectX. At the time of compiling the application for execution on system , or in some instances, more dynamically at run-time, it is determined that certain commands, along with the associated data, are to be offloaded by CPU  to be processed on GPU . For example, any command invoking a DirectX API to perform a function may be selected for processing on GPU . The operating system, or in some embodiments, the application itself, writes the commands that are selected for processing on GPU  and the associated data to the ring buffers configured for conveying instructions and data to GPU . The commands and the associated data can be formed into data structured generally known as command buffers. Command buffers include one or more instructions and associated data. For example, for a \u201cdraw\u201d command, the corresponding command buffer can include the \u201cdraw\u201d command as well as the image to be drawn or rendered on a display.","As noted previously, CPU  may have a priority ordering determined for the ring buffers through which it conveys command buffers to GPU . When writing command buffers in step , therefore, each command buffer is enqueued in the ring buffer that best matches the priority level of the command. For example, a game application generates numerous game character image renderings that require almost immediate display and also menus and other user events that are less time critical. Therefore, the command buffers corresponding time critical images can be enqueued to a higher priority ring buffer than the command buffers for the less time critical menus and user events. Writing a command buffer to the appropriate ring buffer can include allocating a memory area to hold the command buffer in indirect buffer area , and enqueuing a pointer to the corresponding location in the indirect buffer area  in the ring buffer. Inserting a pointer to the indirect buffer  in the ring buffer also includes updating the data structure elements of that ring buffer, such as the head and tail pointers. Additionally, CPU  may update a value that indicates additional values and pointers that are used in safe concurrent access to the ring buffers by CPU  as writer and GPU  as reader. Subsequent to writing one or more command buffers to ring buffers, CPU  can update one or more registers and\/or other memory locations to notify GPU  of the availability of data. In some embodiments, no separate notification from CPU  may be needed as the GPU  may continually monitor the respective ring buffers.","Process  is implemented on the CPU  in a substantially asynchronous manner from processing in the GPUs to which CPU  is coupled. Process  enables an application executing on CPU  to execute while having multiple commands pending to be processed in other processors such as GPU . However, there may be some synchronization mechanisms implemented between CPU  and GPU , for example, to ensure that the GPU does not get overwhelmed with incoming command buffers. For example, CPU  may have techniques in place to detect when ring buffers are not being processed by GPU , so that it can react to the slowed processing. CPU  may also have mechanisms in place to detect if each command buffer enqueued by it to the ring buffers are consumed by GPU . For example, for each command buffer enqueued to a ring buffer, CPU  may write a value to a memory location in ring buffer work memory . CPU  can thereafter periodically check the value at the memory location. When GPU  processes the command buffer it can update the respective location in ring buffer work memory  with a different value. An unchanged value in the respective location in ring buffer work memory  after a timeout period can indicate to CPU  that GPU  is not functioning properly.","GPU Processing",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 4","b":["401","409","400","104","400","140"]},"In step , GPU  determines the configuration of ring buffers in system memory  through which it received command buffers from CPU . Step  may be performed at system startup and\/or upon application startup. For example, at system startup upon initialization by CPU , GPU  can determine the configuration of the ring buffers in system memory . GPU  may also, upon the startup of an application or upon receiving a signal from CPU , determine the configuration of the ring buffers. In embodiments where CPU  initializes ring buffers  at system startup, and does no further additions and\/or removals of ring buffers during system operation, then GPU  can perform step  only at system startup. On the other hand where CPU  makes configuration changes to ring buffers  at times other than system startup, for example, at application startup, GPU  is required to update its view of the ring buffer configurations when such changes occur. The determination of the configuration of ring buffers by GPU  may be performed based on a periodic monitoring of the ring buffers or associated registers or memory locations by GPU , or based on a message or signal received from CPU . In an embodiment, the functionality of step  is implemented primarily in RLC .","Having determined the configuration of ring buffers , in step  GPU  monitors the ring buffers to detect ring buffers available for processing. For example, as a game application executes on CPU , commands for operations requiring graphics processing are enqueued by CPU  to ring buffers  in the form of command buffers, as described in relation to step  of process . As command buffers are generated and enqueued to ring buffers in accordance with executing applications, CPU  can update one or more memory locations and\/or registers to indicate to GPU  which ring buffers are available for processing. GPU  can monitor such memory locations and\/or registers that are updated by CPU . In an embodiment, the functionality of step  is implemented primarily in RLC .","In step , GPU  selects a subset of ring buffers  for processing and execution. Step  can be performed in response to detecting command buffers enqueued for processing in ring buffers , or in response to a message or signal received from CPU . The selection of the subset of ring buffers for processing and execution, for example, the selection of subset  from available ring buffers  as shown in , may be based on one or more factors. In one embodiment, CPU  may maintain a list of ring buffers that it considers are ready for processing in a GPU, and GPU  selects from such ring buffers as the subset to be processed. In some embodiments, GPU  In another embodiment, CPU  simply enqueues command buffers to one or more ring buffers, and GPU  selects one or more ring buffers that have enqueued command buffers pending for execution.","The subset of sing buffers selected for execution can, in some embodiments, be brought into GPU local memory or GPR in preparation for processing within GPU . The transfer of command buffers from system memory  can be controlled by a DMA process. When command buffers are read from system memory , GPU  can update one or more memory locations to indicate what command buffers have been read and if each of the command buffers were processed. Such memory locations that are updated may be in ring buffer work registers , within ring buffer data structures, and\/or within GPU local memory or GPR. In an embodiment, the functionality of step  is implemented primarily in RLC .","In step , GPU  selects command buffers for execution on the GPU according to priority criteria. During the processing of this step, GPU  determines how the ring buffers selected in the previous step are allocated to the one or more GPUs, and also how the individual commands are allocated to resources within a GPU. For example, GPU  may determine the priority ordering in which the subset of ring buffers  selected in step  from system memory  is to be processed on GPU , and, in some embodiments, also how commands are prioritized and scheduled during the processing of each ring buffer. hi an embodiment, the functionality of step  is implemented primarily in RLC .  further describes the processing in step .","In step , selected commands are executed on GPU , according to the priority orderings determined in GPU  in the previous step. In one embodiment, ring buffer subset  selected for execution is ordered according to a priority for execution on GPU . Within each ring buffer, commands can be prioritized and scheduled for execution, or executed in the order of appearance in the ring buffer. hi another embodiment, GPU  can periodically determine a prioritization of all command buffers pending processing, taking into consideration multiple factors such as the prioritization assigned by CPU , type of ring buffer or type of command buffer, processing resource availability on GPU , and the like.","Executing commands received in command buffers from CPU  can include command processor  generating one or more commands corresponding to the received command and scheduling the command on processing resources on GPU . For example, a single command received from CPU  to render an image may cause command processor  to subdivide the image and to generate one or more instructions to process each one of the subdivided parts of the image. Command processor then schedules each one of the subdivided parts to be executed on a processing resource such as a SIMD processor and\/or ALU in GPU . The scheduling of commands for execution, and execution of the commands on the GPU are mainly directed by command processor  in coordination with RCL  that specifies the priority ordering of the commands.","Execution of commands can proceed in various ways consistent with the present invention. In one embodiment, as each command completes execution and a processing resource is made available, the next command according to priority is executed on that processing resource. Embodiments can also implement methods where other factors are considered in selecting the next command to be executed, beyond the prioritization done before. For example, the pending commands can be evaluated and the command most likely to optimally utilize the available resources at any time may be scheduled as the next command to be executed. In yet other embodiments of the present invention, at the completion of execution of some number and\/or types of commands in GPU , GPU  can return to step  and re-select ring buffers available processing.","In general, during the execution of commands in GPU , RLC  or another component of GPU  continues monitoring of the ring buffers in system memory, such as ring buffers . The continued monitoring enables GPU  to detect, for example, when command buffers are added to a high priority queue. Having one or more command buffers added to a high priority ring buffer by CPU , during the execution of one or more lower priority commands by GPU , can cause GPU  to pre-empt one or more commands such that the higher priority commands can be executed.  shows steps - that can be implemented, according to an embodiment of the present invention, to enable GPU  to accommodate higher priority commands during the execution of one or more lower priority commands. For example, steps - may be implemented during the processing of step .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 5","b":["501","505","407","501","505","140","150","104"]},"In step , a profile of the current workload of GPU  is determined. In an embodiment, RLC  and\/or command processor  determine factors such as processing elements available for use, relative processing capabilities of the processing elements, the pending workload, and the current priority ordering of the pending workload, to create a workload profile. The workload profile reflects the state of the GPU. Determination of the processing elements available use and the relative processing capabilities of each, may include the consideration of separate processing elements, such as SIN\/ID elements, ALU capabilities, 3D processing devices, compute shader device, and low latency processing device. The profiling of the current workload of the GPU can be performed dynamically on a continuous basis or periodically. For example, RLC  and\/or command processor  may initiate the profiling of the GPU workload when a command or ring buffer completes execution, or when a new subset of ring buffers are read from system memory. The workload profile can also be generated new each time a determination of the workload is needed, or can be maintained in a manner in which it is updated upon the occurrence of predetermined types of events, such as execution completing of a ring buffer, the reading of a subset of ring buffers from system memory, and the like.","In step , GPU  determines a priority ordering of the ring buffers that are pending execution on GPU . In an embodiment, RLC  and command processor , determine the ordering based on the workload profile determined in the previous step . The priority ordering determined by GPU  can be based on the ordering of the ring buffers specified by CPU . The priority ordering specified by CPU  can be substantially adhered to while optimizing the actual execution order based on dynamic workload profiles of the GPU. The ability to dynamically reorder its execution sequence enables the GPU to have fine grained control over how its processing components are utilized.","In step , GPU  determines a priority ordering of commands associated with each of the ring buffers. For example, RLC  and command processor  can determine the ordering based on the workload profile determined in the previous step  and the ring buffer prioritization determined in step . The priority ordering of the commands in the ring buffer can involve determination as to what processing component within the GPU each command is allocated. The ability to reorder the execution of commands within respective ring buffers enables the GPU to better utilize its resources by making dynamic determinations, for example, to execute commands that are originally designated as low priority as high priority if the high priority processing resources are available, or to execute high priority commands as low priority where high priority resources are occupied, or by executing commands that would usually be executed on a compute shader component on a low latency component based on component availability.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 6","b":["601","609","104","601","609","409"]},"In step , GPU  determines if a context switch is required to process another command. The determination if a context switch is required may be based on one or more factors such as the priority of the processes that are currently executing, the priority of the processes that require execution, execution time slice values, and remaining time of execution for each currently executing process. Command processor , for example, can include functionality to consider one or more factors such as above and make a determination as to whether a context switch should be forced.","In step , the executing command and\/or the executing ring buffer is pre-empted. Pre-empting the executing command and\/or the executing ring buffer includes saving the state of the pre-empted command and\/or ring buffer. In embodiments of the present invention, the state of the pre-empted command and\/or ring buffer is saved in a context save area (CSA) configured in the GPU local memory. For example, if the currently executing ring buffer is to be pre-empted, the state of the ring buffer including its pending commands, data, and execution parameters such as program counters, and the like are saved to an area in GPU local memory such as CSA  in GPU memory .","In step , another command and\/or another ring buffer is swapped into execution by RLC  and command processor . The command and\/or ring buffer swapped into execution can be executing for the first time on GPU  or can be a command and\/or ring buffer that is restored from a CSA. For example, the swapped in command and\/or ring buffer could have previously executed to the end of its time slice and been saved to a CSA at the end of its time slice.","In step , the currently executing command completes execution. When the currently executing command completes execution, the next command in the same ring buffer can be executed. In embodiments of the present invention, GPU  can determine the execution order of the commands within a ring buffer, as discussed in relation to step  of process . In some embodiments, upon the completion of execution of a process GPU  may perform an action such as checking for higher priority ring buffers for execution or checking for a higher priority command in the same ring buffer, to determine the process and\/or ring buffer for next execution.","In step , the currently executing ring buffer completes execution of all pending commands associated with it. Upon the completion of execution of a ring buffer, GPU  can select another ring buffer, e.g., the ring buffer next in the order of priority, for execution.","The embodiments described above can be described in a hardware description language such as Verilog, RTL, netlists, etc. and that these descriptions can be used to ultimately configure a manufacturing process through the generation of maskworks\/photomasks to generate one or more hardware devices embodying aspects of the invention as described herein.","Conclusion","The present invention, as described by the embodiments described above, enables more efficient allocation of processing resources within a second processor such as a GPU that receives commands from a first processor such as a CPU. The ability to prioritize and schedule its workload based on locally determined factors such as processing device availability, workload, and the like, increases the utilization of the second processor.","The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.","The present invention has been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.","The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can, by applying knowledge within the skill of the art, readily modify and\/or adapt for various applications such specific embodiments, without undue experimentation, without departing from the general concept of the present invention. Therefore, such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments, based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation, such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.","The breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated in and constitute part of the specification, illustrate embodiments of the invention and, together with the general description given above and the detailed description of the embodiment given below, serve to explain the principles of the present invention. In the drawings:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
