---
title: Query builder system for resource description framework based knowledge stores
abstract: According to one embodiment, a computer-implemented method, includes accessing, by a computer system, a knowledge store that stores records structured according to a RDF specification. The method also includes, based on a drag-and-drop selection technique, receiving a first entry in a first query entry field. The first entry is selected from a group comprising one or more of the following: a first class of a plurality of classes, a first predicate of a plurality of predicates, a first instance of a plurality of instances, and a first text entry of a plurality of text entries. The method further includes generating a SPARQL query using at least the first entry. The method further includes transmitting the generated SPARQL query to the knowledge store.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08984002&OS=08984002&RS=08984002
owner: Raytheon Company
number: 08984002
owner_city: Waltham
owner_country: US
publication_date: 20110503
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","DETAILED DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["This application claims the benefit under 35 U.S.C. \u00a7119(e) of the priority of U.S. Provisional Application Ser. No. 61\/331,288, filed May 4, 2010, entitled \u201cQuery Builder System For Resource Description Framework Based Knowledge Stores.\u201d","The resource description framework (RDF) is a specification that applies conceptual modeling techniques to provide a structure for data in which its elements may be linked with one another according to their relationship. Such data structures may provide enhanced utility by improving search capabilities and\/or developing a context from which to infer other aspects of information that may not be included in the data while in its raw form. RDF databases have been developed that store data according to the RDF specification. Access to data from these databases is provided by a RDF query language commonly referred to as the SPARQL Protocol and RDF Query Language (SPARQL) query language.","Application software written to access data from Resource Description Framework (RDF) based knowledge stores typically includes software code capable of processing queries written according to the SPARQL query language. The SPARQL query language, however, is generally cryptic in nature such that manual generation of queries is often difficult to perform. Certain embodiments of the present disclosure include a query building engine  that may provide a solution to this problem by using a drag-and-drop selection technique in order to generate SPARQL queries. This may allow generation of SPARQL queries without requiring the user to know or understand SPARQL, and may further allow generation of SPARQL queries that may be free of (or have a reduced number of) errors due to namespace conflicts or miss-spelling of terms. Furthermore, in certain embodiments, RDF-based knowledge stores organize elements of records in one a plurality of classes, instances, and predicates. This class, instance, and predicate structure may be used by query building engine  to present relevant information about stored records, so as to provide enhanced generation of SPARQL queries for use with RDF-based knowledge stores.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["10","10","14","18","22","34","38","42","10","10"]},"User computer  may be implemented using any suitable type of processing system and may include any suitable combination of hardware, firmware, and software. For example, user computer  may include one or more computer systems at one or more locations. Each computer system may include any appropriate input devices, output devices, mass storage media, processors, memory, or other suitable components for receiving, processing, storing, and communicating data. For example, each computer system may include a personal computer, workstation, network computer, kiosk, wireless data port, personal data assistant (PDA), one or more Internet Protocol (IP) telephones, smart phones, table computers, one or more servers, a server pool, one or more processors within these or other devices, or any other suitable processing device. User computer  may be a stand-alone computer or may be a part of a larger network of computers associated with an entity.","User computer  may provide a user access to the query building engine  executed on query building system . In particular embodiments, the user of user computer  may access query building engine  through any suitable method. For example, the user may access query building engine  through a web browser by typing in its uniform resource locator (URL) and\/or IP address and logging in. In a further embodiment, query building engine  may be automatically accessed by user computer  upon activating a web browser.","User computer  may display information associated with query building engine  and\/or data generated by query building engine . For example, user computer  may include a display, such as a liquid crystal display (LCD) (or any other type of a display) for displaying such data. In particular embodiments, the display may display a graphical user interface (GUI) that displays information associated with query building engine  or data generated by query building engine . Additionally, user computer  may include one or more input devices, such as a keyword, a mouse, a console button, or other device for receiving input from the user of user computer .","User computer  may be communicatively coupled to query building system  via network . Network  facilitates wireless or wireline communication, and may communicate, for example, IP packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information between network addresses. Network  may include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), mobile networks (e.g., using WiMax (802.16), WiFi (802.11), 3G, 4G, or any other suitable wireless technologies in any suitable combination), all or a portion of the global computer network known as the Internet, and\/or any other communication system or systems at one or more locations, any of which may be any suitable combination of wireless and wireline.","Query building system  may be implemented using any suitable type of processing system and may include any suitable combination of hardware, firmware, and software. For example, query building system  may include one or more computer systems at one or more locations. Each computer system may include any appropriate input devices, output devices, mass storage media, processors, memory, or other suitable components for receiving, processing, storing, and communicating data. For example, each computer system may include a personal computer, workstation, network computer, kiosk, wireless data port, PDA, one or more IP telephones, smart phones, table computers, one or more servers, a server pool, one or more processors within these or other devices, or any other suitable processing device. Query building system  may be a stand-alone computer or may be a part of a larger network of computers associated with an entity.","As illustrated, query building system  includes query building engine  that is stored in a memory  and executed on a processor . Processor  may include one or more microprocessors, controllers, or any other suitable computing devices or resources. Processor  may work, either alone or with other components of system , to provide a portion or all of the functionality of system  described herein. Memory  may take the form of any suitable combination of volatile and non-volatile memory including, without limitation, magnetic media, optical media, random-access memory (RAM), read-only memory (ROM), removable media, and any other suitable memory component.","Query building engine  may include any suitable computer program, software, computer executable instructions, logic and\/or instructions capable of being executed by query building system  in order to generate SPARQL Protocol and RDF Query Language (SPARQL) queries (such as SPARQL queries  illustrated in ). In particular embodiments, query building engine  may be contained within a medium, such as a tangible medium.","As is discussed below with regard to , query building engine  may assemble SPARQL queries according to user input, and may further communicate these generated SPARQL queries to knowledge store . Query building engine  may further receive results of the SPARQL query communicated to knowledge store , format the results in any suitable format, and communicate the results to user computer  for display to the user. Query building engine  may further access knowledge store  in order to provide any other suitable information to the user of user computer . For example, as is discussed below, query building engine  may access knowledge store  in order to retrieve information associated with classes and predicates for display to the user.","Query building system  may be communicatively coupled to knowledge store  via network . Network  facilitates wireless or wireline communication, and may communicate, for example, IP packets, Frame Relay frames, ATM cells, voice, video, data, and other suitable information between network addresses. Network  may include one or more LANs, RANs, MANs, WANs, mobile networks (e.g., using WiMax (802.16), WiFi (802.11), 3G, 4G, or any other suitable wireless technologies in any suitable combination), all or a portion of the global computer network known as the Internet, and\/or any other communication system or systems at one or more locations, any of which may be any suitable combination of wireless and wireline. Query building system  may communicate with knowledge store  through network  according to any suitable protocol. For example, query building system  may communicate with knowledge store  through network  according to SPARQL endpoint using Hypertext Transfer Protocol (HTTP). Although  illustrates network  and network  as separate networks, in particular embodiments, network  and network  may be the same network.","Knowledge store  may be implemented using any suitable type of processing system and may include any suitable combination of hardware, firmware, and software. For example, knowledge store  may include one or more computer systems at one or more locations. Each computer system may include any appropriate input devices, output devices, mass storage media, processors, memory, or other suitable components for receiving, processing, storing, and communicating data. For example, each computer system may include a personal computer, workstation, network computer, kiosk, wireless data port, PDA, one or more IP telephones, smart phones, table computers, one or more servers, a server pool, one or more databases, one or more processors within these or other devices, or any other suitable processing device. Knowledge store  may be a stand-alone computer or may be a part of a larger network of computers associated with an entity. In particular embodiments, knowledge store  may be a BigOWLIM server implementing SESAME RDF Application Programming Interface (API).","In particular embodiment, knowledge store  may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, RAM, ROM, removable media, or any other suitable memory component. In certain embodiments, a portion of all of knowledge store  may include a database, such as one or more RDF-based servers or relational databases.","Knowledge store  may store data as records  in a subject-predicate-object ontological model according to the RDF specification. Data structured according to the subject-predicate-object ontological model may be referred to as \u201ctriples.\u201d As an example, a raw data element comprising \u201cJohn has a convertible automobile\u201d may be stored as a triple including \u201cJohn\u201d as the subject, \u201chas\u201d as the predicate (or property), and \u201cconvertible automobile\u201d as the object. In a further embodiment, the RDF-based data stored in knowledge store  also may be based on any other suitable standards and\/or specifications, such as RDF schema (RDFS) and\/or Web Ontology Language (OWL). For example, RDFS and OWL may build upon the RDF-based data by adding additional vocabulary (such as additional classes, predicates, and axioms) to enable reasoning. As a particular example, the axioms added by RDFS and OWL may enable the inference of additional triples to the knowledge store . The \u201cinverse of\u201d relationship is an example of an axiom. In particular, a raw data element comprising \u201cX is capable of Y\u201d may have an inverse inferred relationship comprising \u201cY is a capability for X.\u201d Since the axiom provides this inverse, the inverse does not have to be actually loaded into knowledge store . Instead, adding the axiom to the knowledge store  causes the inverse to be created and stored in knowledge store . The axioms provide additional triples to be stored in knowledge store .","RDF-based data stored in knowledge store  may be input into knowledge store  using any suitable method. For example, the data may be loaded into knowledge store  using one or more T-Box (or term box) OWL files and A-Box (or assertions box) RDF files. In one embodiment, the RDF-based data may be loaded into knowledge store  by an administrator that manages knowledge store .","The RDF-based data stored in knowledge store  may be stored in any suitable organizational structure. For example, the subjects and objects of the triples stored in knowledge stores  may be stored as instances of \u201cclasses.\u201d The classes may include abstract representations of the subjects and objects. For example, a particular class referred to as \u201cvehicles\u201d may include automobiles, boats, and\/or aircraft as subjects and\/or objects. In such an example, a search for the members of the class \u201cvehicles\u201d may return results that include each of these subjects and\/or objects. In particular embodiments, each class (and\/or each subject and\/or object) may be a Universal Resource Identifier (URI) that identifies a data element in knowledge store . Additionally or alternatively, in particular embodiments, each class (and\/or each subject and\/or object) may be a literal string that identifies a data element in knowledge store .","As described above, the subjects and objects of the triples stored in knowledge stores  may be stored as instances of \u201cclasses.\u201d In particular embodiments, an instance of a class may refer to a member of the class (such as URI data stored in knowledge store  under a particular class). For example, knowledge store  may store the instance \u201cAircraft_N4363Q,\u201d as a subject and\/or an object of the class \u201cAviation:Aircraft.\u201d If a user queries knowledge store  for the class \u201cAviation:Aircraft,\u201d the returned results may include all of the instances of the class, such as instance \u201cAircraft_N4363Q.\u201d","The predicates of the triples stored in knowledge store  may be stored as \u201cpredicates.\u201d A predicate of a triple stored in knowledge store  may define the relationship from the data element of the subject's URI to the data element of the object's URI. In particular embodiments, each predicate may also be a URI that identifies a data element in knowledge store . Additionally or alternatively, in particular embodiments, each predicate may also be a literal string that identifies a data element in knowledge store . The predicate URI of the RDF triple may define the relationship or literal string. A search for the predicate \u201ccapable of\u201d may retrieve results that match the \u201ccapable of\u201d predicate.","In addition to storing the RDF-based data, knowledge store  may further receive SPARQL queries and process the SPARQL queries in order to provide results (of the SPARQL query) to query building engine . In such an embodiment, the knowledge store  may include any suitable logic or programming for processing the queries and providing the data as results. In a further embodiment, knowledge store  may further develop additional RDF-based data. For example, based on data input into knowledge store , knowledge store  may create inferences of the input data, thus creating additional triples stored at knowledge store . In such an example, knowledge store  may include any suitable logic or programming for creating the additional RDF-based data.","As is illustrated in , knowledge store  may refer to more than one knowledge store . In one embodiment, query building engine  may be simultaneously connected to more than one of these knowledge stores . In such an embodiment, a SPARQL query may be sent to each of these knowledge stores , and results may be returned from each of these knowledge stores . In one embodiment, query building engine  may connect to a particular knowledge store  using any suitable method. For example, query building engine  may connect to a knowledge store  by a user entering the HTTP address of the knowledge store  in a browser's URL window. In certain embodiments, the HTTP addresses of the knowledge stores  (and any other setup information) may be saved by query building engine . As such, future query sessions with knowledge stores  may be conducted without re-entering the relevant addresses of these knowledge stores  (or any other setup information).","Modifications, additions, or omissions may be made to system  without departing from the scope of disclosure. The components of system  may be integrated or separated. For example, user computer  and query building system  may be the same computer system. As such, user computer  may store query building engine  in memory and execute query building engine  on a processor, allowing the SPARQL queries to be generated at user computer , and further allowing the generated SPARQL queries to be transmitted by user computer  to knowledge store . As a further example, each of user computer , query building system , and\/or knowledge store  may be any other suitable combination of computer systems (such as one or more computer systems). Moreover, the operations of system  may be performed by more, fewer, or other components. For example, system  may include other services or features that manipulate textural input for generation of SPARQL queries.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["46","34","14","46","50","54","58","50","50","42","42","50","42","34","42","42","34","42"]},"Basket window portion  displays a list of one or more elements (such as a class, instance, predicate, and\/or text entry) that have been previously used, selected, searched, and\/or displayed by query building engine . For example, a particular class that is selected from class window portion  during a previous search may be stored for display in the basket window portion . As such, basket window portion  may display elements that have been used by a user in a previous search, and that are likely to be used again by the user for a subsequent search. In addition to classes, basket window portion  may also display instances, predicates, and\/or text entries. A text entry may refer to any suitable textual element, variable, or value that may be used in a search or query. For example, a text entry may be a variable in the form of \u201c?\u201d followed by a user-defined variable name. This text entry may represents the variable to bind query results to. A search or query using a class such as \u201cAviation:Aircraft\u201d and the variable text entry \u201c?s\u201d may return results that include all of the instance data stored in knowledge store  that are members of the class \u201cAviation:Aircraft.\u201d Thus, the text entry may refer to the unknown data that the user is searching for.","In one embodiment, keyword search window  may allow a SPARQL query to be generated. For example, in order to generate a SPARQL query, a class, an instance, a predicate, or a text entry may be selected from either class window portion  or basket window portion , and a search button  may be actuated. In response, query building engine  may generate a SPARQL query using the selected class, instance, predicate, and\/or text entry. Furthermore, query building engine  may further transmit the generated SPARQL query to knowledge store . When the results are transmitted back to query building engine  from knowledge store , one or more results associated with the selection may be displayed in results window portion  for view by a user. In the particular example shown, results window portion  displays a number of results that are stored in knowledge store  under the example class \u201cAviation:Aircraft.\u201d In particular embodiments, once the results are displayed in results window portion , one or more of the results may be selected, resulting in a further display of the entire record associated with the selected result.","In one embodiment of keyword search window , query building engine  may generate a SPARQL query using the selected class. For example, the SPARQL query may be generated using the selection provided by a user, and also using, as an example, an automatic selection of the predicate \u201ctype.\u201d When the \u201cAviation:Aircraft\u201d class is selected, a SPARQL may be generated that returns instances that are members of the \u201cAviation:Aircraft\u201d class. Accordingly, the returned results displayed in results window portion  may include only types of aviation aircraft.","Keyword search window  further includes a keyword entry portion . A user may type in a particular text entry, and a SPARQL query may be generated using the typed in entry. This may allow a user to search for URIs or literal strings that are not displayed in class window portion  or basket window portion .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 3","FIG. 1","FIG. 3","FIG. 2","FIG. 3","FIG. 2"],"b":["66","34","14","66","70","74","78","82","86","70","50","78","54"]},"Predicate window portion  displays a list of predicates that are included in triples stored in the knowledge store . In one embodiment, the predicates displayed in predicate window portion  may be populated from the data stored in knowledge store . For example, query building engine  may access knowledge store  in order to retrieve all (or a portion) of the predicates included in triples in the knowledge store . These predicates may be displayed to a user.","Query entry field  provides a user with one or more entry fields to populate (or provide an entry for) in order to generate a SPARQL query. Query entry field  includes a subject entry field , a predicate entry field , and an object entry field . In one embodiment, subject entry field and object entry field may be populated with classes listed in class window portion , classes listed in basket window portion , instances listed in basket window portion , or text entries listed in basket window portion . As such, both subject entry field and object entry field may be populated with either a class (such as \u201cAviation:Aircraft\u201d), an instance (such as \u201cAviation:Aircraft_N11BV\u201d), or a text entry (such as \u201c?o\u201d). Predicate entry field may be populated with predicates listed in predicate window portion , predicates listed in basket window portion , or text entries listed in basket window portion . As such, predicate entry field may be populated with either a predicate (such as \u201chas aircraft-type description\u201d) or a text entry (such as \u201c?b\u201d).","Subject entry field , predicate entry field , and\/or object entry field may be populated using a drag-and-drop selection technique. The drag-and-drop selection technique generally refers to a type of selection technique in which a selectable entry (such as a class, instance, predicate, or text entry) displayed in a first portion of a window (such as class window portion , predicate window portion , and\/or basket window portion ) is selected; the selected entry is dragged to a second portion of the window (such as subject entry field , predicate entry field and\/or object entry field ); and the selected entry is dropped into the second portion of the window. In one embodiment, this drag-and-drop selection technique may cause the selected entry to be received at the second portion, and may further cause the second portion to be populated by the selected entry. In one embodiment, the drag-and-drop selection technique may be performed by a user using a \u201cdragging\u201d motion with a mouse coupled to user computer .","Although the drag-and-drop selection technique has been described as dragging and dropping a selected entry from a first portion of a window to a second portion of a window, in particular embodiments, the drop-and-drag technique may include dragging and dropping selected entries from a first window to a second window. For example, the selected entry may be listed in an entirely different window than the window to which the selected entry is dragged and dropped. In one embodiment, this may allow a user to have multiple windows open, and further allow the user to drag-and-drop entries from one window to the next.","Certain embodiments incorporating the drag-and-drop selection technique may provide advantages in that subject entry field , predicate entry field , and object entry field may be populated with classes, predicates, and\/or text entries in a relatively easy and ergonomic manner. In particular embodiments, this may reduce the amount of typing that the user has to do and may eliminate some typing errors.","In certain embodiments, query entry field  may allow a user to build a SPARQL query by incrementally building the triple statements that make up the query. For example the user can use the drag-and-drop selection technique to incrementally populate each of the subject entry field , the predicate entry field , and the object entry field ","Query entry field  displays the elements of the query as the query is being built. Furthermore, query entry field  further allows a user to select and edit individual elements. For example, once one of the entry fields (such as subject entry field ) is populated, the user may select the entry populating the entry field, and may edit the entry. For example, if the subject entry field is populated with the instance \u201cAviation:Aircraft_N11BV,\u201d the user may select this instance in subject entry field and edit it. This may allow the user to modify the entered instance to be a different instance. For example, in one embodiment, basket window portion  may not include a particular instance that the user may want to include in a SPARQL query. As such, the user may drag-and-drop an instance that is textually similar to the particular instance that the user wants. After the instance has been dragged and dropped into the subject entry field , the user may then edit the instance to be the particular instance that the user wanted originally. For example, the instance \u201cAviation:Aircraft_N11BV\u201d may be edited to be \u201cAviation:Aircraft_N442PN.\u201d","Query entry field  may further allow the user to add a SPARQL filter to a SPARQL query. For example, the user may want to filter results of the SPARQL query to include only results that fall within a particular filter type, such as a date range, name, material, weight, or any other suitable filter type. After the user enters the SPARQL filter to query entry field , a SPARQL query that includes the entered filter may be generated.","Query entry field  may further allow a user to create a SPARQL query having multiple query statements. For example, after populating a subject, predicate and object for a first SPARQL query statement, the user may actuate the \u201cadd phrase\u201d button in the query entry field  so as to add additional SPARQL query statements. This may allow a SPARQL query to be generated which includes multiple query statements.","Output window portion  provides a user with various options associated with the SPARQL query to be generated. According to the illustrated embodiment, output portion window  includes an edit filters tab , query view tab , a graph view tab , a saved queries tab , a select results tab , a construct results tab , and an export query tab ","The edit filters tab allows a user to further edit the SPARQL query. For example, when the edit filters tab is actuated, output window portion  may allow a user may modify the entries to be used as the subject, predicate, object, and filter of the SPARQL query. As a further example, when the edit filters tab is actuated, output window portion  includes a query type selector . The query type selector allows the user to select the type of SPARQL query to be generated. For example, the user may select any suitable type of SPARQL query, such as a SPARQL \u201cselect\u201d query or a SPARQL \u201cconstruct\u201d query. A SPARQL select query requests results to the query. For example, when a SPARQL select query is generated and transmitted to knowledge store , results of that SPARQL select query may be received and displayed to the user at user computer  (such as in a tabular format as is illustrated in ). On the other hand, a SPARQL construct query may be used to not only request results of the query, but also to produce inferred triples in knowledge store . In one embodiment, a rule may refer to any statement that may cause knowledge store  to infer and store additional triples. One example of a rule may be that \u201can entity is vulnerable to a bombing effect if the entity is a facility.\u201d In one embodiment, by creating a SPARQL construct query, a user may be able to add data to knowledge store .","In one embodiment, the SPARQL construct query may include both a rule head (which includes the triples to be added) and a rule body (which includes the query statements that must be met). For example, consider the rule \u201can entity is vulnerable to a bombing effect if the entity is a facility.\u201d The head provides the triple(s) to be added to knowledge store  (the triple \u201can entity is vulnerable to a bombing effect\u201d) and the rule body indicates which triples in knowledge store  apply to the rule to (such as indicating that the rule is to apply to triples that include \u201c?entity\u201d as a subject, \u201cis a\u201d as a predicate, and \u201cfacility\u201d as an object). In order to create a SPARQL construct query, the user may select a construct query type, enter a head that includes the desired triples to be added (using subject entry field , predicate entry field , and object entry field ), and also by entering a rule body subject, predicate, and object (using subject entry field , predicate entry field , and object entry field ). In particular embodiments, the drag-and-drop selection technique may be used to add the head and rule body.","In one embodiment, not only will the SPARQL construct query add data to knowledge store , but the SPARQL construct query may also return results of the SPARQL construct query. For example, after the SPARQL construct query is transmitted to knowledge store , output portion window  may display the results of the SPARQL construct query in a graph form (as is illustrated in ).",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 4","b":["40","86","86","86"],"i":["b","b"]},"When the query view tab is actuated, output window portion  includes a run query button , a run in hyperbolic browser button , a run as rule now button , an export results button , and a clear query button . The run query button  may be actuated to instruct query builder engine  to transmit the generated SPARQL query to knowledge store . The run in hyperbolic browser button  may be actuated to transmit the generated SPARQL query to knowledge store  and receive the results of the generated SPARQL query in a hyperbolic browser (such as a hyperbolic browser implemented in JAVA) so as to display the results in a graph form (as is described in further detail in ). The run as rule now button  may be actuated to transmit a generated SPARQL query to knowledge store  as a SPARQL construct query. As such, the rule may add inferred triples to knowledge store . The export results button  may be actuated to transmit the generated SPARQL query to knowledge store  and export the results of the generated SPARQL query. In one embodiment, exporting the results of the SPARQL query may cause the results to be formatted in any suitable format. For example, the results may be formatted according to an extensible markup language (XML) format, or according to comma separated values (CSV). In other embodiments, the results may be formatted in any other suitable format. The clear query button  may be actuated in order to delete the generated SPARQL query.","As is discussed above, the run query button , the run in hyperbolic browser button , the run as rule now button , and the export results button  may cause the generated SPARQL query to be transmitted to knowledge store  in order to retrieve results of the SPARQL query. In one embodiment, the transmission of the SPARQL query may occur immediately upon selecting to transmit the SPARQL query. In a further embodiment, the transmission of the generated SPARQL query may be scheduled for another time. For example, the transmission of the SPARQL query may be scheduled to occur in an hour, a day, a week, or any other suitable time frame. As a further example, the transmission of the generated SPARQL query may be scheduled to occur at periodic intervals, such as every hour, every week, every month, or any other suitable time frame. As such, the same generated SPARQL query may be run periodically without further input by the user. This may allow the results of the generated SPARQL query to be continuously updated as new data is added to knowledge store .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","b":["86","86","86","110","110","42","110","110","114","118","122","114","42","118","42","122","42","110","42"],"i":"c"},"Although  has been described as displaying graph  in output window portion , in a further embodiment, graph  may be displayed in a different window than output window portion . For example, actuation of the graph view tab may cause a new window to open and display graph . In particular embodiments, the new window may be associated with a hyperbolic browser. For example, graph  may be displayed in the hyperbolic browser.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 6","FIG. 3"],"b":["86","86","86","34","86","86"],"i":["d","d","d. "]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 7","FIG. 5"],"b":["86","86","86","86","86"],"i":["e","e","e"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 8","b":["86","86","86","42"],"i":["f","f"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 9","b":["86","86","126","130"],"i":"g"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 10","FIG. 1"],"b":"42"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 11","FIG. 1"],"b":["200","34"]},"At step  the method begins. At step  a knowledge store is accessed. The knowledge store (such as knowledge store  of ) may store records structured according to a RDF specification. Furthermore, each record stored in the knowledge store  may include a subject, a predicate, and an object.","At step , initial display data is displayed on a user interface. In one embodiment, the initial display data may include any particular combination of a plurality of classes, a plurality of instances, a plurality of predicates, and a plurality of text entries. For example, the initial display data may include only a single class (or instance, or predicate, or text entry), or all of the classes, instances, predicates, and\/or text entries. In one embodiment, the user interface displaying the initial display data may be a GUI (such as query building window  of ). In particular embodiments, displaying the initial display data on the user interface may refer to generating the initial display data to be displayed on a user interface. For example, in one embodiment, the initial display data may be generated by query building engine  executed on query building system , and the generated initial display data may be communicated to user computer  for display to a user on the user interface.","At step , a first entry is received at a subject query entry field. In one embodiment, the first entry may be received based on a drag-and-drop selection technique. In one embodiment, the first entry may include a class, an instance, or a text entry.","At step , a second entry is received at a predicate query entry field. In one embodiment, the second entry may be received based on a drag-and-drop selection technique. In one embodiment, the second entry may include a predicate or a text entry.","At step , a third entry is received at an object query entry field. In one embodiment, the third entry may be received based on a drag-and-drop selection technique. In one embodiment, the third entry may include a class, an instance, or a text entry. In particular embodiments, steps - may be repeated in order to generate additional query statements.","At step , a SPARQL query is generated. In one embodiment, the SPARQL query may be generated in any suitable manner. For example, the SPARQL query may be generated using one or more of the first entry, the second entry, and the third entry. In a further embodiment, the SPARQL query may be generated using SPARQL statement data stored in memory. For example, each of the classes, instances, predicates, and text entries may be associated with SPARQL statement data that includes any data necessary to create a SPARQL query based on the classes, instances, predicates, and\/or text entries.","In one embodiment, prior to the SPARQL query being generated, one or more edits to the first entry, second entry, and\/or third entry may be received from a user. For example, a user may type in one or more edits to the entries. As such, the SPARQL query may be generated with the edits. In a further embodiment, prior to the generation of the SPARQL query, a rule may be received. In one embodiment, a rule may refer to any suitable rule that may cause a knowledge store to add data for storage. For example, the rule may cause the knowledge store infer additional records (such as additional inferred triples). In one embodiment, by adding the rule, the SPARQL query may be generated as a SPARQL construct query configured to cause the knowledge store to add the inferred records due to the firing of the rule to the knowledge store. In a further embodiment, after the SPARQL query is generated, one or more edits to the generated SPARQL query may be received. For example, a user may type in one or more edits to the SPARQL query. As such, the generated SPARQL query may be changed prior to being transmitted to the knowledge store.","At step , the generated SPARQL query is transmitted to the knowledge store. In one embodiment, the generated SPARQL query may be transmitted over a network to the knowledge store. In one embodiment, the generated SPARQL query may be transmitted using any suitable protocol.","At step , return results are displayed on the user interface. In one embodiment, the return results may be the results of the transmitted SPARQL query. In one embodiment, the return results may be displayed in a tabular format. In a further embodiment, the return results may be displayed in a graphical format, such as by a hyperbolic browser. In a further embodiment, displaying the return results on the user interface may refer to generating return results data for display on the user interface. For example, in one embodiment, the return results data may be generated by query building engine  executed on query building system , and the generated return results data may be communicated to user computer  for display to a user on the user interface.","In one embodiment, after the return results are displayed, the method may further include receiving a selection of one of the return results. Based on this selection, the method may further include displaying one or more of the return results as a graph, such as in a hyperbolic browser. In such an embodiment, the graph may include the selected result as a starting node in the graph. At step , the method ends.","Although the present disclosure describes or illustrates particular operations as occurring in a particular order, the present disclosure contemplates any suitable operations occurring in any suitable order. Moreover, the present disclosure contemplates any suitable operations being repeated one or more times in any suitable order. Although the present disclosure describes or illustrates particular operations as occurring in sequence, the present disclosure contemplates any suitable operations occurring at substantially the same time, where appropriate. Any suitable operation or sequence of operations described or illustrated herein may be interrupted, suspended, or otherwise controlled by another process, such as an operating system or kernel, where appropriate. The acts can operate in an operating system environment or as stand-alone routines occupying all or a substantial part of the system processing.","Although the present disclosure has been described with several embodiments, a myriad of changes, variations, alterations, transformations, and modifications may be suggested to one skilled in the art, and it is intended that the present disclosure encompass such changes, variations, alterations, transformation, and modifications as they fall within the scope of the appended claims.","To aid the Patent Office and any readers of any patent issued on this application and interpreting the claims appended hereto, Applicants wish to note that they do not intend any of the appended claims to invoke Paragraph 6 of 35 U.S.C. \u00a7112 as it exists on the date of filing hereof unless \u201cmeans for\u201d or \u201cstep for\u201d are used in the particular claim."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete understanding of embodiments of the disclosure will be apparent from the detailed description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
