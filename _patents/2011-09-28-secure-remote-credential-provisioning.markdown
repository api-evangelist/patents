---
title: Secure remote credential provisioning
abstract: An embodiment uses hardware secrets secured within a security engine to provide a secure solution for field key provisioning. An embodiment is operating system independent due to the out-of-band communications with the security engine. Secrets need not be provisioned during manufacturing time. An embodiment may ensure only security engine specific provisioned secrets are used at runtime. Other embodiments are addressed herein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645677&OS=08645677&RS=08645677
owner: Intel Corporation
number: 08645677
owner_city: Santa Clara
owner_country: US
publication_date: 20110928
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["System-on-a-chip (SoC) platforms are used in many different devices such as digital televisions, set-top boxes that provide programming to televisions, Smartphones, tablets, laptops, netbooks, internet application delivery platforms, and the like. Many of these devices have multimedia applications that involve premium content delivery (e.g., streaming) to the platform. In order to protect the premium content different Digital Rights Management (DRM) technologies are used. These DRM and conditional access (CA) technologies require certain confidential credential material (e.g., keys, certificates) to be provisioned on these platforms.","However, not all keying material can be provisioned on platforms during manufacturing. To do so is both expensive and inflexible given the nature of downloadable applications in these devices. For example, existing DRMs are often updated or replaced by new ones, or require key re-provisioning due to compromised keys. Thus, field credential provisioning is required but doing so, in a secure manner, is difficult. For example, field provisioning using only software-based security measures leaves the process exposed to security breaches (e.g., malware, snooping, and the like).","In the following description, numerous specific details are set forth but embodiments of the invention may be practiced without these specific details. Well-known circuits, structures and techniques have not been shown in detail to avoid obscuring an understanding of this description. \u201cAn embodiment\u201d, \u201cvarious embodiments\u201d and the like indicate embodiment(s) so described may include particular features, structures, or characteristics, but not every embodiment necessarily includes the particular features, structures, or characteristics. Some embodiments may have some, all, or none of the features described for other embodiments. \u201cFirst\u201d, \u201csecond\u201d, \u201cthird\u201d and the like describe a common object and indicate different instances of like objects are being referred to. Such adjectives do not imply objects so described must be in a given sequence, either temporally, spatially, in ranking, or in any other manner. \u201cConnected\u201d may indicate elements are in direct physical or electrical contact with each other and \u201ccoupled\u201d may indicate elements co-operate or interact with each other, but they may or may not be in direct physical or electrical contact. Also, while similar or same numbers may be used to designate same or similar parts in different figures, doing so does not mean all figures including similar or same numbers constitute a single or same embodiment.","An embodiment securely provisions confidential keying material related to DRMs or CAs into platforms (e.g., SoC). In doing so, the embodiment provides platform-specific, and even SoC-specific, provisioning of credentials (e.g., credentials, keys) to a platform, and even a SoC included in the platform, which has a secret root-of-trust that is unknown to a provider, such as a provider of encrypted data. This provisioning is secure and may occur when the device is in the field (i.e., after it has left the trusted manufacturing environment). An embodiment creates protected key records to be included in an update and robustly integrated with DRMs (and other software) running on platforms already deployed in the field.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":"105"},"The OEM_Seed may be based on certain fuses blown in the security engine. The blown fuses may represent an OEM or vendor identifier (e.g., Vendor ID). The OEM_Seed may be provided to the OEM from the security module manufacturer. The OEM_Seed is unique to the OEM. For example, there may be one OEM_Seed for a producer of television programming. That same producer may have another OEM_Seed for movie programming to be delivered to the same security engine. As addressed further below, the OEM_Seed may be a Global Key Encryption Key (GKEK) which is unique per OEM and per hardware stock keeping unit (SKU). The key is global for all the OEM platforms with that SKU. For example, there may be one key for all set top boxes made by a certain manufacturer. Thus, there may be several OEM_Seeds for various SKUs of the producer. This OEM_Seed provides a hardware-based root of trust (e.g., hardware-based on the fuses within the security engine) that can be used to encrypt other secrets or keying material, such as credentials from an independent software vendor (ISV) or OEM. Thus, the OEM_Seed helps form a chain of trust that extends to the above mentioned secrets (e.g., keys that are wrapped by the OEM_Seed).","The OEM_Seed may be generated within the security engine using various techniques, such as using a key generator located within the security engine. For example, in one embodiment the OEM_Seed may be generated via the key generator as follows: OEM_Seed=AES-128D(FW SEED (key), ROM_CONST(64-bits)\u2225fuse_status0\u2225fuse_status1 [OEM-Encryption Key\u2225OEM-Signature Key]=SHA256(FW OEM SEED). Thus, identifiers such as fuses within the security engine may be used to produce the OEM_Seed. In an embodiment the OEM_Seed may be based on Vendor ID, which relies on security engine fuses set by the security engine manufacturer. Thus, the OEM_Seed may be a derived secret that is derived from hardware secrets included in the platform's security engine.","In an embodiment, the security engine firmware image used to generate the OEM_Seed may be the same for all platforms (e.g., all digital televisions of a certain model). However, the different unique values for each OEM_Seed and each security engine may be based on the different fuse settings (e.g., Vendor ID) for each security engine. The firmware image does not need to change for each OEM.","Thus, in an embodiment there is a symmetric secret (OEM_Seed) shared between an OEM and a platform's security engine. The OEM_Seed is unique per OEM (per SKU). The OEM_Seed may be stored within the security engine. This OEM_Seed may be securely provided to the OEM by, for example, the security engine manufacturer. The OEM may then use the OEM_Seed as, for example, a GKEK (OEM_GKEK) as described further below. The global key is used to, for example, wrap or encrypt other keys. Such other keys may pertain to decrypted video or audio data associated with a television show or movie.","Returning to , as mentioned above block  includes providing an OEM_Seed to an OEM. Thus, at such at time the OEM_Seed, generated within the security engine of the platform (e.g., set top box) is now \u201cshared\u201d. Specifically, in an embodiment a first instantiation or instance of the OEM_Seed is located with the OEM and a second instantiation or instance of the OEM_Seed is stored in the security engine included on the platform.","In block  the remotely located provider (e.g., OEM, ISV, customer\u2014all remotely located from a platform located in the field) gains a tool to wrap provisioning material (e.g., keys for decrypting audio or visual data) with the OEM_Seed. In block  this provisioning material is collected. The material may be collected from an ISV and the like. In block  the credential material, along with the OEM_Seed, are both input into the wrapping tool to generate a container wrapped with the OEM_Seed. The container will be securely delivered to the platform where only the proper platform, itself including an OEM_Seed and the proper identifier (e.g., fuse-based Vendor ID), can decrypt the credential materials. Thus, there is unique keying material for each platform based on the security engine-specific OEM_Seed.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2","b":"205"},"In block  the platform receives the credential container from the remotely located provider (e.g., OEM). See  for details regarding the container preparation. In block  the platform provisions OEM\/ISV keys from the key container into the security engine. This may be done using the security engine application programming interface (APIs). Specifically, the now decrypted OEM_Seed located within the security engine is used to decrypt the container (e.g., via a decryption engine included in the security engine) and access the container credentials\u2014all within the secure confines of the security engine.","Block  determines whether credential provisioning was successful. If not, the process may repeat and return to block  or possibly abort and end the provisioning process. However, if provisioning is successful then in block  the provisioned credentials may be wrapped, via an encryption engine included in the security engine, with on chip secrets (e.g., wrapped with secrets based on Vendor ID embedded in the security chip). Once wrapped the credentials may be securely stored within the security engine or elsewhere on the platform. In one embodiment, keys are uniquely wrapped with on-chip secrets and stored in non-volatile memory (e.g., flash memory) located on the platform. Thus, at this time the security engine and associated software utilities (e.g., APIs) have converted the OEM_Seed encrypted security data payload (e.g., binary large object (BLOB) including encryption keys) to a security engine specific provisioned payload that may no longer need to be encrypted with the OEM_Seed but may instead be decrypted\/encrypted with other secrets tied to the security engine hardware on a per chip\/platform basis (e.g., a \u201cchip unique secret\u201d with, possibly, other fuse settings for additional secrets to those necessarily associated with the OEM_Seed).","Furthermore, the container received from the remote provider may be destroyed, thereby ensuring the short lived nature of the container helps promote security by decreasing the amount of time secrets are exposed (to any extent) to hostile environments.","In block  when cryptographic operations are needed (e.g., possibly days or weeks later after the platform has been rebooted numerous times) the encrypted keys may be loaded back into the secure engine. For example, at a later date when encrypted content is to be viewed on the digital television the keys necessary to decrypt the content may be reloaded back into the security engine to commence decrypting the data. This reloading may be facilitated using various APIs associated with the security engine. The reloading is hidden from host software (e.g., operating system) operating on another processor out-of-band with the security engine.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 2"],"b":["300","200","300","200","300"]},"Thus, in block  the private key of the OEM_Seed asymmetric key pair is downloaded, in encrypted (i.e., wrapped) form, from a location on the platform (e.g., any of various memory locations) and into the security engine, where it is then decrypted in a secure environment that is out-of-band from the platform processor running, for example, an operating system.","In block  the platform receives the credential container from the remotely located provider (e.g., OEM). Unlike method , the OEM_Seed is now wrapped with the public key of the OEM_Seed asymmetric key pair.","In block , the security engine includes a hash of, for example, the public key of the OEM_Seed asymmetric key pair. The OEM may have an OEM trusted boot public key. Regarding the container received in block , during the container preparation phase the OEM can generate the key container using the public key of the OEM_Seed asymmetric key pair. The OEM may also sign the entire key container with its trusted boot private key. The OEM will also include its trusted boot public key, along with the signed key container package, using a digital certificate. During the upgrade process , the security engine can validate the OEM Trusted boot public key using the hash of the key. The hash may be located in fuses on the security engine (block ). Once this is validated (block ), the OEM signature on the key container can be validated using the Trusted boot public key (block ).","After blocks ,  (return error if verification fails), ,  (return error if verification fails), block  commences where the platform provisions OEM\/ISV keys from the key container into the security engine. This may be done using a security engine API. Specifically, the now decrypted private OEM_Seed located within the security engine is used to decrypt the container and access the container credentials\u2014all within the secure confines of the security engine.","Block  determines whether credential provisioning was successful. If not, the process may repeat and return to block  or possibly abort and end the provisioning process. However, if provisioning is successful in block  the provisioned credentials may be wrapped with on chip secrets (e.g., wrapped with secrets based on Vendor ID embedded in the security chip). Once wrapped the credentials may be securely stored within the security engine or elsewhere on the platform. In one embodiment, keys are uniquely wrapped with on-chip secrets and stored in non-volatile memory (e.g., flash memory) located on the platform. Furthermore, the container received from the remote container may be destroyed, thereby ensuring the short lived nature of the container helps promote security by decreasing the amount of time secrets are exposed (to any extent) to hostile environments.","In block  when cryptographic operations are again needed the encrypted keys may be loaded back into the secure engine. For example, at a later date when encrypted content is to be viewed on the digital television the keys necessary to decrypt the content may be reloaded back into the security engine to commence decrypting the data. This reloading may be facilitated using various APIs associated with the security engine\u2014all hidden from host software (e.g., operating system) operating on another processor out-of-band with the security engine.","Thus, conventional methods provision security data\/keys to the platform only during the platform manufacturing process. In some cases, secret data\/keys are only protected via cryptographic software methods for provisioning platforms that have already left secure manufacturing environments and now reside in the field. Some situations even allow for limited quantities of secret data\/keys to be provisioned directly into one-time programmable on-die nonvolatile memory (if sufficient space has been reserved). However, embodiments discussed herein may use firmware and\/or hardware secrets secured within a security engine to provide a secure and robust solution for field key provisioning. Embodiments may be host operating system and\/or software independent due to the out-of-band communications with the security engine. Secrets need not be provisioned during manufacturing time. Also, embodiments may provide a generic and extensible mechanism that can be used for provisioning multiple DRM or CA secrets in field. Also, embodiments are renewable after field deployment. Further, embodiments may block the unauthorized use of the platform provisioned secret data\/keys and may ensure only SOC specific (e.g., security engine specific) provisioned secrets are used at runtime. Also, embodiments do not require knowledge of the SOC specific provisioning secrets to pre-provision the security data\/keys at the platform manufacturer. This ability to \u201cnot know\u201d the SOC specific secrets may be advantageous when the platform manufacturer does not have access or rights to that information.","An embodiment includes an article with instructions that when executed enable a system to: (a) receive a security credential (e.g., key for decrypting encrypted audio or video data), wrapped with a first instantiation of a first key (e.g., OEM_Seed), from a remotely located provider (e.g., an ISV or OEM); (b) decrypt the credential within a hardware security engine (e.g., a secure cryptoprocessor), using a second instantiation of the first key, which is out-of-band (e.g., may run invisibly to and independent of the system operating system) from a processor that runs an operating system for the system; and (c) wrap the credential based on an identifier permanently embedded in hardware included in the security engine; wherein (a) the first key is based on the identifier, and (b) the credential is received via an out-of-band communication. The security engine may include a root-of-trust unknown to the remotely located provider. For example, the root-of-trust may be based on blown fuses in the security engine, all of which is unknown to an ISV that produces keys to be field provisioned. The identifier may be based on blown fuses located in the security engine. The system may wrap the second instantiation of the first key based on the identifier; and store the wrapped second instantiation of the first key outside the security engine but within a platform that includes the security engine (e.g., in flash memory). The system may store the wrapped credential outside the security engine but within a platform that includes the security engine (e.g., in flash memory); receive the wrapped credential previously stored outside the security engine but within the platform; decrypt the wrapped credential based on the identifier; and decrypt video data based on the decrypted credential. The system may destroy a container before rebooting the system, wherein the credential was included in the container when the credential was received from the remotely located provider. The (a) the first and second instantiations of the first key may both be derived from the identifier, and (b) the identifier may be unique to the security engine.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4","FIG. 4"],"b":["500","570","580","550","570","580","570","580","532","534","570","580","590","590"]},"Chipset  may include a security engine or cryptographic processor  that includes, for example, RSA accelerators, encryption engine  and decryption engine , random number generators, keys , certificates , platform configuration registers (PCRs)  (a Trusted Platform Module register storing platform configuration measurements), ID fuses  (e.g., Vendor ID), and the like. Keys  may include endorsement keys, attestation keys, OEM_Seed. Key generator  may be included for creating keys like the OEM_Seed and the like. Again, details regarding one example of such a chipset are available at least at: http:\/\/www*intel*com\/design\/mobile\/platform\/downloads\/Trusted_Platform_Module_White_Paper*pdf. Embodiments are not limited to working with any one type of security engine or cryptographic processor.","Furthermore, chipset  may be coupled to a first bus  via an interface. Various input\/output (I\/O) devices  may be coupled to first bus , along with a bus bridge , which couples first bus  to a second bus . Various devices may be coupled to second bus  including, for example, a keyboard\/mouse , communication devices , and data storage unit  such as a disk drive or other mass storage device, which may include code , in one embodiment. Further, an audio I\/O  may be coupled to second bus . While P-P interfaces are used in the above example, embodiments are not so limited and may include other direct and\/or indirect interface methods.","Embodiments may be implemented in code and may be stored on a storage medium having stored thereon instructions which can be used to program a system to perform the instructions. The storage medium may include, but is not limited to, any type of disk including floppy disks, optical disks, optical disks, solid state drives (SSDs), compact disk read-only memories (CD-ROMs), compact disk rewritables (CD-RWs), and magneto-optical disks, semiconductor devices such as read-only memories (ROMs), random access memories (RAMs) such as dynamic random access memories (DRAMs), static random access memories (SRAMs), erasable programmable read-only memories (EPROMs), flash memories, electrically erasable programmable read-only memories (EEPROMs), magnetic or optical cards, or any other type of media suitable for storing electronic instructions. Embodiments of the invention may be described herein with reference to data such as instructions, functions, procedures, data structures, application programs, configuration settings, code, and the like. When the data is accessed by a machine, the machine may respond by performing tasks, defining abstract data types, establishing low-level hardware contexts, and\/or performing other operations, as described in greater detail herein. The data may be stored in volatile and\/or non-volatile data storage. The terms \u201ccode\u201d or \u201cprogram\u201d cover a broad range of components and constructs, including applications, drivers, processes, routines, methods, modules, and subprograms and may refer to any collection of instructions which, when executed by a processing system, performs a desired operation or operations. In addition, alternative embodiments may include processes that use fewer than all of the disclosed operations, processes that use additional operations, processes that use the same operations in a different sequence, and processes in which the individual operations disclosed herein are combined, subdivided, or otherwise altered. Components or modules may be combined or separated as desired, and may be positioned in one or more portions of a device.","While the present invention has been described with respect to a limited number of embodiments, those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Features and advantages of embodiments of the present invention will become apparent from the appended claims, the following detailed description of one or more example embodiments, and the corresponding figures, in which:",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
