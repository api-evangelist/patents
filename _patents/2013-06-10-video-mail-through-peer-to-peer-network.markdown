---
title: Video mail through peer to peer network
abstract: A system and method to record a message to be transmitted to a recipient user is disclosed herein. In some embodiments, the method includes executing a graphical user interface (GUI) on a first computer system allowing a first user to generate a message through selection of a particular GUI element, wherein the message may comprise audio and video content. The method may further include recording the audio and video data in response to the user selecting the particular GUI element. The audio and video data may be subsequently encoded using a video encoding protocol to generate the message. The method may further include transmitting the message to second computer system of a recipient user, wherein the recipient user is identified by the user generating the message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09363215&OS=09363215&RS=09363215
owner: PayPal, Inc.
number: 09363215
owner_city: San Jose
owner_country: US
publication_date: 20130610
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. patent application Ser. No. 11\/618,225, filed on Dec. 29, 2006, titled \u201cVideo Mail through Peer to Peer Network,\u201d which is incorporated herein in its entirety.","The present application relates generally to the technical field of multimedia applications and, in one specific example, the use of a peer to peer network to facilitate video mail delivery.","Peer to peer networks come in variety of different forms. Different than computer systems configured in a server-client arrangement, where files are all centrally located, computer systems configured in a peer to peer arrangement have file systems that are distributed. The files contained in these file systems include audio\/video files formatted using, for example, the Motion Picture Experts Group (MPEG) format.","Example methods and systems to facilitate video mail in a peer to peer network are described. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of example embodiments. It will be evident, however, to one skilled in the art that the present invention may be practiced without these specific details.","One of the most popular peer to peer networks is made up of roughly three types of computer systems: an ordinary host node, a super node, and a login server. For every ordinary host node, there is a super node also known as a group leader. A peer to peer application resides on every ordinary host node and super node, allowing for one to login to the peer to peer network and to communicate with other ordinary host nodes.","When an ordinary host node (e.g., a peer) connects to the peer to peer network, the peer is assigned to one of the group leaders. After learning the Internet Protocol (IP) address of its group leader, the peer contacts its leader and informs the leader of all the content (e.g., audio\/video files) it is prepared to exchange. The group leader maintains a data store, mapping names of content to IP addresses, for all of the peers that have been assigned to its group. In this way, each group becomes a mini peer to peer (P2P) file exchange system. Importantly, a group leader's data store tracks only the content within its group. A group leader is also a peer.","When a peer, say Alice, wants to find the locations of a particular object, it sends a message to its group leader. The group leader responds to Alice with a list of peers in its group that have the object. The group leader may also contact other group leaders, and ask them to send Alice the list of their peers that have the object. In this manner, by receiving lists from many group leaders, Alice obtains the IP addresses of many peers that have the desired object.","The peers and their communication relationships form an abstract, logical network called an overlay network. In graph-theoretic terms, the nodes in the overlay network are the peers; there is an edge between each peer and its group leader; and there is an edge between each pair of group leaders that directly communicate (e.g., they send messages to each other). Note that these edges are not physical communications links, but instead virtual links between peers. For example, even if a peer and its group leader are in different Internet Service Providers (ISPs) on different continents, they are directly connected by an edge in the overlay network and are therefore virtual neighbors in the overlay network.","Because peers are connecting and disconnecting all the time, including group leader peers, the overlay network is evolving and highly dynamic. In order for any peer to join an overlay network, it must establish at least one edge between itself and some other peer already in the network; that is, it must learn the IP address of some other peer in the network. To this end, the P2P file exchange system must have a bootstrapping node or multiple bootstrapping modes. When a peer wants to join the network, it first contacts the bootstrapping node. The bootstrapping node responds with the IP address of one of the group leaders, and the peer then establishes an edge with that group leader. Furthermore, when the peer initially contacts the bootstrapping node, the bootstrapping node can designate the peer as a new group leader. If a peer is a group leader, it needs to know the IP addresses of some, or all, of the other group leaders. It obtains this information as well from the bootstrapping node. Because the bootstrapping nodes are \u201calways on\u201d servers, peers can use Domain Name System (DNS) to locate them.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1","FIG. 1"],"b":["100","101","102","103","115","114","113","106","107","108","109","110","111","116","100","104","105","117","112","121","100","120","100"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["200","201","102","106","201","121","104","104","104","201","104","201","121","105","106","105","201","106","201","105","106","102","106"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["300","201","301","302","306","201","201","102","106","306","305","308","308","303","304","307","102","104","106","105","117","121","308","201","307"]},"A Three-Tier Architecture","In some embodiments, one implementation may be as a distributed or non-distributed software application designed under a three-tier software architecture paradigm, whereby the various modules of computer code that make up the one implementation can be categorized as belonging to one or more of these tiers. A three-tier architecture is well known in the art. The first tier is an interface level that is relatively free of application processing. The second tier is a logic level that performs processing in the form of logical\/mathematical manipulations (Logical Manipulations) of data inputted through the interface level, and communicates the results of these Logical manipulations with the Interface and\/or backend or storage level. Some example embodiments may include these Logical Manipulations relating to certain business rules or tasks that govern the application as a whole. These logical manipulations and associated business rules are used to initiate an audio\/video session across a peer to peer network, generate a media stream, and save this media stream as a video mail message. The third tier or storage level is a permanent storage medium or, in some example embodiments, may include non-permanent storage medium. One or more of these tiers may be collapsed into one another, resulting in a two-tier architecture or one-tier architecture. For example, the Interface and logic levels may be consolidated, or the Logic and storage level may be consolidated, as in the case of an application with an embedded database. This three-tier architecture may be implemented using one technology, or as will be discussed below, a variety of technologies. These technologies may include one or more object-oriented programming languages such as, for example, JAVA\u2122, C++, DELPHI\u2122, C#\u2122, or the like. Additionally, structured programming languages such as, for example, C may also be used. Moreover, scripting languages such as, for example, Perl, Python, PHP, JavaScript or VBScript may also be used. This three-tier architecture, and the technologies through which it is implemented can be implemented in two or more computers organized in a server-client relationship, as is well known in the art, such that an interface level resides on a client computer, whereas a logic level resides on the application server (see below) and the storage level resides on a database server (see below). As will be discussed more fully below, in such a relationship these three tiers can be implemented as various software components that communicate via distributed programming protocols. Some example embodiments may include these three tiers being implemented in a peer-to-peer configuration, or some other suitable file exchange paradigm, such that all three tiers reside on one or more computers and each computer retrieves files and data from one another. Peer to peer configurations are well known in the art.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","b":["400","102","303","401","201","402","403","404","308","405","406","201"]},"The second stream of the dual stream flowchart illustrates the actual sending of data. Described are various modules residing on the previously mentioned ordinary host node . These modules include a module  that facilitates the recording of the audio and video message via capturing such data using the camera  and microphone . This captured data is then encapsulated via the module  using one of the aforementioned protocols such as MPEG and sent as a media stream . Additional protocols utilized in the encapsulation process may include a Real-time Transfer Protocol (RTP), a User Datagram Protocol (UDP), and an Internet Protocol (IP). Once encapsulated, and transmitted via the module , the media stream  is sent to, for example, an ordinary host node . Upon receipt at the ordinary host node , a module  receives, parses and decodes the media stream  for the purposes of storing the media stream or data as a video mail message. Once received, a decisional module  determines whether or not the storage of the video mail message has been successful. This decisional module  determines, for example, whether or not the storage has failed. If no failure has occurred, then a module  stores the media stream to a native database . If a failure has occurred, a failure message  is sent to a module  which checks for the successful receipt of the media stream . This module  residing, for example, on an ordinary host node , will then send the failure message to a decisional module  which determines whether or not a failure has been received by virtue of receiving a message from the module . If decisional module  determines that a failure message has been received, then a signal will be sent to a module  instructing the module  to interrupt the previously described module , and in effect, interrupt the recording of the message. If, however, a failure message  has not been received, then the decisional module  will deem the recording successful and the module  will continue to receive an audio video data, converting that into a media stream  for future use.","An Interface Level","An example embodiment uses a GUI in conjunction with a peer to peer client application. Some example embodiments may include an Application Programming Interface (API) implemented to allow two or more peer to peer client applications to communicate with one another. This peer to peer client application may reside on a computer system and be part of a peer to peer network as an ordinary host node or a super node. A well-known peer to peer client application is GNUTELLA\u2122 or some other suitable peer to peer client application.","The interface for this peer to peer client application may be implemented, for example, using a Java Applet, or VBScript or C# form. These forms contain objects such as text boxes, buttons, scroll-down bars, widgets, or some other suitable dynamic interface object. These objects, and the routines governing them, allow a user to retrieve, input, or delete content, just to name few of the functions. For example, in some embodiments, Structured Query Language (SQL) calls (see below) are embedded into the code underlying the form such that data can be stored or retrieved from a database automatically, using the form. Some further embodiments may include a user being prompted with a text box into which is entered login information. This text box may reside on the peer to peer client application. Once the login information is provided, it is sent into a login server  for user verification.","In some embodiments, the peer to peer client application utilizes various GUIs and APIs such that a receiver of a video mail message is able to receive the video mail message even where they are not present. A receiver of such a video mail message may be able to receive the message by denoting a non-availability status to the sender, or by informing the sender that they are not available due to the expiration of a certain period of time. With regard to the non-availability status, a receiver may set their status through the use of a displayable icon (e.g., an emoticon), a text message, or other suitable way to put a sender on notice as to their status. A receiver may also be able to set a predetermined time limit during which the receiver is able to respond to an invitation or request for video chat. In cases where this time period expires, the sender may be allowed to leave a video mail message. In some example cases, a receiver may be given 30 seconds, 40 seconds, 60 seconds or some other suitable period of time during which the receiver may respond to the invitation or request for a video chat. This time period may be set by the receiver.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["303","308","501","505","503","504","502"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 6","b":["600","601","505","602","602","301","302","603","604","605","606","607"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7","b":["700","701","702","703","702","703","301","302","704","705","704","705"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 8","b":["800","801","802","803","802","803","301","302","804","805","804"]},"In some embodiments, various video receiver and sender APIs may be implemented to facilitate the creation and delivery of video mail. For example, a video recorder function (e.g., \u201cint videoRecoder(String callerId, CommunicationHandler handler)\u201d) may take an argument in the form of the ID (e.g., handle) of the sender of the video mail, and an argument representing the video mail or media stream  session. Once these arguments are received and processed, a return value such as an integer representing the various levels of success may be returned. For example, a return value of 0 denotes the establishment of a successful session, while \u22121 represents that a caller is not allowed (e.g., prohibited sender), \u22122 represents a failure of disc space on the receiver's computer system, and a \u22123 represents exceeding the maximum number of messages. As described below, additional sub processes or functions are called within this video recorder function.","In some embodiments, a security check function (e.g., \u201cint securityCheck(String callerId)\u201d) is called by the video recorder function such that if the callerId argument is on the allowed list, then a valid value is returned (e.g., 0), or if the callerId is not valid, then an invalid value (e.g., 1) is returned. Some example embodiments may include a reference (i.e., a pointer) to an outgoing message file being returned in those cases where the callerId value is invalid. As described below, this message may be specially tailored for the sender of the video mail message or the initiator of the video mail session.","Moreover, in some example embodiments, a disc space function (e.g., \u201cint discSpaceCheck( )\u201d) is called by the video recorder function and where ample disc space exists, a valid value (e.g., 0) may be returned, and where ample disc space does not exist, an invalid value (e.g., 1) may be returned. The notion of whether the available disc space is ample or not may be based upon certain considerations set by the potential recipient of the video mail message. The actual checking of disc space may be carried out by, for example, checking the current allocated space available on the recipient's computer system against some preset video mail file size value. Alternatively, available disc space may, for example, be determined through reading a configuration setting file (e.g., written\/edited by the installation\/configuration API), and checking it against a local recording status file (e.g., modified by Video Recording API and Video Mail Manager API), wherein the configuration setting file contains the aforementioned predetermined limits, and the local recording status file contains the current disc space usage values. In some embodiments, the configuration setting file and the local recording status file may be written in an Extensible Markup Language (XML), or may be a flat file using delimiters to distinguish data.","For example, in some cases, once the callerId and the disc space are verified, then the media stream  session is initiated such that an acknowledgement of the session is sent to the sender by the receiver so a session may begin. This can be accomplished via a message send function (e.g., \u201cint messageSend(int inviteRecording)\u201d), whereby, for example, a return value of 0 is an acknowledgement by the receiver to initiate a media stream  session, and a return value of 1 denotes that the media session should not be initiated. For example, if sender's response is quitting out, the peer-to-peer client application should release any buffer created to receive the media stream , and the receiving application (e.g., module ) stopped. If the receiver acknowledges the return value and the sender's response is to start recording (see below), then the receiver will start to store the media stream  into a buffer.","Some example embodiments may include a function to receive and store a media stream . For example, a recording function (e.g., \u201cint recording(VideoStream stream)\u201d) may be implemented such that when the media stream  is received from a peer to peer network, a buffer will have been allocated to store this media stream  up to a certain size, and once this size is achieved, the media stream  residing in the buffer will be written to a disc or some other type of permanent storage media. During the course of recording, a checking method will be executed to determine, for example, whether disc space is running out, or if the maximum length of video message has been reached while writing to disc. The recording function will continue to execute until a message is received to stop recording. Once the message is stopped and saved, the above described recording status file will be updated to add number of saved messages, and the status of the message (e.g., new). In some cases, if one of these event occurs (e.g., the disc space is exceeded), then the record function will cease writing to the disc and a message will be sent to the sender that the disc is full or that the maximum length is reached.","In some embodiments, on the sender's side, when the sender receives the invite to initiate the media stream , the user will see a message pop up (e.g., ) with a button (e.g., ) or other screen object or widget to start recording. This is implemented though a caller side video-recording-sender API. In some cases, where the button is executed, a message send function (e.g., \u201cint messageSend(startRecording)\u201d) is executed, and a media stream  sent by a module  and received by a module . This function receives a value denoting the need to start a recording and returns a value denoting the continuing (e.g., 0) or ending (e.g., 1) of a recording. However, if the user chooses to quit, a quit out message will be send through the messageSend function. When user finishes the recording, there may be a button (e.g., ) or other screen object or widget for a user to click to stop recording. Once the button (e.g., ) is clicked, a message of stop recording is sent to module . The logic underlying these various functions and the modules executing this logic is described below.","Logic Level","In some example embodiments, a GUI is implemented using an object oriented programming language such as C++, JAVA\u2122, DELPHI\u2122, C#\u2122 or some other suitable programming language. Some example embodiments may include a structured programming language such as C to implement the logic level. This GUI may be located on a remote computer connected to another computer, in a client-server, peer-to-peer or some other suitable configuration. In some example embodiments, the routine written in, for example, C, will retrieve data from a storage, data structure, or database level. Some example embodiments may include the storage level being run by a separate database application, while in other embodiments a database embedded with a logic level will be implemented. This separate database application will be located remotely on a separate computer system; in other example embodiments, it will be located in the same computer.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 9","b":["401","905","906","907","905","906","907","106","905","106","906","106","907","907","901","102","905","901","904","106"]},"After the decisional module  is executed, a decisional module  residing on an ordinary host node  is executed, wherein a message from the module  is received and a determination made as to whether disc space is available. If disc space is not available, then again the module  is executed, prompting the sender this time that disc space is not available on the ordinary host node . If disc space is determined to be available by the decisional module , then decisional module  residing on an ordinary host node  is executed, wherein the message from the module  is processed to determine whether or not all requisite devices are enabled. If all requisite devices are enabled, then the video mail message process is allowed to proceed. If the decisional module  evaluates to false (e.g., \u201cno\u201d), then again a module  is executed to inform the sender that all requisite devices have not been enabled and that the video mail message could not be sent or left. The use of ordinary host node  and  are merely examples and accordingly other combinations of ordinary host nodes such as, for example,  and ,  and  or some other combination may be used in lieu of the example of  and .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 10","b":["402","1001","601","1001","1002","106","102"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 11","b":["405","1101","106","1101","102","1102","106","1103","1102","1104","1102","1102"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 12","b":["407","1201","301","302","1202","1203","201"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 13","b":["410","1301","1302"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 14","b":["411","1401","106","1402","1401","1402","1403"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 15","b":["412","1501","1503","413","1502","413"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 16","b":["415","1601","1602","1601","1601","1603","414","106","102"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 17","b":["417","1701","414","1701","1702","407","106"]},"Storage Level","Some embodiments may include a storage level that is implemented whereby tables of data are created, and data is inserted into, and\/or selected from, these tables using SQL or some other database-related language known in the art. These tables of data can be managed using a database application such as, for example, MYSQL\u2122, SQLSERVER\u2122, Oracle 8I\u2122 or 10G\u2122, or some other suitable database application. These tables are organized into an RDS or Object-Relational-Database Schemas (ORDS), as is known in the art. These schemas can be normalized using certain normalization algorithms so as to avoid abnormalities such as non-additive joins and other problems. Additionally, these normalization algorithms include Boyce-Codd Normal Form or some other normalization, optimization algorithm known in the art.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 18","b":["1800","1801","1802","1803","1803","1804","1805","1800","1805","1805","1801","1802","1803","1804","1805"]},"Component Design","Some example embodiments may include the above described three tiers or levels being written as one or more software modules with each module contributing to the functionality of each level or tier. Common to many of these modules is the ability to generate, use and manipulate the above described data and data sets. These modules, and associated functionality, may be used by the client, server, or peer applications. These various modules can be implemented into the system on an as-needed basis. These modules may be written in an object-oriented-computer language such that a component oriented or object-oriented programming technique can be implemented using a Visual Component Library (VCL), Component Library for Cross Platform (CLX), Java Beans (JB), Java Enterprise Beans (EJB), Component Object Model (COM), or Distributed Component Object Model (DCOM) or other suitable technique. These modules are linked to other modules via various APIs and then compiled into one complete server and\/or client application. The process for using modules in the building of client and server applications is well known in the art. Further, these modules, and the tiers that they make up, are linked together via various distributed programming protocols as distributed computing modules.","Distributed Computing Modules","Some example embodiments may include remote procedure calls being used to implement one or more of the above described levels of the three-tier architecture across a distributed programming environment. For example, a logic level resides on a first computer system that is remotely located from a second computer system containing an Interface or storage level. These first and second computer systems can be configured in a server-client, peer-to-peer or some other configuration. These various levels can be written using the above described component design principles and can be written in the same programming language, or a different programming language. Various protocols are implemented to enable these various levels, and components contained therein, to communicate regardless of the programming language used to write these components. For example, a module written in C++ using the Common Object Request Broker Architecture (CORBA) or Simple Object Access Protocol (SOAP) can communicate with another remote module written in Java. These protocols include SOAP, CORBA, or some other suitable protocol. These protocols are well-known in the art.","A System of Transmission Between a Server and Client","In some embodiments, the above described components that make up the platform architecture communicate using the Open Systems Interconnection Basic Reference Model (OSI) or the Transmission Control Protocol\/Internet Protocol (TCP\/IP) protocol stack models for defining network protocols that facilitate the transmission of data. Applying these models, a system of data transmission between a server and client computer system can be described as a series of roughly five layers comprising as a: physical layer, data link layer, network layer, transport layer and application layer. Some example embodiments may include the various levels (e.g., the Interface, Logic and storage levels) residing on the application layer of the TCP\/IP protocol stack. The present application may utilize a Hyper Text Transfer Protocol (HTTP) to transmit content between the server and client applications, whereas in other embodiments another protocol known in the art is utilized. Content from an application residing at the application layer is loaded into the data load field of a TCP segment residing at the transport layer. This TCP segment also contains port information for a recipient application or a module residing remotely. This TCP segment is loaded into the data field of an IP datagram residing at the network layer. Next, this IP datagram is loaded into a frame residing at the data link layer. This frame is then encoded at the physical layer and the content transmitted over a network such as an internet, Local Area Network (LAN) or Wide Area Network (WAN). The term internet refers to a network of networks. Such networks may use a variety of protocols for exchange of information, such as TCP\/IP etc., and may be used within a variety of topologies or structures. This network may include a Code Sensing Multiple Access Network (CSMA) such as an Ethernet based network. This network may include a Code Divisional Multiple Access (CDMA) network or some other suitable network.","A Computer System",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 19","b":"1900"},"The example computer system  includes a processor  (e.g., a Central Processing Unit (CPU), a Graphics Processing Unit (GPU) or both), a main memory  and a static memory , which communicate with each other via a bus . The computer system  may further include a video display unit  (e.g., a Liquid Crystal Display (LCD) or a Cathode Ray Tube (CRT)). The computer system  also includes an alphanumeric input device  (e.g., a keyboard), a User Interface (UI) cursor controller  (e.g., a mouse), a disc drive unit , a signal generation device  (e.g., a speaker) and a network interface device (e.g., a transmitter) .","The disc drive unit  includes a machine-readable medium  on which is stored one or more sets of instructions and data structures (e.g., software) embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , the main memory  and the processor  also constituting machine-readable media.","The instructions  may further be transmitted or received over a network  via the network interface device  utilizing any one of a number of well-known transfer protocols (e.g., HTTP, SIP).","While the removable physical storage medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single medium or multiple medium (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any of the one or more of the methodologies described herein. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic medium, and carrier wave signals.","Marketplace Applications","In some embodiments, video mail could be used in the buying or selling of goods and services over the internet. For example, a buyer of a good or service could leave a video mail message informing a seller of their intent to buy. This video mail message could inform the seller\/receiver of the intent of the buyer to purchase and the details of this intent to purchase. In many cases, the ability to see the party with whom one is transacting business will help to facilitate the transaction of goods or services.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 20","b":["2000","502","2001","2001"]},"Some example embodiments may include the posting of an outgoing video mail message describing a good or service for sale. For example, a seller of a good or service could post an outgoing video mail message showing the item for sale in actual use. A car being driven, a boat being captained, or a plane being piloted are all things that could be shown with an outgoing video mail message. In many cases, an outgoing video mail message showing the good or service for sale could help to facilitate a sale.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 21","b":["2100","502","2101","2101"]},"In some example embodiments, a video mail message could be used by either a seller or buyer of good and services to generate a video mail message regarding their buying or selling experience. For example, an outgoing video mail message may instruct potential buyers on the advantages of buying from the seller. And again, a video mail message from a buyer to a seller could instruct the seller on the advantages or disadvantages of using the seller to transact the sale or good or services, and could also be used for the purpose of providing testimonials regarding the buying experience.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 22","b":["2200","502","2201","2201"]},"In further example embodiments, video mail could be used by senders or receivers to send video mail greetings to one another. These video mail greeting could be personalized such that, for example, a recipient could see and hear those characteristics that make the sender unique and novel. Additionally, video mail greetings allow for senders to express emotions and sentiments that are not as easily expressed with other forms for greetings.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 23","b":["2300","502","2301","2301"]},"In some embodiments, video mail could prove useful in one's daily life. For example, many times audio\/video records such as those implemented using video mail, allow for senders and receivers of video mail to convey feelings, emotion, and even their demeanor not otherwise conveyed. Video mail will allow senders and recipients to capture emotions.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 24","b":["2400","502","2401","2401"]},"In some embodiments, a system is illustrated including a first computer system operatively coupled to a second computer system, wherein the first and second computer systems are in a peer-to-peer configuration, a receiver residing on the second computer system to receive a video mail message, and a storage device residing on the second computer system to store the video mail message. The system may further include a first device operatively coupled to the first computer system, wherein the first device receives an audio signal, a second device operatively coupled to the first computer, wherein the first device receives a video signal, and a transmitter operatively coupled to the first computer system to transmit a video signal. Moreover, the system may further include the transmitter operatively coupled to the first computer system to transmit an audio signal. Additionally, the system may include a receiver operatively coupled to the first computer system to receive a prompt to leave a message. Furthermore, the prompt may be a prompt selected from the group consisting of an outgoing audio\/video message, screen icon, and text message. In addition, the recorder may be operatively coupled to the second computer system and the recorder records a video signal and an audio signal.","Some example embodiments may include a method comprising configuring a first computer system and a second computer system into a peer-to-peer configuration, receiving a video mail message at the second computer system, and storing the video mail message on the second computer system. The method may further include receiving an audio signal on the first computer system, receiving a video signal on the first computer system, and transmitting the video signal using the first computer system. Moreover, the method may further include transmitting an audio signal using the first computer system. In addition, the method may further comprise receiving a prompt to leave a message from the second computer system, wherein the prompt is a prompt selected from the group consisting of an outgoing audio\/video message, screen icon, and text message. Additionally, the method may further include recording a video signal, and recording an audio signal. The method may further include recording an outgoing message. Additionally, the method may further comprise checking the signifier of the first computer system, checking memory space of the second computer system, and checking the operability of devices residing on the second computer system, wherein the devices are devices selected from the group consisting of a video camera and a microphone. Further, a signifier may be selected from the group consisting of user handles, internet protocol address, media access control address, and user name.","In some embodiments, a computer-readable medium embodying instructions is illustrated, the instructions including a first set of instructions to configure a first computer system and a second computer system into a peer-to-peer configuration, a second set of instructions to receive a video mail message at the second computer system, and a third set of instructions to store the video mail message on the second computer system.","In some embodiments, an apparatus is illustrated as including means for configuring a first computer system and a second computer system into a peer-to-peer configuration, means for receiving a video mail message at the second computer system, and means for storing the video mail message on the second computer system.","It is to be understood that the above description is intended to be illustrative and not restrictive. Although numerous characteristics and advantages of various embodiments as described herein have been set forth in the foregoing description, together with details of the structure and function of various embodiments, many other embodiments and changes to details will be apparent to those of skill in the art upon reviewing the above description. The scope of the invention should be, therefore, determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled. In the appended claims, the terms \u201cincluding\u201d and \u201cin which\u201d are used as the plain-English equivalents of the respective terms \u201ccomprising\u201d and \u201cwherein,\u201d respectively. Moreover, the terms \u201cfirst,\u201d \u201csecond,\u201d and \u201cthird,\u201d etc., are used merely as labels, and are not intended to impose numerical requirements on their objects.","The Abstract of the Disclosure is provided to comply with 37 C.F.R. \u00a71.72(b), requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Some embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 24"}]},"DETDESC":[{},{}]}
