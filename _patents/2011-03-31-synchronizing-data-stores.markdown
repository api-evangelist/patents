---
title: Synchronizing data stores
abstract: Disclosed are various embodiments for synchronizing data stores. A notification is received indicating that a write transaction was performed to a data store. The notification includes a path used by the write transaction. When a predetermined delay has passed after the receipt of the notification, a read is performed from the path included in the notification. In response to at least completion of the read, data returned by the read is written to a different data store.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08725684&OS=08725684&RS=08725684
owner: Amazon Technologies, Inc.
number: 08725684
owner_city: Reno
owner_country: US
publication_date: 20110331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Online users interact with search engines to find many different types of information stored on a network such as the Internet or the World Wide Web. The search engine returns summaries for network content that most closely match a user's search query. The search engine uses an index to perform the search query. The index may be stored in a location that is separate from the content.","The various embodiments described herein relate to synchronizing a transactional data store with a data store. A producer process writes data to the replicated data store. Another consumer process reads back the data from the replicated data store and writes the data to the transactional data store. However, because writes by the producer can take hours to be distributed through the replicated data store, a delay is enforced before the consumer reads back the data in order to write to the transactional data store. This delay increases the likelihood that the replicated data store is actually consistent, i.e., that the write has been replicated to all hosts in the replicated data store. The delay can be configured to achieve a particular probability of consistency. For example, in a particular configuration a delay of 5 minutes may result in a 90% likelihood that the eventually consistent replicated data store is actually consistent. In the following discussion, a general description of the system and its components is provided, followed by a discussion of the operation of the same.","With reference to , shown is a networked environment  according to various embodiments. The networked environment  includes a plurality of computing devices - . . . N in data communication with one or more client devices  by way of a network . The computing device  is also in data communication with one or more computing devices  by way of the network . The network  includes, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.","Each of the computing devices ,  may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices  or computing devices  may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. A plurality of computing devices  or computing devices  together may comprise, for example, a cloud computing resource, a grid computing resource, and\/or any other distributed computing arrangement. Such computing devices  or computing devices  may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience, the computing device  and the computing device  are each referred to herein in the singular. Even though the computing device  and the computing device  are referred to in the singular, it is understood that a plurality of computing devices  or computing devices  may be employed in various arrangements.","Components executed on the computing devices  cooperate to implement a replicated storage service , which operates to receive data and to replicate this data among the computing devices . Each of the computing devices  acts as a replication host, thus forming a replicated data store  that is accessible over the network . Data written to the replicated data store  is not guaranteed to be available at the next read transaction, because the data may not yet be distributed to all the hosts -A . . . -N. The replicated data store  is instead guaranteed to be eventually consistent within a specific commitment period, which may be on the order of dozens of hours.","While the replicated data store  made available by the replicated data store  executing in the computing device  is only eventually consistent, a transactional data store  accessible to the computing device  is strongly consistent, such that data written in one transaction is available at the next read. The transactional data store  may be implemented, for example, by a relational database management system (RDMS). While discussed herein as a single data store, the transactional data store  may be representative of a plurality of data stores as can be appreciated. The data stored in the transactional data store , for example, is associated with the operation of the various applications and\/or functional entities described below.","Various applications and\/or other functionality may be executed in the computing device  according to various embodiments. The components executed on the computing device , for example, include a synchronization target module . The synchronization target module  is executed to synchronize data stored in the strongly consistent transactional data store  with data stored in the eventually consistent replicated data store . The synchronization target module  operates in conjunction with a synchronization source application, as explained in further detail below.","In some embodiments, the synchronization target module  is used by a search engine indexer . The search engine indexer , if present, is executed to index content stored in the replicated data store . Once indexed, the content can be found using a search query. To create an index, the indexer  reads content from the replicated data store , parses the content, and writes the index to the transactional data store . Synchronization methods are used during this process, as described herein, because the transactional data store  is strongly consistent while the replicated data store  is only eventually consistent.","The components executed on the computing device  and the computing device  may also include other applications, services, processes, systems, engines, or functionality not discussed in detail herein. These components may communicate with each other using various mechanisms, including but not limited to any type of middleware framework. Examples of such frameworks include remote procedure calls, simple object access protocol (SOAP), representational state transfer (REST), Windows Communication Foundation, and other frameworks. Though shown as logically separate components, the functionality of these components can be combined and\/or distributed in various ways, as can be appreciated.","Having discussed the computing device , the client device  will now be considered. The client device  is representative of a plurality of client devices that may be coupled to the network . The client device  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer, a laptop computer, a personal digital assistant, a cellular telephone, a set-top box, a music player, a video player, a media player, a web pad, a tablet computer system, a game console, an electronic book reader, or other devices with like capability.","The client device  may be configured to execute various applications and\/or functionality such as a synchronization source module . The synchronization source module  may run in conjunction with a client application . The client application  acts as a client with respect to the replicated data store . That is, the client application  reads and\/or writes to the replicated data store  through the replicated storage service . The client device  may be configured to execute applications beyond the synchronization source module , such as, for example, browser applications, email applications, instant message applications, and\/or other applications.","Referring next to , a general description is provided for the operation of some of the components of the networked environment  of , according to various embodiments of the present disclosure. Specifically,  describes interactions between the synchronization source module  and the synchronization target module .","To begin, at event  the synchronization source module  writes data to the replicated data store , using the replicated storage service . At event  the synchronization source module  notifies the synchronization target module  about the write transaction. The notification includes a path or location of the write, which the synchronization target module  can use to read back the data. The notification may be implemented using any guaranteed messaging framework. In some embodiments, the notification uses the Java Message Service (JMS).","At block , a predetermined delay occurs before processing the write notification. The predetermined delay is configurable at run time. This delay increases the likelihood that the replicated data store  is actually consistent, i.e., that the replicated data store  has replicated the write to all hosts. Therefore, once the delay expires at event , the synchronization target module  acts on the notification by reading, at block , data from the replicated data store . The read transaction uses the path included in the notification. At block , the synchronization target module  writes the data obtained at block  to the transactional data store .","In this manner, the synchronization source module  and the synchronization target module  cooperate to synchronize the transactional data store  with the replicated data store . In some embodiments, the delay period between the write to the replicated data store  and the read back from the replicated data store  is a parameter that is configurable at run-time. The probability that the replicated storage service  has reached consistency generally increases with time. By empirically determining whether the replicated storage service  has reached consistency after various periods of time, the delay period can be tuned to reach a particular probability of consistency. For example, it may be determined that a five minute delay produces a 90% probability of consistency.","Turning now to , shown is a flowchart that provides one example of the operation of a portion of the synchronization target module  () executed on a computing device  () according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the synchronization target module  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning at box , the synchronization target module  receives a notification and determines the type of the notification. If the notification indicates that the synchronization source module  () has performed a write to, or a delete from, the source data store such as the replicated data store , then processing continues at block . If the notification is a different type, then the process of  is complete. Depending on the implementation of the notification mechanism, this determination of notification type may be performed by code other than the synchronization target module , for example, the notification system which invokes the synchronization target module .","As described above, the source data store is distributed among multiple hosts, with a master host replicating the write transactions to multiple slaves. This replication means that the write completes asynchronously, and that the write may not be completed for many hours, depending on the configuration of the source data store. At box , the synchronization target module  delays for a predetermined period of time before using the path to read back from the source data store. As should be appreciated, the delay may be blocking or non-blocking, depending on the implementation. That is, during the delay the process of  may be blocked from executing and then unblocked after the delay. Alternatively, the process of  may not block but may instead periodically return control and be invoked again to check for expiration of the delay period.","The delay between the write by the synchronization source module  and the read by the synchronization target module  increases the likelihood that the write by the has been replicated throughout the source data store. Furthermore, the particular delay period may be chosen so that the likelihood meets a specific threshold. For example, a 90% probability that the write is actually consistent may require a five minute delay, while a 95% probability may require a nine minute delay.","Next, at box , when the delay period has expired, the synchronization target module  reads from the source data store. The write notification received at box  includes the path or location of the write within the source data store, and the read at box  uses this path. At box , the read from the source data store completes. At box , in response to at least the read completion, if the notification at box  is a write notification, the synchronization target module  writes the data returned by the read at box  to a target data store, such as the transactional data store . In some embodiments, the write at box  may require fulfillment of other conditions in addition to the read completion. For example, the write at box  may be further conditioned on a successful completion of the read, such that the write does not occur if the read fails at box  fails.","Next, at box  the synchronization target module  acknowledges the notification received from the synchronization source module  at block . In some embodiments, notifications are held in a queue and the acknowledgement removes the notification from the queue, thus avoiding duplicate processing of the notification. In other embodiments, the act of reading the notification removes it from the queue. Thus, the acknowledgment in block  is optional, depending on the implementation.","Moving on to , shown is a flowchart that provides one example of the operation of a portion of the synchronization target module  () executed on a computing device  () according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the synchronization target module  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning at box , the synchronization target module  obtains a notification message from a message queue. In some embodiments, this notification is a write notification indicating that the synchronization source module  (), which acts as the synchronization peer of the synchronization target module , has performed a write to the replicated data store  (). In some embodiments, this notification is a delete notification indicating that the synchronization source module  (), which acts as the synchronization peer of the synchronization target module , has deleted data from the replicated data store  (). The notification message received at box  includes the path or location of the write or delete within the replicated data store . This path is used later by the synchronization target module  to read the data back from the replicated data store . The message queue may be provided by any service or mechanism which implements guaranteed message delivery between computers. In some embodiments, the message queue is provided by Java Message Service (JMS)","To synchronize with the synchronization source module , the synchronization target module  reads back the data written by the synchronization source module , and writes this data to the transactional data store . However, as described above, the source data store is distributed among multiple hosts, with a master host replicating the write transactions to multiple slaves. Thus, the write may not be completed for many hours, depending on the configuration of the source data store. The synchronization target module  therefore implements a delay before reading the data back from the replicated data store . This delay increases the likelihood that the write by the synchronization source module  has been replicated throughout the source data store. Furthermore, the particular delay period may be chosen so that the likelihood meets a specific threshold. One implementation of this delay is described below. However, other delay implementations are possible, as should be appreciated.","Having received a write or delete notification message at box , at box  the synchronization target module  obtains the current time. The current time may be obtained, for example, through a function provided by the operating system call, library, execution environment, or any other time provider. Next, at box  the synchronization target module  uses the current time to determine whether a predetermined delay period has passed since the notification message was received at box . For example, the current time may be compared to a timestamp saved by the synchronization target module  at the time the notification message was received.","If the synchronization target module  determines at box  that the delay has not passed, then at box  the notification message is returned to the message queue and the process of  is complete. Since the message is returned to the queue, the message service will invoke the process of  at a future time. If instead the synchronization target module  determines at box  that the predetermined delay period has passed, then at box  the synchronization target module  reads from the replicated data store , using the path included in the notification message.","Next, at box  the synchronization target module  determines whether the read at box  has completed successfully. If it is determined at box  that the read did complete successfully, then processing continues at box . At box , the synchronization target module  finishes the synchronization process by writing the data returned by the read at box  to the transactional data store . Having written the data, at box  the synchronization target module  acknowledges the message received at box . Once the message is acknowledged, the message delivery service will not invoke the process of  until a new message is received. The process of  is then complete.","If instead it is determining at box  that the read did not complete successfully, then processing moves to box , where the synchronization target module  determines whether the notification message indicates a delete was performed on the replicated data store . If the notification message does not indicate a delete, the process of  is complete. If the notification message does indicate a delete, then at box  the synchronization target module  deletes from the transactional data store , using the path included in the notification message. The process of  is then complete.","With reference now to , shown is a schematic block diagram of the computing device  according to an embodiment of the present disclosure. The computing device  includes at least one processor circuit, for example, having a processor  and a memory , both of which are coupled to a local interface . To this end, the client device  may comprise, for example, at least one client computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated.","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are the synchronization target module  and potentially other applications. In addition, an operating system may be stored in the memory  and executable by the processor .","It is understood that there may be other applications that are stored in the memory  and are executable by the processor , as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java, JavaScript, Perl, PHP, Visual Basic, Python, Ruby, Delphi, Flash, or other programming languages.","A number of software components are stored in the memory  and are executable by the processor . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory  and run by the processor , source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory  and executed by the processor , or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory  to be executed by the processor , etc. An executable program may be stored in any portion or component of the memory  including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.","The memory  is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","Also, the processor  may represent multiple processors and the memory  may represent multiple memories that operate in parallel processing circuits, respectively. In such a case, the local interface  may be an appropriate network  () that facilitates communication between any two of the multiple processors , between any processor  and any of the memories , or between any two of the memories , etc. The local interface  may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor  may be of electrical or of some other available construction.","Although the synchronization target module , the synchronization source module , and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The flowcharts of  show the functionality and operation of an implementation of portions of the synchronization target module . If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as processor  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the flowcharts of  show a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in flowcharts of  may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the blocks shown in  may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.","Also, any logic or application described herein, including the synchronization target module  and the synchronization source module , that comprises software or code can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, processor  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 3","FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 5","FIG. 1"]}]},"DETDESC":[{},{}]}
