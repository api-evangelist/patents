---
title: Editing a portable, dynamic and abstract view definition of a network object database
abstract: A user is enabled to edit a table defining a view of a network object database, for example, a MIB. The user can select from among a plurality of network object types and select from among a plurality of columns of the table. At least one column of the table is specified by the user and edited to represent a network object type specified by the user. The view definition can be extracted from the application and transported to another device where it can be edited and/or viewed using a suitable application. Such portable view definition may be defined as part of a document, for example, a document formatted in accordance with a markup language, such as XML. Such document may include information for requesting objects to populate the view, which may be used to construct requests (e.g., SNMP requests) to retrieve objects from one or more network devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09154372&OS=09154372&RS=09154372
owner: EXTREME NETWORKS, INC.
number: 09154372
owner_city: San Jose
owner_country: US
publication_date: 20030725
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","EXAMPLES"],"p":["This application claims the benefit under 35 U.S.C. \u00a7119(e) to commonly-owned U.S. provisional patent application serial No. 60\/428,586, titled A SYSTEM AND METHOD FOR CREATING AND EDITING A DYNAMIC, ABSTRACT AND PORTABLE VIEW OF A NETWORK OBJECT DATABASE, filed on Nov. 22, 2002 , which is hereby incorporated by reference in its entirety.","\u201cCommonly-owned U.S. patent application Ser. No. 10\/627,327, now U.S. Pat. No. 7,480,917, titled USER INTERFACE FOR EDITING OBJECTS OF A NETWORK OBJECT DATABASE, by James P. Richmond et al. (the Richmond application) filed on even date herewith is hereby incorporated by reference in its entirety.\u201d","Communications networks continue to have a growing role in today's world.  is a conceptual diagram illustrating an example of a communications network . As used herein, a \u201ccommunications network\u201d or a \u201cnetwork,\u201d for example, network , is group of two or more devices (i.e., network elements), for example, network devices ,  and , interconnected by one or more segments of transmission media on which communications may be exchanged between the devices. Each segment may be any of a plurality of types of transmission media, including one or more electrical or optical wires or cables made of metal and\/or optical fiber, air (e.g., using wireless transmission over carrier waves) or any combination of these transmission media. As used herein, \u201cplurality\u201d means two or more.","As networks become more complex and continue to include more network devices, the importance of efficiently managing these devices has grown. As used herein, a \u201cnetwork device\u201d is a device configured as part of a network. Such network devices may be and\/or include any of a variety of types of devices, including, but not limited to, switching devices, workstations, personal computers, terminals, laptop computers, end stations, servers, gateways, registers, directories, databases, printers, fax machines, telephones, transmitters, receivers, repeaters, and any combinations thereof.","Managing network devices is referred to herein as \u201cdevice management,\u201d and includes, inter alia, configuring a plurality of network devices, where one or more these network devices are typically configured remotely (i.e., from another network device residing at a different location on the network) by exchanging messages (e.g., packets) between network devices over network media.","To facilitate configuring large numbers of network devices, object types often are defined to represent aspects of network devices, for example, status, location (e.g., Internet Protocol (IP) address and\/or Media Access Control (MAC) address), port characteristics, device description, other aspects, permissible states of any aspects, or any combination thereof.","Objects","The term \u201cobject\u201d is often used inconsistently in the field of communications networks, including the field of device management. The meaning of the term \u201cobject\u201d and related terms as used herein will now be defined.","As used herein, an \u201cobject\u201d is an abstraction representing a specific occurrence (i.e., an instance) of an object type.","As used herein, an \u201cobject type\u201d is an abstraction representing a type of thing, for example, a type of thing associated with a network device, for example, the network device itself, a Virtual Local Area Network (VLAN), an interface of the network device, any aspects thereof, other aspects, or any combination thereof.","For example, an object type may define an interface of a network device, where a specific object of the object type may be instantiated for a particular interface of a particular network device.","An object type may include one or more other object types and may be included within one or more other object types. Accordingly, an object type may define interrelationships between object types and may define an organizational structure of object types.","Some object types, referred to herein as \u201cnon-indexed\u201d object types (and often referred to as zero-instanced object types), are configured such that only a single object of the object type can occur (i.e., can be instantiated) per network device. For example, an object type may define an operating system for a network device, for which only a single object occurs for each network device.","Other object types, referred to herein as \u201cindexed\u201d object types are configured such that one or more objects of the object type may occur for a single network device. In such case, where one or more objects of a same object type may occur for a single device, each object may be referred to as an \u201coccurrence\u201d (i.e., an instance) of the object type, and each occurrence may be indexed by an indexing variable. For example, an object type defining an interface of a network device may have one or more objects occur per network device, and each of these objects may be referred to as an occurrence of the object type, i.e., an occurrence of an interface. Further, the interface object type may be defined to include several other object types, and each such object type may occur one or more times on a network device, i.e., once for every occurrence of the interface object type.","Network Object Database","A plurality of objects may be grouped together to form a network object database. As used herein, a \u201cnetwork object database\u201d is an organized collection of one or more network objects.","As used herein, a \u201cnetwork object\u201d is an object representing a specific occurrence (i.e., an instance) of an network object type. A \u201cnetwork object type\u201d is an object type representing a type of thing associated with a network device, for example, the network device itself, a Virtual Local Area Network (VLAN), an interface of the network device, any aspects thereof, other aspects, or any combination thereof.","An example of a network object database is a Management Information Base (MIB). A network object database may be any of a variety of types of databases, for example, an object-oriented database, a flat file database, a relational database, or combination thereof. Some network object databases organize network object types into object type groups and\/or tables, where the database schema of such database may divide several logically-related object types into several tables and\/or object type groups. For example, some MIBs include an interface group, a system group, and\/or a VLAN group, etc. A device management application may be configured to understand such relationships, and a programmer or other person experienced in working with the database may know such relationships. Typically, however, a user (e.g., a network administrator) has limited knowledge or understanding of the relationships between such tables and table entries.","An indexed object type (e.g., an interface) of a network object database (e.g., a MIB) may include a table object type defining a table for the indexed object type. The table object type includes an object type that defines an indexing variable for the table and other object types that define columns for the table. The table object type may be defined such that each occurrence of the indexed object type is indexed by the indexing variable and may be considered an entry or row of the table. The column object types may be defined to occur once for each occurrence of the indexed object type, i.e., once for each entry or row of the table.","To facilitate the widespread use of network object databases to manage devices, several technologies, standards and protocols have been developed. Some of these standards have been developed to define a language for structuring management information, including the Structure of Management Information (SMI) promulgated by the Internet Engineering Task Force (IETF), including IETF Standard No. 16, which defines Version 1 of the SMI as documented in Request for Comments (RFCs) 1155 and 1212, and IETF Standard No. 58, which defines Version 2 of the SMI as documented in RFCs 2578, 2579 and 2580.","Other protocols have been developed to enable a user to manage objects and object types of a network object database (e.g., a MIB). Managing a database of network objects may include accessing (e.g., remotely) and manipulating (e.g., getting and setting) object types and occurrences thereof, including modifying the definition of an object type and\/or changing a value defined for an object. An example of a protocol for managing a MIB is the Simple Network Management Protocol (SNMP) promulgated by the IETF. There are several different versions of SNMP, including SNMPv1 (version 1) as defined by IETF Standard No. 15 and documented in RFC 1157, SNMPv2c, which is not a standard, but is an experimental version of SNMP as documented in RFC 1901, and SNMPv3 defined by IETF Standard No. 62 and documented in RFCs 3410-3418, which are updated versions of RFCs 1905-1907 and 2570-2575.","Accordingly, a network object database, for example, a MIB, may be configured to conform with one or more of the SMI protocols and one or more of the SNMP protocols. A network object database also may include proprietary elements that do not conform with any standards or protocols.","Views","As used herein, a \u201cview\u201d of a network object database (e.g., MIB) is a visual representation of information derived from the network object database. The visually represented information may be any information derived from the network object database, for example, the values of one or more objects on a network device. A view typically represents a subset of the information available from a network object database, and typically is used by a user to determine the state of one or more network objects on one or more devices. As used herein, a \u201cview definition\u201d is a set of computer-readable signals that defines a view. As used herein, a \u201cset\u201d of items may include one or more of such items. A view definition includes a definition of the information to be represented by the view.","A network object database may be considered a layer of abstraction for aspects of a network device. Views of a network object database may be classified as abstracted or non-abstracted. As used herein, a \u201cnon-abstracted view\u201d is a view of a network object database that provides no more abstraction (i.e., no additional layer of abstraction) for network objects beyond the layer of abstraction provided by the network object database itself. Thus, a non-abstracted view visually represents only information defined in the network object database.","Also, non-abstracted views are limited to arranging the display of information from the network object database as defined by the network object database itself. For example, such non-abstracted view delimits objects only in accordance with the delimitations defined by the network object database. Further, existing non-abstracted view definitions do not combine or collate object types of different groups or different tables of a network object database into an integrated arrangement, e.g., a table that includes object types from both groups or tables.","Typically, relatively simple interpretive (as opposed to compiled) programming language such as a scripting language (e.g., Practical Extraction and Reporting Language (PERL)) are used to write instructions in code (e.g., a script) to retrieve network objects to produce a non-abstracted view. Using a programming interface (e.g., an editor), a programmer may write a script that defines requests for objects defined for one or more network devices, and then execute the script.","As used herein, a \u201cprogramming interface\u201d is a set of one or more applications, or parts thereof, that enable a programmer to create and modify an application. A programming interface may be configured to use one or more Application Programming Interfaces (APIs), The programmer must know how to write programming code using the programming interface and\/or understand the functionality defined by blocks of code (e.g., building blocks of an API) and how to properly combine them.","The result of executing a script on a network object database typically is a raw dump of information including values of objects of the requested object types. The information typically is visually arranged according to the arrangement of the objects within the network object database, which is defined by the object types therein. The information is typically is arranged as a string of text with delimiters (e.g., spaces, line spaces, carriage returns, commas, semicolons) separating objects.","Thus, such relatively simple programming languages do not enable a programmer to define an abstract view of a network object database, including configuring an arrangement of network objects different than the arrangement defined by the network object database, and\/or defining a graphical arrangement of such network objects, for example, a table. Thus, the information displayed and the arrangement of information displayed is limited to the information and arrangement defined by the network object database.","As a result, such non-abstracted views may have little meaning to the user (relative to the meaning provided by an abstract view definition), and the logical relationships between pieces of information visually represented in the view may be difficult for the user to understand or may not be understood by the user at all.","Further, the scripts written by such relatively simple programming languages do not provide a user interface that enables a user to create and modify a view definition.","As used herein, a \u201cuser interface\u201d is an application or part of an application (i.e., a set of computer-readable instructions) that enables a user to interface with an application during execution of the application. A user interface may include code defining how an application outputs information to a user during execution of the application, for example, visually through a computer screen or other means, audibly through a speaker of other means, and manually through a game controller or other means. Such user interface also may include code defining how a user may input information during execution of the application, for example, audibly using a microphone or manually using a keyboard, mouse, game controller, track ball, touch screen or other means.","Some known applications, for example, NetSight Element Manager, version 3.0.0, available from Enterasys Networks, Inc. of Rochester, New Hampshire, can provide abstracted views of a network object database. Typically, programmers can create and modify abstract view definitions for such applications using a programming interface.","As used herein, an \u201cabstracted view\u201d is a view of a network object database that provides a layer of abstraction of network objects beyond the layer of abstraction provided by the network object database itself. A definition of an abstracted view (i.e., view definition) may specify information beyond the information defined in the network object database, for example, different names for the objects than the names provided by the network object database. Further, the view definition for an abstracted view may define a visual arrangement (e.g., a table) of the information to be represented that is different than the visual arrangement defined by the network object database. For example, an abstracted view may define a table that includes object types that belong to different object type groups or different tables of a network object database.","Similar to the limitations described above with respect to scripts, applications for which programmers can define abstracted views do not provide a user interface that enables a user to create and modify a view definition for a network object database.","In contrast, the static views provided by such applications can only be created and modified by programmers, for example, using a programming interface. As used herein, a \u201cstatic view definition\u201d is a view definition of a network object database that is not capable of being created and\/or modified without programming intervention to create or change the programming code in which the view definition is written (e.g., using a programming interface).","Static view definitions restrict users to view definitions configured by a programmer, for example, when a viewing application is installed. Further, the view definition may be restricted to those object types that were known when the viewing application was installed. Accordingly, to modify a view definition, including possibly adding new object types to the view definition, or to create a new view definition, the code defining the viewing application must be modified. Such modification adds additional time and, consequently, cost to managing network devices.","Another problem with known applications that provide abstracted views of a network object database is that the view definitions of such views are typically inextricable from the viewing application and, therefore, are not portable. In other words, a user using a first network device cannot separate a view definition from the viewing application and transport the view definition to another network device where the view defined by the view definition can be reproduced using a suitable viewing application. Transporting a view definition may include transmitting the view to another device over network media (e.g., by attaching to an email), or saving a copy of the view to a portable recording medium such as a memory stick, CD ROM or floppy disk and physically transporting the recording medium to another network device.","In an aspect of the invention, a user interface is provided that enables a user to edit a dynamic and abstract view definition, for example, a dynamic table, of a network object database, for example, a MIB. As used herein, to \u201cedit\u201d a view definition means to do at least one of: create, modify and delete a view definition, and to \u201cmodify\u201d a view definition means to do at least one of: add an object type to the view definition, remove an object type from the view definition, add a column definition to the view definition, change a column definition, and remove a column definition from the view definition.","In an optional feature of this aspect, the view definition may be portable.","In another optional feature, object types of different object type groups or different object type tables of a network object database (e.g., a MIB), may be added to a same view definition.","In another aspect of the invention, a user is enabled to edit a portable view definition (e.g., a portable table) of a network object database (e.g., a MIB). As used herein, a \u201cportable\u201d view definition of a network object database is a view definition, edited on a device (e.g., a network device) using a suitable application, that is capable of being extricated from the application and transported to another device where it can be edited and\/or viewed using a suitable application.","Such portable view definition may be defined as part of a document, for example, a document formatted in accordance with a markup language, e.g., a document formatted in accordance with XML (an \u201cXML document\u201d). Such document may include not only the definition of the view but information for requesting objects to populate the view. For example, such structured document may include request information for constructing an SNMP request to retrieve objects from one or more network devices.","In features of this aspect, the portable view definition may be abstract and\/or dynamic.","In an embodiment of the invention, a user is enabled to edit a table defining a view of a network object database, e.g., a MIB, including a plurality of network object types. A user interface, which may include a GUI, is provided that enables the user to specify one or more of the plurality of network object types. In response to the user specifying the one or more network object types, at least one column of the table is edited to represent at least one of the one or more specified network object types.","This embodiment and\/or aspects thereof may be implemented as a computer program product that includes a computer-readable medium and computer-readable signals stored on the computer-readable medium, which signals define appropriate instructions. These instructions, as a result of being executed by a computer, instruct the computer to perform the acts described above for this illustrative embodiment.","In another embodiment, a system is provided for enabling a user to edit a table defining a view of a network object database including a plurality of network object types. The system includes a table editing component to enable the user to specify one or more of the plurality of network object types. The table editing component is operable, in response to the user specifying the one or more network object types, to edit at least one column of the table to represent at least one of the one or more specified network object types, respectively.","In another embodiment, a system is provided for enabling a user to edit a table defining a view of a network object database including a plurality of network object types. The system includes a table editing component to edit at least one column of the table to represent at least one of the plurality of network object types specified by the user. The system further includes means for enabling the user to specify the at least one or more of the plurality of network object types.","In yet another embodiment, a portable view definition of a network object database including a plurality of network object types is edited. A column of a table is edited to represent one of the plurality of network object types. Request information is generated for retrieving objects of the one network object type. Such request information may be configured in accordance with one or more known protocols, for example, SNMP. A document is generated that includes a definition of the table, the table definition including the generated request information and a definition of the column. This document may be formatted in accordance with a markup language, for example, XML.","This embodiment and\/or aspects thereof may be implemented as a computer program product that includes a computer-readable medium and computer-readable signals stored on the computer-readable medium, which signals define appropriate instructions. These instructions, as a result of being executed by a computer, instruct the computer to perform the acts described above for this illustrative embodiment.","In another embodiment, a system is provided for configuring a portable view definition of a network object database including a plurality of network object types. The system includes: a table editing component to edit a column of a table to represent one of the plurality of network object types; a request component to generate request information for retrieving objects of the one network object type; and a document generation component to generate a document that includes a definition of the table, including the generated request information and a definition of the column.","In another embodiment, a system is provided for configuring a portable view definition of a network object database including a plurality of network object types. The system includes: a table editing component to edit a column of a table to represent one of the plurality of network object types; a request component to generate request information for retrieving objects of the one network object type; and means for generating a document that includes a definition of the table, the table definition including the generated request information and a definition of the column.","In yet another embodiment, a computer-readable medium is provided, having stored thereon s plurality of computer-readable signals defining a document. The document includes a definition of a table representing a view of a network object database including a plurality of network object types. The table definition includes a column representing one of the network object types of the network object database and request information for retrieving objects of the network object type represented by the column.","Other advantages, novel features, and objects of the invention, and aspects and embodiments thereof, will become apparent from the following detailed description of the invention, including aspects and embodiments thereof, when considered in conjunction with the accompanying drawings, which are schematic and which are not intended to be drawn to scale. In the figures, each identical or nearly identical component that is illustrated in various figures is represented by a single numeral. For purposes of clarity, not every component is labeled in every figure, nor is every component of each embodiment or aspect of the invention shown where illustration is not necessary to allow those of ordinary skill in the art to understand the invention.","The function and advantages of aspects of the present invention will be more fully understood from the examples described below. The following examples are intended to facilitate an understanding of such aspects and to illustrate the benefits of such aspects, but do not exemplify the full scope of the invention.","Although aspects of the invention described below are described primarily in relation to editing views of a network object database, for example, a MIB, such aspects are not limited thereto, but may be applied to editing views of any database of objects. Further, although a table is the primary visual representation of an abstracted view described herein, aspects of the invention include a definition of an abstracted view that defines any of a variety of types of visual representations, including, but not limited to, a diagram (e.g., an object-oriented diagram), a chart, an image, any combination thereof, and any combination of a table and one of the foregoing.","Aspects of the invention described herein may be implemented using NetSight Atlas Console available from Enterasys Networks, Inc. of Rochester, New Hampshire.","As used herein, whether in the written description or the claims, the terms \u201ccomprising\u201d, \u201cincluding\u201d, \u201ccarrying\u201d, \u201chaving\u201d, \u201ccontaining\u201d, \u201cinvolving\u201d, and the like are to be understood to be open-ended, i.e., to mean including but not limited to.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 2","b":"200"},"In Act , a new view may be initiated or an existing view may be retrieved from a recording medium, for example, by a user using a user interface, which may include a visual user interface, for example, a graphical user interface (GUI), which may provide a GUI display such as GUI display  of .","As used herein, a \u201cvisual user interface\u201d is the portion of the user interface that defines how information is visually presented (i.e., displayed) to the user, and defines how the user can navigate the visual presentation (i.e., display) of information and input information in the context of the visual presentation. During execution of the application, the visual interface controls the visual presentation of information and enables the user to navigate the visual presentation and enter information in the context of the visual presentation. Types of visual user interfaces range from command-driven interfaces, where users type commands, menu-driven interfaces, where users select information from menus, and combinations thereof, to GUIs, which typically take more advantage of a computer's graphics capabilities, are more flexible, intuitive and easy to navigate and have a more appealing \u201clook-and-feel\u201d than command-driven and menu-driven visual user interfaces.","As used herein, the visual presentation of information presented by a user interface, visual user interface or GUI is referred to as a \u201cuser interface display\u201d, \u201cvisual user interface display\u201d or a \u201cGUI display\u201d, respectively.","In Act , a user interface may be provided that enables the user to specify one or more of a plurality of network object types included in the network object database. For example, the user interface may include a graphical user interface (GUI) for example, a GUI that provides the GUI display  described below in relation to . Such GUI may provide one or more controls that enable a user to select from among the plurality of object types.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 3","b":["800","800","202","204","200","700","800"]},"Although GUI display  is used to illustrate a visual user interface for defining a view for a MIB, aspects of the invention are not limited thereto, as a visual user interface may be configured to enable a user to edit a view of any kind of network object database.","GUI display  may include column selection panel , object type selection panel  and column information panel . Object type selection panel  may display a list or a tree representation of object types of a network object database. Each folder displayed in the tree may represent an object type that includes other object types, and each leaf may represent an object type that does not include any other object types. The object type selection panel may be configured to enable a user to traverse the list and\/or tree representation and select an object type. Other types of displays may be used to display object types and enable the user to navigate the display and\/or select an object type.","Controls may be provided to traverse the list or the tree and to select one of the object types from the list or tree. If an existing view is being modified, or after a column has been added to the table defining the view, method  may include enabling the user to select any of the columns of the view from column selection panel.","During the course of editing the table, one or more inputs may be received from a user specifying one or more of the plurality of network objects types, as is described in more detail below in relation to .","Returning to , in Act , at least one column of the table may be edited to represent at least one of the one or more network object types specified by the user. For one or more network objects selected by the user, columns may not be edited because such objects may not be compatible with the table, as described below in relation to .","In Act , for the at least one edited column, request information may be generated for retrieving objects of the specified object type represented by the at least one column. For example, the request information may be information used to create an SNMP request to retrieve objects of the object type from one or more devices.","Although Act  describes request information as being generated in relation to a specific column, it should be appreciated that request information may be generated that corresponds to the table as a whole.  illustrate data structures for arranging request information for a table and column, respectively. As used herein, a \u201cdata structure\u201d is an arrangement of data defined by computer-readable signals. These signals may be read by a computer system, stored on a medium associated with a computer system (e.g., in a memory, on a disk, etc.) and may be transmitted to one or more other computer systems over a communications medium, for example, of a network.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 4","b":"500"},"Data structure  may include one or more fields, including any of polled field , view type field , editable field , polling interval field , indexing variable field , version field , report errors field  and data logged field .","Polled field  may be configured to store a value indicating whether network devices are to be polled periodically to populate the view table. Polling a device means sending a request to the device, the request requesting that the device return an indication of objects present on the device. If field  has a value indicating that network devices are to be polled, then the interval at which the requests are sent (i.e., polling interval) may be defined by polling interval field .","View type field  may store a value indicating the type of view, for example, table, pie graph or bar graph. Although the primary type of view described herein is a table, other types of views are possible, such as a pie graph or bar graph, which may be appropriate only for views that include appropriate objects types.","Editable field  may store a value indicating whether the table is editable. This field may be configured such that the value stored therein overrides the value stored in editable field  of column request data structure  described below in more detail, or may be configured to be overrideable by the value stored in field .","Indexing variable field  may store a value indicating the indexing variable for the table. Such indexing variable may be any of a variety of kinds of indexing variables, including an interface indexing variable or a VLAN indexing variable. Indexing variables are described below in more detail in relation to .","Versioning field  may store a value indicating a version of the table. For example, the table may be revised on several occasions and versioning field  may be used to identify a version of each revision and to implement some sort of versioning control for the table.","Report errors field  may store a value indicating whether or not to report errors that occur during the population of the table, i.e., when the table is applied to one or more network devices to produce a view.","Data logged field  may indicate whether to log values of objects that populate the view table.","It should be appreciated that one or more of fields - may be combined. For example, for multiple fields for which a Boolean value may be used, a single field may be configured to store a binary value, where each digit of the binary value represents a Boolean value for a different parameter. For example, report errors field  and data logged field  may be combined into a single field, where a two-digit binary number is used to represent the values for the two fields. A first binary digit may represent the Boolean value for whether or not to report errors and the second binary digit may represent the Boolean value for whether or not to log object values.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 5","b":["602","602"]},"Indexed field  may store a value indicating whether the object type represented by a column is indexed or non-indexed.","Data type field  may store a value indicating the data type of the object type represented by a column. Data types may include, but are not limited to, a number, string, Boolean value or other value. The permissible data types for field  may be defined in accordance with one or more standards, for example, Abstract Syntax Notation 1 (ASN.1).","Column position field  may store a value indicating the position of the column within a data structure representing the table. For example, if the table includes six columns, then a data structure representing the structure may include six fields. The value stored in column position  may represent the position of the field that represents the column within the six fields of the data structure. It should be appreciated that the position of this field may correspond to the position of the column within the table or may be independent of the position of the column within the table.","Editable field  may store a value indicating whether the column is editable, i.e., whether the column is read-only or read\/write.","Graphable data field  may store a value indicating whether the object type represented by the column is graphable. As described above, a view may be configured to display a pie graph, bar graph or other type of graph or diagram. Graphable data field  may store the value indicating whether the data type of the object type represented by this column is capable of being graphed.","Request group  may store a value indicating a request group to which the column belongs. As described above, a protocol for managing network devices, for example, a version of SNMP, may be configured to predefine groups of object types. Such protocol may be configured so that, if an attempt to retrieve one object of the object type group from a network device, as part of the request to retrieve one or more objects of the object type group, fails, then the entire request fails (i.e., no objects are returned for the request). Accordingly, it may be desirable to divide a request into multiple requests, where each request includes one or more object types, so that if one request fails because of the inability to retrieve an object, the other requests may not fail. As a result, the objects for at least some object types may successfully be retrieved.","Thus, in an aspect of the invention, a user may be enabled to divide the columns of a view table into different request groups. The number of request groups to create for a view may be based on several factors. For example, one benefit to increasing a number of requests is that the greater the number of requests, the greater the likelihood that at least some objects will be retrieved successfully. However, as the number of request groups increases (at most, one request group per column type in the view), network traffic increases as well. A request group may be defined for a column using a GUI, for example, by entering and\/or selecting a value in request group field  of GUI display .","Returning to method , in Act , a document may be generated that includes a definition of the table, the table definition including a definition of the column and the generated request information. For example, a document formatted in accordance with a markup language (\u201cmarkup language document\u201d) such as an XML document may be generated. The Appendix illustrates an example of an XML document that may be generated, which includes a definition of a table. The table definition includes a definition of a plurality of columns, where a plurality of the column definitions include request information generated for the column. The table definition further includes request information corresponding to the table as a whole.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 6","FIG. 4"],"b":["900","900","902","904","906","914","902","914","916","918","920","922","924","926","928","502","516","500","902"]},"Column definition  may include request information  corresponding to a column, column name  and network object type identifier .","Request information  may include values , , , , ,  and , which may be values for fields , , , , ,  and , respectively, of data structure  described above with respect to . These values may be used to generate requests that specify retrieving network objects of the object type represented by column definition  from network devices.","Column definition , including request information  may be edited and generated as described above with respect to Acts - of method .","Returning to method , in Act , the document may be stored, for example, on a recording medium such as a non-volatile recording medium. In an embodiment in which an existing view is being edited, Act  may include replacing the previous structured document including the table with the updated structured document resulting from the performance of Acts -.","In Act , the document may be provided to one or more network devices on a network. For example, the document may be stored on a disk and transported to another device on the network, or transmitted across one or more transmission mediums of the network to another network device. The document may be transmitted as part of a file transfer or attached as part of another communication such as an electronic mail (email) message. A user at one of these network devices to which the document was transmitted then may access the document using an appropriate application (e.g., the application described below in relation to ). The user may use the view definition and request information encapsulated within the document to produce a view of objects residing on one or more network devices.",{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 7","b":["700","206","208","200"]},"In Act , a next input may be received from the user specifying one of the plurality of object types. For example, an input may be received resulting from a user selecting (e.g., clicking a mouse on) one of the leaves of object type selection panel  of GUI display .","If the user is modifying a table that already includes one or more columns, then method  may include an act of receiving an input from the user specifying a column of the table (not shown). Such act may occur prior to Act  or any point after Act  prior to the performance of Act . For example, the user may select one of the columns (e.g., Physical Status column , Type column , Description column , Logical Status column  or Address column ) listed in column listing panel  of GUI display .","In Act , it may be determined whether the object type is an indexed object type. As described above, an indexed object type is an object type for which one or more occurrences of an object of the object type may be implemented on a single network device. For example, referring to object type selection panel , ifEntry  is an indexed object type that includes indexed object types , where if ndex is the indexing variable for object types  and .","If it is determined that the object type is not an indexed object type, then method  may proceed to Act , described below.","If it is determined that the object is an indexed object type, then it may be determined in Act  whether the indexing variable of the indexed object type is compatible with the indexing variable being used for the table. For example, the indexing variable used for the table may be an interface indexing variable or a VLAN indexing variable. An interface indexing variable may be used by a table defining a view of interfaces (e.g., defined for ports of a network device) on a network. Because multiple interfaces may reside on a single network device, a network object database, such as a MIB, may define an interface to be an indexed object type.","Similarly, a VLAN indexing variable may be used by a table defining a view of VLANs on a network. Because multiple VLANs may reside on a single network device, a network object database, such as a MIB, may define a VLAN to be an indexed object type. It should be appreciated that indexed object types may be used to define other aspects of a network that may occur more than once on a network device, and that VLANs and interfaces are described herein for illustrative purposes.","Returning to Act , the indexing variable being used for the table may be determined based on the indexed object type that was the first indexed object type added to the table. For example, the indexing variable of the first object type added to the table may serve as the indexing variable for the table. During the course of editing the table, the user may change the indexing variable, and this change may require removing any indexed object types previously included in the table.","An indexing variable is compatible with another indexing variable if the index variables are the same. Even though two object types are from different tables of a network object database (e.g., different tables of a MIB), these two object types may have a same indexing variable. For example, a MIB interface table may define an indexing variable \u201cif Index\u201d that may be considered an object identifier (OID) of the indexing variable for the indexing table. The indexing variable also may have a numerical object identifier, for example, \u201c1.3.6.1.2.1.2.2.1.1\u201d. Another table of the MIB may define an indexing variable by specifying (i.e., pointing to) the OID of the indexing variable of the interface table, for example by specifying \u201cif Index\u201d or \u201c1.3.6.1.2.1.2.2.1.1\u201d. Accordingly, the interface table and the other table both use the same indexing variable.","In an embodiment of the invention, a compatibility table may be provided. The compatibility table may include a plurality of entries, where each entry corresponds to a possible indexing variable, and may include a compatibility value. Accordingly, Act  may include accessing an entry of the compatibility table corresponding to the indexing variable of the object type specified by the user, and retrieving the compatibility value stored therein. Act  also may include accessing the entry of the compatibility table corresponding to the indexing variable being used by the table, and retrieving the value stored therein. Alternatively, the compatibility value being used by the table may have already been retrieved in response to adding to the table the object type from which the indexing variable of the table was determined. The retrieved compatibility value for the specified object type and the compatibility value of the table then may be compared. If the compatibility values match, then the indexing variables are compatible. If the retrieved compatibility values do not match, then the indexing variables are not compatible and, therefore, the object type is deemed not compatible with the table.","If it is determined in Act  that the indexing variables are compatible, then method  may proceed to Act . If it is determined that the indexing variables are not compatible, then, in Act , the user may be notified that the indexing variable of the indexed object type is not compatible with the indexing variable being used for the table. For example, a visual user interface may display a message window to the user notifying the user of the incompatibility.","In an embodiment of method , after Act , method  proceeds directly to Act  (not shown). In an alternative embodiment, the user is provided the option of editing a column of the table to represent the object type regardless of the fact that the indexing variable of the object type has been determined to be incompatible with the indexing variable of the table. Accordingly, it may be determined in Act  whether the user wants to edit a column of the table (e.g., a column being added or modified by the user) to represent the object type even though the indexing variable of the object type has been found to be incompatible with the indexing variable of the table.","Enabling the user to add an object type to a table for which the indexing variable has been determined to be incompatible with that of the table may be desirable for the following reasons. Although a system may implement a network object database in accordance with a standard such as one of the MIB-related standards, some networks are configured with proprietary network object types. Accordingly, a vendor that programmed the compatibility table may not be familiar with all of the object types of a customer's proprietary network object database. Accordingly, even though it has been determined that the indexing variable of an object type is incompatible with an indexing variable of a table based on a vendor's compatibility table, the user may have knowledge that the indexing variable is indeed compatible with that of the table, and it may be desirable to let the user add the object type to the table in this situation.","In Act , if it is determined that the user wants a column of the table to represent the object type anyway, then, in Act , a column definition of the table may be edited to represent the object type, for example, using column information panel  of GUI display . The column defined by such column definition may be a column selected by the user, for example, if an existing view is being modified, or the column may be a next column automatically created in response to an object type being selected.","Referring to GUI display , after the user selects a compatible object type or a non-indexed object type (i.e., only one occurrence per network device) from object type selection panel , a column item for the object type may appear in column list panel , and the user may be enabled to enter information for the column in column information panel . For example, the user may be enabled to provide a name for the column in name field , which may update the name of the item listed in column list panel . Further the user may be able to enter a type of the column (e.g., read\/write, read-only, etc.) in type field . Alternatively, such value may be defined by the object type selected and thus may not be modifiable by the user. Object type identifier field  may display an identifier of the column to the user, for example, MIB object identifier (OID) ifOperStatus. Notes field  enables a user to enter any information, for example, information pertaining to the object type. The GUI display  also may provide a request group field  to enable the user to enter and\/or select a request group for the column. Request groups are described above in relation to request group field  of data structure .","As illustrated above in relation to Acts -, a user may be enabled to edit a table view to include object types from different objects type groups or tables defined by a network object database (e.g., a MIB). Objects types from different object type groups and tables may be added to a same view table if such objects types have compatible indexing variables (i.e., the same indexing variable), or if the indexing variables of the object types are different, but a user specifies that the two object types be added to a view table in spite of the incompatibility.","In Act , request information for retrieving objects of the object type may be generated, for example, as described above with respect to Act  of method .","In Act , the definition of the column may be modified to include the generated request information for retrieving objects of the object type.","In Act , it may be determined whether the user is finished editing the table. For example, a visual user interface (e.g., GUI display ) may provide a control for the user that the user can select to signify that the user has completed the table, for example, a control button labeled \u201cOK\u201d or \u201cFinished\u201d such as control button  of GUI display .","If the user is not finished editing the table, method  may return to Act . Although Act  is illustrated as occurring in response to Act , it should be appreciated that the reception of a next input  may not depend on the performance of Act , as performance of Act  and  may be asynchronous events that may occur at different times during the performance of method .","If it is determined that the table is complete, then a document may be generated for the table, as described above in relation to Act  of method .","Methods  and  may include additional acts. Further, the order of the acts performed as part of such methods is not limited to the order illustrated in  respectively, as the acts may be performed in other orders, and one or more of the acts of methods  and  may be performed in series or in parallel to one or more other acts, or parts thereof. For example, Acts  and  of method , or parts thereof, may be performed in parallel, and Act  may be performed before Act .","Each of methods  and  is merely an illustrative embodiment of enabling a user to edit a dynamic, abstract and\/or portable view definition of a network object database. Such illustrative embodiments are not intended to limit the scope of the invention, as any of numerous other implementations of such methods, for example, variations of methods  and , are possible and are intended to fall within the scope of the invention. None of the claims set forth below are intended to be limited to any particular implementation of enabling a user to edit a dynamic, abstract and\/or portable view definition of a network object database unless such claim includes a limitation explicitly reciting a particular implementation.","Each of methods ,  and , acts thereof and various embodiments and variations of these methods and acts, individually or in combination, may be defined by computer-readable signals tangibly embodied on a computer-readable medium, for example, a non-volatile recording medium, an integrated circuit memory element, or a combination thereof. Such signals may define instructions, for example, as part of one or more programs, that, as a result of being executed by a computer, instruct the computer to perform one or more of the methods or acts described herein, and\/or various embodiments, variations and combinations thereof. Such instructions may be written in any of a plurality of programming languages, for example, Java, Visual Basic, C, C#, or C++, Fortran, Pascal, Eiffel, Basic, COBAL, etc., or any of a variety of combinations thereof. The computer-readable medium on which such instructions are stored may reside on one or more of the components of systems  and\/or  described below, and may be distributed across one or more of such components.","The computer-readable medium may be transportable such that the instructions stored thereon can be loaded onto any computer system resource to implement the aspects of the present invention discussed herein. In addition, it should be appreciated that the instructions stored on the computer-readable medium, described above, are not limited to instructions embodied as part of an application program running on a host computer. Rather, the instructions may be embodied as any type of computer code (e.g., software or microcode) that can be employed to program a processor to implement the above-discussed aspects of the present invention.","It should be appreciated that any single component or collection of multiple components of a computer system, for example, the computer system described below in relation to , that perform the functions described above with respect to method  and  or any combination thereof can be generically considered as one or more controllers that control the above-discussed functions. The one or more controllers can be implemented in numerous ways, such as with dedicated hardware, or using a processor that is programmed using microcode or software to perform the functions recited above.","Various aspects of the invention are described above for editing a dynamic, abstracted view definition of a network object database and storing the same in a portable format. Applying such view definition to one or more network devices will now be described.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 8","b":["1000","1002"]},"Method  may include providing a visual user interface for the user, for example, a GUI that provides GUI display  of , although other visual user interfaces, which may provide other displays, may be used.  is a screen shot illustrating an example of a GUI that provides GUI display  for applying a view definition to one or more network devices to produce an abstracted view of a network object database. GUI display  may include network device selection panel , view definition selection control  and view display . View display may include columns , ,  and  and rows . Each column corresponds to a column of the view definition and each row  represents an object retrieved from a network device.","Returning to method , in Act , objects may be retrieved from the specified network devices. For example, objects of each object type of the network object database may be retrieved from the specified network devices. Alternatively, objects of only a subset of object-type definitions may be retrieved from the specified network devices.","In Act , user input may be received specifying a view definition to apply to the retrieved objects. For example, the user may be presented with a control that provides a list of all available views, for example, combobox  of GUI display , from which the user may select a view.","In Act , the specified view definition may be retrieved, for example, from a recording medium such as a non-volatile recording medium. Such recording medium may be located locally on a same device as the device employing method , or may be located remotely on a different network device.","In Act , the retrieved view definition may be applied to the retrieved objects to produce a view. For example, the view definition may be used to filter the retrieved objects to determine which objects are of the object types specified by the retrieved view definition. For example, in Act , objects corresponding to twenty-five different object types may have been retrieved, but the retrieved view definition may only specify five of these objects. Accordingly, Act  may include filtering out objects corresponding to the remaining twenty object types and including in the view only objects corresponding to the five object types specified by the view definition.","In an alternative embodiment of method , instead of retrieving objects and then applying the view definition to filter out non-specified objects, method  may include retrieving only objects of the object types specified by the view definition. In other words, method  may not include Act  and Act  may include retrieving objects from the specified network devices.","In Act , the view resulting from applying the view definition to the retrieved objects may be displayed to the user, for example, as part of a GUI display. For example, GUI display  may display the view to the user in view display panel .",{"@attributes":{"id":"p-0143","num":"0142"},"figref":"FIG. 10","b":"1200"},"System  may include any of one or more user input device interfaces , one or more user output device interfaces , user interface  and recording medium .","User interface  may include view definition editing component  and viewing component . Alternatively, view definition editing component  and viewing component  may be implemented as part of separate user interfaces.","Each of the one or more user input device interfaces may be configured to interface with include any of a variety of types of user input devices, including a mouse, a track ball, a keyboard, a microphone (in combination with a voice recognition application), a touch screen, other types of devices, or any combination thereof. Each of the one or more user output device interfaces may be configured to interface with any of a variety of type of user output devices, including a computer screen, other types of display devices, speakers, other audio devices, other types of output devices, or any combination thereof.","View definition editing component  may include table editing component , and indexing component . Table editing component  may be configured to send view editing display information  to one or more user output device interfaces , for example, to assist in implementing GUI display  described above. View definition editing component  further may be configured to enable a user to edit a view definition, for example, as described above in relation to methods  and  illustrated in , respectively.","View definition editing component  may include a table editing component  and an indexing component . Table editing component  may include a column editing component  and a request component . Table editing component  may be configured to receive a view ID  and retrieve a view definition  from recording medium  using view ID .","Table editing component  also may configured to receive column ID  from one or more user input device interfaces . The column editing component  may enable the user to edit the column definition specified by column ID , for example, as described above. Table editing component  may be configured to receive view ID  and column ID  to edit an already existing view.","Indexing component  may be configured to receive an object type ID  from the one or more user input device interfaces . The indexing component  then may determine whether the object type specified by the object type ID is an indexed object type or a non-indexed object type. If the object type is a non-indexed object type, then indexing component  may send the object type ID  to the table editing component, in response to which the table editing component may add a column to the table to represent the object type ID or modify an existing column to represent the object type ID.","If the indexing component determines that the object type is an indexed object type, then component  may send the object type ID to indexing compatibility component . Indexing compatibility component  may determine whether the indexing variable of the object type is compatible with the indexing variable of the table, as described above in relation to method . The indexing compatibility component  may access a compatibility table  of the recording medium using the indexing variable , as described above in relation to method . The compatibility table  may return a compatibility value  to the indexing compatibility component . The component  may repeat this process for the indexing variable being used by the table (unless the indexing compatibility component already has its value from adding the object type for which the indexing variable of the table was determined). Component  then may compare the compatibility value for the indexing variable of the object type to the compatibility value of the indexing variable of the table.","If the indexing variable is compatible, then indexing compatibility component  may send object type ID  to the table editing component  for further processing.","If the indexing compatibility component determines that the indexing variable is incompatible with that of the table, component  may send an incompatibility notification  to the one or more user output device interfaces to inform the user that the index variable is incompatible.","In response to notification , the user may send a notification response  through the one or more user input device interfaces  to the indexing compatibility component . If the notification response  indicates that the user wishes to have a column of the table represent the object type, then the indexing compatibility component  may send the object type ID  to the table editing component for further processing. Else, the indexing compatibility component  may return control to the table editing component to await a next object type ID or column ID.","It should be appreciated that although indexing component  is illustrated as being part of user interface  in , indexing component  may be a component of system  that is separate from user interface .","The request component  may be configured to generate request information for a column and\/or an entire table, for example, in accordance with SNMP, as described above in relation to .","The view definition editing component  further may include a document generation component (not shown) configured to generate a document that includes (i.e., contains) a view definition, for example, as described above in relation to Act  of . For example, the document generation component may generate a document formatted in accordance with a markup language as XML The view editing component  may be configured such that, after it has received an indication that the user is done editing the table and\/or wishes to save the table, it may store (i.e., persist) the view definition  on the recording medium . In an embodiment, the document generation component first generates a document (e.g., an XML document) including the view definition, and then the document is stored on the recording medium .","Viewing component  may receive a view ID  from one or more user input device interfaces , in response to which component  may send view ID  to recording medium  to retrieve view definition  corresponding to view ID .","In response to receiving a device ID , the viewing component may send one or more requests  across network  to one or more network devices, for example, network devices  and . In response to the request , the network devices may send object information  to the viewing component. The viewing component then may apply the view definition  to the object information , for example, as described above with respect to method , to produce view . The viewing component  may be configured to send view  to one or more user output device interfaces  to display to the user.","System , and components thereof, may be implemented using software (e.g., C, C#, C++, Java, or a combination thereof), hardware (e.g., one or more application-specific integrated circuits), firmware (e.g., electrically-programmed memory) or any combination thereof. One or more of the components of system  may reside on a single system (e.g., a single network device), or one or more components may reside on separate, discrete systems (e.g., a plurality of network devices). Further, each component may be distributed across multiple systems, and one or more of the systems may be interconnected.","\u201cFurther, on each of the one or more systems that include one or more components of system , each of the components may reside in one or more locations on the system. For example, different portions of the components , , and  may reside in different areas of memory (e.g., RAM, ROM, disk, etc.) on the system. Each of such one or more systems may include, among other components, a plurality of known components such as one or more processors, a memory system, a disk storage system, one or more network interfaces, and one or more busses or other internal communication links interconnecting the various components.\u201d","System  may be implemented on a computer system described below in relation to .","System  is merely an illustrative embodiment of a system for enabling a user to edit a dynamic, abstract and\/or portable view definition and\/or to generate a view from such view definition. Such an illustrative embodiment is not intended to limit the scope of the invention, as any of numerous other implementations of such system, for example, variations of system , are possible and are intended to fall within the scope of the invention. None of the claims set forth below are intended to be limited to any particular implementation of a system for enabling a user to edit a dynamic, abstract and\/or portable view definition and\/or to generate a view from such view definition unless such claim includes a limitation explicitly reciting a particular implementation.","Various embodiments according to the invention may be implemented on one or more computer systems. These computer systems, may be, for example, general-purpose computers such as those based on Intel PENTIUM-type processor, Motorola PowerPC, Sun UltraSPARC, Hewlett-Packard PA-RISC processors, or any other type of processor. It should be appreciated that one or more of any type computer system may be used to edit a dynamic, abstract and\/or portable view definition of a network object database and\/or apply such view definition to one or more network devices according to various embodiments of the invention. Further, the software design system may be located on a single computer or may be distributed among a plurality of computers attached by a communications network.","A general-purpose computer system according to one embodiment of the invention is configured to perform. It should be appreciated that the system may perform other functions, and the invention is not limited to having any particular function or set of functions.","For example, various aspects of the invention may be implemented as specialized software executing in a general-purpose computer system  such as that shown in . The computer system  may include a processor  connected to one or more memory devices , such as a disk drive, memory, or other device for storing data. Memory  is typically used for storing programs and data during operation of the computer system . Components of computer system  may be coupled by an interconnection mechanism , which may include one or more busses (e.g., between components that are integrated within a same machine) and\/or a network (e.g., between components that reside on separate discrete machines). The interconnection mechanism  enables communications (e.g., data, instructions) to be exchanged between system components of system . Computer system  also includes one or more input devices , for example, a keyboard, mouse, trackball, microphone, touch screen, and one or more output devices , for example, a printing device, display screen, speaker. In addition, computer system  may contain one or more interfaces (not shown) that connect computer system  to a communication network (in addition or as an alternative to the interconnection mechanism .","The storage system , shown in greater detail in , typically includes a computer readable and writeable nonvolatile recording medium  in which signals are stored that define a program to be executed by the processor or information stored on or in the medium  to be processed by the program. The medium may, for example, be a disk or flash memory. Typically, in operation, the processor causes data to be read from the nonvolatile recording medium  into another memory  that allows for faster access to the information by the processor than does the medium . This memory  is typically a volatile, random access memory such as a dynamic random access memory (DRAM) or static memory (SRAM). It may be located in storage system , as shown, or in memory system , not shown. The processor  generally manipulates the data within the integrated circuit memory ,  and then copies the data to the medium  after processing is completed. A variety of mechanisms are known for managing data movement between the medium  and the integrated circuit memory element , , and the invention is not limited thereto. The invention is not limited to a particular memory system  or storage system .","The computer system may include specially-programmed, special-purpose hardware, for example, an application-specific integrated circuit (ASIC). Aspects of the invention may be implemented in software, hardware or firmware, or any combination thereof. Further, such methods, acts, systems, system elements and components thereof may be implemented as part of the computer system described above or as an independent component.","Although computer system  is shown by way of example as one type of computer system upon which various aspects of the invention may be practiced, it should be appreciated that aspects of the invention are not limited to being implemented on the computer system as shown in . Various aspects of the invention may be practiced on one or more computers having a different architecture or components that that shown in .","Computer system  may be a general-purpose computer system that is programmable using a high-level computer programming language. Computer system  may be also implemented using specially programmed, special purpose hardware. In computer system , processor  is typically a commercially available processor such as the well-known Pentium class processor available from the Intel Corporation. Many other processors are available. Such a processor usually executes an operating system which may be, for example, the Windows 95, Windows 98, Windows NT, Windows 2000 (Windows ME) or Windows XP operating systems available from the Microsoft Corporation, MAC OS System X available from Apple Computer, the Solaris Operating System available from Sun Microsystems, or UNIX available from various sources. Many other operating systems may be used.","The processor and operating system together define a computer platform for which application programs in high-level programming languages are written. It should be understood that the invention is not limited to a particular computer system platform, processor, operating system, or network. Also, it should be apparent to those skilled in the art that the present invention is not limited to a specific programming language or computer system. Further, it should be appreciated that other appropriate programming languages and other appropriate computer systems could also be used.","One or more portions of the computer system may be distributed across one or more computer systems (not shown) coupled to a communications network. These computer systems also may be general-purpose computer systems. For example, various aspects of the invention may be distributed among one or more computer systems configured to provide a service (e.g., servers) to one or more client computers, or to perform an overall task as part of a distributed system. For example, various aspects of the invention may be performed on a client-server system that includes components distributed among one or more server systems that perform various functions according to various embodiments of the invention. These components may be executable, intermediate (e.g., IL) or interpreted (e.g., Java) code which communicate over a communication network (e.g., the Internet) using a communication protocol (e.g., TCP\/IP).","It should be appreciated that the invention is not limited to executing on any particular system or group of systems. Also, it should be appreciated that the invention is not limited to any particular distributed architecture, network, or communication protocol.","Various embodiments of the present invention may be programmed using an object-oriented programming language, such as SmallTalk, Java, C++, Ada, or C# (C-Sharp). Other object-oriented programming languages may also be used. Alternatively, functional, scripting, and\/or logical programming languages may be used. Various aspects of the invention may be implemented in a non-programmed environment (e.g., documents created in HTML, XML or other format that, when viewed in a window of a browser program, render aspects of a graphical-user interface (GUI) or perform other functions). Various aspects of the invention may be implemented as programmed or non-programmed elements, or any combination thereof.","Having now described some illustrative embodiments of the invention, it should be apparent to those skilled in the art that the foregoing is merely illustrative and not limiting, having been presented by way of example only. Numerous modifications and other illustrative embodiments are within the scope of one of ordinary skill in the art and are contemplated as falling within the scope of the invention. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, it should be understood that those acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed only in connection with one embodiment are not intended to be excluded from a similar role in other embodiments. Further, for the one or more means-plus-function limitations recited in the following claims, the means are not intended to be limited to the means disclosed herein for performing the recited function, but are intended to cover in scope any means, known now or later developed, for performing the recited function.","Use of ordinal terms such as \u201cfirst\u201d, \u201csecond\u201d, \u201cthird\u201d, etc., in the claims to modify a claim element does not by itself connote any priority, precedence, or order of one claim element over another or the temporal order in which acts of a method are performed, but are used merely as labels to distinguish one claim element having a certain name from another element having a same name (but for use of the ordinal term)."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
