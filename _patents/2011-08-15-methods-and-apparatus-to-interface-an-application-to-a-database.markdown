---
title: Methods and apparatus to interface an application to a database
abstract: Methods and apparatus to interface an application to a database are disclosed. An example method includes determining a query used by an application that is to communicate with a database via a database driver. The query is tested on the database via the database driver. Such testing includes storing a query template when a received result of the query matches an expected result of the query. A database access framework is generated to interface between the application and the database driver based on the stored query template.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116967&OS=09116967&RS=09116967
owner: Hewlett-Packard Development Company, L.P.
number: 09116967
owner_city: Houston
owner_country: US
publication_date: 20110815
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Some software applications query a database for information retrieval and\/or storage. Queries use specialized syntaxes and\/or formats to communicate with a database. Different types of databases use different syntaxes and\/or formats for communication. In some cases, a syntax describes a Data Manipulation Language (DML), while in other cases, a syntax describes a Data Description Language (DDL). DML statements direct retrieval or modification of information and\/or data stored in a database. DDL statements direct creation, modification, and\/or deletion of definitions of objects (e.g., tables, views, etc.) in a database.","Many software applications are designed to utilize a single database query syntax and\/or format. Thus, the syntax and\/or format of the software application may not match the syntax and\/or format of a particular database. When the syntax and\/or format of the software application does not match the syntax and\/or format of the database, the software application may execute an incorrect statement on the database, thereby causing an unintended result.","Applications are typically written for a single type of database. For example, an application might be written to interface with a SQL database, an Oracle database, a Sybase database, etc. Since many different types of databases exist, the application may not be able to communicate with a database that is already installed at a customer location. When a syntax and\/or format mismatch between an application and a database occurs, the application might not be able to communicate with the database.","Some potential solutions to syntax and\/or format mismatch include programming the application to interact with more than one desired type of database. In some cases, this approach is not desired as many different types of databases exist, and programming the application to interact with more than one type of database may increase the cost of the application due to additional planning, programming, and\/or testing. Some other potential solutions include installing a new database that is supported by the application. This too, is not always a desired approach. For example, customers deploying the application may have a pre-existing system and\/or a pre-existing database. Installing the new database that is supported by the database application in some examples includes repurposing hardware to support the database, purchasing new hardware to support the database, and\/or installing the new database alongside the pre-existing database. Such approaches may cause additional expenses and\/or lower performance from the customer's existing hardware.","Example methods, apparatus, and articles of manufacture to interface an application to a database that overcome syntax and\/or format mismatch are disclosed herein. Examples disclosed herein test a database with queries known to be used by an application and transform those queries using query templates until an expected result is returned. A database access framework is then generated using the query templates that return the expected results. The example database access framework receives a query from the application, translates the query, executes the query on the database, and transmits a result of the query to the application.","Some example database access frameworks disclosed herein are created by a framework generator. The framework generator, being knowledgeable of the application and the queries that will be executed against a database, executes test queries against the database and analyzes the results. The results are analyzed to ensure that they sufficiently match expected results of the queries that will be executed against the database. Based on the results of the test queries, the framework generator creates the database access framework. The application is then configured to route queries via the database access framework.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 1","FIG. 1"],"b":["100","105","100","105","110","115","120","125"]},"The example application  is a database application that retrieves, stores, and\/or presents information associated with and\/or stored in the database . In the illustrated example, the application  is a client application that queries the database  and displays an interface to a user. However, in some examples, the application  is a server application that may serve data to a client application. For example, the application  may be a Web server. When the application  is a server application, the application  transmits information to a client application (e.g., a browser) such that the client application displays an interface to the user.","The application  of  interacts with the database  via the database driver . In the illustrated example, the application  is a Java\u2122 application. However, any other type of application or programming language may additionally or alternatively be used. For example, the application  might be written in C++, Perl, etc.","The database driver  of illustrated example is a Java database connectivity (JDBC) driver. However, any other type of database driver  may additionally or alternatively be used. For example, the database driver  may be an Object Linking and Embedding database driver (OLE DB), and\/or an Open Database Connectivity driver (ODBC). Many different types of database drivers exist. The database drivers  may be selected for use in the system  based on system compatibility, stability, etc. Database drivers  may or may not support queries (e.g., certain types of DDL and\/or DML statements) and\/or metadata used by the database  and\/or the application .","To enable support for queries and\/or metadata used by the database  and\/or the application , the database access framework  is configured to interpret a query of the application , and translate the queries into a syntax that is implemented by the database driver  and\/or the database . In some cases, information conveyed in DDL statements includes metadata that is useful to some applications. Many applications do not utilize metadata, and therefore many database drivers do not correctly support DDL statements for retrieving metadata. However, in some cases, transforming the DML and\/or DDL statements to use a modified syntax enables the database driver to properly retrieve data, such as metadata, from the database.","The database access framework  of the illustrated example is created by the framework generator . The example database access framework  disclosed herein is a wrapper that interfaces with the database  driver and the application . The database driver  provides an application programming interface (API) so that the application  can interact with the database. The database access framework  receives a query from the application , and translates the query from a syntax of the application  to a syntax of the database .","The database access framework  receives queries from the application , translates the received queries, transmits the translated queries, and replies to the application  with a received result of the translated queries. The application  is configured to transmit a query the database access framework . The database access framework  translates the received query based on one or more query templates stored as part of the database access framework . The stored templates are generated by the framework generator  based on knowledge of the queries used by the application .","The database  of the illustrated example is a SQL database. However, the database  may be any other type of database such as, for example, an Oracle database, a Sybase database, etc. Furthermore, the data stored in the database  may be in any data format such as, for example, binary data, comma delimited data, tab delimited data, structured query language (SQL) structures, etc. While in the illustrated example the database  is illustrated as a single database, the database  may be implemented by multiple databases.","The framework generator  of the illustrated example tests queries used by the application  to determine if those queries should be modified for use with the database driver  and\/or the database . Based on the result of the tests, the framework generator  generates the database access framework .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1"],"b":["200","125","125","205","210","215","220","225","230"]},"The framework generator  of the illustrated example receives an application profile . The application profile  of the illustrated example is a file that describes the query(ies) that are expected to be used by the application . In the illustrated example, the application profile  is created by developers of the application  during development of the application . However, the application profile  may be created at any other time and\/or by any other party. For example, the application profile  may be created by a third-party developer after release of the application . Further, in the illustrated example, the application profile  includes expected results of the query(ies). In some examples, the expected result is not included in the application profile . In such examples, the expected result may be a result that indicates that the query executed successfully. In the illustrated example, the expected result includes specific results (e.g., a data field, etc.) that are to be returned when a particular query is executed. However, in some examples, the expected result might be a result indicating that the query executed successfully.","The application profiler  of the illustrated example inspects the application profile  to determine the query(ies) that are expected to be used by the application . However, in some examples the application profiler  may directly inspect the application . For example, the application profiler  may inspect a source code of the application  to determine the queries that are expected to be used by application .","The data processor  of the illustrated example determines which queries are to be tested. Further, the data processor  instructs the query tester  to test the queries. Based on the results of the tests, the data processor  stores templates based on the results of the queries tested by the query tester .","The data store  of the illustrated example is a database for storing testing information. However, the data store  may be any device for storing data such as, for example, flash memory, magnetic media, optical media, etc. Furthermore, the data stored in the data store  may be in any data format such as, for example, binary data, comma delimited data, tab delimited data, structured query language (SQL) structures, etc. While in the illustrated example the data store is illustrated as a single database, the data store  may be implemented by multiple databases.","The query tester  of the illustrated example transforms and\/or translates a query used by the application  to a syntax that might return expected results when the query is executed. The query tester  of the illustrated example passes queries to be executed to the database communicator . Further, the query tester  of the illustrated example validates a returned result of the translated query to determine if the returned result matches an expected result of the query.","The database communicator  of the illustrated example is implemented by a communications interface such as, for example, the interface  of . In the illustrated example, the database communicator enables communication with the database  via the database driver . In the illustrated example, the database communicator  communicates with the database driver  via a network interface. In some examples, the database communicator  is local to the database driver  (e.g., executed by the same computing system), while in some examples, the database communicator  is remote from the database driver  (e.g., executed by a different computing system). The database communicator  receives a query(ies) from the query tester, and upon executing the query(ies) against the database  via the database driver , returns a result to the query tester .","The framework outputter  of the illustrated example generates the example database access framework . In the illustrated example, the framework outputter  installs the database access framework  on a system executing the application  such that the database access framework  passes translated queries to the database driver . In some examples, the database access framework  is installed on a system other than the system executing the application  such as, for example, a system executing the database driver , a system executing the database , any other system, etc. In some examples, the framework outputter  instructs a user (e.g., an operator, an installer, etc) to install the database access framework . Further, in the illustrated example, the framework outputter  configures the application  to transmit queries to the database access framework  instead of, for example, the database driver . Additionally or alternatively, the framework outputter  may instruct the user to configure the application  to transmit queries to the database access framework .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["300","110","110","305","310","315","320"]},"The query processor  of the illustrated example receives a query(ies) from the application . The query(ies) received from the application  are passed to the query template analyzer  which translates the query(ies) and passes the translated query(ies) on to the database communicator . In the illustrated example, a result of the executed query(ies) is then received by the query processor  which then returns the result to the application .","The query template analyzer  of the illustrated example inspects the query(ies) received by the query processor  to determine an appropriate template to be applied to the query. In the illustrated example, templates are stored in the template store . In the illustrated example, the query template analyzer  analyzes the received query(ies) against the template store  to determine if a query should be translated, and if so, applies the query template to the received query.","The template store  of the illustrated example is a database for storing template data. However, the template store  may be any device for storing data such as, for example, flash memory, magnetic media, optical media, etc. Furthermore, the data stored in the template store  may be in any data format such as, for example, binary data, comma delimited data, tab delimited data, structured query language (SQL) structures, etc. While in the illustrated example the template store  is illustrated as a single database, the template store  may be implemented by multiple databases. In the illustrated example, the template store  is populated by the framework outputter  of the framework generator .","The database communicator  of the illustrated example is implemented by an interface such as, for example, the interface  of . In the illustrated example, the database communicator  communicates with the database driver  via a network interface. In some examples, the database communicator  is local to the database driver  (e.g., executed by the same computing system), while in some examples, the database communicator  is remote from the database driver  (e.g., executed by a different computing system).","The database communicator  of the illustrated example enables communication with the database  via the database driver . In the illustrated example, the database communicator  receives a query(ies) from the query template analyzer  and executes the query(ies) against the database  via the database driver . The database communicator  then receives a result of the query(ies), and passes the result to the query processor .","While an example manner of implementing the framework generator  of  and\/or the database access framework  of  has been illustrated in , , and , one or more of the elements, processes and\/or devices illustrated in , , and  may be combined, divided, re-arranged, omitted, eliminated and\/or implemented in any other way. Further, the example application profiler , the example data processor , the example data store , the example database communicator , and\/or the example framework outputter , and\/or more generally the example framework generator  of , and\/or the example query processor , the example query template analyzer , the example template store , the example database communicator , and\/or more generally the example database access framework  of  may be implemented by hardware, software, firmware and\/or any combination of hardware, software and\/or firmware. Thus, for example, any of the example application profiler , the example data processor , the example data store , the example database communicator , and\/or the example framework outputter , and\/or more generally the example framework generator  of , and\/or the example query processor , the example query template analyzer , the example template store , the example database communicator , and\/or more generally the example database access framework  of  could be implemented by one or more circuit(s), programmable processor(s), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)) and\/or field programmable logic device(s) (FPLD(s)), etc. When any of the appended apparatus claims are read to cover a purely software and\/or firmware implementation, at least one of the example application profiler , the example data processor , the example data store , the example database communicator , and\/or the example framework outputter  of the example framework generator  of , and\/or the example query processor , the example query template analyzer , the example template store , the example database communicator  of the example database access framework  of  are hereby expressly defined to include a computer-readable medium such as a memory, DVD, CD, etc. storing the software and\/or firmware. Further still, the example application profiler , the example data processor , the example data store , the example database communicator , and\/or the example framework outputter  of the example framework generator  of , and\/or the example query processor , the example query template analyzer , the example template store , the example database communicator  of the example database access framework  of  may include one or more elements, processes and\/or devices in addition to, or instead of, those illustrated in , , and , and\/or may include more than one of any or all of the illustrated elements, processes and devices.","Flowcharts representative of example machine-readable instructions for implementing the framework generator  of  and\/or the database access framework  of  are shown in ,  and . In these examples, the machine-readable instructions comprise a program(s) for execution by a processor(s) such as the processor  shown in the example processor platform  discussed below in connection with . The program may be embodied in software stored on a computer-readable medium such as a CD-ROM, a floppy disk, a hard drive, a digital versatile disk (DVD), or a memory associated with the processor , but the entire program and\/or parts thereof could alternatively be executed by a device other than the processor  and\/or embodied in firmware or dedicated hardware. Further, although the example program(s) is described with reference to the flowcharts illustrated in , , and , many other methods of implementing the framework generator  of  and\/or the database access framework  of  may additionally and\/or alternatively be used. For example, the order of execution of the blocks may be changed, and\/or some of the blocks described may be changed, eliminated, or combined.","As mentioned above, the example processes of , , and\/or  may be implemented using coded instructions (e.g., computer-readable instructions) stored on a tangible computer-readable medium such as a hard disk drive, a flash memory, a read-only memory (ROM), a compact disk (CD), a digital versatile disk (DVD), a cache, a random-access memory (RAM) and\/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and\/or for caching of the information). As used herein, the term tangible computer-readable medium is expressly defined to include any type of computer-readable storage and to exclude propagating signals. Additionally or alternatively, the example processes of , , and\/or  may be implemented using coded instructions (e.g., computer-readable instructions) stored on a non-transitory computer-readable medium such as a hard disk drive, a flash memory, a read-only memory, a compact disk, a digital versatile disk, a cache, a random-access memory and\/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and\/or for caching of the information). As used herein, the term non-transitory computer-readable medium is expressly defined to include any type of computer-readable medium and to exclude propagating signals.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 4","FIGS. 1 and 2","FIG. 4"],"b":["400","125","125","105","120","115","110"]},"The example machine-readable instructions  of  begin when the application profiler  receives the profile  of the application (block ). In the illustrated example, the profile  is a file that indicates queries and\/or types of queries that are used by the application . In some examples, the application profiler  receives an executable file (e.g., an executable containing the application) and derives queries and\/or types of queries that are used by the application . In the illustrated example, the application profiler  determines the syntax of the queries and\/or types of queries that are used by the application . Determining and\/or parsing the syntax of the queries and\/or query types that are used by the application  allows for easy translation from a first syntax to a second syntax. In some examples, the syntax is not determined until a later point (e.g., during testing).","The data processor  and\/or query tester  then test the queries and\/or query types used by the application  (block ). The query testing procedure is described in more detail in . In short, the data processor  and\/or query tester  determine an appropriate query template to be used with the database  and\/or database driver  for each query and\/or query type used by the application.","Once the data processor  and\/or query tester  have tested the query(ies) and\/or query type(s) used by the application , the framework outputter  creates the database access framework  (block ). In the illustrated example, the framework outputter  populates the template store  of the database access framework , while one or more other components of the database access framework  are pre-compiled. The process of  is then complete and the application  routes queries to the database  via the database access framework . In some examples, the framework outputter  compiles one or more components of the database access framework  when outputting the database access framework .","In some examples, creating the database access framework may additionally include installing the database access framework on the system executing the application . However, in some examples, the database access framework  is not installed. In some examples, installing the database access framework  includes configuring the application  to route queries through the database access framework  and configuring the database access framework to route queries through the database driver . In some examples, the installation is performed programmatically. However, in some other examples, the installation is performed by presenting instructions to a user (e.g., an operator, an installer, etc.). In some such examples, the instructions instruct and\/or show the user how to install the database access framework .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIGS. 1 and 2","FIG. 5"],"b":["125","105"]},"The example machine-readable instructions  of  begin when the database communicator  establishes a connection with the database  via the database driver  (block ). In the illustrated example, database connectivity details (e.g., a name of the database, an instance of the database, a connection string associated with the database, etc.) are received by the application profiler  when the profile  is received in block . In some examples, the database communicator  prompts a user (e.g., an operator, an installer, etc.) for the database connectivity details.","The data processor  selects a query used by the application (block ). The analyzed results of the application profiler  are stored in the data store  in block , and include queries and\/or test queries, and\/or expected results of those queries and\/or test queries. In the illustrated example, the query is retrieved from the data store . In some examples, the query to be tested is a \u201cCREATE TABLE\u201d statement (e.g., a DDL statement). However, any query and\/or query type may be tested such as, for example, a SELECT statement (e.g., a DML statement), an INSERT statement, etc. In particular, they query and\/or query type of some examples may be for retrieving metadata from the database . In the illustrated example, the processor selects a query template from the data store  (block ). The query template is selected based on an association with one or more identifiers in the query to be tested. In some examples, the query template may be \u201cCREATE TABLE %TABLE_CATALOG%.%TABLE_NAME% (%COLUMN_DEFINITION%)\u201d. In such an example, the tokens \u201c%TABLE_CATALOG%\u201d, \u201c%TABLE_NAME%\u201d, and \u201c%COLUMN_DEFINITION%\u201d are tokens that are replaced based on tokens that are identified in the query. However, any other tokens and\/or syntax may additionally or alternatively be used. The data processor  then applies the selected query template to the query to be tested (block ).","The transformed query is then executed on the database  via the database driver  by the query tester  (block ). In the illustrated example, the query tester  receives a result of the transformed query. The result of the transformed query is compared against an expected result of the pre-transformation version of the query by the query tester  (block ). If the results are returned as expected, the query template is stored by the data processor  in the data store  (block ). If the results are not returned as expected, the data processor  determines whether more query templates are available (block ). If more query templates are available, control returns to block , where the processor selects another query template and repeats testing of the query template. If more query templates are not available, the data processor  prompts a user (e.g., an operator, an installer, etc.) to enter a query template (block ). In the illustrated example, control then proceeds to block  where the query template received from the user is stored. However, in some examples, control proceeds to block , where the query template received from the user is applied to the query to be tested, and the transformed query undergoes testing.","After the query template is stored in block , the data processor determines if another query(ies) are used by the application  (block ). If there is another query(ies) that is used by the application , control proceeds to block  where the data processor  determines the query to be tested, and proceeds to test the query. If there are no more queries to be tested, the example process of  terminates and control proceeds to block  of .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 6","FIGS. 1 and 3","FIG. 6"],"b":["600","110","110","105","120","115"]},"The example machine-readable instructions  of  begin when the query processor  of the database access framework  receives a query from the application  (block ). The query template analyzer  determines whether a syntax of the received query matches a syntax of the database  and\/or the database driver  (block ). If the query syntax of the received query matches the syntax of the database  and\/or the database driver , no transformation of the query syntax based on a stored query template should be performed and control proceeds to block  where the database communicator  executes the query. If the query syntax of the received query does not match the syntax of the database  and\/or the database driver , the syntax of the query is translated to conform to the syntax of the database  and\/or the database driver  (block ). In the illustrated example, the query is translated by the query template analyzer  based on a query template stored in the template store . After the query syntax is translated, the database communicator  executes the translated query (block ). The database communicator  then returns a received result of the query to the application .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 7","FIGS. 4","FIGS. 1 and 2","FIGS. 1 and 3","FIGS. 1"],"b":["700","5","6","125","110","2","3","700"]},"The system  of the instant example includes a processor . For example, the processor  can be implemented by one or more Intel\u00ae microprocessors from the Pentium\u00ae family, the Itanium\u00ae family or the XScale\u00ae family. Of course, other processors from other families are also appropriate.","The processor  is in communication with a main memory , including a volatile memory  and a non-volatile memory  via a bus . The volatile memory  may be implemented by Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS Dynamic Random Access Memory (RDRAM) and\/or any other type of random access memory device. The non-volatile memory  may be implemented by flash memory and\/or any other desired type of memory device. Access to the main memory , , and\/or  is typically controlled by a memory controller.","The processor platform  also includes an interface circuit . The interface circuit  may be implemented by any type of interface standard, such as an Ethernet interface, a universal serial bus (USB), and\/or a PCI express interface.","One or more input devices  are connected to the interface circuit . The input device(s)  permit a user to enter data and commands into the processor . The input device(s) can be implemented by, for example, a keyboard, a mouse, a touchscreen, a track-pad, a trackball, isopoint and\/or a voice recognition system.","One or more output devices  are also connected to the interface circuit . The output devices  can be implemented, for example, by display devices (e.g., a liquid crystal display, a cathode ray tube display (CRT), a printer and\/or speakers). The interface circuit , thus, typically includes a graphics driver card.","The interface circuit  also includes a communication device (e.g., the database communicator , the database communicator , etc.) such as a modem or network interface card to facilitate exchange of data with external computers via a network (e.g., an Ethernet connection, a digital subscriber line (DSL), a telephone line, coaxial cable, a cellular telephone system, etc.).","The processor platform  also includes one or more mass storage devices  for storing software and data. Examples of such mass storage devices  include floppy disk drives, hard drive disks, compact disk drives and digital versatile disk (DVD) drives. The mass storage device  may implement the database , the data store , and\/or the template store .","In the illustrated example, the processor platform  also includes a framework outputter  such as, for example the framework generator  of . The framework outputter  of the illustrated example is in communication with the processor  and\/or the memory (e.g., the main memory , the volatile memory , and\/or the non-volatile memory , the mass storage , etc.) via the bus . In the illustrated example, once a query template is stored, the framework outputter  outputs a database access framework to interface an application and a database driver to translate queries based on a stored query template(s).","The coded instructions of , , and  may be stored in the mass storage device , in the volatile memory , in the non-volatile memory , and\/or on a removable storage medium such as a CD or DVD.","From the foregoing, it will be appreciated that above disclosed methods, apparatus, and articles of manufacture allows a application to operate with a database using any query syntax.","Although certain example methods, apparatus and articles of manufacture have been described herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all methods, apparatus and articles of manufacture fairly falling within the scope of the claims of this patent."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0004","num":"0003"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 4","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 5","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 6","FIGS. 1 and 3"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 7","FIGS. 4 and 5","FIGS. 1 and 2","FIG. 6","FIGS. 1 and 3"]}]},"DETDESC":[{},{}]}
