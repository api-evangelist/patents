---
title: Defining a social network model implied by communications data
abstract: Systems and methods to define a social network for a user using data implied by communications of the user with others. In one embodiment, a method includes scanning a set of messages (e.g., emails to and from a user of a client device) to identify a plurality of primary persons addressed in the messages as a primary recipient and to identify a plurality of secondary persons addressed in the messages as a secondary recipient; mapping the primary persons to a plurality of friends and mapping the secondary persons to a plurality of other persons; and defining a social network model based on the friends and other persons, wherein the model comprises a friends category including the friends and an all category including the friends and other persons.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990323&OS=08990323&RS=08990323
owner: Yahoo! Inc.
number: 08990323
owner_city: Sunnyvale
owner_country: US
publication_date: 20111012
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE TECHNOLOGY","BACKGROUND","SUMMARY OF THE DESCRIPTION","DETAILED DESCRIPTION"],"p":["The present application claims priority to U.S. Provisional Application Ser. No. 61\/392,441, filed Oct. 12, 2010, entitled \u201cDEFINING A SOCIAL NETWORK MODEL IMPLIED BY COMMUNICATIONS DATA,\u201d by Hein et al., the entire contents of which are incorporated by reference as if fully set forth herein.","This application is related to U.S. Non-Provisional application Ser. No. 12\/499,775, filed Jul. 8, 2009, entitled \u201cSYSTEMS AND METHODS TO PROVIDE ASSISTANCE DURING ADDRESS INPUT,\u201d by Thatcher et al., the entire contents of which are incorporated by reference as if fully set forth herein.","At least some embodiments of the disclosure relate to social networks in general and, more particularly but not limited to, defining a social network model for a user using data implied by communications (e.g., emails or instant messages) to or from the user.","A social network service is an online service, platform, or site that focuses on building social networks among people (e.g., who share interests and\/or activities). A social network service typically consists of a representation of each user, his\/her social links, and various other additional services. Most social network services are web based and provide means for users to interact over the Internet. Social networking sites allow users to share ideas, activities, events, and interests within their individual networks.","The main types of social networking services are those which contain category places (such as former school-year or classmates), means to connect with friends (usually with self-description pages) and a recommendation system linked to trust. Popular methods now combine many of these, with the Facebook, Bebo and Twitter services widely used worldwide. The MySpace and LinkedIn services are also widely used in North America.","Traditionally, when joining a social network, a person has to build out his or her social network manually by adding friends. Often this requires that numerous requests be sent to and accepted by other persons that one desires to add as friends to his or her network. Additionally, conventional OpenSocial containers (e.g., iGoogle) require the user to explicitly declare those persons that are part of a group of \u201cfriends\u201d and those persons that are merely part of the group \u201call.\u201d","Systems and methods are provided to define a social network for a user using data implied by email communications to or from the user. Some embodiments are summarized in this section.","In one embodiment, a computer implemented method includes: scanning, by a data processing system, a set of messages of a user to identify a plurality of primary persons addressed in the messages as a primary recipient and to identify a plurality of secondary persons addressed in the messages as a secondary recipient; mapping, by the data processing system, the primary persons to a plurality of friends and mapping the secondary persons to a plurality of other persons or contacts; and defining, by the data processing system, a social network model based on the friends and other persons, wherein the model comprises a friends category including the friends and an all category including the friends and other persons.","The disclosure includes methods and apparatuses which perform these methods, including data processing systems which perform these methods, and computer readable media containing instructions which when executed on data processing systems cause the systems to perform these methods.","Other features will be apparent from the accompanying drawings and from the detailed description which follows.","The following description and drawings are illustrative and are not to be construed as limiting. Numerous specific details are described to provide a thorough understanding. However, in certain instances, well known or conventional details are not described in order to avoid obscuring the description. References to one or an embodiment in the present disclosure are not necessarily references to the same embodiment; and, such references mean at least one.","Reference in this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover, various features are described which may be exhibited by some embodiments and not by others. Similarly, various requirements are described which may be requirements for some embodiments but not other embodiments.","In one embodiment, a method comprises scanning a set of messages (e.g., emails to and from a user of a client device) to identify a plurality of primary persons addressed in the messages as a primary recipient and to identify a plurality of secondary persons addressed in the messages as a secondary recipient; mapping the primary persons to a plurality of friends and mapping the secondary persons to a plurality of other persons or contacts; and defining a social network model based on the friends and other persons, wherein the model comprises a friends category including the friends and an all category including the friends and other persons.","In one embodiment, each primary recipient is listed in a To field of an email, and each secondary recipient is listed in a Cc or Bcc field of an email. In one embodiment, the method further comprises scanning the set of messages to build person profiles (e.g., see discussion regarding  below) for each of the primary persons and each of the secondary persons.","In one embodiment, the method further comprises exposing data from the person profiles for the primary persons in response to a request from a gadget (e.g., a social gadget running on the user terminal). In one embodiment, the method further comprises storing the social network model on the user terminal (the gadget is running on the user terminal at the time of the request). In one embodiment, the method of further comprises storing the social network model on the user terminal, wherein the gadget is running on a device other than the user terminal at the time of the request (e.g., a remote server).","In one embodiment, the set of messages corresponds to a user, and the mapping of the primary persons is performed without manual input from the user regarding each of the friends. This is in contrast to prior approaches that require the user to manually indicate friends and\/or for other users to accept a friend request. In one embodiment, the defined social network model is stored on the user terminal. In one embodiment, the set of messages is stored on the user terminal (e.g., stored as a local email corpus) during the scanning.","In one embodiment, the social network model is implemented with a set of common application programming interfaces (APIs) for a web-based social network application (e.g., implemented on an OpenSocial container). In one embodiment, the set of APIs is hosted on the user terminal (e.g., the OpenSocial container is implemented on the user terminal). In one embodiment, the method further comprises computing scores (as discussed below) of the primary persons to determine relevancy to the user, and selecting persons for the friends category of the social network model based on the scores.","Some of the embodiments described in more detail below use gadgets and may be implemented using the OpenSocial specification. A gadget refers to a computer program that provides services without needing an independent application to be launched. Gadgets typically run in an environment that manages multiple gadgets. There are several implementations based on existing software development techniques, such as JavaScript.","Some gadgets work with social networks. A social gadget uses an XML file and may be implemented, for example, using Google gadgets and Google's iGoogle service with the OpenSocial application programming interface (API). Gadgets that work with the OpenSocial API are known as OpenSocial gadgets.","OpenSocial is a set of APIs for building social applications that run on the web (see, e.g., the OpenSocial Specification 1.0, which is incorporated herein by reference in its entirety). OpenSocial's goal is to make more apps available to more users, by providing a common API that can be used in many different contexts. Developers can create applications, using standard JavaScript and HTML, that run on social websites that have implemented the OpenSocial APIs. These websites, known as OpenSocial containers, allow developers to access their social information; in return they receive a large suite of applications for their users.","The OpenSocial APIs expose methods for accessing information about people, their friends, and their data, within the context of a container. This means that when running an application, for example, on Orkut, a person is interacting with his or her Orkut friends, while when running the same application on MySpace, the person can interact with his or her MySpace friends.","More specifically, OpenSocial is a set of common application programming interfaces (APIs) for web-based social network applications, developed by Google along with MySpace and a number of other social networks. Applications implementing the OpenSocial APIs will be interoperable with any social network system that supports them, including features on sites such as Hi5.com, MySpace, Friendster, and Yahoo!.","Based on HTML and JavaScript, as well as the Google Gadgets framework, OpenSocial includes a set of APIs for social software applications to access data and core functions on participating social networks. Each API addresses a different aspect. As examples, one is the general JavaScript API, one is for people and friends (people and relationship information), one is for activities (publishing and accessing user activity information), and one is for persistence (simple key-value pair data for server-free stateful applications).","Each OpenSocial gadget consists of two XML files: an Application Manifest and a Gadget Manifest. The Application Manifest primarily describes the gadget (Title, Description, Author). The Gadget Manifest contains the HTML\/CSS\/Javascript for the gadget. This is information about the features the gadget needs (e.g., access to friends, certain user interface libraries, etc.), and language information (English, German, etc.). These features are described in the OpenSocial documentation and typically work the same across OpenSocial containers.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 9","b":["901","905","903","901","901","151","131","911","901","151","920","922","924","901","902"]},"In one embodiment, user terminal () has a social network model () determined using a method similar to or the same as that for user terminal (). Typically, social network model () will be different from model () for user terminal () because the email corpus will be different.","User terminal () may further include a user control interface that permits the user to selectively implement or use various gadgets () on user terminal (). For example, the user may disable certain gadgets. In one embodiment, gadgets () have access to social data on user terminal (), including social network model (). Gadgets () may, for example, have access to social data for friends of the user as defined by model (). Personal data (e.g., contact information, photos) of such friends that is stored on user terminal () as friend data () (e.g., data stored as profiles ()) may be provided in response to requests from gadgets (), or to gadgets running on remote server () or devices other than user terminal (). Person profiles as may be used in profiles () are discussed in detail below and are illustrated in .","In one embodiment, user terminal () hosts a social website as an OpenSocial container (), in conformity with the OpenSocial specifications. OpenSocial container () permits software applications running, for example, on user terminal (), user terminal (), or on Application Server A or B to access social data in social network model (). The user of user terminal () may be provided a user interface to permit control of such access based on various factors (e.g., social relationship).","In one embodiment, OpenSocial container () exposes a user's friend data, and further exposes the user's data as well (e.g, the user's name, phone number, email address, etc.). In some cases, actual email data of the user may be exposed. In one embodiment, gadgets () include an Amazon gadget and a Sports gadget.","The Amazon gadget scans the currently-selected email (i.e., selected by the user in an email application viewing interface) for Amazon URLs. If the gadget finds a match, the gadget shows a picture of the product and its star rating to the user (e.g., in a window of the email application). For friend identification (i.e., the building of a friends list in social network model ()) server interaction by user terminal () is not necessary (e.g., when using a locally-stored email corpus ()), but gadgets () may interact with servers (e.g., application servers (, )). For example, the Amazon gadget parses the URL, makes a request to Amazon's server for information about that URL, and then shows the information to the user.","For the Sports gadget, if the user selects a person with a phone number, the Sports gadget will look at the selected person's area code, and show the current user sports scores related to the currently selected person's area code. This could be used by, for example, a salesperson who wants to engage a potential client in a relevant conversation.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 10","b":["903","905","903","901","115","117","101","903"]},"In one embodiment, email corpus () is scanned to identify direct contacts and indirect contacts. Direct contacts () are messages in which the contact (i.e., person) is listed in the To field of the message where the message is sent by the user to another person, or where the user receives the message. Indirect contacts () include all other messages on which the user has been copied (e.g., by Cc or Bcc).","Next, direct contacts () are mapped into a list of friends (), and direct contacts () and indirect contacts () together are mapped into a list of \u201call\u201d contacts () (i.e., all contacts of the user, including friends). These lists of friends and all contacts define social network model (), which may be used as a basis via which access to certain friend data stored on user terminal () is provided in response to process requests (e.g., requests by a gadget such as gadgets ()). In alternative embodiments, other mappings of message communication information may be used to define alternative social network models.","A network builder running on user terminal () may be used to perform the scanning and mapping above to provide social network model (). An example is network builder () described with respect to  below.","In one embodiment, profiles () (e.g., created using profile builder () discussed below) and\/or ranks of persons (determined using relevancy scores computed as discussed below) are used to build and\/or rank a set of profiles for persons in the emails of the user of user terminal (). A process running on user terminal () (e.g., network builder ()) automatically selects some of the persons in the profiles (). In response to a request for friends from an OpenSocial gadget, the process queries for the direct contacts (). The computed relevancy scores that rank the persons may be used in the selection of the friends. The social network is an aggregation of these \u201cfriend\u201d relationships, and may include other relationships inferred from the email communications.","In another embodiment, user terminal () scans through the user's email corpus as described herein, and, among other tasks, sets up user profiles and the user's localized social network based on that corpus. This social network is centered around senders and recipients; basically, anyone with an email address in one of the emails. In alternative embodiments, this process is not limited to email, but may be applied to any sort of document. The social network is constructed by parsing entities from the contents of the document and not necessarily senders or receivers. Regardless of the manner in which the social network is built, a layer is put on top of the social network. The use of the OpenSocial specification allows third party applications to have controlled access to a user's data (e.g., on user terminal ()) and the user's friends' data (e.g. on user terminal ()) in a relevant context in order to provide some sort of useful utility (e.g., implemented as a gadget).","In one embodiment, the strength of the relationships of the user with the other persons is based on the content of the messages or documents sent to or received by the user (the importance of people relevant to a user may be ranked as described herein). OpenSocial provides the ability to access a user's contacts or the user's friends, which are a special subset of contacts. As described herein, persons may be categorized into a \u201cfriends\u201d group or not, which is suitable for an OpenSocial implementation. Network builder () maps direct contacts () (i.e., an email directly to or from a user, but not where the user is Cc'd) to OpenSocial's concept of friends, and everyone else to OpenSocial contacts (the aggregation of friends and everyone else corresponds to a category of \u201call\u201d persons or contacts).","In one embodiment, user terminal () scans a local email corpus () and builds contacts for each person it encounters. Terminal () creates connections between the persons as they are seen together on the various emails (e.g., if a person A emails person B, these persons are connected). Terminal () is then able to use these connections to determine a given person's social network (i.e., the network for a user is a list of all the persons the user has emailed or been emailed by).","The OpenSocial specification defines two groups of people: \u201cfriends\u201d and \u201call.\u201d The \u201call\u201d group for a given user is all of the people in that user's network (i.e., all of the direct and indirect contacts). The friends group for a given user is a subset of his or her network including only those people that the user has emailed directly or been emailed by (i.e., if person A and person B are only connected because they were Cc'd on the same email, person A and person B are not considered friends).","Typical OpenSocial containers (e.g., iGoogle) require the user to explicitly declare persons who are part of the group \u201cfriends\u201d and persons who fall in the group \u201call.\u201d In this embodiment, user terminal () does this automatically, removing the need for the user to invest a significant amount of time setting up his or her network before the user can begin using it. This social network model functionality may be built on top of the profile building processes described in greater detail below with respect to user terminal () and profiles (). In alternative embodiments, the social network modeling approach described herein could be used in a comprehensive social networking service in which users are able to interact in a more traditional social context without having to first manually build out a list of connections.","In one embodiment, direct contacts () are emails that are mailed directly to a person using the To field or that are received from a person using the To field. Indirect contacts () are emails that the user is Cc'd on or that the user sends to somebody and copies (e.g., Cc's) them. Social networks have a notion of first-level friends and second and other-level friends. The process of this embodiment takes the information that is in an email corpus and maps it onto various of those levels. This process infers the user's social network from the data by mapping the data onto these traditional social network concepts.","In this embodiment, the social network is built using the local email corpus as follows: email communications are regularly indexed (e.g., each time a new email is received, each time the user manually initiates it, and\/or at predetermined periodic intervals). Relevant information such as names, times, dates, addresses, attachments, etc. is extracted from the emails. From this extracted data, a list of contacts is built (including a record of who is Cc'd on an email, who an mail is sent to, who an email is received from). All of this information is gathered as the indexing process is performed.","Once the above indexing is complete, the contacts may be searched more quickly than the raw email corpus data. The contacts are then ranked based on relevancy to the user as described herein. At this point, user terminal () has an indication of the user's network (e.g., how people are connected, who the user's direct contacts are, and who the user's indirect contacts are).","In the above embodiment, open social gadgets are used on user terminal () (such as gadgets ()). OpenSocial APIs are opened so that the user's network of friends is exposed to applications that run on user terminal (). For example, an application may obtain a list of the user's top ten friends and expose information about these friends such as exposing their emails, phone numbers or other data obtained during the email extraction process above.","In the above embodiment, the friend's information is stored locally on user terminal (). After the social network model () is automatically created, user terminal () is able to expose information from social network model () to third party application developers that prepare gadgets to run on user terminal (). More specifically, these third party developers make gadgets that may be used on user terminal () (e.g., downloaded by the user from application server () onto user terminal ()). There may be gadgets on user terminal () for the Facebook, Linked In, and Twitter services, and these gadgets may access the friend and other data stored in profiles ().","In the above embodiment, the Twitter gadget is now used as an example with a hypothetical Person A and Person B. The Twitter gadget on user terminal () has access to data about Person B (e.g., email and phone number, etc.). The Twitter gadget may expose the list of friends for Person A, and then the Twitter gadget can determine all of the Twitter accounts for those friends (e.g., by accessing an application server of Twitter).","Specific embodiments of various data processing systems that may be used to implement the above social network building are now described below. These systems generally permit communications among a number of users.","Many systems and applications have been developed to allow people to communicate with each other. Such systems and applications may provide communication via emails, instant messages, text messages, web\/online postings, etc. Email systems typically use servers to receive the electronic messages from the senders, to store and\/or forward the messages on behalf of the senders, and to deliver the messages to the recipients. Since the servers can store the messages for a period of time before delivery, a recipient and a sender do not have to establish a direct communication connection to facilitate the transmission of the electronic message. Thus, the sender and the recipient do not have to be online simultaneously for email communications.","In an email system, an email client application is typically used to receive and display messages and to compose and send messages. The email client application communicates with one or more email servers to receive and send messages. Email addresses are used to identify the recipients of the messages.","An email client application may be a stand-alone application running on a user terminal (e.g., a personal desktop or portable computer, a personal digital assistant (PDA), or a smart phone). The email client application stores messages received from one or more email servers, and can display the stored messages to a user even when the user terminal is not connected to the network.","An email client application may also be implemented in part via a server. The server stores the messages on behalf of a user, and when requested, formats a message as a web page for display on a browser used by the user.","Instant messaging (IM) allows real-time communication between people. A communication connection between the devices of the participants in an instant messaging session is required for the delivery of the instant messages sent during the session. User names are typically used to identify the online presence and thus the online addresses (e.g., Internet Protocol (IP) addresses) of the users, which are used to establish the communication connections for the instant messaging session. Therefore, the user names of instant messaging systems can be considered as the addresses for establishing online connections for instant messaging sessions, from the point of view of the users.","Text messaging allows users to communicate via mobile phones over a cellular communications network. Text messages are typically transmitted via Short Message Service (SMS) or Multimedia Messaging Service (MMS). The phone numbers of the mobile phones are used as the addresses of the recipients of the text messages.","Some user terminals (e.g., personal computers, PDA, mobile phones) may support communications in multiple modes, such as email, instant messages, and text messages. Some applications have been developed to organize address information for users. For example, an address application may store information about a plurality of persons. For each of the persons, the address application may store the name of the person, the email address of the person, the street address of the person, the IM address of the person, the web page address of the person, phone numbers of the person, etc.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 1","b":["101","101","901","101","901"]},"In , the user terminal () is configured to store the messages () received at the user terminal () and the messages () sent from the user terminal (). Each message () may be an email, and typically has a To field and may include a Cc and\/or Bcc field. The user terminal () includes a message viewer () which can be used to display a message selected from the received messages () or selected from the sent messages ().","In , the user terminal () further includes a network builder () which is configured to scan the set of messages (e.g., emails) of a user of the user terminal () to identify a plurality of primary persons addressed in the messages as a primary recipient (e.g., by a To field) and to identify a plurality of secondary persons addressed in the messages as a secondary recipient (e.g., by a Cc field), and to map the primary persons to a plurality of friends and map the secondary persons to a plurality of other contacts. This mapping is used to define a social network model as described herein.","In , the user terminal () further includes a message composer () which is configured to present a user interface to facilitate the composition of an outgoing message.","In one embodiment, the user terminal () is configured to generate an address set () based on the addresses that have been specified in the message composer () for one or more previously sent messages (). When an address is used in the message composer () to specify a recipient of a message, the address is added to the address set (), if the address is not already in the address set ().","In one embodiment, the message composer () uses the address set () to suggest candidates for the completion of an input when the user is typing an address. For example, when the characters typed in an address field are the same as the first characters in a number of email addresses in the address set (), the message composer () displays the email addresses as possible candidates for the completion of the input.","In one embodiment, the user terminal () further includes a profile presenter (), which can provide suggestions for completion based on the profile set () maintained by the profile builder ().","In one embodiment, the profile builder () is configured to extract profile data of various persons based on the received messages () and the sent messages (). The profile builder () can extract information about persons not only from the headers of the messages where the senders and the recipients of the messages are specified, but also from the bodies of the messages and from other online sources, such as online directories, social networking websites, web pages, result pages found by search engines, etc.","Since the profile builder () obtains the profile data for various persons referenced in the messages ( and ), the profile set () is more comprehensive than the address set ().","In one embodiment, the profile builder () is configured to scan the received messages () and the sent messages () for email addresses and names associated with the email addresses. The profile builder () generates a profile for each person identified to create the profile set (). When new messages are received or sent, the profile set () is updated based on the new messages.","In some embodiments, the profile builder () may further identify persons based on scanning the received messages () and the sent messages () for phone numbers, names, addresses, etc.","In some embodiments, some or all of the components (-) in the user terminal () may be hosted on a server remote to the user terminal () (e.g., accessible via a website and a web browser). For example, in one embodiment, the received messages () and the sent messages () may be hosted on a web site; and the user can use a web browser to view a selected one of the messages ( and ).","For example, the profile builder () may be configured to communicate with the server to extract the profile set () from the messages ( and ) hosted on the server. Alternatively, the profiler builder () may also be hosted on the server to build the profile set () on the server.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 2","FIG. 2"],"b":["131","141","142","143","144","145","146","147","148","149"]},"In one embodiment, the profile builder () obtains at least some of the information for the fields from the received messages () or the sent messages () to identify the person, and then uses other information sources to obtain the data for the other fields in an automated way to collect the profile information on behalf of the user.","For example, the profile builder () may use social networks, search engines, photo services, etc. to obtain the photo (), the business information (), etc.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 3","FIG. 3"],"b":["119","101","131","151","151"]},"In one embodiment, the user terminal () communicates with the message server () to receive and send the messages ( and ).","In one embodiment, after the profile builder () extracts from the messages ( or ) certain information (e.g., an email address, an IM user name, a phone number, and\/or a name) about a person, the profile builder () uses the extracted information to query various servers to obtain further information (e.g., photo (), phone number (), address information (), and\/or business information ()) about the person to create the profile ().","For example, the user terminal () may query a web search engine (), an online directory (), a social network server (), a business website (), a personal website (), a media sharing website (), a map and direction web site (), an online retailer (), a travel website (), a location website (), and\/or other servers. Information that can be used as search criteria include names, screen names, social network profile names, social network profile URLs, physical addresses, website URLs, email addresses, or telephone numbers. Information that is collected as a result of these queries may be used in future searches to identify additional information that may be used to create a person profile.","For example, the user terminal () may receive an email sent by a person via the message server (). The profile builder () of the user terminal () is configured to perform a search using the web search engine () with the email address of the person as the search criteria. The search engine () may return a search result that includes the phone number () of the person. The profile builder () extracts the phone number () from the search result and stores the phone number () as part of the profile () of the person. The search engine () may also return the URL for or link to a personal website () belonging to the person. The personal website () may contain additional information about the person that may be used to create a person profile, such as additional contact information or biographical information.","In another example, the email address belonging to the person may include an extension (or domain name) for a company. The profile builder () of the user terminal () is configured to perform a search using the search engine () with the email extension (or domain name) as the search criteria. A result returned by the search may be a business website (). The profile builder () of the user terminal () is further configured to search the business website () to obtain information relevant to the profile () of the person. For example, a web page on the business website () may contain additional information about the person that may be used to create a person profile, such as business information (), additional contact information or biographical information.","In another example, the profile builder () of the user terminal () is configured to perform a search using an online directory () (e.g., a person search directory, a yellow page directory) with the name () of the person or other contact information as the search criteria. The online directory () may return search results that include additional contact information and other information that may be used for the profile () of the person.","In another example, the user terminal () may receive an email sent by the person via the message server (). The email may contain a social network user name for the person. The profile builder () of the user terminal () is configured to extract this social network user name from the email and use it to access the social network server (). A webpage on the social network server () may contain additional contact information and other information that may be extracted and used by the profile builder () to create the profile () of the person. The webpage on the social network server () may also contain additional contacts that may be associated with the person in the profile (). For example, persons on the friends list of the webpage on the social network server (), or persons who have posted comments or messages on the social network server () may be listed as contacts in a contact network for the person.","In another example, a search performed using the search engine () may return a URL or link for a media sharing website () (e.g., for sharing photos or videos). The media sharing website () may store profile information about the person. Thus, the profile builder () of the user terminal () can extract additional contact information or biographical information from the media sharing website () for the creation of the profile () of the person. For example, a profile belonging to the person on a video sharing website may include an instant message screen name (user name) for the person. This screen name may be extracted and displayed as part of the profile () of the person.","In one embodiment, information extracted from communications between the person and other users may also be used to update profile information on a social network server () or other websites. For example, the profile builder () of the user terminal () may detect that the person has primarily used email address \u201cdavid@foo.com\u201d in recent communications, whereas the profile of the person on the social network server () shows his email address as \u201cdavid@bar.com.\u201d The profile builder () of the user terminal () can share the new email address of the person with the social network server () to allow the social network server () to automatically update the corresponding information about the person, or to suggest the person to make an update based on this changed behavior detected by the profile builder () of the user terminal ().","In one embodiment, the profile builder () of the user terminal () can also extract information about the person from the travel website () and the online retailer () for the creation of the profile () of the person. For example, after an email containing information about a flight itinerary is received in the user terminal (), the profile builder () of the user terminal () may extract a flight number or other information about a flight from the email. The profile builder () of user terminal () then queries the travel website () using the flight number or other flight information as search criteria. Information about the flight, such as the destination city or the departure city, expected departure time, expected arrival time, expected delays, weather in the destination city, weather in the departure city, or any changes to the flight may be used as part of the profile () of the person.","In another example, an email containing information about an item or service that the second user is interested in purchasing may be received in the user terminal (). The profile builder () of user terminal () is configured to query one or more search engines, websites, or on-line retailers () to determine which retailer or website has the best price or currently has the item in stock or the service available. This information is extracted by the profile builder () and displayed by the profile presenter () as part of the profile () of the person.","In one embodiment, the profile builder () of the user terminal () can also extract information from a map and direction website () and location servers () as part of the profile () of the person. For example, the person may own a GPS unit, cell phone, or other device that is capable of transmitting the person's current physical location to the location server (), which allows other users to access the person's current location information. If the user of the user terminal () has permission to view the location information of the person, the profile builder () of the user terminal () may access the location server () over the network () to receive location information about the person. This location information can be displayed as part of a person profile.","The profile builder () of the user terminal () may also access the map and direction website () to create a map of the current location of the person, or to generate directions to the current location of the person. The map or directions may be displayed by the profile presenter () as part of the profile () of the person. The map and direction website () may also be used to generate a map or directions to one or more known street addresses of the person, such as a work address or home address. The map or directions can be displayed by the profile presenter () as part of the profile () of the person.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 4","FIG. 4"],"b":["201","201","203","101","162","402","404"]},"In one embodiment, when the entry box () detects a change in the content received in the entry box () (e.g., a keystroke is received in the entry box (), as the user types a letter on a keyboard to provide an input), the profile presenter () determines a set of suggestions for the completion of the input in the entry box (). The profile presenter () uses the incomplete input in the entry box () as a search criterion to find from the profile set () a set of suggestions for the complete address input. The suggestions are presented in the window () as a selectable list.","In one embodiment, when the message composer () has an existing, native mechanism for displaying suggestions (e.g., making suggestions based on address set ()), the profile presenter () can be configured as an add-on module to display these suggestions as well and to hide the native mechanism of the message composer () for displaying suggestions.","In , the item () on the top of the list is highlighted; and the user may select the highlighted item () with a keystroke (e.g., pressing Tab key, Enter key, Home, End, PgUp, PgDown, etc.). The user may use the arrow keys to move the highlight up or down the list to highlight a different item, or provide additional input in the entry box () to cause the profile presenter () to update the suggestions in the window (). The user may also use the cursor () to select an item using a cursor control, such as a mouse, a track ball, a touch pad, a touch screen, etc.","In one embodiment, when the message composer () has an existing, native mechanism that uses these keys for the display of suggestions, the profile presenter () configured as an add-on module can hide these keystrokes from the native mechanism.","In one embodiment, after an item is selected from the list presented in the suggestion window (), the address represented by the item is inserted by the profile presenter () into the entry box () to replace the corresponding portion that is used to suggest the selected item; and the suggestion window () is closed automatically.","In some embodiments, the message composer () may be configured to perform post-processing, such as name checking, on the inserted text in the entry box () a few moments after the text has been inserted. The insertion by the profile presenter () is performed in a way that allows such post-processing by the message composer () to continue functioning. For example, if the message composer () loses focus or activation, it starts post-processing the entries in the textbox. The profile presenter () is configured to temporarily prevent this from happening while the suggestion window () is visible and causes this to happen when the suggestion window () is closed. To hide the suggestion window (), the suggestion window () is configured as a topmost window that is initially not activated. The Outlook textbox window is subclassed via a code-injection mechanism to temporarily preventing it from getting \u201ckill focus\u201d messages (e.g., through intercepting such messages, and then throwing them away). After the suggestion window () becomes invisible, the profile presenter () sets the focus back to the textbox window and causes the post-processing to be performed.","For example, in , the incomplete input \u201cGraf\u201d is received in the entry box (). The cursor \u201c|\u201d in the entry box () indicates the insertion point for subsequent keystrokes received in the user terminal (). While the entry box () is expecting additional input from the user, the profile presenter () uses the incomplete input \u201cGraf\u201d to identify a set of suggestions, such as mgraf@gmail.com for Mary Graf, ericg@yahoo.com for Eric Grafstrom, graffiti@hotmail.com for Steve Curtis, graffiti@pacbell.net for SFPD, etc., based on the profile set () established by the profile builder ().","In one embodiment, the suggestions are identified by matching the incomplete input with names, addresses and\/or other profile data of the persons in the profile set (). The incomplete input may match the beginning of a last name, the beginning of a first name, the beginning of the name of an organization, the beginning of a domain name of an email address, the beginning of the top level domain name of an email address, the beginning of the email prefix, the beginning of a word in the job title (or the beginning of the job title), the beginning of the city of the person, etc. In some embodiments, when an email prefix contains one or more separators, such as \u201c_\u201d or \u201c.\u201d or \u201c-\u201d, the email prefix is broken down into segments or chunks; and the incomplete input may match the beginning of any of the segments or chunks. When there is a match, the person can be selected as a candidate for the suggestions. Thus, the searching for a match is not limited to matching the beginning of an address that the user has previously typed for a previous outgoing message.","In , the top item, mgraf@gmail.com for Mary Graf, is highlighted and can be selected by pressing the Tab key or the Enter key. Alternatively, the user may select the second item, ericg@yahoo.com for Eric Grafstrom, by pressing a mouse button while the cursor () is over the second item. The profile presenter () is configured to use the selected address to replace the incomplete input \u201cGraf\u201d received in the entry box ().","In , if the user further types a letter \u201cf\u201d, the profile presenter () will use the incomplete input \u201cGraff\u201d to eliminate some suggestions (e.g., mgraf@gmail.com for Mary Graf, ericg@yahoo.com for Eric Grafstrom) and update the list in the suggestion window ().","Thus, the profile presenter () uses the profile set () to identify suggestions based on incomplete input provided in the entry box () and to allow the user to select a suggestion to complete the input.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 4","b":["205","201"]},{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 5"},"In , the suggestions are presented as two parts. The part above the separator () is identified from the address set () and the part below the separator () is identified from the profile set ().","In one embodiment, the address set () is generated by collecting the addresses that have been previously specified in the address fields of the message composer () of the user terminal (). In one embodiment, the suggestion above the separator () is identified by matching the incomplete input \u201cGraf\u201d with the starting letters of the addresses in the address set (). The addresses in the address set () that have the leading characters \u201cgraf\u201d are selected to generate the suggestions above the separator ().","In one embodiment, the message composer () has an existing, native mechanism for displaying suggestions (e.g., making suggestions based on address set ()). The profile presenter () is configured to obtain the suggestions from the native mechanism (e.g., via scraping, inspecting, querying, etc.) and displays the suggestions above the separator ().","In one embodiment, the suggestions presented above the separator () are identified by the message composer (). The profile presenter () obtains the suggestions from the message composer (), presents the suggestions in the suggestion window (), hide the suggestions the message composer () would have shown (and thus prevents the message composer () from presenting the suggestions in a separate window).","In another embodiment, the profile presenter () shows the suggestions based on the profile set () in one suggestion window; the message composer () shows the suggestions in a different suggestion window; and the profile presenter () aligns its suggestion window with the suggestion window of the message composer () so that the two suggestion windows appear like two panels of a large window. Alternatively, the profile presenter () presents its suggestion window over the suggestion window of the message composer () (to cover up and thus effectively disable the suggestion window of the message composer ()). In one embodiment, the profile presenter () causes the suggestion window of the message composer () to be invisible on subsequent invocations to hide the suggestion window of the message composer ().","In another embodiment, the profile presenter () uses the address set () to identify the suggestions presented above the separator () in the suggestion window (), using the same approach the suggestion window of the message composer () would use.","In one embodiment, the profile presenter () includes an auto suggest manager. The auto suggest manager can turn on or turn off the feature of auto suggestions generated based on the profile set () in accordance with the preferences of the user. The auto suggest manager provides encapsulation, providing an easy interface for external applications to use the auto suggest feature without understanding its implementation. It provides a mechanisms to add the auto suggest feature to a new window (message, contact, etc.), to \u201cclean up\u201d or remove the auto suggest feature from a window or all windows, to allow logging of auto suggest state and problems, and to determine any special preferences the user may have set in the native client (e.g., Outlook).","In one embodiment, the profile presenter () includes a suggestion window () that presents a dialog box or a list box to show the suggested results. The profile presenter () includes a view controller to show or hide the suggestion window (). The view controller also positions the suggestion window () in the correct location (which varies as the user types in text), participates in \u201chiding\u201d the suggestion window () from the native application (e.g., Outlook) so that the native application is not aware of the existence of the suggestion window (), and notify other modules of navigation commands (PgUp, PgDown, etc.) and user selections. When a selection or keyboard command (e.g., arrow keys, tab return) related to the suggestions occurs, the suggestion window () (or a keyboard hook or the inspector controller, discussed below) provides messages to the view controller for processing.","In one embodiment, the profile presenter () further includes a result controller, which decides what results to show and when. After the profile presenter () detects that the user is typing in an address field (e.g., To, Cc, or Bcc fields of a window to compose an email), the result controller uses the incomplete input as a search criterion to search for the suggestions based on the profile set () and\/or based on the address set (). The view controller causes the display of the suggestion window () to show the search results. If the user selects a suggestion from the window (), the address corresponding to the user selection is put into the address field.","In one embodiment, the profile presenter () is implemented as an add-on module for an existing communications client, such as Microsoft Outlook, which can make suggestions by selecting from the address set () the email addresses that start with the incomplete input typed by the user in the address field. The suggestion window () of the profile presenter () subclasses the suggestion window of the existing communications client; and the profile presenter () hides the suggestion window of the existing communications client and creates a keyboard hook as well as a subclass mechanism using code-injection to intercept keyboard messages and other messages sent to the hidden suggestion window of the existing communications client to prevent it from processing these keys (e.g. PgUp, PgDown, Tab, Return), and also to cause it to process fake keystrokes or other messages (e.g. to implement \u201cdelete\u201d functionality\u201d). In one embodiment, the keyboard hook is a global WH_KEYBOARD_LL hook; in another embodiment, the keyboard hook is a WH_KEYBOARD hook. In one embodiment, the profile presenter () creates only one such keyboard hook per thread (especially for the WH_KEYBOARD hook).","In one embodiment, the result controller is configured to handle a rapidly typing user, by stopping a previous search and then starting a new search. For example, if a search for suggestions is started based on the initial input \u201cer\u201d and before the suggestions are displayed the user further typed \u201cic\u201d to provide the input \u201ceric,\u201d the result controller stops the search for suggestions based on \u201cer\u201d and starts a new search for suggestions based on \u201ceric.\u201d","In one embodiment, an inspector controller is used to hook the functionalities of the profile presenter () with the existing communications client, which may be the message composer () in one embodiment. When a window for the message composer () is constructed and shown, the inspector controller determines whether the user is typing in a field (e.g., entry box ()) that is configured to receive an address. If the user is typing in an address field, the inspector controller instantiates a keyboard hook to obtain what the user types in the address field to allow the profile presenter () to generate the suggestions based on the profile set ().","In one embodiment, the inspector controller determines if the window should have auto suggest functionality. Read-only windows or unsupported type of windows should not have the auto suggest functionality. The inspector controller then searches for suitable textboxes (using a \u201cControl Calculation mechanism\u201d) that should have auto suggest functionality attached to them. Since the native client (e.g., Outlook) has many configurations (\u201cuse Word Editor,\u201d use \u201cRTF Editor,\u201d etc.), different mechanisms are used and a fallback mechanism in case the initial search for a suitable window fails, and in some cases, additional code injection is required because the native client (e.g., Outlook) uses a different process for different windows. The inspector controller uses a \u201cSetProp\u201d mechanism to \u201cremember\u201d which windows have already been subclassed so that auto suggest functionality is correctly added to the newest window. Additionally, the inspector controller keeps track of which textbox (To, Cc, Bcc, etc.) the user is currently using. The inspector controller also is responsible for putting the user's selection (from the dialog) into the selected textbox control. The inspector controller also watches for various windows message in the various subclassed windows (e.g. Activation, Focus, Keyboard), \u201chiding\u201d (or \u201ceating\u201d) some of these message from the native client (e.g., Outlook) so as not to break other existing functionality of the native client (e.g., Outlook), and using others to notify the view controller that it should hide or show or change the suggestion window (). In addition to the subclass of the \u201cTextBox\u201d and \u201cOutlook AutoSuggest\u201d window, the main composer window is subclassed as well, and may subclass others in the future. Note that this subclassing mechanism is implemented using code injection and could in the future also be implemented using other mechanisms. Code injection \u201cinjects\u201d our code into another program (e.g. Outlook or Word) while it is running.","In one embodiment, the inspector controller subclasses the textbox (and also the parent window) into which the user is typing to receive the keys typed by the user, generate requests for new suggestions in response to keys typed by the user, scroll through the suggestions (e.g., when the user presses arrow keys), indicate a selection by the user (e.g., when the user presses Tab or Enter key) (some embodiments use subclass, some embodiments keyboard hook), the profile presenter () hide these keystrokes from the native client (e.g., Outlook window) (by \u201ceating\u201d or consuming the messages), and hide the suggestion window () when the keyboard focus is moved out of the textbox or user has activated another application or user has finished selection. The inspector controller instantiates the view controller to process the user input and subclasses the suggestion window of the message composer () to create the suggestion window (). The inspector controller (or the keyboard hook) contacts the view controller to process the user inputs when various keys are received in the textbox in which the user is typing.","In one embodiment, a window driver is used to work with the message composer () to obtain current caret position (the position of the text insertion point indicator). In response to the requests from the inspector controller and the suggestion window (), the window driver may selectively block messages from being passed on to other windows. When a selection is made, the window driver is configured to replace the incomplete input in the address field with the address corresponding to the selection.","In one embodiment, the profile presenter () is implemented as an add-on module to a native client, such as Outlook. The Outlook textbox windows are in some cases \u201crich edit controls\u201d which allow other controls to be embedded in them. The profile presenter () walk both the text and these embedded COM controls using COM (also known as OLE or ActiveX programming) to determine where the user is currently entering text (ignoring any other text or embedded controls before or after the current email address) so that the profile presenter () can correctly determine where the current user's entry begins and ends, what text to use to create suggestions for, and also which part of the text (or embedded controls) to replace.","In one embodiment, the profile presenter () uses a person-centric approach to identify the suggestions. The partial input (e.g., \u201cGraf\u201d received in the entry box ()) is used to match the names of the persons to identify the persons in the profile set () (e.g., the first name, the last name, the nickname, etc.). The profile presenter () sorts the matched persons based on a relationship score determined from the statistical data derived at least in part from the received messages () and the sent messages ().",{"@attributes":{"id":"p-0129","num":"0128"},"figref":"FIG. 6"},"In , after receiving () one or more letters that are typed in by an end user in an entry box configured to receive an address for an outgoing message, the profile presenter () determines () whether the one or more letters match part of a name in the profile set (). If there is a match (or more than one match), the profile presenter () retrieves () the addresses associated with the matched name(s), sorts () the addresses, and presents () the addresses for selection in suggestion window ().","In , if there is no name that matches the one or more letters, the profile presenter () determines () whether the one or more letters match part of an address in the profile set (). If there is a match (or more than one match), the profile presenter () retrieves () the matched address(es), sorts () the addresses, and presents () the addresses for selection in suggestion window ().","Thus, the user can input the names of the recipient to cause the profile presenter () to identify the persons with names matching the input to select the person and thus select the address of the person. The names of the recipient do not have to be part of the addresses to be matched and suggested.","In one embodiment, when a person has multiple addresses, the suggestion window () shows multiple suggestions for the addresses presented with the name of the person.","In another embodiment, when a person has multiple addresses, the suggestion window () shows one entry to suggest the person. If the person is selected, the suggestion window () is then updated to show a list of addresses of the person. If the user selects one or more addresses, the profile presenter () replaces the name of the person with the selected address(es) of the person; if the user does not select any of the multiple addresses, the profile presenter () replaces the name of the person with all of the multiple addresses. In one embodiment, if the user does not select any of the multiple addresses of the person, the profile presenter () replaces the name of the person with the top ranked address of the person in the To field and inserts the other addresses of the person in the Cc or Bcc field (or uses the top ranked address without using the other addresses of the person).","In , the profile presenter () attempts to first match names of the persons in the profile set () and, if there is no match in names, then match addresses of the persons in the profile set ().","In another embodiment, the profile presenter () may perform a search to match the beginning of a number of fields in the profile set (), such as, different fields of names of the persons in the profile set (), different segments of email addresses of the persons in the profile set (), the names of cities (or states or countries) of the persons in the profile set (), different words in the street addresses of the persons in the profile set (), different words of job titles of the persons in the profile set (), screen names of the persons in the profile set (), etc. Examples of different fields of names include first name, last name, middle name, nick name, etc. Examples of different segments of email addresses include segments or chunks of an email prefix separated by a separator, such as \u201c-\u201d, \u201c.\u201d, or \u201c_\u201d, different levels of domain names of an email address, etc. In some embodiments, the names of the persons are as part of the email addresses. In some embodiments, the names are from fields separated from the email addresses.","When the profile presenter () searches different types of fields, a match in different types of fields may be weighted differently. For example, a match in a name field may be given a first weight (e.g., 10), a match in an email prefix segment may be given a second weight (e.g., 8), a match in the top level domain name may be given a third weight (e.g., 1), and a match in other domain names (e.g., second level domain name, or lower level domain names) may be given a fourth weight (e.g., 2), etc. When a person or an address has multiple matches in different fields, the weights for the multiple matches may be added to compute the weight for the person or address. Alternatively, the highest weight for the multiple matches can be selected as the weight for the person or address. The weights for the matched persons or addresses can be used to sort the persons or addresses for selection of up to a predetermined number of suggestions for presentation to the user. For example, the weights can be applied to the relevancy scores of the matched persons or addresses to determine relevancy scores for suggesting the persons or addresses; and the profile presenter () selects up to a predetermined number of matched persons or addresses that have the highest relevancy scores for suggesting the persons or addresses.","In , the suggestions presented based on the profile set () are shown as a list of entries, where a typical entry includes the name and the address of the person. However, in other embodiments, the entries may further include other information, such as a photo image of the person, a job title of the person, a business association of the person, etc. In some embodiments, other details of the profile of the person are shown in a separate window when the cursor is positioned and remains positioned on the entry for the person (e.g., hovering over the entry).","In one embodiment, the profile presenter () ranks the persons for the suggestions to complete the address input, based on the relevancy index between the suggested persons and the user of the user terminal (). When dealing with long lists of contacts, such a relevancy index helps users find the most relevant contacts first.","In one embodiment, the profile builder () scans the messages ( and ) to capture the addresses of the senders and recipients of the messages ( and ). Each of the captured addresses is stored in an index file. When one of those addresses is seen in a header that describes the recipients and senders, the score for the address is increased by a predetermined amount (e.g., 1). In some embodiments, the profile builder () further scans the body of the messages ( and ) to identify additional addresses.","In some embodiments, different weights\/amounts are given to the score when the addresses are used in different fields (e.g., From, Reply-To, To, Cc, and Bcc fields of emails). For example, an amount of 3 may be given to the score when an address is found in a field that identifies the sender of the message (e.g., From or Reply-To fields of emails received by the user of the user terminal ()); and an amount of 1 may be given to the score when the address is found in a field that identifies the recipient of the message (e.g., To, Cc, and Bcc fields of emails sent from the user of the user terminal ()).","In some embodiments, the same amount is given to the score regardless of the type of fields in which the address is used (e.g., From, Reply-To, To, Cc, and Bcc fields of emails).","In some embodiments, the length of the elapsed time period since receipt of the message is further used to determine the amount given to the score. The occurrence of an address in a recent message can be given more weight than the occurrence of the address in a message received\/sent earlier than the recent message.","Thus, after the messages ( and ) are processed, each of the addresses has a relevancy score. The higher the score, the more relevant the address is to the user of the user terminal ().","In some embodiments, the relevancy score is computed from the data in the profile (), such as the total number of messages received from the person (), the total number of messages sent to the person (), etc. In some embodiments, the number of messages are counted based on the types of fields in which the addresses appear and the time periods in which the messages are sent or received.","In one embodiment, the profile builder () further groups the addresses by the names of the corresponding persons. Each person having a name in the profile set () may have one or more addresses. In one embodiment, the scores for the addresses of the person are summed to generate a score for the person. Thus, the higher the score, the more relevant the person is to the user of the user terminal ().","In one embodiment, when the suggestions are presented as a list of addresses, the scores for the addresses are used to sort the addresses. When the suggestions are presented as a list of persons, the scores for the persons are used to sort the list of names of the persons.","In another embodiment, the suggestions are presented as a list of addresses grouped according to the persons. The addresses for each person are grouped together and sorted within the group based on the scores of the emails. The groups are sorted according to the scores of the persons.","In one embodiment, the profile presenter () selects up to a predetermined number (e.g., 10) of candidates, after sorting the candidates for the suggestions based on the relevancy scores. The selected candidates are presented in the suggestion window () to help the user. Less relevant candidates are not presented in the suggestion window ().","While some of the embodiments are discussed here in the context of composing an email message, the techniques disclosed here can also be applied to the specifying of address information for instant messaging, text messaging, dialing a phone number, etc. Instead of matching the incomplete input to the exact address, the profile presenter () can match the incomplete input with identifiers of the persons in the profile set () to identify the persons as the basis for suggestions. Examples of identifiers include nickname, first name, last name, company name, domain name, user name, screen name, phone number, etc. In one embodiment, the suggestions are searched and presented in the form of suggested persons and thus, the suggestions are person-centric.","In some embodiments, the user terminal () may include different communication components that require address information for different types of communications, such as email, instant messages, text messages, phone calls, etc. The profile presenter () may use the profile set () to generate the suggested candidates for completing an address input for the different types of communications.","In some embodiments, the relevancy score is computed for the person without considering the type of communications. In other embodiments, the addresses having the same type as the address to be suggested are given more weight than other types of addresses. For example, when ranking the persons for suggesting addresses for instant messaging, the addresses for instant messaging may be given more weight than addresses for other types of communications, such as email, phone calls, etc. Thus, for different types of communications, the profile presenter () may suggest different lists of persons based on the same profile set () and the same incomplete input.",{"@attributes":{"id":"p-0153","num":"0152"},"figref":["FIG. 7","FIG. 7"],"b":["119","251","115","117","119","115","117"]},"The profile builder () identifies () the names of persons at the addresses to create profiles () for the persons, based on scanning the messages ( and ) and\/or querying other data sources in an automated way, such as the web search engine (), online directory (), social network server (), and other websites.","In one embodiment, the profile builder () computes () a relevancy score for each of the addresses based on a number of messages in which the addresses are used and types of fields in which the addresses are used in the messages. For example, instances where an address is used to specify a recipient of a message sent from the user of the user terminal () may be given more weight than instances where the address is used to specify a sender of a message received by the user of the user terminal ().","In one embodiment, the profile builder () also computes () a relevancy score for each of the persons based on the relevancy score of the addresses of each person.","In , in response to an incomplete input in an address field, the profile presenter () identifies () a set of persons by matching the incomplete input with names of the persons and\/or the addresses of the persons. The profile presenter () sorts () the addresses of the identified persons according to the relevancy scores of the persons and\/or the relevancy scores of the addresses, and selects and presents () up to a predetermined number of suggestions from the sorted addresses. In response to a user selection of one of the suggestions, the profile presenter () replaces () the incomplete input with the user selected address.",{"@attributes":{"id":"p-0158","num":"0157"},"figref":["FIG. 8","FIG. 8","FIG. 8"],"b":["901","902","920","922","924"]},"In one embodiment, the user terminal () can be implemented as a data processing system, with fewer or more components, as illustrated in . When one or more components of the user terminal () are implemented on one or more remote servers, the servers can be implemented as a data processing system, with fewer or more components, as illustrated in .","In , the data processing system () includes an inter-connect () (e.g., bus and system core logic), which interconnects a microprocessor(s) () and memory (). The microprocessor () is coupled to cache memory () in the example of .","The inter-connect () interconnects the microprocessor(s) () and the memory () together and also interconnects them to a display controller, display device (), and to peripheral devices such as input\/output (I\/O) devices () through an input\/output controller(s) ().","Typical I\/O devices include mice, keyboards, modems, network interfaces, printers, scanners, video cameras and other devices which are well known in the art. In some embodiments, when the data processing system is a server system, some of the I\/O devices, such as printer, scanner, mice, and\/or keyboards, are optional.","The inter-connect () may include one or more buses connected to one another through various bridges, controllers and\/or adapters. In one embodiment, the I\/O controller () includes a USB (Universal Serial Bus) adapter for controlling USB peripherals, and\/or an IEEE-1394 bus adapter for controlling IEEE-1394 peripherals.","The memory () may include ROM (Read Only Memory), volatile RAM (Random Access Memory), and non-volatile memory, such as hard drive, flash memory, etc.","Volatile RAM is typically implemented as dynamic RAM (DRAM) which requires power continually in order to refresh or maintain the data in the memory. Non-volatile memory is typically a magnetic hard drive, a magnetic optical drive, an optical drive (e.g., a DVD RAM), or other type of memory system which maintains data even after power is removed from the system. The non-volatile memory may also be a random access memory.","The non-volatile memory can be a local device coupled directly to the rest of the components in the data processing system. A non-volatile memory that is remote from the system, such as a network storage device coupled to the data processing system through a network interface such as a modem or Ethernet interface, can also be used.","In this description, various functions and operations may be described as being performed by or caused by software code to simplify description. However, those skilled in the art will recognize that what is meant by such expressions is that the functions result from execution of the code\/instructions by a processor, such as a microprocessor. Alternatively, or in combination, the functions and operations can be implemented using special purpose circuitry, with or without software instructions, such as using Application-Specific Integrated Circuit (ASIC) or Field-Programmable Gate Array (FPGA). Embodiments can be implemented using hardwired circuitry without software instructions, or in combination with software instructions. Thus, the techniques are limited neither to any specific combination of hardware circuitry and software, nor to any particular source for the instructions executed by the data processing system.","While some embodiments can be implemented in fully functioning computers and computer systems, various embodiments are capable of being distributed as a computing product in a variety of forms and are capable of being applied regardless of the particular type of machine or computer-readable media used to actually effect the distribution.","At least some aspects disclosed can be embodied, at least in part, in software. That is, the techniques may be carried out in a computer system or other data processing system in response to its processor, such as a microprocessor, executing sequences of instructions contained in a memory, such as ROM, volatile RAM, non-volatile memory, cache or a remote storage device.","Routines executed to implement the embodiments may be implemented as part of an operating system or a specific application, component, program, object, module or sequence of instructions referred to as \u201ccomputer programs.\u201d The computer programs typically include one or more instructions set at various times in various memory and storage devices in a computer, and that, when read and executed by one or more processors in a computer, cause the computer to perform operations necessary to execute elements involving the various aspects.","A machine readable medium can be used to store software and data which when executed by a data processing system causes the system to perform various methods. The executable software and data may be stored in various places including for example ROM, volatile RAM, non-volatile memory and\/or cache. Portions of this software and\/or data may be stored in any one of these storage devices. Further, the data and instructions can be obtained from centralized servers or peer to peer networks. Different portions of the data and instructions can be obtained from different centralized servers and\/or peer to peer networks at different times and in different communication sessions or in a same communication session. The data and instructions can be obtained in entirety prior to the execution of the applications. Alternatively, portions of the data and instructions can be obtained dynamically, just in time, when needed for execution. Thus, it is not required that the data and instructions be on a machine readable medium in entirety at a particular instance of time.","Examples of computer-readable media include but are not limited to recordable and non-recordable type media such as volatile and non-volatile memory devices, read only memory (ROM), random access memory (RAM), flash memory devices, floppy and other removable disks, magnetic disk storage media, optical storage media (e.g., Compact Disk Read-Only Memory (CD ROMS), Digital Versatile Disks (DVDs), etc.), among others. The computer-readable media may store the instructions.","The instructions may also be embodied in digital and analog communication links for electrical, optical, acoustical or other forms of propagated signals, such as carrier waves, infrared signals, digital signals, etc. However, propagated signals, such as carrier waves, infrared signals, digital signals, etc. are not tangible machine readable medium and are not configured to store instructions.","In general, a tangible machine readable medium includes any apparatus that provides (i.e., stores and\/or transmits) information in a form accessible by a machine (e.g., a computer, network device, personal digital assistant, manufacturing tool, any device with a set of one or more processors, etc.).","In various embodiments, hardwired circuitry may be used in combination with software instructions to implement the techniques. Thus, the techniques are neither limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system.","Although some of the drawings illustrate a number of operations in a particular order, operations which are not order dependent may be reordered and other operations may be combined or broken out. While some reordering or other groupings are specifically mentioned, others will be apparent to those of ordinary skill in the art and so do not present an exhaustive list of alternatives. Moreover, it should be recognized that the stages could be implemented in hardware, firmware, software or any combination thereof.","In the foregoing specification, the disclosure has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
