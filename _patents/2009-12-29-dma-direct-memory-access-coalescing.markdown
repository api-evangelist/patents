---
title: DMA (direct memory access) coalescing
abstract: In general, in one aspect, a method includes determining a repeated, periodic DMA (Direct Memory Access) coalescing interval based, at least in part, on a power sleep state of a host platform. The method also includes buffering data received at the device in a FIFO (First-In-First-Out) queue during the interval and DMA-ing the data enqueued in the FIFO to a memory external to the device after expiration of the repeated, periodic DMA coalescing interval.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08661167&OS=08661167&RS=08661167
owner: Intel Corporation
number: 08661167
owner_city: Santa Clara
owner_country: US
publication_date: 20091229
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application is a continuation-in-part of prior U.S. patent application Ser. No. 12\/208,654, filed Sep. 11, 2008, now U.S. Pat. No. 8,112,646 entitled \u201cBuffering Techniques for Power Management,\u201d which claims the benefit of U.S. Provisional Application No. 60\/973,031, filed Sep. 17, 2007, U.S. Provisional Application No. 60\/973,035, filed Sep. 17, 2007, U.S. Provisional Application No. 60\/973,038, filed Sep. 17, 2007, and U.S. Provisional Application No. 60\/973,044, filed Sep. 17, 2007.","Networks enable computers and other devices to communicate. For example, networks can carry data representing video, audio, e-mail, and so forth. Typically, data sent across a network is divided into smaller messages known as packets. By analogy, a packet is much like an envelope you drop in a mailbox. A packet typically includes \u201cpayload\u201d and a \u201cheader\u201d. The packet's \u201cpayload\u201d is analogous to the letter inside the envelope. The packet's \u201cheader\u201d is much like the information written on the envelope itself. The header can include information to help network devices handle the packet appropriately. For example, the header can include an address that identifies the packet's destination.","Systems receiving packets typically include devices known as Network Interface Controllers (NICs) (a.k.a. Network Adaptors). Traditionally, upon receipt of a packet, a NIC will perform a Direct Memory Access (DMA) of packet data to host memory. This Direct Memory Access frees the host processor from the duty of overseeing transfer of data between memory and the NIC. Once in host memory, the NIC can generate an interrupt to alert a host processor to the arrival of the packet. In response, a protocol stack executed by the host processor typically processes the packet in accordance with different layers of network communication protocols.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","102","104","100","102","106","106","106"]},"To process received packets, NIC  transfers packets to host memory  for subsequent processing by the host (e.g., by a network protocol stack and\/or application software). To reduce the burden of network communication on processor(s) , NIC  features a Direct Memory Access (DMA) engine that moves packet data from the NIC  to host memory . While DMA reduces the burden of packet processing on a processor , the frequency and unpredictability of DMA activity can prevent the long periods of inactivity needed for the host system  to enter low power states.","As an example, host  may feature the ability to enter power saving states, often referred to as sleep modes (e.g., Cn in ACPI (Advanced Configuration and Power Interface) where increasing values of n correspond to deeper power saving modes). Such sleep states can reduce power consumed by varying platform components by varying degrees. A longer sleep duration can permit a system to enter a deeper power saving mode. However, repeated DMA operations can prevent the host  from extended idle periods, preventing deeper power saving states. For example, network traffic tends to have short gaps between packets, even for lightly loaded traffic, creating short, choppy periods of inactivity whose modest duration prevents the host  from having a long enough idle duration to enter lower power states.","As shown in , the system can coalesce DMA operations to increase periods of time without NIC initiated DMA activity. For example, instead of initiating a DMA transfer after receipt of each packet, a NIC  can buffer received packets and initiate DMA transfer of multiple queued packets in succession. This concentrates NIC initiated DMA operations into a smaller period of time which can, in turn, increase the possibility of host  entering a deeper power saving mode.","To illustrate,  depicts traditional DMA transfer  of packets as they arrive. This distribution of DMA operations over time creates, by happenstance, a short, difficult to predict, periods of time (e.g., ) where DMA activity temporarily ceases. By comparison,  also depicts a sample illustration of DMA coalescing  where NIC  buffers received packets during a DMA coalescing duration . After this duration , the NIC  initiates DMA transfer of the buffered packets. As shown, this can reliably generate larger, more regular periods without DMA activity initiated by the NIC . As shown, DMA coalescing  can let the platform enter a deeper idle state (e.g., ACPI C6 state) and stay there longer, increasing power savings. As shown in , the scheme can create a repeating cycle having a first phase where DMA coalescing queues received packets and a second phase where DMA coalescing is stopped and the packets are DMA-ed to the host.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","b":["300","300","310","308","300","302","312","314","312","312","302","312"]},"Typically, a NIC  performs DMA transfers through the use of descriptors that identify candidate buffers in host memory  to store packets. A descriptor may identify, for example, a location within a buffer within host memory  and a length of buffer available to store a packet. Generally, a host  transfers descriptors for available buffers to NIC  by a host DMA engine (not shown). The NIC  then uses these descriptors to instruct the DMA engine  where to transfer packet data in host memory . The NIC  also generates a return descriptor which identifies the location of the packet and may identify features of the packet such as packet length, hash values, packet types, checksum pass\/fail and so forth. The host , in turn, uses the return descriptor to determine the location of a packet in host memory. Thus, in addition to the DMA of a packet to host memory, DMA of descriptors and return descriptors between the host and NIC may also be confined to the period of DMA operation.","As shown in , DMA coalescing is controlled by DMA coalescing logic  of NIC .  illustrates a sample implementation of DMA coalescing logic. The sample implementation repeatedly disables  and enables  NIC DMA operations. In typical operation, a DMA coalescing timer  controls DMA operations. That is, packets are enqueued until expiration of the timer. This ensures packets do not remain queued indefinitely.","Potentially, a DMA coalescing period may be terminated before expiration of the timer. For example, to ensure Rx FIFO  has sufficient space to buffer received packets while the host platform transitions from a lower power idle state to an active state, RxFIFO watermark  logic may cause a DMA flush of queued data before expiration of a DMA coalescing timer period. For instance, to make sure packets will not be dropped due to the lack of available Rx FIFO  space, space watermark logic  may initiate a DMA flush of queue packets if the remaining Rx FIFO space falls below (T*W) where Tis the exit latency duration of the low power idle state and W is the link speed carrying the data being queued. After the flushing, DMA coalescing is restarted.","The timer  value can be set statically or dynamically. A fixed timer  value may be set by a user or automatically determined by a NIC, device driver, or other entity. Generally, greater DMA coalescing periods can result in larger idle periods. However, extended coalescing periods can increase packet processing latency as packets await DMA transfer. Thus, selecting a fixed timer  value may reflect different packet processing objectives.","For example, the timer  value can be set to attempt to keep the platform at the lowest power idle state long enough to gain the most power benefit. Lower power states typically have longer entry and exit latencies (e.g., longer transition durations to power components up or down). Additionally, different power state transitions may also consume different amounts of power. Based on these factors, there exists a break-even idle time for each idle state where the benefit to entering the state is greater than the power consumed by state transitions. In other words, to gain power benefit for entering the lowest power idle state, the platform needs to stay idle for longer than a break-even time, denoted by T. Tis platform-specific and varies for each power state. In a typical Operating System (OS) policy, a platform can enter the lowest power idle state only when the CPU utilization is less than or equal to certain threshold, denoted by F%. For example, in the current Windows Vista\u2122 policy, F%=40%. In such environments, the coalescing timer may need to generate at least Tidle time at F% CPU utilization level to reduce overall power consumption. A minimum coalescing time period can be calculated as:\n\n_min=\/(1%)\n\nThus, when CPU utilization<F%, Tc_min will generate idle time longer than T.\n\nAgain, when the CPU utilization>F%, due to OS policy, a platform may not enter the lowest power idle state.\n\nUsing a longer coalescing timeout than Tc_min can potentially provide better power savings, however, this may come at the expense of increased latency for received packets. Thus, a metric may be used to limit the coalescing timeout value. For example, a minimum throughput constraint may be used. For instance, assume each user connecting to a server generally achieves Internet throughput at Wbps (e.g., 800 Kbps) and the server generally uses Lbits (e.g., 64 KBytes) as the TCP window size. The equivalent round-trip time for the user is L\/W. Further, assume a maximal tolerable user throughput drop after coalescing, F% (e.g., 1%), of the original throughput. The maximal coalescing time, Tc_max, can be determined as follows:\n\n{\/(_max)}\/%\n\nA system can automatically select a coalescing timeout value between (or equal to one of) Tc_min and Tc_max. Alternately, this value may be selected based on a user's preference. The approach described above is merely an example. Additionally, while the above described a throughput metric a wide variety of other constraining metrics may be used to limit the potential values of the coalescing timer .\n","Instead of a static coalescing timer value, DMA coalescing may dynamically respond to system conditions such as resource usage and\/or network traffic volume. For example, as shown in , DMA coalescing may be dynamically enabled  or disabled  based on the volume of network traffic. For instance, if network traffic is very low, DMA coalescing will not significantly reduce the frequency of active DMA transfer periods. Alternately, if network traffic is too high, the opportunities to idle will be fewer, reducing the value of DMA coalescing with respect to the performance impact\/latency caused by its operation. Thus, as shown in , a policy may disable  DMA coalescing if network traffic falls outside a range of beneficial DMA coalescing operation. DMA coalescing may resume  when network traffic again falls within the desired range. The range test may be over a configurable period of time. Additionally, the range test may need to be met for some number of consecutive (e.g., 3 consecutive 1 second periods) and\/or non-consecutive periods (e.g., at least 4 out of 5) before enabling \/disabling . The volume of traffic may be measured, for example, by a count of Rx and\/or Tx packets over a period of time.","The DMA coalescing period can be also be dynamically adjusted by adaptive timer . For example, as shown in , the adaptive timer  may repeatedly attempt to increase  the DMA coalescing interval until  an increase significantly degrades platform throughput or fails to significantly increase overall performance. For instance, in the sample shown, the DMA coalescing value is initialized (e.g., to tc_min). Thereafter, a rate check  is performed that compares the Tx packet count (Tx) for some duration (e.g., 1 second) under the current DMA coalescing duration against a Tx packet count (Tx) for the same duration under a higher DMA coalescing duration. If increasing the coalescing duration would degrade performance beyond some threshold, the adaptive timer  may leave  the coalescing duration at its current value. For example, if\n\n()<%\n\nthen the rate check  may fail . The adaptive timer  may require the rate check  to fail multiple times (e.g., 3) before abandoning  the attempt to increase the coalescing duration. The adaptive timer  may repeat the process above periodically. That is, the coalescing duration may be reset and attempts to increase it repeated after some period of time. Potentially, the reset value for the coalescing timer may change over time, for example, based on performance (e.g., an average of the previous initial value and the current value).\n","The process shown in  may operate on a pre-established stepping-stone set of coalescing durations spanning tc_min and Tc_max. Alternately, the next coalescing duration to try may also be dynamically determined.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},"Other logic blocks may also affect DMA coalescing. For example, a DMA coalescing period may be aborted based on packets that are very delay sensitive . For example, the delay sensitive trigger  may receive identification of packets matching packet filter rules. The filter(s) may examine packet contents such a header fields (e.g., source IP address, IP port, destination IP address, IP port, protocol type, control bits, size, Ethernet type, TCP (Transmission Control Protocol) flags, VLAN (Virtual Local Area Network) priority, and so forth) to identify packets having predefined characteristics. After the packet filter(s) detect a packet match, coalescing can be stopped and restarted after a DMA transfer of queued data. Again, this can reduce the impact of DMA coalescing on time sensitive communication. For example, packets having a high QoS (Quality of Service), connection management packets, and\/or TCP segments flagged as URGent can be sent to the a host protocol stack without delay of DMA coalescing.","The coalescing logic can also respond to other conditions. For example, logic  can monitor the amount of data (e.g., packets) DMA-ed over time. For example, if, over several consecutive DMA coalescing periods, only a single packet is DMA-ed in each period, DMA coalescing can be disabled for some duration. This and the detection of other special conditions can be performed by logic .","Coalescing described above can potentially create larger periods of time at a platform where DMA activity is absent. However, DMA activity is not the sole source of interruptions to idle periods on a platform. For example, in some implementations, a NIC may generate a processor interrupt after DMA transfer for every packet received. In response to the interrupt, a host processor can initiate packet processing for the received packet. Frequent interrupts, however, impose substantial processing overhead, for example, as processing contexts are swapped out to handle packet processing operations. To reduce this overhead, many devices implement a technique known as interrupt moderation. That is, instead of signaling a processor interrupt for each packet received and placed in host memory, interrupt moderation can enable a queue of packets to build and signal a single interrupt for multiple packets. This reduction in the number of interrupts alleviates some of the burden of processing packets on a host.","Typically, interrupt moderation schemes operate at a given moderation interval. For example,  depicts a typical interrupt moderation scheme  implemented by a system that does not use DMA coalescing. As shown, a NIC can generate interrupts , , at repeated intervals (e.g., 50 micro-seconds).","As illustrated in , implementing DMA coalescing on a NIC that also implements interrupt moderation  can further reduce the number of interrupts. For example, as shown, after a DMA coalescing period and an initial DMA transaction, the NIC generates an interrupt to initiate receive processing of packets identified in the NIC receive queue(s). In accordance with a traditional interrupt moderation scheme, a second interrupt is generated after the interrupt moderation interval to initiate receive processing of additional packets DMA-ed during the interval between interrupts and . Finally, a third interrupt is generated after the interrupt moderation interval to process packets DMA-ed between intervals and In the absence of DMA transactions during the DMA coalescing period, no interrupt is generated until the next period of active DMA transfers.","Comparing  and  illustrates how DMA coalescing can reduce processor interrupts and create a significant idle period . However, as shown, an interrupt occurs during an otherwise \u201cquiet\u201d DMA coalescing period causing the overall platform idle duration to shorten to  instead of an amount of time closer to the coalescing duration . Additionally, packet processing operations may further incur into time period . In other words, because the interrupts are not aligned with the period of DMA transfers, a portion of potential idle duration may be lost. However, better coordination of interrupt signaling with DMA coalescing can free much of the DMA coalescing period  from interrupt activity, increasing the platform idle duration for longer and deeper platform idle state residency.","As shown in , aligning  interrupt signaling with DMA coalescing can potentially increase the platform idle duration  and reduce the number of interrupts generated and their associated processor overhead. In the example shown, after a DMA coalescing period and a first DMA transaction is issued, a first interrupt is signaled. In response, the host protocol stack begins processing of the coalesced packets. Thereafter, another interrupt may be generated aligned with the end of the active period of DMA transfers, as opposed to at a later time (e.g., interrupt ). Again, comparing  with B illustrates an increase in the potential platform idle duration (e.g., from  to ) and a reduction in interrupts (e.g., from three to one or two).","Again, many variations and alternate implementations are possible. For example, while many NICs feature a single Rx FIFO, some NICs may feature multiple Rx FIFOs such as NICs implementing Receive Side Scaling (RSS). In such implementations, an interrupt may be signaled for each Rx FIFO or each Rx FIFO having data. After a new DMA coalescing period begins, an additional interrupt for each Rx FIFO can be issued that still has unprocessed packets.","As described above, DMA coalescing can concentrate DMA activity initiated by a device into a more compact period of time. However, potentially, multiple devices on the same host platform may perform DMA coalescing. For example, the host platform  in  may feature multiple NICs and\/or other I\/O devices.  illustrates sample operation of multiple devices ,  performing DMA coalescing without coordination. As shown in this example, DMA transfers of one device  occur during the DMA coalescing period of another , and vice versa. As shown, these interfering DMA coalescing schedules can chop platform idle durations into periods  potentially shorter than any given device's DMA coalescing duration, reducing potential power savings achieved by DMA coalescing.","As shown in , however, coordinating DMA coalescing across devices can create longer idle durations. For example, as shown, this coordination can synchronize the DMA coalescing of devices ,  to consolidate the periods of active DMA transfers of these devices into a shorter, overlapping duration. As shown, the net result  leaves a longer platform idle duration than achieved  in .","Alignment of DMA activity can be implemented in a wide variety of ways. For example,  illustrates a coordinator  that controls the DMA activity of different devices -. In a sample implementation shown in , each device -can maintain its own DMA coalescing policy and schedule, however, DMA activity by any of one device can trigger a DMA flush and reset of the DMA coalescing duration for other devices. For instance, as shown in , the coordinator  receives notification from device after the device's DMA coalescing duration ends (e.g., after the first DMA transfer by the device ). As shown in , in response, the coordinator  can notify other devices (e.g., device -) which, in turn, can end their DMA coalescing periods and flush any coalesced DMA activity to the host. Thereafter, the devices -can resume their own DMA coalescing schemes.","In the implementation shown, the devices' maintain their own DMA coalescing policies but respond to the coordinator's  signal by stopping the current coalescing duration and starting a new one. Other implementations, however, may operate differently. For example, the coordinator can signal each device -to start and\/or end a DMA coalescing period, for example, after a predefined period of time (e.g., every 10 ms) much like a heartbeat signal. Alternately, the coordinator  can instead determine and provide a DMA schedule for one or more devices -to follow. Such a schedule may be determined based on priority of I\/O handled by the device, throughput, latency tolerance, device FIFO capacity, and other factors. Potentially, the resulting schedule may be uniform for each device, though they may differ. The schedules and\/or heartbeats derived by the coordinater  may dynamically adapt to the DMA idle performance achieved by the platform and\/or based on varying DMA activity volume of the devices.","The coordinator  may be implemented in a variety of hardware and\/or software. For example, the coordinator  may be implemented as a software device driver. For instance, in Linux, a single NIC driver instance controls multiple Ethernet NICs and can be modified to implement coordinator  operations. For example, a received interrupt from one NIC can trigger a DMA alignment message to the other NICs. A software approach, such as that described above, would not require hardware changes to the devices or standardization. Alternately, the coordinator  may be implemented as an application and\/or as a part of an operating system. Further, the coordinator  can be implemented as dedicated or programmable hardware, for example, in a chipset or I\/O hub coupling the devices to the platform. Communication between the coordinator  and the devices -can occur, for example, via configuration registers exposed by the devices -and\/or or via a software API (Application Programming Interface) such as a network driver interface specification.","While the above frequently described DMA coalescing performed by a NIC, DMA coalescing can be applied to other hardware subsystems\/devices. Examples of such hardware subsystems include disk drive controllers, graphics cards, sound cards, and so forth. Additionally, while the above described DMA transfer of packets such packets may not be transferred as a monolithic structure. For example, packet headers and payloads may be split and transferred into non-contiguous locations in host memory.","The term circuitry as used herein includes hardwired circuitry, digital circuitry, analog circuitry, programmable circuitry, and so forth. The programmable circuitry may operate on computer programs disposed on a computer readable storage medium that implement techniques described above. The term packet as used herein encompasses frames (e.g., Ethernet frames), segments (e.g., TCP segments), Internet Protocol datagrams (e.g., IPv4 and IPv6) and other protocol data units (PDUs) used in networks.","Other embodiments are within the scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 11A and 11B"}]},"DETDESC":[{},{}]}
