---
title: Systems and methods for encoding data
abstract: A computer-implemented method for encoding data may include 1) receiving a request to encode the data using a cipher, 2) identifying an encryption key to be used by the cipher to encode the data, 3) generating, on a computing system, a non-random initialization vector for the cipher by identifying a unique identifier associated with the computing system, identifying information associated with the data, and concatenating the unique identifier with the information associated with the data to create the initialization vector, and 4) encoding the data with the cipher using the initialization vector and the encryption key. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08751819&OS=08751819&RS=08751819
owner: Symantec Corporation
number: 08751819
owner_city: Mountain View
owner_country: US
publication_date: 20110922
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["Security solutions may store many types of sensitive information, such as passwords used to access various servers and services. Traditionally, these security solutions have protected data using symmetric encryption algorithms with a different encryption key for each piece of sensitive data (e.g., a different key for each password). As a result, the encryption key management implemented by traditional security solutions may be complex and cumbersome. Furthermore, encryption key management may grow in complexity with each new key that is added because each key may need to be protected and\/or renegotiated individually.","Due to its complexity, the use of traditional encryption key management may be misdirected in some situations. For example, if the protected data is not negotiated with a third party or transmitted over a network, the robust security provided by traditional encryption key management may provide more security (and consume more computing resources) than may be necessary. Furthermore, traditional encryption key management may not be suitable in certain situations. For example, some embedded systems may lack the processing power and\/or memory resources to effectively implement traditional encryption key management solutions. What is needed, therefore, is a more efficient and effective mechanism for managing encryption keys and\/or encoding other data.","As will be described in greater detail below, the instant disclosure generally relates to systems and methods for encoding data. In one example, a computer-implemented method for encoding data may include 1) receiving a request to encode the data using a cipher, 2) identifying an encryption key to be used by the cipher to encode the data, 3) generating, on a computing system, a non-random initialization vector for the cipher by identifying a unique identifier associated with the computing system, identifying information associated with the data, and concatenating the unique identifier with the information associated with the data to create the initialization vector, and 4) encoding the data with the cipher using the initialization vector and the encryption key.","In some embodiments, identifying the unique identifier associated with the computing system may include locating a hardware identifier associated with the computing system and computing a hash of the hardware identifier, where the hash comprises the unique identifier associated with the computing system. Additionally or alternatively, identifying the unique identifier associated with the computing system may include locating an identifier assigned to the computing system by a third party and computing a hash of the identifier assigned to the computing system by the third party, where the hash comprises the unique identifier associated with the computing system.","In some embodiments, identifying the information associated with the data may include identifying information that indicates a location of the data and computing a hash of the information that indicates the location of the data, where the hash comprises the information associated with the data.","According to certain embodiments, the non-random initialization vector may be generated such that the non-random initialization vector is free from random data and pseudo-random data.","In various embodiments, encoding the data with the cipher may include applying the initialization vector to the data to create a first encoding of the data and applying a key to the first encoding of the data to provide a second encoding of the data.","In some examples, the cipher may include a block cipher. In other examples, the cipher may include a stream cipher and encoding the data with the cipher using the initialization vector may involve seeding the stream cipher with the initialization vector.","According to certain embodiments, the computing system may include an embedded computing device that is configured to perform a set of predefined dedicated tasks. The embedded computing device may be limited by computing constraints such that the embedded computing device is incapable of generating random and\/or pseudo-random data for use in initialization vectors. Alternatively, the embedded computing device may be limited by computing constraints such that generating random and\/or pseudo-random data on the embedded computing device is time prohibitive.","The method may include storing the encryption key within the embedded computing device, and the embedded computing device may be limited by memory constraints such that storing the encryption key within the embedded computing device consumes a non-trivial amount of memory within the embedded computing device.","According to some examples, the method may further include 5) identifying the encryption key to be used by the cipher to encode additional data, 6) generating, on the computing system, an additional non-random initialization vector for the cipher by identifying the unique identifier associated with the computing system, identifying information associated with the additional data, and concatenating the unique identifier with the information associated with the additional data to create the additional non-random initialization vector, and 7) encoding the additional data with the cipher using the non-random initialization vector and the encryption key.","Additionally or alternatively, the method may further include 5) discarding the initialization vector, 6) after discarding the initialization vector, receiving a request to decode the data, 7) identifying the encryption key to be used to decode the data, 8) recreating the non-random initialization vector by identifying the unique identifier associated with the computing system, identifying the information associated with the data, and concatenating the unique identifier with the information associated with the data to recreate the initialization vector, and 9) decoding the data using the non-random initialization vector and the encryption key.","In one embodiment, a system for implementing the above-described method may include 1) a reception module programmed to receive a request to encode data using a cipher, 2) an identification module programmed to identify an encryption key to be used by the cipher to encode the data, 3) a generation module programmed to generate, on a computing device, a non-random initialization vector for the cipher by identifying a unique identifier associated with the computing device, identifying information associated with the data, and concatenating the unique identifier with the information associated with the data to create the initialization vector, 4) the cipher, wherein the cipher is programmed to encode the data using the initialization vector and the encryption key, and 5) at least one processor configured to execute the reception module, the identification module, the generation module, and the cipher.","In some examples, the above-described method may be encoded as computer-readable instructions on a computer-readable-storage medium. For example, the computer-readable-storage medium may include one or more computer-executable instructions that, when executed by at least one processor of a computing device, may cause the computing device to 1) receive a request to encode data using a cipher, 2) identify an encryption key to be used by the cipher to encode the data, 3) generate, on a computing system, a non-random initialization vector for the cipher by identifying a unique identifier associated with the computing system, identifying information associated with the data, and concatenating the unique identifier with the information associated with the data to create the initialization vector, and 4) encode the data with the cipher using the initialization vector and the encryption key.","Features from any of the above-mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments, features, and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.","Throughout the drawings, identical reference characters and descriptions indicate similar, but not necessarily identical, elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather, the instant disclosure covers all modifications, equivalents, and alternatives falling within the scope of the appended claims.","Embodiments of the instant disclosure may use initialization vectors for encoding data in a manner that reduces or eliminates the need for encryption key management. Embodiments of the instant disclosure may also provide efficient and effective data encoding that may be used on devices with limited resources, such as embedded devices. These and other advantages and features will be more fully understood upon reading the following detailed description","The following will provide, with reference to , , and , detailed descriptions of exemplary systems for encoding data. Detailed descriptions of corresponding computer-implemented methods will also be provided in connection with . In addition, detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with , respectively.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","100","102","100","104","100","106"]},"In addition, and as will be described in greater detail below, exemplary system  may include a generation module  programmed to generate, on a computing device, a non-random initialization vector for the cipher by identifying a unique identifier associated with the computing device, identifying information associated with the data, and concatenating the unique identifier with the information associated with the data to create the initialization vector. System  may also include a cipher  programmed to encode the data using the initialization vector and the encryption key. Although illustrated as separate elements, one or more of modules  in  may represent portions of a single module or application.","In certain embodiments, one or more of modules  in  may represent one or more software applications or programs that, when executed by a computing device, may cause the computing device to perform one or more tasks. For example, and as will be described in greater detail below, one or more of modules  may represent software modules stored and configured to run on one or more computing devices, such as the devices illustrated in  (e.g., computing device  and\/or server ), computing system  in , and\/or portions of exemplary network architecture  in . One or more of modules  in  may also represent all or portions of one or more special-purpose computers configured to perform one or more tasks.","As illustrated in , exemplary system  may also include one or more databases, such as database . In one example, database  may be configured to store an encryption key  and encoded data .","Database  may represent portions of a single database or computing device or a plurality of databases or computing devices. For example, database  may represent a portion of server  in , computing system  in , and\/or portions of exemplary network architecture  in . Alternatively, database  in  may represent one or more physically separate devices capable of being accessed by a computing device, such as server  in , computing system  in , and\/or portions of exemplary network architecture  in .","Exemplary system  in  may be implemented in a variety of ways. For example, all or a portion of exemplary system  may represent portions of exemplary system  in . As shown in , system  may include a computing device  in communication with a server  via a network . A user may use computing device  to access server  via network . The user may need to enter authentication credentials (represented as data ), which may include a password, a private key, and\/or any other type of credential, into server  to access server .","In one embodiment, one or more of modules  from  may, when executed by at least one processor of computing device , enable computing device  to encode data. For example, modules  and database  may be located on computing device , and generation module  may use a unique identifier  of computing device  and identification information  associated with data  to encode data  to provide encoded data  (i.e., to encode the password used to access server ).","Computing device  generally represents any type or form of computing device capable of reading computer-executable instructions. Examples of computing device  include, without limitation, laptops, desktops, servers, cellular phones, smartphones, tablet computing devices, personal digital assistants (PDAs), multimedia players, embedded systems, combinations of one or more of the same, exemplary computing system  in , or any other suitable computing device.","Server  generally represents any type or form of computing device that a user may attempt to access using a password or any other type of credentials. Examples of server  include, without limitation, application servers, database servers, web servers and\/or servers, and\/or any other device configured to provide various database services and\/or run certain software applications.","Network  generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network  include, without limitation, an intranet, a wide area network (WAN), a local area network (LAN), a personal area network (PAN), the Internet, power line communications (PLC), a cellular network (e.g., a GSM Network), exemplary network architecture  in , or the like. Network  may facilitate communication or data transfer using wireless or wired connections. In one embodiment, network  may facilitate communication between computing device  and server .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 1","FIG. 2","FIG. 5","FIG. 6"],"b":["300","100","200","510","600"]},"At step  in , one or more of the systems described herein may receive a request to encode data using a cipher. For example, reception module  (which may, as detailed above, represent a portion of computing device  in ) may receive the request to encode the data using cipher  on computing device .","Reception module  may receive a request to encode data in a variety of different contexts. For example, reception module  may be part of a password management system that stores and secures passwords for one or more users. In such embodiments, reception module  may receive a request to encode a password when a new password is added to the password management system, when the password management system detects the user entering in the password into a user interface field (e.g., into a web browser that provides access to server ), and\/or in a variety of other scenarios.","Reception module  may receive a request to encode various types of data. As noted above, reception module  may encode passwords. Reception module  may also encode various other types of security credentials (e.g., security certificates) and\/or other sensitive data.","At step  in , one or more of the systems described herein may identify an encryption key to be used by the cipher to encode the data. For example, identification module  in  (which may, as detailed above, represent a portion of computing device  in ) may identify encryption key  to be used by cipher  to encode data  on computing device .","As used herein, the phrase \u201cencryption key\u201d generally refers to any data that may be used to determine the functional output of a cipher. An encryption key may be any input parameter for a cipher. For example, an encryption key may specify a transformation of plain text into cipher text (e.g., encoded data) and\/or cipher text into plain text. The encryption key may be generated using any suitable algorithm and may contain suitable entropy. Encryption keys may be of any suitable length, and may be used in symmetric-key cryptography, public-key cryptography, and\/or any other type of cryptography.","As used herein, the term \u201ccipher\u201d generally refers to any algorithm for performing encryption and\/or decryption. For example, a cipher may include a set of defined steps that can be followed as a procedure for encoding data. As discussed in greater detail below, a cipher may be a block cipher, a stream cipher, and\/or any other type of cipher that uses an encryption key and an initialization vector to encode data.","Steps , , and  are performed in a process for generating a non-random initialization vector for the cipher to use in data encryption. As used herein, the phrase \u201cinitialization vector\u201d generally refers to any input to a cipher that may be used in combination with an encryption key to encrypt data using the cipher. An initialization vector may initialize a cipher in one or more of a variety of ways. For example, in a block cipher, an initialization vector may be linearly added to and\/or logically XORed with the first block of plain text or may be included in front of plain text prior to encryption. In a stream cipher, an initialization vector may be loaded into an internal secret state of a cipher, after which the cipher may be run a predefined number of rounds to initialize the cipher before encoding data.","As noted, embodiments presented herein are directed to generating a non-random initialization vector. As used herein, the phrase \u201cnon-random initialization vector\u201d generally refers to any initialization vector that is generated such that the initialization vector is free from random data and\/or pseudo-random data. In other words, a non-random initialization vector may be any initialization vector generated without using random and\/or pseudo-random data generation as part of creating the initialization vector. In some embodiments a non-random initialization vector may include only a unique identifier of a computing system and information associated with the data to be encrypted. As discussed in greater detail below, a non-random initialization vector may also include other data.","At step  in  and as part of generating an initialization vector, one or more of the systems described herein may identify a unique identifier associated with the computing system. For example, generation module  may identify unique identifier  associated with computing device  in .","Generation module  may identify various types of unique identifiers associated with computing systems. For example, generation module  may identify a hardware identifier of a hardware device of the computing device . For example, generation module  may identify a Universally Unique Identifier (UUID) of a chipset or operating system of computing device , a Basic Input\/Output System (BIOS) serial number, a Network Interface Card (NIC), a Media Access Control (MAC) address, a Globally Unique Identifier (GUID), and\/or any other machine-dependent value for uniquely identifying a computing system and\/or any hardware, firmware, peripheral device, or other component of a computing system.","In some embodiments, generation module  may identify a unique identifier associated with a computing system by locating an identifier assigned to the computing system by a third party. For example, generation module  may identify an Internet Protocol (IP) address via Dynamic Host Configuration Protocol (DHCP), may identify a GUID assigned to the computing device by third party software, may identify a serial number associated with the computing device, and\/or may identify any other type of identifier assigned to the computing device by a third party.","In some embodiments, generation module  may compute a hash of the unique identifier associated with the computing system. Any suitable hash algorithm may be used. For example, the hash algorithm may be provided through an available cryptography library and\/or may be in compliance with cryptography policies and standards, such as Federal Information Processing Standard (FIPS) 140-2 requiring Secure Hash Algorithm 1 (SHA1) or better. In some embodiments, generation module  may canonicalize the identifier before hashing the identifier. For example, the identifier could be converted to all lowercase without leaving whitespace. The identifier may also be canonicalized by adding whitespace and\/or normalizing the identifier in any other suitable manner.","At step  in , as part of generating an initialization vector, one or more of the systems described herein may identify information associated with the data to be encrypted. For example, generation module  may identify information associated with data  on computing device .","Generation module  may identify various types of information associated with the data to be encrypted. For example, generation module  may identify information that indicates a location of data  (e.g., information that indentifies a website for which data  is used as a password, information that identifies a storage location of data , etc.) and may compute a hash of the information that indicates the location of the data. For example, generation module  may identify a Uniform Resource Locator (URL) associated with a website to which a password (data ) provides access. Information associated with the data may also be part of the password itself, any information scraped from a website to which the password is entered, information indicating a type of the password (e.g., a length of the password, a security protocol associated with the password, etc.), information about a user entering the password (e.g., a name of the user, a username of the user, etc.), information assigned to the data by a third party, and\/or any other information associated with the data that is to be encrypted.","At step  in , one or more of the systems described herein may generate the initialization vector by concatenating the unique identifier with the information associated with the data. For example, generation module  may concatenate unique identifier  associated with computing device  with identification information  associated with data  to create an initialization vector for use in encoding data .","Generation module  may use any suitable concatenation process for concatenating unique identifier  with identification information . Generation module  may concatenate unique identifier  with identification information  by joining strings of information from or representing unique identifier  and identification information  in any suitable way. For example, generation module  may join unique identifier  with identification information  by using unique identifier  to form a first half of the initialization vector and using identification information  to form a second half of the initialization vector. Alternatively, generation module  may join unique identifier  with identification information  by using unique identifier  to form a second half of the initialization vector and using identification information  to form a first half of the initialization vector.","In some embodiments, generation module  may concatenate unique identifier  with identification information  by concatenating a hash of unique identifier  with a hash of identification information . Generation module  may also concatenate unique identifier  with identification information  by concatenating a canonicalized hash of unique identifier  with a canonicalized hash of identification information .","If concatenating unique identifier  with identification information  would result in an initialization vector that is too long as determined by the encryption algorithm used by cipher , generation module  may shorten unique identifier  (or a hash of unique identifier ) and\/or may shorten identification information  (or a hash of identification information ) such that the concatenation results in an initialization vector of appropriate length.","If concatenating unique identifier  with identification information  would result in an initialization vector that is too short as determined by the encryption algorithm used by cipher , generation module  may add white space and\/or other data (e.g., in accordance with Public Key Cryptography Standard (PKCS) , in accordance with RFC 1321, etc.) to unique identifier  (or a hash of unique identifier ) and\/or to identification information  (or a hash of identification information ) such that the concatenation results in an initialization vector of appropriate length.","At step  in , one or more of the systems described herein may encode the data using the initialization vector and the encryption key. For example, cipher  may encode data  using encryption key  and the initialization vector generated by generation module .","Cipher  may use any suitable algorithm to encode the data. For example, cipher  may apply the initialization vector to the data to create a first encoding of the data, and may apply the encryption key to the first encoding of the data to provide a second, final encoding of the data. Additionally or alternatively, the initialization vector may be used to initialize cipher , after which cipher  may use the encryption key to encode the data.","As previously discussed, cipher  may be a block cipher. Cipher  may be implemented in any suitable type of block cipher mode, including, but not limited to, Electronic Code Book (ECB), Cipher Block Chaining (CBC), Propagating Cipher-Block Chaining (PCBC), Output Feedback Mode (OFB), Integrated Counter Mode (ICM), Cipher Feedback Mode (CFB), etc. In one or more block cipher modes, cipher  may encode the data by linearly combining the initialization vector with a block of the data to create an initialized block of data to which the encryption key may be applied, may encode the data by XORing the initialization vector with a block of the data to create an initialized block of data, by initializing a shift register with the initialization vector before encoding data, and\/or may operate in any other suitable manner. In embodiments where the cipher is a stream cipher, cipher  may encode the data using the initialization vector to seed the stream cipher.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 4","FIG. 4"],"b":["400","400","104","400","106","210","220","108","210","220","430","110","430","122","424","430","122","124"]},"Embedded system  generally represents any type or form of computing system designed to perform one or more of a few dedicated and\/or specific functions. Embedded system  may be limited to performing only the set of predefined functions. Embedded system  may be embedded as part of a complete device that may include hardware and\/or mechanical parts, in contrast to a general purpose computer. For example, embedded system  may include a microcontroller and\/or a digital signal processor designed to handle a particular task. Embedded system  may be limited by computing constraints (e.g., real-time computing constraints, memory constraints, etc.) such that embedded system  is incapable of generating random and\/or pseudo-random data for use in initialization vectors. Thus, embodiments of the instant disclosure may provide a way for embedded systems, such as embedded system , to provide password security and\/or other types of security for data without generating random and\/or pseudo-random data.","In some embodiments, embedded system  may be incapable of generating random and\/or pseudo-random data. In other embodiments, generating random and\/or pseudo-random data on embedded system  may be time prohibitive (e.g., may take so long, such as tenths of a second or seconds, that it interferes with the intended use of embedded system ).","For example, embedded system  may not have the processing power to efficiently generate random and\/or pseudo-random data. In other embodiments, embedded system  may not have hardware that can be used to generate random and\/or pseudo-random data (e.g., a hard disk drive whose head movement timings may be used to generate pseudo-random data).","As another example, the space available in memory  of embedded system  may be limited such that when encryption key  is stored in memory , encryption key  may consume a non-trivial amount of memory within embedded system . In other words, storing encryption key  in memory  may have an adverse impact on the performance of embedded system  and\/or may consume a significant percentage (e.g., 10 percent or more) of random access memory of embedded system . Thus, system designers may not be able to store a large number of encryption keys in the memory of an embedded system. Embodiments of the instant disclosure may address this issue by enabling the reuse of a single key (thereby eliminating or significantly reducing key management and the memory consumed by keys) in combination with machine- and data-specific initialization vectors.","Embodiments of the instant disclosure may also provide various other features and advantages. As noted, embodiments of the instant disclosure may enable a computing system to use the same encryption key on a variety of passwords and\/or other types of data. For example, continuing with the process described in , an additional request to encode additional data using cipher  may be received. In response to receiving such a request, identification module  may identify the encryption key (e.g., encryption key ) used by cipher  to encode the original data (e.g., a first password) and may use the same encryption key to encode the additional data (e.g., a second password). Generation module  may then generate an additional non-random initialization vector for cipher  by identifying a unique identifier of a computing system (e.g., unique identifier  and\/or any other suitable unique identifier), identifying information associated with the additional data, and concatenating the two. The additional data may be encoded using the additional non-random initialization vector and the encryption key.","Creating initialization vectors in the manner describe above may prevent an attacker from using the initialization vector to access the otherwise protected data. Thus, embodiments of the instant disclosure may reduce or eliminate key management and provide adequate security while reducing development costs and time. For example, on platforms that offer unique, protected encryption keys, such as a WINDOWS Data Protection Application Programming Interface (DPAPI), applications using embodiments of the instant disclosure may not need to perform any key management at all. Furthermore, embodiments of the instant disclosure may be used in conjunction with encryption libraries, such as Pretty Good Privacy (PGP).","As described above, embodiments of the instant disclosure may be used as part of a key management component to protect numerous items of sensitive data (e.g., passwords) using a single key protection key with unique initialization vectors. Furthermore, in some embodiments the initialization vectors may be discarded and regenerated for use in decoding the data. Since the initialization vectors are created using information readily available to generation module  (i.e., unique identifiers of computing systems and information associated with the encrypted data), initialization vectors may be easily re-created using the same processes described in , and data may be decoded using the re-created initialization vectors with the same processes described in .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 5","b":["510","510","510"]},"Computing system  broadly represents any single or multi-processor computing device or system capable of executing computer-readable instructions. Examples of computing system  include, without limitation, workstations, laptops, client-side terminals, servers, distributed computing systems, handheld devices, or any other computing system or device. In its most basic configuration, computing system  may include at least one processor  and a system memory .","Processor  generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments, processor  may receive instructions from a software application or module. These instructions may cause processor  to perform the functions of one or more of the exemplary embodiments described and\/or illustrated herein.","System memory  generally represents any type or form of volatile or non-volatile storage device or medium capable of storing data and\/or other computer-readable instructions. Examples of system memory  include, without limitation, random access memory (RAM), read only memory (ROM), flash memory, or any other suitable memory device. Although not required, in certain embodiments computing system  may include both a volatile memory unit (such as, for example, system memory ) and a non-volatile storage device (such as, for example, primary storage device , as described in detail below). In one example, one or more of modules  from  may be loaded into system memory .","In certain embodiments, exemplary computing system  may also include one or more components or elements in addition to processor  and system memory . For example, as illustrated in , computing system  may include a memory controller , an Input\/Output (I\/O) controller , and a communication interface , each of which may be interconnected via a communication infrastructure . Communication infrastructure  generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure  include, without limitation, a communication bus (such as an ISA, PCI, PCIe, or similar bus) and a network.","Memory controller  generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example, in certain embodiments memory controller  may control communication between processor , system memory , and I\/O controller  via communication infrastructure .","I\/O controller  generally represents any type or form of module capable of coordinating and\/or controlling the input and output functions of a computing device. For example, in certain embodiments I\/O controller  may control or facilitate transfer of data between one or more elements of computing system , such as processor , system memory , communication interface , display adapter , input interface , and storage interface .","Communication interface  broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system  and one or more additional devices. For example, in certain embodiments communication interface  may facilitate communication between computing system  and a private or public network including additional computing systems. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface  may provide a direct connection to a remote server via a direct link to a network, such as the Internet. Communication interface  may also indirectly provide such a connection through, for example, a local area network (such as an Ethernet network), a personal area network, a telephone or cable network, a cellular telephone connection, a satellite data connection, or any other suitable connection.","In certain embodiments, communication interface  may also represent a host adapter configured to facilitate communication between computing system  and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include, without limitation, SCSI host adapters, USB host adapters, IEEE 1394 host adapters, SATA and eSATA host adapters, ATA and PATA host adapters, Fibre Channel interface adapters, Ethernet adapters, or the like. Communication interface  may also allow computing system  to engage in distributed or remote computing. For example, communication interface  may receive instructions from a remote device or send instructions to a remote device for execution.","As illustrated in , computing system  may also include at least one display device  coupled to communication infrastructure  via a display adapter . Display device  generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly, display adapter  generally represents any type or form of device configured to forward graphics, text, and other data from communication infrastructure  (or from a frame buffer, as known in the art) for display on display device .","As illustrated in , exemplary computing system  may also include at least one input device  coupled to communication infrastructure  via an input interface . Input device  generally represents any type or form of input device capable of providing input, either computer or human generated, to exemplary computing system . Examples of input device  include, without limitation, a keyboard, a pointing device, a speech recognition device, or any other input device.","As illustrated in , exemplary computing system  may also include a primary storage device  and a backup storage device  coupled to communication infrastructure  via a storage interface . Storage devices  and  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. For example, storage devices  and  may be a magnetic disk drive (e.g., a so-called hard drive), a solid state drive, a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash drive, or the like. Storage interface  generally represents any type or form of interface or device for transferring data between storage devices  and  and other components of computing system . In one example, database  from  may be stored in primary storage device  and\/or any other storage component of computing system .","In certain embodiments, storage devices  and  may be configured to read from and\/or write to a removable storage unit configured to store computer software, data, or other computer-readable information. Examples of suitable removable storage units include, without limitation, a floppy disk, a magnetic tape, an optical disk, a flash memory device, or the like. Storage devices  and  may also include other similar structures or devices for allowing computer software, data, or other computer-readable instructions to be loaded into computing system . For example, storage devices  and  may be configured to read and write software, data, or other computer-readable information. Storage devices  and  may also be a part of computing system  or may be a separate device accessed through other interface systems.","Many other devices or subsystems may be connected to computing system . Conversely, all of the components and devices illustrated in  need not be present to practice the embodiments described and\/or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system  may also employ any number of software, firmware, and\/or hardware configurations. For example, one or more of the exemplary embodiments disclosed herein may be encoded as a computer program (also referred to as computer software, software applications, computer-readable instructions, or computer control logic) on a computer-readable-storage medium. The phrase \u201ccomputer-readable-storage medium\u201d generally refers to any form of device, carrier, or medium capable of storing or carrying computer-readable instructions. Examples of computer-readable-storage media include, without limitation, transmission-type media, such as carrier waves, and physical media, such as magnetic-storage media (e.g., hard disk drives and floppy disks), optical-storage media (e.g., CD- or DVD-ROMs), electronic-storage media (e.g., solid-state drives and flash media), and other distribution systems.","The computer-readable-storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer-readable-storage medium may then be stored in system memory  and\/or various portions of storage devices  and . When executed by processor , a computer program loaded into computing system  may cause processor  to perform and\/or be a means for performing the functions of one or more of the exemplary embodiments described and\/or illustrated herein. Additionally or alternatively, one or more of the exemplary embodiments described and\/or illustrated herein may be implemented in firmware and\/or hardware. For example, computing system  may be configured as an application specific integrated circuit (ASIC) adapted to implement one or more of the exemplary embodiments disclosed herein.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 6","b":["600","610","620","630","640","645","650","600","600"]},"Clients , , and  generally represent any type or form of computing device or system, such as exemplary computing system  in . Similarly, servers  and  generally represent computing devices or systems, such as application servers or database servers, configured to provide various database services and\/or run certain software applications. Network  generally represents any telecommunication or computer network including, for example, an intranet, a wide area network (WAN), a local area network (LAN), a personal area network (PAN), or the Internet. In one example, clients , , and\/or  and\/or servers  and\/or  may include all or a portion of system  from .","As illustrated in , one or more storage devices ()-(N) may be directly attached to server . Similarly, one or more storage devices ()-(N) may be directly attached to server . Storage devices ()-(N) and storage devices ()-(N) generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. In certain embodiments, storage devices ()-(N) and storage devices ()-(N) may represent network-attached storage (NAS) devices configured to communicate with servers  and  using various protocols, such as NFS, SMB, or CIFS.","Servers  and  may also be connected to a storage area network (SAN) fabric . SAN fabric  generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric  may facilitate communication between servers  and  and a plurality of storage devices ()-(N) and\/or an intelligent storage array . SAN fabric  may also facilitate, via network  and servers  and , communication between clients , , and  and storage devices ()-(N) and\/or intelligent storage array  in such a manner that storage devices ()-(N) and intelligent array  appear as locally attached devices to clients , , and . As with storage devices ()-(N) and storage devices ()-(N), storage devices ()-(N) and intelligent storage array  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions.","In certain embodiments, and with reference to exemplary computing system  of , a communication interface, such as communication interface  in , may be used to provide connectivity between each client , , and  and network . Clients , , and  may be able to access information on server  or  using, for example, a web browser or other client software. Such software may allow clients , , and  to access data hosted by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), or intelligent storage array . Although  depicts the use of a network (such as the Internet) for exchanging data, the embodiments described and\/or illustrated herein are not limited to the Internet or any particular network-based environment.","In at least one embodiment, all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), intelligent storage array , or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program, stored in server , run by server , and distributed to clients , , and  over network .","As detailed above, computing system  and\/or one or more components of network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more steps of an exemplary method for encoding data.","While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","In some examples, all or a portion of exemplary system  in  may represent portions of a cloud-computing or network-based environment. Cloud-computing environments may provide various services and applications via the Internet. These cloud-based services (e.g., software as a service, platform as a service, infrastructure as a service, etc.) may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud-based computing environment.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","While various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable-storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","In addition, one or more of the modules described herein may transform data, physical devices, and\/or representations of physical devices from one form to another. For example, one or more of the modules recited herein may transform memory written to by a cipher by providing a non-random initialization vector to the cipher.","The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of.\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving,\u201d as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
