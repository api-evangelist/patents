---
title: Active resource control system method & apparatus
abstract: Active resource control of added functionality in a numerical control process having at least one resource is provided. It can occur during run-time of the numerical control process, that an added functionality that uses at least a portion of the resource. On-line checking of the added functionality detects during run time whether the added functionality causes the numerical control process to reach a resource limit. Error handling handles errors upon reaching a resource limit. Off-line checking detects off-line, before the run time of the numerical control process, whether the added functionality causes the numerical control process to reach a resource limit of the resource. Multiple layers are provided that check at multiple layers of the numerical control process whether the added functionality causes the numerical control process to reach a resource limit of the resource. A flexible response to resource limit errors based on a degree of importance of the added functionality is provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07016759&OS=07016759&RS=07016759
owner: Siemens Aktiengesellschaft
number: 07016759
owner_city: Munich
owner_country: DE
publication_date: 20020823
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates to Control of Automation Systems and, more particularly, to Active Resource Control of Automation Systems, particularly in a Run-Time Environment.","In Automation Systems, software modules or functions may overburden the System Resources and cause the System to abort. This is particularly problematic when the modules or functions are not previously accounted for, such as when functions or modules are activated, added or loaded in a Real Time System. It can occur, in this circumstance, that the module or function overburdens the System Resources because the Resources are previously allocated to other functions. For example, a Resource can be overburdened upon start-up based on some change in the configuration of the System. Or, perhaps, the System can reach its Resource limit during the run of a Real-Time system when, for example, a function is activated, such as when activating a Trace Function of a Motion Control Machine.","In Industrial Automation, where the failure of a System can shut down an entire Factory, the present circumstance is not tolerable. Particularly, in the situation where the added function is non-essential, i.e., non-critical, it is not clear why the factory system is shut down as a result of the added function. It would be, for example, a disaster if a Laser Cutting Machine fails to move a work piece and the Laser is not turned off. Or, the work piece is moved too rapidly with respect to the cutting power of the Laser. On the other hand, some functions may be considered non-critical with respect to safety reasons of the machine. In such instances, aborting a Process for a non-critcial function failure, which would have the possible effect of halting a factory, is non-sensical.","What is needed that has not heretofore been provided is a Method, System & Apparatus for Active Resource Control that detects whether added functionality or modules overburdens System Resources. Particularly, in the context of activation or usage of additional, e.g., reloadable or dynamically loadable, software modules or functions in numerical controls, what is needed is Active Resource Control. Further, what is lacking is a means by which the Active Resource Control manages critical and less-critical add-on functionality.","The long felt, but unmet, needs described above are addressed by various aspects of the system and method according to the present invention.","In one aspect of the invention, active resource control of added functionality in a numerical control process having at least one resource is provided. It can occur during run-time of the numerical control process, that an added functionality that uses at least a portion of the resource overburdens an existing limitation of the resource. In an aspect of the invention there is provided multiple layers for actively detecting and responding to resource limit errors. These layers can be combined or employed separately.","In one aspect, on-line checking of the added functionality detects during run time whether the added functionality causes the numerical control process to reach a resource limit.","In another aspect, there is provided Error handling that handles errors upon reaching a resource limit.","In yet another aspect, off-line checking detects off-line, before the run time of the numerical control process, whether the added functionality causes the numerical control process to reach a resource limit of the resource.","The invention further provides a flexible response to resource limit errors based on a degree of importance of the added functionality.","Various other aspects of the system and method according to the present invention are illustrated, without limitation, in the appended claims.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["10","1","14","16","18","12","1","12","14","16"]},"A more detailed explanation of the exemplary system will now be described with reference to . As shown, a Service provider  comprises a host  (referred to below simply as \u201chost\u201d) in communication with a system\/customer database  and an interactive user  that performs administrative or other functions. Any number of such databases  and interactive users  may interact with host .","An application programming interface (API)  makes possible for a Manufacturer partner  to deal with the content provided by the host . At the Manufacturer , one or more interactive users  interact with Manufacturer-partner host  for administration or other purposes. Content is also provided over network  as between host  and client . Client (or customer)  may comprise one or more controlled devices , such as a computer numerical controlled\/programmable logic controller (CNC\/PLC) systems, peripheral devices and sensors, controllers , personal computers  and host computers , some or all of which are in communication over an internal network . Of course, the present invention is not limited to numerical controlled devices, but encompasses Active Resource Control of all types of controlled devices.","Within the system shown in , the present invention provides Active Resource Control of a controlled device . As will be explained in more detail, the host  actively monitors and controls the resources of the controlled system . Data regarding status of the Resource(s) is stored in the database  and used by the host  to determine whether a particular Resource is overburdened.","In general, the steps for determining whether a resource is overloaded includes the step of measuring or estimating the free resources. In some instances, the resources can be determined from the operating system, which should know the time until the end of the cycle. This data can be passed from the O\/S to the resource control. In such cases, the operating system should know the current amount of free memory\/data storage and this is useful for executing the invention in every cycle.","The next step in the invention is to determine an estimated or a known future resource consumption resulting from the added functionality. It is preferred that, in the case of checking during the intervals of each cycle, the estimated or known resource consumption for the next step is determined. If, in some instances, the run-time of additional functionality is not known, but a worst-case estimation for sub-steps is known (e.g. each sub-step not more than 100 Microseconds) the worst-case limit may be used. The worst case estimation, in fact, may be used for some or all of the sub-steps instead of estimating resource usage individually for each sub-step (e.g. check at least each 100 us if more than 100 us processing time are left in cycle).","In addition to these steps, an additional step may be introduced. I the third step of the invention, a user-defined\/configurable safety margin may be determined that takes account of uncertainties in the estimations if any. Under the circumstances where the first two steps can not reasonably be estimated, a user-specified limit may be employed. For example, if free resources can not be estimated, a user may specify an estimation of the free resources, that is, specify a limit for the resources an additional functionality may use. Rather, if resource usage of the additional functionality (or a step thereof) is not known, the user-estimation may be used instead. It could be, for example, that the minimum amount of resources remaining is a specified quantity for a particular operating system.","As shown in , which is a schematic perspective of the invention, the resource allocation data is stored in the technical database B. Of course, this merely an example, and can be stored in any suitable storage device. In any event,  further illustrates the architecture shown in , particularly demonstrating the connectivity between host  and a customer operating client system , or Manufacturer , or others, who may arrange for and obtain access to the databases.","As illustrated, service provider , through its host , provides network-delivered automation-related content to a plurality of client systems, , , . . . , , each controlling a respective machine tool , , . . . , . Host  writes data into databases, for example, a first database A comprising commercial data and a second database, B, comprising technical data. An example of a data structure corresponding to each of the databases is shown below each of the databases A and B.","An example of the content of data structure , corresponding to database B will now be described. In an aspect of the invention, data structure  comprises a plurality of data sets, one for each customer. Each customer data set within data structure  may be recorded and accessed on the basis of the unique ID for that customer. Within the data for a given customer, there may be any number of sets of data corresponding to machines or client devices operated by the customer. Each such machine or client device is identified by a unique identifier or code, that is included in the data structure .","As shown in the Figure, data is first organized by customer. Given that a customer is likely to have any number of machines for which service provider  may be able to provide content, a plurality of fields, each corresponding to machines operated by that customer, may be present within a given customer's data, each such machine ID (or client ID) being unique to the particular machine tool or other controlled equipment. Data structure , thus, can provide a historical view of behavior over time for the particular machine.","In operation, the present invention accesses, for example, real time trace data relating to a Trace Function initiated on a Machine coupled to the host through the network. Based on the Resource Allocation Data stored in the Database B, the Active Resource Control determines whether the available Resource(s) will be overloaded by the added functionality. Of course, the Trace Function is but a single example of the various Functions that could overload System Resources that would trigger the Active Resource Control Mechanism of the present invention.","Of course, the present invention is not so limited to the particular arrangement or inclusion of data shown in . Certain information, for example, could be added or deleted, the data could be re-ordered, and other data structures could be used, consistent with this aspect of the present invention.","Now that the exemplary system has been explained with respect to Active Resource Control, we turn now to a more detailed explanation of the present invention itself. In , there is shown the architecture for Active Resource Control of the present invention. As shown, a System normally comprises Standard Functionality, including, for example, non-Real Time Standard Functionality  and\/or Real Time Standard Functionality . The Functionality sits on an operating system O\/S  which controls the System. In addition to the Standard Functionality, there may also be provided Added Functionality, including, for example, non-Real Time and Real Time Functionality , , respectively.","As explained, additionally loaded and\/or activated functionality imposes additional requirements, or loads, on the resources. This is particularly true of Real Time Systems, including such Resources as Time, Work Memory, Data Storage Capacity. Taking into account the already running functionality, the added Functionality may potentially cause resource limits to be reached. Thus, the strategy of the present invention is implemented to handle such cases in a way that best serves the tasks at hand.","In a first aspect, or step, of the invention, there is provided Pre-Activation Checking, which provides the first layer of Active Resource Control. This process performs a resource limit check after completing the specification of a configuration that causes additional functionality to be activated but before actually activating this configuration. Specifically, Pre-Activation Checking compares available free resources with the expected additional resource requirements of the functionality\/module to be added\/activated.","There are several methods of checking the availability of Resources. In one method, the (a1) actual resource usage is measured from the System. Normally, this data is stored by the host  in the database B as Resource Allocation Data. Another method within the present invention is to check (a2) an average or maximum resource usage measured for some period of time, for example, the previous minute, hour, or day. In practice, these two methods haven proven to be more precise, yet requiring less effort. However, these methods are dependant on circumstances which occur in the past, and real events may be more sporadic and unanticipated.","The present invention further provides a process that predicts resource overloads. The invention provides for various predictions. A first is based on assumptions of the current system configuration. Another is based on statistical, theoretical, simulation or experimental knowledge about resource usage of individual control functions. Further, the predictive data maybe derived from combinations of control functions. This process requires more effort, but it is more deterministic. If the stored data regarding the availability of resources has integrity, the prediction itself provides a best\/worst-case estimation.","In a similar, but different, aspect, the estimations regarding additional resources that are required are only based on the list of functions\/modules to be activated. The estimations, as before, could employ stored statistical, theoretical, simulation or experimental knowledge about resource usage of such control functions. The data could be drawn as well from a combination with each other or with certain control functionality.","In both situations, the required knowledge may be obtained in similar, or even the same, set of experiments, simulations, etc. An example of such an experiment may be the measurement of the Run Time of Numerical Control Functionality for different Numerical Control setups in the course of automated software regression tests being done periodically. Such timing measurement results are currently used only to identify and evaluate software development problems. In the present invention, the timing results are stored in a database for resource control. In the preferred mode, the data does not comprise a single number for each Function but, rather, a range of worst\/typical\/best cases, or other empirical data, such as statistical distribution.","The invention not only provides for monitoring and detection of overloading Resource Controls, but also provides responses, i.e., Control. Advance Checking is useful as a first estimation on possible resource problems. However, unanticipated events can, and do, occur even with Advanced Checking. Therefore, the invention provides a flexible response that is designed to react differently depending on the accuracy of the database and on the probability of resource problems that has been computed. With less accurate data, it is more likely that unanticipated results arise and vice versa. Here now is an example of responses provided by the present invention according to the degree of accuracy of the data.","If even under best case estimation, the available resources are not sufficient, then the present invention provides, in one aspect, that the activation of the added functionality is blocked without override. However, and as will be explained, there is further provided Error Handling which aborts the added functionality, whilst leaving the critical Functions running. In another aspect, if available resources are sufficient under the best case estimation, yet not sufficient under the typical case estimation, the added functionality is blocked with a warning but allowing the user to override the blockage of the added Function.","If available resources are sufficient under typical case estimation but not sufficient under worst case estimation, a warning is issued to the user but the functionality is maintained active. If, even under worst case conditions, the available resources are sufficient, the Function is activated without any warning. If the analysis results in some probability measure of resource problems the different kinds of reaction (a\u2013d, see above, others may apply) may be linked to certain value-ranges of this measure. As mentioned, the foregoing is an example of the responses that the invention provides in response to the degree of accuracy and, of course, variations thereof are within the scope of the invention.","The present invention was created to solve problems regarding overburdening Resources of a Numerical Control System, where a Trace Function was activated to trace the movement of a machine for diagnostics. It had been the case that the activated Trace Function caused the run time to reach the available cycle time of the cycle of interpolation task in a numerical control, for example an IPO cycle, and thus cause trouble in running the Numerical Control System. However, the present invention is not so limited to Trace Functionality and is similarly to be applied to any \u201caddable\u201d functionality (e.g. synchronous actions, additional numerical control kernel (NCK) software modules \u201ccompile cycles\u201d) that can be added\/activated by the user (i.e., OEM Machine Tool Manufacturer, Solution Provider, etc.) Nor is the invention limited to Numerical Control Systems, but may be incorporated with all Control Systems where added Functionality causes overburdening of allocated Resources.","A second aspect, or step, of On-Line Checking  of the present invention is shown in  which provides a second layer of Active Resource Control. As opposed to the Off-Line Checking of the first step, the machine tool here is On-Line, that is, coupled to the System and active. It shall be appreciated that On-Line Checking is advantageous because it monitors the events of the Machine in Real Time, events as they unfold, and access data of the Machine through the network during Run-Time. Some of the techniques used to monitor the events of the Machine during the first step, i.e., Off-Line Checking, may be employed as well in On-Line Checking. However, care must be taken with On-Line operations, because the Machine is running under a Cycle Time and it must be ensured that the Machine complete its task(s) within the cycle time.","The present invention presents possible various ways to optimize this checking to the needs of On-Line processing in real-time systems and to tailor it to the specific situation at hand. In one aspect, the present invention performs run checking every cycle or, alternatively, only periodically depending on the load caused by resource checking and the dynamics of changes in resource usage. In another aspect, the present invention performs a full check of available resources and expected usage or, alternatively, limit On-Line Checking to changes in available resources. Where On-Line Checking must be kept relatively simple, the checking might be done on a general level, disregarding a specific configuration of Control Functionality or additional modules\/functions. For example, the present invention provides a synchronous checking methodology, whereby checking is executed during run-time allocation of each IPO cycle and causing a running trace to be stopped (and alarm to be issued) if a certain limit is reached (e.g. 95% of cycle time used).","Especially for functionality that in itself is comprised of a number of resource consuming sub-steps (e.g Run-Time of Trace Functionality), where later steps may be omitted with limited effect on usability of the function, there are some additional possibilities for optimizing the on-line checking process.","In the case that the added functionality shifted toward the end of the cyclic task, the checking for available resources may be distributed within the activated additional functionality (e.g. Trace) in a way that checking is performed a plurality of times as illustrated by reference numeral in . This is contrast to checking per cycle as shown by reference numeral . In this manner, checking is executed along the course of functionality so that, in case of resource overload, the functionality until that time is completed and, only a part of the functionality is aborted. With this method, the steps that have been executed before aborting the functionality still provide something useful for completing the task during the next cycle perhaps or for debugging or troubleshooting purposes.","The present invention provides flexible responses to on-line detection of resource problems that may, for example, depend on the criticality of the added Function. In the case that a resource problem is persistent (e.g., long-term resource problems, or memory problems) the additional functionality is aborted (preferably with corresponding alarm) while the Standard Functionality is allowed to continue to run. If resource problem is intermittent (e.g., short-term resource problems, one cycle), the additional functionality should be aborted only for the cycle (preferably by message or alarm) and continued in the next cycle. This could occur, for example, during run-time upon the occurrence of a load peak of some system function. On the other hand, if functionality falls into a number of sub-steps, only the sub-steps that not yet have been completed will be aborted.","In another aspect of the invention, the limits and estimations used for On-Line Checking (e.g., best case, typical case, worst case estimation) are freely accessible, selectable and\/or configurable by the user.","In the third process or step of Error Handling , there is provided a third layer of Active Resource Control. If for any reason, the On-Line Checking did not detect a resource problem so that a resource limit is finally reached, a suitable error handling exception  is provided by the present invention. In the present invention, errors caused by some activated additional functionality are aborted\/disabled only while keeping the standard functionality alive. The present invention provides that this option is configurable, because, not all situations can operate without the additional functionality. When it is not possible, for example, for safety reasons, to run the system without the additional functionality, the whole system would have to be shut down in a safe way.","Now that a better appreciation of the invention is understood, an example of a specific operation thereof will be set forth with reference to , which illustrates an exemplary Control System and , which set forth the steps of Active Resource Control within the context of adding Trace Functionality.","As shown in , an operator, such as user  (), interacts, via a Human Machine Interface (HMI)  and an Interface , with a Control System  that controls Machine Tool . In the concrete example shown, the Control System  includes a base system , a Manufacturer Application Interface , that permits downloaded program code to be plugged into the Control System  as compile cycle(s) . For purposes of example, base system  provides a Trace Functionality for Data Capture that can be extended through Manufacturer Application Interface .","The Trace Functionality locally gathers data and stores it into a buffer or queue associated with any of the levels \u2013, after which a non-cyclic task takes buffer data and stores it into a file in data storage , which may be, for example, static RAM, such that it can later be merged into the trace data. The base system  is also in communication with various level control tasks, including pre-run control tasks , main (i.e., interpolator (IPO) level) control tasks , servo control and drive data control tasks , PLC data  and other information sources  within the machine control.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 6"},"At first, the background process of a Data Capture is briefly described. A client system HMI  receives program code associated with a selected service from host  over network  at step . Access by the real-time controller  is provided to the downloaded program code at step  and program code is executed. At step , data lists are identified and configured, which specify which data are to be captured. At step , respective events are configured, on the occurrence of which the specified data are to be captured. At , triggers are set, also according to the accessed, downloaded code.","At this point, the Additional Functionality for a Trace is started\/enabled at step  upon occurrence of the event configured at step . As detected at step , a link is made to the respective data list. Linking to a data list comprises storing a reference to which data list should be used. If the data collection capacity of the base system  has not been exhausted, as checked at step , then, based on the linked data list that contains a number of entries, each identifying one data to be recorded, all desired information is being accessed through base system  and, if required, through execution of the downloaded software. The specified data are written at step  to data storage , which may occur by way of an appropriate buffer.","As long as the capacity of data storage  is not exhausted, the trace continues until, at , occurrence of a respective trigger is detected. At the end of a post-trigger delay, assuming one had been specified, the link to the respective data list(s) are ended and writing to storage location  is terminated. If the data collection capacity had, at step , been exhausted, step  would also be invoked.","Preferably, a system using the data capture functionality described should use no more than, say, approximately 60% of available cycle time, which may help to avoid interference with any running applications. However, there are several instances where a Trace Functionality is in danger of exceeding this limit and even threatening overburdening resources.","For one thing, a \u201cNormal Trace\u201d by itself is capable of overloading the resources. While the Normal Trace is begun and ended upon definite events, and a transfer of the Trace Date occurs only when the trace is stopped, there are numerous applications triggered by Trace Functionality that can cause Resources to be overloaded. Trace Functionality triggers machine commissioning support. It activates failure detection and debugging of system problems. There are applications problems especially for complex applications with multiple channels, synchronous actions, etc. There is routinely run-time situations that handle, for example, sporadic run-time problems. Often, Traces include crash-handling procedures, such as complete data gathering via Kernel dump. There may even be logic analysis involved in a Trace, such as oscilloscope, tachometer, etc.","In addition, there are a number of common requirements for the captured Trace information that could cause a resource overload. These include, for example, the accommodation of data including system variables, drive signals, PLC flags, as well as events such as status, changes in status, binary signals, alarms, etc. The Trace Function accesses local user program data, such as flags in the PLC program. Trace Functions are also known to copy Traced Local Data into a suitable global variable.","Previously, after a crash or a stop, as soon as data are transferred, the resources are again made free. By contrast, the present invention aims to respond to a resource overload to possibly avert a crash. If a crash is unavoidable, high robustness of gathering the data after a fault occurs is desirable and may be accomplished in the following ways. Data, to the extent possible, is made available after a resource overload. As previously mentioned, sudden errors during-a-Trace do not necessarily lead to a data overflow and there is provided in the invention suitable reactions in the event of resource scarcity. If an event or condition does occur, the data files are preserved according to the invention.","As mentioned, the present invention provides multiple layers of Active Resource Control. As shown in , these layers are overlayed on the System. Needless to say, these layers may be implemented in conjunction or separately. As shown, the step of Pre-Checking  is initiated before the start of the Function, i.e., Trace Function as shown, the detailed steps of which have been discussed above. It will be appreciated from the Figure that the Pre-Checking step  is executed Off-Line, that is, before the Function is running.","In comparison, the On-Line Checking step  runs, on-line, that is concurrently with the Function as will be appreciated from . In other words, step  performs Active Resource Control in Real Time. Further, the granularity of the On-Line Checking step  is configurable, that is, may either be initiated On-Line in the course of the Function or as many times as desired. This is illustrated in the Figure as steps . It shall be appreciated that increasing the granularity may improve the probability of detecting a Resource overload before the System crashes. Upon detection of an overload, the invention further provides, as already described, a flexible response, which includes aborting the added Functionality without halting the entire system.","Another layer is the Error-Handling step , which has already been discussed. As will be appreciated from , step  also is activated during Run-Time. Indeed, the Error-Handling may be considered to run in the background, as it is triggered when a Resource limit is reached, which was not previously detected by, for example, the other Active Resource Control layers.","Now with respect to , the steps for the collection of the Resource Allocation data shall be described. A user of client , such as a machine tool. Host  queries the user for ID codes, that may include a customer ID code and a machine ID code, for example. Host , then, transmits to the user a set of options, which may include a list of Functions, at . The user transmits and the host  receives the user's selection of an option, at . Based upon the user's selection, host  retrieves from a database a set of properties for the client machine tool, at , and confirms, at , that the selected option is appropriate for the machine tool being operated by client . If not, host  notifies the user, at , that the selected option is inappropriate under the circumstances and that another option should be selected.","Otherwise, the host  retrieves information for the selected option, at , and retrieves content, e.g., program code, associated with the selected option, at , that may be executed at the host  and\/or at the client . In addition, the information includes the specific Machine Tool Resource Allocation Data. In general, this data will be transferred to client , to be used, according to the description provided above, to assist in controlling the machine tool and gathering particular, resultant data. Following its retrieval, any content, such as program code, that has been retrieved by the host  is transmitted to client , at .","At , , host  creates a database record for the transaction corresponding to the option selected by the user. Host  associates the client and machine tool IDs with the database record, at , thereby identifying the specific machine tool that executes the selected Function. In addition, at , host  associates the date and time the selected option is invoked with the database record established at . Moreover, host  may also associate the earlier-retrieved Resource Allocation Data with the database record, at .","Next, host  awaits user initiation of client machine tool behavior corresponding to the selected option and the associated, downloaded program code and\/or data. The purpose of this waiting step, at , is to ensure user safety: particularly when moving machinery is involved, running the machinery should involve a manual step to help make sure the operator is aware of imminent machine activity before it begins and thereby avoid injury to personnel.","Host  receives a message, at , indicating that the user has initiated activity associated with the selected option. Host  also then awaits transmission, at , of data generated in connection with operating the machine tool and collected from the machine tool controller during the course of the selected option, including the Resource Allocation data gathered at the machine tool. Then, at , host  receives machine tool data collected from the client  machine tool and is stored in the database. In this manner, the Resource Allocation data is retrieved.","In , host , at step , processes data collected from client according to code corresponding to the option selected by the user. Then, at step , the results of processing the data uploaded from client  (e.g., generated by numerical analysis module , of ) are transmitted to client , or, in some embodiments, to an entity that owns or controls it. When the session or transaction comes to a close, or at another suitable time, billing information is retrieved or generated, at , based on retrieved price information and is processed for transmission to the user or its owner or operator. In step , the database and selected option are made available for access by partner organizations. The order and the particulars of the above-steps may be varied. Moreover, other steps may be added without departing from the scope of this aspect of the present invention.","In addition to the embodiments of the aspects of the present invention described above, those of skill in the art will be able to arrive at a variety of other arrangements and steps which, if not explicitly described in this document, nevertheless embody the principles of the invention and fall within the scope of the appended claims. For example, the ordering of method steps is not necessarily fixed, but may be capable of being modified without departing from the scope and spirit of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 7A\u20137C"}]},"DETDESC":[{},{}]}
