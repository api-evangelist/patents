---
title: XML schema for binding data
abstract: An XML schema is provided allowing data to be stored in a separate location from the presentation surface of an application. By way of the schema, users of the application can establish links (or bindings) between the contents of the data and the presentation surface as part of an XML document format. Methods, systems, and computer-readable medium are described implementing the schema.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07617234&OS=07617234&RS=07617234
owner: Microsoft Corporation
number: 07617234
owner_city: Redmond
owner_country: US
publication_date: 20050225
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["This application is a continuation-in-part of U.S. application Ser. No. 11\/030,423, owned by Microsoft Corporation and filed with the United States Patent and Trademark Office on Jan. 6, 2005, entitled \u201cData Binding in a Word Processing Application,\u201d which is herein incorporated by reference in its entirety.","This application is related to U.S. application Ser. No. 11\/065,754, entitled \u201cMethod and Apparatus for Utilizing an Object Model for Managing Content Regions in an Electronic Document,\u201d and U.S. application Ser. No. 11\/066,058, entitled \u201cMethod and Apparatus for Utilizing an Extensible Markup Language Schema for Managing Specific Types of Content in an Electronic Document\u201d, each owned by the Microsoft Corporation, filed concurrently herewith and incorporated in their entireties.\u201d","Markup Languages have attained wide popularity in recent years. One type of markup language, Extensible Markup Language (XML), is a universal language that provides a way to identify, exchange, and process various kinds of data. For example, XML is used to create documents that can be utilized by a variety of application programs. Elements of an XML file typically have an associated namespace and schema.","A namespace is a unique identifier for a collection of names that are used in XML documents to define element\/attribute names and types. The name of a namespace is commonly used to uniquely identify each class of XML document. The unique namespaces differentiate markup elements that come from different sources and happen to have the same name.","XML Schemata provide a way to describe and validate data in an XML environment. A schema states what elements and attributes are used to describe content in an XML document, where each element is allowed, what types of content is allowed within it and which elements can appear within which other elements. The use of schemata ensures that the document is structured in a consistent and predictable manner. Schemata may be created by a user and generally supported by an associated markup language, such as XML. By using an XML editor, the user can manipulate the XML file and generate XML documents that adhere to the schema the user has created. In previous word processor applications, support for custom XML schemas was added to the application, enabling users to \u2018tag\u2019 contents of a document with custom XML markup (e.g. <title>), essentially giving semantic meaning to what was previously an unclassified run of text. This meant that a document, which was previously just text with formatting, but no meaning for other applications to process, could now be a structured XML document containing specific pieces of XML markup from any user-defined XML schema that any other XML-aware application could locate and understand.","In a basic example, the text at the top of a document could be \u2018tagged\u2019 as a title with a <title> XML element from a user-defined XML schema, which means that other XML-aware applications can now easily understand that this range of text contains a \u201ctitle\u201d and extract it appropriately. This enables a backend process to intelligently extract parts of the document with appropriate semantics and context (e.g. this text is the <title>).","However, the drawbacks associated with prior word processor applications stem from the fact that the addition and persistence of custom XML markup is tied to the presentation of the document. That is, in the existing implementations there is an inexorable link between the XML markup of a word processor document (for example, the details of a customer invoice expressed in XML format) and its presentation on the document surface (three paragraphs of plain text followed by a table with 5 columns and 4 rows w\/ a specific table style, for example). Therefore, the XML data represented in prior word processor applications (because it is tied to the presentation) must coincide exactly with the content of the document. For example, if the XML schema for the invoice states that <date> comes before <address>, which comes before <phoneNumber>, then those three XML elements must appear in exactly that order as presented in the document. This means that changes to the presentation format (e.g. moving a table row around which contains <date>) will also cause changes to the structure of the XML data contained in that document, which requires extra steps on the part of the solution developer to ensure this data conforms to the structure of the associated XML schema. Thus, the end user of the document is not afforded the freedom to manipulate the presentation freely, because doing so might invariably change the semantics of the data, potentially violating the XML schema for that data.","Additionally, solutions developed on top of prior word processor applications need to more carefully consider the implications of the presentation when attempting to read\/write data from a document for a backend application. So, if a paragraph of bold text is tagged as a title, the resulting XML saved by prior word processor applications would look like:",{"@attributes":{"id":"p-0010","num":"0009"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<w:p>"]},{"entry":[{},"\u2003<Title>"]},{"entry":[{},"\u2003\u2003<w:r>"]},{"entry":[{},"\u2003\u2003\u2003<w:rPr>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<w:b\/>"]},{"entry":[{},"\u2003\u2003\u2003<\/w:rPr>"]},{"entry":[{},"\u2003\u2003\u2003<w:t>This is the title.<\/w:t>"]},{"entry":[{},"\u2003\u2003<\/w:r>"]},{"entry":[{},"\u2003<\/Title>"]},{"entry":[{},"<w:p>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As shown above, the custom XML tagging is surrounded on both sides by XML tags that are very specific to the prior word processor application\u2014in this example, w:p, w:r, etc. This means that a XML-aware solution which is processing this data must not only understand its own data format (which contains the <Title> element), but must also understand the exact details of the prior word processor application formatting, so it knows to traverse and ignore that information as it is searching for its own data. Accordingly, this kind of implementation still imposes some requirements on the user, because small changes in the look of the text in the document (for example, dragging the contents of the <Title> element into a table cell, etc.) can result in significant changes the location of the custom XML tags within the surrounding word processor's native tags. Thus, a programmer\/code developer often needs to write additional code to anticipate and understand where the prior word processor applications is going to put the custom XML elements based on the presentation and deal with all of the various permutations. This means the resulting solution may still need to contain significant logic code for dealing with specific prior word processor application needs.","Programmers\/code developers working with the prior word processor applications also need to take into consideration the implications of a document's layout format when considering reading and writing operations. For example, a user might attempt to grab the value of a <StockSymbol> element and use it to place the full name of a company in the <CompanyName> element in the same document as a simple enhancement for a user writing a company report. To maintain the document's integrity, the user needed to consider, both on the reading and writing of the desired data from the document, the current layout format of the document before they could write functional code to perform these actions. For example, the user might need to know if the value they were writing was in a table cell, a bulleted list, etc., in order to construct the prior word processor application's formatting information that, when inserted into the document, would produce the desired result. This is another potential reason for additional coding in order to understand the word processor application's presentation semantics.","Yet another limitation of prior word processor applications is that XML elements' editing behaviors can sometimes be perceived as \u201cfragile.\u201d This is partly because, as discussed above, they are limited by the fact that the positioning of the tags on the document surface determines the structure of the XML data based on the user defined schema. Accordingly, a number of issues may arise. First, typical user operations (e.g. copy\/paste from one section to another) may alter the XML structure and render the document invalid according to the associated XML schema. Second, in such word processor implementations, all elements required by the customer-defined XML schema need to be included in some form on the document surface. This means that developers may have a hard time creating associated XML data as a method for carrying around additional information about the document which is not displayed on the document surface, but serves more as metadata. And, third, elements which are semantically unnecessary on the document surface (e.g. non leaf elements which are not marking up mixed content) need to be included as well in such word processor implementations, further increasing the ability of common user operations to modify the XML data.","In many cases, the schema which defines the XML data (for example, the data that comprises a memo document) tends to be rigidly defined by a single standards body in order to facilitate the communication of this data between multiple heterogeneous processing systems. However, in so facilitating the backend communication, often the human readability and editability of the document data is sacrificed, which making it difficult for a user to understand and parse this data. For example, the XML standard might define a standard format for dates, such as: dd-mm-yyyyThh:mm:ss.ssss. All dates are required to be represented in this format to be parsed by XML-aware applications. Obviously, this format is hard for the user to enter correctly, and often clashes with the way in which the user typically enters dates (e.g. many locales typically use mm-dd-yyyy instead of dd-mm-yyyy, etc.).","Thus, what is needed is a way to enable developers to separate the XML data and the presentation of such data in an application, such as a word processor application.","Embodiments of the invention provide a word processor application, including a schema, for creating word processor documents wherein the data and presentation can be separated. More particularly, data can be entered into and extracted from a word processor document which is stored in a separate location from the presentation format of the word processor document. According to embodiments of the invention, users of the word processor application can create a separate storage location for the word processor document data and establish links (or bindings) between the contents of that data and the presentation surface. According to embodiments of the invention, a computer-readable medium, method, and system utilize a schema for binding data. The schema includes a data binding element and associated properties for binding data between a data store and one or more content regions.","Throughout the specification and claims, the following terms take the meanings explicitly associated herein, unless the context clearly dictates otherwise.","The term \u201cdata\u201d refers to any supplementary information which is carried with, referred to, or used by the word processor document. This information is often large and is likely not exposed on the presentation layer of the document in its entirety.","The terms \u201cmarkup language\u201d or \u201cML\u201d refer to a language for special codes within a document that specify how parts of the document are to be interpreted by an application. In a word processor file, the markup language specifies how the text is to be formatted or laid out.","The term \u201celement\u201d refers to the basic unit of an XML document. The element may contain attributes, other elements, text, and other content regions for an XML document.","The term \u201cpresentation\u201d refers to the visible portion of the document\u2014the text and layout that would appear if the document were printed.","The term \u201ctag\u201d refers to a character inserted in a document that delineates elements within an XML document. Each element can have no more than two tags: the start tag and the end tag. It is possible to have an empty element (with no content) in which case one tag is allowed.","The XML content between the tags is considered the element's \u201cchildren\u201d (or descendants). Hence other elements embedded in the element's content are called \u201cchild elements\u201d or \u201cchild nodes\u201d or the element. Text embedded directly in the content of the element is considered the element's \u201cchild text nodes\u201d. Together, the child elements and the text within an element constitute that element's \u201ccontent\u201d.","The term \u201cattribute\u201d refers to an additional property set to a particular value and associated with the element. Elements may have an arbitrary number of attribute settings associated with them, including none. Attributes are used to associate additional information with an element that will not contain additional elements, or be treated as a text node.","The term \u201ccontent region\u201d refers to a bounded and\/or optionally labeled region of a document which serves as a container for a type of content entered by a user. See \u201cMethods, System, and Computer-Readable Medium For Managing Specific Types of Content In An Electronic Document,\u201d filed on Sep. 30, 2004 and assigned U.S. Ser. No. 10\/955,612, by the present assignee, which is hereby incorporated by reference in its entirety.","\u201cXPath\u201d is an operator that uses a pattern expression to identify nodes in an XML document. An XPath pattern is a slash-separated list of child element names that describe a path through the XML document. The pattern \u201cselects\u201d elements that match the path.","The term \u201cdata store\u201d refers to a container within the word processor document which provides access for storage and modification of the data (in XML format, for example) stored in the word processor document while the file is open.","The term \u201cdata binding\u201d refers to a property on a content region which determines the XPath location in one or more pieces of XML data inside a word processor document where the contents of the content region may be stored. As used herein:\n\n","Embodiments of the invention provide a word processor application for creating word processor documents wherein the storage of XML data and presentation can be separated. More particularly, data which can be entered into and extracted from a word processor document is stored in a separate location from the presentation format of the word processor document. Accordingly, users of the word processor application can create a separate storage location for the XML data contained within a word processor document and establish links (or bindings) between the contents of that data and the presentation surface, enabling the user to edit the associated XML data by editing the contents of the presentation, but by the same token, preventing the user from changing the structure of the associated XML data. For example, the data for an invoice can be stored separately as XML in the word processor file format so that moving around the positions of the links in the document does not change the structure of the separate data store. Thus, backend processing of this structured data is made easier, as the data now has a known structure which is unaffected by the way the user edits the document. A user can edit the data, format the data, including rich presentation formatting, etc. in the word processor document, and only the changes to the text content is \u2018pushed\u2019 back to the XML data stored behind the document. According to the invention, however, all the data updated that are made via user interaction with the word processor document are available in an original native stream of XML. The invention therefore also enables the modification of the contents of a word processor document by directly changing the linked XML data without having to deal with the complexity of the presentation format of that data, which again can be constantly changing. In so doing, it greatly simplifies the addition, editing, and extraction of structured data in a word processor document.","With reference to , one exemplary system for implementing the invention includes a computing device, such as computing device . In a very basic configuration, computing device  typically includes at least one processing unit  and system memory . Depending on the exact configuration and type of computing device, system memory  may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.) or some combination of the two. System memory  typically includes an operating system , one or more applications , and may include program data . In one embodiment, application  may include a word processor application . This basic configuration is illustrated in  by those components within dashed line .","Computing device  may have additional features or functionality. For example, computing device  may also include additional data storage devices (removable and\/or non-removable) such as, for example, magnetic disks, optical disks, or magnetic tape. Such additional storage is illustrated in  by removable storage  and non-removable storage . Computer storage media may include volatile and nonvolatile, removable and non-removable mediums implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data. System memory , RAM, ROM and CD-ROM are all examples of computer storage medium. Computer storage media includes, but is not limited to, EEPROM, flash memory or other memory digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other storage medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device  may also have input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, etc. Output device(s)  such as a display, speakers, printer, etc. may also be included. These devices are well know in the art and need not be discussed at length here.","Computing device  may also contain communication connections  that allow the device to communicate with other computing devices , such as over a network. Communication connection  is one example of communication media. Communication media may typically be embodied by computer readable instructions, 15 data structures, program modules, or other data in a modulated data signal, such as a carder wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.","A number of program modules and data files may be stored in the system memory  of the computing device , including an operating system  suitable for controlling the operation of a networked personal computer, such as the WINDOWS XP operating system from MICROSOFT Corporation of Redmond, Wash. System memory  may also store one or more program modules, such as word processor application , and others described below. Word processor application  is operative to provide functionality for creating, editing, and processing electronic documents.","According to one embodiment of the invention, the word processor application  comprises the WORD program from MICROSOFT Corporation. It should be appreciated, however, that word processor application programs from other manufacturers may be utilized to embody the various aspects of the present invention. It should further be appreciated that the various aspects of the present invention are not limited to word processor application programs but may also utilize other application programs  which are capable of processing various forms of content (e.g. text, images, pictures, etc.), such as spreadsheet application programs, database application programs, presentation application programs, drawing or computer-aided application programs, etc.","Embodiments of the invention may be implemented as a computer process, a computing system, or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process.","Binding Data in a Word Processor Application",{"@attributes":{"id":"p-0041","num":"0044"},"figref":["FIG. 2","FIG. 2"],"b":["200","202","204","206","208","210","212","106","206","212","204","208","204","208","210","212","202","212"]},"The word processor application  includes its own namespace or namespaces and a schema , or a set of schemas, that is defined for use with document(s)  associated with word processor application . The set of tags and attributes defined by the schema  for word processor application  define the format of document . As described below, and according to embodiments of the invention, the data store  may include data . Preferably, the schema  is attached to the data  within the data store . The word processor document  also includes content regions  created by a user, as described below. More than one data store , associated XML data  and schema  may be included as part of the word processor application . In order to provide XML data  with a set of grammatical and data type rules governing the types and structure of data that may be included in a given XML data , one or more XML schema  may be associated with the XML data  for providing the rules governing each of the XML elements and tags with which the user may annotate the given XML data . The schema  includes the rules governing the order with which those elements may be applied to the XML data  and specific rules associated with individual elements applied to the XML data .","Embodiments of the invention provide a word processor application  operable to create word processor documents  wherein the data and presentation can be separated via the presence of a separate data store  which is stored with the word processor document. More particularly, data which can be entered into and extracted from a word processor document  is stored in one or more XML data  files within the document's data store , thereby separating the data from the presentation format of the word processor document . Accordingly, users of the word processor application  can create a separate storage location for the data of a word processor document  and establish links (or bindings) , associated with one or more content regions , between the contents of that data and the presentation surface , enabling the user to edit the data by editing the contents of the presentation, but by the same token, preventing the user from changing the structure of the data . Moving around positions of the content regions  in the document  does not change the structure of the XML data  in the separate data store . Moreover, changes made to the data presentation, bold, italic, justification, etc. do not affect the data structure. Thus, backend processing of the structured data is simplified since the XML data  corresponds to a known structure which is unaffected by the way a user edits the document .","Embodiments of the invention enable the modification of the contents of a word processor document  by directly changing the linked data without having to deal with the complexity of the presentation format, which can be constantly changing. In so doing, it greatly simplifies the addition, editing, and extraction of structured data in a word processor document . Moreover, data bindings  bound to structured XML data  may be moved around in the document  without affecting the structure of the data. The data bindings  on the content regions  are preferably enabled using an XPath expression, which may be defined via a user interface or programming window .","A user uses the XPath expression (a standard XML method for identifying a node  in an XML tree) to uniquely identify a desired XML node  which the document content region should be bound to. The word processor application  operates to automatically parse and use the XPath to locate the desired target for the data binding region. This also means that developers familiar with the XPath standard can leverage this use of XML to create data bindings  which are semi-dynamic in nature. That is, identifying a different target node  based on other changes to the data  or changes to the presentation . For example, suppose a user wants to display the name of the employee who has completed the most sales in a given time period. If this information was in the XML data  associated with a document , a user can create an XPath expression which links to the name of the individual with the highest number of completed specifications, and that link automatically shifts to the appropriate location (node ) as the data changes. The link can also be changed between nodes  through the use of code , the user interface, or a programming environment .","Alternatively, a user can create a data binding which uniquely identifies the object representing node  in the data  which the document content region  may be bound to. The word processor application  operates to automatically determine the XPath to locate the desired target for the data binding region. However, this means that in this case, the data binding  will have its XPath updated automatically to ensure that the data binding  points at the same object, as opposed to the same XPath expression.","Programming code , as described briefly above, may be developed to utilize the XML processing module  and react to changes moving in either direction (i.e. from a content region  on the document surface  to a node  in the XML data  in the data store , and vice versa). A user can develop code  that defines relationships between the document surface  and specific content within the data store . Moreover, code  can be developed that reacts to changes within a bound region of the document  or within the data store , trapping or intercepting events, such as edits, additions, deletions, etc. For example, suppose a user wants to ensure that not more than one document can use a specific title. The code , based on what is input into the title node, might check against a central database whether the title is already being used. If the title is taken, the code  may prompt the user to enter another title and\/or alert the user that the title is unavailable. Embodiments of the invention enable a user to write code  a single time with the associated XML, and the code is now portable to all document types that support the use of XML constructs without worrying about the exact semantics of the target application, thereby greatly simplifying and streamlining application development.","According to embodiments of the invention, a word processor document  may be tagged with content regions  representing semantics for specific regions of text (e.g. Title, Body, etc.) and by adding a data binding  the associated text within that content region  is now stored in a node  inside some XML data  in the data store  within the document . The data  is linked to the content region  in the document, i.e. tagged regions, using one or more data bindings . Accordingly, data  can now be stored in a consistent location (\u201cdata store\u201d) in its own XML stream regardless of where the data binding  locates the associated content in the presentation , i.e. the digital representation that a user interacts with when editing a particular document (e.g. a WORD window depicting a particular user document) of the document  or how that data  is presented. Thus, a user does not have to worry about data being moved around in the document , because the XML data  is now located within the data store  in a consistent location. Moreover, the data store  can contain data  which is not referenced by a data binding  within a document . The \u201cextra\u201d data, such as metadata, etc., provides additional information to users, such as solution developers, which may not be relevant to the document user.","According to embodiments of the invention, the structure of the data is kept in a separate location, one or more pieces of XML data  within the document's data stores , thereby enabling the user to move around links (i.e. data bindings ) in the presentation , without affecting the data structure. Accordingly, the structure of the XML data  does not change, just the presentation of the XML data  associated with the word processor document  changes. Thus, changing the format of the data presentation in the document , does not affect the structure of the data store . The user is not moving the actual data  by manipulating the document surface \u2014thus the user has complete control over the presentation without having to be concerned about ramifications to the data , which is being maintained separately in the store . Thus, embodiments of the invention allow users to access custom XML information separate from the presentation information.","The one or more data bindings  can be used to \u201cbind\u201d content of a data source (XML data  in the data store ), herein termed XML data , to locations in the document . XML data , as used herein, includes any type of content such as text (plain or richly formatted), images, content of a specific type (dates), etc. The structure of a data binding  may be described as an XPath link, which allows the word processor application  to connect to\/synchronize with\/persist links to XML nodes  in an XML data store  associated with a document . The XML data store  is most preferably a part of the document  (i.e. the store  is saved to with the word processor file and travels or associates with the particular document ). A data binding  may also contain information to control how the data  should be transformed between the presentation (the word processor's document surface , for example) and the data store . A user of the word processor application  can allow the data  stored in the data store  (the data that is manipulated by the backend applications) to be stored in a standard format, but present the same information in a word processor document  in a friendlier format (e.g. the user sees Jan. 29, 2004, but the data is stored in dateTime format as 29-01-004T12:00:00.0000). As another example, the data binding information can contain an image\u2014to the data  this image is represented as a seemingly meaningless string of characters, but the same transformation principle described above means that the user will see an image in the content region  of the word processor document . The user can add\/change the image and the XML-encoded representation will be persisted to the XML data  so that any backend process can store\/manipulate that information.","According to an embodiment, when a user adds data binding information  to a content region , the user provides the linked XML data  of interest (identifying one or more nodes , for example) by specifying the XPath expression. Once bound, the content of this content region  will be linked or bound to the content (XML data) of the node  returned by that XPath. Consequently, this means that if an XML node  is added\/removed\/changed in such a way that the XML node  returned by the XPath changes, then the content of the content region  in the document  updates automatically. Alternatively, if a change occurs which results in no node  being returned by a particular data binding , then the data binding  goes into a \u2018dangling reference\u2019 state, described below.","For example, suppose a document  includes the following paragraph, where \u201cMicrosoft Corporation\u201d corresponds to a plain text content region  (shown in italics) bound to the XPath\/contract(1)\/header(1)\/company(1) in some linked XML data  within the data store  for that document. The paragraph displayed on the presentation  is:","\u201cMicrosoft Corporation is located at One Microsoft Way.\u201d","According to one embodiment, a link can be set up by specifying a single line of code in a programming environment  (for example):","Document.ContentRegions.Add( ).DataBinding.Add(\u201c\/contract(1)\/header(1)\/company (1)\u201d)","The corresponding linked XML data  might look like (with the linked to node  depicted in single quotes):",{"@attributes":{"id":"p-0057","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<contract>"]},{"entry":[{},"\u2003<header>"]},{"entry":[{},"\u2003\u2003\u2018<company>Microsoft Corporation<\/company>\u2019"]},{"entry":[{},"\u2003\u2003<company>Contoso Corporation<\/company>"]},{"entry":[{},"\u2003<\/header>"]},{"entry":[{},"<\/contract>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Suppose now that a user uses the data store  API to add a new <company> node  as the first child of <header> (new node  in single quotes):",{"@attributes":{"id":"p-0059","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<contract>"]},{"entry":[{},"\u2003<header>"]},{"entry":[{},"\u2003\u2003\u2018<company>Fabrikam Corporation<\/company>\u2019"]},{"entry":[{},"\u2003\u2003<company>Microsoft Corporation<\/company>"]},{"entry":[{},"\u2003\u2003<company>Contoso Corporation<\/company>"]},{"entry":[{},"\u2003<\/header>"]},{"entry":[{},"<\/contract>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The resulting binding  on the content region  is still bound to the same XPath (\u201c\/contract(1)\/header(1)\/company(1)\u201d), so the document content would immediately update to show the new contents of that node :","\u201cFabrikam Corporation is located at One Microsoft Way.\u201d","According to the invention, if one or more regions of a word processor document  contain data bound content regions , the document  reacts to changes to either source of the linked content. Accordingly, if a range of the document  is data bound, then changing the contents of the XML node  in the associated XML data  will result in an automatic change to the text of the content region . Correspondingly, if a range of the document  is data bound, then changing the text of that bound content region  in the document , results in an automatic change to the contents of the XML node  in the corresponding XML data . That is, multiple content regions  with identical bindings  may exist in multiple places in the document . For example, a content region  with a data binding  to a name may be added to the header as well as the body of a document . Changing either of these locations synchronizes that text with the XML data store , which will in turn reflect that change wherever a content region  with a data binding  to that node  exists in the document .","An XML node  in the XML data  can have a one-to-many relationship with the document , which means that the same XML node  in the XML data  can be referenced by multiple data bindings . Whenever the data bound content region  in the document  is updated, it causes a change to the appropriate XML node  in the XML data , which in turn causes all other associated bindings  in other content regions  in the document  to be updated with that new text. For example, suppose a content region  in the header of the document  contains a data binding  specifying the XPath expression for a <title\/> node in some XML data  and another content region  in the body of the document  also contains a data binding  to that same element. According to the invention, both will display the same content, even though they may have different formatting. If a user edits the content in the content region  in the body of the document , that update will be persisted to the appropriate XML node  in the appropriate XML data  in the data store , causing all other content regions  with associated bindings  in the document  (e.g. in the header, footer, etc.) which also specify that XML node  to update. Embodiments of the invention provide a mechanism for binding multiple locations in the document to a single XML node  in the data store , now linking the content of all of those locations to a single source of data. Accordingly, the contents of all content regions  in the document  which are linked to the same node  in the XML data  are identical.","An illustrative example of this is a typical report document, where the user might normally have the title displayed in several locations: on the cover page (in large bold text), in the header (in smaller text), and in the footer (in smaller italicized text). Normally, the user would have to type out the title in each location, ensuring that if the title is changed in any one of these three locations that they remember to change it in the other two (to keep the content consistent). However, it is all too easy to forget to keep all three of these locations in sync. According to an embodiment of the invention, once a data store  is in place that contains XML data  that the user wants to display in the document , multiple locations in the document (e.g. the three locations discussed above) can all be content regions  data bound to a single XML node  in the data store .","Thus, the content of all three locations are linked or bound to a single source of data . This means that the user, by changing the contents of any one of these regions (e.g. the cover page) will automatically cause the user's text to be pushed to the underlying XML data , and then in turn pushed to the other locations in the document  having content regions  with corresponding data bindings  (in this case, the header and the footer). This means that the user, insofar as their interaction with the document, has now linked or bound these three ranges of content so that they are all identical. According to the embodiments of the invention, the regions of the document can be presented in multiple ways (large and bold, small and italicized, etc.), but the data structure in the data store  remains the same.","Dangling References","According to an embodiment of the invention, users can also specify XPath expressions that do not have a target\u2014their specified target XML node  does not exist in the XML data  in the data store . The data binding  does not \u2018forget\u2019 its desired target node , rather it goes into a \u2018waiting\u2019 state, where it is not connected to any specific XML data , but is waiting to see if the desired node  appears in the XML data  in the backing XML data store . This is particularly useful for document assembly scenarios, where each part of a document  (for example, a standard cover page, end page, and reused clauses) may contain data bindings  which should only be populated when these parts are assembled into a single final document . In this case, the document creator specifies data bindings  within content regions  in each of the document \u2018parts\u2019 to XML nodes  in the XML data  which did not exist in that part (for example, the cover page might contain a content region with a binding  to a <Title\/> XML element and a <Date\/> XML element). When the part is viewed outside of its target document, those bindings are not connected, as no XML data  exists, but as soon as the part is added to a document which does contain the desired data , the data bindings  immediately connect (synchronize) to the data  and display the correct content\u2014allowing the document creator to specify bindings  and save them even though the data  has not yet been generated.","One type of dangling reference  occurs when a data binding  on a content region  cannot be successfully linked to a node  in a linked XML stream, (i.e. a state of a binding in a content region). When a node  is replaced\/removed from a linked XML stream, one or more data bindings  may become dangling references  as a result. Preferably, if a data binding  has a dangling reference  due to its XPath, the word processor application  continues to store the last known XPath for the node  on the data binding . This can occur when the XPath no longer resolves to any node . Each time the data store  messages an update of some XML data  to the word processor document , the word processor application  checks if any dangling references  are resolved by the latest update (i.e. the XPath now points to a valid node  in the XML tree). If the word processor application  resolves a dangling reference, the content of the data store  preferably takes precedence over the content currently in the data binding \u2014that is, the content of the data binding  is replaced by the content in node  in the data store . Dangling references are preferably exposed using a simple API layer, accessible through one or more programming environments .","As an example, suppose a word processor document  includes the paragraph below, where Microsoft Corporation corresponds to a plain text content region  data bound to the XPath \/contract\/header\/company() in some XML data :","\u201cMicrosoft Corporation is located at One Microsoft Way.\u201d","The corresponding XML data  might look like (with the linked to node  in single quotes):",{"@attributes":{"id":"p-0072","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<contract>"]},{"entry":[{},"\u2003<header>"]},{"entry":[{},"\u2003\u2003<company>Fabrikam Corporation<\/company>"]},{"entry":[{},"\u2003\u2003<company>Contoso Corporation<\/company>"]},{"entry":[{},"\u2003\u2003\u2018<company>Microsoft Corporation<\/company>\u2019"]},{"entry":[{},"\u2003<\/header>"]},{"entry":[{},"<\/contract>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"If a user, such as a developer, uses the data store's  API to remove the first <company> node  under <header> (node  in single quotes):",{"@attributes":{"id":"p-0074","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<contract>"]},{"entry":[{},"\u2003<header>"]},{"entry":[{},"\u2003\u2003\u2018<company>Fabrikam Corporation<\/company>\u2019"]},{"entry":[{},"\u2003\u2003<company>Contoso Corporation<\/company>"]},{"entry":[{},"\u2003\u2003<company>Microsoft Corporation<\/company>"]},{"entry":[{},"\u2003<\/header>"]},{"entry":[{},"<\/contract>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The resulting data binding  on the content region  in the document  maintains a link to the same XPath, so the data binding  becomes a dangling reference  to the now non-existent \\contract\\header\\company(3):",{"@attributes":{"id":"p-0076","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<contract>"]},{"entry":[{},"\u2003<header>"]},{"entry":[{},"\u2003\u2003<company>Ford Corporation<\/company>"]},{"entry":[{},"\u2003\u2003<company>Intel Corporation<\/company>"]},{"entry":[{},"\u2003<\/header>"]},{"entry":[{},"<\/contract>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This means that internally we have a broken link, but in accordance with the invention, the content of the content region  does not change, and no errors occur, i.e.,","\u201cMicrosoft Corporation is located at One Microsoft Way.\u201d","When some XML data  is replaced or removed (or when a link is moved from one document to another), then all data bindings  which reference that XML data  immediately become dangling references  pointing to the deleted XML data . If a data binding  contains a dangling reference , the word processor application  continues to store the last known XPath\/namespace link associated with the data binding . According to an embodiment of the invention, when a set of data bindings  become dangling references , the word processor application  attempts to reattach these links to any other available XML data  in the associated XML data store . If any of the data bindings  do resolve to a node  in another XML data , then all of the dangling references  associate to this XML data , updating the associated content regions  for which data bindings  are now connected. If this XML data  does not result in valid data bindings  for any of the dangling references , the word processor application  performs a similar check with each XML data  in the data store , etc. If none of the XML data  can be used for the dangling references , then the bindings remain dangling references  to the original XML data .","Referring to the flow diagram depicted in , and with continuing reference to , an embodiment of the invention is described. The process  shown in  begins at  when a user opens a word processor document , using a word processor application . At , the word processor application creates a data store , which is then in  populated with any XML data  stored in the word processor document  or requested by using user interface or programming window . The data store  is preferably included as part of the document , but is not visible on the document editing surface . It will be appreciated that the data store  may be loaded before creating the content regions  and data bindings . Likewise, the content regions  can be created before the data store . In other words, the various operations depicted in  do not have to be carried out in any particular order and can be implemented according to a particular user's preference.","At , the user creates one or more content regions  which exist on the surface  of the document . Note that these content regions can also be read from the existing contents of the document . At , the user can associate data binding information with a content region , by providing a particular linked XML data  and an XPath expression specifying the target node . The one or more data bindings link one or more nodes  of XML data  in the data store  to one or more content regions . The data binding  becomes bound or dangling. As described above, each node  may be bound to a plurality of content regions , each one specifying a data binding  to the same XML node . Moreover, the data bindings  may be linked to multiple data stores . At , the user may create XML data, either in a content region  or the date store . At , the word processor application  loads all XML data into a data store . At , the word processor application  loads the content regions  from the document  or as requested by the user , and at , the word processor application  loads the data bindings  from the document  or as requested by the user . At , the word processor application  checks to see if the XML data  associated with node  specified by a particular data binding  exists.","If the XML data  does not exist, at , the word processor application  determines whether other XML data  exists within the same XML namespace. If the XML data  is located within the data store at , at , the word processor application  determines if the associated XML node  for the specified XPath exists. If the XPath exists, at , the word processor application  connects the various document content, i.e. content regions  and any other linked content, to the associated XML node or nodes  via the data binding. If the XPath is not located at , the word processor application , at , labels the particular data binding  as a dangling reference  (enters the dangling state). If at , other XML data  is found in the same XML namespace within the data store , at , the word processor application  again checks to see if the XML node  exists within that data.","If the XML data  does not exist, the word processor application  labels the particular data binding  as a dangling reference (enters the dangling state) at . If the XML data  is found to exist at , then at , the word processor application  searches for the desired XPath within that XML data . If the node  is found, at , the word processor application  connects the document content, i.e. content regions  and any other linked content, to the associated XML node or nodes  at .","An illustrative word processor schema is described in application Ser. No. 10\/187,060, filed Jun. 28, 2002, entitled \u201cWord-Processing Document Stored in a Single XML File that may be Manipulated by Applications that Understand XML\u201d, which is herein incorporated by reference, and includes details on how a word processor application operates to save out contents of a word processor document in XML file format. According to an embodiment of the invention described herein, an XML schema  is operable to represent a data binding  in a word processor document . The word processor application  preferably includes a schema  which recognizes and acts upon data bindings , including defining how data bindings  are saved and loaded by the word processor application .","In order to store the information associated with the data bindings  in the document , the XML representation of the word processor environment  may include an element as a direct descendant or child of the root element which contains an identifying number and set of associated properties representing the information needed to restore one or more data bindings . An example embodiment of this storage might look like:",{"@attributes":{"id":"p-0086","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<w:wordDocument>"]},{"entry":[{},"\u2003<w:dataBindingType"]},{"entry":[{},"\u2003\u2003@ref=\u201c<a unique integer for this type>\u201d"]},{"entry":[{},"\u2003\u2003@storeID=\u201c<GUID for the relationship to the right part>\u201d"]},{"entry":[{},"\u2003\u2003@selectionNamespaces=\u201c<prefix mappings in that part>\u201d"]},{"entry":[{},"\u2003\u2003@rootURI=\u201c<root namespace of the part>\u201d\/>"]},{"entry":[{},"\u2003...rest of document 204 in XML format..."]},{"entry":[{},"\u2003<\/w:wordDocument>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"A data binding  is preferably a content region property. As shown above, the XML representation includes four properties: \u201cref\u201d, \u201cstoreID\u201d, \u201cselectionNamespaces\u201d, and \u201crootURI.\u201d The ref property establishes a unique ID for the set of properties, which can either be referenced by this reference on the data binding , or alternately, stored directly on the data binding  within the XML. However, a data binding  is not limited to being a content region property\u2014other embodiments of the invention may include creating the data binding on another basic object of the word processor environment (such as a table, paragraph, image, embedded object, etc.) As described above, the properties are alternately stored at a top level or on the data binding  directly, allowing the application  to locate the proper XML data  when a document  is opened.","As described above, in one embodiment of the XML storage of the data binding , the ref property may be used to point from a content region  to the top level data containing the properties needed to link the content region to the XML data  when the information for the data binding  is not being stored directly on a data binding  (see below). The ref property abstracts the information, providing a pointer to the information necessary to resolve a particular XPath, creating the data binding .","The \u201cstoreID\u201d property provides the unique identification of specific XML data  within the data store . That is, for each data binding , the application  needs to find the specific XML data  which a data binding  was linking to when the document  was open. The application  places a unique identifier (GUID) on each XML data  at save time. The storeID property contains a reference to the GUID. Accordingly, a data store  may have multiple XML data , each having a unique ID for reference by the application .","The \u201cselectionNamespaces\u201d property refers to the prefix mappings to namespaces that are defined by the data , (for example, w is used by Word as the prefix for the WordprocessingML namespace). This property contains supplementary information (the prefix mappings) needed to resolve XPath expressions to find nodes  in the XML data  that are the targets of data bindings .","The \u201crootURI\u201d property refers to the root namespace of the XML data  linked to the data binding , which also may be referenced if a particular ID does not exist in the XML representation of the data binding . For example, when loading a document , there may be situations where XML data , which was originally data bound, is no longer present (i.e. XML data  with the associated ID has been deleted). The rootURI property tells the application  to go look for other XML data  in this namespace to attempt to re-link a dangling reference when the document  is opened.","It is preferred, but not necessary, for a single element (see exemplary schema below) of the schema  to encapsulate all of the data binding information for a content region . The dataBinding element includes attributes which contain the data binding properties. The XPath attribute, which contains a pointer to a specific XML node  in some XML data . The storeItemID attribute, which points to specific XML data  that is the target of the data binding . The prefixMappings attribute stores the mapping table used to find an XML node  from an XPath. As described above, the ref attribute allows the preceding the information to be stored centrally and only referenced by the data binding .","Moreover, each content region  can include the contents of a data binding . For example a data binding  within a content region  with its data binding properties stored centrally may be represented as:","<w:dataBinding @ref=\u201c<ID>\u201d @XPath=\u201c<XPath for element in referenced XML data >\u201d\/>","Thus, the XML schema for the word processor application includes functionality for providing data bindings  for content contained in a content region  and XML data . The schema  in one embodiment utilizes two main pieces of information to link to data  in a store : a reference number points to the central storage of the information needed to locate specific XML data  that the word processor application  needs to locate when the file utilizing the data binding  is opened, and the XPath operator operates to link a specific node within the XML data  to one or more content regions  in the document .","This embodiment as discussed above is part of an exemplary XML schema for a word processor application . The exemplary schema may be incorporated as part of a broad-based schema used as part of a word processor application , such as the XML schema used for WORD , which is used to represent a word processor document. According to an embodiment of the invention, the schema, among other things, operates to persist information about one or more data bindings  associated with one or more content regions  in a word processor document .","For illustrative purposes, a basic word processor document may include five elements (and a single namespace). It will be appreciated that many more elements are utilized for a word processor document, and the invention is not intended to be limited to any exemplary or illustrative description herein. For a basic word processor document, the five elements include, but are not limited to:\n\n","Thus, within the word processor document element is everything required to reconstruct the content represented on a computer screen, or other output. The body element contains the content represented on a computer screen, or other output. The body elements may contain a plurality of p-tags for example, wherein each p-tag represents a paragraph within the document . A run is essentially defined by any log of continuous text having similar formatting. As used herein, element and tags are used interchangeably.","As an example, a simple word processor XML document  may include one paragraph with one run, and one piece of text:",{"@attributes":{"id":"p-0100","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<?xml version=\u201c1.0\u201d?>"]},{"entry":[{},"<w:wordDocument"]},{"entry":[{},"xmlns:w=\u201chttp:\/\/schemas.microsoft.com\/office\/word\/2003\/wordml\u201d>"]},{"entry":[{},"\u2003<w:body>"]},{"entry":[{},"\u2003\u2003<w:p>"]},{"entry":[{},"\u2003\u2003\u2003<w:r>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<w:t>The quick brown fox jumped over the lazy dog<\/w:t>"]},{"entry":[{},"\u2003\u2003\u2003<\/w:r>"]},{"entry":[{},"\u2003\u2003<\/w:p>"]},{"entry":[{},"\u2003<\/w:body>"]},{"entry":[{},"<\/w:wordDocument>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This simple example illustrates the use of each of basic elements in a word processor XML document , and the associated hierarchy of the elements within this structure. When these structures need to contain properties (for example, the formatting properties of a paragraph or run), a properties element is added as the first child element of the object which should include the properties (for example, the first child of <w:p> can be its properties element, <w:pPr>). These are usually of the form <element name>+\u201cPr\u201d. As described herein, a data binding  is preferably a content region property.","Thus, using the sample document above and further specifying that the run of text should be bold (a property on the run), the XML would now contain a properties element with that information, i.e.:",{"@attributes":{"id":"p-0103","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d?>"},{"entry":"<w:wordDocument xmlns:w=\u201cnamespace-of-word-processing-document\u201d>"},{"entry":"\u2003<w:body>"},{"entry":"\u2003\u2003<w:p>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<> <- "},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/> <- "},{"entry":"\u2003\u2003\u2003\u2003<\/>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>The quick brown fox jumped over the lazy dog<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003<\/w:p>"},{"entry":"\u2003<\/w:body>"},{"entry":"<\/w:wordDocument>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Content regions  include an XML schema representation including associated properties, one of which is a data binding property, within the context of the word processor XML document structure. Preferably, content regions  are additional levels in a word processor XML hierarchy. Most preferably, content regions  can surround certain document features, such as runs, paragraphs, etc. As described in the above-referenced application, a user may apply content regions  with specific behaviors\/properties to regions of a word processor document . For example, content regions  may be applied to:\n\n","Thus, continuing the example above, if a user applied a content region  to the word \u201cquick\u201d in the sample document above, the XML schema  would define that this must be represented as a new tag in the XML schema  that encloses the single run (in this case) which is now enclosed in the content region , that is:",{"@attributes":{"id":"p-0106","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d?>"},{"entry":"<w:wordDocumentxmlns:w=\u201cnamespace-of-word-processing-document \u201d>"},{"entry":"\u2003<w:body>"},{"entry":"\u2003\u2003<w:p>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>The<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<> <- "},{"entry":"\u2003\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<w:t>quick<\/w:t>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<\/> <-"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>brown fox jumped over the lazy dog<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003<\/w:p>"},{"entry":"\u2003<\/w:body>"},{"entry":"<\/w:wordDocument>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Note that because the XML schema  follows standard XML rules, the restrictions on placement of the content region  can be strictly required. For example:",{"@attributes":{"id":"p-0108","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d?>"},{"entry":"<w:wordDocumentxmlns:w=\u201cnamespace-of-word-processing-document \u201d>"},{"entry":"\u2003<w:body>"},{"entry":"\u2003\u2003<w:p>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>The<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<> <- "},{"entry":"\u2003\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<w:t>quick<\/w:t>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<w:t>brown fox jumped over the lazy dog<\/w:t>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003<\/> <- <\/> "},{"entry":{"i":"one of its children is illegal XML"}},{"entry":"\u2003\u2003<w:p>"},{"entry":"\u2003\u2003\u2003<\/> <-"},{"entry":{"i":["there is no start tag within this ","w:p","element"]}},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>paragraph 2<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003<\/w:p>"},{"entry":"\u2003<\/w:body>"},{"entry":"<\/w:wordDocument>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A common user action within a word processor application  includes setting desired behaviors on a content region , to thereby restrict actions when editing a word processor document  according to the original author's specification (i.e. the user who created the one or more content regions ).","Moreover, when the word processor application  saves out these behaviors, which are essentially properties on the content region, as individual elements (each specifying a property) under a single <w:sdtPr> (content region properties) element.","For example, suppose a user wanted to specify a label for a content region , that would be saved out in a title property element:\n\n",{"@attributes":{"id":"p-0112","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<w:wordDocumentxmlns:w=\u201cnamespace-of-word-processing-document \u201d>"},{"entry":"\u2003<w:body>"},{"entry":"\u2003\u2003<w:p>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>The<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<w:sdt>"},{"entry":"\u2003\u2003\u2003\u2003<> <- "},{"entry":"\u2003\u2003\u2003\u2003\u2003<> <- "},{"entry":"\u2003\u2003\u2003\u2003<\/>"},{"entry":"\u2003\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<w:t>quick<\/w:t>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<\/w:sdt>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>brown fox jumped over the lazy dog<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003<\/w:p>"},{"entry":"\u2003<\/w:body>"},{"entry":"<\/w:wordDocument>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As described above, a data binding  allows a user to specify that content of a content region  should be data bound to an XML node  in some separate XML data  in a word processor document . As described above, data binding property provides information about a data binding  and operates to re-establish a link to an appropriate node  in the appropriate XML data  in the data store . According to one embodiment, the information may be either stored on each data binding property individually, or stored in a central location in order to reduce duplication and file size. The first option allows a data binding  to be created and edited as a single, unique object. The second option allows many data bindings to be associated with the same XML data  to avoid unnecessary data duplication. If data is stored on the data binding property itself (data binding XML in italics):",{"@attributes":{"id":"p-0114","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<w:wordDocumentxmlns:w=\u201cnamespace-of-word-processing-document \u201d>"},{"entry":"\u2003<w:body>"},{"entry":"\u2003\u2003<w:p>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>The<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<w:sdt>"},{"entry":"\u2003\u2003\u2003\u2003<w:sdtPr>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:sdtPr>"},{"entry":"\u2003\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<w:t>quick<\/w:t>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<\/w:sdt>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>brown fox jumped over the lazy dog<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003<\/w:p>"},{"entry":"\u2003<\/w:body>"},{"entry":"<\/w:wordDocument>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This storage includes all of the information required to persist and rebuild the data binding  to the XML node  in the XML data  when the document  is opened. Alternately, one might choose to store the information separately in a central location in the XML for the document , for example:",{"@attributes":{"id":"p-0116","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<w:wordDocumentxmlns:w=\u201cnamespace-of-word-processing-document \u201d>"},{"entry":"\u2003<"},{"entry":"\u2003\u2003\u2003\u2002"},{"entry":"\u2003\u2003\u2003\u2002>"},{"entry":"\u2003<w:body>"},{"entry":"\u2003\u2003<w:p>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>The<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<w:sdt>"},{"entry":"\u2003\u2003\u2003\u2003<w:sdtPr>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:sdtPr>"},{"entry":"\u2003\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<w:t>quick<\/w:t>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<\/w:sdt>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>brown fox jumped over the lazy dog<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003<\/w:p>"},{"entry":"\u2003<\/w:body>"},{"entry":"<\/w:wordDocument>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"According to this method of storage, the data binding  contains information which is unique to itself, referring to a central storage for information which is potentially shared by many bindings . Of course, this information can be included in the XML for the document  on both the data binding itself and by reference to another element in the XML for the document , in which case the local information on the binding would take precedence (allowing for individual overriding of global settings on a per-binding basis):",{"@attributes":{"id":"p-0118","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<w:wordDocumentxmlns:w=\u201cnamespace-of-word-processing-document \u201d>"},{"entry":"\u2003<"},{"entry":"\u2003\u2003\u2003\u2002"},{"entry":"\u2003\u2003\u2003\u2002>"},{"entry":"\u2003<w:body>"},{"entry":"\u2003\u2003<w:p>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>The<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<w:sdt>"},{"entry":"\u2003\u2003\u2003\u2003<w:sdtPr>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{circumflex over (\u2009)}{circumflex over (\u2009)} "},{"entry":"\u2003\u2003\u2003\u2003<\/w:sdtPr>"},{"entry":"\u2003\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<w:t>quick<\/w:t>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<\/w:sdt>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>brown fox jumped over the lazy dog<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003<\/w:p>"},{"entry":"\u2003<\/w:body>"},{"entry":"<\/w:wordDocument>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As a further illustration of aspects of the invention, the following is an exemplary schema  for content regions  and data bindings :",{"@attributes":{"id":"p-0120","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<xsd:complexType name=\u201cCT_DBBehavior\u201d>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cprotectBoundary\u201d type=\u201cST_OnOff\u201d x:comment=\u201care the"},{"entry":"boundary characters protected or not\u201d\/>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cprotectContent\u201d type=\u201cST_OnOff\u201d x:comment=\u201care the"},{"entry":"contents of the tag protected or not\u201d\/>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cdisplayAsPicture\u201d type=\u201cST_OnOff\u201d x:comment=\u201care the"},{"entry":"contents interpretted as uu-encoding or not\u201d\/>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:simpleType name=\u201cST_Lock\u201d x:comment=\u201clocking semantics for an sdt\u201d>"},{"entry":"\u2003\u2003<xsd:restriction base=\u201cxsd:string\u201d>"},{"entry":"\u2003\u2003\u2003<xsd:enumeration value=\u201csdt-locked\u201d \/>"},{"entry":"\u2003\u2003\u2003<xsd:enumeration value=\u201ccontent-locked\u201d \/>"},{"entry":"\u2003\u2003\u2003<xsd:enumeration value=\u201cunlocked\u201d x:default=\u201ctrue\u201d \/>"},{"entry":"\u2003\u2003\u2003<xsd:enumeration value=\u201csdt-content-locked\u201d \/>"},{"entry":"\u2003\u2003<\/xsd:restriction>"},{"entry":"\u2003<\/xsd:simpleType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_Lock\u201d>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cval\u201d type=\u201cST_Lock\u201d\u2003x:comment=\u201cDefines the locking"},{"entry":"properties associated with this sdt\u201d\/>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_SdtListItem\u201d>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cdisplayText\u201d type=\u201cST_String\u201d\u2003x:comment=\u201cThe text to"},{"entry":"display. If absent, then the value will be shown\u201d\/>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cvalue\u201d type=\u201cST_String\u201d\u2003x:comment=\u201cThe value to insert"},{"entry":"into the document when the item is selected\u201d\/>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201corder\u201d type=\u201cST_DecimalNumber\u201d x:comment=\u201cThe order"},{"entry":"in which to show the items. The dropdown will be sorted by all \u2018order\u2019 values."},{"entry":"Collisions will be arbitrarily resolved\u201d\/>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_SdtDate\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201cdateFormat\u201d type=\u201cCT_String\u201d x:comment=\u201cThe display"},{"entry":"format for this date -- this uses the standard windows datetime picture (eg: mm\/dd\/yy,"},{"entry":"etc)\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_SdtComboBox\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201clistItem\u201d type=\u201cCT_SdtListItem\u201d x:comment=\u201cA list item"},{"entry":"in the combobox\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_SdtDocPartList\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201cdocPartCategory\u201d type=\u201cCT_String\u201d\u2003x:comment=\u201cThe"},{"entry":"category of document parts that should be provided as choices for this sdt\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_SdtDropDownList\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201clistItem\u201d type=\u201cCT_SdtListItem\u201d x:comment=\u201cA list item"},{"entry":"in this dropdown box\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:simpleType name=\u201cST_PictureStorageType\u201d>"},{"entry":"\u2003\u2003<xsd:restriction base=\u201cxsd:string\u201d>"},{"entry":"\u2003\u2003\u2003<xsd:enumeration value=\u201clink\u201d \/>"},{"entry":"\u2003\u2003\u2003<xsd:enumeration value=\u201cembed\u201d \/>"},{"entry":"\u2003\u2003<\/xsd:restriction>"},{"entry":"\u2003<\/xsd:simpleType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_PictureStorageType\u201d>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cval\u201d\u2003type=\u201cST_PictureStorageType\u201d\u2003x:comment=\u201cThe"},{"entry":"storage type for this picture\u201d\/>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_SdtPicture\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element\u2003name=\u201cpictureStorageType\u201d\u2003type=\u201cCT_PictureStorageType\u201d"},{"entry":"x:comment=\u201cThe storage type for this picture\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_Placeholder\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201cdocPart\u201d type=\u201cST_String\u201d x:comment=\u201cThis is the name"},{"entry":"of the doc part that represents the placeholder text when this sdt is empty\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_DataBinding\u201d>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cprefixMappings\u201d type=\u201cST_String\u201d x:comment=\u201cDefines"},{"entry":"the prefix->namespace mappings for the xpath\u201d\/>"},{"entry":"\u2003\u2003<xsd:attribute name=\u201cxpath\u201d type=\u201cST_String\u201d use=\u201crequired\u201d x:comment=\u201cThe"},{"entry":"xpath to the data source for this databinding\u201d\/>"},{"entry":"\u2003\u2003<xsd:attribute\u2003name=\u201cstoreItemID\u201d\u2003type=\u201cST_String\u201d\u2003use=\u201crequired\u201d"},{"entry":"x:comment=\u201cThis is the itemID of the store item that we are linked to\u201d\/>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_SdtPr\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201calias\u201d type=\u201cCT_String\u201d x:comment=\u201cThe alias (friendly"},{"entry":"name) for this sdt\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201cinvalidIfBlank\u201d type=\u201cCT_OnOff\u201d\u2003x:comment=\u201cIs this"},{"entry":"sdt flagged as an error if it contains no content?\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201clock\u201d type=\u201cCT_Lock\u201d x:comment=\u201cDefines the locking"},{"entry":"properties assoiated with this sdt\u201d x:dispatch-begin=\u201cHrDispatchWSdtLock(pxin,"},{"entry":"pAttr)\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:element\u2003\u2003\u2003name=\u201cplaceholder\u201d\u2003\u2003\u2003type=\u201cCT_Placeholder\u201d"},{"entry":"x:comment=\u201cDefines the placeholder properties associated with this sdt\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:element\u2003\u2003\u2003name=\u201cdataBinding\u201d\u2003\u2003\u2003type=\u201cCT_DataBinding\u201d"},{"entry":"x:comment=\u201cDefines the databinding properties for this sdt\u201d x:dispatch-"},{"entry":"begin=\u201cHrDispatchWDataBindingSource(pxin, pAttr)\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:choice minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element\u2003\u2003\u2003name=\u201ccomboBox\u201d\u2003\u2003\u2003type=\u201cCT_SdtComboBox\u201d"},{"entry":"x:comment=\u201cRestricts the content of this sdt to a combobox and defines the combobox"},{"entry":"properties for this sdt\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201cdate\u201d type=\u201cCT_SdtDate\u201d x:comment=\u201cRestricts the"},{"entry":"content of this sdt to a date (or rather, attempts to coerce the content of this sdt into a"},{"entry":"date and reports an error if it cannot be coerced\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element\u2003\u2003\u2003name=\u201cdocPartList\u201d\u2003\u2003\u2003type=\u201cCT_SdtDocPartList\u201d"},{"entry":"x:comment=\u201cRestricts the content of this sdt to a DocPart\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201cdropDownList\u201d type=\u201cCT_SdtDropDownList\u201d"},{"entry":"x:comment=\u201cRestricts the content of this sdt to a dropdown list\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201cpicture\u201d type=\u201cCT_SdtPicture\u201d x:comment=\u201cRestricts"},{"entry":"the content of this sdt to a picture\u201d x:dispatch-begin=\u201cHrDispatchWSdtPicture(pxin,"},{"entry":"pAttr)\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201crichText\u201d type=\u201cCT_Empty\u201d\u2003x:comment=\u201cAllows the"},{"entry":"content of this sdt to be rich text (unrestricted)\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201ctable\u201d type=\u201cCT_SdtTable\u201d\u2003x:comment=\u201cRestricts the"},{"entry":"content of this sdt to a table\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<xsd:element name=\u201ctext\u201d type=\u201cCT_Empty\u201d\u2003x:comment=\u201cRestricts the"},{"entry":"content of this sdt to a single paragraph text block. This does not include the paragraph"},{"entry":"mark\u201d\/>"},{"entry":"\u2003\u2003\u2003<\/xsd:choice>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_SdtContent\u201d>"},{"entry":"\u2003\u2003<xsd:choice minOccurs=\u201c1\u201d maxOccurs=\u201cunbounded\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<xsd:element\u2003name=\u201cr\u201d\u2003type=\u201cCT_R\u201d\u2003\u2003x:comment=\u201cRun"},{"entry":"element. This is the leaf container for data in a document -- text, pictures, etc\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:group ref=\u201crunLevelElts\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:choice>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":"\u2003<xsd:complexType name=\u201cCT_Sdt\u201d>"},{"entry":"\u2003\u2003<xsd:sequence>"},{"entry":"\u2003\u2003\u2003<xsd:element name=\u201csdtPr\u201d type=\u201cCT_SdtPr\u201d minOccurs=\u201c0\u201d maxOccurs=\u201c1\u201d"},{"entry":"x:comment=\u201cThese properties define the specific behaviors of this structured document"},{"entry":"tag\u201d\/>"},{"entry":"\u2003\u2003\u2003<xsd:element\u2003name=\u201csdtContent\u201d\u2003type=\u201cCT_SdtContent\u201d\u2003minOccurs=\u201c0\u201d"},{"entry":"maxOccurs=\u201c1\u201d x:comment=\u201cThis is the content of the sdt. If it is data bound, then it is"},{"entry":"a cached result of the last update of the databinding\u201d\/>"},{"entry":"\u2003\u2003<\/xsd:sequence>"},{"entry":"\u2003<\/xsd:complexType>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Summarizing, when creating one or data bindings , a user opens a new or existing document  using the word processor application . The user may create a content region  in the document . As part of creating the content region , a user may also define what properties are associated with the content region , including any data  to be data bound. The user supplies the data binding  information, including linking information and the XPath which is stored within the data binding  as a property on the content region . When the word processor application  loads the particular file from a store, such as the hard drive, it recognizes the content regions . It also recognizes, via the data binding property, that certain content associated with a content region  needs to be synchronized with separate data  in the XML data store . Whenever data  changes or the XML data store changes, the application recognizes that it needs to change the content of the content region  with the content of changed XML data .","A user typically saves a word processor document  after editing or other manipulation using the word processor application .  is a flow diagram depicting an exemplary process for saving the word processor document . The process begins at . At , it is determined whether it is time to save the document . A document save may be the result of a user action (CTRL-S, etc.) or automatic process. If it is not time to save, at , the user may continue using the document . If it is time to save, at , the application  creates an open tag for a content region . At , the application  creates a properties open tag, and sets up all known properties for the content region . At , the application  determines if a content region  is data bound. If the content region  is data bound, at , the application obtains the ID of the XML data , the associated XPath, prefix mappings, and saves. At , the application  closes the properties tag, writes out current document content in the content region . At , the application  closes the content region . Preferably, data binding  information may be either in the properties tags or at the root level.",{"@attributes":{"id":"p-0123","num":"0134"},"figref":"FIG. 5","b":["204","500","502","202","207","504","202","506","202","207","207","508","202","519","202","207","510","202","209","209","512","202","213","514","209","516","202","209","518","202","213","205","205","519","207"]},"As an example, XML data  might include the following:",{"@attributes":{"id":"p-0125","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<s:memo>"]},{"entry":[{},"\u2003\u2003\u2003<s:to>John Smith<\/s:to>"]},{"entry":[{},"\u2003\u2003\u2003<s:from>Mary Doe<\/s:from>"]},{"entry":[{},"<\/s:memo>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"An XML document  might include:",{"@attributes":{"id":"p-0127","num":"0138"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<s:memo>"},{"entry":"\u2003\u2003\u2003<s:to>John Smith<\/s:to>"},{"entry":"\u2003\u2003\u2003<s:from>Mary Doe<\/s:from>"},{"entry":"<\/s:memo>"},{"entry":"\u2003\u2003\u2003An XML document 204 might include:"},{"entry":"<w:wordDocumentxmlns:w=\u201cnamespace-of-word processing-document \u201d>"},{"entry":"\u2003<w:body>"},{"entry":"\u2003\u2003<w:p>"},{"entry":"\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003<w:t>Message From:<\/w:t>"},{"entry":"\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<w:sdt>"},{"entry":"\u2003\u2003\u2003\u2003<w:sdtPr>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:sdtPr>"},{"entry":"\u2003\u2003\u2003\u2003<w:r>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<w:t>Mary Doe<\/w:t>"},{"entry":"\u2003\u2003\u2003\u2003<\/w:r>"},{"entry":"\u2003\u2003\u2003<\/w:sdt>"},{"entry":"\u2003\u2003<\/w:p>"},{"entry":"\u2003<\/w:body>"},{"entry":"<\/w:wordDocument>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The data binding  includes a reference to the unique ID for the associated XML data , the XPath of the target node , and any necessary prefix mappings.","It should be appreciated that the logical operations of various embodiments of the present invention are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly, logical operations making up the embodiments of the present invention described herein are referred to variously as operations, structural devices, acts or modules. It will be recognized by one skilled in the art that these operations, structural devices, acts and modules may be implemented in software, firmware, special purpose digital logic, and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims set forth herein.","The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
