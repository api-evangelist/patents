---
title: Object-oriented framework for document routing service in a content management system
abstract: An object-oriented framework for document routing service in a content management system directly provides the server API set for document routing to the application programmers, without an intermediate interface layer. This framework provides document routing functions and system administration support for document routing. In addition, the system defines the document routing process as a series of steps provided by an administrator through which a document is routed, where a work node is a step within the process. A work list is provided that is a filter of one or more work nodes; a user may obtain a list of work or the “next” work item from the work list. Work packages can be suspended pending the satisfaction of criteria such as delay time or collection of a specified group of documents. The process can be resumed at any time. Suspension and resumption of the process are defined by the resume list in the work package and the work node. The object-oriented framework defines the object model of the document routing service that includes a set of classes and associated methods to support the model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07032225&OS=07032225&RS=07032225
owner: International Business Machines Corporation
number: 07032225
owner_city: Armonk
owner_country: US
publication_date: 20020423
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The present invention generally relates to electronic document routing within a network or content management system, and particularly to a software system and associated method for routing documents and objects. More specifically, this invention pertains to the routing of documents and objects through a finite number of stages or routings as defined by the user.","Document routing is important to the day-to-day operations of a content management system. Without the document routing capability, a content management system would merely become a document archival system. Document routing is similar to workflow. As an example, a claim is submitted to an insurance company for an auto accident. Most likely, finite stages or routings are required to obtain the necessary approvals for paying the insurance claim, depending on the type of claim or damage incurred. Document routing must be capable of identifying a sequence of finite steps through which the document is routed.","An important distinction between current workflow systems and document routing is that document routing provides added functionality, whereas current workflow systems require an interface between the server and the API (application programming interface) that routes the workflow documents. This interface layer, C API, is typically written in C, and allows users to use the server. The drawback to this latter approach is that two interfaces are required: one at the server layer and the other at the middle tier layer. The middle tier layer is the object-oriented application programming interface, or OO API in Java or C++. Because more interfaces are added to the server, processing time is increased and server resources are consumed.","To minimize processing time and maximize server resources, a document routing system is needed that is build on top of the server without an intermediate interface layer. The need for such a system has heretofore remained unsatisfied.","The system and associated method of the present invention satisfy this need, and provide an object-oriented framework for document routing service in a content management system. According to the present method, the object-oriented framework directly provides the server API set for document routing to the application programmers, without an intermediate interface (e.g., C API layer).","The object-oriented framework defines the overall architectural design of document routing. This framework provides the following representations or functions:\n\n","The object-oriented framework defines the object model of the document routing service that includes a set of classes and associated methods to support the model. The object-oriented framework presents several advantages among which are that it provides the document routing function to users based on an object-oriented framework, and it enables application development with document routing service.","The foregoing and other features and advantages of the present invention are realized by a document routing process that is defined as a series of steps provided by an administrator through which a document or object is routed, where a work node is a step within the process. A work list is provided that is a filter of one or more work nodes; a user may obtain a list of work or the \u201cnext\u201d work item from the work list. Work packages can be suspended pending the satisfaction of criteria such as delay time or collection of a specified group of documents. The process can be resumed at any time. Suspension and resumption of the process are defined by the resume list in the work package and the work node.","The following definitions and explanations provide background information pertaining to the technical field of the present invention, and are intended to facilitate the understanding of the present invention without limiting its scope:","Class: In object-oriented technology, a user-defined data type that defines a collection of objects that share the same characteristics. An object, or class member, is one instance of the class. Concrete classes are designed to be instantiated.","Document: any item that can be electronically digitized including audio, video, pictures, text, etc.","Instance: In object-oriented technology, a member of a class; for example, \u201cLassie\u201d is an instance of the class \u201cdog.\u201d When an instance is created, the initial values of its instance variables are assigned.","Instantiate: In object-oriented technology, to create an object of a specific class.","Internet: A collection of interconnected public and private computer networks that are linked together with routers by a set of standards protocols to form a global, distributed network.","Method: In object-oriented programming, a procedure that is executed when an object receives a message. A method is similar to a procedure, function, or routine in procedural programming languages. The only difference is that in object-oriented programming, a method is always associated with a class.","Object: Examples of an object include, but are not limited to a document, an audio file, a video file, or a data file.","Process: A series of steps defined by an administrator through which a document is routed.","Work list: A filter of one or more work nodes from which a user obtains a list of work or the \u201cnext\u201d work item.","Work node: A step within a process.","Work package: A routing element that includes a set of information such as priority, state, resume time, and item ID being routed.",{"@attributes":{"id":"p-0028","num":"0036"},"figref":"FIG. 1","b":["10","10","10","15","10","10","10"]},"The cloud-like communication network  is comprised of communication lines and switches connecting servers such as servers , , to gateways such as gateway . The servers ,  and the gateway  provide the communication access to the WWW Internet. Users, such as remote Internet users are represented by a variety of computers such as computers , , , and can query the host server  for the desired information.","The host server  is connected to the network  via a communications link such as a telephone, cable, or satellite link. The servers ,  can be connected via high speed Internet network lines ,  to other computers and gateways. The servers ,  provide access to stored information such as hypertext or web documents indicated generally at , , and . The hypertext documents , ,  most likely include embedded hypertext link to other locally stored pages, and hypertext links , , ,  to other webs sites or documents ,  that are stored by various web servers such as the server .",{"@attributes":{"id":"p-0031","num":"0039"},"figref":"FIG. 2","b":["10","10"]},"The object-oriented framework includes the following 9 classes, which will be listed and then described in more detail:","DKDocRoutingServiceICM , which is the main class that provides document routing functions.","DKDocRoutingServiceMgmtICM  that provides system administration support for document routing.","DKProcessICM  is an object oriented representation of a process in document routing.","DKWorkNodeICM  is an object orientation representation of a work node in document routing.","DKWorkListICM  is an object oriented representation of a work list in document routing.","DKRouteListEntryICM  is an object oriented representation of an entry of the route list in a process in document routing.","DKCollectionResumeListEntryICM  is an object oriented representation of an entry of the resume list in a work node.","DKWorkPackageICM  is an object oriented representation of a work package in document routing. This object is being routed between work nodes in a process.","DKResumeListEntryICM  is an object oriented representation of an entry of the resume list in a work package.","DKDocRoutingServiceICM class  is the main gateway for document routing and provides the basic routing service such as starting, terminating, continuing, suspending, and resuming a process. The DKDocRoutingServiceICM class  allows the user to navigate to a finite number of classes associated with the document. Any object-oriented language, such as Java or C++, can be used to interpret the classes of system .","From the DKDocRoutingServiceICM class , a user can retrieve the DKDocRoutingServiceMgmtICM class  that provides system administration support for document routing and methods to manage three main classes or modules: DKProcessICM , DKWorkNodeICM , and DKWorkListICM .","The DKProcessICM class  allows the user to define a routing process for a document. It contains a collection of route entries that is defined by the DKRouteListEntryICM class . The DKRouteListEntryICM class  is associated with a \u201cFrom\u201d or source work node and a \u201cTo\u201d or target work node, represented by the DKWorkNodeICM class . For example, routing from nodes N to N via N, the workflow would be from node N to N, then from N to N.","The DKWorkNodeICM class  is a step in the workflow process, representing only one work node. All the behavior of the nodes is contained in  the DKWorkNodeICM class . For the example of a routing from node N to N via N, three instances (i.e., objects) of the DKWorkNodeICM class  would be created. Using DKWorkNodeICM class , system  defines a sequence of work nodes in the route list. The routing sequence is called a process (i.e., P).","The DKWorkNodeICM class  may contain a collection of the DKCollectionResumeListEntryICM class  that defines an entry in the resume list for the work node. When system  initiates a process, a work package is created that is defined by the DKWorkPackageICM class . The DKWorkPackageICM class  may contain a collection of the DKResumeListEntryICM class  that defines an entry in the resume list for the work package.","The DKWorkPackageICM class  is the basic routing element in the process. Each package is associated with one document; i.e., the package identifies the document. System  can view any number of items as a package or document; for example, a folder of documents, an MPEG file, a video, etc. The user specifies which process is required to create the package. The user may also define the work list, the DKWorkListICM , where L is the work list.","The DKWorkListICM  operates as a filter mechanism and tracks or locates the package or document. From the previous example of routing a document from node N to N via N, the package may be located at any of the three nodes in the worklist . To construct a worklist, the DKWorkListICM , system  associates one or more work nodes with the worklist, L. The system  tells the worklist which nodes to check, N, N, or N. The user can query the system  for the location of the package against L.","The DKCollectionResumeListEntryICM class  can refer to a regular work node or a collection work node. A collection work node is a collection point where the system  collects other required documents; the DKCollectionResumeListEntryICM class  in effect acts as an automatic suspension stage. Each required document stays at the collection node until all required documents are present. When the required documents have been collected, the requirement is satisfied and the documents may be routed to the next node, depending on the sequence or the DKProcessICM class .","The user defines the required documents at the collection point. Without DKCollectionResumeListEntryICM class , DKWorkNodeICM class  is a regular work node. When DKCollectionResumeListEntryICM class  is introduced, DKWorkNodeICM class  becomes a collection work node. The DKCollectionResumeListEntryICM class  is an entry in the resume list of all the required documents while DKWorkNodeICM class  is the node.","The DKResumeListEntryICM class  is the resume list; it is associated directly with the package and operates much like a cruise control. DKResumeListEntryICM class  will either suspend or resume control, depending on the user specification. For example, the user is routing a pdf file and a doc file. The user might specify that when the pdf file and the doc file arrive, then resume.","In operation, and with further reference to , the user creates document routing objects by first logging onto the server  at step . The user creates an instance from DKDocRoutingServiceICM class  at step . The user then retrieves an instance from DKDocRoutingServiceMgmtICM class  at step .","At step , the user defines the number of DKWorkNodeICM work nodes  required to complete the process along with each DKWorkNodeICM work node  in the process. The user then defines the work lists in DKWorkListICM class  at step  and defines the processes DKProcessICM class  and DKRouteListEntryICM class  at step . The output of the method of creating document routing objects is the number of processes  and , the work list , and the number and definition of work nodes .","A method of executing the process for routing documents is described in . The user initiates process execution by first logging onto the server  at step , and by creating an instance at step . The user queries how many processes are available at step .","Based on the process required, system  can start the process with the document at step . A work package is then created at step . From step , the process may suspend the package  at step , as defined by the user. The package  may be suspended for a predetermined period of time such as 60 minutes, or until a condition is met, such as the presence of a predetermined set of packages. The criteria for suspension or resumption is defined by the DKResumeListEntryICM class  (). The process can be resumed at any time at step , allowing the package  to continue through the process at step . When the work package is routed to the next work node, it will be deleted from the system, and a new work package will be created at step  again. Once the package has been routed through all the nodes, the process is terminated at step .","The method of querying the package is described in . The user logs onto the server  at step  and then creates instance at step . At step , the user may query the work list  in such a manner that the response at step  is the package , or the worklist . For example, a business with multiple employees uses the system  to manage document routing within the company organization. Each employee is assigned a worklist . At any time, the employee can query their specific worklist ; the content of the worklist is packages requiring the employee's attention. The worklist  represents the employee's workload.","It is to be understood that the specific embodiments of the invention that have been described are merely illustrative of certain application of the principle of the present invention. Numerous modifications may be made to the object-oriented framework for document routing service in a content management system invention described herein without departing from the spirit and scope of the present invention. Moreover, while the present invention is described for illustration purpose only in relation to the WWW, it should be clear that the invention is applicable as well to any document routing system."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The various features of the present invention and the manner of attaining them will be described in greater detail with reference to the following description, claims, and drawings, wherein reference numerals are reused, where appropriate, to indicate a correspondence between the referenced items, and wherein:",{"@attributes":{"id":"p-0011","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0023"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
