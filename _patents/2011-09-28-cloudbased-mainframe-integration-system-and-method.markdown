---
title: Cloud-based mainframe integration system and method
abstract: The present technology concerns a cloud-based mainframe integration system for providing at least one client access to at least one mainframe, the at least one mainframe being accessible over a persistent communication connection. The cloud-based mainframe integration system comprises, at least one mainframe integration server, adapted for routing communications between the at least one client and the at least one mainframe. The at least one MIS is located within a cloud computing environment separate from a computer network in which the at least one mainframe is located. The at least one MIS also is adapted for communicating with the separate network over a non-persistent communication connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09058213&OS=09058213&RS=09058213
owner: SOFTWARE AG
number: 09058213
owner_city: Darmstadt
owner_country: DE
publication_date: 20110928
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["This application claims priority to EP Application No. 11 179 706.4, filed 1 Sep. 2011, the entire contents of which is hereby incorporated by reference.","The present concerns a cloud-based mainframe integration system for providing clients access to mainframes and a corresponding method.","Organizations oftentimes use applications running on legacy systems, such as mainframes that have been in place for a long time and serve for driving mission-critical computations. In order to integrate such legacy mainframes into modern computing environments, it is known to employ so-called mainframe integration products. The task of mainframe integration, however, is very complex, resource-intensive and time-consuming due to the fundamental technical differences between the legacy mainframe world and modern computing environments, as e.g. outlined in \u201c\u201d (cf. http:\/\/cloudcomputing.sys-con.com\/node\/1880221).","Generally, mainframe integration products are designed to route communications between clients and the mainframe. To this end, they typically communicate with client web browsers and\/or web service consumers using modern protocols (e.g. HTTP\/S and\/or SOAP) on the one hand and communicate on the other hand with the legacy mainframe using mainframe protocols, such as telnet connections over a TCP\/IP socket or even SNA connections in very old systems. In this context, mainframe integration products have to establish a persistent TCP\/IP connection with the mainframe. Examples of known mainframe integration products are e.g. disclosed in U.S. Pat. No. 7,877,783 B1, U.S. Pat. No. 7,877,794 B2 and U.S. Pat. No. 7,562,146 B2.","Moreover, the communication between a client and a mainframe is generally screen-based, in that the requesting entity (the client) is served with display screens of the legacy mainframe one after another and may navigate between these screens. Therefore, a given communication typically comprises a plurality of request\/response cycles between the client and the mainframe, i.e. each cycle is always part of a larger \u201csession\u201d, in that the current request\/response cycle depends upon the preceding screens through which the user has navigated beforehand.","Examples of mainframe hardware and their corresponding operating systems are IBM AS\/400, z\/OS, VSE, MVS, BS2000, Tandem, which typically communicate with mainframe integration products over Telnet-based protocols, such as TN3270, TN5250, BS2000 and Tandem protocols.","Furthermore, in a different area of computing apart from mainframe integration, \u201ccloud computing\u201d becomes more and more popular. \u201cCloud computing\u201d refers to the concept of moving certain parts of an application's processing tasks to a third-party environment located outside of the application's network, in particular on the Internet. The third-party cloud computing environment hosts the deployed application on one or multiple servers, which makes it possible to benefit from the vastly increased processing capabilities offered thereby, as compared to traditional \u201clocal processing\u201d. Various commercial cloud-computing environments are already in place, e.g. Amazon EC2 or Google Apps, which allow deploying web services to the Internet, which are then executed on the cloud computing provider's servers. As the skilled person will readily observe, Internet communications and web services generally rely on the concept of \u201cloosely coupled\u201d entities, in which a given request\/response cycle is independent of any preceding communication cycles.","In view of the above, deploying a mainframe integration product \u201cto the cloud\u201d is very difficult. Firstly, organizations will hardly agree to expose their mainframe telnet access to a third-party cloud computing environment located on the Internet due to security concerns. Secondly, having to adhere to the above-described stateless request\/response scheme employed in Internet communications makes it very difficult to deploy a mainframe integration product to a cloud computing environment due to the stateful screen-based nature of mainframe applications.","It is therefore the technical problem underlying the present technology to provide an approach for cloud-based mainframe integration that at least partly overcomes the above explained disadvantages of the prior art.","This problem is according to one aspect of the technology solved by a cloud-based mainframe integration system for providing at least one client access to at least one mainframe, the at least one mainframe being accessible over a persistent communication connection. In the embodiment of claim , the cloud-based mainframe integration system comprises:\n\n","Accordingly, the embodiment defines a mainframe integration system, whose mainframe integration server (MIS) executes inside a cloud computing environment (preferably operated by a third-party) and thus outside of the (corporate) computer network in which the mainframe resides. Advantageously, the MIS communicates with the separate network over a non-persistent communication connection (typically the Internet) and preferably uses standard Internet protocols such as HTTP\/S. As a result, the persistent communication connection required by the mainframe can be safely kept inside the mainframe's network, thereby avoiding the mainframe's security-critical telnet access to be revealed on the insecure Internet. This approach hence differs from traditional mainframe integration products, which are always located within the same network as the mainframe itself (due to the required persistent connection and\/or security requirements).","In a preferred implementation of the above-described system, the non-persistent communication connection between the cloud computing environment and the mainframe's network is used for tunneling the mainframe protocol communication (e.g. telnet) over standard Internet protocols such as HTTP\/S. In this context, the person skilled in the art will appreciate that HTTP gateways for telnet connections are already known (cf. e.g. http:\/\/www.mosha.net\/01-telnet-gateway\/telnet.shtml). However, such known HTTP-telnet-gateways still require revealing the telnet access credentials over the internet and thus cannot be employed in the present context due to security reasons. In addition, they do not support maintaining and\/or replicating the session state between multiple MIS nodes, they do not allow for increasing and decreasing the number of MIS instances elastically based on the application load and they do not support encapsulating multiple MIS instances behind a single load balancer entry point.","In summary, the above-described system allows the security-relevant telnet access to be safely kept inside the corporate network containing the mainframe, while the \u201cintelligent part\u201d of the mainframe integration product (the MIS) can be deployed \u201cto the cloud\u201d (i.e. to the cloud computing environment), thereby being able to benefit from the advantages of a cloud computing environment, such as increased processing power, scalability and fail-safety.","In another aspect of the present technology, the cloud-based mainframe integration system further comprises at least one mainframe communication bridge (MCB) located within the network of the at least one mainframe, the at least one MCB being adapted for maintaining a persistent communication connection with the at least one mainframe and further adapted for communicating with the cloud computing environment over the non-persistent communication connection. Accordingly, the mainframe integration application is actually divided into two separate components, namely at least one mainframe integration server (MIS) and at least one mainframe communication bridge (MCB). The MIS is located within a cloud computing environment preferably provided by a third-party, whereas the MCB resides within a separate computer network, more precisely that local network in which also the mainframe is located. The MCB maintains a required persistent connection with the mainframe (e.g. over a persistent TCP\/IP socket). The communication between the MCB and the MIS is, on the contrary, performed over a non-persistent connection, preferably using internet protocols such as HTTP, HTTPS and\/or SOAP.","In yet another aspect, the at least one MIS may be adapted for storing a session state relating to a request\/response cycle of the communication between the at least one client and the at least one mainframe, the session state being usable for subsequent request\/response cycles between the at least one client and the at least one mainframe. As explained above, mainframe communications are generally session-based, in that a given communication normally comprises a sequence of multiple request\/response cycles between the client and the mainframe. Accordingly, the MIS stores a session state, which may be used in a current request\/response cycle to correlate this cycle with a preceding cycle.","Preferably, the at least one MIS is adapted for sending the session state to the at least one MCB for being stored at the at least one MCB. Accordingly, the current session state is advantageously replicated to the MCB, which therefore serves as a backup. This aspect allows a given MIS to stop executing at any arbitrary point in time without interrupting a given client\/mainframe communication, since the current session state may be easily restored from the MCB. This aspect is particularly advantageous in the context of cloud computing, since new server instances are frequently started (spawned) and old server instances are frequently \u201ckilled\u201d in cloud computing environments.","Additionally or alternatively, the cloud-based mainframe integration system further comprises a load balancer, wherein the load balancer is adapted for dispatching a communication coming from the network of the at least one mainframe to one of a plurality of MIS inside the cloud computing environment. Accordingly, each request entering the cloud computing environment is dispatched to any of a plurality of given MIS instances (in accordance with the load balancer's scheduling policy). This aspect has the advantageous effect that the processing load of multiple client\/mainframe communications can be optimally balanced between all available MIS instances, thereby allowing an optimal resource usage.","In this context, the MIS selected by the load balancer is preferably adapted for obtaining a current session state relating to the communication from another MIS, if the selected MIS does not possess the current session state. Accordingly, any newly started (spawned) MIS instance\u2014which does not possess the session state required to handle a given client\/mainframe communication\u2014can still handle this communication by obtaining the session state from another MIS instance. As a result, the flexibility of the present system is improved to a great extent, since new MIS instances can be dynamically added to the cloud computing environment and take over the processing of already existing client\/mainframe communications.","In yet another aspect, the MIS selected by the load balancer is adapted for obtaining a current session state relating to the communication from the at least one MCB, if none of the other MIS possesses the current session state. Accordingly, even if all MIS instances possessing the current session information are no longer available, the communication can still be handled based on the session state backup stored at the MCB. This aspect allows the cloud provider for removing any given MIS instance without the need to check whether it is the last instance to hold a given session state.","Furthermore, the at least one MIS may be adapted for sending a connection identifier to the at least one client, the connection identifier identifying the MCB which handled the communication between the at least one client and the at least one mainframe. Accordingly, after having handled a given request\/response cycle, the MIS may provide the client with a \u201ccookie\u201d storing the ID of the MCB that was involved in the cycle. As a result, the at least one MIS may be adapted for receiving a client request comprising the connection identifier and further adapted for determining whether it already established a connection to the at least one MCB identified by the connection identifier, and if not, redirecting the client request back to the load balancer. Accordingly, if a MIS contacted by a client, through the load balancer, has not yet handled a prior conversation with the desired MCB, the MIS may redirect the client request to the load balancer, so that the load balancer may select another MIS (which hopefully already possesses the connection to the desired MCB). To this end, the at least one MIS may add its own identifier to the client request when redirecting the client request to the load balancer, so that the load balancer does not dispatch the request again to the MIS from which the request was redirected.","Preferably, the at least one MCB can communicate with the at least one MIS only via the load balancer, and wherein the at least one MCB is adapted for sending a plurality of registration requests to the load balancer in order to register with substantially all MIS instances. Accordingly, since a given MCB cannot tell for sure how many MIS are currently running inside the cloud computing environment (behind the load balancer), the MCB preferably executes a registration loop in which it intends to register with most of the MIS, as will be further explained in the detailed description below.","The present technology further concerns a method for providing at least one client access to at least one mainframe, the at least one mainframe being accessible over a persistent communication connection, the method comprising the steps of routing, by at least one mainframe integration server (MIS), communications between the at least one client and the at least one mainframe, wherein the at least one MIS is located within a cloud computing environment separate from a computer network in which the at least one mainframe is located, and wherein the at least one MIS is adapted for communicating with the separate network over a non-persistent communication connection. Further advantageous modifications of embodiments of the method of the technology are defined in further dependent claims, wherein the present method may generally perform any of the functionalities described above in connection with the cloud-based mainframe integration system. Moreover, a computer program is provided comprising instructions for implementing any of the above methods.","In the following, a presently preferred embodiment of the technology is described with respect to a mainframe integration system as schematically shown in . As can be seen the system comprises at least one mainframe integration server (MIS)  which is preferably responsible for the business logic of the mainframe integration and which may thus perform processes such as terminal emulation, screen identification, representing screen information as objects and j or rendering web interfaces from mainframe screens. The MIS  preferably hosts most of the functionality included in products such as the ApplinX server of applicant. Furthermore, the system comprises at least one mainframe communication bridge (MC13)  acting as a bridge between the MIS  and the mainframe . The MCB  is preferably responsible for communicating with the mainframe  using a mainframe protocol, such as telnet over a TCP\/IP socket, as well as communicating with the MIS  using a standard internet protocol, such as Http\/s. In other words, one aspect of the present technology is to replace the telnet TCP\/IP connection between the MIS  and mainframe  with a request\/response mode Http\/s communication.","Again with reference to , the at least one MIS  is located within a cloud computing environment , e.g. provided by a third-party cloud solution such as Amazon EC2 or Google Apps, which typically provides a dynamically allocated pool of virtual machines and a single domain URI entry point (preferably for Http\/s communication). The MIS  shown in  preferably comprise a web application such as webMethods ApplinX of applicant, designed for integrating a mainframe backend with web application clients , , . Exemplary types of clients are web browsers  adapted for rendering Html pages, web application clients  based on Java Applets, Microsoft Silver Light and\/or Adobe Flex (preferably communicating using Http\/s) and\/or web service clients  (preferably communicating using Soap\/Rest).","As can be seen in , multiple instances of the MIS  may be deployed inside the cloud computing environment , preferably on a single or multiple virtual machines.","The cloud computing environment  may further comprise an optional load balancer . The load balancer  preferably represents a single entry point into the cloud computing environment  and is adapted to distribute the processing load between MIS instances .","Separate from the cloud computing environment  shown in  is the computer network , which is preferably a corporate network representing the internal intranet of the organization using the mainframe integration system of the present invention technology. Importantly, the network does not have to trust the cloud provider  and preferably does not allow inbound connections from the cloud into the corporate network.","Inside the computer network , one or more MCBs  are provided. An MCB  provides a bridge between the mainframe  and the cloud computing environment , by communicating with the mainframe  over standard mainframe protocols and by communicating with the cloud computing environment  preferably using Http packets that encapsulate the mainframe protocol packets. A single MCB  communicating with the cloud provider  may multiplex multiple mainframe connections over a single Http\/s request. Multiple MCB instances  may be provided inside the corporate network , possibly communicating with the same mainframe . The mainframe  in turn communicates with the MCB  preferably using mainframe protocols such as 3270 and\/or 5250. Additionally or alternatively, instead of mainframes , the present technology may also support database server(s) , PLC controller(s) , or any other backend host requiring a persistent TCP\/IP socket communication.","Preferably, the at least one MIS  is stateless, in the sense that it does not rely on an existing session state. Instead, all MIS instances  are preferably configured identically and\/or session state(s) created by the MIS  is\/are serialized into the MCB . Furthermore, the MIS  is preferably web friendly, in that it communicates only using web friendly protocols such as Http\/s and Soap. The MIS  will preferably never issue an outbound connection to the client KA, ,  or to the MCB , but will only accept Http\/s requests originating from the cloud endpoint or another MIS . Moreover, in case an MIS  fails (e.g. due to a hardware failure, scheduled maintenance or other interruption of its normal processing), the overall system stability should not be impacted, thus allowing for elastic scaling.","The above-described properties allow the MIS  to be massively scaled to multiple nodes in the cloud computing environment , without requiring clients such as web browsers  or web service consumers  and  to maintain session affinity and using only standard web compatible communication. The ability to elastically increase and decrease the number of MIS instances  allows for a very efficient resource usage of the mainframe integration deployment. In contrast, known mainframe integration products of the prior art are always tied to a constant number of server machines, even when they are only lightly used, which waists computing power, or which may cause service disruption in times of heavy use.","The at least one MCB , on the other hand, is preferably stateful, in the sense that each instance of the MCB  maintains one or more, preferably a plurality of, persistent connections to the mainframe  and maintains for each connection a (serializable) data structure representing the mainframe's session state. In addition, the MCB  is preferably lightweight, in that it implements only minimal functionality (since the major part of the mainframe integration logic is implemented in the MIS ). Also the MCB  is preferably scalable, in that it may be scaled to multiple instances to allow for support of a massive number of mainframe connections. Generally, the MCB  is typically deployed inside the corporate network , preferably behind a firewall, so that it may communicate with the mainframe  reliably, whereas it communicates with the MIS  only using Http\/s.","The cloud computing environment  preferably exposes to the clients (e.g. web browsers , web service clients  and\/or MCB instances ) a single domain entry point URI (such as www.mycloud.com), which is used by all clients , ,  and MCB instances  to communicate with the MIS instances  running inside the cloud . In turn, the MIS instances  running inside the cloud  are preferably able to connect to each other using a unique URI published by each MIS instance  and able to connect to the same cloud entry point seen by the clients. Preferably, the MIS instances  cannot send outbound requests to the client(s) , ,  or MCB instances . Further, the communication between MCB instances  and between MIS instances  and the cloud entry point are using Http REST style URI syntax.","Mainframe Integration Server Lifecycle","Initialization: Upon startup, the MIS instance initializes its application logic (e.g. the ApplinX application) and obtains the mainframe definitions, including the address and port of the mainframe(s)  to be serviced, e.g. from a configuration file. When a MIS instance is initialized by the cloud computing environment, it preferably registers itself (preferably its IP address) with a routing table of the load balancer  and waits for the load balancer  to start forwarding requests from MCB instances  and\/or clients , , . Note that initially the MIS instance  is preferably unaware of other MIS instances  running in the cloud  and\/or MCB instances  running inside the corporate network . Thus, the present technology does not rely on a central node registry or shared database. On the contrary, a MIS instance  waits for MCB instances  to register with it before it becomes fully operational.","Termination: When a MIS instance  is terminated, its IP address is preferably removed from the routing table of the load balancer , either proactively by notifying the load balancer , and\/or by the load balancer  itself, when failing to communicate with the particular MIS .","Keep Alive: The load balancer , may send keep alive requests to all MIS instances  registered in its routing table, depending on the load balancer implementation.","Mainframe Communication Bridge registration","Upon start-up, periodically and\/or upon request, the MCB  may read the address (e.g. the URI) of the cloud entry point from a configuration file of the MCB  (i.e. the address to be used to access the cloud computing environment , more precisely its load balancer ). The MCB  will attempt to register itself with most of the running MIS instances , preferably using the handshake algorithm described in the following. However, the MCB  preferably never communicates directly with a MIS instance , but only communicates with the cloud entry point\/load balancer . Therefore, since the MCB  cannot tell for sure how many MIS instances  are running behind the cloud load balancer , an MCB  preferably always attempts a pre-configured number of connection requests, e.g. configured by the MCB startup parameters, which should be larger than the number of running MIS instances :",{"@attributes":{"id":"p-0041","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Let maxRetires be the number of MCB registration requests."]},{"entry":[{},"count = 0"]},{"entry":[{},"While (count < maxRetires) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"count ++"]},{"entry":[{},"GET \/register?id=<mcb id> action to the cloud domain URI"]},{"entry":[{},"The cloud load balancer will forward the \/register action"]},{"entry":[{},"to one of the available MIS instances"]},{"entry":[{},"The receiving MIS instance will query the id field and see"]},{"entry":[{},"if an MCB with the same id is already registered and then"]},{"entry":[{},"send the following response:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If id exists return status 200 text \u201cAlready"]},{"entry":[{},"registered\u201d"]},{"entry":[{},"Else return status 200 text \u201cOk\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The MCB will parse the response:"]},{"entry":[{},"If response status 200 text \u201cOk\u201d {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Leave connection open"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Close connection"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"End If"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The cloud load balancer  may implement a simple round robin algorithm when distributing requests between the MIS instances  with no regard to the identity of the requesting client. As a result, given enough attempts the MCB  will eventually be able to register itself with every available MIS instance . Since this cannot be guaranteed, the above registration loop preferably terminates after a pre-defined number of connection attempts, taking into account that the MCB  might not be registered with all running MIS instances  (cf. the example below regarding the probability that a given MCB  will register itself with a given MIS ).","At the end of the registration loop, the MCB  maintains a list of open connections to most MIS instances  running in the cloud . These connections are preferably used to tunnel the telnet communication between the MCB  and the mainframe  to the MIS  using http tunneling and\/or connection multiplexing.","The MCB  preferably refreshes its list of MIS connections by repeating the above registration algorithm above under the following conditions: (a) every pre-defined time interval, (b) upon specific request from an MIS instance  (see below) and\/or (c) upon an abnormal disconnect of an existing MIS connection. In addition, the MCB  may send periodic keep-alive messages on every open connection to make sure the connections are not considered idle by the load balancer  and thus become candidates for disconnection. On the other side of the connection, each MIS instance  preferably maintains a list of active MCB connections, which may be indexed by MCB ID (serving as a unique identifier of the respective MCB ).","An exemplary MCB  with ID \u201c1\u201d registers itself in the cloud computing environment  using the following request:","GET\/register?id=1","The cloud computing environment  currently comprises three running MIS instances  with IDs \u201c1\u201d, \u201c2\u201d and \u201c3\u201d. The following table demonstrates the results of the above-described handshake algorithm:",{"@attributes":{"id":"p-0047","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Connection Attempt","Destination","Response"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#1","MIS \u201c1\u201d","\u201cOk\u201d"]},{"entry":["#2","MIS \u201c3\u201d","\u201cOk\u201d"]},{"entry":["#3","MIS \u201c1\u201d","\u201cAlready exists\u201d"]},{"entry":["#4","MIS \u201c3\u201d","\u201cAlready exists\u201d"]},{"entry":["#5","MIS \u201c2\u201d","\u201cOk\u201d"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"As can be seen above, even if the load balancer  implements a round robin policy, it cannot be assumed that a single MCB instance  will experience round robin behaviour, since the load balancer's round robin policy applies to all requests received by the load balancer , instead of per client IP. Therefore, the redirection sequence will appear to an MCB  as a nearly random sequence. Further, there is no guarantee that with a given number of attempts the MCB  will indeed be able to connect to all MIS instances . However, it can be assumed that with enough attempts it will eventually connect to all MIS instances .","To this end, the probability p that a given MCB is registered with a given MIS and the number of MIS instances s at which the MCB is registered can be calculated as follows:","Let m be the number of MIS instances running inside the cloud behind a load balancer and let n be the number of register requests issued by the MCB:\n\n1\u2212((1)\/)^\n\n\n","The following table lists some exemplary reasonable values:",{"@attributes":{"id":"p-0051","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["MIS","MCB","Probability that an","Number of MIS"]},{"entry":["instances","requests","MCB is registered","instances"]},{"entry":["[m]","[n]","with a given MIS [p]","registered [s]"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","1","1.00","1.00"]},{"entry":["5","1","0.20","1.00"]},{"entry":["10","1","0.10","1.00"]},{"entry":["20","1","0.05","1.00"]},{"entry":["1","5","1.00","1.00"]},{"entry":["5","5","0.67","3.36"]},{"entry":["10","5","0.41","4.10"]},{"entry":["20","5","0.23","4.52"]},{"entry":["1","10","1.00","1.00"]},{"entry":["5","10","0.89","4.46"]},{"entry":["10","10","0.65","6.51"]},{"entry":["20","10","0.40","8.03"]},{"entry":["1","20","1.00","1.00"]},{"entry":["5","20","0.99","4.94"]},{"entry":["10","20","0.88","8.78"]},{"entry":["20","20","0.64","12.83"]},{"entry":["1","100","1.00","1.00"]},{"entry":["5","100","1.00","5.00"]},{"entry":["10","100","1.00","10.00"]},{"entry":["20","100","0.99","19.88"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"In other words, if m=5 MIS instances  are started and an MCB instance  sends n=20 registration requests to the load balancer \u2032S entry point, the probability p that a given MIS instance is reached is 0.99. Therefore, assuming that the MCB instances  may refresh their registration requests every pre-defined interval (see above), if an MIS  is running for a sufficiently long time the chance that all MCB instances  are connected to this MIS instance  is very high.","Processing New Client Requests","In the following, the processing of a mainframe request from a client , ,  will be described in a scenario where several MIS instances  are up and running in the cloud  behind a load balancer frontend  and several MCB instances  are already registered with (most of) the MIS instances  (as explained above).","In this context, a client may e.g. represent a browser , a web service client  and\/or a (rich) application client  such as a Java Applet, Adobe AIR or Microsoft Silverlight program or any other device or computer program supporting Http\/s communication and\/or a cookie mechanism.","In a first step (cf. step \u201cReq-1\u201d in ), the client , ,  connects to the load balancer , which in turn redirects the mainframe request in step \u201cReq-2\u201d to one of the MIS instances  (in accordance with the load balancer's  load balancing strategy, e.g. round robin). The MIS instance  identifies which application is used by the client , , , preferably by parsing the information from the client request based on the conventions of the ApplinX product, and retrieves the mainframe address, port and\/or emulator negotiation parameters for the specific application from the ApplinX repository.","The MIS  now selects one of the MCB instances  in its list (see above) and sends a request to the MCB  to initiate a mainframe connection (cf. step \u201cReq-4\u201d in ), preferably based on the mainframe address and port obtained above and\/or additional parameters required for negotiating a mainframe connection, such as LUName, CCSID and\/or additional parameters as specified by the ApplinX repository.","The terminal emulation handshake sequence is then performed between the mainframe  and MCB  based on the application specific mainframe configuration. Once a successful connection is established, the first screen of the mainframe application  is sent to the MCB  (preferably over telnet) and then to the MIS  (preferably over Http\/s) together with a unique identifier of the specific mainframe connection. The MIS  identifies and processes the received mainframe screen and then sends the response to the requesting client , , , preferably together with a connection identifier cookie that uniquely identifies the specific MCB ID and the specific mainframe connection used by the MCB . This cookie is sent back from the client , ,  with every subsequent request related to the same session thus allowing the MIS  to maintain session affinity by sending subsequent client requests for the same session to the MCB instance holding the same mainframe connection.","After sending the response to the client , , , the MIS  possesses the screen image of the current mainframe screen, as well as various session variables, such as username and\/or user roles, stored in its memory (hereinafter collectively referred to as the \u201csession state\u201d).","The MIS  then serializes, i.e. sends, the session state back to the MCB , so that it is stored at the MCB , preferably together with the current mainframe connection. The MCB instance  thus serves as a backup for the session state, so that the session state can be de-serialized from the MCB  in case the current MIS instance  fails and another MIS instance  needs to process client requests for the same mainframe connection.","Since not all MCB instances  are typically registered with all MIS instances  (see further above), there is a small probability that no MCB instance  is registered with the MIS instance  which received the client request. In this case, the MIS instance  forwards the client request back to the load balancer  (cf. step \u201cReq-3\u201d in ), together with additional forwarding information (as explained in more detail below in section \u201cRecursive Request Forwarding\u201d). The forwarded request will then be dispatched by the load balancer  to a possibly different MIS instance  (cf. step \u201cReq-4\u201d in ), which in turn will perform the same process until the request is forwarded to an MIS instance  which is connected to the MCB  instance identified by the connection identifier cookie of the client request.","Processing Client Requests in an Existing Session","In this scenario, several MIS instances  are up and running in the cloud  behind a load balancer  and several MCB instances  are already registered with (most of) the MIS instances . In addition, one of the MCB instances  already established a mainframe connection related to the client , , , and the client , ,  already possesses a connection identifier cookie (see above).","In this scenario, the client , ,  connects to the load balancer , which in turn redirects the request to one of the MIS instances .","The contacted MIS instance  then deciphers the information in the connection identifier cookie and extracts the contained MCB ID. The MIS  then looks up the corresponding MCB  (which is that MCB which handled the preceding request\/response cycle, from which the connection identifier cookie resulted; see above) in its connection list.","If found, the MIS  now obtains the session state, using the \u201cstate lookup algorithm\u201d explained further below. After obtaining the session state, the MIS  processes the client request using application specific definitions, such as running an ApplinX Path procedure, and sends the relevant telnet communication packets together with the Mainframe connection ID and state information to the MCB .","The MCB  parses the information sent by the MIS , locates the correct mainframe connection and sends the telnet communication packets to the mainframe .","The MCB  then waits for the response from the mainframe  and, once received, sends the mainframe response together with the session state information and the connection ID back to the MIS .","The MIS  then processes the mainframe response, creates a response (e.g. as a web page or a web service response, depending on the requesting client , , ) and sends the response to the client , ,  together with an updated connection identifier cookie.","The MIS  then sends additional session state information back to the MCB , so that it is stored together with the screen image. Again, the session state may be recovered from the MCB  in case the MIS instance  fails.","Session State","Mainframe integration products, such as ApplinX of applicant, need to maintain state information between client requests, since a \u201cconversation\u201d between a client and a mainframe is inherently comprised of a sequence of request\/response cycles in which the client navigates through screens provided one after another by the mainframe. In the present technology, session state data preferably comprises the following information:\n\n","The session state may be implemented as a serialized object, so that it can be transferred between the MIS  and MCB  (as explained above). In most cases, the size of the session state should not exceed 20 k bytes, thereby allowing a seamless synchronization of the session state between the MIS  and the MCB .","State Lookup Algorithm","When a client request is received by a given MIS instance , the MIS instance  has to first obtain the most current session state in order to be able to process the client's mainframe request. Further, the MIS  has to contact an MCB  in order to send the processed information to the mainframe .","Importantly, since a client , ,  cannot directly communicate with a MIS , but only with the cloud entry point of the cloud computing environment  (cf. ), the client , ,  cannot influence which particular MIS instance  inside the cloud computing environment  will handle its request. This is because each client request is dispatched to one of a possible plurality of MIS instances  by the load balancer . Therefore, scenarios may occur in which one particular MIS  was used for a first request\/response cycle of a particular client, but another MIS  is selected by the load balancer for a subsequent request\/response cycle of that particular client, even within the same session. As a result, there exist various scenarios concerning which component (MIS  and\/or MCB ) obtains the most current session state and MCB connection, e.g.:\n\n","The preferred algorithm for obtaining the most current session state performed by the MIS  currently receiving the client request is as follows:","In the above scenario 1, the current MIS  already possesses the session state in memory. The MIS  then deciphers the MCB instance ID from the connection identifier cookie to see if it already has a connection to this MCB instance . If so, it will immediately process the request and send the response back to the client. This is the optimal scenario and it should be the case for most client requests, since the load balancer  may be configured to redirect subsequent requests from the same client , ,  to the same MIS  based on the value of the connection identifier cookie (see further above), which in most cases does not change for the lifetime of the session.","In scenario 2, the current MIS  deciphers the connection identifier cookie and obtains the address of the preferred MIS instance ID stored therein. The MIS  will then forward the request to the preferred MIS instance  and ask it to process the client request. Once the client request is processed by the preferred MIS instance , the response is sent as is from the current MIS  back to the client.","In scenario 3, the current MIS  already has the session state in memory, but it cannot send the processed request to the mainframe , since it does not obtain an MCB connection. In this case, the current MIS  forwards the client request back to the load balancer , preferably using recursive request forwarding (as explained further below) and includes the serialized session state in the request. The request will be processed by another MIS instance  until eventually reaching a MIS instance  that already has a connection to the specific MCB instance . The forwarded MIS instance  now de-serializes the session state and processes the request according to scenario 1 above. In addition, the MIS  notifies the MCB instance  that it is not registered with the original MIS , thus instructing the MCB  to refresh its registration.","In scenario 4, the current MIS  does not obtain the session state and cannot forward the request to the preferred MIS , possibly because this particular MIS  is no longer available. In this case, the current MIS  will decipher the MCB instance id, and send a request to the MCB  to obtain the most current session state from the MCB . In response, the MCB  serializes the session state back to the current MIS  and then the current MIS  processes the request and becomes the preferred  MIS for the session.","In scenario 5, the current MIS  does not obtain the session state and is not connected to the MCB instance id used by the current session. The MIS  thus forwards the client request back to load balancer . The request is then dispatched to and processed by another MIS instance , until eventually reaching an MIS instance  which already has a connection to the specific MCB instance . The forwarded MIS instance  now processes the request according to scenario 1 or 4 above.","Connection Identifier Cookie","The following information is preferably comprised in the connection identifier cookie:\n\n","The contents of the connection identifier cookie may be hashed e.g. using MD5 or a similar hashing algorithm, before it is sent to the client.","Load Balancer Policy","Preferably, the cloud load balancer  uses one or more of the following policies when distributing client and MCB requests between MIS instances :","\u201cSticky policy\u201d based on the connection identifier cookie: this policy ensures that client requests for an existing session are always forwarded to the preferred MIS instance  which obtains the most current session state.","\u201cRound Robin policy\u201d: requests which do not contain a connection identifier cookie are distributed randomly\/evenly between the MIS instances  currently running in the cloud , using round robin or other non-sticky policies. This strategy is preferably applied to initial client connection requests, MCB register requests and\/or MIS recursive forwarding requests.","Recursive Request Forwarding","In case the currently contacted MIS  cannot process a client request (for the reasons explained above), the MIS  forwards the request back to the load balancer , preferably adding a forwarding cookie that comprises the identifier of that particular MIS . The load balancer  then routes the request to an MIS instance  according to its load balancing policy (see above).","The MIS  receiving the request will then try to process it. If the processing is successful, it will return the response to that MIS  which was originally contacted, which in turn will return the response to its caller until the response is sent back to the original client.","In case the MIS  receiving the request cannot process it, it will parse the chain of forwarding contained in the forwarding cookie. If it finds itself in the forwarding chain, this means that this request was already forwarded by this MIS . The  then returns a failure message indicating to the caller MIS to re-issue the request.","In case the forwarding chain is longer than a predefined threshold value, the MIS  may return a failure status indicating to the caller MIS to abort the request. The forwarding chain threshold is further explained below.","In all other cases, the current MIS  preferably adds itself to the forwarding chain and forwards the request back to the load balancer .","HTTP Tunneling and Connection Multiplexing","An MCB instance  preferably maintains a plurality of (telnet-based) connections to a mainframe , but preferably only a single HTTP request to each MIS instance  with which it has registered. To this end, the MCB instance  may multiplex several mainframe connections over a single HTTP connection and may tunnel the telnet packets as HTTP requests.","In order to prevent sending many small HTTP requests, both the MIS  and MCB  may utilize the well-known Nagle algorithm in order to buffer requests and then sending a plurality of buffered requests in on larger chunk.","Increasing the Number of MIS Instances","Depending on the configuration of the cloud computing environment , when a given number of MIS instances  can no longer sustain the load, new MIS instances  may be dynamically started (spawned). Initially, newly spawned MIS instance  does not have any registered MCB connections. Therefore, such MIS instance  is unable to handle client requests on its own and will have to either forward client requests directly to their preferred MIS  or, for new client connection requests, use recursive forwarding (see above).","In order to make newly spawned MIS instances  operable more quickly, MCB instances  may frequently send a \u201crefresh register\u201d message to the load balancer  in an attempt to register with newly spawned MIS instances . As explained above, given enough MCB register requests, eventually all MCB instances  will be registered with the new MIS instances . Once the registration is complete, the new instance will start working at full capacity.","To further optimize this process, MIS instances  registered with an MCB  may notify the MCB  when receiving a request forwarded from an MIS  for which this MCB  is not registered. When receiving such a notification, the MCB  may attempt again to register itself with all MIS instances .","Decreasing the Number of MIS Instances","A central benefit of deploying an application \u201cto the cloud\u201d is the ability to cope with variable loads. However, typical mainframe integration products cannot reduce the number of instances without disconnecting existing sessions or alternatively waiting for all sessions to terminate before shutting down an existing instance, which can be very time consuming, if possible at all. One advantage of the MIS instances  of the present technology is that they can be shutdown quickly and with no (or minimal) side effects. This is because the session state is replicated to an MCB , so that it is possible to immediately shutdown an unused or only lightly used MIS instance  without losing or disrupting any existing session. The load balancer  is able to detect that a MIS instance  has shutdown and may dynamically redirect all requests to other MIS instances , which will in turn restore the session state from the corresponding MCB instances .","In summary, one central aspect of the present technology is to create an abstraction layer around the TCP\/IP socket between the application server running the mainframe integration application, and the mainframe itself and tunnel all communication between the application deployed to the cloud and the mainframe inside the corporate firewall using standard HTTP\/S protocols. This allows the corporate network to communicate with application deployed to the cloud using a non-persistent HTTP\/S connection on ports  or , as well as to support SSL encryption. Furthermore, it allows the application deployed to the cloud to use stateful sessions with serializable state (as opposed to maintaining an open TCP\/IP socket, as in the prior art, which forces the mainframe integration product to use stateful sessions with non serializable state since the TCP\/IP socket itself cannot be serialized), thus allowing the sessions to be easily replicated and to provide failover capabilities between notes in the cloud. As explained above, the central components of a preferred embodiment are on the one hand the Mainframe Communication Bridge (MCB), installed inside the corporate network, preferably behind a firewall (possibly even on the mainframe itself), which encapsulates the mainframe communication protocol using standard HTTP, as well as on the other hand the Mainframe Integration Server (MIS), installed in the cloud, which translates the HTTP packets into Mainframe protocol packets for use by the application. However, as explained above, the present technology is not limited to mainframes, but the above-explained advantageous concepts may well be applied to all kinds of session-aware applications, such as database servers maintaining persistent connections to a database, etc."],"heading":["1. TECHNICAL FIELD","2. BACKGROUND AND SUMMARY","4. DETAILED DESCRIPTION","Example"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"3. SHORT DESCRIPTION OF THE DRAWINGS","p":["In the following detailed description, presently preferred embodiments are further described with reference to the following figures:",{"@attributes":{"id":"p-0025","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0028"},"figref":"FIGS. 2-3"}]},"DETDESC":[{},{}]}
