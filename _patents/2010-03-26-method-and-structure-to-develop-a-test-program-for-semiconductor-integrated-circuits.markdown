---
title: Method and structure to develop a test program for semiconductor integrated circuits
abstract: Test program development for a semiconductor test system, such as automated test equipment (ATE), using object-oriented constructs is described. The invention provides a method for describing test system resources, test system configuration, module configuration, test sequence, test plan, test condition, test pattern, and timing information in general-purpose object-oriented constructs, e.g., C++ objects and classes. In particular, the modularity of program development is suitable for developing test programs for an open architecture semiconductor test system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08255198&OS=08255198&RS=08255198
owner: Advantest Corporation
number: 08255198
owner_city: Tokyo, Nerima-Ku
owner_country: JP
publication_date: 20100326
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","EXAMPLE 1","Use of BurstOff","EXAMPLE 2","Use of BurstOffDeep","EXAMPLE 3","PreBurst and PostBurst Inhibition","EXAMPLE 4","Use of Skip","EXAMPLE 5","Use of Mask","EXAMPLE 6","Use of Inherited Options and References","EXAMPLE 7","PreBurst and PostBurst with Nested Lists"],"p":["This application is a division of U.S. patent application Ser. No. 10\/772,434, filed Feb. 6, 2004, the entire disclosure of which is incorporated herein by reference. This application claims the benefit of application No. 60\/447,839, \u201cMethod and Structure to Develop a Test Program for Semiconductor Integrated Circuits,\u201d filed Feb. 14, 2003; application No. 60\/449,622, \u201cMethod and Apparatus for Testing Integrated Circuits,\u201d filed Feb. 24, 2003; all of which are incorporated herein in their entirety by reference. This application also incorporates by reference in its entirety U.S. application Ser. No. 10\/772,327, \u201cMethod and Apparatus for Testing Integrated Circuits,\u201d filed Feb. 6, 2004, which is now U.S. Pat. No. 7,437,261, which claims the benefit of application No. 60\/449,622, \u201cMethod and Apparatus for Testing Integrated Circuits,\u201d filed Feb. 24, 2003.","1. Field of Invention","The present invention relates to the testing of integrated circuits (ICs), and more particularly to developing a test program for automated semiconductor test equipment (ATE).","2. Description of Related Art","Today tester manufacturers use their own proprietary languages to develop test programs for semiconductor test systems (testers). For example, machines produced by Advantest Corporation utilize the Test Description Language (TDL), and Credence Systems offers its own Waveform Generation Language (WGL). To overcome this degree of specialization, IC and tester manufacturers tried to find a common ground by developing IEEE standard 1450, the Standard Test Interface Language (STIL). STIL, however, is a highly specialized language for defining pins, test commands, timing, etc. Moreover, a test engineer running STIL nevertheless still needs to translate STIL into the proprietary manufacturer-specific language required by the tester. Thus STIL merely serves as an intermediate language that is nonetheless highly specialized and not generally known to programmers.","Hence, it is desirable to develop a method through which test program can be written in a general purpose language. Moreover, this method should allow for easy development of test programs for an open architecture test system.","This application describes test program development using object-oriented constructs, e.g., C++ objects and classes. In particular, this method is suitable for developing test programs for an open architecture tester, such as that described in U.S. application Ser. Nos. 60\/449,622, 10\/404,002 and 10\/403,817, assigned to the assignee of the present invention.","An embodiment of the present invention provides a method for developing a test program by describing test system resources, test system configuration, module configuration, test sequence, test plan, test condition, test pattern and timing information in general-purpose object-oriented, e.g., C\/C++, constructs to test a device under test, e.g., an IC, on a semiconductor test system, such as automated test equipment (ATE). The files containing these descriptions are stored in memory, i.e., a computer-readable medium, accessible to the test system or related equipment that uses the files.","Describing test system resources may comprise specifying a resource type, where the resource type is associated with at least one test module for applying a test to the IC, specifying a parameter type associated with the resource type, and specifying a parameter of the parameter type.","Describing test system configuration may comprise specifying a site controller for controlling at least one test module, where each test module applies a test to the IC, and specifying an input port of a module connection enabler. The test system couples the site controller to the module connection enabler at the specified input port, and the module connection enabler couples the site controller to a test module. The module connection enabler may be implemented as a switch matrix.","Describing module configuration may comprise specifying a module identifier for specifying a module type, specifying executable code for controlling a test module of the module type specified by the module identifier, and specifying a resource type associated with the test module. The executable code may take the form of a dynamic link library.","Describing module configuration may further involve the user specifying a slot identifier for specifying an output port of the module connection enabler, where the test system couples the test module to the module connection enabler at the output port, and the module connection enabler couples the test module to a corresponding site controller. The user may also specify a vendor identifier for identifying the provider of the test module, and an identifier of the maximum number of resource units available in connection with the resource type. The resource type may be, for example, digital tester pins and the resource units tester channels. Alternatively, the tester channel resource units may also correspond to resource types such as, for example, analog tester pins, RF tester pins, power supply pins, digitizer pins, and arbitrary waveform generation pins. An indicator relating to which resource units are disabled may also be provided. The resource units indicated as disabled may represent defective resource units of the test module.","Describing test conditions may comprise specifying at least one test condition group, specifying a specification set including at least one variable; and specifying a selector for selecting an expression to be bound to a variable. Association of the test condition group with a selector for the specification set defines a test condition.","Describing a test sequence may comprise specifying the order (or flow) in which various tests can be applied.","Describing test patterns may comprise specifying the test patterns, associated voltage and current levels, transitions in signal values, corresponding rise and fall times and associated timing.","An embodiment of the present invention also includes the use of preheader files. A preheader file is compiled to create a header file for a class associated with a test entity. The preheader includes a parameter block for specifying parameters for setting at least one attribute of the test entity, and a template block for specifying source code that is inserted by a compiler into the header file for the test entity class. The header file may be a C++ header file. The test entity may be a test and the test entity class may be a test class, for example. The parameters may relate to pattern lists and test conditions, for example.","A pattern compiler of an embodiment of the invention includes at least one module-specific pattern compiler, and an object file manager for directing each module-specific compiler to compile both a corresponding module-specific section of a pattern source file and a common section of the pattern source file. The common section includes information accessible to all of the module-specific compilers. An output of the compiler includes at least one module-specific pattern data section. Module-specific pattern loaders load into corresponding test modules module-specific pattern data from corresponding module-specific pattern data sections for execution.","The present invention is generally described in terms of the Open architecture test system as disclosed in U.S. application Ser. Nos. 60\/449,622, 10\/404,002 and 10\/403,817 by the same assignee. Those skilled in the art will recognize, however, that embodiments of the test program development system and method of the present invention are applicable not only to an open tester architecture, but also to fixed tester architectures, as well.","A description of the open architecture test system may be found in U.S. Pat. No. 7,437,261, \u201cMethod and Apparatus for Testing Integrated Circuits,\u201d filed concurrently herewith, which claims the benefit of U.S. application No. 60\/449,622 by the same assignee.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["2","4","6","8","10","12","14","16"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["100","102","104","106","108","110","106","108","106","110","112","114"]},"The system controller  serves as the overall system manager. It coordinates the site controller activities, manages system-level parallel test strategies, and additionally provides for handler\/probe controls as well as system-level data-logging and error handling support. Depending on the operational setting, the system controller  can be deployed on a CPU that is separate from the operation of site controllers . Alternatively a common CPU may be shared by the system controller  and the site controllers . Similarly, each site controller  can be deployed on its own dedicated CPU (central processing unit), or as a separate process or thread within the same CPU.","The system architecture can be conceptually envisioned as the distributed system shown in  with the understanding that the individual system components could also be regarded as logical components of an integrated, monolithic system, and not necessarily as physical components of a distributed system.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["200","200","220","240","260","102","104","108","260","200","280"]},"As an exemplary choice, the development environment for this platform can be based on Microsoft Windows. The use of this architecture has side benefits in program and support portability (e.g., a field service engineer could connect a laptop which runs the tester operating system to perform advanced diagnostics). However, for large compute-intensive operations (such as test pattern compiles), the relevant software can be made as an independent entity capable of running independently to allow job scheduling across distributed platforms. Related software tools for batch jobs are thus capable of running on multiple platform types.","As an exemplary choice, ANSI\/ISO standard C++ can be taken as the native language for the software. Of course, there are a multitude of options available (to provide a layer over the nominal C++ interfaces) that allows a third party to integrate into the system with an alternative language of its own choice.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3","b":["292","294","296","298"]},"From the perspective of source-based organization, the tester operating system (TOS) interface  include: System Controller to Site Controller interfaces , framework classes , Site Controller to Module interfaces , framework classes , predetermined module-level interfaces, backplane communications library , chassis slot IF (Interface) , loadboard hardware IF , backplane simulation IF , loadboard simulation IF , DUT simulation IF , Verilog PLI (programming language interface)  for DUT's Verilog model and C\/C++ language support  for DUT's C\/C++ model.","User components  include: a user test plan , user test classes , hardware loadboard , and DUT , a DUT Verilog model  and a DUT C\/C++ model .","System components  include: system tools , communications library , test classes , a backplane driver , HW backplane , simulation framework , backplane emulation , and loadboard simulation .","Module-development components  include: module commands implementation , module hardware , and module emulation .","External components  include external tools .","The system controller  includes interfaces  to site controller, framework classes , system tools , external tools , and a communications library . The System Controller software is the primary point of interaction for the user. It provides the gateway to the Site Controllers of the invention, and synchronization of the Site Controllers in a multi-site\/DUT environment as described in U.S. application No. 60\/449,622 by the same assignee. User applications and tools, graphical user interface (GUI)-based or otherwise, run on the System Controller. The System Controller also may act as the repository for all Test Plan related information, including Test Plans, test patterns and test parameter files. The memory storing these files may be local to the system controller or offline, e.g., connected to the system controller through a network. A test parameter file contains parameterization data for a Test class in the object oriented environment of an embodiment of the invention.","Third party developers can provide tools in addition to (or as replacements for) the standard system tools . The standard interfaces  on the System Controller  include interfaces that the tools use to access the tester and test objects. The Tools (applications) ,  allow interactive and batch control of the test and tester objects. The tools include applications for providing automation capabilities (through, for example, the use of SECS\/TSEM, etc.)","The Communications library  residing on the system controller  provides the mechanism to communicate with the Site Controllers  in a manner that is transparent to user applications and test programs.","The Interfaces  resident in memory associated with the System Controller  provide open interfaces to the framework objects that execute on the System Controller. Included are interfaces allowing the Site Controller-based module software to access and retrieve pattern data. Also included are interfaces that applications and tools use to access the tester and test objects, as well as scripting interfaces, which provide the ability to access and manipulate the tester and test components through a scripting engine. This allows a common mechanism for interactive, batch and remote applications to perform their functions.","The Framework Classes  associated with the System Controller  provide a mechanism to interact with these above-mentioned objects, providing a reference implementation of a standard interface. For example, the site controller  of the invention provides a functional test object. The system controller framework classes may provide a corresponding functional test proxy as a remote system controller-based surrogate of the functional test object. The standard functional test interface is thus made available to the tools on the system controller . The framework classes effectively provide an operating system associated with the host system controller. They also constitute the software elements that provide the gateway to the Site Controllers, and provide synchronization of the Site Controllers in a multi-site\/DUT environment. This layer thus provides an object model in an embodiment of the invention that is suitable for manipulating and accessing Site Controllers without needing to deal directly with the Communications layer.","The site controller  hosts a user test plan , user test classes , standard test classes , standard interfaces , site controller framework classes , module high level command interfaces (i.e., predetermined module-level interfaces , module commands implementation , backplane communications library , and a backplane driver . Preferably most of the testing functionality is handled by the site controllers \/, thus allowing independent operation of the test sites .","A Test Plan  is written by the user. The plan may be written directly in a standard computer language employing object-oriented constructs, such as C++, or described in a higher level test programming language to produce C++ code, which can then be compiled into the executable test program. For test program development, one embodiment of the invention employs assignee's inventive Test Program Language (TPL) compiler. Referring to , the test program compiler  acts in part as a code generator including a translator section  to translate a test program developer's source files  describing tests and associated parameters into object-oriented constructs, such as C++ code. A compiler section , in turn, compiles and links the code into executables, e.g., DLLs, to create the test program that may be executed by the tester system. Although the application of the TPL code generator\/translator to test systems is novel, please note that code generators are known in the art. Also, the compiler section may be a standard C++ compiler known in the art.","The test plan creates test objects by using the Framework Classes  and\/or standard or user supplied Test Classes  associated with the site controllers, configures the hardware using the Standard Interfaces , and defines the test plan flow. It also provides any additional logic required during execution of the test plan. The test plan supports some basic services and provides an interface to the services of underlying objects, such as debug services (e.g., break-pointing), and access to underlying framework and standard classes.","The source code input to the test program compiler  includes a Test Plan description file that specifies the objects used in a test plan and their relationships to one another. This file is translated to C++ code that is executed on the Site Controller in the form of an implementation of a standard interface, which may be denoted ITestPlan. This code is packaged into a Windows dynamic link library (DLL), which may be loaded onto the Site Controller. The Test Program DLL is generated to have standard known entry points that the Site Controller software can use to generate and return the TestPlan object it contains. The Site Controller software loads the Test Program DLL into its process space and uses one of the entry points to create an instance of the Test Plan object. Once the Test Plan object has been created, the Site Controller software can then execute the test plan.","The Framework classes  associated with the site controllers are a set of classes and methods that implement common test-related operations. The site controller-level framework includes, for example, classes for power supply and pin electronics sequencing, setting level and timing conditions, obtaining measurements, and controlling test flow. The framework also provides methods for runtime services and debugging. The framework objects may work through implementing the standard interfaces. For example, the implementation of the TesterPin framework class is standardized to implement a general tester pin interface that test classes may use to interact with hardware module pins.","Certain framework objects may be implemented to work with the help of the module-level interfaces  to communicate with the modules. The site controller framework classes effectively act as a local operating system supporting each site controller.","In general more than ninety percent of the program code is data for the device test, and the remaining ten percent of the code realizes the test methodology. The device test data is DUT-dependent (e.g., power supply conditions, signal voltage conditions, timing conditions, etc.). The test code consists of methods to load the specified device conditions on to ATE hardware, and also those needed to realize user-specified objectives (such as datalogging). The framework of an embodiment of the invention provide a hardware-independent test and tester object model that allows the user to perform the task of DUT test programming.","To increase the reusability of test code, such code may be made independent of any device-specific data (e.g., pin name, stimulus data, etc.), or device-test-specific data (e.g., conditions for DC units, measurement pins, number of target pins, name of pattern file, addresses of pattern programs). If code for a test is compiled with data of these types, the reusability of the test code would decrease. Therefore, according to an embodiment of the invention, any device-specific data or device-test-specific data may be made available to the test code externally, as inputs during code execution time.","In an embodiment of the invention, a Test Class, which is an implementation of a standard test interface, denoted here as ITest, realizes the separation of test data and code (and hence, the reusability of code) for a particular type of test. Such a test class may be regarded as a \u201ctemplate\u201d for separate instances of itself, which differ from each other only on the basis of device-specific and\/or device-test-specific data. Test classes are specified in the test plan file. Each Test class typically implements a specific type of device test or setup for device test. For example, an embodiment of the invention may provide a specific implementation of the ITest interface, for example, FunctionalTest, as the base class for all functional tests for DUTs. It provides the basic functionality of setting test conditions, executing patterns, and determining the status of the test based on the presence of failed strobes. Other types of implementations may include AC and DC test classes, denoted here as ACParametricTests and DCParametricTests.","All test types may provide default implementations of some virtual methods (e.g., init( ), preExec( ), and postExec( )). These methods become the test engineer's entry points for overriding default behavior and setting any test-specific parameters. However, custom test classes can also be used in test plans.","Test classes allow the user to configure class behavior by providing parameters that are used to specify the options for a particular instance of that test. For example, a Functional Test may take parameters pList and TestConditionS, to specify the Pattern List to execute, and the Level and Timing conditions for the test, respectively. Specifying different values for these parameters (through the use of different \u201cTest\u201d blocks in a test plan description file) allows the user to create different instances of a Functional Test.  illustrates how different test instances may be derived from a single test class. These classes may be programmed directly in object-oriented constructs, such as C++ code, or designed to allow a test program compiler to take the description of the tests and their parameters from a test plan file and generate corresponding C++ code, which can be compiled and linked to generate the test program. A Template Library may be employed as the general-purpose library of generic algorithms and data structures. This library may be visible to a user of the tester, so that the user may, for example, modify the implementation of a test class to create a user-defined test class.","As to user-developed test classes, an embodiment of the system supports integration of such test classes into the framework in that all test classes derive from a single test interface, e.g., ITest, so that the framework can manipulate them in the same way as the standard set of system test classes. Users are free to incorporate additional functionality into their test classes, with the understanding that they have to use custom code in their test programs to take advantage of these additional facilities.","Each test site  is dedicated to testing one or more DUTs , and functions through a configurable collection of test modules . Each test module  is an entity that performs a particular test task. For example, a test module  could be a DUT power supply, a pin card, an analog card, etc. This modular approach provides a high degree of flexibility and configurability.","The Module Commands Implementation classes  may be provided by module hardware vendors, and implement either the module-level interfaces for hardware modules, or provide module-specific implementations of standard interfaces, depending on the commands implementation method chosen by a vendor. The external interfaces of these classes are defined by pre-determined module level interface requirements, and backplane communications library requirements. This layer also provides for extension of the standard set of test commands, allowing the addition of methods (functions) and data elements.","The Backplane Communications Library  provides the interface for standard communications across the backplane, thereby providing the functions necessary to communicate with the modules connected to the test site. This allows vendor-specific module software to use a Backplane Driver  to communicate with the corresponding hardware modules. The backplane communications protocol may use a packet based format.","Tester Pin objects represent physical tester channels and derive from a tester pin interface, denoted here as ITesterPin. The software development kit (SDK) of an embodiment of the invention provides a default implementation of ITesterPin, which may be called TesterPin, which is implemented in terms of a predetermined module-level interface, IChannel. Vendors are free to make use of TesterPin if they can implement their module's functionality in terms of IChannel; otherwise, they must provide an implementation of ITesterPin to work with their module.","The standard module interface, denoted here as IModule, provided by the tester system of the invention generically represents a vendor's hardware module. Vendor-supplied module-specific software for the system may be provided in the form of executables such as dynamic link libraries (DLLs). Software for each module-type from a vendor may be encapsulated in a single DLL. Each such software module is responsible for providing vendor-specific implementations for the module interface commands, which comprise the API for module software development.","There are two aspects of the module interface commands: first, they serve as the interface for users to communicate (indirectly) with a particular hardware module in the system, and second, they provide the interfaces that third-party developers can take advantage of to integrate their own modules into the site controller level framework. Thus, the module interface commands provided by the framework are divided into two types:","The first, and most obvious, are those \u201ccommands\u201d exposed to the user through the framework interfaces. Thus, a tester pin interface (ITesterPin) provides methods to get and set level and timing values, while a power supply interface (IPowerSupply) provides methods for powering up and powering down, for example.","In addition, the framework provides the special category of the predetermined module-level interfaces, which can be used to communicate with the modules. These are the interfaces used by framework classes (i.e., \u201cstandard\u201d implementations of framework interfaces) to communicate with vendor modules.","However, the use of the second aspect, the module-level interfaces, is optional. The advantage of doing so is that vendors may then take advantage of the implementations of classes such as ITesterPin and IPowerSupply, etc. while focusing on the content of specific messages sent to their hardware by implementing the module-level interfaces. If these interfaces are inappropriate to the vendor, however, they may choose to provide their custom implementations of the framework interfaces (e.g., vendor implementations of ITesterPin, IPowerSupply, etc.). These would then provide the custom functionality that is appropriate for their hardware.","With this open architecture as background, the test program development system of the present invention is further described as follows. Section A below describes rules to describe the test environment in which test program will be used; section B describes the method and rules for test program development; section C specifies the method and rules to develop a test plan and how to define the main structure of the test program; section D describes how to run a test program on an open architecture test system; section E describes a method and rules for test patterns; section F describes rules to describe the timing of the test patterns; and section G describes rules for the overall tester operation.","A. Components","The test environment comprises a set of files that specify the necessary conditions for bringing up the tester, and for preparing it to run a set of tests. The test environment preferably includes files for:\n\n","Of the above, items 1-3 are created by ICF (installation and configuration files) with information from a CMD (configuration management database), and made available at a well-known location, while items 4-8 are user-specified. This section provides descriptions for the items 1-6 above; items 7-8 are described in more detail in section E. Specific methods and rules are preferably used to develop each of these components; these methods and rules will be described in this section with examples.","A1. The Resource Definition","Each hardware module provides one or more types of hardware resources (resources for short) for use by the test system. The tester Resource Definition is preferably used to declare a set of resource names for the available resource types, and a set of parameter names and types associated with each particular resource type. For instance, the resource name dpin is used to refer to digital tester pins. These resources have parameters such as VIL (for the input low voltage), VIH (for the input high voltage), VOL (for the output low voltage), VOH (for the output high voltage), etc. A resource definition file will have the extension \u201c.rsc\u201d. Shown below is an example resource definition, containing some tester resources:",{"@attributes":{"id":"p-0076","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#"]},{"entry":[{},"# File Resources.rsc"]},{"entry":[{},"#"]},{"entry":[{},"Version 0.1.2;"]},{"entry":[{},"ResourceDefs"]},{"entry":[{},"{"]},{"entry":[{},"\u2003# digital pins"]},{"entry":[{},"\u2003dpin"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003# Low and High voltages for input pins"]},{"entry":[{},"\u2003\u2003Voltage VIL, VIH;"]},{"entry":[{},"\u2003\u2003# Low and High voltages for output pins"]},{"entry":[{},"\u2003\u2003Voltage VOL, VOH;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# power supplies"]},{"entry":[{},"\u2003dps"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003#"]},{"entry":[{},"\u2003\u2003# PRE_WAIT specifies the time to wait after voltage"]},{"entry":[{},"\u2003\u2003#\u2003\u2003reached its final value to start pattern"]},{"entry":[{},"\u2003\u2003#\u2003\u2003generation. The actual time that the system"]},{"entry":[{},"\u2003\u2003#\u2003\u2003will wait is a small system specified range:"]},{"entry":[{},"\u2003\u2003#\u2003\u2003PRE_WAIT-delta <= actual <= PRE_WAIT+delta"]},{"entry":[{},"\u2003\u2003#"]},{"entry":[{},"\u2003\u2003# PRE_WAIT_MIN is a minimum amount to wait after voltage"]},{"entry":[{},"\u2003\u2003#\u2003\u2003reached its final value to start pattern generation."]},{"entry":[{},"\u2003\u2003#\u2003\u2003It is a system specified range:"]},{"entry":[{},"\u2003\u2003#\u2003\u2003PRE_WAIT_MIN <= actual <="]},{"entry":[{},"PRE_WAIT_MIN+delta"]},{"entry":[{},"\u2003\u2003#"]},{"entry":[{},"\u2003\u2003# POST_WAIT specifies the time to wait after pattern"]},{"entry":[{},"\u2003\u2003#\u2003\u2003generation ends to shut down the power. The actual"]},{"entry":[{},"\u2003\u2003#\u2003\u2003time that the system will wait is a small system"]},{"entry":[{},"\u2003\u2003#\u2003\u2003defined range:"]},{"entry":[{},"\u2003\u2003#\u2003\u2003POST_WAIT-delta <= actual <= POST_WAIT+delta"]},{"entry":[{},"\u2003\u2003#"]},{"entry":[{},"\u2003\u2003# POST_WAIT_MIN specifies the time to wait after pattern"]},{"entry":[{},"\u2003\u2003#\u2003\u2003generation ends to shut down the power. The actual"]},{"entry":[{},"\u2003\u2003#\u2003\u2003time that the system will wait is a small system"]},{"entry":[{},"\u2003\u2003#\u2003\u2003defined range:"]},{"entry":[{},"\u2003\u2003#\u2003\u2003POST_WAIT_MIN <= actual <="]},{"entry":[{},"POST_WAIT_MIN+delta"]},{"entry":[{},"\u2003\u2003#"]},{"entry":[{},"\u2003\u2003Time PRE_WAIT;"]},{"entry":[{},"\u2003\u2003Time PRE_WAIT_MIN;"]},{"entry":[{},"\u2003\u2003Time POST_WAIT;"]},{"entry":[{},"\u2003\u2003Time POST_WAIT_MIN;"]},{"entry":[{},"\u2003\u2003# The voltage."]},{"entry":[{},"\u2003\u2003Voltage VCC;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note that the type of a resource parameter (such as Voltage or Time) is preferably a standard engineering unit. Vendors supplying special purpose resources that prefer the specification of different parameters should provide their own resource definition files.","Structure for the Resource Definition","Given below is a structure for the resource definition file in accordance with a preferred embodiment of the present invention:",{"@attributes":{"id":"p-0079","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"resource-file:"]},{"entry":[{},"\u2003version-info resource-defs"]},{"entry":[{},"version-info:"]},{"entry":[{},"\u2003Version version-identifer ;"]},{"entry":[{},"resource-defs:"]},{"entry":[{},"\u2003ResourceDefs { resource-def-list }"]},{"entry":[{},"resource-def-list:"]},{"entry":[{},"\u2003resource-def"]},{"entry":[{},"\u2003resource-def-list resource-def"]},{"entry":[{},"resource-def:"]},{"entry":[{},"\u2003resource-name { resource-params-decl-list }"]},{"entry":[{},"resource-params-decl-list:"]},{"entry":[{},"\u2003resource-params-decl"]},{"entry":[{},"\u2003resource-params-decl-list resource-params-decl"]},{"entry":[{},"resource-params-decl:"]},{"entry":[{},"\u2003elementary-type-name resource-param-name-list ;"]},{"entry":[{},"resource-param-name-list:"]},{"entry":[{},"\u2003resource-param-name"]},{"entry":[{},"\u2003resource-param-name-list , resource-param-name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Undefined non-terminals above are specified below:\n\n","The Tester Configuration is a set of rules that is preferably used to list the Site Controllers in a particular system configuration, and the connection of the Site Controllers to the Switch Matrix input ports. In the architecture of an embodiment of the invention, a single Site Controller can be connected to a single switch matrix input port. Thus, in this context, the switch matrix connections serve as implicit identifiers for the Site Controllers in the system (other configurations are possible). The following is an example of a typical tester configuration:",{"@attributes":{"id":"p-0082","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#"]},{"entry":[{},"# Tester Configuration, Sys.cfg"]},{"entry":[{},"#"]},{"entry":[{},"Version 1.2.5;"]},{"entry":[{},"SysConfig"]},{"entry":[{},"{"]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003# The first field is the hostname of the Site Controller machine;"]},{"entry":[{},"\u2003# it can be specified as either a dotted-decimal IP address or a"]},{"entry":[{},"\u2003# domain-qualified hostname."]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003# The second field is the switch matrix input port number, which"]},{"entry":[{},"\u2003# implicitly serves as the identifier for the Site Controller"]},{"entry":[{},"\u2003# connected to it."]},{"entry":[{},"\u2003#"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003zeus.olympus.deities.org","2;"]},{"entry":[{},"\u2003127.0.0.2","\u20034;"]},{"entry":[{},"\u2003127.0.0.0","\u20031; # SITEC-1"]},{"entry":[{},"\u2003127.0.0.3","\u20033;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The system configuration for a particular test-floor system is part of the system profile, and is made available as the system configuration file Sys.cfg. Note that in one embodiment the Site Controller connected to port 1 (\u201c127.0.0.0\u201d in the above example) may enjoy special status, in which it alone configures the Switch Matrix. This \u201cspecial\u201d Site Controller will be referred to as SITEC-1. Also note that the site controller address in this example is an IP address because the site controllers may be connected to the system controller by an internal network. Conversely, the system controller may be connected to an external network to access files, such as pattern data.","Structure for the Tester Configuration","Given below is a structure for the system configuration file in accordance with an embodiment of the present invention:",{"@attributes":{"id":"p-0085","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"system-config-file:"]},{"entry":[{},"\u2003version-info system-config"]},{"entry":[{},"version-info:"]},{"entry":[{},"\u2003Version version-identifer ;"]},{"entry":[{},"system-config:"]},{"entry":[{},"\u2003SysConfig { site-controller-connection-list }"]},{"entry":[{},"site-controller-connection-list:"]},{"entry":[{},"\u2003site-controller-connection"]},{"entry":[{},"\u2003site-controller-connection-list site-controller-connection"]},{"entry":[{},"site-controller-connection:"]},{"entry":[{},"\u2003site-controller-hostname input-port ;"]},{"entry":[{},"site-controller-hostname:"]},{"entry":[{},"\u2003ip-address"]},{"entry":[{},"\u2003domain-qualified-hostname"]},{"entry":[{},"ip-address:"]},{"entry":[{},"\u2003octet . octet . octet . octet"]},{"entry":[{},"domain-qualified-hostname:"]},{"entry":[{},"\u2003name"]},{"entry":[{},"\u2003domain-qualified-hostname . name"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Undefined non-terminals above are specified below:\n\n","The Module Configuration allows the specification of the physical configuration of the tester, e.g., the physical location and type of each module in a SYSTEM chassis. This is necessitated by the dynamic nature of the tester bus configuration, which allows a mapping of the tester bus address to the physical slot location. This information allows a hardware discovery process that occurs at system boot-up time to validate the SYSTEM configuration. Each output port of the Switch Matrix defines a physical slot, which is preferably occupied by a single hardware module. Shown is an example of a module configuration specified in the file Modules.cfg in accordance with an embodiment of the invention.","As mentioned earlier, in one embodiment a slot refers to connector through which a hardware module can be connected, such as an output port of the switch matrix. Each configuration definition provides information about the module that may be attached to one or more slots. The VendorID specified in a configuration definition is a unique ID associated with a vendor. The ModuleID refers to a type of module provided by this vendor. There may be several instances of the same ModuleID in a tester configuration. The ModuleDriver refers to a vendor supplied DLL to service the module. Finally, the Resource refers to the units serviced by this module, and provides a name for the resource type; the resource name is obtained from the resource definition file.","The above example describes three configuration blocks in a module configuration file. In one implementation, the first configuration block, slots 1-12 and 32-48 are serviced by a module produced by vendor 1. This vendor provides the module, the identifier \u201c1\u201d to refer to this module type, and the module driver library to control the module. This module can provide two types of resource units, one designated by the resource name \u201cdpin\u201d, with preferably a total number of 32 resource units (i.e., \u201cchannels\u201d), all of which are available, and the other designated by the resource name \u201canalog\u201d, with a total number of 16 resource units, of which only 9 through 16 are available. The second and third configuration blocks are specified in a manner similar to the first configuration.","Note that the provision for allowing channels to be denoted as \u201cdisabled\u201d is to allow for the identification of defective resource units on modules that are still functional otherwise. Note also that a configuration block may have one or more slot identifiers. When a block has more than a single slot identifier, then the identified slots are said to be cloned.","The module configuration file, Modules.cfg, is created as part of the system profile by the ICM (installation configuration management system) (with test-floor-specific information provided by the user), and made available at a well-known location. The ICM is a utility that can be local to the test system, e.g., on the system controller, or reside elsewhere on the network to which the system controller is connected. The ICM manages the CMD (configuration management database), and typically updated on hardware changes to the system configuration. ICM allows the user to configure the system, e.g., site controllers and modules. The CMD is a database that stores the configurations. For actual tester configuration\/operation ICM generates the configuration files, e.g., module configuration, and other files, and copies them and associated files, such as particular module DLLs, onto the tester.","Structure for Module Configuration","Below is the module configuration structure in accordance with the preferred embodiment:",{"@attributes":{"id":"p-0093","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"file-contents:"]},{"entry":[{},"\u2003version-info module-config-def"]},{"entry":[{},"version-info:"]},{"entry":[{},"\u2003Version version-identifier ;"]},{"entry":[{},"module-config-def:"]},{"entry":[{},"\u2003ModuleConfig { slot-entry-list }"]},{"entry":[{},"slot-entry-list:"]},{"entry":[{},"\u2003slot-entry"]},{"entry":[{},"\u2003slot-entry-list slot-entry"]},{"entry":[{},"slot-entry:"]},{"entry":[{},"\u2003Slot positive-integer-list { slot-info }"]},{"entry":[{},"slot-info:"]},{"entry":[{},"\u2003required-config-list"]},{"entry":[{},"required-config-list:"]},{"entry":[{},"\u2003required-config"]},{"entry":[{},"\u2003required-config-list required-config"]},{"entry":[{},"required-config:"]},{"entry":[{},"\u2003VendorID id-code ;"]},{"entry":[{},"\u2003ModuleID id-code ;"]},{"entry":[{},"\u2003ModuleDriver file-name ;"]},{"entry":[{},"\u2003Resource resource-name { max-spec disabled-spec}"]},{"entry":[{},"max-spec:"]},{"entry":[{},"\u2003MaxAvailable positive-integer ;"]},{"entry":[{},"disabled-spec:"]},{"entry":[{},"\u2003Disabled positive-integer-list ;"]},{"entry":[{},"positive-integer-list:"]},{"entry":[{},"\u2003positive-integer-list-entry"]},{"entry":[{},"\u2003positive-integer-list , positive-integer-list-entry"]},{"entry":[{},"positive-integer-list-entry:"]},{"entry":[{},"\u2003positive-integer"]},{"entry":[{},"\u2003positive-integer-number-range"]},{"entry":[{},"positive-integer-number-range:"]},{"entry":[{},"\u2003positive-integer - pos-integer"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Undefined non-terminals above are described below:\n\n","Comments are supported; comments start with the \u2018#\u2019 character, and extend to the end of the line.","A4. Pin Descriptions","The DUT pin descriptions are described using a Pin Descriptions file. The user makes available a description of the DUT pins in a pin description file, which has the extension .pin. This plain text file contains, at least the following: a listing of the DUT pin names; and initial definitions of named pin groups, which make use of the defined DUT pin names (\u201cinitial\u201d since they can be subsequently modified or added to, etc., programmatically).","The separation of this data specification from the Test Plan description allows general reuse of the DUT pin definitions, and allows the pattern compiler to derive pin names (required for resolving references to pin names used in vector specifications) from the pin description file, without having the process tied to a specific Test Plan.","Shown below is an example pin description file:",{"@attributes":{"id":"p-0099","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#"]},{"entry":[{},"# Pin description file, myDUT.pin."]},{"entry":[{},"#"]},{"entry":[{},"# Note that this implicitly imports the resource"]},{"entry":[{},"# configuration file,Resources.rsc."]},{"entry":[{},"#"]},{"entry":[{},"Version 1.1.3a;"]},{"entry":[{},"PinDescription"]},{"entry":[{},"{"]},{"entry":[{},"\u2003Resource dpin"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003A0;"]},{"entry":[{},"\u2003\u2003A1;"]},{"entry":[{},"\u2003\u2003A2;"]},{"entry":[{},"\u2003\u2003A3;"]},{"entry":[{},"\u2003\u2003A4;"]},{"entry":[{},"\u2003\u2003# This syntax expands to the names \u201dABUS[1]\u201d and"]},{"entry":[{},"\u201dABUS[2]\u201d"]},{"entry":[{},"\u2003\u2003ABUS[1:2];"]},{"entry":[{},"\u2003\u2003A5;"]},{"entry":[{},"\u2003\u2003BBUS[1:8];"]},{"entry":[{},"\u2003\u2003DIR;"]},{"entry":[{},"\u2003\u2003CLK;"]},{"entry":[{},"\u2003\u2003Group Grp1"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003DIR, CLK, A0, A1, A2, A3, A4, BBUS[1:4]"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003Group Grp2"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003A5,"]},{"entry":[{},"\u2003\u2003\u2003#"]},{"entry":[{},"\u2003\u2003\u2003# The following line will expand to"]},{"entry":[{},"\u2003\u2003\u2003#\u201dDIR, A1, A2, A4, A5, BBUS[2] \u201d:"]},{"entry":[{},"\u2003\u2003\u2003#"]},{"entry":[{},"\u2003\u2003\u2003Grp1 \u2212 CLK \u2212 A0 \u2212 A3 \u2212 BBUS[1] \u2212 BBUS[3:4] + A5,"]},{"entry":[{},"\u2003\u2003\u2003BBUS[5:8]"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003Resource dps"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003vcc1;"]},{"entry":[{},"\u2003\u2003vcc2;"]},{"entry":[{},"\u2003\u2003vcc3;"]},{"entry":[{},"\u2003\u2003Group PSG"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003vcc1, vcc2"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note that the DUT pin and pin group definitions are encapsulated within resource type blocks, to allow the compiler to correlate pin and pin group definitions with the allowable parameter settings for Levels, etc.","The following points about pin descriptions should be noted:\n\n","Given below is the structure for the pin descriptions in accordance with the preferred embodiment of the present invention:",{"@attributes":{"id":"p-0103","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pin-description-file:"]},{"entry":[{},"\u2003version-info pin-description"]},{"entry":[{},"version-info:"]},{"entry":[{},"\u2003Version version-identifer ;"]},{"entry":[{},"pin-description:"]},{"entry":[{},"\u2003PinDescription { resource-pins-def-list }"]},{"entry":[{},"resource-pins-def-list:"]},{"entry":[{},"\u2003resource-pins-def"]},{"entry":[{},"\u2003resource-pins-def-list resource-pins-def"]},{"entry":[{},"resource-pins-def:"]},{"entry":[{},"\u2003Resource resource-name { pin-or-pin-group-def-list }"]},{"entry":[{},"pin-or-pin-group-def-list:"]},{"entry":[{},"\u2003pin-or-pin-group-def"]},{"entry":[{},"\u2003pin-or-pin-group-def-list pin-or-pin-group-def"]},{"entry":[{},"pindef-or-pin-groupdef:"]},{"entry":[{},"\u2003pin-def ;"]},{"entry":[{},"\u2003pin-group-def"]},{"entry":[{},"pin-def:"]},{"entry":[{},"\u2003pin-name"]},{"entry":[{},"\u2003pin-name [ index : index ]"]},{"entry":[{},"pin-group-def:"]},{"entry":[{},"\u2003Group pin-group-name { pin-group-def-item-list }"]},{"entry":[{},"pin-group-def-item-list:"]},{"entry":[{},"\u2003pin-def"]},{"entry":[{},"\u2003pin-group-def-item-list , pin-def"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Undefined non-terminals above are specified below:\n\n","The Socket specifies the mapping between DUT pin names and physical tester pin (channel) assignments (the physical tester channel numbers are defined in the module configuration file). Note that different Sockets can be used to support different DUT packages and different load board configurations, etc. For a multi-DUT system, the Socket definitions for DUT\/channel assignments can support \u201ccloning\u201d of a basic Socket to multiple sites. However, different Sockets (i.e., different physical mappings for the same logical pins) should respect site module partitions. Thus, in addition to providing DUT pin to tester channel assignments, the socket also effectively defines the site partitioning. A Socket file could thus contain definitions for several individual site sockets. Shown in a sample socket file defining three DUT sites.","The following points about a Socket file should be noted:\n\n","Below is the structure for the module configuration in accordance with a preferred embodiment of the present invention:",{"@attributes":{"id":"p-0108","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"socket-file:"},{"entry":"\u2003\u2003version-info socket-def"},{"entry":"version-info:"},{"entry":"\u2003\u2003Version version-identifer ;"},{"entry":"socket-def:"},{"entry":"\u2003\u2003SocketDef { device-specific-socket-def-list }"},{"entry":"device-specific-socket-def-list:"},{"entry":"\u2003\u2003device-specific-socket-def"},{"entry":"\u2003\u2003device-specific-socket-def-list device-specific-socket-def"},{"entry":"device-specific-socket-def:"},{"entry":"\u2003\u2003DUTType DUT-type-name { pin-description-file dut-info-list }"},{"entry":"pin-description-file:"},{"entry":"\u2003\u2003PinDesc pin-description-file-name ;"},{"entry":"dut-info-list:"},{"entry":"\u2003\u2003dut-info"},{"entry":"\u2003\u2003dut-info-list dut-info"},{"entry":"dut-info:"},{"entry":"\u2003\u2003DUT dut-id { site-controller-input-port resource-info-list }"},{"entry":"site-controller-input-port:"},{"entry":"\u2003\u2003SiteController switch-matrix-input-port-number ;"},{"entry":"resource-info-list:"},{"entry":"\u2003\u2003resource-info"},{"entry":"\u2003\u2003resource-info-list resource-info"},{"entry":"resource-info:"},{"entry":"\u2003\u2003Resource resource-name { resource-item-unit-assignment-list }"},{"entry":"resource-item-unit-assignment-list:"},{"entry":"\u2003\u2003resource-item-unit-assignment"},{"entry":"\u2003\u2003resource-item-unit-assignment-list resource-item-unit-assignment"},{"entry":"resource-item-unit-assignment:"},{"entry":"\u2003\u2003resource-item-name slot-number . resource-unit ;"},{"entry":"\u2003\u2003resource-item-name [ resource-item-index ] slot-number ."},{"entry":"resource-unit-index ;"},{"entry":"\u2003\u2003resource-item-name [ resource-item-index-range ] \\"},{"entry":"\u2003\u2003\u2003\u2003slot-number . [ resource-unit-index-range ] ;"},{"entry":"\u2003\u2003resource-item-index-range:"},{"entry":"\u2003\u2003\u2003\u2003resource-item-index : resource-item-index"},{"entry":"\u2003\u2003resource-unit-index-range:"},{"entry":"\u2003\u2003\u2003\u2003resource-unit-index : resource-unit-index"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Undefined non-terminals above are specified below:\n\n","Note that in addition to logical pin name to physical channel mappings (as provided by the Socket), several attributes can be used for specifying the tester resources. For example, options might be used to define particular hardware configurations for channels, which may be test-specific, vendor-specific, and\/or test system-specific. These will be described using the Pin Mode Options, and made available via a Pin Mode Options file.","A Pin Mode Option definition would support the configuration of special options or modes for a tester channel. This could, for example, be used to select and configure channel multiplexing. It is preferred that the Pin Mode Option only be used as part of a Test Plan initialization flow, since it might require significant channel configuration. The Pin Option syntax supports vendor-defined options. An example is shown below:",{"@attributes":{"id":"p-0112","num":"0164"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PinModeOptions"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003clock","IN \u2003\u2003double;"]},{"entry":[{},"\u2003\u2003a0","OUT \u2003\u2003single;"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"As pointed out earlier, the resource definition file (Resources.rsc), the system configuration file (Sys.cfg) and the module configuration file (Modules.cfg) are preferably made available at a \u201cwell-known\u201d location. This \u201cwell-known\u201d location is the directory specified by the value of the system environment variable Tester_ACTIVE_CONFIGS. For example, if the value of Tester_ACTIVE_CONFIGS is the directory F:\\Tester_SYS\\configs, the system will expect the following files to be present:",{"@attributes":{"id":"p-0114","num":"0166"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"F:\\Tester_SYS\\configs\\Resources.rsc"]},{"entry":[{},"F:\\Tester_SYS\\configs\\Sys.cfg"]},{"entry":[{},"F:\\Tester_SYS\\configs\\Modules.cfg"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"During installation, the Installation and Configuration Management system (ICM) residing on the host computer will preferably set the value of Tester_ACTIVE_CONFIGS. Every time the ICM creates a new version of one of the above files, it will place the new version in the location pointed to by Tester_ACTIVE_CONFIGS. Note that in addition to the above three files, other system configuration files such as the simulation configuration file are also placed in the location pointed to by Tester_ACTIVE_CONFIGS","B. Rules for Test Program Development","One of the two principal end-user oriented components of the tester system is the test environment. The other component is the programming facility that the tester makes available for the end user (i.e., test engineer and test class developers).","The principal component of the programming environment is the test plan. The test plan uses test classes (which are different implementations of a test interface denoted Test), which realize the separation of test data and code for particular types of tests.","The plan may be written directly as a C++ test program, or described in a test plan description file, which is processed by a Test Program Generator (translator ) to produce object-oriented code, such as C++ code. The generated C++ code can then be compiled into the executable test program. The data required for populating a test class instance, such as levels, timings, etc., are specified by the user in the test plan description file.","A test program contains a set of user written files that specify details for running a test on a device. An embodiment of the invention includes sets of rules that permit a user to write these files using C++ constructs.","One of the requirements according to the embodiment of the invention is to follow the modularity of the open architecture test system. A modular development permits users to write individual components dealing with different aspects of the test, and then permits these components to be mixed and matched in various ways to yield a complete test program. A test program in accordance with the preferred embodiment of the present invention comprises a set of files as follows:",{"@attributes":{"id":"p-0121","num":"0173"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"files *.usrv for user variables and constants;"},{"entry":"files *.spec for specification sets;"},{"entry":"files *.lvl for levels;"},{"entry":"files *.tim for timings;"},{"entry":"files *.tcg for test condition groups;"},{"entry":"files *.bdefs for bin definitions;"},{"entry":"files *.ph for a pre-header, files for custom functions and test classes."},{"entry":"files *.ctyp for custom types;"},{"entry":"files *.cvar for custom variables; and"},{"entry":"files *.tpl for test plans."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The file extensions above are a recommended convention facilitating categorization of files. A single test program will preferably comprise a single test plan file, and the files it imports. An \u201cimport\u201d refers to other files with data that is either directly referenced by the importer (the file that specifies the import), or is imported by some other file directly referenced by the importer. The test plan file could define globals, flows, and other such objects within it, or it could import this information from other files. These rules allows any of the above components to be either in their own individual files, or directly inlined into a test plan file. Note that the test plan is similar in concept to a C-language main( ) function.","Test Program Features",{"@attributes":{"id":"p-0123","num":"0000"},"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":["User Variables and Constants,","Specification Set,","Levels,","Timings,","Test Conditions","Bin Definition","Pre-Headers","Custom Types","Custom Variables","Test Plan"]}},"Test program identifiers preferably start with an upper or lower case alphabetical character, and can subsequently have any number of alphabetical, numerical, or underscore (_) characters. It has several keywords which are provided in the description given below. These keywords are visually identified in code in this document using a bold font, such as Version. Keywords are reserved, and preferably not be used as identifiers. There are several special symbols such as {, }, (, ), :, and others which are described below.","Elaboration of Test Objects","An import of a test description file enables the importing file to refer to names of objects made available by the imported file. This allows the importing file to reference the objects named by the imported file. Consider a socket file aaa.soc that imports a pin description file xxx.pin. There could be another bbb.soc file that also imports xxx.pin. However, neither of these imports cause the objects described by xxx.pin to come into existence. They merely reference objects that are already assumed to exist.","The question arises: when do such objects come into existence? This is where the Test Plan file is fundamentally different. In an analogy to C, it would be a file with a main( ) routine in it. An \u201cImport\u201d statement in test plan file will elaborate these objects, that is, cause these objects to come into existence. The test plan mickey.tpl shown below causes the objects in xxx.pin and aaa.soc to be elaborated:",{"@attributes":{"id":"p-0127","num":"0188"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# File for Mickey's TestPlan"]},{"entry":[{},"Version 3.4.5;"]},{"entry":[{},"#"]},{"entry":[{},"# These import statements will actually cause the"]},{"entry":[{},"# objects to come into existence:"]},{"entry":[{},"#"]},{"entry":[{},"Import xxx.pin; \u2003\u2003# Elaborates pin and pin-group objects"]},{"entry":[{},"Import aaa.soc; \u2003\u2003# Elaborates site socket map objects"]},{"entry":[{},"# Other imports as necessary"]},{"entry":[{},"..."]},{"entry":[{},"Flow Flow1"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"An import of xxx.pin in the test plan causes all the pin and pin group objects declared in xxx.pin to be elaborated. This is described as follows: \u201cthe file xxx.pin is elaborated\u201d. It is not necessary for a Test Plan to directly import all the files that need to be elaborated. A file x is imported by a file y if either of the two statements below is true:\n\n","When a test program is compiled, it will elaborate all the objects in the files that are imported by the test plan. The set of files imported by a test plan are topologically sorted to yield an order in which the files are elaborated. The set of files imported by a test plan is referred to as the import closure of the test plan. If the import closure of a test plan cannot be topologically sorted, then there must be an imports cycle. Such a situation is erroneous, and will be rejected by the compiler.","User Variables and Constants","Global variables and constants will be defined using the User Variables and Constants. Constants are objects whose value is bound at compile time, and cannot be changed. The maximum integer value, for instance, would be a constant. On the other hand, the expression bound to variables can change at runtime via an API.\n\n","The types Integer, UnsignedInteger, Double, and String are referred to as Basic Types. The Basic Types have no measurement units. The Elementary Types which are not basic types are a Double, with an associated measurement unit and a scale. The scaling symbols are common engineering scaling symbols:\n\n","A separate file with user variables and constants will have the extension .usrv. Below is an example of a file with some global constants. An example of a file with some variables is given later.",{"@attributes":{"id":"p-0133","num":"0216"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# --------------------------------------------------------"]},{"entry":[{},"# File limits.usrv"]},{"entry":[{},"# --------------------------------------------------------"]},{"entry":[{},"Version 1.0.0;"]},{"entry":[{},"#"]},{"entry":[{},"# This UserVars collection declaration declares a set of"]},{"entry":[{},"# globally available variables and constants."]},{"entry":[{},"#"]},{"entry":[{},"UserVars"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003# Some constant Integer globals used in various places."]},{"entry":[{},"\u2003\u2003Const Integer \u2003\u2003MaxInteger = 2147483647;"]},{"entry":[{},"\u2003\u2003Const Integer \u2003\u2003MinInteger = \u22122147483648;"]},{"entry":[{},"\u2003\u2003# Smallest value such that 1.0 + Epsilon != 1.0"]},{"entry":[{},"\u2003\u2003Const Double Epsilon = 2.2204460492503131e\u2212016;"]},{"entry":[{},"\u2003\u2003# Some important constants related to Double"]},{"entry":[{},"\u2003\u2003Const Double MaxDouble = 1.7976931348623158e+308;"]},{"entry":[{},"\u2003\u2003Const Double MinDouble = \u2212MaxDouble;"]},{"entry":[{},"\u2003\u2003Const Double ZeroPlus = 2.2250738585072014e\u2212308;"]},{"entry":[{},"\u2003\u2003Const Double ZeroMinus = \u2212ZeroPlus;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The set of UserVars declared above are considered definitions of the variable on the left of the \u2018=\u2019. As a result, a single occurrence of the definition of a variable or constant is preferred, and it should be initialized.","As mentioned earlier, constants should not be changed once they are defined. The expression bound to a constant can involve previously defined constants and literal values. Variables, on the other hand, can be changed via an API. The expression bound to a variable can involve previously defined variables, constants and literal values.","Each variable is bound to an expression object which is maintained at runtime. This provides the capability of changing the expression associated with a variable at runtime, and then re-evaluating all the variables. The expression object is a parsed form of the right hand side of a variable or constant definition. In one embodiment, no facility is provided for the changing of constants at runtime. Their value is preferably fixed at compile time.","Any number of such files with globals can exist in the import closure of a test plan. While the above globals file is a set of numeric limits, here is a set of engineering globals using engineering measurement units, and some random user variables:",{"@attributes":{"id":"p-0138","num":"0221"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"# ---------------------------------------------------------"},{"entry":"# File myvars.usrv"},{"entry":"# ---------------------------------------------------------"},{"entry":"Version 0.1;"},{"entry":"#"},{"entry":"# This declares a UserVars collection of some engineering"},{"entry":"# globals."},{"entry":"#"},{"entry":"UserVars MyVars"},{"entry":"{"},{"entry":"\u2003\u2003# Engineering quantities."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Const Voltage VInLow = 0.0;","# 0 Volts"]},{"entry":["\u2003\u2003Const Voltage VInHigh = 5.0;","# 5 Volts"]},{"entry":["\u2003\u2003Const Voltage VOutLow = 400.0 mV;","\u2003\u2003# 400 milliVolts"]},{"entry":["\u2003\u2003Const Voltage VOutHigh = 5.1;","# 5.1 Volts"]},{"entry":["\u2003\u2003Const Time DeltaT = 2.0E\u22129;","# 2 nanoseconds"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\u2003Const Time ClkTick = 1.0ns; \u2003\u2003# 1 nanosecond"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Const Resistance R10 = 10.0 kOhms;","# 10 kilo Ohms"]},{"entry":"\u2003\u2003# Some variables are declared below."},{"entry":["\u2003\u2003Current ILow = 1.0 mA;","\u2003\u2003# 1 milliAmp"]},{"entry":["\u2003\u2003Current IHigh = 2.0 mA;","# 2 milliAmp"]},{"entry":["\u2003\u2003Power PLow = ILow * VInLow;","# Low power value"]},{"entry":["\u2003\u2003Power PHigh = IHigh * VInHigh;","# High power value"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2003# An away of low values for all A bus pins."},{"entry":"\u2003\u2003# The vil for A0 will be in ABusVil[0], for A1"},{"entry":"\u2003\u2003# in ABusVil[1], and so on."},{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2003Voltage ABusVil[8] = {1.0, 1.2, Others = 1.5};"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The compiler preferably checks that units and types match up. Note that since a Voltage times a Current yields a Power, the equations for PLow and PHigh above will compile. However, a statement such as the following will typically not compile:",{"@attributes":{"id":"p-0140","num":"0223"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#"},{"entry":"# Does not compile because a Current and a Voltage cannot be added"},{"entry":"# to yield a Power."},{"entry":"#"},{"entry":"Power Pxxx = IHigh + VInHigh;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The compiler will allow certain automatic type conversions:\n\n","Explicit type conversion to Double, UnsignedInteger and Integer is also permitted:\n\n","Conversion between unrelated types is also possible, by converting to an intermediate basic type:\n\n","The TestPlan object provides a UserVars class which is a collection that contains names and their associated expressions, values, and types. User variables can go into a Default User Variables Collection, or into a Named User Variables Collection. The UserVars declarations in the example above, which have no specified name, go into the default collection. However, it is possible to explicitly name a collection as follows:",{"@attributes":{"id":"p-0145","num":"0241"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# Declare X and Y in the MyVars UserVars collection."]},{"entry":[{},"UserVars MyVars"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003Integer X = 2.0;"]},{"entry":[{},"\u2003\u2003#"]},{"entry":[{},"\u2003\u2003# Refers to the above X, and to the globally"]},{"entry":[{},"\u2003\u2003# available MaxInteger from the default"]},{"entry":[{},"\u2003\u2003# UserVars collection."]},{"entry":[{},"\u2003\u2003#"]},{"entry":[{},"\u2003\u2003Integer Y = MaxInteger \u2212 X;"]},{"entry":[{},"}"]},{"entry":[{},"# Declare X, Y1 and Y2 in the YourVars UserVars collection."]},{"entry":[{},"UserVars YourVars"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003Integer X = 3.0;"]},{"entry":[{},"\u2003\u2003# Refers to the X from MyVars."]},{"entry":[{},"\u2003\u2003Integer Y1 = MaxInteger \u2212 MyVars.X;"]},{"entry":[{},"\u2003\u2003# Refers to the X declared above."]},{"entry":[{},"\u2003\u2003Integer Y2 = MaxInteger \u2212 X;"]},{"entry":[{},"}"]},{"entry":[{},"# More variables being added to the MyVars collection"]},{"entry":[{},"UserVars MyVars"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003#"]},{"entry":[{},"\u2003\u2003# Refers to X and Y from the earlier declaration"]},{"entry":[{},"\u2003\u2003# of MyVars."]},{"entry":[{},"\u2003\u2003#"]},{"entry":[{},"\u2003\u2003Integer Z = X + Y;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Name resolution within a UserVars collection proceeds as follows:\n\n","If the name is not qualified, and there is a constant or variable of the same name in the present collection, then the name resolves to that constant or variable.","Otherwise, the name resolves to a constant or variable in the default user variables collection.","Evaluation of a block of definitions in a UserVars collection can be thought of happening sequentially, from the first definition to the last. This may require each variable being defined before it is used.","Furthermore, there could be several blocks of definitions for a UserVars collection, each of which are defining several variables. All of these blocks of definitions can be thought of as being evaluated in declaration order in the test plan, and then the variables of each block are also checked in declaration order.","Finally, there could be several UserVars collections, each of which define variables over several blocks of definitions. All of the variables again can be thought of as being initialized in declaration order. Thus, in the above example, the evaluation order would be: MyVars.X, MyVars.Y, YourVars.X, YourVars.Y1, YourVars.Y2, MyVars.Z.","When a UserVars collection uses a variable from another collection, it preferably uses just the raw value of the variable. No dependency information is maintained between collections. Thus, dependency based re-evaluation can be limited to a single collection.","Each user variables collection refers to an instance of a C++ UserVars class. The default object of the C++ UserVars class is named \u201c_UserVars\u201d. Variables in an UserVars declaration that is unnamed are from the default user variables collection, and are added to this default object. Variables in a named user variables collection are added to an object of the C++ UserVars class having that name. In the above example, the \u201cMyVars\u201d C++ object will end up having the variables X, Y and Z.","C++ for User Variables","User variables are implemented as a collection of n-tuples having the name string, a const\/var Boolean, the type as an enumerated value and the expression as an expression tree. The expression of a name can be set by a call:",{"@attributes":{"id":"p-0155","num":"0252"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"enum ElemenaryType {UnsignedIntegerT, IntegerT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003DoubleT, VoltageT, ...};"]},{"entry":[{},"Status setExpression(const String& name,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009const bool isConst,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009const elementaryType,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009const Expression& expression);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The type Expression is a type that is a parsed form of the text corresponding to the right hand side of an assignment. There will be a globally available instance of UserVars. For example, the set of user variables in limits.usrv (cf. page) is implemented by the set of calls shown below:",{"@attributes":{"id":"p-0157","num":"0254"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_UserVars.setExpression(\u201cMaxInteger\u201d, true, IntegerT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(2147483647));"]},{"entry":[{},"_UserVars.setExpression(\u201cMinInteger\u201d, true, IntegerT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(\u22122147483648));"]},{"entry":[{},"_UserVars.setExpression(\u201cEpsilon\u201d, true, DoubleT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(2.2204460492503131e\u2212016));"]},{"entry":[{},"_UserVars.setExpression(\u201cMaxDouble\u201d, true, DoubleT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.7976931348623158e+308));"]},{"entry":[{},"_UserVars.setExpression(\u201cMinDouble\u201d, true, DoubleT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(\u201c\u2212 MaxDouble\u201d));"]},{"entry":[{},"_UserVars.setExpression(\u201cZeroPlus\u201d, true, DoubleT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(2.2250738585072014e\u2212308));"]},{"entry":[{},"_UserVars.setExpression(\u201cZeroMinus\u201d, true, DoubleT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(\u201c\u2212 ZeroPlus\u201d));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Below are the C++ statements that would be executed for the variables declared in myvars.usrv:",{"@attributes":{"id":"p-0159","num":"0256"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"myVars.setExpression(\u201cVInLow\u201d, true, VoltageT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(0.0));"]},{"entry":[{},"myVars.setExpression(\u201cVInHigh\u201d, true, VoltageT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(5.0));"]},{"entry":[{},"myVars.setExpression(\u201cDeltaT\u201d, true, TimeT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(2.0E\u22129));"]},{"entry":[{},"myVars.setExpression(\u201cClkTick\u201d, true, TimeT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.0E\u22129));"]},{"entry":[{},"myVars.setExpression(\u201cR10\u201d, true, ResistanceT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(10.0E+3));"]},{"entry":[{},"myVars.setExpression(\u201cILow\u201d, false, CurrentT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.0E\u22123));"]},{"entry":[{},"myVars.setExpression(\u201cIHigh\u201d, false, CurrentT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(2.0E\u22123));"]},{"entry":[{},"myVars.setExpression(\u201cPLow\u201d, false, PowerT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(\u201cILow * VInLow\u201d));"]},{"entry":[{},"myVars.setExpression(\u201cPHigh\u201d, false, PowerT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(\u201cIHigh * VInHigh\u201d));"]},{"entry":[{},"myVars.setExpression(\u201cABusVil[0]\u201d, false, VoltageT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.0));"]},{"entry":[{},"myVars.setExpression(\u201cABusVil[1]\u201d, false, VoltageT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.2));"]},{"entry":[{},"myVars.setExpression(\u201cABusVil[2]\u201d, false, VoltageT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.5));"]},{"entry":[{},"myVars.setExpression(\u201cABusVil[3]\u201d, false, VoltageT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.5));"]},{"entry":[{},"myVars.setExpression(\u201cABusVil[4]\u201d, false, VoltageT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.5));"]},{"entry":[{},"myVars.setExpression(\u201cABusVil[5]\u201d, false, VoltageT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.5));"]},{"entry":[{},"myVars.setExpression(\u201cABusVil[6]\u201d, false, VoltageT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.5));"]},{"entry":[{},"myVars.setExpression(\u201cABusVil[7]\u201d, false, VoltageT,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression(1.5));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the code above, the Expression class preferably has constructors that represent the parsed form of the expression. Expression has several constructors, including one that takes a string literal and parses it, and another that takes a string literal to use just as a string literal. These are distinguished by additional parameters which are not specified above for the sake of readability.","User variables in the default user variables collection will be managed by the _UserVars object of class UserVars. User variables in a named user variables collection Xxx will be managed by a UserVars object named Xxx.","Runtime API for UserVars","The C++ UserVars class that contains these names and expressions exports an application programming interface (API) to evaluate and modify these values at runtime. Modification of the expressions associated with UserVars also addresses the issue of when the UserVars will be reevaluated, and what the impact of the evaluation will be.","Consider first the issue of when the re-evaluation of UserVars as a result of a change should be triggered. If it is triggered immediately upon making a change to the expression, then the user would not be able to make a series of related changes prior to triggering the re-evaluation. Consequently, re-evalutation is triggered by an explicit call by the user.","The impact of reevaluation can be considered next. There are three kinds of re-evaluation that are available in accordance with the preferred embodiment:","UserVars Collection Re-evaluation is re-evaluation limited to a single UserVars collection. The semantics of this operation is to re-evaluate all the variables of this collection once again.","UserVars Targeted Re-evaluation is re-evaluation limited to a change to the expression bound to a single name. This would enable the user to change the expression of a single name, and cause the re-evaluation of the collection to take place, taking into consideration only this particular change.","User Vars Global Re-evaluation is re-evaluation of all UserVars collections. This basically triggers a re-evaluation of all the UserVars collections in declaration order and is quite costly.","All of the above re-evaluations will re-evaluate dependent objects such as Levels, Timings, etc. after re-evaluating the UserVars. Dependent objects will have a dirty bit that represents that it needs re-evaluation. Any time a UserVars collection is programmatically changed, it will also set the dirty bit on all dependent objects. This will trigger re-evaluation of the dependent objects.","In summary, named UserVars collections help contain the re-evaluation impact problem. Re-evaluation is normally limited to a single collection. A simple way of using UserVars would be to only use the default UserVars collection. That way, the ripple effect of making a change can happen to all UserVars. This ripple effect can be limited by having several named UserVars collections.","Multiple collections can refer to variables from one another, but the values bound to the variables are bound at time of use. No dependency is maintained between UserVars collections.","For each elementary type Xxx (UnsignedInteger, Current, Voltage, etc.), a method to get the value:\n\n","Methods to get and set the expression. The setExpression( ) call can also be used to define a new variable which was not hitherto defined.",{"@attributes":{"id":"p-0173","num":"0271"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"enum elementaryType"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003UnsignedIntegerT, IntegerT, DoubleT, VoltageT, ..."]},{"entry":[{},"};"]},{"entry":[{},"Status getExpression(const String& name,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Expression& expression) const;"]},{"entry":[{},"Status setExpression(const String& name,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003const bool isConst,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003const elementaryType,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003const Expression& expression);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The setExpression( ) call can fail if the expression results in a circular dependency. For instance if the following two calls were made, the second call would fail with a circular dependency failure\n\n","Note that this API does not typically support unsolicited re-evaluation. A call to setExpression( ) may not automatically cause the variable, and all other variables that depend on it, to be re-evaluated. The values bound to all variables will stay unchanged until a call to reevaluateCollection( ) (below) occurs.","A method to determine if a particular name is a constant:\n\n","A method to get the type:",{"@attributes":{"id":"p-0178","num":"0279"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"enum ElementaryType"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003UnsignedIntegerT, IntegerT, DoubleT, VoltageT, ..."]},{"entry":[{},"};"]},{"entry":[{},"Status getType(const String& name,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003ElementaryType& elementaryType) const;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The UserVars Collection Re-evaluation method.\n\n","The class will maintain equations related to all the variables, and their dependencies. When this method is called, all of the variables will get re-evaluated.","The UserVars Targeted Re-evaluation method.\n\n","The class will maintain equations related to all the variables, and their dependencies. When this method is called, the named variable, and all of its dependents will get re-evaluated.","The UserVars Global Re-evaluation method.",{"@attributes":{"id":"p-0183","num":"0000"},"ul":{"@attributes":{"id":"ul0040","list-style":"none"},"li":{"@attributes":{"id":"ul0040-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0041","list-style":"none"},"li":"static Status reevaluateAllCollections( );"}}}},"The class will maintain equations related to all the variables, and their dependencies. When this method is called, reevaluateCollection( ) is called on all UserVars collections in an unspecified order.","A method to determine if a particular name is defined:\n\n","A method to determine all the user variables currently defined:\n\n","A method to delete a presently defined variable:\n\n","This operation will fail if the name is used in expressions involving other variables.","A method to get the list of variables and constants that depend on a given variable or constant:",{"@attributes":{"id":"p-0189","num":"0000"},"ul":{"@attributes":{"id":"ul0048","list-style":"none"},"li":{"@attributes":{"id":"ul0048-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0049","list-style":"none"},"li":"Status getDependents(const String& name, StringList& dependents);\n\nSpecification Sets\n"}}}},"The Specification Set is used to supply a collection of variables which can take on values based on a Selector. For example, consider the following Specification Set that uses selectors Minnie, Mickey, Goofy and Daisy:",{"@attributes":{"id":"p-0191","num":"0297"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"# ---------------------------------------------------------"},{"entry":"# File Aaa.spec"},{"entry":"# ---------------------------------------------------------"},{"entry":"Version 1.0;"},{"entry":"Import Limits.usrv;"},{"entry":"SpecificationSet Aaa(Minnie, Mickey, Goofy, Daisy)"},{"entry":"{"},{"entry":"\u2003\u2003Double xxx = 1.0, 2.0, 3.0, 4.0;"},{"entry":"\u2003\u2003Integer yyy = 10, 20, 30, 40;"},{"entry":"\u2003\u2003Integer zzz = MaxInteger - xxx,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003MaxInteger - xxx - 1,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003MaxInteger - xxx - 2,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003MaxInteger - xxx;"},{"entry":"\u2003\u2003# The following declaration associates a single"},{"entry":"\u2003\u2003# value, which will be chosen regardless of the"},{"entry":"\u2003\u2003# selector. It is equivalent to:"},{"entry":"\u2003\u2003# \u2003Integer www = yyy + zzz, yyy + zzz, yyy + zzz, yyy + zzz"},{"entry":"\u2003\u2003Integer www = yyy + zzz;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The above Specification Set with the selector Goofy will make the following associations:\n\n","The operation of setting the selector on a specification set will be discussed later, when Tests are described.","Syntactically, a specification set al. is list of selectors (Minnie, Mickey, Goofy and Daisy in the example above), along with a list of variable definitions (xxx, yyy, zzz and www in the example above). The definition of a variable involves a list of expressions that is either as long as the list of selectors, or comprises a single expression.","Conceptually a specification set can be thought of as a matrix of expressions, whose columns are the Selectors, whose rows are the variables and whose entries are expressions. A particular selector (column) binds each variable (row) to a specific expression (entry). If the list has a single expression, it represents a row with the expression replicated as many times as there are selectors.","Specification sets can appear in two separate contexts. They could be separately declared in a .spec file, in which case they appear as shown above. These are named specification sets. Otherwise, local specification sets can be declared within a Test Condition Group. In such a declaration, the specification set will not be provided with a name. It will be a local specification set, of significance only to the enclosing test condition group.","Named specification sets can be modeled after the named user variables collection. The above specification set can be modeled as a UserVars collection named Aaa, which will have expressions for xxx[Minnie], xxx[Mickey], xxx[Goofy], xxx[Daisy], yyy[Minnie], and so on. When a particular selector (say Mickey) is chosen in the context of a test, the values of xxx, yyy and zzz are obtained from the variable name and the specification set name.","A test condition group can have at most one specification set, which is either a local specification set, or a reference to a named specification set. Local specification sets appear only in the context of a test condition group, and have no explicitly specified name. Such a specification set has an implicit name that is defined by the name of the enclosing test condition group. To resolve a name in a test condition group at a point where several specification sets and several UserVars collections are visible, the following rules are applied:\n\n","To illustrate these rules, consider the following example using Test Conditions Groups (to be described later)",{"@attributes":{"id":"p-0200","num":"0313"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Version 1.2.3;"},{"entry":"Import limits.usrv; \u2003# Picks up the limits UserVars file above."},{"entry":"Import aaa.spec; \u2002# Picks up the Specification Set AAA above."},{"entry":"TestConditionGroup TCG1"},{"entry":"{"},{"entry":"\u2003\u2003SpecificationSet(Min, Max, Typ)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003vcc = 4.9, 5.1, 5.0;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003# Rule 1: Resolution in a named user variables collection."},{"entry":"\u2003\u2003# A reference to MyVars.VInLow refers to VInLow from MyVars."},{"entry":"\u2003\u2003# Rule 2: Resolution in a local specification set."},{"entry":"\u2003\u2003# A reference to \u201cvcc\u201d here will resolve in the context"},{"entry":"\u2003\u2003# of the local specification set above."},{"entry":"\u2003\u2003# Rule 3: Resolution in default user variables collection."},{"entry":"\u2003\u2003# A reference to \u201cMaxInteger\u201d here will resolve to limits.usrv."},{"entry":"\u2003\u2003# Error: Resolution of xxx"},{"entry":"\u2003\u2003# A reference to xxx does not resolve because it is neither in"},{"entry":"\u2003\u2003# the local specification set, nor in limits.usrv."},{"entry":"\u2003\u2003# Error: Resolution of Aaa.xxx"},{"entry":"\u2003\u2003# Looks for a named UserVars collection named Aaa. The named"},{"entry":"\u2003\u2003# specification set does not qualify."},{"entry":"}"},{"entry":"TestConditionGroup TCG2"},{"entry":"{"},{"entry":"\u2003\u2003SpecificationSet Aaa; # References the imported specification set"},{"entry":"\u2003\u2003# Rule 1: Resolution in a named user variables collection."},{"entry":"\u2003\u2003# A reference to MyVars.VInLow refers to VInLow from MyVars."},{"entry":"\u2003\u2003# Rule 2: Resolution in a named specification set."},{"entry":"\u2003\u2003# A reference to \u201cxxx\u201d here will resolve in the context"},{"entry":"\u2003\u2003# of the local specification set Aaa above."},{"entry":"\u2003\u2003# Rule 3: Resolution in default user variables collection."},{"entry":"\u2003\u2003# A reference to \u201cMaxInteger\u201d here will resolve to limits.usrv."},{"entry":"\u2003\u2003# Error: Resolution of vcc"},{"entry":"\u2003\u2003# A reference to vcc does not resolve because it is neither in"},{"entry":"\u2003\u2003# the named specification set Aaa, nor in limits.usrv."},{"entry":"\u2003\u2003# Error: Resolution of Aaa.xxx"},{"entry":"\u2003\u2003# Looks for a named UserVars collection named Aaa. The named"},{"entry":"\u2003\u2003# specification set does not qualify."},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Resolution of a name in a specification set (rule above) requires that a selector of the set be enabled at the time the name resolution is required. This will be enforced by the fact that the test condition group will be referenced in a Test by specifying a selector.","C++ for Specification Sets","Using the above rules, Specification sets can be implemented by the C++ SpecificationSet class. The SpecificationSet class has essentially the same API as the UserVars class, except for an extra String parameter for the selector. Consequently, this API is not described in detail.","All named specification sets are preferably associated with a C++ object of that name. A local specification set in the context of a test condition group will have a name that is unique to that test condition group. It is illegal to refer to a variable of a local specification set outside the context of the test condition group that it is defined in.","Levels","The Levels are used to specify parameters of pins and pin groups. It is a collection of declarations of the form:",{"@attributes":{"id":"p-0205","num":"0318"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<pin-or-pin-group-name>"]},{"entry":[{},"{"]},{"entry":[{},"\u2003<pin-param-1> = xxx;"]},{"entry":[{},"\u2003<pin-param-2> = yyy;"]},{"entry":[{},"\u2003..."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Such a declaration specifies the setting of the various parameters of the named pin or pin-group. For example, such a statement could be used to set the VIL values for all pins in the InputPins group, as shown in the example.","As seen above, each Levels block is preferably made up of a number of levels items, each of which specifies parameters for a pin or pin group. Each levels item can specify a number of resource parameters. The runtime semantics for the setting of these levels values is as follows:","The levels items of the Levels block are processed in declaration order. Any pin that occurs in more than one levels item will get processed multiple numbers of times. Multiple specification of values for a single parameter should be maintained and applied in specification order.","The resource parameters in a levels item are processed in the order they are specified.","The Delay statements cause the process of setting levels to pause for approximately the indicated duration, prior to setting the next group of levels. The actual wait time may be in a small system defined range around the specified delay. So if the delay was t seconds, the actual delay would satisfy:","t\u2212\u0394t<=actual-wait<=t+\u0394t","The Delay statements divide up the Levels specification into a number of subsequences, each of which will require separate Test Condition Memory settings for processing.","The MinDelay statements cause the process of setting levels to pause for at least the specified duration prior to setting the next group of levels. The actual wait time may be in a small system defined range with a minimum value of the specified minimum delay. So if the minimum delay was t seconds, the actual delay would satisfy:","t<=actual-wait<=t+\u0394t","The MinDelay statements divide up the Levels specification into a number of subsequences, each of which will require separate Test Condition Memory settings for processing.","Each pin or pin-group name is specified in exactly one resource in a pin description file (suffix .pin), and therefore has a certain set of viable resource parameters specified in the resource file (suffix .rsc). All the parameters named must be from among this set of viable resource parameters, and must be of the same elementary type as the expression used to set their value. Information about the names and types of resource parameters comes from the resource file.","The resource file Resources.rsc is implicitly imported, providing tester with the names and types for parameters of standard resources such as dpin, and dps.","Resource parameters are assigned expressions that can use UserVars, and values from named specification sets or a currently visible local specification set.","Dps pin resources have special parameters PRE_WAIT and POST_WAIT. The PRE_WAIT parameter specifies the time that needs to elapse from the time the power pin has reached its destination voltage to the time pattern generation can start. The POST_WAIT parameter specifies the time that needs to elapse from the time pattern generation has stopped to the time the power pin shuts off.","Dps pins also specify how the voltage parameter reaches its final value. They could specify it simply by an equation, as all other pin parameters. In that case the value will be reached as the hardware allows it. They could also specify it using a Slew statement. A Slew statement specifies that the power supply voltage reaches its final value from the initial value in a ramp with a specified absolute Voltage Slew Rate.","C++ for Levels","With above rules, a C++ Levels object can be written that supports the following operations:","There is an operation",{"@attributes":{"id":"p-0222","num":"0000"},"ul":{"@attributes":{"id":"ul0054","list-style":"none"},"li":{"@attributes":{"id":"ul0054-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0055","list-style":"none"},"li":"Status setParameter(const String& pinOrPinGroupName, const String& parameterName, ElementaryType elementaryType, const Expression& Expression);"}}}},"This operation binds an expression to a parameter of a pin or a pin group. For instance, the dpin.InPins VIH value is set by:\n\n","This operation will be called several times for all the declarations in the Levels object.","There is an operation",{"@attributes":{"id":"p-0225","num":"0000"},"ul":{"@attributes":{"id":"ul0058","list-style":"none"},"li":{"@attributes":{"id":"ul0058-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0059","list-style":"none"},"li":["Status as signLevels(const String& selector);","which will go through and issue all the pre-determined module level interfaces to assign all the levels of parameters in specification order, as described earlier. The selector parameter is used to resolve names in the expressions according to the rules specified earlier.\n\nTest Condition Groups\n"]}}}},"The Test Condition Group Sub-language packages together the description of specifications, timings and levels. Timing objects are often specified using parameters. Parameters can be used in timings to specify leading and trailing edges of various pulses. Likewise, Levels can be parameterized by specifying maximum, minimum and typical values of various voltage levels. A Test Condition Group (TCG) object lumps together the specifications and the instantiation of Timings and Levels based on these specifications.","A TestConditionGroup declaration contains an optional SpecificationSet. The SpecificationSet declaration may be an inlined (and unnamed) local SpecificationSet, or it may be a reference to a named SpecificationSet declared elsewhere. The optional SpecificationSet declaration in a TCG declaration is followed by at least one Levels or Timings declaration. It can have both Levels and a Timings, in any order. However, it is disallowed from having more than one Levels and Timings declaration. These restrictions are syntactically enforced.","A specification set declaration in a TCG is identical to the specification set declared separately, except that it does not have a name. Its name is implicitly the name of the enclosing TCG. The Timings declaration comprises a single declaration of a Timings object from a specified timings file. Here is an example of a file with a test condition group:",{"@attributes":{"id":"p-0229","num":"0344"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"# File myTestConditionGroups.tcg"]},{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"Version 0.1;"]},{"entry":[{},"Import pentiumlevels.lvl;"]},{"entry":[{},"Import edges.spec;"]},{"entry":[{},"Import timing1.tim;"]},{"entry":[{},"Import timing2.tim;"]},{"entry":[{},"TestConditionGroup TCG1"]},{"entry":[{},"{"]},{"entry":[{},"\u2003# This Local SpecificationSet uses user-defined selectors"]},{"entry":[{},"\u2003# \u201cmin\u201d, \u201cmax\u201d and \u201ctyp\u201d. Any number of selectors with any"]},{"entry":[{},"\u2003# user defined names is allowed."]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003# The specification set specifies a table giving values for"]},{"entry":[{},"\u2003# variables that can be used in expressions to initialize"]},{"entry":[{},"\u2003# timings and levels. The specification set below defines"]},{"entry":[{},"\u2003# values for variables as per the following table:"]},{"entry":[{},"\u2003# \u2003\u2003min \u2003\u2003max \u2003\u2003typ"]},{"entry":[{},"\u2003#\u2003v_cc 2.9 3.1 3.0"]},{"entry":[{},"\u2003#\u2003v_ih vInHigh + 0.0 vInHigh + 0.2 vInHigh + 0.1"]},{"entry":[{},"\u2003#\u2003v_il vInLow + 0.0 vInLow + 0.2 vInLow + 0.1"]},{"entry":[{},"\u2003# ..."]},{"entry":[{},"\u2003# A reference such as \u201cvInHigh\u201d must be previously defined"]},{"entry":[{},"\u2003# in a block of UserVars."]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003# Thus, if the \u201cmax\u201d selector was selected in a functional"]},{"entry":[{},"\u2003# test, then the \u201cmax\u201d column of values would be bound to"]},{"entry":[{},"\u2003# the variables, setting v_cc to 3.1, v_ih to vInHigh+2.0"]},{"entry":[{},"\u2003# and so on."]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003# Note that this is a local specification set, and has no"]},{"entry":[{},"\u2003# name."]},{"entry":[{},"\u2003SpecificationSet(min, max, typ)"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003\u2002# Minimum, Maximum and Typical specifications for"]},{"entry":[{},"\u2003\u2003\u2002# voltages."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u2002Voltage v_cc =","2.9, 3.1, 3.0;"]},{"entry":[{},"\u2003\u2003\u2002Voltage v_ih =","vInHigh + 0.0,"]},{"entry":[{},{},"vInHigh + 0.2,"]},{"entry":[{},{},"vInHigh + 0.1;"]},{"entry":[{},"\u2003\u2003\u2002Voltage v_il =","vInLow + 0.0,"]},{"entry":[{},{},"vInLow + 0.2,"]},{"entry":[{},{},"vInLow + 0.1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003# Minimum, Maximum and Typical specifications for"]},{"entry":[{},"\u2003\u2003# leading and trailing timing edges. The base"]},{"entry":[{},"\u2003\u2003# value of 1.0E\u22126 uS corresponds to 1 picosecond,"]},{"entry":[{},"\u2003\u2003# and is given as an example of using scientific"]},{"entry":[{},"\u2003\u2003# notation for numbers along with units."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003Time t_le =","1.0E\u22126 uS,"]},{"entry":[{},{},"1.0E\u22126 uS + 4.0 * DeltaT,"]},{"entry":[{},{},"1.0E\u22126 uS + 2.0 * DeltaT;"]},{"entry":[{},"\u2003\u2003Time t_te =","30ns,"]},{"entry":[{},{},"30ns + 4.0 * DeltaT,"]},{"entry":[{},{},"30ns + 2.0 * DeltaT;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# Refers to the Pentium3Levels imported earlier. It"]},{"entry":[{},"\u2003# is one of possibly many levels objects that have been"]},{"entry":[{},"\u2003# imported from the above file."]},{"entry":[{},"\u2003Levels Pentium3 Levels;"]},{"entry":[{},"\u2003# Refers to file timing1.tim containing the single"]},{"entry":[{},"\u2003# timing Timing1. The filename should be quoted if"]},{"entry":[{},"\u2003# it has whitespace characters in it."]},{"entry":[{},"\u2003Timings Timing1;"]},{"entry":[{},"}"]},{"entry":[{},"# Another test condition group"]},{"entry":[{},"TestConditionGroup TCG2"]},{"entry":[{},"{"]},{"entry":[{},"\u2003# ClockAndDataEdgesSpecs is a specification set which"]},{"entry":[{},"\u2003# is available in the edges.specs file. Assume it has"]},{"entry":[{},"\u2003# the following declaration:"]},{"entry":[{},"\u2003#\u2003SpecificationSet ClockAndDataEdgesSpecs(min, max, typ)"]},{"entry":[{},"\u2003#\u2003{"]},{"entry":[{},"\u2003#\u2003\u2003Time clock_le = 10.00 uS, 10.02 uS, 10.01 uS;"]},{"entry":[{},"\u2003#\u2003\u2003Time clock_te = 20.00 uS, 20.02 uS, 20.01 uS;"]},{"entry":[{},"\u2003#\u2003\u2003Time data_le = 10.0 uS, 10.2 uS, 10.1 uS;"]},{"entry":[{},"\u2003#\u2003\u2003Time data_te = 30.0 uS, 30.2 uS, 30.1 uS;"]},{"entry":[{},"\u2003#\u2003}"]},{"entry":[{},"\u2003# A SpecificationSet reference to this named set is below:"]},{"entry":[{},"\u2003SpecificationSet ClockAndDataEdgesSpecs;"]},{"entry":[{},"\u2003# An inlined levels declaration. Since the associated"]},{"entry":[{},"\u2003# specification set (above) does not have variables such"]},{"entry":[{},"\u2003# as VInLow, VInHigh, VOutLow and VOutHigh, they must"]},{"entry":[{},"\u2003# resolve in the default UserVars collection."]},{"entry":[{},"\u2003Levels"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003\u2002InPins { VIL = VInLow; VIH = VInHigh + 1.0; }"]},{"entry":[{},"\u2003\u2003\u2002OutPins { VOL = VOutLow \/ 2.0; VOH = VOutHigh; }"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# This Timing is from the file \u201ctiming2.tim\u201d. The timings"]},{"entry":[{},"\u2003# will need the leading and trailing edge timings for clock"]},{"entry":[{},"\u2003# and data as specified in the above specification set."]},{"entry":[{},"\u2003Timings Timing2;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the above example, the test condition group TCG1 describes a specification set with three selectors named \u201cmin\u201d, \u201ctyp\u201d and \u201cmax\u201d. There can be any number of distinct selectors. Within the body of the specification set, variables v_il, v_ih, t_le and t_te are initialized with triples of values, corresponding to the selectors. So in the above example, an instance of TCG1 with the selector \u201cmin\u201d will bind the variable v_il with the first numeric value, (vInputLow+0.0). It bears repetition that the selectors for a specification set are user defined, and any number of them is allowed. The only requirement is that:","The selectors of a specification set be unique identifiers.","Each value specified in the specification set is associated with an array of values that exactly the same number of elements as the set of selectors. Picking the iselector will cause each value to be bound to the ivalue of its associated vector of values.","Subsequent to the specification set in the TCG, there could be a Levels declaration or a Timings declaration or both. The Levels declaration is used to set levels for various pin parameters. The variables identified in the specification set will be used to set these levels, permitting a dynamic binding of different actual values for pin parameters based on the selector used to initialize the TCG.","To exemplify this, consider a Test that enables the selector \u201cmin\u201d. Referring to the specification set Pentium3Levels given on page, the pin parameter \u201cVIH\u201d for pins in the InPins group will be initialized to the expression (v_ih+1.0) by the declaration:","InPins{VIL=v_il; VIH=v_ih+1.0;}","This resolves to (VInHigh+0.0+1.0) when the selector \u201cmin\u201d is enabled. Likewise, the Timings object can be initialized based on the selected values of the specification set variables. It is not necessary to have both a Timings and a Levels declaration. Either can be present by itself, or both in any order, as illustrated by the following example:",{"@attributes":{"id":"p-0237","num":"0352"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"# File LevelsOnlyAndTimingsOnly.tcg"]},{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"Version 0.1;"]},{"entry":[{},"# A Levels-only Test Condition Group."]},{"entry":[{},"TestConditionGroup LevelsOnlyTCG"]},{"entry":[{},"{"]},{"entry":[{},"\u2003SpecificationSet(Min, Max, Typ)"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003Voltage v_il = 0.0, 0.2, 0.1;"]},{"entry":[{},"\u2003\u2003Voltage v_ih = 3.9, 4.1, 4.0;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# An inlined levels declaration. Since the associated"]},{"entry":[{},"\u2003# specification set (above) does not have variables such"]},{"entry":[{},"\u2003# as VInLow, VInHigh, VOutLow and VOutHigh, they must"]},{"entry":[{},"\u2003# resolve in the default UserVars collection."]},{"entry":[{},"\u2003Levels"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003InPins { VIL = v_il; VIH = v_ih + 1.0; }"]},{"entry":[{},"\u2003\u2003OutPins { VOL = v_il \/ 2.0; VOH = v_ih; }"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":[{},"# A Timings-only Test Condition Group"]},{"entry":[{},"TestConditionGroup TimingsOnlyTCG"]},{"entry":[{},"{"]},{"entry":[{},"\u2003SpecificationSet(Min, Max, Typ)"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003Time t_le = 0.9E\u22123, 1.1E\u22123, 1.0E\u22123;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003Timings Timing2;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note, however, there should not be more than one Timings and more than one Levels in a TCG. Thus, in summary, there should be at least one of Timings or Levels, and at most one of each.","Test Conditions","A TestCondition object ties a TCG to a specific Selector. Once a TCG has been declared as shown above, it is possible to declare TestCondition objects as shown below:",{"@attributes":{"id":"p-0240","num":"0355"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TestCondition TCMin"]},{"entry":[{},"{"]},{"entry":[{},"\u2003TestConditionGroup = TCG1;"]},{"entry":[{},"\u2003Selector = min;"]},{"entry":[{},"}"]},{"entry":[{},"TestCondition TCTyp"]},{"entry":[{},"{"]},{"entry":[{},"\u2003TestConditionGroup = TCG1;"]},{"entry":[{},"\u2003Selector = typ;"]},{"entry":[{},"}"]},{"entry":[{},"TestCondition TCMax"]},{"entry":[{},"{"]},{"entry":[{},"\u2003TestConditionGroup = TCG1;"]},{"entry":[{},"\u2003Selector = max;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"These Test Conditions would be instantiated in a Test Plan as follows:",{"@attributes":{"id":"p-0242","num":"0357"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#"]},{"entry":[{},"# Declare a FunctionalTest \u201cMyFunctionalTest\u201d that refers to three"]},{"entry":[{},"# Test Condition Group instances."]},{"entry":[{},"#"]},{"entry":[{},"Test FunctionalTest MyFunctionalTest"]},{"entry":[{},"{"]},{"entry":[{},"\u2003# Specify the Pattern List"]},{"entry":[{},"\u2003PList = pat1Alist;"]},{"entry":[{},"\u2003# Any number of TestConditions can be specified:"]},{"entry":[{},"\u2003TestCondition = TCMin;"]},{"entry":[{},"\u2003TestCondition = TCMax;"]},{"entry":[{},"\u2003TestCondition = TCTyp;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Resolution of names in a test condition group was discussed earlier. However, these rules bear repetition, and are given below again:\n\n","Test condition groups have the following runtime semantics:","A Test (such as a FunctionalTest) will reference a TCG with a particular selector from its SpecificationSet, using an instantiated TestCondition. This selector will bind each variable in the SpecificationSet to its value associated with the chosen selector. This binding of variables to their values will then be used to determine Levels and Timings.","Parameter Levels in a TestConditionGroup are preferably set sequentially, in the order of presentation in the Levels block. So in the Pentium3Levels block, the order in which parameter levels would be set is as follows (notation: <resource-name>.<resource-parameter>):\n\n","This sequencing order enables the test writer to control the explicit power sequencing of power supplies. Furthermore, if a levels item occurs twice, naming the same pin-parameters for a pin, then that pin-parameter gets set twice. This can happen programmatically also.","If a parameter is set by a Slew statement such as","VCC=Slew(0.01, 2.0 V);","it means that VCC will reach its final value of 2.0 volts from its present value in a ramp with a Voltage Slew Rate of \u00b10.01 volts per second.","Specification set variables can also be passed into a Timings object in the TCG. The Timings object will then be initialized based on the selected variables. Such a mechanism could be used to customize a Timings object, as, for instance, by specifying leading and trailing edges of waveforms.","C++ for TCGs","With the above rules, the Test Condition Group can be declared in a C++ TestConditionGroup class, and initializing it as follows:","A call is made to the TestConditionGroup member function\n\n","A call is made to the TestConditionGroup member function\n\n","A call is made to the TestConditionGroup member function\n\n","The Bin Definitions class defines bins, a collection of counters that summarize the results of testing many DUTs. During the course of testing a DUT, the DUT can be set to any bin, e.g., to indicate the result of a particular test. As testing proceeds, the DUT may be set to another bin. The bin that the DUT is finally set to is the last such setting at the end of the test. The counter for this final bin is incremented at the end of the test of this DUT. A separate file with bin definitions should have the suffix .bdefs.","Bin definitions are preferably hierarchical. For example, at an outermost level, there may be the PassFailBins with two bins named Pass and Fail. Then there could be several HardBins, some of which map to the Pass bin, and others which map to the Fail bin. The HardBins are said to be a refinement of the PassFailBins. Finally, there could be a large number of SoftBins, a refinement of HardBins, many of which map to the same Hard bin. Below is an example illustrating the hierarchy of bins:",{"@attributes":{"id":"p-0257","num":"0384"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"# File pentiumbins.bdefs"]},{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"Version 1.2.3;"]},{"entry":[{},"BinDefs"]},{"entry":[{},"{"]},{"entry":[{},"\u2003# The HardBins are an outermost level of"]},{"entry":[{},"\u2003# bins. They are not a refinement of any other"]},{"entry":[{},"\u2003# bins."]},{"entry":[{},"\u2003BinGroup HardBins"]},{"entry":[{},"\u2003{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u201c3GHzPass\u201d:","\u201cDUTs passing 3GHz\u201d;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzPass\u201d:","\u201cDUTs passing 2.8GHz\u201d;"]},{"entry":[{},"\u2003\u2003\u201c3GHzFail\u201d:","\u201cDUTs failing 3GHz\u201d;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzFail\u201d:","\u201cDUTs failing 2.8GHz\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003LeakageFail: \u201cDUTs failing leakage\u201d;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# The SoftBins are a next level of refinement."]},{"entry":[{},"\u2003# SoftBins are a refinement of HardBins."]},{"entry":[{},"\u2003BinGroup SoftBins : HardBins"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003\u201c3GHzAllPass\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cGood DUTs at 3GHz\u201d, \u2003\u201c3GHzPass\u201d;"]},{"entry":[{},"\u2003\u2003\u201c3GHzCacheFail\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cCache Fails at 3GHz\u201d, \u201c3GHzFail\u201d;"]},{"entry":[{},"\u2003\u2003\u201c3GHzSBFTFail\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cSBFT Fails at 3GHz\u201d, \u2003\u201c3GHzFail\u201d;"]},{"entry":[{},"\u2003\u2003\u201c3GHzLeakage\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cLeakages at 3GHz\u201d, \u2003LeakageFail;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzAllPass\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cGood DUTs at 2.8GHz\u201d,\u201c2.8GHzPass\u201d;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzCacheFail\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cCache Fails at 2.8GHz\u201d,\u201c2.8GHzFail\u201d;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzSBFTFail\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cSBFT Fails at 2.8GHz\u201d, \u201c2.8GHzFail\u201d;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzLeakage\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cLeakages at 2.8GHz\u201d, \u2003LeakageFail;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the above example, the most base bins are the BinGroup HardBins. A BinGroup X is said to be a group of base bins if some other BinGroup is a refinement of X. Thus, the BinGroup HardBins is a group of base bins since the BinGroup SoftBins is a refinement of HardBins. The bins of SoftBins are referred to as leaf bins. A BinGroup Y is said to be a group of leaf bins if no other BinGroup is a refinement of Y.","The degenerate case of a BinDefs block with a single BinGroup Z in it will have Z to be a group of most base bins, as well as a group of leaf bins. BinGroup names are global in scope. There can be any number of BinDefs blocks, but the declared BinGroups must be distinct. A BinGroup from one BinDefs block is allowed to be a refinement of a BinGroup from another BinDefs block. So in the above example, SoftBins could be in a separate BinDefs block from HardBins. However, it is strongly recommended to have a single BinDefs block with all the BinGroups defined for the sake of readability.","The above hierarchy can now be extended to count how many DUTs passed and failed, by adding another BinGroup.",{"@attributes":{"id":"p-0261","num":"0388"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"# File pentiumbins.bdefs"]},{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"Version 1.2.3;"]},{"entry":[{},"BinDefs"]},{"entry":[{},"{"]},{"entry":[{},"\u2003# The PassFailBins are an outermost level of"]},{"entry":[{},"\u2003# bins. They are not a refinement of any other"]},{"entry":[{},"\u2003# bins."]},{"entry":[{},"\u2003BinGroup PassFailBins"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003Pass: \u201cCount of passing DUTS.\u201d;"]},{"entry":[{},"\u2003\u2003Fail: \u201cCount of failing DUTS.\u201d;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# The HardBins are a next level of refinement."]},{"entry":[{},"\u2003# HardBins are a refinement of the PassFailBins,"]},{"entry":[{},"\u2003# as indicated by \u201cHardBins : PassFailBins\u201d."]},{"entry":[{},"\u2003BinGroup HardBins : PassFailBins"]},{"entry":[{},"\u2003{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u201c3GHzPass\u201d:","\u201cDUTs passing 3GHz\u201d,","Pass;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzPass\u201d:","\u201cDUTs passing 2.8GHz\u201d,","Pass;"]},{"entry":[{},"\u2003\u2003\u201c3GHzFail\u201d:","\u201cDUTs failing 3GHz\u201d,","Fail;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzFail\u201d:","\u201cDUTs failing 2.8GHz\u201d,","Fail;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003LeakageFail: \u201cDUTs failing leakage\u201d, \u2002Fail;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# The SoftBins are a next level of refinement."]},{"entry":[{},"\u2003# SoftBins are a refinement of HardBins."]},{"entry":[{},"\u2003BinGroup SoftBins : HardBins"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003\u201c3GHzAllPass\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cGood DUTs at 3GHz\u201d, \u2002\u201c3GHzPass\u201d;"]},{"entry":[{},"\u2003\u2003\u201c3GHzCacheFail\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cCache Fails at 3GHz\u201d, \u201c3GHzFail\u201d;"]},{"entry":[{},"\u2003\u2003\u201c3GHzSBFTFail\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cSBFT Fails at 3GHz\u201d, \u2003\u201c3GHzFail\u201d;"]},{"entry":[{},"\u2003\u2003\u201c3GHzLeakage\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cLeakages at 3GHz\u201d, \u2003\u2003LeakageFail;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzAllPass\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cGood DUTs at 2.8GHz\u201d,\u201c2.8GHzPass\u201d;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzCacheFail\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cCache Fails at 2.8GHz\u201d,\u201c2.8GHzFail\u201d;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzSBFTFail\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cSBFT Fails at 2.8GHz\u201d, \u201c2.8GHzFail\u201d;"]},{"entry":[{},"\u2003\u2003\u201c2.8GHzLeakage\u201d:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u201cLeakages at 2.8GHz\u201d, \u2003LeakageFail;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This time, the most base bins are the BinGroup PassFailBins. They are typically not a refinement of any bins. The BinGroup HardBins are a refinement of the PassFailBins and are also base bins. SoftBins are a refinement of the HardBins, and are a group of leaf bins. The above example had only three BinGroups in the hierarchy. Below is a more complicated hierarchy:",{"@attributes":{"id":"p-0263","num":"0390"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BinDefs"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2002# A group of most base bins"]},{"entry":[{},"\u2003BinGroup A { ... }"]},{"entry":[{},"\u2003\u2002# A group of base bins that is a refinement of A"]},{"entry":[{},"\u2003BinGroup Ax : A { ... }"]},{"entry":[{},"\u2003\u2002# A group of leaf bins that is a refinement of Ax"]},{"entry":[{},"\u2003BinGroup Axx : Ax { ... }"]},{"entry":[{},"\u2003\u2002# A group of base bins that is a refinement of A"]},{"entry":[{},"\u2003BinGroup Ay : A { ...}"]},{"entry":[{},"\u2003\u2002# A group of leaf bins that is a refinement of Ay"]},{"entry":[{},"\u2003BinGroup Ayy : Ay { ... }"]},{"entry":[{},"\u2003\u2002# A group of most base bins"]},{"entry":[{},"\u2003BinGroup B { ... }"]},{"entry":[{},"\u2003\u2002# A group of leaf bins that is a refinement of B"]},{"entry":[{},"\u2003BinGroup Bx : B { ... }"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this example, Ax and Ay are refinements of A, Axx is a refinement of Ax and Ayy is a refinement of Ay. This example also provides BinGroups B and Bx where Bx is a refinement of B. The BinDefs declaration above with the BinGroups named PassFailBins, HardBins and SoftBins will be used as a continuing example in this section.","Each bin in a BinGroup has:\n\n","The two bins in PassFailBins are named \u201cPass\u201d and \u201cFail\u201d. The five bins in HardBins are named \u201c3 GHzPass\u201d, \u201c2.8 GHzPass\u201d, \u201c3 GHzFail\u201d, \u201c2.8 GHzFail\u201d, \u201cLeakageFail\u201d. Bin names may be a literal string, or an identifier. Bin names must be unique in a BinGroup, but may be duplicated across BinGroups. BinGroup names, however, are global in scope, and must be unique across a test plan.","Of the five HardBins, the bins \u201c3 GHzPass\u201d and \u201c2.8 GHzPass\u201d both map to the \u201cPass\u201d bin of the PassFailBins. The rest of the HardBins map to the \u201cFail\u201d bins of the PassFailBins.","Finally, there are eight SoftBins. The two failures at 3 GHz for SBFT (soft bin functional test) and Cache map to the \u201c3 GHzFail\u201d HardBin. Likewise the two failures at 2.8 GHz for SBFT and Cache map to the \u201c2.8 GHzFail\u201d HardBin. Both the failures due to Leakage map to the same \u201cLeakageFail\u201d HardBin, regardless of the speed at which they occurred. For example, the coarsest test (at the outermost level) is whether a DUT passes or fails a test. A refinement is, for example, whether the DUT passes or fails a test at a particular frequency, e.g., 3 GHz, etc.","Bins are assigned to DUTs in a Test Plan FlowItem, described below. A TestPlan FlowItem has a Result Clause in which the test plan describes the actions and transition to take place as the result of getting a particular result back from executing a test. It is at this point that a SetBin statement can occur:",{"@attributes":{"id":"p-0270","num":"0400"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# A FlowItem Result clause. It is described later."]},{"entry":[{},"Result 0"]},{"entry":[{},"{"]},{"entry":[{},"\u2003# Action to be taken on getting a 0 back from"]},{"entry":[{},"\u2003# executing a test."]},{"entry":[{},"\u2003# Set the bin to SoftBin.\u201c3GHZPass\u201d expressing that the"]},{"entry":[{},"\u2003# DUT was excellent."]},{"entry":[{},"\u2003SetBin SoftBins.\u201c3GHzPass\u201d;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Many SetBin statements could execute during the course of running a test on a DUT. When the test is finally completed, the runtime will increment counters for the final bin that is set for that DUT, and for all its refinements. Consider a DUT which had the following SetBin statements executed during the course of its test:\n\n","This DUT passed the 3 GHz Cache and Leakage tests, but failed the SBFT test, and so was assigned to the \u201c3 GHzSBFTFail\u201d bin. It was then tested at 2.8 GHz, and all the tests passed. So the final bin assignment is to the \u201c2.8 GHzAllPass\u201d bin, which is in the set of SoftBins. This final assignment will increment the counters of the following bins:\n\n","When the test completes, runtime will increment the counter of the final bin assignment of the DUT, and for all other bins it is a refinement of.","A SetBin statement is allowed only on a leaf bin. It is illegal to set a base bin. The counter incrementing semantics above assures that:\n\n","Thus, in the above example, only SoftBins are allowed in a SetBin statement. The counter for HardBins.\u201cLeakageFail\u201d is the sum of the counters for SoftBins.\u201c3 GHzLeakageFail\u201d and SoftBins.\u201c2.8 GHzLeakageFail\u201d. Below are some rules regarding bin definitions:\n\n","A bin Bbb has a set of bases which is the entire set of bins that Bbb is a refinement of. It is formally defined as follows:\n\n","BinGroup names are global in a TestPlan.","Bin names are local to a BinGroup.","A SetBin statement is only allowed for a leaf bin.","C++ for Bin Definitions","With above rules, an object type BinGroup can be constructed for each of the BinGroup declarations in the BinDefs declaration. The class BinGroup will have a subclass LeafBinGroup. The operations of these two classes are the same, except that BinGroup::incrementBin is a C++ protected operation, whereas LeafBinGroup::incrementBin is a C++ public operation.","The following is a default constructor which builds a BinGroup or a LeafBinGroup which is not a refinement of any other BinGroup.","Constructors:\n\n","A method\n\n","Methods to increment bin counters:\n\n","Methods to reset bin counters\n\n","Methods to get information about a bin:\n\n","Iterators will be provided to get at all the currently defined bin names.","TestPlan state will be include number of BinGroup members, one for each BinGroup declaration. The C++ for the above BinDefinitions would be as follows:",{"@attributes":{"id":"p-0289","num":"0442"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ TestPlan constructor"]},{"entry":[{},"TestPlan::TestPlan( )"]},{"entry":[{},": m_PassFailBins( ), \/\/ Default Constructor"]},{"entry":[{},"\u2002m_HardBins(&m_PassFailBins),"]},{"entry":[{},"\u2002m_SoftBins(&m_HardBins)"]},{"entry":[{},"{ }"]},{"entry":[{},"\/\/ Bin initializations"]},{"entry":[{},"m_PassFailBins.addBin(\u201cPass\u201d, \u201cCount of passing DUTS.\u201d,\u201c\u201d);"]},{"entry":[{},"m_PassFailBins.addBin(\u201cFail\u201d, \u201cCount of failing DUTS.\u201d,\u201c\u201d);"]},{"entry":[{},"m_HardBins.addBin(\u201c3GHzPass\u201d, \u201cDuts passing 3GHz\u201d, \u201cPass\u201d);"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"State for a TestPlan includes a m_pCurrentBinGroup which is initialized to the undefined BinGroup (NULL) and the m_currentBin undefined bin name (the empty string). Each time a SetBin statement is executed, the m_pCurrentBinGroup is changed to the indicated the named BinGroup and the m_currentBin to the named bin in the group by a call:",{"@attributes":{"id":"p-0291","num":"0444"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Translation of: SetBin SoftBins.\u201c3GHzAllPass\u201d;"]},{"entry":[{},"pTestPlan->setBin(\u201cSoftBins\u201d, \u201c3GHzAllPass\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"When the test plan completes execution, it will call","m_pCurrentBinGroup->incrementBin(m_currentBin);","causing this bin and all its base bins to have their counters incremented.","The BinGroup counters are reset when the test plan is elaborated, but are not reinitialized each time a test is run. The counters can be reset by an explicit call to BinGroup::resetBin.","C. The Test Plan","The test plan can be thought of as a main structure of the test program. The Test Plan can import files, as well as define similar constructs inline. Thus, it is possible to import a file given definitions of some globals, as well as declaring additional globals inline.","C1. Test Plan Flows and FlowItems","One of the critical elements of the Test Plan is the Flow. A Flow encapsulates a finite state machine. It comprises several FlowItems which run an IFlowable object and then transition to another flow item. Running an IFlowable involves running an object that implements the IFlowable interface. Typical objects that implement the IFlowable interface are Tests and Flows themselves.","Thus, a Flow has FlowItems which runs Tests and other Flows, and then transition to another FlowItem. It also provides for the opportunity to call user customized routines on various return results from running an IFlowable. Typically, a Flow thus has the following form:",{"@attributes":{"id":"p-0298","num":"0451"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#"]},{"entry":[{},"# FlowTest1 implements a finite state machine for the"]},{"entry":[{},"# Min, Typ and Max flavors of MyFunctionalTest1. On"]},{"entry":[{},"# success it tests Test1Min, Test1Typ, Test1Max"]},{"entry":[{},"# and then returns to its caller with 0 as a successful"]},{"entry":[{},"# status. On failure, it returns 1 as a failing status."]},{"entry":[{},"#"]},{"entry":[{},"# Assume that the tests MyFunctionalTest1Min, ... all"]},{"entry":[{},"# return a Result of 0 (Pass), 1 and 2 (for a couple"]},{"entry":[{},"# of levels of failure)."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#","Result 0","Result 1","Result 2"]},{"entry":[{},"#\u2003Test1Min","Test1Typ","return 1","return 1"]},{"entry":[{},"#\u2003Test1Typ","Test1Max","return 1","return 1"]},{"entry":[{},"#\u2003Test1Max","return 0","return 1","return 1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#"]},{"entry":[{},"Flow FlowTest1"]},{"entry":[{},"{"]},{"entry":[{},"\u2003FlowItem FlowTest1_Min MyFunctionalTest1Min"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003Result 0"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003Property PassFail = \u201cPass\u201d;"]},{"entry":[{},"\u2003\u2003\u2003IncrementCounters PassCount;"]},{"entry":[{},"\u2003\u2003\u2003GoTo FlowTest1_Typ;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003Result 1"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003Property PassFail = \u201cFail\u201d;"]},{"entry":[{},"\u2003\u2003\u2003IncrementCounters FailCount;"]},{"entry":[{},"\u2003\u2003\u2003Return 1;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003# This result block will be executed if"]},{"entry":[{},"\u2003\u2003# MyFunctionalTest1Min returns any of"]},{"entry":[{},"\u2003\u2003# 2, 5, 6, 7, \u22126, \u22125 or \u22124"]},{"entry":[{},"\u2003\u2003Result 2, 5:7, \u22126:\u22124"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003Property PassFail = \u201cFail\u201d;"]},{"entry":[{},"\u2003\u2003\u2003IncrementCounters FailCount;"]},{"entry":[{},"\u2003\u2003\u2003Return 1;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003FlowItem FlowTest1_Typ { ... }"]},{"entry":[{},"\u2003FlowItem FlowTest1_Max { ... }"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The operation of the Flow FlowTest1 is as follows:\n\n","Thus, FlowTest1 will, on a successful run, run a device through the minimum, typical and maximum versions of Test1, and then return. FlowTest2 will operate in a like manner.","A Flow as described above basically describes a Finite State Machine with states and transitions. The FlowItems are basically states, which will do the following:\n\n","Thus, a FlowItem has the following components:\n\n","These items are syntactically as follows in a FlowItem.",{"@attributes":{"id":"p-0304","num":"0471"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FlowItem <name> <IFlowable to be executed>"]},{"entry":[{},"{"]},{"entry":[{},"\u2003Result <one or more result values>"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003<actions for these result values>"]},{"entry":[{},"\u2003\u2003<transition for these result values>"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003Result <one or more other result values>"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003..."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The IFlowable to be executed could be either a Test, or a User-defined IFlowable, or a Flow. The actions for a result could be any of the following:","A Property Action to set string valued entities that are used by GUI tools to attribute results. This can be seen in the above FlowTest1 example with:\n\n","Properties are basically named string or integer valued entities that are associated with a Result clause. There can be any number of them, and they are preferably used by tools such as GUIs which a user would use to display information associated with this result. They have no effect on the actual result of the test, or the flow of the test.","A Counters Action to increment some number of counters. This can be seen in the above example with:\n\n","Finally, a FlowItem has a Transition which could either be a GoTo statement to transfer control to another FlowItem, or a Return statement to transfer control back to the caller (either a calling flow, or the system routine which initiated the test plan).","Predefined Flows","The typical use of Flow objects is to define a sequence of Tests. This sequence is then executed as a result of an event occurring in a Test Plan Server (TPS), i.e. the Execute Test Plan event. A test plan server on each site controller executes the user's test plan. However, Flow objects are also executed in response to other events. The name in parentheses is the name used in assigning Flows to these events.\n\n","Note that if a user defines a Flow in the user's Test Plan that is not the TestFlow or one of the other pre-defined flows, the preferred way to have it executed is to include it in the transition states of one of these pre-defined flows.","A Test Plan Example","In the example below, Flows are given along with comments that describe the finite state machine implemented by the flow. The finite state machine is given as a transition matrix. Rows of the matrix correspond to FlowItems, and columns to the result. The entries of a row of the matrix indicate the FlowItem that is transitioned to from the FlowItem of the row when the returned Result is the value specified in the column.","A Test Plan with three flows, FlowTest1, FlowTest2 and FlowMain, is shown below. FlowTest1 will operate as described above. It will run a test named MyFunctionalTest1 in each of the \u201cmin\u201d, \u201ctyp\u201d and \u201cmax\u201d configurations Likewise, FlowTest2 will run MyFunctionalTest2 in each of these configurations. Finally, FlowMain will run FlowTest1 and FlowTest2. The finite state machine transition matrix is provided in comments at the start of each of these flows.",{"@attributes":{"id":"p-0314","num":"0490"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"# ---------------------------------------------------------"},{"entry":"# File mySimpleTestPlan.tpl"},{"entry":"# ---------------------------------------------------------"},{"entry":"Version 0.1;"},{"entry":"Import xxx.pin; \u2003\u2003# Pins"},{"entry":"# Constants and variables giving limiting values."},{"entry":"Import limits.usrv;"},{"entry":"# Import test condition groups"},{"entry":"Import myTestConditionGroups.tcg;"},{"entry":"# Import some bin definitions."},{"entry":"Import bins.bdefs;"},{"entry":"#----------------------------------------------------------"},{"entry":"# Start of the test plan"},{"entry":"#----------------------------------------------------------"},{"entry":"TestPlan Sample;"},{"entry":"# This block defines Pattern Lists file-qualified names and"},{"entry":"# Pattern List variables that are used in Test declarations."},{"entry":"# Pattern list variables are deferred till customization is"},{"entry":"# examined."},{"entry":"PListDefs"},{"entry":"{"},{"entry":"\u2003# File qualified pattern list names"},{"entry":"\u2003pl1A.plist:pat1Alist,"},{"entry":"\u2003pl2A.plist:pat2AList"},{"entry":"}"},{"entry":"# The socket for the tests in this test plan (this is not imported,"},{"entry":"# but resolved at activation time):"},{"entry":"SocketDef = mytest.soc;"},{"entry":"# Declare some user variables inline"},{"entry":"UserVars"},{"entry":"{"},{"entry":"\u2003# String name for current test"},{"entry":"\u2003String CurrentTest = \u201cMyTest\u201d;"},{"entry":"}"},{"entry":"TestCondition TC1Min"},{"entry":"{"},{"entry":"\u2003TestConditionGroup = TCG1;"},{"entry":"\u2003Selector = min;"},{"entry":"}"},{"entry":"TestCondition TC1Typ"},{"entry":"{"},{"entry":"\u2003TestConditionGroup = TCG1;"},{"entry":"\u2003Selector = typ;"},{"entry":"}"},{"entry":"TestCondition TC1Max"},{"entry":"{"},{"entry":"\u2003TestConditionGroup = TCG1;"},{"entry":"\u2003Selector = max;"},{"entry":"}"},{"entry":"# Likewise for TC2Min, TC2Typ, TC2Max ..."},{"entry":"#"},{"entry":"# Declare a FunctionalTest. \u201dFunctionalTest\u201d refers to a C++"},{"entry":"# test class that runs the test, and returns a 0, 1 or 2 as"},{"entry":"# a Result. The Test Condition Group TCG1 is selected with"},{"entry":"# the \u201cmin\u201d selector by referring to the TC1Min TestCondition."},{"entry":"#"},{"entry":"Test FunctionalTest MyFunctionalTest1Min"},{"entry":"{"},{"entry":"\u2003PListParam = pat1AList;"},{"entry":"\u2003TestConditionParam = TC1Min;"},{"entry":"}"},{"entry":"# Another FunctionalTest selecting TCG1 with \u201ctyp\u201d"},{"entry":"Test FunctionalTest MyFunctionalTest1Typ"},{"entry":"{"},{"entry":"\u2003PListParam = pat1AList;"},{"entry":"\u2003TestConditionParam = TC1Typ;"},{"entry":"}"},{"entry":"# Another FunctionalTest selecting TCG1 with \u201cmax\u201d"},{"entry":"Test FunctionalTest MyFunctionalTest1Max"},{"entry":"{"},{"entry":"\u2003PListParam = pat1AList;"},{"entry":"\u2003TestConditionParam = TC1Max;"},{"entry":"}"},{"entry":"# Now select TCG2 with \u201cmin\u201d"},{"entry":"Test FunctionalTest MyFunctionalTest2Min"},{"entry":"{"},{"entry":"\u2003PListParam = pat2AList;"},{"entry":"\u2003TestConditionParam = TC2Min;"},{"entry":"}"},{"entry":"# Likewise for TCG2 with \u201ctyp\u201d and TCG2 with \u201cmax\u201d"},{"entry":"Test FunctionalTest MyFunctionalTest2Typ"},{"entry":"{"},{"entry":"\u2003PListParam = pat1AList;"},{"entry":"\u2003TestConditionParam = TC2Typ;"},{"entry":"}"},{"entry":"Test FunctionalTest MyFunctionalTest2Max"},{"entry":"{"},{"entry":"\u2003PListParam = pat1AList;"},{"entry":"\u2003TestConditionParam = TC2Max;"},{"entry":"}"},{"entry":"#"},{"entry":"# At this time the following Test objects have been defined"},{"entry":"#\u2003\u2003MyFunctionalTest1Min"},{"entry":"#\u2003\u2003MyFunctionalTest1Typ"},{"entry":"#\u2003\u2003MyFunctionalTest1Max"},{"entry":"#\u2003\u2003MyFunctionalTest2Min"},{"entry":"#\u2003\u2003MyFunctionalTest2Typ"},{"entry":"#\u2003\u2003MyFunctionalTest2Max"},{"entry":"#"},{"entry":"#"},{"entry":"# Counters are variables that are incremented during the"},{"entry":"# execution of a test. They are UnsignedIntegers that are"},{"entry":"# initialized to zero."},{"entry":"#"},{"entry":"Counters {PassCount, FailCount}"},{"entry":"#"},{"entry":"# Flows can now be presented. A Flow is an object that"},{"entry":"# essentially represents a finite state machine which"},{"entry":"# can execute \u201cFlowables\u201d, and transition to other flowables based"},{"entry":"# on the Result returned from executing a Flowable. A Flow can also"},{"entry":"# call another flow."},{"entry":"#"},{"entry":"# A Flow consists of a number of FlowItems and transitions"},{"entry":"# between them. FlowItems have names which are unique in"},{"entry":"# the enclosing Flow, execute a \u201cFlowable\u201d object, and then"},{"entry":"# transition to another FlowItem in the same enclosing Flow."},{"entry":"#"},{"entry":"# Flowable objects include Tests and other Flows. When"},{"entry":"# a Flowable object executes, it returns a numeric Result"},{"entry":"# which is used by the FlowItem to transition to another"},{"entry":"# FlowItem. As a result of this, both Tests and Flows"},{"entry":"# terminate by returning a numeric Result value."},{"entry":"#"},{"entry":"# FlowTest1 implements a finite state machine for the"},{"entry":"# Min, Typ and Max flavors of MyFunctionalTest1. On"},{"entry":"# success it tests Test1Min, Test1Typ, Test1Max"},{"entry":"# and then returns to its caller with 0 as a successful"},{"entry":"# Result. On failure, it returns 1 as a failing Result."},{"entry":"#"},{"entry":"# Assume that the tests MyFunctionalTest1Min, ... all"},{"entry":"# return a Result of 0 (Pass), 1 and 2 (for a couple"},{"entry":"# of levels of failure). The Transition Matrix of the"},{"entry":"# finite state machine implemented by FlowTest1 is:"},{"entry":"# -----------------------------------------------------------"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["#","Result 0","Result 1","Result 2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"# -----------------------------------------------------------"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#\u2003FlowTest1_Min","FlowTest1_Typ","return 1","return"]},{"entry":"1"},{"entry":["#\u2003FlowTest1_Typ","FlowTest1_Max","return 1","return"]},{"entry":"1"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#\u2003FlowTest1_Max","return 0","return 1","return 1"]},{"entry":"#"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"# where the IFlowables run by each FlowItem are:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["#\u2003\u2003FlowItem","IFlowable that is run"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#\u2003\u2003FlowTest1_Min","MyFunctionalTest1Min"]},{"entry":["#\u2003\u2003FlowTest1_Typ","MyFunctionalTest1Typ"]},{"entry":["#\u2003\u2003FlowTest1_Max","MyFunctionalTest1Max"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#"},{"entry":"Flow FlowTest1"},{"entry":"{"},{"entry":"\u2002\u2003FlowItem FlowTest1_Min MyFunctionalTest1Min"},{"entry":"\u2002\u2003{"},{"entry":"\u2002\u2003\u2003Result 0"},{"entry":"\u2002\u2003\u2003{"},{"entry":"\u2002\u2003\u2003\u2003Property PassFail = \u201cPass\u201d;"},{"entry":"\u2002\u2003\u2003\u2003IncrementCounters PassCount;"},{"entry":"\u2002\u2003\u2003\u2003GoTo FlowTest1_Typ;"},{"entry":"\u2002\u2003\u2003}"},{"entry":"\u2002\u2003\u2003Result 1,2"},{"entry":"\u2002\u2003\u2003{"},{"entry":"\u2002\u2003\u2003\u2003Property PassFail = \u201cFail\u201d;"},{"entry":"\u2002\u2003\u2003\u2003IncrementCounters FailCount;"},{"entry":"\u2002\u2003\u2003\u2003Return 1;"},{"entry":"\u2002\u2003\u2003}"},{"entry":"\u2002\u2003}"},{"entry":"\u2002\u2003FlowItem FlowTest1_Typ MyFunctionalTest1Typ"},{"entry":"\u2002\u2003{"},{"entry":"\u2002\u2003\u2003Result 0"},{"entry":"\u2002\u2003\u2003{"},{"entry":"\u2002\u2003\u2003\u2003Property PassFail = \u201cPass\u201d;"},{"entry":"\u2002\u2003\u2003\u2003IncrementCounters PassCount;"},{"entry":"\u2002\u2003\u2003\u2003GoTo FlowTest1_Max;"},{"entry":"\u2002\u2003\u2003}"},{"entry":"\u2002\u2003\u2003Result 1,2"},{"entry":"\u2002\u2003\u2003{"},{"entry":"\u2002\u2003\u2003\u2003Property PassFail = \u201cFail\u201d;"},{"entry":"\u2002\u2003\u2003\u2003IncrementCounters FailCount;"},{"entry":"\u2002\u2003\u2003\u2003Return 1;"},{"entry":"\u2002\u2003\u2003}"},{"entry":"\u2002\u2003}"},{"entry":"\u2002\u2003# Likewise for FlowTest1_Max"},{"entry":"\u2002\u2003FlowItem FlowTest1_Max MyFunctionalTest1Max"},{"entry":"\u2002\u2003{"},{"entry":"\u2002\u2003\u2003Result 0"},{"entry":"\u2002\u2003\u2003{"},{"entry":"\u2002\u2003\u2003\u2003Property PassFail = \u201cPass\u201d;"},{"entry":"\u2002\u2003\u2003\u2003IncrementCounters PassCount;"},{"entry":"\u2002\u2003\u2003\u2003Return 0;"},{"entry":"\u2002\u2003\u2003}"},{"entry":"\u2002\u2003\u2003Result 1,2"},{"entry":"\u2002\u2003\u2003{"},{"entry":"\u2002\u2003\u2003\u2003Property PassFail = \u201cFail\u201d;"},{"entry":"\u2002\u2003\u2003\u2003IncrementCounters FailCount;"},{"entry":"\u2002\u2003\u2003\u2003Return 1;"},{"entry":"\u2002\u2003\u2003}"},{"entry":"\u2002\u2003}"},{"entry":"}"},{"entry":"#"},{"entry":"# FlowTest2 is similar to FlowTest1. It implements a"},{"entry":"# finite state machine for the Min, Typ and Max flavors"},{"entry":"# of MyFunctionalTest2. On success it tests Test2Min,"},{"entry":"# Test2Typ, Test2Max and then returns to its caller with"},{"entry":"# 0 as a successful Result. On failure, it returns 1 as"},{"entry":"# a failing Result."},{"entry":"#"},{"entry":"# Assume that the tests MyFunctionalTest2Min, ... all"},{"entry":"# return a Result of 0 (Pass), 1 and 2 (for a couple"},{"entry":"# of levels of failure). The Transition Matrix of the"},{"entry":"# finite state machine implemented by FlowTest2 is:"},{"entry":"# -----------------------------------------------------------"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["#","Result 0","Result 1","Result 2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"# -----------------------------------------------------------"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#\u2003FlowTest2_Min","FlowTest2_Typ","return 1","return"]},{"entry":"1"},{"entry":["#\u2003FlowTest2_Typ","FlowTest2_Max","return 1","return"]},{"entry":"1"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#\u2003FlowTest2_Max","return 0","return 1","return 1"]},{"entry":"#"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"# Where the IFlowables run by each FlowItem are:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["#\u2003\u2003FlowItem","IFlowable that is run"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#\u2003\u2003FlowTest2_Min","MyFunctionalTest2Min"]},{"entry":["#\u2003\u2003FlowTest2_Typ","MyFunctionalTest2Typ"]},{"entry":["#\u2003\u2003FlowTest2_Max","MyFunctionalTest2Max"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#"},{"entry":"Flow FlowTest2"},{"entry":"{"},{"entry":"\u2002\u2003# ..."},{"entry":"}"},{"entry":"#"},{"entry":"# Now the FlowMain, the main test flow, can be presented. It"},{"entry":"# implements a finite state machine that calls FlowTest1"},{"entry":"# and FlowTest2 as below:"},{"entry":"# ------------------------------------"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["#","Result 0","Result 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"# ------------------------------------"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#\u2003FlowMain_1","FlowMain_2","return 1"]},{"entry":["#\u2003FlowMain_2","return 0","return 1"]},{"entry":"#"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"# Where the IFlowables run by each FlowItem are:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["#\u2003\u2003FlowItem","\u2002IFlowable that is run"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#\u2003\u2003FlowMain_1","FlowTest1"]},{"entry":["#\u2003\u2003FlowMain_2","FlowTest2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Flow FlowMain"},{"entry":"{"},{"entry":"# The first declared flow is the initial flow to be"},{"entry":"# executed. It goes to FlowMain_2 on success, and"},{"entry":"# returns 1 on failure."},{"entry":"FlowItem FlowMain_1 FlowTest1"},{"entry":"{"},{"entry":"\u2002\u2003Result 0"},{"entry":"\u2002\u2003{"},{"entry":"\u2002\u2003\u2003Property PassFail = \u201cPass\u201d;"},{"entry":"\u2002\u2003\u2003IncrementCounters PassCount;"},{"entry":"\u2002\u2003\u2003GoTo FlowMain_2;"},{"entry":"\u2002\u2003}"},{"entry":"\u2002\u2003Result 1"},{"entry":"\u2002\u2003{"},{"entry":"\u2002\u2003\u2003# Sorry ... FlowTest1 failed"},{"entry":"\u2002\u2003\u2003Property PassFail = \u201cFail\u201d;"},{"entry":"\u2002\u2003\u2003IncrementCounters FailCount;"},{"entry":"\u2002\u2003\u2003# Add to the right soft bin"},{"entry":"\u2002\u2003\u2003SetBin SoftBins.\u201c3GHzSBFTFail\u201d;"},{"entry":"\u2002\u2003\u2003Return 1;"},{"entry":"\u2002\u2003}"},{"entry":"}"},{"entry":"FlowItem FlowMain_2 FlowTest2"},{"entry":"{"},{"entry":"\u2002\u2003Result 0"},{"entry":"\u2002\u2003{"},{"entry":"\u2002\u2003\u2003# All passed!"},{"entry":"\u2002\u2003\u2003Property PassFail = \u201cPass\u201d;"},{"entry":"\u2002\u2003\u2003IncrementCounters PassCount;"},{"entry":"\u2002\u2003\u2003# Add to the right soft bin"},{"entry":"\u2002\u2003\u2003SetBin SoftBins.\u201c3GHzAllPass\u201d;"},{"entry":"\u2002\u2003\u2003Return 0;"},{"entry":"\u2002\u2003}"},{"entry":"\u2002\u2003Result 1"},{"entry":"\u2002\u2003{"},{"entry":"\u2002\u2003\u2003# FlowTest1 passed, but FlowTest2 failed"},{"entry":"\u2002\u2003\u2003Property PassFail = \u201cFail\u201d;"},{"entry":"\u2002\u2003\u2003IncrementCounters FailCount;"},{"entry":"\u2002\u2003\u2003# Add to the right soft bin"},{"entry":"\u2002\u2003\u2003SetBin SoftBins.\u201c3GHzCacheFail\u201d;"},{"entry":"\u2002\u2003\u2003Return 1;"},{"entry":"\u2002\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"TestFlow = FlowMain;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The above test plan is structured as follows in a preferred order:\n\n","With the above rules, a C++ implementation can be done for most of the elements, with the exception of the Flows themselves.","C++ for FlowItems","The C++ class to represent a FlowItem may have the following interface:","An operation\n\n","Once the FlowItem returns from the set of calls needed to execute this IFlowable, it will need to increment a list of counters depending on the Result value. To this end, the FlowItem needs to have a vector of counters that is to be incremented. This is initialized by a call:\n\n","would preferably use the above call as follows:",{"@attributes":{"id":"p-0321","num":"0511"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Somewhere earlier"]},{"entry":[{},"CounterRefList counters;"]},{"entry":[{},"..."]},{"entry":[{},"\/\/ Code for Result clause"]},{"entry":[{},"\/\/ \u2003Result 2, 3 {...}"]},{"entry":[{},"\/\/ of flowObject."]},{"entry":[{},"counters.reset( );"]},{"entry":[{},"counters.add(&A);"]},{"entry":[{},"counters.add(&B);"]},{"entry":[{},"counters.add(&C);"]},{"entry":[{},"flowObject.setCounterRefs(2, counters);"]},{"entry":[{},"flowObject.setCounterRefs(3, counters);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"A temporary CounterRefList object named counters is used. Initially counters.reset( ) is called, followed by a number of counters.add( ) calls to set up the counters list. This is then used to setup the vector of counter addresses to be updated for result values 2 and 3.","The FlowItem may then need to transition to another FlowItem on a particular result:\n\n","The FlowItem may need to return a result. This is done by:\n\n","For example, for the FlowItem FirstFlowItem in the previous example, the above would be called with the value \u201c2\u201d for \u201cresult\u201d and \u201c1\u201d for \u201creturnResult\u201d.","Finally, the FlowItem needs an operation to execute:",{"@attributes":{"id":"p-0326","num":"0000"},"ul":{"@attributes":{"id":"ul0114","list-style":"none"},"li":{"@attributes":{"id":"ul0114-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0115","list-style":"none"},"li":"Status execute(unsigned int& result, FlowItem* pNextFlowItem);"}}}},"This operation will execute the IFlowable, then update the indicated counters, and then either return a Result, or a pointer to the next FlowItem. If this pointer is NULL, then the result is the returned value.","The code that would be generated for FlowItem FlowMain1 is as follows:",{"@attributes":{"id":"p-0329","num":"0521"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FlowItem FlowMain_1;"]},{"entry":[{},"FlowItem FlowMain_2;"]},{"entry":[{},"CounterRefList counters;"]},{"entry":[{},"FlowMain_1.setFlowable(FlowTest1);"]},{"entry":[{},"\/\/ Result 0"]},{"entry":[{},"counters.reset( );"]},{"entry":[{},"counters.add(&PassCount);"]},{"entry":[{},"FlowMain_1.setCounterRefs(0, counters);"]},{"entry":[{},"FlowMain_1.setTransition(0, &FlowMain_2);"]},{"entry":[{},"\/\/ Result 1"]},{"entry":[{},"counters.reset( );"]},{"entry":[{},"counters.add(&FailCount);"]},{"entry":[{},"FlowMain_1.setCounterRefs(1, counters);"]},{"entry":[{},"\/\/ The following call from ITestPlan will set the"]},{"entry":[{},"\/\/ current bin group and bin name."]},{"entry":[{},"pTestPlan->setBin(\u201cSoftBins\u201d, \u201c3GHzSBFTFail\u201d);"]},{"entry":[{},"FlowMain_1.setReturnResult(1, 1);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The code generated above sets up FlowMain1 to run the IFlowable \u201cFlowTest1\u201d, and then sets it up to increment the appropriate list of counters for each result, and finally to take the necessary actions. The necessary action in the case of result \u201c0\u201d is a transition to FlowMain1, and in the case of result \u201c1\u201d is a return.","C2. Counter Support in a TestPlan","Counters are variables that are initialized to zero, and can be incremented by an IncrementCounter statement at various points during a test run. They are different from Bins, which are incremented only at the end of the test. Furthermore, bins are hierarchical while counters are simple variables. Thus, counters are a much simpler and more limited facility than bins.","Counters can be supported in a TestPlan via a member of a Counters class that maintains a set of named counters which are unsigned integers. Objects will be defined in this class via a Counters declaration. Counters will not be automatically reset when a test starts, thus allowing a TestPlan to gather counts over testing many DUTs. Methods will be provided to reset, increment and query the value of a counter. This enables an alternative to binning in order to determine counts as a result of running a test.","The TestPlan preferably contains a member variable, m_modifiedCounters, which is the set of counters modified by running the test on a DUT. This set is initialized to the empty set at the start of the test. At each place an","IncrementCounters call is made, code will be generated to add the named counters to the m_modifiedCounters member. Thus, this member gathers together all the counters that were modified during the execution of a test on a DUT.","C++ for the Flow Object","Once all the FlowItems have been created, the Flow object can be created as a C++ object as shown below:","An operation to add a FlowItem\n\n","which will add the indicated FlowItem to the Flow. The boolean is set to True if this is the initial FlowItem of the Flow.","An operation to execute the Flow\n\n","This will preferably return when the Flow returns, with the result of executing the flow. The action of this is to start executing the flow with the initial FlowItem. It will keep executing FlowItems as long as the current FlowItem returns a next FlowItem to execute. When the current FlowItem returns a Result, then this operation completes with that Result.","Hence, the C++ code generated for a Flow has several repeated calls to addFlowItem( ) in order to add FlowItems to the Flow. The executeFlow( ) operation will occur when this Flow in the Test Plan is selected for execution.","C3. Test Classes","In general majority of the program code is data for device test, and the rest is the code of test program, which realizes the test methodology. This data is DUT-dependent (e.g., power supply conditions, signal voltage conditions, timing conditions, etc.). The test code consists of methods to load the specified device conditions on to ATE hardware, and also those needed to realize the user specified objectives (such datalogging, etc).","As explained above, to increase the reusability of test code, such code should be independent of any device-specific data (e.g., pin name, stimulus data, etc.), or device-test-specific data (e.g., conditions for DC units, measurement pins, number of target pins, name of pattern file, addresses of pattern programs, etc.). If code for a test is compiled with data of these types, the reusability of the test code would decrease. Therefore, any device-specific data or device-test-specific data should be made available to the test code externally, as inputs during code execution time.","In the open architecture test system, a Test Class, which is an implementation of the ITest interface, realizes the separation of test data and code (and hence, the reusability of code) for a particular type of test. Such a test class could be regarded as a \u201ctemplate\u201d for separate instances of it, which differ from each other only on the basis of device-specific and\/or device-test-specific data. Test classes are specified in the test plan file. Each Test class typically implements a specific type of device test or setup for device test. For example, Functional, AC and DC Parametric tests are preferably implemented by separate Test classes. However, custom test classes can also be used in test plans.","Test classes allow the user to configure class behavior by providing parameters that are used to specify the options for a particular instance of that test. For example, a Functional Test will take parameters PList and TestConditions, to specify the Pattern List to execute, and the Level and Timing conditions for the test, respectively. Specifying different values for these parameters (through the use of different \u201cTest\u201d blocks in the test plan description file) allows the user to create different instances of a Functional Test.  shows how different test instances  would be derived from a single test class .","These classes should be designed to allow the compiler  to take the description of the tests and their parameters from the test plan file and generate correct C++ code, which can be compiled and linked to generate the test program. Test class instances may be added to objects describing test flow to create a complex execution sequence of device tests.","C4. Derivation from ITest and IFlowable","As mentioned above, Test classes derive from ITest. With the above rules, these can be implemented in C++ classes that implement the ITest interface. In addition to the methods specified for the ITest interface, these classes provide the Test-specific intelligence and logic required to perform specific classes of device test. Test classes also implement the IFlowable interface. As a consequence of this, instances of Test classes can be used in FlowItems to run tests.","Customization","Customization mechanisms are provided to allow users to call C functions, and develop their own classes implementing the ITest and IFlowable interfaces.","Introspection Capability","If an object of a Test class could be interrogated regarding its methods and signatures, then it could be verified that the appropriate parameters are available for inclusion in the generated source code. Such a feature would be very useful for error checking and validation during the translation phase. If the test engineer made a mistake in the names of parameters, or the number (or possibly the types) of arguments to these parameters, the translation phase could catch it and provide a meaningful error message at translation time instead of waiting for a compile-time error message from the C++ compiler. This would be more useful to the test engineer.","Introspection refers to the ability to ask an object to look within itself and return information regarding its attributes and methods. Some languages, such as Java, provide this ability as a part of the language. Other languages, such as Visual Basic, impose such a requirement on objects intended to be used with it. C++ makes no provisions for this feature.","This method also lends well to providing for default parameter values, as well as indications of optional parameters. In addition, if this capability is provided as a part of the implementation of all Test classes, then GUI applications could also use this information to dynamically build up dialogs and other user interface elements to help engineers make effective use of these classes.","These complexities are offset in an embodiment of the invention through a mechanism that provides, in lieu of full introspection, a method that allows the Test class developer to fully specify, in a single text-based source file (per Test class), the public methods\/attributes of the Test class that the developer has designated as the ones required to parameterize the class.","A single source is preferred: one would not want to have the description of the parameterization interface of a Test class in one file, and the C++ interface description in another independent (header) file, and then be burdened with the need to keep both sources synchronized. Towards this end, the \u201ctext-based\u201d description is embedded in a pre-header file for the Test class, which is used by the compiler for limited introspection, as well for generating the C++ header for the Test class. The generated C++ header file is the one used to finally compile the Test class C++ code.","The Pre-Headers","The use of headers in C++ is well known. Because C++ is difficult to parse and read, however, an embodiment of the invention defines a syntax allowing the compiler to create a C++ output which can be used as a header by a test class developer. According to this embodiment, the test class developer writes a pre-header, which is output by the compiler  as a header file, allowing visibility into the corresponding test classes or other test entities.","The following example illustrates the concept of the pre-header file for a Test class in accordance with the preferred embodiment of the present invention. Consider the following excerpt from a source file, with a test FuncTest1:",{"@attributes":{"id":"p-0355","num":"0549"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"...",{}]},{"entry":[{},{"b":"TestCondition "}]},{"entry":[{},"{"]},{"entry":[{},"\u2003= TCG1;","# Previously defined TCG for"]},{"entry":[{},"Levels"]},{"entry":[{},"\u2003= min;"]},{"entry":[{},"}"]},{"entry":[{},{"b":"TestCondition "}]},{"entry":[{},"{"]},{"entry":[{},"\u2003= TCG2;","# Previously defined TCG for"]},{"entry":[{},"Timing"]},{"entry":[{},"\u2003= min;"]},{"entry":[{},"}"]},{"entry":[{},"..."]},{"entry":[{},{"b":"Test "}]},{"entry":[{},"{"]},{"entry":[{},"\u2003PListParam = patList1;","# Previously defined pattern list"]},{"entry":[{},"\u2003TestConditionParam = TC1;"]},{"entry":[{},"\u2003TestConditionParam = TC2;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The compiler needs to know what a FunctionalTest entails in order to determine whether the declaration of FuncTest1 above is legal. Rather than building in the knowledge of a FunctionalTest into the compiler, the definition of what a FunctionalTest entails can be specified in the Pre-Header.","Assume that FunctionalTest is a C++ class having base classes Test1 and Test2, and having members which are a PList, and an array of TestConditions. The compiler needs to know about the types of the members of FunctionalTest in order to recognize that the above declaration of FuncTest1 is legal.","Furthermore, in order to generate a C++ object declaration for FuncTest1, a C++ header for the class FunctionalTest needs to be constructed. This requires compiler to also know about the base classes of the FunctionalTest class, the names of its members and other such information.","The pre-header sub-language of an embodiment of the invention provides the compiler with the information it needs to both recognize the legality of declarations, and to generate C++ headers and object declarations that correspond to declaration.","Note that a FunctionalTest is a simple type (as far as parameterization is concerned), and thus, would use quite a simple description for parameterization. One could thus write a pre-header, FunctionalTest.ph, that supports the above parameterization as follows (assume that pre-headers are available for the base test classes Test1 and Test2):",{"@attributes":{"id":"p-0361","num":"0555"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1",{"b":"Version "}]},{"entry":["2","#"]},{"entry":["3","# Parameterization specification pre-header for FunctionalTest"]},{"entry":["4","#"]},{"entry":["5",{"b":"Import "}]},{"entry":["6",{"b":"Import "}]},{"entry":["7",{"b":"TestClass "}]},{"entry":["8",{"b":"PublicBases "}]},{"entry":["9","# The parameters list or \u201cparameter block\u201d:"]},{"entry":["10",{"b":"Parameters"}]},{"entry":["11","{"]},{"entry":["12","\u2003# The following declaration specifies that a FunctionalTest has"]},{"entry":["13","\u2003#\u2002 - a parameter of type PList"]},{"entry":["14","\u2003#\u2002 - [represented by C++ type Tester::PatternTree]"]},{"entry":["15","\u2003#\u2002 - stored in a member named m_pPatList"]},{"entry":["16","\u2003#\u2002 - a function to set it named setPatternTree."]},{"entry":["17","\u2003#\u2002 - a parameter description for the GUI to use as a tool tip"]},{"entry":["18","\u2003PListParam"]},{"entry":["19","\u2003{"]},{"entry":["20","\u2003\u2003= 1;"]},{"entry":["21","\u2003\u2003= m_pPatList;"]},{"entry":["22","\u2003\u2003= setPatternTree;"]},{"entry":["23","\u2003\u2003= \u201cThe PList parameter for a FunctionalTest\u201d;"]},{"entry":["24","\u2003}"]},{"entry":["25","\u2003#"]},{"entry":["26","\u2003# The following declaration specifies that a FunctionalTest has"]},{"entry":["27","\u2003#\u2002 - 1 or more parameters of type TestCondition"]},{"entry":["28","\u2003#\u2002 - [represented by C++ type Tester::TestCondition]"]},{"entry":["29","\u2003#\u2002 - stored in a member named m_testCondnsArray"]},{"entry":["30","\u2003#\u2002 - a function to set it named addTestCondition."]},{"entry":["31","\u2003#\u2002 - a parameter description for the GUI to use as a tool tip"]},{"entry":["32","\u2003# The [implement] clause causes the translation phase of to"]},{"entry":["33","\u2003# generate a default implementation of this function."]},{"entry":["34","\u2003#"]},{"entry":["35","\u2003TestConditionParam"]},{"entry":["36","\u2003{"]},{"entry":["37","\u2003\u2003= 1\u2212n;"]},{"entry":["38","\u2003\u2003= m_testCondnsArray;"]},{"entry":["39","\u2003\u2003= addTestCondition [Implement];"]},{"entry":["40","\u2003\u2003= \u201cThe TestCondition parameter for a"]},{"entry":[{},"FunctionalTest\u201d;"]},{"entry":["41","\u2003}"]},{"entry":["42","}"]},{"entry":["43","#"]},{"entry":["44","# The section below is part of the Pre-Header which is an escape"]},{"entry":["45","# into C++ code. This will be referred to as a \u201ctemplate block.\u201d"]},{"entry":["46","#"]},{"entry":["47","# Everything in this section will be reproduced verbatim in the"]},{"entry":["48","# generated header file, except for \u201c$Class\u201d, \u201c$Inc\u201d,"]},{"entry":["49","# \u201c$ParamAryTypes\u201d, \u201c$ParamAttrs\u201d, \u201c$ParamFns\u201d and"]},{"entry":[{},"\u201c$ParamImpls\u201d."]},{"entry":["50","#"]},{"entry":["51","# Note that no comments beginning with the \u2018#\u2019 character are"]},{"entry":[{},"supported"]},{"entry":["52","# within the following section."]},{"entry":["53","#"]},{"entry":["54","CPlusPlusBegin"]},{"entry":["55",{"b":"$Inc"}]},{"entry":["56","namespace"]},{"entry":["57","{"]},{"entry":["58","class "]},{"entry":["59","{"]},{"entry":["60","\/\/ Array types for parameters storage:"]},{"entry":["61",{"b":"$ParamAryTypes"}]},{"entry":["62","public:"]},{"entry":["63","\u2003virtual void preExec( );"]},{"entry":["64","\u2003virtual void exec( );"]},{"entry":["65","\u2003virtual void postExec( );"]},{"entry":["66","\u2003"]},{"entry":["67","\u2003..."]},{"entry":["68","private:"]},{"entry":["69","\u2003double m_someVar;"]},{"entry":["70","\u2003"]},{"entry":["71","\u2003..."]},{"entry":["72","};"]},{"entry":["73","..."]},{"entry":["74",{"b":"$ParamImpls"}]},{"entry":["75","} \/\/ End namespace"]},{"entry":["76","CPlusPlusEnd"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"As the compiler processes a pre-header file, it builds up the values of the compiler variables such as $Inc, $Class, $ParamAryTypes and others. This enables it to then create the following C++ header by generating the C++ code above verbatim, and expanding in the values of the compiler variables $Inc, $Class, etc. at the indicated places. For FunctionalTest.ph, it creates the following C++ header file FunctionalTest.h for the FunctionalTest class.",{"@attributes":{"id":"p-0363","num":"0557"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","#line 7 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"2","#include <ITest.h>"]},{"entry":[{},"3","#line 5 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"4","#include <Test1.h>"]},{"entry":[{},"5","#line 6 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"6","#include <Test2.h>"]},{"entry":[{},"7","#line 55 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"8","#include <vector>"]},{"entry":[{},"9","#line 55 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"10","#include <Levels.h>"]},{"entry":[{},"11","#line 55 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"12","#include <TestCondnGrp.h>"]},{"entry":[{},"13","..."]},{"entry":[{},"14","#line 56 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"15","namespace"]},{"entry":[{},"16","{"]},{"entry":[{},"17","#line 7 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"18","class FunctionalTest : public ITest,"]},{"entry":[{},"19","#line 8 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"20","\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003public Test1,"]},{"entry":[{},"21","#line 8 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"22","\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003public Test2"]},{"entry":[{},"23","#line 59 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"24","{"]},{"entry":[{},"25","\/\/ Array types for parameters storage:"]},{"entry":[{},"26","#line 61 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"27","public:"]},{"entry":[{},"28","#line 37 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"29","\u2003\u2003"]},{"entry":[{},{},{"b":["TestConditionPtrsAry","t;"]}]},{"entry":[{},"30","#line 62 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"31","public:"]},{"entry":[{},"32","\u2003\u2003virtual void preExec( );"]},{"entry":[{},"33","\u2003\u2003virtual void exec( );"]},{"entry":[{},"34","\u2003\u2003virtual void postExec( );"]},{"entry":[{},"35","public:"]},{"entry":[{},"36","#line 7 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"37","\u2003\u2003# Automatic for all tests"]},{"entry":[{},"38","#line 22 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"39","\u2003\u2003"]},{"entry":[{},"40","#line 23 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"41","\u2003\u2003"]},{"entry":[{},"42","#line 39 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"43","\u2003\u2003"]},{"entry":[{},"44","#line 40 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"45","\u2003\u2003"]},{"entry":[{},"46","#line 67 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"47","\u2003\u2003..."]},{"entry":[{},"48","private:"]},{"entry":[{},"49","\u2003\u2003double m_"]},{"entry":[{},"50","#line 70 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"51","private:"]},{"entry":[{},"52","#line 7 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"53","\u2003\u2003_# Automatic for all tests"]},{"entry":[{},"54","#line 21 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"55","\u2003\u2003_pPatList;"]},{"entry":[{},"56","#line 38 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"57","\u2003\u2003_t m_testCondnsArray;"]},{"entry":[{},"58","#line 71 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"59","\u2003\u2003..."]},{"entry":[{},"60","};"]},{"entry":[{},"61","..."]},{"entry":[{},"62","#line 7 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"63",{"b":"inline void"}]},{"entry":[{},"64","#line 7 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"65",{"b":"FunctionalTest::setName(OFCString &name)"}]},{"entry":[{},"66","#line 74 \u2033.\/FunctionalTest.h\u2033"]},{"entry":[{},"67",{"b":"{"}]},{"entry":[{},"68","\u2003\u2003_"]},{"entry":[{},"69","\u2003\u2003"]},{"entry":[{},"70",{"b":"}"}]},{"entry":[{},"71","#line 39 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"72",{"b":"inline void"}]},{"entry":[{},"73","#line 39 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"74",{"b":"FunctionalTest::addTestCondition(TestCondition *arg)"}]},{"entry":[{},"75","#line 74 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"76",{"b":"{"}]},{"entry":[{},"77","\u2003\u2003__"]},{"entry":[{},"78","\u2003\u2003"]},{"entry":[{},"79",{"b":"}"}]},{"entry":[{},"80","#line 23 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"81",{"b":"inline void"}]},{"entry":[{},"82",{"b":"Tester::String FunctionalTest::getPListParamDescription( )"}]},{"entry":[{},"83",{"b":"{"}]},{"entry":[{},"84","\u2003"]},{"entry":[{},"85",{"b":"}"}]},{"entry":[{},"86","#line 40 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"87",{"b":"inline void"}]},{"entry":[{},"88",{"b":"Tester::String"}]},{"entry":[{},{},{"b":"FunctionalTest::getTestConditionParamDescription( )"}]},{"entry":[{},"89",{"b":"{"}]},{"entry":[{},"90","\u2003"]},{"entry":[{},"91",{"b":"}"}]},{"entry":[{},"92","#line 75 \u2033.\/FunctionalTest.ph\u2033"]},{"entry":[{},"93","} \/\/ End namespace"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"As described earlier, this pre-header enables the compiler to check the validity of a FunctionalTest declaration, to generate code for it, and to generate a C++ header that would be needed by it.","As an example, consider the FunctionalTest declaration given earlier, reproduced below for convenience:",{"@attributes":{"id":"p-0366","num":"0560"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"b":"Test "},{}]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2002PListParam = patList1;","# Previously defined pattern list"]},{"entry":[{},"\u2003\u2002TestConditionParam = TC1;"]},{"entry":[{},"\u2003\u2002TestConditionParam = TC2;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The C++ header that would be generated for this by the compiler is given above. The compiler would generate the following code for the above FunctionalTest construct:",{"@attributes":{"id":"p-0368","num":"0562"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FunctionalTest FuncTest1;"]},{"entry":[{},"FuncTest1.setName(\u201dFuncTest1\u201d);"]},{"entry":[{},"FuncTest1.setPatternTree(&patList1);"]},{"entry":[{},"FuncTest1.addTestCondition(&TC1);"]},{"entry":[{},"FuncTest1.addTestCondition(&TC2);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notice also the name that is generated for the Description function. Each parameter named Xxx is associated with a member function:\n\n","The pre-header supports some other user defined enumerations as an additional type. This allows the GUI to provide a drop down list of possible choices that could be used for setting the value of a particular parameter. Furthermore, the pre-header provides a feature to associate a number of parameters that can be thought of as a table. For example, it may be convenient to implement an array of \u201cproperties\u201d as an associated set of an array of strings for the names, and an array of integers for the values. One easy way of implementing this feature is to use an array of custom types (discussed later). However, that requires the user to write a custom type pre-header to use. Both of these features are illustrated in the following example:",{"@attributes":{"id":"p-0371","num":"0566"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"# File FooBarTest.ph"]},{"entry":[{},"#"]},{"entry":[{},"# Parameterization specification pre-header for"]},{"entry":[{},"# custom test class FoobarTest"]},{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},{"b":"Version "}]},{"entry":[{},{"b":"Import "}]},{"entry":[{},{"b":"TestClass "}]},{"entry":[{},{"b":"PublicBases "}]},{"entry":[{},"# The parameters list:"]},{"entry":[{},{"b":"Parameters"}]},{"entry":[{},"{"]},{"entry":[{},"\u2003# An enumerated type"]},{"entry":[{},"\u2003WishyWashy = Yes, Perhaps, Possibly, Maybe, MaybeNot,"]},{"entry":[{},"No;"]},{"entry":[{},"\u2003# Define a WishyWashy parameter."]},{"entry":[{},"\u2003WishyWashy WW"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003= 1;"]},{"entry":[{},"\u2003\u2003= m_"]},{"entry":[{},"\u2003\u2003= setWw;"]},{"entry":[{},"\u2003\u2003= \u201cThe WW parameter for a Foobar Test\u201d;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# This class has an array of name-number pairs that is"]},{"entry":[{},"\u2003# interpreted in the class."]},{"entry":[{},"\u2003"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003= 0-n;"]},{"entry":[{},"\u2003\u2003# The Name field in this array is:"]},{"entry":[{},"\u2003\u2003#\u2002 - of type String"]},{"entry":[{},"\u2003\u2003#\u2002 - [represented by C++ type Tester::String]"]},{"entry":[{},"\u2003\u2003#\u2002 - stored in a member named m_NameArray"]},{"entry":[{},"\u2003\u2003#\u2002 - a function to set it named addName."]},{"entry":[{},"\u2003\u2003#\u2002 - a parameter description for the GUI to use as a tool tip"]},{"entry":[{},"\u2003\u2003"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003= m_NameArray;"]},{"entry":[{},"\u2003\u2003\u2003= addName;"]},{"entry":[{},"\u2003\u2003\u2003= \u201cA Name with a Value\u201d;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003# The Number field in this array is:"]},{"entry":[{},"\u2003\u2003#\u2002 - of type Integer"]},{"entry":[{},"\u2003\u2003#\u2002 - [represented by C++ type int]"]},{"entry":[{},"\u2003\u2003#\u2002 - stored in a member named m_NumberArray"]},{"entry":[{},"\u2003\u2003#\u2002 - a function to set it named addNumber."]},{"entry":[{},"\u2003\u2003#\u2002 - a parameter description for the GUI to use as a tool tip"]},{"entry":[{},"\u2003\u2003"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003= m_NumberArray;"]},{"entry":[{},"\u2003\u2003\u2003= addNumber;"]},{"entry":[{},"\u2003\u2003\u2003= \u201cThe value of the Name\u201d;"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# The following declaration specifies that a FunctionalTest has"]},{"entry":[{},"\u2003#\u2002 - a parameter of type PList"]},{"entry":[{},"\u2003#\u2002 - [represented by C++ type Tester::PatternTree]"]},{"entry":[{},"\u2003#\u2002 - stored in a member named m_pPatList"]},{"entry":[{},"\u2003#\u2002 - a function to set it named setPatternTree."]},{"entry":[{},"\u2003#\u2002 - a parameter description for the GUI to use as a tool tip"]},{"entry":[{},"\u2003PListParam"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003= 1;"]},{"entry":[{},"\u2003\u2003= m_pPatList;"]},{"entry":[{},"\u2003\u2003= setPatternTree;"]},{"entry":[{},"\u2003\u2003= \u201cThe PList parameter for a FunctionalTest\u201d;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003# The following declaration specifies that a FunctionalTest has"]},{"entry":[{},"\u2003#\u2002 - 1 or more parameters of type TestCondition"]},{"entry":[{},"\u2003#\u2002 - [represented by C++ type Tester::TestCondition]"]},{"entry":[{},"\u2003#\u2002 - stored in a member named m_testCondnsArray"]},{"entry":[{},"\u2003#\u2002 - a function to set it named addTestCondition."]},{"entry":[{},"\u2003# The [implement] clause causes the translation phase of to"]},{"entry":[{},"\u2003# generate a default implementation of this function."]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003TestConditionParam"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003= 1-n;"]},{"entry":[{},"\u2003\u2003= m_testCondnsArray;"]},{"entry":[{},"\u2003\u2003= addTestCondition [Implement];"]},{"entry":[{},"\u2003\u2003= \u201cThe TestCondition parameter for a"]},{"entry":[{},"\u2002FunctionalTest\u201d;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2002}"]},{"entry":[{},"CPlusPlusBegin"]},{"entry":[{},{"b":"$Inc"}]},{"entry":[{},"namespace"]},{"entry":[{},"{"]},{"entry":[{},"class "]},{"entry":[{},"{"]},{"entry":[{},"\/\/ Array types for parameters storage:"]},{"entry":[{},{"b":"$ParamAryTypes"}]},{"entry":[{},"public:"]},{"entry":[{},"\u2003virtual void preExec( );"]},{"entry":[{},"\u2003virtual void exec( );"]},{"entry":[{},"\u2003virtual void postExec( );"]},{"entry":[{},"\u2003"]},{"entry":[{},"\u2003\/\/ ..."]},{"entry":[{},"private:"]},{"entry":[{},"\u2003double m_someVar;"]},{"entry":[{},"\u2003"]},{"entry":[{},"\u2003\/\/ ..."]},{"entry":[{},"};"]},{"entry":[{},"\/\/ ..."]},{"entry":[{},{"b":"$ParamImpls"}]},{"entry":[{},"} \/\/ End namespace"]},{"entry":[{},"CPlusPlusEnd"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"It must be noted that a custom type name-number pairs could have been declared, and a single array parameter of that custom type could have been used to have the same effect as the above ParamGroup of parameters. The technique presented above is a convenience that avoids the necessity of declaring a custom type.","C5. Custom Function Declarations","This allows the user to call custom functions when a flow transition takes place. Custom functions are declared through pre-header as follows:",{"@attributes":{"id":"p-0374","num":"0569"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"# File MyFunctions.ph"]},{"entry":[{},"#"]},{"entry":[{},"# \u2002Parameterization specification pre-header for MyFunctions"]},{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},{"b":"Version 1.0;"}]},{"entry":[{},{"b":"Functions "}]},{"entry":[{},"# Declare the following C++ function in the"]},{"entry":[{},"# MyFunctions namespace to determine the minimum"]},{"entry":[{},"# of two values."]},{"entry":[{},"#\u2003 \/\/ Return the minimum of x, y"]},{"entry":[{},"#\u2003 double MyRoutines::Min"]},{"entry":[{},"#\u2003\u2003\u2003\u2003\u2003\u2003 (ITestPlan* pITestPlan,int& x, int& y);"]},{"entry":[{},{"b":["Integer ","Integer ","Integer "]}]},{"entry":[{},"# Declare the following C++ function in the"]},{"entry":[{},"# UserRoutines namespace to return the average of"]},{"entry":[{},"# an array."]},{"entry":[{},"#\u2003 \/\/ Return the average of the array"]},{"entry":[{},"#\u2003 double MyRoutines::Avg"]},{"entry":[{},"#\u2003\u2003\u2003\u2003\u2003\u2003 (ITestPlan* pITestPlan, double* a, const int a_size);"]},{"entry":[{},"# The C++ function will be called with a and a\u2032Length"]},{"entry":[{},{"b":["Double ","Double "]}]},{"entry":[{},"# Declare the following C++ function in the"]},{"entry":[{},"# UserRoutines namespace to print the dut id"]},{"entry":[{},"# and a message"]},{"entry":[{},"# \u2003\/\/ Return the average of the array"]},{"entry":[{},"# \u2003double MyRoutines::Print"]},{"entry":[{},"# \u2003\u2003\u2003\u2003\u2003\u2003(ITestPlan* pITestPlan, String* msg, unsigned int&"]},{"entry":[{},"dutId);"]},{"entry":[{},"# The C++ function will be called with a and a\u2032Length"]},{"entry":[{},{"b":["Void ","String ","UnsignedInteger "]}]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Typically a C++ section needs to be provided for the above declarations, as the compiler will expand these declarations in a standard way. The user is of course responsible for the C++ implementation of these functions. Note that all of the above functions will presumably take an ITestPlan pointer as an implicit first parameter. This pointer provides the function writer access to stateS in the TestPlan. For instance, the function writer could use the ITestPlan interface to access the current Flow, the current FlowItem in the flow, the current Result clause, values of UserVars, and other such information. Certain tester defined functions are available for use in the file Functions.ph:",{"@attributes":{"id":"p-0376","num":"0571"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"b":"Version "}]},{"entry":[{},"#"]},{"entry":[{},"# File Functions.ph"]},{"entry":[{},"#"]},{"entry":[{},{"b":"Functions "}]},{"entry":[{},"# Declare the following C++ function in the"]},{"entry":[{},"# Functions namespace"]},{"entry":[{},"# Returns the ID of the current DUT being tested by the"]},{"entry":[{},"# caller."]},{"entry":[{},{"b":"UnsignedInteger "}]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The C++ code that would be generated by compiler for MyFunctions above is to simply declare some functions in the MyFunctions namespace:",{"@attributes":{"id":"p-0378","num":"0573"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"namespace MyFunctions"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2002double Min(ITestPlan* pITestPlan, int& x, int& y);"]},{"entry":[{},"\u2003\u2002double Avg(ITestPlan* pITestPlan, double* a, const int a_size);"]},{"entry":[{},"\u2003\u2002void Print(ITestPlan* pITestPlan, char* Msg, unsigned int dutID);"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"These functions will be callable from a flow.","C6. Custom Flowables","It is also possible to create a pre-header implementing the C++ IFlowable interface using the pre-header. This enables a user to define custom flowables that can be run in a FlowItem. Shown below is a pre-header for the user-defined Flowable MyFlowable:",{"@attributes":{"id":"p-0381","num":"0576"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"# File MyFlowable.ph"]},{"entry":[{},"#"]},{"entry":[{},"# Parameterization specification pre-header for MyFlowable"]},{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},{"b":"Version "}]},{"entry":[{},{"b":"FlowableClass "}]},{"entry":[{},"# The parameters list:"]},{"entry":[{},{"b":"Parameters"}]},{"entry":[{},"{"]},{"entry":[{},"\u2003# The following declaration specifies that a MyFlowable has"]},{"entry":[{},"\u2003#\u2002 - 1 optional parameter Int1 of type Integer"]},{"entry":[{},"\u2003#\u2002 - [represented by C++ type int]"]},{"entry":[{},"\u2003#\u2002 - stored in a member named m_int1Val"]},{"entry":[{},"\u2003#\u2002 - a function to set it named setInt1Val."]},{"entry":[{},{"b":"Integer "}]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003= 0-1;"]},{"entry":[{},"\u2003\u2003= m_int1Val;"]},{"entry":[{},"\u2003\u2003= setInt1Val;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# The following declaration specifies that a MyFlowable has"]},{"entry":[{},"\u2003#\u2002 - 1 mandatory parameter Int2 of type Integer"]},{"entry":[{},"\u2003#\u2002 - [represented by C++ type int]"]},{"entry":[{},"\u2003#\u2002 - stored in a member named m_int2Val"]},{"entry":[{},"\u2003#\u2002 - a function to set it named setInt2Val."]},{"entry":[{},"\u2003Int2"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003= 1;"]},{"entry":[{},"\u2003\u2003= m_int2Val;"]},{"entry":[{},"\u2003\u2003= setInt2Val;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# The following declaration specifies that a MyFlowable has"]},{"entry":[{},"\u2003#\u2002 - one or more parameters of type String"]},{"entry":[{},"\u2003#\u2002 - [represented by C++ type Tester::String]"]},{"entry":[{},"\u2003#\u2002 - stored in a member named m_stringArrVal"]},{"entry":[{},"\u2003#\u2002 - a function to set it named addStringVal."]},{"entry":[{},"\u2003StringItem"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003= 1-n;"]},{"entry":[{},"\u2003\u2003= m_stringArrVal;"]},{"entry":[{},"\u2003\u2003= addStringVal;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# The following declaration specifies that a MyFlowable has"]},{"entry":[{},"\u2003#\u2002 - A single PList parameter"]},{"entry":[{},"\u2003#\u2002 - [represented by the C++ type Tester::PList]"]},{"entry":[{},"\u2003#\u2002 - stored in a member named m_plist"]},{"entry":[{},"\u2003#\u2002 - a function to set it named setPListParam"]},{"entry":[{},"\u2003PListParam"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003= 1;"]},{"entry":[{},"\u2003\u2003= m_plist;"]},{"entry":[{},"\u2003\u2003= setPListParam;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":[{},"#"]},{"entry":[{},"# The section below is part of the Pre-Header which is an escape"]},{"entry":[{},"# into C++ code."]},{"entry":[{},"#"]},{"entry":[{},"# Everything in this section will be reproduced verbatim in the"]},{"entry":[{},"# generated header file, except for \u201c$Class\u201d, \u201c$Inc\u201d,"]},{"entry":[{},"# \u201c$ParamAryTypes\u201d, \u201c$ParamAttrs\u201d, \u201c$ParamFns\u201d and"]},{"entry":[{},"\u201c$ParamImpls\u201d."]},{"entry":[{},"#"]},{"entry":[{},"# Note that no comments beginning with the \u2018#\u2019 character are"]},{"entry":[{},"supported"]},{"entry":[{},"# within the following section."]},{"entry":[{},"#"]},{"entry":[{},"CPlusPlusBegin"]},{"entry":[{},{"b":"$Inc"}]},{"entry":[{},"namespace"]},{"entry":[{},"{"]},{"entry":[{},"class "]},{"entry":[{},"{"]},{"entry":[{},"\/\/ Array types for parameters storage:"]},{"entry":[{},{"b":"$ParamAryTypes"}]},{"entry":[{},"public:"]},{"entry":[{},"\u2003virtual void preExec( );"]},{"entry":[{},"\u2003virtual void exec( );"]},{"entry":[{},"\u2003virtual void postExec( );"]},{"entry":[{},"\u2003"]},{"entry":[{},"\u2003\/\/ ..."]},{"entry":[{},"private:"]},{"entry":[{},"\u2003double m_someVar;"]},{"entry":[{},"\u2003"]},{"entry":[{},"\u2003\/\/ ..."]},{"entry":[{},"};"]},{"entry":[{},"\/\/ ..."]},{"entry":[{},{"b":"$ParamImpls"}]},{"entry":[{},"} \/\/ End namespace"]},{"entry":[{},"CPlusPlusEnd"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"There are several classes implementing the IFlowable interface. These include:\n\n","The discussion on Test class parameterization earlier only allowed for test class parameters to be of known types, viz., elementary types and tester-defined types such as PLists, and TestConditions. For user flexibility, it is important to provide type extensibility, whereby types (that are unknown a-priori to the compiler) can be created and used. Custom types (CTs) will be defined in the Custom Types. These can be used to define types corresponding to C-language structs (also referred to as Plain Old Data types, or PODs, which are quite different from their namesakes in C++) as well as for types corresponding to C-language typedefs for function signatures. A separate file with user types will have the extension .ctyp. Here is an example of a user types declaration in accordance with the preferred embodiment of the present invention:",{"@attributes":{"id":"p-0384","num":"0583"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},"# File MyCustomTypes.ctyp"]},{"entry":[{},"# ---------------------------------------------------------"]},{"entry":[{},{"b":"Version "}]},{"entry":[{},{"b":"CustomTypes"}]},{"entry":[{},"{"]},{"entry":[{},"\u2003# A structured Plain-Old-Data type"]},{"entry":[{},"\u2003Foo"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003String \u2003\u2002S1; \u2003# String is a standard type"]},{"entry":[{},"\u2003\u2003Integer I1; \u2003# ... and so is Integer"]},{"entry":[{},"\u2003\u2003String \u2003\u2002S2;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# Another structured type using Foo"]},{"entry":[{},"\u2003Bar"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003Foo \u2003\u2003\u2003\u2002Foo1;"]},{"entry":[{},"\u2003\u2003String \u2003\u2002S1;"]},{"entry":[{},"\u2003\u2003Foo \u2003\u2003\u2003\u2002Foo2;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003# A pointer to a function."]},{"entry":[{},"\u2003#\u2003\u2003\u2003 Return type: \u2003Integer"]},{"entry":[{},"\u2003#\u2003\u2003\u2003 Parameters: \u2003\u2009Integer, Integer"]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003BinaryOp() ;"]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003# Another pointer to a function."]},{"entry":[{},"\u2003#\u2003\u2003\u2003 Return type: \u2003Void"]},{"entry":[{},"\u2003#\u2003\u2003\u2003 Parameter: Integer"]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003UnaryOp() "]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003# A pointer to a function that takes"]},{"entry":[{},"\u2003# no parameters and does not return a value."]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003NullaryOp( ) "]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The CustomTypes declaration presented above will be translated by the compiler into the following C++ code:",{"@attributes":{"id":"p-0386","num":"0585"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"namespace CustomTypes"]},{"entry":[{},"{"]},{"entry":[{},"\u2003struct Foo"]},{"entry":[{},"\u2003{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003Tester::String","S1;"]},{"entry":[{},"\u2003\u2003int","I1;"]},{"entry":[{},"\u2003\u2003Tester::String","S2"]},{"entry":[{},"\u2003};"]},{"entry":[{},"\u2003struct Bar"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003Foo","\u2003Foo1;"]},{"entry":[{},"\u2003\u2003Tester::String","S1;"]},{"entry":[{},"\u2003\u2003Foo","\u2003Foo2;"]},{"entry":[{},"\u2003};"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003typedef int (*BinaryOp) (int&, int&);"]},{"entry":[{},"\u2003typedef void (*UnaryOp)(int);"]},{"entry":[{},"\u2003typedef void (*NullaryOp)( );"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Objects of these types can be passed to Test classes as parameters, as shown next.","Using Custom Types as Test Class Parameters","Consider the case where the user has an extension to a test, which needs to be initialized with\u2014in addition to pattern lists and test conditions\u2014other class objects, as well as arbitrary (i.e., user-defined) objects that are defined within a file containing Custom Types (i.e., a .ctyp file). For example, suppose the user wants to use the CTs defined in the file MyTestCTs.ctyp:",{"@attributes":{"id":"p-0389","num":"0588"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# File MyTesetCTs.ctyp"]},{"entry":[{},{"b":"Version "}]},{"entry":[{},{"b":"CustomTypes"}]},{"entry":[{},"{"]},{"entry":[{},"\u2003Foo"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003name;"]},{"entry":[{},"\u2003\u2003patternList;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003Bar"]},{"entry":[{},"\u2003{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003Foo","someFoo;"]},{"entry":[{},"\u2003\u2003","dVal;"]},{"entry":[{},"\u2003}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003BinaryOp(, ) return ;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"All that the user needs to do to use the above types is import the above file in his test class pre-header. Since the compiler interprets CTs that are so defined, the definitions for Foo and Bar are therefore available to it when it is processing the test class pre-header. Moreover, the compiler defines two C-language structs, struct Foo and struct Bar, corresponding respectively to the types Foo and Bar above, the definitions for which are placed in the file myTestCTs.h. The Import statement for myTestCTs.ctt causes the file myTestCTs.h to be #include-d in the generated test class C++ header. The following example illustrates this process. First, consider the declaration for the test in the test plan (the declarations for pattern lists and test conditions have been omitted for clarity):",{"@attributes":{"id":"p-0391","num":"0590"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"Import MyFunctions.ph;"]},{"entry":[{},"Import MyCustomTypes.ctyp;"]},{"entry":[{},"..."]},{"entry":[{},"# The CustomVars block defines variables of the Custom"]},{"entry":[{},"# types defined earlier."]},{"entry":[{},"CustomVars"]},{"entry":[{},"{"]},{"entry":[{},"\u2003..."]},{"entry":[{},"\u2003Bar bar1 ="]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003{ \u201dThis is a Foo\u201d, somePatList }, \u2003\u2003# someFoo"]},{"entry":[{},"\u2003\u20033.14159  \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003# dVal"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003# A function object that is a binary operator."]},{"entry":[{},"\u2003# The name on the right hand side of the assignment"]},{"entry":[{},"\u2003# is a routine declared in MyFunctions, for which,"]},{"entry":[{},"\u2003# of course, the user has to provide an implementation."]},{"entry":[{},"\u2003#"]},{"entry":[{},"\u2003BinaryOp bop1 = MyFunctions.Min;"]},{"entry":[{},"}"]},{"entry":[{},"..."]},{"entry":[{},"Test MyFancyTest MyTest1"]},{"entry":[{},"{"]},{"entry":[{},"\u2003..."]},{"entry":[{},"\u2003BarParam = bar1;"]},{"entry":[{},"\u2003BinaryOpParam = bop1;"]},{"entry":[{},"}"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the above example, a CustomVars block is included in a test plan. A separate file with customization variables will have the extension .cvar. The user would write a pre-header for MyFancyTest that supports the above parameterization as follows (the parameterization declarations for pattern lists and test conditions have been omitted for clarity):",{"@attributes":{"id":"p-0393","num":"0592"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"# ---------------------------------------------------------"},{"entry":"# File MyFancyTest.ph"},{"entry":"#"},{"entry":"# Parameterization specification pre-header for MyFancyTest"},{"entry":"# ---------------------------------------------------------"},{"entry":"Version 1.0.2;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Import MyCustomTypes.ctyp;","\u2003# For CTs used in MyFancyTest"]},{"entry":["Import FunctionalTest.ph;","# For base class FunctionalTest"]},{"entry":["TestClass = MyFancyTest;","# The name of this test class"]},{"entry":["PublicBases = FunctionalTest;","# List of public base classes"]},{"entry":"# The parameters list:"},{"entry":"Parameters"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003# The following declaration specifies that a MyFancyTest has"},{"entry":"\u2003#\u2003- an optional array of parameters of custom type Bar"},{"entry":"\u2003#\u2003- [represented by C++ type CustomTypes::Bar]"},{"entry":"\u2003#\u2003- stored in a member named m_barsArray"},{"entry":"\u2003#\u2003- a function to set it named addBarParam."},{"entry":"\u2003# An implementation will be generated for addBarParam."},{"entry":"\u2003Bar BarParam"},{"entry":"\u2003{"},{"entry":"\u2003\u2003Cardinality = 0-n;"},{"entry":"\u2003\u2003Attribute = m_barsArray;"},{"entry":"\u2003\u2003SetFunction = addBarParam [Implement];"},{"entry":"\u2003}"},{"entry":"\u2003# The following declaration specifies that a MyFancyTest has"},{"entry":"\u2003#\u2003- an optional parameter of custom type BinaryOp"},{"entry":"\u2003#\u2003- [represented by C++ type CustomTypes::BinaryOp]"},{"entry":"\u2003#\u2003- stored in a member named m_binaryOp"},{"entry":"\u2003#\u2003- a function to set it named setBinaryOpParam."},{"entry":"\u2003\u2003# An implementation will be generated for setBinaryOpParam."},{"entry":"\u2003\u2003BinaryOp BinaryOpParam"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Cardinality = 0-1;"},{"entry":"\u2003\u2003\u2003Attribute = m_binaryOp;"},{"entry":"\u2003\u2003\u2003SetFunction = setBinaryOpParam [Implement];"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003CPlusPlusBegin"},{"entry":"\u2003$Inc"},{"entry":"\u2003namespace"},{"entry":"\u2003{"},{"entry":"\u2003class $Class"},{"entry":"\u2003{"},{"entry":"\u2003$ParamAryTypes"},{"entry":"\u2003public:"},{"entry":"\u2003\u2003virtual void preExec( );"},{"entry":"\u2003\u2003virtual void exec( );"},{"entry":"\u2003\u2003virtual void postExec( );"},{"entry":"\u2003\u2003$ParamFns"},{"entry":"\u2003\u2003\/\/ ..."},{"entry":"\u2003private:"},{"entry":"\u2003\u2003double m_someVar;"},{"entry":"\u2003\u2003$ParamAttrs"},{"entry":"\u2003\u2003\/\/ ..."},{"entry":"\u2003};"},{"entry":"\u2003\/\/ ..."},{"entry":"\u2003$ParamImpls"},{"entry":"\u2003} \/\/ End namespace"},{"entry":"\u2003CPlusPlusEnd"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Finally, once the compiler has processed this pre-header file, it will create the following C++ header file for the MyFancyTest class, MyFancyTest.h:",{"@attributes":{"id":"p-0395","num":"0594"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#include <MyCustomTypes.h>"]},{"entry":[{},"#include <ITest.h>"]},{"entry":[{},"#include <FunctionalTest.h>"]},{"entry":[{},"..."]},{"entry":[{},"namespace"]},{"entry":[{},"{"]},{"entry":[{},"class MyFancyTest : public ITest,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003public FunctionalTest"]},{"entry":[{},"{"]},{"entry":[{},"public:"]},{"entry":[{},"\u2003typedef std::vector<CustomTypes::Bar *> BarAry_t;"]},{"entry":[{},"public:"]},{"entry":[{},"\u2003virtual void preExec( );"]},{"entry":[{},"\u2003virtual void exec( );"]},{"entry":[{},"\u2003virtual void postExec( );"]},{"entry":[{},"public:"]},{"entry":[{},"\u2003void setName(OFCString &name); # Automatic for all tests"]},{"entry":[{},"\u2003void setPatternTree(PatternTree *);"]},{"entry":[{},"\u2003void addTestCondition(TestCondition *);"]},{"entry":[{},"\u2003void addBarParam(CustomTypes::Bar *);"]},{"entry":[{},"\u2003void setBinaryOpParam(CustomTypes::BinaryOp *);"]},{"entry":[{},"\u2003..."]},{"entry":[{},"private:"]},{"entry":[{},"\u2003double m_someVar;"]},{"entry":[{},"private:"]},{"entry":[{},"\u2003OFCString m_name; # Automatic for all tests"]},{"entry":[{},"\u2003PatternTree *m_pPatList;"]},{"entry":[{},"\u2003TestConditionPtrsAry_t m_testCondnsArray;"]},{"entry":[{},"\u2003BarAry_t m_barsArray;"]},{"entry":[{},"\u2003BinaryOp *m_binaryOp;"]},{"entry":[{},"\u2003..."]},{"entry":[{},"}; \/\/ End class MyFancyTest"]},{"entry":[{},"..."]},{"entry":[{},"inline void"]},{"entry":[{},"MyFancyTest::addBarParam(CustomTypes::Bar *arg)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003m_barsArray.push_back(arg);"]},{"entry":[{},"\u2003return;"]},{"entry":[{},"}"]},{"entry":[{},"inline void"]},{"entry":[{},"MyFancyTest::setBinaryOpParam(CustomTypes::BinaryOp"]},{"entry":[{},"*arg)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003m_binaryOp = arg;"]},{"entry":[{},"\u2003return;"]},{"entry":[{},"}"]},{"entry":[{},"} \/\/ End namespace"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"As seen above, a pre-header for a Test class, custom Flowable class, or custom function definitions offers limited introspection into the class\/functions through a parameterization specification section. The compiler uses this section to generate the parameterization interface for the class\/function (and generate the class\/function header itself). For Test classes and Flowable classes, it also uses this section to subsequently generate the calls in the Test Plan code to initialize an instance of that class. The following points concerning pre-headers and corresponding declaration should be noted:\n\n","Note that a value is always set singly; i.e., for parameters that allow specification of multiple values, the generated code in the Test Plan will call this function repeatedly, once for every value specified, each of which will be added to an STL vector (as described above).","The optional keyword \u201c[implement]\u201d following the function name indicates that a trivial implementation for this function will be made available as an inline method in the class header (inserted at the point indicated by $ParamImpls). Otherwise, the user is responsible for providing an implementation of the function.\n\n","Shown below is the test plan example embellished with some customization:",{"@attributes":{"id":"p-0400","num":"0623"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"# ---------------------------------------------------------"},{"entry":"# File MyCustomizedTestPlan.tpl"},{"entry":"# ---------------------------------------------------------"},{"entry":"Version 0.1;"},{"entry":"#"},{"entry":"# Imports as before ..."},{"entry":"# The following import is implicit, but can be explicitly"},{"entry":"# provided."},{"entry":"Import FunctionalTest.ph;"},{"entry":"# Import for MyFlowables, MyFunctions and Functions"},{"entry":"Import MyFlowables.ph;"},{"entry":"Import MyFunctions.ph;"},{"entry":"Import Functions.ph;"},{"entry":"#----------------------------------------------------------"},{"entry":"# Start of the test plan"},{"entry":"#----------------------------------------------------------"},{"entry":"TestPlan Sample;"},{"entry":"# This block defines Pattern Lists file-qualified names and"},{"entry":"# Pattern List variables that are used in Test declarations."},{"entry":"# The file-qualified names refer to pattern lists in the named"},{"entry":"# files. The variables refer to String variables which will"},{"entry":"# hold the pattern list names at run time. User defined Flowable"},{"entry":"# objects could set the values of these variables through an"},{"entry":"# API."},{"entry":"PListDefs"},{"entry":"{"},{"entry":"\u2003# File qualified pattern list names"},{"entry":"\u2003pl1A.plist:pat1Alist,"},{"entry":"\u2003pl2A.plist:pat2AList,"},{"entry":"\u2003# Pattern list variables"},{"entry":"\u2003plistXxx,"},{"entry":"\u2003plistYyy,"},{"entry":"plistZzz"},{"entry":"}"},{"entry":"# SocketDef, UserVars declaration as before ..."},{"entry":"# Declarations of TestConditions TC1Min, TC1Typ, TC1Max,"},{"entry":"# TC2Min, TC2Typ, TC2Max as before ..."},{"entry":"#"},{"entry":"# Declare a FunctionalTest. \u201cFunctionalTest\u201d refers to a C++"},{"entry":"# test class that runs the test, and returns a 0, 1 or 2 as"},{"entry":"# a Result. The Test Condition Group TCG1 is selected with"},{"entry":"# the \u201cmin\u201d selector by referring to the TC1Min TestCondition."},{"entry":"#"},{"entry":"# Note that compiler can compile this because of the imported"},{"entry":"# FunctionalTest.ph file."},{"entry":"#"},{"entry":"Test FunctionalTest MyFunctionalTest1Min"},{"entry":"{"},{"entry":"\u2003PListParam = pat1AList;"},{"entry":"\u2003TestConditionParam = TC1Min;"},{"entry":"}"},{"entry":"#"},{"entry":"# \u2003\u2003Additional FunctionalTest declarations for the following, as before"},{"entry":"# \u2003\u2003MyFunctionalTest1Typ"},{"entry":"# \u2003\u2003MyFunctionalTest1Max"},{"entry":"# \u2003\u2003MyFunctionalTest2Min"},{"entry":"# \u2003\u2003MyFunctionalTest2Typ"},{"entry":"# \u2003\u2003MyFunctionalTest2Max"},{"entry":"#"},{"entry":"# Here is a declaration of MyFlowable. It uses a PatternList variable"},{"entry":"# plistXxx which is initialized by the flowable prior to use here."},{"entry":"#"},{"entry":"# Compiler can compile this because of the imported MyFlowables.ph"},{"entry":"file:"},{"entry":"Flowable MyFlowable MyFlowable1"},{"entry":"{"},{"entry":"\u2003Int1 = 10;"},{"entry":"\u2003Int2 = 20;"},{"entry":"\u2003StringItem = \u201cHello World\u201d;"},{"entry":"\u2003PListParam = plistXxx;"},{"entry":"}"},{"entry":"# Counters for PassCount and FailCount as before ..."},{"entry":"# Flows as before. Flows FlowTest1 and FlowTest2 are"},{"entry":"# unchanged from the previous example."},{"entry":"Flow FlowTest1"},{"entry":"{"},{"entry":"\u2003# ..."},{"entry":"}"},{"entry":"Flow FlowTest2"},{"entry":"{"},{"entry":"\u2003# ..."},{"entry":"}"},{"entry":"#"},{"entry":"# Now FlowMain, a main flow, can be presented. It"},{"entry":"# implements a finite state machine that calls FlowTest1"},{"entry":"# and FlowTest2 as below:"},{"entry":"# ------------------------------------"},{"entry":"# \u2003\u2003\u2003\u2003\u2003\u2003\u2003Result 0 \u2003\u2003\u2003Result 1"},{"entry":"# ------------------------------------"},{"entry":"#\u2003FlowMain_1 \u2003FlowMain_2 \u2003return 1"},{"entry":"#\u2003FlowMain_2 \u2003FlowMain_3 \u2003return 1"},{"entry":"#\u2003FlowMain_3 \u2003FlowMain_4 \u2003return 1"},{"entry":"#\u2003FlowMain_4 \u2003FlowMain_5 \u2003return 1"},{"entry":"#\u2003FlowMain_5 \u2003return 0 \u2003\u2003\u2003\u2003return 1"},{"entry":"#"},{"entry":"# Where the IFlowables run by each FlowItem are:"},{"entry":"# ------------------------------------------"},{"entry":"# \u2003\u2003\u2003FlowItem \u2003\u2003\u2003\u2003IFlowable that is run"},{"entry":"# ------------------------------------------"},{"entry":"# \u2003\u2003FlowMain_1 \u2003\u2003MyFlowable1"},{"entry":"# \u2003\u2003FlowMain_2 \u2003\u2003DatalogStartFlow"},{"entry":"# \u2003\u2003FlowMain_3 \u2003\u2003FlowTest1"},{"entry":"# \u2003\u2003FlowMain_4 \u2003\u2003FlowTest2"},{"entry":"# \u2003\u2003FlowMain_5 \u2003\u2003DatalogStopFlow"},{"entry":"#"},{"entry":"Flow FlowMain"},{"entry":"{"},{"entry":"\u2003#"},{"entry":"\u2003# The first declared flow is the initial flow to be"},{"entry":"\u2003# executed. It goes to FlowMain_InitializationFlow"},{"entry":"\u2003# on success, and returns 1 on failure."},{"entry":"\u2003#"},{"entry":"\u2003FlowItem FlowMain_1 MyFlowable1"},{"entry":"\u2003{"},{"entry":"\u2003\u2003Result 0"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Property PassFail = \u201cPass\u201d;"},{"entry":"\u2003\u2003\u2003IncrementCounters PassCount;"},{"entry":"\u2003\u2003\u2003# A user function call"},{"entry":"\u2003\u2003\u2003MyFunctions.Print (\u201cPassed MyFlowable1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions.GetDUTID( ));"},{"entry":"\u2003\u2003\u2003GoTo FlowMain_2;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003Result 1"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Property PassFail = \u201cFail\u201d;"},{"entry":"\u2003\u2003\u2003IncrementCounters FailCount;"},{"entry":"\u2003\u2003\u2003# A user function call"},{"entry":"\u2003\u2003\u2003MyFunctions.Print(\u201cFailed MyFlowable1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions.GetDUTID( ));"},{"entry":"\u2003\u2003\u2003SetBin SoftBins.\u201c3GHzLeakage\u201d;"},{"entry":"\u2003\u2003\u2003Return 1;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003#"},{"entry":"\u2003# Goes to FlowMain_3 on success"},{"entry":"\u2003# and returns 1 on failure."},{"entry":"\u2003#"},{"entry":"\u2003FlowItem FlowMain_2 DatalogStartFlow"},{"entry":"\u2003{"},{"entry":"\u2003\u2003Result 0"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Property PassFail = \u201cPass\u201d;"},{"entry":"\u2003\u2003\u2003IncrementCounters PassCount;"},{"entry":"\u2003\u2003\u2003# A user function call"},{"entry":"\u2003\u2003\u2003MyFunctions.Print(\u201cPassed DatalogStartFlow\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions.GetDUTID( ));"},{"entry":"\u2003\u2003\u2003GoTo FlowMain_3;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003Result 1"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Property PassFail = \u201cFail\u201d;"},{"entry":"\u2003\u2003\u2003IncrementCounters FailCount;"},{"entry":"\u2003\u2003\u2003MyFunctions.Print(\u201cFailed DatalogStartFlow\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions.GetDUTID( ));"},{"entry":"\u2003\u2003\u2003Return 1;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003# This FlowItem calls the previously defined FlowTest1"},{"entry":"\u2003FlowItem FlowMain_3 FlowTest1"},{"entry":"\u2003{"},{"entry":"\u2003\u2003Result 0"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Property PassFail = \u201cPass\u201d;"},{"entry":"\u2003\u2003\u2003IncrementCounters PassCount;"},{"entry":"\u2003\u2003\u2003# A user function call"},{"entry":"\u2003\u2003\u2003MyFunctions.Print(\u201cPassed FlowTest1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions.GetDUTID( ));"},{"entry":"\u2003\u2003\u2003GoTo FlowMain_4;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003Result 1"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Property PassFail = \u201cFail\u201d;"},{"entry":"\u2003\u2003\u2003IncrementCounters FailCount;"},{"entry":"\u2003\u2003\u2003# A user function call"},{"entry":"\u2003\u2003\u2003MyFunctions.Print(\u201cFailed FlowTest1\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions.GetDUTID( ));"},{"entry":"\u2003\u2003\u2003SetBin SoftBins.\u201c3GHzCacheFail\u201d;"},{"entry":"\u2003\u2003\u2003Return 1;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003# This FlowItem calls the previously defined FlowTest2"},{"entry":"\u2003FlowItem FlowMain_4 FlowTest2"},{"entry":"\u2003{"},{"entry":"\u2003\u2003Result 0"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Property PassFail = \u201cPass\u201d;"},{"entry":"\u2003\u2003\u2003IncrementCounters PassCount;"},{"entry":"\u2003\u2003\u2003# A user function call"},{"entry":"\u2003\u2003\u2003MyFunctions.Print(\u201cPassed FlowTest2\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions.GetDUTID( ));"},{"entry":"\u2003\u2003\u2003GoTo FlowMain_5;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003Result 1"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003# FlowTest1 passed, but FlowTest2 failed"},{"entry":"\u2003\u2003\u2003Property PassFail = \u201cFail\u201d;"},{"entry":"\u2003\u2003\u2003IncrementCounters FailCount;"},{"entry":"\u2003\u2003\u2003# A user function call"},{"entry":"\u2003\u2003\u2003MyFunctions.Print(\u201cFailed FlowTest2\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions.GetDUTID( ));"},{"entry":"\u2003\u2003\u2003SetBin SoftBins.\u201c3GHzSBFTFail\u201d;"},{"entry":"\u2003\u2003\u2003Return 1;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003FlowItem FlowMain_5 DatalogStopFlow"},{"entry":"\u2003{"},{"entry":"\u2003\u2003Result 0"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003# All Passed!"},{"entry":"\u2003\u2003\u2003Property PassFail = \u201cPass\u201d;"},{"entry":"\u2003\u2003\u2003IncrementCounters PassCount;"},{"entry":"\u2003\u2003\u2003# A user function call"},{"entry":"\u2003\u2003\u2003MyFunctions.Print(\u201cPassed all!\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions.GetDUTID( ));"},{"entry":"\u2003\u2003\u2003SetBin SoftBins.\u201c3GHzAllPass\u201d;"},{"entry":"\u2003\u2003\u2003Return 0;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003Result 1"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003# FlowTest1 and FlowTest2 passed,"},{"entry":"\u2003\u2003\u2003# but DatalogStopFlow failed"},{"entry":"\u2003\u2003\u2003Property PassFail = \u201cFail\u201d;"},{"entry":"\u2003\u2003\u2003IncrementCounters FailCount;"},{"entry":"\u2003\u2003\u2003# A user function call"},{"entry":"\u2003\u2003\u2003MyFunctions.Print(\u201cFailed DatalogStopFlow\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions.GetDUTID( ));"},{"entry":"\u2003\u2003\u2003Return 1;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The following points need to be noted about the above code:\n\n",{"@attributes":{"id":"p-0402","num":"0628"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Status SetPListVariable(const Tester::String& varName,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003const Tester::String& fileQualifiedPListName);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0135","list-style":"none"},"li":{"@attributes":{"id":"ul0135-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0136","list-style":"none"},"li":["\u2003The Flowable will be able to use the above function to bind a PListVariable to a particular PList.","4. User functions and functions can be called in FlowItems just prior to a transition, which is either a transfer of control to another FlowItem, or a return.\n\nC++ for User Function Calls\n"]}}}},"With the exception of invoking custom function calls in flows, C++ code that would be generated by the compiler has been shown for the various customization techniques presented earlier. User function calls in a FlowItem are preferably handled by an IUserCalls member of each Flow. Each Flow preferably has a member of the interface IUserCalls which exports a single virtual member function, as shown below:",{"@attributes":{"id":"p-0404","num":"0632"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class IUserCalls"]},{"entry":[{},"{"]},{"entry":[{},"public:"]},{"entry":[{},"\u2003virtual void exec(const String& flowItemName,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003unsigned int result) = 0;"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"When a Flow with user function calls is encountered, the Flow gets populated with an instance of a class that implements the above interface. For example, in FlowMain in the example in the flow will be populated with an instance of the following class:",{"@attributes":{"id":"p-0406","num":"0634"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class FlowMain_UserCalls : public IUserCalls"]},{"entry":[{},"{"]},{"entry":[{},"public:"]},{"entry":[{},"\u2003virtual void exec(const String& flowItemName,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003unsigned int result)"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003if (flowItemName == \u201cFlowMain_1\u201d)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\/\/ ..."]},{"entry":[{},"\u2003\u2003} else if (flowItemName == \u201cFlowMain_2\u201d)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\/\/ ..."]},{"entry":[{},"\u2003\u2003} else if (flowItemName == \u201cFlowMain_3\u201d)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003switch (result)"]},{"entry":[{},"\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003case 0:"]},{"entry":[{},"\u2003\u2003\u2003\u2003MyFunctions::Print(\u201cPassed FlowTest1\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions::GetDUTID( ));"]},{"entry":[{},"\u2003\u2003\u2003\u2003return;"]},{"entry":[{},"\u2003\u2003\u2003case 1:"]},{"entry":[{},"\u2003\u2003\u2003\u2003MyFunctions::Print(\u201cFailed FlowTest1\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Functions::GetDUTID( ));"]},{"entry":[{},"\u2003\u2003\u2003\u2003return;"]},{"entry":[{},"\u2003\u2003\u2003default:"]},{"entry":[{},"\u2003\u2003\u2003\u2003return;"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003else if (flowItemName == \u201cFlowMain_4\u201d)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\/\/ ..."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003else if (flowItemName == \u201cFlowMain_5\u201d)"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\/\/ ..."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The FlowItem::execute( ) operation knows the name of the flow item. Before it returns with the pointer to the next flow, it will call IUserCalls::exec( ) for the enclosing flow, passing its own flow item name, and the value of the current result. This will cause the above code to be executed, invoking the needed user defined functions.","C9. Test Program Compilation","As explained above, the Test Plan description file specifies the objects used in a test plan and their relationships to one another. In one embodiment, this file is translated to the C++ code that will be executed on the Site Controller in the form of an implementation of a standard interface ITestPlan. This code can be packaged into a Windows dynamic link library (DLL) which can be loaded onto the Site Controller. The Test Program DLL is generated to have standard known entry points that the Site Controller software can use to generate and return the TestPlan object it contains.","Construction from a Test Plan Description","The process of conversion from a test plan description to an implementation of ITestPlan is accomplished by the test program compiler . This process occurs in two phases: translation and compilation.","In the translation phase , the compiler  processes a test plan file (and the various other files it imports), as well as the pre-headers for all the test types used in the test plan. In this phase, it creates the C++ code for the Test Plan object and the C++ headers for the test types encountered, along with all other supporting files, such as MSVC++ (Microsoft Visual C++) workspace and project files, DLL \u201cboilerplate\u201d code, etc. The compiler  inserts file and line directives into the generated code to ensure that compile-time error messages refer back to the appropriate location in the description file instead of pointing into the generated code.","In the compilation phase, which occurs after the compiler has created the necessary files, a standard compiler , such as an MSVC++ compiler, is invoked to compile the files and link them into a DLL.","The compiler takes, as input, a valid test plan file (and all related files), and generates, as necessary, a TestPlan file and all other files represented by \u201cImport\u201d directives in the test plan file. In addition, it generates a MSVC++\u201cSolution\u201d to build the Test Plan DLL. For example, if the main file (MyTestPlan.tpl) included Timing1.tim to incorporate timing information, then the compiler would create (among others) the following files:",{"@attributes":{"id":"p-0413","num":"0641"},"tables":{"@attributes":{"id":"TABLE-US-00060","num":"00060"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MyTestPlan.h"]},{"entry":[{},"MyTestPlan.cpp"]},{"entry":[{},"Timing1.cpp"]},{"entry":[{},"MyTestPlan.sln (MSVC++ \u201cSolution\u201d file)"]},{"entry":[{},"MyTestPlan.vcproj (MSVC++ \u201cProject\u201d file)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"After all files are created (or updated), the compiler invokes the MSVC++ application, specifying the \u201cSolution\u201d it created, and builds the DLL. Any errors and\/or warnings would be shown to the user.","If, after building the Test Plan, the user made a change to Timing1.tim, the user would then invoke the compiler, passing it MyTestPlan.tpl. The compiler would recognize (by timestamp information) that the main test plan file is unchanged, so that MyTestPlan.h\/.cpp would not be recreated. However, while processing the main test plan file, it would see that the Timing.tim file has changed. Therefore, it would recreate the Timing1.cpp file, and invoke the MSVC++ application to rebuild the DLL. This avoids recompiling MyTestPlan.cpp, and only compiles Timing1.cpp and re-links the DLL. This approach will be especially useful in cutting down re-compile and re-link times for large test plans that take a significant amount of time to compile.","D. Running the Test Program","The Site Controller software loads the Test Program DLL into its process space and calls a \u201cfactory\u201d function within the DLL to create an instance of the Test Plan object. Once the Test Plan object has been created, the Site Controller software can then execute the test plan or interact with it in any other way necessary.","Non-Interactive Builds","To most C++ software developers in the Windows environment building an application (or a DLL, or Library, etc) means bringing up a development environment (MS Visual C++, Borland C++, or similar), editing code, and (often) pressing a button to build the product.","The test environment of an embodiment of the invention will have a similar set of activities. Test Plan developers will need to edit code and build their Test Plans. However, tester will not require the Test Plan developer to bring up a C++ development environment in order to produce the resulting Test Plan DLL.","In order to accomplish this the present invention employs the concept of a non-interactive build. A non-interactive build is defined as a build that uses MS Visual C++ in a non-interactive mode. Note that this still allows other tools to be used interactively to manage such a build. The only implication is that Visual C++ is used non-interactively.","Assumed Environment","Certain assumptions are made about the user's environment. The assumptions are:\n\n","Working with MS Visual Studio non-interactively requires one of two approaches. The first (and simplest) is to use the command-line interface. The second (and more flexible) is to use the Automation interface. This section describes both approaches.","Creating the Project","In order to use Visual Studio non-interactively one should start with a working Solution which contains one or more valid Projects. Unfortunately, this is the one task that cannot be accomplished from either a command-line or Automation approach. Neither method provides a mechanism for project creation. However, projects and solutions for Visual Studio can be created from a template. Therefore, given a project name and a template to start from we can create a solution\/project for Visual Studio.","Populating the Project","Adding new files to the produced project uses the Visual Studio Automation model since the command-line does not support this. We provides two Visual Studio macros to add new and existing files to a project. Similar code could be used by an external script using an ActiveScript Engine (such as VBScript, JScript, ActivePerl, ActivePython, etc) to perform the same tasks. Therefore, our code generation tools could create new files and, using the Automation Model, add them to the existing Visual Studio project. After the files are created they can be updated as necessary by the tools.","Building the Project","Once we have a solution and project in place there are several options to using Visual Studio non-interactively to build the Test Plan. The simplest option is to invoke it from the command-line. Such a command-line would look like:","devenv solutionFile\/build solutionCfg","where solutionFile is a Visual Studio solution file and solutionCfg is a specific configuration applicable to the projects within the solution. Another solution is to use the Visual Studio Object Model for Automation. This allows a finer grain of control over the build and configuration process. As mentioned above, it contains a listing of a Perl script to build a project from the command line. This program reads a configuration file which specifies projects and configurations to build (as well as other information about the projects) and builds them all using the Automation Model. Look at the uses of the $msdev object in this script for examples of how to use Automation objects in a script.\n\nDebugger Support\n","In order for developers of Test classes to verify and debug their work, they need access to a debugger that allows them to break into the Site Controller and step through their code. Since the code generated by the compiler is C++ which is compiled by MSVC++, we use the MSVC++ debugger to debug Test class implementations. Note that this feature is meant only for Test class developers or others who work directly in C++. Other mechanisms will be provided to test engineers who wish to debug or step through the operation of a Test Program without referring directly to the generated C++ code.","System Software Environment","This section describes the general software environment for the Tester: the locations for the files required by user test plans, mechanisms for specifying alternate locations for such files, and the methods for specifying the locations of the test plans and module control software.","Environment Required by Test Plans","System standard locations, as well as the runtime configuration of the search paths for\n\n","The advantage of having such \u201cenvironments\u201d defined in text files instead of through native OS-supported environment variables is that the implementation is then not limited by the common restrictions that OS-supported environment variables have, such as maximum string lengths, etc. The following \u201cenvironment\u201d (setup) variables will be used for the entities listed above:\n\n","In order to support special cases, while maintaining useful default behavior, we provide three levels of configuration. These are described in increasing order of precedence:","First, a system environment setup file, $Tester_INSTALLATION_ROOT\\cfg\\setups\\Setup.env, will specify the default values of \u201cenvironment\u201d variables. If no other configuration mechanism is available, this file will be required. In general, it will be available for all test plans run on the system. This file is created by the Installation and Configuration Management (ICM) system during installation, with input from the installer to assign the default values for the three variables mentioned above. (Note that besides the system defaults for the above three variables, this file will also contain the system defaults for certain other tester \u201cenvironment\u201d variables, as described in the following sub-section.)","Second, an environment setup file may be specified by the user as a runtime argument to the test plan. The variables in this runtime configuration will take precedence over default definitions.","Finally, a test plan may use a special block to specify the environment variables to be used in its execution. Variables defined in the test plan will take precedence over those in the default system file or the user-defined file.","In general, all necessary variables should be defined through one of the mechanisms described above. If a variable is not defined, a runtime error will occur.","Other Environment Setups","Besides the \u201cenvironment\u201d variables that are required by user test plans, the following two \u201cenvironment\u201d variables are required by the test environment:\n\n","Note that while a user can override the value given in the Setup.env file for the Tester_TEST_PLAN_LIBPATH variable, the value given in the Setup.env file for the Tester_MODULE_LIBPATH should not be changed by the user unless the user wants to explicitly change the search path for the vendor-provided hardware module control software DLLs.","Search Path Specification Semantics","The following points should be noted about the \u201cenvironment\u201d variables that specify search paths:\n\n","The efficient management, handling and loading of a very large set of test pattern files is an important architectural aspect of the framework of an embodiment of the invention. The idea of hierarchical pattern lists is regarded as being an effective tool in providing tractable conceptualization and ease of use of the system to the end user.","The stimulus to a DUT is made available to the test system through test vectors. Vectors can generally be categorized as sequential (or linear), scan or Algorithmic Pattern Generator (APG)-derived. In the system of an embodiment of the invention, test vectors are organized in terms of patterns that are applied to the DUT at test time. A pattern is represented by a Pattern object in the user's test program. In the system, patterns are organized in pattern lists, represented programmatically by pattern list objects. A Pattern List object represents an ordered list of patterns or other pattern lists. The ordering is implicit in the order of declaration of the list components. Note that if only a single pattern is needed, it is required to be encapsulated in a list by itself.","A pattern list object in the user's test program is associated with a pattern list file on disk, which contains the actual definition of the pattern list. The contents of a pattern list are thus dynamically determined by the contents of the associated disk file (more will be said about this later).","The definition of a pattern list provides an explicit name for the pattern list, and identifies an ordered list of patterns and\/or other pattern lists through file name associations. It also provides for the specification of execution options, which will be described in detail after the pattern objects have been described, since the options can be applied to both pattern lists and patterns. The pattern list should follow the following rules:",{"@attributes":{"id":"p-0443","num":"0691"},"tables":{"@attributes":{"id":"TABLE-US-00061","num":"00061"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"file-contents :"]},{"entry":[{},"\u2003\u2003version-info global-pattern-list-definitions"]},{"entry":[{},"version-info :"]},{"entry":[{},"\u2003\u2003Version version-identifier ;"]},{"entry":[{},"global-pattern-list-definitions :"]},{"entry":[{},"\u2003\u2003global-pattern-list-definition"]},{"entry":[{},"\u2003\u2003global-pattern-list-definitions global-pattern-list-definition"]},{"entry":[{},"global-pattern-list-definition :"]},{"entry":[{},"\u2003\u2003global-pattern-list-declaration { list-block }"]},{"entry":[{},"global-pattern-list-declaration :"]},{"entry":[{},"\u2003\u2003GlobalPList pattern-list-name options"]},{"entry":[{},"list-block :"]},{"entry":[{},"\u2003\u2003list-entry"]},{"entry":[{},"\u2003\u2003list-block list-entry"]},{"entry":[{},"list-entry :"]},{"entry":[{},"\u2003\u2003pattern-entry ;"]},{"entry":[{},"\u2003\u2003pattern-list-entry ;"]},{"entry":[{},"\u2003\u2003global-pattern-list-definition ;"]},{"entry":[{},"\u2003\u2003local-pattern-list-definition ;"]},{"entry":[{},"pattern-entry :"]},{"entry":[{},"\u2003\u2003Pat pattern-name options"]},{"entry":[{},"pattern-list-entry :"]},{"entry":[{},"\u2003\u2003PList pattern-list-reference options"]},{"entry":[{},"pattern-list-reference :"]},{"entry":[{},"\u2003\u2003pattern-list-qualified-name"]},{"entry":[{},"\u2003\u2003file-name \u2019:\u2019 pattern-list-qualified-name"]},{"entry":[{},"pattern-list-qualified-name :"]},{"entry":[{},"\u2003\u2003pattern-list-name"]},{"entry":[{},"\u2003\u2003pattern-list-qualified-name \u2018.\u2019 pattern-list-name"]},{"entry":[{},"local-pattern-list-definition :"]},{"entry":[{},"\u2003\u2003local-pattern-list-declaration { list-block }"]},{"entry":[{},"local-pattern-list-declaration :"]},{"entry":[{},"\u2003\u2003LocalPList pattern-list-name options"]},{"entry":[{},"options :"]},{"entry":[{},"\u2003\u2003option"]},{"entry":[{},"\u2003\u2003options option"]},{"entry":[{},"option :"]},{"entry":[{},"\u2003\u2003[ option-definition ]"]},{"entry":[{},"option-definition :"]},{"entry":[{},"\u2003\u2003option-name option-parameters"]},{"entry":[{},"option-parameters :"]},{"entry":[{},"\u2003\u2003option-parameter"]},{"entry":[{},"\u2003\u2003option-parameters \u2018,\u2019 option-parameter"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The following are the descriptions of undefined non-terminals used above:\n\n","Pattern list files support comments, which are meant to be ignored by a pattern list file parser. Comments start with the \u2018#\u2019 character, and extend to the end of the line.","E1. Rules for Pattern List","The static or compile-time rules for pattern lists govern the declaration and resolution of names. Names in the pattern list language are declared by global-pattern-list-definitions and local-pattern-list-definitions. They are referenced by pattern-list-references. Below are some rules governing these declarations and references.\n\n",{"@attributes":{"id":"p-0447","num":"0703"},"tables":{"@attributes":{"id":"TABLE-US-00062","num":"00062"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"GlobalPList G1"},{"entry":"{"},{"entry":"\u2003LocalPList L1"},{"entry":"\u2003{"},{"entry":"\u2003\u2003LocalPList L2"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003..."},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003GlobalPList G2"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003..."},{"entry":"\u2003\u2003}"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003PList L2;","# OK. Name L2 is known in this scope"]},{"entry":["\u2003\u2003PList G2","# OK. Name G2 is global"]},{"entry":"\u2003}"},{"entry":["\u2003PList L2;","# Error. Name L2 is not known here."]},{"entry":["\u2003PList L1.L2;","# OK. Name L1 is known here. L2 is known by"]},{"entry":[{},"# \u2003\u2003qualification."]},{"entry":["\u2003PList G1.L1.L2;","# OK. Qualification by G1 is not needed but"]},{"entry":[{},"# is allowed."]},{"entry":["\u2003PList G2;","# OK. Name G2 is global"]},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0150","list-style":"none"},"li":{"@attributes":{"id":"ul0150-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0151","list-style":"none"},"li":"3. Global pattern lists may be defined at an outermost level in a pattern list file, or may be defined as nested within an enclosing pattern list. The nesting is merely a convenience, however. They are conceptually defined as global pattern lists at the outermost level in the file. A nested global pattern list is semantically equivalent to an outermost (non-nested) global pattern list of the same name. So for example:"}}}},{"@attributes":{"id":"p-0448","num":"0705"},"tables":{"@attributes":{"id":"TABLE-US-00063","num":"00063"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GlobalPList G1"]},{"entry":[{},"{"]},{"entry":[{},"\u2003GlobalPList G2 ..."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0152","list-style":"none"},"li":{"@attributes":{"id":"ul0152-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0153","list-style":"none"},"li":{"@attributes":{"id":"ul0153-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0154","list-style":"none"},"li":"is semantically equivalent to:"}}}}}},{"@attributes":{"id":"p-0449","num":"0707"},"tables":{"@attributes":{"id":"TABLE-US-00064","num":"00064"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GlobalPList G1"]},{"entry":[{},"{"]},{"entry":[{},"\u2003PList G2; # References G2"]},{"entry":[{},"}"]},{"entry":[{},"GlobalPList G2 ..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0155","list-style":"none"},"li":{"@attributes":{"id":"ul0155-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0156","list-style":"none"},"li":"4. All global pattern lists are uniquely named."}}}},{"@attributes":{"id":"p-0450","num":"0709"},"tables":{"@attributes":{"id":"TABLE-US-00065","num":"00065"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003GlobalPList G1"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003# Note that this is as if declared at the outermost level"]},{"entry":[{},"\u2003\u2003# with a reference to it right here."]},{"entry":[{},"\u2003\u2003GlobalPList G2"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003..."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003# This declaration will be an error in this or any other"]},{"entry":[{},"file,"]},{"entry":[{},"\u2003# as the name G2 is already taken."]},{"entry":[{},"\u2003GlobalPList G2 # Error. Global name G2 is taken."]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0157","list-style":"none"},"li":{"@attributes":{"id":"ul0157-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0158","list-style":"none"},"li":"5. Local pattern lists are always have their definitions nested within an enclosing pattern list which also determines the scope of the name of the local pattern list. Local pattern lists are uniquely named within their enclosing pattern list. Local pattern lists are syntactically disallowed from occurring at the outermost level in a pattern list file."}}}},{"@attributes":{"id":"p-0451","num":"0711"},"tables":{"@attributes":{"id":"TABLE-US-00066","num":"00066"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003GlobalPList G1"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003LocalPList L1"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003LocalPList L2"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003LocalPList L1 # OK. No local name L1 is declared"]},{"entry":[{},"directly"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003# in the enclosing scope defined by L2."]},{"entry":[{},"\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003PList L1; # OK. Refers to L1 declared in L2"]},{"entry":[{},"\u2003\u2003PList G1.L1; # OK. Refers to L1 declared in G1."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003# Error. Redeclaring name L1 when the enclosing"]},{"entry":[{},"scope"]},{"entry":[{},"\u2003\u2003# defined by G1 already has an L1 declared in it."]},{"entry":[{},"\u2003\u2003LocalPList L1;"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0159","list-style":"none"},"li":{"@attributes":{"id":"ul0159-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0160","list-style":"none"},"li":["6. Each pattern list file contains the definition for one or more global pattern lists. This follows directly from the syntax. The outermost level is a global-pattern-list-definition, and there must be at least one of them.","7. The pattern-name is a reference to a pattern, following the Pat keyword. It references a pattern that is in a pattern file whose name is obtained by concatenating a suffix .pat to the pattern name. The file denotes a file that will be obtained along a search path defined for patterns.","8. A pattern-list-reference is a reference to a pattern list following the PList keyword. The reference consists of an optional filename followed by a qualified pattern list name which is just a list of names separated by dots. So, for instance, the following could be a pattern-list-reference:\n        \n        ","referring to a local pattern list L3 nested in L2 nested in L1 nested in a global pattern list G1 that is in a file foo.plist. The leftmost name segment in the above name is G1."]}}}},"The leftmost name segment must resolve to either a global pattern list, or else to a local pattern list that is visible from the point of reference.","Name resolution of a pattern-list-reference proceeds as follows:\n\n","As mentioned earlier, the above rules dictate that the leftmost name segment resolves to either a local pattern list that is visible from the point of reference, or else to a global pattern list.","The following example illustrates some of these ideas.",{"@attributes":{"id":"p-0456","num":"0728"},"tables":{"@attributes":{"id":"TABLE-US-00067","num":"00067"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003GlobalPlist G1"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003PList G3; # OK. Refers to a pattern list later in this"]},{"entry":[{},"\u2003file."]},{"entry":[{},"\u2003\u2003\u2003PList G4; # OK. Refers to a pattern list in file"]},{"entry":[{},"\u2003\u201cG4.plist\u201d"]},{"entry":[{},"\u2003\u2003\u2003# OK. Refers to G1 in the file \u201cmy_plists.plist\u201d."]},{"entry":[{},"\u2003\u2003\u2003PList my_plists.plist:G1;"]},{"entry":[{},"\u2003\u2003\u2003# OK. Refers to a pattern list in file \u201cmy_plists.plist\u201d."]},{"entry":[{},"\u2003The"]},{"entry":[{},"\u2003\u2003\u2003# qualified name refers to a local pattern list named L2"]},{"entry":[{},"\u2003declared"]},{"entry":[{},"\u2003\u2003\u2003# in the scope of a local pattern list named L1 declared"]},{"entry":[{},"\u2003in the"]},{"entry":[{},"\u2003\u2003\u2003# scope of a global pattern list named G1."]},{"entry":[{},"\u2003\u2003\u2003PList my_plists.plist:G1.L1.L2;"]},{"entry":[{},"\u2003\u2003\u2003LocalPList L1"]},{"entry":[{},"\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003LocalPList L2"]},{"entry":[{},"\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003PList L1; # OK. Refers to L1 declared in the"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003# enclosing scope of G1"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003GlobalPlist G2"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003LocalPList L2"]},{"entry":[{},"\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003GlobalPList G3"]},{"entry":[{},"\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003LocalPList L3"]},{"entry":[{},"{"]},{"entry":[{},"}"]},{"entry":[{},"\u2003\u2003PList L1; # Error. No L1 declared in this or any enclosing"]},{"entry":[{},"\u2003\u2003\u2003\u2003# scope;"]},{"entry":[{},"\u2003\u2003# Error. The name L2 is not declared in this scope. Also"]},{"entry":[{},"\u2003\u2003# though L2 is declared in the enclosing scope, this scope"]},{"entry":[{},"\u2003\u2003# is global, and so no further enclosing scope is examined."]},{"entry":[{},"\u2003\u2003#"]},{"entry":[{},"\u2003\u2003# Contrast with reference to name L2 in LocalPList L3 below."]},{"entry":[{},"\u2003\u2003PList L2;"]},{"entry":[{},"\u2003\u2003PList G1.L1; # OK. Refers to L1 in G1."]},{"entry":[{},"\u2003\u2003# Error. G3 is not really nested inside G1. Since G3"]},{"entry":[{},"\u2003\u2003# is global, it is really declared at an outermost level,"]},{"entry":[{},"\u2003\u2003# and so G1.G3 is meaningless."]},{"entry":[{},"\u2003\u2003PList G2.G3.L3;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003LocalPList L3"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003# OK. Refers to G2.L2. The enclosing global scope is G2"]},{"entry":[{},"\u2003\u2003# and the name L2 is declared in G2."]},{"entry":[{},"\u2003\u2003PList L2;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"All pattern list file names and pattern file names are required to be unique across the test plan using them.","A pattern list reference can refer to a pattern list defined either before or after the reference in the same file.","Recursive and mutually recursive pattern list definitions are not permitted. While there is nothing in the pattern list file syntax to prevent the user from creating such definitions, the parser will flag an error when it detects such conditions. Note that there is some cost associated with the detection of such conditions. The user will be able to switch off the check if s\/he can assume the responsibility of guaranteeing that the input space is free from mutually recursive definitions.",{"@attributes":{"id":"p-0460","num":"0732"},"tables":{"@attributes":{"id":"TABLE-US-00068","num":"00068"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003GlobalPList G1"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003LocalPList L2"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003LocalPList L3"]},{"entry":[{},"\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003# Error. L2 runs L3 which runs L2."]},{"entry":[{},"\u2003\u2003\u2003\u2003# This is a recursive reference to L2"]},{"entry":[{},"\u2003\u2003\u2003\u2003PList L2;"]},{"entry":[{},"\u2003\u2003\u2003\u2003PList G2;"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003GlobalPList G2"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003# Error. G1.L2 runs L3 which runs G2 which runs"]},{"entry":[{},"G1.L2."]},{"entry":[{},"\u2003\u2003# This is a mutually recursive reference to G1.L2."]},{"entry":[{},"\u2003\u2003PList G1.L2;"]},{"entry":[{},"\u2003}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The syntactic description of patterns and pattern lists allows for options to be specified on them. In general options are vendor specific. The syntax allows for any pattern or pattern list to have a number of options specified, each with a number of parameters. In we describe some supported options that will be recognized by most vendors.","The dynamic (i.e., execution) semantics of pattern trees is described in after defining a pattern execution sequence.","E2. Patterns",{"@attributes":{"id":"p-0463","num":"0735"},"figref":"FIG. 6","b":["602","604","606"],"ul":{"@attributes":{"id":"ul0164","list-style":"none"},"li":{"@attributes":{"id":"ul0164-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0165","list-style":"none"},"li":["1. A Pattern object is not creatable by the user; rather, the user always deals with pattern lists, which are collections of other pattern lists and\/or patterns. A pattern list object creates, owns and maintains the pattern objects contained within it, while making them accessible to the user if necessary.","2. A pattern is uniquely named within a test plan, i.e., no two patterns within the test plan can have the same name. The name of a pattern is distinct from the name of the file containing it. The pattern file name is the one used in the pattern list file to refer to a pattern, while the actual name of the pattern is defined in the pattern file."]}}}},"In an embodiment of the invention, in general, a single DUT (device-under-test) might be connected to tester modules from different vendors. This has implications for the entire pattern compile-load-execute chain. The main ones are described in this section.","E3. Pattern Compilation","A pattern compiler  thus needs to target a specific site configuration (in terms of the vendor-specific digital modules used). For the rest of this discussion, the term \u201cmodule\u201d will be used to refer to a digital module, as an example. In order to allow the integration of modules  from different vendors into the system, the following procedures are preferred:\n\n","The OFM APIs will allow a module vendor's compiler to write module-specific header information and data into the object metafile. Note that this layout of the object metafile allows the pattern data to be organized on a per-module basis, even in the case where two or more modules in the targeted site are identical.","Note that additional vendor-supplied configuration information might be needed by pattern compilers to facilitate the generation of module-specific hardware loading information that can take advantage of efficient data communications such as direct memory access (DMA).","E4. Pattern Load for a Module","Each module vendor will be responsible for providing its own pattern loading mechanism , following the general procedure. The pattern object metafile  of a module  stores module-specific data in different sections . The vendor implementation will use the OFM APIs for accessing the relevant module-specific sections from the pattern object metafile. The tester framework will be responsible for calling each module's load method in turn to load module-specific data to a module from the appropriate section of the metafile.","E5. Pattern Files","It is possible to have each compiler vendor specify entirely different plain text formats for patterns, which, in fact, might indeed be necessary in most cases. However, in general, for a cycle-based testing environment, where coherent and identical semantics across modules are necessary for every vector, a shared, generalized syntax for the pattern file is not only desirable, but may be necessary. This shared syntax is what will be specified for the \u201ccommon\u201d section in the pattern source file. In fact, for the majority of cases, it is envisioned that the \u201ccommon\u201d section is the only section (besides header information) that will be required in the pattern file, and every vendor's compiler will work with only that section. This section presents rules for the pattern file that all compilers should be able to interpret. The pattern file will be organized as follows:",{"@attributes":{"id":"p-0470","num":"0757"},"tables":{"@attributes":{"id":"TABLE-US-00069","num":"00069"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["file_contents","\u2003\u2003\u2002:"]},{"entry":[{},"\u2003\u2003\u2003\u2002version_info pattern_definitions"]},{"entry":["version_info","\u2003\u2003:"]},{"entry":[{},"\u2009Version version-identifier \u2018;\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pattern_definitions\u2003\u2003\u2003\u2003\u2003\u2002:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009pattern_definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pattern_definitions pattern_definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pattern_definition\u2003\u2003\u2003:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"main_header \u2018{\u2018 main_section \u2019}\u2019"]},{"entry":[{},"main_header \u2018{\u2018 main_section vendor_sections \u2019}\u2019"]},{"entry":[{},"subr_header \u2018{\u2018 subr_section \u2019}\u2019"]},{"entry":[{},"subr_header \u2018{\u2018 subr_section vendor_sections \u2019}\u2019"]},{"entry":["main_header","\u2003\u2002:"]},{"entry":[{},"MainPattern identifier"]},{"entry":["main_section","\u2003\u2002:"]},{"entry":[{},"CommonSection \u2018{\u2018 common_contents"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"main_section_domains \u2019}\u2019"},{"entry":"common_contents\u2003\u2003:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"timing_reference timing_map_reference"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"timing_reference\u2003\u2003\u2002:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Timing file-name \u2018;\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"timing_map_reference\u2002:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"TimingMap file-name \u2018;\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"main_section_domains\u2002\u2009:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"main_section_domains main_section_domain"]},{"entry":[{},"main_section_domain"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"main_section_domain\u2002\u2009:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009Domain domain_name \u2018{\u2018 main_section_contents \u2019}\u2019"]},{"entry":["domain_name","\u2003\u2003:"]},{"entry":[{},"\u2009identifier"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"main_section_contents\u2002:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"main_section_contents main_section_content"]},{"entry":[{},"\u2009main_section_content"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"main_section_content\u2003:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"label_spec main_pattern_spec"]},{"entry":[{},"\u2009main_pattern_spec"]},{"entry":["label_spec","\u2002\u2009:"]},{"entry":[{},"\u2009label \u2018;\u2019"]},{"entry":["label",":"]},{"entry":[{},"\u2009identifier"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"main_pattern_spec\u2003\u2002\u2009:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009main_operation capture_mask_flag \u2018{\u2018"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"vectors_and_waveforms \u2019}\u2019"},{"entry":"main_operation\u2003\u2003\u2003:\u2002\/* empty *\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009common_operation"]},{"entry":[{},"\u2009jal_op"]},{"entry":[{},"\u2009jsr_op"]},{"entry":[{},"\u2009jsrc_op"]},{"entry":[{},"\u2009jsc_op"]},{"entry":[{},"\u2009exit_op"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"common_operation\u2003\u2003\u2009:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009idxi_op"]},{"entry":[{},"\u2009idxin_op"]},{"entry":[{},"\u2009jec_op"]},{"entry":[{},"\u2009jech_op"]},{"entry":[{},"\u2009jff_op"]},{"entry":[{},"\u2009jffi_op"]},{"entry":[{},"\u2009jni_op"]},{"entry":[{},"\u2009ldin_op"]},{"entry":[{},"\u2009nop_op"]},{"entry":[{},"\u2009pause_op"]},{"entry":[{},"\u2009sndc_op"]},{"entry":[{},"\u2009sndt_op"]},{"entry":[{},"\u2009stfi_op"]},{"entry":[{},"\u2009sti_op"]},{"entry":[{},"\u2009stps_op"]},{"entry":[{},"\u2009wait_op"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/*"},{"entry":"\u2009* Instructions specific to the MAIN Patterns"},{"entry":"\u2009*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["jsr_op","\u2002:"]},{"entry":[{},"\u2002\u2009JSR identifier"]},{"entry":["jsrc_op","\u2002:"]},{"entry":[{},"\u2002\u2009JSRC identifier"]},{"entry":["jsc_op","\u2009:"]},{"entry":[{},"\u2002\u2009JSC identifier"]},{"entry":["jal_op","\u2002:"]},{"entry":[{},"\u2002\u2009JAL identifier"]},{"entry":["exit_op","\u2002:"]},{"entry":[{},"\u2002EXIT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/*"},{"entry":"\u2009* Instructions common to both MAIN and SUBR Patterns"},{"entry":"\u2009*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["idxi_op","\u2002:"]},{"entry":["0","\u2002IDXI 24-bit number"]},{"entry":["idxin_op","\u2003:"]},{"entry":[{},"\u2002IDXIn index-register"]},{"entry":["jec_op","\u2002:"]},{"entry":[{},"\u2002JEC identifier"]},{"entry":["jech_op","\u2003:"]},{"entry":[{},"\u2002JECH identifier"]},{"entry":["jff_op","\u2009:"]},{"entry":[{},"\u2002JFF identifier"]},{"entry":["jffi_op","\u2009:"]},{"entry":[{},"\u2009JFFI identifier"]},{"entry":["jni_op","\u2009:"]},{"entry":[{},"\u2009JNI identifier"]},{"entry":["ldin_op","\u2002:"]},{"entry":[{},"\u2009LDIN index-register"]},{"entry":["nop_op","\u2002\u2009:"]},{"entry":[{},"\u2009NOP"]},{"entry":["pause_op","\u2003:"]},{"entry":[{},"\u2009PAUSE"]},{"entry":["sndc_op","\u2002:"]},{"entry":[{},"\u2009SNDC 8-bit number"]},{"entry":["sndt_op","\u2002:"]},{"entry":[{},"\u2009SNDT 8-bit number"]},{"entry":["stfi_op","\u2009:"]},{"entry":[{},"\u2009STFI 24-bit number"]},{"entry":["sti_op","\u2009:"]},{"entry":[{},"\u2009STI 24-bit number"]},{"entry":["stps_op","\u2002:"]},{"entry":[{},"\u2009STPS"]},{"entry":["wait_op","\u2003:"]},{"entry":[{},"\u2009WAIT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"capture_mask_flag\u2003\u2002\u2009:\u2002\u2009\/* empty *\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009capture_mask_flag CTV"]},{"entry":[{},"\u2009capture_mask_flag MTV"]},{"entry":[{},"\u2009capture_mask_flag MATCH"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"vectors_and_waveforms\u2002\u2009:\u2002\u2009\/* empty *\/"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009vectors_and_waveforms vector"]},{"entry":[{},"\u2009vectors_and_waveforms waveform"]},{"entry":["vector","\u2009:"]},{"entry":[{},"\u2002vector_declaration \u2018{\u2018 vector_data \u2019}\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"vector_declaration\u2003\u2002:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009Vector"]},{"entry":[{},"V"]},{"entry":["vector_data","\u2003\u2009:"]},{"entry":[{},"\u2009vector_datum"]},{"entry":[{},"\u2002vector_data vector_datum"]},{"entry":["vector_datum","\u2003\u2003:"]},{"entry":[{},"\u2009pin_name \u2018=\u2019 vector-value \u2018;\u2019"]},{"entry":[{},"\u2002pin_name \u2018=\u2019 identifier \u2018;\u2019"]},{"entry":["waveform","\u2002\u2009:"]},{"entry":[{},"\u2002waveform_declaration \u2018{\u2018 waveform_data \u2019}\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"waveform_declaration\u2003\u2009:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009Waveform"]},{"entry":[{},"W"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"waveform_data\u2003\u2003\u2003\u2002:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009waveform_datum"]},{"entry":[{},"\u2002waveform_data waveform_datum"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"waveform_datum\u2003\u2003\u2003\u2009:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009waveform-table-pin-group-name \u2018=\u2019 identifier \u2018;\u2019"]},{"entry":["pin_name","\u2009\u2003:"]},{"entry":[{},"\u2009identifier"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"vendor_sections\u2003\u2003\u2009:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009vendor_sections vendor_section { }"]},{"entry":[{},"\u2002vendor_section { }"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"vendor_section\u2003\u2003\u2003:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009VendorSection \u2018{\u2018 vendor_section_contents \u2019}\u2019"]},{"entry":["subr_header","\u2003\u2009:"]},{"entry":[{},"\u2009SubrPattern"]},{"entry":["subr_section","\u2003\u2002:"]},{"entry":[{},"\u2009CommonSection \u2018{\u2018 common_contents"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"source_selection_table subr_section_domains \u2019}\u2019"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009CommonSection \u2018{\u2018 common_contents"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"subr_section_domains \u2019}\u2019"},{"entry":"subr_section_domains\u2003\u2009:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009subr_section_domains subr_section_domain"]},{"entry":[{},"\u2002subr_section_domain"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"subr_section_domain\u2002\u2009:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009Domain domain_name \u2018{\u2018 subr_section_contents \u2019}\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"source_selection_table :"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009SourceSelectionTable \u2018{\u2018"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"source_selector_definitions \u2019}\u2019"},{"entry":"source_selector_definitions:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009source_selector_definitions"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"source_selector_definition"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2002\u2009source_selector_definition"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"source_selector_definition:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2002SourceSelector source_selector_name \u2018{\u2018"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"source_mappings \u2019}\u2019"},{"entry":"source_selector_name\u2003:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009identifier"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"source_mappings\u2003\u2003\u2009:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002source_mappings source_mapping"]},{"entry":[{},"\u2002\u2009source_mapping"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"source_mapping\u2003\u2003\u2009:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002\u2009pin_name \u2018=\u2019 source \u2018;\u2019"]},{"entry":["source","\u2002:"]},{"entry":[{},"\u2002\u2009MAIN"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003INVERT_MAIN"},{"entry":"\u2003\u2003\u2003\u2003SUBR"},{"entry":"\u2003\u2003\u2003\u2003INVERT_SUBR"},{"entry":"subr_section_contents\u2003:"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002\u2009subr_section_contents subr_section_content"]},{"entry":[{},"\u2002subr_section_content"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"subr_section_content\u2003:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002\u2009label_spec subr_pattern_spec"]},{"entry":[{},"\u2002subr_pattern_spec"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"subr_pattern_spec\u2003\u2003:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009subr_operation capture_mask_flag \u2018{\u2018"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"vectors_and_waveforms \u2019}\u2019"},{"entry":"subr_operation\u2003\u2003\u2002:\u2002\/* empty *\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002common_operation"]},{"entry":[{},"\u2002rtn_op"]},{"entry":[{},"\u2002stss_op"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/*"},{"entry":"\u2009* Instructions specific to the SUBR Patterns"},{"entry":"\u2009*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["rtn_op","\u2009:"]},{"entry":[{},"\u2009RTN"]},{"entry":["stss_op","\u2002:"]},{"entry":[{},"\u2009STSS identifier"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The following are the descriptions of undefined non-terminals used above:\n\n","Pattern files will support comments, which are meant to be ignored by a pattern file compiler. Comments will start with the \u2018#\u2019 character, and extend to the end of the line.","The following points should be noted with reference to the constructs in the pattern file's header and \u201ccommon\u201d sections:\n\n","Note that while waveform-time-reference names could be anything that is syntactically correct, due to specific hardware implications the waveform-time-reference names may need to be restricted to a previously known, well-defined set (which, for added readability, can be optionally mapped by the user to user-chosen names, the mapping presented in an optional file).","Also note that the pattern and waveform-time-reference source files should provide initial configuration data for all DUT channels which have connections to physical tester channels. If subsequent data is omitted for any DUT channel, the pattern compiler will \u201cpad\u201d the pattern data to hold output from the initial level.","Pattern File Example","A simple example of a MAIN Pattern source file will help illustrate the usage.",{"@attributes":{"id":"p-0477","num":"0777"},"tables":{"@attributes":{"id":"TABLE-US-00070","num":"00070"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2002#"},{"entry":"\u2002# Filename : good1.pat"},{"entry":"\u2002#"},{"entry":"\u2002Version 1.0;"},{"entry":"\u2002#----------------------------------------------------------------------"},{"entry":"\u2002# Main Pattern definition:"},{"entry":"\u2002#----------------------------------------------------------------------"},{"entry":"\u2002MainPattern good1"},{"entry":"\u2002{"},{"entry":"\u2003CommonSection"},{"entry":"\u2003{"},{"entry":"\u2003\u2002MacroDef\u2003\u2003defaultDataVal\u2003\u2002(XXXXXXXX)"},{"entry":"\u2003\u2002MacroDef\u2003\u2003nopInstr\u2003\u2003\u2003(NOP)"},{"entry":"\u2003\u2002MacroDef\u2003\u2003label1\u2003\u2003\u2003\u2002(Label1 : )"},{"entry":"\u2003\u2002MacroDef\u2003\u2003jniInst\u2003\u2003\u2003\u2009(JNI)"},{"entry":"\u2003\u2002#------------------------------------------------------------------"},{"entry":"\u2003\u2002#\u2003Timing Specifications"},{"entry":"\u2003\u2002#------------------------------------------------------------------"},{"entry":"\u2003\u2003\u2002Timing \u201cproductionTiming.tim\u201d;"},{"entry":"\u2003\u2003\u2002TimingMap \u201cproductionTimingOpenSTARMap.tmap\u201d;"},{"entry":"\u2003\u2002#------------------------------------------------------------------"},{"entry":"\u2003\u2002# Default Domain Cycles"},{"entry":"\u2003\u2002#------------------------------------------------------------------"},{"entry":"\u2003\u2002Domain default"},{"entry":"\u2003\u2002{"},{"entry":"\u2003\u2003#----------------------------------------------------------------"},{"entry":"\u2003\u2003#label: instruction {Vector\/Waveform Data}"},{"entry":"\u2003\u2003#----------------------------------------------------------------"},{"entry":"\u2003\u2003\u2003\u2002NOP\u2003\u2003\u2003\u2003\u2002{ V { DATA = $defaultDataVal; CLK = 1;}"},{"entry":"W { DATA = wfs1; CLK = wfs1; } }"},{"entry":"\u2003\u2003\u2003\u2002JAL\u2003\u2009myAPG\u2003\u2003\u2002{ V { DATA = 00000000; } }"},{"entry":"\u2003\u2003\u2003\u2002JSC\u2003\u2009mySCAN\u2003\u2003\u2009{ V { DATA = 10101010; } }"},{"entry":"\u2003\u2003\u2003\u2002JSRC\u2003\u2009mySubroutine { V { DATA = 01010101; } }"},{"entry":"\u2003\u2003\u2003\u2002JSR\u2003\u2009myAPG\u2003\u2003\u2002{ V { DATA = 00110011; } }"},{"entry":"\u2003\u2003\u2003\u2002STI\u2003\u2009100\u2003\u2003\u2002{ }"},{"entry":"\u2003\u2002labZero: NOP\u2003\u2003\u2003\u2003\u2009{ V { DATA = 00000011; } }"},{"entry":"\u2003\u2003\u2003\u2002JNI\u2003labZero\u2003\u2002\u2009{ V { DATA = 11111100; } }"},{"entry":"\u2003\u2003\u2003\u2002IDXI\u2003\u20093000\u2003\u2003{ V { DATA = 10101010; } }"},{"entry":"\u2003\u2003\u2003\u2002IDXIn\u20033\u2003\u2003\u2002{ V { DATA = 01010101; } }"},{"entry":"\u2003\u2002$label1\u2003NOP\u2003\u2003\u2003\u2003\u2002{ V { DATA = $defaultDataVal; } }"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002IDXI\u20032000\u2003{ V { DATA = 10101010; } }"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002NOP\u2003\u2003\u2002\u2009{ }"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002EXIT\u2003\u2003\u2002{ V { DATA = LLHHLLHH; } }"},{"entry":"\u2003\u2002}"},{"entry":"\u2003\u2003}"},{"entry":"\u2002}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Another example illustrating a SUBROUTINE pattern source file is illustrated below.",{"@attributes":{"id":"p-0479","num":"0779"},"tables":{"@attributes":{"id":"TABLE-US-00071","num":"00071"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003#--------------------------------------------------------------------",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003# Subroutine Pattern mySubrPat1 definition:",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003#--------------------------------------------------------------------",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003SubrPattern mySubrPat1",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003{",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002CommonSection",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002{",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#----------------------------------------------------------------",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#\u2003Timing Specifications",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#----------------------------------------------------------------",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Timing \u201cproductionTiming.tim\u201d;",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003TimingMap \u201cproductionTimingOpenSTARMap.tmap\u201d;",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#----------------------------------------------------------------",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#\u2003Source Selection Specifications",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#----------------------------------------------------------------",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003SourceSelectionTable",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002SourceSelector SrcSelDef",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002{",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009DATA=SUBR; CLK=SUBR; DATA=SUBR;",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002}",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002SourceSelector SrcSelOne",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002{",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009DATA=MAIN; CLK=MAIN;",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002}",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002}",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#----------------------------------------------------------------",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#\u2003Default Domain Cycles",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#----------------------------------------------------------------",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Domain default",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#----------------------------------------------------------------",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#label :\u2003instruction\u2003{ Vector and Waveform Data setups }",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003#----------------------------------------------------------------",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003STI\u2003\u2009100\u2003\u2009{ Vector { DATA = 00000000; } }",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003IDXI\u20033000\u2003{ Vector { DATA = 00001111; } }",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003IDXIn\u2002\u20093\u2003\u2002\u2009{ Vector { DATA = 00110011; } }",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2009$label1 NOP\u2003\u2003\u2003{ Vector { DATA = LLHHLLHH; } }",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003NOP\u2003\u2003\u2003{ Vector { DATA = LLXXXXXX; } }",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003NOP\u2003\u2003\u2003{ Vector { DATA = LLHHXXXX; } }",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003JNI Label1\u2003\u2002{ Vector { DATA = LLHHLLHH; } }",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003STSS SrcSelOne { Vector { DATA = LHLHLHLH; } }",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003RTN\u2003\u2003\u2003{ Vector { DATA = LLXXXXXX; } }",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003}",{}]},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003\u2003}",{}]},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Summary information from the main header and common section in the pattern source file is stored in the main header in the object metafile. The summary consists of information that is typically required for quick extraction to aid pre-load resolution of addresses, etc., or to aid in datalogging. Since the semantics of the common section are exactly the same for all compilers, every compiler will be capable of providing the same summary information, and the first compiler writing the metafile will store this information. The following is the information that will be stored:\n\n","The open architecture test system requires both pattern and pattern list files to have explicit, and different, extensions. For pattern files, this applies to both plain text source and compiled object files. This is viewed as a convenience to the user to quickly identify the file type visually in a directory listing, etc., as well as allow associations to be made on the basis of extensions. The pattern list file parser will expect filenames with these extensions:\n\n","The user can override these default values, e.g., through tester environment variables or setup options.","The tester will require the definition of the following \u201cenvironment\u201d variables for file search paths in at least one of the environment configuration files described in:\n\n","Note that if the optional environment\/setup variable Tester_PATSRC_PATH is not defined, it will be assumed to be the same as Tester_PATOBJ_PATH. In general, it would be more efficient to not define Tester_PATSRC_PATH rather than define it with the same value as Tester_PATOBJ_PATH.","E6. Software Representation","A Pattern object is not created by the user; rather, the user always deals with Pattern List objects, which are collections of other pattern lists and\/or patterns. A Pattern List object creates, owns and maintains the pattern objects contained within it, while making them accessible to the user. A pattern list object in the user's test program is associated with a pattern list file on disk, which contains the actual definition of the pattern list. The definition of a pattern list provides an explicit name for the pattern list, and identifies an ordered list of patterns and\/or other pattern lists through file name associations. This section describes the software representation of pattern lists and patterns, as a prelude to understanding how they are manipulated in the tester framework.","Pattern List Associations","A single test site in the test system (and, by extension, the test plans in it) can be associated with multiple top-level pattern lists. However, there is only a single execution context for test plans at any given time. Since a top-level pattern list defines an execution sequence for the patterns referred to (hierarchically) by it, the active execution context is the one corresponding to the currently selected top-level pattern list. Note that this does not imply that only the patterns contained in a single pattern list can be loaded on the hardware at one time; rather, the set of patterns that are required to be loaded on the hardware to make an execution sequence viable must always be a subset of all the currently loaded patterns.","Pattern Trees","Intuitively, it is felt that a way to represent a top-level pattern list is by some sort of a tree data structure.  illustrates an embodiment of an ordered pattern tree of the invention, assuming that the pattern list A is the top-level pattern list","Pattern Tree Information Content","The following information will be stored at every node of the pattern tree:\n\n","The following additional information will be stored only in intermediate (pattern list) nodes:\n\n","Thus, the collection of nodes encountered on the unique path from the root to an intermediate node, and the sequence in which they are encountered, contain all the information necessary to determine the combined, effective, execution options represented by that node. The execution options of a pattern are determined by the effective execution options of its immediate parent, combined with the reference options its immediate parent might have for it.","It should be noted here that while the pattern list parser is in the process of creating the pattern tree, certain execution options might require initial storage of values simply as strings, since the context of their use might not be resolved until later. An example of such an option is a \u201cmask\u201d option, which specifies pin mask information: pattern lists are not associated with Socket information, and hence, pin mask options (pin and group names) are stored as strings, to be resolved prior to loading.","The following additional information will be stored only in leaf (pattern) nodes:\n\n","Of course, all pattern nodes will additionally have access to\u2014and might choose to cache\u2014all the pattern file summary information available in the object metafile common header.","Handling Pattern List Modifications","Changes made to the contents of a pattern list conceptually affect all references to that pattern list. The following rules, which apply as appropriate to pattern objects as well as pattern list objects, will be used to manage such changes:\n\n","The top-level pattern lists associated with a test site (and, by extension, with a test plan for that site) have public (global) scope. The system provides APIs to navigate the pattern tree representing a top-level pattern list so that users can get access to individual nodes and sub-trees.","E7. Pattern List Dynamics","Earlier the static rules of Pattern Lists were described. A description of the dynamic (execution) rules of pattern lists is now presented.","The pattern tree is essential for general pattern management. For example, the starting point for a pattern load sequence is a call to the load( )method on the pattern tree currently associated with the site or test plan. However, a pattern tree does not operate in isolation. A fully initialized pattern tree will be used to create the following two framework objects:","1. A top-level pattern list defines a Pattern Execution Sequence for the patterns. It describes how such an execution sequence can be derived from the pattern tree corresponding to that top-level pattern list. For example, the pattern execution sequence corresponding to the pattern tree A shown in  is {q, s, t, q, r, q, u, u, v}. The Pattern Execution Sequence is conceptually an ordered list reflecting the execution sequence described through the pattern tree. The framework establishes and maintains any necessary navigation links between pattern tree nodes and corresponding entries in the Pattern Execution Sequence.","2. The Pattern Set, which is simply a list of all the unique patterns (including subroutines) in the pattern tree. This is thus the list that will be used to determine the individual patterns that should be loaded on the hardware. The framework establishes and maintains any necessary navigation links between pattern tree nodes and corresponding entries in the Pattern Set. The Pattern Set for the pattern tree of  is (q, s, t, r, u, v) (it is assumed that none of the patterns in pattern list A contain any subroutine calls):","Note that both the Pattern Execution Sequence and the Pattern Set can always be derived from the pattern tree; however, it would often make sense to cache them, after initial construction, for as long was viable.","Pattern List Execution Options","As shown above, each pattern list declaration (preceding its definition) or pattern list\/pattern reference entry can be followed by a number of execution options. Pattern list execution options modify the runtime execution of pattern lists. To allow future extensions, the names (and optional values) for these options will be treated simply as strings by the pattern list file parser of the pattern compiler, to be interpreted by a particular version as appropriate. Tester prescribes a set of options and their interpretations, described below. However, vendors can extend the set of options. In order to allow a parse-time validation of option syntax, the pattern list file parser could read an information file for a particular version. Such an information file could also be used to specify whether a particular version at all supports the specification of execution options.","For versions that support a set of execution options, the following general rules will govern their use. In order to understand these rules, it is useful to visualize the hierarchical collection of pattern lists\/patterns as an ordered tree.\n\n","Note that a consequence of the above rules\u2014and the fact that there is no facility to set execution options on a pattern definition in a pattern file\u2014is that there is no direct rule to set options which apply to all references to a pattern. The mechanism for achieving this is to use a single-pattern pattern list.","The tester specifies a certain set of pattern list execution options that modify its burst behavior, and that modify its execution sequence.","When an execution sequence for a pattern list is submitted to the hardware, the hardware produces a burst. A Burst is the execution of a sequence of patterns directly by the hardware, without any involvement from the software. A Burst Discontinuity is a position in an execution sequence where a prior burst is terminated, and a new burst is started.","One of the objectives of the pattern management software is to provide the hardware with the execution sequences that it needs to produce a burst on. By default, a pattern tree yields an execution sequence, which if submitted to the hardware will result in a single burst. This behavior can however be modified by the use of options on the pattern list. Thus, the use of options result can result in burst discontinuities.","Furthermore, users will sometimes require a prologue or epilogue pattern to be run before or after every pattern or every burst. This modifies the execution sequence to be submitted to the hardware.","During the creation or modification of the Pattern Execution Sequence object, the framework has all the information necessary to determine, and report if required, breaks in pattern bursts resulting from the combination of execution options specified and the particular execution sequence embodied by the pattern tree. While doing this, it might need to investigate the hardware capabilities of the modules in the system. For example, one hardware implementation allows four stored configurations for pin masks, of which two (0 and 3) are used for default masked (to support Mask This Vector, MTV) and unmasked operation. The user is thus allowed two different global pin-mask configurations without breaking burst mode.","Note that if a module vendor does not support pattern list implementations in hardware, the vendor's processing of the Pattern Execution Sequence would result in individual execution of all patterns in the execution sequence. In both Site-Compatible and Site-Heterogeneous systems, the burst capability of sites would be limited by the \u201clowest common denominator\u201d. The tester provides for a certain default set of options and their parameters is described below. Each option is specified by stating:\n\n","Below is the list of options. Every compliant vendor will interpret these options as specified.\n\n","As described earlier, when an execution sequence for a pattern list is submitted to the hardware, the hardware produces a burst of a sequence of patterns, without any involvement from the software. A Burst Discontinuity is a position in an execution sequence where a prior burst is terminated, and a new burst is started. The PreBurst, PostBurst, BurstOff and BurstOffDeep options control where the burst discontinuities occur, as described in the option list above. PreBurst and PostBurst options determine burst discontinuities subject to certain additional rules described below:\n\n","Below are a few examples illustrating the effect of options on the execution sequence. To simplify, it is assumed that all the pattern lists are specified in a single file.","This example illustrates BurstOff and PreBurst. Of particular emphasis is that BurstOff causes patterns to run singly in bursts that are one pattern long. Hence the PreBurst option still applies. The input pattern lists are as below:",{"@attributes":{"id":"p-0514","num":"0917"},"tables":{"@attributes":{"id":"TABLE-US-00072","num":"00072"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Global A [BurstOff] [PreBurst pat_z]"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2002Pat","q;"]},{"entry":[{},"\u2003\u2002PList","B;"]},{"entry":[{},"\u2003\u2002Pat","r;"]},{"entry":[{},"\u2003\u2002Pat","s;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2002Global C"]},{"entry":[{},"\u2003\u2002{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\u2003Pat","t;"]},{"entry":[{},"\u2003\u2003\u2003PList","D;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2002};",{}]},{"entry":[{},"\u2003\u2002PList","D;"]},{"entry":[{},"\u2003\u2002PList","E;"]},{"entry":[{},"};",{}]},{"entry":[{},"Global B",{}]},{"entry":[{},"{",{}]},{"entry":[{},"\u2003\u2002Pat a;",{}]},{"entry":[{},"\u2003\u2002Pat b;",{}]},{"entry":[{},"};",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Global D [BurstOff]"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2002Pat c;"]},{"entry":[{},"\u2003\u2002Pat d;"]},{"entry":[{},"};"]},{"entry":[{},"Global E"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2002Pat e;"]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0214","list-style":"none"},"li":{"@attributes":{"id":"ul0214-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0215","list-style":"none"},"li":"The tree rooted at A may be represented in ."}}}},"The execution sequence for this pattern is below. The I character indicates a burst break. This pattern list executes in 10 bursts, the first one having patterns z and q, and the last one with pattern e:\n\n","Note the following about this execution sequence:\n\n","This example illustrates the BurstOffDeep option. BurstOffDeep during pattern list definition affects nested definitions and referenced lists. However, PreBurst and PostBurst options are not inherited by nested and referenced lists. The example uses the same patterns A, B, C, D, E as in example 1, but the options are different:\n\n","The execution sequence is as below. As earlier, the I character indicates a burst break.\n\n","Note the following about this execution sequence:\n\n","Suppose now the pattern list tree of Example 1 is considered, where the options are:\n\n","The execution sequence would be:\n\n","The reasons why the \u201ct c d\u201d subsequence is not \u201cx t c d z\u201d are as follows:\n\n","This example illustrates the effect of the Skip option on nested definitions and referenced lists. The example uses the same patterns A, B, C, D, E as in example 1, but the options are different:\n\n","The execution sequence is a single burst with no breaks as below:\n\n","Note the following about this execution sequence:\n\n","This example illustrates the effect of the Mask option and its effects on pattern and pattern list definitions and references. The example uses the same patterns A, B, C, D, E as in example 1, but the options are different:\n\n","The name \u201cpin1_pin2\u201d specifies a group which masks Pin1 and Pin2. The names \u201cpin3\u201d, \u201cpin4\u201d and \u201cpin5\u201d specify masking Pin3, Pin4 and Pin5 respectively. The execution sequence is provided below, with | indicating the burst break. The numerals below each pattern indicate the pins that are masked during that pattern execution.",{"@attributes":{"id":"p-0528","num":"0959"},"tables":{"@attributes":{"id":"TABLE-US-00073","num":"00073"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"15"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"11","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"12","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"13","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"14","colwidth":"7pt","align":"center"}},{"@attributes":{"colname":"15","colwidth":"21pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"15","align":"center","rowsep":"1"}}},{"entry":["z","q","a","b","z","r","z","s","t","c","d","c","d","|","e"]},{"entry":{"@attributes":{"namest":"1","nameend":"15","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","1","1","1","1","1","1","1","1","1","1","1","1",{},"1"]},{"entry":["2","2","2","2","2","2","2","2","2","2","2","2","2",{},"2"]},{"entry":[{},{},{},"3","3",{},{},{},{},{},{},{},{},{},"5"]},{"entry":[{},{},{},"4","4"]},{"entry":{"@attributes":{"namest":"1","nameend":"15","align":"center","rowsep":"1"}}}]}}}}},"Note the following about this execution sequence:\n\n","This example illustrates that an inherited option at a definition does not apply when the definition is referenced. Consider the following example:",{"@attributes":{"id":"p-0531","num":"0963"},"tables":{"@attributes":{"id":"TABLE-US-00074","num":"00074"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Global A"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2002Global B [BurstOffDeep]"]},{"entry":[{},"\u2003\u2002{"]},{"entry":[{},"\u2003\u2003Global C"]},{"entry":[{},"\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003..."]},{"entry":[{},"\u2003\u2003};"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"\u2003\u2002};"]},{"entry":[{},"\u2002\u2009..."]},{"entry":[{},"\u2002\u2009PList C;"]},{"entry":[{},"};"]},{"entry":[{},"Global D"]},{"entry":[{},"{"]},{"entry":[{},"\u2003PList C;"]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The BurstOffDeep option is inherited by C at its point of definition. However, it is not an intrinsic option, and so it is not applied to C at both its point of references.","Consider the following example:",{"@attributes":{"id":"p-0534","num":"0966"},"tables":{"@attributes":{"id":"TABLE-US-00075","num":"00075"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GlobalPList A [PreBurst x] [PostBurst y]"]},{"entry":[{},"{"]},{"entry":[{},"\u2003Pat p1;"]},{"entry":[{},"\u2003LocalPList B [PreBurst x] [PostBurst y]"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003Pat p2;"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003LocalPList C"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Pat p3;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003LocalPList D [PreBurst x] [PostBurst z]"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Pat p4;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003LocalPList E [PreBurst w] [PostBurst y]"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003{"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003Pat p5;"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003Pat p6;"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The execution sequence is:\n\n","The user interacts with the system primarily by defining the test setups using pattern files. The Timing File is used to describe the Timing of these patterns. This file requires other system files (e.g. Pin, SpecSelector) for underlying definitions to be resolved. Further the Spec-Selectors and Global definitions used to resolve various variables used in the Timing definition are encapsulated in a composite TestConditionGroup object. Higher-level files, such as the Test Plan file, in turn use this TestConditionGroup instance.","The Test Plan File contains references to the TestConditionGroup object. The Pattern Source File makes references to the WaveformSelector components within a TimingMap object. The Timing objects itself references the Pin objects. Optionally the Timing object might also reference a variable modulated by a SpecSelector object. These relationships are illustrated in .","The Pattern object within the Pattern-List specifies the name of the WaveformSelector object to use for a set of pattern characters. Also note that the Timing Map file is specified in the pattern. Patterns need not be compiled if this map is not changed.",{"@attributes":{"id":"p-0539","num":"0973"},"tables":{"@attributes":{"id":"TABLE-US-00076","num":"00076"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"chemistry":{"@attributes":{"id":"CHEM-US-00001","num":"00001"},"img":{"@attributes":{"id":"EMI-C00001","he":"55.03mm","wi":"57.57mm","file":"US08255198-20120828-C00001.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The TestConditionGroup File objects import the Timing object to use and the TimingMap object to use. Each Test uses a TimingCondition instance derived from the TestConditionGroup object for that instance. Thus multiple Timing objects, which support the same set of waveform tables, can be stored in the tester framework and can be swapped as required. Similarly multiple Test Plan Files can share a common TestConditionGroup object.","An example of a Test Plan description file illustrates the usage of the Timing object below.",{"@attributes":{"id":"p-0542","num":"0976"},"tables":{"@attributes":{"id":"TABLE-US-00077","num":"00077"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"chemistry":{"@attributes":{"id":"CHEM-US-00002","num":"00002"},"img":{"@attributes":{"id":"EMI-C00002","he":"50.21mm","wi":"63.25mm","file":"US08255198-20120828-C00002.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}]},{"entry":[{},{"chemistry":{"@attributes":{"id":"CHEM-US-00003","num":"00003"},"img":{"@attributes":{"id":"EMI-C00003","he":"30.23mm","wi":"41.15mm","file":"US08255198-20120828-C00003.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}]},{"entry":[{},"TestCondition tim1_prod_typ"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003TestConditionGroup = tim1_prod;"]},{"entry":[{},"\u2003Selector = typ;"]},{"entry":[{},"}"]},{"entry":[{},"TestCondition tim2_prod_max"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003TestConditionGroup = tim2_prod;"]},{"entry":[{},"\u2003Selector = max;"]},{"entry":[{},"}"]},{"entry":[{},"Test FunctionalTest MyFunctionalTestSlow"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003PListParam = patlist1;"]},{"entry":[{},"\u2003\u2003TestConditionParam = tim1_prod_typ;"]},{"entry":[{},"}"]},{"entry":[{},"Test FunctionalTest MyFunctionalTestFast"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003PListParam = patList1;"]},{"entry":[{},"\u2003\u2003TestConditionParam = tim2_prod_max;"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The Timing object defines various waveforms on a per pin basis. The pins used in the Timing file and the Timing Map file need to be defined appropriately in the Pin definition file.","The Timing object can use SpecificationSet objects to define values within the waveform objects. Though the Timing object can include hard-coded values for various attributes it is usually the case that users have various attributes be assigned values using variables. These variables in turn can depend on SpecificationSet objects. An example of this usage is illustrated below.",{"@attributes":{"id":"p-0545","num":"0979"},"tables":{"@attributes":{"id":"TABLE-US-00078","num":"00078"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00004","num":"00004"},"img":{"@attributes":{"id":"EMI-C00004","he":"47.92mm","wi":"72.56mm","file":"US08255198-20120828-C00004.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The SpecSelector is defined as illustrated below.",{"@attributes":{"id":"p-0547","num":"0981"},"tables":{"@attributes":{"id":"TABLE-US-00079","num":"00079"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SpecificationSet prodTmgSpec( min, max, typ)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2002t_le = 10ns, 14ns, 12ns;"]},{"entry":[{},"\u2003\u2002t_te = 30ns, 34ns, 32ns;"]},{"entry":[{},"\u2003\u2002..."]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The changing of the timing used by changing the spec is illustrated in the example below.",{"@attributes":{"id":"p-0549","num":"0983"},"tables":{"@attributes":{"id":"TABLE-US-00080","num":"00080"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"chemistry":{"@attributes":{"id":"CHEM-US-00005","num":"00005"},"img":{"@attributes":{"id":"EMI-C00005","he":"25.15mm","wi":"71.80mm","file":"US08255198-20120828-C00005.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Two components of a tester module are directly involved with the generation of wave shapes and their associated timings. The two modules are the Pattern Generator (PG) and the Frame Processor (FP). A simplified block diagram illustrating the wave shape formatting and the timing generation by the Frame Processor within the open architecture test system architecture is illustrated in . A brief description of the generation of waveforms is given below.","The Pattern Generator  generates a timing set which is common for all the pins in the module. This timing set is called the Global Timing Set (GTS). There are three modes in which the Pattern Generator can be set up. These three modes affect the number of bits that can be used to describe the GTS. In addition these settings also impact the number of bits used to select a bank and whether the Capture This Vector (CTV) and Mask This Vector (MTV) bits are set or not. To instruct the tester to capture the results of this vector, the user uses the CTV flag in the Pattern file. Similarly the user uses the MTV flag in the pattern to instruct the tester to mask the results of the current vector. This is illustrated in Table 1 below. The Pattern Generator  is also responsible for the generation of Waveform Characters (WFC). WFCs are generated on a per pin basis. The tester module uses a fixed number of bits to describe the WFCs.",{"@attributes":{"id":"p-0552","num":"0986"},"tables":{"@attributes":{"id":"TABLE-US-00081","num":"00081"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]},{"entry":[{},{},"GTS in a",{},{},{}]},{"entry":[{},"GTS bits","Bank","GTS Bank","CTV","MTV"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"8 bits","256","4","NO","NO"]},{"entry":[{},"7 bits","128","8","YES","NO"]},{"entry":[{},"6 bits","64","16","YES","YES"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]}}]}}},"The tester module provides a Frame processor  per pin. Each Frame Processor contains a Timing Set Scrambler (TSS) , which has a total depth of up to 1024 in this example. The TSS  can be partitioned into a number of banks  depending on the mode of the Pattern Generator as described earlier and illustrated in  where 16 banks of 64 entries per bank are being used. The TSS is provided so as to allow more flexibility in the ability to define Waveform Tables for each pin. In the \u201cFP\u201d mode the TSS outputs a Timing Set using 2 bits. Thus the TSS will generate a total of four distinct physical Timing Sets per pin. These Timing Sets are referred to as the Local Timing Sets (LTSs).","The Frame Processor  combines LTS and WFC and creates an index  into the Waveform Memory  and Timing Memory . In the \u201cFP\u201d mode the 5-bit value is split up with 2 bits being generated by the LTS and 3 bits being generated by the WFC. Thus the depth of the physical Waveform Memory and Timing Memory is 32 deep per pin though a maximum of 4 physical Timing Sets may be used. The Waveform Memory contains the enabled timing edges that form the wave shapes. The timing values for the enabled edges are obtained from the Timing Memory, Thus, the Frame Processor formats wave shapes.","Mapping Methodology","The methodology is to map all the WaveformTable blocks on a per pin basis to LTSs in the tester. If tester hardware supports 4 LTSs, the user can define a maximum of 4 WaveformTable blocks. Each WaveformTable block can have a maximum of n waveform definitions for the tester digital module.","The Timing-Map file provides a mapping of Logical WaveformSelectors defined in the Timing-Map block to the WaveformTable for the module in open architecture test system. In this case the tester supports up to 256 Logical WaveformSelectors. In open architecture test system system, the Logical WaveformSelectors map directly to the GTSs. The Pattern compiler depends on both the Timing-Map and the Timing blocks to be able to compile the pattern files. However if the waveform characters in the WaveformTables of the Timing block are unchanged or the WaveformSelector mappings in the Timing-Map block are unchanged, there is no need to re-compile the pattern.","Example Using this Mapping Methodology","To illustrate the mapping into a tester Digital Module the following assumptions are made: the Frame Processor is set to the FP mode; and CTV and MTV bits are set so total number of GTS bits is 6 and the total number of Timing Bank Selector bits is 4.","Each WaveformTable defined in the Timing block is mapped to a distinct LTS within the Timing file. This is done on a per-pin basis. Thus WaveformTable seq1 is mapped to LTS1. In the case of the \u201cSIG\u201d pin all 8 possible waveform entries are used up. However the \u201cCLK\u201d pin requires a single waveform entry and thus uses up a single row in the Waveform memory (WFT) and the Waveform Timing memory (WTM).","The mapping of the first 2 physical waveforms of the \u201cSIG\u201d pin is illustrated in . As this WaveformTable maps two waveform characters that need separate configurations of the edges, we end up allocating two entries in the Waveform memory (WFT)  and the Waveform Timing memory (WTM) . The shape of the waveform is stored in the WFM and the timing details are stored in the WTM. One embodiment of the module has a total of 6 timing edges T1, T2, T3, T4, T5 and T6. These map directly to the Events E1, E2, . . . defined in the waveforms within a Edge Resource section of the Timing block. If more than 6 events are defined in the Timing block and this is used with a the above module, it will result in an error.","In the example of , the first waveform character \u201c0\u201d uses Timing Edge T1 to program the \u201cForce Down\u201d or \u201cD\u201d event, which occurs at time 10 ns into the cycle. Timing Edge T2 is also used to generate a \u201cForce Down\u201d or \u201cD\u201d event at time 30 ns. Finally Timing Edge T3 is used to generate a \u201cForce Off\u201d or \u201cZ\u201d event at time 45 ns.","The second waveform character \u201c1\u201d uses Timing Edge T1 to program the \u201cForce Up\u201d or \u201cU\u201d event, which occurs at time 10 ns into the cycle. Timing Edge T2 is also used to generate a \u201cForce Down\u201d or \u201cD\u201d event at time 30 ns. Finally Timing Edge T3 is used to generate a \u201cForce Off\u201d or \u201cZ\u201d event at time 45 ns.","In this fashion, the WFCs are mapped into the WFM memory and WTM memory of the Frame Processor. The final setup of Waveform Memory WFM of LTS1 for pin \u201cSIG\u201d is illustrated in Table 2 below.",{"@attributes":{"id":"p-0564","num":"0998"},"tables":{"@attributes":{"id":"TABLE-US-00082","num":"00082"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","(WFC)","T1Set","T1ReSet","T2Set","T2ReSet","T2Drel","T2Dret","EXPH","EXPHZ"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}},{"entry":["0","0",{},"1",{},"1",{},{},{},{}]},{"entry":["1","1","1",{},{},"1",{},{},{},{}]},{"entry":["2","d",{},"1","1",{},{},{},{},{}]},{"entry":["3","u","1",{},{},"1",{},{},{},{}]},{"entry":["4","L",{},{},{},{},{},{},{},{}]},{"entry":["5","H",{},{},{},{},{},{},"1",{}]},{"entry":["6","m",{},{},{},{},{},{},{},{}]},{"entry":["7","n",{},{},{},{},{},{},"1"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index","T3Set","T3ReSet","T3Drel","T3Dret","T4Drel","T4Dret","EXPL","EXPHZ"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}},{"entry":[{},"0",{},{},{},"1",{},{},{},{}]},{"entry":[{},"1",{},{},{},"1",{},{},{},{}]},{"entry":[{},"2",{},{},{},"1",{},{},{},{}]},{"entry":[{},"3",{},{},{},"1",{},{},{},{}]},{"entry":[{},"4",{},{},{},{},{},{},"1",{}]},{"entry":[{},"5",{},{},{},{},{},{},{},{}]},{"entry":[{},"6",{},{},{},{},{},{},"1",{}]},{"entry":[{},"7"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}}]}}},"The final setup of Waveform Timing Memory WTM of LTS1 for pin \u201cSIG\u201d is illustrated in Table 3 below.",{"@attributes":{"id":"p-0566","num":"1000"},"tables":{"@attributes":{"id":"TABLE-US-00083","num":"00083"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}},{"entry":["Index","(WFC)","T1","T2","EXPH","T3","T4","EXPL"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","0","10 ns","30 ns",{},"45 ns",{},{}]},{"entry":["1","1","10 ns","30 ns",{},"45 ns",{},{}]},{"entry":["2","d","12 ns","32 ns",{},"42 ns",{},{}]},{"entry":["3","u","12 ns","32 ns",{},"42 ns",{},{}]},{"entry":["4","L",{},{},{},{},{},"17 ns"]},{"entry":["5","H",{},{},"17 ns",{},{},{}]},{"entry":["6","m",{},{},{},{},{},"15 ns"]},{"entry":["7","n",{},{},"15 ns"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}}}}},"The \u201cCLK\u201d pin uses up a single waveform and thus the WFM and WFT for this pin are very simple. The final setup of Waveform Memory WFM of LTS1 for the \u201cCLK\u201d pin is illustrated in Table 4 below.",{"@attributes":{"id":"p-0568","num":"1002"},"tables":{"@attributes":{"id":"TABLE-US-00084","num":"00084"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","(WFC)","T1Set","T1ReSet","T2Set","T2ReSet","T2Drel","T2Dret","EXPH","EXPHZ"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}},{"entry":["0","1","1",{},{},"1",{},{},{},{}]},{"entry":["1",{},{},{},{},{},{},{},{},{}]},{"entry":["2",{},{},{},{},{},{},{},{},{}]},{"entry":["3",{},{},{},{},{},{},{},{},{}]},{"entry":["4",{},{},{},{},{},{},{},{},{}]},{"entry":["5",{},{},{},{},{},{},{},{},{}]},{"entry":["6",{},{},{},{},{},{},{},{},{}]},{"entry":"7"},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index","T3Set","T3ReSet","T3Drel","T3Dret","T4Drel","T4Dret","EXPL","EXPHZ"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}},{"entry":[{},"0",{},{},{},{},{},{},{},{}]},{"entry":[{},"1",{},{},{},{},{},{},{},{}]},{"entry":[{},"2",{},{},{},{},{},{},{},{}]},{"entry":[{},"3",{},{},{},{},{},{},{},{}]},{"entry":[{},"4",{},{},{},{},{},{},{},{}]},{"entry":[{},"5",{},{},{},{},{},{},{},{}]},{"entry":[{},"6",{},{},{},{},{},{},{},{}]},{"entry":[{},"7"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}}]}}},"The final setup of Waveform Timing Memory WTM of LTS2 is illustrated in Table 5 below.",{"@attributes":{"id":"p-0570","num":"1004"},"tables":{"@attributes":{"id":"TABLE-US-00085","num":"00085"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}},{"entry":["Index","(WFC)","T1","T2","EXPH","T3","T4","EXPL"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","1","20 ns","40 ns",{},{},{},{}]},{"entry":["1",{},{},{},{},{},{},{}]},{"entry":["2",{},{},{},{},{},{},{}]},{"entry":["3",{},{},{},{},{},{},{}]},{"entry":["4",{},{},{},{},{},{},{}]},{"entry":["5",{},{},{},{},{},{},{}]},{"entry":["6",{},{},{},{},{},{},{}]},{"entry":"7"},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}}}}},"The TimingMap block explicitly maps out the WaveformSelectors to the Waveform tables of the Timing block. For a tester system this boils down to setting up the Timing Set Scrambler (TSS) memory. The TSS basically contains a mapping from the GTS to the LTS that holds the settings. The TSS setup for our example for pin SIG will look like Table 6 below.",{"@attributes":{"id":"p-0572","num":"1006"},"tables":{"@attributes":{"id":"TABLE-US-00086","num":"00086"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"GTS","LTS"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0 (wfs1)","1"]},{"entry":[{},"1 (wfs2)","1"]},{"entry":[{},"2 (wfs3)","2"]},{"entry":[{},"3 (wfs4)","1"]},{"entry":[{},"4 (wfs5)","3"]},{"entry":[{},"5 (wfs6)","1"]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"N (wfs1)","1"]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"255"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Finally after the TSS and LTS setup mappings are resolved, the Pattern Compiler can use this information to program the pattern with the correct waveform table (LTS) and the correct waveform character to use. Thus our example pseudo-pattern considering only pin \u201cSIG\u201d is illustrated in . Note that this compilation has no dependency on the Timing block and only depends on the Timing-Map block.","G. Tester Operation","This section describes the basic operation of the tester operating system (TOS). The activities considered in this section are:\n\n","In order to initialize the system in one embodiment, certain assumptions must be satisfied, and certain conditions must be met. The following sub-section lists these.","Preconditions","Copies of the relevant system software components have a central store, whose location is known to the System Controller. This may be on the System Controller itself, or on another system with a network mounted directory (or known to the SYSC via another mechanism)\u2014whatever the mechanism, before the system can function, all software must be made available to the System Controller for use. This software includes:\n\n","The system module configuration file is available on the System Controller. Recall that this file allows the user to specify the physical configuration of the tester, e.g., the physical location and type of each module in the system chassis, as well as the names of the module software DLLs.","The system configuration file is available on the System Controller. Recall that this file contains the list of Site Controllers in the system, as well as a map of Site Controller hostnames to Switch Matrix input port addresses.","Site controllers have a service called the Site Configuration Manager (SCM) running. This service is responsible for determining what hardware is installed in each slot, by a process termed \u201chardware discovery\u201d. It is also responsible for participating in the system initialization process with the System Controller. Note that the Switch Matrix operation protocol dictates, in one embodiment, that the SCM on a single Site Controller, with Switch Matrix input port connection address 1, should always be used to configure the Switch Matrix connections to the modules. Recall that this \u201cspecial\u201d site is denoted as SITEC-1.","The System Controller is responsible for providing each Site Controller's SCM with its Switch Matrix connection address.","Each Site controller's SCM is capable of starting a process called the Test Plan Server (TPS). The Test Plan Server on each Site Controller is ultimately responsible for containing and executing the user's test plan (or test plans, in the case where a single Site Controller is running tests on multiple DUTs).","Initialization Phase I: System Validation","Once the above assumptions and preconditions have been satisfied, system initialization first proceeds with a system validation step as follows:\n\n","Site configuration, or site partitioning, involves the software-level assignment of the available system hardware modules to different sites (i.e., to service multiple DUTs). Recall that site-partitioning information is provided in a socket file.","The tester system allows site (re-)partitioning to be performed both as part of a test plan load (since each test plan is associated with a particular socket), and as an independent user-callable step. In the latter case, the user initiates the site partitioning by providing a socket file that is used solely to partition the system. This is especially useful during system initialization in the case of multi-DUT testing where each site tests a different DUT type. However, this step is optional during the initialization stage, and the user can choose not to have it performed, opting instead to allow a test plan load to partition the system appropriately.","Whatever the means chosen to effect site partitioning (by an independent call or implicitly through a test plan load), the mechanism is the same. This mechanism is described below.\n\n","This section describes the steps by which a user Test Plan DLL is loaded on a Site Controller (for single or multiple DUT testing).","Once system initialization (and optionally, initial site partitioning) has been completed, user test plans can be loaded. The loading of a user test plan on a Site Controller proceeds as follows:\n\n","The concludes the successful load of the user's Test Plan on a Site Controller.","Running a Test Plan","The method to execute all tests in a test plan according to the pre-defined flow logic is as follows:\n\n","A user may wish to execute a single test in a test plan instead of all tests. For single test execution, the method is as follows.\n\n","Although the invention has been described in conjunction with particular embodiments, it will be appreciated that various modifications and alterations may be made by those skilled in the art without departing from the spirit and scope of the invention. The invention is not to be limited by the foregoing illustrative details, but rather interpreted according to the scope of the claims.",{"@attributes":{"id":"p-0592","num":"1067"},"tables":{"@attributes":{"id":"TABLE-US-00087","num":"00087"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003#"},{"entry":"\u2003# Module Configuration File, Modules.cfg"},{"entry":"\u2003#"},{"entry":"\u2003Version 0.0.1;"},{"entry":"\u2003ModuleConfig"},{"entry":"\u2003{"},{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2003# A configuration definition which provides information "},{"entry":"\u2003\u2003about"},{"entry":"\u2003\u2003# the module type that is attached to slots 1-12 and 32-48."},{"entry":"\u2003\u2003# Note that a module might provide more than"},{"entry":"\u2003\u2003# a single type of resource."},{"entry":"\u2003\u2003#"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Slot 1-12, 32-48","# Switch matrix output "]},{"entry":[{},"ports"]},{"entry":[{},"# which use the "]},{"entry":[{},"configuration"]},{"entry":[{},"# defined below."]},{"entry":["\u2003\u2003{",{}]},{"entry":["\u2003\u2003\u2003VendorID 1;","# defined vendor code."]},{"entry":["\u2003\u2003\u2003ModuleID 1;","# Vendor-defined id code."]},{"entry":["\u2003\u2003\u2003ModuleDriver mod1 .dll;","# Module software."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003# Resource named dpin specifies channels"},{"entry":"\u2003\u2003\u2003# for digital data. The name dpin is not"},{"entry":"\u2003\u2003\u2003# a keyword. It is simply the name of a hardware"},{"entry":"\u2003\u2003\u2003# resource, and is obtained from the resource"},{"entry":"\u2003\u2003\u2003# definition file."},{"entry":"\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003Resource dpin"},{"entry":"\u2003\u2003\u2003{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003\u2003MaxAvailable","32;","# Resource units 1 .. 32."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003Resource analog"},{"entry":"\u2003\u2003\u2003{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003MaxAvailable;","16","# Resource units 1 .. 16."]},{"entry":["\u2003\u2003\u2003\u2003Disabled","1-8;","# Disabled resources 1 .. "]},{"entry":[{},{},"8."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# So, enabled ones "]},{"entry":[{},"are 9 .. 16."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003#"},{"entry":"\u2003# A configuration definition which provides information "},{"entry":"\u2003# about the module type that is attached to slots 16-30,"},{"entry":"\u200350, and 61-64."},{"entry":"\u2003#"},{"entry":"\u2003Slot 16-30, 50, 61-64"},{"entry":"\u2003{"},{"entry":"\u2003\u2003Resource dpin"},{"entry":"\u2003\u2003{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003MaxAvailable","32;","# Max available resource "]},{"entry":[{},{},"units."]},{"entry":["\u2003\u2003\u2003Disabled","3, 30-32;","# Disabled resources."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\u2003}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003ModuleDriver","\u201cmodule two.dll\u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003VendorID","2;"]},{"entry":["\u2003\u2003ModuleID","2;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"\u2003#"},{"entry":"\u2003# A configuration definition, which provides information"},{"entry":"\u2003# about the module type that is attached to slots 65-66."},{"entry":"\u2003#"},{"entry":"\u2003Slot 65-66"},{"entry":"\u2003{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003ModuleID","4;","# DPS module with 8 "]},{"entry":[{},{},"supplies."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003ModuleDriver","mod4.dll;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003VendorID","1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2003# Resource type dps specifying resource units for a"},{"entry":"\u2003\u2003# Device Power Supply"},{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2003Resource dps"},{"entry":"\u2003\u2003{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003MaxAvailable","4;"]},{"entry":["\u2003\u2003\u2003Disabled","1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":"\u2003Version 1.1.3"},{"entry":"\u2003SocketDef"},{"entry":"\u2003{"},{"entry":"\u2003\u2003DUTType Pentium3"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003PinDescription dutP3.pin; # The pin description file for "},{"entry":"\u2003\u2003\u2003Pentium3"},{"entry":"\u2003\u2003\u2003DUT 2 #Uses the full-specification syntax"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003SiteController 1; # Switch Matrix input port"},{"entry":"\u2003\u2003\u2003\u2003Resource dpin"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003\u2003\u2003# The CLK pin is assigned to resource dpin,"},{"entry":"\u2003\u2003\u2003\u2003\u2003# slot 2, resource unit (channel) 13."},{"entry":"\u2003\u2003\u2003\u2003\u2003#"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003\u2003\u2003CLK ","2.13;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003\u2003\u2003# The DIR pin is assigned to resource dpin,"},{"entry":"\u2003\u2003\u2003\u2003\u2003# slot 5, resource unit 15."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003\u2003\u2003DIR ","5.15;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003\u2003\u2003# The following statement will be expanded to"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2003#","BBUS[7] 5.4"]},{"entry":["\u2003\u2003\u2003\u2003\u2003#","BBUS[6] 5.5"]},{"entry":["\u2003\u2003\u2003\u2003\u2003#","BBUS[5] 5.6"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003\u2003\u2003# So for example, the pin sequence BBUS[7], "},{"entry":"\u2003\u2003\u2003\u2003\u2003BBUS[6],"},{"entry":"\u2003\u2003\u2003\u2003\u2003# BBUS[5] is assigned to the same slot 5, and to"},{"entry":"\u2003\u2003\u2003\u2003\u2003# resource units 4, 5 and 6 respectively."},{"entry":"\u2003\u2003\u2003\u2003\u2003#"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003\u2003\u2003BBUS[7:5]","5.[4:6];"]},{"entry":["\u2003\u2003\u2003\u2003\u2003BBUS[1:4]","7.[21:18];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003\u2003\u2003BBUS[8]","9.16;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\u2003Resource dps"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003\u2003\u2003# The V1 pin is assigned to resource dps,"},{"entry":"\u2003\u2003\u2003\u2003\u2003# slot 1, resource unit (channel) 1."},{"entry":"\u2003\u2003\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003\u2003\u2003VCC1 1.1;"},{"entry":"\u2003\u2003\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003\u2003\u2003# The VCC2 pin is assigned to resource dps,"},{"entry":"\u2003\u2003\u2003\u2003\u2003# slot 1, resource unit (channel) 2."},{"entry":"\u2003\u2003\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003\u2003\u2003VCC2 1.2;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003} # End DUT 2"},{"entry":"\u2003DUT 1 # This is \u201ccloned\u201d from DUT 2 above"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\u2003SiteController 1; # Same Site Controller as for DUT 2"},{"entry":"\u2003\u2003\u2003Resource dpin"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003SlotOffset 1; # Offset value for slots"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003Resource dps"},{"entry":"\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003SlotOffset 10; # Offset value for slots"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003# The offset syntax above indicates that the slot\/resource"},{"entry":"\u2003\u2003\u2003# unit assignments are \u201ccloned\u201d from the first DUT "},{"entry":"\u2003\u2003\u2003# defined for this DUTType, i.e., DUT 2, with the slots"},{"entry":"\u2003\u2003\u2003# offset by the SlotOffset values."},{"entry":"\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003# Looking at the definition of dpin resource units for"},{"entry":"\u2003\u2003\u2003# DUT 2, CLK is bound to slot 2. Hence, for the present"},{"entry":"\u2003\u2003\u2003# DUT, CLK is bound to slot 2 + 1 = 3."},{"entry":"\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003# Some of the new bindings in effect due to the offset"},{"entry":"\u2003\u2003\u2003# assignments are shown in the table below:"},{"entry":"\u2003\u2003\u2003#"},{"entry":"\u2003\u2003\u2003# ------------------------------------------------------"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003#","Pin","Resource ","RUnit","Slot",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\u2003\u2003# ------------------------------------------------------"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003#","CLK","dpin","13","2 + 1 = 3",{}]},{"entry":["\u2003\u2003\u2003#","DIR","dpin","15","5 + 1 = 6",{}]},{"entry":["\u2003\u2003\u2003#","BBUS[8]","dpin","16","9 + 1 = 10",{}]},{"entry":["\u2003\u2003\u2003#","VCC1 ","dps","1","1 + 10 = 11",{}]},{"entry":["\u2003\u2003\u2003#","VCC2 ","dps ","2","1 + 10 = 11",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2003#"},{"entry":"\u2003\u2003}# End DUT 1"},{"entry":"\u2003}# End DUTType Pentium3"},{"entry":"\u2003DUTType 74LS245"},{"entry":"\u2003{"},{"entry":"\u2002\u2003\u2002PinDescription dutLS.pin;"},{"entry":"\u2002\u2003\u2002DUT 3 disabled # This DUT site is "},{"entry":"\u2002\u2003\u2002disabled, and will be ignored"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003..."},{"entry":"\u2003\u2003}"},{"entry":"\u2002\u2003}# End DUTType 74LS245"},{"entry":"}# End SocketDef"},{"entry":"\u2003# --------------------------------"},{"entry":"\u2003# File pentiumlevels.lvl"},{"entry":"\u2003# --------------------------------"},{"entry":"\u2003Version 1.0;"},{"entry":"\u2003Import pentium3resources.rsc;"},{"entry":"\u2003Import pentium3pins.pin;"},{"entry":"\u2003Levels Pentium3Levels"},{"entry":"\u2003{"},{"entry":"\u2003\u2002\u2002#"},{"entry":"\u2003\u2002\u2002# Specifies pin-parameters for various pins and"},{"entry":"\u2003\u2002\u2002# pin groups using globals and values from"},{"entry":"\u2003\u2002\u2002# the specification set."},{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2002\u2002# The order of specification is significant."},{"entry":"\u2003\u2002\u2002# Pin parameters will be set in order from"},{"entry":"\u2003\u2002\u2002# first to last in this Levels section, and"},{"entry":"\u2003\u2002\u2002# from first to last for each pin or pin-group"},{"entry":"\u2003\u2002\u2002# subsection."},{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2002\u2002# From the imported pin description file pentium3pins.pin,"},{"entry":"\u2003\u2002\u2002# the InPins group is in the \u201cdpin\u201d resource. From the"},{"entry":"\u2003\u2003# imported resource definition file pentium3resources.rsc,"},{"entry":"\u2003\u2003# the \u201cdps\u201d resource has parameters named VIL and VIH."},{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2003InPins {VIL = v_il; VIH = v_ih + 1.0; }"},{"entry":"\u2003\u2003# The following statement requires a delay of 10 uS after"},{"entry":"\u2003\u2003# the call to set the InPins levels. Actual delay will be"},{"entry":"\u2003\u2003# a small system defined range around 10.0E\u22126:"},{"entry":"\u2003\u2003#\u2003\u2003\u200210.0E\u22126 \u2212 delta <= actual <= 10.0E\u22126 + delta"},{"entry":"\u2003\u2003Delay 10.0E\u22126;"},{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2003# For the OutPins, the levels for the parameters"},{"entry":"\u2003\u2003# VOL and VOH are specified."},{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2003OutPins {VOL = v_ol \/ 2.0; VOH = v_oh; }"},{"entry":"\u2003\u2003# The clock pin will have special values."},{"entry":"\u2003\u2003Clock {VOL = 0.0; VOH = v_ih \/ 2.0; }"},{"entry":"\u2003\u2003# A Delay of 10 uS after the call to set Clock levels."},{"entry":"\u2003\u2003# This is a minimum delay, that is guaranteed to be for"},{"entry":"\u2003\u2003# at least 10.0 uS, though it may be a little more:"},{"entry":"\u2003\u2003#\u2003\u2003\u200210.0E\u22126 <= actual <= 10.0E\u22126 + delta"},{"entry":"\u2003\u2003MinDelay 10.0 uS;"},{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2003# The PowerPins group is in the \u201cdps\u201d resource. Pins of"},{"entry":"\u2003\u2003# this pin group have special parameters:"},{"entry":"\u2003\u2003#\u2003PRE_WAIT specifies the time to wait after voltage"},{"entry":"\u2003\u2003#\u2003\u2003reached its final value to start pattern"},{"entry":"\u2003\u2003#\u2003\u2003generation. Actual wait time will be a small"},{"entry":"\u2003\u2003#\u2003\u2003system defined range around PRE_WAIT (see)"},{"entry":"\u2003\u2003#\u2003POST_WAIT specifies the time to wait after pattern"},{"entry":"\u2003\u2003#\u2003\u2003generation ends to shut down the power. Actual"},{"entry":"\u2003\u2003#\u2003\u2003wait time will be a small system defined range"},{"entry":"\u2003\u2003#\u2003\u2003around PRE_WAIT (see)."},{"entry":"\u2003\u2003#"},{"entry":"\u2003\u2003PowerPins"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003PRE_WAIT = 10.0 ms;"},{"entry":"\u2003\u2003\u2003POST_WAIT = 10.0 ms;"},{"entry":"\u2003\u2003\u2003# VCC reaches its final value of 2.0 V from its"},{"entry":"\u2003\u2003\u2003# present value in a ramp with a Voltage Slew Rate"},{"entry":"\u2003\u2003\u2003# of\u00b1.01 Volts per Second."},{"entry":"\u2003\u2003\u2003VCC = Slew(0.01, 2.0 V);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003Levels Pentium4Levels"},{"entry":"\u2003{"},{"entry":"\u2003\u2003# . . . "},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
