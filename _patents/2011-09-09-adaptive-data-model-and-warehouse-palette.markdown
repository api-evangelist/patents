---
title: Adaptive data model and warehouse palette
abstract: Systems, methods, and other embodiments associated with and\ adaptive data model and warehouse palette are provided. In one embodiment, a method includes providing a user interface for collecting item definition attributes from a user. A database structure is generated to store item data according to collected the item definition attributes. An extract, transform, and load (ETL) layer is generated to extract item data from user data, transform the extracted data for storing in the database structure, and load the transformed extracted data into the database structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08886591&OS=08886591&RS=08886591
owner: Oracle International Corporation
number: 08886591
owner_city: Redwood Shores
owner_country: US
publication_date: 20110909
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Organizational and technological challenges arise during the creation, maintenance, and loading of data warehouses and business intelligence tools. This is because multiple experts in multiple organizations are typically involved in the modeling, extracting, transforming, and reporting of the data. Business requirements regarding data reporting are specified by business analysts, who typically have little or no technical knowledge about implementing a data warehouse. Data modelers are tasked with deriving a data model that organizes data to facilitate the specified data reporting. Extract, transform, and load (ETL) developers are concerned with populating the data warehouse in an efficient manner. This may require changes to the data model. If the data model is changed at this point in the process, the personnel changing the data model may not have had direct communication with the business analysts who will be the end users of the data warehouse, meaning that the solution may not be optimized with the end user in mind. Further, a significant amount of time is required for the business analyst to communicate the reporting requirements to the data modeler and for the ETL personnel to develop and implement the data warehouse.","For the purposes of the following description, the adaptive data model and warehouse palette will be described in the context of the insurance industry. The adaptive data model and warehouse palette can be used to enable users of a data warehouse to dynamically configure aspects of the warehouse to fit their particular needs in any industry or environment.","Due to regulation, actuarial science, and overall standard business operations, the majority of insurance companies do about 80 percent of activities in the same way. Most insurance companies process policy transactions, earn premium, write premium, pay claims, manage reserves, and so on. The differentiator among insurers is typically in how they define lines of business and market and sell products, which makes up the remaining 20 percent. Accordingly, a pre-built warehouse may be provided for the 80 percent of business data that is common to all insurers. An adaptive warehouse process model can be used to modify the data warehouse to accommodate the 20 percent of business data, the definitions of lines of business (LOBs), that makes any given insurer unique.","Described herein is one example embodiment of a business-user-driven warehouse palette for insurers to define product risk items and lines of business attributes as dimensions. The warehouse palette empowers business users to define risk item(s) as it relates to a line of business and to publish the defined risk items to a definition engine. The definition engine creates the implementation interfaces, table structures, ETL and dimensions\/data marts that would normally take months to define, create, and test. The warehouse palette is powerful and flexible enough to create international definitions including support for multiple languages and currencies.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","100","110","150","157","156","160","100","100","156"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2","b":["200","220","210","285","220","290","230","290","295","285"]},"In order to populate the data warehouse  with data from different data sources , the adaptive system  includes a set of interfaces . The interfaces  specify a data structure format to which data from the sources should comply for storage in the data structures in the data warehouse  and subsequently the data marts .","The adaptive system  includes a core insurance model as well as an adaptive data model. A warehouse palette  allows a user to create new attributes to define line of business (LOB) risk items specific to the user's insurance enterprise. These new attributes are the basis for the adaptive data model. An interface engine , a warehouse definition engine , and a mart definition engine  create a specific instance of the adaptive data model based on the specific line of business risk items selected by the user. Together, these engines create staging, warehouse, and data mart structures as well as ETL interfaces to load them for the user defined LOB risk items. The adaptive data model is ultimately integrated with the core insurance model to form the data warehouse .","The core insurance model includes staging, warehouse, and data mart tables configured to store insurance data that is common across all LOBs. The core insurance model also includes an ETL layer configured to load these tables as well as pre-defined LOB templates  that can serve as a starting point for building custom LOBs.","Returning now to , the example adaptive data model and warehouse palette system  will be described in more detail. As already discussed, the system  includes the warehouse palette logic  and the definition engine . The warehouse palette logic  and definition engine  create the ETL layer  that populates the core database tables  and UDA database tables  stored in the database . The definition engine  and ETL layer  may be implemented using an ETL tool , such as the Oracle Data Integrator 11g (ODI).","The warehouse palette logic  includes a warehouse palette user interface  through which a user may specify user defined attributes (UDA). For example, the user may be prompted, by way of the warehouse palette user interface , to select various risk items used by his insurance company in their Personal Auto line of business to describe an insured vehicle entity: make, model, engine size, presence of air bags, and so on. In some embodiments, the user may also select whether or not a history of any given attribute's value should be maintained or whether the value may simply be overwritten.","The information collected at the warehouse palette user interface  is passed to an agent . The agent  creates a UDA XML payload file  that is a document containing the attributes that were selected by the user. The XML payload file  is passed to a Java Web Server , which processes the XML payload file  and publishes the XML payload file  for use by the definition engine . In one embodiment, the Java Web Server  uses a public application programming interface (API) of the ETL tool  to publish the XML payload file .","The definition engine  uses the published XML payload file  to create UDA data stores  and UDA interfaces  that form part of the ETL layer . In one embodiment, the UDA data stores  and UDA interfaces  are created using a Java Wrapper program run by the ETL tool . The UDA data stores  and UDA interfaces  may be stored in a metadata repository of the ETL tool. The UDA data stores  and UDA interfaces  are used by the ETL layer  to perform ETL operations on the user's data. The definition engine  also uses the published XML payload file  to create the data structures for the UDA database tables  that are stored in the database .",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3","b":["300","300","300","370","380","300","350","355","360","355","355","355"]},"In one embodiment, the user defined attributes collected by the user interface  can be conceptualized as dimensions that differentiate one LOB from another. A dimension can be a covered item such as a vehicle or an additional detail about a Personal Auto policy, such as whether the vehicle is kept in a garage. Each LOB is a collection of dimensions that describe that LOB. For example, a Personal Auto policy will typically include at least two dimensions, a vehicle and a driver. The user interface  allows the user to select the attributes about the vehicle and driver that are relevant to their particular Personal Auto LOB.","The warehouse palette  includes palette metadata tables  that are populated with metadata describing the selected risk item attributes. A physical database model is used to store the metadata tables . The warehouse palette  creates an XML metadata payload file  containing LOB metadata from the metadata tables . This payload file  is the input to the definition engine .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4","b":["400","400","380","370","380","380","470","380"]},"In one embodiment, the definition engine  is implemented using Oracle Data Integrator 11g software (ODI). For example, ODI includes a data change capture feature that can be enabled for any risk item attributes that were identified by the user as requiring the saving of previous data values (history). ODI provides several features described now in more detail that facilitate building the adaptive interfaces and data structures that will be used to populate the adaptive data model.","The definition engine  accepts the XML metadata payload file  using a Java Web Service . In one embodiment, the definition engine includes a Java Wrapper  that is created leveraging ODI 11g's JAVA API. The Java Wrapper  is used to dynamically generate LOB database tables and adaptive interfaces  for performing ETL operations for the LOB database tables. The Java Wrapper  is a program that creates statements that instruct the definition engine  to create the specific interfaces that will support the user defined attributes identified in the metadata tables . The adaptive interfaces  will be used to load the user's data into the data warehouse .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 5","FIG. 4"],"b":["500","480","480","520","540","380","525","545","530","550","535","555","480"]},"In one embodiment, the data marts ,  are structured according to a star schema. A star schema architecture includes two types of tables: fact tables and dimension tables. In one particular insurance industry embodiment, in the star schema, facts are transactions while dimensions are attributes of a fact. For example, if a transaction occurs today at noon for $5.00, the transaction amount ($5) is the fact while the date (today) and time (noon) are dimensions of the fact. The data marts ,  are designed using a star schema pattern. This means that dimension tables are linked directly to fact tables and are normalized to reduce redundant data. The star schema may be used to realize performance benefits offered by data base and query platforms.","The data mart schema used to construct the data marts ,  includes four core fact tables: policy and claim fact tables that store data at a transaction level of granularity and policy and claim fact tables that store data at a monthly snapshot level of granularity. Within these four core tables are the metrics for all LOBs. Since all metrics are part of the core tables and do not vary by LOB, the same interfaces can be used to load these fact tables regardless of LOB.","Through the use of LOB-specific extension fact tables, the four core fact tables are kept abstract and generic, and LOB-specific facts are stored in the extension tables. As such, core fact tables contain the common facts of the related core common dimensions. This means much more efficient loading of adapted content, ease in creation of LOBs, and allows for significantly better performance during loads. An additional benefit is reduced storage needs, since there are no empty fact keys for unused LOBs.","Fact-to-fact join keys are used to give a 1-to-1 extension of base fact tables to deal with LOB specific dimension tables. For example, the policy transaction fact table has an LOB_FACT_ID column. This column is used to relate the policy transaction fact table to a LOB-specific extension fact table for Personal Auto facts that includes a PA_FACT_ID column. The relationship between the core fact table and the LOB-specific extension fact table is expressed by LOB_FACT_ID=PA_FACT_ID.","Another example of a relationship between the LOB-specific extension fact table for Personal Auto and LOB-specific dimension table is expressed in the PA_VEH_ID and PA_DRV_ID columns of the extension fact table. The PA_FACT_ID column relates back to the core fact table for policy transactions to provide a consistent LOB-specific view of transactions that are accommodated by the adaptive data model.","BI analytics application software  can be used on data in the data warehouse  to configure reports and dashboards  and well as providing an interface  for ad-hoc analysis and querying of the data in the data warehouse . In one embodiment, Oracle Business Intelligence Enterprise Edition can be used to provide the reports, dashboards, and analysis interface.","In the described embodiment, the definition engine  (shown in ) views to present data in the dashboards . Corporate views are based on the core fact and dimension tables\u2014as illustrated above, the core tables  are not LOB-specific and provide a holistic view of the business without the details specific to any LOB. By contrast, the LOB-specific views provide a holistic view of an LOB such that the core and extended fact tables appear as one LOB-specific fact table, thus allowing a drill-down from high-level cross-LOB metrics into specific metrics for a designated LOB. To create the LOB-specific fact table, the core fact table is joined with the specific extension fact table for the LOB (e.g., Personal Auto or Homeowners) using the fact-to-fact join keys described above.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 6","b":["600","610"]},"In one embodiment, the user interface is configured to collect a history preference for an item definition attribute from the user, and storing a log of changes made to item data for item definition attributes having a positive history preference. This feature may be implemented using the changed data capture feature in Oracle Data Integrator.","The method includes at , generating a database structure to store item data according to collected the item definition attributes. The database structure may include one or more tables for staging or storing user data. Additional database structures may store metadata describing how data is stored in the tables that store user data. In one embodiment, generating a data structure comprises creating an XML payload file comprising a document containing the collected item definition attributes, passing the XML payload file to an ETL tool, and publishing the XML payload file.","At , the method includes generating an extract, transform, and load (ETL) layer configured to extract item data from user data, transform the extracted data for storing in the database structure, and load the transformed extracted data into the database structure. In one embodiment, generating the ETL layer is performed using a Software Developer Kit (SDK) program that receives the XML payload file, identifies the collected item definition attributes, and generates instructions for an ETL tool to create interfaces and data structures for storing the collected item definition attributes.","In one embodiment, generated database structure and ETL layer are incorporated with a core database structure and a core ETL layer. A data mart schema that includes core fact tables for data stored in the core database structure and extension fact tables for data stored in the database structure may be created. The core fact tables and extension fact tables include join keys that can be used to join the core fact tables with selected extension fact tables to create a view that corresponds to an extended fact table for data from both the core database structure and the adaptive database structure. The core and extension fact tables store records corresponding to transactions and the data mart schema include dimension tables that are keyed to columns of the fact tables and store records corresponding to attributes of the transaction.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 7","b":["700","702","704","710","708","700","730","730","730","708","730","702"]},"In one embodiment, adaptive data modeling and palette logic  is a means (e.g., hardware, non-transitory computer-readable medium, firmware) for providing an adaptive data model and warehouse palette.","The means may be implemented, for example, as an ASIC programmed to collect item definition attributes and create an adapted data model based on the collected attributes. The means may also be implemented as stored computer executable instructions that are presented to computer  as data  that are temporarily stored in memory  and then executed by processor .","Generally describing an example configuration of the computer , the processor  may be a variety of various processors including dual microprocessor and other multi-processor architectures. A memory  may include volatile memory and\/or non-volatile memory. Non-volatile memory may include, for example, ROM, PROM, and so on. Volatile memory may include, for example, RAM, SRAM, DRAM, and so on.","A disk  may be operably connected to the computer  via, for example, an input\/output interface (e.g., card, device)  and an input\/output port . The disk  may be, for example, a magnetic disk drive, a solid state disk drive, a floppy disk drive, a tape drive, a Zip drive, a flash memory card, a memory stick, and so on. Furthermore, the disk  may be a CD-ROM drive, a CD-R drive, a CD-RW drive, a DVD ROM, and so on. The memory  can store a process  and\/or a data , for example. The disk  and\/or the memory  can store an operating system that controls and allocates resources of the computer .","The bus  may be a single internal bus interconnect architecture and\/or other bus or mesh architectures. While a single bus is illustrated, it is to be appreciated that the computer  may communicate with various devices, logics, and peripherals using other busses (e.g., PCIE, 1394, USB, Ethernet). The bus  can be types including, for example, a memory bus, a memory controller, a peripheral bus, an external bus, a crossbar switch, and\/or a local bus.","The computer  may interact with input\/output devices via the i\/o interfaces  and the input\/output ports . Input\/output devices may be, for example, a keyboard, a microphone, a pointing and selection device, cameras, video cards, displays, the disk , the network devices , and so on. The input\/output ports  may include, for example, serial ports, parallel ports, and USB ports.","The computer  can operate in a network environment and thus may be connected to the network devices  via the i\/o interfaces , and\/or the I\/O ports . Through the network devices , the computer  may interact with a network. Through the network, the computer  may be logically connected to remote computers. Networks with which the computer  may interact include, but are not limited to, a LAN, a WAN, and other networks.","In another embodiment, the described methods and\/or their equivalents may be implemented with computer executable instructions. Thus, in one embodiment, a non-transitory computer-readable medium is configured with stored computer executable instructions that when executed by a machine (e.g., processor, computer, and so on) cause the machine (and\/or associated components) to perform the various methods and implement the various systems described herein, for example, with reference to .","While for purposes of simplicity of explanation, the illustrated methodologies in the figures are shown and described as a series of blocks, it is to be appreciated that the methodologies are not limited by the order of the blocks, as some blocks can occur in different orders and\/or concurrently with other blocks from that shown and described. Moreover, less than all the illustrated blocks may be used to implement an example methodology. Blocks may be combined or separated into multiple components. Furthermore, additional and\/or alternative methodologies can employ additional blocks that are not illustrated.","The following includes definitions of selected terms employed herein. The definitions include various examples and\/or forms of components that fall within the scope of a term and that may be used for implementation. The examples are not intended to be limiting. Both singular and plural forms of terms may be within the definitions.","References to \u201cone embodiment\u201d, \u201can embodiment\u201d, \u201cone example\u201d, \u201can example\u201d, and so on, indicate that the embodiment(s) or example(s) so described may include a particular feature, structure, characteristic, property, element, or limitation, but that not every embodiment or example necessarily includes that particular feature, structure, characteristic, property, element or limitation. Furthermore, repeated use of the phrase \u201cin one embodiment\u201d does not necessarily refer to the same embodiment, though it may.","\u201cLogic\u201d, as used herein, includes but is not limited to hardware, firmware, a non-transitory computer readable medium that stores instructions, instructions in execution on a machine, and\/or combinations of each to perform a function(s) or an action(s), and\/or to cause a function or action from another logic, method, and\/or system. Logic may include a microprocessor, a discrete logic (e.g., ASIC), an analog circuit, a digital circuit, a programmed logic device, a memory device containing instructions, and so on. Logic may include one or more gates, combinations of gates, or other circuit components. Where multiple logics are described, it may be possible to incorporate the multiple logics into one physical logic. Similarly, where a single logic is described, it may be possible to distribute that single logic between multiple physical logics.","\u201cUser\u201d, as used herein, includes but is not limited to one or more persons, computers or other devices, or combinations of these.","While example systems, methods, and so on have been illustrated by describing examples, and while the examples have been described in considerable detail, it is not the intention of the applicants to restrict or in any way limit the scope of the appended claims to such detail. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the systems, methods, and so on described herein. Therefore, the disclosure is not limited to the specific details, the representative apparatus, and illustrative examples shown and described. Thus, this application is intended to embrace alterations, modifications, and variations that fall within the scope of the appended claims.","To the extent that the term \u201cincludes\u201d or \u201cincluding\u201d is employed in the detailed description or the claims, it is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as that term is interpreted when employed as a transitional word in a claim.","To the extent that the term \u201cor\u201d is used in the detailed description or claims (e.g., A or B) it is intended to mean \u201cA or B or both\u201d. When the applicants intend to indicate \u201conly A or B but not both\u201d then the phrase \u201conly A or B but not both\u201d will be used. Thus, use of the term \u201cor\u201d herein is the inclusive, and not the exclusive use. See, Bryan A. Garner, A Dictionary of Modern Legal Usage 624 (2d. Ed. 1995).","To the extent that the phrase \u201cone or more of, A, B, and C\u201d is used herein, (e.g., a data store configured to store one or more of, A, B, and C) it is intended to convey the set of possibilities A, B, C, AB, AC, BC, and\/or ABC (e.g., the data store may store only A, only B, only C, A&B, A&C, B&C, and\/or A&B&C). It is not intended to require one of A, one of B, and one of C. When the applicants intend to indicate \u201cat least one of A, at least one of B, and at least one of C\u201d, then the phrasing \u201cat least one of A, at least one of B, and at least one of C\u201d will be used."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate various systems, methods, and other embodiments of the disclosure. It will be appreciated that the illustrated element boundaries (e.g., boxes, groups of boxes, or other shapes) in the figures represent one embodiment of the boundaries. One of ordinary skill in the art will appreciate that in some embodiments one element may be designed as multiple elements or that multiple elements may be designed as one element. In some embodiments, an element shown as an internal component of another element may be implemented as an external component and vice versa. Furthermore, elements may not be drawn to scale.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
