---
title: Network system, network system control method, and storage medium
abstract: A network system includes a first processing unit configured to accept a request transmitted from a client computer and register a job that processes the accepted request into a storage unit. The first processing unit includes one or a plurality of processing units. The network system further includes a second processing unit configured to acquire the job from the storage unit asynchronously with the job being registered into the storage unit and process the acquired job. The second processing unit includes one or a plurality of processing units. The first processing unit transmits authentication information usable to acquire a processing result of the job corresponding to the request to the client computer without waiting for the second processing unit to complete processing of the job registered in the storage unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08717600&OS=08717600&RS=08717600
owner: Canon Kabushiki Kaisha
number: 08717600
owner_city: Tokyo
owner_country: JP
publication_date: 20110218
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to a network system, a method for controlling the network system, and a storage medium.","2. Description of the Related Art","A content management system using Internet techniques enables a user of a client computer to access a web page provided by a server computer via the Internet and to select a content to view from the web page. The content management system transmits the selected content to the server computer. The server computer processes and displays the received content on its display device.","As discussed in Japanese Patent Application Laid-Open No. 2002-304271, there is a conventional method for causing a printer to print a content that a user has viewed on a client computer. According to the conventional method, a server computer converts a content viewed by a user into print data that can be printed by the printer and transmits the converted data to the printer. The printer prints the received data.","Further, a recently developed server computing system, such as a cloud computing system or a Software as a Service (SaaS), can perform various kinds of processing in response to requests from client computers. The cloud computing system uses many computing resources to perform data conversion and data processing in a discrete fashion so that requests from many clients can be simultaneously processed.","According to an aspect of the present invention, a network system includes at least one server computer that is capable of communicating with a client computer. The network system includes a first processing unit configured to accept a request transmitted from the client computer and to register a job that processes the accepted request into a storage unit, wherein the first processing unit includes one or a plurality of processing units. The network system further includes a second processing unit configured to acquire the job from the storage unit asynchronously with the job being registered into the storage unit and to process the acquired job, wherein the second processing unit includes one or a plurality of processing units. The first processing unit is configured to transmit authentication information usable to acquire a processing result of the job corresponding to the request to the client computer without waiting for the second processing unit to complete processing of the job registered in the storage unit.","Further features and aspects of the present invention will become apparent from the following detailed description of exemplary embodiments with reference to the attached drawings.","Various exemplary embodiments, features, and aspects of the invention will be described in detail below with reference to the drawings.","A recently developed network printing system enables a user of a client terminal to register a document into a server and cause a printing apparatus, which is different from the client terminal, to access the same server to acquire document data and print the acquired data. The cloud computing system is an advanced system that can execute, in a concentrated fashion, various kinds of processing to be performed by many network printing systems that are similar in configuration.","However, in an ordinary network printing system, the processing for registering a document into a server from a client terminal takes a significant time to complete. More specifically, the document registration processing generally includes upload processing to be performed by the client terminal to upload document data to the server, conversion processing to be performed by the server to convert the uploaded document data into print data, and storage processing to be performed by the server to store the print data into an arbitrary storage area of the server.","Then, the server returns a result of the above-described sequential processing to the client terminal. While waiting for the processing result to be returned, the user cannot start uploading a new document until authentication information, which is necessary to actually print an uploaded document by a printing apparatus, is acquired as a result of the sequential processing.","In the cloud computing system, it is general that the above-described processing that requires a significant execution time to complete is executed as back-end processing to be executed in the server asynchronously with a user's request, not synchronization processing such as a web application.","An exemplary embodiment of the present invention can improve usability of the network printing system by enabling each client computer to be disconnected in advance from a network system without waiting for completion of processing that is currently performed in response to a request from a client computer.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 1","FIG. 1"],"b":"100"},"More specifically, the network printing system includes a server computer group , a document server , an image forming apparatus , a client computer , a document extraction server , a document conversion server , and a print server .","The network  is a communication circuit enabling the above-described functional units to transmit and receive information. The Internet  is a communication circuit enabling the above-described functional units to transmit and receive information beyond the firewall. The network  to which the image forming apparatus  and the client computer  belong can communicate with the network  to which the server computer group  belongs via the Internet  beyond the firewall. Each of the network  and the Internet  is a communication circuit network, for example, supporting the TCP\/IP protocol and can be a wired network or a wireless network.","In , the server computer group  includes at least one server computer. The document server , the document extraction server , the document conversion server , and the print server , which constitute the network printing system, may not be physically independent from the server computer group .","These servers may be physically present on the same computer. The server computer group  can use computer resources, such as the document server , the document extraction server , the document conversion server , and the print server . The server computer group  can execute various kinds of processing with reference to these computer resources. The computer resources that can be used by the server computer group  are not limited to only the document server , the image forming apparatus , the document extraction server , the document conversion server , and the print server  and may include any other functional servers.","An internal configuration of each functional unit that constitutes the network printing system illustrated in  is described below in more detail.  are block diagrams illustrating an example of the internal configuration of the image forming apparatus . As illustrated in , the image forming apparatus  includes an image processing unit , a printing unit , and a reading unit . The image processing unit  includes a central processing unit (CPU) , a direct storage unit , an indirect storage unit , a user interface , and an external interface .","The CPU  is operable as a unit configured to execute predetermined programs and instruct the image forming apparatus  to perform various operations.","The direct storage unit  is operable as a work memory when the CPU  executes the programs. Each program to be executed by the CPU  is loaded into the direct storage unit . The direct storage unit  can be realized by a random access memory (RAM).","The indirect storage unit  stores various programs including application programs and a platform program described below. Each program stored in the indirect storage unit  can be moved to the direct storage unit  when the CPU  executes the program. The indirect storage unit  is, for example, a solid state drive (SSD) or a hard disc drive (HDD). The CPU  can be a multi-processor.","Hereinafter, the platform is described below in more detail with reference to . Realization of the platform enables users to develop a new application to be executed by the image forming apparatus  and customize an operation screen of the image forming apparatus .","An example method for realizing the platform is described below. The CPU  moves the platform program from the indirect storage unit  to the direct storage unit . If the above-described platform program moving processing is completed, the CPU  can immediately execute the platform program. In an exemplary embodiment of the present invention, the state where the CPU  executes the platform program is referred to as launching of the platform.","The platform starts operating on the firmware of the image forming apparatus  as illustrated in . To realize the firmware, the CPU  executes the firmware program loaded into the direct storage unit  from the indirect storage unit .","The platform program provides an environment that is required to execute an object-oriented application program. An example method for executing an application program on the platform is described below in more detail.","In an exemplary embodiment of the present invention, application programs operable on the platform include print software capable of accepting a print request. The print software can receive print data from a device connected via a network, for example, using a communication protocol, such as Hyper Text Transfer Protocol (HTTP).","The print software can transmit received print data to the firmware. The firmware starts print data processing on the received print data. If the print data is already printable, the firmware does not perform the print data processing. As described above, controlling the image forming apparatus  can be realized by the application program (print software) executed on the platform.","An example method for executing an application program is described below. When the platform is launched, the platform moves a stored application program from the indirect storage unit  to the direct storage unit . If the above-described application program moving processing is completed, the platform can immediately execute the application program.","Subsequently, the platform executes the application program. The function of the platform that can be provided by executing an application program, as described above, is referred to as a platform application according to an exemplary embodiment of the present invention. Further, the platform can perform a part of each processing of the flowchart described in an exemplary embodiment of the present invention.","Further, a device browser is operating on the firmware of the image forming apparatus . The device browser is functionally operable to enable users to view data and information stored in a device accessible via the network . To realize the device browser, the CPU  executes the device browser program loaded into the direct storage unit  from the indirect storage unit .","The user interface  is operable as a unit configured to accept a user's processing request. For example, when a user inputs an instruction via a keyboard or a mouse, the user interface  can accept a signal representing the entered instruction.","The external interface  is functionally operable as a unit configured to receive data from an external device and transmit data to an external device. The external device is, for example, an external storage device (e.g., an external HDD or an external USB memory) or an independent apparatus (e.g., a host computer or an image forming apparatus) connected via a network. The image forming apparatus  can communicate with the client computer  via the network  and can communicate with the server computer group  via the Internet .","Next, an internal configuration of an information processing apparatus, which can realize the server computer group , the document server , and the client computer , is described below with reference to .  is a block diagram illustrating an example of the internal configuration of the information processing apparatus .","The information processing apparatus  illustrated in  can realize the server computer group , the document server , and the client computer . The information processing apparatus  includes a user interface , a CPU , a direct storage unit , an indirect storage unit , and an external interface .","The user interface  is operable as a unit configured to accept a user's processing request. For example, when a user inputs an instruction via a keyboard or a mouse, the user interface  can accept a signal representing the input instruction","The CPU  is operable as a unit configured to execute predetermined programs and instruct the information processing apparatus  to perform various operations. The direct storage unit  is operable as a work memory when the CPU  executes programs. Each program to be executed by the CPU  is loaded into the direct storage unit . The direct storage unit  can be realized by a RAM.","The indirect storage unit  stores various programs including application programs and an operating system (OS). Each program stored in the indirect storage unit  can be moved to the direct storage unit  when the CPU  executes the program. The indirect storage unit  is, for example, a read only memory (ROM) or a HDD. The external interface  is connected to the network  and can communicate with other device connected to the network .","Next, functions of the constituent components that constitute the network printing system according to the present exemplary embodiment are described below in more detail with reference to .  is a block diagram illustrating a functional configuration of the constituent components that constitute the network printing system.","First, a functional configuration of the server computer group  is described below. The server computer group  includes a request processing unit  (first processing unit), a back-end processing unit  (second processing unit), a table storage service , a blob storage service , and a queue storage service .","The server computer group  according to the present exemplary embodiment includes at least one server computer having the request processing unit , at least one server computer having the back-end processing unit , and at least one server computer functionally operable as the table storage service , the blob storage service , and the queue storage service .","The request processing unit  is functionally operable to accept a processing request transmitted from the client computer  or the image forming apparatus . The back-end processing unit  is functionally operable to perform processing according to a processing program in response to a processing request. More specifically, the back-end processing unit  loads the processing program into a memory of the server computer that executes the back-end processing unit  and performs processing that responds to the processing request.","To realize the request processing unit , the CPU  executes a request reception program loaded into the direct storage unit  from the indirect storage unit  of the information processing apparatus (see ) that realizes the server computer group . Further, to realize the back-end processing unit , the CPU  executes a back-end processing program loaded into the direct storage unit  from the indirect storage unit  of the information processing apparatus (see ) that realizes the server computer group .","The table storage service  is functionally operable to store status data, such as status of processing executed by the back-end processing unit . To realize the table storage service , the CPU  executes a table storage service program loaded into the direct storage unit  from the indirect storage unit  of the information processing apparatus that realizes the server computer group . Further, the data stored by the table storage service  can be stored in the indirect storage unit .","The blob storage service  is functionally operable to store various data including execution results of the processing performed by the back-end processing unit . To realize the blob storage service , the CPU  executes a blob storage service program loaded into the direct storage unit  from the indirect storage unit  of the information processing apparatus that realizes the server computer group . Further, the data stored by the blob storage service  can be stored in the indirect storage unit .","The queue storage service  is functionally operable in the following manner. As a first function, the queue storage service  enables the request processing unit  and the back-end processing unit  to perform asynchronous data communication. As a second function, the queue storage service  brings a queue message added to a queue into an invisible state or into a visible state.","The first function is described below in more detail. The request processing unit  and the back-end processing unit  communicate with each other using the following method. First, when the request processing unit  receives a processing request from a user, the request processing unit  creates a ticket according to the user's processing request. The created ticket is referred to as a queue message. The request processing unit  stores the queue message in a queue provided by the queue storage service .","The back-end processing unit  acquires the queue message from the queue of the queue storage service . After the back-end processing unit  acquires the queue message, the back-end processing unit  processes the processing request referring to the acquired queue message. Thus, processing of the user's processing request is completed.","As described above, using the queue storage service  enables to realize asynchronous communications to be performed between the request processing unit  and the back-end processing unit . The first function is further described in more detail and the second function is described below.","To realize the queue storage service , the CPU  executes a queue storage service program loaded into the direct storage unit  from the indirect storage unit  of the information processing apparatus that realizes the server computer group . Further, the data (message) stored by the queue storage service  can be stored in the indirect storage unit . The above-described function of the server computer group  is described below in more detail.","The document server  has the following functions. The document server  is functionally operable as a document repository . The document repository  can be realized by the indirect storage unit  of the information processing apparatus (see ) that realizes the document server . For example, the document repository  stores contents of a print instruction received from a user via the client computer  or the image forming apparatus . The contents stored in the document repository  include the following contents in addition to preliminarily stored contents.","For example, when a user creates a content using an application of the server computer group  via a browser  described below, the created content is stored in the document repository . Thus, even when the content is created using the application of the server computer group , it is easily feasible to print the created content without installing any application on the client computer .","The applications of the above-described server computer group  include a document creation application, an image forming application, a form management application, and other various applications. These applications are stored in the indirect storage unit  illustrated in . If execution of each application is instructed, the instructed application is loaded into the direct storage unit  and executed by the CPU .","Next, the image forming apparatus  is described below in more detail. The image forming apparatus  is functionally operable as a device browser  and a platform application . The device browser  is functionally operable to enable users to view data and information stored in a device accessible via the network . Further, the image forming apparatus  enables users to instruct printing of the content using the device browser . The device browser  is, for example, a web browser.","The platform application  is functionally operable to provide various services. The platform application  can be realized by an application program that operates on the platform. In an exemplary embodiment of the present invention, the platform application  provides a print software service.","As described above, the print software service can transmit received print data to the firmware. Further, the print software service can confirm whether the request processing unit  has completed the generation of print data. In this case, the print software service can confirm the generation based on a job ID created by the request processing unit .","Next, the client computer  is described below in more detail. The client computer  is functionally operable as the browser . The browser  is functionally operable to enable users to view data and information stored in a device accessible via the network . To realize the browser , the CPU  executes a browser program loaded into the direct storage unit  from the indirect storage unit  of the information processing apparatus that realizes the client computer . The browser  is, for example, a web browser.","The document extraction server  has the following functions. The document extraction server  is functionally operable as a document extraction service . The document extraction service  is recorded as a program in the indirect storage unit  of the information processing apparatus (see ) that realizes the document extraction server  and can be loaded into the direct storage unit  when the program is executed by the CPU .","The document extraction service  is functionally operable to access the document server  according to a document extraction instruction received via the external interface  and acquire the content stored in the document repository .","The document conversion server  has the following functions. The document conversion server  is functionally operable as a document conversion service . The document conversion service  is recorded as a program in the indirect storage unit  of the information processing apparatus that realizes the document conversion server  and can be loaded into the direct storage unit  when the program is executed by the CPU . The document conversion service  can convert the format of instructed data into a predetermined data format according to a document conversion instruction received via the external interface .","The print server  has the following functions. The print server  is functionally operable as a spool service . The spool service  is recorded as a program in the indirect storage unit  of the information processing apparatus that realizes the print server  and can be loaded into the direct storage unit  when the program is executed by the CPU .","The spool service  can generate attribute information (e.g., print priority, tint information, etc.), which is required to print instructed data according to an instruction received via the external interface . The network printing system according to an exemplary embodiment can operate in the above-described manner.","Next, a platform system of the server computer group  is described below in more detail with reference to .  illustrates various functions of the server computer group . In , a physical hardware resource provided in the server computer group  can be used as the platform of the server computer group . A platform user of the server computer group  can use a physical hardware resource provided in the server computer group  as a computing resource.","The platform system (i.e., operating system) of the server computer group  is functionally operable as virtual machines  and , a fabric controller , a load balancer , a queue storage service , a table storage service , or a blob storage service .","The platform system operating on the server computer group  includes a plurality of virtual machines  and . The virtual machine can be obtained by dividing the server computer group  (a physical computer group) into logical computers using a virtualization technique. Each logical computer includes an independent operating system to perform various operations. Each logical computer is referred to as an instance. In an exemplary embodiment of the present invention, an instance is operable on a single server computer of the server computer group .","The virtual machine  includes a request processing unit (web role instance)  and a request processing unit agent (agent) . The request processing unit  corresponds to the request processing unit  illustrated in . The request processing unit  can receive a user's processing request via the load balancer . Further, the request processing unit  can transmit a processing request to the back-end processing unit  via the queue storage service .","To assure higher availability of the request processing unit , each request transmitted from an external network (using the HTTP communication) is received via the load balancer , which is located outside of the virtual machine . The load balancer  can manage all requests transmitted from external networks in a unified fashion and can selectively transfer respective requests to a plurality of virtual machines that are equivalent in request processing capability.","The request processing unit agent  collects various kinds of information, such as usage status of the virtual machine , operational state of the request processing unit , resource usage status of the virtual machine , and errors occurring in the request processing unit . The request processing unit agent  periodically transmits the collected information to the fabric controller .","The fabric controller  manages the instances of the request processing unit  and the back-end processing unit . Therefore, the fabric controller  can assure expandability and availability of each instance. For example, if a specific instance stops its operation due to failure of a server in the request processing unit  or in the back-end processing unit , the fabric controller  cannot receive a periodic notice from the request processing unit agent  or from a back-end processing unit agent .","If the fabric controller  cannot receive any periodic notice, the fabric controller  outputs an instruction to a virtual machine to transfer the processing to a new instance. As a result, the number of instances that are currently executing the processing can be maintained at a constant value. The fabric controller  plays a certain role in preventing the processing from being delayed.","The virtual machine  includes the back-end processing unit (worker role instance)  and the back-end processing unit agent (agent) . The back-end processing unit  corresponds to the back-end processing unit  illustrated in .","The back-end processing unit  can receive a processing request from the request processing unit  via the queue storage service . The back-end processing unit  can execute the processing request received from the request processing unit  via the queue storage service .","Further, the back-end processing unit  has scale-out capability, according to which the virtual machine  can expand in such a way as to increase the number of instances provided in the back-end processing unit . If the number of the instances of the back-end processing unit  increases, the data processing amount per back-end processing unit decreases. Thus, the back-end processing unit  can quickly return a processing result as a response to the user's processing request.","The queue storage service  can provide a service that enables the request processing unit  and the back-end processing unit  to perform asynchronous data communication. The queue storage service  corresponds to the queue storage service  illustrated in . The request processing unit  and the back-end processing unit  send various instructions to the queue storage service  to perform asynchronous data communications, as described below in more detail.","The instruction transmitted from the request processing unit  to the queue storage service  is a queue message addition instruction. The instruction transmitted from the back-end processing unit  to the queue storage service  is a queue message acquisition instruction or a queue message deletion instruction.","A sequential operation of the data communications asynchronously performed between the request processing unit  and the back-end processing unit  is described below. The request processing unit  creates a queue message according to a user's processing request and transmits an addition instruction, which instructs to add the created queue message to the queue, to the queue storage service . When the queue storage service  receives the addition instruction, the queue storage service  adds the queue message to the queue.","The back-end processing unit  transmits an acquisition instruction, which instructs to acquire the queue message, to the queue storage service . When the queue storage service  receives the acquisition instruction, the queue storage service  transmits the queue message, a message ID uniquely allocated to each queue message, and a job ID, as a response to the acquisition instruction, to the back-end processing unit .","The message ID is unique information allocated to each queue message to identify the queue message. The message ID can be referred to when the back-end processing unit  instructs to delete the queue message. The job ID is identification information identifying a job, which uniquely determines the content to be actually processed.","When the back-end processing unit  completes the processing request, the back-end processing unit  transmits a queue message deletion instruction corresponding to the message ID to the queue storage service . When the queue storage service  receives the deletion instruction, the queue storage service  deletes the queue message corresponding to the message ID instructed by the back-end processing unit  from the queue. Thus, the present exemplary embodiment can prevent the back-end processing unit  other than the back-end processing unit  having output the deletion instruction from processing the same queue message.","Further, the queue storage service  can bring the queue message added to the queue into an invisible state or into a visible state. If the queue message added to the queue is brought into the invisible state, the queue storage service  does not send any queue message to the back-end processing unit  even when acquisition of the queue message is requested by the back-end processing unit . If the back-end processing unit  acquires a queue message from a queue, the queue storage service  brings the acquired queue message into the invisible state.","If the queue message added to the queue is brought into the visible state, the queue storage service  transmits the queue message to the back-end processing unit  when acquisition of the queue message is requested by the back-end processing unit .","A queue message, which is acquired by the back-end processing unit  and kept in the invisible state, can be brought into the visible state by the queue storage service  if no processing result is returned for a predetermined time from the back-end processing unit  that is currently executing the processing. Therefore, even when the back-end processing unit  cannot continue the processing due to abnormal termination, the processing can be automatically retried.","The table storage service  provides a storage that can be used to store data. The data stored in the table storage service  has a simple format represented by a combination of entity and type information properties. The table storage service  corresponds to the table storage service  illustrated in .","The blob storage service  provides a storage that can be used to store data. Functions provided by the blob storage service  include the capability of storing an assembly of binary data. The blob storage service  corresponds to the blob storage service  illustrated in .","Next, the queue message according to an exemplary embodiment of the present invention is described below with reference to .  illustrates an example of the queue message according to the present exemplary embodiment. The queue message includes a description relating to the content of processing that the request processing unit  requests the back-end processing unit .","The queue message illustrated in  includes a request area  that indicates a location of a queue storage service to which the queue message is added. The queue message further includes a header area  that can transmit authentication information usable to access the queue storage service.","Next, a message data content portion of the queue message is described below. The message data content portion is determined according to a user's processing request. The queue message illustrated in  further includes a <MessgaText> area  that indicates a job ID. According to the example illustrated in , the job ID is \u201cpk01|job01.\u201d The job ID is unique information created according to a user's processing request.","Next, a job management table according to an exemplary embodiment of the present invention is described below with reference to . The job management table illustrated in  can be used to manage sequential processing to be executed by the back-end processing unit  as a job and store related data including job content and processing status. The table storage service  stores the job management table.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":["FIG. 7","FIG. 7"],"b":["506","701","506","701"]},"When data acquired from the table is updated, if an updated value written in the ETag field  is different from the value written in the ETag field  in the acquisition of data, it is feasible to determine that the table is updated by other processing process.","The job management table further includes a Partition Key field  and a Row Key field , which store ID information capable of uniquely identifying a column of the table. The job management table can be used to manage the above-described two values as job ID information.","The job management table further includes a Start Time field  that stores registered job start date and time information and an End Time field  that stores registered job end date and time information. An initial value is stored in the Start Time field  before the job starts. Similarly, an initial value is stored in the End Time field  before the job terminates.","The job management table further includes a Status field  that stores status information of the entire job. The status of a job can be managed according to a processing status of the job and can be classified into any one of Ready (preparation completed), Processing (processing in progress), Success (success), and Failure (failure).","The job management table further includes a DataID field  that stores ID information of data associated with the job. When the blob storage service  stores data, ID information of the data is a unique value in the blob storage service .","The job management table further includes a LastTask field  that records a task number of the task whose execution is completed. In general, a job includes a plurality of tasks to be successively processed. For example, the first task is acquiring a file from a document server and the second task is inputting data into a print spooler service. The first task and the second task are a combination of tasks to be successively executed as a job. If the task acquiring the file from the document server is completed, \u201c1\u201d is recorded in the LastTask field . If none of the tasks is completed, \u201c0\u201d is recorded in the LastTask field .","The job management table further includes a LastTask Result field  that stores a processing result of a finally executed task. The processing result of each task can be managed and classified into any one of None (before-task-end state), Success (success), FailureRetry (retriable failure), and Failure (failure), which is a value to be returned as a processing result of the task.","The job management table further includes a LastTask TryCount field  that records information indicating the number of times of execution of the finally executed task. If the processing result of a task is FailureRetry (retriable failure), the task is executed repetitively. In this case, the number of times of re-execution of the task is recorded in the LastTask TryCount field .","If the numerical value stored in the LastTask TryCount field  becomes equal to or greater than a constant number of times, namely when the repetitive execution of the task cannot be successfully accomplished, the LastTask TryCount field  is used for the control for determining the task as an error.","The job management table further includes a MaxTask field  that records information indicating the number of tasks included in the job. In the present exemplary embodiment, the job can include tasks \u201c\u201d to \u201c.\u201d","The job management table further includes a Task ServiceID field  to a Task Parameter field , which store information that can be used to manage information relating to each task included in the job.","The Task ServiceID field  stores ID information of a service that provides a task to be executed first. The Task Parameter field  stores a parameter to be sent to the task when the task  is executed. Similarly, the Task ServiceID field  and the Task Parameter field  store information (data ID and parameter) relating to a task to be executed next. Finally, the Task ServiceID field  and the Task Parameter field  store information (data ID and parameter) relating to a task to be executed last.","The job management table according to the present exemplary embodiment can store a total of twenty pieces of task information. In the present exemplary embodiment, the upper limit of the number of tasks is set to \u201c20\u201d, although another value can be set as the upper limit of the number of tasks.","Next, a service table according to the present exemplary embodiment is described below with reference to . The service table can be used to manage each service that provides a task. The table storage service  stores the service table.",{"@attributes":{"id":"p-0128","num":"0127"},"figref":["FIG. 8","FIG. 8","FIG. 7"],"b":["506","801","701","802","803","802","803"]},"The service table further includes a URI field  that stores URI information of a web service that provides a service. Accessing the web service identified by the URI information managed (stored) in the URI field  makes it feasible to utilize the service that can be provided.","In the present exemplary embodiment, the web service provides a service and manages URI information representing a provided address. Any other method can be used to provide a service. For example, I\/F of REST can provide a service. An appropriate module, such as DLL, can provide a service.","The service table further includes a Type field  that stores service type information. The service type can be classified into any one of In (input service), Pipe (pipe service), and Out (output service). The input service is a service that performs processing for acquiring data from a document server and a service that can input data from an external system. The pipe service is a service that performs processing for converting document data into print data and is a service that can process data. The output service is a service that performs processing for inputting data into a print server and is a service that can output data to an external system.","The service table further includes an Attribute field  that stores attribute information of the service. The attribute information of the service is information independently defined and registered for each service. For example, according to a service that acquires data from a document server, URI information of the document server is stored as attribute information in the Attribute field . Further, according to a service that inputs a job to a print server, URI information of the print server is stored as attribute information in the Attribute field .","Next, a service sequence table according to an exemplary embodiment of the present invention is described below with reference to . The service sequence table can be used to manage a processing order of each service. The table storage service  stores the service sequence table.",{"@attributes":{"id":"p-0134","num":"0133"},"figref":["FIG. 9","FIG. 9","FIG. 7"],"b":["506","901","701","902","903","902","903"]},"The service sequence table further includes a MaxTask field  that defines the number of tasks included in the sequence. In the present exemplary embodiment, the sequence can include tasks \u201c\u201d to \u201c.\u201d The service sequence table further includes a Task field () to a Task field () that can be used to manage information relating to a task included in the sequence.","The Task field () stores ID information of a service that provides a task to be executed first. Similarly, the Task field () stores information relating to a task to be executed next. The Task field () stores information relating to the task to be executed last.","The service sequence table according to the present exemplary embodiment can store a total of twenty pieces of task information. In the present exemplary embodiment, the upper limit of the number of tasks is set to \u201c20\u201d, although another value can be set as the upper limit of the number of tasks.","The system according to the present exemplary embodiment has the above-described system configuration. Subsequently, a flow of overall processing that can be performed by the system according to the present exemplary embodiment is described below.","First, an overall processing flow of a general network printing system that can be realized by the network printing system having the system configuration illustrated in  to  is described below with reference to .  is a sequence diagram illustrating an example processing flow of the general network printing system that can be realized by the network printing system having the system configuration illustrated in  to .","An overall operation of the network printing system includes a print target document data registration operation, a print target document data conversion (to print data) operation, and a print data printing operation. Of the overall operation, each of the print target document data registration operation and the print data printing operation is an operation including a user operation. Further, the print target document data conversion (to print data) operation is an operation to be executed by the server computer group .","First, the print target document data registration operation is described. The print target document data registration operation includes sequential processing to be performed in response to a start instruction input by a user via the browser  of the client computer . In response to the user operation, the browser  starts communicating with a document data upload application that operates in the request processing unit  and requests acquisition of a document upload screen.","To realize the document data upload application, the CPU  executes the request reception program loaded into the direct storage unit  from the indirect storage unit  of the information processing apparatus (see ) that realizes the server computer group .","If in step S the request processing unit  receives a document upload screen acquisition request from the browser , the document data upload application generates a document data upload screen (see ).",{"@attributes":{"id":"p-0144","num":"0143"},"figref":["FIG. 11","FIG. 11","FIG. 10"],"b":["407","401","407","1001","1002","401","407"]},"The document data upload screen (see ) includes an upload destination (upload location) field  that displays information indicating a server that is executing the document data upload application with which a user is currently communicating. The document data upload screen further includes a target document field  that displays information indicating a storage location in the client computer  that stores document data selected by the user.","When the user selects document data stored in the client computer , the user can press a browse button  by operating the browser . If the user completes the selection of document data to be uploaded to the document data upload application, then the user can press an upload button  via the browser  to start upload processing.","According to the example illustrated in , a document \u201cfolder\/file.pdf\u201d in the client computer  is the document to be uploaded to the document data upload application. Further, when the upload button  is pressed by the user, the request processing unit  is instructed to execute a predetermined upload sequence. More specifically, the sequence ID stored in the Row Key field  of a row that corresponds to the upload sequence defined in the sequence table illustrated in  is allocated to the upload button .","If in step S the user presses the upload button , the browser  transmits a document upload request to the request processing unit . Parameters of the document upload request include document data input in the target document field  and the sequence ID.","In the present exemplary embodiment, the document upload request is a processing request including converting document data uploaded from the browser  to the network printing system into print data having a data format that can be printed by the image forming apparatus , registering the print data into a computer resource of the network printing system (the spool service  of the print server  in the present exemplary embodiment), and enabling the image forming apparatus  to acquire the registered print data.","In step S, the request processing unit  accepts the document upload request transmitted from the browser . Then, the request processing unit  stores the document data received as a parameter of the document upload request in the blob storage service . When the storage of the document data is completed, the blob storage service  returns storage location information (DataID) to the request processing unit .","Next, in step S, the request processing unit  transmits a sequence acquisition request to the table storage service  that stores the service sequence table (see ). The transmitted sequence acquisition request includes, as a parameter, the sequence ID received from the browser  in step S.","In step S, the table storage service  acquires sequence data including the information in the RowKey field  that corresponds to the sequence ID received from the request processing unit  from the service sequence table (see ) and transmits the acquired sequence data to the request processing unit .","In step S, the request processing unit  transmits a job addition request to the table storage service  that stores the job management table (see ). Parameters to be transmitted together with the job addition request to the request processing unit  include the sequence data acquired in step S and the storage location information (DataID) of the document data acquired in step S.","If the table storage service  receives the job addition request, then in step S, the table storage service  performs job generation and addition processing with reference to the parameters received together with the job addition request. The table storage service  adds a generated job to the job management table. Further, the table storage service  transmits a job ID (i.e., information in the Partition Key field  and the Row Key field ) of the generated job to the request processing unit .","In step S, the request processing unit  transmits a message addition request to the queue storage service . A parameter to be transmitted together with the message addition request is the queue message (see ) that includes the job ID (i.e., the information in the Partition Key field  and the Row Key field ) received in step S.","In response to the queue message received from the request processing unit , the queue storage service  performs message addition processing. More specifically, the queue storage service  stores the queue message (i.e., parameter) received together with the message addition request in a queue of the queue storage service .","Further, when the request processing unit  receives the job ID from the table storage service , the document data upload application operating on the request processing unit  generates a document data upload success screen  (see ). In step S, the request processing unit  transmits the generated document data upload success screen  (see ) to the browser . The browser  receives the document data upload success screen (see ) transmitted from the request processing unit  and displays the received screen.",{"@attributes":{"id":"p-0158","num":"0157"},"figref":["FIG. 12","FIG. 12"],"b":["407","1200","1201"]},"The document data upload success screen  further includes an authentication information display area  that displays authentication information (passcode), which is required when the user operates the device browser  to transmit a print data request to the request processing unit , as described below in step S.","In the present exemplary embodiment, the job ID transmitted from the table storage service  to the request processing unit  can be used as the authentication information (passcode). The received job ID can be displayed in the authentication information display area  after print data conversion processing to be performed in steps S to S is completed. In this case, a message indicating that the print data conversion processing is currently executed (e.g., \u201cregistration in progress.\u201d) is displayed.","In step S, to confirm whether the print data conversion processing is completed, the user operates the browser  to press an update button . An inquiry ID, which is generated together with the document data upload success screen  by the request processing unit , is allocated to the update button . The browser  transmits a job ID request that includes the inquiry ID, as a parameter, to the request processing unit .","The request processing unit  generates the above-described inquiry ID together with the document data upload success screen . The request processing unit  transmits the generated inquiry ID and the job ID acquired in step S to the table storage service .","Although not illustrated, in the above-described step S, the request processing unit  performs processing for transmitting the above-described inquiry ID and the job ID acquired in the above-described step S to the table storage service  and requesting the table storage service  to store the inquiry ID in an inquiry ID table (see ). The table storage service  stores the inquiry ID and the job ID acquired from the request processing unit  in the inquiry ID table (see ) and manages the stored ID information.",{"@attributes":{"id":"p-0164","num":"0163"},"figref":["FIG. 13","FIG. 13"],"b":["403","1301","403"]},"The inquiry ID table further includes a PartitionKey field  and a RowKey field  that store ID information capable of uniquely identifying a column of the table. These values, stored in the PartitionKey field  and the RowKey field , are job ID values received by the request processing unit  in the above-described step S.","A management method similar to the job management table illustrated in  can be used to manage the above-described values as two values. The inquiry ID table further includes a RequestID field  that stores inquiry ID information, which is a unique value generated by the request processing unit  together with the document data upload success screen.","In step S, the request processing unit  transmits a sequence confirmation request including, as a parameter, the inquiry ID transmitted together with the job ID request to the table storage service . The table storage service  acquires a job ID corresponding to the received inquiry ID from the inquiry ID table (see ).","The table storage service  acquires job status information  that corresponds to the acquired job ID from the job management table (see ) and transmits the acquired job status information  to the request processing unit .","The request processing unit , if the received status information  is the value \u201cSuccess (success)\u201d, generates the document data upload success screen  that displays the job ID in the authentication information display area  and transmits the generated document data upload success screen  to the browser . The processing performed by the request processing unit  in this case corresponds to step S. However, if the received status information  other than the value \u201cSuccess\u201d, the request processing unit  does not notify the job ID. The processing performed by the request processing unit  in this case corresponds to step S.","To realize the job ID request processing (see steps S and S), the browser  can use the HTML technique, such as Java\u00ae Script, to automatically send a job ID request to the request processing unit . The Java\u00ae Script  illustrated in  is an example of the script that can be used when the document data upload success screen automatically requests a job ID.","Further, the browser  repetitively performs the above-described job ID request processing (see steps S and S) until the request processing unit  transmits a job ID notification to the browser  (see step S) in response to a back-end processing end notification (see step S).","In step S, the browser  receives the job ID notification and displays the received job ID information, as authentication information (passcode), in the authentication information display area  of the document data upload success screen . Therefore, the user can confirm the job ID (i.e., authentication information (passcode)) displayed in the authentication information display area  of the document data upload success screen  via the browser . Through the above-described processing, the user can complete the print target document data registration operation.","Next, the print data printing operation is described below. In step S, the user operates the device browser  to cause the image forming apparatus  to print document data registered in the above-described print target document data registration operation. The device browser  communicates with a document data print application operating on the request processing unit .",{"@attributes":{"id":"p-0174","num":"0173"},"figref":["FIG. 14","FIG. 14"],"b":["409","401","409","1060"]},"The document data print screen illustrated in see  includes an authentication information input field  into which the user can enter the job ID (authentication information (passcode)) acquired in step S. If the user presses a print button  after entering the job ID in the authentication information input field , the device browser  transmits the print data request to the request processing unit .","If the print button  is pressed, the device browser  transmits the job ID entered in the authentication information input field , as a parameter of the print data request, to the request processing unit .","In step S, the request processing unit  transmits a print data acquisition request together with the job ID received from the device browser , as a parameter, to the spool service .","In step S, the spool service  acquires print data corresponding to the job ID received from the request processing unit  from the blob storage service and transmits the acquired print data to the request processing unit .","In step S, the request processing unit  transmits the print data received from the spool service  to the device browser . The image forming apparatus , if the device browser  completes receiving the print data from the request processing unit , causes the firmware (see ) to start printing the received print data. The print data printing operation is completed through the above-described processing.","Next, the print target document data conversion (to print data) operation is described below. The print target document data conversion (to print data) operation includes a document conversion sequence of steps S to S and a spool registration sequence of steps S to S as illustrated in . The server computer group  executes the print target document data conversion (to print data) operation asynchronously with the operation performed by the user via the browser  and the device browser .","First, the document conversion sequence is described. In step S, the back-end processing unit  periodically transmits a message acquisition request to the queue storage service . If a message can be acquired from a queue, then in step S, the back-end processing unit  extracts a job ID from the <MessgaText> area  (see ) of the acquired message.","In step S, the back-end processing unit  transmits a job and service information acquisition request to the table storage service  together with, as a parameter, the job ID acquired in step S. In step S, the table storage service  returns job and service information to the back-end processing unit  in response to the received acquisition request.","First, in the above-described processing, the back-end processing unit  acquires job information corresponding to the job ID from the job management table (see ). Next, the back-end processing unit  acquires ID information of a service that provides a task to be executed next with reference to the acquired job information and acquires service information corresponding to the service ID from the service table (see ).","Next, in step S, the back-end processing unit  acquires the document data stored in the above-described step S from the blob storage service  with reference to the information in the DataID field  included in the above-described job and service information acquired in step S.","Next, in step S, the back-end processing unit  executes the task based on the above-described job information and service information acquired in step S. The task execution processing includes sending, as arguments, the job information and service information (in particular, the parameters managed in the job management table (see )) and the document data acquired in step S.","In the illustrated example of the sequence, the document conversion service  provides the task to be executed in step S. The document conversion service  executes processing for converting the document data into print data having a format that the image forming apparatus  can print. If the document conversion service  completes the print data conversion processing, then in step S, the document conversion service  transmits a task end notification to the back-end processing unit .","In step S, the back-end processing unit  transmits a result acquisition request to the document conversion service . In step S, the document conversion service  returns print data (conversion completed) and a task execution result to the back-end processing unit  in response to the received request.","In step S, the back-end processing unit  causes the blob storage service  to store the print data (conversion completed) acquired in the above-described step S. In step S, the back-end processing unit  causes the table storage service  to store the task execution result in the job management table (see ). For example, the table storage service  changes the status information  of a corresponding task in the job management table (see ), which can be identified based on the processed job ID, to the value \u201cSuccess (success).\u201d","The task for converting document data into print data is completed through the above-described processing. After the above-described sequential task processing is terminated, the back-end processing unit  performs queue message adding and deletion processing to execute the next task.","More specifically, in step S, the back-end processing unit  transmits a message addition request to the queue storage service  to add the message of the job ID processed in the above-described steps S to S. Thus, a processing request of the task to be executed next (to be processed in steps S to S) is completed.","Next, in step S, the back-end processing unit  transmits a message deletion request to the queue storage service  to delete the message processed in the above-described steps S to S. Therefore, the message corresponding to the task processed in the above-described steps S to S can be deleted from the queue and re-execution of the processing due to timeout can be prevented.","Next, the spool registration sequence is described below. The following example is a flow of a task for adding print data to the print server . Processing to be performed in steps S to S is similar to the above-described processing performed in steps S to S.","Next, in step S, the back-end processing unit  acquires the print data stored in the above-described step S, with reference to the job information and service information acquired in step S (more specifically, with reference to the information in the DataID field ), from the blob storage service .","Next, in step S, the back-end processing unit  executes the task based on the above-described job information and service information acquired in step S. The task execution processing includes sending, as arguments, the job information and service information (in particular, the parameters managed in the job management table (see )) and the document data acquired in step S.","In the illustrated example of the sequence, the spool service  provides the task to be executed in step S. The spool service  executed in step S adds print data to the spool service  with reference to the given parameter and the print data.","In the present exemplary embodiment, the spool service  receives the job ID as a parameter and manages the print data in association with a value of the received job ID. If the spool service  completes the above-described processing, then in step S, the spool service  transmits a task end notification to the back-end processing unit .","In step S, the back-end processing unit  transmits a result acquisition request to the spool service . Then, in step S, the spool service  returns a task execution result to the back-end processing unit  in response to the received request.","In step S, the back-end processing unit  causes the table storage service  to store the task execution result in the job management table (see ). For example, the table storage service  changes the status information  of a corresponding task in the job management table (see ), which can be identified based on the processed job ID, to the value \u201cSuccess (success).\u201d","The task for adding print data to the spool service  is completed through the above-described processing. In the present exemplary embodiment, the job terminates upon adding the print data. Therefore, after the above-described sequential task processing is terminated, the back-end processing unit  performs queue message deletion processing.","In step S, the back-end processing unit  causes the queue storage service  to delete the above-described message processed in steps S to S. Therefore, the message corresponding to the task processed in the above-described steps S to S can be deleted from the queue and the job terminates.","If the job terminates, then in step S, the back-end processing unit  transmits the job ID of the terminated job as a back-end processing end notification to the request processing unit . The request processing unit  completes preparation for returning the job ID in response to the job ID request from the browser  by transmitting the back-end processing end notification to the request processing unit .","More specifically, after the above-described back-end processing end notification is received (see step S), if the request processing unit  receives a job ID request from the browser  (see step S), the request processing unit  notifies the job ID to the browser  (see step S).","The above-described processing flow of the general network printing system can be realized by the network printing system having the system configuration illustrated in  to .","As illustrated in , a result responding to a user's request to print document data is not returned to the browser  that the user is operating until the spool service  completes the task of the print data in step S after the upload of the document data is started in step S.","Further, the server computer group  asynchronously executes the document conversion sequence in steps S to S and the spool registration sequence in steps S to S. Therefore, it is difficult to accurately estimate the time when the result responding to the user's request to print document data is returned.","The time when the result is returned is variable depending on the number of instances in the back-end processing unit  that are currently executing the task (or the number of messages stored in the queue storage service ) and the total number of the instances in the back-end processing unit , at the time when the user requests printing of document data.","In other words, the processing of a print request may be immediately started or may be delayed for a long time depending on the number of instances in the back-end processing unit  that are currently executing the task (or the number of the stored messages) and the total number of the instances in the back-end processing unit  at the time when the user requests printing of document data.","Namely, the network printing system utilizing the cloud computing technique illustrated in  has the above-described problem.","A processing flow of a network printing system according to an exemplary embodiment of the present invention, which can solve the problem of the network printing system utilizing the cloud computing technique illustrated in , is described below.",{"@attributes":{"id":"p-0210","num":"0209"},"figref":["FIG. 15","FIG. 15"]},"The sequence diagram illustrated in  is different from the sequence diagram illustrated in  in the content of the print target document data registration operation. Similar to the example illustrated in , a user operates the browser  of the client computer  to start the sequential processing. The browser  communicates with the document data upload application operating on the request processing unit .","In step S, the browser  transmits a document upload screen acquisition request to the request processing unit . If the request processing unit  receives the document upload screen acquisition request from the browser , then in step S, the request processing unit  acquires the total number of the instances in the back-end processing unit  that are operating on the server computer group .","Simultaneously, the request processing unit  acquires the number of instances of the back-end processing unit  that are currently executing the task with reference to a back-end processing status table (see ) managed by the table storage service .","If the number of instances in the back-end processing unit  currently executing the task is smaller than the total number of instances in the back-end processing unit  operating on the server computer group , there is at least one instance of the back-end processing unit  that is not currently executing the task.","Therefore, the back-end processing unit  can immediately start processing a job corresponding to a newly transmitted request. The request processing unit  transmits a sequence ID corresponding to a predetermined sequence of the print target document data registration operation, together with a processing result, to the table storage service .","The sequence ID is determined beforehand so as to correspond to the above-described document upload screen acquisition request received in step S. Similar to the sequence illustrated in , the sequence ID is the value stored in the RowKey field  defined in the sequence table (see ).","In step S, the request processing unit  transmits a sequence acquisition request to the table storage service  that stores the service sequence table (see ). The sequence acquisition request transmitted by the request processing unit  includes, as a parameter, the sequence ID corresponding to the document upload screen acquisition request received in step S.","Then, in step S, the table storage service  transmits sequence data corresponding to the sequence ID received from the request processing unit  to the request processing unit .","In step S, the request processing unit  transmits a job addition request to the table storage service  that stores the job management table (see ). The job addition request transmitted by the request processing unit  includes, as a parameter, the sequence data acquired in step S.","If the table storage service  receives the job addition request, then in step S, the table storage service  performs job generation and addition processing with reference to the parameter included in the received job addition request.","The table storage service  adds the generated job to the job management table. Further, the table storage service  transmits the job ID (i.e., the information stored in the Partition Key field  and the Row Key field ) of the generated job to the request processing unit .","Then, if the request processing unit  receives the job ID from the table storage service , the document data upload application operating on the request processing unit  generates the document data upload screen (see ).","In step S, the request processing unit  transmits the document data upload screen (see ) generated by the document data upload application to the browser . At this moment, the sequence ID is not associated with the upload button  of the document data upload screen (see ).","If the user presses the upload button  of the document data upload screen (see ), then in step S, the browser  transmits a document upload request to the request processing unit . The document upload request transmitted by the browser  includes, as parameters, the document data entered in the target document field  and the sequence ID.","In step S, the request processing unit  accepts the document upload request transmitted from the browser . Then, the request processing unit  causes the blob storage service  to store the received document data (i.e., the parameter) included in the document upload request. If the storage of the document data is completed, the blob storage service  returns storage location information (DataID) to the request processing unit .","Next, in step S, the request processing unit  causes the table storage service  to update job information corresponding to the job ID acquired in step S, which is stored in the job management table (see ). The job information update processing includes transmitting, as a parameter, the storage location information (DataID) of the document data stored in the blob storage service  in step S.","In step S, the request processing unit  transmits a message addition request to the queue storage service . The message addition request transmitted by the request processing unit  includes, as a parameter, a queue message (see ) including the job ID (i.e., the information stored in the Partition Key field  and the Row Key field ) received in the above-described step S.","In response to the received request, the queue storage service  performs message addition processing. More specifically, the queue storage service  stores the received queue message (i.e., the parameter) of the message addition request in a queue of the queue storage service .","Then, the document data upload application operating on the request processing unit  generates a document data upload success screen (see ) with reference to the above-described job ID. In step S, the request processing unit  transmits the generated document data upload success screen (see ) to the browser . The browser  receives the document data upload success screen (see ) transmitted from the request processing unit  and displays the received screen.",{"@attributes":{"id":"p-0230","num":"0229"},"figref":["FIG. 20","FIG. 15","FIG. 20"],"b":["407","2001"]},"The document data upload success screen further includes an authentication information display area  that displays authentication information (passcode), which is required when the user operates the device browser  to transmit a print data request to the request processing unit , as described below in step S.","In the present exemplary embodiment, the job ID transmitted from the table storage service  to the request processing unit  in the above-described step S can be used as the authentication information (passcode). The document data upload success screen illustrated in  is different from the document data upload success screen illustrated in  in that the job ID is preliminarily displayed in the authentication information display area . Further, the document data upload success screen (see ) does not include any update button.","In the present invention, the user can confirm the job ID (i.e., authentication information (passcode)) displayed in the authentication information display area  of the document data upload success screen (see ) via the browser . Through the above-described processing, the user can complete the print target document data registration operation.","The print target document data registration operation performed by the user according to an exemplary embodiment of the present invention is described below in more detail with reference to .  is a flowchart illustrating an example of the user's print target document data registration operation according to an exemplary embodiment of the present invention.","In step S, the browser  transmits a document upload screen acquisition request to the request processing unit . The processing to be performed in step S corresponds to the processing performed in step S in . In step S, the request processing unit  acquires the number of pieces of data registered in the back-end processing status table (see ) stored in the table storage service  to confirm the number of instances in the back-end processing unit  operating on the server computer group  and currently executing the task (more specifically, currently executing job processing).",{"@attributes":{"id":"p-0236","num":"0235"},"figref":["FIG. 17","FIG. 17"],"b":["403","1701","403","1701"]},"The back-end processing status table further includes a Partition Key field  and a Row Key field  that store ID information capable of uniquely identifying a column of the table. The back-end processing status table can be used to manage the above-described two values as ID information.","These values, stored in the Partition Key field  and the Row Key field , are job ID values received by the request processing unit  in step S illustrated in  (more specifically, job ID values used when the request processing unit  transmits the message addition request in step S). A management method similar to the job management table illustrated in  can be used to manage the above-described values as two values.","The back-end processing status table further includes a registration time field  that stores time information automatically set by the table storage service  when the back-end processing unit  adds information to the back-end processing status table.","Further, in step S, the request processing unit  acquires the total number of instances in the back-end processing unit  operating on the server computer group .  illustrates an example of information (a setting file) that can define the total number of the instances in the back-end processing unit  operating on the server computer group .","The information (setting file) illustrated in  is an information definition XML file . The information definition XML file  includes number-of-instances definition information . The information definition XML file  is stored in the indirect storage unit  of each server computer included in the server computer group . In other words, the total number of existing information definition XML files  (same content files) is equal to the number of the server computers that constitute the server computer group .","In step S illustrated in , the request processing unit  reads a numerical value from the description of the number-of-instances definition information  in the information definition XML file , which is stored in the indirect storage unit  of any one of the server computers constituting the server computer group . The request processing unit  identifies the total number of instances in the back-end processing unit  based on the numerical value read from the number-of-instances definition information .","Next, in step S, the request processing unit  compares the number of the instances that are currently executing the task (i.e., the value acquired in the above-described step S) with the total number of instances acquired in the above-described step S. Based on a result of the above-described comparison, the request processing unit  determines whether a task to be executed next by the back-end processing unit  in response to user's uploading of document data (i.e., job processing corresponding to a new request) is immediately executable.","If it is determined that the total number of the instances is not greater than (i.e. less than or equal to) the number of the instances currently executing the task (namely, when there is not any instance that is not currently executing the task (i.e., not currently executing the job processing)) (NO in step S), the request processing unit  determines that the back-end processing unit  cannot immediately execute a new task (more specifically, job processing corresponding to a new request).","On the other hand, if it is determined that the total number of the instances is greater than the number of the instances currently executing the task (namely, when there is at least one instance that is not currently executing the task) (YES in step S), the request processing unit  determines that the back-end processing unit  can immediately execute a new task.","If in step S the request processing unit  determines that the back-end processing unit  cannot immediately execute a new task, then in step S, the request processing unit  generates a document upload standby screen (see ). More specifically, the request processing unit  performs control in such a way as to prevent the user from entering a new request via the browser .","On the other hand, if in step S the request processing unit  determines that the back-end processing unit  can immediately execute a new task, the processing of the request processing unit  proceeds to step S. In step S, the request processing unit  transmits a sequence acquisition request to the table storage service  that stores the service sequence table. The processing to be performed in steps S to S corresponds to the processing performed in step S illustrated in . More specifically, the request processing unit  performs control in such a way as to enable the user to enter a new request via the browser .","The processing to be performed in step S is similar to the above-described processing performed in steps S and S. The processing to be performed in step S is similar to the above-described processing performed in steps S and S.","Next, in step S, the request processing unit  generates the document upload screen (see ).","In step S, the request processing unit  transmits the document upload screen (see ) generated in step S or the document upload standby screen (see FIG. ) generated in step S to the browser . Therefore, the browser  can receive the screen transmitted from the request processing unit .","In step S, the browser  acquires the screen transmitted from the request processing unit  and displays the acquired screen. The processing to be performed in step S is similar to the processing performed in step S illustrated in .",{"@attributes":{"id":"p-0252","num":"0251"},"figref":["FIG. 21","FIG. 21"],"b":["407","2101","2101","402"]},"Next, in step S, the browser  determines whether the screen received in the above-described step S is the document upload screen (see ) generated in step S. If it is determined that the received screen is the document upload standby screen (see ) generated in the above-described step S (NO in step S), the browser  terminates the sequential processing.","On the other hand, if it is determined that the received screen is the document upload screen (see ) generated in step S (YES in step S), the processing of the browser  proceeds to step S. In step S, the browser  accepts document data uploaded from the user via the document upload screen (see ). Then, the processing of the browser  proceeds to step S. Processing to be performed in step S is similar to the processing performed in step S illustrated in .","In step S, the request processing unit  receives the uploaded document data from the browser . Subsequently, the processing of the request processing unit  proceeds to step S. Processing to be performed in step S is similar to the processing performed in step S illustrated in . Processing to be performed in step S is similar to the processing performed insteps S and S illustrated in . Processing to be performed in step S is similar to the processing performed in step S illustrated in .","Next, in step S, the browser  displays the document data upload success screen (see ). The job ID acquired in the above-described step S (step S in ) is preliminarily displayed in the authentication information display area  of the document data upload success screen.","Further, compared to the document data upload success screen  illustrated in , the update button  is not displayed in the document data upload success screen illustrated in . The user's print target document data registration operation is completed through the above-described processing.","The print target document data conversion (to print data) operation performed in steps S to S illustrated in  is similar to the processing performed in steps S to S illustrated in . However, the message acquisition request processing in steps S and S and the message deletion request processing in steps S and S are different from the processing of the sequence illustrated in . The back-end processing unit  performs processing for adding and deleting information to and from the back-end processing status table (see ), as described below with reference to a flowchart illustrated in .",{"@attributes":{"id":"p-0259","num":"0258"},"figref":"FIG. 19"},"In step S, the back-end processing unit  periodically transmits a message acquisition request to the queue storage service . If the queue storage service  receives the message acquisition request from the back-end processing unit , then in step S, the queue storage service  tries to acquire a message (see ) from the queue. If the message can be acquired from the queue, the queue storage service  extracts job ID information from the <MessageText> area  and transmits the acquired job ID information to the back-end processing unit . Therefore, the back-end processing unit  can receive the job ID information.","If the back-end processing unit  receives the job ID information from the queue storage service , then in step S, the back-end processing unit  transmits a launching information addition request to the table storage service  and transmits the job ID information acquired in the above-described step S to be added to the back-end processing status table (see ).","If the table storage service  receives the launching information addition request from the back-end processing unit , then in step S, the table storage service  registers the received job ID information into the back-end processing status table (see ).","Next, in step S, the back-end processing unit  transmits a job and service information acquisition request together with the job ID information acquired in the above-described step S to the table storage service .","If the table storage service  receives the job and service information acquisition request, then in step S, the table storage service  acquires job information corresponding to the job ID (see  and ) from the job management table (see ). Next, the table storage service  acquires ID information of a service that provides a task to be executed next (service ID of a task corresponding to the next task in the LastTask field ) from the acquired job information.","Further, the table storage service  acquires service information corresponding to the service ID (see ) from the service table (see ). Then, the table storage service  transmits the acquired job information and service information to the back-end processing unit . Therefore, the back-end processing unit  can receive the job information and service information.","In step S, the back-end processing unit  executes the task based on the acquired job information and service information.","In step S, the back-end processing unit  transmits a launching information deletion request to the table storage service  that stores the back-end processing status table (see ), if termination of the task execution is confirmed, and transmits the job ID information acquired in step S to be deleted from the back-end processing status table.","If the table storage service  receives the launching information deletion request, then in step S, the table storage service  deletes information corresponding to the job ID information included in the received launching information deletion request from the information registered in the back-end processing status table (see ).","Performing the processing of the flowchart illustrated in  as described above before or after the back-end processing unit  executes a task can realize the processing for adding and deleting information to and from the back-end processing status table (see ) managed by the table storage service . Thus, the request processing unit  can execute the processing of step S illustrated in .","Through the above-described processing, determining whether a user's request of printing document data is immediately executable becomes feasible by referring to the number of the instances in the back-end processing unit  that are currently executing the task and the total number of the back-end processing instances at the time when the user requests printing of the document data.","In the above-described steps S to S illustrated in , the number of instances in the back-end processing unit  that are currently executing the task is compared with the total number of the back-end processing instances. If the total number of the back-end processing instances is greater than the number of the instances in the back-end processing unit  that are currently executing the task, it is determined that a new request is immediately executable.","On the other hand, if the total number of the back-end processing instances is not greater than (i.e. less than or equal to) the number of the instances in the back-end processing unit  that are currently executing the task, it is determined that a new request is not immediately executable.","However, instead of using the number of the instances in the back-end processing unit  that are currently executing the task at the time when the user requests printing of the document data, it is also useful to use the number of messages stored in the queue storage service , or the number of unfinished jobs stored in the job management table at the time when the user requests printing of the document data. In the present exemplary embodiments, the unfinished job is a job whose status is Ready (preparation completed) or Processing (processing in progress) in the Status field .","According to the above-described configuration, the processing to be performed in steps S to S illustrated in  is changed in the following manner.","In step S illustrated in , the request processing unit  acquires the number of messages stored in the queue storage service  (or the number of unfinished jobs stored in the job management table). Further, in step S, the request processing unit  acquires the total number back-end processing instances. Further, in step S, the request processing unit  compares the acquired number of the messages (or the acquired number of the unfinished jobs) with the total number of the back-end processing instances.","Then, if the total number of the back-end processing instances is greater than the number of the messages (or the number of the unfinished jobs), the request processing unit  determines that a new request is immediately executable. On the other hand, if the total number of the back-end processing instances is not greater than (i.e. less than or equal to) the number of the messages (or the number of the unfinished jobs), the request processing unit  determines that a new request is not immediately executable. The above-described configuration is thus employable.","Through the above-described configuration, determining whether the user's request of printing document data is immediately executable becomes feasible by referring to the number of messages stored in the queue storage service  (or the number of unfinished jobs stored in the job management table) and the total number of the back-end processing instances at the time when the user requests printing of the document data.","As described above, the present exemplary embodiment can improve usability of a network printing system by enabling each user to be disconnected in advance from the network printing system without waiting for completion of server processing on document data uploaded by the user. More specifically, authentication information, which is required when an image forming apparatus performs print processing, can be returned to a client terminal without waiting for completion of server processing on document data uploaded from the client terminal.","The network system according to an exemplary embodiment of the present invention is not limited to the above-described examples of the network printing system. For example, the computer resources that can be used by the server computer group  are not limited to the document server , the image forming apparatus , the document extraction server , the document conversion server , and the print server .","Another usable computer resource can be any server having the capability of executing processing according to an instruction from the back-end processing unit  of the server computer group . For example, an example computer resource is a data processing server that performs data processing (e.g., data analysis processing and statistical processing) or a data server that stores a result of the data processing.","Further, the request to be transmitted from the browser  to the request processing unit  may be a data processing request that requests to perform data processing (e.g., analysis processing and statistical processing) on data uploaded from the browser  and store a result of the data processing to the data server.","If the request processing unit  accepts the data processing request, the back-end processing unit  processes a job corresponding to the data processing request asynchronously with the acceptance of the request. More specifically, the back-end processing unit  causes the data processing server to perform data processing on the data corresponding to the data processing request. Further, the back-end processing unit  causes the data server to store a result of the data processing. Thus, the back-end processing unit  can complete job processing corresponding to the data processing request.","Even in the above-described example, as illustrated in , the request processing unit  transmits authentication information to the browser , without waiting for completion of the job processing corresponding to the data processing request. The transmitted authentication information enables a user of the browser  to acquire the result of the job processing corresponding to the data processing request (data processing result).","Further, as illustrated in , the request processing unit  determines whether the back-end processing unit  can immediately execute the job processing corresponding to the data processing request before accepting the data processing request. Then, if it is determined that the back-end processing unit  cannot immediately execute the job processing, the request processing unit  performs control in such a way as not to accept the data processing request. On the other hand, if it is determined that the back-end processing unit  can immediately execute the job processing, the request processing unit  performs control in such a way as to accept the data processing request.","As described above, according to the exemplary embodiments of the present invention, each client computer can be disconnected from a network system without waiting for completion of processing in the network system that responds to a request from the client computer. Therefore, the exemplary embodiments of the present invention can improve usability of the network system. As a result, the client computer can transmit a next request to the network system before the network system completes the processing responding to the preceding request transmitted from the client computer.","It is needless to say that the configurations and contents of various data are not limited to the above-described examples and can be modified in various ways considering intended usages and purposes. The present invention is not limited to the above-described exemplary embodiments and can be embodied, for example, as a system, an apparatus, a method, a program, or a storage medium. More specifically, the present invention can be applied to a system including a plurality of devices and can be applied to an apparatus constructed as a single device.","Aspects of the present invention can also be realized by a computer of a system or apparatus (or devices such as a CPU or MPU) that reads out and executes a program recorded on a memory device to perform the functions of the above-described embodiment (s), and by a method, the steps of which are performed by a computer of a system or apparatus by, for example, reading out and executing a program recorded on a memory device to perform the functions of the above-described embodiment(s). For this purpose, the program is provided to the computer for example via a network or from a recording medium of various types serving as the memory device (e.g., computer-readable medium).","While the present invention has been described with reference to exemplary embodiments, it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications, equivalent structures, and functions.","This application claims priority from Japanese Patent Application No. 2010-036173 filed Feb. 22, 2010, which is hereby incorporated by reference herein in its entirety."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate exemplary embodiments, features, and aspects of the invention and, together with the description, serve to explain the principles of the invention.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 10","FIGS. 10A"],"b":["10","10"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 15","FIGS. 15A"],"b":["15","15"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 21"}]},"DETDESC":[{},{}]}
