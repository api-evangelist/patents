---
title: System and method for property-based focus navigation in a user interface
abstract: An improved system and method for focus navigation behavior specification in a user interface is provided. To this end, an application may include declarations that may associate a focus navigation resource with a user interface object and a focus navigation behavior may be dynamically selected for changing the input focus in the user interface. A focus navigation engine may be provided for applying a number of focus navigation behaviors for moving input focus within and among logical groups of user interface objects. A visual representation of the user interface objects with the applied focus navigation behavior may be generated and a display representation may be rendered for presentation on a user interface display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07636897&OS=07636897&RS=07636897
owner: Microsoft Corporation
number: 07636897
owner_city: Redmond
owner_country: US
publication_date: 20041119
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention is related to the following copending United States Patent Application filed concurrently herewith, assigned to the assignee of the present invention, and hereby incorporated by reference in its entirety, \u201cSystem and Method for Directional Focus Navigation,\u201d.","The invention relates generally to computer systems, and more particularly to an improved system and method for property-based focus navigation behavior specification in a user interface.","When creating computer application, a developer typically may chose a particular environment, or platform on which the application will ultimately be executed. For example, when writing and application, the developer may choose to develop the application to run on the MICROSOFT WINDOWS\u00a9 platform. As a result, the program developer may have different options available for defining how to change the input focus of a user interface object during interactions with a user of the application. An application developer may program the application with default focus navigation behavior provided by the platform or may create customized focus navigation behavior for specifying the order in which input focus may change from one user interface element to another.","Although functional, this process suffers certain drawbacks. For instance, in order to customize focus navigation for a particular system, a developer may be required to explicitly specify the order in which user interface elements should receive input focus when input for changing focus may be received. Although some systems may allow an application developer to specify the order in which logical navigation may change focus of a user interface element, such as by defining a tab index to determine which user interface element will be given input focus when the tab key on a keyboard is pressed, such a specified order may be applied globally for the user interface elements. If the application developer desires a different order for a specific group of user interface elements, customized code may need to be written by the application developer to perform focus navigation in a different order for each such group of user interface elements. This may become a cumbersome and repetitive process since the customized focus navigation code may only apply to one group of user interface elements and the process of customizing the focus navigation for other groups of user interface elements may need to be repeated for each group of user interface elements where a different order is desired for changing input focus.","What is needed is a way for an application developer to customize the behavior of focus navigation for user interface elements and more easily define how focus navigation will behave for the user interface elements during interactions with a user of the application. Moreover, such a system and method should allow a developer to use such a defined focus navigation behavior for other user interface elements.","Briefly, the present invention provides an improved system and method for focus navigation in a user interface. To this end, an application may include declarations that may associate a focus navigation resource with a user interface object and a focus navigation behavior may be dynamically selected for changing the input focus in the user interface. The focus navigation resource may define property values that may be selectively applied to specify a desired focus navigation strategy. A focus navigation engine may be provided for applying a focus navigation resource to a user interface object to dynamically change the input focus of the user interface object. Furthermore, a property engine may be provided for locating property values, a tree assembler may be provided for generating a visual representation of the user interface object with the applied property values of a focus navigation resource, and a rendering engine may be provided for rendering a display representation of the visual representation for presentation on a user interface display.","The present invention may also provide methods for property-based focus navigation in a user interface. When a notification of input for focus navigation is received, the user interface object that has the input focus may be located. A logical grouping of user interface objects that includes the user interface object that has input focus and that may have an associated property for the input received may then be located. One or more property values of a focus navigation resource may then be applied to the logical grouping of user interface objects to change the input focus, a visual representation of the user interface objects with the applied property values of the focus navigation resource may be generated, and a display representation of the visual representation may be rendered for presentation on a user interface display.","Advantageously, the present invention may provide a number of focus navigation behaviors for moving input focus within and among logical groups of a user interface objects. The architecture of the present invention may support associating a focus navigation resource with several user interface objects for changing input focus of a user interface object. Thus, an application developer may define a focus navigation resource and may declaratively associate any number of user interface objects with the defined focus navigation resource. Moreover, the focus navigation resource may specify focus navigation behavior locally for a logical group of user interface objects.","Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:","Exemplary Operating Environment",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, headless servers, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules  and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a tablet, or electronic digitizer, , a microphone , a keyboard  and pointing device , commonly referred to as mouse, trackball or touch pad. Other input devices not shown in  may include a joystick, game pad, satellite dish, scanner, or other devices including a device that contains a biometric sensor, environmental sensor, position sensor, or other type of sensor. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . The monitor  may also be integrated with a touch-screen panel  or the like. Note that the monitor and\/or touch screen panel can be physically coupled to a housing in which the computing device  is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device  may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface  or the like.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Property-Based Focus Navigation in a User Interface","The present invention is generally directed towards a system and method for focus navigation in a user interface. As used herein, focus, or input focus, may mean setting a user interface object in a user interface to receive input from an input device or executable code. Focus navigation may mean the process of changing input focus in a user interface. Focus navigation that may be logically defined without necessarily relating to the physical arrangement on a display may be referred to as logical navigation. Focus navigation that may be spatially defined and may relate to the physical arrangement of user interface objects on a display may be referred to as directional navigation.","In particular, the present invention relates to associating a focus navigation resource with a user interface object for dynamically applying a focus navigation behavior to change the input focus in the user interface. Furthermore, the present invention may allow an application developer to define a focus navigation resource and declaratively associate any number of user interface objects with the defined focus navigation resource. As will be seen, the architecture of the present invention may be used for development of many different applications. As will be understood, the various block diagrams, flow charts and scenarios described herein are only examples, and there are many other scenarios to which the present invention will apply.","Turning to  of the drawings, there is shown a block diagram generally representing an exemplary architecture for associating a focus navigation resource with a user interface object for changing input focus in a user interface. Those skilled in the art will appreciate that the functionality implemented within the blocks illustrated in the diagram may be implemented as separate components or the functionality of several or all of the blocks may be implemented within a single component. For example, the functionality of the layout engine  may be included in the tree assembler , or the functionality of the property engine  may be implemented as a separate component from the tree assembler . In an embodiment all the components illustrated in  may reside and operate on a single computer system such as system  described in conjunction with . Alternatively, one or more of the components illustrated in  may be performed on separate computer systems in a distributed network, as is known to those skilled in the art.","An application  may be any executable software code including a kernel component, an application component, a linked library, an object, and so forth. The application  may execute on a computer system such as computer system  to display elements of a user interface, including a user interface object with input focus, among other things. Each user interface object  may include associated methods and events (not shown). In accordance with embodiments of the present invention, the objects may be user interface elements that may be independent of any associated focus navigation resource for changing input focus in a user interface.","In order to associate a focus navigation resource with a user interface object, the application  may access user interface resources . Among the user interface resources , there may be focus navigation resources  that may be used in general for developing an application. A focus navigation resource may be stored separately from the user interface objects and may be relatively independent of the user interface objects themselves. The focus navigation resources  may be focus navigation definitions developed or designed by the developer of the application  or the definitions  may be created by a third party. The focus navigation definitions relate to the actual focus navigation properties to be associated with the user interface objects  of an application in order to change the input focus in a user interface. The focus navigation resource may influence the display of user interface objects by specifying property values for focus navigation behavior to change the input focus in the user. For instance, focus navigation definitions may include focus navigation properties such as specifying logical navigation, directional navigation, input key(s) used to change input focus, the navigation behavior, and so forth.","In an embodiment, the application  may have declarations  that may associate properties of the focus navigation resources  to user interface objects . The declarations  may provide the declarative program statement(s) that associates one or more user interface objects to a focus navigation resource. Such an association may be made by explicitly identifying the user interface object and the focus navigation resource, or by providing a default focus navigation resource, or by inheritance from a parent user interface object, or by some other method.","Application  may be operably coupled to executer on platform . Platform  may include the framework of application programming interface (API) that may provide the necessary communication between toe application  and the operation system of the computer, such as computer  shown in . As such, the platform  may provide the intermediate functions and services that may allow the application  to ultimately display user interface elements, such as user interface objects , on a user interface display . Although not shown, the operation system and its necessary operation occur between platform  and user interface display . In and particular embodiment of the invention, the platform  may be the MICROSOFT WINDOWS platform developed by MICROSOFT Corporation.","Within the platform , an input system  may be responsible for handling all the input received from a user interacting with the application through input devices such as a mouse, stylus on a tablet, keyboard and other types of devices. The focus navigation engine  may be operably coupled to the input system  for receiving notification of input for focus navigation. The focus navigation engine may include functionality for locating a logical grouping of user interface objects that may have an associated property for the input received and may act on the property associated with the logical grouping of user interface objects to change the input focus.","A tree assembler  may be operably coupled to the focus navigation engine  and may parse the information received from the application  in order to build a \u201cvisual tree\u201d which is an internal representation of the display and thus represents the combination of the user interface objects  to be displayed and the information from the focus navigation resources  that describes how to change the input focus of the user interface objects displayed. In an embodiment, the tree assembler  includes a property engine  for locating the appropriate property values of focus navigation properties. In an embodiment, the tree assembler  may receive the user interface objects and the focus navigation information directly from the application . In other embodiments, the tree assembler  may create the required user interface objects directly from the data store  using data  and the focus navigation resources , respectively, through the operation of the data binding.","The tree assembler  may complete the visual tree and pass the tree to the rendering engine . In an embodiment, the tree may be passed relatively directly to the rendering engine , which, in turn may use the visual tree to render a display representation of the user interface objects on the user interface display . In an alternative embodiment, the visual tree may be passed first to a layout engine  that may understand the physical properties of the display such that it may determine where to place certain display items and how large to make them relative to the physical characteristics of a particular computer system. To do so, the layout engine  may add more information to the visual tree by using user interface elements from a user interface object factory to complete the tree. The application  and the tree assembler  may typically operate in a dynamic environment whereby the tree assembler  may make an initial visual tree and, as the application  runs and display items may change, the tree assembler  may rewrite or modify the visual tree to update the display representation on the user interface display .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIG. 3"],"b":["302","304","306","308"]},"It may be important to a user interacting with an application to understand which user interface object may have input focus because each user interface object may respond differently to any input provided. For instance, a user may see the actual text typed on the keyboard within a text box. As another example, a Button may respond by receiving an event from depressing a particular key such as the Enter key. Accordingly, a user interface object that has input focus may be distinguished from other user interface objects in a user interface display by some form of visualization, such as highlighting, to provide an indication to a user interacting with the application which user interface object has input focus.","In one embodiment, the functionality for focus navigation may be provided through the instantiation of an object defined by a static class.  presents an illustration generally representing an exemplary base class definition for focus navigation functionality. The illustration shows a definition of a static class  named KeyboardNavigation  that may be used to apply focus navigation behavior specified by a property to a logical grouping of user interface objects such as the logical grouping of the four user interface objects discussed above in conjunction with . The exemplary class definition  of KeyboardNavigation  may include three properties: a logical navigation property that may use the control and tab keys named ControlTabNavigationProperty , a directional navigation property named DirectionalNavigationProperty , and a logical navigation property that may use the tab key named TabNavigationProperty . Additionally, the exemplary class definition of KeyboardNavigation may include six methods: SetTabNavigation  for setting the TabNavigationProperty  property associated with a user interface object to a keyboard navigation mode, KeyNavigationMode GetTabNavigation  for obtaining the TabNavigationProperty  mode of a user interface object, SetControlTabNavigation  for setting the ControlTabNavigationProperty  property associated with a user interface object to a keyboard navigation mode, KeyNavigationMode GetControlTabNavigation  for obtaining the ControlTabNavigationProperty  mode of a user interface object, SetDirectionalNavigation  for setting the DirectionalNavigationProperty  property associated with a user interface object to the keyboard navigation mode, and KeyNavigationMode GetDirectionalNavigation  for obtaining the DirectionalNavigationProperty  mode of a user interface object.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4B","b":["426","428","430","432","434","436","438","440"]},"Any application developer may attach one of the defined properties to a logical group of user interface objects to apply a behavior to a logical group of user interface objects. Those skilled in the art will appreciate that other focus navigation classes may be defined and other focus navigation behaviors may be enumerated. For example, a focus navigation class may be defined for any directional input device including a remote control, a phone, or other device with a directional input mechanism.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 5","FIG. 3"],"b":["502","510","502","504","508","504","506","508"]},"The exemplary layout definition shown in  may be used to build a visual tree representing the layout of a user interface object that may include other user interface objects which together may form a logical grouping of user interface objects. For instance,  presents an illustration generally representing an exemplary visual tree for a user interface object such as the markup declared in . A \u201cvisual tree\u201d may be a representation in a tree-like structure having nodes for the visual representation of the user interface objects to be displayed. Not all user interface objects may be in a visual tree because not all user interface elements may have visual information. The DockPanel may be one of many user interface objects presented on a visual display, and, consequently, the visual representation for the DockPanel may be a visual subtree  which represents only part of a potentially larger visual tree that may include all the user interface elements presented on a visual display. In general, the tree assembler, such as tree assembler  shown in , may set the assigned property values of the DockPanel, create the visual subtree with any applied focus navigation properties, and add the visual subtree to the visual tree.","The first item shown in the visual subtree  is a DockPanel item . When building the tree, the tree assembler may encounter the DockPanel item in a declaration. Upon encountering the DockPanel declaration, a node for the DockPanel item may be created to be placed in the visual subtree. Next, an inquiry may be performed to determine whether any focus navigation information may be attached to the DockPanel item. Such focus navigation information may include property values of the DockPanel as well as property values of any user interface elements included in the DockPanel which may form a logical grouping of user interface objects. As a result of the inquiry, the tree assembler may subsequently discover the layout definition for the DockPanel on line  in  which assigns the value of \u201cCycle\u201d to the logical navigation property of TabNavigation. The tree assembler may store this property with its assigned value in the node for the DockPanel .","The tree assembler may next encounter declaration of user interface elements included in the DockPanel which may form a logical grouping to which the TabNavigation property may be applied. For each of these user interface elements declared, a node may be created and placed underneath the node for the DockPanel . For example, a node  may be created for the ComboBox declared on line  and placed beneath the DockPanel node , a node  may be created for the Button declared on line  and placed beneath the DockPanel node , and a node  may be created for the Button declared on line  and placed beneath the DockPanel node . After creating the nodes for the user interface objects included in the DockPanel and adding them to the node for the DockPanel , the visual subtree  for the DockPanel may be completed and the tree assembler may add the visual subtree to the visual tree.","Upon completing the visual subtree  and adding the visual subtree  to the visual tree, the visual tree may be passed to a layout engine, such as engine  in  for including additional user interface elements prior to being sent to the rendering engine . In another embodiment, the layout engine may call the tree assembler as needed to generate the tree just in advance of the layout process. Rendering engine  may render a display representation from the visual tree for presentation on a user interface display.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 7","FIG. 2","FIG. 2","FIG. 1"],"b":["202","214","110"]},"At step , notification of focus navigation input may be received. For instance, the tab key on a keyboard may be depressed and notification of the depressed tab key may be communicated by the input system to the focus navigation engine. Upon receiving the notification, the user interface object that has input focus may be located at step . After the user interface object that has input focus has been located, the logical grouping that includes the user interface object with input focus and that has an attached property for specifying focus navigation behavior for the focus navigation input received may be located at step . If the parent user interface object in the logical grouping that includes the user interface object with input focus does not have an attached property for specifying focus navigation behavior for the focus navigation input received, then the parent of the parent user interface object in the logical grouping that includes the user interface object with input focus may be checked to see whether it may have an attached property for specifying focus navigation behavior for the focus navigation input received. In one embodiment, a search may thus proceed by walking the visual tree to locate a user interface object with an attached property for specifying focus navigation behavior for the focus navigation input received and that may be in a logical grouping that includes the user interface object with input focus.","Upon locating such a user interface object with an attached property for specifying focus navigation behavior for the focus navigation input received, the focus navigation behavior assigned to the attached property may be applied to the visual representation of the logical grouping of user interface objects at step  to change the input focus of the user interface object. After applying the focus navigation behavior to the visual representation of the logical grouping of user interface objects, a display representation of the visual representation may be rendered at step . Upon rendering the display representation, the process is finished.","There may be several focus navigation behaviors that may be assigned to a property attached to a logical grouping of user interface elements in order to change the input focus of a user interface. For instance, there are six focus navigation behaviors that may be, for example, assigned to the TabNavigation property or the ControlTabNavigation property. To cycle through a logical group of user interface objects, the \u201cCycle\u201d value may be assigned to a logical navigation property for this focus navigation behavior. The application of the focus navigation behavior for cycling results in changing input focus from one user interface object to the next while remaining in the logical group. After reaching the last or first user interface objects within the logical group, the input focus may be changed by moving the input focus to the first or last user interface object within the logical group, depending upon the direction of the navigation.","For example,  presents an illustration generally representing an exemplary display representation of a user interface object, namely a DockPanel  that may include a Button  labeled \u201cOK\u201d, a FlowPanel  with Button  labeled \u201cAccept\u201d and Button  labeled \u201cCancel\u201d, and a ListBox .  presents an illustration generally representing an exemplary visual tree for the display representation of the user interface object of , namely a visual tree  with node  for the DockPanel, a node  for the \u201cOK\u201d Button, a node  for the FlowPanel with a child node  for the \u201cAccept\u201d Button and a child node  for the \u201cCancel\u201d Button, and a node  for the ListBox. The visual tree  may represent the logical grouping of user interface objects for the visual representation of the DockPanel to be displayed. If the focus navigation behavior of cycling may be assigned to the DockPanel , the focus navigation behavior for cycling may switch the input focus between the Button , the Button , the Button , and the ListBox  and then switch back to Button . Or if the navigation direction is opposite, then the focus navigation behavior for cycling may switch the input focus between the ListBox , the Button , the Button , the Button , and then switch forward to the ListBox . Thus, the input focus may not leave the logical group of user interface objects using this focus navigation behavior.","To cycle through a logical group of user interface objects only once, the \u201cContained\u201d value may be assigned to a logical navigation property for this focus navigation behavior. The application of this focus navigation behavior results in changing input focus from one user interface object to the next while remaining in the logical group. However, when starting focus navigation from either the first user interface object, Button , or the last user interface object, ListBox , focus will remain on the respective user interface object, depending upon the direction of the navigation. The input focus may not leave the logical group of user interface objects using this focus navigation behavior. Considering , if the property value of \u201cContained\u201d was assigned to the logical navigation property attached to the FlowPanel , the focus navigation behavior for contained may, for example, switch the input focus between the Button  and the Button , and then remain on the Button . In one embodiment, this focus navigation behavior may operate like cycling if set on the root of a visual tree.","To cycle through a logical group of user interface objects once and then continue on to the next logical group of user interface objects, the \u201cContinue\u201d value may be assigned to a logical navigation property for this focus navigation behavior. The application of this focus navigation behavior results in changing input focus from one user interface object to the next within a logical group, and then, when starting focus navigation from the first or last user interface object, this focus navigation behavior may continue on to the next logical group of user interface objects for setting the input focus depending upon the direction of the navigation. Considering , if the property value of \u201cContinue\u201d was assigned to the logical navigation property attached to the FlowPanel , the focus navigation behavior for Continue may, for example, switch the input focus between the Button  and the Button , and then continue on to the ListBox  to apply the behavior associated with the ListBox . In one embodiment, this focus navigation behavior may switch among user interface objects within a logical group using a depth first search by walking the visual tree user interface objects in the logical group. In another embodiment, a breadth first search may be used. In yet another embodiment, this focus navigation behavior may operate like the \u201cContained\u201d focus navigation behavior if set on the root of a visual tree.","To allow input focus only once in a logical group of user interface objects and then continue on to the next logical group of user interface objects, the \u201cOnce\u201d value may be assigned to a logical navigation property for this focus navigation behavior. The application of this focus navigation behavior results in allowing logical navigation only on one user interface object within a logical group, and then continues on to the next logical group of user interface objects for changing the input focus. This focus navigation behavior may be applicable to any user interface object such as a control that may have more than one displayable user interface item. After applying input focus on only one user interface object among potentially several in a logical grouping, this focus navigation behavior may move on to another logical grouping of user interface objects to apply the focus navigation that may be associated with that logical grouping.","Considering , if the property value of \u201cOnce\u201d was assigned to the logical navigation property attached to the ListBox , the focus navigation behavior may, for example, only go to one of the ListBox items such as item , and when the tab key may be pressed again, the focus navigation behavior may next leave ListBox  to move to another user interface object such as Button  to switch the input focus on Button . In one embodiment, a user interface object such as a control with more than one displayable user interface item may use this focus navigation behavior to return input focus to the last focused item.","To exclude input focus from a logical group of user interface objects during focus navigation and continue on to the next logical group of user interface objects, the \u201cNone\u201d value may be assigned to a logical navigation property for this focus navigation behavior. The application of this focus navigation behavior results in disallowing logical navigation to a logical group of user interface objects for moving input focus. This focus navigation behavior may skip the logical group and continue on to the next logical group of user interface objects for setting the input focus.","To navigate through a logical group of user interface objects using a specified navigation order and then continue on to the next logical group of user interface objects, the \u201cLocal\u201d value may be assigned to a logical navigation property for this focus navigation behavior. The application of this focus navigation behavior results in changing input focus from one user interface object to the next within a logical group according to a specified navigation order, and then after all user interface objects within the logical group have had input focus, this focus navigation behavior may continue on to the next logical group of user interface objects for setting the input focus. The order for navigating input focus among user interface objects within a logical group may be defined by Tab Indexes. The scope of Tab Indexes may be defined locally for a logical group and the navigation order for input scope may be defined by assigning a tab index value in Tab Indexes for each user interface object in the logical group. By setting the property of \u201cLocal\u201d, the scope of Tab Indexes may be specified on the logical group of user interface objects and the order may not be derived from a parent user interface object that may define another order for Tab Indexes. In one embodiment, if Local value is not defined for a logical group, then a globally defined default may be used for the navigation order.","Using the above systems and methods, an application author may provide customized focus navigation behavior for input focus in a user interface. The defined focus navigation behavior may be used for one or more different user interface objects, in accordance with aspects of the present invention. Importantly, the application author can specify focus navigation behavior in a declarative manner to program how a user interface may change input focus. In doing so, the focus navigation resources may be separated from the user interface objects. Consequently, the author or an end user may change the focus navigation resources without changing the user interface objects. Likewise, the author may adjust the user interface objects without changing the focus navigation resources.","As can be seen from the foregoing detailed description, the present invention provides an improved system and method for focus navigation in a user interface. A focus navigation resource may be customized and applied to any type of user interface object to define how input focus may be changed in the user interface during interactions with a user. The architecture of the present invention may support a number of focus navigation behaviors for moving input focus within and among logical groups of a user interface objects. In general, an application developer may define a focus navigation resource and declaratively associate any number of user interface objects with the defined focus navigation resource and, significantly, that focus navigation resource may be used by a developer for user interface objects in any number of other applications. As is now understood, the system and method thus provide significant advantages and benefits needed in contemporary computing.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 9","FIG. 8"]}]},"DETDESC":[{},{}]}
