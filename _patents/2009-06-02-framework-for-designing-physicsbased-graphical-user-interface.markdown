---
title: Framework for designing physics-based graphical user interface
abstract: A graphics development framework for designing physics-based graphical user interfaces is described herein. According to one embodiment, visually linkable patches are displayed in a first window of a graphics development framework, where the patches represent a graphics composition which when rendered, animate a physical movement of a graphics object of the physics-based GUI. A feedback patch is displayed to visually provide a feedback from an output of the composition to an input of the composition, such that a subsequent physical movement of the graphics object is determined based on a previous physical movement of the graphics object, without requiring a user to program source code of the displayed patches. A result of rendering is instantly displayed in a second window of the graphics development framework, simulating the physical movement of the graphical object. Other methods and apparatuses are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08584027&OS=08584027&RS=08584027
owner: Apple Inc.
number: 08584027
owner_city: Cupertino
owner_country: US
publication_date: 20090602
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICES","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE DESCRIPTION","DETAILED DESCRIPTION"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The present invention relates generally to graphical user interface designs. More particularly, this invention relates to a framework for designing physics-based graphical user interface.","It is known in the art of computer graphics to create motion graphics programs called \u201ccompositions.\u201d Compositions are a relatively simple way in which a user can intuitively create motion graphical effects (such as a moving background, flashing text, etc.) without extensive knowledge of how to program a computer. An exemplary program that allows for the creation of composition files is known as the Quartz Composer\u2122, available from Apple Inc.","Quartz Composer is based on and brings together several graphical and non-graphical technologies, such as Quartz 2D, Core Image, Core Video, OpenGL, QuickTime, MIDI System Services, and Real Simple Syndication. As a result, once created, compositions can be incorporated into any number of applications, such as iPhoto, iMove, iChat, etc.","When creating a composition file, the editor portion of the Quartz Composer program contains a grid for assembling and connecting \u201cpatches\u201d, which are selected from a library. Patches are like functions, and may take input parameters (the left side of the patches) and provide output results (the right side of the patches). Within the editor, patches can be visually connected together by links to create a composition which essentially defines the data flow or the manner in which graphical motion data is processed by the composition. A benefit of the Quartz Composer format is the ease with which a user can quickly create a relatively complicated graphical composition.","In addition, physics systems are of growing importance for user interfaces, such as the well-known swipe or scrolling with inertia and bounce features from the iPhone\u2122 of Apple Inc. Physics-based user interfaces (UIs) provide a more fluid and natural way for users to interact with computer systems. However, such systems as they try to model more advanced behaviors (such as spring systems), are difficult to design for non-specialists and are out of reach of ordinary designers. There has been a lack of user-friendly graphics design framework for designing physics-based graphical user interfaces (GUIs).","A graphics development framework for designing physics-based graphical user interfaces is described herein. A graphics development framework for designing physics-based graphical user interfaces is described herein. According to one embodiment, visually linkable patches are displayed in a first window of a graphics development framework, where the patches represent a graphics composition as a part of a physics-based graphical user interface (GUI) which when rendered, animates a physical behavior of a graphics object of the physics-based GUI. A feedback patch is displayed to visually provide a feedback from an output of the composition to an input of the composition, such that a subsequent physical movement of the graphics object is determined based on a previous physical movement of the graphics object, without requiring a user to program source code of the displayed patches. A result of rendering is instantly displayed in a second window of the graphics development framework, simulating the physical behavior of the graphical object.","Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.","A graphics development framework for designing physics-based graphical user interfaces is described herein. In the following description, numerous details are set forth to provide a more thorough explanation of embodiments of the present invention. It will be apparent, however, to one skilled in the art, that embodiments of the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring embodiments of the present invention.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification do not necessarily all refer to the same embodiment.","According to some embodiments, graphical functional blocks, also referred to herein as patches, are utilized to encapsulate functionalities (e.g., programmable operations and\/or associated source code) of certain operations, including numeric or graphics operations, for designing and rendering physics-based user interfaces. Specifically according to one embodiment, a feedback patch is designed to provide a feedback loop. A composition can be constructed in hierarchical graphs having multiple levels. Each level within this hierarchy can have published inputs and outputs which are then exposed at a level above. These exposed ports form an interface for a given level. A feedback patch dynamically creates initial state input and output ports for all published ports at a given level in the hierarchy representing the values of the published output ports at a shifted time (e.g., t\u2212dt). A user can drag and drop a feedback patch into the composition displayed in an editing window of a graphics development framework. Effectively, a user can pile up effects, such as, for example, springs, inertia, attractors, bounce, etc., within a feedback loop using a feedback patch and a patch to render a result at the current time to design and tune the behavior of physics-based interactions.","For example, in the equation of\n\n()=()+()\n\nThe feedback patch corresponds to F(t\u2212dt). Users interactively design dF\/dt and F(t) is rendered and drawn on the screen for all t. The feedback patch can return simple numbers, images, or buffers, etc. Thus, such a framework can also be used to simulate more advanced simulations such as cloth, shallow water, 2D and volumetric smoke, fire, and clouds, etc. As a result, an abstraction is created between a designer and a programmer, such that an ordinary graphics designer can use the graphics development framework to design and fine tune the physical behavior of the user interface without having to know the programming aspect of the physics-based user interface designs.\n",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 1"],"b":["100","103"]},"Graphics development framework  includes a GUI component  and core components . GUI  includes an editor , a viewer , and an inspector . Editor  is configured to allow a user to visually edit or connect patches of a composition. Viewer  is configured to instantly display or render the composition currently being edited in editor . Inspector  is configured to allow a user to display and edit internal settings or parameters of the composition or patches currently being edited.","Graphics development framework  provides a higher level development environment to users using an approachable visual programming paradigm. Instead of writing pages worth of code to directly manipulate the various graphics APIs (of graphics rendering libraries ), a user can work visually with processing units called patches via editor . These patches are connected into composition. As a user works with a composition, adding patches and connecting them, a user can visually see the results in viewer . Each and every change a user makes is immediately reflected in viewer  and no compilation is required.","A patch is similar to a subroutine in a traditional programming environment. A patch has an interface where data can enter or exit. Such an interface is also referred to as a port. A link connecting two patches represents an underlying API between two functions or subroutines represented by the patches. A patch can contain another patch. Such a patch is also referred to as a macro patch. A user can encapsulate one or more patches in a macro patch and make it more usable. From viewer , a user can select and enter a macro patch and all its sub-patches are displayed. The parent patch and the siblings to the parent patch may be hidden, allowing the user to focus on the sub-function that the macro performs. A virtual macro is an external reference to a macro. In this way, a user can share some functionality or reference it inside their composition without having to duplicate the primitives that the macro contains.","Note that a patch is a very abstract concept. A patch can represent some JavaScript code or some OpenCL or CoreImage\/GLSL kernel. This maps then very well for a web environment. For instance, in the case of Web applications, lots of JavaScript source and related modules\/libraries\/\u201cfunctional blocks\u201d are downloaded to run a Web application, and the code is then optimized and compiled (Just-In-Time compiler or JIT) to run faster on a client machine. Assuming that now some modules were present on the client already as virtual macros, we could significantly reduce launch time of the application by using the ones already compiled locally on the client. This works also for other languages, such as C, C++, OpenCL, etc.","In an OpenCL environment, whenever an OpenCL kernel is opened through an OpenCL kernel patch, to compile the kernel on the current GPU (graphics processing unit) and save the compiled binary within the OpenCL patch. Typically, the compilation is relatively expensive for OpenCL. According to one embodiment, the next time the OpenCL kernel patch is loaded and if the GPU is the same, we can just select the binary, send it to the GPU and skip compilation. This will tremendously reduce the loading time.","Referring back to , in one embodiment, core components  includes a patch manager  for managing patches stored in a patch registry . The patches may be organized in one or more libraries as part of patch registry . Core components  further includes a dependency manager  for managing dependency relationships of patches, which are stored in the dependency registry . As described above, a patch may include one or more sub-patches and thus, a patch of a composition may depend from another patch. The dependency relationship information stored in dependency registry  may be used by an import\/export module  and code generator  for exporting certain patches to be shared with another user.","According to one embodiment, in response to a user request for exporting a selected patch, the dependency manager  retrieves the dependency relationship information from dependency registry  or alternatively, dynamically performs a dependency analysis. Based on the dependency analysis, code generator unit  extracts the source code associated with the patch being exported, including any source code of other patches having a dependency relationship with the patch being exported. In one embodiment, only the source code associated with the exported patches are extracted. Source code associated with a patch that is not selected and has no dependency relationship with the selected patch is not extracted.","For example, if a composition currently displayed on editor  includes three patches: A-B-C. If a user selects patches B and C only for export, source code associated with patches B and C are extracted without including source code of patch A. In addition, if patch C depends from patch D (based on a dependency analysis performed by dependency manager ), the source code associated with patch D may also be extracted.","The selected patch and the generated source code are packaged and saved as a composition file, which may be organized in one or more libraries as part of patch registry . A composition file is created through the connection (e.g., dependency relationship) of patches in a composition editor . Once saved to a library, a composition file is assigned with a unique identifier, for example, in a form of unique text string. This allows the composition file to be reliably and persistently identified independent of the client application or of the computer. The identifier may remain identical even if the composition file is moved to a new location within the repository, or installed in a repository of another computer.","In addition, according to one embodiment, patch registry  further includes a feedback patch is designed to provide a feedback loop from an output of a composition (e.g., a patch designated as an output patch) to an input of the composition (e.g., a patch designated as an input patch). A user can drag and drop a feedback patch into the composition displayed in an editing window of a graphics development framework. Effectively, it can pile up effects, such as, for example, springs, inertia, attractors, bounce, etc., within a feedback patch and another rendering patch for rendering a result at the current time to design and tune the behavior of physics-based interactions. Note that some or all of the components as shown in  may be implemented in software, hardware, or a combination of both.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2"],"b":["200","101","200","104","200","201","202","201","202","201","203","204","205","206","207","208","209"]},"Within editing window , patches can be visually connected together via one or more links to create a composition which essentially defines the data flow or the manner in which graphical motion data is processed by the composition.","Patch library button  when activated, displays a list of libraries of patches previously created, for example, as shown in window . From the displayed libraries, a user can select and open a library to select a patch to be included in a current project currently edited in the editing window . In this example, there are three patches which are selected and placed (e.g., drag-n-drop) from one or more libraries displayed, for example, from window .","Each of the displayed patches can be selected (e.g., highlighted) and its parameters or configuration can be edited. For example, a user can select a patch and activate the inspector button  to display a set of configurable parameters or attributes that can be modified, which may change the characteristics and\/or behavior of the selected patch. This button may act on many selected patches at once, and the parameters for each are concatenated along the right hand side of the workspace window. Inspector button  is also used to edit parameters but is different by opening a separate utility window for editing called the Inspector (not shown). The Inspector panel invoked by button  then has room for static settings in the patch or editing source code if the patch is a code based patch. Only one patch may be selected at a time for editing in the Inspector.","Viewer button  can be used to display a viewing window  that instantly displays a rendering result of the patches currently being edited in editing window . As described above, a patch may include another patch as a child patch. Similarly, a patch may be a child of another patch (e.g., parent patch). Button  is used to display and edit a parent patch of a selected patch currently displayed in the editing window . By hiding the parent and\/or child patches, a user can focus on the patches that are currently being edited without the distraction from other remote patches.","As described above, one or more patches can be selectively exported or shared with another user. According to one embodiment, button  may be used to create a virtual macro based on the selected patches. When a user activates button , GUI  may prompt the user to allow the user to enter the name for the macro being created, including a copyright statement and\/or a brief description for the macro. In effect, patches are selected and merged into a macro patch and can be saved as a composition file, which can be shared with another user.","In addition, a dependency analysis is performed to determine any patches related to the selected patches, including any parent or child patches. Furthermore, the source code associated with selected patches and their related patches is extracted. The source code is extracted only for the selected patches and their related patches (e.g., having a dependency relationship with the selected patches), without the source code of any unrelated patches. The exported composition file may include the entire extracted source code or alternatively, a portion of the extracted source with references or links to external source code (e.g., commonly provided source code or primitives).","As a result, the exported composition file can be shared with another user. When the exported composition is installed and loaded in another system (e.g., imported), the system automatically checks whether a similar composition or patch exists in the system. For example, if a composition having the same identifier has already been installed in the system, the system may compare which one has a newer version. If the one being installed has a newer version, the user may be prompted to indicate whether the user would like to update the existing one (e.g., stored or installed in the local system). If so, the existing composition file or some of the patches referenced therein may be replaced by the imported ones.","Referring back to , once a macro patch has been created, the existing patches may be replaced by the newly created macro patch, encapsulating functionality of selected patches. Window  can be displayed by activating patch library button . Library window  includes a first window  listing certain libraries available for selection. When a library is selected from window , certain metadata or attributes associated with the selected library is displayed in a second window , such as, for example, copyright statements and description, etc. Such information may be entered when the library is created, for example, using button . Further actions available for the selected library can be displayed by activating button , which displays a list of possible actions as shown in window , including importing and exporting the selected library. Field  can be used to search a particular library or libraries available in the system.","According to one embodiment, patches for designing physics-based user interface composition representing a graphical object of the physics-based user interface can be edited within the editing window . A feedback patch can be used to provide a feedback loop from an output of the composition to an input of the composition, such that a subsequent behavior of a graphical object can be manipulated based on a previous behavior of the graphical object. For example, certain parameters of a next action of a graphical object may be adjusted based on parameters of a previous action of the graphical object. Such manipulation can be specified using certain patches (e.g., bouncy path) and a feedback patch, without requiring programming knowledge from a user of the graphics development framework.","Note that throughout this application, for the purpose of illustration, a button is utilized as an example of a user interface to receive a user input. However, it is not so limited. Other types of user interfaces, such as pulled-down or popped-up menus, as well as voice interactive commands may also be applied.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 3A-3F","FIG. 3A"],"b":["0","0","1","1","1","0","1","0","1","1"]},"In this example, the bouncy patch includes three input parameters: \u201cvalue\u201d, \u201cfriction\u201d, and \u201ctension\u201d, and an output \u201cbouncy value.\u201d Input parameter \u201cvalue\u201d may be used to set an initial or default value upon which the output bouncy value is determined. In addition, the physical behavior of the bounce of a corresponding graphical object can be further specified by specifying \u201cfriction\u201d and \u201ctension\u201d input parameters. Such parameters can be used to determine a behavior of a next or subsequent bounce following a previous bounce in view of the bounce friction and tension parameters. Note that, a user does not need to know how these parameters are used (e.g., programmed) to determine the behavior of the bounces. Rather, the user can simply specify these parameters and instantly monitor the instant result of the rendering via the viewing window (e.g., viewing window  of ).","In this example, the bouncy patch as shown in  includes a momentum scrolling patch as shown in , which is leveraged to create a spring effect by setting the start and end boundaries as input parameters of the momentum scrolling patch. In this example, patch as shown in  is a parent patch of . Referring to , Sample Value passes an input value through to an output value. Scrolling friction is the spring's coefficients of friction. Stick to Boundaries will force the value to stick to the edge of a range such that when it passes the range and bounces back it doesn't keep going, but instead \u201csticks\u201d to the boundary and eventually settles on the boundary. This is essential for implicit state based animation as described above. Note that if ports are not connected, they can be manually set by double clicking them, or via an inspector. The \u201cvalue\u201d patch is a no-op patch, which is referred to as a value splitter. It allows a single value to be routed to multiple locations.","The momentum scrolling patch includes the main feedback loop using a feedback patch as shown in . Referring to , the composition includes a \u201cclamping springs\u201d patch disposed on the input and an \u201cinertia\u201d patch disposed on the output. In addition, a \u201cfeedback\u201d patch is provided to connect an output of the \u201cinertia\u201d patch to an input of the \u201cclamping springs\u201d patch.","The output of \u201cinertia\u201d patch is provided via the feedback patch. The \u201cfeedback\u201d patch provides values which are published within a given level of the hierarchical graph to patches within the same level. As described above, a composition can be constructed in hierarchical graphs having multiple levels. Each level within this hierarchy can have published inputs and outputs which are then exposed at a level above. These exposed ports form an interface for a given level. A feedback patch dynamically creates initial state input and output ports for all published ports at a given level in the hierarchy representing the values of the published output ports at a shifted time (e.g., t\u2212dt). The patch automatically creates these outputs as well as corresponding inputs used to set initial values. Initial values are passed through when \u201csample value\u201d is set to true and when the time is zero (e.g., initial time). When a spring at the edge of the boundaries is active, \u201chas force\u201d will be true and \u201crubberband friction\u201d will be made available to the \u201cinertia\u201d patch instead of \u201cscrolling friction.\u201d \u201cHas force\u201d is an output of the Spring composition which is set to true if the result of the spring equation (\u2212K*(y\u22121)*Force Multiplier) is not zero.","The executable code for a native inertia patch basically integrates the following:\n\nspeed=max(1*frictionScale*friction, 0)*input\/\n\nwhich represents a speed parameter of a next bounce. Here the speed of the next bounce is determined based on the scaled friction and the position of the previous bounce, etc.\n","The \u201cclamping springs\u201d patch further includes two \u201cdirectional spring\u201d patches as shown in . Each \u201cdirectional spring\u201d patch includes a basic \u201cspring\u201d patch, as well as other associated patches as shown in . The \u201cspring\u201d patch is applied when the \u201cvalue\u201d input parameter passes (e.g., greater than) the value specified at \u201cspring center\u201d input parameter.","The basic \u201cspring\u201d patch includes a native \u201cforce\u201d patch and a spring equation patch representing an equation of \u2212K*(y\u2212L), as shown in . The output of the spring equation patch is fed into an input of the native \u201cforce\u201d patch. The native \u201cforce\u201d patch is configured to apply the specified force to a value when not sampling which allows for interaction (e.g., \u201csampling\u201d is set to true when the mouse is clicked). In one embodiment, the \u201cforce\u201d patch encapsulates pseudo code represented as follows:",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If (sampling)"]},{"entry":[{},"\u2003\u2003OutputValue = InputValue;"]},{"entry":[{},"Else"]},{"entry":[{},"\u2003\u2003OutputValue = Value + Force * dt * dt;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"According to one embodiment, in order to generate stable or accurate values, data over a period of time may be collected to calculate the final output. For example, if there are some patches that are applied to inertia (affects speed) such as springs or attractors (e.g., forces, each affecting acceleration), one may need to at some point to gather all the data to compute an updated position, speed and acceleration to be stable over a period of time. Some previous values of position, acceleration and speed may be maintained, using a numerical differentiation schemas and dissipate some energy for stability. In one embodiment, the following schema is utilized:",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"speed(t) = (new_position(t)\u2212position(t\u2212dt) +"]},{"entry":[{},"\u2003\u2003\u2003position(t\u2212dt)\u2212position(t\u22122*dt)) \/ (2*dt)"]},{"entry":[{},"\u2003\u2003\u2003~= ((position(t)\u2212position(t\u2212dt))\/dt + speed(t\u2212dt))\/2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"in-line-formulae":[{},{}],"i":["t","t\u2212dt","dt","t"]},"The above computation happens in the feedback patch that will output proper position(t) for the next time step. In the above equation, (position(t)\u2212position(t\u2212dt))\/dt represents the numerical differentiation and the average (division by 2) the energy dissipation. One could imagine adjusting that coefficient, e.g. speed(t)=((position(t)\u2212position(t\u2212dt))\/dt*(1.0\u2212alpha)+speed(t\u2212dt)*alpha, where alpha <0.5 for less dissipation. Other schemes may also be utilized.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["400","400","401"]},"At block , a feedback patch is used to visually provide a feedback from an output of an output patch representing an output of the composition to an input of an input patch representing an input of the composition. At block , processing logic iteratively determines one or more parameters of a subsequent behavior of the graphics object based on a previous physical behavior obtained via the feedback patch. At block , processing logic instantly displays a rendering result of the graphics object in a viewing window of the graphics development framework, simulating the physical behavior of the graphics object. At block , source code associated with the linked patches including the feedback patch is generated and at block , certain selected patches and their associated source code may be exported and shared with another user. Other operations may also be performed.","As described above, patches or functional blocks used in conjunction with the graphics development framework provide an abstract layer for developing physics-based graphical user interfaces. Each patch or functional block can be visually connected or linked with another patch by a user and each patch or functional block encapsulates functionality of a particular function or subroutine for a specific operation. Each patch provides at least one input interface (also referred to as a port) and at least one output interface, which represent at least one underlying application programming interface at a source code programming level. As a result, a user could be an ordinary artist without having the programming knowledge as a particular software developer or programmer.","Example underlying application programming interfaces may implement scrolling, gesturing, and animating operations for a device having a display region. A display region is a form of a window. A window is a display region which may not have a border and may be the entire display region or area of a display. In some embodiments, a display region may have at least one window and\/or at least one view (e.g., web, text, or image content). A window may have at least one view. The methods, systems, and apparatuses disclosed can be implemented with display regions, windows, and\/or views.","A physics-based user interface may include scrolling operations for scrolling a display of a device. The scrolling operations include bouncing a scrolled region in an opposite direction of a scroll when a scroll completes, rubberbanding a scrolled region by a predetermined maximum displacement when the scrolled region exceeds a display edge, and setting a scrolling angle that locks the scroll in a horizontal or vertical direction.","The scrolling operations may include attaching scroll indicators to a content edge of a display. Alternatively, the scroll indicators can be attached to the display edge. A user input in the form of a mouse\/finger down causes the scroll indicators to be displayed on the display edge, content edge, or window edge of the scrolled region. If a mouse\/finger up is then detected, the scroll indicators are faded out from the display region, content edge, or window edge of the scrolled region.","A physics-based user interface may further include gesture operations for a display of a device. The gesture operations include performing a scaling transform such as a zoom in or zoom out in response to a user input having two or more input points. The gesture operations also include performing a rotation transform to rotate an image or view in response to a user input having two or more input points.","The gesture operations may include responding to at least one gesture call, if issued, by rotating a view associated with the event object based on receiving a plurality of input points in the form of the user input. Gesture operations may also include scaling a view associated with the event object by zooming in or zooming out based on receiving the user input.","Further detailed information regarding the underlying application programming interfaces for designing physics-based user interfaces can be found in a co-pending U.S. Published Application No. 20080168384 assigned to a common assignee of the present application, which is incorporated by reference herein in its entirety.","According to some embodiments, the techniques described throughout this application may be applied to a user interface of a digital media player, such as a portable music and\/or video media player, which may include a media processing system to present the media, a storage device to store the media and may further include a radio frequency (RF) transceiver (e.g., an RF transceiver for a cellular telephone) coupled with an antenna system and the media processing system. Media stored on a remote storage device may be transmitted to the media player through the RF transceiver. The media may be, for example, one or more of music or other audio, still pictures, or motion pictures.","A portable media player may include a media selection device, such as a click wheel input device on an iPod\u2122 or iPod Nano\u2122 media player from Apple Inc. of Cupertino, Calif., a touch screen input device, pushbutton device, movable pointing input device or other input device. The media selection device may be used to select the media stored on the storage device and\/or the remote storage device. The portable media player may, in at least some embodiments, include a display device which is coupled to the media processing system to display titles or other indicators of media being selected through the input device and being presented, either through a speaker or earphone(s), or on the display device, or on both display device and a speaker or earphone(s). In one embodiment, the display device and input device are integrated while in other embodiments the display device and input device are separate devices.","According to some embodiments, the techniques described throughout this application may also be applied to a user interface of other types of data processing systems, such as, for example, entertainment systems or personal digital assistants (PDAs), or general purpose computer systems, or special purpose computer systems, or an embedded device within another device, or cellular telephones which do not include media players, or multi touch tablet devices, or other multi touch devices, or devices which combine aspects or functions of these devices (e.g., a media player, such as an iPod\u2122, combined with a PDA, an entertainment system, and a cellular telephone in one device). Other configurations may also be applied.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 5","FIG. 5","FIG. 1","FIG. 5"],"b":["500","100","500"]},"As shown in , the computer system , which is a form of a data processing system, includes a bus or interconnect  which is coupled to one or more processors  and a ROM , a volatile RAM , and a non-volatile memory . The processor  is coupled to cache memory . The bus  interconnects these various components together and also interconnects these components , , , and  to a display controller and display device , as well as to input\/output (I\/O) devices , which may be mice, keyboards, modems, network interfaces, printers, and other devices which are well-known in the art.","Processor , also referred to as a processing device, represents one or more general-purpose processing devices such as a microprocessor, a central processing unit, or the like. More particularly, the processor may be complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. The processor may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processor is configured to execute instructions for performing the operations and steps discussed herein.","Typically, the input\/output devices  are coupled to the system through input\/output controllers . The volatile RAM  is typically implemented as dynamic RAM (DRAM) which requires power continuously in order to refresh or maintain the data in the memory. The non-volatile memory  is typically a magnetic hard drive, a magnetic optical drive, an optical drive, or a DVD RAM or other type of memory system which maintains data even after power is removed from the system. Typically, the non-volatile memory will also be a random access memory, although this is not required.","These memories are collectively referred to as a machine-readable medium on which is stored one or more sets of instructions or software embodying any one or more of the methodologies or functions described herein. The software may also reside, completely or at least partially, within the main memory and\/or within the processor during execution thereof by the computer system, the main memory and the processor also constituting machine-accessible storage media. The software may further be transmitted or received over a network via a network interface device.","While  shows that the non-volatile memory is a local device coupled directly to the rest of the components in the data processing system, the present invention may utilize a non-volatile memory which is remote from the system; such as, a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus  may include one or more buses connected to each other through various bridges, controllers, and\/or adapters, as is well-known in the art. In one embodiment, the I\/O controller  includes a USB (Universal Serial Bus) adapter for controlling USB peripherals. Alternatively, I\/O controller  may include an IEEE-1394 adapter, also known as FireWire adapter, for controlling FireWire devices.","Thus, a graphics development framework for designing physics-based graphical user interfaces has been described herein. Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable medium. A machine-readable medium includes any mechanism for storing information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (\u201cROM\u201d), random access memory (\u201cRAM\u201d), magnetic disk storage media, optical storage media, flash memory devices, etc.), etc.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description above. In addition, embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.","In the foregoing specification, embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3A-3F"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
