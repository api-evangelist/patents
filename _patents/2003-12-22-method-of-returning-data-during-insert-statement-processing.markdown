---
title: Method of returning data during insert statement processing
abstract: A method for generating an execution plan for updating and retrieving data from a database in a single process includes: receiving a statement by a server to update a database with a first set of data and to retrieve a second set of data from the database; building a first execution plan to update the database with the first set of data; building a second execution plan to retrieve the second set of data from the database; and building a single execution plan including a combination of the first and second execution plans. The single execution plan allows for the updating and retrieval of data with a single crossing of an interface between a client and the database. By performing both functions in this manner, the efficiency of performing such tasks on the database is significantly increased.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07711730&OS=07711730&RS=07711730
owner: International Business Machines Corporation
number: 07711730
owner_city: Armonk
owner_country: US
publication_date: 20031222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to relational database management systems, and more particularly, to the update and retrieval of data from relational databases by the management systems.","Distributed relational database management systems (RDMS) are well known in the art.  illustrates a conventional RDMS. The system includes a client  running an application , where the client  is coupled to a server  via a network . The server  includes a database engine , which in turn includes a query processor  and a data manager . The server  manages access to the database  by the application  at the client . Typically, Structured Query Language (SQL) queries are used to issue task requests on the database . The query processor  processes and executes these queries or statements, accessing the database  via the data manager , utilizing application programming interfaces (API).","When data in the database  is to be updated, the application  sends one or more SQL statements across the network  to the server . For example, INSERT, UPDATE, or DELETE statements may be used. Data in one or more rows of the database  are then inserted, updated, or deleted. Sometimes, the database  generates values in one or more columns in the row(s) as well. For example, a row pertaining to a sale is inserted, with values in the customer name column, payment information column, and items purchased column. The database then also inserts a timestamp in a fourth column in the same row. The database updates additional columns based on the definition of columns in the table. Values updated by a user can also be modified due to database constraints or due to triggers on the database table.","For a user to know what values were actually written to disk, separate SQL statements must be issued to fetch the data in the updated row(s), such as a SELECT statement. This requires the building of a separate execution plan for each SQL statement, and requires multiple crossings of the data manager . As is known in the art, an execution plan outlines how a server's query processor will actually run a specific query or statement. The query processor  parses and optimizes the SQL statement and generates the execution plan. The plan is then executed, using the data manager  to manipulate the data. These multiple API crossings between the client , server , query processor , and data manager  are inefficient. In some eases, for example, when the database generates a primary key, the only unique value in the data is the generated value. In these cases, it is not possible to retrieve the data that had just been inserted into the table since the primary key is not known by the application.","Accordingly, there exists a need for a method for generating an execution plan for updating and retrieving data from a database in a single process. The method should allow a single statement to be issued for data to be updated and retrieved from the database. The execution plan for the statement should require a single API crossing between the client and the database. The present invention addresses such a need.","A method for generating an execution plan for updating and retrieving data from a database in a single process includes: receiving a statement by a server to update a database with a first set of data and to retrieve a second set of data from the database; building a first execution plan to update the database with the first set of data; building a second execution plan to retrieve the second set of data from the database; and building a single execution plan including a combination of the first and second execution plans. The single execution plan allows for the updating and retrieval of data with a single crossing of an interface between the client and the database. By performing both functions in this manner, the efficiency of performing such tasks on the database is significantly increased.","The present invention provides a method for generating an execution plan for updating and retrieving data from a database in a single process. The following description is presented to enable one of ordinary skill in the art to make and use the invention and is provided in the context of a patent application and its requirements. Various modifications to the preferred embodiment will be readily apparent to those skilled in the art and the generic principles herein may be applied to other embodiments. Thus, the present invention is not intended to be limited to the embodiment shown but is to be accorded the widest scope consistent with the principles and features described herein.","To more particularly describe the features of the present invention, please refer to  in conjunction with the discussion below.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2","b":["104","108","108","202","102","101","104","108","204","206","208","210","106","107","108"]},"In the preferred embodiment, SQL is used to perform tasks on the database . A single SQL statement, with the syntax, SELECT . . . FROM FINAL TABLE (INSERT . . . ) is used to issue an update and a retrieval of data of the database  in a single process. However, other types of statements with different syntax can also be used without departing from the spirit and scope of the present invention.","For example, assume that the following SQL statement was issued to the server :","SELECT C, C, C FROM FINAL TABLE (INSERT into T (C, C) VALUES (:hv, :hv))","This SQL statement requests that the values of the variables, hv and hv, be inserted into columns C and C in table T. After updating the table T, the actual values stored in columns C, C, and C are to be retrieved from the table T.","To illustrate the execution of this SQL statement in accordance with the present invention, please refer to .  is a flowchart illustrating the method for generating an execution plan for updating and retrieving data from a database in a single process in a SQL context. When the server  receives the SQL statement above, the query processor  first parses the SQL statement, via step . If the SQL statement is determined to not be an INSERT in a SELECT statement, via step , then an execution plan for the SQL statement is built in a conventional manner, via step . However, with the example SQL statement above, the SQL statement is an INSERT in a SELECT statement. Thus, the query processor  dismantles the SELECT portion of the statement from the INSERT portion of the statement. An execution plan for the SELECT portion of the statement is then built, via step . An execution plan for the INSERT portion of the statement is also built, via step . Both the execution plans for the SELECT and INSERT portions can be built in a conventional manner. Next, a single execution plan with the combination of the executions plans for the SELECT and INSERT portions of the statement is built, via step .","The query processor  then executes the single execution plan, via step . If the SQL statement was not an INSERT in a SELECT statement, via step , then the SQL statement is processed, via step , according to the execution plan conventionally created in step . Since the example SQL statement is an INSERT in a SELECT statement, then the query processor  sends a request to the data manager , via step , to insert data and retrieve the data in a single process according to the single execution plan created in step . The data manager  then executes the single execution plan, via step . Thus, only one crossing of the API between the query processor  and the data manager  is required to both update and retrieve data from the database .","For the example SQL statement above, the data manager  inserts the values of hv and hv in columns C and C of table T. In doing so, the data manager  has a pointer to the row with these new values. Then, using the same pointer, the data manager  fetches the actual data in columns, C, C, and C, in the table T. This data is then returned to the application that issued the SQL statement.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4","b":["401","107","1","2","1","2","402","107","1","2","3","403","106","404"]},"In addition to updating and retrieving data, other database capabilities can also be made available through the method in accordance with the present invention. For example, the filtering and sorting of data can be used. In the SQL context, predicates, cursors, subselects, and ordered by functionalities can be made available. In fact, the full capabilities of SQL can be offered.","Consider a second example SQL statement:","DECLARE CS CURSOR FOR","SELECT C, C, C FROM FINAL TABLE\n\n","WHERE Numstuff>:hv;","A single execution plan is built for the second example SQL statement according to steps  through , as described above in .  is a flowchart illustrating the execution of the single execution plan for the second example SQL statement. First, the result table is determined, via step , where more than one row may qualify. To determine the result table, first, a workfile is created, via step . Then, a row containing the columns, C and C, specified in the subquery, is selected from the subquery table, Stuff, via step . The values of these columns, C and C, are then inserted into the target table, T, in the columns, C and C, specified in the INSERT portion of the statement, via step . The values of the columns, C, C, and C, specified in the SELECT portion of the statement are then inserted into the workfile, via step . Here, while the values of columns C and C are updated, the value of column C is also returned, along with the updated values of columns C and C. If more rows quality, via step , then steps  through  are repeated for each row. Once all qualifying rows are processed, the filter is performed, via step . For the second example SQL statement above, all values in the workfile where Numstuff is greater than the value of the host variable, hv, are retained. Once the results table is determined in this manner, the query processor  returns the values from the workfile to the requesting application, via step .","Consider a third example SQL statement:","DECLARE CS CURSOR FOR","SELECT C, C, C FROM FINAL TABLE\n\n","WHERE Numstuff>:hv","ORDER BY C;","A single execution plan is built for the third example SQL statement according to steps  through , as described above in .  is a flowchart illustrating the execution of the single execution plan for the third example SQL statement. First, the result table is determined, via step , where more than one row may qualify. To determine the result table, first, a workfile is created, via step . Then, a row containing the columns, C and C, specified in the subquery is selected from the subquery table, Stuff, via step . The values of these columns, C and C, are then inserted into the target table, T, in columns, C and C, specified in the INSERT portion of the statement, via step . The values of the columns, C, C, and C, specified in the SELECT portion of the statement are then inserted into the workfile, via step . If more rows quality, via step , then steps  through  are repeated for each row. Once all qualifying rows are processed, the filter is performed, via step . For the third example SQL statement above, all values in the workfile where Numstuff is greater than the value of the host variable, hv, are retained. Next, a sort workfile is created, via step . The values from the filtered workfile is inserted into the sort workfile, via step . The sort is then performed, via step . According to the ORDER BY portion of the third example SQL statement, the values in the sort workfile are sorted according to the values in the column, C. Once the results table is determined in this manner, the query processor  returns the values from the sort workfile to the requesting application, via step .","Consider a fourth example SQL statement:","DECLARE CS INSENSITIVE SCROLL CURSOR FOR","SELECT C, C, C FROM FINAL TABLE\n\n","WHERE Numstuff>:hv","ORDER BY C;","A single execution plan is built for the fourth example SQL statement according to steps  through , as described above in .  is a flowchart illustrating the execution of the single execution plan for the fourth example SQL statement. First, the result table is determined, via step , where more than one row may qualify. To determine the result table, first, a workfile is created, via step . Then, a row containing the columns, C and C, specified in the subquery is selected from the subquery table, Stuff, via step . The values of these columns, C and C, are then inserted into the target table, T, in the columns, C and C, specified in the INSERT portion of the statement, via step . The values of the columns, C, C, and C, specified in the SELECT portion of the statement are then inserted into the workfile, via step . If more rows quality, via step , then steps  through  are repeated for each row. Once all qualifying rows are processed, the filter is performed, via step . For the fourth example SQL statement above, all values in the workfile where Numstuff is greater than the value of the host variable, hv, are retained. Next, a sort workfile is created, via step . The values from the filtered workfile are inserted into the sort workfile, via step . The sort is then performed, via step . According the ORDER BY portion of the statement, the values in the sort workfile are sorted according to the values in the column, C. Next, an updateable workfile is created, via step . The values from the sort workfile are then inserted into the updateable workfile, via step . Once the results table is determined in this manner, the query processor  returns the values from the updateable workfile to the requesting application, via step .","When the database system is a distributed database system, during processing of any of the example SQL statements above, the server  additionally returns an indicator that data has been updated in the database . This indicator is important for commit transaction processing, as the requester needs to know if any updates occurred, and if so, to commit the changes. If no updates were made, then no commit processing is needed.","The method in accordance with the present invention takes advantage of new database inter-component communications. The query processor  executes the SQL statement while the data manager  component manipulates the data. Thus, the query processor  tells the data manager  what to do. With the present invention, this inter-component communication is minimized by having the query processor  inform the data manager  to update data and retrieve data at the same time, i.e., with one crossing of the API between the query processor  and the data manager . Execution costs are saved by not calling the API a second time to retrieve the values.","A method for generating an execution plan for updating and retrieving data from a database in a single process has been disclosed. The method builds a single, combined execution plan for updating and retrieving data with a single crossing of the API between the client and the database. By performing both functions in this manner, the efficiency of performing such tasks on the database is significantly increased. A single statement can be used to perform both functions. If errors occur in retrieving the data, the insertion of data is not necessarily affected. In addition, the full capabilities of database, such as the filtering and sorting of data, can be made available.","Although the present invention has been described in accordance with the embodiments shown, one of ordinary skill in the art will readily recognize that there could be variations to the embodiments and those variations would be within the spirit and scope of the present invention. Accordingly, many modifications may be made by one of ordinary skill in the art without departing from the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
