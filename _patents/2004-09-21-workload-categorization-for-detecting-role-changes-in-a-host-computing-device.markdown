---
title: Workload categorization for detecting role changes in a host computing device
abstract: A method, system and apparatus for workload categorization for detecting role changes in a host computing device. A workload characterization system for detecting role changes in a host computing device can include a transaction logging and change detection processor. The processor can be configured to log and detect role changes in the host computing device through an instrumentation monitoring interface to underlying applications supporting a workload based upon a comparison of workload patterns generated from logged transaction executions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07681198&OS=07681198&RS=07681198
owner: International Business Machines Corporation
number: 07681198
owner_city: Armonk
owner_country: US
publication_date: 20040921
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Statement of the Technical Field","The present invention relates to the field of autonomic computing, and more particularly to resource monitoring to autonomically manage resources processing computing workloads.","2. Description of the Related Art","Among the many challenges faced by those who manage the capacity and performance of an enterprise system is the characterization of computer system and network resource consumption by a particular application or workload. The continuing movement towards distributed systems has complicated this activity as there are several methods for collecting transaction data on a single system: For instance, a transaction processing monitor can be configured to capture some form of resource consumption data. Similarly, some database management systems provide facilities for capturing transaction activity within the context of each access request.","Facilities within a particular operating system also may have a built-in notion of what a transaction is and will store or report information related to that transaction. Furthermore, applications developers can imbed instrumentation within application code in order to obtain transaction specific data. Finally, application profilers for a particular operating environment can gather large amounts of data relating to the behavior of an application hosted within the operating environment. In all cases, however, when applied to the distributed environment, it can be difficult to track resource consumption by a transaction when several elements in a network contribute towards the completion of a transaction","Recently, several computing vendors have collaborated to develop an open, vendor-neutral approach to manage the performance of distributed applications. The Application Response Measurement (ARM) interface, is an application programming interface (API) for measuring end-to-end application response time. The ARM API allows vendors to create management-ready applications and it allows end users to measure and control the total performance of their business-critical distributed applications.","The ARM API is a simple API that applications can use to pass vital information about a transaction to an agent. Specifically, to monitor the progress of a transaction, an application need only call the ARM API just prior to the start of the transaction and again before the completion of the transaction. Consequently, the ARM API calls can be used to identify the application, the transaction, and optionally the user, and provide the status of each transaction when it completes. This is sufficient information for the management solution to answer vital questions regarding the operation and performance of the computing system hosting the workload.","Whereas optimally configuring a virtual log can be problematic generally for who manage the capacity and performance of an enterprise system, in an autonomic system, the problem can be particularly acute. For the uninitiated, autonomic computing systems self-regulate, self-repair and respond to changing conditions, without requiring any conscious effort on the part of the computing system operator. To that end, the computing system itself can bear the responsibility of coping with its own complexity. The crux of autonomic computing relates to eight principal characteristics:","I. The system must \u201cknow itself\u201d and include those system components which also possess a system identity.","II. The system must be able to configure and reconfigure itself under varying and unpredictable conditions.","III. The system must never settle for the status quo and the system must always look for ways to optimize its workings.","IV. The system must be self-healing and capable of recovering from routine and extraordinary events that might cause some of its parts to malfunction.","V. The system must be an expert in self-protection.","VI. The system must know its environment and the context surrounding its activity, and act accordingly.","VII. The system must adhere to open standards.","VIII. The system must anticipate the optimized resources needed while keeping its complexity hidden from the user.","In an on demand computing environment, the role of a host computing device and the workload processed in the host can vary based upon business need, the point-in-time when the workload is processed, the volume of different workloads experienced at that time, and the relative priorities of those workloads. A change in demand for specific applications can result in the re-provisioning of a host computing device that had previously served requests for a particular workload, into a different role hosting different applications.","Accordingly, understanding that a change has transpired, and identifying the new role of the host computing device can be fundamental to correctly optimize the usage of the host computing device. Examples include the active monitoring of the health and of the performance of the applications active within the host computing device. Knowing the role of the host computing device can affect the monitoring policy applied to the host computing device. For instance, while a host computing device may support the operation of a database management system, the use of the database management system can change from supporting real-time transactions to mere batch transactions. Clearly, the monitoring policy for a database supporting real-time transactions will differ from the monitoring policy for a database supporting only batch transactions, if only to disable interactive response time-related sensors.","The present invention addresses the deficiencies of the art in respect to resource monitoring and provides a novel and non-obvious method, system and apparatus for workload categorization for detecting role changes in a host computing device. A workload characterization system for detecting role changes in a host computing device can include a transaction logging and change detection processor. The processor can be configured to log and detect role changes in the host computing device through an instrumentation monitoring interface to underlying applications supporting a workload based upon a comparison of workload patterns generated from logged transaction executions.","In a preferred aspect of the present invention, a workload categorization method for detecting role changes in a host computing device can include monitoring transactions in the host computing device and categorizing the transactions. The transactions can be grouped according to the categorization in order to form a new workload pattern. Importantly, the new workload pattern can be compared to a previously stored workload pattern. Consequently, it can be determined that a role change has occurred in the host computing device if the workload patterns differ.","In the preferred embodiment, the monitoring step can include receiving notifications of transaction executions through an instrumentation interface and logging records for corresponding ones of the notifications. Specifically, the notifications of transaction executions can be received through an ARM interface. Subsequently, each of the transactions can be characterized according to transaction type. Preferably, the grouping step can include counting a number of transactions having a like characterization in order to measure a magnitude of each of set of like characterized transactions.","In accordance with the present invention, the determining step can include determining that a role change has occurred in the host computing device if the workload patterns differ by a threshold amount. Yet, the determining step further can include determining that a role change has not occurred in the host computing device if characterizations differ only in magnitude, but the characterizations do not differ in type. In either case, the performing monitoring, characterizing, comparing and determining steps can be performed in non-consecutive intervals so as to better detect a change in role for the host computing device.","Additional aspects of the invention will be set forth in part in the description which follows, and in part will be obvious from the description, or may be learned by practice of the invention. The aspects of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention, as claimed.","The present invention is a method, system and apparatus for characterizing workloads according to computed transaction patterns. In accordance with the present invention, individual transactions for a workload can be monitored and classified individually according to a specified criteria. Like transactions can be grouped together and a pattern of differently grouped transactions can be generated. The generated pattern can be compared to a previously generated pattern to determine if the two patterns deviate significantly. If not, it can be presumed that the role of the host for the workload has not changed. In contrast, if the two patterns differ significantly, it can be presumed that the role for the host has changed and a notification reflecting the change can be provided to monitoring logic.","In further illustration,  is a schematic illustration of a computing system configured for the characterization of workloads based upon transaction patterns. The system can include a host computing device  coupled to one or more client and peer computing devices  over a data communications network . Client ones of the computing devices  can request the host computing device  support a workload involving one or more transactions . In this regard, the workload itself can be characterized by the unique combination of transactions  and the magnitude of transactions  required to be processed by the host computing device  in order to support the workload.","The host computing device  can include one or more applications  configured to process the transactions . The applications  can include, for example, database management logic, network communications logic, computational logic, and the like. Importantly, the applications  can be instrumented through an instrumentation monitoring interface . An exemplary instrumentation monitoring interface  can include the ARM interface known in the art. Using the instrumentation monitoring interface , a transaction logging and change detection process  can monitor individual ones of the transactions  which can be classified and utilized to generate a workload pattern as will be further described herein.","Specifically, each of the transactions  can written to a transaction log  and each of the transactions  can be classified according to a pre-defined criteria such as a specific one of the applications  designated to process the transaction , or specific transaction type, to name only a few. Like classified transactions can be grouped together. Alternatively, a mere count of like transactions can be kept in a vector, array or other suitable data structure. In any case, the aggregation of classified ones of the transactions  can form the basis of a currently experienced workload pattern . As such, subsequently formed workload patterns can be compared to the current pattern  to detect a change in role for the host computing device  from supporting one workload to the next.","In this regard,  is a pictorial illustration of two graphs of different, exemplary workload transaction patterns which indicate a change in role for the computing system of . As shown in , a first workload pattern  can be generated for the aggregation of seven like classifications for monitored transactions. The magnitude of each like classification can indicate the extent of the like classification, for instance the number of transactions requested of a like type, and the amount of resources consumed in processing the transaction, to name a few.","At a subsequent monitoring interval, a different workload pattern  can be produced for a different aggregation of six like classifications for monitored transactions. As before, the magnitude of each like classification can indicate the extent of the like classification. Nevertheless, when comparing the workload pattern  to the workload pattern , it will be apparent that the transactions and the extent of the transactions processed in association with the workload pattern  differ from those of the workload pattern . Accordingly, in the present invention, it will be concluded that the workload pattern  deviates from the workload pattern  and that the role of the host computing device has changed.","Referring now to , a flow chart is shown which illustrates a process for characterizing workloads based upon transaction patterns for use in the system of . The process can begin in block  when a set of transaction executions can be read, for example through the operation of transaction monitoring logic via an instrumentation and monitoring interface. Notably, in a preferred aspect of the invention, the transaction executions can be read through the course of a monitoring interval. During this interval, in block  each transaction execution can be categorized, for example according to type.","Based upon the categorization of the transaction executions over the monitoring interval, a temporary workload pattern can be produced in block  which is representative of the role of the host computing device during the monitoring interval. Subsequently, in block , the temporary workload pattern can be compared to a previously stored workload pattern from a previous monitoring interval. In decision block  it can be determined if the temporary workload pattern deviates from the previously stored workload pattern. In this regard, some deviation is permitted and an exact match is not required to avoid a determination that the workload patterns differ from one another. Rather, a threshold level of difference can be required. For instance, in a preferred aspect of the invention, the relative differences in magnitude of the different categorizations can form the basis of a determination of deviation rather than the absolute differences in magnitude of the categorizations.","In block , if it is determined that the workload patterns do not differ, or do not differ significantly enough, in block  the categorization produced for the transaction executions can be discarded as can the temporary workload pattern. Subsequently, in block  the process can wait until the next interval before repeating the process of blocks  through . Preferably, the process can wait until the interval following the next interface to more fully detect a change in patterns. Still, it will be recognized by the skilled artisan that patterns may evolve slowly over time depending upon a number of factors including number of users. As such, the template patterns can be continuously updated at a specified interval based upon the factors at hand.","In any case, returning to block , if it is determined that the workload patterns differ significantly enough, in block  the process can wait until the next interval and in block , a set of transaction executions can be read. During this interval, in block  each transaction execution can be categorized, for example according to type. Based upon the categorization of the transaction executions over the monitoring interval, a temporary workload pattern can be produced in block  which is representative of the role of the host computing device during the monitoring interval. In block , the stored workload pattern can be replaced with the temporary pattern and in block  monitoring logic can be notified that a role change has occurred in the host computing device.","The present invention can be realized in hardware, software, or a combination of hardware and software. An implementation of the method and system of the present invention can be realized in a centralized fashion in one computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system, or other apparatus adapted for carrying out the methods described herein, is suited to perform the functions described herein.","A typical combination of hardware and software could be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein. The present invention can also be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which, when loaded in a computer system is able to carry out these methods.","Computer program or application in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a) conversion to another language, code or notation; b) reproduction in a different material form. Significantly, this invention can be embodied in other specific forms without departing from the spirit or essential attributes thereof, and accordingly, reference should be had to the following claims, rather than to the foregoing specification, as indicating the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute part of this specification, illustrate embodiments of the invention and together with the description, serve to explain the principles of the invention. The embodiments illustrated herein are presently preferred, it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown, wherein:",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 1"]}]},"DETDESC":[{},{}]}
