---
title: Modeling infrastructure for internal communication between business objects
abstract: Disclosed is an architecture that allows business objects to communicate across deployment unit boundaries. A runtime object may be defined to listen for a trigger event in an offering business object. The runtime object then assemble and communicate a message for processing by a consuming business object. User interfaces allow a user to configure a service integration definition to generate the runtime object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09070107&OS=09070107&RS=09070107
owner: SAP SE
number: 09070107
owner_city: Walldorf
owner_country: DE
publication_date: 20111117
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application relates to commonly owned co-pending U.S. application Ser. No. 13\/194,263, filed Jul. 29, 2011 and is incorporated herein by reference in its entirety for all purposes.","The present invention relates to business objects in a business enterprise, and in particular to supporting communication among business objects.","Unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","A business enterprise typically requires numerous business functions in order to operate. An application platform provides the underlying hardware and\/or software technology to support business applications and business objects operated on by the business applications in order to support the necessary business functions of the enterprise. A business object is commonly understood to be a data construct in an object-oriented programming paradigm. A business object corresponds to various aspect of business enterprise including tangible things, abstract ideas, and so on. For example, a production line for manufacturing widgets may be modeled and represented with a business object. Operations in a customer service center may be represented with a business model, and so. Operations, manipulations, and general management of business objects are commonly performed by business applications. Depending on the business application, there may be many business objects managed by that business application.","Business applications and business objects may be developed by a provider of the application platform. For example, the assignee of the instant application is a provider of a business management solution referred to generally as the Business ByDesign\u00ae software solution. Typically, the business applications and business objects are developed as a joint development effort between the platform provider and the business (also referred to as Partners). Thus, for instance, a customer relations management (CRM) system may be developed and deployed on the application platform as one \u201cdeployment unit.\u201d Another system, for example a human resources management system (HCM, for human capital management), may be deployed on the application platform as another deployment unit. A \u201cdeployment unit\u201d therefore represents the business application(s) and business objects that are developed in order to manage a particular aspect of the business.","In order to enable Partners to create added value on top of the business applications and business objects developed by the platform provider, integration of new functionality with existing business applications and business objects is an important capability. If the Partner developed add-on is local to a deployment unit, then integration of the add-on with existing business objects in the deployment unit can be easily provided. For example, local calls within the deployment unit provide for communication between the add-on and a local business object.","However, there may be instances when it is desirable to integrate across deployment units. For instance, suppose customer performance is managed in a CRM system in one deployment unit. Suppose further that a salesman's bonus is tied to customer performance. The salesman's compensation (a human resource function provided by an HCM system in another deployment unit) may need information from the CRM system. Local calls are not available between deployment units, and integration across deployment units may require low-level access to system utilities that are not available to the Partner. The platform provider must become involved in order to support such cross deployment unit capability.","In embodiments, a method for exchanging information between a first business object and a second business object includes receiving a selection of a first business object and performing one or more actions on the first business object. When a triggering event is detected, one or more conditions are evaluated. A message may be assembled, depending on an outcome of the evaluation. In an embodiment, mapping information between the first business object and a second business object is used to define the message. In an embodiment, the triggering event is a SAVE operation.","The method may further include instantiating a process agent and detecting, by the process agent, a first action among the one or more actions, wherein when the first action is detected by the process agent, then performing the steps of evaluating, assembling, and sending.","In embodiments, the mapping definition defines a mapping between elements of the first business object and elements of the second business object. The method may include modifying the second business object using the contents of the message.","The method may include a design time environment in which a user specifies the first and second business objects. Elements of the first and second business objects are displayed. The user may provide a mapping between respective elements of the first and second business objects. A runtime object may be produced based at least on the mapping information, wherein the runtime object includes the mapping definition.","In embodiments, the first business object is provided in a first deployment unit and the second business object is provided in a second deployment unit different from the first deployment unit.","In the following description, for purposes of explanation, numerous examples and specific details are set forth in order to provide a thorough understanding of the present invention. It will be evident, however, to one skilled in the art that the present invention as defined by the claims may include some or all of the features in these examples alone or in combination with other features described below, and may further include modifications and equivalents of the features and concepts described herein.","Referring to , a system  for managing a business may comprise an application platform , peripheral components , and one or more external systems . The application platform  provides the underlying technology for business applications and business objects for managing the business. The platform underlying technology may comprise a combination of hardware (e.g., servers) and software. In embodiments, the application platform  may comprise two or more deployment units , .","Referring for a moment to , in embodiments, an application platform  that supports the business solution for a business enterprise may comprise one or more deployment units , , . Each deployment unit , , comprises, one or more process components , , . Each process component , , , in turn, may include one or more business objects , , ","The process components in a deployment unit may be developed by the platform provider for the business Partner. For example, deployment unit may be a CRM system to support the Partner's customer base, deployment unit may be an HCM system, and so on. When a Partner wants to develop a new solution as an add-on to their existing solution, the new business object and any support software applications are enveloped in a process component  within a given deployment unit . The Partner may design and develop their own business object(s) , along with applications which would execute within the process component . The deployment unit may provide a mechanism for allowing the add-on business object  to exchange information with other business objects within the deployment unit. In embodiments, a mechanism referred to a \u201cprocess integration\u201d (also, \u201cservice integration\u201d) allows business object  to exchange information with other business objects within a deployment unit other than its host deployment unit ","Returning to , the application platform  shows two deployment units , . For example, deployment unit  may provide CRM business functions and it will be understood that the deployment unit provides the underlying technology for business applications relating to CRM and the business objects used to support the CRM function. It will be understood that such underlying technology may be in the form or hardware (one or more servers) and software. Similarly, deployment unit  may provide HCM business functions and may comprise business application(s) and business objects specific to supporting HCM functionality.","The deployment unit  shows a business object (BO)  and a Partner add-on . The business object  represents a business object that was previously developed and deployed in the deployment unit . The Partner add-on  may represent a new business object to be integrated into the business system .  illustrates various integration scenarios with the Partner add-on  in accordance with various aspects of the present invention. A brief overview is provided.","A. External Integration","External integration scenarios encompass embodiments where the Partner add-on  interacts with one or more external system . In an embodiment, interaction with an external system  may be made by calling external Web Services (WS), providing Web Services to expose functionality, and so on. One form of interaction, for example, may be lightweight WS consumption  where the logic of the Partner add-on  makes synchronous Web Service calls. Other protocols such as Representational State Transfer (REST), extended markup language (XML), JavaScript Object Notation (JSON), and so on may be employed. The counterpart of the Web Service consumption  is the provisioning. In an embodiment, for example, some functionality provided by the Partner add-on  or may be made available to external consumers in response to inbound synchronous requests. This may include providing a corresponding web services definition language (WSDL) file with end point configuration.","In embodiments, the Partner add-on  may be integrated with external processes via external communication . In this case, the integration may take place at a higher semantic (business) level, and in general may consist of an orchestrated sequence of web service calls in both directions between the Partner add-on  and the external process. In general, the communication may be asynchronous.","The Partner add-on  may be integrated with the occurrence of business events . This integration scenario is about sending simple asynchronous notification messages whenever some condition triggers. For example, the trigger may be related to a BO event, to a BO state transition, and so on. Notifications can be created without knowledge about receivers using a \u201csend and forget\u201d communication model.","B. Internal Integration","In embodiments of internal integration scenarios, the Partner add-on  may be integrated using functionality provided by the application platform . Two classes of internal integration scenarios are recognized: (1) the Partner add-on  is located in the same deployment unit as the BO (Local Integration); and (2) a cross-DU communication is necessary (Internal X-DU Query, Internal Process Integration).","Local integration , in some embodiments, happens between two BO's in the same deployment unit. Local integration  may be realized by creating modeled associations between the Partner BO and the BO provided by the platform provider and accessing the BO directly from the business logic of the partner BO.","In some embodiments, internal X-DU (cross-deployment unit) queries  may involve a BO in one deployment unit accessing data from a BO in another deployment unit. X-DU queries  may be provided by reading information synchronously from the BO in other deployment unit and storing the data in a common data repository.","In embodiments, \u201cinternal process integration\u201d  is another internal integration approach for communicating across deployment unit boundaries. This kind of integration is usually asynchronous, e.g., triggered by a \u201cSAVE\u201d event on the initiating Business Object (outbound side). At the receiving deployment unit (Inbound), one or more Business Objects may be affected. Since processing of the inbound message is asynchronous, errors and conflicts may require special handling in order to be properly detected and processed. Internal process integration may involve \u201ccomplex interactions\u201d (e.g., a request-confirmation pattern) that require inbound and outbound communication between the BO's.","Additional integration scenarios include integration with external files . Partners may want to integrate their add-on using external files; e.g., XML-based files. Partners may want to provide their add-on  with access to a printer ","Referring to , a high level description of the design time environment and run time environment in accordance with principles of the present invention will be discussed. The term \u201cprocess integration\u201d used above and the term \u201cservice integration\u201d introduced below will be used interchangeably to refer to the integration of business objects which reside in different deployment units.","The design time environment allows the Partner user to customize their business solution; for example, by defining additional business objects to address their specific needs. The design time environment comprises a front end component which includes the software tools (e.g., service integration wizard, service integration editor, and so on) that allow a user (e.g., an IT support person in the business enterprise) to integrate their business objects (e.g., Partner add-on  in ) with other business objects which may be local the user's deployment unit or in another deployment unit. In a step , a user may access the software tools to design and define a configuration for integrating their add-on business object with other business objects. Additional details of the service integration tools will be discussed below. In a step , the software tools generate a design model associated with the add-on business object that represents the particular configuration of their integration design. In embodiments, the design model generated by the software tools include service integration configuration and mapping and script files. In a step , the design model may be stored in a repository via a repository service (e.g., a database server). In accordance with aspects of the present invention, a runtime generator process generates (in a step ) a service integration runtime object which corresponds to the add-on, and stores the service integration runtime object  in a tenant data store. As will be explained below, the service integration runtime object  for a business object comprises one or more process agents.","Although not depicted in , the repository stores definitions and configurations of the business objects themselves. For example, the platform provider may define, develop, and configure a set of business objects specifically for the business Partner (e.g., in a collaborative effort with the business enterprise), which are then stored in the repository. Likewise, the business Partner, using suitable software tools (not shown) may develop, define, and configure their own add-on business objects to enhance their business management operations. The add-on business objects may be stored in the repository.","The runtime environment is the place where the Partner is actually using their business solution to run their business. In the runtime environment, the Partner user (e.g., an end-user in the business enterprise such as a sales person, an administrative person in the human resources department, and so on) may conduct their business-related activity using a suitable business application (step ). In a step , using the business application, the user may access one or business objects stored in the repository via a business object runtime process and perform one or more operations on the business objects; e.g., the user may update sales figures for a customer. In accordance with principles of the present invention, the business object runtime process informs the service integration runtime process of business objects that it is processing. In a step , the service integration runtime process retrieves any service integration runtime objects  that correspond to business objects being processed by the business object runtime process. Using the service integration runtime objects, the service integration runtime process \u201clistens\u201d (in a step ) for the occurrence of triggering events (e.g., a SAVE operation) on their corresponding business objects and conducts (in a step ) communications in order to communicate data from the \u201coutbound\u201d business object to \u201cinbound\u201d business object(s) specified in the service integration runtime object.","Referring to , a service integration model in accordance with principles of the present invention will now be described. A business object  in one deployment unit plays the role of a triggering actor , for example, when someone modifies the business object and performs a SAVE operation. This initiates a service integration communication with a business object  (located in another deployment unit) which plays the role of a reacting actor .","The service integration model defines a mechanism for exchanging information between business objects that reside in separate deployment units. An interaction model  is defined by one or more interaction messages . The interaction message  specifies a message structure and an operation; e.g., CREATE, DELETE, UPDATE and so on. The message  is initiated by the triggering actor  and is sent to the reacting actor .","The actors ,  represent an actual implementation of the service integration interaction and correspond to the service integration runtime objects discussed above in . In embodiments, each actor ,  comprises one or more process agents , , , to facilitate service integration between respective business objects , . In embodiments, each process agent is associated with a respective business object, and a business object may be associated with two or more process agents.","An aspect of the service integration model shown in  is asynchronous communication. The communication may be triggered, for instance, by a SAVE operation that a user may perform after completing a task on a business object. The communication is asynchronous in that the triggering actor  does not wait for a reply from the reacting actor  after the triggering actor sends the message  to the reacting actor. Of course, the reacting actor  may send a subsequent \u201cresponse\u201d message to the triggering actor  that relates to the initial message (e.g., results of analysis); however, role reversal occurs where the actor  takes on the role the triggering actor and actor  is the reacting actor. An outcome of asynchronous communication is that messages are only sent in one direction.","Another aspect of the service integration model shown in  is \u201ccomplete transmission\u201d of messages. The message  is deemed to contain all of the data in the target business object . If a corresponding datum in the target business object  is found in the message , then that datum in the target business object is replaced by the corresponding datum in message. If a corresponding datum in the target business object  is not found in the message , then that datum in the target business object is deleted. In an embodiment, the message  may include a \u201cPrevent Data Deletion\u201d flag so that such deletions in the target business object  are not made.","As indicated above, process agents , , , realize service integration between respective business objects , . In accordance with principles of the present invention, the process agents encapsulate behavior, which autonomously react to some stimulus (Receive), process some information (Action), and either emit a message (\u201coutbound\u201d process agent , ) or produce modifications to business objects (\u201cinbound\u201d process agent , ). Accordingly, a business object may be associated with multiple process agents; e.g., a business object  is associated with an outbound process agent for sending messages, and with an inbound process agent for receiving messages.","Referring to , outbound processing and inbound processing by process agents are illustrated. An outbound process agent may emit messages  in response to some triggering event on business object . For example, a SAVE event signifying the conclusion of a modification of a source business object  may serve as a triggering event. In embodiments, the outbound process agent may comprises an initialization component , a processing component , and a sending component .","Referring to , the outbound process agent \u201clistens\u201d (step ) for a triggering event on its associated business object; e.g. a SAVE operation on the source business object . In a step , the initialization component  will evaluate the relevance of the modifications to determine if a message should be sent at all. For example, depending on the business object modifications, the initialization component  may determine which nodes of the source business object  are relevant. In some embodiments, Partners can specify relevance conditions as expressions on the business object, nodes, and elements, using a suitable scripting language that can be processed (e.g., compiled) by the runtime generator process ().","In a step , the processing component  performs condition evaluation. In the case of large update messages, it may be desirable not to transmit the message  in \u201ccomplete transmission\u201d mode. Rather, only the parts that have modifications would be sent; this is referred to as \u201cdelta transmission\u201d mode. In some cases, the determination of the deltas is application specific. Accordingly, in some embodiments, the Partner may specify the deltas for each business object node as a set of rules (e.g., Start, Cancel, Change conditions). These rules may comprise Boolean expressions represented in a suitable scripting language that can be processed by the runtime generator process ().","In a step , the sender component  may assemble the message . After determining the parts of the message to be sent in the processing (step ), those parts may be assembled from information of the business object and associated elements. In embodiments, Partners may specify the mapping between elements of the source business object  and corresponding elements in the target business object  using a graphical mapping tool. The message  may be expressed using any suitable message format; e.g., extended markup language (XML), and so on, and may be transmitted using any suitable communication protocol; e.g., Web Services, Simple Object Access Protocol (SOAP), and so on. The assembled message is then sent in a step  in asynchronous fashion.","Returning to , an inbound process agent executing in another deployment unit may modify a business object  when it is triggered by receipt of a message \u2032. In embodiments, the inbound process agent may comprise a lock component , a processing component , and a modify component .","Referring to , in a step  the process agent \u201clistens\u201d for incoming messages. In a step , after a message \u2032 is received, the lock component  will verify the correctness of the received message \u2032. The target business object  is identified from information in the message \u2032, and will be locked in order to prevent other processes in the deployment unit (Deployment Unit B) from accessing the business object at the same time; basically, to prevent data corruption of the business object. In a step , the message  is processed in the process component  of the inbound process agent . Among other things, data contained in the message \u2032 may replace data in the target business object . In a step , modifications to the target business object  are made permanent by the modify component  by saving them into the repository () where the business object is stored. Error processing may occur anytime during processing by any of the components of the inbound process agent . Errors may include identifying and handling conflicts between the data in the received message \u2032.","In embodiments, application platform  () and deployment units ,  may comprise one or more computer system components and appropriate software components () executing on the computer system components.  is a high level block diagram of a computer system that may be embodied in accordance with the present invention. A processing component  includes a memory  and suitable I\/O components ,  for interaction with a user. For example, input component  may comprise a keyboard, a mouse device, and so on. In the case of mobile devices, the input component  may be a virtual keyboard provided on a touch screen device. The output component  may comprise a suitable display for displaying user interface (UI) screens, and in the case of a mobile device may be a touch screen display. The memory component  may comprise random access memory (RAM), read-only memory (ROM), flash memory, and so on.","The processing component  may include a communication interface for communication over a communication network  (such as a local area network, LAN). In an embodiment, for example, a first deployment unit may communicate with another deployment unit in the business enterprise over a LAN, using the SOAP protocol.","The processing component  may include data storage  for persistent data storage, and may comprise a hard disk drive, optical storage devices, and so on. The data storage  may comprise a combination of a local data store and a data storage system. Business objects  and service integration runtime objects  may be stored on the data storage .","Program code  stored on the data storage device  may include various an operating system (OS) and various applications such as business applications. For example, if the processing component  is configured in a deployment unit developed for CRM, then the program code  may comprise various CRM-type applications. Program code  may be executed by the processing component  to cause the processing component to be perform the steps disclosed herein.","An example use case will now be discussed. Referring to , the use case will assume that a business solution has been provided on an application platform  for a business enterprise, and comprises a CRM system deployed in deployment unit  and an HCM system (human resources) deployed in deployment unit . Suppose the business Partner has decided to implement a bonus program for their sales people. In the use case, the Partner has developed and built a process component called Bonus Management  which includes a business object called Bonus Entitlement .  illustrates an example of the Bonus Entitlement business object .","In order to pay a bonus to a sales person, an appropriate business object in the HCM system  must be informed. In particular, the Compensation Management process component  manages an Employee Compensation Agreement business object  to which bonus information from the CRM system  must be sent in order to pay a bonus to the sales person. An internal communication mechanism in accordance with principles of the present invention has been discussed above, including processing explained in . Following are UI screens to show how the user views the system and specifies information to accomplish the task.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 9","FIG. 9"],"b":["1","922","3","5","924","2","4","3"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 11","FIG. 2"],"b":["1100","1100","1102","1104","1102"]},"The screenshot shows a user (e.g., developer) has selected the Bonus Entitlement business object , stored in an object entitled PDIBonusEntitlement.bo, which is displayed in the display area . The screenshot further shows that the interface  includes a context menu  (e.g., accessed by \u201cright clicking\u201d on the component name  with a mouse input device) listing various actions that can be performed on the selected business object. The screenshot shows the user has selected the \u201cCreate Service Integration\u201d action from the context menu . In embodiments, this will invoke a Service Integration Wizard.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 12","b":["1200","1200","1202","1200"]},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 13","b":["1300","1300"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 14","FIG. 11","FIG. 11"],"b":["1400","922","922","1400","922"]},{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 15","FIG. 11"],"b":["1500","1500","924"]},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 16","b":["1600","924","1602","1604"]},{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["sub-node","node"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CompensationComponentTypeID","ItemCompensationComponent"]},{"entry":["ValidityPeriod","ItemCompensationComponentDetail"]},{"entry":["CompensationComponentAmount","ItemCompensationComponentDetail-"]},{"entry":[{},"Rate"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"An Instance Identification area  allows the user to identify an instance of the business object which constitutes the consuming actor. In embodiments, an instance of the target business object may be identified by specifying a key selected from an Alternative Key drop down menu, or by specifying a query. The screenshot shows the user has elected to specify a query as the basis for identifying an instance of the target business object, using EmployeeID and WorkAgreementCurrentlyActiveIndicator as query parameters.","A Subnode Identification area  allows the user to select one or more sub-nodes and key fields for each selected sub-node. The user can proceed to the next screen by \u201cclicking\u201d the NEXT button.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 17","b":"1700"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 18","FIG. 2","FIG. 2"],"b":"1800"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 19","FIG. 11"],"b":["1100","1104","1116","1102","1122"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 20","FIG. 19"],"b":["1104","1100","112","1114"],"i":"a "},"The above description illustrates various embodiments of the present invention along with examples of how aspects of the present invention may be implemented. The above examples and embodiments should not be deemed to be the only embodiments, and are presented to illustrate the flexibility and advantages of the present invention as defined by the following claims. Based on the above disclosure and the following claims, other arrangements, embodiments, implementations and equivalents will be evident to those skilled in the art and may be employed without departing from the spirit and scope of the invention as defined by the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 6 and 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 12-18"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 20"}]},"DETDESC":[{},{}]}
