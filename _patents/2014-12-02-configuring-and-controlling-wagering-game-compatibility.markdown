---
title: Configuring and controlling wagering game compatibility
abstract: A wagering game system and its operations are described herein. In some embodiments, the operations can include presenting a primary wagering game and receiving a request to present a secondary game in connection with the primary wagering game. The primary wagering game and the secondary game can be separate applications that require interactivity with each other (e.g., provide required functionality to each other, communicate shared data with each other, etc.). The operations can further include determining that an application programming interface (“API”) provides the required interactivity so that the secondary game can function in conjunction with the primary wagering game without problems (e.g., can successfully plug-in to the primary wagering game). The operations can further determine optional and non-optional requirements and determine compatibilities based on the optional and non-optional requirements. Further, the operations can add functionality to the primary wagering game, the secondary game, or the API, to enable compatibility.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09373224&OS=09373224&RS=09373224
owner: BALLY GAMING, INC.
number: 09373224
owner_city: Las Vegas
owner_country: US
publication_date: 20141202
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","LIMITED COPYRIGHT WAIVER","TECHNICAL FIELD","BACKGROUND","DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","Introduction","Example Operating Environments","Wagering Game System Architecture","Example Operations","Additional Example Operating Environments","Wagering Game Machine Architecture","Mobile Wagering Game Machine","Wagering Game Machine","General"],"p":["This application claims the priority to, and is a continuation application of, U.S. application Ser. No. 13\/744,892 filed Jan. 18, 2013. The U.S. Ser. No. 13\/744,892 application is a continuation application that claims benefit of U.S. application Ser. No. 13\/146,368 which is a National Stage Application of PCT\/US10\/22295 filed 27 Jan. 2010, which claims benefit of Provisional U.S. Application Ser. No. 61\/148,141 filed 29 Jan. 2009.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. Copyright 2014, WMS Gaming, Inc.","Embodiments of the inventive subject matter relate generally to wagering game systems and networks that, more particularly, configure and control wagering game compatibility.","Wagering game machines, such as slot machines, video poker machines and the like, have been a cornerstone of the gaming industry for several years. Generally, the popularity of such machines depends on the likelihood (or perceived likelihood) of winning money at the machine and the intrinsic entertainment value of the machine relative to other available gaming options. Where the available gaming options include a number of competing wagering game machines and the expectation of winning at each machine is roughly the same (or believed to be the same), players are likely to be attracted to the most entertaining and exciting machines. Shrewd operators consequently strive to employ the most entertaining and exciting machines, features, and enhancements available because such machines attract frequent play and hence increase profitability to the operator. However, sometimes, the development of new games can become complex and present challenges for developers and game operators alike. Therefore, there is a continuing need for wagering game machine manufacturers to continuously develop new games and gaming enhancements that will attract frequent play, but that are also easy to use, control, and configure.","This description of the embodiments is divided into five sections. The first section provides an introduction to embodiments. The second section describes example operating environments while the third section describes example operations performed by some embodiments. The fourth section describes additional example operating environments while the fifth section presents some general comments.","This section provides an introduction to some embodiments.","As mentioned previously, there is a continuing need for wagering game machine manufacturers to continuously develop new games and gaming enhancements that will attract frequent play, but that are easy to use, control, and configure. Some gaming enhancements have included providing secondary (e.g., bonus) games that are associated with primary wagering games (e.g., base games). Wagering game developers, however, have faced challenges developing secondary games in conjunction with primary wagering games as the secondary game content (e.g., assets, code, etc.) is programmed in conjunction with (e.g., combined with, compiled into, etc.) the primary wagering game's content, thus extending the development cycle of the primary wagering game. Further, when the programming for a secondary game is modified, the potential for affecting the primary wagering game increases, and vice versa, because the game code, assets, content, etc. for the primary wagering game are tied to the secondary game's code, assets, content, etc.","Some embodiments describe examples of presenting one or more secondary applications (e.g. secondary games, secondary wagering games, bonuses, etc.), in conjunction with a primary wagering game in a wagering game session. However, the primary wagering game and the one or more secondary applications are separate, such that their content, code, assets, etc. are not programmed together, and run as separate applications. Nevertheless, in some embodiments, the needs of the secondary application may need to integrate with functionality, information, or other features available from, or through, the primary wagering game. For instance, the primary wagering game may have wagering functionality and other game control features. The one or more secondary applications may need to utilize the wagering functionality or other game control features of the primary wagering game to conduct wagers within the secondary game (e.g., in a secondary wagering game associated with the primary wagering game). Further, in other examples, the primary wagering game may have access to financial data or account information that the secondary application needs to access also. Some embodiments, therefore, can provide the wagering functionality, financial data, account information, or other features and information of the primary wagering game, to the secondary application, via application programming interfaces (APIs) available for the primary wagering game application and the secondary application. During the course of configuration, play, or at other times, some embodiments can also determine whether primary wagering games and secondary applications are compatible. For example, some embodiments can determine requirements of the secondary application to access or use the primary wagering game's functionality and\/or data and determine whether the primary wagering game's API can provide the necessary functionality and\/or data so that the secondary application can function without operational errors, significant delays, missing data, or other problems.","In some embodiments, a secondary application may be referred to more specifically as a \u201csecondary game\u201d as an example of a possible secondary application that is triggered, requested, supported, etc., by a primary wagering game, and which may require interaction with the primary wagering game. However, it should be noted that the secondary application does not need to be limited to game applications, but could also be related to other secondary applications (e.g., promotional applications, social networking applications, player tracking applications, etc.) that may require interaction with the primary wagering game. Also, in some embodiments herein a player may be referred to interchangeably as a player account, or vice versa. Account-based wagering systems often utilize player accounts when transacting and performing activities, at the computer level, that are initiated by players. Therefore, a \u201cplayer account\u201d is often referred to herein as a representative of the player at a computerized level. Therefore, for brevity, to avoid having to describe the interconnection between player and player account in every instance, a \u201cplayer account\u201d may be referred to herein in either context. Further, in some embodiments herein, the word \u201cgaming\u201d may be used interchangeably with the word \u201cgambling\u201d. Further, the words \u201cwagering game\u201d are used to indicate electronic (e.g., electromechanical, digital, computerized, etc.) games (e.g., slot games, electronic poker, electronic bingo, etc.) that use (e.g., process a form of, are based on, are funded by, etc.) a monetary bet or wager.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1"],"b":["100","150","180","160","122","160","102","150","160","160","112","106","104","106","160","160","106","106","106","106","104","106","104","106","104","106","104","106","104","106","100","104","106","100","108","104","110","106","100","104","100","100","104","160"]},"Although  describes some embodiments, the following sections describe many other features and embodiments.","This section describes example operating environments and networks and presents structural aspects of some embodiments. More specifically, this section includes discussion about wagering game system architectures.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["200","200","270","270","270","270"]},"The wagering game system architecture  can also include a wagering game server  configured to control wagering game content, provide random numbers, and communicate wagering game information, account information, and other information to and from a wagering game machine . The wagering game server  can include a content controller  configured to manage and control content for the presentation of content on the wagering game machine . For example, the content controller  can generate game results (e.g., win\/loss values), including win amounts, for games played on the wagering game machine . The content controller  can communicate the game results to the wagering game machine . The content controller  can also generate random numbers and provide them to the wagering game machine  so that the wagering game machine  can generate game results. The wagering game server  can also include a content store  configured to contain content to present on the wagering game machine  (e.g., primary wagering games). The wagering game server  can also include an account manager  configured to control information related to player accounts. For example, the account manager  can communicate wager amounts, game results amounts (e.g., win amounts), bonus game amounts, etc., to the account server . The wagering game server  can also include a communication unit  configured to communicate information to the wagering game machine  and to communicate with other systems, devices, and networks.","The wagering game system architecture  can also include the wagering game machine  configured to present wagering games and receive and transmit information to configure and control wagering game compatibility. The wagering game machine  can include a content controller  configured to manage and control content and presentation of content on the wagering game machine . The wagering game machine  can also include a content store  configured to contain content to present on the wagering game machine . The wagering game machine  can also include an operating system  configured to control the operation and presentation of system objects and instructions. The wagering game machine  can also include a compatibility controller  configured to control the compatibility of primary wagering games and secondary applications (e.g., secondary games) including determining whether a primary wagering game and an independent secondary game can interface with each other's functionality, information, etc. (e.g., via each other's application programming interfaces). The wagering game machine  can also include a configuration store  configured to store configurations made regarding compatibilities between primary wagering games and secondary applications including storing configuration files with compatibility lists, secondary game type lists, etc. The wagering game machine  can also include an application programming interface controller  configured to control communications and interface capabilities between primary wagering games and secondary applications.","The wagering game system architecture  can also include a secondary content server  configured to provide content and control information for secondary games and other secondary content available on a wagering game network (e.g., secondary wagering game content, promotions content, advertising content, player tracking content, web content, etc.). For example, in , the secondary game server  may be a type of secondary content server that provides secondary games utilized in conjunction with primary wagering games. In some embodiments, however, other secondary applications can function in conjunction with primary wagering games, such as player tracking applications, promotional or advertising applications, etc.","The wagering game system architecture  can also include a compatibility configuration server  configured to process and control information to configure and control application interfacing between primary wagering game applications and secondary applications. The compatibility configuration server  can include a compatibility configuration controller  configured to control the configuration of compatibilities between primary wagering games and secondary games. The compatibility configuration controller  can determine features, functionality, requirements, etc. from secondary games and provide types, or categories, for those games. The compatibility configuration controller  can also determine functionality, capabilities, etc. of a primary wagering game. The compatibility configuration controller  can compare the features, functionality, requirements, etc. from the secondary game with the functionality, capabilities, etc. of the primary wagering game and determine whether they are compatible. For example, the compatibility configuration controller  can determine whether the primary wagering game's API can provide the functionality and capabilities that are required by the secondary game to access information from, use functionality from, or in other ways interact with, the primary wagering game. The compatibility configuration controller  can also determine whether the secondary game's API can communicate data and interface with the primary game's API. Further, the compatibility configuration controller  can determine whether primary wagering games and secondary games are partially compatible with each other and provide types for secondary games that indicate partial compatibility (e.g., so that a secondary game may function in a partial compatibility mode, having all necessary requirements met by the primary wagering game's API, though not necessarily all optional requirements). The compatibility configuration controller  can also store scripts, or other mechanisms, that can add functionality to primary wagering games that may be lacking from the primary wagering game or from the API capabilities, so that the secondary game can function in full or partial compatibility modes at game run-time. In some embodiments, the system can also add functionality to secondary games or their APIs. The compatibility configuration server  can store the scripts and mechanisms, along with type lists and compatibility lists, with devices on the wagering game network, such as on the primary wagering game server , the secondary content server , and the wagering game machine . The compatibility configuration server  can also include a configuration rules store  configured to store rules concerning compatibilities of program functionality and access capabilities, store rules concerning assigning types to secondary games, store rules concerning adding functionality to primary wagering games and\/or to primary wagering game APIs, etc.","Each component shown in the wagering game system architecture  is shown as a separate and distinct element connected via a communications network . However, some functions performed by one component could be performed by other components. For example, the wagering game server  can also be configured to perform functions of the compatibility controller , the configuration store , the application programming interface controller , and other network elements and\/or system devices. Furthermore, the components shown may all be contained in one device, but some, or all, may be included in, or performed by multiple devices, as in the configurations shown in  or other configurations not shown. For example, the account manager  and the communication unit  can be included in the wagering game machine  instead of, or in addition to, being a part of the wagering game server . Further, in some embodiments, the wagering game machine  can determine wagering game outcomes, generate random numbers, etc. instead of, or in addition to, the wagering game server . The wagering game machine , or other wagering game machines described herein can take any suitable form, such as floor standing models, handheld mobile units, bar-top models, workstation-type console models, surface computing machines, etc. Further, the wagering game machines can be primarily dedicated for use in conducting wagering games, or can include non-dedicated devices, such as mobile phones, personal digital assistants, personal computers, etc.","In some embodiments, wagering game machines and wagering game servers work together such that wagering game machines can be operated as a thin, thick, or intermediate client. For example, one or more elements of game play may be controlled by the wagering game machines (client) or the wagering game servers (server). Game play elements can include executable game code, lookup tables, configuration files, game outcome, audio or visual representations of the game, game assets or the like. In a thin-client example, the wagering game server can perform functions such as determining game outcome or managing assets, while the wagering game machines can present a graphical representation of such outcome or asset modification to the user (e.g., player). In a thick-client example, the wagering game machines can determine game outcomes and communicate the outcomes to the wagering game server for recording or managing a player's account.","In some embodiments, either the wagering game machines (client) or the wagering game server(s) can provide functionality that is not directly related to game play. For example, account transactions and account rules may be managed centrally (e.g., by the wagering game server(s)) or locally (e.g., by the wagering game machines). Other functionality not directly related to game play may include power management, presentation of advertising, software or firmware updates, system quality or security checks, etc.","Furthermore, the wagering game system architecture  can be implemented as software, hardware, any combination thereof, or other forms of embodiments not listed. For example, any of the network components (e.g., the wagering game machines, servers, etc.) can include hardware and machine-readable media including instructions for performing the operations described herein. Machine-readable media includes any mechanism that provides (i.e., stores and\/or transmits) information in a form readable by a machine (e.g., a wagering game machine, computer, etc.). For example, tangible machine-readable media includes read only memory (ROM), random access memory (RAM), magnetic disk storage media, optical storage media, flash memory machines, etc. Machine-readable media also includes any media suitable for transmitting software over a network.","This section describes operations associated with some embodiments. In the discussion below, some flow diagrams are described with reference to block diagrams presented herein. However, in some embodiments, the operations can be performed by logic not described in the block diagrams.","In certain embodiments, the operations can be performed by executing instructions residing on machine-readable media (e.g., software), while in other embodiments, the operations can be performed by hardware and\/or other logic (e.g., firmware). In some embodiments, the operations can be performed in series, while in other embodiments, one or more of the operations can be performed in parallel. Moreover, some embodiments can perform more or less than all the operations shown in any flow diagram.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIGS. 1 and 4","FIG. 3","FIG. 3","FIGS. 1 and 4","FIG. 3","FIG. 1"],"b":["300","300","302","160","104","112","160","114","116","118","119"]},"The flow  continues at processing block , where the system receives a request to present a secondary game in connection with the primary wagering game. In some embodiments, the system can generate and\/or determine triggering events that request and\/or cause the presentation of the secondary game. For example, some triggering events that can request a secondary game to occur, or that can activate (e.g., run, enable, queue, load, download, reserve, etc.) the secondary game, may include (1) a result on a primary wagering game (e.g., a slot reel combination), (2) a buy-in directly to the secondary game (e.g., buying in directly to a group game or network game), and (3) an automatic enrollment or a result of the buy-in or from the primary where the primary wagering game funds the secondary game (e.g., progressive games). In some embodiments, the system can request to present the secondary game as a plug-in to the primary game. In other embodiments, the system can request to present the secondary game separate from, but with interaction or connectivity to the primary wagering game, In some embodiments, the system can also request to utilize resources of the wagering game machine to present the secondary game (e.g., obtain use of a display, take over screen real-estate, obtain control of speakers, obtain priority use of machine hardware, etc.). The system can also determine that at least some portion of the primary wagering game (e.g., some functionality, some requirements, some data, etc.) and at least some portion of the secondary game require interaction. For example, the primary wagering game may need to communicate data to the secondary game, and vice versa, so that the primary wagering game and the secondary game can function properly (e.g., perform the interactive functional requirements, cross-communicate data, etc.). For example, in , the secondary game  may require functionality with, or access to data associated with, any one or more of the game play elements (e.g., slot reels ), the control objects (e.g., bet meter , spin control ), the informational display (e.g., player tracking\/promotions panel ), etc., associated with the primary wagering game . Returning to , another example of game interaction between primary games and secondary games is data exchange. For example, primary games and secondary games can exchange game math data (\u201cmath data\u201d). A primary game and secondary game can utilize (e.g., share, mash up, etc.) math data for proper configuration and proper runtime operations. The following are just some examples reasons why primary and secondary games might exchange math data: an outcome of a secondary game may be a function of the outcome of a primary game, such as a multiplier; a frequency of an event in a primary game (like bonus symbol trigger frequency) may affect the outcome or frequency of a secondary game; a frequency of a feature in a secondary game may affect the outcome of a primary game, a configuration module may require the math data to mash the math data between\/for the primary game and the secondary game.","The flow  continues at processing block , where the system determines a compatibility type for the secondary game.  illustrates an example of a wagering game system (\u201csystem\u201d)  that determines a compatibility type for a secondary game using pre-configured, pre-stored compatibility data. The system  includes a compatibility data store , which includes secondary game type data  and game compatibility data . The secondary game type data  includes unique secondary game identifiers (e.g., titles, game identification numbers, etc.) that uniquely identify specific secondary games. A secondary game server  can provide the secondary games, via a communications network , to a wagering game machine . The secondary game type data  can also include corresponding secondary game types. The types can be classified by unique identifiers (e.g., Type A, Type B, etc.), which uniquely identify a specific set of capabilities, requirements, etc. possessed (e.g., shared) in common by the secondary games that correspond to the type. The system  can cross-reference the requested secondary game with the secondary game type indicated in the secondary game type data  to determine a compatibility type for the secondary game.","The flow  continues at processing block , where the system determines whether the compatibility type for the secondary game is fully compatible with a primary wagering game API. In some embodiments, the system can determine capabilities of a primary wagering game API (e.g. determine capabilities of primary wagering game API to present features of the secondary game and\/or provide information for the primary wagering game). The system can also determine capabilities for a secondary game API (e.g., to present features of the primary wagering game and\/or to provide information from the secondary game). The system can also determine non-optional, or essential, requirements for the secondary game (i.e., features and\/or information that the secondary game has to present without operational error, delay, missing data, disturbances, etc.). The primary wagering game API can provide access to necessary information and provide control abilities to present necessary features of the secondary game so that the secondary game can present the features and information in needs to fully function without operational error, missing information, significant delays or disturbances. The system can determine compatibility at different times and in different ways. For example, the system can determine compatibility between primary wagering games and secondary games using pre-configured data. For example, in , the game compatibility data  can indicate unique identifiers (e.g., titles, game identification numbers, etc.) that uniquely identify primary wagering games (e.g., provided by a primary wagering game server ). The game compatibility data  can also include secondary game types that are compatible with the secondary games (e.g., provided by the secondary game server ). The secondary game types indicated in the game compatibility data  match up to primary games that can provide a compatible link, integration, interface or other interconnectivity mechanism (e.g., compatible APIs) with the secondary game types. In other words, the compatibility data  indicates that a secondary game, which matches up to the secondary game type that corresponds to a primary game, can present content or other information in conjunction with the primary wagering game without experiencing operational error, missing data, or other problems. Therefore, a compatibility checker  can cross-reference the secondary game type data  with the game compatibility data  to determine a game type for a requested secondary game and determine whether the active primary wagering game presented on the wagering game machine  is compatible with the game type for the requested secondary game. In some embodiments, a compatibility configuration server  can pre-configure the secondary game type data  and the game compatibility data  and store the data on the compatibility data store . Referring back to , in other embodiments, however, the system can determine compatibility between primary wagering games and secondary games at game run-time, when the secondary game is requested, but before the secondary game is presented. For example, the system can automatically determine capabilities data for primary wagering games and requirements data for secondary wagering games (e.g., via capabilities metadata stored with the primary wagering games and\/or requirements metadata stored with the secondary games) and cross-reference the capabilities data and requirements data with compatibility rules (e.g., stored on a compatibility configuration server, stored on the wagering game machine, or stored in other locations accessible to the system). Based on the comparison, the system can automatically determine compatibilities. It should be noted that the primary game may also need to access requirements and information from the secondary game. Therefore, in some embodiments, the system can also determine requirements for the primary wagering game, and determine whether the secondary game API capabilities will meet the non-optional, essential requirements of the primary wagering game, so that the primary wagering game can present content, information, features, etc., in conjunction with the secondary game without operational error, missing data, delays, disturbances, or other problems.","The flow  continues at processing block , where the system determines whether the compatibility type for the secondary game is partially compatible. In some embodiments, the system can determine a partial compatibility type assigned to secondary game. Sometimes, a primary wagering game may not have a feature that a secondary game uses. However, the feature that the secondary game uses is not a \u201crequirement\u201d per se in that the secondary game can still be compatible with the primary wagering game API except for the one or more non-required or \u201coptional\u201d features. Consequently, the primary wagering game API can be configured to match the secondary game API for partial compatibility, meaning that the system can assign a compatibility type that is compatible with the primary wagering game API, but with an indicator that some of the optional features are not usable. Thus, the system can assign fully compatible types with metadata indicating non-optional features that are not compatible or the system can assign different types that indicate partial compatibility. The \u201cpartial compatibility\u201d types can be tagged, or indicated, as being subsets to fully compatible types (e.g., the partial compatibility type can be assigned as \u201ctype A:1\u201d which indicates that it supports all of the required, or non-optional, features available within type \u201cA\u201d, but with a \u201c1\u201d sub-identifier to indicate partial compatibility level \u201c1\u201d where certain optional features are not supported within the type A).","The flow  continues at processing block , where the system determines whether a feature can be added to make the primary wagering game and secondary game compatible. In some embodiments, to make the primary wagering game fully or partially compatible with the secondary game, the system can add a script file that may add the feature to the primary wagering game, or enable an ability of the primary wagering game's API, in some form or another, to make the primary wagering game and secondary game compatible. In some embodiments, the system may add a limited, but functional, add-on that may permit the primary wagering game to provide a function similar to that required by the secondary game. In other words, the limited add-on feature may not present content, or execute a feature exactly as the secondary game would, but the limited add-on would still present the content or execute the feature in a limited fashion (e.g., the system may add-on a limited help text present help text feature to a primary wagering game so that the primary wagering game presents help text in a tool-bar or in plain-text format instead of using animated pop-ups and graphics as the secondary game feature would). In some embodiments, the system can add features to make primary wagering games and secondary games either fully or partially compatible. In other words, the system may only be able to add functionality to the primary wagering game, or enable functionality via the primary wagering game's API, sufficient to make the primary game only partially compatible with the secondary game. In other embodiments, however, the system may be able to add functionality that would make the primary wagering game and the secondary game fully compatible.","The flow  continues at processing block , where, if the primary wagering game and secondary game are neither fully or partially compatible, the system prevents the secondary game from being presented in conjunction with the primary wagering game. The system may instead select or request another secondary game that is potentially compatible with the primary wagering game. When requesting the other secondary game, the system can repeat the flow  to determine compatibility. It should be noted, however, that in some embodiments, the system can still present the secondary game even if it is incompatible with the primary wagering game, but the secondary game and the primary game may not be able to communicate properly and present data in conjunction with each other.","The flow  continues at processing block , where, if the primary wagering game and secondary game are fully compatible, the system presents the secondary game to function in full compatibility mode. Full compatibility mode may include presenting the optional and non-optional features, functionality, and data of the primary wagering game and the secondary game.","The flow  continues at processing block , where, if the primary wagering game and secondary game are partially compatible, the system present the secondary game in partial compatibility mode using a portion of the secondary game features or data (e.g., using only the essential, non-optional features and\/or data).",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 5","FIG. 6","FIG. 5","FIG. 5","FIG. 6","FIG. 4","FIG. 5"],"b":["500","500","502"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["The system can determine requirements that either the primary wagering game or the secondary game behave in a certain manner to ensure compatibility. While the primary game and secondary game applications may independently execute, a well defined coordination of game play may be required for proper runtime execution. For instance, the primary game may be engineered in such a way to allow a game state where the secondary game can elegantly take over the main display. At the same time, the secondary game may be engineered to wait for the proper game state in the primary game before displaying certain game related elements. The system can perform a handshaking mechanism between the two applications, through the defined API, resulting in proper game play operation of both applications.","The system can determine requirements that a secondary game know the wager amount on the primary wagering game. For instance, the primary wagering game may have placed a bet, or wager, in a wagering game. The bet, or some other activity during the game, may trigger the secondary game that also allows the player to bet, or wager, again. However, the secondary game may want to know and\/or utilize the wager that was placed in the primary game (i.e., the primary wager) so that it can use that wager amount in the secondary game for the additional wager (i.e., the secondary wager). For example, the secondary game may want to present the primary wager as a starting, or default, wager amount in the secondary game, or modify the primary wager with a modifier (e.g., a multiplier) as a bonus, or potential bonus, award in the secondary game.","The system can determine requirements that the secondary game need to contain a help or pay-table graphic page located in a certain configuration file so the primary wagering game knows where to get it for display. expected services and features from each game.","The system can determine requirements for the secondary game and primary game to present similar functionality. For example, the secondary game may utilize a graphical presentation feature as part of its functionality. The primary wagering game may also need to present the same graphical presentation feature so that the secondary game can utilize the graphical presentation feature to present specific data in common between the games (e.g., cross-over graphics that bleed from the secondary game display to the primary wagering game display, images of tokens and token data that should appear exactly the same in the primary wagering game and the secondary game, images of unique objects such as player account avatars, etc.). In some embodiments, the system can intertwine sprite functionality between the primary and secondary game. For example, the system can comprise a specialized sprite that interleaves graphical elements between a primary and secondary game. The specialized sprite may be referred to herein as a \u201cshim\u201d sprite. A shim sprite can originate from the primary game. For instance, the primary game can create the shim sprite as a part of its sprite tree. When the primary game runs in standalone mode (i.e., not configured with any secondary game applications) the shim sprite can have no consequential operation (e.g., it can do nothing). However, when the primary game is configured to operate with a secondary game the shim sprite can have active functionality. When a rendering engine traverses the primary games sprite tree it draws each sprite in order resulting in a Z order of the graphical elements contained in the sprite tree. When the sprite tree encounters the shim sprite, the rendering engine can relinquish control from the primary game to the secondary game. The secondary game can then draw the graphical elements it needs to draw at that specific time. Once the secondary game completes the drawing of its specific graphical elements, the primary game can regain rendering control. This results in the graphics from both primary and secondary games being properly interleaved together. An example use of a shim sprite is to have the primary game create a shim sprite in the sprite tree on top of the primary game's main background. Therefore, when the primary game is configured to run with a secondary game, the secondary game has the option to overlay graphics on top of the background, but under other primary game elements (such as the reels, meter and buttons). The secondary game has the option to completely cover the primary games main background thus resulting in a dramatically different appearance of the main game from when it runs in standalone mode. Also, the secondary game can use shim sprites to convey information about the secondary game, such as how close a game is to triggering a progressive value."]}}}},"The flow  continues at processing block , where the system assigns a type for the secondary game on a type list based on the secondary game's requirements and capabilities. As mentioned previously, the system classified the secondary games into common groups, or types, based on their common requirements and capabilities. The types can, in some embodiments, indicate a type of versioning for a primary wagering game API that is needed to make the secondary game work with the primary wagering game. In some embodiments, the primary wagering game has an API element and the secondary game has an API element. The combination of the two elements that are compatible can constitute an API \u201ctype\u201d. In some embodiments, the system can store the type list on a secondary game provider, or in another location accessible to devices on a wagering game network. In some embodiments, the system can pre-configure the type list with a configuration tool.  illustrates an example of assigning and storing types of secondary games to a type list. In , a wagering game system (\u201csystem\u201d)  includes a compatibility configuration server  configured to assign types to secondary games based on requirements (e.g., presentation requirements, data access requirements, functionality requirements, etc.) of the secondary games. The compatibility configuration server  can present a secondary game configuration user interface (\u201cuser interface\u201d)  with a selection control  configured to select one of various secondary games. For example, in , the selection control  can select a secondary game called \u201ccannon ball shoot\u201d, from a list of secondary games. The cannon ball shoot game may be a secondary game presented in conjunction with one or many different primary wagering games, where a player can shoot a cannon ball at targets to obtain bonus awards (e.g., extra game credits, entertainment points, free merchandise, bet multipliers for use in the primary wagering game, etc.). The compatibility configuration server  can access information that describes the requirements of the secondary games, for instance, by reading from sources of information that contain the presentation needs, data access needs, functionality needs, etc. The sources of information may include configuration files, database records, technical specifications, help documentation, or other sources of information related to the secondary games. The sources of information can be stored in a secondary game server , which may also store the secondary game content, assets, etc. The user interface  can also present the requirements in a requirements display . The compatibility configuration server  can determine the requirements from the information sources and list them in the requirements display . The compatibility configuration server  can organize the order of the requirements based on filter parameters, search queries, etc. The user interface  can also present a type assignment console , that an operator can use to select a specific type identifier (e.g., select type \u201cA\u201d from a type identifier control ). The type assignment console  can also include an assignment control (e.g., assignment control button ) that the operator can use to assign the selected secondary game (e.g., the \u201ccannon ball shoot\u201d game) to the type (e.g., type \u201cA\u201d). The type assignment console  can also suggest a specific type based on the requirements indicated in the requirements display . For example, an operator can select a suggestion control button  and the compatibility configuration server  can populate already selected types into the type identifier control  and exclude any other types that lack requirements, which have conflicting requirements, etc. The user interface  can also present an assignment indicator  that indicates the assigned type, or types, for the selected secondary game. The user interface  can also present a warning display  that can indicate problems with assigning types to the selected secondary game or that presents warnings about types that cannot be assigned to the selected secondary game. The compatibility configuration server  can create a type list of the compatibility types, similar to the secondary game type data  illustrated in . The compatibility configuration server  can store the type list on wagering game machines , , on the secondary game server , on a primary wagering game server , in other locations that are accessible to compatibility checking modules associated with the wagering game machines ,  or in connection with other devices accessible on a communications network . Returning to , in some embodiments, the system can assign a secondary application to multiple types, if the multiple types are compatible as subsets of each other. However, in some embodiments, the system can assign a secondary application to only one type. Assigning only one type to a secondary application can simplify compatibility checking procedures between primary and secondary games so that the system can quickly and efficiently determine whether a secondary game, having only one type, is compatible with a primary wagering game, without having to consider complex compatibility subsets.","The flow  continues at processing block , where the system determines the capabilities of primary wagering game's API. In some embodiments, the system can determine capabilities of a primary wagering game's API by ascertaining details stored in documentation associated with the API (e.g., development documentation, reference documentation, etc.).","The flow  continues at processing block , where the system generates a compatibility list of each primary wagering game and compatible secondary game types based on the capabilities of the primary wagering game's API. For example, in , the system  can store the compatibility data  in a list (e.g., a configuration file, a database record, etc.). In some embodiments, the system can store the compatibility list with the primary wagering game provider.","The flow  continues at processing block , where the system assigns the compatibility list to the primary wagering game. The system can store the assignments into the compatibility list and associate the compatibility list with a primary wagering game. The compatibility list can indicate that the primary wagering game is compatible with certain types of secondary games. The system can look up the type list to determine whether the secondary game meets one of the types indicated as being compatible in the compatibility list. The compatibility list can be stored in a configuration file, on a wagering game machine, on a server, or other location. In some embodiments, the system can configure a wagering game machine using the information in the compatibility list. For example, when a primary wagering game is requested, an operator can determine and configure payout percentages that will be used for the primary wagering game and any secondary games that will work with the primary wagering game. The operator can refer to the compatibility list, associated with the primary wagering game, to determine which secondary games are compatible with the primary wagering game. The secondary games can indicate the types that they are associated with by querying a secondary game server, by reading configuration files associated with the secondary games of interest, by receiving parameters passed from the secondary games, etc. The operator can then match the appropriate secondary games and primary wagering games and not allow matches of incompatible types. The operator can configure the primary wagering game to run one or more secondary games at certain times or based on triggers (e.g., a progressive limit causes a trigger for secondary game to take over). Some triggers can be known (e.g., know triggers such as visible goals that will indicate to the player that the secondary game is about to be triggered, symbol triggers, etc.). Other triggers can be unknown (e.g., a mystery trigger that the player does not know about and just happens, such as a wager threshold, a random number, etc.). The operator can then enable the games for play.","This section describes example operating environments, systems and networks, and presents structural aspects of some embodiments.",{"@attributes":{"id":"p-0050","num":"0053"},"figref":["FIG. 7","FIG. 7"],"b":["700","700","706","726","728","726","728","732","732"]},"The CPU  is also connected to an input\/output (\u201cI\/O\u201d) bus , which can include any suitable bus technologies, such as an AGTL+ frontside bus and a PCI backside bus. The I\/O bus  is connected to a payout mechanism , primary display , secondary display , value input device , player input device , information reader , and storage unit . The player input device  can include the value input device  to the extent the player input device  is used to place wagers. The I\/O bus  is also connected to an external system interface , which is connected to external systems (e.g., wagering game networks). The external system interface  can include logic for exchanging information over wired and wireless networks (e.g., 802.11g transceiver, Bluetooth transceiver, Ethernet transceiver, etc.)","The I\/O bus  is also connected to a location unit . The location unit  can create player information that indicates the wagering game machine's location\/movements in a casino. In some embodiments, the location unit  includes a global positioning system (GPS) receiver that can determine the wagering game machine's location using GPS satellites. In other embodiments, the location unit  can include a radio frequency identification (RFID) tag that can determine the wagering game machine's location using RFID readers positioned throughout a casino. Some embodiments can use GPS receiver and RFID tags in combination, while other embodiments can use other suitable methods for determining the wagering game machine's location. Although not shown in , in some embodiments, the location unit  is not connected to the I\/O bus .","In some embodiments, the wagering game machine  can include additional peripheral devices and\/or more than one of each component shown in . For example, in some embodiments, the wagering game machine  can include multiple external system interfaces  and\/or multiple CPUs . In some embodiments, any of the components can be integrated or subdivided.","In some embodiments, the wagering game machine  includes a game compatibility module . The game compatibility module  can process communications, commands, or other information, where the processing can configure and control wagering game compatibility.","Furthermore, any component of the wagering game machine  can include hardware, firmware, and\/or machine-readable media including instructions for performing the operations described herein.",{"@attributes":{"id":"p-0056","num":"0059"},"figref":["FIG. 8","FIG. 8","FIG. 7"],"b":["800","800","802","800","804","802","810","800"]},"The mobile wagering game machine  includes several input\/output devices. In particular, the mobile wagering game machine  includes buttons , audio jack , speaker , display , biometric device , wireless transmission devices (e.g., wireless communication units  and ), microphone , and card reader . Additionally, the mobile wagering game machine can include tilt, orientation, ambient light, or other environmental sensors.","In some embodiments, the mobile wagering game machine  uses the biometric device  for authenticating players, whereas it uses the display  and the speaker  for presenting wagering game results and other information (e.g., credits, progressive jackpots, etc.). The mobile wagering game machine  can also present audio through the audio jack  or through a wireless link such as Bluetooth.","In some embodiments, the wireless communication unit  can include infrared wireless communications technology for receiving wagering game content while docked in a wager gaming station. The wireless communication unit  can include an 802.11G transceiver for connecting to and exchanging information with wireless access points. The wireless communication unit  can include a Bluetooth transceiver for exchanging information with other Bluetooth enabled devices.","In some embodiments, the mobile wagering game machine  is constructed from damage resistant materials, such as polymer plastics. Portions of the mobile wagering game machine  can be constructed from non-porous plastics which exhibit antimicrobial qualities. Also, the mobile wagering game machine  can be liquid resistant for easy cleaning and sanitization.","In some embodiments, the mobile wagering game machine  can also include an input\/output (\u201cI\/O\u201d) port  for connecting directly to another device, such as to a peripheral device, a secondary mobile machine, etc. Furthermore, any component of the mobile wagering game machine  can include hardware, firmware, and\/or machine-readable media including instructions for performing the operations described herein.",{"@attributes":{"id":"p-0062","num":"0065"},"figref":["FIG. 9","FIG. 9"],"b":["900","900","900","900"]},"The wagering game machine  comprises a housing  and includes input devices, including value input devices  and a player input device . For output, the wagering game machine  includes a primary display  for displaying information about a basic wagering game. The primary display  can also display information about a bonus wagering game and a progressive wagering game. The wagering game machine  also includes a secondary display  for displaying wagering game events, wagering game outcomes, and\/or signage information. While some components of the wagering game machine  are described herein, numerous other elements can exist and can be used in any number or combination to create varying forms of the wagering game machine .","The value input devices  can take any suitable form and can be located on the front of the housing . The value input devices  can receive currency and\/or credits inserted by a player. The value input devices  can include coin acceptors for receiving coin currency and bill acceptors for receiving paper currency. Furthermore, the value input devices  can include ticket readers or barcode scanners for reading information stored on vouchers, cards, or other tangible portable storage devices. The vouchers or cards can authorize access to central accounts, which can transfer money to the wagering game machine .","The player input device  comprises a plurality of push buttons on a button panel  for operating the wagering game machine . In addition, or alternatively, the player input device  can comprise a touch screen  mounted over the primary display  and\/or secondary display .","The various components of the wagering game machine  can be connected directly to, or contained within, the housing . Alternatively, some of the wagering game machine's components can be located outside of the housing , while being communicatively coupled with the wagering game machine  using any suitable wired or wireless communication technology.","The operation of the basic wagering game can be displayed to the player on the primary display . The primary display  can also display a bonus game associated with the basic wagering game. The primary display  can include a cathode ray tube (CRT), a high resolution liquid crystal display (LCD), a plasma display, light emitting diodes (LEDs), or any other type of display suitable for use in the wagering game machine . Alternatively, the primary display  can include a number of mechanical reels to display the outcome. In , the wagering game machine  is an \u201cupright\u201d version in which the primary display  is oriented vertically relative to the player. Alternatively, the wagering game machine can be a \u201cslant-top\u201d version in which the primary display  is slanted at about a thirty-degree angle toward the player of the wagering game machine . In yet another embodiment, the wagering game machine  can exhibit any suitable form factor, such as a free standing model, bar top model, mobile handheld model, or workstation console model.","A player begins playing a basic wagering game by making a wager via the value input device . The player can initiate play by using the player input device's buttons or touch screen . The basic game can include arranging a plurality of symbols along a pay line , which indicates one or more outcomes of the basic game. Such outcomes can be randomly selected in response to player input. At least one of the outcomes, which can include any variation or combination of symbols, can trigger a bonus game.","In some embodiments, the wagering game machine  can also include an information reader , which can include a card reader, ticket reader, bar code scanner, RFID transceiver, or computer readable storage medium interface. In some embodiments, the information reader  can be used to award complimentary services, restore game assets, track player habits, etc.","The described embodiments may be provided as a computer program product, or software, that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer system (or other electronic device(s)) to perform a process according to embodiments(s), whether presently described or not, because every conceivable variation is not enumerated herein. A machine readable medium includes any mechanism for storing or transmitting information in a form (e.g., software, processing application) readable by a machine (e.g., a computer). The machine-readable medium may include, but is not limited to, magnetic storage medium (e.g., floppy diskette); optical storage medium (e.g., CD-ROM); magneto-optical storage medium; read only memory (ROM); random access memory (RAM); erasable programmable memory (e.g., EPROM and EEPROM); flash memory; or other types of medium suitable for storing electronic instructions. In addition, embodiments may be embodied in an electrical, optical, acoustical or other form of propagated signal (e.g., carrier waves, infrared signals, digital signals, etc.), or wireline, wireless, or other communications medium.","This detailed description refers to specific examples in the drawings and illustrations. These examples are described in sufficient detail to enable those skilled in the art to practice the inventive subject matter. These examples also serve to illustrate how the inventive subject matter can be applied to various purposes or embodiments. Other embodiments are included within the inventive subject matter, as logical, mechanical, electrical, and other changes can be made to the example embodiments described herein. Features of various embodiments described herein, however essential to the example embodiments in which they are incorporated, do not limit the inventive subject matter as a whole, and any reference to the invention, its elements, operation, and application are not limiting as a whole, but serve only to define these example embodiments. This detailed description does not, therefore, limit embodiments, which are defined only by the appended claims. Each of the embodiments described herein are contemplated as falling within the inventive subject matter, which is set forth in the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWING(S)","p":["Embodiments are illustrated in the Figures of the accompanying drawings in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2","b":"200"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3","b":"300"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5","b":"500"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7","b":"700"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8","b":"800"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9","b":"900"}]},"DETDESC":[{},{}]}
