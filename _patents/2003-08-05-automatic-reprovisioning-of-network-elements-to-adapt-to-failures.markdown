---
title: Automatic re-provisioning of network elements to adapt to failures
abstract: A method of automatically re-provisioning a network element in adaptation to a failure comprises the computer-implemented steps of identifying a network element that has failed; selecting a substitute network element from among a pool of one or more available network elements; receiving connection configuration information from the identified network element; and, based on the connection configuration information, re-configuring the substitute network element and one or more switch devices associated with the identified network element, wherein the re-configuring causes the one or more switch devices to change one or more connections from the identified network element to the substitute network element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07469279&OS=07469279&RS=07469279
owner: Cisco Technology, Inc.
number: 07469279
owner_city: San Jose
owner_country: US
publication_date: 20030805
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","1.0 General Overview","2.0 Structural and Functional Overview","3.0 Detailed Example Embodiment","4.0 Implementation Mechanisms","Hardware Overview","5.0 Extensions and Alternatives"],"p":["The present invention generally relates to network management. The invention relates more specifically to automatic re-provisioning of network elements to adapt to failures.","The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","For network management purposes, a network element cluster may be defined as a first network switch, a plurality of network elements, some of which are actively processing or routing data and others of which are held in a backup pool for use in the event of a failure, and a second network switch. If one of the active network elements experiences a transient or permanent failure, proper operation of the network requires taking the failed network element offline and substituting one of the backup network elements. Because the first and second network switches have numerous logical connections established with the failed network element, such substitution also requires re-configuration of both the first and second network switches so that the connections reference the substituted backup network element.","At present, the process of substitution and re-configuration is manual and requires an unacceptably long amount of time, ranging from hours to days. There is no automated method for performing the substitution and re-configuration, which are collectively termed \u201cre-provisioning\u201d herein. Industry service providers have a great need for improved methods and system that can solve this problem.","In one specific industry context, Cisco 7400 ASR from Cisco Systems, Inc. offers enterprise and service provider customers a cost-effective, single-platform solution with the high performance, density, availability, and scalability to be deployed across the network from enterprise to POP environments. By leveraging the multifunction capabilities of the Cisco 7400 ASR, a customer can simplify its network architecture, significantly reducing costs and increasing revenue opportunities through value-added services.","In particular, as the business of a service provider grows, a group of 7400 devices may be clustered into a single logical resource for administrative and management simplicity. The cluster typically is logically interposed between two switch devices that are associated with different networks, such as a metro ATM switch and an Ethernet switch. Commercial examples of ATM switches include the LS1010, Catalyst 8510, and Catalyst 8540 from Cisco Systems. Commercial examples of Ethernet switches include the 2948G and 3500XL from Cisco Systems. The ability to provision and manage a cluster of device is critical to the success of a customer and hence the success of the 7400 platform.","However, at this time, there is no single solution to manage this particular cluster of devices. Service provider customers, in particular, desire to have service and subscriber-provisioning tools that provide a full solution, including re-provisioning of clusters in response to failure of a network element in a cluster.","One of the chief concerns during cluster management is the case where one of the devices in the cluster fails. It is a costly solution if human intervention is required to move all the connections from the failed node to a back-up node. Customers need a higher availability solution that will automate fail-over when a node in a cluster fails, and that has a minimal impact on service. Hence, in case of a failure of a node, all connections on that node must be switched to an alternate with minimal effect or no effect on service.","Various failover techniques are known for use with replicated servers in a server farm and in redundant processor scenarios. For example, Cisco Systems has technology known as stateful switchover (SSO) and non-stop forwarding (NSF); however, both are intra-device solutions that can be applied only at the switch level and cannot provide a solution for a cluster or stack of network elements. Currently no approach provides for automatically implementing changes on both an ATM switch and a Router with one tool.","Other solutions include redundant processor cards, but none of them can deal with redundancy across different platforms. For example, the IBM HACMP system and the Tandem NonStop system require total \u201cshadowing\u201d of software, data and hardware resource in the system. The NonStop computing architecture is based on hot-standby replication of cluster nodes combined with transaction processing enforced at the OS level. Rings of cluster nodes regularly ping each other. If a node suspects another failed node, it becomes the \u2018leader\u2019 and broadcasts a regrouping message. This is a very expensive and complicated approach that does not address the specific problems outlined above. Thus, prior techniques have not been applied to clustered network devices in a way that addresses the foregoing problems.","Automatic re-provisioning of network elements in adaptation to failure is described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Embodiments are described herein according to the following outline:\n\n","The needs identified in the foregoing Background, and other needs and objects that will become apparent for the following description, are achieved in the present invention, which comprises, in one aspect, a method for automatically re-provisioning a network element in adaptation to a failure comprises the computer-implemented steps of identifying a network element that has failed; selecting a substitute network element from among a pool of one or more available network elements; receiving connection configuration information from the identified network element; and, based on the connection configuration information, re-configuring the substitute network element and one or more switch devices associated with the identified network element, wherein the re-configuring causes the one or more switch devices to change one or more connections from the identified network element to the substitute network element.","According to one feature of this aspect, the identified network element is one of a plurality of network elements in a cluster that is associated with first and second network switches. According to another feature, the steps are performed by a cluster manager that is communicatively coupled to a cluster comprising a plurality of active network elements, the pool of one or more available network elements, a first network switch, and a second network switch. In yet another feature, the step of re-configuring comprises the steps of sending a trigger event to the substitute network element that causes the substitute network element to retrieve a configuration over a network connection.","Alternatively, a configuration is sent directly to a device; however, this alternative increases bandwidth and may affect responsiveness of a device.","In still another feature, re-configuring comprises dynamically reconfiguring the selected network element as a logical clone of the identified network element. According to still another feature, the method further comprises the step of associating the identified network element with the pool of available network elements. In yet another feature, the method further comprises sending an initial configuration to the substitute network element; sending a partial accumulated configuration to the substitute network element; and sending instructions that cause the identified network element to adopt a configuration setting of a cluster associated with the identified network element. In certain embodiments, the configuration setting is adopted by instructing the device to reboot; in other embodiments, rebooting is not required.","In another feature, the method further comprises receiving first user input in a graphical user interface that associates the network elements in a cluster with a first switch and a second switch; receiving second user input that specifies which network elements are reserved in the pool of available network elements. In one feature, each of the network elements is a network aggregation device or a network access server. In still another feature, the steps are repeated for multiple concurrently failed network elements.","In yet another feature, the method further comprises receiving a message specifying a failure of a network element over an event bus on which the network elements publish events and on which a cluster manager subscribes to events; based on the message, identifying the network element that has failed. In still another feature, the network switches comprise an asynchronous transfer mode (ATM) switch and an Ethernet switch, and the network elements are routers in a packet-switched network. In other embodiments, any other types of switches can be used in a cluster, and there may be no switches in a cluster.","In other aspects, the invention encompasses a computer apparatus and a computer-readable medium configured to carry out the foregoing steps.","An automated solution for managing the process of fail-over is provided. In one embodiment of the solution herein, a cluster manager provides a user interface (UI) and an application programming interface (API) for administrators to create, edit and remove programmatic cluster objects. Each cluster object represents a physical cluster consisting of a first switch, a plurality of network devices (\u201cnodes\u201d), and a second switch. Alternatively, a cluster may comprise more than one first switches, and more than one second switches, as described further in the section entitled","\u201cExtensions and Alternatives.\u201d For each cluster object, the user may specify which devices are reserved as an available pool of backup devices. The pool can be any size, resulting in 1 to N redundancy where N is the size of the pool.","Although certain embodiments herein are shown as implemented using a graphical user interface, most of the functions of the GUI as they relate to a human administrator could also be performed programmatically by a management system interacting with cluster manager  through an appropriate API. An example API is provided in the Appendix.",{"@attributes":{"id":"p-0053","num":"0063"},"figref":"FIG. 1A","b":["100","102","104","106","108","104","106","104","108","106","108","102"]},"Cluster  is managed by a cluster manager , which comprises one or more software elements, hardware elements, or a combination thereof, executed by a network management station or other server device. In one embodiment, cluster manager  comprises Cisco Intelligent Engine . Cluster manager  may communicate directly with cluster  or indirectly. In one embodiment, cluster manager  is communicatively coupled to cluster  by a software event bus . Commercially available examples of event bus  include the products from TIBCO. Cluster manager  may manage any number of clusters .","As used herein, the term \u201cconnection\u201d means an end-to-end application logical connection that is supported by a cluster, which in this context emphasizes the set of CLI configurations of the network elements of the cluster that implement that connection. This usage is distinct from the physical connections among cluster elements and switches to the stack of devices; such physical connections are termed \u201cinterfaces\u201d herein. In the context of the cluster manager , a connection is a collection of CLI commands. In one embodiment, a connection comprises a programmatic object that points to a fixed defined set of templates intended to be applied to a stack device and adjacent switches. The connection object also contains attributes providing specific substitution values to be used when instantiating the templates into actual configurations.","In an example embodiment, each connection object contains CLI commands and values for a specific ATM connection that is used to support a single end-to-end user. In this embodiment, each time a network administrator needs to support a new user, the cluster manger  is used to create a new connection object to contain CLI commands that correspond to the new user connection. Thus, in a practical embodiment, cluster manager  could manage thousands of connection objects corresponding to the number of subscribers in the network.","Although an ATM connection has been given as an example, any CLI could be in the templates; thus, the CLI itself is opaque to the cluster manager . The cluster manager  provisions the CLI according to certain rules, meaning that templates and attribute values are used to build switch configurations while others are used to build stack device configurations. When failover occurs, the cluster manager  logically re-associates all the connection objects of the failed device with the new device selected from the pool. The cluster manager  then reconstructs and accumulates or concatenates the CLI that is generated from all the connection objects, and provisions that CLI to the newly selected device from the pool.","Thus, the cluster manager  is not aware of specific CLI commands; a connection object is a container for some generic configuration. The network administrator uses the connection definitions as a way of defining and applying incremental configurations. Whenever a failover occurs, all the accumulated incremental configurations (connections) are applied the newly allocated router from the backup pool.",{"@attributes":{"id":"p-0059","num":"0069"},"figref":"FIG. 2","b":["202","204","208","206","204","208","206","206","204","204","206","208","208","206"]},"In either embodiment of  or , when a failure occurs with respect to one of the network devices, the cluster manager performs the following processing. The cluster manager receives an event and identifies which node has failed. In one embodiment, two methods of detection of failure are used. In a first approach, one of the adjacent switches sends an event on the bus indicating that an interface on the switch is no longer active. The cluster manager can correlate which interface on the switch is connected to which specific stack element, and then infer that it has failed. In a second approach, the cluster manager is configured to use a keepalive or heartbeat protocol against all the stack elements. When a stack element fails to respond, then the cluster manager infers that that element has failed. The cluster manager searches for a device in the free pool that is available for use as a fail-over device. Because more than one device may be designated as a back-up device, the cluster manager selects the first free device in the backup pool. The cluster manager switches all configuration (CLI) corresponding to the application connections that the failed device handled to the available back-up device. To do so, the cluster manager acquires an understanding of all connection configuration information from the failed device and applies it to the chosen back-up device. The cluster manager also changes the configuration of the switches so that all connections that were switched to the failed device are now switched to the chosen back-up device.","In one embodiment, the configuration is delivered by using a pull model. For example, the cluster manager sends a trigger event to a device, and in response the device retrieves configuration information using an HTTP connection to a provisioning server, which may be the cluster manager. Alternatively, the configuration is sent directly to the device. However, if this alternative involves sending too much data on the event bus, such as from many configuration files, excess bandwidth may be consumed, which would adversely affect responsiveness failure events that are published on the same event bus. Therefore, as an optimization, sending a short trigger message is considered preferable.","In one approach, an initial configuration is sent to the backup device, a partial configuration (or an accumulated configuration comprising an accumulation of all the connections previously applied) is sent to the backup device, and the failed device is rebooted based on the configuration setting of the current cluster. This places the failed device in the free pool.","The user defines a set of configuration template files that are used to determine the configuration in the foregoing cluster failover process.","All devices on the cluster have commands in their startup configuration that inform the devices how to connect to the cluster manager. Upon startup, such devices automatically connect to and register with the cluster manager.","Specifically, in one embodiment, all devices that are in use or within the free pool have a minimal configuration (bootstrap configuration) that is persistently stored in non-volatile memory. This minimal configuration provides minimum information sufficient for the router to communicate with a cluster manager or provisioning server over an event bus. When a router is moved from the free pool to in-use, an Initial Configuration is provisioned. The Initial Configuration contains a one-time configuration that is a base on which subsequent incremental configurations (connections) are built. Once the initial configuration is provisioned, then all of the accumulated incremental configurations are provisioned. The initial configuration and connections are not stored persistently. If a device reboots, then it restarts using the minimal configuration.","As a result, when an element of the cluster fails, the cluster manager re-configures other elements in the cluster such that the failed element is logically cloned. Further, other peer elements of the failed element in the cluster are dynamically reconfigured in real time. Still further, the switches associated with the cluster are dynamically reconfigured in real time.","As a result, the solution herein provides automated detection of a failed network device, such as a router, switch, access server or aggregation device. Both software and hardware failures are detected through appropriate event bus messages. The solution provides automated logical allocation of a substitute device from backup pool, and automated transfer of configuration from the failed device to the backup device. The solution provides automated re-configuration of the adjacent switch-pair to recognize the backup device, and automated de-configuration of the adjacent switch-pair to isolate failed device. The solution also provides support for multiple concurrent device failure within a cluster.","The disclosed approach overcomes several issues found in the prior art. For example, the presence of multiple points of failure has been a long-standing disadvantage of network device clusters, which otherwise provides desirable business growth benefits. The approach herein provides new value for existing cluster solutions. Further, 1 to N redundancy is provided, where N can be whatever size the administrator chooses. N is the size of the pool of backup devices, which can be enlarged or shrunk according to a tradeoff of risk management and cost selected by the administrator. The solution provides an increased level of availability than can be achieved otherwise in a cluster configuration.","Further, in response to failure of one cluster element, a new element is automatically brought up, and all other elements in the cluster and its associated switches are automatically re-configured to account for the new element. No other known failover techniques offer automatic re-configuration of associated devices and related devices in this area. In prior approaches, such reconfiguration is a manual process taking hours, whereas an implementation of the approach herein on a server-class processor can provide re-provisioning in from a few seconds to up to a few minutes. For example, experimentation has shown that with the approaches herein, times to failover 4000 ATM connections range from three minutes to eight minutes depending on the broadband configuration of the devices in the cluster. Of this time, it has been found to take less than one second for the cluster manager to detect a problem and fully reconfigure all the equipment; the rest of the time is limited by the rate at which the network device operating system can respond to its reconfiguration and bring up the ATM connections.","In one embodiment, the approach herein may be combined with other redundancy and failover approaches. For example, during its administration, the Cluster Manager can be directed to use an external repository, such as an LDAP directory and file system, for its primary data and template storage. Third-party cluster management solutions are available for these externally managed directories and file systems. Further, devices in a cluster can be configured with appropriate commands such that if they become disconnected from the Cluster Manager, they automatically reconnect to an alternate cluster manager that is specified in the commands. For Cisco devices, the \u201ccns\u201d Command Line Interface (CLI) commands provide this capability.","In still another variation, two instances of the Cluster Manager can be deployed, thereby providing hot-standby redundancy of the Cluster Manager itself. Both Cluster Mangers may be configured through administration commands to point to the same repository and file system. If one Cluster Manager fails, the corresponding disconnection with the cluster devices triggers all the devices to reconnect to the alternate Cluster Manager.","A detailed description of an example embodiment is now presented. Alternative embodiments may have different structure or function. In this description, the following terms have the following definitions:\n\n","In this embodiment, within a stack of devices, a user can define how many devices are preserved as backup in case of device failure. Once a device failure occurs, the process described herein detects the failure automatically, and initiates a device failover process. Thus, a system and process as described herein provide two major functional processes: Stack activation and failover processing.","3.1 Cluster Manager Operations","In one embodiment, stack activation and failover processing are provided by cluster manager . The cluster manager communicates with one or more clusters  using events that are sent and received, or published and subscribed to, on event bus . In the description below, events denoted SPEC_EVT_IN_xx indicate events that the cluster manager  received, and events denoted SPEC_EVT_OUT_xx indicate events that the cluster manager  published. Cluster manager  may provide a user interface in the form of HTML documents or pages. To interact with cluster manager , a user connects a conventional browser, such as Internet Explorer or Netscape Communicator, to the cluster manager and accesses a specified home page. The home page provides commands, keywords or function indications. Selecting the commands, keywords or function indications causes the cluster manager to perform the selected functions, or display other user interface pages, as further described below.","To activate a stack, the cluster manager uses events to cause the stack to initiate operation. In one embodiment, a user of cluster manager  selects an \u201cActivate\u201d button in an \u201cEdit Stack\u201d UI page. In response, the cluster manager performs the stack activation steps described below. The stack activation process described below is based on the following assumptions. In other embodiments, one or more of the assumptions may be relaxed.\n\n","Based on the preceding assumptions, cluster activation may involve the following steps performed by the following actor elements.\n\n","In one embodiment, automatically detecting failure of a device within a stack can occur in one of three possible ways as described below.","In a first failure detection approach, when the device fails, it causes a loss of the corresponding Layer 1 and\/or Layer 2 connection to an adjacent switch which is part of that cluster. The adjacent switch upon detecting loss of Layer 1 or Layer 2 connection publishes a SPEC_EVT_IN.log event onto the bus including in its payload \u2018interface protocol down\u2019 along with the associated switch interface name\/number. This indicates that the physical and link level protocols are inactive corresponding to the physically attached failing device in the stack. One such log message is published onto the bus to the cluster manager corresponding to each failing stack device attached to the switch. (see Assumption a) and Assumption e)). Upon detection or receipt by the Cluster Manager of the SPEC_EVT_IN.log event onto the bus including in its payload \u2018interface protocol down\u2019 the cluster manager can reference the included parameter of switch interface name\/number and correlates that to a specific stack device and thus infer which stack device has failed.","In a second failure detection approach, the cluster manager publishes a keepalive event on the bus, one such event individually targeted and corresponding to each switch and stack device in the cluster. Upon not receiving the required keepalive response from a given stack device, the cluster manager infers that the device has failed.","In a third failure detection approach, a stack device, upon encountering an certain internal software failures, generates crash dumps to its file system. This functionality is outside the scope of this disclosure, however as part of an embodiment, the crash dump function may be enhanced to also generate a SPEC_EVT_IN.device_fail event carrying a unique MAC address of the dialing device as a parameter. Depending on the nature and timing of the software failure within the stack device, this event may or may not be successfully published on the event bus. Upon detection\/receipt of the SPEC_EVT_IN.device_fail event, the cluster manager infers that the device is failed.","In one specific embodiment, a process for automatically re-provisioning network elements to adapt to failures consists of the following steps:\n\n",{"@attributes":{"id":"p-0083","num":"0129"},"figref":["FIG. 1B","FIG. 1C","FIG. 1B","FIGS. 1B-1C","FIG. 1B"],"b":["110","110"]},"In block , a failed device is identified, and the state of that device as internally managed by cluster manager  is marked as \u201ccrashed\u201d or the equivalent.","In block , a search is performed to identify and select an available backup device within a backup pool of devices.","In block , one or more events are emitted to cause the switches associated with the selected backup device to un-configure the device. In one embodiment, cluster manager  emits a config.load event to cause the switches to un-configure the device.","In block , all switch connections associated with the failed device are moved to the selected backup device.","In block , an attempt is made to reboot the failed device so that it can be placed in the pool of available backup devices. In one embodiment, a config.reboot event is sent to the failed device. The use of a reboot event may not be appropriate for all devices. Thus, block  may involve determining whether a reboot event should be sent. For some devices, manual intervention may be required to correct a fault, and sending a reboot event may not be appropriate.","In block , the backup device is instructed to start an activation process. In one embodiment, cluster manager  sends a startpoint event to the device. In block , the backup device is instructed to load an initial configuration. In one embodiment, block  involves sending a config.load event that causes the backup device to request or \u201cpull\u201d its initial configuration from the configuration manager . In block , the process receives a message indicating that the configuration is complete. In one embodiment, the backup device processes the initial configuration and sends a \u201cconfig.complete\u201d event to the cluster manager .","Referring now to , in block , the switch devices associated with the cluster are instructed to load configuration information for the backup device. In one embodiment, in block  the cluster manager  sends a config.load event to the switch devices and instructs them to load specified configuration templates. The templates are expected to be pre-configured in the system by an administrator and made accessible to the switch devices.","In block , the cluster manager sends additional configuration information to the switch devices. For example, where one or more of the switches of a cluster are ATM switches, the cluster manager  sends accumulated PVC configuration information to the switches and to the backup device. In one embodiment, cluster manager sends a config.load event to the switches to cause them to load the configuration information. Other configuration also may be provided as part of block  as appropriate for particular types of devices.","In block , a message is received indicating successful completion of configuration of the switches. For example, cluster manager  receives a config.complete event from the switch devices, and changes status values associated with the devices to \u201cfully configured,\u201d or the equivalent. At this point, the selected backup device becomes an active device; the backup device can become an active device only upon successful completion of re-configuration of the switches of the stack in the cluster.","In block , a message indicating successful reboot of the failed device is received. For example, cluster manager  receives a config.boot message from the failed device. In response, the cluster manager marks the state of the failed device to \u201cboot configuration,\u201d or the equivalent, and makes the rebooted failed device available as a backup device.","3.2 User Interface Example",{"@attributes":{"id":"p-0095","num":"0141"},"figref":["FIG. 4","FIG. 28"],"b":"110"},"Automatic fail-over detection and connection switching functions are provided. In one embodiment, cluster manager  allows an administrator to specify how many devices in a stack are designated as back-up devices. In the case of failure of a node, the cluster manager detects the failure and prepares for fail-over. One of the designated back-up devices is chosen and all connections from the failed device are switched to the selected back-up device. Further, an administrator is able to specify the number of nodes to be reserved as standby devices for a cluster. An administrator may de-activate an entire cluster at any time. All connections to that cluster will then experience downtime.","Cluster management data manipulation is provided by functions of cluster manager  that allow a user to create, edit and remove a stack object representing a cluster stack. All information regarding a stack object is stored under a stack name. All data is stored securely and is available across reboots of any or all of the nodes in the cluster. In one embodiment, each stack object consists of the following components: Switch; Switch; Devices; and Connections.",{"@attributes":{"id":"p-0098","num":"0144"},"figref":["FIG. 3","FIG. 4","FIG. 4","FIG. 4-FIG"],"b":["400","402","404","404","406","408","406","404","408","28"]},"As shown in , a Create Stack function is provided that is accessible by selecting Create Stack option  of . The user can create a logical stack by specifying the necessary objects in each stack. All the required information may be stored in the directory prior to activating a stack.","The \u201cCreate Stack\u201d is implemented on the assumption that all the information regarding all the components of a stack may not be available during stack creation time. The administrator may enter information regarding as many of the components as is available and store the information under a stack name. A stack may be activated during creation time, or later during editing. However, a stack that does not have a minimum amount of information regarding its components is not activated. If the user attempts to activate such a stack, the stack fails a validation step. In one embodiment, the minimum amount of information required for a stack to pass validation is a definition of Switch, a definition of Switch, and a definition of at least two network devices.","More than one device may be added to the stack at the same time. All devices in a stack are assumed to use the same templates for configuring and unconfiguring Switch and Switch; alternatively, different templates may be used.","Each device which is added to a stack may have up to 4 private attributes. New devices may be added to an active stack without impacting service. Connections to a cluster may be provisioned in using a Round Robin approach in which all connections are equally distributed among the available devices, or a Fill Up approach in which each device is filled with connections up to its maximum capacity before connections are placed on other devices.","An Edit Stack option  is provided that enables a user to add to the active stack without impacting service. All components of a stack may be edited using this option. All devices that are specified as the network devices forming the stack of devices should already be present because they are referenced to form the stack. The association of devices to a stack may be changed using the Edit Stack function. In one embodiment, once a stack is activated, it is not possible to edit Switch and Switch selections, because if a user can edit these values the result may interrupt connectivity.","A Remove Stack option  is provided to delete a logical stack object. Objects representing devices that constituted the stack are not deleted, but they are no longer logically grouped together.","A Console Access option  provides the user the option to have console access to a particular device within a stack or to send the same event to all the devices on a stack. In one approach, both a Cluster Console and a Device Console are provided. The Cluster Console may be viewed as a window into the operations of cluster. By using a Cluster Console, a user can send configuration commands to all devices that are part of a cluster. With a separate Device Console, integrated into the functions of cluster manager , a user can attach to the console of any device that is part of the cluster and perform any device specific features. To support such console access, an administrator specifies telnet information for each device during stack creation time for each device.","The Cluster Console provides ease of maintenance and efficient monitoring because it is not practical to assume that administrators can maintain a separate console for each node of a cluster. In one embodiment, a cluster can grow to up to eighty (80) devices; this would require maintaining 80 Consoles. It would impractical to monitor the node in the cluster from different consoles.","An Operational Status option  is provided that may be used to view operational status of all the logical stacks created with the cluster manager. If a failure is detected in a cluster, then a warning is displayed in the status for that cluster.","In an embodiment, application window  displays a user identifier  (userID) of the then-current administrator user at all times. The user is also provided with a view of the current system time and date .","3.2.1 Create Stack Operation",{"@attributes":{"id":"p-0110","num":"0156"},"figref":["FIG. 5","FIG. 4"],"b":["110","404","408","414"]},"In response, screen display  of  is presented and prompts the administrator to enter the name of the stack to be created in Stack Name field . The user is also required to enter information specifying key attributes of a stack, including a method of connection provisioning using radio buttons , and a number of devices to reserve as backup using field .","Selecting a checkbox  indicates that the system should reboot all failed devices and to return them to the back-up pool. In an embodiment, checkbox  is checked by default so that, by default, every failed device will be rebooted and returned to the back-up pool. Unchecking the box enables the administrator of the stack to leave the failed device outside the stack for manual intervention.","When all the values are entered, the user may create a logical stack by selecting \u2018Ok\u2019 button . In response, a stack object with the given name is created.","Further, in response, a graphical overview of the cluster fail over solution is displayed.  is a screen display diagram showing a user interface page providing a stack display. A stack display page  comprises a stack object image map  and a checklist . Each stack object image map  includes a first switch object , a second switch object , two or more network devices , and two or more connections A, B.","To enter data for any component of a stack object, the user can select the appropriate object in the image map . For example, to enter data regarding Switch, the administrator selects the first switch  in the image map .","Checklist  provides information regarding the components of the stack for which values are already defined, and components not yet defined. The current value of the defined components is also reflected. The checklist  comprises a plurality of line entries corresponding to objects in a cluster. Each line entry comprises a checkbox  and a name . When all information has been properly specified for a cluster object, the corresponding checkbox is displayed with a check mark, and a summary of pertinent information is displayed in the name field. For example, in  only the Stack Name A is complete, as indicated by check mark A. The switches, devices, and connections are not yet specified, so corresponding checklist entries are not completed.","For purposes of illustrating an example, assume that a user selects the first switch  in the image map . In response, a switch selection page is displayed.  is a screen display diagram providing an example of a switch selection page. A switch selection page  includes a list  of one or more icons A, N representing switch devices that have been previously created in the configuration system. Selecting one of the icons A, N associates information relating to the selected switch with the first switch of the then-current cluster. In an embodiment, an icon A-N is selected by double-clicking on it using a mouse. The second switch  () may be selected in a similar manner.","In response to each selection, stack display page  is re-displayed showing the newly selected information. For example, assume that a user selects device \u201cDemoRouter\u201d B as the first switch  in the image map  and selects device \u201cc7200-1\u201d C as the second switch .  is a screen display showing a stack display page with additional information. In contract to , in  the checklist  includes completed entries for Switch and Switch, as indicated by check marks B, C and switch names B, C indicating \u201cDemoRouter\u201d and \u201cc7200-1.\u201d","Thus, the user is presented with a checklist  of objects that need to be specified before the stack information is complete. Once all the components have been defined, the user may select an \u201cActivate\u201d button  to activate the current stack. In response to a selection of the \u201cActivate\u201d button , cluster manager  performs a data validation process to ensure that all required information has been entered.",{"@attributes":{"id":"p-0120","num":"0166"},"figref":["FIG. 9","FIG. 6","FIG. 8"],"b":["902","612","604","902","904","904","904","904","904","904","904","904"]},"Selecting a Reset button  clears all checkbox selections. All the devices that are logically grouped under the current stack name can be added at once. When all devices are selected, the user may select a Next button , which instructs the system to accept the selected devices. In response, the user is prompted to enter further information regarding the selected devices.",{"@attributes":{"id":"p-0122","num":"0168"},"figref":"FIG. 10","b":["1000","1002","1012","1012","1002","1004","1006","1008","1010"]},"Thus, in this embodiment, templates to configure and unconfigure Switch and Switch are common for all devices in a stack. In another embodiment, the user can specify separate templates for configuring or un-configuring Switch and Switch for each device in a stack.","Device-specific values are provided in device data areas A, B. There may be any number of device data areas, corresponding to the number of devices in the stack. In one embodiment, each device added to the stack is provided with values specifying an Interface Name and one or more options for each of the first switch and the second switch. Thus, in device data area A, for device \u201cDemoRouter,\u201d for Switch, an interface name is provided in field A and one or more option values are provided in fields A. Similar data is provided for Switch in interface name field B and option fields B.","Telnet information for the device, such as a device IP address, is provided in a telnet field . The telnet information enables the system to connect to the device console. A maximum number of connections allowed for the device is provided in field . Each device can support a fixed number of connections, which is an inherent characteristic of the device that is used; using a value in field , the user can specify the maximum number of connections that are allowed. In an embodiment, allowed values are 0 to 4000.","Selecting an \u201cOk\u201d button confirms the user's input. In response, stack display page  () is re-displayed, showing the newly entered information.  is a screen display diagram illustrating an updated checklist after device information has been entered for a stack of device. Checklist  includes a further check mark D indicating that device information has been provided, and device information summary D indicating that five (5) devices are defined in the stack. To change any data values, the user may select on the appropriate object in image map .","In one embodiment, all stack component values are stored in memory until the user selects a Save button  () to instruct the system to persistently save the information. Although checklist  reflects the number of network devices present in the stack, the entire list of devices is not provided. When connections are added to a stack, the total number of connections of the stack is reflected in checklist .","Selecting the Exit button  causes the system to prompt the user to save changes. In response, the user may choose to discard the changes and exit. If the user chooses to save the changes, then in response the system saves all changes that have been made since the last save operation, and the user is returned to the main cluster fail over overview page as shown in .","Referring again to , a user may add information about connections between switches and stack devices of a cluster by selecting connection A or connection B in image map . In response, a screen display for providing connection information is displayed.  is a screen display showing an example of a connection information page. In this example, connection information page  comprises a connection number field for entering a unique numeric identifier for a connection. For the given connection, the user also may enter one or more text attribute values in attribute fields , , , .","Radio buttons  accept a selection indicating a method of connection provisioning. A selection of \u201cImmediate\u201d indicates that each connection will be immediately provisioned. A selection of \u201cUpon PVC activation\u201d indicates that all connections will be provisioned after PVC activation. Template file names for configuring and un-configuring network devices in the stack, and for configuring and un-configuring switches, are displayed in file name fields , , , , , , respectively.","After entering desired values and selecting \u2018Ok\u2019 button , the system re-displays the fail over graphical overview map as shown in page  of . The user may add more connections either by selecting an Add button  in page  of , or by selecting an Add Another button  in connection information page  of . If the Add Another button  is selected, then current connection information shown in page  is saved as a new connection, and the page is reset with blank data fields so that the user may enter information regarding a new connection.","In response to entering one or more connections, page  is re-displayed showing a summary of the connection information.  is a block diagram of a screen display showing an updated cluster information checklist. Checklist  is updated with a further check mark E indicating that connection information is entered and updated with connection summary information E. However, the logical stack represented in image map  is not active at this point. Selecting the Activate button  causes the system to validate the values shown in  and to activate the stack. For example, selecting the Activate button  causes cluster manager  to activate the fail over mechanism described herein for the then-current stack.","3.2.2 Edit Stack Operation","Each cluster stack that is created using Create Stack option  of  is stored under a name locally. Thereafter, the user can edit any component of a stack. Referring again to , the stack can be activated immediately after creation from within the Create Stack option , or the stack can be activated from within the Edit Stack option .","When Edit Stack option  is selected, in response, cluster manager  displays a page that prompts the user to select a stack to edit.  is a screen display diagram showing a stack selection page. In the example of , stack selection page  comprises a list  of one or more stack icons A, N. Each of the stack icons includes a name label  indicating the name under which the stack is saved. A user may select a stack for editing by selecting the corresponding icon A, N. There may be any number of defined stacks and icons displayed in page .","If the user selects an icon A, N for a stack that is currently inactive, then cluster manager  displays a page containing a warning message and prompting the user to first activate the selected stack.  is a screen display diagram showing a stack warning page. In the example of , stack warning page  comprises a warning message  and an Activate button . The user may activate a stack by selecting the Activate button .","If the selected stack is currently active, the user may re-initialize the stack by selecting a \u201cRe-initialize\u201d button . In response, cluster manager  issues reboot instructions to all actual devices in the stack, which generally will return the devices to an original state based on a minimal configuration. Re-initialization of devices may be required if a stack is physically moved to a new location.","All information regarding the stack is still stored safely in the RM box. The user simply needs to activate the stack again to have full functionality.","Referring again to , to edit other components of a stack, a user may select an object for editing from image map . Checklist  continues to reflect components that have been defined. Thus, checklist  enables the user to estimate of the components that remain to be defined.","Selecting switch , designated Switch herein, enables the user to edit values relating to the Switch object. In response, a switch selection page is displayed.  is a screen display diagram providing an example switch selection page. In the example of , switch selection page  comprises a list  of one or more switch icons A, B, N. A switch icon corresponding to a device that is currently selected as Switch is indicated with a color that is different from all other switch icons. In the example of , icon B represents a switch device that is currently associated as Switch of the then-current cluster.","The user may select any other device to perform the function of Switch by selecting a corresponding switch icon A-N. In one embodiment, if a cluster stack is currently active, the user cannot edit values associated with Switch or Switch. Upon selecting a switch icon A-N for a device to perform the function of Switch, cluster manager  re-displays the cluster fail over graphical image map  as in  so that the user can select another object to edit.","New connections may be added to a stack by selecting on connections A, B. Alternately, new connections may be added by selecting on an Add button  in checklist . To edit an existing connection, the user may select an Edit button  in the checklist .","3.2.3 Console Access Operation","Referring again to , console access to the devices in a stack is provided by selecting Console Access option . The Console Access option  also enables the user to send a common event to all the devices that are grouped under one stack.","In response to selection of Console Access option , cluster manager  displays a console access overview page.  is a screen display diagram providing an example console access overview page. In the example of , console access overview page  comprises a Device Console option  and a Stack Console option . The Device Console option  provides console access to a device. The Stack Console option  is used to send a common event to all the devices within a stack.","In response to a selection of the Device Console option , cluster manager  displays a device selection page that prompts the user to select a device to which console access is desired.  is an example screen display showing a device selection page. In the example of , device selection page  comprises a list  of one or more device icons A-N. Selecting an icon A-N signals that the user wishes to establish console access to a device associated with the icon.","In response to a user selection of one of the icons A-N, cluster manager  prompts the user to confirm the selection. If confirmation is affirmative, then cluster manager  retrieves the telnet information associated with the selected device and establishes a telnet console connection to the device. Further, cluster manager  displays a user interface page that contains a telnet console window.  is an example of a console display page  that includes a telnet device console window . In an embodiment, a name  of the selected device is also displayed in page . In this manner the user is placed in direct console communication with the selected device, and the user may enter any desired console command in window  for communication to the device and execution by the device.","Referring again to , selecting Stack Console option  provides the user with console access to a stack. Thus, the user may send a specified command concurrently to all devices in a stack. In response to a selection of Stack Console option  from the Console Access Overview page , cluster manager  displays a page that prompts the user to select a stack.  is a screen display diagram that shows an example stack selection page . In the example of , stack selection page stack selection page  comprises a list  of one or more stack icons A, N. Each of the stack icons includes a name label  indicating the name under which the stack is saved. A user may select a stack for editing by selecting the corresponding icon A, N. There may be any number of defined stacks and icons displayed in page .","In response to selection of a stack, cluster manager  displays an event log page.  is a screen display diagram providing an example event log page. In the example of , event log page  comprises an event log  in table form comprising a time column , type column , event subject name column , and message column . Each row A, N of event log  is associated with an event previously emitted by cluster manager .","To send a common command to all the devices in a stack, a user enters the command in command field  and selects a Send button .","In response, cluster manager  sends the entered command to all devices in the stack.","In the example of , event log  is in a formatted view. The user may select a raw data view of the event log using view widget . In response to selecting a raw data view, cluster manager  displays a log page providing a raw data view of the event log.  is a screen display diagram showing an example event log page with a raw data view of an event log. In the example of , event log page  comprises a raw data view .","3.2.4 Operational Overview Option","Operational overview information reflects the underlying state of the device and connection objects with respect to the provisioning operations specified for cluster activation and cluster failover. Adding and deleting device and connections reuse the same functionality as cluster activation and failover.","Referring again to , Operational Overview option  enables a user to view all clusters and associated status information. In response to a selection of Operational Overview option , cluster manager  displays an operational overview information page.  is a screen display diagram providing an example of an operational overview information page. In the example of , an operational overview table  comprises one or more rows A, N corresponding to stacks of defined clusters. Each row comprises a cluster column , status column , failed device column , total connection column , available connection column , allocated connection column , contact column , and device column .","Cluster column  displays a name of a defined stack or cluster to uniquely identify one of the rows A-N. Status column , displays a graphic icon indicating the then-current operating the status of the associated stack. If any of the devices or connections in a stack fails, then the stack reports a warning status and an appropriate icon is displayed in status column .","Failed device column  identifies a number of failed devices in the stack. In one embodiment, if the status of a stack is \u201cwarning state,\u201d then the failed device column  displays the number of devices that have failed in an associated stack. Total connection column  displays a total connection capacity corresponding to a maximum number of connections that the stack may support. Available connection column  indicates the number of free connections that may be used. Allocated connection column  displays a number of connections that are active on the associated device. Contact column  displays the name of the primary contact person for administration of the associated stack.","Device column  provides a graphical link to view operational status information for devices in a stack. In response to selection of a device icon in column , such as device icon A, cluster manager displays a page that provides operational information about each device in the associated stack.  is a screen display diagram that shows operational overview information for devices in a stack.","In the example of , a device operational overview page  comprises a device operational overview table  comprising a plurality of rows A, N each corresponding to a device in the currently-selected stack or cluster. In one embodiment, each row comprises a device name column , status column , failed connections column , total connections column , available connections , allocated connections , and connections link column .","The device name column  provides a name that has been previously associated with a device in the stack, and provides a unique identifier for each row of the table . Status column  provides a graphical status indicator that informs the user about the status of the associated device. In one embodiment, a green light status indicator indicates that the device is in a normal operational state; a red light indicates that the device is broken, and possibly needs manual intervention; a gray light indicates that the stack is a backup device; and an in-progress icon indicates that a fail-over is in progress. In other embodiments, different graphical icons may be used.","Failed connections column  provides the user with an exact number of failed connections. In one embodiment, column  provides a value indicating the then-current number of failed connections for devices that are in normal operational status. If the associated device has no failed connections, then no value is displayed.","Total connections column  displays the maximum number of connections supported by the device. Available connections  column displays the available connection capacity for the device, indicating the number of additional connections that may be supported by the associated device. Allocated connections column  specifies the number of connections that are currently active on the device.","Connections link column  displays a graphical link that enables a user to view the operational status of all connections that are associated with the then-current device. Graphical links in column  is selectable only for devices that are in operational status. For any device that is broken or designated as a backup device, the graphical link is grayed out. Selecting the connection icon for any device causes cluster manager  to display a view of all connections to the device and their status.",{"@attributes":{"id":"p-0164","num":"0210"},"figref":"FIG. 25","b":["2500","2502","2502","2502","2504","2506","2508","2510","2512","2514"]},"The connection name column  shows a name that has been uniquely assigned to a connection. The attribute columns , , ,  display attributes that were previously entered for a connection. The status column  provides a status indicator for the associated connection. Graphical icons indicating status may be used.","In one embodiment, by default, connection table  shows only those connections that have failed. In another embodiment, the user optionally can cause cluster manager  to display all connections to the then-current device by selecting a view option from a view pull-down menu .","The user may also view the device configuration of the devices that perform the function of the switches, or the nodes that are part of the stack. In one embodiment, selecting on the stack name in the Operational Status overview page causes cluster manager  to generate a page that displays the device configuration of the devices that perform the function of the switches, or the nodes that are part of the stack.","Referring again to , in response to a selection of switch icons , , cluster manager  generates a page showing the then-current configuration of the real switch device that is associated with the icons , . As described above, selecting the text labels \u201cSwitch,\u201d \u201cSwitch\u201d causes cluster manager  to select a device for association with the cluster using the page of . In contrast,  is a screen display diagram of an example configuration page that cluster manager  generates in response to a selection of switch icons , . In an embodiment, the user may select on any object in the image map  of  to view the then-current configuration of the device.","Referring again to , configuration page  shows configuration commands  of the then-current device configuration. A console access button  provides the user with direct console access to the device. Thus, for example, when a device is in a broken state, an administrator may view the configuration for a broken device, and directly connect to the console to fix problems.","3.3 Implementation Mechanisms\u2014Logical Cluster","1. Logical Objects. Logical device objects are used by cluster manager  to represent real stack devices. Switch objects are used by cluster manager to represent the real switches and connection objects are implemented corresponding to each end-to-end connection which needs to be provisioned through the cluster.","2. Generation of end-to-end connection CLI\u2014the Connection Object","a) End-to-End application connections (e.g., ATM PVC) can be provisioned to the Cluster. The object corresponding to the end-to-end connection is initially associated to a stack device object according to the selections made using the radio buttons , which is defined globally per cluster. Subsequently connection objects can be logically re-associated from a failed device object to a newly allocated device object from the backup pool.","b) The end-to-end connection CLI targeting the switches is generated by instantiating templates  and , which can refer to six attributes. The attributes , , ,  are administrator defined and they are defined explicitly within the connection object itself. The fifth and sixth attributes are special attributes that are implicitly defined as the switch- interface name attached to the device that is home to the connection object and the similar interface name for switch-.","c) The end-to-end connection CLI targeting the stack device is generated by instantiating template  using attributes , , , .","d) CLI to UNprovision connections on the switches can be generated by instantiating templates  and  using the same set of six attributes as specified for b) above. UNprovisioning of a connection can occur as a result of a failure of the stack device associated with connection or due to an administrative deletion of the connection.","e) CLI to UNprovision connections on the stack devices can be generated by instantiating template  using attributes as in c) above. Connections are UNprovisionned from stack devices as part of an administration deletion only. Failure of the associated device does not require UNprovisioning of connections from the failed stack device.","3. Generation of CLI to enable\/disable physical and Link Level connections from switch to Stack device.","a) To generate CLI to enable the physical connection from a switch to a device, templates  or  are instantiated for switch or switch respectively. Associated with the instantiation of these templates are attributes A, A and B and B for switch and switch respectively. Attributes A and B contain the interface name on the switch which is physically connected to the stack device. Device enable CLI is generated as part of an adaptive reprovisioning when a stack device fails and a replacement stack device is logically selected from the backup pool or when activating the cluster or when adding a new device to a cluster.","b) To generate CLI to disable the physical connection from a switch a stack device, templates  or  are instantiated from switch and switch respectively. The same attributes as a) above are associated with the instantiation of these templates. Device (physical and link layer) disable CLI is generated as part of an adaptive reprovisioning when a stack device fails and it needs to be isolated from the network or when an administrative removal of the stack device occurs.","4. Console Implementation:","a) Device Console. Referring again to , the purpose of the device console is to provide individual device access and control from a single administrative point.","The stack devices may be behind a firewall. The cluster manager provides access across a firewall to the console of individual devices that would otherwise be blocked by the firewall. The cluster manager provides a connection to such devices in two aspects. A first aspect is between the adminsistrator's HTML display device, such as a PC or web browser and a servlet within the cluster manager which drives the display of . The second aspect is an actual telnet session from the cluster manager to the device console as specified in . It is emphasized that the telnet runs on the cluster manager and not on the administrator's PC. It is assumed that the cluster manager \u2018straddles\u2019 the firewall, with the telnet leg on one side of the firewall, and the HTML\/HTTP leg on the other side.","b) Stack console. Referring again to  and ,","a Cluster Console can present, to a network administrator, a single instance of a cluster console actually derived from the individual consoles of the constituent devices in the cluster. The Cluster console broadcasts configuration and execution commands (accepted on its cluster console interface to the administrator) to all the devices in the cluster. These broadcasts are in the form of events on the event bus using an XML payload. Within each device are agents that extract the commands wrapped in the XML and then present those commands to the device's native console. Each device's console output is re-directed and published on the event bus. The CNS cluster console listens on the event bus and collects the multiple responses and collates them into a single query response for presentation on the cluster console back to the original requestor\/administrator.","In one embodiment, the functions of the cluster console performs the following functions:","a) INITIALIZATION: The cluster console subscribes to a well known event bus subject corresponding to bus events from devices containing acknowledgment of configuration and redirected device console output of execution commands. Within each component device of a Cluster Manager there is are configuration and exec agents which can publish events on the bus containing console responses encoded in an XML format as well as config-success and\/or config fail messages. These same agents within each device also subscribe to a well known subject corresponding to config.load and exec events containing requests from the cluster console (originated from the administrator).","b) ACCEPT CONSOLE REQUEST\/INPUT FROM ADMINISTRATOR: The administrator is presented with an output panel and can key in input for the console. He has the option of selecting config-mode or exec mode. As well he can select between a formatted presentation with a web look and feel or a text presentation which provides a lower level device console presentation.","c) CONVERT REQUEST\/INPUT INTO EVENT-BUS BROADCAST: Convert cluster console input from administrator into an XML format and then publish\/broadcast the XML as an config.load or an exec event on the event bus.","d) DEVICE AGENT RECEIVES CONFIG\/EXEC EVENT: Each cluster component device which receives the published config\/exec event extracts the imbedded command and then presents it to its own native system as though it were being presented to its console. The results (console output or config success\/fail status) are encoded into XML and published on the event bus.","e) CLUSTER CONSOLE WAITS TO RECEIVE RESPONSES: The cluster console waits (a implementation defined maximum time) to receive the responses from each cluster component device. The responses are also encoded in a XML format by the device agents that are imbedded in each device. The device agent publishes the response using the event bus transport.","f) CLUSTER MANAGER AGGREGATES INDIVIDUAL RESPONSES INTO A SINGLE UI PRESENTATION: The output from each device is presented sequentially on the cluster console. Presentations are not interleaved but organized per device event name and time stamped accordingly.","g) TELNET OVERRIDE: A direct telnet window embedded in the main cluster console presentation is available for direct interaction between the administrator and the individual console of an specific device in the cluster.","Thus, a software mechanism and process provides an administrative user with a single virtual console that can access and send configuration to multiple devices of a cluster, or to all devices as a unitary whole. The event bus is the logical backplane for broadcasting commands to the devices in the cluster.","As a result, administration of large clusters is greatly simplified. Although the composite nature of the stack is not completely hidden from the administrator, the approaches herein provide a way to execute debug commands, show commands and many types of configuration commands on the cluster without having to individually configure or query each specific device. Further, the cluster console approach relieves the administrator from needing to keep track of the IP address of individual devices, which ones are active and which ones are the backup pool, which is dynamic depending on failover events.",{"@attributes":{"id":"p-0196","num":"0242"},"figref":"FIG. 27","b":["2700","2700","2702","2704","2702","2700","2706","2702","2704","2706","2704","2700","2708","2702","2704","2710","2702"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (\u201cCRT\u201d), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, trackball, stylus, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for automatic re-provisioning of network elements to adapt to failures. According to one embodiment of the invention, automatic re-provisioning of network elements to adapt to failures is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector can receive the data carried in the infrared signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (\u201cISDN\u201d) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (\u201cLAN\u201d) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (\u201cISP\u201d) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the invention, one such downloaded application provides for automatic re-provisioning of network elements to adapt to failures as described herein.","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","In an alternative embodiment, a cluster may include multiple redundant switches, for each switch-A and switch-B respectively. Thus, a cluster has a pool of switches corresponding to switch-A, and one of the pools is active. The same applies to switch-B. Within each pool of switches, each physical interface is electrically in parallel with all the corresponding the interfaces of all the other switches. Within a given pool, only the active switch has interfaces that are electrically active. All the other (non-active) switches in the pool are unconfigured with respect to any application connections and in an electrically shutdown state on all the interfaces. However, at least one interface on each switch provides connectivity to the cluster manager . There is sufficient configuration on even the non-active switches in the pool to support event bus communication to the cluster manager. When a failure occurs within one of the cluster network elements, the switch re-configuration is managed as the following set of steps:\n\n","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 1C","FIG. 1B"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 27"}]},"DETDESC":[{},{}]}
