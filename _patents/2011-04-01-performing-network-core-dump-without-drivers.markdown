---
title: Performing network core dump without drivers
abstract: Core dump is performed over a network without relying on network device drivers. Instead of network device drivers, firmware of network devices that is typically used during boot is preserved in memory post-boot, and one or more application program interfaces of the firmware are invoked to perform the network core dump. For ease of implementation, a network bootstrap program that has standard application program interfaces for calling into the firmware of network devices may be invoked when performing core dump over the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08677187&OS=08677187&RS=08677187
owner: VMware, Inc.
number: 08677187
owner_city: Palo Alto
owner_country: US
publication_date: 20110401
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Core dump refers to a process of saving the working memory state of a computer program, e.g., system software of a computing device such as an operating system (OS) of a conventional computing device or a hypervisor of a virtualized computing device, at a specific time, generally when the program has terminated abnormally, the abnormal termination commonly being referred to as a \u201ccrash.\u201d The working memory state of the computer program at the time of the crash is saved to a special partition on a storage device or, more generally, to any writable persistent storage device that is accessible at the time of the crash. When the computing device is stateless, i.e., no provision of a storage device, the core dump is performed over a network to a network dump server.","In order to perform a network core dump, the network device and the network stack that includes the network device driver must be functioning correctly. If the core dump is triggered by a failure in the network stack, the computing device will be unable to carry out the core dump over the network. In some cases, the network device may be locked up or have become wedged in a particular state, and cannot function properly unless it is reset and its driver reintialized. When that happens, the core dump over the network cannot be performed easily, because it is difficult to reinitialize the network device driver when it has already been loaded into memory. In view of the aforementioned issues, the conventional network core dump process has not been very reliable.","A variation of the above approach is to use a special mini-kernel. During boot, this mini-kernel is loaded into some reserved memory region. When a crash occurs, control is transferred to the mini-kernel, which then resets the network device, initializes the network stack, and performs the core dump over the network. A limitation of this variation is again its reliance on the network device driver. If the network device driver caused the crash, the core dump over the network cannot be carried out.","Another approach for performing network core dump is to save the working memory state of the computer program in a predetermined region of memory and perform the network core dump from the predetermined region of memory after rebooting the computing device. This technique, however, relies on the memory state of this predetermined region of memory persisting across reboots, and many of today's computing devices do not provide such a capability. The use of this technique is further limited by the fact that some computing devices employ hardware memory scrubbers that clean up memory on boot.","One or more embodiments of the present invention provide a technique to perform a core dump over a network without relying on network device drivers. Instead of network device drivers, firmware of network devices that is typically used during boot is preserved in memory post-boot, and one or more application program interfaces of the firmware are invoked to perform the network core dump. In one embodiment, a network bootstrap program that has standard application program interfaces for calling into the firmware of network devices is invoked.","A method of transferring diagnostic data for a computing device, such as core dump data, over a network using a network device, according to an embodiment of the present invention includes the steps of: prior to loading of system software for the computing device into memory, loading application programming interfaces (APIs) for the network device into a protected memory region, the contents of which are preserved after loading of the system software and after execution control of the computing device has been transferred to the system software; and after loading of the system software and after the execution control of the computing device has been transferred to the system software, invoking one or more APIs to transfer the diagnostic data over the network using the network device.","A computing device, according to an embodiment of the present invention, has one or more applications executed therein on top of system software for the computing device. The computing device further includes a processing unit under control of the system software that is executing instructions from the one or more applications, a network device having firmware stored therein, and a system memory having stored therein a copy of the firmware of the network device. Additionally, the system memory may have stored therein a copy of a network bootstrap program that includes application programming interfaces that call into the firmware of the network device.","Further embodiments of the present invention include, without limitation, a non-transitory computer-readable storage medium that includes instructions that enable a processing unit to implement one or more aspects of the above methods as well as a computer system configured to implement one or more aspects of the above methods.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","100","101","110","110","111","120","112","110","110","120","121","122","123","124","100","130","124","125","124","122"]},"As depicted in , computer system  is a stateless machine because it is not connected to a storage device. As a result, it is booted from the network in accordance with the basic input\/output system (BIOS) settings stored in ROM . However, it should be recognized that the present invention is not limited to stateless computing devices and may be used with computing devices that have connected storage devices and may or may not undergo a network boot process.","The network boot process according to an embodiment of the present invention is illustrated in . At step , the firmware for NIC , which includes UNDI APIs, is loaded into system memory , to allow computer system  to gain network access before any drivers are loaded. Once network access is made achievable through UNDI APIs, at step , a network bootstrap program is fetched from network boot server  and loaded into system memory . In one embodiment, the network bootstrap program known as PXELINUX is fetched. PXELINUX provides a standard set of APIs that invoke UNDI APIs for transmitting and receiving packets over the network and take care of switching CPU  between protected mode (32-bit addressing mode) and real mode (16-bit addressing mode). At step , after PXELINUX is loaded into system memory , APIs of PXELINUX are invoked to fetch an image of system software  from network boot server  and load it into system memory . System software  that is fetched and loaded includes a core dump handler. The core dump handler is installed as part of kernel  and is configured with the IP address of a network dump server  (), the MAC address of the NIC designated for the network core dump, and the IP address for the NIC to use. In addition, a device independent network interface (DINI) module (described below) that interacts with the network core dump handler during the process of carrying out the core dump process over the network is loaded into system memory . Booting is complete when execution control of computer system  is transferred to system software  at step .","Steps and of  are illustrated in dashed boxes to indicate that the network boot process, in alternative embodiments of the present invention, may employ steps and in place of step . At step , system software  that is fetched and loaded includes the core dump handler but excludes device drivers. In addition, the DINI module is loaded into system memory  at step . Then, at step , kernel  of system software  scans computer system , identifies all devices, and the drivers for these devices are downloaded from a central server using the DINI module. Booting is complete when execution control of computer system  is transferred to system software  at step . It should be recognized that this alternative booting process simplifies device driver management because the device drivers are managed as a catalog of device drivers separately from the system software that they are associated with and deployed from a central location.","According to one or more embodiments of the present invention, after booting has completed and execution control of computer system  has been transferred to system software , regions of system memory  into which UNDI APIs and PXELINUX are loaded are preserved (as further described below) so that they may be used during the network core dump process. By providing access to these APIs post-boot, the network core dump process can be carried out without reliance on network device drivers. According to one embodiment of the present invention, upon abnormal termination of system software , a core dump process is performed over network  using APIs of PXELINUX which invoke UNDI APIs to transfer (\u201cdump\u201d) the working state of memory  to network dump server  for diagnosis.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 3A","b":["3","3","3","122","301","303"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3A","FIG. 3B","FIG. 3B","FIG. 2","FIG. 2","FIG. 2","FIG. 3B","FIG. 4"],"b":["122","122","110","122","124","310","122","210","320","212","320","122","110","122","214","110","110","331","150","331","111","110","111","331","110","332","331","332","331","332","122"]},"In accordance with one or more embodiments of the present invention, the region of system memory  containing NIC FW , NBP , and DINI module  is preserved post-boot, i.e., after execution control of computer system  has been transferred to system software . The preservation of the region of system memory  containing NIC FW , NBP , and DINI module  is illustrated in , which depict contents of system memory  post-boot. To ensure that nothing gets written into this protected memory region, the protected memory region is excluded from any physical memory mappings generated by the memory management unit of CPU . In addition, a valid IOMMU domain for devices is defined and the protected memory region is excluded from that domain. As a check to see if the protected memory region has been preserved, a checksum of the protected memory region is calculated right after NIC FW , NBP , and DINI module  have been loaded. Then, when core dump handler  is invoked, a checksum of the protected memory region is calculated once more. If the two checksums mismatch, core dump handler  aborts the network core dump process, and system software  may continue with another core dumping technique, such as core dumping to disks, if available.","In one or more embodiments of the present invention that employ system software that is configured for multiboot, a multiboot data structure, generally known as \u201cmultiboot info,\u201d is modified to indicate that the protected memory region is reserved so that system software  does not attempt to use them. In addition, for system software that runs on x86 architecture, a memory map known as E820 may be modified to report to system software  that the protected memory region are reserved and not usable by system software . The E820 memory map is described in additional detail in , Rev. 4.0a, Apr. 5, 2010, pp. 477-98, the entire contents of which are incorporated by reference herein.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3C","b":["122","341","122","341","350","331","150","124","331","332","124","341"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3D","b":["122","342","331","342","150","124","350","331","332","124","342"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4","b":["121","100","122","110","111","331","332"]},"The method begins at step , where kernel  invokes core dump handler  upon detection of system crash. At step , core dump handler  resets NIC  to bring it to a known state. Because there is no single universal reset method that works for all network devices, each of the following methods are attempted: (1) function level reset; (2) D3hot and D0 transition; (3) PCIe link reset; and (4) PCI secondary bus reset, until reset is achieved. In one embodiment, one or more of these methods are not even attempted if it is already known that the method will not work.","At step , kernel  selects the data to be dumped over the network. The location of this data may be above the 4 GB boundary as shown in  or within the 4 GB region as shown in . Kernel  performs this check at step . If the location of the data to be dumped is above the 4 GB boundary, kernel  copies this data to buffer  (step ). Then, control is switched over to core dump handler  which assembles the data into a network packet at step . On the other hand, if the location of the data to be dumped is within the 4 GB region, step  is carried out without executing step . After assembly of the network packet by core dump handler , DINI module  takes over control at step  and invokes PXELINUX to transmit the network packet via NIC . At step , DINI module  waits for acknowledgement of the receipt of the network packet by network dump server . Upon receipt of the acknowledgement, control is switched over to kernel , which checks at step  to see if additional data need to be dumped. If there are additional data to be dumped, step  through  are repeated. If not, the method terminates.","In alternative embodiments of the present invention, the network data dump process described in conjunction with  may be associated with an event other than a system crash. For example, computer system  may be programmed to transmit logs to a central server using the network data dump process. When this feature is implemented in multiple computer systems being managed by an administrator, the administrator can inspect the logs of all the computer systems without having to log into each one.","It should be recognized that embodiments of the present invention may employ network bootstrap programs other than PXELINUX. In an alternative embodiment, gPXE is used as the network bootstrap program.","The various embodiments described herein may employ various computer-implemented operations involving data stored in computer systems. For example, these operations may require physical manipulation of physical quantities which usually, though not necessarily, take the form of electrical or magnetic signals where they, or representations of them, are capable of being stored, transferred, combined, compared, or otherwise manipulated. Further, such manipulations are often referred to in terms, such as producing, identifying, determining, or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition, one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the description provided herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The various embodiments described herein may be practiced with other computer system configurations including hand-held devices, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system; computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive, network attached storage (NAS), read-only memory, random-access memory (e.g., a flash memory device), a CD-ROM (Compact Disc-ROM), a CD-R, or a CD-RW, a DVD (Digital Versatile Disc), a magnetic tape, and other optical and non-optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.","Although one or more embodiments of the present invention have been described in some detail for clarity of understanding, it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly, the described embodiments are to be considered as illustrative and not restrictive, and the scope of the claims is not to be limited to details given herein, but may be modified within the scope and equivalents of the claims. In the claims, elements and\/or steps do not imply any particular order of operation, unless explicitly stated in the claims.","Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention(s). In general, structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements may fall within the scope of the appended claims(s)."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 3A","b":["3","3","3"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
