---
title: System load query governor
abstract: Techniques are disclosed for query processing. In one embodiment, a query is received for execution in a processing environment. Based on a measure of current load of the processing environment, a maximum amount of a resource that the query is allowed to consume is determined. An amount of the resource that the query is to consume is estimated. Execution of the query is managed based on a comparison between the maximum amount and the estimated amount.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09275102&OS=09275102&RS=09275102
owner: International Business Machines Corporation
number: 09275102
owner_city: Armonk
owner_country: US
publication_date: 20110720
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system (DBMS) that uses relational techniques for storing and retrieving data. An object-oriented programming database is a database that is congruent with the data defined in object classes and subclasses.","Regardless of the particular architecture, a requesting entity (e.g., an application or the operating system) in a DBMS requests access to a specified database by issuing a database access request. Such requests may include, for instance, simple catalog lookup requests or transactions and combinations of transactions that operate to read, change and add specified records in the database. These requests are often made using high-level query languages such as Structured Query Language (SQL). Upon receiving such a request, the DBMS may execute the request against a corresponding database, and return any result of the execution to the requesting entity.","Embodiments of the invention provide a method, product and system for performing an operation that includes receiving a query from a requesting entity, for execution in a processing environment. The operation also includes determining a maximum amount of a resource that the query is allowed to consume, based on a measure of current load of the processing environment. The operation also includes determining an estimated amount of the resource, wherein the estimated amount comprises an amount of the resource that the query is likely to consume. The operation also includes managing execution of the query, based on a comparison between the maximum amount and the estimated amount.","Embodiments of the invention provide techniques for managing execution of queries. One embodiment provides a query governor configured to manage execution of one or more queries submitted to a DBMS for execution, where the DBMS executes in a processing environment that includes one or more computer systems. To this end, the query governor may limit one or more resources consumed by the query. Examples of resources include query execution time, number of processor cycles used in query execution, amount of memory used in query execution, amount of storage capacity and\/or bandwidth used during query execution, amount of network bandwidth used during query execution, etc. The query governor may limit the one or more resources by setting maximum thresholds for the one or more resources. Each maximum threshold may be determined based on one or more measures of current load of the computer system. Each measure of current load characterizes resource utilization in the processing environment, as a result of applications executed by the processing environment. Examples of measures of current load include processor utilization, memory utilization, storage utilization in terms of capacity and\/or bandwidth, network utilization, etc.","In one embodiment, the query governor may set lower maximum thresholds when the processing environment is being heavily utilized and higher maximum thresholds when the processing environment is being underutilized. The query governor may then manage execution of the one or more queries based on the maximum thresholds. For example, if a query that is pending execution is estimated to exceed one or more of the maximum thresholds, the query governor may reject execution of the query. Such a rejection may be definitive (e.g., a message may be returned to the requesting entity, explaining that the query was denied for processing) or the execution may be delayed to another time (e.g., the system may process the query once system resources become idle). In some embodiments, if an executing query exceeds or is estimated to exceed one or more of the maximum thresholds, the query governor may suspend or halt execution of the query. Advantageously, the query governor may manage query execution in a manner that is more responsive to the needs of the processing environment at least in some cases. For example, the query governor may allow fewer queries to execute when the processing environment is being heavily utilized. Further, the query governor may allow more queries to execute when the processing environment is not being as heavily utilized.","In the following, reference is made to embodiments of the invention. However, it should be understood that the invention is not limited to specific described embodiments. Instead, any combination of the following features and elements, whether related to different embodiments or not, is contemplated to implement and practice the invention. Furthermore, although embodiments of the invention may achieve advantages over other possible solutions and\/or over the prior art, whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus, the following aspects, features, embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim(s) Likewise, reference to \u201cthe invention\u201d shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim(s).","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","Embodiments of the invention may be provided to end users through a cloud computing infrastructure. Cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally, cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture (e.g., servers, storage, networks), enabling convenient, on-demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus, cloud computing allows a user to access virtual computing resources (e.g., storage, data, applications, and even complete virtualized computing systems) in \u201cthe cloud,\u201d without regard for the underlying physical systems (or locations of those systems) used to provide the computing resources.","Typically, cloud computing resources are provided to a user on a pay-per-use basis, where users are charged only for the computing resources actually used (e.g., an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user). A user can access any of the resources that reside in the cloud at any time, and from anywhere across the Internet. In context of the present invention, a user may access applications (e.g., a DBMS) or related data available in the cloud. For example, the DBMS could execute on a computing system in the cloud and receive queries pertaining to one or more databases managed by the DBMS. In such a case, a query governor  could monitor incoming queries and, for each query, calculate an estimated execution time for executing the query. The query governor  may also determine a maximum allowable runtime for the query, based on one or more measures of current system load. Doing so allows a user to submit queries from any computing system attached to a network connected to the cloud (e.g., the Internet) and allows the query governor  to be sensitive to the processing environment in which it is executing.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIGS. 1A-1B","FIG. 1A"],"b":["100","120","170","150","120","150","170"]},"Generally speaking, any requesting entity can issue queries against data in a database. For example, software applications (such as by an application running on the client system ), operating systems, and, at the highest level, users may submit queries to the database. These queries may be predefined (i.e., hard coded as part of an application) or may be generated in response to input (e.g., user input). Upon receiving the request, the DBMS on the database server  may execute the request on a database specified in the request and then return a result of the executed request.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1B","b":["110","120","170","120","122","124","126","128","134","122","120","150","134"]},"Illustratively, memory  contains a client application  and an operating system . Although memory  is shown as a single entity, memory  may include one or more memory devices having blocks of memory associated with physical addresses, such as random access memory (RAM), read only memory (ROM), flash memory or other types of volatile and\/or non-volatile memory. The client application  is generally capable of generating database queries. Once the client application  generates a query, the query may be submitted to a server (e.g., DBMS ) for execution, using the network . The operating system  may be any operating system capable of performing the functions described herein.","The database server  contains a computer processor , storage media , I\/O devices , memory  and a network interface . Computer processor  may be any processor capable of performing the functions described herein. As shown, storage media  contains data pages . The data pages  generally contain one or more rows of data. In one embodiment of the invention, data contained in the data pages  is associated with one or more key values in the database . I\/O devices  may represent a variety of input and output devices, including keyboards, mice, visual displays, printers and so on. The database server  may connect to the network  using the network interface card . Furthermore, as will be understood by one of ordinary skill in the art, any computer system capable of performing the functions described herein may be used.","In the pictured embodiment, memory  contains an operating system  and a database management system (DBMS) . Although the memory  is shown as a single entity, the memory  may include one or more memory devices having blocks of memory associated with physical addresses, such as random access memory (RAM), read only memory (ROM), flash memory or other types of volatile and\/or non-volatile memory. The DBMS  includes a query governor  and a database . The operating system  may be any operating system capable of performing the functions described herein.","In one embodiment, the query governor  receives a query for execution in a processing environment (i.e., the database server ). The query governor  determines a maximum amount of the resource that the query is allowed to consume, based one or more measures of current load of the processing environment. The determined maximum amount may apply to all queries within a predetermined time period (e.g., until the load of the processing environment is next assessed) or only to one or more specific queries. As described above, examples of measures of current load include processor utilization, memory utilization, storage utilization in terms of capacity and\/or bandwidth, network utilization, etc. At least in some embodiments, the measures may be retrieved from the operating system  via one or more application programming interfaces (APIs) provided by the operating system . In other embodiments, the measures may be retrieved from a monitoring component of the DBMS, where the monitoring component is configured to monitor performance metrics of the DBMS.","At least in some embodiments, the user or application submitting the query may specify a suggested maximum amount as part of the query. For example, the query may include a SQL keyword specifying the suggested maximum amount. The SQL keyword may be vendor-specific or vendor-independent. In another embodiment, the query governor may retrieve the suggested maximum amount associated with the query from one or more configuration files. The query governor may then determine the maximum amount by adjusting the suggested maximum amount based on one or more measures of current load of the processing environment.","In some embodiments, the user or application may also include, in the query, a flag specifying whether the query governor may adjust the maximum amount based on current load of the processing environment. In another embodiment, the user or application submitting the query may specify a range of permissible values for the maximum amount. In this scenario, the query governor may adjust the maximum amount within the range of permissible values, based on current load of the processing environment.","As described above, in one embodiment, when the DBMS  receives a query for processing, the query governor  determines a maximum amount of a resource that the query is allowed to consume based one or more measures of current load of the processing environment, i.e., the database server . The maximum amount may also be determined at least in part based on one or more user-specified parameters in the query or in a configuration file. The parameters may specify a permissible range of values for the maximum threshold. The permissible range of values may be expressed in terms of units of the resource (within fifty to twenty seconds of query execution time) or in terms of percentages of a default threshold (e.g., within \u221225 to 25 percent of a default query execution time of twenty seconds).","In one embodiment, the query governor  may additionally consider other criteria in determining the maximum amount of the resource that the query is allowed to consume. Such criteria may include, without limitation, a query type, the requesting entity issuing the query, a user identifier associated with the query, and a priority value associated with the query. In such cases, the maximum amount is determined as a function of both the current load of the processing environment and criteria. For example, a user may selectively disable the dependence and\/or adjustment of the maximum amount of the resource based on the current load. The dependence and\/or adjustment may be disabled for a given query type, requesting entity, user identifier, priority value, etc. Accordingly, the load-dependent functionality of the query governor  may be selectively disabled to suit the needs of a particular case.","For instance, assume that there are two applications which submit queries to the DBMS : a mission-critical real-time application having a high priority value and a logging application for collecting database statistics having a low priority value. In such an example, for a given system load, the query governor  may assign a higher maximum amount for queries received from the mission-critical application than for queries received from the logging application. At least in some embodiments, doing so prioritizes executing queries from the mission-critical application over queries from the logging application, for a given system load.","In one embodiment, the query governor  also determines an amount of a resource that the query is likely to consume when executed. The amount may also be referred to herein as an estimated amount of the resource. As described above, examples of resources include query execution time, number of processor cycles used in query execution, amount of memory used in query execution, amount of storage capacity and\/or bandwidth used during query execution, amount of network bandwidth used during query execution, etc. The estimated amount may be determined using historical data collected from processing previous queries. Additionally or alternatively, the estimated amount may be determined by generating an access plan for the query and analyzing the access plan to determine an estimated cost for the access plan. The estimated cost for the access plan corresponds to the estimated amount for the query. At least in some embodiments, the access plan is analyzed by a query optimizer component of the DBMS.","As an example, assume that the resource in question is query execution time. Assume further that three previous queries containing SELECT statements for a particular database table took fifteen seconds, twenty seconds and twenty-five seconds to execute. If the database server  then receives another query containing a SELECT statement for the particular database table, the query governor may estimate that the query is likely to take an the average of the three previous execution times to execute, i.e., twenty seconds. At least in some embodiments, the historical data may be retrieved from a logging component of the DBMS, where the logging component is configured to log data pertaining to query execution. The logging component may log amounts of resources used in query execution, including query execution time, number of processor cycles used in query execution, amount of memory used in query execution, amount of storage capacity and\/or bandwidth used during query execution, amount of network bandwidth used during query execution, etc.","In one embodiment, the query governor may then manage execution of the query, based on a comparison between the maximum amount and the estimated amount. For example, if a query that is pending execution is estimated to exceed one or more of the maximum thresholds, the query governor may reject or delay execution of the query. In some embodiments, if an executing query exceeds or is estimated to exceed one or more of the maximum thresholds, the query governor may suspend or halt execution of the query. Advantageously, the query governor may manage query execution in a manner that is more responsive to the needs of the processing environment.","In some embodiments, rather than merely operating on a single query, the query governor may also operate on a group of queries. In such embodiments, the query governor may approve or reject the entire group for execution, based on a comparison between a maximum amount of resources the group is allowed to consume and an estimated amount of resources the group is likely to consume. Each group may be identified based on predefined criteria, such as based on the issuing application, tables accessed, etc.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIGS. 2A-2C","FIG. 2A"],"b":["200","182","200","202","204","182","182","212","200","182","182","200","206","208","210"],"sub":["1-3 ","1 ","1-3","1-3 "]},"Referring now to , suppose that the processing environment is experiencing a high system load instead of a medium system load. In one embodiment, the query governor  determines, based on the high system load, that the maximum allowed execution time should be ten seconds instead of fifteen seconds. The maximum allowed execution time of ten seconds is represented by the marker  in . Because the estimated execution times of the queries\u2014which are sixteen and twelve seconds, respectively\u2014exceed the maximum allowed execution time of ten seconds, the query governor  rejects both queries from being executed. Accordingly, lowering the maximum allowed execution time during times of high system load may prevent the processing environment from being overwhelmed with requests at least in some cases.","Referring now to , suppose that the processing environment is experiencing a low system load instead of a medium system load. In one embodiment, the query governor  determines, based on the low system load, that the maximum allowed execution time should be twenty seconds instead of fifteen seconds. The maximum allowed execution time of twenty seconds is represented by the marker  in . Because the estimated execution times of the queries do not exceed the maximum allowed execution time of twenty seconds, the query governor  allows both queries to be executed. Accordingly, increasing the maximum allowed execution time during times of low system load may prevent the processing environment from being underutilized at least in some cases. In some embodiments, such as during times of very low system load, the query governor  may allow all queries to run, regardless of estimated amounts of resources. For instance, the maximum amount may be set to a predefined value representing infinity. Additionally or alternatively, some or all of the functionality of the query governor  may be disabled in this scenario, such that the DBMS no longer incurs the overhead of determining maximum and\/or estimated amounts of resources.","Although embodiments are described herein with reference to exemplary query execution time as the maximum and\/or estimated resource amounts, those skilled in the art will recognize that the techniques herein may be applied to other resources, such as number of processor cycles used in query execution, amount of memory used in query execution, amount of storage capacity and\/or bandwidth used during query execution, and amount of network bandwidth used during query execution. For example, in an alternative embodiment, the maximum amount of resource that a query is allowed to consume specifies a maximum amount of memory of 128 megabytes (MB) under a medium system load, 64 MB under a high system load, and 256 MB under a low system load. In some embodiments, the query governor  imposes multiple constraints on each query, each constraint corresponding to a different resource. In such scenarios, the query governor  allows a query to execute only when all or a predefined number of the constraints are satisfied by the respective query.","Further, in one embodiment, the query governor  also evaluates currently executing queries against the maximum amount, to determine if any of the currently executing queries should be suspended or halted. Although the query governor  may previously have allowed the queries to execute, the system load of the processing environment may since have increased to such an extent as to warrant suspending or halting the previously allowed queries mid-execution. For example, suppose that the query governor  issues, for execution, a query estimated to take ten minutes to execute, because the query does not exceed a maximum execution time of fifteen minutes. Suppose that five minutes after issuing the query, the query governor  determines a new maximum execution time of two minutes, as a result of a sudden increase in system load of the processing environment. Because the remaining execution time of the query (i.e., five minutes) exceeds the new maximum execution time, the query governor  may suspend or halt the execution of the query. In some embodiments, it may not be desirable to halt and\/or suspend a query mid-execution. Accordingly, a user or application may set a flag that specifies not to halt and\/or suspend executing queries under any circumstances. Thus, the behavior of the query governor  in halting and\/or suspending query execution may be overridden.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 3","FIG. 2C"],"b":["300","300","310","182","182","320","182","182"]},"At step , the query governor  determines an estimated amount of the resource, where the estimated amount is an amount of the resource that the query is likely to consume. For example, the query governor  may determine that the first query is likely to take sixteen seconds to execute, as represented by the bar  in . At step , the query governor  manages execution of the query, based on a comparison between the maximum amount and the estimated amount. The step  is further described below with reference to the method  of . After the step , the method  terminates.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 4","FIG. 3","FIG. 3"],"b":["400","400","340","400","410","182","320","330","182","420"]},"On the other hand, if the estimated amount exceeds the maximum amount, then the query governor  determines whether the query is currently executing (step ). If so, then the query governor  may halt or suspend the execution of the query. If the query is not currently executing (step ), then the query governor  may reject or delay execution of the query (step ). For example, the query governor  may delay execution of the query until the system load is reassessed, by which point system resources may have become idle enough to allow execution of the query. At least in some embodiments, the query governor  assesses the system load according to a predefined schedule. For example, the system load may be assessed in five-minute intervals. A user may tailor the schedule to suit the needs of a particular case. The query governor  may also return a message to the requesting entity, explaining that execution of the query is denied or delayed. After the step , the step , or the step , the method  terminates.","Advantageously, embodiments of the invention provide techniques for query processing. One embodiment provides a query governor that is configured to receive, from a requesting entity, a query for execution in a processing environment. The query governor determines a maximum amount of a resource that the query is allowed to consume, based on a measure of current load of the processing environment. The query governor also determines an estimated amount of the resource, where the estimated amount is an amount of the resource that the query is likely to consume. The query governor then manages execution of the query, based on a comparison between the maximum amount and the estimated amount. Advantageously, the query governor may manage query execution in a manner that is more responsive to the needs of the processing environment.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited aspects are attained and can be understood in detail, a more particular description of embodiments of the invention, briefly summarized above, may be had by reference to the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 1A-1B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 2A-2C"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
