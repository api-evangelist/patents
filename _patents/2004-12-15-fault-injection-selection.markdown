---
title: Fault injection selection
abstract: A system and method for injecting faults are described. Faults may be injected into a process to determine if a given module handles the fault properly.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07404107&OS=07404107&RS=07404107
owner: Microsoft Corporation
number: 07404107
owner_city: Redmond
owner_country: US
publication_date: 20041215
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","Aspects of the present invention relate to computer systems. More particularly, aspects of the present invention relate to testing of computer systems.","2. Description of Related Art","Computer system developers desire to release bug-free systems and\/or applications. Be it hardware, software, or firmware, all computer products undergo some level of testing. Conventional testing systems allow test operators to specify a fault to occur and allow a system to encounter a fault. Often, identical processes may slightly differ in their execution based on environmental conditions. These alterations of the processes complicate testing procedures in that testing systems lack repeatability once a system error caused by the fault has been encountered.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 2","FIG. 2"],"b":["201","202","203","204"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3","b":["1","301","1","301","304","310","1","5","311","315","304","307","309"]},"A process for selectively initiating faults and for testing operating system functions is needed.","Aspects of the present invention addressed one or more of the issues described above, thereby providing an improved testing method and system for developers.","Aspects of the present invention relate to injecting faults during testing phases.","The following description is separated into the following sections: general purpose computing environment; and fault injection.","General Purpose Computing Environment","With reference to , an exemplary system for implementing the invention includes a computing device, such as computing device . In its most basic configuration, computing device  typically includes at least one processing unit  and memory . Depending on the exact configuration and type of computing device, memory  may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.) or some combination of the two. This most basic configuration is illustrated in  by dashed line . Additionally, device  may also have additional features\/functionality. For example, device  may also include additional storage (removable and\/or non-removable) including, but not limited to, magnetic or optical disks or tape. Such additional storage is illustrated in  by removable storage  and non-removable storage . Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Memory , removable storage  and non-removable storage  are all examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by device . Any such computer storage media may be part of device .","Device  may also contain communications connection(s)  that allow the device to communicate with other devices. Communications connection(s)  is an example of communication media. Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.","Device  may also have input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, etc. Output device(s)  such as a display, speakers, printer, etc. may also be included. All these devices are well know in the art and need not be discussed at length here.","Automated and Manual Testing","Testing of computer systems can be a time-consuming and tedious process. Two types of testing exist: automated testing and manual testing. Automated testing requires the running of an application on a test machine. The test application and any dependencies have to be preconfigured on a test machine before the test is executed. These dependencies include files, environment variable settings, registry settings, and commands. There can be a significant number of dependencies, of which failing to enable one will jeopardize the validity of a test run.","Manual testing is another commonly used testing system. Manual testing includes having a user physically control a system to approach a desired condition and then monitoring the condition. For instance, this may include a game developer controlling a game to reach a desired point then evaluate performance or rendering of the game. Consistently being able to reach the same predefined location may be jeopardized by modifications to the environment, thereby making consistent testing difficult.","A modified version of automated and manual testing may also be used. Here, \u201csemi-automated testing\u201d may be used to automate some portion of the testing process (e.g. system configuration) that requires manual interaction.","In an additional aspect of the invention, the approach described herein may be used for more than fault injection alone. In particular, application compatibility or emulation modification may be tested. For example, aspects of the present invention allow a testing system to modify how responses are handled. These aspects allow a developer to change program interfaces (or behavior responses) without having to rewrite the actual code for a program. Here, for instance, one may automate gameplay to perform an action (for instance, walk forward, turn and look at a wall). Also, one may receive an instruction, partially complete the instruction, but return that the instruction was completed.","Fault Injection","Prior to public release of software, the software undergoes extensive testing. Because of the complexities of code, automated testing systems are used to accurately perform tests. These automated tests provide repeatability to provide testers the ability to determine if software modifications actually work.","Automated tests and good code coverage results require that conditions be repeatable and that error handling code be exercised. Aspects of the present invention provide a process for injecting a fault at a specific module or process to determine how the module or process responds to the fault injection.","Aspects of the present invention may include the use of COM objects to create relationships between elements. Objects may be implanted using other approaches as well.","Aspects of the present invention permit a user to identify a module or process and instruct a testing system to inject a fault for that module or process. For instance, one may use Detours by the Microsoft Corporation of Redmond, Wash., to intercept the execution of functions. Detours is a library for instrumenting arbitrary Win32 functions on x86 machines. Detours intercepts Win32 functions by re-writing target function images. Detours copy out first few bytes of a process and push the process to execute different code.","The system may also use files that relate source code with binary representations. For instance, Pilot Database (PDB) files created during compiling may be used to set up faults that may be used at any time and to trigger faults to occur in specific processing units, processes, or threads when desired. Aspects of the present invention allows the developer to specify the type of fault. For the specified fault, aspects of the present invention begin and end with a given function call within the binary being tested. In one embodiment, a COM object is created to achieve these and other advantages.","Adequate testing is important. Stress failures and system lockups can come from untested error handling routines. Rather than existing tools which let one set a random chance of a failure happening or for a failure to happen throughout a test, aspects of the present invention allow developers to target faults (or failures) to specific known times to more easily reproduce a problem and consistently verify the error handling code for increased reliability.","A second benefit of aspects of the invention is the ability to parse the files that relate source and binary code (e.g., PDB files) for binary, randomly read functions and be able to record what fault is injected in what function. For long-haul testing, this may allow developers to find functions that are missing required error handling code. Since the fault is known and the running of what function was in place at the time the fault was injected, one may address the problem and fix it.","Function hooks may be used that bracket functions with identifiable code. These function hooks allow a system to be cognizant when the specific code is executed. With the combined capabilities to compare the PDB files to function hooks, there is also the ability to inject exceptions at given points in time or to even make an internal call with the binary fail, rather than having to rely on only hooking external APIs as current fault injection packages do.","Since aspects of the present invention relate to hooking specific functions within binaries rather than APIs between binary dependencies, hooking at the lowest level functions in a dependency tree for creating the fault.","Most fault injection packages rest on top of the operating system's application programming interface calls making them more difficult for the operating system to use in testing itself.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4","b":["401","401"]},"Test cycle  includes a test initialization process  and a test execution process . In the test initialization process, the system is configured to inject faults into a running process or processes. The test initialization process  uses a surgical fault injection object  to perform a number of items.","First, surgical fault injection object  initializes surgical fault injection in step . This initialization step defines what faults exist. For instance, running out of memory faults, insufficient writing\/reading\/erasing privileges, and the like are examples of types of faults that may be injected to one or more running processes. It is appreciated that any fault that is run in a testing procedure may be used.","In step , the system loads or creates fault interfaces. The fault interfaces are the relationships by which the faults are addressed.","For each function and for each fault, a fault creator object  exists. The fault creator object  includes the following: it determines if a fault has been turned off or turned on in step , it includes the original routine , replaces a normal return value with a desired fault , and\/or calls something completely different . As shown in broken lines, the various responses are optional; other responses may be performed in place of or in addition to these responses as well. In short, the fault creator knows how it wraps an original routine to produce a fault.","Surgical fault injection object  includes a set fault condition step  that indicates the type fault condition to occur. In the set interception function step , the specific indication where the fault is to occur is provided.","Step  indicates which process or sub process is to be provided with a fault. The fault may trigger at the beginning of the process, the end of the process, randomly in the middle of the process or at the Nth execution of a function call. The fault may be triggered when a specific routine identifier is handled by a processor. Alternatively, a function call may be wrapped with a wrapper that redirects the execution of the function call to an alternate location. In short, step  specifies where a fault is to occur.","Test cycle  also includes test execution  process. Test execution process  includes step  that determines if a function to be intercepted has been called. If a selected function has been called, then a function interceptor  that has been instantiated by the set interception function step  is executed. In step , the process determines whether a fault for the intercepted function has been enabled. If no, from step , the system executes the binary function as originally provided in step  then returns to step  to wait for the next intercepted function. If yes from step , the fault is enabled in step , the binary function is performed with the fault enabled in step , and the fault is turned off in step . By this point, the execution of the binary function in step  may or may not have caused an error condition by the state of the fault. The occurrence and\/or non-occurrence of the error condition may be logged for review.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["501","502","503","504","504","505","504","507","506","511","509","508","510"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 5"],"b":["601","603","604"]},"Alternatively, in step , the system may lock other processes from occurring. In step , the system may lock other threads from executing. These locks provide the benefit of ensuring that no other processes or threads occur while the selected process is running.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 7","b":["1","701","704","710","1","5","711","715","1","5","2","702","716","722","1","5","1","701","3","713","2","712","2","702","2","712","3","718"]},"For example,  shows a process where the order of calls in a call stack modifies the results of a test. Prior systems would not have identified that module  does not properly deal with a fault X , for example, because this fault X  is eliminated by module . Prior system's execution of call stack   would not uncover this problem with module  because module  would have been called by call  ahead of call . In contrast, aspects of the present invention are able to operate on specific calls, thereby removing ambiguity whether a call is to be tested based on where it is in a call stack. In call stack  , module  is called before module  by calls  and , respectively. The slight modification of the order of the execution of modules in various call stacks may have detrimental effects on previous testing systems but is handled properly by at least some aspects of the present invention.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 9","b":["1","901","902","908","1","3","2","903","906","4","6","909","911","5","912","5","910","5","5","2"]},"Alternative ways of detecting when faults are to be injected include specifying and monitoring interrupts and setting flags.","A pluggable interface may be provided so that a developer may add his own faults that may be feature specific or reside at a higher level than the low level kernel functions. Further, a given fault can be set to trigger during any random function call from a given PDB set with the fault, function, and runtime kicked out to a debugger log. A given exception can be thrown at any of the previous three conditions as well.","Aspects of the present invention may use exception handling techniques in additional to other techniques including processor interrupts.","Aspects of the present invention may be applied in various ways. Using the lower level hooks (wrappers for executing kernels), aspects of the present invention permit testing of higher level functions that access the wrapped kernels. Also, one may perform fault checks to ensure that all code in an application or operating system is being used. Finally, one may create function interceptors to wrap individual or group functions to better test applications and operating systems. In addition to wrapping a single kernel, one may wrap multiple kernels or layers. Additionally, one may specify specific branches in functions within a layer or the combination.","Aspects of the present invention have been described in terms of preferred and illustrative embodiments thereof. Numerous other embodiments, modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Aspects of the present invention are illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 2-3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 7 and 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
