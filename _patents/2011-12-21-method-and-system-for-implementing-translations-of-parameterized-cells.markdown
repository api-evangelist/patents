---
title: Method and system for implementing translations of parameterized cells
abstract: Disclosed is a method and system for translating parameterized cells (pcells) that are created using different programming languages. The pcell source code created in a first programming language undergoes a translation process to translate that source code to a second programming language. A validation process is also provided to ensure the correctness of the translations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298871&OS=09298871&RS=09298871
owner: Cadence Design Systems, Inc.
number: 09298871
owner_city: San Jose
owner_country: US
publication_date: 20111221
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The invention relates to the implementation of electronic designs, such as the design of Integrated Circuits (ICs).","Complex structures in an electronic design are often automatically generated from a set of parameters. A common example of an approach to implement such complex designs with parameters is to use parameterized cells (which are referred to herein as \u201cpcells\u201d). With pcells, a designer selects parameters to describe features of electronic components for a design of an integrated circuit. The pcell tool can then automatically generate multiple representations of the electronic components of the pcell based on the parameters. The parameterized data specified by the user minimizes the effort of data entry and editing in the design tool, and also reduces design rule violations.","Any suitable kind of design data can be parameterized in a pcell. For example, with a transistor pcell, the length, width, number of gate segments, and other design elements of the transistor, can be realized by simply inserting or changing one or more parameter values. For bipolar designs, parameterized data can include shapes such as arcs and circles. Design data can include text, and the location of the text may be relative to a virtual shape. Also, pieces of parameterized data can automatically appear, disappear, or replicate as a condition of another parameter.","Pcells have been implemented using different programming languages. For example, pcells are most commonly created using the Skill programming language. However, it may also possible to utilize other languages to create pcells, such as the Python, TCL, C, C++, and LISP programming language.","In some cases, a single organization may wish to permit usage of pcells written in different programming languages. For example, a semiconductor manufacturing\/fabrication facility (often referred to as a \u201cfab\u201d or \u201cfoundry\u201d) may develop process development kits (PDKs) for its customers that include components to be used within an electronic design. Since the fabrication facility typically has a diverse group of customers that utilize many kinds of design software and techniques, it is quite possible that the fabrication facility will want to offer the PDK with pcell components written in multiple programming languages.","The problem is that conventional electronic design automation (\u201cEDA\u201d) systems and tools are typically configured to only operate with pcells that are implemented using a single specific language. However, a company or organization may need to access, use, and\/or distribute pcells that are created using multiple programming languages.","Therefore, there is a need for an approach that allows pcells written in different programming languages to be used by EDA tools, even if the EDA tools are not configured to natively understand the original programming language of the pcell.","Embodiments of the invention provide a method and system for translating parameterized cells (pcells) that are created using different programming languages. According to one embodiment, the pcell source code created in a first programming language undergoes a translation process to translate that source code to a second programming language. The translation process involves an initial step of parsing and tokenizing the pcell source code to generate a symbolic tree. Each portion of the symbolic tree for the first language is then analyzed to identify corresponding functionality that can expressed in the second language. The translator will create equivalent syntax, functions and classes for all source code provided as part of the first-language pcells. A set of utility classes and functions will also be provided to act as mapping targets for API classes and functions that are not defined. A validation process is also provided to ensure the correctness of the translations.","Other and additional objects, features, and advantages of the invention are described in the detailed description, figures, and claims.","Embodiments of the invention provide a method and system for translating parameterized cells (pcells), where the pcell source code created in a first programming language undergoes a translation process to translate that source code to a second programming language. The translation process involves an initial step of parsing and tokenizing the pcell source code to generate a symbolic tree. Each portion of the symbolic tree for the first language is then analyzed to identify corresponding functionality that can expressed in the second language. The translator will create equivalent syntax, functions and classes for all source code provided as part of the first-language pcells. A set of utility classes and functions will also be provided to act as mapping targets for API classes and functions that are not defined. The goal of the translator is to have 100% complete coverage of functionality and behavior of the first language cells to complete and correct the second language pcells.","A validation process is also provided to ensure the correctness of the translations. Unlike prior translation approaches, the current invention is intended to be used in the electronic design process where it is critical that the pcell translations produce physical layouts that are exactly the same, regardless the programming language for the pcell. Some embodiments of the invention are directed to an approach for checking across a broad range of parameters for exact geometry matches between the first language pcell and the second language pcells.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","102","100","102","102","102","102","102","100"]},"The electronic designs may be stored in a computer readable storage device . Computer readable storage device  comprises any combination of hardware and software that allows for ready access to the data that is located at the computer readable storage device . For example, computer readable storage device  could be implemented as computer memory operatively managed by an operating system. The computer readable storage device  could also be implemented as an electronic database system having storage on persistent and\/or non-persistent storage.","According to the present embodiment, one or more libraries containing pcell source code, such as a first language pcell source code file , are placed or stored within the computer readable storage device .","A pcell translator  is employed to translate the first language pcell source code file into an equivalent second language pcell source code file . The translation process involves an initial step of parsing and tokenizing the pcell to generate a symbolic tree. Each portion of the symbolic tree for the first language is then analyzed to identify corresponding functionality that can expressed in the second language pcell. The translator  will create equivalent syntax, functions and classes for all source code provided as part of the first language pcells. A set of utility classes and functions will also be provided to act as mapping targets for API classes and functions that are not defined. A translation library  includes the mappings used by the pcell translator  to map the contents of the source code for the first language pcell to the second language pcell ","One or more (CAD) tool or electronic design automation (EDA) design tools , such as a layout tool , may be used by users at a user station  to create or edit the layout  of an electronic design. The layout tool  receives electronic design data, such as pcells and other design data  in a library of such design data to generate the layout . The design data  may include any additional set of information that is utilized by the layout tool  to generate a layout. For example, design data  may include PDKs, models, verification documents, standard cell libraries, and other like design materials. Any suitable data management infrastructure may be employed in conjunction with the present disclosure to implement storage of the pcells , and the design data . For example, the data can be managed by the OpenAccess product, which is available from the Website of Silicon Integration Initiative, Inc. (Si2).","It is assumed that the layout tool  is designed to be natively compatible with only pcells that are created in the second programming language. Therefore, any pcells that have source code created in the first programming language would need to be translated by pcell translator  into a pcell in the second programming language before it can be used by the layout tool .","It is possible that some language constructs in the first programming language are not directly equivalent with language constructs in the second programming language. Therefore, it is possible that a direct translation of some items or objects within the source code of the first language pcell will not be completely translated into the source code of the second language pcell . Instead, for these types of language constructs, a run-time component  may need to be present during the operation of the layout tool  to finalize the translation of these language constructs. In addition, for certain translation tasks, it may be more efficient to implement the translations in two parts, with a first part involving changes to the source code and a run-time component that resolves any final translation issues (such as sematic translation issues) at run-time.","For example, it is possible that certain operators in the first programming language can only be resolved at run-time, with consideration of the actual data being operated upon at that point in time. To explain, consider an overloaded operator that may be viewed differently depending upon the values being operated upon, e.g., in some languages the \u201c+\u201d operator is construed to implement an addition operation if acting upon numbers but can also be construed as a concatenation operation if operating on strings. If the second programming language does not have an exact equivalent of this type of language construct, then a pure source code translation may not be possible or efficient, since the values operated upon by the operator may only be known at run-time. Instead, the translation run-time component  can be employed to identify the specific types of values being operated upon at run-time, and to then implement the translated pcell at that point with the correct operator in the translated language version.","Of course this translation sequence could also have been implemented with a more complex algorithm in the translated source code, but there may be reasons to not do so and instead utilize the run-time component. For example, one possible reason is because there is often a desire to have the original pcell source code and the translated pcell source code to both have similar architectures and algorithmic flows, to facilitate readability and debugging of the translated version of the pcell code. Therefore, it may not be desirable to introduce complex changes to the general flow of the translated source code to handle certain types of non-equivalent language constructs (such as the overloaded operator described above) and to instead implement final semantic translations of those language constructs at run-time.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":"202"},"At , the source code file for a first language pcell is identified which needs to be translated into a second programming language. The pcell may be in any programming language. For example, the pcell may be in the Skill, Python, TCL, LISP, or C++ programming languages, which is to be translated into any of the other programming languages. The translations may occur at any point in the electronic design flow. For example, a fabrication facility may utilize the present techniques to translate and validate pcells within a PDK prior to its release to customers. In addition, a downstream customer may wish to leverage an existing library of pcells by translating those pcells into another programming language, e.g., in the circumstance when the customer has purchased a new EDA tool that is not natively compatible with the language of the existing library of pcells.","Next, at , the source code in the first programming language for the pcell is translated into the second programming language. As described in more detail below, this translation functionality is performed by analyzing the details of the source code in the first programming language, and then mapping the first language constructs to constructs in the second programming language.","The pcell source code translation must take into account translations at both the syntax and semantic levels. At the syntax level, the translated source code must include comparable language constructs and objects to those that are present in the original source code. At the semantic level, the translated version of the source must have the same behavioral functionality as the original source code, particularly with respect to the exact geometries and shapes that are produced in a design layout by the pcell.","At , the translated pcell is used to generate a layout. A pcell\/layout tool will automatically generate shapes on a design layout that are representations of electronic components within the pcell, where the exact geometries of those shapes are based on the parameters included within the pcell. At , the final layout can then be displayed on a display device or stored onto a computer readable medium.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3A","b":"302"},"At , a determination is made whether the identified function\/object is already recognized and\/or mapped in the existing translation library (e.g., because that function\/object has already been recognized and addressed in the past, and suitable mappings have already been created and verified for that function\/object in the translation library). If so, then at , the process returns back to  to select another function\/object for translation processing.","However, if the identified functions\/object is not already recognized in the translation library, then new translation mappings will need to be created in the translation library to handle the functions\/object (), with the new mappings stored in the translation library (). The translation library will include mappings to equivalent syntax, functions and classes for the identified language constructs between a first programming language and a second programming language. A set of utility classes and functions will also be provided to act as mapping targets for API classes and functions that are not defined in the original source code. The mappings will therefore permit the translator to map a function or object in the first programming language to its equivalent function or object in the second programming language.","The translations\/mapping will operate on at least two different levels, to address translations at both the syntax level and the semantic level. The translation will operate at the syntax level, by performing a translation of the source code form the first programming language to the second programming language so that the wording and syntax of the translated code is correctly established in the translated pcell code file. To accomplish this, the specific functions\/object names in the first programming language will be translated into equivalent and consistent function\/object names in the second programming language.  shows an example of a syntax translation of a simple code fragment from Python language to the Lisp language, where the syntax of the \u201cif . . . then . . . \u201d construct in the Python language version is translated into the equivalent \u201cif . . . then . . . \u201d construct in the LISP language. Function name substitution is another type of syntax translation that can be performed. In addition, application programming interfaces (APIs) can be addressed by providing equivalent APIs in the translated language.","In addition, the translations must be properly performed at the semantic level. This means that the behavior of the original pcell must be understood, and the translated version of the pcell must behaviorally operate to provide necessarily the processing results as the original language pcell. This aspect of the embodiments of the invention is critical, since pcells are intended to create geometric shapes within electronic design layouts. Therefore, the end product of the pcell are shapes on the layout that form circuit elements such as transistors, memory elements, pins, etc., that must be geometrically correct to ensure proper operation of the electronic circuit to be manufactured from the layout\/pcell. If not, then the electronic circuit that is manufactured using the pcell may include defects that cause lowered or failed performance of the product that includes the electronic circuit. This aspect of the invention is quite different from other types of source code translation approaches, since alternate source code translation approaches do not need to operate in this same type of context where resulting shapes on a circuit layout must be geometrically correct and consistent. In other words, the pcell translation must be semantically correct to ensure that the translated pcell will result in a layout geometry that is identical to the layout geometry when using the original pcell in the original programming language. Therefore, even if there is a direct syntax-correct translation from a first language version to a second language version of the pcell construct, the translation must also be semantically correct to ensure that the two different pcells operate exact the same from a behavioral point of view.","One approach to ensure proper semantic translations make sure proper identifications are made of functions and\/or objects in the different languages that do not perform or behave identically to each other. These functions\/objects would then be addressed over and above a straightforward syntax translation. For example, a wrapper function may be provided to emulate the behavior of a language construct in the translated language. In addition, the run-time component may be employed to perform any semantic translations that are required at run-time.","The mapping that are generated and stored in the translation library may be created either manually or automatically. In the manual approach, an engineer or programmer will analyze the syntax and intended functionality of the first language construct, and will identify or create equivalent code in the second programming language to accomplish the same results. The engineer or programmer may need to provide modified instructions for the run-time component to complete certain types of translations that need to be resolved at run-time. In the automated approach, basic building blocks are provided for handling different translation functions, and those building blocks are combined together to provide the required mapping for the translation library. For example, consider the situation when a function in the first programming language has several parameters that need to be processed in a certain order. The automated mapping approach may first identify the equivalent function or set of functions in the second programming language, and can then analyze those parameters to determine an order in which those parameters should be applied to the function(s) in the second programming language.","The new mappings are stored in the translation library (). This allows the translation library to grow over time with new mappings, so that future translation efforts are capable of addressing any translation needs that have already been handled in the past.","Some embodiments of the invention provide a method and mechanism to perform translation validations to ensure that the proposed mappings for the translation library will create translated pcells that are semantically correct. The validation activity should ensure that the geometry of the translated pcell exactly matches the geometry of the original pcell.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["402","404"]},"At , a layout is generated for both the original pcell and the translated pcell. This action can be performed, for example, by installing the original pcell into a first library and the translated pcell into a second library (which may refer to the original library for technology information). Each pcell is then instantiated into separate cell views, where the pcells are instantiated using a range of unique combinations of parameters to be tested.","At , the geometries of both sets of pcell instantiations are compared to check whether the geometries are identical. This may be performed, for example, by flattening each instance of the pcells to basic shapes, while retaining pins and connectivity. An exclusive OR operation may be performed to check for any differences between the two pcell instances. At , a determination can be made whether the geometries are identical. If the geometries are not identical, then at  the translation mapping in the translation library must be modified to address the discrepancies. Otherwise, if the two sets of geometries are identical, then at  the process ends since the translations are correct.","The validations may also be performed to check for other types of consistencies\/inconsistencies with the translations. For example, further validations may be performed to check that the translated pcell interacts with the layout\/pcell application as well as the original pcell, e.g., with respect to data above the geometric layer, such as connectivity\/pins, automatic abutment functionality, and to stretch handles. For this type of validation, one may assume that the interaction of the pcell with the layout\/pcell application is somewhat independent of the parameters being specified. Therefore, there may not be a need to exhaustively test all variations of parameters on the pcell instances and check that the connectivity is correct. Instead, only a few subsets (e.g., one finger, and multi-fingers for example) may need to be tested.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 5","b":["502","504"]},"From the AST, the functions\/objects within the first language pcell are identified (). The translation library is accessed at  to translate each portion of the source code in the first programming language into the second language. Thereafter, the source code for the second language version of the pcell is saved at .","Therefore, what has been described is an approach for enabling parameterized cells that have been created in a first programming language to be translated into a second programming language.","The embodiments of the invention may be applied in any context to generate translated pcells. For example, the invention may be applied to deliver PDKs having pcells that correspond to different programming languages, where a given pcell in a first language is replicated as a pcell in a second language within the technology library of the PDK. This allows the customer of the fabrication facility (which had provided the PDK) to use any layout tool desired by the customer and still allow the customer to work with pcells in the PDK, even if the selected layout tool is configured to natively recognize pcells of only a single programming language so long as that language is supported by the PDK. The two libraries of pcells in the PDK would contain duplicated symbols, schematics, and other information for pcells that have been translated from one language to another. Nevertheless, this permits the creator of a pcell in a first language to leverage that pcell, and make that data useful for users of pcells in other languages.","System Architecture Overview",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6","b":["1400","1400","1406","1407","1408","1409","1410","1414","1411","1412"]},"According to one embodiment of the invention, computer system  performs specific operations by processor  executing one or more sequences of one or more instructions contained in system memory . Such instructions may be read into system memory  from another computer readable\/usable medium, such as static storage device  or disk drive . In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and\/or software. In one embodiment, the term \u201clogic\u201d shall mean any combination of software or hardware that is used to implement all or part of the invention.","The term \u201ccomputer readable medium\u201d or \u201ccomputer usable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media and volatile media. Non-volatile media includes, for example, optical or magnetic disks, such as disk drive . Volatile media includes dynamic memory, such as system memory .","Common forms of computer readable media includes, for example, floppy disk, flexible disk, hard disk, magnetic tape, any other magnetic medium, CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, RAM, PROM, EPROM, FLASH-EPROM, any other memory chip or cartridge, or any other medium from which a computer can read.","In an embodiment of the invention, execution of the sequences of instructions to practice the invention is performed by a single computer system . According to other embodiments of the invention, two or more computer systems  coupled by communication link  (e.g., LAN, PTSN, or wireless network) may perform the sequence of instructions required to practice the invention in coordination with one another.","Computer system  may transmit and receive messages, data, and instructions, including program, i.e., application code, through communication link  and communication interface . Received program code may be executed by processor  as it is received, and\/or stored in disk drive , or other non-volatile storage for later execution.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. For example, the above-described process flows are described with reference to a particular ordering of process actions. However, the ordering of many of the described process actions may be changed without affecting the scope or operation of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF FIGURES","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
