---
title: Methods and apparatus for storing information for components of a system in model component files to provide a world view of the system
abstract: Method and apparatus for representing data for components of a system in respective model components, generating model sub components from model components for at least some of the system components, and accumulating information from the model components and model sub components to determine a world view of the system. In one embodiment, model components can be updated during system operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08813026&OS=08813026&RS=08813026
owner: EMC Corporation
number: 08813026
owner_city: Hopkinton
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["As is known in the art, conventional systems run by means of processor execution of compiled code. Such systems having compiled language programming and system design\/implementation approaches have a lengthy development cycle and complex deployment considerations. Conventional programming code and API (Application Programming Interface) driven approaches require specialized tooling (development environments, source code control system tools, compilers, linkers, etc.) to incorporate changes to system functionality. In addition, the modified system requires deploying constructed artifacts to an operational system in order to provide new\/altered systems functionality. The API driven approach produces artifacts that are highly dependent on one another and prone to breakage when changes in some part of the system occur. Systems that use programming APIs (e.g., REST, SOAP, RPC, static\/dynamic class linkage, etc.) as the fundamental interaction mechanism may suffer from this disadvantage.","In one aspect of the invention, exemplary embodiments provide methods and apparatus for representing information for components of a system in model components that provide a world view of the system. In one embodiment, the model components are XML documents that cross reference other model components. The model components provide data to service requests, such as backup of a storage volume.","In one embodiment, a method comprises representing data for components of a system in respective model components, generating model sub components from model components for at least some of the system components, and accumulating information from the model components and model sub components to determine a world view of the system.","In another aspect of the invention, exemplary embodiments provide methods and apparatus for servicing requests, such as user requests, by accessing data from model components. In one embodiment, the user request is expanded in accordance with a template to combine data from the model components, host data, and\/or user supplied data. An internal response having a particular format is generated for inserting data into one or more of the model components. A client response is then generated for the user request.","In one embodiment, a method comprises: receiving a request from a user of a system, the request having a format defined by a template, expanding the request to combine user supplied data and data from a model component containing data for a component of the system to form an expanded request, wherein the expanded request has a predetermined format, acquiring information to determine how to process the expanded request, communicating with a host computer to extract information needed to satisfy the expanded request, generating an internal response to the expanded request containing the acquired information, inserting result data from the internal response into the model component, generating a user response to the user request, and, sending the user response to the user to satisfy the user request.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","102","104","106","108","110","106","112","114","116","118","120","100","104","120","122","108","124","126","120","124","122","126"],"i":"a"},"In exemplary embodiments, the first and second host servers ,  include respective document processing engines ,  to combine data from various documents, such as XML documents from service requestors and service providers with template and transform documents, as described more fully below.","It is understood that model components can be stored in any practical location in disk files, for example. Exemplary model components are listed below:","ASF.Apps.Config.Archway.xml --application config","ASF.Apps.Config.ASMS.xml --application config","ASF.Apps.Config.AutoStart.xml --application config","ASF.Apps.Config.AutoStart_mt.xml --application config","ASF.Apps.Config.CXNATIVE.xml --application config","ASF.Apps.Config.RM.xml --application config","ASF.Apps.Config.RMHOST.xml --application config","ASF.Apps.Config.SSHOST.xml --application config","ASF.Apps.Config.Staf.xml --application config","ASF.Apps.Config.URM.xml --Service config","ASF.Apps.Data.URM.xml --Service config","ASF.PIugin.Config.Xml --General Service config","AWS.Host.Config.xml --Communications Service config","ASF.Host.config.xml --System runtime config","ASF.Apps.Config.xml --System configuration","ASF.Emc.Config.xml --System configuration","ASF.ExceptionLog.config.xml --System configuration","ASF.Licensing.Config.xml --System configuration","ASF.Macro.Config.Xml --System configuration","Local.cfgd.xml --System configuration","It is understood that model component can comprise a single file or files containing a definition file for several components. For example, in the above list, ASF.Apps.Config.RM.xml is a file with most of the information for Replication Manager interfaces and data. ASF.Plugin.Config.Xml contains metadata for a number of services and supporting data, which is small enough that a single file is more convenient. ASF.Apps.Config.Archway.xml contains all of the information specific to Archway interfaces.","An exemplary service component comprises the information to locate and load the service dlls and any supporting data. It is understood that dll refers to a dynamic linked library file containing a set of procedures and\/or drivers that are referenced and executed by a program to allow multiple programs to access shared system functions through common libraries, and may be dynamically linked into a program at runtime.","An example for web services service endpoint follows. It has metadata to locate the main service executable dll (ProcClass and Assy), where the exposure of the service occurs (Virtualdirectory, Port, PhysicalDirectory), etc. Similiar types of service have similar sets of metadata.","<AWSHostService>","<ProcClass type=\u201casfpluginclass\u201d>AWSHostProvider.AWSHostService<\/ProcClass>","<Assy type=\u201cassembly\u201d path=\u201cSystem\/install\/ASFDir\u201d param2=\u201cCP\/CP.AWSHOst\/\u201dcontrol2=\u201cdeploypath\u201d>CP.AWSHost.d11<\/Assy>","<VirtualDirector>\/AWS\/<\/VirtualDirectory>","<Port mgtStyle=\u201cIPPort\u201d desc=\u201cset to 80 if IIS not running so we look like normal web services without IIS\u201d>8282<\/Port>","<PhysicalDirectory type=\u201cpath\u201d path=\u201cSystem\/install\/ASFDir\u201d param2=\u201cCP\/CP.AWSHost\/\u201dcontrol2=\u201cdeploypath\u201d<|>\/PhysicalDirectory>","<PortDir>[Plugin\/AWSHostService\/Port][Plugin\/AWSHostService\/VirtualDirectory]<\/PortDir>","<Prefixes>http:\/\/[System\/Configuration\/IP]:[Plugin\/AWSHostService\/PortDir];http:\/\/[System\/configuration\/Service]:[Plugin\/AWSHost","<\/AWSHostService>","It is understood that any suitable hardware and\/or software device\/component can be coupled to the network  and form part of the system . In general, similar metadata is used for both physical and logical components (e.g., a physical server hosting a database and a database instance running on that server). It is how other services use the model data where the distinction arises. For instance a query string will be composed in part with the database instance and credentials to access it, while for a hardware component such as a storage array, its model data comprises an IP addresses, SAN Fabric WWNs, etc., as well as data such as credentials to access it.","While exemplary embodiments of the invention may use the term XML (Extensible Markup Language), it is understood that, as used herein, XML refers to markup languages in general, without limitation to only XML. Exemplary embodiments of the invention use XML formatted in a particular manner using xml attributes as meta data for describing in a consistent manner service constructs, data processing constructs, and other supporting constructs all of which are part of the invention. XML is used to describe exemplary embodiments of the invention in addition to its use as part of the invention.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 2","FIG. 7B"],"b":["200","202","204","204","206","200","208","210","206"]},"It is understood that the bi-directional protocol used between the adapter service  and the external service it communicates with is particular to that external service. For example, it might be a raw sockets proprietary data encoding protocol (such as Replication Manager communications), a SOAP\/HTTP Web service (such as VWare Vcenter), or some other protocol endpoint type supported, as described more fully below.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 3","FIG. 2"],"b":["206","300","302","304","302","306","304","306","304","308","310"],"i":["a,b","a","d","a ","a ","b","a "]},"Exemplary external services include Replication Manager Server, VCenter Server, Archway Server, RecoverPoint appliance, Symmetrix, VNX, Clariion, etc., storage arrays, SQL Server, etc. It is understood that where vendor names are used for a service, the vendor name is intended to cover the generic type of service provided.","With regard to model component and model sub components, it is understood that the hierarchy shown reflects composition and not inheritance. Typically the model components are independent physical files broken down by what makes physical and logical sense. For instance a set of standard service definitions which all systems include is in a single model component file for convenience. This model file can include other model files which might describe a single service and its supporting data, or possibly be data for another set of services that \u2018go together\u2019 for logical and\/or deployment reasons.","Example of composition: ASF.Host.config.XML contains the following fragment where \u201cAppendConfigFileHere\u201d and \u201cMergeConfigFileHere\u201d are key words that cause additional files to be read in to construct the main model when the system powers on.","<RepeatingPlugins1>SMCPSOCKETS;DataServer<\/RepeatingPlugins1>","<RepeatingPlugins1>EMCAPI;SMCPSockets;DataServer<\/RepeatingPlugins1>","<AppendConfigFileHere>[ConfigurationDirDefault]\/TransformFiles\/ASF.InterfaceTemplates.Config.xml>\/AppendConfigFileHere>","<\/System>","<MergeConfigFileHere>[ConfigurationDirDefault]\/ASF.Emc.Config.xml<\/MergeConfigFileHere>","<MergeConfigFileHere>[ConfigurationDirDefault]\/ASF.Apps.Config.xml<\/MergeConfigFileHere>","<MergeConfigFileHere>[ConfigurationDirDefault]\/ASF.Apps.Data.URM.xml]<\/MergeConfigFileHere>","<Me rgeConfigFileHere>[ConfigurationDirDefaulWASF.Apps.Config.RMDeplSupport.xml<\/MergeConfig FileHere>","<\/configuration>","For cross references, a particular model component might require information from another model component: For instance the AWSHostService web services model data shown above needs to expose an endpoint and needs the IP address which is stored in the system configuration model component.","<AWSHostService><Prefixes>http:\/\/[\u02dcSystem\/Configuration\/IP]:[\u02dcP . . .","In general, XML configuration files are combined to provide a \u2018world view\u2019 of data, where there is a data model for everything in the \u2018world.\u2019 The data model is structured, composable, homogenized, navigable, and integratable. It is understood that composable means that model parts can be combined into a larger model. Homogenized means that a consistent way of representing a wide variety of data sources is used. Navigable refers to the use of addressable intra-model references including nomenclature for managing addressability of disparate data sources.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["400","402","404"],"i":["a","a"]},"It is understood that model components can include meta-data indicating that as data is added to particular nodes in the model this data should be persisted. The persistence comprises recording changes to the model in these particular areas in xml documents whose name reflects the xpath of the data being saved. Upon power on, the system loads these files in a manner similar to other model files, with the exception that these are discovered dynamically as opposed to statically pre-defined in model files.","The data is accumulated in a recursive procedure from predetermined configuration files and persisted data from previous system activities. In step , an integrity check is performed on the data and internal references are resolved so that a complete model of the system is available. With regard to resolving internal references, the syntax for references includes extended xpath syntax with well known identifying strings which would not interfere with typical data usage. For example:","[\u02dcConfigurationDirDefault] --([\u02dcxxxxxx]) resolves to where the ConfigurationDirDefault node is located near the root of the configuration hierarchy.","[$ProdHost\/Phost\/Name] --value resolves to that found at the PHost\/Name location underneath wherever the node tagged with the \u201cisParam=\u2018[$xxxxx]\u2019\u201d attribute is found in the combined model.  contain additional examples of references and their usages","In step , startup services are loaded from a service component document . Based on configuration data, services, such as communication portals, task schedulers, and tasks configured to run at startup are loaded. In step , services -P are initiated to dispatch startup messages to loaded services to initiate service specific functionality. In step , data is accumulated from the services . While running, services  receive requests, engage in service related activity, emit responses, and accumulate data for addition to the model components. In step , dynamic XML memory documents receive the accumulated service data , which can be persistently stored in the XML documents .","It is understood that exemplary services include any service  shown in , for example. Exemplary services data is information particular to that services functionality. For example, a data discover services data fragment is set forth below. This service is concerned with storage device information:","<\/DBFile>","<\/DBFile>","<Drive>C:<\/Drive>","<Path>C:\\Program Files\\Microsoft SQL Server\/MSSQL10.MSSQLSERVER\/MSSQL\\DATA\\","<Type>data<\/Type>","<FileSizeMB>3<\/FileSizeMB>","<LogicalFileName>ReportServer<\/LogicalFileName>","<PhysicalFileName>C:\\Program Files\\Microsoft SQL Server\\MSSQLSERVER\/<DBName>ReportServer<\/DBName>","<VolSize>32201936896<\/VolSize>","<VolFree>20999639040<\/VolFree>","<Devices>","<Device>\n\n","<\/Instance>","<Details>\n\n",{"@attributes":{"id":"p-0064","num":"0086"},"figref":"FIG. 5"},"An exemplary application is RM Test: The system is launched and a particular application becomes the \u201cfocus\u201d for various processing functionalities which default to the commands, data, and other model resident information specific to that application. A specific application is defined by attributes in its model component data as follows where the \u201cis App\u201d attribute identifies where the RM application model component is defined:","<RM isAPP=\u201c1\u201d isParam=\u201cRMData\u201d desc=\u201cRelication Manager--application coordinated volume copies\u201d>","<DBWorking isPersist=\u201c1\u201d>\n\n","<\/IRMsg>","<DBStuff isParam=\u201cDBLocal\u201d\/>","<\/DBWorking>","<Finalization>\n\n","<\/Finalization>","<SysCmds isPersist=\u201c1\u201d>\n\n","In the illustrated embodiment, the command configuration includes a mount command from a command line, the output configuration includes replica information, which further includes value information. The default configuration includes data for a default replica name and application data. As can be seen, there is a cross reference between the replica value and a replicaname from the default configuration. A command line input, for example, for a mount command at the bottom of  contains configuration information, as shown, including the command (mount), replica name, appset name, and host name. It is understood that replica is a term well known in the field of data replication and storage.","The \u201csource code references . . . \u201d example is a snippet of a C# (Microsoft .Net programming language) source code file. The code fragment shows a call to the configuration subsystem where model data is exposed. The \u201cscript references . . . \u201d example provided is a snippet of a test script file which is used for testing other software. The script fragment shows use of commands defined in the RM model component. Both of these examples demonstrate usages of the model data under different runtime environments and different frameworks and for different purposes. This demonstrates the cross-cutting nature provided by exemplary embodiments of that invention in that core functional capabilities are provided for a wide variety of circumstances, including those which had not been originally anticipated. That is, exemplary embodiments of the invention are not like a \u201cjava programming language only pre-defined capability\u201d type facility.",{"@attributes":{"id":"p-0075","num":"0103"},"figref":"FIG. 6","b":["600","602","604","602","604","602","602","604","602","604","602","600"]},{"@attributes":{"id":"p-0076","num":"0104"},"figref":["FIG. 7","FIG. 7A","FIG. 7B"],"b":["700","702"]},{"@attributes":{"id":"p-0077","num":"0105"},"figref":"FIG. 8"},"In general, templates are provided for particular service type operations and are \u201cre-used\u201d for each request that calls for the same service template. Templates can be added to a running system and changed within a running system as functionality is added or changed in the system. Any changes come into effect at the next service request that calls for the template.","Referring to  in conjunction with , when called upon the system reads the template; creates input and output mapping tables from the input and output sections (see step ). An in memory copy of the ISORequests part of the template is made\u2014this is the partially filled skeleton for the request. The set of user supplied inputs are matched up with the input parameter \u2018name\u2019 elements and the associated user data is inserted in the request at the location specified in the xpath of the named input element. Any defaults in the input section are applied for those input elements for which the user did not supply a named value. Any cross references to model data, as described above, within the now fully formed request are resolved and appropriate value replacements are made (). The request is then dispatched to the appropriate service ().","When a response to the request is returned data as appropriate from the response is decoded () and data inserted into the model as appropriate (). An output mapping process, essentially the reverse of the input mapping process, takes place (). A flattened set of nodes within the response XML with the name from the output mapping section are created. These node values are populated with the data dug out from the xpath indicated location in the service response.","In step , data model information, such as \u201cRequest input parameter derived from . . . \u201d in  demonstrates a reference to data in the model, is acquired as to how the particular type of request, here a backup request, should be processed.","In step , a discovery request is created and dispatched to a service (see ).  shows an exemplary XML file for the request. As part of the create operation, the metadata indicates that an \u201crmsqlbackup\u201d should be performed.","In step , the discovery service decodes the request for host data and performs service specific functions. In step , the discovery service communicates with the host to extract host information, e.g., adapter services  () and xml components  () perform as described above. In step , an internal service response is formulated from the retrieved data along with any internal data. The response can take the form of an XSL transform.","In step , the appropriate result data is inserted into the model . In step , a client response is formulated and returned to the dispatch endpoint corresponding to where the request was originally received. The response can be a XSL transform. As is known in the art, Extensible Stylesheet Language (XSL) refers to languages used to transform and render XML documents.","In step , the client response is transmitted using the portal upon which the request was received. As used herein, portal refers to the means by which the service consumer made contact with the system. A portal is a communications service endpoint implementing a particular industry standard communications mechanism. For example, a system can support a SOAP\/HTTP endpoint (web service); a raw sockets endpoint; MSMQ (Microsoft Message Queuing), and Sonic MQ message queuing endpoints; .Net remoting endpoint; etc.",{"@attributes":{"id":"p-0086","num":"0114"},"figref":"FIG. 7D"},"Referring again to , blocks having a darkened triangle in the lower right corner indicate associated components that can be modified without rebuilding or restarting the system. For example, an updated (replacement) for a service that is currently being used in an operational system can be provided. As demonstrated below, the service executable is defined by the configuration data\u2014the executable component is CP.AWSHost.dll. A replacement might be named CP.AWSHost_NEW.dll. The new file is placed on the running system and the config file is changed to reflect this new component. All currently in-flight service requests to the AWSHostService service will continue to run to completion. All new service requests for AWSHostService will be processed with the new dll--CP.AWSHost_NEW.dll. When all in-flight requests to the old service executable are completed the older component files can be removed from the system. This is an example of a hot-upgrade of a running system and makes possible zero downtime. The advantages of this arrangement will be readily apparent to one of ordinary skill in the art.","|<AWSHostService>","<ProcClass type=\u201casfpluginclass\u201d>AWSHostProvider.AWSHostService<\/ProcClass>","<Assy type=\u201cassembly\u201d path=\u201cSystem\/install\/ASFDir\u201d param2=\u201cCP\/CP.AWSHost\/\u201d control2=\u201cdeploypath\u201d>CP.AWSHost.d11<\/Assy>","<VirtualDirectory>\/AWS\/<\/VirtualDirectory>","<Port mgtStyle=\u201cIPPort\u201d desc=\u201cset to 80 if IIS not running so we look like normal web service without IIS\u201d>8282<\/Port>","<PhysicalDirectory type=\u201cpath\u201d path=\u201cSystem\/install\/ASFDir\u201d param2=\u201cCP\/CP.AWSHost\/\u201d control2=\u201cdeploypath\u201d>|<\/PhysicalDirectory>\n\n","<ProcClass type=\u201casfpluginclass\u201d>AWSHostProvider. AWSHostService<\/ProcClass>","<Assy type=\u201cassembly\u201d path=\u201cSystem\/install\/ASFDir\u201d param2=\u201cCP\/CP.AWSHost\/\u201d control2=\u201cdeploypath\u201d>CP.AWSHost_NEW|.d11<\/Assy>","<VirtualDirectory>\/AWS\/<\/VirtualDirectory>","<Port mgtStyle=\u201cIPPort\u201d desc=\u201cset to 80 if IIS not running so we look like normal web service without IIS\u201d>8282<\/Port>","<PhysicalDirectory type=\u201cpath\u201d path=\u201cSystem\/install\/ASFDir\u201d param2=\u201cCP\/CP.AWSHost\/\u201d control2=\u201cdeploypath\u201d><\/PhysicalDirectory>","<PortDir>[Plugin\/AWSHostService\/Port][Plugin\/AWShostService\/VirtualDirectory]<\/PortDir>","<Prefixes>http:\/\/[System\/Configuration\/IP]:[Plugin\/AWSHostService\/PortDir];http:\/\/[System\/Configuration\/Service]:[Plugin\/A<\/AWSHostService>",{"@attributes":{"id":"p-0097","num":"0127"},"figref":["FIG. 8","FIG. 7B"]},{"@attributes":{"id":"p-0098","num":"0128"},"figref":"FIG. 9","b":["900","902","904","906","906"]},"Referring to , a computer  includes a processor , a memory  and a user interface (UI)  (e.g., a mouse, a keyboard, a display, touch screen and so forth). The memory  stores computer instructions , an operating system  and data . In one example, the computer instructions  are executed by the processor  out of memory  to perform all or part of the processes described herein (e.g., processes  to ). In one embodiment, an article , such as a disk, comprises non-transitory stored instructions that enable the computer to perform at least part of the processing described above.","The processes described herein are not limited to use with the hardware and software of ; they may find applicability in any computing or processing environment and with any type of machine or set of machines that is capable of running a computer program. The processes described herein may be implemented in hardware, software, or a combination of the two. The processes described herein may be implemented in computer programs executed on programmable computers\/machines that each includes a processor, a non-transitory machine-readable medium or other article of manufacture that is readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and one or more output devices. Program code may be applied to data entered using an input device to perform any of the processes described herein and to generate output information.","The system may be implemented, at least in part, via a computer program product, (e.g., in a non-transitory machine-readable storage medium), for execution by, or to control the operation of, data processing apparatus (e.g., a programmable processor, a computer, or multiple computers)). Each such program may be implemented in a high level procedural or object-oriented programming language to communicate with a computer system. However, the programs may be implemented in assembly or machine language. The language may be a compiled or an interpreted language and it may be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program may be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network. A computer program may be stored on a non-transitory machine-readable medium that is readable by a general or special purpose programmable computer for configuring and operating the computer when the non-transitory machine-readable medium is read by the computer to perform the processes described herein. For example, the processes described herein may also be implemented as a non-transitory machine-readable storage medium, configured with a computer program, where upon execution, instructions in the computer program cause the computer to operate in accordance with the processes. A non-transitory machine-readable medium includes but is not limited to a hard drive, compact disc, flash memory, non-volatile memory, volatile memory, magnetic diskette and so forth but does not include a transitory signal per se.","It is understood that the processing for associated with implementing the system may be performed by one or more programmable processors executing one or more computer programs to perform the functions of the system. All or part of the system may be implemented as, special purpose logic circuitry (e.g., an FPGA (field programmable gate array) and\/or an ASIC (application-specific integrated circuit)).","Having described exemplary embodiments of the invention, it will now become apparent to one of ordinary skill in the art that other embodiments incorporating their concepts may also be used. The embodiments contained herein should not be limited to disclosed embodiments but rather should be limited only by the spirit and scope of the appended claims. All publications and references cited herein are expressly incorporated herein by reference in their entirety."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing features of this invention, as well as the invention itself, may be more fully understood from the following description of the drawings in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7D"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 8","FIG. 7B"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
