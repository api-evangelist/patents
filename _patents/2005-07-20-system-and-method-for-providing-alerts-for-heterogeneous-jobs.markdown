---
title: System and method for providing alerts for heterogeneous jobs
abstract: A system and method for summarizing jobs for a user group is provided. In one embodiment, a job manager is operable to invoke an alert filter. The alert filter is compatible with a plurality operating environments. One or more properties of a first job associated with a first operating environment is identified. One or more properties of a second job associated with a second operating environment is identified. The first operating environment and the second operating environment are heterogeneous. A first alert object is generated in response to a first match between the alert filter and the identified properties of the first job. A second alert object is generated in response to a second match between the alert filter and the identified properties of the second job.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07886296&OS=07886296&RS=07886296
owner: Computer Associates Think, Inc.
number: 07886296
owner_city: Islandia
owner_country: US
publication_date: 20050720
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/590,405 filed Jul. 22, 2004.","This invention relates to enterprise job scheduling and, more particularly, to a system and method for providing alerts for heterogeneous jobs.","There are numerous heterogeneous operating environments for jobs, applications or other processes. Typically, each of these operating environments comprise one of disparate operating systems including UNIX, Windows or Windows Server, Linux, z\/OS or other mainframe OS, and others. Generally, these jobs or applications, whether enterprise or consumer, are compatible or optimized for one of these heterogeneous operating systems. Some properties of these jobs are similar across the heterogeneous systems, while others are unique to each operating system, job type, or job dependencies. For example, the status property of a job residing in an enterprise job scheduler for a mainframe system may indicate one of the following example states: \u201cAbend,\u201d \u201cRequeued,\u201d \u201cJCL Error,\u201d and others. But the status of a second job residing in an enterprise job scheduler for a Unix-based system may indicate one of the following example states: \u201cExited,\u201d \u201cRunning,\u201d \u201cSuspended,\u201d \u201cFailed,\u201d and such.","This disclosure provides a system and method for summarizing jobs for a user group. In one embodiment, a job manager is operable to invoke an alert filter. The alert filter is compatible with a plurality operating environments. One or more properties of a first job associated with a first operating environment is identified. One or more properties of a second job associated with a second operating environment is identified. The first operating environment and the second operating environment are heterogeneous. A first alert object is generated in response to a first match between the alert filter and the identified properties of the first job. A second alert object is generated in response to a second match between the alert filter and the identified properties of the second job.","The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Particular features, objects, and advantages of the disclosure will be apparent from the description and drawings and from the claims.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","100","142","142","140","144","142","100","150","106","100","150","106","106","106","106","142","100"],"i":["a ","b "]},"At a high level, system  is all or a portion of the enterprise that includes or is communicably coupled with server , one or more clients  (e.g., clients , , , and , etc.), and a plurality of heterogeneous operating environments . For example, system  may be associated with the entire enterprise, a geographical or logical location within the enterprise, or any other portion of the enterprise. It will be understood that the enterprise may be a corporation, non-profit organization, government agency, or any other person or entity that includes, utilizes, or receives the results from multiple computing devices and operating, environments . In other words, job management system  is typically a distributed client\/server system that allows users of clients  to submit jobs  (e.g., lobs , , , etc.) for execution on any of the plurality of operating environments . But system  may be any other suitable environment without departing from the scope of this disclosure. Generally, \u201cdynamically,\u201d as used herein, means that certain processing is determined, at least in part, at run-time based on one or more variables. Whereas the term \u201cautomatically,\u201d as used herein, generally means that appropriate processing is substantially performed by at least part of job management system . It should be understood that \u201cautomatically\u201d further contemplates any suitable administrator or other user interaction with system  without departing from the scope of this disclosure.","Returning to the illustrated embodiment, system  includes, invokes, executes, references, or is communicably coupled with a plurality operating environments . Each operating environment  is any system or subsystem operable to at least partially or fully execute or process jobs . For example, each operating environment  is one of a plurality of heterogeneous environments including Unix, Linux, Windows, or mainframe environments, as well as others. In another example, an operating environment  may represent a particular application. Moreover, each operating environment  may include one server or may be distributed across a plurality of computers. For example, illustrated system  includes three operating environments , , and respectively. In this example, first operating environment is server environment executing UNIX, second operating environment is a mainframe environment executing z\/OS, and third operating environment is a distributed processing environment including a plurality of clients executing Windows. In another example, two operating environments  may be executing the same operating system, but may include different storage capabilities, file systems, or computing devices. In yet another example, two operating environments  may be substantively similar or identical, except for executing two disparate cyclical releases or versions of the same operating system. As illustrated in , each operating environment  typically includes one or more job schedulers , each of which may be tailored to, designed for, or at least partially compatible with job executing in the associated operating environment . In this case, \u201coperating environment \u201d and \u201cjob scheduler \u201d may be used interchangeably as appropriate. Of course, illustrated operating environments  are for example purposes only. Indeed, while illustrated separately, server  may represent, include, or execute one of the operating environments  or one of the operating environments  may include or utilize server  without departing from the scope of the disclosure.","Illustrated server  includes memory  and processor  and comprises an electronic computing device operable to receive, transmit, process and store data associated with system . For example, server  may be any computer or processing device such as, for example, a blade server, general-purpose personal computer (PC), Macintosh, workstation, Unix-based computer, or any other suitable device. Generally,  provides merely one example of computers that may be used with the disclosure. For example, although  illustrates one server  that may be used with the disclosure, server  can be implemented using computers other than servers, as well as a server pool. Server  may be adapted to execute any operating system including Linux, UNIX, Windows Server, z\/OS or any other suitable operating system. But, the present disclosure contemplates servers other than general purpose computers as well as servers without conventional operating systems. According to one embodiment, server  may also include or be communicably coupled with a web server and\/or a data server.","Memory  may include any memory or database module and may take the form of volatile or non-volatile memory including, without limitation, magnetic media, optical media, random access memory (RAM), read-only memory (ROM), removable media, or any other suitable local or remote memory component. In the illustrated embodiment, illustrated memory  includes job objects , alert filter objects , and alert objects , but may also include any other appropriate data such as a job history, normalization policies, a security or audit log, print or other reporting files, HTML files or templates, and others. Job objects  are representations of enterprise jobs and their associated properties. These jobs may be update or report batch jobs, database processing utilities, commands, or other tasks. Each job object  comprises at least a mapping of property names to values that represent the parameters, variables, output format, or other details of the associated job. For example, job object  typically comprises at least a job identifier and a pointer or other reference to the appropriate or associated operating environment . The environment pointer may be automatically, dynamically, or manually populated based on operating system compatibility, data storage location, application, utilization, priority, department or business rules, geography, other criteria or characteristics, or any combination thereof. In another example, each job object may include job predecessor, job successor, triggers, calendar, VRM requirements, dataset predecessors, user requirements, and network predecessors. In certain embodiments, the constituent data may be dynamically populated based on the particular type of job. For example, in the case of a distributed job, job object  may include two or more identifiers of the associated operating environments, while a standalone job merely includes one environment pointer. Job object  may be in any appropriate logical or physical format including an executable, a Java object, text, Structured Query Language (SQL), eXtensible Markup Language (XML), and such. Indeed, job object  may be a default job or a particular instance of a job as appropriate. Moreover, job object  may be keyed on or associated with a user, a user or security group, a department, or any other variable or property. In addition, job object  may include normalized properties or any properties operable to be normalized.","Alert filter objects  include any parameters, variables, algorithms, instructions, rules, objects or other directives for filtering transitions of jobs  to specific states in heterogeneous operating environments . For example, alert filter object  may be used to identify jobs objects  whose properties have transitioned to or from specified states and to generate alert objects  in response to an event. Such an event may include completion of a specific job or jobset, failure of a specific job or jobset, failure rate of a job type exceeding a threshold, or any other suitable event. As a result, alert filter objects  may provide a non-intrusive way to generate alerts based on the state of jobs and other objects in associated job schedulers. In some embodiments, alert filter objects  may comprise one or more tables stored in a relational database described in terms of SQL statements or scripts. In another embodiment, alert filter objects  may store or define various data structures such as Java objects, text files, XML documents, comma-separated-value (CSV) files, internal variables, SQL, or one or more libraries. An alert filter object  may comprise one table, file, or object or a plurality of tables, files, or objects stored on one computer or across a plurality of computers in any appropriate format. Moreover, alert filter objects  may be local or remote without departing from the scope of this disclosure and store any type of appropriate data. Alert filter objects  may be dynamically created by server , a third-party vendor, or any suitable user of server , loaded from a default file, or received via network . In the case of a user creating alert filter object , the user may be able to view alerts from jobs  that match specified criteria across operating environments . In other words, the user may be able to limit alerts that are processed and\/or presented by server  to those relevant to the user's task regardless of the particular processing environment, operating environment, or application. Alert filter object  may be associated with a specific job, a type of job, a job-scheduler type, a specific operating environment , a specific job scheduler, or other suitable elements in the enterprise.","In the illustrated embodiment, each alert filter objects  implements filtering directives using filter criteria  and includes an alert template  for generating alert objects . In some embodiments, filter criteria  are compared to job properties encapsulated in job objects  in order to determine matches. Filter criteria  typically includes one or more values that are compared against one or more job properties (e.g., status) contained in job objects . In some embodiments, prior to comparing with filter criteria , server  may normalize the one or more job properties. In this case, the filter criteria  may be compared with job properties from heterogeneous operating environments . For example, one or both of the job properties indicating a job failure from mainframe operating environment and UNIX-based operating environment , respectively, may both be converted to the normalized property \u201cFailure.\u201d After normalization, server  may compare filter criteria  to the normalized job properties from both operating environments and for determining whether to generate alert objects for each operating environment . In the case that the job properties are not normalized, filter criteria  may be associated with a specific job scheduler and\/or operating environment . For example, filter criteria  may be associated with UNIX-based operating environment and may only be used to generate alerts for that operating environment . Filter criteria  may include values to match against one or more of the following properties: name of job, name of jobset, status of job, name of operating environment , or others. In some embodiments, filter criteria  includes one or more tuples for comparing with job properties. Alert filter object  may require that all tuples are matched or one or more tuples are matched before associated alert objects  are generated. Each tuple may include a property name, an operator, and a value. (discussed in more detail below) In this case, the operator instructs server  how to compare the value with the associated job property. For example, the operator may be a greater than sign indicating that filter criteria  matches a job property if the job property exceeds the value. The operator may be an equal to sign, a less than sign, a greater than or equal sign, a less than or equal to sign, or any other logical or mathematical operator. In the event that filter criteria  is matched, server  may use alert template  to generate alerts representing transitions of job states. Alert template  may comprise a script, executable, template or any other suitable description such that server  may quickly instantiate an appropriate alert object . In some embodiments, alert template  is a class definition for one or more alert object . In other words, alert template  may include properties that are used to efficiently create, instantiate, or invoke one or more alert objects . The properties included in template  may be determined by a user of system  and\/or a process running in system . In some embodiments, a user of system  selects or inputs these properties through GUI  when generating alert filter object .","Typically based on alert template , server  instantiates at least one alert object . Alert objects  are representations of enterprise alerts and their associated properties. As discussed above, the alerts may be a transition in a job state such as, for example, success of a specific job or jobset, failure of a specific job or jobset, or other events. Each alert object  typically comprises a mapping of property names to values that represent the parameters, variables, or other details of the associated alert. For example, alert object  typically includes at least a job identifier and a pointer or other reference to the appropriate or associated operating environment . In some embodiments, each alert object  includes one or more the following properties: identification number, class name, severity level, queue name, timestamp, description, and others. In certain embodiments, the constituent data may be dynamically populated based on the particular type of alert. For example, in the case of a jobset, alert object  may include two or more job identifiers. Alert object  may be in any appropriate logical or physical format including an executable, a Java object, text, SQL, XML, and such. For example, alert object  may be an instantiated object based on a class defined in any appropriate object-oriented programming language such as C++, Java, or any other suitable language.","Server  also includes processor . Processor  executes instructions and manipulates data to perform the operations of server  such as, for example, a central processing unit (CPU), a blade, an application specific integrated circuit (ASIC), or a field-programmable gate array (FPGA). Although  illustrates a single processor  in server , multiple processors  may be used according to particular needs and reference to processor  is meant to include multiple processors  where applicable. In the illustrated embodiment, processor  executes job manager , which performs at least a portion of the management of heterogeneous jobs  and\/or the normalization of their properties.","Job manager  could include any hardware, software, firmware, or combination thereof operable to allow users access to operating environments , submit jobs , query the status or other job properties, normalize some or all of these properties, or any other appropriate job management processing. For example, job manager  may be written or described in any appropriate computer language including C, C++, Java, J#, Visual Basic, assembler, Perl, any suitable version of 4GL, another language, or any combination thereof. It will be understood that while job manager  is illustrated in  as a single multi-tasked module, the features and functionality performed by this engine may be performed by multiple modules. For example, job manager  may be a job scheduler and a plurality of adapters  (see ). In another example, job manager  may comprise a connection listener , a request controller  communicably coupled with a plurality of job parsers and managers, a view controller , a session manager , a template manager , an adapter manager , and a profile manager  (as shown in more detail in ). Further, while illustrated as internal to server , one or more processes associated with job manager  may be stored, referenced, or executed remotely such as GUI  and one or more agents residing in the appropriate operating environments . Moreover, job manager  may be a child or sub-module of another software module (not illustrated) without departing from the scope of this disclosure. In certain embodiments, job manager  may include or be communicably coupled with an administrative workstation  or graphical user interface (GUI) through interface . In these embodiments, job manager  may run as a persistent process (e.g., a daemon or service) operable to listen on a particular port through or in interface .","Server  may also include interface  for communicating with other computer systems, such as clients , over network  in a client-server or other distributed environment. In certain embodiments, server  receives job submissions or customizations from internal or external senders through interface  for storage in memory  and\/or processing by processor . Generally, interface  comprises logic encoded in software and\/or hardware in a suitable combination and operable to communicate with network . More specifically, interface  may comprise software supporting one or more communications protocols associated with communications network  or hardware operable to communicate physical signals.","Network  facilitates wireless or wireline communication between computer server  and any other local or remote computer, such as clients . Illustrated network  comprises two sub-nets or virtual LANS, and , respectively. Indeed, while illustrated as two networks, network  may be a continuous network without departing from the scope of this disclosure, so long as at least portion of network  may facilitate communications between job manager  and one or more of the operating environments . In other words, network  encompasses any internal or external network, networks, sub-network, or combination thereof operable to facilitate communications between various computing components in system . Network  may communicate, for example, Internet Protocol (IP) packets, Frame Relay frames, Asynchronous Transfer Mode (ATM) cells, voice, video, data, and other suitable information between network addresses. Network  may include one or more local area networks (LANs), radio access networks (RANs), metropolitan area networks (MANs), wide area networks (WANs), all or a portion of the global computer network known as the Internet, and\/or any other communication system or systems at one or more locations.","Client  is any local or remote computing device operable to receive job submissions  and present output (such as properties or reports) via a GUI . At a high level, each client  includes at least GUI  and comprises an electronic computing device operable to receive, transmit, process and store any appropriate data associated with system . It will be understood that there may be any number of clients  communicably coupled to server . For example, illustrated clients  include one directly coupled client  and two communicably coupled clients to the illustrated server . Further, \u201cclient ,\u201d \u201cjob owner,\u201d and \u201cuser\u201d may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover, for ease of illustration, each client  is described in terms of being used by one user. But this disclosure contemplates that many users may use one computer or that one user may use multiple computers to submit or review jobs  via GUI . As used in this disclosure, client  is intended to encompass a personal computer, touch screen terminal, workstation, network computer, kiosk, wireless data port, wireless or wireline phone, personal data assistant (PDA), one or more processors within these or other devices, or any other suitable processing device or computer. For example, client  may comprise a computer that includes an input device, such as a keypad, touch screen, mouse, or other device that can accept information, and an output device that conveys information associated with the operation of server  or clients , including digital data, visual information, or GUI . Both the input device and output device may include fixed or removable storage media such as a magnetic computer disk, CD-ROM, or other suitable media to both receive input from and provide output to users of clients  through the display, namely GUI .","GUI  comprises a graphical user interface operable to allow the user of client  to interface with at least a portion of system  for any suitable purpose. Generally, GUI  provides the user of client  with an efficient and user-friendly presentation of data provided by or communicated within system . For example, GUI  may be a front-end of job manager  and provide functionality to monitor jobs and alerts, as well as a summary of the jobs and alerts. GUI  may provide an alternate to a Business Scheduling View (BSV) graphical interface for monitoring. Further, GUI  may help the user by providing certain advantages including ease-of-use, compatibility with Java and non-Java browser platforms, and performance. Conceptually, the user logs into job manager  through GUI , which then presents a list of jobs or job schedulers . By selecting a particular job scheduler, GUI  displays the list of active jobs on that scheduler with the appropriate normalized or raw properties. Using GUI , the user can define filters in order to configure his (or his group's) view to a specific set of jobs and\/or job properties. After configuration, the user can save this view for later reuse. When a view is saved for later use, it may show up on a list of available, pre-configured views during login. This feature may give the user the ability to quickly see the same type of information from where he left off last time. Alternatively, the user can start on a new view by selecting from the list of job schedulers in the view. From an example \u201cJob Status\u201d view, the user can select a job  and zoom into its details, thereby easily locating or viewing the specific properties for each desired job . The user can also manage job  using this particular view of GUI . For example, the user can start, stop, or suspend the job, often according to the particular job scheduler  capabilities. In addition to the Job Status view, GUI  may provide \u201cAlert\u201d and \u201cDashboard\u201d views. The example Alert view may show alerts that have been generated by job manager  or job scheduler  in response to a particular filter. In the Alert view, the alert objects  may be sorted based a property. For example, when displayed via GUI  in a tabular format, alert objects  may be sorted according to the severity level property or column. In the event that the number of alert objects  is large, the Alert view may provide a scrolling function to enable a user to scroll between alert objects . In addition, the user of GUI  may perform actions on alert objects . For example, the Alert view may enable a user to acknowledgement and closure actions allowing the user or application to acknowledge or close alarms. In this example, the state property of an alarm object may start as open, until it is acknowledged or closed. The example Dashboard view may provide a statistical summary of the jobs and alerts. Moreover, the filters may be applied in the Dashboard view to set the overall severity level of the view. When multiple filters are applied to the Job Status, Alert, or Dashboard views, information from various heterogeneous job schedulers may be collected into one view. This view shows the selected job and all its direct dependencies including its immediate predecessors, successors, triggers, resource and other requirements, and the current status of each. The consolidated data is often presented in a single way in an example \u201cEnterprise\u201d view. Thus, the Job Status, Alert and Dashboard views (as well as others) may be types or children of certain Enterprise views. Another view may be a Map view, which graphically displays the details of a selected job or jobset. Yet another view may be a Server Configuration view, in which the administrator or other authorized user can add, edit, and delete servers or operating environments  that are available to job manager . This view does not typically create back-end servers. Instead, it creates or populates the configuration information to access the environments  based on information supplied by the user. Of course, this configuration information may be automatically retrieved, received, or polled as appropriate. Each view may be static and or dynamic as appropriate. Generally, static views do not change over time, while dynamic views automatically change at a regular update interval or dynamically update according to other criteria. In certain embodiments, GUI  may also present a \u201cCredentialed User\u201d view, allowing the user or administrator to add, edit, and delete credentialed users. The credentialed user information provides login credentials to back-end servers or operating environments . Credentialed users are set up to simplify access to the back-end servers\/environments  and to provide an additional level of security. The portal user ID may be used as a key to access the credentialed user information. In addition to the portal user ID, the system administrator can set an environment password, which can be different than the Portal password. This feature is for users who have access to multiple back-end servers with the same user ID but different passwords for each. In addition, for each user ID in the credentialed user information, an alias ID can be established. The alias ID can be either a group ID (one-to-many or many-to-one) or can be a user's personal ID for the back-end server. The alias ID has an associated password for the back-end server. In addition, a group user\/group ID can be set to provide the credentials.","Regardless of the particular view or data, GUI  may comprise a plurality of customizable frames or windows having interactive fields, pull-down lists, and buttons operated by the user. In one embodiment, GUI  presents information associated with jobs , including job status, and associated buttons and receives commands  from the user of client  via one of the input devices. This information may be presented in tabular, graphical, and any other suitable format. Moreover, it should be understood that the term graphical user interface may be used in the singular or in the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore, GUI  contemplates any graphical user interface, such as a generic web browser or touch screen, that processes information in system  and efficiently presents the results to the user. Server  can accept data from client  via the web browser (e.g., Microsoft Internet Explorer or Netscape Navigator) and return the appropriate HTML or XML responses using network . For example, server  may receive a job submission from client  using the web browser, execute the particular job  in the appropriate operating environment , and present the results in the web browser.","In one aspect of operation, a user logs into job manager  using GUI  and is presented with the following example functionality or views: Administration, Monitoring, Configuration, and Event Management. Both the Administration and Monitoring views normally includes an applet deployed in an HTML page. The Configuration view is provided by a series of HTML pages that communicate with a Configuration servlet or process. The applets graphically display the objects defined in the job management system. The applet communicates with the appropriate servlet or process to send and receive data to the job management system. Event Management provides web-enabled access to the log facility. Job manager  may use the Jacada Terminal Emulator (JTE) to provide host emulation capabilities. In certain embodiments, the user may be provided access to certain functionality based on assignments to Portal workgroups. Based on the particular functionality selected by the user, job manager  may invoke a particular module from a Server\/Web Server tier. This example level includes applets, servlets, servlet engines, and adapters.","Each servlet serves as a central point of communication and management between the GUI  (Applet and\/or Portlet) and the one or more operating environments . The servlet is generally operable to expose a callable interface to GUI  to allow the end-user to configure and monitor jobs. The servlets, in turn, are operable to forward those calls into the various adapters that link with the particular environment . The servlets may be further operable to control client sessions. This session control typically involves session management, authentication, and persistency. As described in more detail in the embodiments of , each individual adapter  communicates with the servlets and the associated operating environment  and\/or job scheduler . Adapters  encapsulate the user command into an object  it for the particular operating environment  and\/or job scheduler . After any suitable amount of processing or job management, job scheduler  communicates output or job details to job manager  via the appropriate adapter  (perhaps in response to worry or at automatically upon completion or error).","At this point, adapter  may contain unmodified or native data from each job scheduler . However, normalization profiles may give the user, administrator, or job manager  the ability to generate, select, or otherwise identify a set of normalized properties to be shown from the possible properties of the various types of jobs and operating environments . Job manager  may then utilize one or more normalization profiles, which in this example includes a plurality of job status property objects, to normalize the encapsulated job properties. Job manager  applies the job status property objects on each set of jobs in the results  (e.g., results , , , etc.). The outcome of this process is a set of values, for each job, that are ordered and normalized as needed. This information may be used to generate job objects . It could also be displayed in a tabular format at this point for the convenience of the user using GUI . In short, there is no specific limitation on how the resulting set of values may be displayed or stored.","The generated job objects  may also be filtered or monitored for alerts. For example, system  may generate an alert when a specific jobset is successfully completed. As a result of alert filtering, a user may view alerts that are relevant to the user's tasks. In response to a request from the user, job manager  identifies one or more alert filter objects  using the request. In the jobset example, job manager  may identify an alert filter object  associated with a job scheduler  that is processing the jobset. The user may communicate a request to job manager  by making a selection through GUI . The request may include information that identifies or is operable to identify one or more alert filter objects . In some embodiments, job manager  identifies a single alert filter object  operable to filter alerts from two or more heterogeneous operating environments . After identifying the one or more alert filter objects , job manager  selects one or more job objects  using the one or more identified alert filter objects . For example, alert filter object  may include information that matches or is operable to match a specific job, job type, jobset, all jobs, or other groups of jobs. Using such information, job manager  collects or processes one or more job objects  using the one or more alert filter objects . Returning to the jobset example, job manager  select job objects  because they contain a reference identifying the specific jobset. Moreover, job manager  may identify one or more job properties for each job object . In the example, job manager  identifies the job status of each identified job object  for determining their success. Job manager  identifies alert filter criteria  for filtering job objects  for alerts. In some embodiments, alert filter criteria  comprise a tuple. In this case, the tuple may include a property name, operator, and a value. Turning to the jobset example, alert filter criteria  includes the following tuple: Job Status, =, and Success. Job manager  then compares the identified job properties with associated alert filter criteria . In the case of tuples, job manager  may then compare the value to the identified job property in accordance with the operator. For example, job manager  may determine whether the job property equals the value. As in the jobset example, job manager  determines whether the job status of each identified job object  is equal to \u201cSuccess.\u201d In the event of a match, job manager  identifies alert template  and instantiates alert object . In the jobset example, job manager  instantiates an alert object  representing that the jobset was successfully executed by the associated job scheduler .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 2A-E","b":["100","106","130","137","106","135","130","135","137"]},"Each adapter  is an object or other module that encapsulates one or more types of job schedulers . Adapters  may be written or described in any particular format or programming language. For example, adapter  may be a Java object. Regardless of the particular format, adapter  is generally operable to provide APIs to job manager  for communication with each job scheduler  to manage and monitor job information. Put another way, adapter  may be logically located between job manager  and at least the associated job scheduler , thereby allowing job manager to be communicably coupled with the job scheduler . In certain embodiments, each adapter  may provide this compatibility by invoking, including, exposing, or executing one or more of the following example methods:",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name-","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["List getJobStatus(List filters )","Returns the job status data according"]},{"entry":[{},"to the given filters"]},{"entry":["Job getJobDetails(Map params )","Returns the job details"]},{"entry":["void updateJobDetails(Job job )","Updates the job details"]},{"entry":["List getRunLog( RunLogFilter","Returns the run log data according to"]},{"entry":["filter )","the given filter"]},{"entry":["List getPriorRun( PriorRunFilter","Returns the prior run data according to"]},{"entry":["filter )","the given filter"]},{"entry":["void actionJob(Job job, Map","Perform action on the specified job"]},{"entry":"params )"},{"entry":["List getJobPreds(Job job, Map","Returns the job predecessors of the"]},{"entry":["params )","specified job"]},{"entry":["List getJobVRMs(Job job, Map","Returns the job VRMs of the specified"]},{"entry":["params )","job"]},{"entry":["void actionVRM(VRM vrm,","Perform action on the specified job"]},{"entry":["Map params )","VRM"]},{"entry":["void actionPred(Pred pred, Map","Perform action on the specified job"]},{"entry":["params )","predecessor"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"There may be any number of adapters , each compatible with any appropriate number of job schedulers . For example, system  may include a mainframe job adapter  that provides APIs to allow communication with a mainframe-based job scheduler . These APIs allow the caller to read and write to different objects that exist within the mainframe job scheduler . These objects may include jobs, calendars, datasets, ARFSets, ARFs, JCL, triggers and predecessors. In another example, system  may include a distributed job adapter  that provides APIs to allow communication with a distributed job scheduler . This example distributed job scheduler  may run on any distributed platform such as Windows and Unix-based operating systems. As with the mainframe adapter , the APIs allow the caller to read and write to different objects (such as jobs, calendars and global variables) that exist within the distributed job scheduler .","Job scheduler  is any executable, routine, service, daemon, or other module or process that is operable to execute, monitor, or otherwise manage jobs  in at least one operating environment . Typically, job scheduler  is associated with a particular type, format, or compatibility of job . But, as illustrated in the various embodiments, any job scheduler  may be also be configured to run as a more varied job scheduler or even a master job scheduler  managing a plurality of slave job schedulers . Moreover, while job scheduler  is illustrated as residing within a particular operating environment , it will be understood that is for example purposes only and merely illustrates that job scheduler  is associated with the particular environment . Indeed, job scheduler  may be distributed across a plurality of environments, computers, or data stores, without departing from the scope of the disclosure. Job scheduler  may be proprietary, off-the-shelf, customized, or any other type of job scheduler. Moreover, enterprise  may purchase, download, or otherwise obtain job scheduler  using any appropriate technique.","For example,  illustrates at least a portion of system  that includes server  communicably coupled to first and second operating environments . In this example, each operating environment  includes one job scheduler , each operable to manage jobs  for that particular operating environment . Job manager , illustrated as executing on server , is communicably coupled to first job scheduler through a first adapter and to second job scheduler through a second adapter . But, as illustrated in the respective figures, adapters  may reside on server  and\/or the associated operating environment  as appropriate. For example, as illustrated in , job manager  locally includes, loads, or otherwise invokes adapter for executing job , receiving or retrieving job status , or other communications, commands, instructions, and such to first job scheduler . In another example, as illustrated in , one or more of the adapters  may act as an agent, service, or daemon residing within the operating environment  for the appropriate job scheduler . In this example, job manager  may invoke or interact with remote adapter  using a particular port, socket, or method. In yet another embodiment, illustrated in , job manager  may include one of the job schedulers  operable to schedule heterogeneous jobs  to a plurality of operating environments . In this embodiment, job manager  may be considered a logical all-in-one module with internal job scheduling, adapting, and normalizing processes and capabilities.","As illustrated in , a particular job scheduler  or other application (job manager  or other non-illustrated application) may be designed or implemented as a \u201cmetascheduler\u201d () that caters to more than one type of job  or is compatible with more than one operating environment . In this scenario, job scheduler can manage heterogeneous jobs on different platforms, operating systems, or other environments . When job scheduler provides the information about such jobs, it may automatically normalize the properties of these jobs. As illustrated, the \u201cmetascheduler\u201d could also control subordinate schedulers and , respectively. \u201cMetascheduler\u201d may be operable to consolidate and normalize the information obtained from the subordinates and as appropriate.","In one aspect of operation, illustrated in , when retrieving the details or properties of jobs, adapter  communicates with the job scheduler  to get the raw values of these job properties. After adapter  receives the information, it then translates and normalizes certain properties into a common set of values. In particular, the status property of job  is mapped from the set of job scheduler-specific values into a common or customized set of values. In some cases, more than one raw value may be used to map to the common set of values. For example, a mainframe job may include three properties that determine the normalized job status value. These example properties are: queue name, status and specific status. In this example, the raw values are used in combination to map to a common normalized value.",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Normalized","Mainframe Raw Value","Windows\/Unix Raw"]},{"entry":["Value","(Queue\/Status\/Specific Status)","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Running","ACT\/any status except WARN\/any","Running"]},{"entry":[{},"specific status"]},{"entry":["Waiting","REQ\/any status except WARN or","Starting,"]},{"entry":[{},"ERRX\/any specific status except","Inactive, Activated,"]},{"entry":[{},"RESTART","Queue Wait"]},{"entry":[{},"RDY\/any status except WARN\/"]},{"entry":[{},"any specific status"]},{"entry":["Success","CMP\/any status except CANCEL\/any","Success"]},{"entry":[{},"specific status"]},{"entry":["Failure","REQ\/ERRX\/any specific status","Failure"]},{"entry":[{},"REQ\/any status\/RESTART"]},{"entry":["Cancel","CMP\/CANCEL\/any specific status","Terminated"]},{"entry":["Restart",{},"Late to Start"]},{"entry":["On Hold","REQ\/WARN\/HOLD","Hold"]},{"entry":["Late to","REQ\/WARN\/any specific status"]},{"entry":["Start","RDY\/WARN\/any specific status"]},{"entry":["Running","ACT\/WARN\/any specific status"]},{"entry":"Late"},{"entry":["Inactive","FOR\/any status\/any specific status"]},{"entry":["Unknown","other values or combinations","other values"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["130","135","166","135","137","130","116"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 3","b":["130","130","304","308","314","318","320","322","324","130"]},"Connection listener  is any module, library, object, or other process operable to listen (such as on a known port(s)) for connections from clients . For example, connection listener  may include or implement the following example properties:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"portList","List of server ports"]},{"entry":[{},"serverSocketList","List of server sockets"]},{"entry":[{},"connectionThreadManager","Connection thread manager"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"304"},{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void init( )","Initialize the server listener"]},{"entry":[{},"void destroy( )","Destroy the server listener"]},{"entry":[{},"void addPort(int portNumber)","Add a listener port"]},{"entry":[{},"void removePort(int portNumber)","Remove a listener port"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["304","302","302","302","130","104","302"]},{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"threadList","List of connection threads"]},{"entry":[{},"workerPool","Worker pool"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["void init( )","Initialize the manager"]},{"entry":["void destroy( )","Destroy the manager"]},{"entry":["void addConnection(Socket","Add a new socket connection and instantiate"]},{"entry":["socket)","a connection thread to handle it"]},{"entry":["void","Destroy the socket connection thread"]},{"entry":"destroyConnection(Socket"},{"entry":"socket)"},{"entry":["void sendMessage","Send a message to the first available"]},{"entry":["(ResponseMessage msg)","connection"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["104","306"]},"Worker pool  is any object or data structure representing the pool of worker threads. Generally, each worker thread object represents a thread that can perform a particular task. For example, the worker thread may accept a unit of work and perform or execute it. When the task is completed, the worker is typically released back into worker pool . Worker threads are handed out to perform tasks on behalf of client . In certain embodiments, worker pool  can be configured to start with a particular number of threads and automatically grow to handle higher loads as necessary. Worker pool  may include the following example properties:",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"workerThreadList","List of worker threads"]},{"entry":[{},"connectionPool","Connection pool"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["void process( RequestMessage message)","Process the given request"]},{"entry":[{},"message"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["306","308"]},"Request controller  is any module, object, or other process operable to route incoming messages to the appropriate objects  and . For example, the message may first be sent to the appropriate parser object  so that the message may be parsed into a request object. There may be many kinds of request objects, such as one for each type of request. For example, the following table illustrates a number of example request objects:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Type","Parameter","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Server Connect","server","Name of server"]},{"entry":[{},"user","User name credential"]},{"entry":[{},"password","Password credential"]},{"entry":["Server Disconnect","server","Name of server"]},{"entry":["Get Job Status","server","Name of server"]},{"entry":[{},"view","Name of job status view"]},{"entry":["Scroll Job Status","view","Name of job status view"]},{"entry":[{},"scroll size","Scrolling size"]},{"entry":[{},"scroll direction","Direction (forward or back)"]},{"entry":["Sort Job Status","view","Name of job status view"]},{"entry":[{},"property","Which property to scroll by"]},{"entry":[{},"direction","Ascending or descending"]},{"entry":["Save Job Status","view","Name of job status view"]},{"entry":[{},"old view name","Previous name of job status"]},{"entry":[{},{},"view (if any)"]},{"entry":[{},"other parameters","Other configuration"]},{"entry":[{},{},"parameters"]},{"entry":["Delete Job Status","view","Name of job status view"]},{"entry":["Get Job Details","job name","Name of job"]},{"entry":[{},"server","Server name"]},{"entry":[{},"job number","Job number"]},{"entry":[{},"job properties","Other job parameters"]},{"entry":["Update Job Details","job name","Name of job"]},{"entry":[{},"server","Server name"]},{"entry":[{},"job number","Job number"]},{"entry":[{},"job properties","Other job parameters"]},{"entry":["Job Action","job name","Name of job"]},{"entry":[{},"server","Server name"]},{"entry":[{},"job number","Job number"]},{"entry":[{},"job properties","Other job parameters"]},{"entry":[{},"action properties","Action parameters"]},{"entry":["Get Run Log","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":["Save Run Log","view","View name"]},{"entry":[{},"old view name","Previous name of run log"]},{"entry":[{},{},"view, if any"]},{"entry":["Delete Run Log","view","Delete the run log view"]},{"entry":["Get Prior Run","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":["Save Prior Run","view","View name"]},{"entry":[{},"old view name","Previous name of prior run"]},{"entry":[{},{},"view, if any"]},{"entry":["Delete Prior Run","view","Delete the prior run view"]},{"entry":["Get Alerts","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":["Update Alerts","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":[{},"alert properties","Alert properties"]},{"entry":[{},"filter properties","Filter properties"]},{"entry":["Alert Action","alert properties","Alert properties"]},{"entry":[{},"action parameters","Parameters to alert action"]},{"entry":["Get Dashboard","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":["Update Dashboard","server","Server name"]},{"entry":[{},"view","View name"]},{"entry":[{},"dashboard properties","Dashboard properties"]},{"entry":[{},"filter properties","Filter properties"]},{"entry":["Open session",{},"Create new session"]},{"entry":["Close session","session ID","Destroy session"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"requestId","Request ID"]},{"entry":[{},"session","Session"]},{"entry":[{},"response","Response to this request, if any"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["int getRequestId( )","Returns the request ID"]},{"entry":["void setRequestId( int id )","Sets the request ID"]},{"entry":["Session getSession( )","Returns the session"]},{"entry":["void setSession( Session","Sets the session"]},{"entry":"session )"},{"entry":["IResponse getResponse( )","Returns the response associated with this"]},{"entry":[{},"request, if any"]},{"entry":["void setResponse(","Sets the response"]},{"entry":"IResponse response )"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["310","310","310","310"]},{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JobStatusParser","Parses requests pertaining to job status"]},{"entry":["JobDetailsParser","Parses requests pertaining to job details"]},{"entry":["JobActionsParser","Parses requests pertaining to job actions"]},{"entry":["ServerParser","Parses requests pertaining to server actions"]},{"entry":["OEParser","Parses requests pertaining to operating environment"]},{"entry":[{},"specific objects"]},{"entry":["AlertParser","Parses requests pertaining to alerts"]},{"entry":["DashboardParser","Parses requests pertaining to dashboard"]},{"entry":["SessionParser","Parses requests pertaining to session"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"310"},{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Parser","Request Message"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"JobStatusParser","Get Job Status"]},{"entry":[{},{},"Scroll Job Status"]},{"entry":[{},{},"Sort Job Status"]},{"entry":[{},{},"Save Job Status"]},{"entry":[{},{},"Delete Job Status"]},{"entry":[{},"JobDetailsParser","Get Job Details"]},{"entry":[{},{},"Update Job Details"]},{"entry":[{},"JobActionsParser","Job Action"]},{"entry":[{},"ServerParser","Server Connect"]},{"entry":[{},{},"Server Disconnect"]},{"entry":[{},"CA7Parser","Get Run Log"]},{"entry":[{},{},"Save Run Log"]},{"entry":[{},{},"Delete Run Log"]},{"entry":[{},{},"Get Prior Run"]},{"entry":[{},{},"Save Prior Run"]},{"entry":[{},{},"Delete Prior Run"]},{"entry":[{},"AlertParser","Get Alerts"]},{"entry":[{},{},"Update Alerts"]},{"entry":[{},{},"Alert Action"]},{"entry":[{},"DashboardParser","Get Dashboard"]},{"entry":[{},{},"Update Dashboard"]},{"entry":[{},"SessionParser","Open Session"]},{"entry":[{},{},"Close Session"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"After the request object is produced by parser object , the request is routed to one of the handler objects  for subsequent processing. The handler manager processes a request object, which often includes the object ID. Based on the request object ID and other information, the handler manager routes the request object to the correct handler object . Each handler  is responsible for processing the request using operating environment , adapters , and job schedulers  as appropriate. As with parser objects , there are typically many handler objects , such as one for each type of request. In certain embodiments, each handler  is responsible for performing or requesting the work that is requested. For example, each handler may be operable to load, invoke, or communicate with the appropriate adapter  based on the request object. As a result of its processing, a response object is produced. This response object is returned along with the request object, after processing (typically through adapter ). The following table shows an example list of handlers :",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JobStatusHandler","Processes requests pertaining to job status"]},{"entry":["JobHandler","Processes requests pertaining to job details"]},{"entry":["JobHandler","Processes requests pertaining to job actions"]},{"entry":["ServerHandler","Processes requests pertaining to server actions"]},{"entry":["OEHandler","Processes requests pertaining to OE specific objects"]},{"entry":["AlertHandler","Processes requests pertaining to alerts"]},{"entry":["DashboardHandler","Processes requests pertaining to dashboard"]},{"entry":["SessionHandler","Processes requests pertaining to the session"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Handler","Request"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"JobStatusHandler","Get Job Status"]},{"entry":[{},{},"Scroll Job Status"]},{"entry":[{},{},"Sort Job Status"]},{"entry":[{},{},"Save Job Status"]},{"entry":[{},{},"Delete Job Status"]},{"entry":[{},"JobHandler","Get Job Details"]},{"entry":[{},{},"Update Job Details"]},{"entry":[{},{},"Job Action"]},{"entry":[{},"OEHandler","Get Run Log"]},{"entry":[{},{},"Save Run Log"]},{"entry":[{},{},"Delete Run Log"]},{"entry":[{},{},"Get Prior Run"]},{"entry":[{},{},"Save Prior Run"]},{"entry":[{},{},"Delete Prior Run"]},{"entry":[{},"AlertHandler","Get Alerts"]},{"entry":[{},{},"Update Alerts"]},{"entry":[{},{},"Alert Action"]},{"entry":[{},"DashboardHandler","Get Dashboard"]},{"entry":[{},{},"Update Dashboard"]},{"entry":[{},"SessionHandler","Open session"]},{"entry":[{},{},"Close session"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["312","314","104"]},"View controller  routes a processed request object (along with its response object, if any) to the correct objects. First, the request is fed to a view manager, which is operable to generate a view for use by GUI . The view manager provides, calls, or other executes view handlers to process requests into views. For example, it may route the request to the correct view handler. There are any number of handler objects, such as one for each type of view.",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JobStatusHandler","Processes responses pertaining to job status"]},{"entry":["JobDetailsHandler","Processes responses pertaining to job details"]},{"entry":["JobActionsHandler","Processes responses pertaining to job actions"]},{"entry":["ServerHandler","Processes responses pertaining to server actions"]},{"entry":["CA7Handler","Processes responses pertaining to CA-7 specific"]},{"entry":[{},"objects"]},{"entry":["AlertHandler","Processes responses pertaining to alerts"]},{"entry":["DashboardHandler","Processes responses pertaining to dashboard"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"104"},{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Type","Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Server Connect",{},{}]},{"entry":["Server Disconnect",{},{}]},{"entry":["Get Job Status","jobStatus","Job Status object"]},{"entry":["Scroll Job Status","jobStatus","Job Status object"]},{"entry":["Sort Job Status","jobStatus","Job Status object"]},{"entry":["Save Job Status","jobStatus","Job Status object"]},{"entry":"Delete Job Status"},{"entry":["Get Job Details","Job","Job object"]},{"entry":["Update Job Details","Job","Job object"]},{"entry":["Job Action","job","Job object"]},{"entry":[{},"action returns","Other action return values"]},{"entry":["Get Run Log","RunLog","Run Log object"]},{"entry":["Save Run Log","RunLog","Run Log object"]},{"entry":"Delete Run Log"},{"entry":["Get Prior Run","PriorRun","Prior Run object"]},{"entry":["Save Prior Run","PriorRun","Prior Run object"]},{"entry":["Get Alerts","alerts","Alerts object"]},{"entry":["Update Alerts","alerts","Alerts object"]},{"entry":["Alert Action","alert","Alert object"]},{"entry":[{},"action returns","Other action return values"]},{"entry":["Get Dashboard","dashboard","Dashboard object"]},{"entry":["Update Dashboard","dashboard","Dashboard object"]},{"entry":["Open session","session","Session object"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Request","Request associated with this"]},{"entry":[{},{},"response, if any"]},{"entry":[{},"Buffer","Buffer containing response"]},{"entry":[{},"Exception","Exception, if any"]},{"entry":[{},"errorMessage","Error message, if any"]},{"entry":[{},"errorCode","Error code, if any"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IRequest getRequest( )","Returns the request associated with this"]},{"entry":[{},"response"]},{"entry":["void setRequest( IRequest","Sets the request"]},{"entry":"request )"},{"entry":["StringBuffer getBuffer( )","Returns the response buffer"]},{"entry":["void setBuffer( StringBuffer","Sets the response buffer"]},{"entry":"buffer )"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Illustrated job manager  also includes session manager . In this embodiment, session manager  is any module generally responsible for handling sessions. In other words, it creates, stores, and destroys sessions that are assigned to each unique client , often utilizing a map of the current sessions. The session typically maintains persistent information for a unique client  for the lifetime of the connection. Certain back-end objects specific to client  are stored and reachable from the client's session. In certain embodiments, session manager  implements the following example methods:",{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Session createSession( )","Creates a new session"]},{"entry":["void destroySession(","Destroy the given session"]},{"entry":"Session session )"},{"entry":["Session findSession( String","Return the session that matches the given"]},{"entry":["sessionId )","session ID, if any"]},{"entry":["void init( )","Initialize the session manager"]},{"entry":["void destroy( )","Destroy the session manager"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["318","318"]},"Template manager  may be any module operable to manage templates, which are generally stored as objects in HTML files with placeholder variables representing dynamic sections. But in certain circumstances, templates may not be complete <html> blocks. Some may represent small sections of a complete page such as a frame, table, graph, etc. At runtime, the component sections are typically replaced by the actual data. Template objects are identified by their file names. Since they are often uniquely named on the file system, there may be no need to invent a new tagging scheme to identify them. Once requested, executed, or otherwise located, a transformation of the template yields the output that is returned to the user through GUI . During startup, initialization, or at any other appropriate time, job manager  reads in or loads the desired templates. Templates are often preprocessed after they are read from the file system. Each template may be encapsulated inside an object that uses a vector. Each entry in the vector contains an internal object that is either a static portion of the template or a dynamic portion represented by a variable name. When the entries are traversed in order and printed out, the resulting output resembles the template file. This process may be called printing. The template object exposes the printing functionality with a parameter. The caller provides a map that contains variable names and values as its parameter. When the template object encounters a variable name in the vector while printing, it uses the map to resolve the variable name into a value. That value is then printed in lieu of the variable; otherwise, the variable may be deemed empty. Sometimes, template manager  executes code in response to a variable entry in the vector. The caller can register callbacks with the object for this scenario. Callbacks can be registered for specific variable name, index number, or all variables. Parameters to a callback include the current vector entry and working buffer of the printing process. Template manager  hands these objects out to transformers as necessary. Transformers can use the same template object simultaneously. In this scenario, the template object is responsible for safely supporting multiple callers.","Adapter manager  is responsible for handling adapter wrappers, often utilizing a map of adapters. The adapter wrapper encapsulates a local or back-end adapter . By providing a high-level interface layer on top of each adapter , the wrapper provides a consistent and semantic set of methods to each type of job scheduler. Typically, adapter manager  creates, stores, and destroys wrappers that are assigned to each unique back-end connection or environment . In certain embodiments, adapter manager  implements the following example methods:",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AdapterWrapper","Creates or returns the adapter"]},{"entry":[{},"getAdapter( String server )","wrapper for this server"]},{"entry":[{},"void init( )","Initialize the adapter manager"]},{"entry":[{},"void destroy( )","Destroy the adapter manager"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Profile manager  is responsible for handling profile objects such as, for example, servers, users, groups and views. In this example, the server profile object encapsulates a configured server, the user profile object encapsulates a user record, the group profile object encapsulates a Portal group record, and the view profile object encapsulates a view record. The profile manager  communicates with configuration, Portal, and its own data store to create, update and delete these objects. In certain embodiments, profile manager  includes the following example methods:",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ServerProfile getServer","Returns the server profile matching"]},{"entry":["(String serverName )","the given name"]},{"entry":["UserProfile getUser(String","Returns the user profile matching"]},{"entry":["userName )","the given name"]},{"entry":["GroupProfile getGroup","Returns the group profile matching"]},{"entry":["(String groupName )","the given name"]},{"entry":["ViewProfile getView","Returns the view profile matching the given"]},{"entry":["(String userName, String","name, that is accessible to the user"]},{"entry":"viewName )"},{"entry":["List getServers( )","Returns the list of servers"]},{"entry":["List getUsers( )","Returns the list of users"]},{"entry":["List getGroups( )","Returns the list of groups"]},{"entry":["List getViews(String","Returns the list of views that are"]},{"entry":["username )","accessible to the user"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"It will be understood that the foregoing sub-modules, properties, and methods are for illustration purposes only. Indeed, each of these sub-modules, properties, and methods may or may not be present in certain job managers . Put another way, job manager  includes any processes or data storage operable manage jobs  and may include none, some, or all of the foregoing example embodiments without departing from the scope of the disclosure.","In one aspect of operation, a flow describes a path of execution of a client request through job manager . The request typically originates from GUI  and results in a new or updated page that is returned to the browser. When the servlet receives a request, it is routed the request controller . This controller  produces a request object that encapsulates the HTTP request and response. Request controller  then forwards this object to parser manager . Parser manager  is comprised of one or more parsers. Each parser inspects the request and breaks it down into various pieces of information as appropriate. For example, the session ID and request ID are extracted. The parser may use this information to look up objects that are relevant to the request. For example, the session ID translates to a session object. When control returns to request controller  from the parser, the request object is forwarded to handler manager .","Handler manager  is comprised of one or more handlers. Based on information in the request object such as the request ID, handler manager  forwards the request to the corresponding handler. Each handler may be considered an \u201catomic\u201d piece of business logic dedicated to servicing a request. A handler often depends on other objects to accomplish its work. Some of these objects include adapters , model objects, and other manager objects. For example, when a job status handler executes, it uses the correct adapter instance  in conjunction with the job status model object to accomplish its work. When the handler finishes its work, it produces a response object. A response object can contain different pieces of information such as output data, error codes, and others. Handler manager  returns this response object to request controller .","Request controller  forwards the response object to view controller . View controller  is comprised of one or more view objects. Each object is dedicated to producing a specific view such as job status. The job status response object provides the information to the view to produce the output for the browser. Views are normally closely tied to templates. Template manager  provides HTML templates that form the basis for the output. The final output is a combination of data from a response object and a template. After the output is composed, view controller  sends it to client . Control then returns to request controller  and out of the servlet.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 4A","FIG. 4B","FIG. 4C","FIG. 4D","FIG. 4E","FIG. 4F"],"b":["142","142","150","142","402","402","130","140","144","402","106","402","404","406","404","402","404","404","402","140","137","137","106","137","130","402","137","402","1","2","1","402","2","402","142","135","1","2","137","1","2","135","130","130","144","406","144","100","144"]},"Based, at least in part, on alert definition , job manager  instantiates alert objects . Alert definition  is one example of alert template . Each alert definition  includes one or more the following properties in the table below.",{"@attributes":{"id":"p-0079","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Property","Type","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Job","String","Name of job"]},{"entry":[{},"Jobset","String","Name of jobset"]},{"entry":[{},"Status","Enum","Status of job"]},{"entry":[{},"Server","String","Name of server"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"144"},{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Property","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Class","Class of alert"]},{"entry":[{},"Queue","Name of alert queue"]},{"entry":[{},"Status","Status of alert"]},{"entry":[{},"Text","Text description for alert"]},{"entry":[{},"Severity","Severity level of alert"]},{"entry":[{},"Creation Time","Creation date-time"]},{"entry":[{},"Update Time","Last update date-time"]},{"entry":[{},"Job Properties","Other job properties to be included in alert"]},{"entry":[{},"URL","URL reference to content related to alert"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["406","144"]},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIGS. 5A-F","b":["100","116","116","116"],"i":["a","f"]},"Turning to the illustrated embodiments,  illustrates an example job requirements or job properties view . In this view , the user may be able to view or modify various properties of job  or jobset. In other words, job properties view is a graphical representation of the objects that can be included in the definition of the job. Job objects may include: job predecessor; job successor; triggers; calendar; VRM requirements; dataset predecessors; user requirements; and network predecessors. The dialog may be a modeless frame that contains a context sensitive panel for displaying the graphical view of the selected item's objects. This frame may contain a palette on the left side that has a list of objects that can be created for the selected object. On the right may be the graphical layout of the objects for the selected item. Users may have the option to drag items from the palette and drop them onto the graphical layout. Dragging and dropping an object may create a new object, but the user often fills in the properties for that object in the main view. Upon dropping the object, an icon may appear in the graphical layout. Also, the main view may select the new object and display its properties so the user may fill in any missing attributes. Until the user fills in required properties, all icons representing the new object may have a graphical design that alerts the user that the object is incomplete.","Accordingly, job properties view gives the user the ability to drag existing objects into the job properties view from the main panel's tree view. Job properties view may not allow invalid objects to be dropped and the cursor may change to a \u201cNo\u201d symbol to notify the user. When a valid object is dropped, an icon may appear in the job properties view  layout and the main view may select the dropped object and display its properties. Job properties view may always be locked onto the object that was selected when it was launched. Users may have the ability to select objects in the main view without job properties view changing. When the user is finished changing the requirements for job  or jobset, the applet may provide the option to either close the dialog or change the job properties view 's selection to edit another object's requirements. Job properties view may display a blank panel if the user deletes the selected job  or jobset from the view. When the user selects an object in job properties view , the main view may select the same object and display its properties.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 5B","b":["116","116","116","116"],"i":["b","b ","b ","b "]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 5C","b":["116","116","116"],"i":["c ","c ","c "]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIGS. 5D","b":["5","5","116","116","116","116","116","116"],"i":["d ","e","f","d ","e","f "]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIGS. 6A-6E","b":["116","116","142","100","116","116","116","116"],"i":["g ","k ","a","f","g ","k "]},"Turning to the illustrated embodiments,  illustrates an example Alert view (discussed above). View provides a summary of alert objects  in tabular form including the following properties: ID, server, severity, time, type, and status. In this view, alert objects  may be sorted based on a property. For example, when displayed via GUI  in a tabular format, alert objects  may be sorted according to the severity level property or column. In the event that the number of alert objects  is large, view may provide a scrolling function to enable a user to scroll between alert objects . In addition, the user may select an alert object  from the display in order to view additional information and\/or perform actions.","As to view in , the user may be able to view available alert filter objects  and select desired filters such as through a checkbox. As illustrated, view includes \u201cFilter \u201d and \u201cFilter \u201d as available alert filters. Both or a single alert filter may be selected and applied to associated job objects . Regarding view in , a user of system  may create an alert filter thereby adding an available alert filter to the list display in view . In the process of adding a filter to system , a user may provide values for the various fields displayed in view . These steps may be performed by entering information in available fields and\/or selecting values from dropdown menus. In addition, a user may provide and\/or select the information to be included in an alert object in the event of a match. As with the filter criteria, the alert properties entered in available fields and\/or selecting from a dropdown menu. In the process of performing these tasks and\/or other tasks, job manager  may use one or more of the following methods in the table below.",{"@attributes":{"id":"p-0090","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["List getAlertFilters( )","Returns the filters"]},{"entry":["AlertFilter getAlertFilter( String name )","Returns a specific alert filter"]},{"entry":["void setAlertFilter( AlertFilter filter )","Updates a specific alert filter"]},{"entry":["void addAlertFilter( AlertFilter filter)","Add a specific alert filter"]},{"entry":["void removeAlertFilter( String name )","Remove a specific alert filter"]},{"entry":["List getAlerts( Filter filter )","Return alerts based on"]},{"entry":[{},"given filter"]},{"entry":["void setAlert( Alert alert )","Updates a specific alert"]},{"entry":["List getAlarms( Filter filter )","Returns alarms based"]},{"entry":[{},"on given filter"]},{"entry":["void setAlarm( Alarm alarm )","Updates a specific alarm"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["130","116","142","116","142","116","142","142","116","116","144","144"],"i":["j ","j ","j ","k ","k "],"figref":["FIG. 6D","FIG. 6E"]},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 7","b":["700","150","106","700","150","106","106","130","700","100"]},"Method  begins at step , where job manager  receives a job request from the user, typically using client . But, as described above, the user may submit job request directly to server  without departing from the scope of method . The job request may comprise one or more of the following types of jobs: an update job, a command, a task, or any other appropriate enterprise job or request. Next, at step , job manager  authenticates the user. This authentication may include verifying that the user can submit this particular type of job, can update the requested or associated data, or any other security or authentication procedure or technique. Of course, while not illustrated, modules other than job manager  may perform this authentication and communicate the results to job manager . Job manager  then identifies a job object  using the received job request at step . For example, the job request may include a job identifier or other pointer. In this example, job manager  queries the plurality of job objects  to determine the particular job object  associated with the request based on the pointer. Once the appropriate job object  is identified, Job manager  identifies operating environments  for the job at step . As described above, in the case of a distributed job, there may be more than one operating environment  associated with the job. Job manager  may identify the appropriate operating environment  using any suitable technique. For example, job manager  may determine the appropriate operating system to execute the job. In another example, job manager  may identify the location of the data storage associated with the job request. In yet another example, job manager  may identify the appropriate virtual location for executing the job request. Next, at step , job manager  invokes a job scheduler  in the identified operating environment . Once job manager  has invoked job scheduler, it may execute the job using the invoked job scheduler  at step . It will be understood that this execution may include an immediate submission, adding the job to queue associated with the invoked job scheduler, or any other appropriate technique.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 8","b":["800","800","130","140","106","144","130","100"]},"Method  begins at step , where job manager  receives a status request from a user, typically at client . Next, at step , job manager  identifies a first alert filter object  using the status request. For example, job manager  may identify a first alert filter object  associated with the research and development (R&D) department. At step , job manager  identifies a property name, an operator, a value, an alert definition, and one or more references using alert filter object . In the R&D example, alert filter object  may include a failed state expression and an identifier operable to identify job objects  associated with the R&D department. At step , job manager  identifies job objects  using the one or more references. In some embodiments, job objects  are associated with heterogeneous operating environments . Next, a step , a property of each identified job object  is identified in accordance with the property name. Returning to the example, job manager  may identify the job state of each identify job object . The property and the value are compared in accordance with the operator a step . If a match is determined that decisional step , then job manager  instantiates an associated alert object  using alert template . In the example, job manager  instantiates an alert object for those job objects associated with the R&D group that contain a failed state. Otherwise, execution proceeds to decisional step . If additional job objects  are available, then the next job object  is identified at step . Otherwise, execution proceeds to decisional step . If additional alert filter objects  are identified using the status requests, job manager  identifies the next alert filter object  at step . Otherwise, job manager  generates a presentation of the alert objects  at step . Next, at step , job manager  communicates the presentation to the requesting user.","The preceding flowcharts and accompanying description illustrate exemplary methods  and . System  contemplates using any suitable technique for performing these and other tasks. It will be understood that method  is for illustration purposes only and that the described or similar techniques may be performed at any appropriate time, including concurrently, individually, or in combination. In addition, many of the steps in these flowcharts may take place simultaneously and\/or in different orders than as shown. Moreover, system  may use methods with additional steps, fewer steps, and\/or different steps, so long as the methods remain appropriate.","Although this disclosure has been described in terms of certain embodiments and generally associated methods, alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly, the above description of example embodiments does not define or constrain this disclosure. Other changes, substitutions, and alterations are also possible without departing from the spirit and scope of this disclosure."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 2A-E"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIGS. 4A-F","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIGS. 5A-F","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIGS. 6A-E","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
