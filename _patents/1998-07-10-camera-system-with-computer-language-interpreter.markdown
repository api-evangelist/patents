---
title: Camera system with computer language interpreter
abstract: A portable camera with integral printer device, the camera including a digital image capture device for the capturing of digital images; an integral programming language interpreter connected to the digital image capture device for the manipulation of the digital image; and a script input device for inputting a self documenting program script for the manipulation of the digital image to produce visible alterations thereof The script input device comprises a card reader for optically reading a script carried on a surface of a portable card. The script is interpreted and executed by the interpreter so as to modify the digital image in accordance with the script and so as to provide a printout of a modified image on the integral printer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07050143&OS=07050143&RS=07050143
owner: Silverbrook Research Pty Ltd
number: 07050143
owner_city: Balmain
owner_country: AU
publication_date: 19980710
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCES TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF PREFERRED AND OTHER EMBODIMENTS","Artcam Central Processor ","Quartz Crystal ","Image Sensing","1 Dimensional Structures","2 Dimensional Tables","3 Dimensional Lookup","Update Centroids Based on Data Edge Border and Clockmarks","Algorithmic Overview","Phase 2","Calculation of Attenuation Factor","Calculation of Cone and Penumbra Factor","EXAMPLE 1","EXAMPLE 2","EXAMPLE 3","EXAMPLE 4"],"p":["The following Australian provisional patent applications are hereby incorporated by cross-reference. For the purposes of location and identification, US patent applications identified by their US patent application serial numbers (USSN) are listed alongside the Australian applications from which the US patent applications claim the right of priority.",{"@attributes":{"id":"p-0003","num":"0002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["CROSS-REFERENCED","US PATENT\/",{}]},{"entry":["AUSTRALIAN","PATENT APPLICATION"]},{"entry":["PROVISIONAL","(CLAIMING RIGHT OF"]},{"entry":["PATENT","PRIORITY FROM"]},{"entry":["APPLICATION","AUSTRALIAN PRO-"]},{"entry":["NO.","VISIONAL APPLICATION)","DOCKET NO."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["PO7991","09\/113,060","ART01"]},{"entry":["PO8505","09\/113,070","ART02"]},{"entry":["PO7988","09\/113,073","ART03"]},{"entry":["PO9395","09\/112,748","ART04"]},{"entry":["PO8017","09\/112,747","ART06"]},{"entry":["PO8014","09\/112,776","ART07"]},{"entry":["PO8025","09\/112,750","ART08"]},{"entry":["PO8032","09\/112,746","ART09"]},{"entry":["PO7999","09\/112,743","ART10"]},{"entry":["PO7998","09\/112,742","ART11"]},{"entry":["PO8031","09\/112,741","ART12"]},{"entry":["PO8030","09\/112,740","ART13"]},{"entry":["PO7997","09\/112,739","ART15"]},{"entry":["PO7979","09\/113,053","ART16"]},{"entry":["PO8015","09\/112,738","ART17"]},{"entry":["PO7978","09\/113,067","ART18"]},{"entry":["PO7982","09\/113,063","ART19"]},{"entry":["PO7989","09\/113,069","ART20"]},{"entry":["PO8019","09\/112,744","ART21"]},{"entry":["PO7980","09\/113,058","ART22"]},{"entry":["PO8018","09\/112,777","ART24"]},{"entry":["PO7938","09\/113,224","ART25"]},{"entry":["PO8016","09\/112,804","ART26"]},{"entry":["PO8024","09\/112,805","ART27"]},{"entry":["PO7940","09\/113,072","ART28"]},{"entry":["PO7939","09\/112,785","ART29"]},{"entry":["PO8501","09\/112,797","ART30"]},{"entry":["PO8500","09\/112,796","ART31"]},{"entry":["PO7987","09\/113,071","ART32"]},{"entry":["PO8022","09\/112,824","ART33"]},{"entry":["PO8497","09\/113,090","ART34"]},{"entry":["PO8020","09\/112,823","ART38"]},{"entry":["PO8023","09\/113,222","ART39"]},{"entry":["PO8504","09\/112,786","ART42"]},{"entry":["PO8000","09\/113,051","ART43"]},{"entry":["PO7977","09\/112,782","ART44"]},{"entry":["PO7934","09\/113,056","ART45"]},{"entry":["PO7990","09\/113,059","ART46"]},{"entry":["PO8499","09\/113,091","ART47"]},{"entry":["PO8502","09\/112,753","ART48"]},{"entry":["PO7981","09\/113,055","ART50"]},{"entry":["PO7986","09\/113,057","ART51"]},{"entry":["PO7983","09\/113,054","ART52"]},{"entry":["PO8026","09\/112,752","ART53"]},{"entry":["PO8027","09\/112,759","ART54"]},{"entry":["PO8028","09\/112,757","ART56"]},{"entry":["PO9394","09\/112,758","ART57"]},{"entry":["PO9396","09\/113,107","ART58"]},{"entry":["PO9397","09\/112,829","ART59"]},{"entry":["PO9398","09\/112,792","ART60"]},{"entry":["PO9399","\u20026,106,147","ART61"]},{"entry":["PO9400","09\/112,790","ART62"]},{"entry":["PO9401","09\/112,789","ART63"]},{"entry":["PO9402","09\/112,788","ART64"]},{"entry":["PO9403","09\/112,795","ART65"]},{"entry":["PO9405","09\/112,749","ART66"]},{"entry":["PP0959","09\/112,784","ART68"]},{"entry":["PP1397","09\/112,783","ART69"]},{"entry":["PP2370","09\/112,781","DOT01"]},{"entry":["PP2371","09\/113,052","DOT02"]},{"entry":["PO8003","09\/112,834","Fluid0l"]},{"entry":["PO8005","09\/113,103","Fluid02"]},{"entry":["PO9404","09\/113,101","Fluid03"]},{"entry":["PO8066","09\/112,751","IJ01"]},{"entry":["PO8072","09\/112,787","IJ02"]},{"entry":["PO8040","09\/112,802","IJ03"]},{"entry":["PO8071","09\/112,803","IJ04"]},{"entry":["PO8047","09\/113,097","IJ05"]},{"entry":["PO8035","09\/113,099","IJ06"]},{"entry":["PO8044","09\/113,084","IJ07"]},{"entry":["PO8063","09\/113,066","IJ08"]},{"entry":["PO8057","09\/112,778","IJ09"]},{"entry":["PO8056","09\/112,779","IJ10"]},{"entry":["PO8069","09\/113,077","IJ11"]},{"entry":["PO8049","09\/113,061","IJ12"]},{"entry":["PO8036","09\/112,818","IJ13"]},{"entry":["PO8048","09\/112,816","IJ14"]},{"entry":["PO8070","09\/112,772","IJ15"]},{"entry":["PO8067","09\/112,819","IJ16"]},{"entry":["PO8001","09\/112,815","IJ17"]},{"entry":["PO8038","09\/113,096","IJ18"]},{"entry":["PO8033","09\/113,068","IJ19"]},{"entry":["PO8002","09\/113,095","IJ20"]},{"entry":["PO8068","09\/112,808","IJ21"]},{"entry":["PO8062","09\/112,809","IJ22"]},{"entry":["PO8034","09\/112,780","IJ23"]},{"entry":["PO8039","09\/113,083","IJ24"]},{"entry":["PO8041","09\/113,121","IJ25"]},{"entry":["PO8004","09\/113,122","IJ26"]},{"entry":["PO8037","09\/112,793","IJ27"]},{"entry":["PO8043","09\/112,794","IJ28"]},{"entry":["PO8042","09\/113,128","IJ29"]},{"entry":["PO8064","09\/113,127","IJ30"]},{"entry":["PO9389","09\/112,756","IJ31"]},{"entry":["PO9391","09\/112,755","IJ32"]},{"entry":["PP0888","09\/112,754","IJ33"]},{"entry":["PP0891","09\/112,811","IJ34"]},{"entry":["PP0890","09\/112,812","IJ35"]},{"entry":["PP0873","09\/112,813","IJ36"]},{"entry":["PP0993","09\/112,814","IJ37"]},{"entry":["PP0890","09\/112,764","IJ38"]},{"entry":["PP1398","09\/112,765","IJ39"]},{"entry":["PP2592","09\/112,767","IJ40"]},{"entry":["PP2593","09\/112,768","IJ41"]},{"entry":["PP3991","09\/112,807","IJ42"]},{"entry":["PP3987","09\/112,806","IJ43"]},{"entry":["PP3985","09\/112,820","IJ44"]},{"entry":["PP3983","09\/112,821","IJ45"]},{"entry":["PO7935","09\/112,822","IJM01"]},{"entry":["PO7936","09\/112,825","IJM02"]},{"entry":["PO7937","09\/112,826","IJM03"]},{"entry":["PO8061","09\/112,827","IJM04"]},{"entry":["PO8054","09\/112,828","IJM05"]},{"entry":["PO8065","\u20026,071,750","IJM06"]},{"entry":["PO8055","09\/113,108","IJM07"]},{"entry":["PO8053","09\/113,109","IJM08"]},{"entry":["PO8078","09\/113,123","IJM09"]},{"entry":["PO7933","09\/113,114","IJM10"]},{"entry":["PO7950","09\/113,115","IJM11"]},{"entry":["PO7949","09\/113,129","IJM12"]},{"entry":["PO8060","09\/113,124","IJM13"]},{"entry":["PO8059","09\/113,125","IJM14"]},{"entry":["PO8073","09\/113,126","IJM15"]},{"entry":["PO8076","09\/113,119","IJM16"]},{"entry":["PO8075","09\/113,120","IJM17"]},{"entry":["PO8079","09\/113,221","IJM18"]},{"entry":["PO8050","09\/113,116","IJM19"]},{"entry":["PO8052","09\/113,118","IJM20"]},{"entry":["PO7948","09\/113,117","IJM21"]},{"entry":["PO7951","09\/113,113","IJM22"]},{"entry":["PO8074","09\/113,130","IJM23"]},{"entry":["PO7941","09\/113,110","IJM24"]},{"entry":["PO8077","09\/113,112","IJM25"]},{"entry":["PO8058","09\/113,087","IJM26"]},{"entry":["PO8051","09\/113,074","IJM27"]},{"entry":["PO8045","\u20026,111,754","IJM28"]},{"entry":["PO7952","09\/113,088","IJM29"]},{"entry":["PO8046","09\/112,771","IJM30"]},{"entry":["PO9390","09\/112,769","IJM31"]},{"entry":["PO9392","09\/112,770","IJM32"]},{"entry":["PP0889","09\/112,798","IJM35"]},{"entry":["PP0887","09\/112,801","IJM36"]},{"entry":["PP0882","09\/112,800","IJM37"]},{"entry":["PP0874","09\/112,799","IJM38"]},{"entry":["PP1396","09\/113,098","IJM39"]},{"entry":["PP3989","09\/112,833","IJM40"]},{"entry":["PP2591","09\/112,832","IJM41"]},{"entry":["PP3990","09\/112,831","IJM42"]},{"entry":["PP3986","09\/112,830","IJM43"]},{"entry":["PP3984","09\/112,836","IJM44"]},{"entry":["PP3982","09\/112,835","IJM45"]},{"entry":["PP0895","09\/113,102","IR01"]},{"entry":["PP0870","09\/113,106","IR02"]},{"entry":["PP0869","09\/113,105","IR04"]},{"entry":["PP0887","09\/113,104","IR05"]},{"entry":["PP0885","09\/112,810","IR06"]},{"entry":["PP0884","09\/112,766","IR10"]},{"entry":["PP0886","09\/113,085","IR12"]},{"entry":["PP0871","09\/113,086","IR13"]},{"entry":["PP0876","09\/113,094","IR14"]},{"entry":["PP0877","09\/112,760","IR16"]},{"entry":["PP0878","09\/112,773","IR17"]},{"entry":["PP0879","09\/112,774","IR18"]},{"entry":["PP0883","09\/112,775","IR19"]},{"entry":["PP0880","\u20026,152,619","IR20"]},{"entry":["PP0881","09\/113,092","IR21"]},{"entry":["PO8006","\u20026,087,638","MEMS02"]},{"entry":["PO8007","09\/113,093","MEMS03"]},{"entry":["PO8008","09\/113,062","MEMS04"]},{"entry":["PO8010","\u20026,041,600","MEMS05"]},{"entry":["PO8011","09\/113,082","MEMS06"]},{"entry":["PO7947","\u20026,067,797","MEMS07"]},{"entry":["PO7944","09\/113,080","MEMS09"]},{"entry":["PO7946","\u20026,044,646","MEMS10"]},{"entry":["PO9393","09\/113,065","MEMS11"]},{"entry":["PP0875","09\/113,078","MEMS12"]},{"entry":["PP0894","09\/113,075","MEMS13"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Not applicable.","The present invention relates to an data processing method and apparatus and, in particular, discloses a Camera System with Language Interpreter.","The present invention further relates to a camera having an one board interpreter for the interpreting of a programming language to manipulate and subsequently print out an image.","Recently, digital camera technology has become increasingly popular. In this form of technology, an image is normally imaged by CCD array. Subsequently, the images are stored on the camera on storage media such as a semiconductor memory array. At a later stage, the images are downloaded from the CCD camera device to a computer or the like where upon they go subsequent manipulation and printing in the course of requirements. The printing normally includes various image processing steps to enhance certain aspects of the image.","For details on the operation of CCD devices and cameras, reference is made to a standard text in this field such as \u201cCCD arrays, cameras and displays\u201d by Gerald C Holst, published 1996 by SPIE Optical Engineering Press Bellingham, USA.","Recently, there has been proposed by the present applicant, a camera system having a integral inbuilt printer that is able to produce full colour, high quality output images. Further, it is known to apply a filter to a digital image to produce various effects. The number of filters able to be utilized being totally arbitrary with the expectation that further filters will be discovered or created in future.","Unfortunately, changing digital imaging technologies and changing filter technologies result in onerous system requirements in that cameras produced today obviously are unable to take advantages of technologies not yet available nor are they able to take advantage of filters which have not, as yet, been created or conceived.","It is an object of the present invention to provide a system which readily is able to take advantage of updated technologies in a addition to taking advantage of new filters being created and, in addition, providing a readily adaptable form of image processing of digitally captured images for printing out.","The digital image processing camera system constructed in accordance with the preferred embodiment is as illustrated in FIG. . The camera unit  includes means for the insertion of an integral print roll (not shown). The camera unit  can include an area image sensor  which sensors an image  for captured by the camera. Optionally, the second area image sensor can be provided to also image the scene  and to optionally provide for the production of stereographic output effects.","The camera  can include an optional color display  for the display of the image being sensed by the sensor . When a simple image is being displayed on the display , the button  can be depressed resulting in the printed image  being output by the camera unit . A series of cards, herein after known as \u201cArtcards\u201d  contain, on one surface encoded information and on the other surface, contain an image distorted by the particular effect produced by the Artcard . The Artcard  is inserted in an Artcard reader  in the side of camera  and, upon insertion, results in output image  being distorted in the same manner as the distortion appearing on the surface of Artcard . Hence, by means of this simple user interface a user wishing to produce a particular effect can insert one of many Artcards  into the Artcard reader  and utilize button  to take a picture of the image  resulting in a corresponding distorted output image .","The camera unit  can also include a number of other control button ,  in addition to a simple LCD output display  for the display of informative information including the number of printouts left on the internal print roll on the camera unit. Additionally, different output formats can be controlled by CHP switch .","Turning now to , there is illustrated a schematic view of the internal hardware of the camera unit . The internal hardware is based around an Artcam central processor unit (ACP) .","The Artcam central processor  provides many functions which form the \u2018heart\u2019 of the system. The ACP  is preferably implemented as a complex, high speed, CMOS system on-a-chip. Utilising standard cell design with some full custom regions is recommended. Fabrication on a 0.25 micron CMOS process will provide the density and speed required, along with a reasonably small die area.","The functions, provided by the ACP  include:\n\n","A quartz crystal  is used as a frequency reference for the system clock. As the system clock is very high, the ACP  includes a phase locked loop clock circuit to increase the frequency derived from the crystal .","Area Image Sensor ","The area image sensor  converts an image through its lens into an electrical signal. It can either be a charge coupled device (CCD) or an active pixel sensor (APS)CMOS image sector. At present, available CCD's normally have a higher image quality, however, there is currently much development occurring in CMOS imagers. CMOS imagers are eventually expected to be substantially cheaper than CCD's have smaller pixel areas, and be able to incorporate drive circuitry and signal processing. They can also be made in CMOS fabs, which are transitioning to 12\u2033 wafers. CCD's are usually built in 6\u2033 wafer fabs, and economics may not allow a conversion to 12\u2033 fabs. Therefore, the difference in fabrication cost between CCD's and CMOS imagers is likely to increase, progressively favoring,CMOS imagers. However, at present, a CCD is probably the best option.","The Artcam unit will produce suitable results with a 1,500\u00d71,000 area image sensor. However, smaller sensors, such as 750\u00d7500, will be adequate for many markets. The Artcam is less sensitive to image sensor resolution than are conventional digital cameras. This is because many of the styles contained on Artcards  process the image in such a way as to obscure the lack of resolution. For example, if the image is distorted to simulate the effect of being converted to an impressionistic painting, low source image resolution can be used with minimal effect. Further examples for which low resolution input images will typically not be noticed include image warps which produce high distorted images, multiple miniature copies of the of the image (eg. passport photos), textural processing such as bump mapping for a base relief metal look, and photo-compositing into structured scenes.","This tolerance of low resolution image sensors may be a significant factor in reducing the manufacturing cost of an Artcam unit  camera. An Artcam with a low cost 750\u00d7500 image sensor will often produce superior results to a conventional digital camera with a much more expensive 1,500\u00d71,000 image sensor.","Optional Stereoscopic 3D Image Sensor ","The 3D versions of the Artcam unit  have an additional image sensor , for stereoscopic operation. This image sensor is identical to the main image sensor. The circuitry to drive the optional image sensor may be included as a standard part of the ACP chip  to reduce incremental design cost. Alternatively, a separate 3D Artcam ACP can be designed. This option will reduce the manufacturing cost of a mainstream single sensor Artcam.","Print Roll Authentication Chip ","A small chip  is included in each print roll . This chip replaced the functions of the bar code, optical sensor and wheel, and ISO\/ASA sensor on other forms of camera film units such as Advanced Photo Systems film cartridges.","The authentication chip also provides other features:\n\n","The authentication chip  contains 1024 bits of Flash memory, of which 128 bits is an authentication key, and 512 bits is the authentication information. Also included is an encryption circuit to ensure that the authentication key cannot be accessed directly.","Print-Head ","The Artcam unit  can utilize any color print technology which is small enough, low enough power, fast enough, high enough quality, and low enough cost, and is compatible with the print roll. Relevant printheads will be specifically discussed hereinafter.","The specifications of the ink jet head are:",{"@attributes":{"id":"p-0260","num":"0286"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Image type","Bi-level, dithered"]},{"entry":[{},"Color","CMY Process Color"]},{"entry":[{},"Resolution","1600 dpi"]},{"entry":[{},"Print head length","\u2018Page-width\u2019 (100 mm)"]},{"entry":[{},"Print speed","2 seconds per photo"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The function of the ink pressure controller depends upon the type of ink jet print head  incorporated in the Artcam. For some types of ink jet, the use of an ink pressure controller can be eliminated, as the ink pressure is simply atmospheric pressure. Other types of print head require a regulated positive ink pressure. In this case, the in pressure controller consists of a pump and pressure transducer.","Other print heads may require an ultrasonic transducer to cause regular oscillations in the ink pressure, typically at frequencies around 100 KHz. In the case, the ACP  controls the frequency phase and amplitude of these oscillations.","Paper Transport Motor ","The paper transport motor  moves the paper from within the print roll  past the print head at a relatively constant rate. The motor  is a miniature motor geared down to an appropriate speed to drive rollers which move the paper. A high quality motor and mechanical gears are required to achieve high image quality, as mechanical rumble or other vibrations will affect the printed dot row spacing.","Paper Transport Motor Driver ","The motor driver  is a small circuit which amplifies the digital motor control signals from the APC  to levels suitable for driving the motor .","Paper Pull Sensor","A paper pull sensor  detects a user's attempt to pull a photo from the camera unit during the printing process. The APC  reads this sensor , and activates the guillotine  if the condition occurs. The paper pull sensor  is incorporated to make the camera more \u2018foolproof\u2019 in operation. Were the user to pull the paper out forcefully during printing, the print mechanism  or print roll  may (in extreme cases) be damaged. Since it is acceptable to pull out the \u2018pod\u2019 from a Polaroid type camera before it is fully ejected, the public has been \u2018trained\u2019 to do this. Therefore, they are unlikely to heed printed instructions not to pull the paper.","The Artcam preferably restarts the photo print process after the guillotine  has cut the paper after pull sensing.","The pull sensor can be implemented as a strain gauge sensor, or as an optical sensor detecting a small plastic flag which is deflected by the torque that occurs on the paper drive rollers when the paper is pulled. The latter implementation is recommendation for low cost.","Paper Guillotine Actuator ","The paper guillotine actuator  is a small actuator which causes the guillotine  to cut the paper either at the end of a photograph, or when the paper pull sensor  is activated.","The guillotine actuator  is a small circuit which amplifies a guillotine control signal from the APC tot the level required by the actuator .","Artcard ","The Artcard  is a program storage medium for the Artcam unit. As noted previously, the programs are in the form of Vark scripts. Vark is a powerful image processing language especially developed for the Artcam unit. Each Artcard  contains one Vark script, and thereby defines one image processing style.","Preferably, the VARK language is highly image processing specific. By being highly image processing specific, the amount of storage required to store the details on the card are substantially reduced. Further, the ease with which new programs can be created, including enhanced effects, is also substantially increased. Preferably, the language includes facilities for handling many image processing functions including image warping via a warp map, convolution, color lookup tables, posterizing an image, adding noise to an image, image enhancement filters, painting algorithms, brush jittering and manipulation edge detection filters, tiling, illumination via light sources, bump maps, text, face detection and object detection attributes, fonts, including three dimensional fonts, and arbitrary complexity pre-rendered icons. Further details of the operation of the Vark language interpreter are contained hereinafter.","Hence, by utilizing the language constructs as defined by the created language, new affects on arbitrary images can be created and constructed for inexpensive storage on Artcard and subsequent distribution to camera owners. Further, on one surface of the card can be provided an example illustrating the effect that a particular VARK script, stored on the other surface of the card, will have on an arbitrary, captured image.","By utilizing such a system, camera technology can be distributed without a great fear of obsolescence in that, provided a VARK interpreter is incorporated in the camera device, a device independent scenario is provided whereby the underlying technology can be completely varied over time. Further, the VARK scripts can be updated as new filters are created and distributed in an inexpensive manner, such as via simple cards for card reading.","The Artcard  is a piece of thin white plastic with the same format as a credit card (86 mm long by 54 mm wide). The Artcard is printed on both sides using a high resolution ink jet printer. The ink jet printer technology is assumed to be the same as that used in the Artcam, with 1600 dpi (63 dpmm) resolution. A major feature of the Artcard  is low manufacturing cost. Artcards can be manufactured at high speeds as a wide web of plastic film. The plastic web is coated on both sides with a hydrophilic dye fixing layer. The web is printed simultaneously on both sides using a \u2018pagewidth\u2019 color ink jet printer. The web is then cut and punched into individual cards. On one face of the card is printed a human readable representation of the effect the Artcard  will have on the sensed image. This can be simply a standard image which has been processed using the Vark script stored on the back face of the card.","On the back face of the card is printed an array of dots which can be decoded into the Vark script that defines the image processing sequence. The print area is 80 mm\u00d750 mm, giving a total of 15,876,000 dots. This array of dots could represent at least 1.89 Mbytes of data. To achieve high reliability, extensive error detection and correction is incorporated in the array of dots. This allows a substantial portion of the card to be defaced, worn, creased, or dirty with no effect on data integrity. The data coding used is Reed-Solomon coding, with half of the data devoted to error correction. This allows the storage of 967 Kbytes of error corrected data on each Artcard .","Linear Image Sensor ","The Artcard linear sensor  converts the aforementioned Artcard data image to electrical signals. As with the area image sensor , , the linear image sensor can be fabricated using either CCD or APS CMOS technology. The active length of the image sensor  is 50 mm, equal to the width of the data array on the Artcard . To satisfy Nyquist's sampling theorem, the resolution of the linear image sensor  must be at least twice the highest spatial frequency of the Artcard optical image reaching the image sensor. In practice, data detection is easier if the image sensor resolution is substantially above this. A resolution of 4800 dpi (189 dpmm) is chosen, giving a total of 9,450 pixels. This resolution requires a pixel sensor pitch of 5.3 \u03bcm. This can readily be achieved by using four staggered rows of 20 \u03bcm pixel sensors.","The linear image sensor is mounted in a special package which includes a LED  to illuminate the Artcard  via a light-pipe (not shown).","The Artcard reader light-pipe can be a molded light-pipe which has several function:\n\n","The operation of the Artcard reader is explained further hereinafter.","Artcard Reader Motor ","The Artcard reader motor propels the Artcard past the linear image sensor  at a relatively constant rate. As it may not be cost effective to include extreme precision mechanical components in the Artcard reader, the motor  is a standard miniature motor geared down to an appropriate speed to drive a pair of rollers which move the Artcard . The speed variations, rumble, and other vibrations will affect the raw image data as circuitry within the APC  includes extensive compensation for these effects to reliably read the Artcard data.","The motor  is driven in reverse when the Artcard is to be ejected.","Artcard Motor Driver ","The Artcard motor driver  is a small circuit which amplifies the digital motor control signals from the APC  to levels suitable for driving the motor .","Card Insertion Sensor ","The card insertion sensor  is an optical sensor which detects the presence of a card as it is being inserted in the card reader . Upon a signal from this sensor , the APC  initiates the card reading process, including the activation of the Artcard reader motor .","Card Eject Button ","A card eject button  () is used by the user to eject the current Artcard, so that another Artcard can be inserted. The APC  detects the pressing of the button, and reverses the Artcard reader motor  to eject the card.","Card Status Indicator ","A card status indicator  is provided to signal the user as to the status of the Artcard reading process. This can be a standard bi-color (red\/green) LED. When the card is successfully read, and data integrity has been verified, the LED lights up green continually. If the card is faulty, then the LED lights up red.","If the camera is powered from a 1.5 V instead of 3V battery, then the power supply voltage is less than the forward voltage drop of the greed LED, and the LED will not light. In this case, red LEDs can be used, or the LED can be powered from a voltage pump which also powers other circuits in the Artcam which require higher voltage.","64 Mbit DRAM ","To perform the wide variety of image processing effects, the camera utilizes 8 Mbytes of memory . This can be provided by a single 64 Mbit memory chip. Of course, with changing memory technology increased Dram storage sizes may be substituted.","High speed access to the memory chip is required. This can be achieved by using a Rambus DRAM (burst access rate of 500 Mbytes per second) or chips using the new open standards such as double data rate (DDR) SDRAM or Synclink DRAM.","Camera Authentication Chip","The camera authentication chip  is identical to the print roll authentication chip , except that it has different information stored in it. The camera authentication chip  has three main purposes:\n\n","The Artcam includes an optional color display  and small status display, . Lowest cost consumer cameras may include a color image display, such as a small TFT LCD  similar to those found on some digital cameras and camcorders. The color display  is a major cost element of these versions of Artcam, and the display  plus back light are a major power consumption drain.","Status Display ","The status display  is a small passive segment based LCD, similar to those currently provided on silver halide and digital cameras. Its main function is to show the number of prints remaining in the print roll  and icons for various standard camera features, such as flash and battery status.","Color Display ","The color display  is a full motion image display which operates as a viewfinder, as a verification of the image to be printed, and as a user interface display. The cost of the display  is approximately proportional to its area, so large displays (say 4\u2033 diagonal) unit will be restricted to expensive versions of the Artcam unit. Smaller displays, such as color camcorder viewfinder TFT's at around 1\u2033, may be effective for mid-range Artcams.","Zoom Lens (Not Shown)","The Artcam can include a zoom lens. This can be a standard electronically controlled zoom lens, identical to one which would be used on a standard electronic camera, and similar to pocket camera zoom lenses. A referred version of the Artcam unit may include standard interchangeable 35 mm SLR lenses.","Autofocus Motor ","The autofocus motor  changes the focus of the zoom lens. The motor is a miniature motor geared down to an appropriate speed to drive the autofocus mechanism.","Autofocus motor Driver ","The autofocus motor driver  is a small circuit which amplifies the digital motor control signals from the APC  to levels suitable for driving the motor .","Zoom Motor ","The zoom motor  moves the zoom front lenses in and out. The motor is a miniature motor geared down to an appropriate speed to drive the zoom mechanism.","Zoom Motor Driver ","The zoom motor driver  is a small circuit which amplifies the digital motor control signals from the APC  to levels suitable for driving the motor.","Communications","The ACP  contains a universal serial bus (USB) interface  for communication with personal computers. Not all Artcam models are intended to include the USB connector. However, the silicon area required for a USB circuit  is small, so the interface can be included in the standard ACP.","Optional Keyboard ","The Artcam unit may include an optional miniature keyboard  for customizing text specified by the Artcard. Any text appearing in an Artcard image may be editable, even if it is in a complex metallic 3D font. The miniature keyboard includes a single line alphanumeric LCD to display the original text and edited text. The keyboard may be a standard accessory.","The ACP  contains a serial communications circuit for transferring data to and from the miniature keyboard.","Power Supply","The Artcam unit uses a battery . Depending upon the Artcam options, this is either a 3V Lithium cell, 1.5 V AA alkaline cells, or other battery arrangement.","Power Management Unit ","Power consumption is an important design constraint in the Artcam. It is desirable that either standard camera batteries (such as 3V lithium batters) or standard AA or AAA alkaline cells can be used. While the electronic complexity of the Artcam unit is dramatically higher than 35 mm photographic cameras, the power consumption need not be commensurately higher. Power in the Artcam can be carefully managed with all unit being turned off when not in use.","The most significant current drains are the ACP , the area image sensors ,, the printer  various motors, the flash unit , and the optional color display  dealing with each part separately:\n\n","The flash unit  can be a standard miniature electronic flash for consumer cameras.","Overview of the ACP ",{"@attributes":{"id":"p-0305","num":"0343"},"figref":"FIG. 3","b":["31","31","31"],"sup":"2","ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":["A RISC CPU core ","A 4 way parallel VLIW Vector Processor ","A Direct RAMbus interface ","A CMOS image sensor interface ","A CMOS linear image sensor interface ","A USB serial interface ","An infrared keyboard interface ","A numeric LCD interface , and","A color TFT LCD interface ","A 4 Mbyte Flash memory  for program storage \n\nThe RISC CPU, Direct RAMbus interface , CMOS sensor interface  and USB serial interface  can be vendor supplied cores. The ACP  is intended to run at a clock speed of 200 MHz on 3V externally and 1.5V internally to minimize power consumption. The CPU core needs only to run at 100 MHz. The following two block diagrams give two views of the ACP :\n","A view of the ACP  in isolation\n\nAn example Artcam showing a high-level view of the ACP  connected to the rest of the Artcam hardware.\n\nImage Access\n"]}}}},"As stated previously, the DRAM Interface  is responsible for interfacing between other client portions of the ACP chip and the RAMBUS DRAM. In effect, each module within the DRAM Interface is an address generator.","There are three logical types of images manipulated by the ACP. They are:\n\n","These images are typically different in color space, resolution, and the output & input color spaces which can vary from camera to camera. For example, a CCD image on a low-end camera may be a different resolution, or have different color characteristics from that used in a high-end camera. However all internal image formats are the same format in terms of color space across all cameras.","In addition, the three image types can vary with respect to which direction is \u2018up\u2019. The physical orientation of the camera causes the notion of a portrait or landscape image, and this must be maintained throughout processing. For this reason, the internal image is always oriented correctly, and rotation is performed on images obtained from the CCD and during the print operation.","CPU Core (CPU) ","The ACP  incorporates a 32 bit RISC CPU  to run the Vark image processing language interpreter and to perform Artcam's general operating system duties. A wide variety of CPU cores are suitable: it can be any processor core with sufficient processing power to perform the required core calculations and control functions fast enough to met consumer expectations. Examples of suitable cores are: MIPS R4000 core from LSI Logic, StrongARM core. There is no need to maintain instruction set continuity between different Artcam models. Artcard compatibility is maintained irrespective of future processor advances and changes, because the Vark interpreter is simply re-compiled for each new instruction set. The ACP  architecture is therefore also free to evolve. Different ACP  chip designs may be fabricated by different manufacturers, without requiring to license or port the CPU core. This device independence avoids the chip vendor lock-in such as has occurred in the PC market with Intel. The CPU operates at 100 MHz, with a single cycle time of 10 ns. It must be fast enough to run the Vark interpreter, although the VLIW Vector Processor  is responsible for most of the time-critical operations.","Program Cache ","Although the program code is stored in on-chip Flash memory , it is unlikely that well packed Flash memory  will be able to operate at the 10 ns cycle time required by the CPU. Consequently a small cache is required for good performance. 16 cache lines of 32 bytes each are sufficient, for a total of 512 bytes. The program cache  is defined the chapter entitled Program cache .","Data Cache ","A small data cache  is required for good performance. This requirement is mostly due to the use of a RAMbus DRAM, which can provide high-speed data in bursts, but is inefficient for single byte accesses. The CPU has access to a memory caching system that allows flexible manipulation of CPU data cache  sizes. A minimum of 16 cache lines (512 bytes) is recommended for good performance.","CPU Memory Model","An Artcam's CPU memory model consists of a 32 MB area. It consists of 8 MB of physical RDRAM off-chip in the base model of Artcam, with provision for up to 16 MB of off-chip memory. There is a 4 MB Flash memory  on the ACP  for program storage, and finally a 4 MB address space mapped to the various registers and controls of the ACP . The memory map then, for an Artcam is as follows:",{"@attributes":{"id":"p-0314","num":"0366"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Contents","Size"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Base Artcam DRAM","8 MB"]},{"entry":[{},"Extended DRAM","8 MB"]},{"entry":[{},"Program memory (on ACP 31 in Flash memory 70)","4 MB"]},{"entry":[{},"Reserved for extension of program memory","4 MB"]},{"entry":[{},"ACP 31 registers and memory-mapped I\/O","4 MB"]},{"entry":[{},"Reserved","4 MB"]},{"entry":[{},"TOTAL","32 MB\u2002"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["23","24"],"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":{"@attributes":{"id":"ul0015-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":["If bit  is clear, the address is in the lower 16-MB range, and hence can be satisfied from DRAM and the Data cache . In most cases the DRAM will only be 8 MB, but 16 MB is allocated to cater for a higher memory model Artcams.","If bit  is set, and bit  is clear, then the address represents the Flash memory  4 Mbyte range and is satisfied by the Program cache .","If bit =1 and bit =1, the address is translated into an access over the low speed bus to the requested component in the AC by the CPU Memory Decoder .\n\nFlash Memory \n"]}}}},"The ACP  contains a 4 Mbyte Flash memory  for storing the Artcam program. It is envisaged that Flash memory  will have denser packing coefficients than masked ROM, and allows for greater flexibility for testing camera program code. The downside of the Flash memory  is the access time, which is unlikely to be fast enough for the 100 MHz operating speed (10 ns cycle time) of the CPU. A fast Program Instruction cache  therefore acts as the interface between the CPU and the slower Flash memory .","Program Cache ","A small cache is required for good CPU performance. This, requirement is due to the slow speed Flash memory  which stores the Program code. 16 cache lines of 32 bytes each are sufficient, for a total of 512 bytes. The Program cache  is a read only cache. The data used by CPU programs comes through the CPU Memory Decoder  and if the address is in DRAM, through the general Data cache . The separation allows the CPU to operate independently of the VLIW Vector Processor . If the data requirements are low for a given process, it can consequently operate completely out of cache.","Finally, the Program cache  can be read as data by the CPU rather than purely as program instructions. This allows tables, microcode for the VLIW etc to be loaded from the Flash memory . Addresses with bit  set and bit  clear are satisfied from the Program cache .","CPU Memory Decoder ","The CPU Memory Decoder  is a simple decoder for satisfying CPU data accesses. The Decoder translates data addresses into internal ACP register accesses over the internal low speed bus, and therefore allows for memory mapped I\/O of ACP registers. The CPU Memory Decoder  only interprets addresses that have bit  set and bit  clear. There is no caching in the CPU Memory Decoder .","DRAM Interface ","The DRAM used by the Artcam is a single channel 64 Mbit (8 MB) RAMbus RDRAM operating at 1.6 GB\/sec. RDRAM accesses are by a single channel (16-bit data path) controller. The RDRAM also has several useful operating modes for low power operation. Although the Rambus specification describes a system with random 32 byte transfers as capable of achieving a greater than 95% efficiency, this is not true if only part of the 32 bytes are used. Two reads followed by two writes to the same device yields over 86% efficiency. The primary latency is required for bus turn-around going from a Write to a Read, and since there is a Delayed Write mechanism, efficiency can be further improved. With regards to writes, Write Masks allow specific subsets of bytes to be written to. These write masks would be set via internal cache \u201cdirty bits\u201d. The upshot of the Rambus Direct RDRAM is a throughput of >1 GB\/sec is easily achievable, and with multiple reads for every write (most processes) combined with intelligent algorithms making good use of 32 byte transfer knowledge, transfer rates of >1.3 GB\/sec are expected. Every 10 ns, 16 bytes can be transferred to or from the core.","DRAM Organization","The DRAM organization for a base model (8 MB RDRAM) Artcam is as follows:",{"@attributes":{"id":"p-0321","num":"0376"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Contents","Size"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Program scratch RAM","0.50 MB"]},{"entry":[{},"Artcard data","1.00 MB"]},{"entry":[{},"Photo Image, captured from CMOS Sensor","0.50 MB"]},{"entry":[{},"Print Image (compressed)","2.25 MB"]},{"entry":[{},"1 Channel of expanded Photo Image","1.50 MB"]},{"entry":[{},"1 Image Pyramid of single channel","1.00 MB"]},{"entry":[{},"Intermediate Image Processing","1.25 MB"]},{"entry":[{},"TOTAL","\u2003\u20098 MB"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":{"@attributes":{"id":"ul0017-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":["Uncompressed, the Print Image requires 4.5 MB (1.5 MB per channel). To accommodate other objects in the 8 MB model, the Print Image needs to be compressed. If the chrominance channels are compressed by 4:1 they require only 0.375 MB each).","The memory model described here assumes a single 8 MB RDRAM. Other models of the Artcam may have more memory, and thus not require compression of the Print Image. In addition, with more memory a larger part of the final image can be worked on at once, potentially giving a speed improvement.","Note that ejecting or inserting an Artcard invalidates the 5.5 MB area holding the Print Image, 1 channel of expanded photo image, and the image pyramid. This space may be safely used by the Artcard Interface for decoding the Artcard data.\n\nData Cache \n"]}}}},"The ACP  contains a dedicated CPU instruction cache  and a general data cache . The Data cache  handles all DRAM requests (reads and writes of data) from the CPU, the VLIW Vector Processor , and the Display Controller . These requests may have very different profiles in terms of memory usage and algorithmic timing requirements. For example, a VLIW process may be processing an image in linear memory, and lookup a value in a table for each value in the image. There is little need to cache much of the image, but it may be desirable to cache the entire lookup table so that no real memory access is required. Because of these differing requirements, the Data cache  allows for an intelligent definition of caching.","Although the Rambus DRAM interface  is capable of very high-speed memory access (an average throughput of 32 bytes in 25 ns), it is not efficient dealing with single byte requests. In order to reduce effective memory latency, the ACP  contains 128 cache lines. Each cache line is 32 bytes wide. Thus the total amount of data cache  is 4096 bytes (4 KB). The 128 cache lines are configured into 16 programmable-sized groups. Each of the 16 groups must be a contiguous set of cache lines. The CPU is responsible for determining how many cache lines to allocate to each group. Within each group cache lines are filled according to a simple Least Recently Used algorithm. In terms of CPU data requests, the Data cache  handles memory access requests that have address bit  clear. If bit  is clear, the address is in the lower 16 MB range, and hence can be satisfied from DRAM and the Data cache . In most cases the DRAM will only be 8 MB, but 16 MB is allocated to cater for a higher memory model Artcam. If bit  is set, the address is ignored by the Data cache .","All CPU data requests are satisfied from Cache Group . A minimum of 16 cache lines is recommended for good CPU performance, although the CPU can assign any number of cache lines (except none) to Cache Group . The remaining Cache Groups ( to ) are allocated according to the current requirements. This could mean allocation to a VLIW Vector Processor  program or the Display Controller . For example, a 256 byte lookup table required to be permanently available would require 8 cache lines. Writing out a sequential image would only require 24 cache lines (depending on the size of record being generated and whether write requests are being Write Delayed for a significant number of cycles). Associated with each cache line byte is a dirty bit, used for creating a Write Mask when writing memory to DRAM. Associated with each cache line is another dirty bit, which indicates whether any of the cache line bytes has been written to (and therefore the cache line must be written back to DRAM before it can be reused). Note that it is possible for two different Cache Groups to be accessing the same address in memory and to get out of sync. The VLIW program writer is responsible to ensure that this is not an issue. It could be perfectly reasonable, for example, to have a Cache Group responsible for reading an image, and another Cache Group responsible for writing the changed image back to memory again. If the images are read or written sequentially there may be advantages in allocating cache lines in this manner. A total of 8 buses  connect the VLIW Vector Processor  to the Data cache . Each bus is connected to an I\/O Address Generator. (There are 2 I\/O Address Generators ,  per Processing Unit , and there are 4 Processing Units in the VLIW Vector Processor . The total number of buses is therefore 8.) In any given cycle, in addition to a single 32 bit (4 byte) access to the CPU's cache group (Group ), 4 simultaneous accesses of 16 bits (2 bytes) to remaining cache groups are permitted on the 8 VLIW Vector Processor  buses. The Data cache  is responsible for fairly processing the requests. On a given cycle, no more than 1 request to a specific Cache Group will be processed. Given that there are 8 Address Generators ,  in the VLIW Vector Processor , each one of these has the potential to refer to an individual Cache Group. However it is possible and occasionally reasonable for 2 or more Address Generators ,  to access the same Cache Group. The CPU is responsible for ensuring that the Cache Groups have been allocated the correct number of cache lines, and that the various Address Generators ,  in the VLIW Vector Processor  reference the specific Cache Groups correctly. The Data cache  as described allows for the Display Controller  and VLIW Vector Processor  to be active simultaneously. If the operation of these two components were deemed to never occur simultaneously, a total 9 Cache Groups would suffice. The CPU would use Cache Group , and the VLIW Vector Processor  and the Display Controller  would share the remaining 8 Cache Groups, requiring only 3 bits (rather than 4) to define which Cache Group would satisfy a particular request.","JTAG Interface ","A standard JTAG (Joint Test Action Group) Interface is included in the ACP  for testing purposes. Due to the complexity of the chip, a variety of testing techniques are required, including BIST (Built In Self Test) and functional block isolation. An overhead of 10% in chip area is assumed for overall chip testing circuitry. The test circuitry is beyond the scope of this document.","Serial Interfaces","USB Serial Port Interface ","This is a standard USB serial port, which is connected to the internal chip low speed bus, thereby allowing the CPU to control it.","Keyboard Interface ","This is a standard low-speed serial port, which is connected to the internal chip low speed bus, thereby allowing the CPU to control it. It is designed to be optionally connected to a keyboard to allow simple data input to customize prints.","Authentication Chip Serial Interfaces ","These are 2 standard low-speed serial ports, which are connected to the internal chip low speed bus, thereby allowing the CPU to control them. The reason for having 2 ports is to connect to both the on-camera Authentication chip, and to the print-roll Authentication chip using separate lines. Only using 1 line may make it possible for a clone print-roll manufacturer to design a chip which, instead of generating an authentication code, tricks the camera into using the code generated by the authentication chip in the camera.","Parallel Interface ","The parallel interface connects the ACP  to individual static electrical signals. The CPU is able to control each of these connections as memory-mapped I\/O via the low speed bus The following table is a list of connections to the parallel interface:",{"@attributes":{"id":"p-0331","num":"0389"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Connection","Direction","Pins"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Paper transport stepper motor","Out","4"]},{"entry":[{},"Artcard stepper motor","Out","4"]},{"entry":[{},"Zoom stepper motor","Out","4"]},{"entry":[{},"Guillotine motor","Out","1"]},{"entry":[{},"Flash trigger","Out","1"]},{"entry":[{},"Status LCD segment drivers","Out","7"]},{"entry":[{},"Status LCD common drivers","Out","4"]},{"entry":[{},"Artcard illumination LED","Out","1"]},{"entry":[{},"Artcard status LED (red\/green)","In","2"]},{"entry":[{},"Artcard sensor","In","1"]},{"entry":[{},"Paper pull sensor","In","1"]},{"entry":[{},"Orientation sensor","In","2"]},{"entry":[{},"Buttons","In","4"]},{"entry":[{},{},"TOTAL","36"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["78","79"]},"The VLIW Input and Output FIFOs are 8 bit wide FIFOs used for communicating between processes and the VLIW Vector Processor . Both FIFOs are under the control of the VLIW Vector Processor , but can be cleared and queried (e.g. for status) etc by the CPU.","VLIW Input FIFO ","A client writes 8-bit data to the VLIW Input FIFO  in order to have the data processed by the VLIW Vector Processor . Clients include the Image Sensor Interface, Artcard Interface, and CPU. Each of these processes is able to offload processing by simply writing the data to the FIFO, and letting the VLIW Vector Processor  do all the hard work. An example of the use of a client's use of the VLIW Input FIFO  is the Image Sensor Interface (ISI ). The ISI  takes data from the Image Sensor and writes it to the FIFO. A VLIW process takes it from the FIFO, transforming it into the correct image data format, and writing it out to DRAM. The ISI  becomes much simpler as a result.","VLIW Output FIFO ","The VLIW Vector Processor  writes 8-bit data to the VLIW Output FIFO  where clients can read it. Clients include the Print Head Interface and the CPU. Both of these clients is able to offload processing by simply reading the already processed data from the FIFO, and letting the VLIW Vector Processor  do all the hard work. The CPU can also be interrupted whenever data is placed into the VLIW Output FIFO , allowing it to only process the data as it becomes available rather than polling the FIFO continuously. An example of the use of a client's use of the VLIW Output FIFO  is the Print Head Interface (PHI ). A VLIW process takes an image, rotates it to the correct orientation, color converts it, and dithers the resulting image according to the print head requirements. The PHI  reads the dithered formatted 8-bit data from the VLIW Output FIFO  and simply passes it on to the Print Head external to the ACP . The PHI  becomes much simpler as a result.","VLIW Vector Processor ","To achieve the high processing requirements of Artcam, the ACP  contains a VLIW (Very Long Instruction Word) Vector Processor. The VLIW processor is a set of 4 identical Processing Units (PU e.g ) working in parallel, connected by a crossbar switch . Each PU e.g  can perform four 8-bit multiplications, eight 8-bit additions, three 32-bit additions, I\/O processing, and various logical operations in each cycle. The PUs e.g  are microcoded, and each has two Address Generators ,  to allow full use of available cycles for data processing. The four PUs e.g  are normally synchronized to provide a tightly interacting VLIW processor. Clocking at 200 MHz, the VLIW Vector Processor  runs at 12 Gops (12 billion operations per second). Instructions are tuned for image processing functions such as warping, artistic brushing, complex synthetic illumination, color transforms, image filtering, and compositing. These are accelerated by two orders of magnitude over desktop computers. As shown in more detail in FIG. (), the VLIW Vector Processor  is 4 PUs e.g  connected by a crossbar switch  such that each PU e.g  provides two inputs to, and takes two outputs from, the crossbar switch . Two common registers form a control and synchronization mechanism for the PUs e.g . 8 Cache buses  allow connectivity to DRAM via the Data cache , with 2 buses going to each PU e.g  (1 bus per I\/O Address Generator) Each PU e.g  consists of an ALU  (containing a number of registers & some arithmetic logic for processing data), some microcode RAM , and connections to the outside world (including other ALUs). A local PU state machine runs in microcode and is the means by which the PU e.g  is controlled. Each PU e.g  contains two I\/O Address Generators ,  controlling data flow between DRAM (via the Data cache ) and the ALU  (via Input FIFO and Output FIFO). The address generator is able to read and write data (specifically images in a variety of formats) as well as tables and simulated FIFOs in DRAM. The formats are customizable under software control, but are not microcoded. Data taken from the Data cache  is transferred to the ALU  via the 16-bit wide Input FIFO. Output data is written to the 16-bit wide Output FIFO and from there to the Data cache . Finally, all PUs e.g  share a single 8-bit wide VLIW Input FIFO  and a single 8-bit wide VLIW Output FIFO . The low speed data bus connection allows the CPU to read and write registers in the PU e.g , update microcode, as well as the common registers shared by all PUs e.g  in the VLIW Vector Processor . Turning now to , a closer detail of the internals of a single PU e.g  can be seen, with components and control signals detailed in subsequent hereinafter:","Microcode","Each PU e.g  contains a microcode RAM  to hold the program for that particular PU e.g . Rather than have the microcode in ROM, the microcode is in RAM, with the CPU responsible for loading it up. For the same space on chip, this tradeoff reduces the maximum size of any one function to the size of the RAM, but allows an unlimited number of functions to be written in microcode. Functions implemented using microcode include Vark acceleration, Artcard reading, and Printing. The VLIW Vector Processor  scheme has several advantages for the case of the ACP :\n\n","The CPU loaded microcode RAM  for controlling each PU e.g  is 128 words, with each word being 96 bits wide. A summary of the microcode size for control of various units of the PU e.g  is listed in the following table:",{"@attributes":{"id":"p-0338","num":"0401"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Process Block","Size (bits)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Status Output","3"]},{"entry":[{},"Branching (microcode control)","11"]},{"entry":[{},"In","8"]},{"entry":[{},"Out","6"]},{"entry":[{},"Registers","7"]},{"entry":[{},"Read","10"]},{"entry":[{},"Write","6"]},{"entry":[{},"Barrel Shifter","12"]},{"entry":[{},"Adder\/Logical","14"]},{"entry":[{},"Multiply\/Interpolate","19"]},{"entry":[{},"TOTAL","96"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"With 128 instruction words, the total microcode RAM  per PU e.g  is 12,288 bits, or 1.5 KB exactly. Since the VLIW Vector Processor  consists of 4 identical PUs e.g  this equates to 6,144 bytes, exactly 6 KB. Some of the bits in a microcode word are directly used as control bits, while others are decoded. See the various unit descriptions that detail the interpretation of each of the bits of the microcode word.","Synchronization Between PUs e.g ","Each PU e.g  contains a 4 bit Synchronization Register . It is a mask used to determine which PUs e.g  work together, and has one bit set for each of the corresponding PUs e.g  that are functioning as a single process. For example, if all of the PUs e.g  were functioning as a single process, each of the 4 Synchronization Register s would have all 4 bits set. If there were two asynchronous processes of 2 PUs e.g  each, two of the PUs e.g  would have 2 bits set in their Synchronization Register s (corresponding to themselves), and the other two would have the other 2 bits set in their Synchronization Register s (corresponding to themselves).","The Synchronization Register  is used in two basic ways:\n\n","The CPU is responsible for loading the microcode RAM  and loading the execution address for the first. instruction (usually 0). When the CPU starts executing microcode, it begins at the specified address.","Execution of microcode only occurs when all the bits of the Synchronization Register  are also set in the Common Synchronization Register . The CPU therefore sets up all the PUs e.g  and then starts or stops processes with a single write to the Common Synchronization Register . This synchronization scheme allows multiple processes to be running asynchronously on the PUs e.g , being stopped and started as processes rather than one PU e.g  at a time.","Suspending Execution Within a Process","In a given cycle, a PU e.g  may need to read from or write to a FIFO (based on the opcode of the current microcode instruction). If the FIFO is empty on a read request, or full on a write request, the FIFO request cannot be completed. The PU e.g  will therefore assert its SuspendProcess control signal . The SuspendProcess signals from all PUs e.g  are fed back to all the PUs e.g . The Synchronization Register  is ANDed with the 4 SuspendProcess bits, and if the result is non-zero, none of the PU e.g 's register WriteEnables or FIFO strobes will be set. Consequently none of the PUs e.g  that form the same process group as the PU e.g  that was unable to complete its task will have their registers or FIFOs updated during that cycle. This simple technique keeps a given process group in synchronization. Each subsequent cycle the PU e.g 's state machine will attempt to re-execute the microcode instruction at the same address, and will continue to do so until successful. Of course the Common Synchronization Register  can be written to by the CPU to stop the entire process if necessary. This synchronization scheme allows any combinations of PUs e.g  to work together, each group only affecting its co-workers with regards to suspension due to data not being ready for reading or writing.","Control and Branching","During each cycle, each of the four basic input and calculation units within a PU e.g 's ALU  (Read, Adder\/Logic, Multiply\/Interpolate, and Barrel Shifter) produces two status bits: a Zero flag and a Negative flag indicating whether the result of the operation during that cycle was 0 or negative. Each cycle one of those 4 status bits is chosen by microcode instructions to be output from the PU e.g . The 4 status bits (1 per PU e.g 's ALU ) combined into a 4 bit Common Status Register . During the next cycle, each PU e.g 's microcode program can select one of the bits from the Common Status Register , and branch to another microcode address dependant on the value of the status bit.","Status Bit","Each PU e.g 's ALU  contains a number of input and calculation units. Each unit produces 2 status bits\u2014a negative flag and a zero flag. One of these status bits is output from the PU e.g  when a particular unit asserts the value on the 1-bit tri-state status bit bus. The single status bit is output from the PU e.g , and then combined with the other PU e.g 178 status bits to update the Common Status Register . The microcode for determining the output status bit takes the following form:",{"@attributes":{"id":"p-0347","num":"0412"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["# Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2","Select unit whose status bit is to be output"]},{"entry":[{},"00 = Adder unit"]},{"entry":[{},"01 = Multiply\/Logic unit"]},{"entry":[{},"10 = Barrel Shift unit"]},{"entry":[{},"11 = Reader unit"]},{"entry":["1","0 = Zero flag"]},{"entry":[{},"1 = Negative flag"]},{"entry":["3","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Within the ALU , the 2-bit Select Processor Block value is decoded into four 1-bit enable bits, with a different enable bit sent to each processor unit block. The status select bit (choosing Zero or Negative) is passed into all units to determine which bit is to be output onto the status bit bus.","Branching Within Microcode","Each PU e.g  contains a 7 bit Program Counter (PC) that holds the current microcode address being executed. Normal program execution is linear, moving from address N in one cycle to address N+1 in the next cycle. Every cycle however, a microcode program has the ability to branch to a different location, or to test a status bit from the Common Status Register  and branch. The microcode for determining the next execution address takes the following form:",{"@attributes":{"id":"p-0350","num":"0415"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["# Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2","00 = NOP (PC = PC+1)"]},{"entry":[{},"01 = Branch always"]},{"entry":[{},"10 = Branch if status bit clear"]},{"entry":[{},"11 = Branch if status bit set"]},{"entry":["2","Select status bit from status word"]},{"entry":["7","Address to branch to (absolute address, 00-7F)"]},{"entry":["11","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"ALU ",{"@attributes":{"id":"p-0352","num":"0417"},"figref":"FIG. 5","b":["188","188"],"ul":{"@attributes":{"id":"ul0023","list-style":"none"},"li":{"@attributes":{"id":"ul0023-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":["Read Block , for accepting data from the input FIFOs","Write Block , for sending data out via the output FIFOs","Adder\/Logical block , for addition & subtraction, comparisons and logical operations","Multiply\/Interpolate block , for multiple types of interpolations and multiply\/accumulates","Barrel Shift block , for shifting data as required","In block , for accepting data from the external crossbar switch ","Out block , for sending data to the external crossbar switch ","Registers block , for holding data in temporary storage"]}}}},"Four specialized 32 bit registers hold the results of the 4 main processing blocks:\n\n","In addition there are two internal crossbar switches  for data transport. The various process blocks are further expanded in the following sections, together with the microcode definitions that pertain to each block. Note that the microcode is decoded within a block to provide the control signals to the various units within.","Data Transfers Between PUs e.g ","Each PU e.g  is able to exchange data via the external crossbar. A PU e.g  takes two inputs and outputs two values to the external crossbar. In this way two operands for processing can be obtained in a single cycle, but cannot be actually used in an operation until the following cycle.","In ","This block is illustrated in FIG.  and contains two registers, Inand Inthat accept data from the external crossbar. The registers can be loaded each cycle, or can remain unchanged. The selection bits for choosing from among the 8 inputs are output to the external crossbar switch . The microcode takes the following form:",{"@attributes":{"id":"p-0357","num":"0434"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["# Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","0 = NOP"]},{"entry":[{},"1 = Load Infrom crossbar"]},{"entry":["3","Select Input 1 from external crossbar"]},{"entry":["1","0 = NOP"]},{"entry":[{},"1 = Load Infrom crossbar"]},{"entry":["3","Select Input 2 from external crossbar"]},{"entry":["8","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"208"},"Complementing In is Out . The Out block is illustrated in more detail in FIG. . Out contains two registers, Outand Out, both of which are output to the external crossbar each cycle for use by other PUs e.g . The Write unit is also able to write one of Outor Outto one of the output FIFOs attached to the ALU . Finally, both registers are available as inputs to Crossbar, which therefore makes the register values available as inputs to other units within the ALU . Each cycle either of the two registers can be updated according to microcode selection. The data loaded into the specified register can be one of D-D(selected from Crossbar) one of M, L, S, and R (selected from Crossbar), one of 2 programmable constants, or the fixed values 0 or 1. The microcode for Out takes the following form:",{"@attributes":{"id":"p-0359","num":"0436"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["# Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","0 = NOP"]},{"entry":[{},"1 = Load Register"]},{"entry":["1","Select Register to load [Outor Out]"]},{"entry":["4","Select input [In, In, Out, Out, D, D, D, D,"]},{"entry":[{},"M, L, S, R, K, K, 0, 1]"]},{"entry":["6","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"188"},"As noted previously, the ALU  contains four specialized 32-bit registers to hold the results of the 4 main processing blocks:\n\n","The CPU has direct access to these registers, and other units can select them as inputs via Crossbar. Sometimes it is necessary to delay an operation for one or more cycles. The Registers block contains four 32-bit registers D-Dto hold temporary variables during processing. Each cycle one of the registers can be updated, while all the registers are output for other units to use via Crossbar (which also includes In, In, Outand Out). The CPU has direct access to these registers. The data loaded into the specified register can be one of D-D(selected from Crossbar) one of M, L, S, and R (selected from Crossbar), one of 2 programmable constants, or the fixed values 0 or 1. The Registers block  is illustrated in more detail in FIG. . The microcode for Registers takes the following form:",{"@attributes":{"id":"p-0362","num":"0443"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["# Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","0 = NOP"]},{"entry":[{},"1 = Load Register"]},{"entry":["2","Select Register to load [D-D]"]},{"entry":["4","Select input [In, In, Out, Out, D, D, D, D,"]},{"entry":[{},"M, L, S, R, K, K, 0, 1]"]},{"entry":["7","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["1","213"]},"Crossbar is illustrated in more detail in FIG. . Crossbar is used to select from inputs In, In, Out, Out, D-D. 7 outputs are generated from Crossbar:3 to the Multiply\/Interpolate Unit, 2 to the Adder Unit, 1 to the Registers unit and 1 to the Out unit. The control signals for Crossbar come from the various units that use the Crossbar inputs. There is no specific microcode that is separate for Crossbar.","Crossbar","Crossbar is illustrated in more detail in FIG. . Crossbar is used to select from the general ALU  registers M, L, S and R. 6 outputs are generated from Crossbar:2 to the Multiply\/Interpolate Unit, 2 to the Adder Unit, 1 to the Registers unit and 1 to the Out unit. The control signals for Crossbar come from the various units that use the Crossbar inputs. There is no specific microcode that is separate for Crossbar.","Data Transfers Between PUs e.g  and DRAM or External Processes","Returning to , PUs e.g  share data with each other directly via the external crossbar. They also transfer data to and from external processes as well as DRAM. Each PU e.g  has 2 I\/O Address Generators ,  for transferring data to and from DRAM. A PU e.g  can send data to DRAM via an I\/O Address Generator's Output FIFO e.g. , or accept data from DRAM via an I\/O Address Generator's Input FIFO . These FIFOs are local to the PU e.g . There is also a mechanism for transferring data to and from external processes in the form of a common VLIW Input FIFO  and a common VLIW Output FIFO , shared between all ALUs. The VLIW Input and Output FIFOs are only 8 bits wide, and are used for printing, Artcard reading, transferring data to the CPU etc. The local Input and Output FIFOs are 16 bits wide.","Read","The Read process block  of  is responsible for updating the ALU 's R register , which represents the external input data to a VLIW microcoded process. Each cycle the Read Unit is able to read from either the common VLIW Input FIFO  (8 bits) or one of two local Input FIFOs (16 bits). A 32-bit value is generated, and then all or part of that data is transferred to the R register . The process can be seen in FIG. . The microcode for Read is described in the following table. Note that the interpretations of some bit patterns are deliberately chosen to aid decoding.",{"@attributes":{"id":"p-0367","num":"0448"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["# Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2","00 = NOP"]},{"entry":[{},"01 = Read from VLIW Input FIFO 78"]},{"entry":[{},"10 = Read from Local FIFO 1"]},{"entry":[{},"11 = Read from Local FIFO 2"]},{"entry":["1","How many significant bits"]},{"entry":[{},"0 = 8 bits (pad with 0 or sign extend)"]},{"entry":[{},"1 = 16 bits (only valid for Local FIFO reads)"]},{"entry":["1","0 = Treat data as unsigned (pad with 0)"]},{"entry":[{},"1 = Treat data as signed (sign extend when reading from FIFO)r"]},{"entry":["2","How much to shift data left by:"]},{"entry":[{},"00 = 0 bits (no change)"]},{"entry":[{},"01 = 8 bits"]},{"entry":[{},"10 = 16 bits"]},{"entry":[{},"11 = 24 bits"]},{"entry":["4","Which bytes of R to update (hi to lo order byte)"]},{"entry":[{},"Each of the 4 bits represents 1 byte WriteEnable on R"]},{"entry":["10","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The Write process block is able to write to either the common VLIW Output FIFO  or one of the two local Output FIFOs each cycle. Note that since only 1 FIFO is written to in a given cycle, only one 16-bit value is output to all FIFOs, with the low 8 bits going to the VLIW Output FIFO . The microcode controls which of the FIFOs gates in the value. The process of data selection can be seen in more detail in FIG. . The source values Outand Outcome from the Out block. They are simply two registers. The microcode for Write takes the following form:",{"@attributes":{"id":"p-0369","num":"0450"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["# Bits","Description "]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2","00 = NOP"]},{"entry":[{},"01 = Write VLIW Output FIFO 79"]},{"entry":[{},"10 = Write local Output FIFO 1"]},{"entry":[{},"11 = Write local Output FIFO 2"]},{"entry":["1","Select Output Value [Outor Out]"]},{"entry":["3","Select part of Output Value to write (32 bits = 4 bytes ABCD)"]},{"entry":[{},"000 = 0D"]},{"entry":[{},"001 = 0D"]},{"entry":[{},"010 = 0B"]},{"entry":[{},"011 = 0A"]},{"entry":[{},"100 = CD"]},{"entry":[{},"101 = BC"]},{"entry":[{},"110 = AB"]},{"entry":[{},"111 = 0"]},{"entry":["6","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Each ALU  has two computational process blocks, namely an Adder\/Logic process block , and a Mutiply\/Interpolate process block . In addition there is a Barrel Shifter block to provide help to these computational blocks. Registers from the Registers block  can be used for temporary storage during pipelined operations.","Barrel Shifter","The barrel shifter process block  is shown in more detail in FIG.  and takes its input from the output of Adder\/Logic or Multiply\/Interpolate process blocks or the previous cycle's results from those blocks (ALU registers L and M). The 32 bits selected are barrel shifted an arbitrary number of bits in either direction (with sign extension as necessary), and output to the ALU 's S register . The microcode for the Barrel Shift process block is described in the following table. Note that the interpretations of some bit patterns are deliberately chosen to aid decoding.",{"@attributes":{"id":"p-0372","num":"0453"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["# Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","000 = NOP"]},{"entry":[{},"001 = Shift Left (unsigned)"]},{"entry":[{},"010 = Reserved"]},{"entry":[{},"011 = Shift Left (signed)"]},{"entry":[{},"100 = Shift right (unsigned, no rounding)"]},{"entry":[{},"101 = Shift right (unsigned, with rounding)"]},{"entry":[{},"110 = Shift right (signed, no rounding)"]},{"entry":[{},"111 = Shift right (signed, with rounding)"]},{"entry":["2","Select Input to barrel shift:"]},{"entry":[{},"00 = Multiply\/Interpolate result"]},{"entry":[{},"01 = M"]},{"entry":[{},"10 = Adder\/Logic result"]},{"entry":[{},"11 = L"]},{"entry":["5","# bits to shift"]},{"entry":["1","Ceiling of 255"]},{"entry":["1","Floor of 0 (signed data)"]},{"entry":["12","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"204"},"The adder logic process block is shown in more detail in FIG.  and is designed for simple 32-bit addition\/subtraction, comparisons, and logical operations. In a single cycle a single addition, comparison, or logical operation can be performed, with the result stored in the ALU 's L register . There are two primary operands, A and B, which are selected from either of the two crossbars or from the 4 constant registers. One crossbar selection allows the results of the previous cycle's arithmetic operation to be used while the second provides access to operands previously calculated by this or another ALU . The CPU is the only unit that has write access to the four constants (K-K). In cases where an operation such as (A+B)\u00d74 is desired, the direct output from the adder can be used as input to the Barrel Shifter, and can thus be shifted left 2 places without needing to be latched into the L register  first. The output from the adder can also be made available to the multiply unit for a multiply-accumulate operation. The microcode for the Adder\/Logic process block is described in the following table. The interpretations of some bit patterns are deliberately chosen to aid coding. Microcode bit interpretation for Adder\/Logic unit",{"@attributes":{"id":"p-0374","num":"0455"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["# Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["4","0000 = A + B (carry in = 0)"]},{"entry":[{},"0001 = A + B (carry in = carry out of previous operation)"]},{"entry":[{},"0010 = A + B + 1 (carry in = 1)"]},{"entry":[{},"0011 = A + 1 (increments A)"]},{"entry":[{},"0100 = A \u2212 B \u2212 1 (carry in = 0)"]},{"entry":[{},"0101 = A \u2212 B (carry in = carry out of previous operation)"]},{"entry":[{},"0110 = A \u2212 B (carry in = 1)"]},{"entry":[{},"0111 = A \u2212 1 (decrements A)"]},{"entry":[{},"1000 = NOP"]},{"entry":[{},"1001 = ABS(A \u2212 B)"]},{"entry":[{},"1010 = MIN(A, B)"]},{"entry":[{},"1011 = MAX(A, B)"]},{"entry":[{},"1100 = A AND B (both A & B can be inverted, see below)"]},{"entry":[{},"1101 = A OR B (both A & B can be inverted, see below)"]},{"entry":[{},"1110 = A XOR B (both A & B can be inverted, see below)"]},{"entry":[{},"1111 = A (A can be inverted, see below)"]},{"entry":["1","If logical operation:"]},{"entry":[{},"0 = A = A"]},{"entry":[{},"1 = A = NOT(A)"]},{"entry":[{},"If Adder operation:"]},{"entry":[{},"0 = A is unsigned"]},{"entry":[{},"1 = A is signed"]},{"entry":["1","If logical operation:"]},{"entry":[{},"0 = B = B"]},{"entry":[{},"1 = B = NOT(B)"]},{"entry":[{},"If Adder operation"]},{"entry":[{},"0 = B is unsigned"]},{"entry":[{},"1 = B is signed"]},{"entry":["4","Select A [In, In, Out, Out, D, D, D, D,"]},{"entry":[{},"M, L, S, R, K, K, K, K]"]},{"entry":["4","Select B [In, In, Out, Out, D, D, D, D,"]},{"entry":[{},"M, L, S, R, K, K, K, K]"]},{"entry":["14","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"205"},"The Multiply\/Interpolate process block is shown in more detail in FIG.  and is a set of four 8\u00d78 interpolator units that are capable of performing four individual 8\u00d78 interpolates per cycle, or can be combined to perform a single 16\u00d716 multiply. This gives the possibility to perform up to 4 linear interpolations, a single bi-linear interpolation, or half of a tri-linear interpolation in a single cycle. The result of the interpolations or multiplication is stored in the ALU 's M register . There are two primary operands, A and B, which are selected from any of the general registers in the ALU  or from four programmable constants internal to the Multiply\/Interpolate process block. Each interpolator block functions as a simple 8 bit interpolator [result=A+(B\u2212A)f] or as a simple 8\u00d78 multiply [result=A*b]. When the operation is interpolation, A and B are treated as four 8 bit numbers Athru A(Ais the low order byte), and Bthru B. Agen, Bgen, and Fgen are responsible for ordering the inputs to the Interpolate units so that they match the operation being performed. For example, to perform bilinear interpolation, each of the 4 values must be multiplied by a different factor & the result summed, while a 16\u00d716 bit multiplication requires the factors to be 0. The microcode for the Adder\/Logic process block is described in the following table. Note that the interpretations of some bit patterns are deliberately chosen to aid decoding.",{"@attributes":{"id":"p-0376","num":"0457"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["# Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["4","0000 = (A* B) + V"]},{"entry":[{},"0001 = (A0 * B0) + (A1 * B1) + V"]},{"entry":[{},"0010 = (A* B) \u2212 V"]},{"entry":[{},"0011 = V \u2212 (A* B)"]},{"entry":[{},"0100 = Interpolate A, Bby f"]},{"entry":[{},"0101 = Interpolate A, Bby f, A, Bby f"]},{"entry":[{},"0110 = Interpolate A, Bby f, A, Bby f, A, Bby f"]},{"entry":[{},"0111 = Interpolate A, Bby f, A, Bby f, A,"]},{"entry":[{},"Bby f, A, Bby f"]},{"entry":[{},"1000 = Interpolate 16 bits stage 1 [M = A* f]"]},{"entry":[{},"1001 = Interpolate 16 bits stage 2 [M = M + (A* f)]"]},{"entry":[{},"1010 = Tri-linear interpolate A by f stage 1 [M = Af+ Af+"]},{"entry":[{},"Af+ Af]"]},{"entry":[{},"1011 = Tri-linear interpolate A by f stage 2"]},{"entry":[{},"[M = M + Af+ Af+ Af+ Af]"]},{"entry":[{},"1100 = Bi-linear interpolate A by f stage 1 [M = Af+ Af]"]},{"entry":[{},"1101 = Bi-linear interpolate A by f stage 2 [M = M + Af+"]},{"entry":[{},"Af]"]},{"entry":[{},"1110 = Bi-linear interpolate A by f complete [M = Af+ Af+"]},{"entry":[{},"Af+ Af]"]},{"entry":[{},"1111 = NOP"]},{"entry":["4","Select A [In, In, Out, Out, D, D, D, D,"]},{"entry":[{},"M, L, S, R, K, K, K, K]"]},{"entry":["4","Select B [In, In, Out, Out, D, D, D, D,"]},{"entry":[{},"M, L, S, R, K, K, K, K]"]},{"entry":"If"},{"entry":"Mult:"},{"entry":["4","Select V [In, In, Out, Out, D, D, D, D,"]},{"entry":[{},"K, K, K, K, Adder result, M, 0, 1]"]},{"entry":["1","Treat A as signed"]},{"entry":["1","Treat B as signed"]},{"entry":["1","Treat V as signed"]},{"entry":"If"},{"entry":"Interp:"},{"entry":["4","Select basis for f [In, In, Out, Out, D, D, D, D,"]},{"entry":[{},"K, K, K, K, X, X, X, X]"]},{"entry":["1","Select interpolation f generation from Por P"]},{"entry":[{},"Pis interpreted as # fractional bits in f"]},{"entry":[{},"If P= 0, f is range 0 . . . 255 representing 0 . . . 1"]},{"entry":["2","Reserved"]},{"entry":["19\u2002","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The same 4 bits are used for the selection of V and f, although the last 4 options for V don't generally make sense as f values. Interpolating with a factor of 1 or 0 is pointless, and the previous multiplication or current result is unlikely to be a meaningful value for f.","Address Generation , ","The I\/O Address Generators are shown in more detail in  VLIW process does not access DRAM directly. Access is via 2 I\/O Address Generators , , each with its own Input and Output FIFO. A PU e.g  reads data from one of two local Input FlFOs, and writes data to one of two local Output FIFOs. Each I\/O Address Generator is responsible for reading data from DRAM and placing it into its Input FIFO, where it can be read by the PU e.g , and is responsible for taking the data from its Output FIFO (placed there by the PU e.g ) and writing it to DRAM. The I\/O Address Generator is a state machine responsible for generating addresses and control for data retrieval and storage in DRAM via the Data cache . It is customizable under CPU software control, but cannot be microcoded. The address. generator produces addresses in two broad categories:\n\n","The I\/O Address Generator has a set of registers for that are used to control address generation. The addressing mode also determines how the data is formatted and sent into the local Input FIFO, and how data is interpreted from the local Output FIFO. The CPU is able to access the registers of the I\/O Address Generator via the low speed bus. The first set of registers define the housekeeping parameters for the I\/O Generator:",{"@attributes":{"id":"p-0380","num":"0463"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Register Name","# bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Reset","0","A write to this register halts any operations,"]},{"entry":[{},{},"and writes 0s to all the data registers of the"]},{"entry":[{},{},"I\/O Generator. The input and output FIFOs"]},{"entry":[{},{},"are not cleared."]},{"entry":["Go","0","A write to this register restarts the counters"]},{"entry":[{},{},"according to the current setup. For example,"]},{"entry":[{},{},"if the I\/O Generator is a Read Iterator, and"]},{"entry":[{},{},"the Iterator is currently halfway through the"]},{"entry":[{},{},"image, a write to Go will cause the reading"]},{"entry":[{},{},"to begin at the start of the image again."]},{"entry":[{},{},"While the I\/O Generator is performing, the"]},{"entry":[{},{},"Active bit of the Status register will be set."]},{"entry":["Halt","0","A write to this register stops any current"]},{"entry":[{},{},"activity and clears the Active bit of the"]},{"entry":[{},{},"Status register. If the Active bit is already"]},{"entry":[{},{},"cleared, writing to this register has no effect."]},{"entry":["Continue","0","A write to this register continues the I\/O"]},{"entry":[{},{},"Generator from the current setup. Counters"]},{"entry":[{},{},"are not reset, and FIFOs are not cleared."]},{"entry":[{},{},"A write to this register while the I\/O"]},{"entry":[{},{},"Generator is active has no effect."]},{"entry":["ClearFIFOsOnGo","1","0 = Don't clear FIFOs on a write to the"]},{"entry":[{},{},"Go bit."]},{"entry":[{},{},"1 = Do clear FIFOs on a write to the Go bit."]},{"entry":["Status","8","Status flags"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The Status register has the following values",{"@attributes":{"id":"p-0382","num":"0465"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Register Name","# bits","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Active","1","0 = Currently inactive"]},{"entry":[{},{},{},"1 = Currently active"]},{"entry":[{},"Reserved","7","\u2014"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Several registers are used to control the caching mechanism, specifying which cache group to use for inputs, outputs etc. See the section on the Data cache  for more information about cache groups.",{"@attributes":{"id":"p-0384","num":"0467"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Register Name","# bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CacheGroup1","4","Defines cache group to read data from"]},{"entry":["CacheGroup2","4","Defines which cache group to write data to, and"]},{"entry":[{},{},"in the case of the ImagePyramidLookup I\/O"]},{"entry":[{},{},"mode, defines the cache to use for reading the"]},{"entry":[{},{},"Level Inforrnation Table."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The primary image pixel access method for software and hardware algorithms is via Image Iterators. Image iterators perform all of the addressing and access to the caches of the pixels within an image channel and read, write or read & write pixels for their client. Read Iterators read pixels in a specific order for their clients, and Write Iterators write pixels in a specific order for their clients. Clients of iterators read pixels from the local Input FIFO or write pixels via the local Output FIFO.","Read Image Iterators read through an image in a specific order, placing the pixel data into the local Input FIFO. Every time a client reads a pixel from the Input FIFO, the Read Iterator places the next pixel from the image (via the Data cache ) into the FIFO.","Write Image Iterators write pixels in a specific order to write out the entire image. Clients write pixels to the Output FIFO that is in turn read by the Write Image Iterator and written to DRAM via the Data cache .","Typically a VLIW process will have its input tied to a Read Iterator, and output tied to a corresponding Write Iterator. From the PU e.g  microcode program's perspective, the FIFO is the effective interface to DRAM. The actual method of carrying out the storage (apart from the logical ordering of the data) is not of concern. Although the FIFO is perceived to be effectively unlimited in length, in practice the FIFO is of limited length, and there can be delays storing and retrieving data, especially if several memory accesses are competing. A variety of Image Iterators exist to cope with the most common addressing requirements of image processing algorithms. In most cases there is a corresponding Write Iterator for each Read Iterator. The different Iterators are listed in the following table:",{"@attributes":{"id":"p-0389","num":"0472"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Read Iterators","Write Iterators"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Sequential Read","Sequential Write"]},{"entry":[{},"Box Read","\u2014"]},{"entry":[{},"Vertical Strip Read","Vertical Strip Write"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The 4 bit Address Mode Register is used to determine the Iterator type:",{"@attributes":{"id":"p-0391","num":"0474"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Bit #","Address Mode"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","0 = This addressing mode is an Iterator"]},{"entry":["2 to 0","Iterator Mode"]},{"entry":[{},"001 = Sequential Iterator"]},{"entry":[{},"010 = Box [read only]"]},{"entry":[{},"100 = Vertical Strip"]},{"entry":[{},"remaining bit patterns are reserved"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The Access Specific registers are used as follows:",{"@attributes":{"id":"p-0393","num":"0476"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Register Name","LocalName","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AccessSpecific","Flags","Flags used for reading and writing"]},{"entry":["AccessSpecific","XBoxSize","Determines the size in X of Box Read."]},{"entry":[{},{},"Valid values are 3, 5, and 7."]},{"entry":["AccessSpecific","YBoxSize","Determines the size in Y of Box Read."]},{"entry":[{},{},"Valid values are 3, 5, and 7."]},{"entry":["AccessSpecific","BoxOffset","Offset between one pixel center and the"]},{"entry":[{},{},"next during a Box Read only."]},{"entry":[{},{},"Usual value is 1, but other useful values"]},{"entry":[{},{},"include 2, 4, 8 . . . "]},{"entry":[{},{},"See Box Read for more details."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The Flags register (AccessSpecific) contains a number of flags used to determine factors affecting the reading and writing of data. The Flags register has the following composition:",{"@attributes":{"id":"p-0395","num":"0478"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Label","# bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ReadEnable","1","Read data from DRAM"]},{"entry":["WriteEnable","1","Write data to DRAM [not valid for Box mode]"]},{"entry":["PassX","1","Pass X (pixel) ordinate back to Input FIFO"]},{"entry":["PassY","1","Pass Y (row) ordinate back to Input FIFO"]},{"entry":["Loop","1","0 = Do not loop through data"]},{"entry":[{},{},"1 = Loop through data"]},{"entry":["Reserved","11\u2002","Must be 0"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0031","list-style":"none"},"li":{"@attributes":{"id":"ul0031-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":["When ReadEnable is set, the I\/O Address Generator acts as a Read Iterator, and therefore reads the image in a particular order, placing the pixels into the Input FIFO.","When WriteEnable is set, the I\/O Address Generator acts as a Write Iterator, and therefore writes the image in a particular order, taking the pixels from the Output FIFO.","When both ReadEnable and WriteEnable are set, the I\/O Address Generator acts as a Read Iterator and as a Write Iterator, reading pixels into the Input FIFO, and writing pixels from the Output FIFO. Pixels are only written after they have been read\u2014i.e. the Write Iterator will never go faster than the Read Iterator. Whenever this mode is used, care should be taken to ensure balance between in and out processing by the VLIW microcode. Note that separate cache groups can be specified on reads and writes by loading different values in CacheGroup and CacheGroup.\n\nNotes on PassX and PassY:\n","If PassX and PassY are both set, the Y ordinate is placed into the Input FIFO before the X ordinate.","PassX and PassY are only intended to be set when the ReadEnable bit is clear. Instead of passing the ordinates to the address generator, the ordinates are placed directly into the Input FIFO. The ordinates advance as they are removed from the FIFO.","If WriteEnable bit is set, the VLIW program must ensure that it balances reads of ordinates from the Input FIFO with writes to the Output FIFO, as writes will only occur up to the ordinates (see note on ReadEnable and WriteEnable above).\n\nNotes on Loop:\n","If the Loop bit is set, reads will recommence at [StartPixel, StartRow] once it has reached [EndPixel, EndRow]. This is ideal for processing a structure such a convolution kernel or a dither cell matrix, where the data must be read repeatedly.","Looping with ReadEnable and WriteEnable set can be useful in an environment keeping a single line history, but only where it is useful to have reading occur before writing. For a FIFO effect (where writing occurs before reading in a length constrained fashion), use an appropriate Table I\/O addressing mode instead of an Image Iterator.","Looping with only WriteEnable set creates a written window of the last N pixels. This can be used with an asynchronous process that reads the data from the window. The Artcard Reading algorithm makes use of this mode.\n\nSequential Read and Write Iterators\n"]}}}},{"@attributes":{"id":"p-0396","num":"0488"},"figref":"FIG. 17","b":"18"},"In most cases, the source and destination images are different, and are represented by 2 I\/O Address Generators , . However it can be valid to have the source image and destination image to be the same, since a given input pixel is not read more than once. In that case, then the same Iterator can be used for both input and output, with both the ReadEnable and WriteEnable registers set appropriately. For maximum efficiency, 2 different cache groups should be used\u2014one for reading and the other for writing. If data is being created by a VLIW process to be written via a Sequential Write Iterator, the PassX and PassY flags can be used to generate coordinates that are then passed down the Input FIFO. The VLIW process can use these coordinates and create the output data appropriately.","Box Read Iterator","The Box Read Iterator is used to present pixels in an order most useful for performing operations such as general-purpose filters and convolve. The Iterator presents pixel values in a square box around the sequentially read pixels. The box is limited to being 1, 3, 5, or 7 pixels wide in X and Y (set XBoxSize and YBoxSize\u2014they must be the same value or 1 in one dimension and 3, 5, or 7 in the other). The process is shown in FIG. :","BoxOffset: This special purpose register is used to determine a sub-sampling in terms of which input pixels will be used as the center of the box. The usual value is 1, which means that each pixel is used as the center of the box. The value \u201c2\u201d would be useful in scaling an image down by 4:1 as in the case of building an image pyramid. Using pixel addresses from the previous diagram, the box would be centered on pixel , then , , and . The Box Read Iterator requires access to a maximum of 14 (2\u00d77) cache lines. While pixels are presented from one set of 7 lines, the other cache line can be loaded from memory.","Box Write Iterator","There is no corresponding Box Write Iterator, since the duplication of pixels is only required on input. A process that uses the Box Read Iterator for input would most likely use the Sequential Write Iterator for output since they are in sync. A good example is the convolver, where N input pixels are read to calculate 1 output pixel. The process flow is as illustrated in FIG. . The source and destination images should not occupy the same memory when using a Box Read Iterator, as subsequent lines of an image require the original (not newly calculated) values.","Vertical-Strip Read and Write Iterators","In some instances it is necessary to write an image in output pixel order, but there is no knowledge about the direction of coherence in input pixels in relation to output pixels. An example of this is rotation. If an image is rotated 90 degrees, and we process the output pixels horizontally, there is a complete loss of cache coherence. On the other hand, if we process the output image one cache line's width of pixels at a time and then advance to the next line (rather than advance to the next cache-line's worth of pixels on the same line), we will gain cache coherence for our input image pixels. It can also be the case that there is known \u2018block\u2019 coherence in the input pixels (such as color coherence), in which case the read governs the processing order, and the write, to be synchronized, must follow the same pixel order. The order of pixels presented as input (Vertical-Strip Read), or expected for output (Vertical-Strip Write) is the same. The order is pixels  to  from line , then pixels  to  of line  etc for all lines of the image, then pixel  to  of line , pixels  to  of line  etc. In the final vertical strip there may not be exactly 32 pixels wide. In this case only the actual pixels in the image are presented or expected as input. This process is illustrated in FIG. . process that requires only a Vertical-Strip Write Iterator will typically have a way of mapping input pixel coordinates given an output pixel coordinate. It would access the input image pixels according to this mapping, and coherence is determined by having sufficient cache lines on the \u2018random-access\u2019 reader for the input image. The coordinates will typically be generated by setting the PassX and PassY flags on the VerticalStripWrite Iterator, as shown in the process overview illustrated in FIG. .","It is not meaningful to pair a Write Iterator with a Sequential Read Iterator or a Box read Iterator, but a Vertical-Strip Write Iterator does give significant improvements in performance when there is a non trivial mapping between input and output coordinates.","It can be meaningful to pair a Vertical Strip Read Iterator and Vertical Strip Write Iterator. In this case it is possible to assign both to a single ALU  if input and output images are the same. If coordinates are required, a further Iterator must be used with PassX and PassY flags set. The Vertical Strip Read\/Write Iterator presents pixels to the Input FIFO, and accepts output pixels from the Output FIFO. Appropriate padding bytes will be inserted on the write. Input and output require a minimum of 2 cache lines each for good performance.","Table I\/O Addressing Modes","It is often necessary to lookup values in a table (such as an image). Table I\/O addressing modes provide this functionality, requiring the client to place the index\/es into the Output FIFO. The I\/O Address Generator then processes the index\/es, looks up the data appropriately, and returns the looked-up values in the Input FIFO for subsequent processing by the VLIW client.","1D, 2D and 3D tables are supported, with particular modes targeted at interpolation. To reduce complexity on the VLIW client side, the index values are treated as fixed-point numbers, with AccessSpecific registers defining the fixed point and therefore which bits should be treated as the integer portion of the index. Data formats are restricted forms of the general Image Characteristics in that the PixelOffset register is ignored, the data is assumed to be contiguous within a row, and can only be 8 or 16 bits (1 or 2 bytes) per data element. The 4 bit Address Mode Register is used to determine the I\/O type:",{"@attributes":{"id":"p-0406","num":"0498"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Bit #","Address Mode"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"3","1 = This addressing mode is Table I\/O"]},{"entry":[{},"2 to 0","000 = 1D Direct Lookup"]},{"entry":[{},{},"001 = 1D Interpolate (linear)"]},{"entry":[{},{},"010 = DRAM FIFO"]},{"entry":[{},{},"011 = Reserved"]},{"entry":[{},{},"100 = 2D Interpolate (bi-linear)"]},{"entry":[{},{},"101 = Reserved"]},{"entry":[{},{},"110 = 3D Interpolate (tri-linear)"]},{"entry":[{},{},"111 = Image Pyramid Lookup"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The access specific registers are:",{"@attributes":{"id":"p-0408","num":"0500"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Register Name","LocalName","#bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AccessSpecific","Flags","8","General flags for reading and"]},{"entry":[{},{},{},"writing. See below for more"]},{"entry":[{},{},{},"information."]},{"entry":["AccessSpecific","FractX","8","Number of fractional bits"]},{"entry":[{},{},{},"in X index"]},{"entry":["AccessSpecific","FractY","8","Number of fractional bits"]},{"entry":[{},{},{},"in Y index"]},{"entry":["AccessSpecific","FractZ","8","Number of fractional bits"]},{"entry":[{},{},{},"in Z index"]},{"entry":["(low 8 bits\/next","ZOffset","12 or","See below"]},{"entry":["12 or 24 bits))",{},"24\u2009"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"FractX, FractY, and FractZ are used to generate addresses based on indexes, and interpret the format of the index in terms of significant bits and integer\/fractional components. The various parameters are only defined as required by the number of dimensions in the table being indexed. A 1D table only needs FractX, a 2D table requires FractX and FractY. Each Fract_value consists of the number of fractional bits in the corresponding index. For example, an X index may be in the format :. This would indicate 5 bits of integer, and 3 bits of fraction. FractX would therefore be set to 3. A simple 1D lookup could have the format :, i.e. no fractional component at all. FractX would therefore be 0. ZOffset is only required for 3D lookup and takes on two different interpretations. It is described more fully in the 3D-table lookup section. The Flags register (AccessSpecific) contains a number of flags used to determine factors affecting the reading (and in one case, writing) of data. The Flags register has the following composition:",{"@attributes":{"id":"p-0410","num":"0502"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Label","#bits","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ReadEnable","1","Read data from DRAM"]},{"entry":[{},"WriteEnable","1","Write data to DRAM [only"]},{"entry":[{},{},{},"valid for 1D direct lookup]"]},{"entry":[{},"DataSize","1","0 = 8 bit data"]},{"entry":[{},{},{},"1 = 16 bit data"]},{"entry":[{},"Reserved","5","Must be 0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"With the exception of the 1D Direct Lookup and DRAM FIFO, all Table I\/O modes only support reading, and not writing. Therefore the ReadEnable bit will be set and the WriteEnable bit will be clear for all I\/O modes other than these two modes. The 1D Direct Lookup supports 3 modes:\n\n","The different modes are described in the 1D Direct Lookup section below. The DRAM FIFO mode supports only 1 mode:\n\n","This mode is described in the DRAM FIFO section below. The DataSize flag determines whether the size of each data elements of the table is 8 or 16 bits. Only the two data sizes are supported. 32 bit elements can be created in either of ways depending on the requirements of the process:\n\n","Direct Lookup","A direct lookup is a simple indexing into a 1 dimensional lookup table. Clients can choose between 3 access modes by setting appropriate bits in the Flags register:\n\n","A client passes the fixed-point index X into the Output FIFO, and the 8 or 16-bit value at Table[Int(X)] is returned in the Input FIFO. The fractional component of the index is completely ignored. If the index is out of bounds, the DuplicateEdge flag determines whether the edge pixel or ConstantPixel is returned. The address generation is straightforward:\n\n","The 8 or 16-bit data value at the resultant address is placed into the Input FIFO. Address generation takes 1 cycle, and transferring the requested data from the cache to the Output FIFO also takes 1 cycle (assuming a cache hit). For example, assume we are looking up values in a 256-entry table, where each entry is 16 bits, and the index is a 12 bit fixed-point format of :. FractX should be 4, and DataSize 1. When an index is passed to the lookup, we shift right 4 bits, then add the result shifted left 1 bit to ImageStart.","Write Only","A client passes the fixed-point index X into the Output FIFO followed by the 8 or 16-bit value that is to be written to the specified location in the table. A complete transfer takes a minimum of 2 cycles. 1 cycle for address generation, and 1 cycle to transfer the data from the FIFO to DRAM. There can be an arbitrary number of cycles between a VLIW process placing the index into the FIFO and placing the value to be written into the FIFO. Address generation occurs in the same way as Read Only mode, but instead of the data being read from the address, the data from the Output FIFO is written to the address. If the address is outside the table range, the data is removed from the FIFO but not written to DRAM.","Read-Modify-Write","A client passes the fixed-point index X into the Output FIFO, and the 8 or 16-bit value at Table[Int(X)] is returned in the Input FIFO. The next value placed into the Output FIFO is then written to Table[Int(X)], replacing the value that had been returned earlier. The general processing loop then, is that a process reads from a location, modifies the value, and writes it back. The overall time is 4 cycles:\n\n","There is no specific read\/write mode where a client passes in a flag saying \u201cread from X\u201d or \u201cwrite to X\u201d. Clients can simulate a \u201cread from X\u201d by writing the original value, and a \u201cwrite to X\u201d by simply ignoring the returned value.","However such use of the mode is not encouraged since each action consumes a minimum of 3 cycles (the modify is not required) and 2 data accesses instead of 1 access as provided by the specific Read and Write modes.","Interpolate Table","This is the same as a Direct Lookup in Read mode except that two values are returned for a given fixed-point index X instead of one. The values returned are Table[Int(X)], and Table[Int(X)+1]. If either index is out of bounds the DuplicateEdge flag determines whether the edge pixel or ConstantPixel is returned. Address generation is the same as Direct Lookup, with the exception that the second address is simply Address+1 or 2 depending on 8 or 16 bit data. Transferring the requested data to the Output FIFO takes 2 cycles (assuming a cache hit), although two 8-bit values may actually be returned from the cache to the Address Generator in a single 16-bit fetch.","DRAM FIFO","A special case of a read\/write 1D table is a DRAM FIFO. It is often necessary to have a simulated FIFO of a given length using DRAM and associated caches. With a DRAM FIFO, clients do not index explicitly into the table, but write to the Output FIFO as if it was one end of a FIFO and read from the Input FIFO as if it was the other end of the same logical FIFO. 2 counters keep track of input and output positions in the simulated FIFO, and cache to DRAM as needed. Clients need to set both ReadEnable and WriteEnable bits in the Flags register.","An example use of a DRAM FIFO is keeping a single line history of some value. The initial history is written before processing begins. As the general process goes through a line, the previous line's value is retrieved from the FIFO, and this line's value is placed into the FIFO (this line will be the previous line when we process the next line). So long as input and outputs match each other on average, the Output FIFO should always be full. Consequently there is effectively no access delay for this kind of FIFO (unless the total FIFO length is very small\u2014say 3 or 4 bytes, but that would defeat the purpose of the FIFO).","Direct Lookup","A 2 dimensional direct lookup is not supported. Since all cases of 2D lookups are expected to be accessed for bi-linear interpolation, a special bi-linear lookup has been implemented.","Bi-Linear lookup","This kind of lookup is necessary for bi-linear interpolation of data from a 2D table. Given fixed-point X and Y coordinates (placed into the Output FIFO in the order Y, X), 4 values are returned after lookup. The values (in order) are:\n\n","The order of values returned gives the best cache coherence. If the data is 8-bit, 2 values are returned each cycle over 2 cycles with the low order byte being the first data element. If the data is 16-bit, the 4 values are returned in 4 cycles, 1 entry per cycle. Address generation takes 2 cycles. The first cycle has the index (Y) barrel-shifted right FractY bits being multiplied by RowOffset, with the result added to ImageStart. The second cycle shifts the X index right by FractX bits, and then either the result (in the case of 8 bit data) or the result shifted left 1 bit (in the case of 16 bit data) is added to the result from the first cycle. This gives us address Adr=address of Table[Int(X), Int(Y)]:\n\nAdr=ImageStart+ShiftRight(Y, FractY)* RowOffset)+ShiftRight(X, FractX)\n","We keep a copy of Adr in AdrOld for use fetching subsequent entries.\n\n","The following 2 tables show the method of address calculation for 8 and 16 bit data sizes:",{"@attributes":{"id":"p-0429","num":"0542"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"Cycle"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Calculation while fetching 2 \u00d7 8-bit data entries from Adr"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Adr = Adr + RowOffset"]},{"entry":["2","<preparing next lookup>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Calculation while fetching 1 \u00d7 16-bit data entry from Adr"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Adr = Adr + 2"]},{"entry":["2","Adr = AdrOld + RowOffset"]},{"entry":["3","Adr = Adr + 2"]},{"entry":["4","<preparing next lookup>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In both cases, the first cycle of address generation can overlap the insertion of the X index into the FIFO, so the effective timing can be as low as 1 cycle for address generation, and 4 cycles of return data. If the generation of indexes is 2 steps ahead of the results, then there is no effective address generation time, and the data is simply produced at the appropriate rate (2 or 4 cycles per set).","Direct Lookup","Since all cases of 2D lookups are expected to be accessed for tri-linear interpolation, two special tri-linear lookups have been implemented. The first is a straightforward lookup table, while the second is for tri-linear interpolation from an Image Pyramid.","Tri-linear Lookup","This type of lookup is useful for 3D tables of data, such as color conversion tables. The standard image parameters define a single XY plane of the data\u2014i.e. each plane consists of ImageHeight rows, each row containing RowOffset bytes. In most circumstances, assuming contiguous planes, one XY plane will be ImageHeight x RowOffset bytes after another. Rather than assume or calculate this offset, the software via the CPU must provide it in the form of a 12-bit ZOffset register. In this form of lookup, given 3 fixed-point indexes in the order Z, Y, X, 8 values are returned in order from the lookup table:\n\n","The order of values returned gives the best cache coherence. If the data is 8-bit, 2 values are returned each cycle over 4 cycles with the low order byte being the first data element. If the data is 16-bit, the 4 values are returned in 8 cycles, 1 entry per cycle. Address generation takes 3 cycles. The first cycle has the index (Z) barrel-shifted right FractZ bits being multiplied by the 12-bit ZOffset and added to ImageStart. The second cycle has the index (Y) barrel-shifted right FractY bits being multiplied by RowOffset, with the result added to the result of the previous cycle. The second cycle shifts the X index right by FractX bits, and then either the result (in the case of 8 bit data) or the result shifted left 1 bit (in the case of 16 bit data) is added to the result from the second cycle. This gives us address Adr=address of Table[Int(X), Int(Y), Int(Z)]:\n\nAdr=ImageStart+(ShiftRight(Z, FractZ)*ZOffset)+(ShiftRight(Y, FractY)*RowOffset)+ShiftRight(X, FractX)\n","We keep a copy of Adr in AdrOld for use fetching subsequent entries.\n\n","The following 2 tables show the method of address calculation for 8 and 16 bit data sizes:",{"@attributes":{"id":"p-0436","num":"0559"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"Cycle"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Calculation while fetching 2 \u00d7 8-bit data entries from Adr"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Adr = Adr + RowOffset"]},{"entry":["2","Adr = AdrOld + ZOffset"]},{"entry":["3","Adr = Adr + RowOffset"]},{"entry":["4","<preparing next lookup>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Calculation while fetching 1 \u00d7 16-bit data entries from Adr"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Adr = Adr + 2"]},{"entry":["2","Adr = AdrOld + RowOffset"]},{"entry":["3","Adr = Adr + 2"]},{"entry":["4","Adr, AdrOld =AdrOld + Zoffset"]},{"entry":["5","Adr = Adr + 2"]},{"entry":["6","Adr = AdrOld + RowOffset"]},{"entry":["7","Adr = Adr + 2"]},{"entry":["8","<preparing next lookup>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In both cases, the cycles of address generation can overlap the insertion of the indexes into the FIFO, so the effective timing for a single one-off lookup can be as low as 1 cycle for address generation, and 4 cycles of return data. If the generation of indexes is 2 steps ahead of the results, then there is no effective address generation time, and the data is simply produced at the appropriate rate (4 or 8 cycles per set).","Image Pyramid Lookup","During brushing, tiling, and warping it is necessary to compute the average color of a particular area in an image. Rather than calculate the value for each area given, these functions make use of an image pyramid. The description and construction of an image pyramid is detailed in the section on Internal Image Formats in the DRAM interface  chapter of this document. This section is concerned with a method of addressing given pixels in the pyramid in terms of 3 fixed-point indexes ordered: level (Z), Y, and X. Note that Image Pyramid lookup assumes 8 bit data entries, so the DataSize flag is completely ignored. After specification of Z, Y, and X, the following 8 pixels are returned via the Input FIFO:\n\n","The 8 pixels are returned as 4\u00d716 bit entries, with X and X+1 entries combined hi\/lo. For example, if the scaled (X, Y) coordinate was (10.4, 12.7) the first 4 pixels returned would be: (10, 12), (11, 12), (10, 13) and (11, 13) coordinate is outside the valid range, clients have the choice of edge pixel duplication or returning of a constant color value via the DuplicateEdgePixels and ConstantPixel registers (only the low 8 bits are used). When the Image Pyramid has been constructed, there is a simple mapping from level  coordinates to level Z coordinates. The method is simply to shift the X or Y coordinate right by Z bits. This must be done in addition to the number of bits already shifted to retrieve the integer portion of the coordinate (i.e. shifting right FractX and FractY bits for X and Y ordinates respectively). To find the ImageStart and RowOffset value for a given level of the image pyramid, the 24-bit ZOffset register is used as a pointer to a Level Information Table. The table is an array of records, each representing a given level of the pyramid, ordered by level number. Each record consists of a 16-bit offset ZOffset from ImageStart to that level of the pyramid (64-byte aligned address as lower 6 bits of the offset are not present), and a 12 bit ZRowOffset for that level. Element  of the table would contain a ZOffset of 0, and a ZRowOffset equal to the general register RowOffset, as it simply points to the full sized image. The ZOffset value at element N of the table should be added to ImageStart to yield the effective ImageStart of level N of the image pyramid. The RowOffset value in element N of the table contains the RowOffset value for level N. The software running on the CPU must set up the table appropriately before using this addressing mode. The actual address generation is outlined here in a cycle by cycle description:",{"@attributes":{"id":"p-0440","num":"0571"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Load","From",{}]},{"entry":["Cycle","Register","Address","Other Operations"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","\u2014","\u2014","ZAdr = ShiftRight(Z, FractZ) +"]},{"entry":[{},{},{},"ZOffset"]},{"entry":[{},{},{},"ZInt = ShiftRight(Z, FractZ)"]},{"entry":["1","ZOffset","Zadr","ZAdr += 2"]},{"entry":[{},{},{},"YInt = ShiftRight(Y, FractY)"]},{"entry":["2","ZRowOffset","ZAdr","ZAdr += 2"]},{"entry":[{},{},{},"YInt = ShiftRight(YInt, ZInt)"]},{"entry":[{},{},{},"Adr = ZOffset + ImageStart"]},{"entry":["3","ZOffset","ZAdr","ZAdr += 2"]},{"entry":[{},{},{},"Adr += ZrowOffset * YInt"]},{"entry":[{},{},{},"XInt = ShiftRight(X, FractX)"]},{"entry":["4","ZAdr","ZAdr","Adr += ShiftRight(XInt, ZInt)"]},{"entry":[{},{},{},"ZOffset += ShiftRight(XInt, 1)"]},{"entry":["5","FIFO","Adr","Adr += ZrowOffset"]},{"entry":[{},{},{},"ZOffset += ImageStart"]},{"entry":["6","FIFO","Adr","Adr = (ZAdr * ShiftRight(Yint,1)) +"]},{"entry":[{},{},{},"ZOffset"]},{"entry":["7","FIFO","Adr","Adr += Zadr"]},{"entry":["8","FIFO","Adr","<Cycle 0 for next retrieval>"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The address generation as described can be achieved using a single Barrel Shifter, 2 adders, and a single 16\u00d716 multiply\/add unit yielding 24 bits. Although some cycles have 2 shifts, they are either the same shift value (i.e. the output of the Barrel Shifter is used two times) or the shift is 1 bit, and can be hard wired. The following internal registers are required: ZAdr, Adr, ZInt, YInt, XInt, ZRowOffset, and ZImageStart. The _Int registers only need to be 8 bits maximum, while the others can be up to 24 bits. Since this access method only reads from, and does not write to image pyramids, the CacheGroup is used to lookup the Image Pyramid Address Table (via ZAdr). CacheGroup is used for lookups to the image pyramid itself (via Adr). The address table is around 22 entries (depending on original image size), each of 4 bytes. Therefore 3 or 4 cache lines should be allocated to CacheGroup, while as many cache lines as possible should be allocated to CacheGroup. The timing is 8 cycles for returning a set of data, assuming that Cycle  and Cycle  overlap in operation\u2014i.e. the next request's Cycle  occurs during Cycle . This is acceptable since Cycle  has no memory access, and Cycle  has no specific operations.","Generation of Coordinates Using VLIW Vector Processor ","Some functions that are linked to Write Iterators require the X and\/or Y coordinates of the current pixel being processed in part of the processing pipeline. Particular processing may also need to take place at the end of each row, or column being processed. In most cases, the PassX and PassY flags should be sufficient to completely generate all coordinates. However, if there are special requirements, the following functions can be used. The calculation can be spread over a number of ALUs, for a single cycle generation, or be in a single ALU  for a multi-cycle generation.","Generate Sequential [X, Y]","When a process is processing pixels in sequential order according to the Sequential Read Iterator (or generating pixels and writing them out to a Sequential Write Iterator), the following process can be used to generate X, Y coordinates instead of PassX\/PassY flags as shown in FIG. .","The coordinate generator counts up to ImageWidth in the X ordinate, and once per ImageWidth pixels increments the Y ordinate. The actual process is illustrated in , where the following constants are set by software:",{"@attributes":{"id":"p-0445","num":"0576"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Constant","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["K","ImageWidth"]},{"entry":["K","ImageHeight (optional)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following registers are used to hold temporary variables:",{"@attributes":{"id":"p-0447","num":"0578"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Variable","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Reg","X (starts at 0 each line)"]},{"entry":["Reg","Y (starts at 0)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The requirements are summarized as follows:",{"@attributes":{"id":"p-0449","num":"0580"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]},{"entry":[{},"Requirements","*+","+","R","K","LU","Iterators"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"General","0","3\/4","2","1\/2","0","0"]},{"entry":[{},"TOTAL","0","3\/4","2","1\/2","0","0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"When a process is processing pixels in order to write them to a Vertical Strip Write Iterator, and for some reason cannot use the PassX\/PassY flags, the process as illustrated in  can be used to generate X, Y coordinates. The coordinate generator simply counts up to ImageWidth in the X ordinate, and once per ImageWidth pixels increments the Y ordinate. The actual process is illustrated in , where the following constants are set by software:",{"@attributes":{"id":"p-0451","num":"0582"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Constant","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["K","32"]},{"entry":["K","ImageWidth"]},{"entry":["K","ImageHeight"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following registers are used to hold temporary variables:",{"@attributes":{"id":"p-0453","num":"0584"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Variable","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Reg","StartX (starts at 0, and is incremented by 32"]},{"entry":[{},"once per vertical strip)"]},{"entry":["Reg","X"]},{"entry":["Reg","EndX (starts at 32 and is incremented by 32 to a"]},{"entry":[{},"maximum of ImageWidth) once per vertical strip)"]},{"entry":["Reg","Y"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The requirements are summarized as follows:",{"@attributes":{"id":"p-0455","num":"0586"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]},{"entry":[{},"Requirements","*+","+","R","K","LU","Iterators"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"General","0","4","4","3","0","0"]},{"entry":[{},"TOTAL","0","4","4","3","0","0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]}]}}}}},"The calculations that occur once per vertical strip (2 additions, one of which has an associated MIN) are not included in the general timing statistics because they are not really part of the per pixel timing. However they do need to be taken into account for the programming of the microcode for the particular function.","Image Sensor Interface (ISI 83)","The Image Sensor Interface (ISI 83) takes data from the CMOS Image Sensor and makes it available for storage in DRAM. The image sensor has an aspect ratio of 3:2, with a typical resolution of 750\u00d7500 samples, yielding 375K (8 bits per pixel). Each 2\u00d72 pixel block has the configuration as shown in FIG. . The ISI 83 is a state machine that sends control information to the Image Sensor, including frame sync pulses and pixel clock pulses in order to read the image. Pixels are read from the image sensor and placed into the VLIW Input FIFO . The VLIW is then able to process and\/or store the pixels. This is illustrated further in FIG. . The ISI 83 is used in conjunction with a VLIW program that stores the sensed Photo Image in DRAM. Processing occurs in 2 steps:\n\n","If the rotation is 0 degrees, then step 1 merely writes the Photo Image out to the final Photo Image location and step 2 is not performed. If the rotation is other than 0 degrees, the image is written out to a temporary area (for example into the Print Image memory area), and then rotated during step 2 into the final Photo Image location. Step 1 is very simple microcode, taking data from the VLIW Input FIFO  and writing it to a Sequential Write Iterator. Step 2's rotation is accomplished by using the accelerated Vark Affine Transform function. The processing is performed in 2 steps in order to reduce design complexity and to re-use the Vark affine transform rotate logic already required for images. This is acceptable since both steps are completed in approximately 0.03 seconds, a time imperceptible to the operator of the Artcam. Even so, the read process is sensor speed bound, taking 0.02 seconds to read the full frame, and approximately 0.01 seconds to rotate the image.","The orientation is important for converting between the sensed Photo Image and the internal format image, since the relative positioning of R, G, and B pixels changes with orientation. The processed image may also have to be rotated during the Print process in order to be in the correct orientation for printing. The 3D model of the Artcam has 2 image sensors, with their inputs multiplexed to a single ISI 83 (different microcode, but same ACP ). Since each sensor is a frame store, both images can be taken simultaneously, and then transferred to memory one at a time.","Display Controller ","When the \u201cTake\u201d button on an Artcam is half depressed, the TFT will display the current image from the image sensor (converted via a simple VLIW process). Once the Take button is fully depressed, the Taken Image is displayed. When the user presses the Print button and image processing begins, the TFT is turned off. Once the image has been printed the TFT is turned on again. The Display Controller  is used in those Artcam models that incorporate a flat panel display. An example display is a TFT LCD of resolution 240\u00d7160 pixels. The structure of the Display Controller  isl illustrated in FIG. . The Display Controller  State Machine contains registers that control the timing of the Sync Generation, where the display image is to be taken from (in DRAM via the Data cache  via a specific Cache Group), and whether the TFT should be active or not (via TFT Enable) at the moment. The CPU can write to these registers via the low speed bus. Displaying a 240\u00d7160 pixel image on an RGB TFT requires 3 components per pixel. The image taken from DRAM is displayed via  DACs, one for each of the R, G, and B output signals. At an image refresh rate of 30 frames per second (60 fields per second) the Display Controller 88 requires data transfer rates of:\n\n240\u00d7160\u00d73\u00d730=3.5 MB per second\n","This data rate is low compared to the rest of the system. However it is high enough to cause VLIW programs to slow down during the intensive image processing. The general principles of TFT operation should reflect this.","Image Data Formats","As stated previously, the DRAM Interface  is responsible for interfacing between other client portions of the ACP chip and the RAMBUS DRAM. In effect, each module within the DRAM Interface is an address generator.","There are three logical types of images manipulated by the ACP. They are:\n\n","These images are typically different in color space, resolution, and the output & input color spaces which can vary from camera to camera. For example, a CCD image on a low-end camera may be a different resolution, or have different color characteristics from that used in a high-end camera. However all internal image formats are the same format in terms of color space across all cameras.","In addition, the three image types can vary with respect to which direction is \u2018up\u2019. The physical orientation of the camera causes the notion of a portrait or landscape image, and this must be maintained throughout processing. For this reason, the internal image is always oriented correctly, and rotation is performed on images obtained from the CCD and during the print operation.","CCD Image Organization","Although many different CCD image sensors could be utilised, it will be assumed that the CCD itself is a 750\u00d7500 image sensor, yielding 375,000 bytes (8 bits per pixel). Each 2\u00d72 pixel block having the configuration as depicted in FIG. .","A CCD Image as stored in DRAM has consecutive pixels with a given line contiguous in memory. Each line is stored one after the other. The image sensor Interface  is responsible for taking data from the CCD and storing it in the DRAM correctly oriented. Thus a CCD image with rotation 0 degrees has its first line G, R, G, R, G, R . . . and its second line as B, G, B, G, B, G . . . . If the CCD image should be portrait, rotated 90 degrees, the first line will be R, G, R, G, R, G and the second line G, B, G, B, G, B . . . etc.","Pixels are stored in an interleaved fashion since all color components are required in order to convert to the internal image format.","It should be noted that the ACP  makes no assumptions about the CCD pixel format, since the actual CCDs for imaging may vary from Artcam to Artcam, and over time. All processing that takes place via the hardware is controlled by major microcode in an attempt to extend the usefulness of the ACP .","Internal Image Organization","Internal images typically consist of a number of channels. Vark images can include, but are not limited to:\n\n","The VLIW processor  requires images to be organized in a planar configuration. Thus a Lab image would be stored as 3 separate blocks of memory:\n\n","Within each channel block, pixels are stored contiguously for a given row (plus some optional padding bytes), and rows are stored one after the other.","Turning to  there is illustrated an example form of storage of a logical image . The logical image  is stored in a planar fashion having L, a and b color components stored one after another. Alternatively, the logical image  can be stored in a compressed format having an uncompressed L component  and compressed A and B components , .","Turning to , the pixels of for line n are stored together before the pixels of for line and n+1(). With the image being stored in contiguous memory within a single channel.","In the 8 MB-memory model, the final Print Image after all processing is finished, needs to be compressed in the chrominance channels. Compression of chrominance channels can be 4:1, causing an overall compression of 12:6, or 2:1.","Other than the final Print Image, images in the Artcam are typically not compressed. Because of memory constraints, software may choose to compress the final Print Image in the chrominance channels by scaling each of these channels by 2:1. If this has been done, the PRINT Vark function call utilised to print an image must be told to treat the specified chrominance channels as compressed. The PRINT function is the only function that knows how to deal with compressed chrominance, and even so, it only deals with a fixed 2:1 compression ratio.","Although it is possible to compress an image and then operate on the compressed image to create the final print image, it is not recommended due to a loss in resolution. In addition, an image should only be compressed once\u2014as the final stage before printout. While one compression is virtually undetectable, multiple compressions may cause substantial image degradation.","Clip Image Organization","Clip images stored on Artcards have no explicit support by the ACP . Software is responsible for taking any images from the current Artcard and organizing the data into a form known by the ACP. If images are stored compressed on an Artcard, software is responsible for decompressing them, as there is no specific hardware support for decompression of Artcard images.","Image Pyramid Organization","During brushing, tiling, and warping processes utilised to manipulate an image it is often necessary to compute the average color of a particular area in an image. Rather than calculate the value for each area given, these functions make use of an image pyramid. As illustrated in , an image pyramid is effectively a multi-resolutionpixel\u2014map. The original image  is a 1:1 representation. Low-pass filtering and sub-sampling by 2:1 in each dimension produces an image \u00bc the original size . This process continues until the entire image is represented by a single pixel. An image pyramid is constructed from an original internal format image, and consumes \u2153 of the size taken up by the original image (\u00bc+ 1\/16+ 1\/64+ . . . ). For an original image of 1500\u00d71000 the corresponding image pyramid is approximately \u00bd MB. An image pyramid is constructed by a specific Vark function, and is used as a parameter to other Vark functions.","Print Image Organization","The entire processed image is required at the same time in order to print it. However the Print Image output can comprise a CMY dithered image and is only a transient image format, used within the Print Image functionality. However, it should be noted that color conversion will need to take place from the internal color space to the print color space. In addition, color conversion can be tuned to be different for different print rolls in the camera with different ink characteristics e.g. Sepia output can be accomplished by using a specific sepia toning Artcard, or by using a sepia tone print-roll (so all Artcards will work in sepia tone).","Color Spaces","As noted previously there are 3 color spaces used in the Artcam, corresponding to the different image types.","The ACP has no direct knowledge of specific color spaces. Instead, it relies on client color space conversion tables to convert between CCD, internal, and printer color spaces:\n\n","The Artcard Interface (AI) takes data from the linear image Sensor while an Artcard is passing under it, and makes that data available for storage in DRAM. The image sensor produces 11,000 8-bit samples per scanline, sampling the Artcard at 4800 dpi. The AI is a state machine that sends control information to the linear sensor, including LineSync pulses and PixelClock pulses in order to read the image. Pixels are read from the linear sensor and placed into the VLIW Input FIFO . The VLIW is then able to process and\/or store the pixels. The AI has only a few registers:",{"@attributes":{"id":"p-0486","num":"0639"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Register Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NumPixels","The number of pixels in a sensor line (approx 11,000)"]},{"entry":["Status","The Print Head Interface's Status Register"]},{"entry":["PixelsRemaining","The number of bytes remaining in the current line"]},{"entry":"Actions"},{"entry":["Reset","A write to this register resets the AI, stops any"]},{"entry":[{},"scanning, and loads all registers with 0."]},{"entry":["Scan","A write to this register with a non-zero value sets the"]},{"entry":[{},"Scanning bit of the Status register, and causes the"]},{"entry":[{},"Artcard Interface Scan cycle to start."]},{"entry":[{},"A write to this register with 0 stops the scanning"]},{"entry":[{},"process and clears the Scanning bit in the"]},{"entry":[{},"Status register."]},{"entry":[{},"The Scan cycle causes the AI to transfer NumPixels"]},{"entry":[{},"bytes from the sensor to the VLIW Input FIFO 78,"]},{"entry":[{},"producing the PixelClock signals appropriately. Upon"]},{"entry":[{},"completion of NumPixels bytes, a LineSync pulse is"]},{"entry":[{},"given and the Scan cycle restarts."]},{"entry":[{},"The PixelsRemaining register holds the number of"]},{"entry":[{},"pixels remaining to be read on the current scanline."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Note that the CPU should clear the VLIW Input FIFO  before initiating a Scan. The Status register has bit interpretations as follows:",{"@attributes":{"id":"p-0488","num":"0641"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Bit Name","Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Scanning","1","If set, the AI is currently scanning, with the number of"]},{"entry":[{},{},"pixels remaining to be transferred from the current line"]},{"entry":[{},{},"recorded in PixelsRemaining."]},{"entry":[{},{},"If clear, the AI is not currently scanning, so is not"]},{"entry":[{},{},"transferring pixels to the VLIW Input FIFO 78."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"87"},"The Artcard Interface (AI)  is responsible for taking an Artcard image from the Artcard Reader , and decoding it into the original data (usually a Vark script). Specifically, the AI  accepts signals from the Artcard scanner linear CCD , detects the bit pattern printed on the card, and converts the bit pattern into the original data, correcting read errors.","With no Artcard  inserted, the image printed from an Artcam is simply the sensed Photo Image cleaned up by any standard image processing routines. The Artcard  is the means by which users are able to modify a photo before printing it out. By the simple task of inserting a specific Artcard  into an Artcam, a user is able to define complex image processing to be performed on the Photo Image.","With no Artcard inserted the Photo Image is processed in a standard way to create the Print Image. When a single Artcard  is inserted into the Artcam, that Artcard's effect is applied to the Photo Image to generate the Print Image.","When the Artcard  is removed (ejected), the printed image reverts to the Photo Image processed in a standard way. When the user presses the button to eject an Artcard, an event is placed in the event queue maintained by the operating system running on the Artcam Central Processor . When the event is processed (for example after the current Print has occurred), the following things occur:","If the current Artcard is valid, then the Print Image is marked as invalid and a \u2018Process Standard\u2019 event is placed in the event queue. When the event is eventually processed it will perform the standard image processing operations on the Photo Image to produce the Print Image.","The motor is started to eject the Artcard and a time-specific \u2018Stop-Motor\u2019 Event is added to the event queue.","Inserting an Artcard","When a user inserts an Artcard , the Artcard Sensor  detects it notifying the ACP. This results in the software inserting an \u2018Artcard Inserted\u2019 event into the event queue. When the event is processed several things occur:","The current Artcard is marked as invalid (as opposed to \u2018none\u2019).","The Print Image is marked as invalid.","The Artcard motor  is started up to load the Artcard","The Artcard Interface  is instructed to read the Artcard","The Artcard Interface  accepts signals from the Artcard scanner linear CCD , detects the bit pattern printed on the card, and corrects errors in the detected bit pattern, producing a valid Artcard data block in DRAM.","Reading Data from the Artcard CCD\u2014General Considerations","As illustrated in , the Data Card reading process has 4 phases operated while the pixel data is read from the card. The phases are as follows:\n\n","As illustrated in , the Artcard  must be sampled at least at double the printed resolution to satisfy Nyquist's Theorem. In practice it is better to sample at a higher rate than this. Preferably, the pixels are sampled  at 3 times the resolution of a printed dot in each dimension, requiring 9 pixels to define a single dot. Thus if the resolution of the Artcard  is 1600 dpi, and the resolution of the sensor  is 4800 dpi, then using a 50 mm CCD image sensor results in 9450 pixels per column. Therefore if we require 2 MB of dot data (at 9 pixels per dot) then this requires 2 MB*8*9\/9450=15,978 columns=approximately 16,000 columns. Of course if a dot is not exactly aligned with the sampling CCD the worst and most likely case is that a dot will be sensed over a 16 pixel area (4\u00d74) .","An Artcard  may be slightly warped due to heat damage, slightly rotated (up to, say 1 degree) due to differences in insertion into an Artcard reader, and can have slight differences in true data rate due to fluctuations in the speed of the reader motor . These changes will cause columns of data from the card not to be read as corresponding columns of pixel data. As illustrated in , a 1 degree rotation in the Artcard  can cause the pixels from a column on the card to be read as pixels across 166 columns:","Finally, the Artcard  should be read in a reasonable amount of time with respect to the human operator. The data on the Artcard covers most of the Artcard surface, so timing concerns can be limited to the Artcard data itself. A reading time of 1.5 seconds is adequate for Artcard reading.","The Artcard should be loaded in 1.5 seconds. Therefore all 16,000 columns of pixel data must be read from the CCD  in 1.5 second, i.e. 10,667 columns per second. Therefore the time available to read one column is 1\/10667 seconds, or 93,747 ns. Pixel data can be written to the DRAM one column at a time, completely independently from any processes that are reading the pixel data.","The time to write one column of data (9450\/2 bytes since the reading can be 4 bits per pixel giving 2\u00d74 bit pixels per byte) to DRAM is reduced by using 8 cache lines. If 4 lines were written out at one time, the 4 banks can be written to independently, and thus overlap latency reduced. Thus the 4725 bytes can be written in 11,840 ns (4725\/128*320 ns). Thus the time taken to write a given column's data to DRAM uses just under 13% of the available bandwidth.","Decoding an Artcard","A simple look at the data sizes shows the impossibility of fitting the process into the 8 MB of memory  if the entire Artcard pixel data (140 MB if each bit is read as a 3\u00d73 array) as read by the linear CCD  is kept. For this reason, the reading of the linear CCD, decoding of the bitmap, and the un-bitmap process should take place in real\u2014time (while the Artcard  is traveling past the linear CCD ), and these processes must effectively work without having entire data stores available.","When an Artcard  is inserted, the old stored Print Image and any expanded Photo Image becomes invalid. The new Artcard  can contain directions for creating a new image based on the currently captured Photo Image. The old Print Image is invalid, and the area holding expanded Photo Image data and image pyramid is invalid, leaving more than 5 MB that can be used as scratch memory during the read process. Strictly speaking, the 1 MB area where the Artcard raw data is to be written can also be used as scratch data during the Artcard read process as long as by the time the final Reed-Solomon decode is to occur, that 1 MB area is free again. The reading process described here does not make use of the extra 1 MB area (except as a final destination for the data).","It should also be noted that the unscrambling process requires two sets of 2 MB areas of memory since unscrambling cannot occur in place. Fortunately the 5 MB scratch area contains enough space for this process.","Turning now to , there is shown a flowchart  of the steps necessary to decode the Artcard data. These steps include reading in the Artcard , decoding the read data to produce corresponding encoded XORed scrambled bitmap data . Next a checkerboard XOR is applied to the data to produces encoded scrambled data . This data is then unscrambled  to produce data  before this data is subjected to Reed-Solomon decoding to produce the original raw data . Alternatively, unscrambling and XOR process can take place together, not requiring a separate pass of the data. Each of the above steps is discussed in further detail hereinafter. As noted previously with reference to , the Artcard Interface, therefore, has 4 phases, the first 2 of which are time-critical, and must take place while pixel data is being read from the CCD:\n\n","Phase 1. As the Artcard  moves past the CCD  the AI must detect the start of the data area by robustly detecting special targets on the Artcard to the left of the data area. If these cannot be detected, the card is marked as invalid. The detection must occur in real-time, while the Artcard  is moving past the CCD .","If necessary, rotation invariance can be provided. In this case, the targets are repeated on the right side of the Artcard, but relative to the bottom right corner instead of the top corner. In this way the targets end up in the correct orientation if the card is inserted the \u201cwrong\u201d way. Phase 3 below can be altered to detect the orientation of the data, and account for the potential rotation.","Phase 2. Once the data area has been determined, the main read process begins, placing pixel data from the CCD into an \u2018Artcard data window\u2019, detecting bits from this window, assembling the detected bits into bytes, and constructing a byte-image in DRAM. This must all be done while the Artcard is moving past the CCD.","Phase 3. Once all the pixels have been read from the Artcard data area, the Artcard motor  can be stopped, and the byte image descrambled and XORed. Although not requiring real-time performance, the process should be fast enough not to annoy the human operator. The process must take 2 MB of scrambled bit-image and write the unscrambled\/XORed bit-image to a separate 2 MB image.","Phase 4. The final phase in the Artcard read process is the Reed-Solomon decoding process, where the 2 MB bit-image is decoded into a 1 MB valid Artcard data area. Again, while not requiring real-time performance it is still necessary to decode quickly with regard to the human operator. If the decode process is valid, the card is marked as valid. If the decode failed, any duplicates of data in the bit-image are attempted to be decoded, a process that is repeated until success or until there are no more duplicate images of the data in the bit image.","The four phase process described requires 4.5 MB of DRAM. 2 MB is reserved for Phase 2 output, and 0.5 MB is reserved for scratch data during phases 1 and 2. The remaining 2 MB of space can hold over 440 columns at 4725 byes per column. In practice, the pixel data being read is a few columns ahead of the phase 1 algorithm, and in the worst case, about 180 columns behind phase 2, comfortably inside the 440 column limit.","A description of the actual operation of each phase will now be provided in greater detail.","Phase 1\u2014Detect Data Area on Artcard","This phase is concerned with robustly detecting the left-hand side of the data area on the Artcard . Accurate detection of the data area is achieved by accurate detection of special targets printed on the left side of the card. These targets are especially designed to be easy to detect even if rotated up to 1 degree.","Turning to , there is shown an enlargement of the left hand side of an Artcard . The side of the card is divided into 16 bands,  with a target eg.  located at the center of each band. The bands are logical in that there is no line drawn to separate bands. Turning to , there is shown a single target . The target , is a printed black square containing a single white dot. The idea is to detect firstly as many tergets  as possible, and then to join at least 8 of the detected white-dot locations into a single logical straight line. If this can be done, the start of the data area  is a fixed distance from this logical line. If it cannot be done, then the card is rejected as invalid.","As shown in , the height of the card  is 3150 dots. A target (Target)  is placed a fixed distance of 24 dots away from the top left corner  of the data area so that it falls well within the first of 16 equal sized regions  of 192 dots (576 pixels) with no target in the final pixel region of the card. The target  must be big enough to be easy to detect, yet be small enough not to go outside the height of the region if the card is rotated 1 degree. A suitable size for the target is a 31\u00d731 dot (93\u00d793 sensed pixels) black square  with the white dot .","At the worst rotation of 1 degree, a 1 column shift occurs every 57 pixels. Therefore in a 590 pixel sized band, we cannot place any part of our symbol in the top or bottom 12 pixels or so of the band or they could be detected in the wrong band at CCD read time if the card is worst case rotated.","Therefore, if the black part of the rectangle is 57 pixels high (19 dots) we can be sure that at least 9.5 black pixels will be read in the same column by the CCD (worst case is half the pixels are in one column and half in the next). To be sure of reading at least 10 black dots in the same column, we must have a height of 20 dots. To give room for erroneous detection on the edge of the start of the black dots, we increase the number of dots to 31, giving us 15 on either side of the white dot at the target's local coordinate (15, 15). 31 dots is 91 pixels, which at most suffers a 3 pixel shift in column, easily within the 576 pixel band.","Thus each target is a block of 31\u00d731 dots (93\u00d793 pixels) each with the composition:\n\n","Targets are detected by reading columns of pixels, one column at a time rather than by detecting dots. It is necessary to look within a given band for a number of columns consisting of large numbers of contiguous black pixels to build up the left side of a target. Next, it is expected to see a white region in the center of further black columns, and finally the black columns to the left of the target center.","Eight cache lines are required for good cache performance on the reading of the pixels. Each logical read fills 4 cache lines via 4 sub-reads while the other 4 cache-lines are being used. This effectively uses up 13% of the available DRAM bandwidth.","As illustrated in , the detection mechanism FIFO for detecting the targets uses a filter , run-length encoder , and a FIFO  that requires special wiring of the top 3 elements (S, S, and S) for random access.","The columns of input pixels are processed one at a time until either all the targets are found, or until a specified number of columns have been processed. To process a column, the pixels are read from DRAM, passed through a filter  to detect a 0 or 1, and then run length encoded . The bit value and the number of contiguous bits of the same value are placed in FIFO . Each entry of the FIFO  is in 8 bits, 7 bits  to hold the run-length, and 1 bit  to hold the value of the bit detected.","The run-length encoder  only encodes contiguous pixels within a 576 pixel (192 dot) region.","The top 3 elements in the FIFO  can be accessed  in any random order. The run lengths (in pixels) of these entries are filtered into 3 values: short, medium, and long in accordance with the following table:",{"@attributes":{"id":"p-0530","num":"0695"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Short","Used to detect white dot.","RunLength < 16"]},{"entry":["Medium","Used to detect runs of black above or","16<= RunLength < 48"]},{"entry":[{},"below the white dot in the center of"]},{"entry":[{},"the target."]},{"entry":["Long","Used to detect run lengths of black to","RunLength >= 48"]},{"entry":[{},"the left and right of the center dot in"]},{"entry":[{},"the target."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Looking at the top three entries in the FIFO  there are 3 specific cases of interest:",{"@attributes":{"id":"p-0532","num":"0697"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Case 1","S1 = white long","We have detected a black column of"]},{"entry":[{},"S2 = black long","the target to the left of or to the right"]},{"entry":[{},"S3 = white medium\/long","of the white center dot."]},{"entry":["Case 2","S1 = white long","If we've been processing a series of"]},{"entry":[{},"S2 = black medium","columns of Case 1s, then we have"]},{"entry":[{},"S3 = white short","probably detected the white dot in"]},{"entry":[{},"Previous 8 columns","this column. We know that the next"]},{"entry":[{},"were Case 1","entry will be black (or it would have"]},{"entry":[{},{},"been included in the white S3 entry),"]},{"entry":[{},{},"but the number of black pixels is in"]},{"entry":[{},{},"question. Need to verify by checking"]},{"entry":[{},{},"after the next FIFO advance (see"]},{"entry":[{},{},"Case 3)."]},{"entry":["Case 3","Prev = Case2","We have detected part of the white"]},{"entry":[{},"S3 = black med","dot. We expect around 3 of these, and"]},{"entry":[{},{},"then some more columns of Case 1."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Preferably, the following information per region band is kept:",{"@attributes":{"id":"p-0534","num":"0699"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TargetDetected","\u20021 bit"]},{"entry":["BlackDetectCount","\u20024 bits"]},{"entry":["WhiteDetectCount","\u20023 bits"]},{"entry":["PrevColumnStartPixel","15 bits"]},{"entry":["TargetColumn ordinate","16 bits \u2003(15:1)"]},{"entry":["TargetRow ordinate","16 bits \u2003(15:1)"]},{"entry":["TOTAL","\u20027 bytes (rounded to 8 bytes for easy addressing)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Given a total of 7 bytes. It makes address generation easier if the total is assumed to be 8 bytes. Thus 16 entries requires 16*8=128 bytes, which fits in 4 cache lines. The address range should be inside the scratch 0.5 MB DRAM area since other phases make use of the remaining 4 MB data area.","When beginning to process a given pixel column, the register value SStartPixel  is reset to 0. As entries in the FIFO advance from S to S, they are also added  to the existing SStartPixel value, giving the exact pixel position of the run currently defined in S. Looking at each of the 3 cases of interest in the FIFO, SStartPixel can be used to determine the start of the black area of a target (Cases 1 and 2), and also the start of the white dot in the center of the target (Case 3). An algorithm for processing columns can be as follows:",{"@attributes":{"id":"p-0537","num":"0702"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","TargetDetected[0-15] := 0"]},{"entry":[{},{},"BlackDetectCount[0-15] := 0"]},{"entry":[{},{},"WhiteDetectCount[0-15] := 0"]},{"entry":[{},{},"TargetRow[0-15] := 0"]},{"entry":[{},{},"TargetColumn[0-15] := 0"]},{"entry":[{},{},"PrevColStartPixel[0-15] := 0"]},{"entry":[{},{},"CurrentColumn := 0"]},{"entry":[{},"2","Do ProcessColumn"]},{"entry":[{},"3","CurrentColumn++"]},{"entry":[{},"4","If (CurrentColumn <= LastValidColumn)"]},{"entry":[{},{},"Goto 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The steps involved in the processing a column (Process Column) are as follows:",{"@attributes":{"id":"p-0539","num":"0704"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","S2StartPixel := 0"]},{"entry":[{},"FIFO := 0"]},{"entry":[{},"BlackDetectCount := 0"]},{"entry":[{},"WhiteDetectCount := 0"]},{"entry":[{},"ThisColumnDetected := FALSE"]},{"entry":[{},"PrevCaseWasCase2 := FALSE"]},{"entry":["2","If (! TargetDetected[Target]) & (! ColumnDetected[Target])"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ProcessCases"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"EndIf"]},{"entry":["3","PrevCaseWasCase2 := Case=2"]},{"entry":["4","Advance FIFO"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The processing for each of the 3 (Process Cases) cases is as follows:","Case 1:",{"@attributes":{"id":"p-0541","num":"0706"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["BlackDetectCount[target] < 8","\u25a1 := ABS(S2StartPixel \u2212"]},{"entry":["OR","PrevColStartPixel[Target])"]},{"entry":["WhiteDetectCount[Target] = 0","If (0<=\u25a1< 2)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BlackDetectCount[Target]++"]},{"entry":[{},"(max value =8)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BlackDetectCount[Target] := 1"]},{"entry":[{},"WhiteDetectCount[Target] := 0"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"EndIf"]},{"entry":[{},"PrevColStartPixel[Target] :="]},{"entry":[{},"S2StartPixel"]},{"entry":[{},"ColumnDetected[Target] := TRUE"]},{"entry":[{},"BitDetected = 1"]},{"entry":["BlackDetectCount[target] >= 8","PrevColStartPixel[Target] :="]},{"entry":["WhiteDetectCount[Target] != 0","S2StartPixel"]},{"entry":[{},"ColumnDetected[Target] := TRUE"]},{"entry":[{},"BitDetected = 1"]},{"entry":[{},"TargetDetected[Target] := TRUE"]},{"entry":[{},"TargetColumn[Target] :="]},{"entry":[{},"CurrentColumn \u2212 8 \u2212"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(WhiteDetectCount[Target]\/2)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"No special processing is recorded except for setting the \u2018PrevCaseWasCase2\u2019 flag for identifying Case 3 (see Step 3 of processing a column described above)","Case 3:",{"@attributes":{"id":"p-0543","num":"0708"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["PrevCaseWasCase2 = TRUE","If (WhiteDetectCount[Target] < 2)"]},{"entry":["BlackDetectCount[Target] >= 8","\u2003TargetRow[Target] ="]},{"entry":["WhiteDetectCount=1","S2StartPixel + (S2\/2)"]},{"entry":[{},"EndIf"]},{"entry":[{},"\u25a1 := ABS(S2StartPixel \u2212"]},{"entry":[{},"PrevColStartPixel[Target])"]},{"entry":[{},"If (0<=\u25a1< 2)"]},{"entry":[{},"\u2003WhiteDetectCount[Target]++"]},{"entry":[{},"Else"]},{"entry":[{},"\u2003WhiteDetectCount[Target] := 1"]},{"entry":[{},"EndIf"]},{"entry":[{},"PrevColStartPixel[Target] :="]},{"entry":[{},"S2StartPixel"]},{"entry":[{},"ThisColumnDetected := TRUE"]},{"entry":[{},"BitDetected = 0"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"At the end of processing a given column, a comparison is made of the current column to the maximum number of columns for target detection. If the number of columns allowed has been exceeded, then it is necessary to check how many targets have been found. If fewer than 8 have been found, the card is considered invalid.","Process Targets","After the targets have been detected, they should be processed. All the targets may be available or merely some of them. Some targets may also have been erroneously detected.","This phase of processing is to determine a mathematical line that passes through the center of as many targets as possible. The more targets that the line passes through, the more confident the target position has been found. The limit is set to be 8 targets. If a line passes through at least 8 targets, then it is taken to be the right one.","It is all right to take a brute-force but straightforward approach since there is the time to do so (see below), and lowering complexity makes testing easier. It is necessary to determine the line between targets  and  (if both targets are considered valid) and then determine how many targets fall on this line. Then we determine the line between targets  and , and repeat the process. Eventually we do the same for the line between targets  and ,  and  etc. and finally for the line between targets  and . Assuming all the targets have been found, we need to perform 15+14+13+ . . . =90 sets of calculations (with each set of calculations requiring 16 tests=1440 actual calculations), and choose the line which has the maximum number of targets found along the line. The algorithm for target location can be as follows:\n\n","Store expected centroids for rows based on BestLine\n\n","As illustrated in , in the algorithm above, to determine a CurrentLine  from Target A  and target B, it is necessary to calculate \u0394row () & \u0394column () between targets , , and the location of Target A. It is then possible to move from Target  to Target  etc. by adding \u0394row and \u0394column. The found (if actually found) location of target N can be compared to the calculated expected position of Target N on the line, and if it falls within the tolerance, then Target N is determined to be on the line.","To calculate \u0394row & \u0394column:\n\n\u0394row=(row\u2014row)\/(B\u2212A)\n\n\u0394column=(column\u2014column)\/(B\u2212A)\n\nThen we calculate the position of Target:\n\nrow=rowTargetA\u2212(A*\u0394row)\n\ncolumn=columnTargetA\u2212(A*\u0394column)\n","And compare (row, column) against the actual rowand column. To move from one expected target to the next (e.g. from Target to Target), we simply add \u0394row and \u0394column to row and column respectively. To check if each target is on the line, we must calculate the expected position of Target, and then perform one add and one comparison for each target ordinate.","At the end of comparing all 16 targets against a maximum of 90 lines, the result is the best line through the valid targets. If that line passes through at least 8 targets (i.e. MaxFound>=8), it can be said that enough targets have been found to form a line, and thus the card can be processed. If the best line passes through fewer than 8, then the card is considered invalid.","The resulting algorithm takes 180 divides to calculate \u0394row and \u0394column, 180 multiply\/adds to calculate target position, and then 2880 adds\/comparisons. The time we have to perform this processing is the time taken to read 36 columns of pixel data=3,374,892 ns. Not even accounting for the fact that an add takes less time than a divide, it is necessary to perform 3240 mathematical operations in 3,374,892 ns. That gives approximately 1040 ns per operation, or 104 cycles. The CPU can therefore safely perform the entire processing of targets, reducing complexity of design.","Step 0: Locate the Data Area","From Target  ( of ) it is a predetermined fixed distance in rows and columns to the top left border  of the data area, and then a further  dot column to the vertical clock marks . So we use TargetA, \u0394row and \u0394column found in the previous stage (\u0394row and \u0394column refer to distances between targets) to calculate the centroid or expected location for Target as described previously.","Since the fixed pixel offset from Target to the data area is related to the distance between targets (192 dots between targets, and 24 dots between Target and the data area ), simply add \u0394row\/8 to Target's centroid column coordinate (aspect ratio of dots is 1:1). Thus the top co-ordinate can be defined as:\n\n(column=column+(\u0394row\/8)\n\n(row=row+(\u0394column\/8)\n","Next \u0394row and \u0394column are updated to give the number of pixels between dots in a single column (instead of between targets) by dividing them by the number of dots between targets:\n\n\u0394row=\u0394row\/192\n\n\u0394column=\u0394column\/192\n","We also set the currentColumn register (see Phase 2) to be \u22121 so that after step 2, when phase 2 begins, the currentColumn register will increment from \u22121 to 0.","Step 1: Write Out the Initial Centroid Deltas (\u0394) and Bit History","This simply involves writing setup information required for Phase 2.","This can be achieved by writing 0s to all the \u0394row and \u0394column entries for each row, and a bit history. The bit history is actually an expected bit history since it is known that to the left of the clock mark column  is a border column , and before that, a white area. The bit history therefore is 011, 010, 011, 010 etc.","Step 2: Update the Centroids Based on Actual Pixels Read.","The bit history is set up in Step 1 according to the expected clock marks and data border. The actual centroids for each dot row can now be more accurately set (they were initially 0) by comparing the expected data against the actual pixel values. The centroid updating mechanism is achieved by simply performing step 3 of Phase 2.","Phase 2\u2014Detect Bit Pattern from Artcard Based on Pixels Read, and Write as Bytes.","Since a dot from the Artcard  requires a minimum of 9 sensed pixels over 3 columns to be represented, there is little point in performing dot detection calculations every sensed pixel column. It is better to average the time required for processing over the average dot occurrence, and thus make the most of the available processing time. This allows processing, of a column of dots from an Artcard  in the time it takes to read 3 columns of data from the Artcard. Although the most likely case is that it takes 4 columns to represent a dot, the 4column will be the last column of one dot and the first column of a next dot. Processing should therefore be limited to only 3 columns.","As the pixels from the CCD are written to the DRAM in 13% of the time available, 83% of the time is available for processing of 1 column of dots i.e. 83% of (93,747*3)=83% of 281,241 ns=233,430 ns.","In the available time, it is necessary to detect 3150 dots, and write their bit values into the raw data area of memory.","The processing therefore requires the following steps:\n\n","Since we are processing the Artcard's logical dot columns, and these may shift over 165 pixels, the worst case is that we cannot process the first column until at least 165 columns have been read into DRAM. Phase 2 would therefore finish the same amount of time after the read process had terminated. The worst case time is: 165*93,747 ns=15,468,255 ns or 0.015 seconds.","Step 0: Advance to the Next Dot Column","In order to advance to the next column of dots we add \u0394row and \u0394column to the dotColumnTop to give us the centroid of the dot at the top of the column. The first time we do this, we are currently at the clock marks column  to the left of the bit image data area, and so we advance to the first column of data. Since \u0394row and \u0394column refer to distance between dots within a column, to move between dot columns it is necessary to add \u0394row to columnand \u0394column to row.","To keep track of what column number is being processed, the column number is recorded in a register called CurrentColumn. Every time the sensor advances to the next dot column it is necessary to increment the CurrentColumn register. The first time it is incremented, it is incremented from \u22121 to 0 (see Step 0 Phase 1). The CurrentColumn register determines when to terminate the read process (when reaching maxColumns), and also is used to advance the DataOut Pointer to the next column of byte information once all 8 bits have been written to the byte (once every 8 dot columns). The lower 3 bits determine what bit we're up to within the current byte. It will be the same bit being written for the whole column.","Step 1: Detect the Top and Bottom of an Artcard Dot Column.","In order to process a dot column from an Artcard, it is necessary to detect the top and bottom of a column. The column should form a straight line between the top and bottom of the column (except for local warping etc.). Initially dotColumnTop points to the clock mark column . We simply toggle the expected value, write it out into the bit history, and move on to step 2, whose first task will be to add the \u0394row and \u0394column values to dotColumnTop to arrive at the first data dot of the column.","Step 2: Process an Artcard's Dot Column","Given the centroids of the top and bottom of a column in pixel coordinates the column should form a straight line between them, with possible minor variances due to warping etc.","Assuming the processing is to start at the top of a column (at the top centroid coordinate) and move down to the bottom of the column, subsequent expected dot centroids are given as:\n\nrow=row+\u0394row\n\ncolumn=column+\u0394column\n","This gives us the address of the expected centroid for the next dot of the column. However to account for local warping and error we add another \u0394row and \u0394column based on the last time we found the dot in a given row. In this way we can account for small drifts that accumulate into a maximum drift of some percentage from the straight linejoining the top of the column to the bottom.","We therefore keep 2 values for each row, but store them in separate tables since the row history is used in step 3 of this phase.\n\n","For each row we need to read a \u0394row and \u0394column to determine the change to the centroid. The read process takes 5% of the bandwidth and 2 cache lines:\n\n","Once the centroid has been determined, the pixels around the centroid need to be examined to detect the status of the dot and hence the value of the bit. In the worst case a dot covers a 4\u00d74 pixel area. However, thanks to the fact that we are sampling at 3 times the resolution of the dot, the number of pixels required to detect the status of the dot and hence the bit value is much less than this. We only require access to 3 columns of pixel columns at any one time.","In the worst case of pixel drift due to a 1% rotation, centroids will shift 1 column every 57 pixel rows, but since a dot is 3 pixels in diameter, a given column will be valid for 171 pixel rows (3*57). As a byte contains 2 pixels, the number of bytes valid in each buffered read (4 cache lines) will be a worst case of 86 (out of 128 read).","Once the bit has been detected it must be written out to DRAM. We store the bits from 8 columns as a set of contiguous bytes to minimize DRAM delay. Since all the bits from a given dot column will correspond to the next bit position in a data byte, we can read the old value for the byte, shift and OR in the new bit, and write the byte back.","The read\/shift&OR\/write process requires 2 cache lines.","We need to read and write the bit history for the given row as we update it. We only require 3 bits of history per row, allowing the storage of 2 rows of history in a single byte. The read\/shift&OR\/write process requires 2 cache lines.","The total bandwidth required for the bit detection and storage is summarised in the following table:",{"@attributes":{"id":"p-0580","num":"0783"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Read centroid \u0394","\u20025%"]},{"entry":[{},"Read 3 columns of pixel data","19%"]},{"entry":[{},"Read\/Write detected bits into byte buffer","10%"]},{"entry":[{},"Read\/Write bit history","\u20025%"]},{"entry":[{},"TOTAL","39%"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The process of detecting the value of a dot (and hence the value of a bit) given a centroid is accomplished by examining 3 pixel values and getting the result from a lookup table. The process is fairly simple and is illustrated in  dot  has a radius of about 1.5 pixels. Therefore the pixel  that holds the centroid, regardless of the actual position of the centroid within that pixel, should be 100% of the dot's value. If the centroid is exactly in the center of the pixel , then the pixels above  & below  the centroid's pixel, as well as the pixels to the left  & right  of the centroid's pixel will contain a majority of the dot's value. The further a centroid is away from the exact center of the pixel , the more likely that more than the center pixel will have 100% coverage by the dot.","Although  only shows centroids differing to the left and below the center, the same relationship obviously holds for centroids above and to the right of center center. In Case 1, the centroid is exactly in the center of the middle pixel . The center pixel  is completely covered by the dot, and the pixels above, below, left, and right are also well covered by the dot. In Case 2, the centroid is to the left of the center of the middle pixel . The center pixel is still completely. covered by the dot, and the pixel  to the left of the center is now completely covered by the dot. The pixels above  and below  are still well covered. In Case 3, the centroid is below the center of the middle pixel . The center pixel  is still completely covered by the dot , and the pixel below center is now completely covered by the dot. The pixels left  and right  of center are still well covered. In Case 4, the centroid is left and below the center of the middle pixel. The center pixel  is still completely covered by the dot, and both the pixel to the left of center  and the pixel below center  are completely covered by the dot.","The algorithm for updating the centroid uses the distance of the centroid from the center of the middle pixel  in order to select 3 representative pixels and thus decide the value of the dot:\n\n","As shown in , the value of each pixel is output to a pre-calculated lookup table . The 3 pixels are fed into a 12-bit lookup table, which outputs a single bit indicating the value of the dot\u2014on or off. The lookup table  is constructed at chip definition time, and can be compiled into about 500 gates. The lookup table can be a simple threshold table, with the exception that the center pixel (Pixel 1) is weighted more heavily.","Step 3: Update the Centroid \u0394s for Each Row in the Column","The idea of the \u0394s processing is to use the previous bit history to generate a \u2018perfect\u2019 dot at the expected centroid location for each row in a current column. The actual pixels (from the CCD) are compared with the expected \u2018perfect\u2019 pixels. If the two match, then the actual centroid location must be exactly in the expected position, so the centroid \u0394s must be valid and not need updating. Otherwise a process of changing the centroid \u0394s needs to occur in order to best fit the expected centroid location to the actual data. The new centroid \u0394s will be used for processing the dot in the next column.","Updating the centroid \u0394s is done as a subsequent process from Step 2 for the following reasons:\n\n","The centroid \u0394 are processed as \u0394column \u0394row respectively to reduce complexity.","Although a given dot is 3 pixels in diameter, it is likely to occur in a 4\u00d74 pixel area. However the edge of one dot will as a result be in the same pixel as the edge of the next dot. For this reason, centroid updating requires more than simply the information about a given single dot.",{"@attributes":{"id":"p-0589","num":"0796"},"figref":"FIG. 44","b":["310","311","310","312","315","314","315"]},"From this we can say that a maximum of 5 pixel columns and rows are required. It is possible to simplify the situation by taking the cases of row and column centroid \u0394s separately, treating them as the same problem, only rotated 90 degrees.","Taking the horizontal case first, it is necessary to change the column centroid \u0394s if the expected pixels don't match the detected pixels. From the bit history, the value of the bits found for the Current Row in the current dot column, the previous dot column, and the (previous-)th dot column are known. The expected centroid location is also known. Using these two pieces of information, it is possible to generate a 20 bit expected bit pattern should the read be \u2018perfect\u2019. The 20 bit bit-pattern represents the expected \u0394 values for each of the 5 pixels across the horizontal dimension. The first nibble would represent the rightmost pixel of the leftmost dot. The next 3 nibbles represent the 3 pixels across the center of the dot  from the previous column, and the last nibble would be the leftmost pixel  of the rightmost dot (from the current column).","If the expected centroid is in the center of the pixel, we would expect a 20 bit pattern based on the following table:",{"@attributes":{"id":"p-0593","num":"0800"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Bit history","Expected pixels"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["000","00000"]},{"entry":["001","0000D"]},{"entry":["010","0DFD0"]},{"entry":["011","0DFDD"]},{"entry":["100","D0000"]},{"entry":["101","D000D"]},{"entry":["110","DDFD0"]},{"entry":["111","DDFDD"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The pixels to the left and right of the center dot are either 0 or D depending on whether the bit was a 0 or 1 respectively. The center three pixels are either 000 or DFD depending on whether the bit was a 0 or 1 respectively. These values are based on the physical area taken by a dot for a given pixel. Depending on the distance of the centroid from the exact center of the pixel, we would expect data shifted slightly, which really only affects the pixels either side of the center pixel. Since there are 16 possibilities, it is possible to divide the distance from the center by 16 and use that amount to shift the expected pixels.","Once the 20 bit 5 pixel expected value has been determined it can be compared against the actual pixels read. This can proceed by subtracting the expected pixels from the actual pixels read on a pixel by pixel basis, and finally adding the differences together to obtain a distance from the expected \u0394 values.",{"@attributes":{"id":"p-0596","num":"0803"},"figref":"FIG. 45","b":["320","322","323","324","321","326","327"]},"This process is carried out for the expected centroid and once for a shift of the centroid left and right by 1 amount in \u0394column. The centroid with the smallest difference from the actual pixels is considered to be the \u2018winner\u2019 and the \u0394column updated accordingly (which hopefully is \u2018no change\u2019). As a result, a \u0394column cannot change by more than 1 each dot column.","The process is repeated for the vertical pixels, and \u0394row is consequentially updated.","There is a large amount of scope here for parallelism. Depending on the rate of the clock chosen for the ACP unit  these units can be placed in series (and thus the testing of 3 different \u0394 could occur in consecutive clock cycles), or in parallel where all 3 can be tested simultaneously. If the clock rate is fast enough, there is less need for parallelism.","Bandwidth Utilization","It is necessary to read the old \u0394 of the \u0394s, and to write them out again. This takes 10% of the bandwidth:\n\n2*(76(3150\/32)+2*3150)=27,648 ns=10% of bandwidth\n","It is necessary to read the bit history for the given row as we update its \u0394s. Each byte contains 2 row's bit histories, thus taking 2.5% of the bandwidth:\n\n76((3150\/2)\/32)+2*(3150\/2)=4,085 ns=2.5% of bandwidth\n","In the worst case of pixel drift due to a 1% rotation, centroids will shift 1 column every 57 pixel rows, but since a dot is 3 pixels in diameter, a given pixel column will be valid for 171 pixel rows (3*57). As a byte contains 2 pixels, the number of bytes valid in cached reads will be a worst case of 86 (out of 128 read). The worst case timing for 5 columns is therefore 31% bandwidth.\n\n5*(((9450\/(128*2))*320)*128\/86)=88,112 ns=31% of bandwidth.\n","The total bandwidth required for the updating the centroid \u0394 is summarised in the following table:",{"@attributes":{"id":"p-0604","num":"0811"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Read\/Write centroid \u0394","10%",{}]},{"entry":[{},"Read bit history","2.5%"]},{"entry":[{},"Read 5 columns of pixel data","31%"]},{"entry":[{},"TOTAL","43.5%"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The 2 MB bit-image DRAM area is read from and written to during Phase 2 processing. The 2 MB pixel-data DRAM area is read.","The 0.5 MB scratch DRAM area is used for storing row data, namely:",{"@attributes":{"id":"p-0607","num":"0814"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Centroid array","24 bits (16:8) * 2 * 3150 = 18,900 bytes"]},{"entry":["Bit History array","3 bits * 3150 entries (2 per byte) = 1575 bytes"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Returning to , the next step in decoding is to unscramble and XOR the raw data. The 2 MB byte image, as taken from the Artcard, is in a scrambled XORed form. It must be unscrambled and re-XORed to retrieve the bit image necessary for the Reed Solomon decoder in phase 4.","Turning to , the unscrambling process  takes a 2 MB scrambled byte image  and writes an unscrambled 2 MB image . The process cannot reasonably be performed in-place, so 2 sets of 2 MB areas are utilised. The scrambled data  is in symbol block order arranged in a 16\u00d716 array, with symbol block  () having all the symbol 's from all the code words in random order. Symbol block  has all the symbol 's from all the code words in random order etc. Since there are only 255 symbols, the 256symbol block is currently unused.","A linear feedback shift register is used to determine the relationship between the position within a symbol block eg.  and what code word eg.  it came from. This works as long as the same seed is used when generating the original Artcard images. The XOR of bytes from alternative source lines with 0\u00d7AA and 0\u00d75 respectively is effectively free (in time) since the bottleneck of time is waiting for the DRAM to be ready to read\/write to non-sequential addresses.","The timing of the unscrambling XOR process is effectively 2 MB of random byte-reads, and 2 MB of random byte-writes i.e. 2*(2 MB*76 ns+2 MB*2 ns)=327,155,712 ns or approximately 0.33 seconds. This timing assumes no caching.","Phase 4\u2014Reed Solomon Decode","This phase is a loop, iterating through copies of the data in the bit image, passing them to the Reed-Solomon decode module until either a successful decode is made or until there are no more copies to attempt decode from.","The Reed-Solomon decoder used can be the VLIW processor, suitably programmed or, alternatively, a separate hardwired core such as LSI Logic's L64712. The L64712 has a throughput of 50 Mbits per second (around 6.25 MB per second), so the time may be bound by the speed of the Reed-Solomon decoder rather than the 2 MB read and 1 MB write memory access time (500 MB\/sec for sequential accesses). The time taken in the worst case is thus 2\/6.25 s=approximately 0.32 seconds.","Phase 5 Running the Vark Script","The overall time taken to read the Artcard  and decode it is therefore approximately 2.15 seconds. The apparent delay to the user is actually only 0.65 seconds (the total of Phases 3 and 4), since the Artcard stops moving after 1.5 seconds.","Once the Artcard is loaded, the Artvark script must be interpreted, Rather than run the script immediately, the script is only run upon the pressing of the \u2018Print\u2019 button  (FIG. ). The taken to run the script will vary depending on the complexity of the script, and must be taken into account for the perceived delay between pressing the print button and the actual print button and the actual printing.","Alternative Artcard Fomat","Of course, other artcard formats are possible. There will now be described one such alternative artcard format with a number of preferable feature. Described hereinafter will be the alternative Artcard data format, a mechanism for mapping user data onto dots on an alternative Artcard, and a fast alternative Artcard reading algorithm for use in embedded systems where resources are scarce.","Alternative Artcard Overview","The Alternative Artcards can be used in both embedded and PC type applications, providing a user-friendly interface to large amounts of data or configuration information.","While the back side of an alternative Artcard has the same visual appearance regardless of the application (since it stores the data), the front of an alternative Artcard can be application dependent. It must make sense to the user in the context of the application.","Alternative Artcard technology can also be independent of the printing resolution. The notion of storing data as dots on a card simply means that if it is possible put more dots in the same space (by increasing resolution), then those dots can represent more data. The preferred embodiment assumes utilisation of 1600 dpi printing on a 86 mm\u00d755 mm card as the sample Artcard, but it is simple to determine alternative equivalent layouts and data sizes for other card sizes and\/or other print resolutions. Regardless of the print resolution, the reading technique remain the same. After all decoding and other overhead has been taken into account, alternative Artcards are capable of storing up to 1 Megabyte of data at print resolutions up to 1600 dpi. Alternative Artcards can store megabytes of data at print resolutions greater than 1600 dpi. The following two tables summarize the effective alternative Artcard data storage capacity for certain print resolutions:","Format of an Alternative Artcard","The structure of data on the alternative Artcard is therefore specifically designed to aid the recovery of data. This section describes the format of the data (back) side of an alternative Artcard.","Dots","The dots on the data side of an alternative Artcard can be monochrome. For example, black dots printed on a white background at a predetermined desired print resolution. Consequently a \u201cblack dot\u201d is physically different from a \u201cwhite dot\u201d.  illustrates various examples of magnified views of black and white dots. The monochromatic scheme of black dots on a white background is preferably chosen to maximize dynamic range in blurry reading environments. Although the black dots are printed at a particular pitch (eg. 1600 dpi), the dots themselves are slightly larger in order to create continuous lines when dots are printed contiguously. In the example images of , the dots are not as merged as they may be in reality as a result of bleeding. There would be more smoothing out of the black indentations. Although the alternative Artcard system described in the preferred embodiment allows for flexibly different dot sizes, exact dot sizes and ink\/printing behaviour for a particular printing technology should be studied in more detail in order to obtain best results.","In describing this artcard embodiment, the term dot refers to a physical printed dot (ink, thermal, electro-photographic, silver-halide etc) on an alternative Artcard. When an alternative Artcard reader scans an alternative Artcard, the dots must be sampled at least double the printed resolution to satisfy Nyquist's Theorem. The term pixel refers to a sample value from an alternative Artcard reader device. For example, when 1600 dpi dots are scanned at 4800 dpi there are 3 pixels in each dimension of a dot, or 9 pixels per dot. The sampling process will be further explained hereinafter.","Turning to , there is shown the data surface  a sample of alternative Artcard. Each alternative Artcard consists of an \u201cactive\u201d region  surrounded by a white border region . The white border  contains no data information, but can be used by an alternative Artcard reader to calibrate white levels. The active region is an array of data blocks eg. , with each data block separated from the next by a gap of 8 white dots eg. . Depending on the print resolution, the number of data blocks on an alternative Artcard will vary. On a 1600 dpi alternative Artcard, the array can be 8\u00d78. Each data block  has dimensions of 627\u00d7394 dots. With an inter-block gap  of 8 white dots, the active area of an alternative Artcard is therefore 5072\u00d73208 dots (8.1 mm\u00d75.1 mm at 1600 dpi).","Data Blocks","Turning now to , there is shown a single data block . The active region of an alternative Artcard consists of an array of identically structured data blocks . Each of the data blocks has the following structure: a data region  surrounded by clock-marks , borders , and targets . The data region holds the encoded data proper, while the clock-marks, borders and targets are present specifically to help locate the data region and ensure accurate recovery of data from within the region.","Each data block  has dimensions of 627\u00d7394 dots. Of this, the central area of 595\u00d7384 dots is the data region . The surrounding dots are used to hold the clock-marks, borders, and targets.","Borders and Clockmarks",{"@attributes":{"id":"p-0629","num":"0836"},"figref":["FIG. 50","FIG. 52","FIG. 52"],"b":["51","51","1170","1177","1112","1113","1114"]},"The clock marks are symmetric in that if the alternative Artcard is inserted rotated 180 degrees, the same relative border\/clockmark regions will be encountered. The border ,  is intended for use by an alternative Artcard reader to keep vertical tracking as data is read from the data region. The clockmarks  are intended to keep horizontal tracking as data is read from the data region. The separation between the border and clockmarks by a white line of dots is desirable as a result of blurring occurring during reading. The border thus becomes a black line with white on either side, making for a good frequency response on reading. The clockmarks alternating between white and black have a similar result, except in the horizontal rather than the vertical dimension. Any alternative Artcard reader must locate the clockmarks and border if it. intends to use them for tracking. The next section deals with targets, which are designed to point the way to the clockmarks, border and data.","Targets in the Target Region","As shown in , there are two 15-dot wide target regions ,  in each data block: one to the left and one to the right of the data region. The target regions are separated from the data region by a single column of dots used for orientation. The purpose of the Target Regions ,  is to point the way to the clockmarks, border and data regions. Each Target Region contains  targets eg.  that are designed to be easy to find by an alternative Artcard reader. Turning now to  there is shown the structure of a single target . Each target  is a 15\u00d715 dot black square wit center structure  and a run-length encoded target number . The center structure  is a simple white cross, and the target number component  is simply two columns of white dots, each being 2 dots long for each part of the target number. Thus target number 's target id  is 2 dots long, target number 's target id  is 4 dots wide etc.","As shown in , the targets are arranged so that they are rotation invariant with regards to card insertion. This means that the left targets and right targets are the same, except rotated 180 degrees. In the left Target Region , the targets are arranged such that targets  to  are located top to bottom respectively. In the right Target Region, the targets are arranged so that target numbers  to  are located bottom to top. The target number id is always in the half closest to the data region. The magnified view portions of  reveals clearly the how the right targets are simply the same as the left targets, except rotated 180 degrees.","As shown in , the targets ,  are specifically placed within the Target Region with centers 55 dots apart. In addition, there is a distance of 55 dots from the center of target  () to the first clockmark dot  in the upper clockmark region, and a distance of 55 dots from the center of the target to the first clockmark dot in the lower clockmark region (not shown). The first black clockmark in both regions begins directly in line with the target center (the 8th dot position is the center of the 15 dot-wide target).","The simplified schematic illustrations of  illustrates the distances between target centers as well as the distance from Target  () to the first dot of the first black clockmark () in the upper border\/clockmark region. Since there is a distance of 55 dots to the clockmarks from both the upper and lower targets, and both sides of the alternative Artcard are symmetrical (rotated through 180 degrees), the card can be read left-to-right or right-to-left. Regardless of reading direction, the orientation does need to be determined in order to extract the data from the data region.","Orientation Columns","As illustrated in , there are two 1 dot wide Orientation Columns ,  in each data block: one directly to the left and one directly to the right of the data region. The Orientation Columns are present to give orientation information to an alternative Artcard reader: On the left side of the data region (to the right of the Left Targets) is a single column of white dots . On the right side of the data region (to the left of the Right Targets) is a single column of black dots . Since the targets are rotation invariant, these two columns of dots allow an alternative Artcard reader to determine the orientation of the alternative Artcard\u2014has the card been inserted the right way, or back to front. From the alternative Artcard reader's point of view, assuming no degradation to the dots, there are two possibilities:\n\n","Data Region","As shown in , the data region of a data block consists of 595 columns of 384 dots each, for a total of 228,480 dots. These dots must be interpreted and decoded to yield the original data. Each dot represents a single bit, so the 228,480 dots represent 228,480 bits, or 28,560 bytes. The interpretation of each dot can be as follows:",{"@attributes":{"id":"p-0640","num":"0849"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Black","1"]},{"entry":[{},"White","0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The actual interpretation of the bits derived from the dots, however, requires understanding of the mapping from the, original data to the dots in the data regions of the alternative Artcard.","Mapping Original Data to Data Region Dots","There will now be described the process of taking an original data file of maximum size 910,082 bytes and mapping it to the dots in the data regions of the 64 data blocks on a 1600 dpi alternative Artcard. An alternative Artcard reader would reverse the process in order to extract the original data from the dots on an alternative Artcard. At first glance it seems trivial to map data onto dots: binary data is comprised of s and s, so it would be possible to simply write black and white dots onto the card. This scheme however, does not allow for the fact that ink can fade, parts of a card may be damaged with dirt, grime, or even scratches. Without error-detection encoding, there is no way to detect if the data retrieved from the card is correct. And without redundancy encoding, there is no way to correct the detected errors. The aim of the mapping process then, is to make the data recovery highly robust, and also give the alternative Artcard reader the ability to know it read the data correctly.","There are three basic steps involved in mapping an original data file to data region dots:\n\n","Each of these steps is examined in detail in the following sections.","Redundancy Encode Using Reed-Solomon Encoding","The mapping of data to alternative Artcard dots relies heavily on the method of redundancy encoding employed. Reed-Solomon encoding is preferably chosen for its ability to deal with burst errors and effectively detect and correct errors using a minimum of redundancy. Reed Solomon encoding is adequately discussed in the standard texts such as Wicker, S., and Bhargava, V., 1994, Reed-Solomon Codes and their Applications, IEEE Press. Rorabaugh, C, 1996, Error Coding Cookbook, McGraw-Hill. Lyppens, H., 1997, Reed-Solomon Error Correction, Dr. Dobb's Journal, January 1997 (Volume 22, Issue 1).","A variety of different parameters for Reed-Solomon encoding can be used, including different symbol sizes and different levels of redundancy. Preferably, the following encoding parameters are used:\n\n","Having m=8 means that the symbol size is 8 bits (1 byte). It also means that each Reed-Solomon encoded block size n is 255 bytes (2\u22121 symbols). In order to allow correction of up to t symbols, 2t symbols in the final block size must be taken up with redundancy symbols. Having t=64 means that 64 bytes (symbols) can be corrected per block if they are in error. Each 255 byte block therefore has 128 (2\u00d764) redundancy bytes, and the remaining 127 bytes (k=127) are used to hold original data. Thus:\n\n","The practical result is that 127 bytes of original data are encoded to become a 255-byte block of Reed-Solomon encoded data. The encoded 255-byte blocks are stored on the alternative Artcard and later decoded back to the original 127 bytes again by the alternative Artcard reader. The 384 dots in a single column of a data block's data region can hold 48 bytes (384\/8). 595 of these columns can hold 28,560 bytes. This amounts to 112 Reed-Solomon blocks (each block having 255 bytes). The 64 data blocks of a complete alternative Artcard can hold a total of 7168 Reed-Solomon blocks (1,827,840 bytes, at 255 bytes per Reed-Solomon block). Two of the 7,168 Reed-Solomon blocks are reserved for control information, but the remaining 7166 are used to store data. Since each Reed-Solomon block holds 127 bytes of actual data, the total amount of data that can be stored on an alternative Artcard is 910,082 bytes (7166\u00d7127). If the original data is less than this amount, the data can be encoded to fit an exact number of Reed-Solomon blocks, and then the encoded blocks can be replicated until all 7,166 are used.  illustrates the overall form of encoding utilised.","Each of the 2 Control blocks ,  contain the same encoded information required.for decoding the remaining 7,166 Reed-Solomon blocks:\n\n","The Control Block is stored twice to give greater chance of it surviving. In addition, the repetition of the data within the Control Block has particular significance when using Reed-Solomon encoding. In an uncorrupted Reed-Solomon encoded block, the first 127 bytes of data are exactly the original data, and can be looked at in an attempt to recover the original message if the Control Block fails decoding (more than 64 symbols are corrupted). Thus, if a Control Block fails decoding, it is possible to examine sets of 3 bytes in an effort to determine the most likely values for the 2 decoding parameters. It is not guaranteed to be recoverable, but it has a better chance through redundancy. Say the last 159 bytes of the Control Block are destroyed, and the first 96 bytes are perfectly ok. Looking at the first 96 bytes will show a repeating set of numbers. These numbers can be sensibly used to decode the remainder of the message in the remaining 7,166 Reed-Solomon blocks.","By way of example, assume a data file containing exactly 9,967 bytes of data. The number of Reed-Solomon blocks required is 79. The first 78 Reed-Solomon blocks are completely utilized, consuming 9,906 bytes (78\u00d7127). The 79th block has only 61 bytes of data (with the remaining 66 bytes all 0s).","The alternative Artcard would consist of 7,168 Reed-Solomon blocks. The first 2 blocks would be Control Blocks, the next 79 would be the encoded data, the next 79 would be a duplicate of the encoded data, the next 79 would be another duplicate of the encoded data, and so on. After storing the 79 Reed-Solomon blocks 90 times, the remaining 56 Reed-Solomon blocks would be another duplicate of the first 56 blocks from the 79 blocks of encoded data (the final 23 blocks of encoded data would not be stored again as there is not enough room on the alternative Artcard). A hex representation of the 127 bytes in each Control Block data before being Reed-Solomon encoded would be as illustrated in FIG. .","Scramble the Encoded Data","Assuming all the encoded blocks have been stored contiguously in memory, a maximum 1,827,840 bytes of data can be stored on the alternative Artcard (2 Control Blocks and 7,166 information blocks, totalling 7,168 Reed-Solomon encoded blocks). Preferably, the data is not directly stored onto the alternative Artcard at this stage however, or all 255 bytes of one Reed-Solomon block will be physically together on the card. Any dirt, grime, or stain that causes physical damage to the card has the potential of damaging more than 64 bytes in a single Reed-Solomon block, which would make that block unrecoverable. If there are no duplicates of that Reed-Solomon block, then the entire alternative Artcard cannot be decoded.","The solution is to take advantage of the fact that there are a large number of bytes on the alternative Artcard, and that the alternative Artcard has, a reasonable physical size. The data can therefore be scrambled to ensure that symbols from a single Reed-Solomon block are not in close proximity to one another. Of course pathological cases of card degradation can cause Reed-Solomon blocks to be unrecoverable, but on average, the scrambling of data makes the card much more robust. The scrambling scheme chosen is simple and is illustrated schematically in FIG. . All the Byte 0s from each Reed-Solomon block are placed together , then all the Byte 1s etc. There will therefore be 7,168 byte 0's, then 7,168 Byte 1's etc. Each data block on the alternative Artcard can store 28,560 bytes. Consequently there are approximately 4 bytes from each Reed-Solomon block in each of the 64 data blocks on the alternative Artcard.","Under this scrambling scheme, complete damage to 16 entire data blocks on the alternative Artcard will result in 64 symbol errors per Reed-Solomon block. This means that if there is no other damage to the alternative Artcard, the entire data is completely recoverable, even if there is no data duplication.","Write the Scrambled Encoded Data to the Alternative Artcard","Once the original data has been Reed-Solomon encoded, duplicated, and scrambled, there are 1,827,840 bytes of data to be stored on the alternative Artcard. Each of the 64 data blocks on the alternative Artcard stores 28,560 bytes.","The data is simply written out to the alternative Artcard data blocks so that the first data block contains the first 28,560 bytes of the scrambled data, the second data block contains the next 28,560 bytes etc.","As illustrated in , within a data block, the data is written out column-wise left to right. Thus the left-most column within a data block contains the first 48 bytes of the 28,560 bytes of scrambled data, and the last column contains the last 48 bytes of the 28,560 bytes of scrambled data. Within a column, bytes are written out top to bottom, one bit at a time, starting from bit  and finishing with bit . If the bit is set (1), a black dot is placed on the alternative Artcard, if the clear (0), no dot is placed, leaving it the white background color of the card.","For example, a set of 1,827,840 bytes of data can be created by scrambling 7,168 Reed-Solomon encoded blocks to be stored onto an alternative Artcard. The first 28,560 bytes of data are written to the first data block. The first 48 bytes of the first 28,560 bytes are written to the first column of the data block, the next 48 bytes to the next column and so on. Suppose the first two bytes of the 28,560 bytes are hex D3 5F. Those first two bytes will be stored in column  of the data block. Bit  of byte 0 will be stored first, then bit  and so on. Then Bit  of byte 1 will be stored through to bit  of byte 1. Since each \u201c1\u201d is stored as a black dot, and each \u201c0\u201d as a white dot, these two bytes will be represented on the alternative Artcard as the following set of dots:\n\n","Decoding an Alternative Artcard","This section deals with extracting the original data from an alternative Artcard in an accurate and robust manner. Specifically, it assumes the alternative Artcard format as described in the previous chapter, and describes a method of extracting the original pre-encoded data from the alternative Artcard.","There are a number of general considerations that are part of the assumptions for decoding an alternative Artcard.","User","The purpose of an alternative Artcard is to store data for use in different applications. A user inserts an alternative. Artcard into an alternative Artcard reader, and expects the data to be loaded in a \u201creasonable time\u201d. From the user's perspective, a motor transport moves the alternative Artcard into an alternative Artcard reader. This is not perceived as a problematic delay, since the alternative Artcard is in motion. Any time after the alternative Artcard has stopped is perceived as a delay, and should be minimized in any alternative Artcard reading scheme. Ideally, the entire alternative Artcard would be read while in motion, and thus there would be no perceived delay after the card had stopped moving.","For the purpose of the preferred embodiment, a reasonable time for an alternative Artcard to be physically loaded is defined to be 1.5 seconds. There should be a minimization of time for additional decoding after the alternative Artcard has stopped moving. Since the Active region of an alternative Artcard covers most of the alternative Artcard surface we can limit our timing concerns to that region.","Sampling Dots","The dots on an alternative Artcard must be sampled by a CCD reader or the like at least at double the printed resolution to satisfy Nyquist's Theorem. In practice it is better to sample at a higher rate than this. In the alternative Artcard reader environment, dots are preferably sampled at 3 times their printed resolution in each dimension, requiring 9 pixels to define a single dot. If the resolution of the alternative Artcard dots is 1600 dpi, the alternative Artcard reader's image sensor must scan pixels at 4800 dpi. Of course if a dot is not exactly aligned with the sampling sensor, the worst and most likely case as illustrated in , is that a dot will be sensed over a 4\u00d74 pixel area.","Each sampled pixel is 1 byte (8 bits). The lowest 2 bits of each pixel can contain significant noise. Decoding algorithms must therefore be noise tolerant.","Alignment\/Rotation","It is extremely unlikely that a user will insert an alternative Artcard into an alternative Artcard reader perfectly aligned with no rotation. Certain physical constraints at a reader entrance and motor transport grips will help ensure that once inserted, an alternative Artcard will stay at the original angle of insertion relative to the CCD. Preferably this angle of rotation, as illustrated in  is a maximum of 1 degree. There can be some slight aberrations in angle due to jitter and motor rumble during the reading process, but these are assumed to essentially stay within the 1-degree limit.","The physical dimensions of an alternative Artcard are 86 mm\u00d755 mm. A 1 degree rotation adds 1.5 mm to the effective height of the card as 86 mm passes under the CCD (86 sin 1\u00b0), which will affect the required CCD length.","The effect of a 1 degree rotation on alternative Artcard reading is that a single scanline from the CCD will include a number of different columns of dots from the alternative Artcard. This is illustrated in an exaggerated form in  which shows the drift of dots across the columns of pixels. Although exaggerated in this diagram, the actual drift will be a maximum 1 pixel column shift every 57 pixels.","When an alternative Artcard is not rotated, a single column of dots can be read over 3 pixel scanlines. The more an alternative Artcard is rotated, the greater the local effect. The more dots being read, the longer the rotation effect is applied. As either of these factors increase, the larger the number of pixel scanlines that are needed to be read to yield a given set of dots from a single column on an alternative Artcard. The following table shows how many pixel scanlines are required for a single column of dots in a particular alternative Artcard structure.",{"@attributes":{"id":"p-0678","num":"0899"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Region","Height","0\u00b0 rotation","1\u00b0 rotation "]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Active region","3208 dots","3 pixel columns","168 pixel columns"]},{"entry":["Data block","\u2002394 dots","3 pixel columns","\u200221 pixel columns "]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"To read an entire alternative Artcard, we need to read 87 mm (86 mm+1 mm due to 1\u00b0 rotation). At 4800 dpi this implies 16,252 pixel columns.","CCD (or Other Linear Image Sensor) Length","The length of the CCD itself must accommodate:\n\n","These factors combine to form a total length of 57.5 mm.","When the alternative Artcard Image sensor CCD in an alternative Artcard reader scans at 4800 dpi, a single scanline is 10,866 pixels. For simplicity, this figure has been rounded up to 11,000 pixels. The Active Region of an alternative Artcard has a height of 3208 dots, which implies 9,624 pixels. A Data Region has a height of 384 dots, which implies 1,152 pixels.","DRAM Size","The amount of memory required for alternative Artcard reading and decoding is ideally minimized. The typical placement of an alternative Artcard reader is an embedded system where memory resources are precious. This is made more problematic by the effects of rotation. As described above, the more an alternative Artcard is rotated, the more scanlines are required to effectively recover original dots.","There is a trade-off between algorithmic complexity, user perceived delays, robustness, and memory usage. One of the simplest reader algorithms would be to simply scan the whole alternative Artcard, and then to process the whole data without real-time constraints. Not only would this require huge reserves of memory, it would take longer than a reader algorithm that occurred concurrently with the alternative Artcard reading process.","The actual amount of memory required for reading and decoding an alternative Artcard is twice the amount of space required to hold the encoded data, together with a small amount of scratch space (1-2 KB). For the 1600 dpi alternative Artcard, this implies a 4 MB memory requirement. The actual usage of the memory is detailed in the following algorithm description.","Transfer Rate","DRAM bandwidth assumptions need to be made for timing considerations and to a certain extent affect algorithmic design, especially since alternative Artcard readers are typically part of an embedded system.","A standard Rambus Direct RDRAM architecture is assumed, as defined in Rambus Inc, October 1997, with a peak data transfer rate of 1.6 GB\/sec. Assuming 75% efficiency (easily achieved), we have an average of 1.2 GB\/sec data transfer rate. The average time to access a block of 16 bytes is therefore 12 ns.","Dirty Data","Physically damaged alternative Artcards can be inserted into a reader. Alternative Artcards may be scratched, or be stained with grime or dirt. A alternative Artcard reader can't assume to read everything perfectly. The effect of dirty data is made worse by blurring, as the dirty data affects the surrounding clean dots.","Blurry Environment","There are two ways that blurring is introduced into the alternative Artcard reading environment:\n\n","Natural blurring of an alternative Artcard image occurs when there is overlap of sensed data from the CCD. Blurring can be useful, as the overlap ensures there are no high frequencies in the sensed data, and that there is no data missed by the CCD. However if the area covered by a CCD pixel is too large, there will be too much blurring and the sampling required to recover the data will not be met.  is a schematic illustration of the overlapping of sensed data.","Another form of blurring occurs when an alternative Artcard is slightly warped due to heat damage. When the warping is in the vertical dimension, the distance between the alternative Artcard and the CCD will not be constant, and the level of blurring will vary across those areas.","Black and white dots were chosen for alternative Artcards to give the best dynamic range in blurry reading environments. Blurring can cause problems in attempting to determine whether a given dot is black or white.","As the blurring increases, the more a given dot is influenced by the surrounding dots. Consequently the dynamic range for a particular dot decreases. Consider a white dot and a black dot, each surrounded by all possible sets of dots. The 9 dots are blurred, and the center dot sampled.  shows the distribution of resultant center dot values for black and white dots.","The diagram is intended to be a representative blurring. The curve  from 0 to around 180 shows the range of black dots. The curve  from 75 to 250 shows the range of white dots. However the greater the blurring, the more the two curves shift towards the center of the range and therefore the greater the intersection area, which means the more difficult it is to determine whether a given dot is black or white. A pixel value at the center point of intersection is ambiguous\u2014the dot is equally likely to be a black or a white.","As the blurring increases, the likelihood of a read bit error increases. Fortunately, the Reed-Solomon decoding algorithm can cope with these gracefully up to t symbol errors.  is a graph of number predicted number of alternative Artcard Reed-Solomon blocks that cannot be recovered given a particular symbol error rate. Notice how the Reed-Solomon decoding scheme performs well and then substantially degrades. If there is no Reed-Solomon block duplication, then only 1 block needs to be in error for the data to be unrecoverable. Of course, with block duplication the chance of an alternative Artcard decoding increases.",{"@attributes":{"id":"p-0696","num":"0922"},"figref":"FIG. 66"},"Overview of Alternative Artcard Decoding","As noted previously, when the user inserts an alternative Artcard into an alternative Artcard reading unit, a motor transport ideally carries the alternative Artcard past a monochrome linear CCD image sensor. The card is sampled in each dimension at three times the printed resolution. Alternative Artcard reading hardware and software compensate for rotation up to 1 degree, jitter and vibration due to the motor transport, and blurring due to variations in alternative Artcard to CCD distance. A digital bit image of the data is extracted from the sampled image by a complex method described here. Reed-Solomon decoding corrects arbitrarily distributed data corruption of up to 25% of the raw data on the alternative Artcard. Approximately 1 MB of corrected data is extracted from a 1600 dpi card.","The steps involved in decoding are so as indicated in FIG. .","The decoding process requires the following steps:\n\n","Phase 1\u2014Real Time Bit Image Extraction","A simple comparison between the available memory (4 MB) and the memory required to hold all the scanned pixels for a 1600 dpi alternative Artcard (172.5 MB) shows that unless the card is read multiple times (not a realistic option), the extraction of the bitmap from the pixel data must be done on the fly, in real time, while the alternative Artcard is moving past the CCD. Two tasks must be accomplished in this phase:\n\n","The rotation and unscrambling of the bit image cannot occur until the whole bit image has been extracted. It is therefore necessary to assign a memory region to hold the extracted bit image. The bit image fits easily within 2 MB , leaving 2 MB for use in the extraction process. Rather than extracting the bit image while looking only at the current scanline of pixels from the CCD, it is possible to allocate a buffer to act as a window onto the alternative Artcard, storing the last N scanlines read. Memory requirements do not allow the entire alternative Artcard to be stored this way (172.5 MB would be required), but allocating 2 MB to store 190 pixel columns (each scanline takes less than 11,000 bytes) makes the bit image extraction process simpler.","The 4 MB memory is therefore used as follows:\n\n","The time taken for Phase 1 is 1.5 seconds, since this is the time taken for the alternative Artcard to travel past the CCD and physically load.","Phase 2\u2014Data Extraction from Bit Image","Once the bit image has been extracted, it must be unscrambled and potentially rotated 180\u00b0. It must then be decoded. Phase 2 has no real-time requirements, in that the alternative Artcard has stopped moving, and we are only concerned with the user's perception of elapsed time. Phase 2 therefore involves the remaining tasks of decoding an alternative Artcard:\n\n","The input to Phase 2 is the 2 MB bit image buffer. Unscrambling and rotating cannot be performed in situ, so a second 2 MB buffer is required. The 2 MB buffer used to hold scanned pixels in Phase 1 is no longer required and can be used to store the rotated unscrambled data.","The Reed-Solomon decoding task takes the unscrambled bit image and decodes it to 910,082 bytes. The decoding can be performed in situ, or to a specified location elsewhere. The decoding process does not require any additional memory buffers.","The 4 MB memory is therefore used as follows:\n\n","The time taken for Phase 2 is hardware dependent and is bound by the time taken for Reed-Solomon decoding. Using a dedicated core such as LSI Logic's L64712, or an equivalent CPU\/DSP combination, it is estimated that Phase 2 would take 0.32 seconds.","Phase 1\u2014Extract Bit Image","This is the real-time phase of the algorithm, and is concerned with extracting the bit image from the alternative Artcard as scanned by the CCD.","As shown in  Phase 1 can be divided into 2 asynchronous process streams. The first of these streams is simply the real-time reader of alternative Artcard pixels from the CCD, writing the pixels to DRAM. The second stream involves looking at the pixels, and extracting the bits. The second process stream is itself divided into 2 processes. The first process is a global process, concerned with locating the start of the alternative Artcard. The second process is the bit image extraction proper.",{"@attributes":{"id":"p-0712","num":"0954"},"figref":"FIG. 69"},"Timing","For an entire 1600 dpi alternative Artcard, it is necessary to read a maximum of 16,252 pixel-columns. Given a total time of 1.5 seconds for the whole alternative Artcard, this implies a maximum time of 92,296 ns per pixel column during the course of the various processes.","Process 1\u2014Read pixels from CCD","The CCD scans the alternative Artcard at 4800 dpi, and generates 11,000 1-byte pixel samples per column. This process simply takes the data from the CCD and writes it to DRAM, completely independently of any other process that is reading the pixel data from DRAM.  illustrates the steps involved.","The pixels are written contiguously to a 2 MB buffer that can hold 190 full columns of pixels. The buffer always holds the 190 columns most recently read. Consequently, any process that wants to read the pixel data (such as Processes 2 and 3) must firstly know where to look for a given column, and secondly, be fast enough to ensure that the data required is actually in the buffer.","Process 1 makes the current scanline number (CurrentScanLine) available to other processes so they can ensure they are not attempting to access pixels from scanlines that have not been read yet.","The time taken to write out a single column of data (11,000 bytes) to DRAM is:\n\n11,000\/16*12=8,256 ns\n","Process 1 therefore uses just under 9% of the available DRAM bandwidth (8256\/92296).","Process 2\u2014Detect Start of Alternative Artcard","This process is concerned with locating the Active Area on a scanned alternative Artcard. The input to this stage is the pixel data from DRAM (placed there by Process 1). The output is a set of bounds for the first 8 data blocks on the alternative Artcard, required as input to Process 3. A high level overview of the process can be seen in FIG. .","An alternative Artcard can have vertical slop of 1 mm upon insertion. With a rotation of 1 degree there is further vertical slop of 1.5 mm (86 sin 1\u00b0). Consequently there is a total vertical slop of 2.5 mm. At 1600 dpi, this equates to a slop of approximately 160 dots. Since a single data block is only 394 dots high, the slop is just under half a data block. To get a better estimate of where the data blocks are located the alternative Artcard itself needs to be detected.","Process 2 therefore consists of two parts:\n\n","Locate the Start of the Alternative Artcard","The scanned pixels outside the alternative Artcard area are black (the surface can be black plastic or some other non-reflective surface). The border of the alternative Artcard area is white. If we process the pixel columns one by one, and filter the pixels to either black or white, the transition point from black to white will mark the start of the alternative Artcard.","The highest level process is as follows:",{"@attributes":{"id":"p-0725","num":"0969"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for (Column=0; Column < MAX_COLUMN; Column++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Pixel = ProcessColumn(Column)"]},{"entry":[{},"if (Pixel)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return (Pixel, Column) \u2003\u2003\u2003\/\/ success!"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return failure \u2003\u2003\u2003\u2003\/\/ no alternative Artcard found "]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The ProcessColumn function is simple. Pixels from two areas of the scanned column are passed through a threshold filter to determine if they are black or white. It is possible to then wait for a certain number of white pixels and announce the start of the alternative Artcard once the given number has been detected. The logic of processing a pixel column is shown in the following pseudocode. 0 is returned if the alternative Artcard has not been detected during the column. Otherwise the pixel number of the detected location is returned.",{"@attributes":{"id":"p-0727","num":"0971"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Try upper region first"},{"entry":"count = 0"},{"entry":"for (i=0; i<UPPER_REGION_BOUND; i++)"},{"entry":"{"},{"entry":"if (GetPixel(column, i) < THRESHOLD)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"count = 0\u2003\u2003\u2003\/\/ pixel is black"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"count++\u2003\u2003\u2003\/\/ pixel is white"},{"entry":"if (count > WHITE_ALTERNATIVE ARTCARD)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return i"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/ Try lower region next. Process pixels in reverse"},{"entry":"count = 0"},{"entry":"for (i=MAX_PIXEL_BOUND; i>LOWER_REGION_BOUND; i\u2212\u2212)"},{"entry":"{"},{"entry":"if (GetPixel(column, i) < THRESHOLD)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["count = 0","\/\/ pixel is black"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"else"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["count++","\/\/ pixel is white"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"if (count > WHITE_ALTERNATIVE ARTCARD)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return i"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/Not in upper bound or in lower bound. Return failure"},{"entry":"return 0 "},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"At this stage, the alternative Artcard has been detected. Depending on the rotation of the alternative Artcard, either the top of the alternative Artcard has been detected or the lower part of the alternative Artcard has been detected. The second step of Process 2 determines which was detected and sets the data block bounds for Phase 3 appropriately.","A look at Phase 3 reveals that it works on data block segment bounds: each data block has a StartPixel and an EndPixel to determine where to look for targets in order to locate the data block's data region.","If the pixel value is in the upper half of the card, it is possible to simply use that as the first StartPixel bounds. If the pixel value is in the lower half of the card, it is possible to move back so that the pixel value is the last segment's EndPixel bounds. We step forwards or backwards by the alternative Artcard data size, and thus set up each segment with appropriate bounds. We are now ready to begin extracting data from the alternative Artcard.",{"@attributes":{"id":"p-0731","num":"0975"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Adjust to become first pixel if is lower pixel"},{"entry":"if (pixel > LOWER_REGION_BOUND)"},{"entry":"{"},{"entry":"pixel \u2212= 6 * 1152"},{"entry":"if (pixel < 0)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pixel = 0"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"for (i=0; i<6; i++)"},{"entry":"{"},{"entry":"endPixel = pixel + 1152"},{"entry":"segment[i].MaxPixel = MAX_PIXEL_BOUND"},{"entry":"segment[i].SetBounds(pixel, endPixel)"},{"entry":"pixel = endPixel"},{"entry":"} "},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The MaxPixel value is defined in Process 3, and the SetBounds function simply sets StartPixel and EndPixel clipping with respect to 0 and MaxPixel.","Process 3\u2014Extract Bit Data from Pixels","This is the heart of the alternative Artcard Reader algorithm. This process is concerned with extracting the bit data from the CCD pixel data. The process essentially creates a bit-image from the pixel data, based on scratch information created by Process 2, and maintained by Process 3. A high level overview of the process can be seen in FIG. .","Rather than simply read an alternative Artcard's pixel column and determine what pixels belong to what data block, Process 3 works the other way around. It knows where to look for the pixels of a given data block. It does this by dividing a logical alternative Artcard into 8 segments, each containing 8 data blocks as shown in FIG. .","The segments as shown match the logical alternative Artcard. Physically, the alternative Artcard is likely to be rotated by some amount. The segments remain locked to the logical alternative Artcard structure, and hence are rotation-independent. A given segment can have one of two states:\n\n","The process is complete when all 64 data blocks have been extracted, 8 from each region.","Each data block consists of 595 columns of data, each with 48 bytes. Preferably, the 2 orientation columns for the data block are each extracted at 48 bytes each, giving a total of 28,656 bytes extracted per data block. For: simplicity, it is possible to divide the 2 MB of memory into 64\u00d732 k chunks. The nth data block for a given segment is stored at the location:\n\n","Each of the 8 segments has an associated data structure. The data structure defining each segment is stored in the scratch data area. The structure can be as set out in the following table:",{"@attributes":{"id":"p-0739","num":"0986"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["DataName","Comment "]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CurrentState","Defines the current state of the segment."]},{"entry":[{},"Can be one of:"]},{"entry":[{},"\u2003LookingForTargets"]},{"entry":[{},"\u2003ExtractingBitImage"]},{"entry":[{},"Initial value is LookingForTargets"]},{"entry":[{},"Used during LookingForTargets:"]},{"entry":["StartPixel","Upper pixel bound of segment. Initially set"]},{"entry":[{},"by Process 2."]},{"entry":["EndPixel","Lower pixel bound of segment. Initially set"]},{"entry":[{},"by Process 2"]},{"entry":["MaxPixel","The maximum pixel number for any scanline."]},{"entry":[{},"It is set to the same value for"]},{"entry":[{},"each segment: 10,866."]},{"entry":["CurrentColumn","Pixel column we're up to while looking"]},{"entry":[{},"for targets."]},{"entry":["FinalColumn","Defines the last pixel column to look in"]},{"entry":[{},"for targets."]},{"entry":["LocatedTargets","Points to a list of located Targets."]},{"entry":["PossibleTargets","Points to a set of pointers to Target structures that"]},{"entry":[{},"represent currently investigated pixel shapes"]},{"entry":[{},"that may be targets"]},{"entry":["AvailableTargets","Points to a set of pointers to Target structures"]},{"entry":[{},"that are currently unused."]},{"entry":["TargetsFound","The number of Targets found so far in this"]},{"entry":[{},"data block."]},{"entry":["PossibleTargetCount","The number of elements in the"]},{"entry":[{},"PossibleTargets list"]},{"entry":["AvailabletargetCount","The number of elements in the"]},{"entry":[{},"AvailableTargets list"]},{"entry":[{},"Used during ExtractingBitImage:"]},{"entry":["BitImage","The start of the Bit Image data area in DRAM"]},{"entry":[{},"where to store the next data block:"]},{"entry":[{},"Segment 1 = X, Segment 2 = X+32k etc"]},{"entry":[{},"Advances by 256k each time the state changes"]},{"entry":[{},"from ExtractingBitImageData to"]},{"entry":[{},"Looking ForTargets"]},{"entry":["CurrentByte","Offset within BitImage where to store next"]},{"entry":[{},"extracted byte"]},{"entry":["CurrentDotColumn","Holds current clockmark\/dot column number."]},{"entry":[{},"Set to \u22128 when transitioning from state"]},{"entry":[{},"LookingForTarget to ExtractingBitImage."]},{"entry":["UpperClock","Coordinate (column\/pixel) of current upper"]},{"entry":[{},"clockmark\/border"]},{"entry":["LowerClock","Coordinate (column\/pixel) of current lower"]},{"entry":[{},"clockmark\/border"]},{"entry":["CurrentDot","The center of the current data dot for the current"]},{"entry":[{},"dot column. Initially set to the center of the first"]},{"entry":[{},"(topmost) dot of the data column."]},{"entry":["DataDelta","What to add (column\/pixel) to CurrentDot to"]},{"entry":[{},"advance to the center of the next dot."]},{"entry":["BlackMax","Pixel value above which a dot is definitely white"]},{"entry":["WhiteMin","Pixel value below which a dot is definitely black"]},{"entry":["MidRange","The pixel value that has equal likelihood of"]},{"entry":[{},"coming from black or white. When all smarts"]},{"entry":[{},"have not determined the dot, this value is used to"]},{"entry":[{},"determine it. Pixels below this value are black,"]},{"entry":[{},"and above it are white. "]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Process 3 simply iterates through each of the segments, performing a single line of processing depending on the segment's current state. The pseudocode is straightforward:",{"@attributes":{"id":"p-0741","num":"0988"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"blockCount = 0"]},{"entry":[{},"while (blockCount < 64)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for (i=0; i<8; i++)"]},{"entry":[{},"{"]},{"entry":[{},"finishedBlock = segment[i].ProcessState( )"]},{"entry":[{},"if (finishedBlock)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"blockCount++"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} "]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Process 3 must be halted by an external controlling process if it has not terminated after a specified amount of time. This will only be the case if the data cannot be extracted. A simple mechanism is to start a countdown after Process 1 has finished reading the alternative Artcard. If Process 3 has not finished by that time, the data from the alternative Artcard cannot be recovered.","CurrentState=LookingForTargets","Targets are detected by reading columns of pixels, one pixel-column at a time rather than by detecting dots within a given band of pixels (between StartPixel and EndPixel) certain patterns of pixels are detected. The pixel columns are processed one at a time until either all the targets are found, or until a specified number of columns have been processed. At that time the targets can be processed and the data area located via clockmarks. The state is changed to ExtractingBitImage to signify that the data is now to be extracted. If enough valid targets are not located, then the data block is ignored, skipping to a column definitely within the missed data block, and then beginning again the process of looking for the targets in the next data block. This can be seen in the following pseudocode:",{"@attributes":{"id":"p-0744","num":"0991"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"finishedBlock = FALSE"]},{"entry":[{},"if(CurrentColumn < Process1.CurrentScanLine)"]},{"entry":[{},"{"]},{"entry":[{},"ProcessPixelColumn( )"]},{"entry":[{},"CurrentColumn++"]},{"entry":[{},"}"]},{"entry":[{},"if ((TargetsFound == 6) \u2225 (CurrentColumn > LastColumn))"]},{"entry":[{},"{"]},{"entry":[{},"If (TargetsFound >= 2)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ProcessTargets( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (TargetsFound >= 2)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BuildClockmarkEstimates( )"]},{"entry":[{},"SetBlackAndWhiteBounds( )"]},{"entry":[{},"CurrentState = ExtractingBitImage"]},{"entry":[{},"CurrentDotColumn = \u22128"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ data block cannot be recovered. Look for"]},{"entry":[{},"\/\/ next instead. Must adjust pixel bounds to"]},{"entry":[{},"\/\/ take account of possible 1 degree rotation."]},{"entry":[{},"finishedBlock = TRUE"]},{"entry":[{},"SetBounds(StartPixel\u221212, Endpixel+12)"]},{"entry":[{},"BitImage += 256KB"]},{"entry":[{},"CurrentByte = 0"]},{"entry":[{},"LastColumn += 1024"]},{"entry":[{},"TargetsFound = 0"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return finishedBlock "]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Each pixel column is processed within the specified bounds (between StartPixel and EndPixel) to search for certain patterns of pixels which will identify the targets. The structure of a single target (target number ) is as previously shown in FIG. :","From a pixel point of view, a target can be identified by:\n\n","An overview of the required process is as shown in FIG. .","Since identification only relies on black or white pixels, the pixels  from each column are passed through a filter  to detect black or white, and then run length encoded . The run-lengths are then passed to a state machine  that has access to the last 3 run lengths and the 4th last color. Based on these values, possible targets pass through each of the identification stages.","The GatherMin&Max process  simply keeps the minimum & maximum pixel values encountered during the processing of the segment. These are used once the targets have been located to set BlackMax, WhiteMin, and MidRange values.","Each segment keeps a set of target structures in its search for targets. While the target structures themselves don't move around in memory, several segment variables point to lists of pointers to these target structures. The three pointer lists are repeated here:",{"@attributes":{"id":"p-0751","num":"1003"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LocatedTargets","Points to a set of Target structures that represent"]},{"entry":[{},"located targets."]},{"entry":["PossibleTargets","Points to a set of pointers to Target structures that"]},{"entry":[{},"represent currently investigated pixel shapes that may"]},{"entry":[{},"be targets."]},{"entry":["AvailableTargets","Points to a set of pointers to Target structures that"]},{"entry":[{},"are currently unused. "]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"There are counters associated with each of these list pointers: TargetsFound, PossibleTargetCount, and AvailableTargetCount respectively.","Before the alternative Artcard is loaded, TargetsFound and PossibleTargetCount are set to 0, and AvailableTargetCount is set to 28 (the maximum number of target structures possible to have under investigation since the minimum size of a target border is 40 pixels, and the data area is approximately 1152 pixels). An example of the target pointer layout is as illustrated in FIG. .","As potential new targets are found, they are taken from the AvailableTargets list , the target data structure is updated, and the pointer to the structure is added to the PossibleTargets list . When a target is completely verified, it is added to the LocatedTargets list . If a possible target is found not to be a target after all, it is placed back onto the AvailableTargets list . Consequently there are always 28 target pointers in circulation at any time, moving between the lists.","The Target data structure  can have the following form:",{"@attributes":{"id":"p-0756","num":"1008"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["DataName","Comment "]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CurrentState","The current state of the target search"]},{"entry":["DetectCount","Counts how long a target has been in a given state"]},{"entry":["StartPixel","Where does the target start? All the lines of pixels in this"]},{"entry":[{},"target should start within a tolerance of this pixel value."]},{"entry":["TargetNumber","Which target number is this (according to what was read)"]},{"entry":["Column","Best estimate of the target's center column ordinate"]},{"entry":["Pixel","Best estimate of the target's center pixel ordinate "]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The ProcessPixelColumn function within the find targets module  () then, goes through all the run lengths one by one, comparing the runs against existing possible targets (via StartPixel), or creating new possible targets if a potential target is found where none was previously known. In all cases, the comparison is only made if S.color is white and S.color is black.","The pseudocode for the ProcessPixelColumn set out hereinafter. When the first target is positively identified, the last column to be checked for targets can be determined as being within a maximum distance from it. For 1\u00b0 rotation, the maximum distance is 18 pixel columns.",{"@attributes":{"id":"p-0759","num":"1011"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"pixel = StartPixel"},{"entry":"t = 0"},{"entry":"target=PossibleTarget[t]"},{"entry":"while ((pixel < EndPixel) && (TargetsFound < 6))"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if ((S0.Color == white) && (S1.Color == black))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"do"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"keepTrying = FALSE"]},{"entry":[{},"if"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(target != NULL)"]},{"entry":[{},"&&"]},{"entry":[{},"(target\u2212>AddToTarget(Column, pixel, S1, S2, S3))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (target\u2212>CurrentState == IsATarget)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Remove target from PossibleTargets List"]},{"entry":[{},"Add target to LocatedTargets List"]},{"entry":[{},"TargetsFound++"]},{"entry":[{},"if (TargetsFound == 1)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FinalColumn = Column +"]},{"entry":[{},"MAX_TARGET_DELTA}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else if (target\u2212>CurrentState == NotATarget)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Remove target from PossibleTargets List"]},{"entry":[{},"Add target to AvailableTargets List"]},{"entry":[{},"keepTrying = TRUE"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"t++\u2003\u2003\u2003\/\/ advance to next target"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"target = PossibleTarget[t]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"tmp = AvailableTargets[0]"]},{"entry":[{},"if (tmp\u2212> AddToTarget(Column,pixel,S1,S2,S3)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Remove tmp from AvailableTargets list"]},{"entry":[{},"Add tmp to PossibleTargets list"]},{"entry":[{},"t++\u2003\u2003\u2003\/\/ target t has been shifted right"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} while (keepTrying)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pixel += S1.RunLength"]},{"entry":[{},"Advance S0\/S1\/S2\/S3"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} "},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"AddToTarget is a function within the find targets module that determines whether it is possible or not to add the specific run to the given target:\n\n","The target is therefore left unchanged, and a return value of FALSE tells the caller that the run was not applied. The caller can subsequently check the run to see if it starts a whole new target of its own.\n\n","If the run is to be applied to the target, a specific action is performed based on the current state and set of runs in S, S, and S. The AddToTarget pseudocode is as follows:",{"@attributes":{"id":"p-0763","num":"1018"},"tables":{"@attributes":{"id":"TABLE-US-00060","num":"00060"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MAX_TARGET_DELTA = 1"]},{"entry":[{},"if (CurrentState != NothingKnown)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (pixel > StartPixel) \u2003\u2003\u2003\/\/ run starts after target"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"diff = pixel \u2212 StartPixel"]},{"entry":[{},"if (diff > MAX_TARGET_DELTA)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CurrentState = NotATarget"]},{"entry":[{},"return TRUE"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"diff = StartPixel \u2212 pixel"]},{"entry":[{},"if (diff > MAX_TARGET_DELTA)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return FALSE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"runType = DetermineRunType(S1, S2, S3)"]},{"entry":[{},"EvaluateState(runType)"]},{"entry":[{},"StartPixel = currentPixel"]},{"entry":[{},"return TRUE "]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Types of pixel runs are identified in DetermineRunType is as follows:",{"@attributes":{"id":"p-0765","num":"1020"},"tables":{"@attributes":{"id":"TABLE-US-00061","num":"00061"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"210pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"Types of Pixel Runs "},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Type","How identified (S1 is always black)"]},{"entry":["TargetBorder","S1 = 40 < RunLength < 50"]},{"entry":[{},"S2 = white run"]},{"entry":["TargetCenter","S1 = 15 < RunLength < 26"]},{"entry":[{},"S2 = white run with [RunLength < 12]"]},{"entry":[{},"S3 = black run with [15 < RunLength < 26]"]},{"entry":["TargetNumber","S2 = white run with [RunLength <= 40] "]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The EvaluateState procedure takes action depending on the current state and the run type.","The actions are shown as follows in tabular form:",{"@attributes":{"id":"p-0768","num":"1023"},"tables":{"@attributes":{"id":"TABLE-US-00062","num":"00062"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Type of",{}]},{"entry":["CurrentState","Pixel Run","Action "]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NothingKnown","TargetBorder","DetectCount = 1"]},{"entry":[{},{},"CurrentState = LeftOfCenter"]},{"entry":["LeftOfCenter","TargetBorder","DetectCount++"]},{"entry":[{},{},"if (DetectCount > 24)"]},{"entry":[{},{},"\u2003CurrentState = NotATarget"]},{"entry":[{},"TargetCenter","DetectCount = 1"]},{"entry":[{},{},"CurrentState = InCenter"]},{"entry":[{},{},"Column = currentColumn"]},{"entry":[{},{},"Pixel = currentPixel + S1.RunLength"]},{"entry":[{},{},"CurrentState = NotATarget"]},{"entry":["InCenter","TargetCenter","DetectCount++"]},{"entry":[{},{},"tmp = currentPixel + S1.RunLength"]},{"entry":[{},{},"if (tmp < Pixel)"]},{"entry":[{},{},"\u2003Pixel = tmp"]},{"entry":[{},{},"if (DetectCount > 13)"]},{"entry":[{},{},"\u2003CurrentState = NotATarget"]},{"entry":[{},"TargetBorder","DetectCount = 1"]},{"entry":[{},{},"CurrentState = RightOfCenter"]},{"entry":[{},{},"CurrentState = NotATarget"]},{"entry":["RightOfCenter","TargetBorder","DetectCount++"]},{"entry":[{},{},"if (DetectCount >= 12)"]},{"entry":[{},{},"\u2003CurrentState = NotATarget"]},{"entry":[{},"Target-","DetectCount = 1"]},{"entry":[{},"Number","CurrentState = InTargetNumber"]},{"entry":[{},{},"TargetNumber = (S2.RunLength+ 2)\/6"]},{"entry":[{},{},"CurrentState = NotATarget"]},{"entry":["InTargetNumber","Target-","tmp = (S2.RunLength+ 2)\/6"]},{"entry":[{},"Number","if (tmp > TargetNumber)"]},{"entry":[{},{},"\u2003TargetNumber = tmp"]},{"entry":[{},{},"DetectCount++"]},{"entry":[{},{},"if (DetectCount >= 12)"]},{"entry":[{},{},"\u2003CurrentState = NotATarget"]},{"entry":[{},"TargetBorder","if (DetectCount >= 3)"]},{"entry":[{},{},"\u2003CurrentState = IsATarget"]},{"entry":[{},{},"else"]},{"entry":[{},{},"\u2003CurrentState = NotATarget"]},{"entry":[{},{},"CurrentState = NotATarget"]},{"entry":["IsATarget or","\u2014","\u2014"]},{"entry":"NotATarget "},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The located targets (in the LocatedTargets list) are stored in the order they were located. Depending on alternative Artcard rotation these targets will be in ascending pixel order or descending pixel order. In addition, the target numbers recovered from the targets may be in error. We may have also have recovered a false target. Before the clockmark estimates can be obtained, the targets need to be processed to ensure that invalid targets are discarded, and valid targets have target numbers fixed if in error (e.g. a damaged target number due to dirt). Two main steps are involved:\n\n","The first step is simple. The nature of the target retrieval means that the data should already be sorted in either ascending pixel or descending pixel. A simple swap sort ensures that if the 6 targets are already sorted correctly a maximum of 14 comparisons is made with no swaps. If the data is not sorted, 14 comparisons are made, with 3 swaps. The following pseudocode shows the sorting process:",{"@attributes":{"id":"p-0771","num":"1028"},"tables":{"@attributes":{"id":"TABLE-US-00063","num":"00063"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for (i = 0; i < TargetsFound\u22121; i++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"oldTarget = LocatedTargets[i]"]},{"entry":[{},"bestPixel = oldTarget\u2212>Pixel"]},{"entry":[{},"best = i"]},{"entry":[{},"j = i+1"]},{"entry":[{},"while (j<TargetsFound)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (LocatedTargets[j]\u2212> Pixel < bestPixel)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"best = j"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"j++"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if (best != i) \/\/ move only if necessary"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LocatedTargets[i] = LocatedTargets[best]"]},{"entry":[{},"LocatedTargets[best] = oldTarget"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} "]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Locating and fixing erroneous target numbers is only slightly more complex. One by one, each of the N targets found is assumed to be correct. The other targets are compared to this \u201ccorrect\u201d target and the number of targets that require change should target N be correct is counted. If the number of changes is 0, then all the targets must already be correct. Otherwise the target that requires the fewest changes to the others is used as the base for change. A change is registered if a given target's target number and pixel position do not correlate when compared to the \u201ccorrect\u201d target's pixel position and target number. The change may mean updating a target's target number, or it may mean elimination of the target. It is possible to assume that ascending targets have pixels in ascending order (since they have already been sorted).",{"@attributes":{"id":"p-0773","num":"1030"},"tables":{"@attributes":{"id":"TABLE-US-00064","num":"00064"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"kPixelFactor = 1\/(55 * 3)"},{"entry":"bestTarget = 0"},{"entry":"bestChanges = TargetsFound + 1"},{"entry":"for (i=0; i<TotalTargetsFound; i++)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"numberOfChanges = 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"fromPixel = (LocatedTargets[i])->Pixel"},{"entry":"from TargetNumber = LocatedTargets[i].TargetNumber"},{"entry":"for (j=1; j<TotalTargetsFound; j++)"},{"entry":"{"},{"entry":"toPixel = LocatedTargets[j]->Pixel"},{"entry":"deltaPixel = toPixel - fromPixeI"},{"entry":"if (deltaPixel >= 0"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"deltaPixel += PIXELS_BETWEEN_TARGET_CENTRES\/2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"deltaPixel \u2212= PIXELS_BETWEEN_TARGET_CENTRES\/2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"targetNumber =deltaPixel * kpixelFactor"},{"entry":"targetNumber += fromTargetNumber"},{"entry":"if"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(targetNumber < 1 )||(targetNumber > 6)"]},{"entry":[{},"||"]},{"entry":[{},"(targetNumber != LocatedTargets[j]-> TargetNumber)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},")"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"numberOfChanges++"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (numberOfChanges < bestChanges)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"bestTarget = i"},{"entry":"bestChanges = numberOfChanges"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if (bestChanges < 2)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In most cases this function will terminate with bestChanges=0, which means no changes are required. Otherwise the changes need to be applied. The functionality of applying the changes is identical to counting the changes (in the pseudocode above) until the comparison with targetNumber. The change application is:",{"@attributes":{"id":"p-0775","num":"1032"},"tables":{"@attributes":{"id":"TABLE-US-00065","num":"00065"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"if ((targetNumber < 1)||(targetNumber > TARGETS_PER_BLOCK))"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LocatedTargets[j] = NULL"]},{"entry":[{},"TargetsFound--"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"else"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LocatedTargets[j]-> TargetNumber = targetNumber"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"At the end of the change loop, the LocatedTargets list needs to be compacted and all NULL targets removed.","At the end of this procedure, there may be fewer targets. Whatever targets remain may now be used (at least 2 targets are required) to locate the clockmarks and the data region.","Building Clockmark Estimates from Targets","As shown previously in , the upper region's first clockmark dot  is 55 dots away from the center of the first target  (which is the same as the distance between target centers). The center of the clockmark dots is a further 1 dot away, and the black border line  is a further 4 dots away from the first clockmark dot. The lower region's first clockmark dot is exactly 7 targets-distance away (7\u00d755 dots) from the upper region's first clockmark dot .","It cannot be assumed that Targets  and  have been located, so it is necessary to use the upper-most and lower-most targets, and use the target numbers to determine which targets are being used. It is necessary at least 2 targets at this point. In addition, the target centers are only estimates of the actual target centers. It is to locate the target center more accurately. The center of a target is white, surrounded by black. We therefore want to find the local maximum in both pixel & column dimensions. This involves reconstructing the continuous image since the maximum is unlikely to be aligned exactly on an integer boundary (our estimate).","Before the continuous image can be constructed around the target's center, it is necessary to create a better estimate of the 2 target centers. The existing target centers actually are the top left coordinate of the bounding box of the target center. It is a simple process to go through each of the pixels for the area defining the center of the target, and find the pixel with the highest value. There may be more than one pixel with the same maximum pixel value, but the estimate of the center value only requires one pixel.","The pseudocode is straightforward, and is performed for each of the 2 targets:",{"@attributes":{"id":"p-0783","num":"1040"},"tables":{"@attributes":{"id":"TABLE-US-00066","num":"00066"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CENTER_WIDTH = CENTER_HEIGHT = 12"]},{"entry":[{},"maxPixel = 0x00"]},{"entry":[{},"for (i=0; i<CENTER_WIDTH; i++)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for (j=0; j<CENTER_HEIGHT; j++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"p = GetPixel(column+i, pixel+j)"]},{"entry":[{},"if (p > maxPixel)"]},{"entry":[{},"{"]},{"entry":[{},"maxPixel = p"]},{"entry":[{},"centerColumn = column + i"]},{"entry":[{},"centerPixel = pixel + j"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Target.Column = centerColumn"]},{"entry":[{},"Target.Pixel = centerPixel"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"At the end of this process the target center coordinates point to the whitest pixel of the target, which should be within one pixel of the actual center. The process of building a more accurate position for the target center involves reconstructing the continuous signal for 7 scanline slices of the target, 3 to either side of the estimated target center. The 7 maximum values found (one for each of these pixel dimension slices) are then used to reconstruct a continuous signal in the column dimension and thus to locate the maximum value in that dimension.",{"@attributes":{"id":"p-0785","num":"1042"},"tables":{"@attributes":{"id":"TABLE-US-00067","num":"00067"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Given estimates column and pixel, determine a"]},{"entry":[{},"\/\/ betterColumn and betterPixel as the center of"]},{"entry":[{},"\/\/ the target"]},{"entry":[{},"for (y=0; y<7; y++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for (x=0; x<7; x++)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"samples[x] = GetPixel(column\u22123+y, pixel\u22123+x)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FindMax(samples, pos, max Val)"]},{"entry":[{},"reSamples[y] = max Val"]},{"entry":[{},"if (y==3)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"betterPixel = pos + pixel"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"FindMax(reSamples, pos, max Val)"]},{"entry":[{},"betterColumn = pos + column"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"FindMax is a function that reconstructs the original 1 dimensional signal based sample points and returns the position of the maximum as well as the maximum value found. The method of signal reconstruction\/resampling used is the Lanczos3 windowed sinc function as shown in FIG. .","The Lanczos3 windowed sinc function takes 7 (pixel) samples from the dimension being reconstructed, centered around the estimated position X, i.e. at X\u22123, X\u22122, X\u22121, X, X+1, X+2, X+3. We reconstruct points from X\u22121 to X+1, each at an interval of 0.1, and determine which point is the maximum. The position that is the maximum value becomes the new center. Due to the nature of the kernel, only 6 entries are required in the convolution kernel for points between X and X+1. We use 6 points for X\u22121 to X, and 6 points for X to X+1, requiring 7 points overall in order to get pixel values from X\u22121 to X+1 since some of the pixels required are the same.","Given accurate estimates for the upper-most target from and lower-most target to, it is possible to calculate the position of the first clockmark dot for the upper and lower regions as follows:",{"@attributes":{"id":"p-0789","num":"1046"},"tables":{"@attributes":{"id":"TABLE-US-00068","num":"00068"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"TARGETS_PER_BLOCK = 6"},{"entry":"numTargetsDiff = to.TargetNum \u2212 from.TargetNum"},{"entry":"deltaPixel = (to.Pixel \u2212 from.Pixel)\/numTargetsDiff"},{"entry":"deltaColumn = (to.Column \u2212 from.Column)\/numTargetsDiff"},{"entry":"UpperClock.pixel = from.Pixel \u2212 (from.TargetNum*deltaPixel)"},{"entry":"UpperClock.column = from.Column\u2212(from.TargetNum*deltaColumn)"},{"entry":"\/\/ Given the first dot of the upper clockmark, the"},{"entry":"\/\/ first dot of the lower clockmark is straightforward."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["LowerClock.pixel","=","UpperClock.pixel","+"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"((TARGETS_PER_BLOCK+1) * deltaPixel)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["LowerClock.column","=","UpperClock.column","+"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"((TARGETS_PER_BLOCK+1) * deltaColumn)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This gets us to the first clockmark dot. It is necessary move the column position a further 1 dot away from the data area to reach the center of the clockmark. It is necessary to also move the pixel position a further 4 dots away to reach the center of the border line. The pseudocode values for deltaColumn and deltaPixel are based on a 55 dot distance (the distance between targets), so these deltas must be scaled by 1\/55 and 4\/55 respectively before being applied to the clockmark coordinates. This is represented as:\n\n","UpperClock and LowerClock are now valid clockmark estimates for the first clockmarks directly in line with the centers of the targets.","Setting Black and White Pixel\/Dot Ranges","Before the data can be extracted from the data area, the pixel ranges for black and white dots needs to be ascertained. The minimum and maximum pixels encountered during the search for targets were stored in WhiteMin and BlackMax respectively, but these do not represent valid values for these variables with respect to data extraction. They are merely used for storage convenience. The following pseudocode shows the method of obtaining good values for WhiteMin and BlackMax based on the min & max pixels encountered:\n\n","The ExtractingBitImage state is one where the data block has already been accurately located via the targets, and bit data is currently being extracted one dot column at a time and written to the alternative Artcard bit image. The following of data block clockmarks\/borders gives accurate dot recovery regardless of rotation, and thus the segment bounds are ignored. Once the entire data block has been extracted (597 columns of 48 bytes each; 595 columns of data+2 orientation columns new segment bounds are calculated for the next data block based on the current position. The state is changed to LookingForTargets.","Processing a given dot column involves two tasks:\n\n","These two tasks can only be undertaken if the data for the column has been read off the alternative Artcard and transferred to DRAM. This can be determined by checking what scanline Process 1 is up to, and comparing it to the clockmark columns. If the dot data is in DRAM we can update the clockmarks and then extract the data from the column before advancing the clockmarks to the estimated value for the next dot column. The process overview is given in the following pseudocode, with specific functions explained hereinafter:\n\n","A given dot column needs to be located before the dots can be read and the data extracted. This is accomplished by following the clockmarks\/borderline along the upper and lower boundaries of the data block. A software equivalent of a phase-locked-loop is used to ensure that even if the clockmarks have been damaged, good estimations of clockmark positions will be made.  illustrates an example data block's top left which corner reveals that there are clockmarks 3 dots high  extending out to the target area, a white row, and then a black border line.","Initially, an estimation of the center of the first black clockmark position is provided (based on the target positions). We use the black border  to achieve an accurate vertical position (pixel), and the clockmark eg.  to get an accurate horizontal position (column). These are reflected in the UpperClock and LowerClock positions.","The clockmark estimate is taken and by looking at the pixel data in its vicinity, the continuous signal is reconstructed and the exact center is determined. Since we have broken out the two dimensions into a clockmark and border, this is a simple one-dimensional process that needs to be performed twice. However, this is only done every second dot column, when there is a black clockmark to register against. For the white clockmarks we simply use the estimate and leave it at that. Alternatively, we could update the pixel coordinate based on the border each dot column (since it is always present). In practice it is sufficient to update both ordinates every other column (with the black clockmarks) since the resolution being worked at is so fine. The process therefore becomes:",{"@attributes":{"id":"p-0799","num":"1092"},"tables":{"@attributes":{"id":"TABLE-US-00069","num":"00069"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Turn the estimates of the clockmarks into accurate"},{"entry":"\/\/ positions only when there is a black clockmark"},{"entry":"\/\/ (ie every 2nd dot column, starting from \u22128)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["if (Bit0(CurrentDotColumn) == 0)","\/\/ even column"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DetermineAccurateUpperDotCenter()"]},{"entry":[{},"DetermineAccurateLowerDotCenter()"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"If there is a deviation by more than a given tolerance (MAX_CLOCKMARK_DEVIATION), the found signal is ignored and only deviation from the estimate by the maximum tolerance is allowed. In this respect the functionality is similar to that of a phase-locked loop. Thus DetermineAccurateUpperDotCenter is implemented via the following pseudocode:",{"@attributes":{"id":"p-0801","num":"1094"},"tables":{"@attributes":{"id":"TABLE-US-00070","num":"00070"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"357pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Use the estimated pixel position of"},{"entry":"\/\/ the border to determine where to look for"},{"entry":"\/\/ a more accurate clock center. The clockmark"},{"entry":"\/\/ is 3 dots high so even if the estimated position"},{"entry":"\/\/ of the border is wrong, it won't affect the"},{"entry":"\/\/ fixing of the clockmark position."},{"entry":"MAX_CLOCKMARK_DEVIATION = 0.5"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["diff","=","GetAccurateColumn(UpperClock.column,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"UpperClock.pixel+(3*PIXELS_PER_DOT))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"357pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"diff \u2212= UpperClock.column"},{"entry":"if (diff > MAX_CLOCKMARK_DEVIATION)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"343pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"diff = MAX_CLOCKMARK_DEVIATION"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"357pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"else"},{"entry":"if (diff < \u2212MAX_CLOCKMARK_DEVIATION)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"343pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"diff = \u2212MAX_CLOCKMARK_DEVIATION"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"357pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"UpperClock.column += diff"},{"entry":"\/\/ Use the newly obtained clockmark center to"},{"entry":"\/\/ determine a more accurate border position."},{"entry":"diff = GetAccuratePixel(UpperClock.column, UpperClock.pixel)"},{"entry":"diff \u2212= UpperClock.pixel"},{"entry":"if (diff > MAX_CLOCKMARK_DEVIATION)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"343pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"diff = MAX_CLOCKMARK_DEVIATION"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"357pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"else"},{"entry":"if (diff < \u2212MAX_CLOCKMARK_DEVIATION)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"343pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"diff = \u2212MAX_CLOCKMARK_DEVIATION"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"357pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"UpperClock.pixel += diff"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"DetermineAccurateLowerDotCenter is the same, except that the direction from the border to the clockmark is in the negative direction (\u22123 dots rather than +3 dots).","GetAccuratePixel and GetAccurateColumn are functions that determine an accurate dot center given a coordinate, but only from the perspective of a single dimension. Determining accurate dot centers is a process of signal reconstruction and then finding the location where the minimum signal value is found (this is different to locating a target center, which is locating the maximum value of the signal since the target center is white, not black). The method chosen for signal reconstruction\/resampling for this application is the Lanczos3 windowed sinc function as previously discussed with reference to FIG. .","It may be that the clockmark or border has been damaged in some way\u2014perhaps it has been scratched. If the new center value retrieved by the resampling differs from the estimate by more than a tolerance amount, the center value is only moved by the maximum tolerance. If it is an invalid position, it should be close enough to use for data retrieval, and future clockmarks will resynchronize the position.","Determining the Center of the First Data Dot and the Deltas to Subsequent Dots","Once an accurate UpperClock and LowerClock position has been determined, it is possible to calculate the center of the first data dot (CurrentDot), and the delta amounts to be added to that center position in order to advance to subsequent dots in the column (DataDelta).","The first thing to do is calculate the deltas for the dot column. This is achieved simply by subtracting the UpperClock from the LowerClock, and then dividing by the number of dots between the two points. It is possible to actually. multiply by the inverse of the number of dots since it is constant for an alternative Artcard, and multiplying is faster. It is possible to use different constants for obtaining the deltas in pixel and column dimensions. The delta in pixels is the distance between the two borders, while the delta in columns is between the centers of the two clockmarks. Thus the function DetermineDataInfo is two parts. The first is given by the pseudocode:\n\n","It is now possible to determine the center of the first data dot of the column. There is a distance of 2 dots from the center of the clockmark to the center of the first data dot, and 5 dots from the center of the border to the center of the first data dot. Thus the second part of the function is given by the pseudocode:\n\n","Since the dot column has been located from the phase-locked loop tracking the clockmarks, all that remains is to sample the dot column at the center of each dot down that column. The variable CurrentDot points is determined to the center of the first dot of the current column. We can get to the next dot of the column by simply adding DataDelta (2 additions: 1 for the column ordinate, the other for the pixel ordinate). A sample of the dot at the given coordinate (bi-linear interpolation) is taken, and a pixel value representing the center of the dot is determined. The pixel value is then used to determine the bit value for that dot. However it is possible to use the pixel value in context with the center value for the two surrounding dots on the same dot line to make a better bit judgement.","We can be assured that all the pixels for the dots in the dot column being extracted are currently loaded in DRAM, for if the two ends of the line (clockmarks) are in DRAM, then the dots between those two clockmarks must also be in DRAM. Additionally, the data block height is short enough (only 384 dots high) to ensure that simple deltas are enough to traverse the length of the line. One of the reasons the card is divided into 8 data blocks high is that we cannot make the same rigid guarantee across the entire height of the card that we can about a single data block.","The high level process of extracting a single line of data (48 bytes) can be seen in the following pseudocode. The dataBuffer pointer increments as each byte is stored, ensuring that consecutive bytes and columns of data are stored consecutively.",{"@attributes":{"id":"p-0812","num":"1113"},"tables":{"@attributes":{"id":"TABLE-US-00071","num":"00071"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bitCount = 8"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"curr = 0x00","\/\/ definitely black"]},{"entry":[{},"next = GetPixel(CurrentDot)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for (i=0; i < DOTS_PER_DATA_COLUMN; i++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CurrentDot += DataDelta"]},{"entry":[{},"prev = curr"]},{"entry":[{},"curr = next"]},{"entry":[{},"next = GetPixel(CurrentDot)"]},{"entry":[{},"bit = DetermineCenterDot(prev, curr, next)"]},{"entry":[{},"byte = (byte << 1) | bit"]},{"entry":[{},"bitCount--"]},{"entry":[{},"if (bitCount == 0)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"*(BitImage | CurrentByte) = byte"]},{"entry":[{},"CurrentByte++"]},{"entry":[{},"bitCount = 8"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The GetPixel function takes a dot coordinate (fixed point) and samples 4 CCD pixels to arrive at a center pixel value via bilinear interpolation.","The DetermineCenterDot function takes the pixel values representing the dot centers to either side of the dot whose bit value is being determined, and attempts to intelligently guess the value of that center dot's bit value. From the generalized blurring curve of  there are three common cases to consider:\n\n","The scheme used to determine a dot's value if the pixel value is between BlackMax and WhiteMin is not too complex, but gives good results. It uses the pixel values of the dot centers to the left and right of the dot in question, using their values to help determine a more likely value for the center dot:\n\n","The logic is represented by the following:",{"@attributes":{"id":"p-0817","num":"1124"},"tables":{"@attributes":{"id":"TABLE-US-00072","num":"00072"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["if (pixel < WhiteMin)","\/\/ definitely black"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bit = 0x01"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"else"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["if (pixel > BlackMax)","\/\/ definitely white"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bit = 0x00"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"else"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["if ((prev > MidRange) && (next> MidRange))","\/\/prob black"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bit = 0x01"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"else"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["if ((prev < MidRange) && (next < MidRange))","\/\/prob white"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bit = 0x00"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"else"},{"entry":"if (pixel < MidRange)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bit = 0x01"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"else"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bit = 0x00"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"From this one can see that using surrounding pixel values can give a good indication of the value of the center dot's state. The scheme described here only uses the dots from the same row, but using a single dot line history (the previous dot line) would also be straightforward as would be alternative arrangements.","Updating Clockmarks for the Next Column","Once the center of the first data dot for the column has been determined, the clockmark values are no longer needed. They are conveniently updated in readiness for the next column after the data has been retrieved for the column. Since the clockmark direction is perpendicular to the traversal of dots down the dot column, it is possible to use the pixel delta to update the column, and subtract the column delta to update the pixel for both clocks:\n\n","These are now the estimates for the next dot column.","Timing","The timing requirement will be met as long as DRAM utilization does not exceed 100%, and the addition of parallel algorithm timing multiplied by the algorithm DRAM utilization does not exceed 100%. DRAM, utilization is specified relative to Process1, which writes each pixel once in a consecutive manner, consuming 9% of the DRAM bandwidth.","The timing as described in this section, shows that the DRAM is easily able to cope with the demands of the alternative Artcard Reader algorithm. The timing bottleneck will therefore be the implementation of the algorithm in terms of logic speed, not DRAM access. The algorithms have been designed however, with simple architectures in mind, requiring a minimum number of logical operations for every memory cycle. From this point of view, as long as the implementation state machine or equivalent CPU\/DSP architecture is able to perform as described in the following sub-sections, the target speed will be met.","Locating the Targets","Targets are located by reading pixels within the bounds of a pixel column. Each pixel is read once at most. Assuming a run-length encoder that operates fast enough, the bounds on the location of targets is memory access. The accesses will therefore be no worse than the timing for Process 1, which means a 9% utilization of the DRAM bandwidth.","The total utilization of DRAM during target location (including Process1) is therefore 18%, meaning that the target locator will always be catching up to the alternative Artcard image sensor pixel reader. Processing the targets","The timing for sorting and checking the target numbers is trivial. The finding of better estimates for each of the two target centers involves 12 sets of 12 pixel reads, taking a total of 144 reads. However the fixing of accurate target centers is not trivial, requiring 2 sets of evaluations. Adjusting each target center requires 8 sets of 20 different Sentry convolution kernels. Thus this totals 8\u00d720\u00d76 multiply-accumulates=960. In addition, there are 7 sets of 7 pixels to be retrieved, requiring 49 memory accesses. The total number per target is therefore 144+960+49=1153, which is a same number of pixels in a column of pixels (1152). Thus each target evaluation consumes the time taken by otherwise processing a row of pixels. For two targets we effectively consume the time for 2 columns of pixels.","A target is positively identified on the fast pixel column after the target number. Since there are 2 dot columns before the orientation column, there are 6 pixel columns. The Target Location process effectively uses up the first of the pixel columns, but the remaining 5 pixel columns are not processed at all. Therefore the data area can be located in \u2156 of the time available without impinging on any other process time.","The remaining \u2157 of the time available is ample for the trivial task of assigning the ranges for black and white pixels, a task that may take a couple of machine cycles at most. Extracting data","There are two parts to consider in terms of timing:\n\n","Clockmarks and border values are only gathered every second dot column. However each time a clockmark estimate is updated to become more accurate, 20 different 6-entry convolution kernels must be evaluated. On average there are 2 of these per dot column (there are 4 every 2 dot-columns). Updating the pixel ordinate based on the border only requires 7 pixels from the same pixel scanline. Updating the column ordinate however, requires 7 pixels from different columns, hence different scanlines. Assuming worst case scenario of a cache miss for each scanline entry and 2 cache misses for the pixels in the same scanline, this totals 8 cache misses.","Extracting the dot information involves only 4 pixel reads per dot (rather than the average 9 that define the dot). Considering the data area of 1152 pixels (384 dots), at best this will save 72 cache reads by only reading 4 pixel dots instead of 9. The worst case is a rotation of 1\u00b0 which is a single pixel translation every 57 pixels, which gives only slightly worse savings.","It can then be safely said that, at worst, we will be reading fewer cache lines less than that consumed by the pixels in the data area. The accesses will therefore be no worse than the timing for Process 1, which implies a 9% utilization of the DRAM bandwidth.","The total utilization of DRAM during data extraction (including Process1) is therefore 18%, meaning that the data extractor will always be catching up to the alternative Artcard image sensor pixel reader. This has implications for the Process Targets process in that the processing of targets can be performed by a relatively inefficient method if necessary, yet still catch up quickly during the extracting data process.","Phase 2\u2014Decode Bit Image","Phase 2 is the non-real-time phase of alternative Artcard data recovery algorithm. At the start of Phase 2 a bit image has been extracted from the alternative Artcard. It represents the bits read from the data regions of the alternative Artcard. Some of the bits will be in error, and perhaps the entire data is rotated 180\u00b0 because the alternative Artcard was rotated when inserted. Phase 2 is concerned with reliably extracting the original data from this encoded bit image. There are basically 3 steps to be carried out as illustrated in FIG. :\n\n","Each of the 3 steps is defined as a separate process, and performed consecutively, since the output of one is required as the input to the next. It is straightforward to combine the first two steps into a single process, but for the purposes of clarity, they are treated separately here.","From a data\/process, perspective, Phase 2 has the structure as illustrated in FIG. .","The timing of Processes 1 and 2 are likely to be negligible, consuming less than 1\/1000of a second between them. Process 3 (Reed Solomon decode) consumes approximately 0.32 seconds, making this the total time required for Phase 2.","Reorganize the bit image, reversing it if necessary The bit map in DRAM now represents the retrieved data from the alternative Artcard. However the bit image is not contiguous. It is broken into 64 32 k chunks, one chunk for each data block. Each 32 k chunk contains only 28,656 useful bytes:\n\n","The 2 MB buffer used for pixel data (stored by Process 1 of Phase 1) can be used to hold the reorganized bit image, since pixel data is not required during Phase 2. At the end of the reorganization, a correctly oriented contiguous bit image will be in the 2 MB pixel buffer, ready for Reed-Solomon decoding.","If the card is correctly oriented, the leftmost Orientation Column will be white and the rightmost Orientation Column will be black. If the card has been rotated 180\u00b0, then the leftmost Orientation Column will be black and the rightmost Orientation Column will be white.","A simple method of determining whether the card is correctly oriented or not, is to go through each data block, checking the first and last 48 bytes of data until a block is found with an overwhelming ratio of black to white bits. The following pseudocode demonstrates this, returning TRUE if the card is correctly oriented, and FALSE if it is not:",{"@attributes":{"id":"p-0842","num":"1162"},"tables":{"@attributes":{"id":"TABLE-US-00073","num":"00073"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"totalCountL = 0"]},{"entry":[{},"totalCountR = 0"]},{"entry":[{},"for (i=0; i<64; i++)"]},{"entry":[{},"{"]},{"entry":[{},"blackCountL = 0"]},{"entry":[{},"blackCountR = 0"]},{"entry":[{},"currBuff = dataBuffer"]},{"entry":[{},"for (j=0; j<48; j++)"]},{"entry":[{},"{"]},{"entry":[{},"blackCountL += CountBits(*currBuff)"]},{"entry":[{},"currBuff++"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"currBuff += 28560"]},{"entry":[{},"for (j=0; j<48; j++)"]},{"entry":[{},"{"]},{"entry":[{},"blackCountR += CountBits(*currBuff)"]},{"entry":[{},"currBuff++"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dataBuffer += 32k"]},{"entry":[{},"if (blackCountR > (blackCountL * 4))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return TRUE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (blackCountL > (blackCountR * 4))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return FALSE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"totalCountL += blackCountL"]},{"entry":[{},"totalCountR += blackCountR"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return (totalCountR > totalCountL)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The data must now be reorganized, based on whether the card was oriented correctly or not. The simplest case is that the card is correctly oriented. In this case the data only needs to be moved around a little to remove the orientation columns and to make the entire data contiguous. This is achieved very simply in situ, as described by the following pseudocode:",{"@attributes":{"id":"p-0844","num":"1164"},"tables":{"@attributes":{"id":"TABLE-US-00074","num":"00074"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DATA_BYTES_PER_DATA_BLOCK = 28560"]},{"entry":[{},"to = dataBuffer"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"from = dataBuffer + 48)","\/\/ left orientation column"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"for (i=0; i<64; i++)"]},{"entry":[{},"{"]},{"entry":[{},"BlockMove(from, to, DATA_BYTES_PER_DATA_BLOCK)"]},{"entry":[{},"from += 32k"]},{"entry":[{},"to += DATA_BYTES_PER_DATA_BLOCK"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The other case is that the data actually needs to be reversed. The algorithm to reverse the data is quite simple, but for simplicity, requires a 256-byte table Reverse where the value of Reverse[N] is a bit-reversed N.",{"@attributes":{"id":"p-0846","num":"1166"},"tables":{"@attributes":{"id":"TABLE-US-00075","num":"00075"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"DATA_BYTES_PER_DATA_BLOCK = 28560"},{"entry":"to = outBuffer"},{"entry":"for (i=0; i<64; i++)"},{"entry":"{"},{"entry":"from = dataBuffer + (i * 32k)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["from += 48","\/\/ skip orientation column"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"from += DATA_BYTES_PER_DATA_BLOCK \u2212 1 \u2003\/\/ end of block"},{"entry":"for (j=0; j < DATA_BYTES_PER_DATA_BLOCK; j++)"},{"entry":"{"},{"entry":"*to++ = Reverse[*from]"},{"entry":"from--"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The timing for either process is negligible, consuming less than 1\/1000of a second:\n\n","The bit image is now 1,827,840 contiguous, correctly oriented, but scrambled bytes. The bytes must be unscrambled to create the 7,168 Reed-Solomon blocks, each 255 bytes long. The unscrambling process is quite straightforward, but requires a separate output buffer since the unscrambling cannot be performed in situ.  illustrates the unscrambling process conducted memory","The following pseudocode defines how to perform the unscrambling process:\n\n","The timing for this process is negligible, consuming less than 1\/1000of a second:\n\n","At the end of this process the unscrambled data is ready for Reed-Solomon decoding.","Reed Solomon decode","The final part of reading an alternative Artcard is the Reed-Solomon decode process, where approximately 2 MB of unscrambled data is decoded into approximately 1 MB of valid alternative Artcard data.","The algorithm performs the decoding one Reed-Solomon block at a time, and can (if desired) be performed in situ, since the encoded block is larger than the decoded block, and the redundancy bytes are stored after the data bytes.","The first 2 Reed-Solomon blocks are control blocks, containing information about the size of the data to be extracted from the bit image. This meta-information must be decoded first, and the resultant information used to decode the data proper. The decoding of the data proper is simply a case of decoding the data blocks one at a time. Duplicate data blocks can be used if a particular block fails to decode.","The highest level of the Reed-Solomon decode is set out in pseudocode:",{"@attributes":{"id":"p-0856","num":"1187"},"tables":{"@attributes":{"id":"TABLE-US-00076","num":"00076"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Constants for Reed Solomon decode"]},{"entry":[{},"sourceBlockLength = 255;"]},{"entry":[{},"destBlockLength = 127;"]},{"entry":[{},"numControlBlocks = 2;"]},{"entry":[{},"\/\/ Decode the control information"]},{"entry":[{},"if (! GetControlData(source, destBlocks, lastBlock))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return error"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"desBytes = ((destBlocks\u22121) * destBlockLength) + lastBlock"]},{"entry":[{},"offsetToNextDuplicate = destBlocks * sourceBlockLength"]},{"entry":[{},"\/\/ Skip the control blocks and position at data"]},{"entry":[{},"source += numControlBlocks * sourceBlockLength"]},{"entry":[{},"\/\/ Decode each of the data blocks, trying"]},{"entry":[{},"\/\/ duplicates as necessary"]},{"entry":[{},"blocksInError = 0;"]},{"entry":[{},"for (i=0; i<destBlocks; i++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"found = DecodeBlock(source, dest);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (! found)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"duplicate = source + offsetToNextDuplicate"]},{"entry":[{},"while ((! found) && (duplicate<sourceEnd))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"found = DecodeBlock(duplicate, dest)"]},{"entry":[{},"duplicate += offsetToNextDuplicate"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"if (! found)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"blocksInError++"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"source += sourceBlockLength"]},{"entry":[{},"dest += destBlockLength"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return destBytes and blocksInError"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"DecodeBlock is a standard Reed Solomon block decoder using m=8 and t=64.","The GetControlData function is straightforward as long as there are no decoding errors. The function simply calls DecodeBlock to decode one control block at a time until successful. The control parameters can then be extracted from the first 3 bytes of the decoded data (destblocks is stored in the bytes 0 and 1, and lastBlock is stored in byte 2). If there are decoding errors the function must traverse the 32 sets of 3 bytes and decide which is the most likely set value to be correct. One simple method is to find 2 consecutive equal copies of the 3 bytes, and to declare those values the correct ones. An alternative method is to count occurrences of the different sets of 3 bytes, and announce the most common occurrence to be the correct one.","The time taken to Reed-Solomon decode depends on the implementation. While it is possible to use a dedicated core to perform the Reed-Solomon decoding process (such as LSI Logic's L64712), it is preferable to select a CPU\/DSP combination that can be more generally used throughout the embedded system (usually to do something with the decoded data) depending on the application. Of course decoding time must be fast enough with the CPU\/DSP combination.","The L64712 has a throughput of 50 Mbits per second (around 6.25 MB per second), so the time is bound by the speed of the Reed-Solomon decoder rather than the maximum 2 MB read and 1 MB write memory access time. The time taken in the worst case (all 2 MB requires decoding) is thus 2\/6.25s=approximately 0.32 seconds. Of course, many further refinements are possible including the following:","The blurrier the reading environment, the more a given dot is influenced by the surrounding dots. The current reading algorithm of the preferred embodiment has the ability to use the surrounding dots in the same column in order to make a better decision about a dot's value. Since the previous column's dots have already been decoded, a previous column dot history could be useful in determining the value of those dots whose pixel values are in the not-sure range.","A different possibility with regard to the initial stage is to remove it entirely, make the initial bounds of the data blocks larger than necessary and place greater intelligence into the ProcessingTargets functions. This may reduce overall complexity. Care must be taken to maintain data block independence.","Further the control block mechanism can be made more robust:\n\n","The overall time taken to read the Artcard  and decode it is therefore approximately 2.15 seconds. The apparent delay to the user is actually only 0.65 seconds (the total of Phases 3 and 4), since the Artcard stops moving after 1.5 seconds.","Once the Artcard is loaded, the Artvark script must be interpreted, Rather than run the script immediately, the script is only run upon the pressing of the \u2018Print\u2019 button 13 (FIG. ). The taken to run the script will vary depending on the complexity of the script, and must be taken into account for the perceived delay between pressing the print button and the actual print button and the actual printing.","As noted previously, the VLIW processor  is a digital processing system that accelerates computationally expensive Vark functions. The balance of functions performed in software by the CPU core , and in hardware by the VLIW processor  will be implementation dependent. The goal of the VLIW processor  is to assist all Artcard styles to execute in a time that does not seem too slow to the user. As CPUs become faster and more powerful, the number of functions requiring hardware acceleration becomes less and less. The VLIW processor has a microcoded ALU sub-system that allows general hardware speed up of the following time-critical functions.\n\n","The following table summarizes the time taken for each Vark operation if implemented in the ALU model. The method of implementing the function using the ALU model is described hereinafter.",{"@attributes":{"id":"p-0868","num":"1215"},"tables":{"@attributes":{"id":"TABLE-US-00077","num":"00077"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"1500 * 1000 image"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Operation","Speed of Operation","1 channel","3 channels"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Image composite","1 cycle per output pixel","0.015 s","0.045 s"]},{"entry":["Image convolve","k\/3 cycles per output"]},{"entry":[{},"pixel"]},{"entry":[{},"(k = kernel size)"]},{"entry":[{},"3x3 convolve","0.045 s","0.135 s"]},{"entry":[{},"5x5 convolve","0.125 s","0.375 s"]},{"entry":[{},"7x7 convolve","0.245 s","0.735 s"]},{"entry":["Image warp","8 cycles per pixel","0.120 s","0.360 s"]},{"entry":["Histogram collect","2 cycles per pixel","0.030 s","0.090 s"]},{"entry":["Image Tessellate","\u2153 cycle per pixel","0.005 s","0.015 s"]},{"entry":["Image sub-pixel Translate","1 cycle per output pixel","\u2014","\u2014"]},{"entry":["Color lookup replace","\u00bd cycle per pixel","0.008 s","0.023"]},{"entry":["Color space transform","8 cycles per pixel","0.120 s","0.360 s"]},{"entry":["Convert CCD image to","4 cycles per output pixel","0.06 s","0.18 s"]},{"entry":"internal image (including"},{"entry":"color convert & scale)"},{"entry":["Construct imagepyramid","1 cycle per input pixel","0.015 s","0.045 s"]},{"entry":["Scale","Maximum of:","0.015 s","0.045 s (minimum)"]},{"entry":[{},"2 cycles per input pixel","(minimum)"]},{"entry":[{},"2 cycles per output pixel"]},{"entry":[{},"2 cycles per output pixel"]},{"entry":[{},"(scaled in X only)"]},{"entry":["Affine transform","2 cycles per output pixel","0.03 s","0.09 s"]},{"entry":["Brush rotate\/translate and","?"]},{"entry":"composite"},{"entry":["Tile Image","4-8 cycles per output","0.015 s to 0.030 s","0.060 s to 0.120 s to for"]},{"entry":[{},"pixel",{},"4 channels (Lab,"]},{"entry":[{},{},{},"texture)"]},{"entry":["Illuminate image","Cycles per pixel"]},{"entry":["Ambient only","\u00bd","0.008 s","0.023 s"]},{"entry":["Directional light","1","0.015 s","0.045 s"]},{"entry":["Directional (bm)","6","0.09 s","0.27 s"]},{"entry":["Omni light","6","0.09 s","0.27 s"]},{"entry":["Omni (bm)","9","0.137 s","0.41 s"]},{"entry":["Spotlight","9","0.137 s","0.41 s"]},{"entry":["Spotlight (bm)","12","0.18 s","0.54 s"]},{"entry":"(bm) = bumpmap"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"For example, to convert a CCD image, collect histogram & perform lookup-color replacement (for image enhancement) takes: 9+2+0.5 cycles per pixel, or 11.5 cycles. For a 1500\u00d71000 image that is 172,500,000, or approximately 0.2 seconds per component, or 0.6 seconds for all 3 components. Add a simple warp, and the total comes to 0.6+0.36, almost 1 second.","Image Convolver","A convolve is a weighted average around a center pixel. The average may be a simple sum, a sum of absolute values, the absolute value of a sum, or sums truncated at 0.","The image convolver is a general-purpose convolver, allowing a variety of functions to be implemented by varying the values within a variable-sized coefficient kernel. The kernel sizes supported are 3\u00d73, 5\u00d75 and 7\u00d77 only.","Turning now to , there is illustrated  an example of the convolution process. The pixel component values fed into the convolver process  come from a Box Read Iterator . The Iterator  provides the image data row by row, and within each row, pixel by pixel. The output from the convolver  is sent to a Sequential Write Iterator , which stores the resultant image in a valid image format.","A Coefficient Kernel  is a lookup table in DRAM. The kernel is arranged with coefficients in the same order as the Box Read Iterator . Each coefficient entry is 8 bits. A simple Sequential Read Iterator can be used to index into the kernel  and thus provide the coefficients. It simulates an image with ImageWidth equal to the kernel size, and a Loop option is set so that the kernel would continuously be provided.","One form of implementation of the convolve process on an ALU unit is as illustrated in FIG. . The following constants are set by software:",{"@attributes":{"id":"p-0875","num":"1222"},"tables":{"@attributes":{"id":"TABLE-US-00078","num":"00078"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","Kernel size (9, 25, or 49)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The control logic is used to count down the number of multiply\/adds per pixel. When the count (accumulated in Latch) reaches 0, the control signal generated is used to write out the current convolve value (from Latch) and to reset the count. In this way, one control logic block can be used for a number of parallel convolve streams.","Each cycle the multiply ALU can perform one multiply\/add to incorporate the appropriate part of a pixel. The number of cycles taken to sum up all the values is therefore the number of entries in the kernel. Since this is compute bound, it is appropriate to divide the image into multiple sections and process them in parallel on different ALU units.","On a 7\u00d77 kernel, the time taken for each pixel is 49 cycles, or 490 ns. Since each cache line holds 32 pixels, the time available for memory access is 12,740 ns. ((32\u22127+1)\u00d7490 ns). The time taken to read 7 cache lines and write  is worse case 1,120 ns (8*140 ns, all accesses to same DRAM bank). Consequently it is possible to process up to 10 pixels in parallel given unlimited resources. Given a limited number of ALUs it is possible to do at best 4 in parallel. The time taken to therefore perform the convolution using a 7\u00d77 kernel is 0.18375 seconds (1500*1000*490 ns\/4=183,750,000 ns).","On a 5\u00d75 kernel, the time taken for each pixel is 25 cycles, or 250 ns. Since each cache line holds 32 pixels, the time available for memory access is 7,000 ns. ((32\u22125+1)\u00d7250 ns). The time taken to read 5 cache lines and write  is worse case 840 ns (6*140 ns, all accesses to same DRAM bank). Consequently it is possible to process up to 7 pixels in parallel given unlimited resources. Given a limited number of ALUs it is possible to do at best 4. The time taken to therefore perform the convolution using a 5\u00d75 kernel is 0.09375 seconds (1500*1000*250 ns\/4=93,750,000 ns).","On a 3\u00d73 kernel, the time taken for each pixel is 9 cycles, or 90 ns. Since each cache line holds 32 pixels, the time available for memory access is 2,700 ns. ((32\u22123+1)\u00d790 ns). The time taken to read 3 cache lines and write  is worse case 560 ns (4*140 ns, all accesses to same DRAM bank). Consequently it is possible to process up to 4 pixels in parallel given unlimited resources. Given a limited number of ALUs and Read\/Write Iterators it is possible to do at best 4. The time taken to therefore perform the convolution using a 3\u00d73 kernel is 0.03375 seconds (1500*1000*90 ns\/4=33,750,000ns) Consequently each output pixel takes kernelsize\/3 cycles to compute. The actual timings are summarised in the following table:",{"@attributes":{"id":"p-0881","num":"1228"},"tables":{"@attributes":{"id":"TABLE-US-00079","num":"00079"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Time taken",{},"Time to Process"]},{"entry":[{},"to calculate","Time to process","3 channels at"]},{"entry":["Kernel size","output pixel","1 channel at 1500x1000","1500x1000"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3x3 (9)","3 cycles","0.045 seconds","0.135 seconds"]},{"entry":["5x5 (25)","8 \u2153 cycles","0.125 seconds","0.375 seconds"]},{"entry":["7x7 (49)","16 \u2153 cycles","0.245 seconds","0.735 seconds"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Compositing is to add a foreground image to a background image using a matte or a channel to govern the appropriate proportions of background and foreground in the final image. Two styles of compositing are preferably supported, regular compositing and associated compositing. The rules for the two styles are:",{"@attributes":{"id":"p-0883","num":"1230"},"tables":{"@attributes":{"id":"TABLE-US-00080","num":"00080"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Regular","new Value = Foreground + (Background \u2212 Foreground) a"]},{"entry":"composite:"},{"entry":["Associated","new value =\u2003Foreground + (1 \u2212 a) Background"]},{"entry":"composite:"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The difference then, is that with associated compositing, the foreground has been pre-multiplied with the matte, while in regular compositing it has not. An example of the compositing process is as illustrated in FIG. .","The alpha channel has values from 0 to 255 corresponding to the range 0 to 1.","Regular Composite","A regular composite is implemented as:\n\n",{"@attributes":{"id":"p-0887","num":"1236"},"tables":{"@attributes":{"id":"TABLE-US-00081","num":"00081"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","257"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Since 4 Iterators are required, the composite process takes 1 cycle per pixel, with a utilization of only half of the ALUs. The composite process is only run on a single channel. To composite a 3-channel image with another, the compositor must be run 3 times, once for each channel.","The time taken to composite a full size single channel is 0.015s (1500*1000*1*10 ns), or 0.045s to composite all 3 channels.","To approximate a divide by 255 it is possible to multiply by 257 and then divide by 65536. It can also be achieved by a single add (256*x+x) and ignoring (except for rounding purposes) the final 16 bits of the result.","As shown in , the compositor process requires 3 Sequential Read Iterators - and 1 Sequential Write Iterator , and is implemented as microcode using a Adder ALU in conjunction with a multiplier ALU. Composite time is 1 cycle (10 ns) per-pixel. Different microcode is required for associated and regular compositing, although the average time per pixel composite is the same.","The composite process is only run on a single channel. To composite one 3-channel image with another, the compositor must be run 3 times, once for each channel. As the a channel is the same for each composite, it must be read each time. However it should be noted that to transfer (read or write) 4\u00d732 byte cache-lines in the best case takes 320 ns. The pipeline gives an average of 1 cycle per pixel composite, taking 32 cycles or 320 ns (at 100 MHz) to composite the 32 pixels, so the a channel is effectively read for free. An entire channel can therefore be composited in:\n\n1500\/32*1000*320 ns=15,040,000 ns=0.015 seconds.\n","The time taken to composite a full size 3 channel image is therefore 0.045 seconds.","Construct Image Pyramid","Several functions, such as warping, tiling and brushing, require the average value of a given area of pixels. Rather than calculate the value for each area given, these functions preferably make use of an image pyramid. As illustrated previously in , an image pyramid 360 is effectively a multi-resolution pixelmap. The original image is a 1:1 representation. Sub-sampling by 2:1 in each dimension produces an image \u00bc the original size. This process continues until the entire image is represented by a single pixel.","An image pyramid is constructed from an original image, and consumes \u2153 of the size taken up by the original image (\u00bc+ 1\/16+ 1\/64+ . . . ). For an original image of 1500\u00d71000 the corresponding image pyramid is approximately \u00bd MB","The image pyramid can be constructed via a 3\u00d73 convolve performed on 1 in 4 input image pixels advancing the center of the convolve kernel by 2 pixels each dimension. A 3\u00d73 convolve results in higher accuracy than simply averaging 4 pixels, and has the added advantage that coordinates on different pyramid levels differ only by shifting 1 bit per level.","The construction of an entire pyramid relies on a software loop that calls the pyramid level construction function once for each level of the pyramid.","The timing to produce 1 level of the pyramid is 9\/4*\u00bc of the resolution of the input image since we are generating an image \u00bc of the size of the original. Thus for a 1500\u00d71000 image:\n\n","Etc.","The total time is \u00be cycle per original image pixel (image pyramid is \u2153 of original image size, and each pixel takes 9\/4 cycles to be calculated, i.e. \u2153* 9\/4=\u00be). In the case of a 1500\u00d71000 image is 1,125,000 cycles (at 100 MHz), or 0.011 seconds. This timing is for a single color channel, 3 color channels require 0.034 seconds processing time.","General Data Driven Image Warper","The ACP  is able to carry out image warping manipulations of the input image. The principles of image warping are well-known in theory. One thorough text book reference on the process of warping is \u201cDigital Image Warping\u201d by George Wolberg published in 1990 by the WEE Computer Society Press, Los Alamitos, Calif. The warping process utilizes a warp map which forms part of the data fed in via Artcard . The warp map can be arbitrarily dimensioned in accordance with requirements and provides information of a mapping of input pixels to output pixels. Unfortunately, the utilization of arbitrarily sized warp maps presents a number of problems which must be solved by the image warper.","Turning to , a warp map , having dimensions A\u00d7B comprises array values of a certain magnitude (for example 8 bit values from 0-255) which set out the coordinate of a theoretical input image which maps to the corresponding \u201ctheoretical\u201d output image having the same array coordinate indices. Unfortunately, any output image eg. 366 will have its own dimensions C\u00d7D which may further be totally different from an input image which may have its own dimensions E\u00d7F. Hence, it is necessary to facilitate the remapping of the warp map  so that it can be utilised for output image  to determine, for each output pixel, the corresponding area or region of the input image  from which the output pixel color data is to be constructed. For each output pixel in output image  it is necessary to first determine a corresponding warp map value from warp map . This may include the need to bilinearly interpolate the surrounding warp map values when an output image pixel maps to a fractional position within warp map table . The result of this process will give the location of an input image pixel in a \u201ctheoretical\u201d image which will be dimensioned by the size of each data value within the warp map . These values must be re-scaled so as to map the theoretical image to the corresponding actual input image .","In order to determine the actual value and output image pixel should take so as to avoid aliasing effects, adjacent output image pixels should be examined to determine a region of input image pixels  which will contribute to the final output image pixel value. In this respect, the image pyramid is utilised as will become more apparent hereinafter.","The image warper performs several tasks in order to warp an image.\n\n","As noted previously, in a data driven warp, there is the need for a warp map that describes, for each output pixel, the center of a corresponding input image map. Instead of having a single warp map as previously described, containing interleaved x and y value information, it is possible to treat the X and Y coordinates as separate channels.","Consequently, preferably there are two warp maps: an X warp map showing the warping of X coordinates, and a Y warp map, showing the warping of the Y coordinates. As noted previously, the warp map  can have a different spatial, resolution than the image they being scaled (for example a 32\u00d732 warp-map  may adequately describe a warp for a 1500\u00d71000 image ). In addition, the warp maps can be represented by 8 or 16 bit values that correspond to the size of the image being warped.","There are several steps involved in producing points in the input image space from a given warp map:\n\n","The first step can be accomplished by multiplying the current X\/Y coordinate in the output image by a scale factor (which can be different in X & Y). For example, if the output image was 1500\u00d71000, and the warp map was 150\u00d7100, we scale both X & Y by 1\/10.","Fetching the values from the warp map requires access to 2 Lookup tables. One Lookup table indexes into the X warp-map, and the other indexes into the Y warp-map. The lookup table either reads 8 or 16 bit entries from the lookup table, but always returns 16 bit values (clearing the high 8 bits if the original values are only 8 bits).","The next step in the pipeline is to bi-linearly interpolate the looked-up warp map values.","Finally the result from the bi-linear interpolation is scaled to place it in the same domain as the image to be warped. Thus, if the warp map range was 0-255, we scale X by 1500\/255, and Y by 1000\/255.","The interpolation process is as illustrated in  with the following constants set by software:",{"@attributes":{"id":"p-0913","num":"1272"},"tables":{"@attributes":{"id":"TABLE-US-00082","num":"00082"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","Xscale (scales 0-ImageWidth to 0-WarpmapWidth)"]},{"entry":[{},"K","Yscale (scales 0-ImageHeight to 0-WarpmapHeight)"]},{"entry":[{},"K","Xrangescale (scales warpmap range (eg 0-255)"]},{"entry":[{},{},"to 0-ImageWidth)"]},{"entry":[{},"K","YrangeScale (scales warpmap range (eg 0-255)"]},{"entry":[{},{},"to 0-ImageHeight)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following lookup table is used:",{"@attributes":{"id":"p-0915","num":"1274"},"tables":{"@attributes":{"id":"TABLE-US-00083","num":"00083"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Lookup","Size","Details"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LUand","Warpmap Width x","Warpmap lookup."]},{"entry":["LU","Warpmap Height","Given [X,Y] the entries required for"]},{"entry":[{},{},"bi-linear interpolation are returned. Even if"]},{"entry":[{},{},"entries are only 8 bit, they are returned"]},{"entry":[{},{},"as 16 bit (high 8 bits 0)."]},{"entry":[{},{},"Transfer time is 4 entries at 2 bytes per"]},{"entry":[{},{},"entry. Total time is 8 cycles as 2 lookups"]},{"entry":[{},{},"are used."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The points from the warp map  locate centers of pixel regions in the input image . The distance between input image pixels of adjacent output image pixels will indicate the size of the regions, and this distance can be approximated via a span calculation.","Turning to , for a given current point in the warp map P, the previous point on the same line is called P, and the previous line's point at the same position is called P. We determine the absolute distance in X & Y between P and P, and between P and P. The maximum distance in X or Y becomes the span which will be a square approximation of the actual shape.","Preferably, the points are processed in a vertical strip output order, P is the previous point on the same line within a strip, and when P is the first point on line within a strip, then P refers to the last point in the previous strip's corresponding line. P the previous line's point in the same strip, so it can be kept in a 32-entry history buffer. The basic of the calculate span process are as illustrated in  with the details of the process as illustrated in FIG. .",{"@attributes":{"id":"p-0919","num":"1278"},"tables":{"@attributes":{"id":"TABLE-US-00084","num":"00084"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Lookup","Size","Details"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["FIFO","8 ImageWidth bytes.","P2 history\/lookup (both X & Y in same"]},{"entry":[{},"[ImageWidth","FIFO) P1 is put into the FIFO and"]},{"entry":[{},"x 2 entries at","taken out again at the same pixel on"]},{"entry":[{},"32 bits per entry]","the following row as P2. Transfer time"]},{"entry":[{},{},"is 4 cycles (2 x 32 bits, with 1 cycle"]},{"entry":[{},{},"per 16 bits)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Since a 32 bit precision span history is kept, in the case of a 1500 pixel wide image being warped 12,000 bytes temporary storage is required.","Calculation of the span  uses 2 Adder ALUs (1 for span calculation, 1 for looping and counting for P and P histories) takes 7 cycles as follows:",{"@attributes":{"id":"p-0922","num":"1281"},"tables":{"@attributes":{"id":"TABLE-US-00085","num":"00085"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Cycle","Action"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","A = ABS(P1\u2212 P2)"]},{"entry":[{},{},"Store P1in P2history"]},{"entry":[{},"2","B = ABS(P1\u2212 P0)"]},{"entry":[{},{},"Store P1in P0history"]},{"entry":[{},"3","A = MAX(A, B)"]},{"entry":[{},"4","B = ABS(P1\u2212 P2)"]},{"entry":[{},{},"Store P1in P2history"]},{"entry":[{},"5","A = MAX(A, B)"]},{"entry":[{},"6","B = ABS(P1\u2212 P0)"]},{"entry":[{},{},"Store P1in P2history"]},{"entry":[{},"7","A = MAX(A, B)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The history buffers ,  are cached DRAM. The \u2018Previous Line\u2019 (for P history) buffer  is 32 entries of span-precision. The \u2018Previous Point\u2019 (for P history). Buffer  requires 1 register that is used most of the time (for calculation of points  to  of a line in a strip), and a DRAM buffered set of history values to be used in the calculation of point  in a strip's line.","32 bit precision in span history requires 4 cache lines to hold P2 history, and  for P history. P's history is written and read out once every 8 lines of 32 pixels to a temporary storage space of (ImageHeight*4) bytes. Thus a 1500 pixel high image being warped requires 6000 bytes temporary storage, and a total of 6 cache lines.","Tri-linear Interpolation","Having determined the center and span of the area from the input image to be averaged, the final part of the warp process is to determine the value of the output pixel. Since a single output pixel could theoretically be represented by the entire input image, it is potentially too time-consuming to actually read and average the specific area of the input image contributing to the output pixel. Instead, it is possible to approximate the pixel value by using an image pyramid of the input image.","If the span is 1 or less, it is necessary only to read the original image's pixels around the given coordinate, and perform bi-linear interpolation. If the span is greater than 1, we must read two appropriate levels of the image pyramid and perform tri-linear interpolation. Performing linear interpolation between two levels of the image pyramid is not strictly correct, but gives acceptable results (it errs on the side of blurring the resultant image).","Turning to , generally speaking, for a given span \u2018s\u2019, it is necessary to read image pyramid levels given by lns () and lns+1 (). Lns is simply decoding the highest set bit of s. We must bi-linear interpolate to determine the value for the pixel value on each of the two levels ,  of the pyramid, and then interpolate between levels.","As shown in , it is necessary to first interpolate in X and Y for each pyramid level before interpolating between the pyramid levels to obtain a final output value .","The image pyramid address mode issued to generate addresses for pixel coordinates at (x, y) on pyramid level s & s+1. Each level of the image pyramid contains pixels sequential in x. Hence, reads in x are likely to be cache hits.","Reasonable cache coherence can be obtained as local regions in the output image are typically locally coherent in the input image (perhaps at a different scale however, but coherent within the scale). Since it is not possible to know the relationship between the input and output images, we ensure that output pixels are written in a vertical strip (via a Vertical-Strip Iterator) in order to best make use of cache coherence.","Tri-linear interpolation can be completed in as few as 2 cycles on average using 4 multiply ALUs and all 4 adder ALUs as a pipeline and assuming no memory access required. But since all the interpolation values are derived from the image pyramids, interpolation speed is completely dependent on cache coherence (not to mention the other units are busy doing warp-map scaling and span calculations). As many cache lines as possible should therefore be available to the image-pyramid reading. The best speed will be 8 cycles, using 2 Multiply ALUs.","The output pixels are written out to the DRAM via a Vertical-Strip Write Iterator that uses 2 cache lines. The speed is therefore limited to a minimum of 8 cycles per output pixel. If the scaling of the warp map requires 8 or fewer cycles, then the overall speed will be unchanged. Otherwise the throughput is the time taken to scale the warp map. In most cases the warp map will be scaled up to match the size of the photo.","Assuming a warp map that requires 8 or fewer cycles per pixel to scale, the time taken to convert a single color component of image is therefore 0.12s (1500*1000*8 cycles*10 ns per cycle).","Histogram Collector","The histogram collector is a microcode program that takes an image channel as input, and produces a histogram as output. Each of a channel's pixels has a value in the range 0-255. Consequently there are 256 entries in the histogram table, each entry 32 bits\u2014large enough to contain a count of an entire 1500\u00d71000 image.","As shown in , since the histogram represents a summary of the entire image, a Sequential Read Iterator  is sufficient for the input. The histogram itself can be completely cached, requiring 32 cache lines (1K).","The microcode has two passes: an initialization pass which sets all the counts to zero, and then a \u201ccount\u201d stage that increments the appropriate counter for each pixel read from the image. The first stage requires the Address Unit and a single Adder ALU, with the address of the histogram table  for initialising.",{"@attributes":{"id":"p-0937","num":"1296"},"tables":{"@attributes":{"id":"TABLE-US-00086","num":"00086"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Relative",{},{}]},{"entry":["Microcode","Address Unit",{}]},{"entry":["Address","A = Base address of histogram","Adder Unit 1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Write 0 to","Out1 = A"]},{"entry":[{},"A + (Adder1.Out1 << 2)","A = A \u2212 1"]},{"entry":[{},{},"BNZ 0"]},{"entry":["1","Rest of processing","Rest of processing"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The second stage processes the actual pixels from the image, and uses 4 Adder ALUs:",{"@attributes":{"id":"p-0939","num":"1298"},"tables":{"@attributes":{"id":"TABLE-US-00087","num":"00087"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]},{"entry":[{},"Adder 1","Adder 2","Adder 3","Adder 4","Address Unit"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","A = 0",{},{},"A = \u22121",{}]},{"entry":["2","Out1 = A","A = Adder1.Out1","A =","A = A + 1","Out1 = Read 4 bytes"]},{"entry":["BZ","A = pixel","Z = pixel \u2212","Adr.Out1",{},"from: (A +"]},{"entry":["2",{},"Adder1.Out1",{},{},"(Adder1.Out1 << 2))"]},{"entry":["3",{},"Out1 = A","Out1 = A","Out1 = A","Write Adder4.Out1 to:"]},{"entry":[{},{},{},{},"A =","(A + (Adder 2.Out << 2)"]},{"entry":[{},{},{},{},"Adder3.Out1"]},{"entry":["4",{},{},{},{},"Write Adder4.Out1 to:"]},{"entry":[{},{},{},{},{},"(A + (Adder 2.Out << 2)"]},{"entry":[{},{},{},{},{},"Flush caches"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"The Zero flag from Adder cycle  is used to stay at microcode address  for as long as the input pixel is the same. When it changes, the new count is written out in microcode address , and processing resumes at microcode address . Microcode address  is used at the end, when there are no more pixels to be read.","Stage 1 takes 256 cycles, or 2560 ns. Stage 2 varies according to the values of the pixels. The worst case time for lookup table replacement is 2 cycles per image pixel if every pixel is not the same as its neighbor. The time taken for a single color lookup is 0.03s (1500\u00d71000\u00d72 cycle per pixel\u00d710 ns per cycle=30,000,000 ns). The time taken for 3 color components is 3 times this amount, or 0.09s.","Color Transform","Color transformation is achieved in two main ways:\n\n","As illustrated in , one of the simplest ways to transform the color of a pixel is to encode an arbitrarily complex transform function into a lookup table . The component color value of the pixel is used to lookup  the new component value of the pixel. For each pixel read from a Sequential Read Iterator, its new value is read from the New Color Table , and written to a Sequential Write Iterator . The input image can be processed simultaneously in two halves to make effective use of memory bandwidth. The following lookup table is used:",{"@attributes":{"id":"p-0944","num":"1305"},"tables":{"@attributes":{"id":"TABLE-US-00088","num":"00088"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Lookup","Size","Details"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LU","256 entries","Replacement[X]"]},{"entry":[{},"8 bits per entry","Table indexed by the 8 highest significant bits"]},{"entry":[{},{},"of X."]},{"entry":[{},{},"Resultant 8 bits treated as fixed point 0:8"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The total process requires 2 Sequential Read Iterators and 2 Sequential Write iterators. The 2 New Color Tables require 8 cache lines each to hold the 256 bytes (256 entries of 1 byte):","The average time for lookup table replacement is therefore \u00bd cycle per image pixel. The time taken for a single color lookup is 0.0075s (1500\u00d71000\u00d7\u00bd cycle per pixel\u00d710 ns per cycle=7,500,000 ns). The time taken for 3 color components is 3 times this amount, or 0.0225s. Each color component has to be processed one after the other under control of software.","Color Space Conversion","Color Space conversion is only required when moving between color spaces. The CCD images are captured in RGB color space, and printing occurs in CMY color space, while clients of the ACP  likely process images in the Lab color space. All of the input color space channels are typically required as input to determine each output channel's component value. Thus the logical process is as illustrated  in FIG. .","Simply, conversion between Lab, RGB, and CMY is fairly straightforward. However the individual color profile of a particular device can vary considerably. Consequently, to allow future CCDs, inks, and printers, the ACP  performs color space conversion by means of tri-linear interpolation from color space conversion lookup tables.","Color coherence tends to be area based rather than line based. To aid cache coherence during tri-linear interpolation lookups, it is best to process an image in vertical strips. Thus the read - and write  iterators would be Vertical-Strip Iterators.","Tri-linear Color Space Conversion","For each output color component, a single 3D table mapping the input color space to the output color component is required. For example, to convert CCD images from RGB to Lab, 3 tables calibrated to the physical characteristics of the CCD are required:\n\n","To convert from Lab to CMY, 3 tables calibrated to the physical characteristics of the ink\/printer are required:\n\n","The 8-bit input color components are treated as fixed-point numbers (3:5) in order to index into the conversion tables. The 3 bits of integer give the index, and the 5 bits of fraction are used for interpolation. Since 3 bits gives 8 values, 3 dimensions gives 512 entries (8\u00d78\u00d78). The size of each entry is 1 byte, requiring 512 bytes per table.","The Convert Color Space process can therefore be implemented as shown in FIG.  and the following, lookup table is used:",{"@attributes":{"id":"p-0954","num":"1321"},"tables":{"@attributes":{"id":"TABLE-US-00089","num":"00089"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Lookup","Size","Details"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LU","8 x 8 x 8 entries","Convert[X, Y, Z]"]},{"entry":[{},"512 entries","Table indexed by the 3 highest bits of X, Y,"]},{"entry":[{},"8 bits per entry","and Z."]},{"entry":[{},{},"8 entries returned from Tri-linear index"]},{"entry":[{},{},"address unit"]},{"entry":[{},{},"Resultant 8 bits treated as fixed point 8:0"]},{"entry":[{},{},"Transfer time is 8 entries at 1 byte per entry"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Tri-linear interpolation returns interpolation between 8 values. Each 8 bit value takes 1 cycle to be returned from the lookup, for a total of 8 cycles. The tri-linear interpolation also takes 8 cycles when 2 Multiply ALUs are used per cycle. General tri-linear interpolation information is given in the ALU section of this document. The 512 bytes for the lookup table fits in 16 cache lines.","The time taken to convert a single color component of image is therefore 0.105s (1500*1000*7 cycles*10 ns per cycle). To convert 3 components takes 0.415s. Fortunately, the color space conversion for printout takes place on the fly during printout itself, so is not a perceived delay.","If color components are converted separately, they must not overwrite their input color space components since all color components from the input color space are required for converting each component.","Since only 1 multiply unit is used to perform the interpolation, it is alternatively possible to do the entire Lab->CMY conversion as a single pass. This would require 3 Vertical-Strip Read Iterators, 3 Vertical-Strip Write Iterators, and access to 3 conversion tables simultaneously. In that case, it is possible to write back onto the input image and thus use no extra memory. However, access to 3 conversion tables equals \u2153 of the caching for each, that could lead to high latency for the overall process.","Affine Transform","Prior to compositing an image with a photo, it may be necessary to rotate, scale and translate it. If the image is only being translated, it can be faster to use a direct sub-pixel translation function. However, rotation, scale-up and translation can all be incorporated into a single affine transform.","A general affine transform can be included as an accelerated function. Affine transforms are limited to 2D, and if scaling down, input images should be pre-scaled via the Scale function. Having a general affine transform function allows an output image to be constructed one block at a time, and can reduce the time taken to perform a number of transformations on an image since all can be applied at the same time.","A transformation matrix needs to be supplied by the client\u2014the matrix should be the inverse matrix of the transformation desired i.e. applying the matrix to the output pixel coordinate will give the input coordinate.","A 2D matrix is usually represented as a 3\u00d73 array:",{"@attributes":{"id":"p-0963","num":"1330"},"tables":{"@attributes":{"id":"TABLE-US-00090","num":"00090"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[a b 0]"]},{"entry":[{},"[c d 0]"]},{"entry":[{},"[e f 1]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Since the 3column is always[0, 0, 1] clients do not need to specify it. Clients instead specify a, b, c, d, e, and f.","Given a coordinate in the output image (x, y) whose top left pixel coordinate is given as. (0, 0), the input coordinate is specified by: (ax+cy+e, bx+dy+f). Once the input coordinate is determined, the input image is sampled to arrive at the pixel value. Bi-linear interpolation of input image pixels is used to determine the value of the pixel at the calculated coordinate. Since affine transforms preserve parallel lines, images are processed in output vertical strips of 32 pixels wide for best average input image cache coherence.","Three Multiply ALUs are required to perform the bi-linear interpolation in 2 cycles. Multiply ALUs  and  do linear interpolation in X for lines Y and Y+1 respectively, and Multiply ALU  does linear interpolation in Y between the values output by Multiply ALUs  and .","As we move to the right across an output line in X, 2 Adder ALUs calculate the actual input image coordinates by adding \u2018a\u2019 to the current X value, and \u2018b\u2019 to the current Y value respectively. When we advance to the next line (either the next line in a vertical strip after processing a maximum of 32 pixels, or to the first line in a new vertical strip) we update X and Y to pre-calculated start coordinate values constants for the given block.","The process for calculating an input coordinate is given in  where the following constants are set by software:","Calculate Pixel","Once we have the input image coordinates, the input image must be sampled. A lookup table is used to return the values at the specified coordinates in readiness for bilinear interpolation. The basic process is as indicated in FIG.  and the following lookup table is used:",{"@attributes":{"id":"p-0970","num":"1337"},"tables":{"@attributes":{"id":"TABLE-US-00091","num":"00091"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Lookup","Size","Details"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LU","Image","Bilinear Image lookup [X, Y]"]},{"entry":[{},"width by","Table indexed by the integer part of X and Y."]},{"entry":[{},"Image","4 entries returned from Bilinear index address unit,"]},{"entry":[{},"height","2 per cycle."]},{"entry":[{},"8 bits per","Each 8 bit entry treated as fixed point 8:0"]},{"entry":[{},"entry","Transfer time is 2 cycles (2 16 bit entries in FIFO"]},{"entry":[{},{},"hold the 4 8 bit entries)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The affine transform requires all 4 Multiply Units and all 4 Adder ALUs, and with good cache coherence can perform an affine transform with an average of 2 cycles per output pixel. This timing assumes good cache coherence, which is true for non-skewed images. Worst case timings are severely skewed images, which meaningful Vark scripts are unlikely to contain.","The time taken to transform a 128\u00d7128 image is therefore 0.00033 seconds (32,768 cycles). If this is a clip image with4 channels (including a channel), the total time taken is 0.00131 seconds (131,072 cycles).","A Vertical-Strip Write Iterator is required to output the pixels. No Read Iterator is required. However, since the affine transform accelerator is bound by time taken to access input image pixels, as many cache lines as possible should be allocated to the read of pixels from the input image. At least 32 should be available, and preferably 64 or more.","Scaling","Scaling is essentially a re-sampling of an image. Scale up of an image can be performed using the Affine Transform function. Generalized scaling of an image, including scale down, is performed by the hardware accelerated Scale function. Scaling is performed independently in X and Y, so different scale factors can be used in each dimension.","The generalized scale unit must match the Affine Transform scale function in terms of registration. The generalized scaling process is as illustrated in FIG. . The scale in X is accomplished by Fant's re-sampling algorithm as illustrated in FIG. .","Where the following constants are set by software:",{"@attributes":{"id":"p-0977","num":"1344"},"tables":{"@attributes":{"id":"TABLE-US-00092","num":"00092"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Constant","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["K","Number of input pixels that contribute to an output pixel in X"]},{"entry":["K","1\/K"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following registers are used to hold temporary variables:",{"@attributes":{"id":"p-0979","num":"1346"},"tables":{"@attributes":{"id":"TABLE-US-00093","num":"00093"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Variable","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Latch","Amount of input pixel remaining unused (starts at 1 and"]},{"entry":[{},"decrements)"]},{"entry":["Latch","Amount of input pixels remaining to contribute to current"]},{"entry":[{},"output pixel (starts at K"]},{"entry":["Latch","Next pixel (in X)"]},{"entry":["Latch","Current pixel"]},{"entry":["Latch","Accumulator for output pixel (unscaled)"]},{"entry":["Latch","Pixel Scaled in X (output)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The Scale in Y process is illustrated in FIG.  and is also accomplished by a slightly altered version of Fant's re-sampling algorithm to account for processing in order of X pixels.","Where the following constants are set by software:",{"@attributes":{"id":"p-0982","num":"1349"},"tables":{"@attributes":{"id":"TABLE-US-00094","num":"00094"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Constant","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["K","Number of input pixels that contribute to an output pixel in Y"]},{"entry":["K","1\/K"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following registers are used to hold temporary variables:",{"@attributes":{"id":"p-0984","num":"1351"},"tables":{"@attributes":{"id":"TABLE-US-00095","num":"00095"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Variable","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Latch","Amount of input pixel remaining unused (starts at 1 and"]},{"entry":[{},"decrements)"]},{"entry":["Latch","Amount of input pixels remaining to contribute to current"]},{"entry":[{},"output pixel (starts at Kand decrements)"]},{"entry":["Latch","Next pixel (in Y)"]},{"entry":["Latch","Current pixel"]},{"entry":["Latch","Pixel Scaled in Y (output)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following DRAM FIFOs are used:",{"@attributes":{"id":"p-0986","num":"1353"},"tables":{"@attributes":{"id":"TABLE-US-00096","num":"00096"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Lookup","Size","Details"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["FIFO","ImageWidthentries","1 row of image pixels already scaled"]},{"entry":[{},"8 bits per entry","in X"]},{"entry":[{},{},"1 cycle transfer time"]},{"entry":["FIFO","ImageWidthentries","1 row of image pixels already scaled"]},{"entry":[{},"16 bits per entry","in X"]},{"entry":[{},{},"2 cycles transfer time (1 byte per cycle)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Tessellation of an image is a form of tiling. It involves copying a specially designed \u201ctile\u201d multiple times horizontally and vertically into a second (usually larger) image space. When tessellated, the small tile forms a seamless picture. One example of this is a small tile of a section of a brick wall. It is designed so that when tessellated, it forms a full brick wall. Note that there is no scaling or sub-pixel translation involved in tessellation.","The most cache-coherent way to perform tessellation is to output the image sequentially line by line, and to repeat the same line of the input image for the duration of the line. When we finish the line, the input image must also advance to the next line (and repeat it multiple times across the output line).","An overview of the tessellation function is illustrated  in FIG. . The Sequential Read Iterator  is set up to continuously read a single line of the input tile (StartLine would be 0 and EndLine would be 1). Each input pixel is written to all 3 of the Write Iterators -. A counter  in an Adder ALU counts down the number of pixels in an output line, terminating the sequence at the end of the line.","At the end of processing a line, a small software routine updates the Sequential Read Iterator's StartLine and EndLine registers before restarting the microcode and the Sequential Read Iterator (which clears the FIFO and repeats line  of the tile). The Write Iterators - are not updated, and simply keep on writing out to their respective parts of the output image. The net effect is that the tile has one line repeated across an output line, and then the tile is repeated vertically too.","This process does not fully use the memory bandwidth since we get good cache coherence in the input image, but it does allow the tessellation to function with tiles of any size. The process uses 1 Adder ALU. If the 3 Write Iterators - each write to \u2153 of the image (breaking the image on tile sized boundaries), then the entire tessellation process takes place at an average speed of \u2153 cycle per output image pixel. For an image of 1500\u00d71000, this equates to 0.005 seconds (5,000,000 ns).","Sub-pixel Translator","Before compositing an image with a background, it may be necessary to translate it by a sub-pixel amount in both X and Y. Sub-pixel transforms can increase an image's size by 1 pixel in each dimension. The value of the region outside the image can be client determined, such as a constant value (e.g. black), or edge pixel replication. Typically it will be better to use black.","The sub-pixel translation process is as illustrated in FIG. . Sub-pixel translation in a given dimension is defined by:\n\nPixel=Pixel*(1-Translation)+Pixel*Translation\n","It can also be represented as a form of interpolation:\n\nPixel=Pixel+(Pixel\u2212Pixel)*Translation\n","Implementation of a single (on average) cycle interpolation engine using a single Multiply ALU and a single Adder ALU in conjunction is straightforward. Sub-pixel translation in both X & Y requires 2 interpolation engines.","In order to sub-pixel translate in Y, 2 Sequential Read Iterators ,  are required (one is reading a line ahead of the other from the same image), and a single Sequential Write Iterator  is required.","The first interpolation engine (interpolation in Y) accepts pairs of data from 2 streams, and linearly interpolates between them. The second interpolation engine (interpolation in X) accepts its data as a single 1 dimensional stream and linearly interpolates between values. Both engines interpolate in 1 cycle on average.","Each interpolation engine ,  is capable of performing the sub-pixel translation in 1 cycle per output pixel on average. The overall time is therefore 1 cycle per output pixel, with requirements of 2 Multiply ALUs and 2 Adder ALUs.","The time taken to output 32 pixels from the sub-pixel translate function is on average 320 ns (32 cycles). This is enough time for 4 full cache-line accesses to DRAM, so the use of 3 Sequential Iterators is well within timing limits.","The total time taken to sub-pixel translate an image is therefore 1 cycle per pixel of the output image. A typical image to be sub-pixel translated is a tile of size 128*128. The output image size is 129*129. The process takes 129*129*10 ns 166,410 ns.","The Image Tiler function also makes use of the sub-pixel translation algorithm, but does not require the writing out of the sub-pixel-translated data, but rather processes it further.","Image Tiler","The high level algorithm for tiling an image is carried out in software. Once the placement of the tile has been determined, the appropriate colored tile must be composited. The actual compositing of each tile onto an image is carried out in hardware via the microcoded ALUs. Compositing a tile involves both a texture application and a color application to a background image. In some cases it is desirable to compare the actual amount of texture added to the background in relation to the intended amount of texture, and use this to scale the color being applied. In these cases the texture must be applied first.","Since color application functionality and texture application functionality are somewhat independent, they are separated into sub-functions.","The number of cycles per 4-channel tile composite for the different texture styles and coloring styles is summarised in the following table:",{"@attributes":{"id":"p-1005","num":"1372"},"tables":{"@attributes":{"id":"TABLE-US-00097","num":"00097"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Pixel"]},{"entry":[{},"color","color"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Replace texture","4","4.75"]},{"entry":[{},"25% background + tile texture","4","4.75"]},{"entry":[{},"Average height algorithm","5","5.75"]},{"entry":[{},"Average height algorithm with feedback","5.75","6.5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"A tile is set to have either a constant color (for the whole tile), or takes each pixel value from an input image. Both of these cases may also have feedback from a texturing stage to scale the opacity (similar to thinning paint).","The steps for the 4 cases can be summarised as:\n\n","Each of the 4 cases is treated separately, in order to minimize the time taken to perform the function. The summary of time per color compositing style for a single color channel is described in the following table:",{"@attributes":{"id":"p-1009","num":"1380"},"tables":{"@attributes":{"id":"TABLE-US-00098","num":"00098"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"No feedback from","Feedback from"]},{"entry":[{},"texture (cycles per","texture"]},{"entry":["Tiling color style","pixel)","(cycles per pixel)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Tile has constant color per pixel","1","2"]},{"entry":["Tile has per pixel color from","1.25","2"]},{"entry":"input image"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In this case, the tile has a constant color, determined by software. While the ACP  is placing down one tile, the software can be determining the placement and coloring of the next tile.","The color of the tile can be determined by bi-linear interpolation into a scaled version of the image being tiled. The scaled version of the image can be created and stored in place of the image pyramid, and needs only to be performed once per entire tile operation. If the tile size is 128\u00d7128, then the image can be scaled down by 128:1 in each dimension.","Without Feedback","When there is no feedback from the texturing of a tile, the tile is simply placed at the specified coordinates. The tile color is used for each pixel's color, and the opacity for the composite comes from the tile's sub-pixel translated opacity channel. In this case color channels and the texture channel can be processed completely independently between tiling passes.","The overview of the process is illustrated in FIG. . Sub-pixel translation  of a tile can be accomplished using 2 Multiply ALUs and 2 Adder ALUs in an average time of 1 cycle per output pixel. The output from the sub-pixel translation is the mask to be used in compositing  the constant tile color  with the background image from background sequential Read Iterator.","Compositing can be performed using 1 Multiply ALU and 1 Adder ALU in an average time of 1 cycle per composite. Requirements are therefore 3 Multiply ALUs and 3 Adder ALUs. 4 Sequential Iterators - are required, taking 320 ns to read or write their contents. With an average number of cycles of 1 per pixel to sub-pixel translate and composite, there is sufficient time to read and write the buffers.","With Feedback","When there is feedback from the texturing of a tile, the tile is placed at the specified coordinates. The tile color is used for each pixel's color, and the opacity for the composite comes from the tile's sub-pixel translated opacity channel scaled by the feedback parameter. Thus the texture values must be calculated before the color value is applied.","The overview of the process is illustrated in FIG. . Sub-pixel translation of a tile can be accomplished using 2 Multiply ALUs and 2 Adder ALUs in an average time of 1 cycle per output pixel. The output from the sub-pixel translation is the mask to be scaled according to the feedback read from the Feedback Sequential Read Iterator . The feedback is passed it to a Scaler (1 Multiply ALU) .","Compositing  can be performed using 1 Multiply ALU and 1 Adder ALU in an average time of 1 cycle per composite. Requirements are therefore 4 Multiply ALUs and all 4 Adder ALUs. Although the entire process can be accomplished in 1 cycle on average, the bottleneck is the memory access, since 5 Sequential Iterators are required. With sufficient buffering, the average time is 1.25 cycles per pixel.","Color from Input Image","One way of coloring pixels in a tile is to take the color from pixels in an input image. Again, there are two possibilities for compositing: with and without feedback from the texturing.","Without Feedback","In this case, the tile color simply comes from the relative pixel in the input image. The opacity for compositing comes from the tile's opacity channel sub-pixel shifted.","The overview of the process is illustrated in FIG. . Sub-pixel translation  of a tile can be accomplished using 2 Multiply ALUs and 2 Adder ALUs in an average time of 1 cycle per output pixel. The output from the sub-pixel translation is the mask to be used in compositing  the tile's pixel color (read from the input image ) with the background image .","Compositing  can be performed using 1 Multiply ALU and 1 Adder ALU in an average time of 1 cycle per composite. Requirements are therefore 3 Multiply ALUs and 3 Adder ALUs. Although the entire process can be accomplished in 1 cycle on average, the bottleneck is the memory access, since 5 Sequential Iterators are required. With sufficient buffering, the average time is 1.25 cycles per pixel.","With Feedback","In this case, the tile color still comes from the relative pixel in the input image, but the opacity for compositing is affected by the relative amount of texture height actually applied during the texturing pass. This process is as illustrated in FIG. .","Sub-pixel translation  of a tile can be accomplished using 2 Multiply ALUs and 2 Adder ALUs in an average time of 1 cycle per output pixel. The output from the sub-pixel translation is the mask to be scaled  according to the feedback read from the Feedback Sequential Read Iterator . The feedback is passed to a Scaler (1 Multiply ALU) .","Compositing  can be performed using 1 Multiply ALU and 1 Adder ALU in an average time of 1 cycle per composite.","Requirements are therefore all 4 Multiply ALUs and 3 Adder ALUs. Although the entire process can be accomplished in 1 cycle on average, the bottleneck is the memory access, since 6 Sequential Iterators are required. With sufficient buffering, the average time is 1.5 cycles per pixel.","Tile Texturing","Each tile has a surface texture defined by its texture channel. The texture must be sub-pixel translated and then applied to the output image. There are 3 styles of texture compositing:\n\n","In addition, the Average height algorithm can save feedback parameters for color compositing.","The time taken per texture compositing style is summarised in the following table:",{"@attributes":{"id":"p-1029","num":"1403"},"tables":{"@attributes":{"id":"TABLE-US-00099","num":"00099"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Cycles per pixel","Cycles per pixel"]},{"entry":[{},"(no feedback from","(feedback from"]},{"entry":["Tiling color style","texture)","texture)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Replace texture","1","\u2014"]},{"entry":["25% background + tile texture","1","\u2014"]},{"entry":"value"},{"entry":["Average height algorithm","2","2"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In this instance, the texture from the tile replaces the texture channel of the image, as illustrated in FIG. . Sub-pixel translation  of a tile's texture can: be accomplished using 2 Multiply ALUs and 2 Adder ALUs in an average time of 1 cycle per output pixel. The output from this sub-pixel translation is fed directly to the Sequential Write Iterator .","The time taken for replace texture compositing is 1 cycle per pixel. There is no feedback, since 100% of the texture value is always applied to the background. There is therefore no requirement for processing the channels in any particular order.","25% Background+Tile's Texture","In this instance, the texture from the tile is added to 25% of the existing texture value. The new value must be greater than or equal to the original value. In addition, the new texture value must be clipped at 255 since the texture channel is only 8 bits. The process utilised is illustrated in FIG. .","Sub-pixel translation  of a tile's texture can be accomplished using 2 Multiply ALUs and 2 Adder ALUs in an average time of 1 cycle per output pixel. The output from this sub-pixel translation  is fed to an adder  where it is added to \u00bc  of the background texture value. Min and Max functions  are provided by the 2 adders not used for sub-pixel translation and the output written to a Sequential Write Iterator .","The time taken for this style of texture compositing is 1 cycle per pixel. There is no feedback, since 100% of the texture value is considered to have been applied to the background (even if clipping at 255 occurred). There is therefore no requirement for processing the channels in any particular order.","Average Height Algorithm","In this texture application algorithm, the average height under the tile is computed, and each pixel's height is compared to the average height. If the pixel's height is less than the average, the stroke height is added to the background height. If the pixel's height is greater than or equal to the average, then the stroke height is added to the average height. Thus background peaks thin the stroke. The height is constrained to increase by a minimum amount to prevent the background from thinning the stroke application to 0 (the minimum amount can be 0 however). The height is also clipped at 255 due to the 8-bit resolution of the texture channel.","There can be feedback of the difference in texture applied versus the expected amount applied. The feedback amount can be used as a scale factor in the application of the tile's color.","In both cases, the average texture is provided by software, calculated by performing a bi-level interpolation on a scaled version of the texture map. Software determines the next tile's average texture height while the current tile is being applied. Software must also provide the. minimum thickness for addition, which is typically constant for the entire tiling process.","Without Feedback","With no feedback, the texture is simply applied to the background texture, as shown in FIG. .","4 Sequential Iterators are required, which means that if the process can be pipelined for 1 cycle, the memory is fast enough to keep up.","Sub-pixel translation  of a tile's texture can be accomplished using 2 Multiply ALUs and 2 Adder ALUs in an average time of 1 cycle per output pixel. Each Min & Max function , requires a separate Adder ALU in order to complete the entire operation in 1 cycle. Since 2 are already used by the sub-pixel translation of the texture, there are not enough remaining for a 1 cycle average time.","The average time for processing 1 pixel's texture is therefore 2 cycles. Note that there is no feedback, and hence the color channel order of compositing is irrelevant.","With Feedback","This is conceptually the same as the case without feedback, except that in addition to the standard processing of the texture application algorithm, it is necessary to also record the proportion of the texture actually applied. The proportion can be used as a scale factor for subsequent compositing of the tile's color onto the background image. A flow diagram is illustrated in FIG.  and the following lookup table is used:",{"@attributes":{"id":"p-1043","num":"1417"},"tables":{"@attributes":{"id":"TABLE-US-00100","num":"00100"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Lookup","Size","Details"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LU","256 entries","1\/N"]},{"entry":[{},"16 bits per entry","Table indexed by N (range 0-255)"]},{"entry":[{},{},"Resultant 16 bits treated as fixed point 0:16"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Each of the 256 entries in the software provided 1\/N table  is 16 bits, thus requiring 16 cache lines to hold continuously.","Sub-pixel translation  of a tile's texture can be accomplished using 2 Multiply ALUs and 2 Adder ALUs in an average time of 1 cycle per output pixel. Each Min  & Max  function requires.a separate Adder ALU in order to complete the entire operation in 1 cycle. Since 2 are already used by the sub-pixel translation of the texture, there are not enough remaining for a 1 cycle average time.","The average time for processing 1 pixel's texture is therefore 2 cycles. Sufficient space must be allocated for the feedback data area (a tile sized image channel). The texture must be applied before the tile's color is applied, since the feedback is used in scaling the tile's opacity.","CCD Image Interpolator","Images obtained from the CCD via the ISI  () are 750\u00d7500 pixels. When the image is captured via the ISI, the orientation of the camera is used to rotate the pixels by 0, 90, 180, or 270 degrees so that the top of the image corresponds to \u2018up\u2019. Since every pixel only has an R, G, or B color component (rather than all 3), the fact that these have been rotated must be taken into account when interpreting the pixel values. Depending on the orientation of the camera, each 2\u00d72 pixel block has one of the configurations illustrated in FIG. :","Several processes need to be performed on the CCD captured image in order to transform it into a useful form for processing:\n\n","Color conversion from RGB to the internal color space\n\n","The entire channel of an image is required to be available at the same time in order to allow warping. In a low memory model (8 MB), there is only enough space to hold a single channel at full resolution as a temporary object. Thus the color conversion is to a single color channel. The limiting factor on the process is the color conversion, as it involves tri-linear interpolation from RGB to the internal color space, a process that takes 0.026 ns per channel (750\u00d7500\u00d77 cycles per pixel\u00d710 ns per cycle=26,250,000 ns).","It is important to perform the color conversion before scaling of the internal color space image as this reduces the number of pixels scaled (and hence the overall process time) by a factor of 4.","The requirements for all of the transformations may not fit in the ALU scheme. The transformations are therefore broken into two phases:\n\n","Separating out the scale function implies that the small color converted image must be in memory at the same time as the large one. The output from Phase 1 (0.5 MB) can be safely written to the memory area usually kept for the image pyramid (1 MB). The output from Phase 2 can be the general expanded CCD image. Separation of the scaling also allows the scaling to be accomplished by the Affine Transform, and also allows for a different CCD resolution that may not be a simple 1:2 expansion.","Phase 1: Up-interpolation of low-sample rate color components.","Each of the 3 color components (R, G, and B) needs to be up interpolated in order for color conversion to take place for a given pixel. We have 7 cycles to perform the interpolation per pixel since the color conversion takes 7 cycles.","Interpolation of G is straightforward and is illustrated in FIG. . Depending on orientation, the actual pixel value G alternates between odd pixels on odd lines & even pixels on even lines, and odd pixels on even lines & even pixels on odd lines. In both cases, linear interpolation is all that is required. Interpolation of R and B components as illustrated in FIG.  and , is more complicated, since in the horizontal and vertical directions, as can be seen from the diagrams, access to 3 rows of pixels simultaneously is required, so 3 Sequential Read Iterators are required, each one offset by a single row. In addition, we have access to the previous pixel on the same row via a latch for each row.","Each pixel therefore contains one component from the CCD, and the other 2 up-interpolated. When one component is being bi-linearly interpolated, the other is being linearly interpolated. Since the interpolation factor is a constant 0.5, interpolation can be calculated by an add and a shift 1 bit right (in 1 cycle), and bi-linear interpolation of factor 0.5 can be calculated by 3 adds and a shift 2 bits right (3 cycles). The total number of cycles required is therefore 4, using a single multiply ALU.",{"@attributes":{"id":"p-1058","num":"1437"},"figref":["FIG. 115","FIG. 116"]},"Color Conversion","Color space conversion from RGB to Lab is achieved using the same method as that described in the general Color Space Convert function, a process that takes 8 cycles per pixel. Phase 1 processing can be described with reference to FIG. .","The up-interpolate of the RGB takes 4 cycles (1 Multiply ALU), but the conversion of the color space takes 8 cycles per pixel (2 Multiply ALUs) due to the lookup transfer time.","Scaling the Image","This phase is concerned with up-interpolating the image from the CCD resolution (750\u00d7500) to the working photo resolution (1500\u00d71000). Scaling is accomplished by running the Affine transform with a scale of 1:2. The timing of a general affine transform is 2 cycles per output pixel, which in this case means an elapsed scaling time of 0.03 seconds.","Illuminate Image","Once an image has been processed, it can be illuminated by one or more light sources. Light sources can be:\n\n","The scene may also have an associated bump-map to cause reflection angles to vary. Ambient light is also optionally present in an illuminated scene.","In the process of accelerated illumination, we are concerned with illuminating one image channel by a single light source. Multiple light sources can be applied to a single image channel as multiple passes one pass per light source. Multiple channels can be processed one at a time with or without a bump-map.","The normal surface vector (N) at a pixel is computed from the bump-map if present. The default normal vector, in the absence of a bump-map, is perpendicular to the image plane i.e. N=[0, 0, 1].","The viewing vector V is always perpendicular to the image plane i.e. V=[0, 0, 1].","For a directional light source, the light source vector (L) from a pixel to the light source is constant across the entire image, so is computed once for the entire image. For an omni light source (at a finite distance), the light source vector is computed independently for each pixel.","A pixel's reflection of ambient light is. computed according to: IkO","A pixel's diffuse and specular reflection of a light source is computed according to the Phong model:\n\n()+()]\n","When the light source is at infinity, the light source intensity is constant across the image.","Each light source has three contributions per pixel\n\n","The light source can be defined using the following variables:",{"@attributes":{"id":"p-1073","num":"1458"},"tables":{"@attributes":{"id":"TABLE-US-00101","num":"00101"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"d","Distance from light source"]},{"entry":[{},"f","Attenuation with distance f= 1\/d]"]},{"entry":[{},"R","Normalised reflection vector [R = 2N(N.L) \u2212 L]"]},{"entry":[{},"I","Ambient light intensity"]},{"entry":[{},"I","Diffuse light coefficient"]},{"entry":[{},"k","Ambient reflection coefficient"]},{"entry":[{},"k","Diffuse reflection coefficient"]},{"entry":[{},"k","Specular reflection coefficient"]},{"entry":[{},"k","Specular color coefficient"]},{"entry":[{},"L","Normalised light source vector"]},{"entry":[{},"N","Normalised surface normal vector"]},{"entry":[{},"n","Specular exponent"]},{"entry":[{},"O","Object's diffuse color (i.e. image pixel color)"]},{"entry":[{},"O","Object's specular color (kO+ (1 \u2212 k)I)"]},{"entry":[{},"V","Normalised viewing vector [V = [0, 0, 1]]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The same reflection coefficients (k, k, k) are used for each color component.","A given pixel's value will be equal to the ambient contribution plus the sum of each light's diffuse and specular contribution.","Sub-Processes of Illumination Calculation","In order to calculate diffuse and specular contributions, a variety of other calculations are required. These are calculations of:\n\n","Sub-processes are also defined for calculating the contributions of:\n\n","The sub-processes can then be used to calculate the overall illumination of a light source. Since there are only4 multiply ALUs, the microcode for a particular type of light source can have sub-processes intermingled appropriately for performance.","Calculation of 1\/\u25a1X","The Vark lighting model uses vectors. In many cases it is important to calculate the inverse of the length of the vector for normalization purposes. Calculating the inverse of the length requires the calculation of 1\/SquareRoot[X].","Logically, the process can be represented as a process with inputs and outputs as shown in FIG. . Referring to , the calculation can be made via a lookup of the estimation, followed by a single iteration of the following function:\n\n=\u00bd(3\u2212)\n","The number of iterations depends on the accuracy required. In this case only 16 bits of precision are required. The table can therefore have 8 bits of precision, and only a single iteration is necessary. The following constant is set by software:",{"@attributes":{"id":"p-1082","num":"1477"},"tables":{"@attributes":{"id":"TABLE-US-00102","num":"00102"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following lookup table is used:",{"@attributes":{"id":"p-1084","num":"1479"},"tables":{"@attributes":{"id":"TABLE-US-00103","num":"00103"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Lookup","Size","Details"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LU","256 entries","1\/SquareRoot[X]"]},{"entry":[{},"8 bits per entry","Table indexed by the 8 highest significant bits"]},{"entry":[{},{},"of X."]},{"entry":[{},{},"Resultant 8 bits treated as fixed point 0:8"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"N is the surface normal vector. When there is no bump-map, N is constant. When a bump-map is present, N must be calculated for each pixel.","No Bump-map","When there is no bump-map, there is a fixed normal N that has the following properties:\n\n","These properties can be used instead of specifically calculating the normal vector and 1\/\u2225N\u2225 and thus optimize other calculations.","With Bump-map","As illustrated in , when a bump-map is present, N is calculated by comparing bump-map values in X and Y dimensions.  shows the calculation of N for pixel P in terms of the pixels in the same row and column, but not including the value at P itself. The calculation of N is made resolution independent by multiplying by a scale factor (same scale factor in X & Y). This process can be represented as a process having inputs and outputs (Zis always 1) as illustrated in FIG. .","As Zis always 1. Consequently Xand Yare not normalized yet (since Z=1). Normalization of N is delayed until after calculation of N.L so that there is only 1 multiply by 1\/\u2225N\u2225 instead of 3.","An actual process for calculating N is illustrated in FIG. .","The following constant is set by software:",{"@attributes":{"id":"p-1092","num":"1491"},"tables":{"@attributes":{"id":"TABLE-US-00104","num":"00104"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","ScaleFactor (to make N resolution independent)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},"When a light source is infinitely distant, it has an effective constant light vector L. L is normalized and calculated by software such that:\n\n","These properties can be used instead of specifically calculating the L and 1\u2225\/L\u2225 and thus optimize other calculations. This process is as illustrated in FIG. .","Omni Lights and Spotlights","When the light source is not infinitely distant, L is the vector from the current point P to the light source PL. Since P=[X, Y, 0], L is given by:\n\n","We normalize X, Yand Zby multiplying each by 1\/\u2225L\u2225. The calculation of 1\/\u2225L\u2225 (for later use in normalizing) is accomplished by calculating\n\n\n\nand then calculating V\n","In this case, the calculation of L can be represented as a process with the inputs and outputs as indicated in FIG. .","Xand Yare the coordinates of the pixel whose illumination is being calculated. Zis always 0.","The actual process for calculating L can be as set out in FIG. .","Where the following constants are set by software:",{"@attributes":{"id":"p-1100","num":"1506"},"tables":{"@attributes":{"id":"TABLE-US-00105","num":"00105"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","XPL"]},{"entry":[{},"K","YPL"]},{"entry":[{},"K","Z(as Zis 0)"]},{"entry":[{},"K","\u2212Z"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Calculating the dot product of vectors N and L is defined as:\n\n\n\nNo Bump-map\n","When there is no bump-map N is a constant [0, 0, 1]. N.L therefore reduces to Z.","With Bump-map","When there is a bump-map, we must calculate the dot product directly. Rather than take in normalized N components, we normalize after taking the dot product of a non-normalized N to a normalized L. L is either normalized by software (if it is constant), or by the Calculate L process. This process is as illustrated in FIG. .","Note that Zis not required as input since it is defined to be 1. However 1\/\u2225N\u2225 is required instead, in order to normalize the result. One actual process for calculating N.L is as illustrated in FIG. .","Calculation of R\u00b7V","R\u00b7V is required as input to specular contribution calculations. Since V=[0, 0, 1], only the Z components are required. R\u00b7V therefore reduces to:\n\n=2()\u2212\n","In addition, since the un-normalized Z=1, normalized Z=1\/\u2225N\u2225","No Bump-map","The simplest implementation is when N is constant (i.e. no bump-map). Since N and V are constant, N.L and R\u00b7V can be simplified: \n\n","When L is constant (Directional light source), a normalized Zcan be supplied by software in the form of a constant whenever R\u00b7V is required. When L varies (Omni lights and Spotlights), normalized Zmust be calculated on the fly. It is obtained as output from the Calculate L process.","With Bump-map","When N is not constant, the process of calculating R\u00b7V is simply an implementation of the generalized formula:\n\n=2()\u2212\n","The inputs and outputs are as shown in  with the an actual implementation as shown in FIG. .","Directional Lights","When a light source is infinitely distant, the intensity of the light does not vary across the image. The attenuation factor fis therefore 1. This constant can be used to optimize illumination calculations for infinitely distant light sources.","Omni Lights and Spotlights","When a light source is not infinitely distant, the intensity of the light can vary according to the following formula:\n\n\n","Appropriate settings of coefficients f, f, and fallow light intensity to be attenuated by a constant, linearly with distance, or by the square of the distance.","Since d=\u2225L\u2225, the calculation of fcan be represented as a process with the following inputs and outputs as illustrated in FIG. .","The actual process for calculating fcan be defined in FIG. .","Where the following constants are set by software:",{"@attributes":{"id":"p-1118","num":"1524"},"tables":{"@attributes":{"id":"TABLE-US-00106","num":"00106"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","F"]},{"entry":[{},"K","f"]},{"entry":[{},"K","F"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Directional Lights and Omni Lights","These two light sources are not focused, and therefore have no cone or penumbra. The cone-penumbra scaling factor fis therefore 1. This constant can be used to optimize illumination calculations for Directional and Omni light sources.","Spotlights","A spotlight focuses on a particular target point (PT). The intensity of the Spotlight varies according to whether the particular point of the image is in the cone, in the penumbra, or outside the cone\/penumbra region.","Turning now to , there is illustrated a graph of fwith respect to the penumbra position. Inside the cone , fis 1, outside  the penumbra fis 0. From the edge of the cone through to the end of the penumbra, the light intensity varies according to a cubic function .","The various vectors for penumbra  and cone  calculation are as illustrated in FIG.  and FIG. .","Looking at the surface of the image in 1 dimension as shown in , 3 angles A, B, and C are defined. A is the angle between the target point , the light source , and the end of the cone . C is the angle between the target point , light source , and the end of the penumbra . Both are fixed for a given light source. B is the angle between the target point , the light source , and the position being calculated , and therefore changes with every point being calculated on the image.","We normalize the range A to C to be 0 to 1, and find the distance that B is along that angle range by the formula:\n\n()\/()\n","The range is forced to be in the range 0 to 1 by truncation, and this value used as a lookup for the cubic approximation of f.","The calculation of fcan therefore be represented as a process with the inputs and outputs as illustrated in  with an actual process for calculating fis as shown in  where the following constants are set by software:",{"@attributes":{"id":"p-1127","num":"1533"},"tables":{"@attributes":{"id":"TABLE-US-00107","num":"00107"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","X"]},{"entry":[{},"K","Y"]},{"entry":[{},"K","Z"]},{"entry":[{},"K","A"]},{"entry":[{},"K","1\/(C \u2212 A). [MAXNUM if no penumbra]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following lookup tables are used:",{"@attributes":{"id":"p-1129","num":"1535"},"tables":{"@attributes":{"id":"TABLE-US-00108","num":"00108"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Lookup","Size","Details"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LU","64 entries","Arcos(X)"]},{"entry":[{},"16 bits","Units are same as for constants Kand K"]},{"entry":[{},"per entry","Table indexed by highest 6 bits"]},{"entry":[{},{},"Result by linear interpolation of 2 entries"]},{"entry":[{},{},"Timing is 2 * 8 bits * 2 entries = 4 cycles"]},{"entry":["LU","64 entries","Light Response function f"]},{"entry":[{},"16 bits","F(1) = 0, F(0) = 1, others are according to cubic"]},{"entry":[{},"per entry","Table indexed by 6 bits (1:5)"]},{"entry":[{},{},"Result by linear interpolation of 2 entries"]},{"entry":[{},{},"Timing is 2 * 8 bits = 4 cycles"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Regardless of the number of lights being applied to an image, the ambient light contribution is performed once for each pixel, and does not depend on the bump-map.","The ambient calculation process can be represented as a process with the inputs and outputs as illustrated in FIG. . The implementation of the process requires multiplying each pixel from the input image (O) by a constant value (Ik), as shown in  where the following constant is set by software:",{"@attributes":{"id":"p-1132","num":"1538"},"tables":{"@attributes":{"id":"TABLE-US-00109","num":"00109"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","Ik"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Each light that is applied to a surface produces a diffuse illumination. The diffuse illumination is given by the formula:\n\ndiffuse=()\n\nThere are 2 different implementations to consider:\n\nImplementation 1 \u2014Constant N and L\n","When N and L are both constant (Directional light and no bump-map):\n\n","Therefore:\n\n","Since Ois the only variable, the actual process for calculating the diffuse contribution is as illustrated in  where the following constant is set by software:",{"@attributes":{"id":"p-1137","num":"1545"},"tables":{"@attributes":{"id":"TABLE-US-00110","num":"00110"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","kd(N.L) = kZ"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"When either N or L are non-constant (either a bump-map or illumination from an Omni light or a Spotlight), the diffuse calculation is performed directly according to the formula:\n\ndiffuse=()\n","The diffuse calculation process can be represented as a process with the inputs as illustrated in FIG. . N.L can either be calculated using the Calculate N.L Process, or is provided as a constant. An actual process for calculating the diffuse contribution is as shown in  where the following constants are set by software:",{"@attributes":{"id":"p-1140","num":"1548"},"tables":{"@attributes":{"id":"TABLE-US-00111","num":"00111"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","k"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Each light that is applied to a surface produces a specular illumination. The specular illumination is given by the formula:\n\nspecular=()\n\nwhere O=kO+(1\u2212k)I\n","There are two implementations of the Calculate Specular process.","Implementation 1\u2014Constant N and L","The first implementation is when both N and L are constant (Directional light and no bump-map). Since N, L and V are constant, N.L and R\u00b7V are also constant: \n\n","The specular calculation can thus be reduced to:\n\nspecular=\n\n\n","Since only Ois a variable in the specular calculation, the calculation of the specular contribution can therefore be represented as a process with the inputs and outputs as indicated in FIG.  and an actual process for calculating the specular contribution is illustrated in  where the following constants are set by software:",{"@attributes":{"id":"p-1146","num":"1554"},"tables":{"@attributes":{"id":"TABLE-US-00112","num":"00112"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","kkZ"]},{"entry":[{},"K","(1-k)IkZ"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"This implementation is when either N or L are not constant (either a bump-map or illumination from an Omni light or a Spotlight). This implies that R\u00b7V must be supplied, and hence R\u00b7Vmust also be calculated.","The specular calculation process can be represented as a process with the inputs and outputs as shown in FIG. .  shows an actual process for calculating the specular contribution where the following constants are set by software:",{"@attributes":{"id":"p-1149","num":"1557"},"tables":{"@attributes":{"id":"TABLE-US-00113","num":"00113"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","ks"]},{"entry":[{},"K","ks"]},{"entry":[{},"K","(1-k)I"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following lookup table is used:",{"@attributes":{"id":"p-1151","num":"1559"},"tables":{"@attributes":{"id":"TABLE-US-00114","num":"00114"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Lookup","Size","Details"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LU","32 entries","X"]},{"entry":[{},"16 bits per","Table indexed by 5 highest bits of integer R\u2022V"]},{"entry":[{},"entry","Result by linear interpolation of 2 entries using"]},{"entry":[{},{},"fraction of R\u2022V."]},{"entry":[{},{},"Interpolation by 2 Multiplies."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"If the ambient contribution is the only light source, the process is very straightforward since it is not necessary to add the ambient light to anything with the overall process being as illustrated in FIG. . We can divide the image vertically into 2 sections, and process each half simultaneously by duplicating the ambient light logic (thus using a total of 2 Multiply ALUs and 4 Sequential Iterators). The timing is therefore \u00bd cycle per pixel for ambient light application.","The typical illumination case is a scene lit by one or more lights. In these cases, because ambient light calculation is so cheap, the ambient calculation is included with the processing of each light source. The first light to be processed should have the correct Iksetting, and subsequent lights should have an Ikvalue of 0 (to prevent multiple ambient contributions).","If the ambient light is processed as a separate pass (and not the first pass), it is necessary to add the ambient light to the current calculated value (requiring a read and write to the same address). The process overview is shown in FIG. .","The process uses 3 Image Iterators, 1 Multiply ALU, and takes 1 cycle per pixel on average.","Infinite Light Source","In the case of the infinite light source, we have a constant light source intensity across the image. Thus both L and fare constant.","No Bump Map","When there is no bump-map, there is a constant normal vector N [0, 0, 1]. The complexity of the illumination is greatly reduced by the constants of N, L, and f. The process of applying a single Directional light with no bump-map is as illustrated in  where the following constant is set by software:",{"@attributes":{"id":"p-1158","num":"1566"},"tables":{"@attributes":{"id":"TABLE-US-00115","num":"00115"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","I"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"For a single infinite light source we want to perform the logical operations as shown in  where Kthrough Kare constants with the following values:",{"@attributes":{"id":"p-1160","num":"1568"},"tables":{"@attributes":{"id":"TABLE-US-00116","num":"00116"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","K(NL) = KL"]},{"entry":[{},"K","k"]},{"entry":[{},"K","K(NsH)= KH"]},{"entry":[{},"K","I"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The process can be simplified since K, K, and Kare constants. Since the complexity is essentially in the calculation of the specular and diffuse contributions (using 3 of the Multiply ALUs), it is possible to safely add an ambient calculation as the 4Multiply ALU. The first infinite light source being processed can have the true ambient light parameter Ik, and all subsequent infinite lights can set Ikto be 0. The ambient light calculation becomes effectively free.","If the infinite light source is the first light being applied, there is no need to include the existing contributions made by other light sources and the situation is as illustrated in  where the constants have the following values:",{"@attributes":{"id":"p-1163","num":"1571"},"tables":{"@attributes":{"id":"TABLE-US-00117","num":"00117"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","k(LsN) = kL"]},{"entry":[{},"K","I"]},{"entry":[{},"K","(1 \u2212 k(NsH))I= (1 \u2212 kH)I"]},{"entry":[{},"K","kk(NsH)I= kkHI"]},{"entry":[{},"K","Ik"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"If the infinite light source is not the first light being applied, the existing contribution made by previously processed lights must be included (the same constants apply) and the situation is as illustrated in FIG. .","In the first case 2 Sequential Iterators ,  are required, and in the second case, 3 Sequential Iterators , ,  (the extra Iterator is required to read the previous light contributions). In both cases, the application of an infinite light source with no bump map takes 1 cycle per pixel, including optional application of the ambient light.","With Bump Map","When there is a bump-map, the normal vector N must be calculated per pixel and applied to the constant light source vector L. 1\/\u2225N\u2225 is also used to calculate R\u00b7V, which is required as input to the Calculate Specular 2 process. The following constants are set by software:",{"@attributes":{"id":"p-1167","num":"1575"},"tables":{"@attributes":{"id":"TABLE-US-00118","num":"00118"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","X"]},{"entry":[{},"K","Y"]},{"entry":[{},"K","Z"]},{"entry":[{},"K","I"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Bump-map Sequential Read Iterator  is responsible for reading the current line of the bump-map. It provides the input for determining the slope in X. Bump-map Sequential Read Iterators ,  and are responsible for reading the line above and below the current line. They provide the input for determining the slope in Y.","Omni Lights","In the case of the Omni light source, the lighting vector L and attenuation factor fchange for each pixel across an image. Therefore both L and fmust be calculated for each pixel.","No Bump Map","When there is no bump-map, there is a constant normal vector N [0, 0, 1]. Although L must be calculated for each pixel, both N.L and R\u00b7V are simplified to Z. When there is no bump-map, the application of an Omni light can be calculated as shown in  where the following constants are set by software:",{"@attributes":{"id":"p-1171","num":"1579"},"tables":{"@attributes":{"id":"TABLE-US-00119","num":"00119"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","X"]},{"entry":[{},"K","Y"]},{"entry":[{},"K","I"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The algorithm optionally includes the contributions from previous light sources, and also includes an ambient light calculation. Ambient light needs only to be included once. For all other light passes, the appropriate constant in the Calculate Ambient process should be set to 0.","The algorithm as shown requires a total of 19 multiply\/accumulates. The times taken for the lookups are 1 cycle during the calculation of L, and 4 cycles during the specular contribution. The processing time of 5 cycles is therefore the best that can be accomplished. The time taken is increased to 6 cycles in case it is not possible to optimally microcode the ALUs for the function. The speed for applying an Omni light onto an image with no associated bump-map is 6 cycles per pixel.","With Bump-map","When an Omni light is applied to an image with an associated a bump-map, calculation of N, L, N.L and R\u00b7V are all necessary. The process of applying an Omni light onto an image with an associated bump-map is as indicated in  where the following constants are set by software:",{"@attributes":{"id":"p-1175","num":"1583"},"tables":{"@attributes":{"id":"TABLE-US-00120","num":"00120"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","X"]},{"entry":[{},"K","Y"]},{"entry":[{},"K","I"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The algorithm optionally includes the contributions from previous light sources, and also includes an ambient light calculation. Ambient light needs only to be included once. For all other light passes, the appropriate constant in the Calculate Ambient process should be set to 0.","The algorithm as shown requires a total of 32 multiply\/accumulates. The times taken for the lookups are 1 cycle each during the calculation of both L and N, and 4 cycles for the specular contribution. However the lookup required for N and L are both the same (thus 2 LUs implement the 3 LUs). The processing time of 8 cycles is adequate. The: time taken is extended to 9 cycles in case it is not possible to optimally microcode the ALUs for the function. The speed for applying an Omni light onto an image with an associated bump-map is 9 cycles per pixel.","Spotlights","Spotlights are similar to Omni lights except that the attenuation factor fis modified by a cone\/penumbra factor fthat effectively focuses the light around a target.","No Bump-map","When there is no bump-map, there is a constant normal vector N [0, 0, 1]. Although L must be calculated for each pixel, both N.L and R\u00b7V are simplified to Z.  illustrates the application of a Spotlight to an image where the following constants are set by software:",{"@attributes":{"id":"p-1180","num":"1588"},"tables":{"@attributes":{"id":"TABLE-US-00121","num":"00121"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","X"]},{"entry":[{},"K","Y"]},{"entry":[{},"K","I"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The algorithm optionally, includes the contributions from previous light sources, and also includes an ambient light calculation. Ambient light needs only to be included once. For all other light passes, the appropriate constant in the Calculate Ambient process should be set to 0.","The algorithm as shown requires a total of 30 multiply\/accumulates. The times taken for the lookups are 1 cycle during the calculation of L, 4 cycles for; the specular contribution, and 2 sets of 4 cycle lookups in the cone\/penumbra calculation.","With Bump-map","When a Spotlight is applied to an image with an associated a bump-map, calculation of N, L, N.L and R\u00b7V are all necessary. The process of applying a single Spotlight onto an image with associated bump-map is illustrated in  where the following constants are set by software:","The algorithm optionally includes the contributions from previous light sources, and also includes ambient light: calculation. Ambient light needs only to be included once. For all other light passes, the appropriate constant in the Calculate Ambient process should be set to 0. The algorithm as shown requires a total of 41 multiply\/accumulates.","Print Head ",{"@attributes":{"id":"p-1185","num":"1593"},"figref":"FIG. 153"},"Loading a Segment for Printing","Before anything can be printed, each of the 8 segments in the Print Head must be loaded with 6 rows of data corresponding to the following relative rows in the final output image:\n\n","Each of the segments prints dots over different parts of the page. Each segment prints 750 dots of one color, 375 even dots on one row, and 375 odd dots on another. The 8 segments have dots corresponding to positions:",{"@attributes":{"id":"p-1188","num":"1602"},"tables":{"@attributes":{"id":"TABLE-US-00122","num":"00122"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Segment","First dot","Last dot"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","0","749"]},{"entry":["1","750","1499"]},{"entry":["2","1500","2249"]},{"entry":["3","2250","2999"]},{"entry":["4","3000","3749"]},{"entry":["5","3750","4499"]},{"entry":["6","4500","5249"]},{"entry":["7","5250","5999"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Each dot is represented in the Print Head segment by a single bit. The data must be loaded 1 bit at a time by placing the data on the segment's BitValue pin, and clocked in to a shift register in the segment according to a BitClock. Since the data is loaded into a shift register, the order of loading bits must be correct. Data can be clocked in to the Print Head at a maximum rate of 10 MHz.","Once all the bits have been loaded, they must be transferred in parallel to the Print Head output buffer, ready for printing. The transfer is accomplished by a single pulse on the segment's ParallelXferClock pin.","Controlling the Print","In order to conserve power, not all the dots of the Print Head have to be printed simultaneously. A set of control lines enables the printing of specific dots. An external controller, such as the ACP, can change the number of dots printed at once, as well as the duration of the print pulse in accordance with speed and\/or power requirements.","Each segment has 5 NozzleSelect lines, which are decoded to select 32 sets of nozzles per row. Since each row has, 375 nozzles, each set contains 12 nozzles. There are also 2 BankEnable lines, one for each of the odd and even rows of color. Finally, each segment has 3 ColorEnable lines, one for each of C, M, and Y colors. A pulse on one of the ColorEnable lines causes the specified nozzles of the color's specified rows to be printed. A pulse is typically about 2\u25a1s in duration.","If all the segments are controlled by the same set of NozzleSelect, BankEnable and ColorEnable lines (wired externally to the print head), the following is true:","If both odd and even banks print simultaneously (both BankEnable bits are set), 24 nozzles fire simultaneously per segment, 192 nozzles in all, consuming 5.7 Watts.","If odd and even banks print independently, only 12 nozzles fire simultaneously per segment, 96 in all, consuming 2.85 Watts.","Print Head Interface ","The Print Head Interface  connects the ACP to the Print Head, providing both data and appropriate signals to the external Print Head. The Print Head Interface  works in conjunction with both a VLIW processor  and a software algorithm running on the CPU in order to print a photo in approximately 2 seconds.","An overview of the inputs and outputs to the Print Head Interface is shown in FIG. . The Address and Data Buses are used by the CPU to address the various registers in the Print Head Interface. A single BitClock output line connects to all 8 segments on the print head. The 8 DataBits lines lead one to each segment, and are clocked in to the 8 segments on the print head simultaneously (on a BitClock pulse). For example, dot 0 is transferred to segment, dot 750 is transferred to segment, dot 1500 to segmentetc. simultaneously.","The VLIW Output FIFO contains the dithered bi-level C, M, and Y 6000\u00d79000 resolution print image in the correct order for output to the 8 DataBits. The ParallelXferClock is.connected to each of the 8 segments on the print head, so that on a single pulse, all segments transfer their bits at the same time. Finally, the NozzleSelect, BankEnable and ColorEnable lines are connected to each of the 8 segments, allowing the Print Head Interface to control the duration of the C, M, and Y drop pulses as well as how many drops are printed with each pulse. Registers in the Print Head Interface allow the specification of pulse durations between 0 and 6 \u25a1s, with a typical duration of 2\u25a1s.","Printing an Image","There are 2 phases that must occur before an image is in the hand of the Artcam user:\n\n","Preparation of an image only needs to be performed once. Printing the image can be performed as many times as desired.","Prepare the Image","Preparing an image for printing involves:\n\n","At the end of image preparation, a 4.5 MB correctly oriented 1000\u00d71500 CMY image is ready to be printed.","Convert Photo Image to Print Image:","The conversion of a Photo Image into a Print Image requires the execution of a Vark script to perform image processing. The script is either a default image enhancement script or a Vark script taken from the currently inserted Artcard. The Vark script is executed via the CPU, accelerated by functions performed by the VLIW Vector Processor.","Rotate the Print Image","The image in memory is originally oriented to be top upwards. This allows for straightforward Vark processing. Before the image is printed, it must be aligned with the print roll's orientation. The re-alignment only needs to be done once. Subsequent Prints of a Print Image will already have been rotated appropriately.","The transformation to be applied is simply the inverse of that applied during capture from the CCD when the user pressed the \u201cImage Capture\u201d button on the Artcam. If the original rotation was 0, then no transformation needs to take place. If the original rotation was +90 degrees, then the rotation before printing needs to be \u221290 degrees (same as 270 degrees). The method used to apply the rotation is the Vark accelerated Affine Transform function. The Affine Transform engine can be called to rotate each color channel independently. Note that the color channels cannot be rotated in place. Instead, they can, make use of the space previously used for the expanded single channel (1.5 MB).",{"@attributes":{"id":"p-1206","num":"1626"},"figref":"FIG. 155"},"Up Interpolate and Color Convert","The Lab image must be converted to CMY before printing. Different processing occurs depending on whether the a and b channels of the Lab image is compressed. If the Lab image is compressed, the a and b channels must be decompressed before the color conversion occurs. If the Lab image is not compressed, the color conversion is the only necessary step. The Lab image must be up interpolated (if the a and b channels are compressed) and converted into a CMY image. A single VLIW process combining scale and color transform can be used.","The method used to perform the color conversion is the Vark accelerated Color Convert function. The Affine Transform engine can be called to rotate each color channel independently. The color channels cannot be rotated in place. Instead, they can make use of the space previously used for the expanded single channel (1.5 MB).","Print the Image","Printing an image is concerned with taking a correctly oriented 1000\u00d71500 CMY image, and generating data and signals to be sent to the external Print Head. The process involves the CPU working in conjunction with a VLIW process and the Print Head Interface.","The resolution of the image in the Artcam is 1000\u00d71500. The printed image has a resolution of 6000\u00d79000 dots; which makes for a very straightforward relationship: 1 pixel=6\u00d76=36 dots. As shown in  since each dot is 16.6 \u25a1m, the 6\u00d76 dot square is 100 \u25a1m square. Since each of the dots is bi-level, the output must be dithered.","The image should be printed in approximately 2 seconds. For 9000 rows of dots this implies a time of 222 \u25a1s time between printing each row. The Print Head Interface must generate the 6000 dots in this time, an average of 37 ns per dot. However, each dot comprises 3 colors, so the Print Head Interface must generate each color component in approximately 12 ns, or 1 clock cycle of the ACP (10 ns at 100 MHz). One VLIW process is responsible for calculating the next line of 6000 dots to be printed. The odd and even C, M, and Y dots are generated by dithering input from 6 different 1000\u00d71500 CMY image lines. The second VLIW process is responsible for taking the previously calculated line of 6000, dots, and correctly generating the 8 bits of data for the 8 segments to be transferred by the Print Head Interface to the Print Head in a single transfer.","A CPU process updates registers in the fist VLIW process 3 times per print line (once per color component=27000 times in 2 seconds), and in the 2nd VLIW process once every print line (9000 times in 2 seconds). The CPU works one lin ahead of the VLIW process in order to do this.","Finally, the Print Head Interface takes the 8 bit data from the VLIW Output FIFO, and outputs it unchanged to the Print Head, producing the BitClock signals appropriately. Once all the data has been transferred a ParallelXferClock signal is generated to load the data for the next print line. In conjunction with transferring the data to the Print Head, a separate timer is generating the signals for the different print cycles of the Print Head using the NozzleSelect, ColorEnable, and BankEnable lines a specified by Print Head Interface internal registers.","The CPU also controls the various motors and guillotine via the parallel interface during the print process.","Generate C, M, and Y Dots","The input to this process is a 1000\u00d71500 CMY image correctly oriented for printing. The image is not compressed in any way. As illustrated in , a VLIW microcode program takes the CMY image, and generates the C, M, and Y pixels required by the Print Head Interface to be dithered.","The process is run 3 times, once for each of the 3 color components. The process consists of 2 sub-processes run in parallel\u2014one for producing even dots, and the other for producing odd dots. Each sub-process takes one pixel from the input image, and produces 3 output dots (since one pixel=6 output dots, and each subprocess is concerned with either even or odd dots). Thus one output dot is generated each cycle, but an input pixel is only read once every 3 cycles.","The original dither cell is a 64\u00d764 cell, with each entry 8 bits. This original cell is divided into an odd cell and an even cell, so that each is still 64 high, but only 32 entries wide. The even dither cell contains original dither cell pixels 0, 2, 4 etc., while the odd contains original dither cell pixels 1, 3, 5 etc. Since a dither cell repeats across a line, a single 32 byte line of each of the 2 dither cells is required during an entire line, and can therefore be completely cached. The odd and even lines of a single process line are staggered 8 dot lines apart, so it is convenient to rotate the odd dither cell's lines by 8 lines. Therefore the same offset into both odd and even dither cells can be used. Consequently the even dither cell's line corresponds to the even entries of line L in the original dither cell, and the even dither cell's line corresponds to the odd entries of line L+8 in the original dither cell.","The process is run 3 times, once for each of the color components. The CPU software routine must ensure that the Sequential Read Iterators for odd and even lines are pointing to the correct image lines corresponding to the print heads. For example, to produce one set of 18,000 dots (3 sets of 6000 dots):\n\n","Subsequent sets of input image lines are:\n\n","The dither cell data however, does not need to be updated for each color component. The dither cell for the 3 colors becomes the same, but offset by 2 dot lines for each component.","The Dithered Output is written to a Sequential Write Iterator, with odd and even dithered dots written to 2 separate outputs. The same two Write Iterators are used for all 3 color components, so that they are contiguous within the break-up of odd and even dots.","While one set of dots is being generated for a print line, the previously generated set of dots is being merged by a second VLIW process as described in the next section.","Generate Merged 8 bit Dot Output","This process, as illustrated in , takes a single line of dithered dots and generates the 8 bit data stream for output to the Print Head Interface via the VLIW Output FIFO. The process requires the entire line to have been prepared, since it requires semi-random access to most of the dithered line at once. The following constant is set by software:",{"@attributes":{"id":"p-1224","num":"1655"},"tables":{"@attributes":{"id":"TABLE-US-00123","num":"00123"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Constant","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"K","375"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The Sequential Read Iterators point to the line of previously generated dots, with the Iterator registers set up to limit access to a single color component. The distance between subsequent pixels is 375, and the distance between one line and the next is given to be 1 byte. Consequently 8 entries are read for each \u201cline\u201d. A single \u201cline\u201d corresponds to the 8 bits to be loaded on the print head. The total number of \u201clines\u201d in the image is set to be 375. With at least 8 cache lines assigned to the Sequential Read Iterator, complete cache coherence is maintained. Instead of counting the 8 bits, 8 Microcode steps count implicitly.","The generation process first reads all the entries from the even dots, combining 8 entries into a single byte which is then output to the VLIW Output FIFO. Once all 3000 even dots have been read, the 3000 odd dots are read and processed. A software routine must update the address of the dots in the odd and even Sequential Read Iterators once per color component, which equates to 3 times per line. The two VLIW processes require all 8 ALUs and the VLIW Output FIFO. As long as the CPU is able to update the registers as described in the two processes, the VLIW processor can generate the dithered image dots fast enough to keep up with the printer.","Data Card Reader",{"@attributes":{"id":"p-1227","num":"1658"},"figref":"FIG. 159","b":["500","9","158","159","35","506","507","9","506","9","506","507","9","512","514","512","9","512","34","9","34","9","34","31","49","13"]},"The CCD reader includes a bottom substrate , a top substrate  which comprises a transparent molded plastic. In between the two substrates is inserted the linear CCD array  which comprises a thin long linear CCD array constructed by means of semiconductor manufacturing processes.","Turning to , there is illustrated a side perspective view, partly in section, of an example construction of the CCD reader unit. The series of LEDs eg.  are operated to emit light when a card  is passing across the surface of the CCD reader . The emitted light is transmitted through a portion of the top substrate . The substrate includes a portion eg.  having a curved circumference so as to focus light emitted from LED  to a point eg.  on the surface of the card . The focused light is reflected from the point  towards the CCD array . A series of microlenses eg. , shown in exaggerated form, are formed on the surface of the top substrate . The microlenses  act to focus light received across the surface to the focused down to a point  which corresponds to point on the surface of the CCD reader  for sensing of light falling on the light sensing portion of the CCD array .","A number of refinements of the above arrangement are possible. For example, the sensing devices on the linear CCD  may be staggered. The corresponding microlenses  can also be correspondingly formed as to focus light into a staggered series of spots so as to correspond to the staggered CCD sensors.","To assist reading, the data surface area of the Artcard  is modulated with a checkerboard pattern as previously discussed with reference to FIG. . Other forms of high frequency modulation may be possible however.","It will be evident that an Artcard printer can be provided as for the printing out of data on storage Artcard. Hence, the Artcard system can be utilized as a general form of information distribution outside of the Artcam device. An Artcard printer can prints out Artcards on high quality print surfaces and multiple Artcards can be printed on same sheets and later separated. On a second surface of the Artcard  can be printed information relating to the files etc. stored on the Artcard  for subsequent storage.","Hence, the Artcard system allows for a simplified form of storage which is suitable for use in place of other forms of storage such as CD ROMs, magnetic disks etc. The Artcards  can also be mass produced and thereby produced in a substantially inexpensive form for redistribution.","Print Rolls","Turning to , there is illustrated the print roll  and print-head portions of the Artcam. The paper\/film  is fed in a continuous \u201cweb-like\u201d process to a printing mechanism  which includes further pinch rollers - and a print head ","The pinch roller  is connected to a drive mechanism (not shown) and upon rotation of the print roller , \u201cpaper\u201d in the form of film  is forced through the printing mechanism  and out of the picture output slot . A rotary guillotine mechanism (not shown) is utilised to cut the roll of paper  at required photo sizes.","It is therefore evident that the printer roll  is responsible for supplying \u201cpaper\u201d  to the print mechanism  for printing of photographically imaged pictures.","In , there is shown an exploded perspective of the print roll . The printer roll  includes output printer paper  which is output under the operation of pinching rollers , .","Referring now to , there is illustrated a more fully exploded perspective view, of the print roll  of  without the \u201cpaper\u201d film roll. The print roll  includes three main parts comprising ink reservoir section , paper roll sections ,  and outer casing sections , .","Turning first to the ink reservoir section , which includes the ink reservoir or ink supply sections . The ink for printing is contained within three bladder type containers -. The printer roll  is assumed to provide full color output inks. Hence, a first ink reservoir or bladder container  contains cyan colored ink. A second reservoir  contains magenta colored ink and a third reservoir  contains yellow ink. Each of the reservoirs -, although having different volumetric dimensions, are designed to have substantially the same volumetric size.","The ink reservoir sections , , in addition to cover  can be made of plastic sections and are designed to be mated together by means of heat sealing, ultra violet radiation, etc. Each of the equally sized ink reservoirs - is connected to a corresponding ink channel - for allowing the flow of ink from the reservoir - to a corresponding ink output port -. The ink reservoir  having ink channel , and output port , the ink reservoir  having ink channel  and output port , and the ink reservoir  having ink channel  and output port .","In operation, the ink reservoirs - can be filled with corresponding ink and the section  joined to the section . The ink reservoir sections -, being collapsible bladders, allow for ink to traverse ink channels - and therefore be in fluid communication with the ink output ports -. Further, if required, an air inlet port can also be provided to allow the pressure associated with ink channel reservoirs - to be maintained as required.","The cap  can be joined to the ink reservoir section  so as to form a pressurized cavity, accessible by the air pressure inlet port.","The ink reservoir sections ,  and  are designed to be connected together as an integral unit and to be inserted inside printer roll sections , . The printer roll sections ,  are designed to mate together by means of a snap fit by means of male portions - mating with corresponding female portions (not shown). Similarly, female portions - are designed to mate with corresponding male portions -. The paper roll sections ,  are therefore designed to be snapped together. One end of the film within the role is pinched between the two sections ,  when they are joined together. The print film can then be rolled on the print roll sections ,  as required.","As noted previously, the ink reservoir sections , , ,  are designed to be inserted inside the paper roll sections , . The printer roll sections ,  are able to be rotatable around stationery ink reservoir sections ,  and  to dispense film on demand.","The outer casing sections  and  are further designed to be coupled around the print roller sections , . In addition to each end of pinch rollers eg ,  is designed to clip in to a corresponding cavity eg  in cover ,  with roller  being driven externally (not shown) to feed the print film and out of the print roll.","Finally, a cavity  can be provided in the ink reservoir sections ,  for the insertion and gluing of an silicon chip integrated circuit type device  for the storage of information associated with the print roll .","As shown in FIG.  and , the print roll  is designed to be inserted into the Artcam camera device so as to couple with a coupling unit  which includes, connector pads  for providing a connection with the silicon chip . Further, the connector  includes end connectors of four connecting with ink supply ports -. The ink supply ports are in turn to connect to ink supply lines eg  which are in turn interconnected to printheads supply ports eg.  for the flow of ink to print-head  in accordance with requirements.","The \u201cmedia\u201d  utilised to form the roll can comprise many different materials on which it is designed to print suitable images. For example, opaque rollable plastic material may be utilized, transparencies may be used by using transparent plastic sheets, metallic printing can take place via utilization of a metallic sheet film. Further, fabrics could be utilised within the printer roll  for printing images on fabric, although care must be taken that only fabrics having a suitable stiffness or suitable backing material are utilised.","When the print media is plastic, it can be coated with a layer which fixes and absorbs the ink. Further, several types of print media may be used, for example, opaque white matte, opaque white gloss, transparent film, frosted transparent film, lenticular array film for stereoscopic 3D prints, metallised film, film with the embossed optical variable devices such as gratings or holograms, media which is pre-printed on the reverse side, and media which includes a magnetic recording layer. When utilising a metallic foil, the metallic foil can have a polymer base, coated with a thin (several micron) evaporated layer of aluminum or other metal and then coated with a clear protective layer adapted to receive the ink via the ink printer mechanism.","In use the print roll  is obviously designed to be inserted inside a camera device so as to provide ink and paper for the printing of images on demand. The ink output ports - meet with corresponding ports within the camera device and the pinch rollers ,  are operated to allow the supply of paper to the camera device under the control of the camera device.","As illustrated in , a mounted silicon chip  is insert in one end of the print roll . In  the authentication chip  is shown in more detail and includes four communications leads - for communicating details from the chip  to the corresponding camera to which it is inserted.","Turning to , the chip can be separately created by means of encasing a small integrated circuit  in epoxy and running bonding leads eg.  to the external communications leads -. The integrated chip  being approximately 400 microns square with a 100 micron scribe boundary. Subsequently, the chip can be glued to an appropriate surface of the cavity of the print roll . In , there is illustrated the integrated circuit  interconnected to bonding pads ,  in an exploded view of the arrangement of FIG. .","Authentication Chip","Authentication Chips ","The authentication chip  of the preferred embodiment is responsible for ensuring that only correctly manufactured print rolls are utilized in the camera system. The authentication chip  utilizes technologies that are generally valuable when utilized with any consumables and are not restricted to print roll system. Manufacturers of other systems that require consumables (such as a laser printer that requires toner cartridges) have struggled with the problem of authenticating consumables, to varying levels of success. Most have resorted to specialized packaging. However this does not stop home refill operations or clone manufacture. The prevention of copying is important to prevent poorly manufactured substitute consumables from damaging the base system. For example, poorly filtered ink may clog print nozzles in an ink jet printer, causing the consumer to blame the system manufacturer and not admit the use of non-authorized consumables. To solve the authentication problem, the Authentication chip  contains an authentication code and circuit specially designed to prevent copying. The chip is manufactured using the standard Flash memory manufacturing process, and is low cost enough to be included in consumables such as ink and toner cartridges. Once programmed, the Authentication chips as described here are compliant with the NSA export guidelines. Authentication is an extremely large and constantly growing field. Here we are concerned with authenticating consumables only.","Symbolic Nomenclature","The following symbolic nomenclature is used throughout the discussion of this embodiment:",{"@attributes":{"id":"p-1255","num":"1686"},"tables":{"@attributes":{"id":"TABLE-US-00124","num":"00124"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Symbolic",{}]},{"entry":["Nomenclature","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["F[X]","Function F, taking a single parameter X"]},{"entry":["F[X, Y]","Function F, taking two parameters, X and Y"]},{"entry":["X|Y","X concatenated with Y"]},{"entry":["X \u039b Y","Bitwise X AND Y"]},{"entry":["X \u03bd Y","Bitwise X OR Y (inclusive-OR)"]},{"entry":["X \u2295 Y","Bitwise X XOR Y (exclusive-OR)"]},{"entry":["\u02dcX","Bitwise NOT X (complement)"]},{"entry":["X \u2190 Y","X is assigned the value Y"]},{"entry":["X \u2190 {Y, Z}","The domain of assignment inputs to X is Y and Z."]},{"entry":["X = Y","X is equal to Y"]},{"entry":["X \u2260 Y","X is not equal to Y"]},{"entry":["\u21d3X","Decrement X by 1 (floor 0)"]},{"entry":["\u25a1X","Increment X by 1 (with wrapping based on register"]},{"entry":[{},"length)"]},{"entry":["Erase X","Erase Flash memory register X"]},{"entry":["SetBits[X, Y]","Set the bits of the Flash memory register X based on Y"]},{"entry":["Z \u2190 ShiftRight","Shift register X right one bit position, taking input bit"]},{"entry":["[X, Y]","from Y and placing the output bit in Z"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"A message, denoted by M, is plaintext. The process of transforming M into cyphertext C, where the substance of M is hidden, is called encryption. The process of transforming C back into M is called decryption. Referring to the encryption function as E, and the decryption function as D, we have the following identities:\n\n","Therefore the following identity is true:","Symmetric Cryptography","A symmetric encryption algorithm is one where:\n\n","In most symmetric algorithms, Kusually equals K. However, even if Kdoes not equal K, given that one key can be; derived from the other, a single key K can suffice for the mathematical definition. Thus:\n\n","An enormous variety of symmetric algorithms exist, from the textbooks of ancient history through to sophisticated modern algorithms. Many of these are insecure, in that modern cryptanalysis techniques can successfully attack the algorithm to the extent that K can be derived. The security of the particular symmetric algorithm is normally a function of two things: the strength of the algorithm and the length of the key. The following algorithms include suitable aspects for utilization in the authentication chip.\n\n","DES (Data Encryption Standard) is a US and international standard, where the same key is used to encrypt and decrypt. The key length is 56 bits. It has been implemented in hardware and software, although the original design was for hardware only. The original algorithm used in DES is described in U.S. Pat. No. 3,962,539. A variant of DES, called triple-DES is more secure, but requires 3 keys: K, K, and K. The keys are used in the following manner:\n\n\n\n\n","The main advantage of triple-DES is that existing DES implementations can be used to give more security than single key DES. Specifically, triple-DES gives protection of equivalent key length of 112 bits. Triple-DES does not give the equivalent protection of a 168-bit key (3\u00d756) as one might naively expect. Equipment that performs triple-DES decoding and\/or encoding cannot be exported from the United States.","Blowfish","Blowfish, is a symmetric block cipher first presented by Schneier in 1994. It takes a variable length key, from 32 bits to 448 bits. In addition, it is much faster than DES. The Blowfish algorithm consists of two parts: a key-expansion part and a data-encryption part. Key expansion converts a key of at most 448 bits into several subkey arrays totaling 4168 bytes. Data encryption occurs via a 16-round Feistel network. All operations are XORs and additions on 32-bit words, with four index array lookups per round. It should be noted that decryption is the same as encryption except that the subkey arrays are used in the reverse order. Complexity of implementation is therefore reduced compared to other algorithms that do not have such symmetry.","RC5","Designed by Ron Rivest in 1995, RC5 has a variable block size, key size, and number of rounds. Typically, however, it uses a 64-bit block size and a 128-bit key. The RC5 algorithm consists of two parts: a key-expansion part and a data-encryption part. Key expansion converts a key into 2r+2 subkeys (where r=the number of rounds), each subkey being w bits. For a 64-bit blocksize with 16 rounds (w=32, r=16), the subkey arrays total 136 bytes. Data encrypt addition mod 2, XOR and bitwise rotation.","Idea","Developed in 1990 by Lai and Massey, the first incarnation of the IDEA cipher was called PES. After differential cryptanalysis was discovered by Biham and Shamir in 1991, the algorithm was strengthened, with the result being published in 1992 as IDEA. IDEA uses 128 bit-keys to operate on 64-bit plaintext blocks. The same algorithm is used for encryption and decryption. It is generally regarded to be the most secure block algorithm available today. It is described in U.S. Pat. No. 5,214,703, issued in 1993.","Asymmetric Crytography","As alternative an asymmetric algorithm could be used. An asymmetric encryption algorithm is one where:\n\n","Thus:\n\n","These algorithms are also called public-key because one key Kcan be made public. Thus anyone can encrypt a message (using K), but only the person with the corresponding decryption key (K) can decrypt and thus read the message. In most cases, the following identity also holds:\n\n","This identity is very important because it implies that anyone with the public key Kcan see M and know that it came from the owner of K. No-one else could have generated C because to do so would imply knowledge of K. The property of not being able to derive Kfrom Kand vice versa in a reasonable time is of course clouded by the concept. of reasonable time. What has been demonstrated time after time, is that a calculation that was thought to require a long, time has been made possible by the introduction of faster computers, new algorithms etc. The security of asymmetric algorithms is based on the difficulty of one of two problems: factoring large numbers (more specifically large numbers that are the product of two large primes), and the difficulty of calculating discrete logarithms in a finite field. Factoring, large numbers is conjectured to be a hard problem given today's understanding of mathematics. The problem however, is that factoring is getting easier much faster than anticipated. Ron Rivest in 1977 said that factoring a 125-digit number would take 40 quadrillion years. In 1994 a 129-digit number was factored. According to Schneier, you need a 1024-bit number to get the level of security today that you got from a 512-bit number in the 1980's. If the key is to last for some years then 1024 bits may not even be enough. Rivest revised his key length estimates in 1990: he suggests 1628 bits for high security lasting until 2005, and 1884 bits for high security lasting until 2015. By contrast, Schneier suggests 2048 bits are required in order to protect against corporations and governments until 2015.","A number of public key cryptographic algorithms exist. Most are impractical to implement, and many generate a very large C for a given M or require enormous keys. Still others, while secure, are far too slow to be practical for several years. Because of this, many public-key systems are hybrid\u2014a public key mechanism is used to transmit a symmetric session key, and then the session key is used for the actual messages. All of the algorithms have a problem in terms of key selection. A random number is simply not secure enough. The two large primes p and q must be chosen carefully\u2014there are certain weak combinations that can be factored more easily (some of the weak keys can be tested for). But nonetheless, key selection is not a simple matter of randomly selecting 1024 bits for example. Consequently the key selection process must also be secure.","Of the practical algorithms in use under public scrutiny, the following may be suitable for utilization:\n\n","The RSA cryptosystem, named after Rivest, Shamir, and Adleman, is the most widely used public-key cryptosystem, and is a de facto standard in much of the world. The security of RSA is conjectured to depend on the difficulty of factoring large numbers that are the product of two primes (p and q). There are a number of restrictions on the generation of p and q. They should both be large, with a similar number of bits, yet not be close to one another (otherwise pq\u2248\u221apq). In addition, many authors have suggested that p and q should be strong primes. The RSA algorithm patent was issued in 1983 (U.S. Pat. No. 4,405,829).","DSA","DSA (Digital Signature Standard) is an algorithm designed as part of the Digital Signature Standard (DSS). As defined, it cannot be used for generalized encryption. In addition, compared to RSA, DSA is 10 to 40 times slower for signature verification. DSA explicitly uses the SHA-1 hashing algorithm (see definition in One-way Functions below). DSA key generation relies on finding two primes p and q such that q divides p\u22121. According to Schneier, a 1024-bit p value is required for long term DSA security. However the DSA standard does not permit values of p larger than 1024 bits (p must also be a multiple of 64 bits). The US Government owns the DSA algorithm and has at least one relevant patent (U.S. Pat. No. 5,231,688 granted in 1993).","ElGamal","The ElGamal scheme is used for both encryption and digital signatures. The security is based on the difficulty of calculating discrete logarithms in a finite field. Key selection involves the selection of a prime p, and two random numbers g and x such that both g and x are less than p. Then calculate y=gx mod p. The public key is y, g, and p. The private key is x.","Cryptographic Challenge response Protocols and Zero Knowledge Proofs","The general principle of a challenge-response protocol is to provide identity authentication adapted to a camera system.","The simplest form of challenge-response takes the form of a secret password. A asks B for the secret password, and if B responds with the correct password, A declares B authentic. There are three main problems with this kind, of simplistic protocol. Firstly, once B has given out the password, any observer C will know what the password is. Secondly, A must know the password in order to verify it. Thirdly, if C impersonates A, then B will give the password to C (thinking C was A), thus compromising B. Using a copyright text (such as a haiku) is a weaker alternative as we are assuming that anyone is able to copy the password (for example in a country where intellectual property is not respected). The idea of cryptographic challenge-response protocols is that one entity (the claimant) proves its identity to another (the verifier) by demonstrating knowledge of a secret known to be associated with that entity, without revealing the secret itself to the verifier during the protocol. In the generalized case of cryptographic challenge-response protocols, with some schemes the verifier knows the secret, while in others the secret is not even known by the verifier. Since the discussion of this embodiment specifically concerns Authentication, the actual cryptographic challenge-response protocols used for authentication are detailed in the appropriate sections. However the concept of Zero Knowledge Proofs will be discussed here. The Zero Knowledge Proof protocol, first described by Feige, Fiat and Shamir is extensively used in Smart Cards for the purpose of authentication. The protocol's effectiveness is based on the assumption that it is computationally infeasible to compute square roots modulo a large composite integer with unknown factorization. This is provably equivalent to the assumption that factoring large integers is difficult. It should be noted that there is no need for the claimant to have significant computing power. Smart cards implement this kind of authentication using only a few modular multiplications. The Zero Knowledge Proof protocol is described in U.S. Pat. No. 4,748,668.","One-way Functions","A one-way function F operates on an input X, and returns F[X] such that X cannot be determined from F[X]. When there is no restriction on the format of X, and F[X] contains fewer bits than X, then collisions must exist. A collision is defined as two different X input values producing the same F[X] value\u2014i.e. Xand Xexist such that X\u2260Xyet F[X]=F[X]. When X contains more bits than F[X], the input must be compressed in some way to create the output. In many cases, X is broken into blocks of a particular size, and compressed over a number of rounds, with the output of one round being the input to the next. The output of the hash function is the last output once X has been consumed. A pseudo-collision of the compression function CF is defined as two different initial values Vand Vand two inputs Xand X(possibly identical) are given such that CF(V, X)=CF(V, X). Note that the existence of a pseudo-collision does not mean that it is easy to compute an Xfor a given X.","We are only interested in one-way functions that are fast to compute. In addition, we are only interested in deterministic one-way functions that are repeatable in different implementations. Consider an example F where F[X] is the time between calls to F. For a given F[X]X cannot be determined because X is not even used by F. However the output from F will be different for different implementations. This kind of F is therefore not of interest.","In the scope of the discussion of the implementation of the authentication chip of this embodiment, we are interested in the following forms of one-way functions:\n\n","When a message is encrypted using an unknown key K, the encryption function E is effectively one-way. Without the key, it is computationally infeasible to obtain M from E[M] without K. An encryption function is only one-way for as long as the key remains hidden. An encryption algorithm does not create collisions, since E creates E[M]such that it is possible to reconstruct M using function D. Consequently F[X] contains at least as many bits as X (no information is lost) if the one-way function F is E. Symmetric encryption algorithms (see above) have the advantage over Asymmetric algorithms for producing one-way functions based on encryption for the following reasons:","The key for a given strength encryption algorithm is shorter for a symmetric algorithm than an asymmetric algorithm","Symmetric algorithms are faster to compute and require less software\/silicon","The selection of a good key depends on the encryption algorithm chosen. Certain keys are not strong for particular encryption algorithms, so any key needs to be tested for strength. The more tests that need to be performed for key selection, the less likely the key will remain hidden.","Random Number Sequences","Consider a random number sequence R, R, . . . R, R. We define the one-way function F such that F[X] returns the Xrandom number in the random sequence. However we must ensure that F[X] is repeatable for a given X on different implementations. The random number sequence therefore cannot be truly random. Instead, it must be pseudo-random, with the generator making use of a specific seed.","There are a large number of issues concerned with defining good random number generators. Knuth, describes what makes a generator \u201cgood\u201d (including statistical tests), and the general problems associated with constructing them. The majority of random number generators produce the irandom number from the i\u22121state\u2014the only way to determine the inumber is to iterate from the 0number to the i. If i is large, it may not be practical to wait for i iterations. However there is a type of random number generator that does.allow random access. Blum, Blum and Shub define the ideal generator as follows: \u201c . . . we would like a pseudo-random sequence generator to quickly produce, from short seeds, long sequences (of bits) that appear in every way to be generated by successive flips of a fair coin\u201d. They defined the xmod n generator, more commonly referred to as the BBS generator. They showed that given certain assumptions upon which modern cryptography relies, a BBS generator passes extremely stringent statistical tests. The BBS generator relies on selecting n which is a Blum integer (n=pq where p and q are large prime numbers, p\u2260q, p mod 4=3, and q mod 4=3). The initial state of the generator is given by xwhere x=xmod n, a integer relatively prime to n. The ipseudo-random bit is the least significant bit of xwhere x=xmod n. As an extra property, knowledge of p and q allows a direct calculation of the inumber in the sequence as follows: x=xmod n, where y=2mod ((p\u22121)(q\u22121))","Without knowledge of p and q, the generator must iterate (the security of calculation relies on the difficulty of factoring large numbers). When first defined, the primary problem with the BBS generator was the amount of work required for a single output bit. The algorithm was considered too slow for most applications. However the advent of Montgomery reduction arithmetic has given rise to more practical implementations. In addition, Vazirani and Vazirani have shown that depending on the size of n, more bits can safely be taken from xi without compromising the security of the generator. Assuming we only take 1 bit per x, N bits (and hence N iterations of the bit generator function) are needed in order to generate an N-bit random number. To the outside observer, given a particular set of bits, there is no way to determine the next bit other than a 50\/50 probability. If the x, p and q are hidden, they act as a key, and it is computationally unfeasible to take an output bit stream and compute x, p, and q. It is also computationally, unfeasible to determine the value of i used to generate a given set of pseudo-random bits. This last feature makes the generator one-way. Different values of i can produce identical bit sequences of a given length (e.g. 32 bits of random bits). Even if x, p and q are known, for a given F[i], i can only be derived as a set of possibilities, not as a certain value (of course if the domain of i is known, then the set of possibilities is reduced further). However, there are problems in selecting a good p and q, and a good seed x. In particular, Ritter describes a problem in selecting x. The nature of the problem is that a BBS generator does not create a single cycle of known length. Instead, it creates cycles of various lengths, including degenerate (zero-length) cycles. Thus a BBS generator cannot be initialized with a random state\u2014it might be on a short cycle.","Hash Functions","Special one-way functions, known as Hash functions map arbitrary length messages to fixed-length hash values. Hash, functions are referred to as H[M]. Since the input is arbitrary length, a hash function has a compression component in order to produce a fixed length output. Hash functions also have an obfuscation component in order to make it difficult to find collisions and to determine information about M from H[M]. Because collisions do exist, most applications require that the hash algorithm is preimage resistant, in that for a given XI it is difficult to find Xsuch that H[X]=H[X]. In addition, most applications also require the hash algorithm to be collision resistant (i.e. it should be hard to find two messages Xand Xsuch that H[X]=H[X]). It is an open problem whether a collision-resistant hash function, in the idealist sense, can exist at all. The primary application for hash functions is in the reduction of an input message into a digital \u201cfingerprint\u201d before the application of a digital signature algorithm. One problem of collisions with digital signatures can be seen in the following example.","A has a long message Mthat says \u201cI owe B $10\u201d. A signs H[M] using his private key. B, being greedy, then searches for a collision message Mwhere H[M]=H[M] but where Mis favorable to B, for example \u201cI owe B $1 million\u201d. Clearly it is in A's interest to ensure that it is difficult to find such an M.","Examples of collision resistant one-way hash functions are SHA-1, MD5 and RIPEMD-160, all derived from MD4.","MD4","Ron Rivest introduced MD4 in 1990. It is mentioned here because all other one-way hash functions are derived in some way from MD4. MD4 is now considered completely broken in that collisions can be calculated instead of searched for. In the example above, B could trivially generate a substitute message Mwith the same hash value as the original message M.","MD5","Ron Rivest introduced MD5 in 1991 as a more secure MD4. Like MD4, MD5 produces a 128-bit hash value. Dobbertin describes the status of MD5 after recent attacks. He describes how pseudo-collisions have been found in MD5, indicating a weakness in the compression function, and more recently, collisions have been found. This means that MD5 should not be used for compression in digital signature schemes where the existence of collisions may have dire consequences. However MD5 can still be used as a one-way function. In addition, the HMAC-MD5 construct is not affected by these recent attacks.","SHA-1","SHA-1 is very similar to MD5, but has a 160-bit hash value (MD5 only has 128 bits of hash value). SHA-1 was designed and introduced by the NIST and NSA for use in the Digital Signature Standard (DSS). The original published description was called SHA, but very soon afterwards, was revised to become SHA-1, supposedly to correct a security flaw in SHA (although the NSA has not released the mathematical reasoning behind the change). There are no known cryptographic attacks against SHA-1. It is also more resistant to brute-force attacks than MD4 or MD5 simply because of the longer hash result. The US Government owns the SHA-1 and DSA algorithms (a digital signature authentication algorithm defined as part of DSS) and has at least one relevant patent (U.S. Pat. No. 5,231,688 granted in 1993).","RIPEMD-160","RIPEMD-160 is a hash function derived from its predecessor RIPEMD (developed for the European Community's RIPE project in 1992). As its name suggests, RIPEMD-160 produces a 160-bit hash result. Tuned for software implementations on 32-bit architectures, RIPEMD-160 is intended to provide a high level of security for 10 years or more. Although there have been no successful attacks on RIPEMD-160, it is comparatively new and has not been extensively cryptanalyzed. The original RIPEMD algorithm was specifically designed to resist known cryptographic attacks on MD4. The recent attacks on MD5 showed similar weaknesses in the RIPEMD 128-bit hash function. Although the attacks showed only theoretical weaknesses, Dobbertin, Preneel and Bosselaers further strengthened RIPEMD into a new algorithm RIPEMD-160.","Message Authentication Codes.","The problem of message authentication can be summed up as follows:\n\n","Message authentication is different from entity authentication. With entity authentication, one entity (the claimant) proves its identity to another (the verifier). With message authentication, we are concerned with making sure that a given message is from who we think it is from i.e. it has not been tampered en route from the source to its destination. A one-way hash function is not sufficient protection for a message. Hash functions such as MD5 rely on generating a hash value that is representative of the original input, and the original input cannot be derived from the hash value. A simple attack by E, who is in-between A and B, is to intercept the message from B, and substitute his own. Even if A also sends a hash of the original message, E can simply substitute the hash of his new message. Using a one-way hash function alone, A has no way of knowing that B's message has been changed. One solution to the problem of message authentication is the Message Authentication Code, or MAC. When B sends message M, it also sends MAC[M] so that the receiver will know that M is actually from B. For this to be possible, only B must be able to produce a MAC of M, and in addition, A should be able to verify M against MAC[M]. Notice that this is different from encryption of M-MACs are useful when M does not have to be secret. The simplest method of constructing a MAC from a hash function is to encrypt the hash value with a symmetric algorithm:\n\n","This is more secure than first encrypting the message and then hashing the encrypted message. Any symmetric or asymmetric cryptographic function can be used. However, there are advantages to using a key-dependant one-way hash function instead of techniques that use encryption (such as that shown above):\n\n","It should be noted that hash functions were never originally designed to contain a key or to support message authentication. As a result, some ad hoc methods of using hash functions to perform message authentication, including various functions that concatenate messages with secret prefixes, suffixes, or both have been proposed. Most of these ad hoc methods have been successfully attacked by sophisticated means. Additional MACs have been suggested based on XOR schemes and Toeplitz matricies (including the special case of LFSR-based constructions).","HMAC","The HMAC construction in particular is gaining acceptance as a solution for Internet message authentication security protocols. The HMAC construction acts as a wrapper, using the underlying hash function in a black-box way. Replacement of the hash function is straightforward if desired due to security or performance reasons. However, the major advantage of the HMAC construct is that it can be proven secure provided the underlying hash function has some reasonable cryptographic strengths\u2014that is, HMAC's strengths are directly connected to the strength of the hash function. Since the HMAC construct is a wrapper, any iterative hash function can be used in an HMAC. Examples include HMAC-MD5, HMAC-SHA1, HMAC-RIPEMD160 etc. Given the following definitions:","H=the hash function (e.g. MD5 or SHA-1)\n\n","The HMAC algorithm is as follows:\n\n","Thus:\n\nHMAC[M]=H[(K\u2295opad)|H[(K\u2295ipad)|M]]\n","The recommended key length is at least n bits, although it should not be longer than 64 bytes (the length of the hashing block). A key longer than n bits does not add to the security of the function. HMAC optionally allows truncation of the final output e.g. truncation to 128 bits from 160 bits. The HMAC designers' Request for Comments was issued in 1997, one year after the algorithm was first introduced. The designers claimed that the strongest known attack against HMAC is based on the frequency of collisions for the hash function H and is totally impractical for minimally reasonable hash functions. More recently, HMAC protocols with replay prevention components have been defined in order to prevent the capture and replay of any M, HMAC[M] combination within a given time period.","Random Numbers and Time Varying Messages","The use of a random number generator as a one-way function has already been examined. However, random number generator theory is very much intertwined with cryptography, security, and authentication. There are a large number of issues concerned with defining good random number generators. Knuth, describes what makes a generator good (including statistical tests), and the general problems associated with constructing them. One of the uses for random numbers is to ensure that messages vary over time. Consider a system where A encrypts commands and sends them to B. If the encryption algorithm produces the same output for a given input, an attacker could simply record the messages and play them back to fool B. There is no need for the attacker to crack the encryption mechanism other than to know which message to play to B (while pretending to be A). Consequently messages often include a random number and a time stamp to ensure that the message (and hence its encrypted counterpart) varies each time. Random number generators are also often used to generate keys. It is therefore best to say at the moment, that all generators are insecure for this purpose. For example, the Berlekamp-Massey algorithm, is a classic attack on an LFSR random number generator. If the LFSR is of length n, then only 2n bits of the sequence suffice to determine the LFSR, compromising the key generator. If, however, the only role of the random number generator is to make sure that messages vary over time, the security of the generator and seed is not as important as it is for session key generation. If however, the random number seed generator is compromised, and an attacker is able to calculate future \u201crandom\u201d numbers, it can leave some protocols open to attack. Any new protocol should be examined with respect to this situation. The actual type of random number generator required will depend upon the implementation and the purposes for which the generator is used. Generators include Blum, Blum, and Shub, stream ciphers such as RC4 by Ron Rivest, hash functions such as SHA-1 and RIPEMD-160, and traditional generators such LFSRs (Linear Feedback Shift Registers) and their more recent counterpart FCSRs (Feedback with Carry Shift Registers).","Attacks","This section describes the various types of attacks that can be undertaken to break an authentication cryptosystem such as the authentication chip. The attacks are grouped into physical and logical attacks. Physical attacks describe methods for breaking a physical implementation of a cryptosystem (for example, breaking open a chip to retrieve the key), while logical attacks involve attacks on the cryptosystem that are implementation independent. Logical types of attack work on the protocols or algorithms, and attempt to do one of three things:\n\n","The attack styles and the forms they take are detailed below. Regardless of the algorithms and protocol used by a security chip, the circuitry of the authentication part of the chip can come under physical attack. Physical attack comes in four main ways, although the form of the attack can vary:\n\n","The attack styles and the forms they take are detailed below. This section does not suggest solutions to these attacks. It merely describes each attack type. The examination is restricted to the context of an Authentication chip  (as opposed to some other kind of system, such as Internet authentication) attached to some System.","Logical Attacks","These attacks are those which do not depend on the physical implementation of the cryptosystem. They work against the protocols and the security of the algorithms and random number generators.","Ciphertext Only Attack","This is where an attacker has one or more encrypted messages, all encrypted using the same algorithm. The aim of the attacker is to obtain the plaintext messages from the encrypted messages. Ideally, the key can be recovered so that all messages in the future can also be recovered.","Known Plaintext Attack","This is where an attacker has both the plaintext and the encrypted form of the plaintext. In the case of an Authentication Chip, a known-plaintext attack is one where the attacker can see the data flow between the System and the Authentication Chip. The inputs and outputs are observed (not chosen by the attacker), and can be analyzed for weaknesses (such as birthday attacks or by a search for differentially interesting input\/output pairs). A known plaintext attack is a weaker type of attack than the chosen plaintext attack, since the attacker can only observe the data flow. A known plaintext attack can be carried out by connecting a logic analyzer to the connection between the System and the Authentication Chip.","Chosen Plaintext Attacks","A chosen plaintext attack describes one where a cryptanalyst has the ability to send any chosen message to the cryptosystem, and observe the response. If the cryptanalyst knows the algorithm, there may be a relationship between inputs and outputs that can be exploited by feeding a specific output to the input of another function. On a system using an embedded Authentication Chip, it is generally very difficult to prevent chosen plaintext attacks since the cryptanalyst can logically pretend he\/she is the System, and thus send any chosen bit-pattern streams to the Authentication Chip.","Adaptive Chosen Plaintext Attacks","This type of attack is similar to the chosen plaintext attacks except that the attacker has the added ability to modify subsequent chosen plaintexts based upon the results of previous experiments. This is certainly the case with any System\/Authentication Chip scenario described when utilized for consumables such as photocopiers and toner cartridges, especially since both Systems and Consumables are made available to the public.","Brute Force Attack","A guaranteed way to break any key-based cryptosystem algorithm is simply to try every key. Eventually the right one will be found. This is known as a Brute Force Attack. However, the more key possibilities there are, the more keys must be tried, and hence the longer it takes (on average) to find the right one. If there are N keys, it will take a maximum of N tries. If the key is N bits long, it will take a maximum of 2tries, with a 50% chance of finding the key after only half the attempts (2). The longer N becomes, the longer it will take to find the key, and hence the more secure the key is. Of course, an attack may guess the key on the first try, but this is more unlikely the longer the key is. Consider a key length of 56 bits. In the worst case, all 2tests (7.2\u00d710tests) must be made to find the key. In 1977, Diffie and Hellman described a specialized machine for cracking DES, consisting of one million processors, each capable of running one million tests per second. Such a machine would take 20 hours to break any DES code. Consider a key length of 128 bits. In the worst case, all 2tests (3.4\u00d710tests) must be made to find the key. This would take ten billion years on an array of a trillion processors each running 1 billion tests per second. With a long enough key length, a Brute Force Attack takes too long to be worth the attacker's efforts.","Guessing Attack","This type of attack is where an attacker attempts to simply \u201cguess\u201d the key. As an attack it is identical to the Brute force attack, where the odds of success depend on the length of the key.","Quantum Computer Attack","To break an n-bit key, a quantum computer (NMR, Optical, or Caged Atom) containing n qubits embedded in an appropriate algorithm must be built. The quantum computer effectively exists in 2simultaneous coherent states. The trick is to extract the right coherent state without causing any decoherence. To date this has been achieved with a 2 qubit system (which exists in 4 coherent states). It is thought possible to extend this to 6 qubits (with 64 simultaneous coherent states) within a few years.","Unfortunately, every additional qubit halves the relative strength of the signal representing the key. This rapidly becomes a serious impediment to key retrieval, especially with the long keys used in cryptographically secure systems. As a result, attacks on a cryptographically secure key (e.g. 160 bits) using a Quantum Computer are likely not to be feasible and it is extremely unlikely that quantum computers will have achieved more than 50 or so qubits within the commercial lifetime of the Authentication Chips. Even using a 50 qubit quantum computer, 2tests are required to crack a 160 bit key.","Purposeful Error Attack","With certain algorithms, attackers can gather valuable information from the results of a bad input. This can range from the error message text to the time taken for the error to be generated. A simple example is that of a userid\/password scheme. If the error message usually says \u201cBad userid\u201d, then when an attacker gets a message saying \u201cBad password\u201d instead, then they know that the userid is correct. If the message always says \u201cBad userid\/password\u201d then much less information is given to the attacker. A more complex example is that of the recent published method of cracking encryption codes from secure web sites. The attack involves sending particular messages to a server and observing the error message responses. The responses, give enough information to learn the keys\u2014even the lack of a response gives some information. An example of algorithmic time can be seen with an algorithm that returns an error as soon as an erroneous bit is detected in the input message. Depending on hardware implementation, it may be a simple method for the attacker to time the response and alter each bit one by one depending on the time taken for the error response, and thus obtain the key. Certainly in a chip implementation the time taken can be observed with far greater accuracy than over the Internet.","Birthday Attack","This attack is named after the famous \u201cbirthday paradox\u201d (which is not actually a paradox at all). The odds of one person sharing a birthday with another, is 1 in 365 (not counting leap years). Therefore there must be 183 people in a room for the odds to be more than 50% that one of them shares your birthday. However, there only needs to be 23 people in a room for there to be more than a 50% chance that any two share a birthday. This is because 23 people yields 253 different pairs. Birthday attacks are common attacks against hashing algorithms, especially those algorithms that combine hashing with digital signatures. If a message has been generated and already signed, an attacker must search for a collision message that hashes to the same value (analogous to finding one person who shares your birthday). However, if the attacker can generate the message, the Birthday Attack comes into play. The attacker searches for two messages that share the same hash value (analogous to any two people sharing a birthday), only one message is acceptable to the person signing it, and the other is beneficial for the attacker. Once the person has signed the original message the attacker simply claims now that the person signed the alternative message\u2014mathematically there is no way to tell which message was the original, since they both hash to the same value. Assuming a Brute Force Attack is the only way to determine a match, the weakening of an n-bit key by the birthday attack is 2. A key length of 128 bits that is susceptible to the birthday attack has an effective length of only 64 bits.","Chaining Attack","These are attacks made against the chaining nature of hash functions. They focus on the compression function of a hash function. The idea is based on the fact that a hash function generally takes arbitrary length input and produces a constant length output by processing the input n bits at a time. The output from one block is used as the chaining variable set into the next block. Rather than finding a collision against an entire input, the idea is that given an input chaining variable set, to find a substitute block that will result in the same output chaining variables as the proper message. The number of choices for a particular block is based on the length of the block. If the chaining variable is c bits, the hashing function behaves like a random mapping, and the block length is b bits, the number of such b-bit blocks is approximately 2b\/2c. The challenge for finding a substitution block is that such blocks are a sparse subset of all possible blocks. For SHA-1, the number of 512 bit blocks is approximately 2\/2, or 2. The chance of finding a block by brute force search is about 1 in 2.","Substitution With a Complete Lookup Table","If the number of potential messages sent to the chip is small, then there is no need for a clone manufacturer to crack the key. Instead, the clone manufacturer could incorporate a ROM in their chip that had a record of all of the responses from a genuine chip to the codes sent by the system. The larger the key, and the larger the response, the more space is required for such a lookup table.","Substitution With a Sparse Lookup Table","If the messages sent to the chip are somehow predictable, rather than effectively random, then the clone manufacturer need not provide a complete lookup table. For example:\n\n","Differential cryptanalysis describes an attack where pairs of input streams are generated with known differences, and the differences in the encoded streams are analyzed. Existing differential attacks are heavily dependent on the structure of S boxes, as used in DES and other simailar algorithms. Although other algorithms such as HMAC-SHA1 have no S boxes, an attacker can undertake a differential-like attack by undertaking statistical analysis of:","Minimal-difference inputs, and their corresponding outputs","Minimal-difference outputs, and their corresponding inputs","Most algorithms were strengthened against differential cryptanalysis once the process was described. This is covered in the specific sections devoted to each cryptographic algorithm. However some recent algorithms developed in secret have been broken because the developers had not considered certain styles of differential attacks and did not subject their algorithms to public scrutiny.","Message Substitution Attacks","In certain protocols, a man-in-the-middle can substitute part or all of a message. This is where a real Authentication Chip is plugged into a reusable clone chip within the consumable. The clone chip intercepts all messages between the System and the Authentication Chip, and can perform a number of substitution attacks. Consider a message containing a header followed by content. An attacker may not be able to generate a valid header, but may be able to substitute their own content, especially if the valid response is something along the lines of \u201cYes, I received your message\u201d. Even if the return message is \u201cYes, I received the following message . . . \u201d, the attacker may be able to substitute the original message before sending the acknowledgement back to the original sender. Message Authentication Codes were developed to combat most message substitution attacks.","Reverse Engineering the Key Generator","If a pseudo-random number generator is used to generate keys, there is the potential for a clone manufacture to obtain the generator program or to deduce the random seed used. This was the way in which the Netscape security program was initially broken.","Bypassing Authentication Altogether","It may be that there are problems in the authentication protocols that can allow a bypass of the authentication process altogether. With these kinds of attacks the key is completely irrelevant, and the attacker has no need to recover it or deduce it. Consider an example of a system that Authenticates at power-up, but does not authenticate at an y other time. A reusable consumable with a clone Authentication Chip may make use of a real Authentication Chip. The clone authentication chip  uses the real chip for the authentication call, and then simulates the real Authentication Chip's state data after that. Another example of bypassing authentication is if the System authenticates only after the consumable has been used. A clone Authentication Chip can accomplish a simple authentication bypass by simulating a loss of connection after the use of the consumable but before the authentication protocol has completed (or even started). One infamous attack known as the \u201cKentucky Fried Chip\u201d hack involved replacing a microcontroller chip for a satellite TV system. When a subscriber stopped paying the subscription fee, the system would send out a \u201cdisable\u201d message. However the new microcontroller would simply detect this message and not pass it on to the consumer's satellite TV system.","Garrote\/bribe Attack","If people know the key, there is the possibility that they could tell someone else. The telling may be due to coercion (bribe, garrote etc), revenge (e.g. a disgruntled employee), or simply for principle. These attacks are usually cheaper and easier than other efforts at deducing the key. As, an example, a number of people claiming to be involved with the development of the Divx standard have recently (May\/June 1998), been making noises on a variety of DVD newsgroups to the effect they would like to help develop Divx specific cracking devices\u2014out of principle.","Physical Attacks","The following attacks assume implementation of an authentication mechanism in a silicon chip that the attacker has physical access to. The first attack, Reading ROM, describes an attack when keys are stored in ROM, while the remaining attacks assume that a secret key is stored in Flash memory.","Reading ROM","If a key is stored in ROM it can be read directly. A ROM can thus be safely used to hold a public key (for use in asymmetric cryptography), but not to hold a private key. In symmetric cryptography, a ROM is completely insecure. Using a copyright text (such as a haiku) as the key is not sufficient, because we are assuming that the cloning of the chip is occurring in a country where intellectual property is not respected.","Reverse Engineering of Chip","Reverse engineering of the chip is where an attacker opens the chip and analyzes the circuitry. Once the circuitry has been analyzed the inner workings of the chip's algorithm can be recovered. Lucent Technologies have developed an active method known as TOBIC (Two photon OBIC, where OBIC stands for Optical Beam Induced Current), to image circuits. Developed primarily for static RAM analysis, the process involves removing any back materials, polishing the back surface to a mirror finish, and then focusing light on the surface. The excitation wavelength is specifically chosen not to induce a current in the IC. A Kerckhoffs in the nineteenth century made a fundamental assumption about cryptanalysis: if the algorithm's inner workings are the sole secret of the scheme, the scheme is as good as broken. He stipulated that the secrecy must reside entirely in the key. As a result, the best way to protect against reverse engineering of the chip is to make the inner workings irrelevant.","Usurping the Authentication Process","It must be assumed that any clone manufacturer has access to both the System and consumable designs. If the same channel is used for communication between the System and a trusted System Authentication Chip, and a non-trusted consumable Authentication Chip, it may be possible for the non-trusted chip to interrogate a trusted Authentication Chip in order to obtain the \u201ccorrect answer\u201d. If this is so, a clone manufacturer would not have to determine the key. They would only have to trick the System into using the responses from the System Authentication Chip. The alternative method of usurping the authentication process follows the same method as the logical attack \u201cBypassing the Authentication Process\u201d, involving simulated loss of contact with the System whenever authentication processes take place, simulating power-down etc.","Modification of System","This kind of attack is where the System itself is modified to accept clone consumables. The attack may be a change of System ROM, a rewiring of the consumable, or, taken to the extreme case, a completely clone System. This kind of attack requires each individual System to be modified, and would most likely require the owner's consent. There would usually have to be a clear advantage for the consumer to undertake such a modification, since it would typically void warranty and would most likely be costly. An example of such a modification with a clear advantage to the consumer is a software patch to change fixed-region DVD players into region-free DVD players.","Direct Viewing of Chip Operation by Conventional Probing","If chip operation could be directly viewed using an STM or an electron beam, the keys could be recorded as they are read from the internal non-volatile memory and loaded into work registers. These forms of conventional probing require direct access to the top or front sides of the IC while it is powered.","Direct Viewing of the Non-volatile Memory","If the chip were sliced so that the floating gates of the Flash memory were exposed, without discharging them, then the key could probably be viewed directly using an STM or SKM (Scanning Kelvin Microscope). However, slicing the chip to this level without discharging the gates is probably impossible. Using wet etching, plasma etching, ion milling (focused ion beam etching), or chemical mechanical polishing will almost certainly discharge the small charges present on the floating gates.","Viewing the Light Bursts Caused by State Changes","Whenever a gate changes state, a small amount of infrared energy is emitted. Since silicon is transparent to infrared, these changes can be observed by looking at the circuitry from the underside of a chip. While the emission process is weak, it is bright enough to be detected by highly sensitive equipment developed for use in astronomy. The technique, developed by IBM, is called PICA (Picosecond Imaging Circuit Analyzer). If the state of a register is known at time t, then watching that register change over time will reveal the exact value at time t+n, and if the data is part of the key, then that part is compromised.","Monitoring EMI","Whenever electronic circuitry operates, faint electromagnetic signals are given off. Relatively inexpensive equipment (a few thousand dollars) can monitor these signals. This could give enough information to allow an attacker to deduce the keys.","Viewing IFluctuations","Even if keys cannot be viewed, there is a fluctuation in current whenever registers change state. If there is a high enough signal to noise ratio, an attacker can monitor the difference in Ithat may occur when programming over either a high or a low bit. The change in Ican reveal information about the key. Attacks such as these have already been used to break smart cards.","Differential Fault Analysis","This attack assumes introduction of a bit error by ionization, microwave radiation, or environmental stress. In most cases such an error is more likely to adversely affect the Chip (eg cause the program code to crash) rather than cause beneficial changes which would reveal the key. Targeted faults such as ROM overwrite, gate destruction etc are far more likely to produce useful results.","Clock Glitch Attacks","Chips are typically designed to properly operate within a certain clock speed range. Some attackers attempt to introduce faults in logic by running the chip at extremely high clock speeds or introduce a clock glitch at a particular time for a particular duration. The idea is to create race conditions where the circuitry, does not function properly. An example could be an AND gate that (because of race conditions) gates through Input, all the time instead of the AND of Inputand Input. If an attacker knows the internal structure of the chip, they can attempt to introduce race conditions at the correct moment in the algorithm execution, thereby revealing information about the key (or in the worst case, the key itself).","Power Supply Attacks","Instead of creating a glitch in the clock signal, attackers can also produce glitches in the power supply where the power is increased or decreased to be outside the working operating voltage range. The net effect is the same as a clock glitch\u2014introduction of error in the execution of a particular instruction. The idea is to stop the CPU from XORing the key, or from shifting the data one bit-position etc. Specific instructions are targeted so that information about the key is revealed.","Overwriting ROM","Single bits in a ROM can be overwritten using a laser cutter microscope, to either 1 or 0 depending on the sense of the logic. With a given opcode\/operand set, it may be a simple matter for an attacker to change a conditional jump to a non-conditional jump, or perhaps change the destination of a register transfer. If the target instruction is chosen carefully, it may result in the key being revealed.","Modifying EEPROM\/Flash","EEPROM\/Flash attacks are similar to ROM attacks except that the laser cutter microscope technique can be used to both set and reset individual bits. This gives much greater scope in terms of modification of algorithms.","Gate Destruction","Anderson and Kuhn described the rump session of the 1997 workshop on Fast Software Encryption, where Biham and Shamir presented an attack on DES. The attack was to use a laser cutter to destroy an individual gate in the hardware implementation of a known block cipher (DES). The net effect of the attack was to force a particular bit of a register to be \u201cstuck\u201d. Biham and Shamir described the effect of forcing a particular register to be affected in this way\u2014the least significant bit of the output from the round function is set to 0. Comparing the 6 least significant bits of the left half and the right half can recover several bits of the key. Damaging a number of chips in this way can reveal enough information about the key to make complete key recovery easy. An encryption chip modified in this way will have the property that encryption and decryption will no longer be inverses.","Overwrite Attacks","Instead of trying to read the Flash memory, an attacker may simply set a single bit by use of a laser cutter microscope. Although the attacker doesn't know the previous value, they know the new value. If the chip still works, the bit's original state must be the same as the new state. If the chip doesn't work any longer, the bit's original state must be the logical NOT of the current state. An attacker can perform this attack on each bit of the key and obtain the n-bit key using at most n chips (if the new bit matched the old bit, a new chip is not required for determining the next bit).","Test Circuitry Attack","Most chips contain test circuitry specifically designed to check for manufacturing defects. This includes BIST (Built In Self Test) and scan paths. Quite often the scan paths and test circuitry includes access and readout mechanisms for all the embedded latches. In some cases the test circuitry could potentially be used to give information about the contents of particular registers. Test circuitry is often disabled once the chip has passed all manufacturing tests, in some cases by blowing a specific connection within the chip. A determined attacker, however, can reconnect the test circuitry and hence enable it.","Memory Remanence","Values remain in RAM long after the power has been removed, although they do not remain long enough to be considered non-volatile. An attacker can remove power once sensitive information has been moved into RAM (for example working registers), and then attempt to read the value from RAM. This attack is most useful against security systems that have regular RAM chips. A classic example is where a security system was designed with an automatic power-shut-off that is triggered when the computer case is opened. The attacker was able to simply open the case, remove the RAM chips, and retrieve the key because of memory remanence.","Chip Theft Attack","If there are a number of stages in the lifetime of an Authentication Chip, each of these stages must be examined in terms of ramifications for security should chips be stolen. For example, if information is programmed into the chip in stages, theft of a chip between stages may allow an attacker to have access to key information or reduced efforts for attack. Similarly, if a chip is stolen directly after manufacture but before programming, does it give an attacker any logical or physical advantage?","Requirements","Existing solutions to the problem of authenticating consumables have typically relied on physical patents on packaging. However this does not stop home refill operations or clone manufacture in countries with weak industrial property protection. Consequently a much higher level of protection is required. The authentication mechanism is therefore built into an Authentication chip  that allows a system to authenticate a consumable securely and easily. Limiting ourselves to the system authenticating consumables (we don't consider the consumable authenticating the system), two levels of protection can be considered:\n\n","This is where only the presence of an Authentication Chip is tested. The Authentication Chip can be reused in another consumable without being reprogrammed.","Consumable Lifetime Authentication","This is where not only is the presence of the Authentication Chip tested for, but also the Authentication chip  must only last the lifetime of the consumable. For the chip to be reused it must be completely erased and reprogrammed. The two levels of protection address different requirements. We are primarily concerned with Consumable Lifetime Authentication in order to prevent cloned versions of high volume consumables. In this case, each chip should hold secure state information about the consumable being authenticated. It should be noted that a Consumable Lifetime Authentication Chip could be used in any situation requiring a Presence Only Authentication Chip. The requirements for authentication, data storage integrity and manufacture should be considered separately. The following sections summarize requirements of each.","Authentication","The authentication requirements for both Presence Only Authentication and Consumable Lifetime Authentication are restricted to case of a system authenticating a consumable. For Presence Only Authentication, we must be assured that an Authentication Chip is physically present. For Consumable Lifetime Authentication we also need to be assured that state data actually came from the Authentication Chip, and that it has not been altered en route. These issues cannot be separated\u2014data that has been altered has a new source, and if the source cannot be determined, the question of alteration cannot be settled. It is not enough to provide an authentication method that is secret, relying on a home-brew security method that has not been scrutinized by security experts. The primary requirement therefore is to provide authentication by means that have withstood the scrutiny of experts. The authentication scheme used by the Authentication chip  should be resistant to defeat by logical means. Logical types of attack are extensive, and attempt to do one of three things:\n\n","Although Authentication protocols take care of ensuring data integrity in communicated messages, data storage integrity is also required. Two kinds of data must be stored within the Authentication Chip:\n\n","The access requirements of these two data types differ greatly. The Authentication chip  therefore requires a storage\/access control mechanism that allows for the integrity requirements of each type.","Authentication Data","Authentication data must remain confidential. It needs to be stored in the chip during a manufacturing\/programming stage of the chip's life, but from then on must not be permitted to leave the chip. It must be resistant to being read from non-volatile memory. The authentication scheme is responsible for ensuring the key cannot be obtained by deduction, and the manufacturing process is responsible for ensuring that the key cannot be obtained by physical means. The size of the authentication data memory area must be large enough to hold the necessary keys and secret information as mandated by the authentication protocols.","Consumable State Data","Each Authentication chip  needs to be able to also store 256 bits (32 bytes) of consumable state data. Consumable state data can be divided into the following types. Depending on the application; there will be different numbers of each of these types of data items. A maximum number of 32 bits for a single data item is to be considered.\n\n","Read Only data needs to be stored in the chip during a manufacturing\/programming stage of the chip's life, but from then on should not be allowed to change. Examples of Read Only data items are consumable batch numbers and serial numbers.","ReadWrite data is changeable state information, for example, the last time the particular consumable was used. ReadWrite data items can be read and written an unlimited number of times during the lifetime of the consumable. They can be used to store any state information about the consumable. The only requirement for this data is that it needs to be kept in non-volatile memory. Since an attacker can obtain access to a system (which can write to ReadWrite data), any attacker can potentially change data fields of this type. This data type should not be used for secret information, and must be considered insecure.","Decrement Only data is used to count down the availability of consumable resources. A photocopier's toner cartridge, for example, may store the amount of toner remaining as a Decrement Only data item. An ink cartridge for a color printer may store the amount of each ink color as a Decrement Only data item, requiring 3 (one for each of Cyan, Magenta, and Yellow), or even as many as 5 or 6 Decrement Only data items. The requirement for this kind of data item is that once programmed with an initial value at the manufacturing\/programming stage, it can only reduce in value. Once it reaches the minimum value, it cannot decrement any further. The Decrement Only data item is only required by Consumable Lifetime Authentication.","Manufacture","The Authentication chip  ideally must have a low manufacturing cost in order to be included as the authentication mechanism for low cost consumables. The Authentication chip  should use a standard manufacturing process, such as Flash. This is necessary to:\n\n","Regardless of the authentication scheme used, the circuitry of the authentication part of the chip must be resistant to physical attack. Physical attack comes in four main ways, although the form of the attack can vary:\n\n","Ideally, the chip should be exportable from the U.S., so it should not be possible to use an Authentication chip  as a secure encryption device. This is low priority requirement since there are many companies in other countries able to manufacture the Authentication chips. In any case, the export restrictions from the U.S. may change.","Authentication","Existing solutions to the problem of authenticating consumables have typically relied on physical patents on packaging. However this does not stop home refill operations or clone manufacture in countries with weak industrial property protection. Consequently a much higher level of protection is required. It is not enough to provide an authentication method that is secret, relying on a home-brew security method that has not been scrutinized by security experts. Security systems such as Netscape's original proprietary system and the GSM Fraud Prevention Network used by cellular phones are examples where design secrecy caused the vulnerability of the security. Both security systems were broken by conventional means that would have been detected if the companies had followed an open design process. The solution is to provide authentication by means that have withstood the scrutiny of experts. A number of protocols that can be used for consumables authentication. We only use security methods that are publicly described, using known behaviors in this new way. For all protocols, the security of the scheme relies on a secret key, not a secret algorithm. All the protocols rely on a time-variant challenge (i.e. the challenge is different each time), where the response depends on the challenge and the secret. The challenge involves a random number so that any observer will not be able to gather useful information about a subsequent identification. Two protocols are presented for each of Presence Only Authentication and Consumable Lifetime Authentication. Although the protocols differ in the number of Authentication Chips required for the authentication process, in all cases the System authenticates the consumable. Certain protocols will work with either one or two chips, while other protocols only work with two chips. Whether one chip or two Authentication Chips are used the System is still responsible for making the authentication decision.","Single Chip Authentication","When only one Authentication chip  is used for the authentication protocol, a single chip (referred to as ChipA) is responsible for proving to a system (referred to as System) that it is authentic. At the start of the protocol, System is unsure of ChipA's authenticity. System undertakes a challenge-response protocol with ChipA, and thus determines ChipA's authenticity. In all protocols the authenticity of the consumable is directly based on the authenticity of the chip, i.e. if ChipA is considered authentic, then the consumable is considered authentic. The data flow can be seen in FIG. . In single chip authentication protocols, System can be software, hardware or a combination of both. It is important to note that System is considered insecure\u2014it can be easily reverse engineered by an attacker, either by examining the ROM or by examining circuitry. System is not specially engineered to be secure in itself.","Double Chip Authentication","In other protocols, two Authentication Chips are required as shown in  single chip (referred to as ChipA) is responsible for proving to a system (referred to as System) that it is authentic. As part of the authentication process, System makes use of a trusted Authentication Chip (referred to as ChipT). In double chip authentication protocols, System can be software, hardware or a combination of both. However ChipT must be a physical Authentication Chip. In some protocols ChipT and ChipA have the same internal structure, while in others ChipT and ChipA have different internal structures.","Presence Only Authentication (Insecure State Data)","For this level of consumable authentication we are only concerned about validating the presence of the Authentication chip . Although the Authentication Chip can contain state information, the transmission of that state information would not be considered secure. Two protocols are presented. Protocol 1 requires 2 Authentication Chips, while Protocol 2 can be implemented using either 1 or 2 Authentication Chips.","Protocol 1","Protocol 1 is a double chip protocol (two Authentication Chips are required). Each Authentication Chip contains the following values:\n\n","Each Authentication Chip contains the following logical functions:\n\n","The protocol is as follows:\n\n","The data flow can be seen in FIG. . The System does not have to comprehend F[R] messages. It must merely check that the responses from ChipA and ChipT are the same. The System therefore does not require the key. The security of Protocol 1 lies in two places:\n\n","Protocol 1 has several advantages:\n\n","However there are problems with this protocol:\n\n","A man-in-the middle could take action on a plaintext message M before passing it on to ChipA\u2014it would be preferable if the man-in-the-middle did not see M until after ChipA had seen it. It would be even more preferable if a man-in-the-middle didn't see M at all.","If F is symmetric encryption, because of the key size needed for adequate security, the chips could not be exported from the USA since they could be used as strong encryption devices.","If Protocol 1 is implemented with F as an asymmetric encryption algorithm, there is no advantage over the symmetric case\u2014the keys needs to be longer and the encryption algorithm is more expensive in silicon. Protocol 1 must be implemented with 2 Authentication Chips in order to keep the key secure. This means that each System requires an Authentication Chip and each consumable requires an Authentication Chip.","Protocol 2","In some cases, System may contain a large amount of processing power. Alternatively, for instances of systems that are manufactured in large quantities, integration of ChipT into System may be desirable. Use of an asymmetrical encryption algorithm allows the ChipT portion of System to be insecure. Protocol 2 therefore, uses asymmetric cryptography. For this protocol, each chip contains the following values:\n\n","The following functions are defined:\n\n","The public key Kis in ChipT, while the secret key Kis in ChipA. Having Kin ChipT has the advantage that ChipT can be implemented in software or hardware (with the proviso that the seed for R is different for each chip or system).","Protocol 2 therefore can be implemented as a Single Chip Protocol or as a Double Chip Protocol. The protocol for authentication is as follows:\n\n","The data flow can be seen in FIG. . Protocol 2 has the following advantages:\n\n","However, Protocol 2 has a number of its own problems:\n\n","Even if the process of choosing a key for Protocol 2 was straightforward, Protocol 2 is impractical at the present time due to the high cost of silicon implementation (both key size and functional implementation). Therefore Protocol 1 is the protocol of choice for Presence Only Authentication.","Clone Consumable Using Real Authentication Chip","Protocols 1 and 2 only check that ChipA is a real Authentication Chip. They do not check to see if the consumable itself is valid. The fundamental assumption for authentication is that if ChipA is valid, the consumable is valid. It is therefore possible for a clone manufacturer to insert a real Authentication Chip into a clone consumable. There are two cases to consider:\n\n","In order to fool System into thinking its data accesses were successful, ChipE still requires a real Authentication Chip, and in the second case, a clone chip is required in addition to a real Authentication Chip. Consequently Protocols 1 and 2 can be useful in situations where it is not cost effective for a clone manufacturer to embed a real Authentication chip  into the consumable. If the consumable cannot be recycled or refilled easily, it may be protection enough to use Protocols 1 or 2. For a clone operation to be successful each clone consumable must include a valid Authentication Chip. The chips would have to be stolen en masse, or taken from old consumables. The quantity of these reclaimed chips (as well as the effort in reclaiming them) should not be enough to base a business on, so the added protection of secure data transfer (see Protocols 3 and 4) may not be useful.","Longevity of Key","A general problem of these two protocols is that once the authentication key is chosen, it cannot easily be changed. In some instances a key-compromise is not a problem, while for others a key compromise is disastrous. For example, in a car\/car-key System\/Consumable scenario, the customer has only one set of car\/car-keys. Each car has a different authentication key. Consequently the loss of a car-key only compromises the individual car. If the owner considers this a problem, they must get a new lock on the car by replacing the System chip inside the car's electronics. The owner's keys must be reprogrammed\/replaced to work with the new car System Authentication Chip. By contrast, a compromise of a key for a high volume consumable market (for example ink cartridges in printers) would allow a clone ink cartridge manufacturer to make their own Authentication Chips. The only solution for existing systems is to update the System Authentication Chips, which is a costly and logistically difficult exercise. In any case, consumers' Systems already work\u2014they have no incentive to hobble their existing equipment.","Consumable Lifetime Authentication","In this level of consumable authentication we are concerned with validating the existence of the Authentication Chip, as well as ensuring that the Authentication Chip lasts only as long as the consumable. In addition to validating that an Authentication Chip is present, writes and reads of the Authentication Chip's memory space must be authenticated as well. In this section we assume that the Authentication Chip's data storage integrity is secure\u2014certain parts of memory are Read Only, others are Read\/Write, while others are Decrement Only (see the chapter entitled Data Storage Integrity for more information). Two protocols are presented. Protocol 3 requires 2 Authentication Chips, while Protocol 4 can be implemented using either 1 or 2 Authentication Chips.","Protocol 3","This protocol is a double chip protocol (two Authentication Chips are required). For this protocol, each Authentication Chip contains the following values:\n\n","Each Authentication Chip contains the following logical functions:\n\n","To authenticate ChipA and read ChipA's memory M:\n\n","To authenticate a write of Mto ChipA's memory M:\n\n","The data flow for read authentication is shown in FIG. . The first thing to note about Protocol 3 is that F[X] cannot be called directly. Instead F[X] is called indirectly by Random, Test and Read:\n\n","Any attempt to deduce Kby calling Test multiple times trying different values of F[R|X] for a given X is reduced to a brute force search where R cannot even be chosen by the attacker.\n\n","Having F[X] being called indirectly prevents chosen text attacks on the Authentication Chip. Since an attacker can only obtain a chosen R, F[R] pair by calling Random, Read, and Test multiple times until the desired R appears, a brute force attack on Kis required in order to perform a limited chosen text attack on K. Any attempt at a chosen text attack on Kwould be limited since the text cannot be completely chosen: parts of M are read-only, yet different for each Authentication Chip. The second thing to note is that two keys are used. Given the small size of M, two different keys Kand Kare used in order to ensure there is no correlation between F[R] and F[R|M]. Kis therefore used to help protect Kagainst differential attacks. It is not enough to use a single longer key since M is only 256 bits, and ionly part of M changes during the lifetime of the consumable. Otherwise it is potentially possible that an attacker via some as-yet undiscovered technique, could determine the effect of the limited changes in M to particular bit combinations in R and thus calculate F[X|M] based on F[X]. As an added precaution, the Random and Test functions in ChipA should be disabled so that in order to generate R, F[R] pairs, an attacker must use instances of ChipT, each of which is more expensive than ChipA (since a system must be obtained for each ChipT). Similarly, there should be a minimum delay between calls to Random, Read and Test so that an attacker cannot call these functions at high speed. Thus each chip can only give a specific number of X, F[X] pairs away in a certain time period. The only specific timing requirement of Protocol 3 is that the return value of 0 (indicating a bad input) must be produced in the same amount of time regardless of where the error is in the input. Attackers can therefore not learn anything about what was bad about the input value. This is true for both RD and TST functions.","Another thing to note about Protocol 3 is that Reading data from ChipA also requires authentication of ChipA. The System can be sure that the contents of memory (M) is what ChipA claims it to be if F[R|M] is returned correctly. A clone chip may pretend that M is a certain value (for example it may pretend that the consumable is full), but it cannot return F[R|M] for any R passed in by System. Thus the effective signature F[R|M] assures System that not only did an authentic ChipA send M, but also that M was not altered in between ChipA and System. Finally, the Write function as defined does not authenticate the Write. To authenticate a write, the System must perform a Read after each Write. There are some basic advantages with Protocol 3:\n\n","Consequently, with Protocol 3, the only way to authenticate ChipA is to read the contents of ChipA's memory. The security of this protocol depends on the underlying F[X] scheme and the domain of R over the set of all Systems. Although F[X] can be any keyed one-way function, there is no advantage to implement it as asymmetric encryption. The keys need to be longer and the encryption algorithm is more expensive in silicon. This leads to a second protocol for use with asymmetric algorithms\u2014Protocol 4. Protocol 3 must be implemented with 2 Authentication Chips in order to keep the keys secure. This means that each System requires an Authentication Chip and each consumable requires an Authentication Chip","Protocol 4","In some cases, System may contain a large amount of processing power. Alternatively, for instances of systems that are manufactured in large quantities, integration of ChipT into System may be desirable. Use of an asymmetrical encryption algorithm can allow the ChipT portion of System to be insecure. Protocol 4 therefore, uses asymmetric cryptography. For this protocol, each chip contains the following values:\n\n","There is no point in verifying anything in the Read function, since anyone can encrypt using a public key. Consequently the following functions are defined:\n\n","The public key Kis in ChipT, while the secret key Kis in ChipA. Having Kin ChipT has the advantage that ChipT can be implemented in software or hardware (with the proviso that R is seeded with a different random number for each system). To authenticate ChipA and read ChipA's memory M:\n\n","To authenticate a write of Mto ChipA's memory M:\n\n","The data flow for read authentication is shown in FIG. . Only a valid ChipA would know the value of R, since R is not passed into the Authenticate function (it is passed in as an encrypted value). R must be obtained by decrypting E[R], which can only be done using the secret key K. Once obtained, R must be appended to M and then the result re-encoded. ChipT can then verify that the decoded form of E[R|M] =R|M and hence ChipA is valid. Since K\u2260K, E[R]\u2260E[R]. Protocol 4has the following advantages:\n\n","However, Protocol 4 has a number of disadvantages:\n\n","Protocol 4 Authentication Chips could not be exported from the USA, since they would be considered strong encryption devices.","As with Protocol 3, the only specific timing requirement of Protocol 4 is that the return value of 0 (indicating a bad input) must be produced in the same amount of time regardless of where the error is in the input. Attackers can therefore not learn anything about what was bad about the input value. This is true for both RD and TST functions.","Variation on Call to TST","If there are two Authentication Chips used, it is theoretically possible for a clone manufacturer to replace the System Authentication Chip with one that returns 1 (success) for each call to TST. The System can test for this by calling TST a number of times\u2014N times with a wrong hash value, and expect the result to be 0. The final time that TST is called, the true returned value from ChipA is passed, and the return value is trusted. The question then arises of how many times to call TST. The number of calls must be random, so that a clone chip manufacturer cannot know the number ahead of time. If System has a clock, bits from the clock can be used to determine how many false calls to TST should be made. Otherwise the returned value from ChipA can be used. In the latter case, an attacker could still rewire the System to permit a clone ChipT to view the returned value from ChipA, and thus know which hash value is the correct one. The worst case of course, is that the System can be completely replaced by a clone System that does not require authenticated consumables\u2014this is the limit case of rewiring and changing the System. For this reason, the variation on calls to TST is optional, depending on the System, the Consumable, and how likely modifications are to be made. Adding such logic to System (for example in the case of a small desktop printer) may be considered not worthwhile, as the System is made more complicated. By contrast, adding such logic to a camera may be considered worthwhile.","Clone Consumable Using Real Authentication Chip","It is important to decrement the amount of consumable remaining before use that consumable portion. If the consumable is used first, a clone consumable could fake a loss of contact during a write to the special known address and then appear as a fresh new consumable. It is important to note that this attack still requires a real Authentication Chip in each consumable.","Longevity of Key","A general problem of these two protocols is that once the authentication keys are chosen, it cannot easily be changed. In some instances a key-compromise is not a problem, while for others a key compromise is disastrous.","Choosing a Protocol","Even if the choice of keys for Protocols 2 and 4 was straightforward, both protocols are impractical at the present time due to the high cost of silicon implementation (both due to key size and functional implementation). Therefore Protocols 1 and 3 are the two protocols of choice. However, Protocols 1 and 3 contain much of the same components:\n\n","Protocol 3 requires an additional key (K), as well as some minimal state machine changes:\n\n","Protocol 3 only requires minimal changes over Protocol 1. It is more secure and can be used in all places where Presence Only Authentication is required (Protocol 1). It is therefore the protocol of choice. Given that Protocols 1 and 3 both make use of keyed one-way functions, the choice of one-way function is examined in more detail here. The following table outlines the attributes of the applicable choices. The attributes are worded so that the attribute is seen as an advantage.",{"@attributes":{"id":"p-1408","num":"2022"},"tables":{"@attributes":{"id":"TABLE-US-00125","num":"00125"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"8","align":"center","rowsep":"1"}}]},{"entry":[{},{},{},{},{},"Random",{},{},"HMAC-"]},{"entry":[{},"Triple DES","Blowfish","RC5","IDEA","Sequences","HMAC-MD5","HMAC-SHA1","RIPEMD160"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"8","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"8","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"9","colwidth":"42pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Free of patents","\u2022","\u2022",{},{},"\u2022","\u2022","\u2022","\u2022"]},{"entry":["Random key generation",{},{},{},{},{},"\u2022","\u2022","\u2022"]},{"entry":["Can be exported from the USA",{},{},{},{},"\u2022","\u2022","\u2022","\u2022"]},{"entry":["Fast",{},"\u2022",{},{},{},"\u2022","\u2022","\u2022"]},{"entry":["Preferred Key Size (bits) for use in","168","128","128","128","512","128","160","160"]},{"entry":"this application"},{"entry":["Block size (bits)","64","64","64","64","256","512","512","512"]},{"entry":["Cryptanalysis Attack-Free","\u2022","\u2022",{},{},"\u2022",{},"\u2022","\u2022"]},{"entry":"(apart from weak keys)"},{"entry":["Output size given input size N","\u2267N","\u2267N","\u2267N","\u2267N","128","128","160","160"]},{"entry":["Low storage requirements",{},{},{},{},"\u2022","\u2022","\u2022","\u2022"]},{"entry":["Low silicon complexity",{},{},{},{},"\u2022","\u2022","\u2022","\u2022"]},{"entry":["NSA designed","\u2022",{},{},{},{},{},"\u2022"]},{"entry":{"@attributes":{"namest":"1","nameend":"9","align":"center","rowsep":"1"}}}]}}]}}},"An examination of the table shows that the choice is effectively between the 3 HMAC constructs and the Random Sequence. The problem of key size and key generation eliminates the Random Sequence. Given that a number of attacks have already been carried out on MD5 and since the hash result is only 128 bits, HMAC-MD5 is also eliminated. The choice is therefore between HMAC-SHA1 and HMAC-RIPEMD160. RIPEMD-160 is relatively new, and has not been as extensively cryptanalyzed as SHA1. However, SHA-1 was designed by the NSA, so this may be seen by some as a negative attribute.","Given that there is not much between the two, SHA-1 will be used for the HMAC construct.","Choosing a Random Number Generator","Each of the protocols described (1-4) requires a random number generator. The generator must be \u201cgood\u201d in the sense that the random numbers generated over the life of all Systems cannot be predicted. If the random numbers were the same for each System, an attacker could easily record the correct responses from a real Authentication Chip, and place the responses into a ROM lookup for a clone chip. With such an attack there is no need to obtain Kor K. Therefore the random numbers from each System must be different enough to be unpredictable, or non-deterministic. As such, the initial value for R (the random seed) should be programmed with a physically generated random number gathered from a physically random phenomenon, one where there is no information about whether a particular bit will be 1 or 0. The seed for R must NOT be generated with a computer-run random number generator. Otherwise the generator algorithm and seed may be compromised enabling an attacker to generate and therefore know the set of all R values in all Systems.","Having a different R seed in each Authentication Chip means that the first R will be both random and unpredictable across all chips. The question therefore arises of how to generate subsequent R values in each chip.","The base case is not to change R at all. Consequently R and F[R] will be the same for each call to Random[ ]. If they are the same, then F[R] can be a constant rather than calculated. An attacker could then use a single valid Authentication Chip to generate a valid lookup table, and then use that lookup table in a clone chip programmed especially for that System. A constant R is not secure.","The simplest conceptual method of changing R is to increment it by 1. Since R is random to begin with, the values across differing systems are still likely to be random. However given an initial R, all subsequent R values can be determined directly (there is no need to iterate 10,000 times\u2014R will take on values from Rto R+10000). An incrementing R is immune to the earlier attack on a constant R. Since R is always different, there is no way to construct a lookup table for the particular System without wasting as many real Authentication Chips as the clone chip will replace.","Rather than increment using an adder, another way of changing R is to implement it as an LFSR (Linear Feedback Shift Register). This has the advantage of less silicon than an adder, but the advantage of an attacker not being able to directly determine the range of R for a particular System, since an LFSR value-domain is determined by sequential access. To determine which values an given initial R will generate, an attacker must iterate through the possibilities and enumerate them. The advantages of a changing R are also evident in the LFSR solution. Since R is always different, there is no way to construct a lookup table for the particular System without using-up as many real Authentication Chips as the clone chip will replace (and only for that System). There is therefore no advantage in having a more complex function to change R. Regardless of the function, it will always be possible for an attacker to iterate through the lifetime set of values in a simulation. The primary security lies in the initial randomness of R. Using an LFSR to change R (apart from using less silicon than an adder) simply has the advantage of not being restricted to a consecutive numeric range (i.e. knowing R, Rcannot be directly calculated; an attacker must iterate through the LFSR N times).","The Random number generator within the Authentication Chip is therefore an LFSR with 160 bits. Tap selection of the 160 bits for a maximal-period LFSR (i.e. the LFSR will cycle through all 2\u22121 states, 0 is not a valid state) yields bits , , , and , as shown in FIG. . The LFSR is sparse, in that not many bits are used for feedback (only 4 out of 160 bits are used). This is a problem for cryptographic applications, but not for this application of non-sequential number generation. The 160-bit seed value for R can be any random number except 0, since an LFSR filled with 0s will produce a never-ending stream of 0s. Since the LFSR described is a maximal period LFSR, all 160 bits can be used directly as R. There is no need to construct a number sequentially from output bits of b. After each successful call to TST, the random number (R) must be advanced by XORing bits , , , and , and shifting the result into the high order bit. The new R and corresponding F[R] can be retrieved on the next call to Random.","Holding Out Against Logical Attacks","Protocol 3 is the authentication scheme used by the Authentication Chip. As such, it should be resistant to defeat by logical means. While the effect of various types of attacks on Protocol 3 have been mentioned in discussion, this section details each type of attack in turn with reference to Protocol 3.","Brute Force Attack","A Brute Force attack is guaranteed to break Protocol 3. However the length of the key means that the time for an attacker to perform a brute force attack is too long to be worth the effort. An attacker only needs to break Kto build a clone Authentication Chip. Kis merely present to strengthen Kagainst other forms of attack. A Brute Force Attack on Kmust therefore break a 160-bit key. An attack against Krequires a maximum of 2attempts, with a 50% chance of finding the key after only 2attempts. Assuming an array of a trillion processors, each running one million tests per second, 2(7.3\u00d710) tests takes 2.3\u00d710years, which is longer than the lifetime of the universe. There are only 100 million personal computers in the world. Even if these were all connected in an attack (e.g. via the Internet), this number is still 10,000 times smaller than the trillion-processor attack described. Further, if the manufacture of one trillion processors becomes a possibility in the age of nanocomputers, the time taken to obtain the key is longer than the lifetime of the universe.","Guessing the Key Attack","It is theoretically possible that an attacker can simply \u201cguess the key\u201d. In fact, given enough time, and trying every possible number, an attacker will obtain the key. This is identical to the Brute Force attack described above, where 2attempts must be made before a 50% chance of success is obtained. The chances of someone simply guessing the key on the first try is 2. For comparison, the chance of someone winning the top prize in a U.S. state lottery and being killed by lightning in the same day is only 1 in 2. The chance of someone guessing the Authentication Chip key on the first go is 1 in 2, which is comparative to two people choosing exactly the same atoms from a choice of all the atoms in the Earth i.e. extremely unlikely.","Quantum Computer Attack","To break K, a quantum computer containing 160 qubits embedded in an appropriate algorithm must be built. An attack against a 160-bit key is not feasible. An outside estimate of the possibility of quantum computers is that 50 qubits may be achievable within 50 years. Even using a 50 qubit quantum computer, 2tests are required to crack a 160 bit key. Assuming an array of 1 billion 50 qubit quantum computers, each able to try 250 keys in 1 microsecond (beyond the current wildest estimates) finding the key would take an average of 18 billion years.","Cyphertext Only Attack","An attacker can launch a Cyphertext Only attack on Kby calling monitoring calls to RND and RD, and on Kby monitoring calls to RD and TST. However, given that all these calls also reveal the plaintext as well as the hashed form of the plaintext, the attack would be transformed into a stronger form of attack\u2014a Known Plaintext attack.","Known Plaintext Attack","It is easy to connect a logic analyzer to the connection between the System and the Authentication Chip, and thereby monitor the flow of data. This flow of data results in known plaintext and the hashed form of the plaintext, which can therefore be used to launch a Known Plaintext attack against both Kand K. To launch an attack against K, multiple calls to RND and TST must be made (with the call to TST being successful, and therefore requiring a call to RD on a valid chip). This is straightforward, requiring the attacker to have both a System Authentication Chip and a Consumable Authentication Chip. For each KX, H[X] pair revealed, a KY, H[Y] pair is also revealed. The attacker must collect these pairs for further analysis. The question arises of how many pairs must be collected for a meaningful attack to be launched with this data. An example of an attack that requires collection of data for statistical analysis is Differential Cryptanalysis. However, there are no known attacks against SHA-1 or HMAC-SHA1, so there is no use for the collected data at this time.","Chosen Plaintext Attacks","Given that the cryptanalyst has the ability to modify subsequent chosen plaintexts based upon the results of previous experiments, Kis open to a partial form of the Adaptive Chosen Plaintext attack, which is certainly a stronger form of attack than a simple Chosen Plaintext attack. A chosen plaintext attack is not possible against K, since there is no way for a caller to modify R, which used as input to the RND function (the only function to provide the result of hashing with K). Clearing R also has the effect of clearing the keys, so is not useful, and the SSI command calls CLR before storing the new R-value.","Adaptive Chosen Plaintext Attacks","This kind of attack is not possible against K, since Kis not susceptible to chosen plaintext attacks. However, a partial form of this attack is possible against K, especially since both System and consumables are typically available to the attacker (the System may not be available to the attacker in some instances, such as a specific car). The HMAC construct provides security against all forms of chosen plaintext attacks. This is primarily because the HMAC construct has 2 secret input variables (the result of the original hash, and the secret key). Thus finding collisions in the hash function itself when the input variable is secret is even harder than finding collisions in the plain hash function. This is because the former requires direct access to SHA-1 (not permitted in Protocol 3) in order to generate pairs of input\/output from SHA-1. The only values that can be collected by an attacker are HMAC[R] and HMAC[R|M]. These are not attacks against the SHA-1 hash function itself, and reduce the attack to a Differential Cryptanalysis attack, examining statistical differences between collected data. Given that there is no Differential Cryptanalysis attack known against SHA-1 or HMAC, Protocol 3 is resistant to the Adaptive Chosen Plaintext attacks.","Purposeful Error Attack","An attacker can only launch a Purposeful Error Attack on the TST and RD functions, since these are the only functions that validate input against the keys. With both the TST and RD functions, a 0 value is produced if an error is found in the input\u2014no further information is given. In addition, the time taken to produce the 0 result is independent of the input, giving the attacker no information about which bit(s) were wrong. A Purposeful Error Attack is therefore fruitless.","Chaining Attack","Any form of chaining attack assumes that the message to be hashed is over several blocks, or the input variables can somehow be set. The HMAC-SHA1 algorithm used by Protocol 3 only ever hashes a single 512-bit block at a time. Consequently chaining attacks are not possible against Protocol 3.","Birthday Attack","The strongest attack known against HMAC is the birthday attack, based on the frequency of collisions for the hash function. However this is totally impractical for minimally reasonable hash functions such as SHA-1. And the birthday attack is only possible when the attacker has control over the message that is signed. Protocol 3 uses hashing as a form of digital signature. The System sends a number that must be incorporated into the response from a valid Authentication Chip. Since the Authentication Chip must respond with H[R|M], but has no control over the input value R, the birthday attack is not possible. This is because the message has effectively already been generated and signed. An attacker must instead search for a collision message that hashes to the same value (analogous to finding one person who shares your birthday). The clone chip must therefore attempt to find a new value Rsuch that the hash of Rand a chosen Myields the same hash value as H[R|M]. However the System Authentication Chip does not reveal the correct hash value (the TST function only returns 1 or 0 depending on whether the hash value is correct). Therefore the only way of finding out the correct hash value (in order to find a collision) is to interrogate a real Authentication Chip. But to find the correct value means to update M, and since the decrement-only parts of M are one-way, and the read-only parts of M cannot be changed, a clone consumable would have to update a real consumable before attempting to find a collision. The alternative is a Brute Force attack search on the TST function to find a success (requiring each clone consumable to have access to a System consumable). A Brute Force Search, as described above, takes longer than the lifetime of the universe, in this case, per authentication. Due to the fact that a timely gathering of a hash value implies a real consumable must be decremented, there is no point for a clone consumable to launch this kind of attack.","Substitution With a Complete Lookup Table","The random number seed in each System is 160 bits. The worst case situation for an Authentication Chip is that no state data is changed. Consequently there is a constant value returned as M. However a clone chip must still return F[R|M], which is a 160 bit value. Assuming a 160-bit lookup of a 160-bit result, this requires 7.3\u00d710bytes, or 6.6\u00d710terabytes, certainly more space than is feasible for the near future. This of course does not even take into account the method of collecting the values for the ROM. A complete lookup table is therefore completely impossible.","Substitution With a Sparse Lookup Table","A sparse lookup table is only feasible if the messages sent to the Authentication Chip are somehow predictable, rather than effectively random. The random number R is seeded with an unknown random number, gathered from a naturally random event. There is no possibility for a clone manufacturer to know what the possible range of R is for all Systems, since each bit has a 50% chance of being a 1 or a 0. Since the range of R in all systems is unknown, it is not possible to build a sparse lookup table that can be used in all systems. The general sparse lookup table is therefore not a possible attack. However, it is possible for a clone manufacturer to know what the range of R is for a given System. This can be accomplished by loading a LFSR with the current result from a call to a specific System Authentication Chip's RND function, and iterating some number of times into the future. If this is done, a special ROM can be built which will only contain the responses for that particular range of R, i.e. a ROM specifically for the consumables of that particular System. But the attacker still needs to place correct information in the ROM. The attacker will therefore need to find a valid Authentication Chip and call it for each of the values in R.","Suppose the clone Authentication Chip reports a full consumable, and then allows a single use before simulating loss of connection and insertion of a new full consumable. The clone consumable would therefore need to contain responses for authentication of a full consumable and authentication of a partially used consumable. The worst case ROM contains entries for full and partially used consumables for R over the lifetime of System. However, a valid Authentication Chip must be used to generate the information, and be partially used in the process. If a given System only produces about n R-values, the sparse lookup-ROM required is 10 n bytes multiplied by the number of different values for M. The time taken to build the ROM depends on the amount of time enforced between calls to RD.","After all this, the clone manufacturer must rely on the consumer returning for a refill, since the cost of building the ROM in the first place consumes a single consumable. The clone manufacturer's business in such a situation is consequently in the refills. The time and cost then, depends on the size of R and the number of different values for M that must be incorporated in the lookup. In addition, a custom clone consumable ROM must be built to match each and every System, and a different valid Authentication Chip must be used for each System (in order to provide the full and partially used data). The use of an Authentication Chip in a System must therefore be examined to determine whether or not this kind of attack is worthwhile for a clone manufacturer. As an example, of a camera system that has about 10,000 prints in its lifetime. Assume it has a single Decrement Only value (number of prints remaining), and a delay of 1 second between calls to RD. In such a system, the sparse table will take about 3 hours to build, and consumes 100K. Remember that the construction of the ROM requires the consumption of a valid Authentication Chip, so any money charged must be worth more than a single consumable and the clone consumable combined. Thus it is not cost effective to perform this function for a single consumable (unless the clone consumable somehow contained the equivalent of multiple authentic consumables). If a clone manufacturer is going to go to the trouble of building a custom ROM for each owner of a System, an easier approach would be to update System to completely ignore the Authentication Chip. Consequently, this attack is possible as a per-System attack, and a decision must be made about the chance of this occurring for a given System\/Consumable combination. The chance will depend on the cost of the consumable and Authentication Chips, the longevity of the consumable, the profit margin on the consumable, the time taken to generate the ROM, the size of the resultant ROM, and whether customers will come back to the clone manufacturer for refills that use the same clone chip etc.","Differential Cryptanalysis","Existing differential attacks are heavily dependent on the structure of S boxes, as used in DES and other similar algorithms. Although other algorithms such as HMAC-SHA1 used in Protocol 3 have no S boxes, an attacker can undertake a differential-like attack by undertaking statistical analysis of:\n\n","To launch an attack of this nature, sets of input\/output pairs must be collected. The collection from Protocol 3 can be via Known Plaintext, or from a Partially Adaptive Chosen Plaintext attack. Obviously the latter, being chosen, will be more useful. Hashing algorithms in general are designed to be resistant to differential analysis. SHA-1 in particular has been specifically strengthened, especially by the 80 word expansion so that minimal differences in input produce will still produce outputs that vary in a larger number of bit positions (compared to 128 bit hash functions). In addition, the information collected is not a direct SHA-1 input\/output set, due to the nature of the HMAC algorithm. The HMAC algorithm hashes a known value with an unknown value (the key), and the result of this hash is then rehashed with a separate unknown value. Since the attacker does not know the secret value, nor the result of the first hash, the inputs and outputs from SHA-1 are not known, making any differential attack extremely difficult. The following is a more detailed discussion of minimally different inputs and outputs from the Authentication Chip.","Minimal Difference Inputs","This is where an attacker takes a set of X, F[X] values where the X values are minimally different, and examines the statistical differences between the outputs F[X]. The attack relies on X values that only differ by a minimal number of bits. The question then arises as to how to obtain minimally different X values in order to compare the F[X] values.","K:With K, the attacker needs to statistically examine minimally different X, F[X] pairs. However the attacker cannot choose any X value and obtain a related F[X] value. Since X, F[X] pairs can only be generated by calling the RND function on a System Authentication Chip, the attacker must call RND multiple times, recording each observed pair in a table. A search must then be made through the observed values for enough minimally different X values to undertake a statistical analysis of the F[X] values.","K:With K, the attacker needs to statistically examine minimally different X, F[X] pairs. The only way of generating X, F[X] pairs is via the RD function, which produces F[X] for a given Y, F[Y] pair, where X=Y|M. This means that Y and the changeable part of M can be chosen to a limited extent by an attacker. The amount of choice must therefore be limited as much as possible.","The first way of limiting an attacker's choice is to limit Y, since RD requires an input of the format Y, F[Y]. Although a valid pair can be readily obtained from the RND function, it is a pair of RND's choosing. An attacker can only provide their own Y if they have obtained the appropriate pair from RND, or if they know K. Obtaining the appropriate pair from RND requires a Brute Force search. Knowing Kis only logically possible by performing cryptanalysis on pairs obtained from the RND function\u2014effectively a known text attack. Although RND can only be called so many times per second, Kis common across System chips. Therefore known pairs can be generated in parallel.","The second way to limit an attacker's choice is to limit M, or at least the attacker's ability to choose M. The limiting of M is done by making some parts of M Read Only, yet different for each Authentication Chip, and other parts of M Decrement Only. The Read Only parts of M should ideally be different for each Authentication Chip, so could be information such as serial numbers, batch numbers, or random numbers. The Decrement Only parts of M mean that for an attacker to try a different M, they can only decrement those parts of M so many times\u2014after the Decrement Only parts of M have been reduced to 0 those parts cannot be changed again. Obtaining a new Authentication chip  provides a new M, but the Read Only portions will be different from the previous Authentication Chip's Read Only portions, thus reducing an attacker's ability to choose M even further. Consequently an attacker can only gain a limited number of chances at choosing values for Y and M.","Minimal Difference Outputs","This is where an attacker takes a set of X, F[X] values where the F[X] values are minimally different, and examines the statistical differences between the X values. The attack relies on F[X] values that only differ by a minimal number of bits. For both Kand K, there is no way for an attacker to generate an X value for a given F[X]. To do so would violate the fact that F is a one-way function. Consequently the only way for an attacker to mount an attack of this nature is to record all observed X, F[X] pairs in a table. A search must then be made through the observed values for enough minimally different F[X] values to undertake a statistical analysis of the X values. Given that this requires more work than a minimally different input attack (which is extremely limited due to the restriction on M and the choice of R), this attack is not fruitful.","Message Substitution Attacks","In order for this kind of attack to be carried out, a clone consumable must contain a real Authentication chip , but one that is effectively reusable since it never gets decremented. The clone Authentication Chip would intercept messages, and substitute its own. However this attack does not give success to the attacker. A clone Authentication Chip may choose not to pass on a WR command to the real Authentication Chip. However the subsequent RD command must return the correct response (as if the WR had succeeded). To return the correct response, the hash value must be known for the specific R and M. As described in the Birthday Attack section, an attacker can only determine the hash value by actually updating M in a real Chip, which the attacker does not want to do. Even changing the R sent by System does not help since the System Authentication Chip must match the R during a subsequent TST. A Message substitution attack would therefore be unsuccessful. This is only true if System updates the amount of consumable remaining before it is used.","Reverse Engineering the Key Generator","If a pseudo-random number generator is used to generate keys, there is the potential for a clone manufacture to obtain the generator program or to deduce the random seed used. This was the way in which the Netscape security program was initially broken.","Bypassing Authentication Altogether","Protocol 3 requires the System to update the consumable state data before the consumable is used, and follow every write by a read (to authenticate the write). Thus each use of the consumable requires an authentication. If the System adheres to these two simple rules, a clone manufacturer will have to simulate authentication via a method above (such as sparse ROM lookup).","Reuse of Authentication Chips","As described above, Protocol 3 requires the System to update the consumable state data before the consumable is used, and follow every write by a read (to authenticate the write). Thus each use of the consumable requires an authentication. If a consumable has been used up, then its Authentication Chip will have had the appropriate state-data values decremented to 0. The chip can therefore not be used in another consumable. Note that this only holds true for Authentication Chips that hold Decrement-Only data items. If there is no state data decremented with each usage, there is nothing stopping the reuse of the chip. This is the basic difference between Presence-Only Authentication and Consumable Lifetime Authentication. Protocol 3 allows both. The bottom line is that if a consumable has Decrement Only data items that are used by the System, the Authentication Chip cannot be reused without being completely reprogrammed by a valid Programming Station that has knowledge of the secret key.","Management Decision to Omit Authentication to Save Costs","Although not strictly an external attack, a decision to omit authentication in future Systems in order to save costs will have widely varying effects on different markets. In the case of high volume consumables, it is essential to remember that it is very difficult to introduce authentication after the market has started, as systems requiring authenticated consumables will not work with older consumables still in circulation. Likewise, it is impractical to discontinue authentication at any stage, as older Systems will not work with the new, unauthenticated, consumables. In he second case, older Systems can be individually altered by replacing the System Authentication Chip by a simple chip that has the same programming interface, but whose TST function always succeeds. Of course the System may be programmed to test for an always-succeeding TST function, and shut down. In the case of a specialized pairing, such as a car\/car-keys, or door\/door-key, or some other similar situation, the omission of authentication in future systems is trivial and non-repercussive. This is because the consumer is sold the entire set of System and Consumable Authentication Chips at the one time.","Garrote\/bribe Attack","This form of attack is only successful in one of two circumstances:\n\n","If humans or computer systems external to the Programming Station do not know the keys, there is no amount of force or bribery that can reveal them. The level of security against this kind of attack is ultimately a decision for the System\/Consumable owner, to be made according to the desired level of service. For example, a car company may wish to keep a record of all keys manufactured, so that a person can request a new key to be made for their car.","However this allows the potential compromise of the entire key database, allowing an attacker to make keys for any of the manufacturer's existing cars. It does not allow an attacker to make keys for any new cars. Of course, the key database itself may also be encrypted with a further key that requires a certain number of people to combine their key portions together for access. If no record is kept of which key is used in a particular car, there is no way to make additional keys should one become lost. Thus an owner will have to replace his car's Authentication Chip and all his car-keys. This is not necessarily a bad situation. By contrast, in a consumable such as a printer ink cartridge, the one key combination is used for all Systems and all consumables. Certainly if no backup of the keys is kept, there is no human with knowledge of the key, and therefore no attack is possible. However, a no-backup situation is not desirable for a consumable such as ink cartridges, since if the key is lost no more consumables can be made. The manufacturer should therefore keep a backup of the key information in several parts, where a certain number of people must together combine their portions to reveal the full key information. This may be required if case the chip programming station needs to be reloaded. In any case, none of these attacks are against Protocol 3 itself, since no humans are involved in the authentication process. Instead, it is an attack against the programming stage of the chips.","HMAC-SHA1","The mechanism for authentication is the HMAC-SHA1 algorithm, acting on one of:\n\n","We will now examine the HMAC-SHA1 algorithm in greater detail than covered so far, and describes an optimization of the algorithm that requires fewer memory resources than the original definition.","HMAC","The HMAC algorithm proceeds, given the following definitions:\n\n","The HMAC algorithm is as follows:\n\n","Thus:\n\nHMAC[M]=H[(K\u2295opad)|H[(K\u2295ipad)|M]]\n","HMAC-SHA1 algorithm is simply HMAC with H=SHA-1.\n\n","The SHA1 hashing algorithm is defined in the algorithm as summarized here.","Nine 32-bit constants are defined. There are 5 constants used to initialize the chaining variables, and there are 4 additive constants.",{"@attributes":{"id":"p-1457","num":"2091"},"tables":{"@attributes":{"id":"TABLE-US-00126","num":"00126"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Initial Chaining Values","Additive Constants"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"h","0x67452301","y","0x5A827999"]},{"entry":[{},"h","0xEFCDAB89","y","0x6ED9EBA1"]},{"entry":[{},"h","0x98BADCFE","y","0x8F1BBCDC"]},{"entry":[{},"h","0x10325476","y","0xCA62C1D6"]},{"entry":[{},"h","0xC3D2E1F0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Non-optimized SHA-1 requires a total of 2912 bits of data storage:\n\n","The following functions are defined for SHA-1:",{"@attributes":{"id":"p-1460","num":"2098"},"tables":{"@attributes":{"id":"TABLE-US-00127","num":"00127"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Symbolic Nomenclature","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["+","Addition modulo 2"]},{"entry":["X\u25a1Y","Result of rotating X left through Y bit positions"]},{"entry":["f(X, Y, Z)","(X \u039b Y) \u03bd (\u02dcX \u039b Z)"]},{"entry":["g(X, Y, Z)","(X \u039b Y) \u03bd (X \u039b Z) \u03bd (Y \u039b Z)"]},{"entry":["h(X, Y, Z)","X \u2295 Y \u2295 Z"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The hashing algorithm consists of firstly padding the input message to be a multiple of 512 bits and initializing the chaining variables Hwith h. The padded message is then processed in 512-bit chunks, with the output hash value being the final 160-bit value given by the concatenation of the chaining variables: H|H|H|H|H. The steps of the SHA-1 algorithm are now examined in greater detail.","Step 1. Preprocessing","The first step of SHA-1 is to pad the input message to be a multiple of 512 bits as follows and to initialize the chaining variables.",{"@attributes":{"id":"p-1463","num":"2101"},"tables":{"@attributes":{"id":"TABLE-US-00128","num":"00128"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Steps to follow to preprocess the input message"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Pad the input message","Append a 1 bit to the message"]},{"entry":[{},"Append 0 bits such that the length of the padded"]},{"entry":[{},"message is 64-bits short of a multiple of 512 bits."]},{"entry":[{},"Append a 64-bit value containing the length in"]},{"entry":[{},"bits of the original input message. Store the"]},{"entry":[{},"length as most significant bit through to least"]},{"entry":[{},"significant bit."]},{"entry":["Initialize the","H\u2190 h, H\u2190 h, H\u2190 h,"]},{"entry":["chaining variables","H\u2190 h, H\u2190 h"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The padded input message can now be processed. We process the message in 512-bit blocks. Each 512-bit block is in the form of 16\u00d732-bit words, referred to as InputWord.",{"@attributes":{"id":"p-1465","num":"2103"},"tables":{"@attributes":{"id":"TABLE-US-00129","num":"00129"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Steps to follow for each 512 bit block (InputWord)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Copy the 512 input","For j = 0 to 15"]},{"entry":["bits into X","X = InputWord"]},{"entry":["Expand Xinto X","For j = 16 to 79"]},{"entry":[{},"X\u2190 ((X\u2295 X\u2295 X\u2295 X)  1)"]},{"entry":["Initialize working","A \u2190 H, B \u2190 H, C \u2190 H, D \u2190 H, E \u2190 H"]},{"entry":"variables"},{"entry":["Round 1","For j = 0 to 19"]},{"entry":[{},"t \u2190 ((A5) + f(B, C, D) + E + X+ y)"]},{"entry":[{},"E \u2190 D, D \u2190 C, C \u2190 (B30), B \u2190 A, A \u2190 t"]},{"entry":["Round 2","For j = 20 to 39"]},{"entry":[{},"t \u2190 ((A5) + h(B, C, D) + E + X+ y)"]},{"entry":[{},"E \u2190 D, D \u2190 C, C \u2190 (B30), B \u2190 A, A \u2190 t"]},{"entry":["Round 3","For j = 40 to 59"]},{"entry":[{},"t \u2190 ((A5) + g(B, C, D) + E + X+ y)"]},{"entry":[{},"E \u2190 D, D \u2190 C, C \u2190 (B30), B \u2190 A, A \u2190 t"]},{"entry":["Round 4","For j = 60 to 79"]},{"entry":[{},"t \u2190 ((A5) + h(B, C, D) + E + X+ y)"]},{"entry":[{},"E \u2190 D, D \u2190 C, C \u2190 (B30), B \u2190 A, A \u2190 t"]},{"entry":["Update chaining","H\u2190 H+ A, H\u2190 H+ B,"]},{"entry":["variables","H\u2190 H+ C, H\u2190 H+ D,"]},{"entry":[{},"H\u2190 H+ E"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"After all the 512-bit blocks of the padded input message have been processed, the output hash value is the final 160-bit value given by: H|H|H|H|H.","Optimization for Hardware Implementation","The SHA-1 Step 2 procedure is not optimized for hardware. In particular, the 80 temporary 32-bit registers use up valuable silicon on a hardware implementation. This section describes an optimization to the SHA-1 algorithm that only uses 16 temporary registers. The reduction in silicon is from 2560 bits down to 512 bits, a saving of over 2000 bits. It may not be important in some applications, but in the Authentication Chip storage space must be reduced where possible. The optimization is based on the fact that although the original 16-word message block is expanded into an 80-word message block, the 80 words are not updated during the algorithm. In addition, the words rely on the previous 16 words only, and hence the expanded words can be calculated on-the-fly during processing, as long as we keep 16 words for the backward references. We require rotating counters to keep track of which register we are up to using, but the effect is to save a large amount of storage. Rather than index X by a single value j, we use a 5 bit counter to count through the iterations. This can be achieved by initializing a 5-bit register with either 16 or 20, and decrementing it until it reaches 0. In order to update the 16 temporary variables as if they were 80, we require 4 indexes, each a 4-bit register. All 4 indexes increment (with wraparound) during the course of the algorithm.",{"@attributes":{"id":"p-1468","num":"2106"},"tables":{"@attributes":{"id":"TABLE-US-00130","num":"00130"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Steps to follow for each 512 bit block (InputWord)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Initialize working","A \u2190 H, B \u2190 H, C \u2190 H, D \u2190 H, E \u2190 H"]},{"entry":["variables","N\u2190 13, N\u2190 8, N\u2190 2, N\u2190 0"]},{"entry":["Round 0","Do 16 times:"]},{"entry":["Copy the 512 input","X= InputWord"]},{"entry":["bits into X","[\u2191N, \u2191N, \u2191N]\u2191N4"]},{"entry":["Round 1A","Do 16 times:"]},{"entry":[{},"t \u2190 ((A5) + f(B, C, D) + E + X+ y)"]},{"entry":[{},"[\u2191N, \u2191N, \u2191N]\u2191N"]},{"entry":[{},"E \u2190 D, D \u2190 C, C \u2190 (B\u25a130), B \u2190 A, A \u2190 t"]},{"entry":["Round 1B","Do 4 times:"]},{"entry":[{},"X\u2190 ((X\u2295 X\u2295 X\u2295 X)  1)"]},{"entry":[{},"t \u2190 ((A5) + f(B, C, D) + E + X+ y)"]},{"entry":[{},"\u2191N, \u2191N, \u2191N, \u2191N"]},{"entry":[{},"E \u2190 D, D \u2190 C, C \u2190 (B30), B \u2190 A, A \u2190 t"]},{"entry":["Round 2","Do 20 times:"]},{"entry":[{},"X\u2190 ((X\u2295 X\u2295 X\u2295 X)  1)"]},{"entry":[{},"t \u2190 ((A5) + h(B, C, D) + E + X+ y)"]},{"entry":[{},"\u2191N, \u2191N, \u2191N, \u2191N"]},{"entry":[{},"E \u2190 D, D \u2190 C, C \u2190 (B30), B \u2190 A, A \u2190 t"]},{"entry":["Round 3","Do 20 times:"]},{"entry":[{},"X\u2190 ((X\u2295 X\u2295 X\u2295 X)  1)"]},{"entry":[{},"t \u2190 ((A5) + g(B, C, D) + E + X+ y)"]},{"entry":[{},"\u2191N, \u2191N, \u2191N, \u2191N"]},{"entry":[{},"E \u2190 D, D \u2190 C, C \u2190 (B\u25a130), B \u2190 A, A \u2190 t"]},{"entry":["Round 4","Do 20 times:"]},{"entry":[{},"X\u2190 ((X\u2295 X\u2295 X\u2295 X)  1)"]},{"entry":[{},"t \u2190 ((A5) + h(B, C, D) + E + X+ y)"]},{"entry":[{},"\u2191N, \u2191N, \u2191N, \u2191N"]},{"entry":[{},"E \u2190 D, D \u2190 C, C \u2190 (B30), B \u2190 A, A \u2190 t"]},{"entry":["Updating chaining","H\u2190 H+ A, H\u2190 H+ B,"]},{"entry":["variables","H\u2190 H+ C, H\u2190 H+ D,"]},{"entry":[{},"H\u2190 H+ E"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The incrementing of N, N, and Nduring Rounds 0 and 1A is optional. A software implementation would not increment them, since it takes time, and at the end of the 16 times through the loop, all 4 counters will be their original values. Designers of hardware may wish to increment all 4 counters together to save on control logic. Round 0 can be completely omitted if the caller loads the 512 bits of X.","HMAC-SHA1","In the Authentication Chip implementation, the HMAC-SHA1 unit only ever performs hashing on two types of inputs: on R using Kand on R|M using K. Since the inputs are two constant lengths, rather than have HMAC and SHA-1 as separate entities on chip, they can be combined and the hardware optimized. The padding of messages in SHA-1 Step 1 (a 1 bit, a string of 0 bits, and the length of the message) is necessary to ensure that different messages will not look the same after padding. Since we only deal with 2 types of messages, our padding can be constant 0s. In addition, the optimized version of the SHA-1 algorithm is used, where only 16 32-bit words are used for temporary storage. These 16 registers are loaded directly by the optimized HMAC-SHA1 hardware. The Nine 32-bit constants hand yare still required, although the fact that they are constants is an advantage for hardware implementation. Hardware optimized HMAC-SHA-1 requires a total of 1024 bits of data storage:\n\n","The following two sections describe the steps for the two types of calls to HMAC-SHA1.","H[R, K]","In case of producing the keyed hash of R using K, the original input message R is a constant length of 160 bits. We can therefore take advantage of this fact during processing. Rather than load Xduring the first part of the SHA-1 algorithm, we load Xdirectly, and thereby omit Round 0 of the optimized Process Block (Step 2) of SHA-1. The pseudocode takes on the following steps:",{"@attributes":{"id":"p-1473","num":"2116"},"tables":{"@attributes":{"id":"TABLE-US-00131","num":"00131"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Step","Description","Action"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u20021","Process K \u2295 ipad","X\u2190 K\u2295 0x363636 . . ."]},{"entry":[{},"\u20022",{},"X\u2190 0x363636 . . ."]},{"entry":[{},"\u20023",{},"H\u2190 h"]},{"entry":[{},"\u20024",{},"Process Block"]},{"entry":[{},"\u20025","Process R","X\u2190 R"]},{"entry":[{},"\u20026",{},"X\u2190 0"]},{"entry":[{},"\u20027",{},"Process Block"]},{"entry":[{},"\u20028",{},"Buff160\u2190 H"]},{"entry":[{},"\u20029","Process K \u2295 opad","X\u2190 K\u2295 0x5C5C5C . . ."]},{"entry":[{},"10",{},"X\u2190 0x5C5C5C . . ."]},{"entry":[{},"11",{},"H\u2190 h"]},{"entry":[{},"12",{},"Process Block"]},{"entry":[{},"13","Process previous H[x]","X\u2190 Result"]},{"entry":[{},"14",{},"X\u2190 0"]},{"entry":[{},"15",{},"Process Block"]},{"entry":[{},"16","Get results","Buff160\u2190 H"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{},"sub":"2"},"In the case of producing the keyed hash of R|M using K, the original input message is a constant length of 416 (256+160) bits. We can therefore take advantage of this fact during processing. Rather than load Xduring the first part of the SHA-1 algorithm, we load Xdirectly, and thereby omit Round 0 of the optimized. Process Block (Step 2) of SHA-1. The pseudocode takes on the following steps:",{"@attributes":{"id":"p-1475","num":"2118"},"tables":{"@attributes":{"id":"TABLE-US-00132","num":"00132"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Step","Description","Action"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u20021","Process K \u2295 ipad","X\u2190 K\u2295 0x363636 . . ."]},{"entry":[{},"\u20022",{},"X\u2190 0x363636 . . ."]},{"entry":[{},"\u20023",{},"H\u2190 h"]},{"entry":[{},"\u20024",{},"Process Block"]},{"entry":[{},"\u20025","Process R | M","X\u2190 R"]},{"entry":[{},"\u20026",{},"X\u2190 M"]},{"entry":[{},"\u20027",{},"X\u2190 0"]},{"entry":[{},"\u20028",{},"Process Block"]},{"entry":[{},"\u20029",{},"Temp \u2190 H"]},{"entry":[{},"10","Process K \u2295 opad","X\u2190 K\u2295 0x5C5C5C . . ."]},{"entry":[{},"11",{},"X\u2190 0x5C5C5C . . ."]},{"entry":[{},"12",{},"H\u2190 h"]},{"entry":[{},"13",{},"Process Block"]},{"entry":[{},"14","Process previous H[x]","X\u2190 Temp"]},{"entry":[{},"15",{},"X\u2190 0"]},{"entry":[{},"16",{},"Process Block"]},{"entry":[{},"17","Get results","Result \u2190 H"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Each Authentication Chip contains some non-volatile memory in order to hold the variables required by Authentication Protocol 3. The following non-volatile variables are defined:",{"@attributes":{"id":"p-1477","num":"2120"},"tables":{"@attributes":{"id":"TABLE-US-00133","num":"00133"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Size",{}]},{"entry":["Variable","(in"]},{"entry":["Name","bits)","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["M","256","16 words (each 16 bits) containing state data such as"]},{"entry":["[0 . . . 15]",{},"serial numbers, media remaining etc."]},{"entry":["K","160","Key used to transform R during authentication."]},{"entry":["K","160","Key used to transform M during authentication."]},{"entry":["R","160","Current random number"]},{"entry":["Access","32","The 16 sets of 2-bit AccessMode values for M[n]."]},{"entry":"Mode"},{"entry":"[0 . . . 15]"},{"entry":["MinTicks","32","The minimum number of clock ticks between calls to"]},{"entry":[{},{},"key-based functions"]},{"entry":["SIWritten","1","If set, the secret key information (K, K, and R) has"]},{"entry":[{},{},"been written to the chip. If clear, the secret information"]},{"entry":[{},{},"has not been written yet."]},{"entry":["IsTrusted","1","If set, the RND and TST functions can be called, but"]},{"entry":[{},{},"RD and WR functions cannot be called."]},{"entry":[{},{},"If clear, the RND and TST functions cannot be called,"]},{"entry":[{},{},"but RD and WR functions can be called."]},{"entry":["Total bits","802"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Note that if these variables are in Flash memory, it is not a simple matter to write a new value to replace the old. The memory must be erased first, and then the appropriate bits set. This has an effect on the algorithms used to change Flash memory based variables. For example, Flash memory cannot easily be used as shift registers. To update a Flash memory variable by a general operation, it is necessary to follow these steps:\n\n","A RESET of the Authentication Chip has no effect on these non-volatile variables.","M and Accessmode","Variables M[] through M[] are used to hold consumable state data, such as serial numbers, batch numbers, and amount of consumable remaining. Each M[n] register is 16 bits, making the entire M vector 256 bits (32 bytes). Clients cannot read from or written to individual M[n] variables. Instead, the entire vector, referred to as M, is read or written in a single logical access. M can be read using the RD (read) command, and written to via the WR (write) command. The commands only succeed if Kand Kare both defined (SIWritten=1) and the Authentication Chip is a consumable non-trusted chip (IsTrusted=0). Although M may contain a number of different data types, they differ only in their write permissions. Each data type can always be read. Once in client memory, the 256 bits can be interpreted in any way chosen by the client. The entire 256 bits of M are read at one time instead of in smaller amounts for reasons of security, as described in the chapter entitled Authentication. The different write permissions are outlined in the following table:",{"@attributes":{"id":"p-1481","num":"2128"},"tables":{"@attributes":{"id":"TABLE-US-00134","num":"00134"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data Type","Access Note"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Read Only","Can never be written to"]},{"entry":["Read Write","Can always be written to"]},{"entry":["Decrement","Can only be written to if the new value is less than the old"]},{"entry":["Only","value. Decrement Only values are typically 16-bit or 32-bit"]},{"entry":[{},"values, but can be any multiple of 16 bits."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"To accomplish the protection required for writing, a 2-bit access mode value is defined for each M[n]. The following table defines the interpretation of the 2-bit access mode bit-pattern:",{"@attributes":{"id":"p-1483","num":"2130"},"tables":{"@attributes":{"id":"TABLE-US-00135","num":"00135"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},{},{},"Action taken during"]},{"entry":["Bits","Op","Interpretation","Write command"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["00","RW","ReadWrite","The new 16-bit value is always"]},{"entry":[{},{},{},"written to M[n]."]},{"entry":["01","MSR","Decrement Only","The new 16-bit value is only"]},{"entry":[{},{},"(Most Significant","written to M[n] if it is less"]},{"entry":[{},{},"Region)","than the value currently in M[n]."]},{"entry":[{},{},{},"This is used for access to the Most"]},{"entry":[{},{},{},"Significant 16 bits of a Decrement"]},{"entry":[{},{},{},"Only number."]},{"entry":["10","NMSR","Decrement Only","The new 16-bit value is only"]},{"entry":[{},{},"(Not the Most","written to M[n] if M[n+1] can"]},{"entry":[{},{},"Significant Region)","also be written. The NMSR access"]},{"entry":[{},{},{},"mode allows multiple precision"]},{"entry":[{},{},{},"values of 32 bits and more"]},{"entry":[{},{},{},"(multiples of 16 bits) to decrement."]},{"entry":["11","RO","Read Only","The new 16-bit value is ignored."]},{"entry":[{},{},{},"M[n] is left unchanged."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The 16 sets of access mode bits for the 16 M[n] registers are gathered together in a single 32-bit AccessMode register The 32 bits of the AccessMode register correspond to M[n] with n as follows:",{"@attributes":{"id":"p-1485","num":"2132"},"tables":{"@attributes":{"id":"TABLE-US-00136","num":"00136"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["MSB","LSB"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"16"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"9","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"10","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"11","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"12","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"13","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"14","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"15","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"16","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["15","14","13","12","11","10","9","8","7","6","5","4","3","2","1","0"]},{"entry":{"@attributes":{"namest":"1","nameend":"16","align":"center","rowsep":"1"}}}]}}]}}},"Each 2-bit value is stored in hi\/lo format. Consequently, if M[-] were access mode MSR, with M[-] access mode RO, the 32-bit AccessMode register would be:\n\n","During execution of a WR (write) command, AccessMode[n] is examined for each M[n], and a decision made as to whether the new M[n] value will replace the old. The AccessMode register is set using the Authentication Chip's SAM (Set Access Mode) command. Note that the Decrement Only comparison is unsigned, so any Decrement Only values that require negative ranges must be shifted into a positive range. For example, a consumable with a Decrement Only data item range of \u221250 to 50 must have the range shifted to be 0 to 100. The System must then interpret the range 0 to 100 as being \u221250 to 50. Note that most instances of Decrement Only ranges are N to 0, so there is no range shift required. For Decrement Only data items, arrange the data in order from most significant to least significant 16-bit quantities from M[n] onward. The access mode for the most significant 16 bits (stored in M[n]) should be set to MSR. The remaining registers (M[n+1], M[n+2] etc) should have their access modes set to NMSR. If erroneously set to NMSR, with no associated MSR region, each NMSR region will be considered independently instead of being a multi-precision comparison.","K","Kis the 160-bit secret key used to transform R during the authentication protocol. Kis programmed along with Kand R with the SSI (Set Secret Information) command. Since Kmust be kept secret, clients cannot directly read K. The commands that make use of Kare RND and RD. RND returns a pair R, F[R] where R is a random number, while RD requires an X, F[X] pair as input. Kis used in the keyed one-way hash function HMAC-SHA1. As such it should be programmed with a physically generated:random number, gathered from a physically random phenomenon. Kmust NOT be generated with a computer-run random number generator. The security of the Authentication chips depends on K, Kand R being generated in a way that is not deterministic. For example, to set Ki, a person can toss a fair coin 160 times, recording heads as 1, and tails as 0. Kis automatically cleared to 0 upon execution of a CLR command. It can only be programmed to a non-zero value by the SSI command.","K","Kis the 160-bit secret key used to transform M|R during the authentication protocol. Kis programmed along with Kand R with the SSI (Set Secret Information) command. Since Kmust be kept secret, clients cannot directly read K. The commands that make use of Kare RD and TST. RD returns a pair M, F[M X] where X was passed in as one of the parameters to the RD function. TST requires an M, F[M|R] pair as input, where R was obtained from the Authentication Chip's RND function. Kis used in the keyed one-way hash function HMAC-SHA1. As such it should be programmed with a physically generated random number, gathered from a physically random phenomenon. Kmust NOT be generated with a computer-run random number generator. The security of the Authentication chips depends on K, Kand R being generated in a way that is not deterministic. For example, to set K, a person can toss a fair coin 160 times, recording heads as 1, and tails as 0. Kis automatically cleared to 0 upon execution of a CLR command. It can only be programmed to a non-zero value by the SSI command.","R and IsTrusted","R is a 160-bit random number seed that is programmed along with Kand Kwith the SSI (Set Secret Information) command. R does not have to be kept secret, since it is given freely to callers via the RND command. However R must be changed only by the Authentication Chip, and not set to any chosen value by a caller. R is used during the TST command to ensure that the R from the previous call to RND was used to generate the F[M|R] value in the non-trusted Authentication Chip (ChipA). Both RND and TST are only used in trusted Authentication Chips (ChipT). IsTrusted is a 1-bit flag register that determines whether or not the Authentication Chip is a trusted chip (ChipT):\n\n","The IsTrusted bit has the added advantage of reducing the number of available R, F[R] pairs obtainable by an attacker, yet still maintain the integrity of the Authentication protocol. To obtain valid R, F[R] pairs, an attacker requires a System Authentication Chip, which is more expensive and less readily available than the consumables. Both R and the IsTrusted bit are cleared to 0 by the CLR command. They are both written to by the issuing of the SSI command. The IsTrusted bit can only set by storing a non-zero seed value in R via the SSI command (R must be non-zero to be a valid LFSR state, so this is quite reasonable). R is changed via a 160-bit maximal period LFSR with taps on bits , , , and , and is changed only by a successful call to TST (where 1 is returned).","Authentication Chips destined to be trusted Chips used in Systems (ChipT) should have their IsTrusted bit set during programming, and Authentication Chips used in Consumables (ChipA) should have their IsTrusted bit kept clear (by storing 0 in R via the SSI command during programming). There is no command to read or write the IsTrusted bit directly. The security of the Authentication Chip does not only rely upon the randomness of Kand Kand the strength of the HMAC-SHA1 algorithm. To prevent an attacker from building a sparse lookup table, the security of the Authentication Chip also depends on the range of R over the lifetime of all Systems. What this means is that an attacker must not be able to deduce what values of R there are in produced and future Systems. As such R should be programmed with a physically generated random number, gathered from a physically random phenomenon. R must NOT be generated with a computer-run random number generator. The generation of R must not be deterministic. For example, to generate an R for use in a trusted System chip, a person can toss a fair coin 160 times, recording heads as 1, and tails as 0.0 is the only non-valid initial value for a trusted R is 0 (or the IsTrusted bit will not be set).","SIWritten","The SIWritten (Secret Information Written) 1-bit register holds the status of the secret information stored within the Authentication Chip. The secret information is K, Kand R. A client cannot directly access the SIWritten bit. Instead, it is cleared via the CLR command (which also clears K, Kand R). When the Authentication Chip is programmed with secret keys and random number seed using the SSI command (regardless of the value written), the SIWritten bit is set automatically. Although R is strictly not secret, it must be written together with Kand Kto ensure that an attacker cannot generate their own random number seed in order to obtain chosen R, F[R] pairs. The SIWritten status bit is used by all functions that access K, K, or R. If the SIWritten bit is clear, then calls to RD, WR, RND, and TST are interpreted as calls to CLR.","MinTicks","There are two mechanisms for preventing an attacker from generating multiple calls to TST and RD functions in a short period of time. The first is a clock limiting hardware component that prevents the internal clock from operating at a speed more than a particular maximum (e.g. 10 MHz). The second mechanism is the 32-bit MinTicks register, which is used to specify the minimum number of clock ticks that must elapse between calls to key-based functions. The MinTicks variable is cleared to 0 via the CLR command. Bits can then be set via the SMT (Set MinTicks) command. The input parameter to SMT contains the bit pattern that represents which bits of MinTicks are to be set. The practical effect is that an attacker can only increase the value in MinTicks (since the SMT function only sets bits). In addition, there is no function provided to allow a caller to read the current value of this register. The value of MinTicks depends on the operating clock speed and the notion of what constitutes a reasonable time between key-based function calls (application specific). The duration of a single tick depends on the operating clock speed. This is the maximum of the input clock speed and the Authentication Chip's clock-limiting hardware. For example, the Authentication Chip's clock-limiting hardware may be set at 10 MHz (it is not changeable), but the input clock is 1 MHz. In this case, the value of 1 tick is based on 1 MHz, not 10 MHz. If the input clock was 20 MHz instead of 1 MHz, the value of 1 tick is based on 10 MHz (since the clock speed is limited to 10 MHz).","Once the duration of a tick is known, the MinTicks value can to be set. The value for MinTicks is the minimum number of ticks required to pass between calls to the key-based RD and TST functions. The value is a real-time number, and divided by the length of an operating tick. Suppose the input clock speed matches the maximum clock speed of 10 MHz. If we want a minimum of 1 second between calls to key based functions, the value for MinTicks is set to 10,000,000. Consider an attacker attempting to collect X, F[X] pairs by calling RND, RD and TST multiple times. If the MinTicks value is set such that the amount of time between calls to TST is 1 second, then each pair requires 1 second to generate. To generate 2pairs (only requiring 1.25 GB of storage), an attacker requires more than 1 year. An attack requiring 2pairs would require 5.84\u00d710years using a single chip, or 584 years if 1 billion chips were used, making such an attack completely impractical in terms of time (not to mention the storage requirements!).","With regards to K, it should be noted that the MinTicks variable only slows down an attacker and causes the attack to cost more since it does not stop an attacker using multiple System chips in parallel. However MinTicks does make an attack on Kmore difficult, since each consumable has a different M (part of M is random read-only data). In order to launch a differential attack, minimally different inputs are required, and this can only be achieved with a single consumable (containing an effectively constant part of M). Minimally different inputs require the attacker to use a single chip, and MinTicks causes the use of a single chip to be slowed down. If it takes a year just to get the data to start searching for values to begin a differential attack this increases the cost of attack and reduces the effective market time of a clone consumable.","Authentication Chip Commands","The System communicates with the Authentication Chips via a simple operation command set. This section details the actual commands and parameters necessary for implementation of Protocol 3. The Authentication Chip is defined here as communicating to System via a serial interface as a minimum implementation. It is a trivial matter to define an equivalent chip that operates over a wider interface (such as 8, 16 or 32 bits). Each command is defined by 3-bit opcode. The interpretation of the opcode can depend on the current value of the IsTrusted bit and the current value of the IsWritten bit. The following operations are defined:",{"@attributes":{"id":"p-1498","num":"2148"},"tables":{"@attributes":{"id":"TABLE-US-00137","num":"00137"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":["Op","T","W","Mn","Input","Output","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["000","\u2014","\u2014","CLR","\u2014","\u2014","Clear"]},{"entry":["001","0","0","SSI","[160, 160, 160]","\u2014","Set Secret"]},{"entry":[{},{},{},{},{},{},"Information"]},{"entry":["010","0","1","RD","[160, 160]","[256, 160]","Read M securely"]},{"entry":["010","1","1","RND","\u2014","[160, 160]","Random"]},{"entry":["011","0","1","WR","[256]","\u2014","Write M"]},{"entry":["011","1","1","TST","[256, 160]","[1]","Test"]},{"entry":["100","0","1","SAM","[32]","[32]","Set Access Mode"]},{"entry":["101","\u2014","1","GIT","\u2014","[1]","Get Is Trusted"]},{"entry":["110","\u2014","1","SMT","[32]","\u2014","Set Min Ticks"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":"Op = Opcode, "},{"entry":"T = IsTrusted value, "},{"entry":"W = IsWritten value, "},{"entry":"Mn = Mnemonic, "},{"entry":"[n] = number of bits required for parameter "}]}}}}},"Any command not defined in this table is interpreted as NOP (No Operation). Examples include opcodes  and  regardless of IsTrusted or IsWritten values), and any opcode other than SSI when IsWritten=0. Note that the opcodes for RD and RND are the same, as are the opcodes for WR and TST. The actual command run upon receipt of the opcode will depend on the current value of the IsTrusted bit (as long as IsWritten is 1). Where the IsTrusted bit is clear, RD and WR functions will be called. Where the IsTrusted bit is set, RND and TST functions will be called. The two sets of commands are mutually exclusive between trusted and non-trusted Authentication Chips, and the same opcodes enforces this relationship. Each of the commands is examined in detail in the subsequent sections. Note that some algorithms are specifically designed because Flash memory is assumed for the implementation of non-volatile variables.",{"@attributes":{"id":"p-1500","num":"2150"},"tables":{"@attributes":{"id":"TABLE-US-00138","num":"00138"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"CLR","Clear"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input","None"]},{"entry":[{},"Output","None"]},{"entry":[{},"Changes","All"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The CLR (Clear) Command is designed to completely erase the contents of all Authentication Chip memory. This includes all keys and secret information, access mode bits, and state data. After the execution of the CLR command, an Authentication Chip will be in a programmable state, just as if it had been freshly manufactured. It can be reprogrammed with a new key and reused. A CLR command consists of simply the CLR command opcode. Since the Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A CLR command is therefore sent as bits - of the CLR opcode. A total of 3 bits are transferred. The CLR command can be called directly at any time. The order of erasure is important. SIWritten must be cleared first, to disable further calls to key access functions (such as RND, TST, RD and WR). If the AccessMode bits are cleared before SIWritten, an attacker could remove power at some point after they have been cleared, and manipulate M, thereby have a better chance of retrieving the secret information with a partial chosen text attack. The CLR command is implemented with the following steps:",{"@attributes":{"id":"p-1502","num":"2152"},"tables":{"@attributes":{"id":"TABLE-US-00139","num":"00139"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Step","Action"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","Erase SIWritten"]},{"entry":[{},{},"Erase IsTrusted"]},{"entry":[{},{},"Erase K"]},{"entry":[{},{},"Erase K"]},{"entry":[{},{},"Erase R"]},{"entry":[{},{},"Erase M"]},{"entry":[{},"2","Erase AccessMode"]},{"entry":[{},{},"Erase MinTicks"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Once the chip has been cleared it is ready for reprogramming and reuse. A blank chip is of no use to an attacker, since although they can create any value for M (M can be read from and written to), key-based functions will not provide any information as Kand Kwill be incorrect. It is not necessary to consume any input parameter bits if CLR is called for any opcode other than CLR. An attacker will simply have to RESET the chip. The reason for calling CLR is to ensure that all secret information has been destroyed, making the chip useless to an attacker.","SSI-Set Secret Information",{"@attributes":{"id":"p-1504","num":"0000"},"ul":{"@attributes":{"id":"ul0347","list-style":"none"},"li":{"@attributes":{"id":"ul0347-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0348","list-style":"none"},"li":["Input: K, K, R=[160 bits, 160 bits, 160 bits]","Output: None","Changes: K, K, R, SIWritten, IsTrusted"]}}}},"The SSI (Set Secret Information) command is used to load the K, Kand R variables, and to set SIWritten and IsTrusted flags for, later calls to RND, TST, RD and WR commands. An SSI command consists of the SSI command opcode followed by the secret information to be stored in the K, Kand R registers. Since the Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. An SSI command is therefore sent as: bits - of the SSI opcode, followed by bits - of the new value for K, bits - of the new value for K, and finally bits - of the seed value for R. A total of 483 bits are transferred. The K, K, R, SIWritten, and IsTrusted registers are all cleared to 0 with a CLR command. They can only be set using the SSI command.","The SSI command uses the flag SIWritten to store the fact that data has been loaded into K, K, and R. If the SIWritten and IsTrusted flags are clear (this is the case after a CLR instruction), then K, Kand R are loaded with the new values. If either flag is set, an attempted call to SSI results in a CLR command being executed, since only an attacker or an erroneous client would attempt to change keys or the random seed without calling CLR first. The SSI command also sets the IsTrusted flag depending on the value for R. If R=0, then the chip is considered untrustworthy, and therefore IsTrusted remains at 0. If R\u22600, then the chip is considered trustworthy, and therefore IsTrusted is set to 1. Note that the setting of the IsTrusted bit only occurs during the SSI command. If an Authentication Chip is to be reused, the CLR command must be called first. The keys can then be safely reprogrammed with an SSI command, and fresh state information loaded into M using the SAM and WR commands. The SSI command is implemented with the following steps:",{"@attributes":{"id":"p-1507","num":"2159"},"tables":{"@attributes":{"id":"TABLE-US-00140","num":"00140"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Step","Action"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","CLR"]},{"entry":[{},"2","K\u2190 Read 160 bits from client"]},{"entry":[{},"3","K\u2190 Read 160 bits from client"]},{"entry":[{},"4","R \u2190 Read 160 bits from client"]},{"entry":[{},"5","IF (R \u2260 0)"]},{"entry":[{},{},"IsTrusted \u2190 1"]},{"entry":[{},"6","SIWritten \u2190 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"RD - Read "]},{"entry":[{},"Input: X, F[X] = [160 bits, 160 bits]"]},{"entry":[{},"Output: M, F[X|M] = [256 bits, 160 bits]"]},{"entry":[{},"Changes: R "]}]}}}}},"The RD (Read) command is used to securely read the entire 256 bits of state data (M) from a non-trusted Authentication Chip. Only a valid Authentication Chip will respond correctly to the RD request. The output bits from the RD command can be fed as the input bits to the TST command on a trusted Authentication Chip for verification, with the first 256 bits (M) stored for later use if (as we hope) TST returns 1. Since the Authentication Chip is serial, the command and input parameters must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A RD command is therefore: bits - of the RD opcode, followed by bits - of X, and bits - of F[X]. 323 bits are transferred in total. X and F[X] are obtained by calling the trusted Authentication Chip's RND command. The 320 bits output by the trusted chip's RND command can therefore be fed directly into the non-trusted chip's RD command, with no need for these bits to be stored by System. The RD command can only be used when the following conditions have been met:",{"@attributes":{"id":"p-1509","num":"2161"},"tables":{"@attributes":{"id":"TABLE-US-00141","num":"00141"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SIWritten = 1","indicating that K, Kand R have been set up via the SSI"]},{"entry":[{},"command; and"]},{"entry":["IsTrusted = 0","indicating the chip is not trusted since it is not permitted"]},{"entry":[{},"to generate random number sequences;"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In addition, calls to RD must wait for the MinTicksRemaining register to reach 0. Once it has done so, the register is reloaded with MinTicks to ensure that a minimum time will elapse between calls to RD. Once MinTicksRemaining has been reloaded with MinTicks, the RD command verifies that the input parameters are valid. This is accomplished by internally generating F[X] for the input X, and then comparing the result against the input F[X]. This generation and comparison must take the same amount of time regardless of whether the input parameters are correct or not. If the times are not the same, an attacker can gain information about which bits of F[X] are incorrect. The only way for the input parameters to be invalid is an erroneous System (passing the wrong bits), a case of the wrong consumable in the wrong System, a bad trusted chip (generating bad pairs), or an attack on the Authentication Chip. A constant value of 0 is returned when the input parameters are wrong. The time taken for 0 to be returned must be the same for all bad inputs so that attackers can learn nothing about what was invalid. Once the input parameters have been verified the output values are calculated. The 256 bit content of M are transferred in the following order: bits - of M[], bits - of M[], through to bits - of M[]. F[X|M] is calculated and output as bits -. The R register is used to store the X value during the validation of the X, F[X] pair. This is because RND and RD are mutually exclusive. The RD command is implemented with the following steps:",{"@attributes":{"id":"p-1511","num":"2163"},"tables":{"@attributes":{"id":"TABLE-US-00142","num":"00142"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Step","Action"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","IF (MinTicksRemaining \u2260 0"]},{"entry":[{},"GOTO 1"]},{"entry":["2","MinTicksRemaining \u2190 MinTicks"]},{"entry":["3","R \u2190 Read 160 bits from client"]},{"entry":["4","Hash \u2190 Calculate F[R]"]},{"entry":["5","OK \u2190 (Hash = next 160 bits from client)"]},{"entry":[{},"Note that this operation must take constant time so an attacker"]},{"entry":[{},"cannot determine how much of their guess is correct."]},{"entry":["6","IF(OK)"]},{"entry":[{},"Output 256 bits of M to client"]},{"entry":[{},"ELSE"]},{"entry":[{},"Output 256 bits of 0 to client"]},{"entry":["7","Hash \u2190 Calculate F[R|M]"]},{"entry":["8","IF(OK)"]},{"entry":[{},"Output 160 bits of Hash to client"]},{"entry":[{},"ELSE"]},{"entry":[{},"Output 160 bits of 0 to client"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"RND - Random "},{"entry":"Input: None "},{"entry":"Output: R, F[R] = [160 bits, 160 bits]"},{"entry":"Changes: None "}]}}}}},"The RND (Random) command is used by a client to obtain a valid R, F[R] pair for use in a subsequent authentication via the RD and TST commands. Since there are no input parameters, an RND command is therefore simply bits - of the RND opcode. The RND command can only be used when the following conditions have been met:",{"@attributes":{"id":"p-1513","num":"2165"},"tables":{"@attributes":{"id":"TABLE-US-00143","num":"00143"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SIWritten = 1","indicating Kand R have been set up via the SSI"]},{"entry":[{},"command;"]},{"entry":["IsTrusted = 1","indicating the chip is permitted to generate random"]},{"entry":[{},"number sequences;"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"RND returns both R and F[R] to the caller. The 288-bit output of the RND command can be fed straight into the non-trusted chip's RD command as the input parameters. There is no need for the client to store them at all, since they are not required again. However the TST command will only succeed if the random number passed into the RD command was obtained first from the RND command. If a caller only calls RND multiple times, the same R, F[R] pair will be returned each time. R will only advance to the next random number in the sequence after a successful call to TST. See TST for more information. The RND command is implemented with the following steps:",{"@attributes":{"id":"p-1515","num":"2167"},"tables":{"@attributes":{"id":"TABLE-US-00144","num":"00144"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Step","Action"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","Output 160 bits of R to client"]},{"entry":[{},"2","Hash \u2190 Calculate F[R]"]},{"entry":[{},"3","Output 160 bits of Hash to client"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"TST - Test "]},{"entry":[{},"Input: X, F[R|X] = [256 bits, 160 bits]"]},{"entry":[{},"Output: 1 or 0 = [1 bit]"]},{"entry":[{},"Changes: M, R and MinTicksRemaining (or all registers if attack detected) "]}]}}}}},"The TST (Test) command is used to authenticate a read of M from a non-trusted Authentication Chip. The TST (Test) command consists of the TST command opcode followed by input parameters: X and F[R|X]. Since the, Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A TST command is therefore: bits - of the TST opcode, followed by bits - of M, bits - of F[|M]. 419 bits are transferred in total. Since the last 416 input bits are obtained as the output bits from a RD command to a non-trusted Authentication Chip, the entire data does not even have to be stored by the client. Instead, the bits can be passed directly to the trusted Authentication Chip's TST command. Only the 256 bits of M should be kept from a RD command. The TST command can only be used when the following conditions have been met:",{"@attributes":{"id":"p-1517","num":"2169"},"tables":{"@attributes":{"id":"TABLE-US-00145","num":"00145"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SIWritten = 1","indicating Kand R have been set up via the SSI"]},{"entry":[{},"command;"]},{"entry":["IsTrusted = 1","indicating the chip is permitted to generate random"]},{"entry":[{},"number sequences;"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In addition, calls to TST must wait for the MinTicksRemaining register to reach 0. Once it has done so, the register is reloaded with MimTicks to ensure that a minimum time will elapse between calls to TST. TST causes the internal M value to be replaced by the input M value. F[M|R] is then calculated, and compared against the 160 bit input hash value. A single output bit is produced: 1 if they are the same, and 0 if they are different. The use of the internal M value is to save space on chip, and is the reason why RD and TST are mutually exclusive commands. If the output bit is 1, R is updated to be the next random number in the sequence. This forces the caller to use a new random number each time RD and TST are called. The resultant output bit is not output until the entire input string has been compared, so that the time to evaluate the comparison in the TST function is always the same. Thus no attacker can compare execution times or number of bits processed before an output is given.","The next random number is generated from R using a 160-bit maximal period LFSR (tap selections on bits , , , and ). The initial 160-bit value for R is set up via the SSI command, and can be any random number except 0 (an LFSR filled with 0s will produce a never-ending stream of 0s). R is transformed by XORing bits , , , and  together, and shifting all 160 bits right 1 bit using the XOR result as the input bit to b. The new R will be returned on the next call to RND. Note that the time taken for 0 to be returned from TST must be the same for all bad inputs so that attackers can learn nothing about what was invalid about the input.","The TST command is implemented with the following steps:",{"@attributes":{"id":"p-1521","num":"2173"},"tables":{"@attributes":{"id":"TABLE-US-00146","num":"00146"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Step","Action"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","IF (MinTicksRemaining \u2260 0"]},{"entry":[{},"GOTO 1"]},{"entry":["2","MinTicksRemaining \u2190 MinTicks"]},{"entry":["3","M \u2190 Read 256 bits from client"]},{"entry":["4","IF(R = 0)"]},{"entry":[{},"GOTO CLR"]},{"entry":["5","Hash \u2190 Calculate F[R|M]"]},{"entry":["6","OK \u2190 (Hash = next 160 bits from client)"]},{"entry":[{},"Note that this operation must take constant time so an attacker"]},{"entry":[{},"cannot determine how much of their guess is correct."]},{"entry":["7","IF(OK)"]},{"entry":[{},"Temp \u2190 R"]},{"entry":[{},"Erase R"]},{"entry":[{},"Advance TEMP via LFSR"]},{"entry":[{},"R \u2190 TEMP"]},{"entry":["8","Output 1 bit of OK to client"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Note that we can't simply advance R directly in Step 7 since R is Flash memory, and must be erased in order for any set bit to become 0. If power is removed from the Authentication Chip during Step 7 after erasing the old value of R, but before the new value for R has been written, then R will be erased but not reprogrammed. We therefore have the situation of IsTrusted=1, yet R=0, a situation only possible due to an attacker. Step 4 detects this event, and takes action if the attack is detected. This problem can be avoided by having a second 160-bit Flash register for R and a Validity Bit, toggled after the new value has been loaded. It has not been included in this implementation for reasons of space, but if chip space allows it, an extra 160-bit Flash register would be useful for this purpose.",{"@attributes":{"id":"p-1523","num":"2175"},"tables":{"@attributes":{"id":"TABLE-US-00147","num":"00147"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WR - WRITE"]},{"entry":[{},"Input: M= [256 bits]"]},{"entry":[{},"Output: None"]},{"entry":[{},"Changes: M"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"A WR (Write) command is used to update the writeable parts of M containing Authentication Chip state data. The WR command by itself is not secure. It must be followed by an authenticated read of M (via a RD command) to ensure that the change was made as specified. The WR command is called by passing the WR command opcode followed by the new 256 bits of data to be written to M. Since the Authentication Chip is serial, the new value for M must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A WR command is therefore: bits - of the WR opcode, followed by bits - of M[], bits - of M[], through to bits - of M[]. 259 bits are transferred in total. The WR command can only be used when SIWritten=1, indicating that K, Kand R have been set up via the SSI command (if SIWritten is 0, then K, Kand R have not been setup yet, and the CLR command is called instead). The ability to write to a specific M[n] is governed by the corresponding Access Mode bits as stored in the AccessMode register. The AccessMode bits can be set using the SAM command. When writing the new value to M[n] the fact that M[n] is Flash memory must be taken into account. All the bits of M[n] must be erased, and then the appropriate bits set. Since these two steps occur on different cycles, it leaves the possibility of attack open. An attacker can remove power after erasure, but before programming with the new value. However, there is no advantage to an attacker in doing this:\n\n","The WR command is implemented with the following steps:",{"@attributes":{"id":"p-1526","num":"2181"},"tables":{"@attributes":{"id":"TABLE-US-00148","num":"00148"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Step","Action"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","DecEncountered \u2190 0"]},{"entry":[{},"EqEncountered \u2190 0"]},{"entry":[{},"n \u2190 15"]},{"entry":["2","Temp \u2190 Read 16 bits from client"]},{"entry":["3","AM = AccessMode[\u02dcn]"]},{"entry":"Compare to the previous value"},{"entry":["5","LT \u2190 (Temp < M[\u02dcn]) [comparison is unsigned]"]},{"entry":[{},"EQ \u2190 (Temp = M[\u02dcn])"]},{"entry":["6","WE \u2190 (AM = RW) "]},{"entry":[{},"((AM = MSR) LT) "]},{"entry":[{},"((AM = NMSR) (DecEncountered LT))"]},{"entry":["7","DecEncountered \u2190 ((AM = MSR) LT) "]},{"entry":[{},"((AM = NMSR) DecEncountered) "]},{"entry":[{},"((AM = NMSR) EqEncountered LT)"]},{"entry":[{},"EqEncountered \u2190 ((AM = MSR) EQ) "]},{"entry":[{},"((AM = NMSR) EqEncountered EQ)"]},{"entry":"Advance to the next Access Mode set"},{"entry":"and write the new M[\u02dcn] if"},{"entry":"applicable"},{"entry":["8","IF (WE)"]},{"entry":[{},"Erase M[\u02dcn]"]},{"entry":[{},"M[\u02dcn] \u2190 Temp"]},{"entry":["10",{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00037","he":"2.79mm","wi":"1.78mm","file":"US07050143-20060523-P00803.TIF","alt":"custom character","img-content":"character","img-format":"tif"}},"sub":"n"}]},{"entry":["11","IF(n \u2260 0)"]},{"entry":[{},"GOTO 2"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"SAM - Set AccessMode "},{"entry":"Input: AccessMode= [32 bits]"},{"entry":"Output: AccessMode = [32 bits]"},{"entry":"Changes: AccessMode "}]}}}}},"The SAM (Set Access Mode) command is used to set the 32 bits of the AccessMode register, and is only available for use in consumable Authentication Chips (where the IsTrusted flag=0). The SAM command is called by passing the SAM command opcode followed by a 32-bit value that is used to set bits in the AccessMode register. Since the Authentication Chip is serial, the data must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A SAM command is therefore: bits - of the SAM opcode, followed by bits - of bits to be set in AccessMode. 35 bits are transferred in total. The AccessMode register is only cleared to 0 upon execution of a CLR command. Since an access mode of 00 indicates an access mode of RW (read\/write), not setting any AccessMode bits after a CLR means that all of M can be read from and written to. The SAM command only sets bits in the AccessMode register. Consequently a client can change the access mode bits for M[n] from RW to RO (read only) by setting the appropriate bits in a 32-bit word, and calling SAM with that 32-bit value as the input parameter. This allows the programming of the access mode bits at different times, perhaps at different stages of the manufacturing process. For example, the read only random data can be written to during the initial key programming stage, while allowing a second programming stage for items such as consumable serial numbers.","Since the SAM command only sets bits, the effect is to allow the access mode bits corresponding to M[n] to progress from RW to either MSR, NMSR, or RO. It should be noted that an access mode of MSR can be changed to RO, but this would not help an attacker, since the authentication of M after a write to a doctored Authentication Chip would detect that the write was not successful and hence abort the operation. The setting of bits corresponds to the way that Flash memory works best. The only way to clear bits in the AccessMode register, for example to change a Decrement Only M[n] to be Read\/Write, is to use the CLR command. The CLR command not only erases (clears) the AccessMode register, but also clears the keys and all of M. Thus the AccessMode[n] bits corresponding to M[n] can only usefully be changed once between CLR commands. The SAM command returns the new value of the AccessMode register (after the appropriate bits have been set due to the input parameter). By calling SAM with an input parameter of 0, AccessMode will not be changed, and therefore the current value of AccessMode will be returned to the caller.","The SAM command is implemented with the following steps:",{"@attributes":{"id":"p-1530","num":"2185"},"tables":{"@attributes":{"id":"TABLE-US-00149","num":"00149"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Step","Action"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","Temp \u2190 Read 32 bits from client"]},{"entry":[{},"2","SetBits(AccessMode, Temp)"]},{"entry":[{},"3","Output 32 bits of AccessMode to client"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"GIT - Get Is Trusted "]},{"entry":[{},"Input: None "]},{"entry":[{},"Output: IsTrusted = [1 bit]"]},{"entry":[{},"Changes: None "]}]}}}}},"The GIT (Get Is Trusted) command is used to read the current value of the IsTrusted bit on the Authentication Chip. If the bit returned is 1, the Authentication Chip is a trusted System Authentication Chip. If the bit returned is 0, the Authentication Chip is a consumable Authentication Chip. A GIT command consists of simply the GIT command opcode. Since the Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A GIT command is therefore sent as bits - of the GIT opcode. A total of 3 bits are transferred. The GIT command is implemented with the following steps:",{"@attributes":{"id":"p-1532","num":"2187"},"tables":{"@attributes":{"id":"TABLE-US-00150","num":"00150"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Step","Action"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","Output IsTrusted bit to client"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"SMT - Set MinTicks "]},{"entry":[{},"Input: MinTicks= [32 bits]"]},{"entry":[{},"Output: None "]},{"entry":[{},"Changes: MinTicks "]}]}}}}},"The SMT (Set MinTicks) command is used to set bits in the MinTicks register and hence define the minimum number of ticks that must pass in between calls to TST and RD. The SMT command is called by passing the SMT command opcode followed by a 32-bit value that is used to set bits in the MinTicks register. Since the Authentication Chip is serial, the data must be transferred one bit at a time. The bit order is LSB to MSB for each command component. An SMT command is therefore: bits - of the SMT opcode, followed by bits - of bits to be set in MinTicks. 35 bits are transferred in total. The MinTicks register is only cleared to 0 upon execution of a CLR command. A value of 0 indicates that no ticks need to pass between calls to key-based functions. The functions may therefore be called as frequently as the clock speed limiting hardware allows the chip to run.","Since the SMT command only sets bits, the effect is to allow a client to set a value, and only increase the time delay if further calls are made. Setting a bit that is already set has no effect, and setting a bit that is clear only serves to slow the chip down further. The setting of bits corresponds to the way that Flash memory works best. The only way to clear bits in the MinTicks register, for example to change a value of 10 ticks to a value of 4 ticks, is to use the CLR command. However the CLR command clears the MinTicks register to 0 as well as clearing all keys and M. It is therefore useless for an attacker. Thus the MinTicks register can only usefully be changed once between CLR commands.","The SMT command is implemented with the following steps:",{"@attributes":{"id":"p-1536","num":"2191"},"tables":{"@attributes":{"id":"TABLE-US-00151","num":"00151"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Step","Action"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","Temp \u2190 Read 32 bits from client"]},{"entry":[{},"2","SetBits(MinTicks, Temp)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Authentication Chips must be programmed with logically secure information in a physically secure environment. Consequently the programming procedures cover both logical and physical security. Logical security is the process of ensuring that K, K, R, and the random M[n] values are generated by a physically random process, and not by a computer. It is also the process of ensuring that the order in which parts of the chip are programmed is the most logically secure. Physical security is the process of ensuring that the programming station is physically secure, so that Kand Kremain secret, both during the key generation stage and during the lifetime of the storage of the keys. In addition, the programming station must be resistant to physical attempts to obtain or destroy the keys. The Authentication Chip has its own security mechanisms for ensuring that Kand Kare kept secret, but the Programming Station must also keep Kand Ksafe.","Overview","After manufacture, an Authentication Chip must be programmed before it can be used. In all chips values for Kand Kmust be established. If the chip is destined to be a System Authentication Chip, the initial value for R must be determined. If the chip is destined to be a consumable Authentication Chip, R must be set to 0, and initial values for M and AccessMode must be set up. The following stages are therefore identified:\n\n","Once the consumable or system is no longer required, the attached Authentication Chip can be reused. This is easily accomplished by reprogrammed the chip starting at Stage 4 again. Each of the stages is examined in the subsequent sections.","Stage 0: Manufacture","The manufacture of Authentication Chips does not require any special security. There is no secret information programmed into the chips at manufacturing stage. The algorithms and chip process is not special. Standard Flash processes are used. A theft of Authentication Chips between the chip manufacturer and programming station would only provide the clone manufacturer with blank chips. This merely compromises the sale of Authentication chips, not anything authenticated by Authentication Chips. Since the programming station is the only mechanism with consumable and system product keys, a clone manufacturer would not be able to program the chips with the correct key. Clone manufacturers would be able to program the blank chips for their own systems and consumables, but it would be difficult to place these items on the market without detection. In addition, a single theft would be difficult to base a business around.","Stage 1: Determine Interaction Between Systems and Consumables","The decision of what is a System and what is a Consumable needs to be determined before any Authentication Chips can be programmed. A decision needs to be made about which Consumables can be used in which Systems, since all connected Systems and Consumables must share the same key information. They also need to share state-data usage mechanisms even if some of the interpretations of that data have not yet been determined. A simple example is that of a car and car-keys. The car itself is the System, and the car-keys are the consumables. There are several car-keys for each car, each containing the same key information as the specific car. However each car (System) would contain a different key (shared by its car-keys), since we don't want car-keys from one car working in another. Another example is that of a photocopier that requires a particular toner cartridge. In simple terms the photocopier is the System, and the toner cartridge is the consumable. However the decision must be made as to what compatibility there is to be between cartridges and photocopiers. The decision has historically been made in terms of the physical packaging of the toner cartridge: certain cartridges will or won't fit in a new model photocopier based on the design decisions for that copier. When Authentication Chips are used, the components that must work together must share the same key information.","In addition, each type of consumable requires a different way of dividing M (the state data). Although the way in which M is used will vary from application to application, the method of allocating M[n] and AccessMode[n] will be the same:\n\n","The following examples show ways in which the state data may be organized.","Suppose we have a car with associated car-keys. A 16-bit key, number is more than enough to uniquely identify each car-key for a given car. The 256 bits of M could be divided up as follows:",{"@attributes":{"id":"p-1545","num":"2208"},"tables":{"@attributes":{"id":"TABLE-US-00152","num":"00152"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"M[n]","Access","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0","RO","Key number (16 bits)"]},{"entry":[{},"1-4","RO","Car engine number (64 bits)"]},{"entry":[{},"5-8","RO","For future expansion = 0 (64 bits)"]},{"entry":[{},"\u20028-15","RO","Random bit data (128 bits)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"If the car manufacturer keeps all logical keys for all cars, it is a trivial matter to manufacture a new physical car-key for a given car should one be lost. The new car-key would contain a new Key Number in M[], but have the same Kand Kas the car's Authentication Chip. Car Systems could allow specific key numbers to be invalidated (for example if a key is lost). Such a system might require Key  (the master key) to be inserted first, then all valid keys, then Key  again. Only those valid keys would now work with the car. In the worst case, for example if all car-keys are lost, then a new set of logical keys could be generated for the car and its associated physical car-keys if desired. The Car engine number would be used to tie the key to the particular car. Future use data may include such things as rental information, such as driver\/renter details.","Suppose we have a photocopier image unit which should be replaced every 100,000 copies, 32 bits are required to store the number of pages remaining. The 256 bits of M could be divided up as follows:",{"@attributes":{"id":"p-1548","num":"2211"},"tables":{"@attributes":{"id":"TABLE-US-00153","num":"00153"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"M[n]","Access","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0","RO","Serial number (16 bits)"]},{"entry":[{},"1","RO","Batch number (16 bits)"]},{"entry":[{},"2","MSR","Page Count Remaining (32 bits, hi\/lo)"]},{"entry":[{},"3","NMSR"]},{"entry":[{},"4-7","RO","For future expansion = 0 (64 bits)"]},{"entry":[{},"\u20028-15","RO","Random bit data (128 bits)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"If a lower quality image unit is made that must be replaced after only 10,000 copies, the 32-bit page count can still be used for compatibility with existing photocopiers. This allows several consumable types to be used with the same system.","Consider a Polaroid camera consumable containing 25 photos. A 16-bit countdown is all that is required to store the number of photos remaining. The 256 bits of M could be divided up as follows:",{"@attributes":{"id":"p-1551","num":"2214"},"tables":{"@attributes":{"id":"TABLE-US-00154","num":"00154"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"M[n]","Access","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0","RO","Serial number (16 bits)"]},{"entry":[{},"1","RO","Batch number (16 bits)"]},{"entry":[{},"2","MSR","Photos Remaining (16 bits)"]},{"entry":[{},"3-6","RO","For future expansion = 0 (64 bits)"]},{"entry":[{},"\u20027-15","RO","Random bit data (144 bits)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The Photos Remaining value at M[] allows a number of consumable types to be built for use with the same camera System. For example, a new consumable with 36 photos is trivial to program. Suppose 2 years after the introduction of the camera, a new type of camera was introduced. It is able to use the old consumable, but also can process a new film type. M[] can be used to define Film Type. Old film types would be 0, and the new film types would be some new value. New Systems can take advantage of this. Original systems would detect a non-zero value at M[] and realize incompatibility with new film types. New Systems would understand the value of M[] and so react appropriately. To maintain compatibility with the old consumable, the new consumable and System needs to have the same key information as the old one. To make a clean break with a new System and its own special consumables, a new key set would be required.","Consider a printer consumable containing 3 inks: cyan, magenta, and yellow. Each ink amount can be decremented separately. The 256 bits of M could be divided up as follows:",{"@attributes":{"id":"p-1554","num":"2217"},"tables":{"@attributes":{"id":"TABLE-US-00155","num":"00155"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"M[n]","Access","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0","RO","Serial number (16 bits)"]},{"entry":[{},"1","RO","Batch number (16 bits)"]},{"entry":[{},"2","MSR","Cyan Remaining (32 bits, hi\/lo)"]},{"entry":[{},"3","NMSR"]},{"entry":[{},"4","MSR","Magenta Remaining (32 bits, hi\/lo)"]},{"entry":[{},"5","NMSR"]},{"entry":[{},"6","MSR","Yellow Remaining (32 bits, hi\/lo)"]},{"entry":[{},"7","NMSR"]},{"entry":[{},"\u20028-11","RO","For future expansion = 0 (64 bits)"]},{"entry":[{},"12-15","RO","Random bit data (64 bits)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Once the decision has been made as to which Systems and consumables are to share the same keys, those keys must be defined. The values for Kand Kmust therefore be determined. In most cases, Kand Kwill be generated once for all time. All Systems and consumables that have to work together (both now and in the future) need to have the same Kand Kvalues. Kand Kmust therefore be kept secret since the entire security mechanism for the System\/Consumable combination is made void if the keys are compromised. If the keys are compromised, the damage depends on the number of systems and consumables, and the ease to which they can be reprogrammed with new non-compromised keys: In the case of a photocopier with toner cartridges, the worst case is that a clone manufacturer could then manufacture their own Authentication Chips (or worse, buy them), program the chips with the known keys, and then insert them into their own consumables. In the case of a car with car-keys, each car has a different set of keys. This leads to two possible general scenarios. The first is that after the car and car-keys are programmed with the, keys, Kand Kare deleted so no record of their values are kept, meaning that there is no way to compromise Kand K. However no more car-keys can be made for that car without reprogramming the car's Authentication Chip. The second scenario is that the car manufacturer keeps Kand K, and new keys can be made for the car. A compromise of Kand Kmeans that someone could make a car-key specifically for a particular car.","The keys and random data used in the Authentication Chips must therefore be generated by a means that is non-deterministic (a completely computer generated pseudo-random number cannot be used because it is deterministic\u2014knowledge of the generator's seed gives all future numbers). Kand Kshould be generated by a physically random process, and not by a computer. However, random bit generators based on natural sources of randomness are subject to influence by external factors and also to malfunction. It is imperative that such devices be tested periodically for statistical randomness.","A simple yet useful source of random numbers is the Lavarand\u00ae system from SGI. This generator uses a digital camera to photograph six lava lamps every few minutes. Lava lamps contain chaotic turbulent systems. The resultant digital images are fed into an SHA-1 implementation that produces a 7-way hash, resulting in a 160-bit value from every 7th bye from the digitized image. These 7 sets of 160 bits total 140 bytes. The 140 byte value is fed into a BBS generator position the start of the output bitstream. The output 160 bits from the BBS would be the key or the Authentication chip .","An extreme example of a non-deterministic random process is someone flipping a coin 160 times for Kand 160 times for Kin a clean room. With each head or tail, a 1 or 0 is entered on a panel of a Key Programmer Device. The process must be undertaken with several observers (for verification) in silence (someone may have a hidden microphone). The point to be made is that secure data entry and storage is not as simple as it sounds. The physical security of the Key Programmer Device and accompanying Programming Station requires an entire document of its own. Once keys Kand Khave been determined, they must be kept for as long as Authentication Chips need to be made that use the key. In the first car\/car-key scenario Kand Kare destroyed after a single System chip and a few consumable chips have been programmed. In the case of the photocopier\/toner cartridge, Kand Kmust be retained for as long as the toner-cartridges are being made for the photocopiers. The keys must be kept securely.","Stage 3: Determine MinTicks for Systems and Consumables","The value of MinTicks depends on the operating clock speed of the Authentication Chip (System specific) and the notion of what constitutes a reasonable time between RD or TST function calls (application specific). The duration of a single tick depends on the operating clock speed. This is the maximum of the input clock speed and the Authentication Chip's clock-limiting hardware. For example, the Authentication Chip's clock-limiting hardware may be set at 10 MHz (it is not changeable), but the input clock is 1 MHz. In this case, the value of 1 tick is based on 1 MHz, not 10 MHz. If the input clock was 20 MHz instead of 1 MHz, the value of 1 tick is based on 10 MHz (since the clock speed is limited to 10 MHz). Once the duration of a tick is known, the MinTicks value can be set. The value for MinTicks is the minimum number of ticks required to pass between calls to RD or RND key-based functions. Suppose the input clock speed matches the maximum clock speed of 10 MHz. If we want a minimum of 1 second between calls to TST, the value for MinTicks is set to 10,000,000. Even a value such as 2 seconds might be a completely reasonable value for a System such as a printer (one authentication per page, and one page produced every 2 or 3 seconds).","Stage 4: Program Keys, Random Seed, MinTicks And Unused M","Authentication Chips are in an unknown state after manufacture. Alternatively, they have already been used in one consumable, and must be reprogrammed for use in another. Each Authentication Chip must be cleared and programmed with new keys and new state data. Clearing and subsequent programming of Authentication Chips must take place in a secure Programming Station environment.","Programming a Trusted System Authentication Chip","If the chip is to be a trusted System chip, a seed value for R must be generated. It must be a random number derived from a physically random process, and must not be 0. The following tasks must be undertaken, in the following order, and in a secure programming environment:\n\n","The Authentication Chip is now ready for insertion into a System. It has been completely programmed. If the System Authentication Chips are stolen at this point, a clone manufacturer could use them to generate R, F[R] pairs in order to launch a known text attack on K, or to use for launching a partially chosen-text attack on K. This is no different to the purchase of a number of Systems, each containing a trusted Authentication Chip. The security relies on the strength of the Authentication protocols and the randomness of Kand K.","Programming a Non-Trusted Consumable Authentication Chip","If the chip is to be a non-trusted Consumable Authentication Chip, the programming is slightly different to that of the trusted System Authentication Chip. Firstly, the seed value for R must be 0. It must have additional programming for M and the AccessMode values. The future use M[n] must be programmed with 0, and the random M[n] must be programmed with random data. The following tasks must be undertaken, in the following order, and in a secure programming environment:\n\n","The non-trusted consumable chip is now ready to be programmed with the general state data. If the Authentication Chips are stolen at this point, an attacker could perform a limited chosen text attack. In the best situation, parts of M are Read Only (0 and random data), with the remainder of M completely chosen by an attacker (via the WR command). A number of RD calls by an attacker obtains F[M|R] for a limited M. In the worst situation, M can be completely chosen by an attacker (since all 256 bits are used for state data). In both cases however, the attacker cannot choose any value for R since it is supplied by calls to RND from a System Authentication Chip. The only way to obtain a chosen R is by a Brute Force attack. It should be noted that if Stages 4 and 5 are carried out on the same Programming Station (the preferred and ideal situation), Authentication Chips cannot be removed in between the stages. Hence there, is no possibility of the Authentication Chips being stolen at this point. The decision to program the Authentication Chips at one or two times depends on the requirements of the System\/Consumable manufacturer.","Stage 5: Program State Data and Access Modes","This stage is only required for consumable Authentication Chips, since M and AccessMode registers cannot be altered on System Authentication Chips. The future use and random values of M[n] have already been programmed in Stage 4. The remaining state data values need to be programmed and the associated Access Mode values need to be set. Bear in mind that the speed of this stage will be limited by the value stored in the MinTicks register. This stage is separated from Stage 4 on account of the differences either in physical location or in time between where\/when Stage 4 is performed, and where\/when Stage 5 is performed. Ideally, Stages 4 and 5 are performed at the same time in the same Programming Station. Stage 4 produces valid Authentication Chips, but does not load them with initial state values (other than 0). This is to allow the programming of the chips to coincide with production line runs of consumables. Although Stage 5 can be run multiple times, each time setting a different state data value and Access Mode value, it is more likely to be run a single time, setting all the remaining state data values and setting all the remaining Access Mode values. For example, a production line can be set up where the batch number and serial number of the Authentication Chip is produced according to the physical consumable being produced. This is much harder to match if the state data is loaded at a physically different factory.","The Stage 5 process involves first checking to ensure the chip is a valid consumable chip, which includes a RD to gather the data from the Authentication Chip, followed by a WR of the initial data values, and then a SAM to permanently set the new data values. The steps are outlined here:\n\n","Of course the validation (Steps 1 to 7) does not have to occur if Stage 4 and 5 follow on from one another on the same Programming Station. But it should occur in all other situations where Stage 5 is run as a separate programming process from Stage 4. If these Authentication Chips are now stolen, they are already programmed for use in a particular consumable. An attacker could place the stolen chips into a clone consumable. Such a theft would limit the number of cloned products to the number of chips stolen. A single theft should not create a supply constant enough to provide clone manufacturers with a cost-effective business. The alternative use for the chips is to save the attacker from purchasing the same number of consumables, each with an Authentication Chip, in order to launch a partially chosen text attack or brute force attack. There is no special security breach of the keys if such an attack were to occur.","Manufacture","The circuitry of the Authentication Chip must be resistant to physical attack. A summary of manufacturing implementation guidelines is presented, followed by specification of the chip's physical defenses (ordered by attack).","Guidelines for Manufacturing","The following are general guidelines for implementation of an Authentication Chip in terms of manufacture:\n\n","The Authentication Chip should be implemented with a standard manufacturing process (such as Flash). This is necessary to:\n\n","The Authentication chip  must have a low manufacturing cost in order to be included as the authentication mechanism for low cost consumables. It is therefore desirable to keep the chip size as low as reasonably possible. Each Authentication Chip requires 802 bits of non-volatile memory. In addition, the storage required for optimized HMAC-SHA1 is 1024 bits. The remainder of the chip (state machine, processor, CPU or whatever is chosen to implement Protocol 3) must be kept to a minimum in order that the number of transistors is minimized and thus the cost per chip is minimized. The circuit areas that process the secret key information or could reveal information about the key should also be minimized (see Non-Flashing CMOS below for special data paths).","Clock Filter","The Authentication Chip circuitry is designed to operate within a specific clock speed range. Since the user directly supplies the clock signal, it is possible for an attacker to attempt to introduce race-conditions in the circuitry at specific times during processing. An example of this is where a high clock speed (higher than the circuitry is designed for) may prevent an XOR from working properly, and of the two inputs, the first may always be returned. These styles of transient fault attacks can be very efficient at recovering secret key information. The lesson to be learned from this is that the input clock signal cannot be trusted. Since the input clock signal cannot be trusted, it must be limited to operate up to a maximum frequency. This can be achieved a number of ways. One way to filter the clock signal is to use an edge detect unit passing the edge on to a delay, which in turn enables the input clock signal to pass through.  shows clock signal flow within the Clock Filter. The delay should be set so that the maximum clock speed is a particular frequency (e.g. about 4 MHz). Note that this delay is not programmable\u2014it is fixed. The filtered clock signal would be further divided internally as required.","Noise Generator","Each Authentication Chip should contain a noise generator that generates continuous circuit noise. The noise will interfere with other electromagnetic emissions from the chip's regular activities and add noise to the Isignal. Placement of the noise generator is not an issue on an Authentication Chip due to the length of the emission wavelengths. The noise generator is used to generate electronic noise, multiple state changes each clock cycle, and as a source of pseudo-random bits for the Tamper Prevention and Detection circuitry. A simple implementation of a noise generator is a 64-bit LFSR seeded with a non-zero number. The clock used for the noise generator should be running at the maximum clock rate for the chip in order to generate as much noise as possible.","Tamper Prevention and Detection Circuitry","A set of circuits is required to test for and prevent physical attacks on the Authentication Chip. However what is actually detected as an attack may not be an intentional physical attack. It is therefore important to distinguish between these two types of attacks in an Authentication Chip:\n\n","The two types of detection differ in what is performed as a result of the detection. In the first case, where the circuitry can be certain that a true physical attack has occurred, erasure of Flash memory key information is a sensible action. In the second case, where the circuitry cannot be sure if an attack has occurred, there is still certainly something wrong. Action must be taken, but the action should not be the erasure of secret key information. A suitable action to take in the second case is a chip RESET. If what was detected was an attack that has permanently damaged the chip, the same conditions will occur next time and the chip will RESET again. If, on the other hand, what was detected was part of the normal operating environment of the chip, a RESET will not harm the key.","A good example of an event that circuitry cannot have knowledge about, is a power glitch. The glitch may be an intentional attack, attempting to reveal information about the key. It may, however, be the result of a faulty connection, or simply the start of a power-down sequence. It is therefore best to only RESET the chip, and not erase the key. If the chip was powering down, nothing is lost. If the System is faulty, repeated RESETs will cause the consumer to get the System repaired. In both cases the consumable is still intact. A good example of an event that circuitry can have knowledge about, is the cutting of a data line within the chip. If this attack is somehow detected, it could only be a result of a faulty chip (manufacturing defect) or an attack. In either case, the erasure of the secret information is a sensible step to take.","Consequently each Authentication Chip should have 2 Tamper Detection Lines, as illustrated in Fig.\u2014one for definite attacks, and one for possible attacks. Connected to these Tamper Detection Lines would be a number of Tamper Detection test units, each testing for different forms of tampering. In addition, we want to ensure that the Tamper Detection Lines and Circuits themselves cannot also be tampered with.","At one end of the Tamper Detection Line is a source of pseudo-random bits (clocking at high speed compared to the general operating circuitry). The Noise Generator circuit described above is an adequate source. The generated bits pass through two different paths\u2014one carries the original data, and the other carries the inverse of the data. The wires carrying these bits are in the layer above the general chip circuitry (for example, the memory, the key manipulation circuitry etc). The wires must also cover the random bit generator. The bits are recombined at a number of places via an XOR gate. If the bits are different (they should be), a 1 is output, and used by the particular unit (for example, each output bit from a memory read should be ANDed with this bit value). The lines finally come together at the Flash memory Erase circuit, where a complete erasure is triggered by a 0 from the XOR. Attached to the line is a number of triggers, each detecting a physical attack on the chip. Each trigger has an oversize nMOS transistor attached to GND. The Tamper Detection Line physically goes through this nMOS transistor. If the test fails, the trigger causes the Tamper. Detect Line to become 0. The XOR test will therefore fail on either this clock cycle or the next one (on average), thus RESETing or erasing the chip.  illustrates the basic principle of a Tamper Detection Line in terms of tests and the XOR connected to either the Erase or RESET circuitry.","The Tamper Detection Line must go through the drain of an output transistor for each test, as illustrated by the oversize nMOS transistor layout of FIG. . :It is not possible to break the Tamper Detect Line since this would stop the flow of s and s from the random source. The XOR tests would therefore fail. As the Tamper Detect Line physically passes through each test, it is not possible to eliminate any particular test without breaking the Tamper Detect Line. It is important that the XORs take values from a variety of places along the Tamper Detect Lines in order to reduce the chances of an attack.  illustrates the taking of multiple XORs from the Tamper Detect Line to be used in the different parts of the chip. Each of these XORs can be considered to be generating a ChipOK bit that can be used within each unit or sub-unit.","A sample usage would be to have an OK bit in each unit that is ANDed with a given ChipOK bit each cycle. The OK bit is loaded with 1 on a RESET. If OK is 0, that unit will fail until the next RESET. If the Tamper Detect Line is functioning correctly, the chip will either RESET or erase all key information. If the RESET or erase circuitry has been destroyed, then this unit will not function, thus thwarting an attacker. The destination of the RESET and Erase line and associated circuitry is very context sensitive. It needs to be protected in much the same way as the individual tamper tests. There is no point generating a RESET pulse if the attacker can simply cut the wire leading to the RESET circuitry. The actual implementation will depend very much on what is to be cleared at RESET, and how those items are cleared. Finally,  shows how the Tamper Lines cover the noise generator circuitry of the chip. The generator and NOT gate are on one level, while the Tamper Detect Lines run on a level above the generator.","Protected Memory with Tamper Detection","It is not enough to simply store secret information or program code in Flash memory. The Flash memory and RAM. must be protected from an attacker who would attempt to modify (or set) a particular bit of program code or key information. The mechanism used must conform to being used in the Tamper Detection Circuitry (described above). The first part of the solution is to ensure that the Tamper Detection Line passes directly above each Flash or RAM bit. This ensures that an attacker cannot probe the contents of Flash or RAM. A breach of the covering wire is a break in the Tamper Detection Line. The breach causes the Erase signal to be set, thus deleting any contents of the memory. The high frequency noise on the Tamper Detection Line also obscures passive observation.","The second part of the solution for Flash is to use multi-level data storage, but only to use a subset of those multiple levels for valid bit representations. Normally, when multi-level Flash storage is used, a single floating gate holds more than one bit. For example, a 4-voltage-state transistor can represent two bits. Assuming a minimum and maximum voltage representing 00 and 11 respectively, the two middle voltages represent 01 and 10. In the Authentication Chip, we can use the two middle voltages to represent a single bit, and consider the two extremes to be invalid states. If an attacker attempts, to force the state of a bit one way or the other by closing or cutting the gate's circuit, an invalid voltage (and hence invalid state) results.","The second part of the solution for RAM is to use a parity bit. The data part of the register can be checked against the parity bit (which will not match after an attack). The bits coming from Flash and RAM can therefore be validated by a number of test units (one per bit) connected to the common Tamper Detection Line. The Tamper Detection circuitry would be the first circuitry the data passes through (thus stopping an attacker from cutting the data lines).","Boot Circuitry for Loading Program Code","Program code should be kept in multi-level Flash instead of ROM, since ROM is subject to being altered in a non-testable way. A boot mechanism is therefore required to load the program code into Flash memory (Flash memory is in an indeterminate state after manufacture). The boot circuitry must not be in ROM\u2014a small state-machine would suffice. Otherwise the boot code could be modified in an undetectable way. The boot circuitry must erase all Flash memory, check to ensure the erasure worked, and then load the program code. Flash memory must be erased before loading the program code. Otherwise an attacker could put the chip into the boot state, and then load program code that simply extracted the existing keys. The state machine must also check to ensure that all Flash memory has been cleared (to ensure that an attacker has not cut the Erase line) before loading the new program code. The loading of program code must be undertaken by the secure Programming Station before secret information (such as keys) can be loaded.","Special Implementation of FETs for Key Data Paths","The normal situation for FET implementation for the case of a CMOS Inverter (which involves a pMOS transistor combined with an nMOS transistor) is shown in FIG. . During the transition, there is a small period of time where both the nMOS transistor and the pMOS transistor have an intermediate resistance. The resultant power-ground short circuit causes a temporary increase in the current, and in fact accounts for the majority of current consumed by a CMOS device. A small amount of infrared light is emitted during the short circuit, and can be viewed through the silicon substrate (silicon is transparent to infrared light). A small amount of light is also emitted during the charging and discharging of the transistor gate capacitance and transmission line capacitance.","For circuitry that manipulates secret key information, such information must be kept hidden. An alternative non-flashing, CMOS implementation should therefore be used for all data paths that manipulate the key or a partially calculated value that is based on the key. The use of two non-overlapping clocks \u03c6 and \u03c6 can provide a non-flashing mechanism. \u03c6 is connected to a second gate of all nMOS transistors, and \u03c6 is connected to a second gate of all pMOS transistors. The transition can only take place in combination with the clock. Since \u03c6 and \u03c6 are non-overlapping, the pMOS and nMOS transistors will not have a simultaneous intermediate resistance. The setup is shown in FIG. .","Finally, regular CMOS inverters can be positioned near critical non-Flashing CMOS components. These inverters should take their input signal from the Tamper Detection Line above. Since the Tamper Detection Line operates multiple times faster than the regular operating circuitry, the net effect will be a high rate of light-bursts next to each non-Flashing CMOS component. Since a bright light overwhelms observation of a nearby faint light, an observer will not be able to detect what switching operations are occurring in the chip proper. These regular CMOS inverters will also effectively increase the amount of circuit noise, reducing the SNR and obscuring useful EMI.","There are a number of side effects due to the use of non-Flashing CMOS:\n\n","Wherever possible, the connections along which the key or secret data flows, should be made in the polysilicon layers. Where necessary, they can be in metal , but must never be in the top metal layer (containing the Tamper Detection Lines).","OverUnderPower Detection Unit","Each Authentication Chip requires an OverUnderPower Detection Unit to prevent Power Supply Attacks. An OverUnderPower Detection Unit detects power glitches and tests the power level against a Voltage Reference to ensure it is within a certain tolerance. The Unit contains a single Voltage Reference and two comparators. The OverUnderPower Detection Unit would be connected into the RESET Tamper Detection Line, thus causing a RESET when triggered. A side effect of the OverUnderPower Detection Unit is that as the voltage drops during a power-down, a RESET is triggered, thus erasing any work registers.","No Test Circuitry","Test hardware on an Authentication Chip could very easily introduce vulnerabilities. As a result, the Authentication Chip should not contain any BIST or scan paths. The Authentication Chip must therefore be testable with external test vectors. This should be possible since the Authentication Chip is not complex.","Reading ROM","This attack depends on the key being stored in an addressable ROM. Since each Authentication Chip stores its authentication keys in internal Flash memory and not in an addressable ROM, this attack is irrelevant.","Reverse Engineering the Chip","Reverse engineering a chip is only useful when the security of authentication lies in the algorithm alone. However our Authentication Chips rely on a secret key, and not in the secrecy of the algorithm. Our authentication algorithm is, by contrast, public, and in any case, an attacker of a high volume consumable is assumed to have been able to obtain detailed plans of the internals of the chip. In light of these factors, reverse engineering the chip itself, as opposed to the stored data, poses no threat.","Usurping the Authentication Process","There are several forms this attack can take, each with varying degrees of success. In all cases, it is assumed that a clone manufacturer will have access to both the System and the consumable designs. An attacker may attempt to build a chip that tricks the System into returning a valid code instead of generating an authentication code. This attack is not possible for two reasons. The first reason is that System Authentication chips and Consumable Authentication Chips, although physically identical, are programmed differently. In particular, the RD opcode and the RND opcode are the same, as are the WR and TST opcodes. A System authentication Chip cannot perform a RD command since every call is interpreted as a call to RND instead. The second reason this attack would fail is that separate serial data lines are provided from the System to the System and Consumable Authentication Chips. Consequently neither chip can see what is being transmitted to or received from the other. If the attacker builds a clone chip that ignores WR commands (which decrement the consumable remaining), Protocol 3 ensures that the subsequent RD will detect that the WR did not occur.","The System will therefore not go ahead with the use of the consumable, thus thwarting the attacker. The same is true if an attacker simulates loss of contact before authentication\u2014since the authentication does not take place, the use of the consumable doesn't occur. An attacker is therefore limited to modifying each System in order for clone consumables to be accepted.","Modification of System","The simplest method of modification is to replace the System's Authentication Chip with one that simply reports success for each call to TST. This can be thwarted by System calling TST several times for each authentication, with the first few times providing false values, and expecting a fail from TST. The final call to TST would be expected to succeed. The number of false calls to TST could be determined by some part of the returned result from RD or from the system clock. Unfortunately an attacker could simply rewire System so that the new System clone authentication chip  can monitor the returned result from the consumable chip or clock. The clone System Authentication Chip would only return success when that monitored value is presented to its TST function. Clone consumables could then return any value as the hash result for RD, as the clone System chip would declare that value valid. There is therefore no point for the System to call the System Authentication Chip multiple times, since a rewiring attack will only work for the System that has been rewired, and not for all Systems. A similar form of attack on a System is a replacement of the System ROM. The ROM program code can be altered so that the Authentication never occurs. There is nothing that can be done about this, since the System remains in the hands of a consumer. Of course this would void any warranty, but the consumer may consider the alteration worthwhile if the clone consumable were extremely cheap and more readily available than the original item.","The System\/consumable manufacturer must therefore determine how likely an attack of this nature is. Such a study must include given the pricing structure of Systems and Consumables, frequency of System service, advantage to the consumer of having a physical modification performed, and where consumers would go to get the modification performed. The limit case of modifying a system is for a clone manufacturer to provide a completely clone System which takes clone consumables. This may be simple competition or violation of patents. Either way, it is beyond the scope of the Authentication Chip and depends on the technology or service being cloned.","Direct Viewing of Chip Operation by Conventional Probing","In order to view the chip operation, the chip must be operating. However, the Tamper Prevention and Detection circuitry covers those sections of the chip that process or hold the key. It is not possible to view those sections through the Tamper Prevention lines. An attacker cannot simply slice the chip past the Tamper Prevention layer, for this will break the Tamper Detection Lines and cause an erasure of all keys at power-up. Simply destroying the erasure circuitry is not sufficient, since the multiple ChipOK bits (now all ) feeding into multiple units within the Authentication Chip will cause the chip's regular operating circuitry to stop functioning. To set up the chip for an attack, then, requires the attacker to delete the Tamper Detection lines, stop the Erasure of Flash memory, and somehow rewire the components that relied on the ChipOK lines. Even if all this could be done, the act of slicing the chip to this level will most likely destroy the charge patterns in the non-volatile memory that holds the keys, making the process fruitless.","Direct Viewing of the Non-volatile Memory","If the Authentication Chip were sliced so that the floating gates of the Flash memory were exposed, without discharging them, then the keys could probably be viewed directly using an STM or SKM. However, slicing the chip to this level without discharging the gates is probably impossible. Using wet etching, plasma etching, ion milling, or chemical mechanical polishing will almost certainly discharge the small charges present on the floating gates. This is true of regular Flash memory, but even more so of multi-level Flash memory.","Viewing the Light Bursts Caused by State Changes","All sections of circuitry that manipulate secret key information are implemented in the non-Flashing CMOS described above. This prevents the emission of the majority of light bursts. Regular CMOS inverters placed in close proximity to the non-Flashing CMOS will hide any faint emissions caused by capacitor charge and discharge. The inverters are connected to the Tamper Detection circuitry, so they change state many times (at the high clock rate) for each non-Flashing CMOS state change.","Monitoring EMI","The Noise Generator described above will cause circuit noise. The noise will interfere with other electromagnetic emissions from the chip's regular activities and thus obscure any meaningful reading of internal data transfers.","Viewing IFluctuations","The solution against this kind of attack is to decrease the SNR in the Isignal. This is accomplished by increasing the amount of circuit noise and decreasing the amount of signal. The Noise Generator circuit (which also acts as a defense against EMI attacks) will also cause enough state changes each cycle to obscure any meaningful information in the Isignal. In addition, the special Non-Flashing CMOS implementation of the key-carrying data paths of the chip prevents current from flowing when state changes occur. This has the benefit of reducing the amount of signal.","Differential Fault Analysis","Differential fault bit errors are introduced in a non-targeted fashion by ionization, microwave radiation, and environmental stress. The most likely effect of an attack of this nature is a change in Flash memory (causing an invalid state) or RAM (bad parity). Invalid states and bad parity are detected by the Tamper Detection Circuitry, and cause an erasure of the key. Since the Tamper Detection Lines cover the key manipulation circuitry, any error introduced in the key manipulation circuitry will be mirrored by an error in a Tamper Detection Line. If the Tamper Detection Line is affected, the chip will either continually RESET or simply erase the key upon a power-up, rendering the attack fruitless. Rather than relying on a non-targeted attack and hoping that \u201cjust the right part of the chip is affected in just the right way\u201d, an attacker is better off trying to introduce a targeted fault (such as overwrite attacks, gate destruction etc). For information on these targeted fault attacks, see the relevant sections below.","Clock Glitch Attacks","The Clock Filter (described above) eliminates the possibility of clock glitch attacks.","Power Supply Attacks","The OverUnderPower Detection Unit (described above) eliminates the possibility of power supply attacks.","Overwriting ROM","Authentication Chips store Program code, keys and secret information in Flash memory, and not in ROM. This attack is therefore not possible.","Modifying EEPROM\/Flash","Authentication Chips store Program code, keys and secret information in Flash memory. However, Flash memory is covered by two Tamper Prevention and Detection Lines. If either of these lines is broken (in the process of destroying a gate) the attack will be detected on power-up, and the chip will either RESET (continually) or erase the keys from Flash memory. However, even if the attacker is able to somehow access the bits of Flash and destroy or short out the gate holding a particular bit, this will force the bit to have no charge or a full charge. These are both invalid states for the Authentication Chip's usage of the multi-level Flash memory (only the two middle states are valid). When that data value is transferred from Flash, detection circuitry will cause the Erasure Tamper Detection Line to be triggered\u2014thereby erasing the remainder of Flash memory and RESETing the chip. A Modify EEPROM\/Flash Attack is therefore fruitless.","Gate Destruction Attacks","Gate Destruction Attacks rely on the ability of an attacker to modify a single gate to cause the chip to reveal information during operation. However any circuitry that manipulates secret information is covered by one of the two Tamper Prevention and Detection lines. If either of these lines is broken (in the process of destroying a gate) the attack will be detected on power-up, and the chip will either RESET (continually) or erase the keys from Flash memory. To launch this kind of attack, an attacker must first reverse-engineer the chip to determine which gate(s) should be targeted. Once the location of the target gates has been determined, the attacker must break the covering Tamper Detection line, stop the Erasure of Flash memory, and somehow rewire the components that rely on the ChipOK lines. Rewiring the circuitry cannot be done without slicing the chip, and even if it could be done, the act of slicing the chip to this level will most likely destroy the charge patterns in the non-volatile memory that holds the keys, making the process fruitless.","Overwrite Attacks","An Overwrite Attack relies on being able to set individual bits of the key without knowing the previous value. It relies on probing the chip, as in the Conventional Probing Attack and destroying gates as in the Gate Destruction Attack. Both, of these attacks (as explained in their respective sections), will not succeed due to the use of the Tamper Prevention and Detection Circuitry and ChipOK lines. However, even if the attacker is able to somehow access the bits of Flash and destroy or short out the gate holding a particular bit, this will force the bit to have no charge or a full charge. These are both invalid states for the Authentication, Chip's usage of the multi-level Flash memory (only the two middle states are valid). When that data value is transferred from Flash detection circuitry will cause the Erasure Tamper Detection Line to be triggered\u2014thereby erasing the remainder of Flash memory and RESETing the chip. In the same way, a parity check on tampered values read from RAM will cause the Erasure Tamper Detection Line to be triggered. An Overwrite Attack is therefore fruitless.","Memory Remanence Attack","Any working registers or RAM within the Authentication Chip may be holding part of the authentication keys when power is removed. The working registers and RAM would continue to hold the information for some time after the removal of power. If the chip were sliced so that the gates of the registers\/RAM were exposed, without discharging them, then the data could probably be viewed directly using an STM. The first defense can be found above, in the description of defense against Power Glitch Attacks. When power is removed, all registers and RAM are cleared, just as the RESET condition causes a clearing of memory. The chances then, are less for this attack to succeed than for a reading of the Flash memory. RAM charges (by nature) are more easily lost than Flash memory. The slicing of the chip to reveal the RAM will certainly cause the charges to be lost (if they haven't been lost simply due to the memory not being refreshed and the time taken to perform the slicing). This attack is therefore fruitless.","Chip Theft Attack","There are distinct phases in the lifetime of an Authentication Chip. Chips can be stolen when at any of these stages:\n\n","A theft in between the chip manufacturer and programming station would only provide the clone manufacturer with blank chips. This merely compromises the sale of Authentication chips, not anything authenticated by the Authentication chips. Since the programming station is the only mechanism with consumable and system product keys, a clone manufacturer would not be able to program the chips with the correct key. Clone manufacturers would be able to program the blank chips for their own Systems and Consumables, but it would be difficult to place these items on the market without detection. The second form of theft can only happen in a situation where an Authentication Chip passes through two or more distinct programming phases. This is possible, but unlikely. In any case, the worst situation is where no state data has been programmed, so all of M is read\/write. If this were the case, an attacker could attempt to launch an Adaptive Chosen Text Attack on the chip. The HMAC-SHA1 algorithm is resistant to such attacks. The third form of theft would have to take place in between the programming station and the installation factory. The Authentication chips would already be programmed for use in a particular system or for use in a particular consumable. The only use these chips have to a thief is to place them into a clone System or clone Consumable. Clone systems are irrelevant\u2014a cloned System would not even require an authentication chip . For clone Consumables, such a theft would limit the number of cloned products to the number of chips stolen. A single theft should not create a supply constant enough to provide clone manufacturers with a cost-effective business.The final form of theft is where the System or Consumable itself is stolen. When the theft occurs at the manufacturer, physical security protocols must be enhanced. If the theft occurs anywhere else, it is a matter of concern only for the owner of the item and the police or insurance company. The security mechanisms that the Authentication Chip uses assume that the consumables and systems are in the hands of the public. Consequently, having them stolen makes no difference to the security of the keys.","Authentication Chip Design","The Authentication Chip has a physical and a logical external interface. The physical interface defines how, the Authentication Chip can be connected to a physical System, and the logical interface determines how that System can communicate with the Authentication Chip.","Physical Interface","The Authentication Chip is a small 4-pin CMOS package (actual internal size is approximately 0.30 mmusing 0.25 \u03bcm Flash process). The 4 pins are GND, CLK, Power, and Data. Power is a nominal voltage. If the voltage deviates from this by more than a fixed amount, the chip will RESET. The recommended clock speed is 4-10 MHz. Internal circuitry filters the clock signal to ensure that a safe maximum clock speed is not exceeded. Data is transmitted and received one bit at a time along the serial data line. The chip performs a RESET upon power-up, power-down. In addition, tamper detection and prevention circuitry in the chip will cause the chip to either RESET or erase Flash memory (depending on the attack detected) if an attack is detected. A special Programming Mode is enabled by holding the CLK voltage at a particular level. This is defined further in the next section.","Logical Interface","The Authentication Chip has two operating modes\u2014a Normal Mode and a Programming Mode. The two modes are required because the operating program code is stored in Flash memory instead of ROM (for security reasons). The Programming mode is used for testing purposes after manufacture and to load up the operating program code, while the normal mode is used for all subsequent usage of the chip.","Programming Mode","The programming Mode is enabled by holding a specific voltage on the CLK line for a given amount of time. When the chip enters Programming Mode, all Flash memory is erased (including all secret key information and any program code). Authentication Chip then validates the erasure. If the erasure was successful, the Authentication Chip receives 384 bytes of data corresponding to the new program code. The bytes are transferred in order byteto byte. The bits are transferred from bitto bit. Once all 384 bytes of program code have been loaded, the Authentication Chip hangs. If the erasure was not successful, the Authentication Chip will hang without loading any data into the Flash memory. After the chip has been programmed, it can be restarted. When the chip is RESET with a normal voltage on the CLK line, Normal Mode is entered.","Normal Mode","Whenever the Authentication Chip is not in Programming Mode, it is in Normal Mode. When the Authentication Chip starts up in Normal Mode (for example a power-up RESET), it executes the program currently stored in the program code region of Flash memory. The program code implements a communication mechanism between the System and Authentication Chip, accepting commands and data from the System and producing output values. Since the Authentication Chip communicates serially, bits are transferred one at a time. The System communicates with the Authentication Chips via a simple operation command set. Each command is defined by 3-bit opcode. The interpretation of the opcode depends on the current value of the IsTrusted bit and the IsWritten bit. The following operations are defined:",{"@attributes":{"id":"p-1620","num":"2334"},"tables":{"@attributes":{"id":"TABLE-US-00156","num":"00156"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":["Op","T","W","Mn","Input","Output","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["000","\u2014","\u2014","CLR","\u2014","\u2014","Clear"]},{"entry":["001","0","0","SSI","[160, 160, 160]","\u2014","Set Secret"]},{"entry":[{},{},{},{},{},{},"Information"]},{"entry":["010","0","1","RD","[160, 160]","[256, 160]","Read M"]},{"entry":[{},{},{},{},{},{},"securely"]},{"entry":["010","1","1","RND","\u2014","[160, 160]","Random"]},{"entry":["011","0","1","WR","[256]","\u2014","Write M"]},{"entry":["011","1","1","TST","[256, 160]","[1]","Test"]},{"entry":["100","0","1","SAM","[32]","[32]","Set Access"]},{"entry":[{},{},{},{},{},{},"Mode"]},{"entry":["101","\u2014","1","GIT","\u2014","[1]","Get Is Trusted"]},{"entry":["110","\u2014","1","SMT","[32]","\u2014","Set MinTicks"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":"Op = Opcode, "},{"entry":"T = IsTrusted value, "},{"entry":"W = IsWritten value, "},{"entry":"Mn = Mnemonic, "},{"entry":"[n] = number of bits required for parameter "}]}}}}},"Any command not defined in this table is interpreted as NOP (No operation). Examples include opcodes  and  (regardless of IsTrusted or IsWritten values), and any opcode other than SSI when IsWritten=0. Note that the opcodes for RD and RND are the same, as are the opcodes for WR and TST. The actual command run upon receipt of the opcode will depend on the current value of the IsTrusted bit (as long as IsWritten is 1). Where the IsTrusted bit is clear, RD and WR functions will be called. Where the IsTrusted bit is set, RND and TST functions will be called. The two sets of commands are mutually exclusive between trusted and non-trusted Authentication Chips. In order to execute a command on an Authentication Chip, a client (such as System) sends the command opcode followed by the required input parameters for that opcode. The opcode is sent least significant bit through to most significant bit. For example, to send the SSI command, the bits , , and  would be sent in that order. Each input parameter is sent in the same way, least significant bit first through to most significant bit last. Return values are read in the same way\u2014least significant bit first and most significant bit last. The client must know how many bits to retrieve.","In some cases, the output bits from one chip's command can be fed directly as the input bits to another chip's command. An example of this is the RND and RD commands. The output bits from a call to RND on a trusted Authentication Chip do not have to be kept by System. Instead, System can transfer the output bits directly to the input of the non-trusted Authentication Chip's RD command. The description of each command points out where this is so. Each of the commands is examined in detail in the subsequent sections. Note that some algorithms are specifically designed because the permanent registers are kept in Flash memory.","Registers","The memory within the Authentication Chip contains some non-volatile memory to store the variables required by the Authentication Protocol. The following non-volatile (Flash) variables are defined:",{"@attributes":{"id":"p-1624","num":"2338"},"tables":{"@attributes":{"id":"TABLE-US-00157","num":"00157"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Size",{}]},{"entry":[{},"(in"]},{"entry":["Variable Name","bits)","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["M[0..15]","256","16 words (each 16 bits) containing state data"]},{"entry":[{},{},"such as serial numbers, media remaining etc."]},{"entry":["K","160","Key used to transform R during authentica-"]},{"entry":[{},{},"tion."]},{"entry":["K","160","Key used to transform M during authentica-"]},{"entry":[{},{},"tion."]},{"entry":["R","160","Current random number"]},{"entry":["AccessMode[0..15]","\u200232","The 16 sets of 2-bit AccessMode values for"]},{"entry":[{},{},"M[n]."]},{"entry":["MinTicks","\u200232","The minimum number of clock ticks between"]},{"entry":[{},{},"calls to key-based functions"]},{"entry":["SIWritten","\u20031","If set, the secret key information (K, K,"]},{"entry":[{},{},"and R) has been written to the chip. If clear,"]},{"entry":[{},{},"the secret information has not been written"]},{"entry":[{},{},"yet."]},{"entry":["IsTrusted","\u20031","If set, the RND and TST functions can be"]},{"entry":[{},{},"called, but RD and WR functions cannot be"]},{"entry":[{},{},"called."]},{"entry":[{},{},"If clear, the RND and TST functions can-"]},{"entry":[{},{},"not be called, but RD and WR functions can"]},{"entry":[{},{},"be called."]},{"entry":["Total bits","802"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"This section chapter provides the high-level definition of a purpose-built CPU capable of implementing the functionality required of an Authentication Chip. Note that this CPU is not a general purpose CPU. It is tailor-made for implementing the Authentication logic. The authentication commands that a user of an Authentication Chip sees, such as WRITE, TST, RND etc are all implemented as small programs written in the CPU instruction set. The CPU contains a 32-bit Accumulator (which is used in most operations), and a number of registers. The CPU operates on 8-bit instructions specifically tailored to implementing authentication logic. Each 8-bit instruction typically, consists of a 4-bit opcode, and a 4-bit operand.","Operating Speed","An internal Clock Frequency Limiter Unit prevents the chip from operating at speeds any faster than a predetermined frequency. The frequency is built into the chip during manufacture, and cannot be changed. The frequency is recommended to be about 4-10 MHz.","Composition and Block Diagram","The Authentication Chip contains the following components:",{"@attributes":{"id":"p-1628","num":"2342"},"tables":{"@attributes":{"id":"TABLE-US-00158","num":"00158"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"CMOS",{}]},{"entry":["Unit Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Clock Frequency","Normal","Ensures the operating frequency of the Au-"]},{"entry":["Limiter",{},"thentication Chip does not exceed a specific"]},{"entry":[{},{},"maximum frequency."]},{"entry":["OverUnderPower","Normal","Ensures that the power supply remains in a"]},{"entry":["Detection Unit",{},"valid operating range."]},{"entry":["Programming","Normal","Allows users to enter Programming Mode."]},{"entry":"Mode De-"},{"entry":"tection Unit"},{"entry":["Noise Generator","Normal","For generating Inoise and for use in the"]},{"entry":[{},{},"Tamper Prevention and Detection circuitry."]},{"entry":["State Machine","Normal","for controlling the two operating modes of"]},{"entry":[{},{},"the chip (Programming Mode and Normal"]},{"entry":[{},{},"Mode). This includes generating the two"]},{"entry":[{},{},"operating cycles of the CPU, stalling during"]},{"entry":[{},{},"long command operations, and storing the"]},{"entry":[{},{},"op-code and operand during operating"]},{"entry":[{},{},"cycles."]},{"entry":["I\/O Unit","Normal","Responsible for communicating serially with"]},{"entry":[{},{},"the outside world."]},{"entry":["ALU","Non-","Contains the 32-bit accumulator as well as"]},{"entry":[{},"flashing","the general mathematical and logical"]},{"entry":[{},{},"operators."]},{"entry":["MinTicks Unit","Normal","Responsible for a programmable minimum"]},{"entry":[{},"(99%),","delay (via a countdown) between certain"]},{"entry":[{},"Non-","key-based operations."]},{"entry":[{},"flashing"]},{"entry":[{},"(1%)"]},{"entry":["Address","Normal","Generates direct, indirect, and indexed ad-"]},{"entry":["Generator Unit","(99%),","dresses as required by specific operands."]},{"entry":[{},"Non-"]},{"entry":[{},"flashing"]},{"entry":[{},"(1%)"]},{"entry":["Program Counter","Normal","Includes the 9 bit PC (program counter), as"]},{"entry":["Unit",{},"well as logic for branching and subroutine"]},{"entry":[{},{},"control"]},{"entry":["Memory Unit","Non-","Addressed by 9 bits of address. It contains an"]},{"entry":[{},"flashing","8-bit wide program Flash memory, and 32-"]},{"entry":[{},{},"bit wide Flash memory, RAM, and look-up"]},{"entry":[{},{},"tables. Also contains Programming Mode"]},{"entry":[{},{},"circuitry to enable loading of program code."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-1629","num":"2343"},"figref":"FIG. 181"},"Memory Map",{"@attributes":{"id":"p-1630","num":"2344"},"figref":"FIG. 182"},"Constants",{"@attributes":{"id":"p-1631","num":"2345"},"figref":"FIG. 183","sub":["0-3 ","0-4 "]},"Ram",{"@attributes":{"id":"p-1632","num":"2346"},"figref":"FIG. 184","b":"160"},"Flash Memory\u2014Variables",{"@attributes":{"id":"p-1633","num":"2347"},"figref":"FIG. 185","sub":["1 ","2","1","2","N ","0 "]},"Flash Memory\u2014Program",{"@attributes":{"id":"p-1634","num":"2348"},"figref":"FIG. 186"},"Registers","A number of registers are defined in the Authentication Chip. They are used for temporary storage during function execution. Some are used for arithmetic functions, others are used for counting and indexing, and others are used for serial I\/O. These registers do not need to be kept in non-volatile (Flash) memory. They can be read or written without the need for an erase cycle (unlike Flash memory). Temporary, storage registers that contain secret information still need to be protected from physical attack by Tamper Prevention and Detection circuitry and parity checks. All registers are cleared to 0 on a RESET. However, program code should not assume any particular state, and set up register values appropriately. Note that these registers do not include the various OK bits defined for the Tamper Prevention and Detection circuitry. The OK bits are scattered throughout the various units and are set to 1 upon a RESET.","Cycle","The 1-bit Cycle value determines whether the CPU is in a Fetch cycle (0) or an Execute cycle (1). Cycle is actually derived from a 1-bit register that holds the previous Cycle value. Cycle is not directly accessible from the instruction set. It is an internal register only.","Program Counter","A 6level deep 9-bit Program Counter Array (PCA) is defined. It is indexed by a 3-bit Stack Pointer (SP). The current Program Counter (PC), containing the address of the currently executing instruction, is effectively PCA[SP]. In addition, a 9-bit Adr register is defined, containing the resolved address of the current memory, reference (for indexed or indirect memory accesses). The PCA, SP, and Adr registers are not directly accessible from the instruction set. They are internal registers only.","CMD","The 8-bit CMD register is used to hold the currently executing command. While the CMD register is not directly accessible from the instruction set, and is an internal register only.","Accumulator and Z Flag","The Accumulator is a 32-bit general-purpose register. It is used as one of the inputs to all arithmetic operations, and is the register used for transferring information between memory registers. The Z register is a 1-bit flag, and is updated each time the Accumulator is written to. The Z register contains the zero-ness of the Accumulator. Z=1 if the last value written to the Accumulator was 0, and 0 if the last value written was non-0. Both the Accumulator and Z registers are directly accessible from the instruction set.","Counters","A number of special purpose counters\/index registers are defined:",{"@attributes":{"id":"p-1641","num":"2355"},"tables":{"@attributes":{"id":"TABLE-US-00159","num":"00159"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Register",{},{}]},{"entry":["Name","Size","Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["C1","1 \u00d7 3","3","Counter used to index arrays:"]},{"entry":[{},{},{},"AE, B160, M, H, y, and h."]},{"entry":["C2","1 \u00d7 5","5","General purpose counter"]},{"entry":["N","4 \u00d7 4","16\u2002","Used to index array X"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"All these counter registers are directly accessible from the instruction set. Special instructions exist to load them with specific values, and other instructions exist to decrement or increment them, or to branch depending on the whether or not the specific counter is zero. There are also 2 special flags (not registers) associated with C and C, and these flags hold the zero-ness of C or C. The flags are used for loop control, and are listed here, for although they are not registers, they can be tested like registers.",{"@attributes":{"id":"p-1643","num":"2357"},"tables":{"@attributes":{"id":"TABLE-US-00160","num":"00160"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["C1Z","1 = C1 is current zero, 0 = C1 is currently non-zero."]},{"entry":["C2Z","1 = C2 is current zero, 0 = C2 is currently non-zero."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"A number of 1-bit flags, corresponding to CPU operating modes, are defined:",{"@attributes":{"id":"p-1645","num":"2359"},"tables":{"@attributes":{"id":"TABLE-US-00161","num":"00161"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Name","Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["WE","1","WriteEnable for X register array:"]},{"entry":[{},{},"0 = Writes to X registers become no-ops"]},{"entry":[{},{},"1 = Writes to X registers are carried out"]},{"entry":["K2MX","1","0 = K1 is accessed during K references. Reads from M"]},{"entry":[{},{},"are interpreted as reads of 0"]},{"entry":[{},{},"1 = K2 is accessed during K references. Reads from M"]},{"entry":[{},{},"succeed."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"All these 1-bit flags are directly accessible from the instruction set. Special instructions exist to set and clear these flags. Registers used for Write Integrity",{"@attributes":{"id":"p-1647","num":"2361"},"tables":{"@attributes":{"id":"TABLE-US-00162","num":"00162"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Name","Bits","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["EE","1","Corresponds to the EqEncountered variable in the WR com-"]},{"entry":[{},{},"mand pseudocode. Used during the writing of multi-"]},{"entry":[{},{},"precision data values to determine whether all more signi-"]},{"entry":[{},{},"ficant components have been equal to their previous values."]},{"entry":["DE","1","Corresponds to the DecEncountered variable in the WR"]},{"entry":[{},{},"command pseudocode. Used during the writing of multi-"]},{"entry":[{},{},"precision data values to determine whether a more signi-"]},{"entry":[{},{},"ficant components has been decremented already."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Four 1-bit registers are defined for communication between the client (System) and the Authentication Chip. These registers are InBit, InBitValid, OutBit, and OutBitValid. InBit and InBitValid provide the means for clients to pass commands and data to the Authentication Chip. OutBit and OutBitValid provide the means for clients to get information from the Authentication Chip. A client sends commands and parameter bits to the Authentication Chip one bit at a time. Since the Authentication Chip is a slave device, from the Authentication Chip's point of view:\n\n","A single 32-bit register is defined for use as a timer. The MTR (MinTicksRemaining) register decrements every time an instruction is executed. Once the MTR register gets to 0, it stays at zero. Associated with MTR is a 1-bit flag MTRZ, which contains the zero-ness of the MTR register. If MTRZ is 1, then the MTR register is zero. If MTRZ is 0, then the MTR register is not zero yet. MTR always starts off at the MinTicks value (after a RESET or a specific key-accessing function), and eventually decrements to 0. While MTR can be set and MTRZ tested by specific instructions, the value of MTR cannot be directly read by any instruction.","Register Summary","The following table summarizes all temporary registers (ordered by register name). It lists register names, size (in bits), as well as where the specified register can be found.",{"@attributes":{"id":"p-1651","num":"2367"},"tables":{"@attributes":{"id":"TABLE-US-00163","num":"00163"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Register Name","Bits","Parity","Where Found"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Acc","32\u2002","1","Arithmetic Logic Unit"]},{"entry":["Adr","9","1","Address Generator Unit"]},{"entry":["AMT","32\u2002",{},"Arithmetic Logic Unit"]},{"entry":["C1","3","1","Address Generator Unit"]},{"entry":["C2","5","1","Address Generator Unit"]},{"entry":["CMD","8","1","State Machine"]},{"entry":["Cycle (Old = prev","1",{},"State Machine"]},{"entry":"Cycle)"},{"entry":["DE","1",{},"Arithmetic Logic Unit"]},{"entry":["EE","1",{},"Arithmetic Logic Unit"]},{"entry":["InBit","1",{},"Input Output Unit"]},{"entry":["InBitValid","1",{},"Input Output Unit"]},{"entry":["K2MX","1",{},"Address Generator Unit"]},{"entry":["MTR","32\u2002","1","MinTicks Unit"]},{"entry":["MTRZ","1",{},"MinTicks Unit"]},{"entry":["N[1-4]","16\u2002","4","Address Generator Unit"]},{"entry":["OutBit","1",{},"Input Output Unit"]},{"entry":["OutBitValid","1",{},"Input Output Unit"]},{"entry":["PCA","54\u2002","6","Program Counter Unit"]},{"entry":["RTMP","1",{},"Arithmetic Logic Unit"]},{"entry":["SP","3","1","Program Counter Unit"]},{"entry":["WE","1",{},"Memory Unit"]},{"entry":["Z","1",{},"Arithmetic Logic Unit"]},{"entry":["Total bits","206\u2003","17"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The CPU operates on 8-bit instructions specifically tailored to implementing authentication logic. The majority of 8-bit instruction consists of a 4-bit opcode, and a 4-bit operand. The high-order 4 bits contains the opcode, and the low order 4 bits contains the operand.","Opcodes and Operands (Summary)","The opcodes are summarized in the following table:",{"@attributes":{"id":"p-1654","num":"2370"},"tables":{"@attributes":{"id":"TABLE-US-00164","num":"00164"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Opcode","Mnemonic","Simple Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0000","TBR","Test and branch."]},{"entry":["0001","DBR","Decrement and branch"]},{"entry":["001\u2002","JSR","Jump subroutine via table"]},{"entry":["\u200201000","RTS","Return from subroutine"]},{"entry":["\u200201001","JSI","Jump subroutine indirect"]},{"entry":["0101","SC","Set counter"]},{"entry":["0110","CLR","Clear specific flash registers"]},{"entry":["0111","SET","Set bits in specific flash register"]},{"entry":["1000","ADD","Add a 32 bit value to the Accumulator"]},{"entry":["1001","LOG","Logical operation (AND, and OR)"]},{"entry":["1010","XOR","Exclusive-OR Accumulator with some value"]},{"entry":["1011","LD","Load Accumulator from specified location"]},{"entry":["1100","ROR","Rotate Accumulator right"]},{"entry":["1101","RPL","Replace bits"]},{"entry":["1110","LDK","Load Accumulator with a constant"]},{"entry":["1111","ST","Store Accumulator in specified location"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The following table is a summary of which operands can be used with which opcodes. The table is ordered alphabetically by opcode mnemonic. The binary value for each operand can be found in the subsequent tables.",{"@attributes":{"id":"p-1656","num":"2372"},"tables":{"@attributes":{"id":"TABLE-US-00165","num":"00165"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Opcode","Valid Operand"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ADD","{A, B, C, D, E, T, MT, AM,"]},{"entry":[{},"AE[C1], B160[C1], H[C1], M[C1], K[C1], R[C1], X[N4]}"]},{"entry":["CLR","{WE, K2MX, M[C1], Group1, Group2}"]},{"entry":["DBR","{C1, C2}, Offset into DBR Table"]},{"entry":["JSI","{ }"]},{"entry":["JSR","Offset into Table 1"]},{"entry":["LD","{A, B, C, D, E, T, MT, AM,"]},{"entry":[{},"AE[C1], B160[C1], H[C1], M[C1], K[C1], R[C1], X[N4]}"]},{"entry":["LDK","{0x0000..., 0x3636..., 0x5C5C..., 0xFFFF, h[C1], y[C1]}"]},{"entry":["LOG","{AND, OR}, {A, B, C, D, E, T, MT, AM}"]},{"entry":["ROR","{InBit, OutBit, LFSR, RLFSR, IST, ISW, MTRZ, 1, 2, 27, 31}"]},{"entry":["RPL","{Init, MHI, MLO}"]},{"entry":["RTS","{ }"]},{"entry":["SC","{C1, C2}, Offset into counter list"]},{"entry":["SET","{WE, K2MX, Nx, MTR, IST, ISW}"]},{"entry":["ST","{A, B, C, D, E, T, MT, AM,"]},{"entry":[{},"AE[C1], B160[C1], H[C1], M[C1], K[C1], R[C1], X[N4]}"]},{"entry":["TBR","{0, 1}, Offset into Table 1"]},{"entry":["XOR","{A, B, C, D, E, T, MT, AM, X[N1], X[N2], X[N3], X[N4]}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following operand table shows the interpretation of the 4-bit operands where all 4 bits are used for direct interpretation.",{"@attributes":{"id":"p-1658","num":"2374"},"tables":{"@attributes":{"id":"TABLE-US-00166","num":"00166"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}},{"entry":["Oper-","ADD,",{},{},{},{},{},{}]},{"entry":["and","LD,ST","XOR","ROR","LDK","RPL","SET","CLR"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0000","E","E","InBit","0x00...","Init","WE","WE"]},{"entry":["0001","D","D","OutBit","0x36...","\u2014","K2MX","K2MX"]},{"entry":["0010","C","C","RB","0x5C...","\u2014","Nx","\u2014"]},{"entry":["0011","B","B","XRB","0xFF...","\u2014","\u2014","\u2014"]},{"entry":["0100","A","A","IST","y[C1]","\u2014","IST","\u2014"]},{"entry":["0101","T","T","ISW","\u2014","\u2014","ISW","\u2014"]},{"entry":["0110","MT","MT","MTRZ","\u2014","\u2014","MTR","\u2014"]},{"entry":["0111","AM","AM","\u20021","\u2014","\u2014","\u2014","\u2014"]},{"entry":["1000","AE[C1]","\u2014","\u2014","h[C1]","\u2014","\u2014","\u2014"]},{"entry":["1001","B160[C1]","\u2014","\u20022","\u2014","\u2014","\u2014","\u2014"]},{"entry":["1010","H[C1]","\u2014","27","\u2014","\u2014","\u2014","\u2014"]},{"entry":["1011","\u2014","\u2014","\u2014","\u2014","\u2014","\u2014","\u2014"]},{"entry":["1100","R[C1]","X[N1]","31","\u2014","\u2014","\u2014","R"]},{"entry":["1101","K[C1]","X[N2]","\u2014","\u2014","\u2014","\u2014","Group1"]},{"entry":["1110","M[C1]","X[N3]","\u2014","\u2014","MLO","\u2014","M[C1]"]},{"entry":["1111","X[N4]","X[N4]","\u2014","\u2014","MHI","\u2014","Group2"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}}}}},"The following instructions make a selection based upon the highest bit of the operand:",{"@attributes":{"id":"p-1660","num":"2376"},"tables":{"@attributes":{"id":"TABLE-US-00167","num":"00167"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Which Counter?","Which operation?","Which Value?"]},{"entry":["Operand","(DBR, SC)","(LOG)","(TBR)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","C1","AND","Zero"]},{"entry":["1","C2","OR","Non-zero"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The lowest 3 bits of the operand are either offsets (DBR, TBR), values from a special table (SC) or as in the case of LOG, they select the second input for the logical operation. The interpretation matches the interpretation for the ADD, LD, and ST opcodes:",{"@attributes":{"id":"p-1662","num":"2378"},"tables":{"@attributes":{"id":"TABLE-US-00168","num":"00168"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Operand","LOG Input2","SC Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["000","E","\u20022"]},{"entry":["001","D","\u20023"]},{"entry":["010","C","\u20024"]},{"entry":["011","B","\u20027"]},{"entry":["100","A","10"]},{"entry":["101","T","15"]},{"entry":["110","MT","19"]},{"entry":["111","AM","31"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-1663","num":"2379"},"tables":{"@attributes":{"id":"TABLE-US-00169","num":"00169"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ADD - Add To Accumulator"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","ADD"]},{"entry":[{},"Opcode:","1000"]},{"entry":[{},"Usage:","ADD Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The ADD instruction adds the specified operand to the Accumulator via modulo 2addition. The operand is one of A, B, C, E, T, AM, MT, AE[C], H[C], B[C], R[C], K[C], M[C], or X[N]. The Z flag is also set during this operation, depending on whether the value loaded is zero or not.",{"@attributes":{"id":"p-1665","num":"2381"},"tables":{"@attributes":{"id":"TABLE-US-00170","num":"00170"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"CLR - Clear Bits"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","CLR"]},{"entry":[{},"Opcode:","0110"]},{"entry":[{},"Usage:","CLR Flag\/Register"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The CLR instruction causes the specified internal flag or Flash memory registers to be cleared. In the case of Flash memory, although the CLR instruction takes some time the next instruction is stalled until the erasure of Flash memory has finished. The registers that can be cleared are WE and KMX. The Flash memory that can be cleared are: R, M[C], Group, and Group. Group is the IST and ISW flags. If these are cleared, then the only valid high level command is the SSI instruction. Group is the MT, AM, K and K registers. R is erased separately since it must be updated after each call to TST. M is also erased via an index mechanism to allow individual parts of M to be updated. There is also a corresponding SET instruction.",{"@attributes":{"id":"p-1667","num":"2383"},"tables":{"@attributes":{"id":"TABLE-US-00171","num":"00171"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DBR - Decrement and Branch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","DBR"]},{"entry":[{},"Opcode:","0001"]},{"entry":[{},"Usage:","DBR Counter, Offset"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"This instruction provides the mechanism for building simple loops. The high hit of the operand selects between testing C or C (the two counters). If the specified counter is non-zero, then the counter is decremented and the value at the given offset (sign extended) is added to the PC. If the specified counter is zero, it is decremented and processing continues at PC+1. The 8-entry offset table is stored at address 0 1100 0000 (the 64entry of the program memory). The 8 bits of offset are treated as a signed number. Thus 0x FF is treated as \u22121, and 0x 01 is treated as +1. Typically the value will be negative for use in loops.",{"@attributes":{"id":"p-1669","num":"2385"},"tables":{"@attributes":{"id":"TABLE-US-00172","num":"00172"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"JSI - Jump Subroutine Indirect"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","JSI"]},{"entry":[{},"Opcode:","01001"]},{"entry":[{},"Usage:","JSI (Acc)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The JSI instruction allows the jumping to a subroutine dependant on the value currently in the Accumulator. The instruction pushes the current PC onto the stack, and loads the PC with a new value. The upper 8 bits of the new PC are loaded from Jump Table 2 (offset given by the lower 5 bits of the Accumulator), and the lowest bit of the PC is cleared to 0. Thus all subroutines must start at even addresses. The stack provides for 6 levels of execution (5 subroutines deep). It is the responsibility of the programmer to ensure that this depth is not exceeded or the return value will be overwritten (since the stack wraps).",{"@attributes":{"id":"p-1671","num":"2387"},"tables":{"@attributes":{"id":"TABLE-US-00173","num":"00173"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"JSR - Jump Subroutine"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","JSR"]},{"entry":[{},"Opcode:","001"]},{"entry":[{},"Usage:","JSR Offset"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The JSR instruction provides for the most common usage of the subroutine construct. The instruction pushes the current PC onto the stack, and loads the PC with a new value. The upper 8 bits of the new PC value comes from Address Table 1, with the offset into the table provided by the 5-bit operand (32 possible addresses). The lowest bit of the new PC is cleared to 0. Thus all subroutines must start at even addresses. The stack provides for 6 levels of execution (5 subroutines deep). It is the responsibility of the programmer to ensure that this depth is not exceeded or the return value will be overwritten (since the stack wraps).",{"@attributes":{"id":"p-1673","num":"2389"},"tables":{"@attributes":{"id":"TABLE-US-00174","num":"00174"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"LD - Load Accumulator"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","LD"]},{"entry":[{},"Opcode:","1011"]},{"entry":[{},"Usage:","LD Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The LD instruction loads the Accumulator from the specified operand. The operand is one of A, B, C, D, E, T, AM, MT, AE[C], H[C], B[C], R[C], K[C], M[C], or X[N]. The Z flag is also set during this operation, depending on whether the value loaded is zero or not.",{"@attributes":{"id":"p-1675","num":"2391"},"tables":{"@attributes":{"id":"TABLE-US-00175","num":"00175"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"LDK - Load Constant"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","LDK"]},{"entry":[{},"Opcode:","1110"]},{"entry":[{},"Usage:","LDK Constant"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The LDK instruction loads the Accumulator with the specified constant. The constants are those 32-bit values required for HMAC-SHA1 and all 0s and all 1s as most useful for general purpose processing. Consequently they are a choice of:\n\n",{"@attributes":{"id":"p-1677","num":"2397"},"tables":{"@attributes":{"id":"TABLE-US-00176","num":"00176"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"LOG - Logical Operation"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","LOG"]},{"entry":[{},"Opcode:","1001"]},{"entry":[{},"Usage:","LOG Operation Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The LOG instruction performs 32-bit bitwise logical operations on the Accumulator and a specified value. The two operations supported by the LOG instruction are AND and XOR. Bitwise NOT and XOR operations are supported by the XOR instruction. The 32-bit value to be ANDed or ORed with the accumulator is one of the following: A, B, C, D, E, T, MT and AM. The Z flag is also set during this operation, depending on whether resultant 32-bit value (loaded into the Accumulator) is zero or not.",{"@attributes":{"id":"p-1679","num":"2399"},"tables":{"@attributes":{"id":"TABLE-US-00177","num":"00177"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ROR - Rotate Right"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","ROR"]},{"entry":[{},"Opcode:","1100"]},{"entry":[{},"Usage:","ROR Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The ROR instruction provides a way of rotating the Accumulator right a set number of bits. The bit coming in at the top of the Accumulator (to become bit ) can either come from the previous bit  of the Accumulator, or from an external 1-bit flag (such as a flag, or the serial input connection). The bit rotated out can also be output from the serial connection, or combined with an external flag. The allowed operands are: InBit, OutBit, LFSR, RLFSR, IST, ISW, MTRZ, 1, 2, 27, and 31. The Z flag is also set during this operation, depending on whether resultant 32-bit value (loaded into the Accumulator) is zero or not. In its simplest form, the operand for the ROR instruction is one of 1, 2, 27, 31, indicating how many bit positions the Accumulator should be rotated. For these operands, there is no external input or output\u2014the bits of the Accumulator are merely rotated right. With operands IST, ISW, and MTRZ, the appropriate flag is transferred to the highest bit of the Accumulator. The remainder of the Accumulator is shifted right one bit position (bit becomes bit  etc), with lowest bit of the Accumulator shifted out. With operand InBit, the next serial input bit is transferred to the highest bit of the Accumulator. The InBitValid bit is then cleared. If there is no input bit available from the client yet, execution is suspended until there is one. The remainder of the Accumulator is shifted right one bit position (bit becomes bit  etc), with lowest bit of the Accumulator shifted out.","With operand OutBit, the Accumulator is shifted right one bit position. The bit shifted out from bit  is stored in the OutBit flag and the OutBitValid flag is set. It is therefore ready for a client to read. If the OutBitValid flag is already set, execution of the instruction stalls until the OutBit bit has been read by the client (and the OutBitValid flag cleared). The new bit shifted in to bit  should be considered garbage (actually the value currently in the InBit register). Finally, the RB and XRB operands allow the implementation of LFSRs and multiple precision shift registers. With RB, the bit shifted out (formally bit ) is written to the RTMP register. The register currently in the RTMP register becomes the new bit  of the Accumulator. Performing multiple ROR RB commands over several 32-bit values implements a multiple precision rotate\/shift right. The XRB operates in the same way as RB, in that the current value in the. RTMP register becomes the new bit  of the Accumulator. However with the XRB instruction, the bit formally known as bit  does not simply replace RTMP (as in the RB instruction). Instead, it is XORed with RTMP, and the result stored in RTMP. This allows the implementation of long LFSRs, as required by the Authentication protocol.",{"@attributes":{"id":"p-1682","num":"2402"},"tables":{"@attributes":{"id":"TABLE-US-00178","num":"00178"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"RPL - Replace Bits"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","RPL"]},{"entry":[{},"Opcode:","1101"]},{"entry":[{},"Usage:","ROR Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The RPL instruction is designed for implementing the high level WRITE command in the Authentication Chip. The instruction is designed to replace the upper 16 bits of the Accumulator by the value that will eventually be written to the M array (dependant on the Access Mode value). The instruction takes 3 operands: Init, MHI, and MLO. The lnit operand sets all internal flags and prepares the RPL unit within the ALU for subsequent processing. The Accumulator is transferred to an internal AccessMode register. The Accumulator should have been loaded from the AM Flash memory location before the call to RPL Init in the case of implementing the WRITE command, or with 0 in the case of implementing the TST command. The Accumulator is left unchanged. The MHI and MLO operands refer to whether the upper or lower 16 bits of M[C] will be used in the comparison against the (always) upper 16 bits of the Accumulator. Each MHI and MLO instruction executed uses the subsequent 2 bits from the initialized AccessMode value. The first execution of MHI or MLO uses the lowest 2 bits, the next uses the second two bits etc.",{"@attributes":{"id":"p-1684","num":"2404"},"tables":{"@attributes":{"id":"TABLE-US-00179","num":"00179"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"RTS - Return From Subroutine"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","RTS"]},{"entry":[{},"Opcode:","01000"]},{"entry":[{},"Usage:","RTS"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The RTS instruction causes execution to resume at the instruction after the most recently executed JSR or JSI instruction. Hence the term: returning from the subroutine. In actuality, the instruction pulls the saved PC from the stack, adds 1, and resumes execution at the resultant address. Although 6 levels of execution are provided for (5 subroutines), it is the responsibility of the programmer to balance each JSR and JSI instruction with an RTS. An RTS executed with no previous JSR will cause execution to begin at whatever address happens to be pulled from the stack.",{"@attributes":{"id":"p-1686","num":"2406"},"tables":{"@attributes":{"id":"TABLE-US-00180","num":"00180"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SC - Set Counter"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","SC"]},{"entry":[{},"Opcode:","0101"]},{"entry":[{},"Usage:","SC Counter Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The SC instruction is used to load a counter with a particular value. The operand determines which of counters C and C is to be loaded. The Value to be loaded is one of 2, 3, 4, 7, 10, 15, 19, and 31. The counter values are used for looping and indexing. Both C and C can be used for looping constructs (when combined with the DBR instruction), while only C can be used for indexing 32-bit parts of multi-precision variables.",{"@attributes":{"id":"p-1688","num":"2408"},"tables":{"@attributes":{"id":"TABLE-US-00181","num":"00181"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SET - Set Bits"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","SET"]},{"entry":[{},"Opcode:","0111"]},{"entry":[{},"Usage:","SET Flag\/Register"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The SET instruction allows the setting of particular flags or flash memory. There is also a corresponding CLR instruction. The WE and KMX operands each set the specified flag for later processing. The IST and ISW operands each set the appropriate bit in Flash memory, while the MTR operand transfers the current value in the Accumulator into the MTR register. The SET Nx command loads N-N with the following constants:",{"@attributes":{"id":"p-1690","num":"2410"},"tables":{"@attributes":{"id":"TABLE-US-00182","num":"00182"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Index","Constant Loaded","Initial X[N] referred to"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["N1","\u20022","\u2002X[13]"]},{"entry":["N2","\u20027","X[8]"]},{"entry":["N3","13","X[2]"]},{"entry":["N4","15","X[0]"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Note that each initial X[N] referred to matches the optimized SHA-1 algorithm initial states for indexes N-N. When each index value Ndecrements, the effective X[N] increments. This is because the X words are stored in memory with most significant word first.",{"@attributes":{"id":"p-1692","num":"2412"},"tables":{"@attributes":{"id":"TABLE-US-00183","num":"00183"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ST - Store Accumulator"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","ST"]},{"entry":[{},"Opcode:","1111"]},{"entry":[{},"Usage:","ST Location"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The ST instruction is stores the current value of the Accumulator in the specified location. The location is one of A, B, C, D, E, T, AM, MT, AE[C], H[C], B[C], R[C], K[C], M[C], or X[N]. The X[N] operand has the side effect of advancing the N index. After the store has taken place, N will be pointing to the next element in the X array. N decrements by 1, but since the X array is ordered from high to low, to decrement the index advances to the next element in the array. If the destination is in Flash memory, the effect of the ST instruction is to set the bits in the Flash memory corresponding to the bits in the Accumulator. To ensure a store of the exact value from the Accumulator, be sure to use the CLR instruction to erase the appropriate memory location first.",{"@attributes":{"id":"p-1694","num":"2414"},"tables":{"@attributes":{"id":"TABLE-US-00184","num":"00184"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"TBR - Test and Branch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","TR"]},{"entry":[{},"Opcode:","0000"]},{"entry":[{},"Usage:","TBR Value Index"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The Test and Branch instruction tests whether the Accumulator is zero or non-zero, and then branches to the given address if the Accumulator's current state matches that being tested for. If the Z flag matches the TRB test, replace the PC by 9 bit value where bit=0 and upper 8 bits come from MU. Otherwise increment current PC by 1. The Value operand is either 0 or 1. A 0 indicates the test is for the Accumulator to be zero. A 1 indicates the test is for the Accumulator to be non-zero. The Index operand indicates where execution is to jump to should the test succeed. The remaining 3 bits of operand index into the lowest 8 entries of Jump Table 1. The upper 8 bits are taken from the table, and the lowest bit (bit ) is cleared to 0. CMD is cleared to 0 upon a RESET.  is translated as TBR , which means branch to the address stored in address offset 0 if the Accumulator=0. Since the Accumulator and Z flag are also cleared to 0 on a RESET, the test will be true, so the net effect is a jump to the address stored in the 0th entry in the jump table.",{"@attributes":{"id":"p-1696","num":"2416"},"tables":{"@attributes":{"id":"TABLE-US-00185","num":"00185"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XOR - Exclusive OR"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mnemonic:","XOR"]},{"entry":[{},"Opcode:","1010"]},{"entry":[{},"Usage:","XOR Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The XOR instruction performs a 32-bit bitwise XOR with the Accumulator, and stores the result in the Accumulator. The operand is one of A, B, C, D, E, T, AM, MT, X[N], X[N], X[N], or X[N]. The Z flag is also set during this operation, depending on the result (i.e. what value is loaded into the Accumulator). A bitwise NOT operation can be performed by XORing the Accumulator with 0xFFFFFFFF (via the LDK instruction). The X[N] operands have a side effect of advancing the appropriate index to the next value (after the operation). After the XOR has taken place, the index will be pointing to the next element in the X array. N4 is also advanced by the ST X[N] instruction. The index decrements by 1, but since the X array is ordered from high to low, to decrement the index advances to the next element in the array.","ProgrammingMode Detection Unit","The ProgrammingMode Detection Unit monitors the input clock voltage. If the clock voltage is a particular value the Erase Tamper Detection Line is triggered to erase all keys, program code, secret information etc and enter Program Mode. The ProgrammingMode Detection Unit can be implemented with regular CMOS, since the key does not pass through this unit. It does not have to be implemented with non-flashing CMOS. There is no particular need to cover the ProgrammingMode Detection Unit by the Tamper Detection Lines, since an attacker can always place the chip in ProgrammingMode via the CLK input. The use of the Erase Tamper Detection Line as the signal for entering Programming Mode means that if an attacker wants to use Programming Mode as part of an attack, the Erase Tamper Detection Lines must be active and functional. This makes an attack on the Authentication Chip far more difficult.","Noise Generator","The Noise Generator can be implemented with regular CMOS, since the key does not pass through this unit. It does not have to be implemented with non-flashing CMOS. However, the Noise Generator must be protected by both Tamper Detection and Prevention lines so that if an attacker attempts to tamper with the unit, the chip will either RESET or erase all secret information. In addition, the bits in the LFSR must be validated to ensure they have not been tampered with (i.e. a parity check). If the parity check fails, the Erase Tamper Detection Line is triggered. Finally, all 64 bits of the Noise Generator are ORed into a single bit. If this bit is 0, the Erase Tamper Detection Line is triggered. This is because 0 is an invalid state for an LFSR. There is no point in using an OK bit setup since the Noise Generator bits are only used by the Tamper Detection and Prevention circuitry.","State Machine","The State Machine is responsible for generating the two operating cycles of the CPU, stalling during long command operations, and storing the op-code and operand during operating cycles. The State Machine can be implemented with regular CMOS, since the key does not pass through this unit. It does not have to be implemented with non-flashing CMOS. However, the opcode\/operand latch needs to be parity-checked. The logic and registers contained in the State Machine must be covered by both Tamper Detection Lines. This is to ensure that the instructions to be executed are not changed by an attacker.","The Authentication Chip does not require the high speeds and throughput of a general purpose CPU. It must operate fast enough to perform the authentication protocols, but not faster. Rather than have specialized circuitry for optimizing branch control or executing opcodes while fetching the next one (and all the complexity associated with that), the state machine adopts a simplistic view of the world. This helps to minimize design time as well as reducing the possibility of error in implementation.","The general operation of the state machine is to generate sets of cycles:\n\n","Under normal conditions, the state machine generates cycles: 0, 1, 0, 1, 0, 1, 0, 1 . . . However, in some cases, the state machine stalls, generating Cycle 0 each clock tick until the stall condition finishes. Stall conditions include waiting for erase cycles of Flash memory, waiting for clients to read or write serial information, or an invalid opcode (due to tampering). If the Flash memory is currently being erased, the next instruction cannot execute until the Flash memory has finished being erased. This is determined by the Wait signal coming from the Memory Unit. If Wait=1, the State Machine must only generate Cycle 0s. There are also two cases for stalling due to serial I\/O operations:\n\n","In both these cases, the state machine must stall until the stalling condition has finished. The next \u201ccycle\u201d therefore depends on the old or previous cycle, and the current values of CMD, Wait, OutBitValid, and InBitValid. Wait comes from the MU, and OutBitValid and InBitValid come from the I\/O Unit. When Cycle is 0, the 8-bit op-code is fetched from the memory unit and placed in the 8-bit CMD register. The write enable for the CMD register is therefore \u02dcCycle. There are two outputs from this unit: Cycle and CMD. Both of these values are passed into all the other processing units within the Authentication Chip. The 1-bit Cycle value lets each unit know whether a fetch or execute cycle is taking place, while the 8-bit CMD value allows each unit to take appropriate action for commands related to the specific unit.",{"@attributes":{"id":"p-1705","num":"2429"},"figref":"FIG. 187"},{"@attributes":{"id":"p-1706","num":"2430"},"tables":{"@attributes":{"id":"TABLE-US-00186","num":"00186"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Logic:","Wait OR"]},{"entry":[{},"\u02dc(Old OR ((CMD=ROR) & ((CMD=InBit AND \u02dcInBitValid)"]},{"entry":[{},"OR (CMD=OutBit AND OutBitValid))))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Old and CMD are both cleared to 0 upon a RESET. This results in the first cycle being 1, which causes the 0 CMD to be executed. 0 is translated as TBR 0, which means branch to the address stored in address offset 0 if the Accumulator=0 Since the Accumulator is also cleared to 0 on a RESET, the test will be true, so the net effect is a jump to the address stored in the 0th entry in the jump table. The two VAL units are designed to validate the data that passes through them. Each contains an OK bit connected to both Tamper Prevention and Detection Lines. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. In the case of VAL, the effective Cycle will always be 0 if the chip has been tampered with. Thus no program code will execute since there will never be a Cycle 1. There is no need to check if Old has been tampered with, for if an attacker freezes the Old state, the chip will not execute any further instructions. In the case of VAL, the effective 8-bit CMD value will always be 0 if the chip has been tampered with, which is the TBR 0 instruction. This will stop execution of any program code. VALalso performs a parity check on the bits from CMD to ensure that CMD has not been tampered with. If the parity check fails, the Erase Tamper Detection Line is triggered.","I\/O Unit","The I\/O Unit is responsible for communicating serially with the outside world. The Authentication Chip acts as a slave serial device, accepting serial data from a client, processing the command, and sending the resultant data to the client serially. The I\/O Unit can be implemented with regular CMOS, since the key does not pass through this unit. It does not have to be implemented with non-flashing CMOS. In addition, none of the latches need to be parity checked since there is no advantage for an attacker to destroy or modify them. The I\/O Unit outputs 0s and inputs 0s if either of the Tamper Detection Lines is broken. This will only come into effect if an attacker has disabled the RESET and\/or erase circuitry, since breaking either Tamper Detection Lines should result in a RESET or the erasure of all Flash memory","The InBit, InBitValid, OutBit, and OutBitValid  bit registers are used for communication between the client (System) and the Authentication Chip. InBit and InBitValid provide the means for clients to pass commands and data to the Authentication Chip. OutBit and OutBitValid provide the means for clients to get information from the Authentication Chip. When the chip is RESET, InBitValid and OutBitValid are both cleared. A client sends commands and parameter bits to the Authentication Chip one bit at a time. From the Authentication Chip's point of view:\n\n","The actual stalling of commands is taken care of by the State Machine, but the various communication registers and the communication circuitry is found in the I\/O Unit.",{"@attributes":{"id":"p-1711","num":"2437"},"figref":"FIG. 188"},{"@attributes":{"id":"p-1712","num":"2438"},"tables":{"@attributes":{"id":"TABLE-US-00187","num":"00187"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic:","Cycle AND (CMD = ROR OutBit)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The Serial I\/O unit contains the circuitry for communicating externally with the external world via the Data pin. The InBitUsed control signal must be set by whichever unit consumes the InBit during a given clock cycle (which can be any state of Cycle). The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. In the case of VAL, the effective bit output from the chip will always be 0 if the chip has been tampered with. Thus no useful output can be generated by an attacker. In the case of VAL, the effective bit input to the chip will always be 0 if the chip has been tampered with. Thus no useful input can be chosen by an attacker. There is no need to verify the registers in the I\/O Unit since an attacker does not gain anything by destroying or modifying them.","ALU",{"@attributes":{"id":"p-1714","num":"2440"},"figref":"FIG. 189"},{"@attributes":{"id":"p-1715","num":"2441"},"tables":{"@attributes":{"id":"TABLE-US-00188","num":"00188"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic:","Cycle AND CMDAND (CMD\u2260 ST)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Since the WriteEnables of Acc and Z takes CMDand Cycle into account (due to Logic), these two bits are not required by the multiplexor MXin order to select the output. The output selection for MXonly requires bits 6-3 of CMD and is therefore simpler as a result.",{"@attributes":{"id":"p-1717","num":"2443"},"tables":{"@attributes":{"id":"TABLE-US-00189","num":"00189"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Output","CMD"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MX","ADD","ADD"]},{"entry":[{},"AND","LOG AND"]},{"entry":[{},"OR","LOG OR"]},{"entry":[{},"XOR","XOR"]},{"entry":[{},"RPL","RPL"]},{"entry":[{},"ROR","ROR"]},{"entry":[{},"From MU","LD or LDK"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. In the case of VAL, the effective bit output from the Accumulator will always be 0 if the chip has been tampered with. This prevents an attacker from processing anything involving the Accumulator. VALalso performs a parity check on the Accumulator, setting the Erase Tamper Detection Line if the check fails. In the case of VAL, the effective Z status of the Accumulator will always be true if the chip has been tampered with. Thus no looping constructs can be created by an attacker. The remaining function blocks in the ALU are described as follows. All must be implemented in non-flashing CMOS.",{"@attributes":{"id":"p-1719","num":"2445"},"tables":{"@attributes":{"id":"TABLE-US-00190","num":"00190"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Block","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OR","Takes the 32-bit output from the multiplexor MX, ORs all 32 bits"]},{"entry":[{},"together to get 1 bit."]},{"entry":["ADD","Outputs the result of the addition of its two inputs, modulo 2."]},{"entry":["AND","Outputs the 32-bit result of a parallel bitwise AND of its two 32-bit"]},{"entry":[{},"inputs."]},{"entry":["OR","Outputs the 32-bit result of a parallel bitwise OR of its two 32-bit"]},{"entry":[{},"inputs."]},{"entry":["XOR","Outputs the 32-bit result of a parallel bitwise XOR of its two 32-bit"]},{"entry":[{},"inputs."]},{"entry":["RPL","Examined in further detail below."]},{"entry":["ROR","Examined in further detail below."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-1720","num":"2446"},"figref":"FIG. 190","b":["1","1"],"sub":"2"},{"@attributes":{"id":"p-1721","num":"2447"},"tables":{"@attributes":{"id":"TABLE-US-00191","num":"00191"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Operand","CMD"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Init","0000"]},{"entry":[{},"MLO","1110"]},{"entry":[{},"MHI","1111"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MHI and MLO have the hi bit set to easily differentiate them from the Init bit pattern, and the lowest bit can be used to differentiate between MHI and MLO. The EE and DE flags must be updated each time the RPL command is issued. For the Init stage, we need to setup the two values with 0, and for MHI and MLO, we need to update the values of EE and DE appropriately. The WriteEnable for EE and DE is therefore:",{"@attributes":{"id":"p-1723","num":"2449"},"tables":{"@attributes":{"id":"TABLE-US-00192","num":"00192"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic:","Cycle AND (CMD= RPL)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"With the 32 bit AMT register, we want to load the register with the contents of AM (read from the MU) upon an RPL Init command, and to shift the AMT register right two bit positions for the RPL MLO and RPL MS commands. This can be simply tested for with the highest bit of the RPL operand (CMD). The WriteEnable and ShiftEnable for the AMT register is therefore:",{"@attributes":{"id":"p-1725","num":"2451"},"tables":{"@attributes":{"id":"TABLE-US-00193","num":"00193"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic","LogicAND CMD"]},{"entry":[{},"Logic","LogicAND \u02dcCMD"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The output from Logicis also useful as input to multiplexor MX, since it can be used to gate through either the current  access mode bits or 00 (which results in a reset of the DE and EE registers since it represents the access mode RW). Consequently MXis:",{"@attributes":{"id":"p-1727","num":"2453"},"tables":{"@attributes":{"id":"TABLE-US-00194","num":"00194"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Output","Logic"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MX","AMT output","0"]},{"entry":[{},"00","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The RPL logic only replaces the upper 16 bits of the Accumulator. The lower 16 bits pass through untouched. However, of the 32 bits from the MU (corresponding to one of M[-]), only the upper or lower 16 bits are used. Thus MXtests CMDto distinguish between MHI and MLO.",{"@attributes":{"id":"p-1729","num":"2455"},"tables":{"@attributes":{"id":"TABLE-US-00195","num":"00195"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Output","CMD"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MX","Lower 16 bits","0"]},{"entry":[{},"Upper 16 bits","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The logic for updating the DE and EE registers matches the pseudocode of the WR command. Note that an input of an AccessMode value of 00 (=RW which occurs during an RPL INIT) causes both DE and EE to be loaded with 0 (the correct initialization value). EE is loaded with the result from Logic, and DE is loaded with the result fromLogic.",{"@attributes":{"id":"p-1731","num":"2457"},"tables":{"@attributes":{"id":"TABLE-US-00196","num":"00196"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic","(((AccessMode=MSR) AND EQ) OR"]},{"entry":[{},{},"\u2009((AccessMode=NMSR) AND EE AND EQ))"]},{"entry":[{},"Logic","(((AccessMode=MSR) AND LT) OR"]},{"entry":[{},{},"\u2009((AccessMode=NMSR) AND DE) OR"]},{"entry":[{},{},"\u2009((AccessMode=NMSR) AND EQ AND LT))"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The upper 16 bits of the Accumulator must be replaced with the value that is to be written to M. Consequently Logicmatches the WE flag from the WR command pseudocode.",{"@attributes":{"id":"p-1733","num":"2459"},"tables":{"@attributes":{"id":"TABLE-US-00197","num":"00197"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic","((AccessMode=RW) OR"]},{"entry":[{},{},"\u2009((AccessMode=MSR) AND LT) OR"]},{"entry":[{},{},"\u2009((AccessMode=NMSR) AND (DE OR LT)))"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The output from Logicis used directly to drive the selection between the original 16 bits from the Accumulator and the value from M[-] via multiplexor MX. If the 16 bits from the Accumulator are selected (leaving the Accumulator unchanged), this signifies that the Accumulator value can be written to M[n]. If the 16-bit value from M is selected (changing the upper 16 bits of the Accumulator), this signifies that the 16-bit value in M will be unchanged. MXtherefore takes the following form:",{"@attributes":{"id":"p-1735","num":"2461"},"tables":{"@attributes":{"id":"TABLE-US-00198","num":"00198"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Output","Logic"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MX","16 bits from MU","0"]},{"entry":[{},"16 bits from Acc","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"There is no point parity checking AMT as an attacker is better off forcing the input to MXto be 0 (thereby enabling an attacker to write any value to M). However, if an attacker is going to go to the trouble of laser-cutting the chip (including all Tamper Detection tests and circuitry), there are better targets than allowing the possibility of a limited chosen-text attack by fixing the input of MX.","Ror",{"@attributes":{"id":"p-1737","num":"2463"},"figref":"FIG. 191","b":"0","sub":["3","1","2","3"]},{"@attributes":{"id":"p-1738","num":"2464"},"tables":{"@attributes":{"id":"TABLE-US-00199","num":"00199"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Operand","CMD"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"InBit","0000"]},{"entry":[{},"OutBit","0001"]},{"entry":[{},"RB","0010"]},{"entry":[{},"XRB","0011"]},{"entry":[{},"IST","0100"]},{"entry":[{},"ISW","0101"]},{"entry":[{},"MTRZ","0110"]},{"entry":[{},"1","0111"]},{"entry":[{},"2","1001"]},{"entry":[{},"27","1010"]},{"entry":[{},"31","1100"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Logicis used to provide the WriteEnable signal to RTMP. The RTMP register should only be written to during ROR RB and ROR XRB commands. Logicis used to provide the control signal whenever the InBit is consumed. The two combinatorial logic blocks are:",{"@attributes":{"id":"p-1740","num":"2466"},"tables":{"@attributes":{"id":"TABLE-US-00200","num":"00200"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic:","Cycle AND (CMD= ROR) AND (CMD= 001)"]},{"entry":[{},"Logic:","Cycle AND (CMD= ROR InBit)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"With multiplexor MX, we are selecting the bit to be stored in RTMP. Logicalready narrows down the CMD inputs to one of RB and XRB. We can therefore simply test CMDto differentiate between the two. The following table expresses the relationship between CMDand the value output from MX.",{"@attributes":{"id":"p-1742","num":"2468"},"tables":{"@attributes":{"id":"TABLE-US-00201","num":"00201"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Output","CMD"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MX","Acc","0"]},{"entry":[{},"XOR output","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"With multiplexor MX, we are selecting which input bit is going to replace bit 0 of the Accumulator input. We can only perform a small amount of optimization here, since each different input bit typically relates to a specific operand. The following table expresses-the relationship between CMDand the value output from MX.",{"@attributes":{"id":"p-1744","num":"2470"},"tables":{"@attributes":{"id":"TABLE-US-00202","num":"00202"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Output","CMD","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MX","Acc","1xxx OR 111","1, 2, 27, 31"]},{"entry":[{},"RTMP","001x","RB, XRB"]},{"entry":[{},"InBit","000x","InBit, OutBit"]},{"entry":[{},"MU","010x","IST, ISW"]},{"entry":[{},"MTRZ","110","MTRZ"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"The final multiplexor, MX, does the final rotating of the 32-bit value. Again, the bit patterns of the CMD operand are taken advantage of:",{"@attributes":{"id":"p-1746","num":"2472"},"tables":{"@attributes":{"id":"TABLE-US-00203","num":"00203"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Output","CMD","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MX","ROR 1","0xxx","All except 2, 27, and 31"]},{"entry":[{},"ROR 2","1xx1","2"]},{"entry":[{},"ROR 27","1x1x","27"]},{"entry":[{},"ROR 31","11xx","31"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-1747","num":"2473"},"figref":"FIG. 192"},"The MinTicks Unit contains a 32-bit register named MTR (MinTicksRemaining). The MTR register contains the number of clock ticks remaining before the next key-based function can be called. Each cycle, the value in MTR is decremented by 1 until the value is 0. Once MTR hits 0, it does not decrement any further. An additional one-bit register named MTRZ (MinTicksRegisterZero) reflects the current zero-ness of the MTR register. MTRZ is 1 if the MTRZ register is 0, and MTRZ is 0 if the MTRZ register is not 0. The MTR register is cleared by a RESET, and set to a new count via the SET MTR command, which transfers the current value in the Accumulator into the MTR register.","Where:",{"@attributes":{"id":"p-1750","num":"2476"},"tables":{"@attributes":{"id":"TABLE-US-00204","num":"00204"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic","CMD = SET MTR"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"And:"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Output","Logic","MTRZ"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["MX","Acc","1","\u2014"]},{"entry":[{},"MTR-1","0","0"]},{"entry":[{},"0","0","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Since Cycle is connected to the WriteEnables of MTR and MTRZ, these registers only update during the Execute cycle, i.e. when Cycle=1. The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. In the case of VAL, the effective output from MTR is 0, which means that the output from the decrementor unit is all 1s, thereby causing MTRZ to remain 0, thereby preventing an attacker from using the key-based functions. VAL, also validates the parity of the MTR register. If the parity check fails, the Erase Tamper Detection Line is triggered. In the case of VAL, if the chip has been tampered with, the effective output from MTRZ will be 0, indicating that the MinTicksRemaining register has not yet reached 0, thereby preventing an attacker from using the key-based functions.","Program Counter Unit",{"@attributes":{"id":"p-1752","num":"2478"},"figref":"FIG. 192","sup":"9"},{"@attributes":{"id":"p-1753","num":"2479"},"tables":{"@attributes":{"id":"TABLE-US-00205","num":"00205"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Command","Action"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JSR,","Save old value of PC onto stack for later."]},{"entry":["JSI (ACC)","New PC is 9 bit value where bit0 = 0 (subroutines must there-"]},{"entry":[{},"fore start at an even address), and upper 8 bits of address"]},{"entry":[{},"come from MU (MU 8-bit value is Jump Table 1 for JSR,"]},{"entry":[{},"and Jump Table 2 for JSI)"]},{"entry":["JSI RTS","Pop old value of PC from stack and increment by 1 to get"]},{"entry":[{},"new PC."]},{"entry":["TBR","If the Z flag matches the TRB test, replace PC by 9 bit value"]},{"entry":[{},"where bit0 = 0 and upper 8 bits come from MU. Otherwise"]},{"entry":[{},"increment current PC by 1."]},{"entry":["DBR C1,","Add 9 bit offset (8 bit value from MU and hi bit = 1) to cur-"]},{"entry":["DBR C2","rent PC only if the C1Z or C2Z is set (C1Z for DBR C1,"]},{"entry":[{},"C2Z for DBR C2). Otherwise increment current PC by 1."]},{"entry":["All others","Increment current PC by 1."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Since the same action'takes place for JSR, and JSI (ACC), we specifically detect that case in Logic. By the same concept, we can specifically test for the JSI RTS case in Logic.",{"@attributes":{"id":"p-1755","num":"2481"},"tables":{"@attributes":{"id":"TABLE-US-00206","num":"00206"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Logic","(CMD= 001) OR (CMD= 01001)"]},{"entry":["Logic","CMD= 01000"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"When updating the PC, we must decide if the PC is to be replaced by a completely new item, or by the result of the adder. This is the case for JSR and JSI (ACC), as well as TBR as long as the test bit matches the state of the Accumulator. All but TBR is tested for by Logic, so Logicalso includes the output of Logicas its input. The output from Logicis then used by multiplexors MXto obtain the new PC value.",{"@attributes":{"id":"p-1757","num":"2483"},"tables":{"@attributes":{"id":"TABLE-US-00207","num":"00207"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Logic","LogicOR"]},{"entry":[{},"((CMD= TBR) AND (CMDXOR Z))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Output","Logic"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["MX","Output from Adder","0"]},{"entry":[{},"Replacement value","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The input to the 9-bit adder depends on whether we are incrementing by 1 (the usual case), or adding the offset as read from the MU (the DBR command). Logicgenerates the test. The output from Logicis then directly used by multiplexor MXaccordingly.",{"@attributes":{"id":"p-1759","num":"2485"},"tables":{"@attributes":{"id":"TABLE-US-00208","num":"00208"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Logic","((CMD= DBR C1) AND C1Z) OR"]},{"entry":[{},"(CMD= DBR C2) AND (C2Z))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Output","Logic"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["MX","Output from Adder","0"]},{"entry":[{},"Replacement value","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Finally, the selection of which PC entry to use depends on the current value for SP. As we enter a subroutine, the SP index value must increment, and as we return from a subroutine, the SP index value must decrement. In all other cases, and when we want to fetch a command (Cycle 0), the current value for the SP must be used. Logictells us when a subroutine is being entered, and Logictells us when the subroutine is being returned from. The multiplexor selection is therefore defined as follows:",{"@attributes":{"id":"p-1761","num":"2487"},"tables":{"@attributes":{"id":"TABLE-US-00209","num":"00209"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Output","Cycle\/Logic\/Logic"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MX","SP\u22121","1x1"]},{"entry":[{},{},"SP+1","11x"]},{"entry":[{},{},"SP","0xx OR 00"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry), each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. Both VAL units also parity-check the data bits to ensure that they are valid. If the parity-check fails, the Erase Tamper Detection Line is triggered. In the case of VAL, the effective output from the SP register will always be 0. If the chip has been tampered with. This prevents an attacker from executing any subroutines.In the case of VAL, the effective PC output will always be 0 if the chip has been tampered with. This prevents an attacker from executing any program code.","Memory Unit","The Memory Unit (MU) contains the internal memory of the Authentication Chip. The internal memory is addressed by 9 bits of address, which is passed in from the Address Generator Unit. The Memory Unit outputs the appropriate 32-bit and 8-bit values according to the address. The Memory Unit is also responsible for the special Programming Mode, which allows input of the program Flash memory. The contents of the entire Memory Unit must be protected from tampering. Therefore the logic and registers contained in the Memory Unit must be covered by both Tamper Detection Lines. This is to ensure that program code, keys, and intermediate data values cannot be changed by an attacker. All Flash memory needs to be multi-state, and must be checked upon being read for invalid voltages. The 32-bit RAM also needs to be parity-checked. The 32-bit data paths through the Memory Unit must be implemented with non-flashing CMOS since the key passes along them. The 8-bit data paths can be implemented in regular CMOS since the key does not pass along them.","Constants","The Constants memory region has address range: 000000000-000001111. It is therefore the range 00000xxxx. However, given that the next 48 addresses are reserved, this can be taken advantage of during decoding. The Constants memory region can therefore be selected by the upper 3 bits of the address (Adr=000), with the lower 4 bits combinatorial logic, with the 4 bits mapping to 32-bit output values as follows:",{"@attributes":{"id":"p-1765","num":"2491"},"tables":{"@attributes":{"id":"TABLE-US-00210","num":"00210"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Adr","Output Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0000","0x00000000"]},{"entry":["0001","0x36363636"]},{"entry":["0010","0x5C5C5C5C"]},{"entry":["0011","0xFFFFFFFF"]},{"entry":["0100","0x5A827999"]},{"entry":["0101","0x6ED9EBA1"]},{"entry":["0110","0x8F1BBCDC"]},{"entry":["0111","0xCA62C1D6"]},{"entry":["1000","0x67452301"]},{"entry":["1001","0xEFCDAB89"]},{"entry":["1010","0x98BADCFE"]},{"entry":["1011","0x10325476"]},{"entry":["11xx","0xC3D2E1F0"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The entry 32-bit RAM is 001000000-001011111. It is therefore the range 0010xxxxx. The RAM memory region can therefore be selected by the upper 4 bits of the address (Adr=0010), with the lower 5 bits selecting which of the 32 values to address. Given the contiguous 32-entry address space, the RAM can easily be implemented as a simple 32\u00d732-bit RAM. Although the CPU treats each address from the range 00000-11111 in special ways, the RAM address decoder itself treats no address specially. All RAM values are cleared to 0 upon a RESET, although any program code should not take this for granted.","Flash Memory\u2014Variables","The address space for the 32-bit wide Flash memory is 001100000-001111111. It is therefore the range 0011xxxxx. The flash memory region can therefore be selected by the upper 4 bits of the address (Adr=0111), with the lower 5 bits selecting which value address. The Flash memory has special requirements for erasure. It takes quite some time for the erasure of Flash memory to complete. The Wait signal is therefore set inside the Flash controller upon receipt of a CLR command, and is only cleared once the requested memory has been erased. Internally, the erase lines of particular memory ranges are tied together, so that only 2 bits are required as indicated by the following table:",{"@attributes":{"id":"p-1768","num":"2494"},"tables":{"@attributes":{"id":"TABLE-US-00211","num":"00211"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Adr","Erases range"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["00","R"]},{"entry":["01","MT, AM, K1, K2"]},{"entry":["10","Individual M address (Adr)"]},{"entry":["11","IST, ISW"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Flash values are unchanged by a RESET, although program code should not take the initial values for Flash (after manufacture) other than garbage. Operations that make use of Flash addresses are LD, ST, ADD, RPL, ROR, CLR, and SET. In all cases, the operands and the memory placement are closely linked, in order to minimize the address generation and decoding.The entire variable section of Flash memory is also erased upon entering Programming Mode, and upon detection of a definite physical Attack.","Flash Memory\u2014Program","The address range for the 384 entry 8-bit wide program Flash memory is 010000000-111111111. It is therefore the range 01xxxxxxx-11xxxxxxx. Decoding is straightforward given the ROM start address and address range. Although the CPU treats parts of the address range in special ways, the address decoder itself treats no address specially. Flash values are unchanged by a RESET, and are cleared only by entering Programming Mode. After manufacture, the Flash contents must be considered to be garbage. The 384 bytes can only be loaded by the State machine when in Programming Mode.","Block Diagram of MU",{"@attributes":{"id":"p-1771","num":"2497"},"figref":"FIG. 193","sub":["1","6 ","5","2"]},{"@attributes":{"id":"p-1772","num":"2498"},"tables":{"@attributes":{"id":"TABLE-US-00212","num":"00212"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Output","Adr"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MX","Output from 32-bit Truth Table","00"]},{"entry":[{},"Output from 32-bit Flash memory","10"]},{"entry":[{},"Output from 32-bit RAM","11"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The logic for erasing a particular part of the 32-bit Flash memory is satisfied by Logic. The Erase Part control signal should only be set during a CLR command to the correct part of memory while Cycle=1. Note that a single CLR command may clear a range of Flash memory. Adris sufficient as an address range for CLR since the range will always be within Flash for valid operands, and 0 for non-valid operands. The entire range of 32-bit wide Flash memory is erased when the Erase Detection Lines is triggered (either by an attacker, or by deliberately entering Programming Mode).",{"@attributes":{"id":"p-1774","num":"2500"},"tables":{"@attributes":{"id":"TABLE-US-00213","num":"00213"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic","Cycle AND (CMD= CLR) AND Adr"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The logic for writing to a particular part of Flash memory is satisfied by Logic. The WriteEnable control signal should only be set during an appropriate ST command to a Flash memory range while Cycle=1. Testing only Adris acceptable since the ST command only validly writes to Flash or RAM (if Adris 00, KMX must be 0).",{"@attributes":{"id":"p-1776","num":"2502"},"tables":{"@attributes":{"id":"TABLE-US-00214","num":"00214"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic","Cycle AND (CMD= ST) AND (Adr= 10)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The WE (WriteEnable) flag is set during execution of the SET WE and CLR WE commands. Logictests for these two cases. The actual bit written to WE is CMD.",{"@attributes":{"id":"p-1778","num":"2504"},"tables":{"@attributes":{"id":"TABLE-US-00215","num":"00215"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic","Cycle AND (CMD= 011) AND (CMD= 0000)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The logic for writing to the RAM region of memory is satisfied by Logic. The WriteEnable control signal should only be set during an appropriate ST command to a RAM memory range while Cycle=1. However this is tempered by the WE flag, which governs whether writes to X[N] are permitted. The X[N] range is the upper half of the RAM, so this can be tested for using Adr. Testing only Adras the full address range of RAM is acceptable since the ST command only writes to Flash or RAM.",{"@attributes":{"id":"p-1780","num":"2506"},"tables":{"@attributes":{"id":"TABLE-US-00216","num":"00216"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Logic","Cycle AND (CMD= ST) AND (Adr= 11) AND"]},{"entry":[{},{},"((AdrAND WE) OR (\u02dcAdr))"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The three VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. The VAL units also check the data bits to ensure that they are valid. VALand VALvalidate by checking the state of each data bit, and VALperforms a parity check. If any validity test fails, the Erase Tamper Detection Line is triggered. In the case of VAL, the effective output from the program Flash will always be 0 (interpreted as TBR 0) if the chip has been tampered with. This prevents an attacker from executing any useful instructions. In the case of VAL, the effective 32-bit output will always be 0 if the chip has been tampered with. Thus no key or intermediate storage value is available to an attacker. The 8-bit Flash memory is used to hold the program code, jump tables and other program information. The 384 bytes of Program Flash memory are selected by the full 9 bits of address (using address range 01xxxxxxx-11xxxxxxx). The Program Flash memory is erased only when the Erase Detection Lines is triggered (either by an attacker, or by entering Programming Mode due to the Programming Mode Detection Unit). When the Erase Detection Line is triggered, a small state machine in the Program Flash Memory Unit erases the 8-bit Flash memory, validates the erasure, and loads in the new contents (384 bytes) from the serial input. The following pseudocode illustrates the state machine logic that is executed when the Erase Detection line is triggered:\n\n","During the Programming Mode state machine execution, 0 must be placed onto the 8-bit output. A 0 command causes the remainder of the Authentication chip to interpret the command as a TBR 0. When the chip has read all 384 bytes into the Program Flash Memory, it hangs (loops indefinitely). The Authentication Chip can then be reset and the program used normally. Note that the erasure is validated by the same 8-bit register that is used to load the new contents of the 8-bit program Flash memory. This helps to reduce the chances of a successful attack, since program code can't be loaded properly if the register used to validate the erasure is destroyed by an attacker. In addition, the entire state machine is protected by both Tamper Detection lines.","Address Generator Unit","The Address Generator Unit generates effective addresses for accessing the Memory Unit (MU). In Cycle 0, the PC is passed through to the MU in order to fetch the next opcode. The Address Generator interprets the returned opcode in order to generate the effective address for Cycle 1. In Cycle 1, the generated address is passed to the MU. The logic and registers contained in the Address Generator Unit must be covered by both Tamper Detection Lines. This is to ensure that an attacker cannot alter any generated address. Nearly all of the Address Generator Unit can be implemented with regular CMOS, since the key does not pass through most of this unit. However 5 bits of the Accumulator are used in the JSI Address generation. Consequently this tiny section of circuitry must be implemented in non-flashing CMOS. The remainder of the Address Generator Unit does not have to be implemented with non-flashing CMOS. However, the latches for the counters and calculated address should be parity-checked. If either of the Tamper Detection Lines is broken, the Address Generator Unit will generate address 0 each cycle and all counters will be fixed at 0. This will only come into effect if an attacker has disabled the RESET and\/or erase circuitry, since under normal circumstances, breaking a Tamper Detection Line will result in a RESET or the erasure of all Flash memory.","Background to Address Generation","The logic for address generation requires an examination of the various opcodes and operand combinations. The relationship between opcode\/operand and address is examined in this section, and is used as the basis for the Address Generator Unit.","Constants","The lower 4 entries are the simple constants for general-purpose use as well as the HMAC algorithm. The lower 4 bits of the LDK operand directly correspond to the lower 3 bits of the address in memory for these 4 values, i.e. 0000, 0001, 0010, and 0011 respectively. The y constants and the h constants are also addressed by the LDK command. However the address is generated by ORing the lower 3 bits of the operand with the inverse of the C counter value, and keeping the 4th bit of the operand intact. Thus for LDK y, the y operand is 0100, and with LDK h, the h operand is 1000. Since the inverted C value takes on the range 000-011 for y, and 000-100 for h, the ORed result gives the exact address. For all constants, the upper 5 bits of the final address are always 00000.","Ram","Variables A-T have addresses directly related to the lower 3 bits of their operand values. That is, for operand values 0000-0101 of the LD, ST, ADD, LOG, and XOR commands, as well as operand vales 1000-1101 of the LOG command, the lower 3 operand address bits can be used together with a constant high 6-bit address of 001000 to generate the final address. The remaining register values can only be accessed via an indexed mechanism. Variables A-E, B, and H are only accessible as indexed by the C counter value, while X is indexed by N, N, N, and N. With the LD, ST and ADD commands, the address for AE as indexed by C can be generated by taking the lower 3 bits of the operand (000) and ORing them with the C counter value. However, H and B addresses cannot be generated in this way, (otherwise the RAM address space would be non-contiguous). Therefore simple combinatorial logic must convert AE into 0000, H into 0110, and B
