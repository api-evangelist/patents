---
title: Incremental automata verification
abstract: Methods and apparatus for performing formal verification of a system defined by a set of automata are useful in facilitating computing efficiencies during the verification of an incremental system design. The various embodiments permit computing efficiencies by saving information generated during a verification of the system for use in subsequent verification runs. The saved information includes calculation results pertaining to instances or elements of the system that do not require modification for the next subsequent verification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06957178&OS=06957178&RS=06957178
owner: Honeywell International Inc.
number: 06957178
owner_city: Morristown
owner_country: US
publication_date: 20011029
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"heading":["STATEMENT OF GOVERNMENT INTEREST","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["This invention was made with U.S. Government support under Contract F30602-00-C-0017 awarded by the U.S. Air Force. The U.S. Government has certain rights in this invention.","The present invention relates generally to formal verification of system behavior, and in particular to formal verification of system behavior involving incremental design changes.","As control systems, scheduling systems, protocols and other real-time systems become increasingly complex, verification of their behavior prior to implementation and\/or deployment becomes increasingly desirable. These large systems may be simulated using computer modeling techniques, but the complexity of the systems often precludes suitable simulation. An alternate approach becoming widely popular is that of formal verification.","Formal verification is a method of determining whether a system's constraints are met by the system design. Some formal verification systems, or more specifically, model-checking systems, compare logical definitions of constraints on a system's behavior with logical descriptions of the system to verify that the system's behavior will satisfy those constraints. Some of these checks are safety checks, e.g., determining whether a particular state, usually a failure state or other undesirable state, is reachable. Another example includes liveness checks to verify whether a system will get stuck in a \u201cno-progress\u201d cycle, e.g., verifying that an automaton does not repeatedly visit a state where it checks for received data without visiting a state where it transmits data. The logical description of the system may be used to calculate a set of behavior traces of the system, i.e., a set of all possible system behaviors. Those behavior traces are checked against the behavior specification. There are a variety of tools suitable for such formal verification, including HyTech, available through the University of California at Berkeley, Calif., USA; Kronos, available through Verimag, Gi\u00e8res, France; SPIN, available through Lucent Technologies Inc., Murray Hill, N.J., USA; and PVS, available through SRI International, Menlo Park, Calif., USA.","In practice, a system designer provides a logical definition of constraints on a system's behavior and a logical description of the system to the formal verification system. If the logical definition of the intended behavior implies the logical description of the system, the system is true to the intended behavior. If not, changes are made in the logical models and the system is re-verified. Formal verification is a heavy user of computation time. The complexity of the computations can grow exponentially with the complexity of the system being verified.","For the reasons stated above, and for other reasons stated below that will become apparent to those skilled in the art upon reading and understanding the present specification, there is a need in the art for enhancements to methods for formal verification of system designs.","Methods and apparatus for performing formal verification of a system defined by a set of automata are described herein. The various embodiments permit computing efficiencies by saving information generated during a verification of the system for use in subsequent verification runs. The saved information includes calculation results pertaining to instances or elements of the system that do not require modification for the next subsequent verification. This facilitates incremental system design without the need to regenerate the full global verification solution.","For one embodiment, the invention provides a method of formal verification of a system design. The method includes verifying a first instance of the system design and saving verification data from the verification of the first instance of the system design. The verification data represents results of calculations used to verify the first instance of the system design. The method further includes modifying the system design, thereby generating a second instance of the system design. The method still further includes verifying the second instance of the system design using the saved verification data.","For another embodiment, the invention provides a method of formal verification of a system defined by a set of automata. The method includes performing a first verification of the system. The first verification includes generating a partial solution pertaining to a first portion of the set of automata and generating a partial solution pertaining to a second portion of the set of automata. The method further includes modifying the system by modifying one or more automata of the first portion of the set of automata without modifying any automaton of the second portion of the set of automata. The method still further includes performing a second verification of the system after modifying the system. The second verification includes generating a partial solution pertaining to the first portion of the set of automata and using the partial solution pertaining to the second portion of the set of automata generated from the first verification.","For still another embodiment, the invention provides a computer-usable medium having computer-readable instructions stored thereon. The computer-readable instructions are adapted to cause a processor to perform a method including verifying a first instance of the system design and saving verification data from the verification of the first instance of the system design. The verification data represents results of calculations used to verify the first instance of the system design. The method further includes adding one or more design elements to the first instance of the system design, thereby generating a second instance of the system design. The method still further includes verifying the second instance of the system design using the saved verification data.","Further embodiments of the invention include methods and apparatus of varying scope.","In the following detailed description of the present embodiments, reference is made to the accompanying drawings that form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention, and it is to be understood that other embodiments may be utilized and that process, electrical or mechanical changes may be made without departing from the scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims and equivalents thereof.","Formal verification is well understood in the art. See, e.g., F. Laroussinie, et al., From Timed Automata to Logic\u2014and Back, , RS-95-2, January 1995; B. Plateau, et al., Stochastic Automata Networks: Product Forms and Iterative Solutions, , No. 2939, July 1996; U.S. Pat. No. 5,483,470, issued Jan. 9, 1996 to Alur et al.; and U.S. Pat. No. 5,163,016, issued Nov. 10, 1992 to Har'El et al. Accordingly, a detailed discussion of this technology will not be presented herein.","The methods of the various embodiments are generally applicable to design of systems that can be represented by automata. One example of the type of system that can be verified using the various embodiments is control systems, such as industrial control systems or flight management systems. Other examples include communication and synchronization protocols. Further examples include scheduling systems, e.g., processor, transportation and production scheduling systems. These systems are routinely characterized as timed automata. The timed automata have discrete states as well as timing constraints that describe how the system can move between states under the control of time. However, the various embodiments are also applicable to systems that can be defined using other types of automata, including, but not limited to, discrete finite state automata, linear hybrid automata and hybrid automata.","The verification systems may associate a matrix, i.e., a difference-bound matrix, with clock assignments within a system design. For timed automata, the matrix is an efficient representation that captures a large (possibly infinite) number of assignments of values to the clocks of a timed automaton. If a change is made to an automaton creating new transitions, this also leads to new clocks which leads to new dimensions of the matrix. To maintain the bit usage and to increase the probability that saved information will be reusable in subsequent verifications, it is preferred to oversize the matrix, providing \u201cdon't care\u201d bits corresponding to not-yet-defined clocks, to allow the matrix dimensions to remain constant throughout the verification process.","Formal verification of a system is often repeated multiple times as a system design is refined or otherwise modified. Under current practice, each verification starts fresh, i.e., the calculations are repeated on the \u201cnew\u201d system design. The various embodiments save information from a verification run to be used in a subsequent verification. The saved information includes execution traces, the set of paths that the system could follow. Where a partial solution is obtained to the global solution of the system, and a modification to the system does not affect the partial solution, this partial solution may be saved and used in subsequent verification runs. By avoiding the need to re-calculate this partial solution, valuable calculation time is saved.","A system, S, is generally defined by a product of its component processes or automata as:\n\nS=A{circle around (x)}A{circle around (x)}A. . . {circle around (x)}A\n","where: each A is a component automaton of the system S.","As one example, the system may be a communication protocol modeled as:\n\nS=IF{circle around (x)}P{circle around (x)}CH{circle around (x)}CH{circle around (x)}P{circle around (x)}IF\n","where: IFmodels the sender interface;\n\n",{"@attributes":{"id":"p-0027","num":"0031"},"figref":"FIG. 1","b":["100","10","112","110","110","110","110","110","110","110","112"],"i":["a ","b ","c","d ","e"]},{"@attributes":{"id":"p-0028","num":"0032"},"figref":"FIG. 2","b":"220"},"A first verification of the system is performed at block . The first verification is performed by generating a partial verification solution pertaining to a first portion of the set of automata and generating a partial solution pertaining to a second portion of the set of automata.","At block , the system is refined by modifying one or more automata of the first portion of the set of automata without modifying any automaton of the second portion of the set of automata. For this situation, the partial verification solution of the second portion of the set of automata may be saved and reused for subsequent verification runs.","A second verification of the system is then performed at block . The second verification is performed by generating a partial verification solution pertaining to the first portion of the set of automata, as modified at block , and using the partial verification solution pertaining to the second portion of the set of automata saved from the first verification.",{"@attributes":{"id":"p-0032","num":"0036"},"figref":"FIG. 3","b":["320","322","322","324"]},"If the design is not determined to be complete at block , the verification data is saved at block  for the first or otherwise previous verification run. The system design is then modified at block . In refining, extending or otherwise modifying the system design, design elements are added to its corresponding model. This modification results in a second or next instance of the system design.","At block , a verification of next instance of a system design is performed to obtain a next solution. This verification utilizes the saved verification data from the previous verification, i.e., the verification performed on the previous instance of the system design, without a need to recalculate the results of the design elements of the model corresponding to the previous instance of the system design. In this manner, calculation efficiencies are achieved.",{"@attributes":{"id":"p-0035","num":"0039"},"figref":"FIG. 4","b":["420","422"]},"In the process of computing successor state, difference-bound matrices are manipulated. These matrices, approximately one per state visited in the search, are generally saved as a result of saving the set of states. However, the focus is on saving the execution traces.","The under-defined state is then further specified at block , i.e., defining a control action for the state. A second verification of this new instance of the system is then performed at block  using the saved set of states and beginning the search for successor states from the newly specified state. Starting from the newly specified state is made possible because the paths leading up to this state were saved at block .","The methods of the various embodiments are suited for use in a computing environment. One example includes a mnicroprocessor-based computer system  as shown in . Computer system  has a user interface  for receiving input from a user of the computer system  and for providing output to the user. The computer system  further includes a processor  and a computer-usable medium  associated with the processor . The computer-usable medium can be any form of media capable of storing computer-readable instructions that are adapted to cause the processor  to perform a series of actions, computations and manipulations on various input received from the system user. Examples of computer-usable media include dynamic random access memory (DRAM), static random access memory (SRAM), read-only memory (ROM), electrically erasable programmable ROM (EEPROM or Flash Memory), magnetic media and optical media, whether removable or fixed. The computer-usable medium  may include one or more types of computer-usable media. The computer-usable medium  has computer-readable instructions stored thereon adapted to cause the processor  to perform a method in accordance with one or more embodiments of the invention.","Methods and apparatus for performing formal verification of a system defined by a set of automata have been described. The various embodiments permit computing efficiencies by saving information generated during a verification of the system for use in subsequent verification runs. The saved information includes calculation results pertaining to instances or elements of the system that do not require modification for the next subsequent verification. This facilitates incremental system design without the need to regenerate the full global verification solution.","Although specific embodiments have been illustrated and described herein, it will be appreciated by those of ordinary skill in the art that any arrangement that is calculated to achieve the same purpose may be substituted for the specific embodiments shown. Many adaptations of the invention will be apparent to those of ordinary skill in the art. Accordingly, this application is intended to cover any adaptations or variations of the invention. It is manifestly intended that this invention be limited only by the following claims and equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
