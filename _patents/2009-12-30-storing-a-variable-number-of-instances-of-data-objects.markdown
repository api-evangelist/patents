---
title: Storing a variable number of instances of data objects
abstract: Described are systems and methods for storing a variable number of instances of data objects (e.g., 1, 2, 3, or up to Nâˆ’1 instances, where N is the number of instances of the data object included in primary data) in secondary storage across a data storage network. In some examples, a system for storing a variable number of instances of data objects includes, one or more computing devices storing a set of data objects and multiple storage devices distinct from the one or more computing devices. Each of the multiple storage devices is configured to store at least a single instance of a data object. The system also includes a database configured to store information associated with the data objects. This information includes substantially unique identifiers for the data objects and, for each of the data objects, a number of instances of the data object stored on the multiple storage devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08401996&OS=08401996&RS=08401996
owner: CommVault Systems, Inc.
number: 08401996
owner_city: Oceanport
owner_country: US
publication_date: 20091230
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION","CONCLUSION"],"p":["This application claims the benefit of U.S. Patent Application No. 61\/164,803 filed on Mar. 30, 2009 (entitled STORING A VARIABLE NUMBER OF INSTANCES OF DATA OBJECTS), which is incorporated by reference in its entirety.","An organization typically protects its data by making one or more copies of it. The data to be protected is typically termed primary data, which generally includes production data. The copies of the primary data are typically called secondary copies, tertiary copies, etc. Primary data may include numerous data objects. A data object is any collection or grouping of bytes of data that can be viewed as one or more logical units (data objects include, e.g., files, email messages, database entries, etc.). A data object may be unique (i.e., there is only one instance of the data object in the primary data) or non-unique (i.e., there is more than one instance of the data object in the primary data). Conventional data protection techniques typically involve making a secondary copy of each data object in the primary data, regardless of whether it is unique or not. For example, if the primary data includes N instances of a certain data object, conventional data protection techniques would result in creating a secondary copy that also includes N instances of the data object. Conventional data protection techniques thus minimize the risk of data loss of non-unique data objects (because another instance of a non-unique data object can likely be restored), at the expense of creating secondary copies that are as large as the primary data.","In contrast, single instance storage techniques typically provide for secondary storage of a single instance of a given data object included in primary data. Such single instance storage techniques typically operate by comparing signatures or hashes of data objects in primary data against signatures or hashes of data objects already stored in secondary storage. If a signature or hash of a data object matches that of a previously stored data object, then the data object is not stored, and only a pointer or other reference to the previously stored data object is stored in its place. Such single instance storage techniques result in creating a secondary copy of the primary data that includes only one single instance of each data object in the primary data.","While such single instance storage techniques may be efficient in terms of minimizing the storage space used to store data objects, they do result in some danger in terms of overall data protection. For example, if there is a problem with the media on which the data object in secondary storage is stored, then it may be difficult (if not impossible) to recover the data object from the media. If an organization implementing such single instance storage techniques stores only a single instance of the data object in secondary storage, then the data object may also be unrecoverable from secondary storage across the organization.","The organization may attempt to mitigate the consequences associated with this risk by making other secondary and\/or tertiary copies of single instanced data objects, such as copies on tape. However, it may slow and\/or difficult to recover such secondary and\/or tertiary copies from tape.","The need exists for systems and methods that overcome the above problems, as well as systems and methods that provide additional benefits. Overall, the examples herein of some prior or related systems and methods and their associated limitations are intended to be illustrative and not exclusive. Other limitations of existing or prior systems and methods will become apparent to those of skill in the art upon reading the following Detailed Description.","The headings provided herein are for convenience only and do not necessarily affect the scope or meaning of the claimed invention.","Overview","Described in detail herein are systems and methods for storing a variable number of instances of data objects in secondary storage across a data storage system (alternatively called a data storage network, a data storage environment, or a data storage enterprise). For example, 1, 2, 3, or up to N\u22121 instances (where N is the number of instances of the data object in primary data) of a data object may be stored. In some examples, a system for storing a variable number of instances of data objects includes one or more computing devices storing a first set of data objects and multiple data stores storing a second set of data objects. The multiple data stores are configured to store one or more instances of a data object. The system also includes a variable instance database configured to store information associated with the second set of data objects. This information includes, for each of the data objects, an identifier of the data object and a number of instances of the data object already stored on the multiple data stores. In some examples, this information also includes a number of instances of the data object that should be stored on the multiple data stores.","The system also generally includes a secondary storage computing device configured to receive an indication to perform a storage operation, according to a storage policy, on the first set of data objects. The storage policy specifies the number of instances of each data object that should be stored on the multiple data stores. For at least one of the data objects in the first set, two or more instances should be stored on the multiple data stores. In some examples, each instance is stored on one of the multiple data stores. The secondary storage computing device is further configured to, for each of the data objects in the set, determine a substantially unique identifier for the data object, access the variable instance database, and use the generated substantially unique identifier to determine the number of instances of the data object that are already stored on the data stores.","The secondary storage computing device also determines the number of instances of the data object to store on the multiple data stores based at least in part on the number of instances that should be stored and the number of instances already stored. The secondary storage computing device also performs the storage operation on each of the data objects in the first set. Performing the storage operation includes storing on the multiple data stores the determined number of instances of the data object (e.g., by copying the data object from the one or more computing devices to the multiple data stores).","Various examples of the invention will now be described. The following description provides specific details for a thorough understanding and enabling description of these examples. One skilled in the relevant art will understand, however, that the invention may be practiced without many of these details. Likewise, one skilled in the relevant art will also understand that the invention may include many other obvious features not described in detail herein. Additionally, some well-known structures or functions may not be shown or described in detail below, so as to avoid unnecessarily obscuring the relevant description.","The terminology used below is to be interpreted in its broadest reasonable manner, even though it is being used in conjunction with a detailed description of certain specific examples of the invention. Indeed, certain terms may even be emphasized below; however, any terminology intended to be interpreted in any restricted manner will be overtly and specifically defined as such in this Detailed Description section.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 1 and 2"},"While aspects of the invention, such as certain functions, are described as being performed exclusively on a single device, the invention can also be practiced in distributed environments where functions or modules are shared among disparate processing devices, which are linked through a communications network, such as a Local Area Network (LAN), Wide Area Network (WAN), and\/or the Internet. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Aspects of the invention may be stored or distributed on computer-readable media, including tangible computer-readable storage media such as magnetically or optically readable computer discs, hard-wired or preprogrammed chips (e.g., EEPROM semiconductor chips), nanotechnology memory, biological memory, or other data storage media. Alternatively, computer implemented instructions, data structures, screen displays, and other data under aspects of the invention may be distributed over the Internet or over other networks (including wireless networks), on a propagated signal on a propagation medium (e.g., an electromagnetic wave(s), a sound wave, etc.) over a period of time, or they may be provided on any analog or digital network (packet switched, circuit switched, or other scheme).","Unless described otherwise below, aspects of the invention may be practiced with conventional data processing and data storage systems. Thus, the construction and operation of the various blocks shown in  may be of conventional design, and need not be described in further detail herein to make and use aspects of the invention, because such blocks will be understood by those skilled in the relevant art. One skilled in the relevant art can readily make any modifications necessary to the blocks in  (or other embodiments or figures) based on the detailed description provided herein.","Aspects of the invention will now be described in detail with respect to .  is a block diagram illustrating an example of a data storage enterprise that may employ aspects of the invention.  is a block diagram illustrating an example environment in which aspects of the invention may be configured to operate.  is a flow diagram of a process for generating a storage policy, and  are display diagrams illustrating an example interface that may be used to configure aspects of a storage policy generated using the process of .  is a flow diagram of a process for performing a storage operation and  is a flow diagram of a process for determining a number of instances of a data object to store.  is a diagram illustrating suitable data structures that may be employed by aspects of the invention.  is a flow diagram of a process for restoring a data object and  is a flow diagram of a process for aging data.  is a flow diagram of a process for determining locations at which to store instances of data objects.","Suitable Data Storage System",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1","b":["150","150","150","105","195","165","115","130","130","160","162","123","105","111","120","125","131","150","150"]},"The system  may generally include combinations of hardware and software components associated with performing storage operations on electronic data. Storage operations include copying, backing up, creating, storing, retrieving, and\/or migrating primary storage data (e.g., data stores  and\/or ) and secondary storage data (which may include, for example, snapshot copies, backup copies, hierarchical storage management (HSM) copies, archive copies, and other types of copies of electronic data stored on storage devices ). The system  may provide one or more integrated management consoles for users or system processes to interface with in order to perform certain storage operations on electronic data as further described herein. Such integrated management consoles may be displayed at a central control facility or several similar consoles distributed throughout multiple network locations to provide global or geographically specific network data storage information.","In one example, storage operations may be performed according to various storage preferences, for example, as expressed by a user preference, a storage policy, a schedule policy, and\/or a retention policy. A \u201cstorage policy\u201d is generally a data structure or other information source that includes a set of preferences and other storage criteria associated with performing a storage operation. The preferences and storage criteria may include, but are not limited to, a storage location, relationships between system components, network pathways to utilize in a storage operation, data characteristics, compression or encryption requirements, preferred system components to utilize in a storage operation, a single instancing or variable instancing policy to apply to the data, and\/or other criteria relating to a storage operation. For example, a storage policy may indicate that certain data is to be stored in the storage device , retained for a specified period of time before being aged to another tier of secondary storage, copied to the storage device  using a specified number of data streams, etc.","A \u201cschedule policy\u201d may specify a frequency with which to perform storage operations and a window of time within which to perform them. For example, a schedule policy may specify that a storage operation is to be performed every Saturday morning from 2:00 a.m. to 4:00 a.m. A \u201cretention policy\u201d may specify how long data is to be retained at specific tiers of storage or what criteria must be met before data may be pruned or moved from one tier of storage to another tier of storage. In some cases, the storage policy includes information generally specified by the schedule policy and\/or the retention policy. (Put another way, the storage policy includes the schedule policy and\/or the retention policy.) Storage policies, schedule policies and\/or retention policies may be stored in a database of the storage manager , to archive media as metadata for use in restore operations or other storage operations, or to other locations or components of the system .","The system  may comprise a storage operation cell that is one of multiple storage operation cells arranged in a hierarchy or other organization. Storage operation cells may be related to backup cells and provide some or all of the functionality of backup cells as described in the assignee's U.S. patent application Ser. No. 09\/354,058, now U.S. Pat. No. 7,395,282, which is incorporated herein by reference in its entirety. However, storage operation cells may also perform additional types of storage operations and other types of storage management functions that are not generally offered by backup cells.","Storage operation cells may contain not only physical devices, but also may represent logical concepts, organizations, and hierarchies. For example, a first storage operation cell may be configured to perform a first type of storage operations such as HSM operations, which may include backup or other types of data migration, and may include a variety of physical components including a storage manager  (or management agent ), a secondary storage computing device , a client , and other components as described herein. A second storage operation cell may contain the same or similar physical components; however, it may be configured to perform a second type of storage operations, such as storage resource management (SRM) operations, and may include monitoring a primary data copy or performing other known SRM operations.","Thus, as can be seen from the above, although the first and second storage operation cells are logically distinct entities configured to perform different management functions (i.e., HSM and SRM, respectively), each storage operation cell may contain the same or similar physical devices. Alternatively, different storage operation cells may contain some of the same physical devices and not others. For example, a storage operation cell configured to perform SRM tasks may contain a secondary storage computing device , client , or other network device connected to a primary storage volume, while a storage operation cell configured to perform HSM tasks may instead include a secondary storage computing device , client , or other network device connected to a secondary storage volume and not contain the elements or components associated with and including the primary storage volume. (The term \u201cconnected\u201d as used herein does not necessarily require a physical connection; rather, it could refer to two devices that are operably coupled to each other, communicably coupled to each other, in communication with each other, or more generally, refer to the capability of two devices to communicate with each other.) These two storage operation cells, however, may each include a different storage manager  that coordinates storage operations via the same secondary storage computing devices  storage devices . This \u201coverlapping\u201d configuration allows storage resources to be accessed by more than one storage manager , such that multiple paths exist to each storage device  facilitating failover, load balancing, and promoting robust data access via alternative routes.","Alternatively or additionally, the same storage manager  may control two or more storage operation cells (whether or not each storage operation cell has its own dedicated storage manager ). Moreover, in certain embodiments, the extent or type of overlap may be user-defined (through a control console) or may be automatically configured to optimize data storage and\/or retrieval.","The clients  typically include application software for performing various operations. Clients  typically also include an operating system on which the application software runs. A file system can be provided to facilitate and control file access by the operating system and application software. File systems can facilitate access to local and remote storage devices for file or data access and storage. Clients  can also include local storage such as a media module media drive with fixed or removable media.","In some examples, the clients  include storage mechanisms for allowing computer programs or other instructions or data to be loaded into memory for execution. Such storage mechanisms might include, for example, a fixed or removable storage unit and an interface. Examples of such storage units and interfaces can include a program cartridge and cartridge interface, a removable memory (for example, a flash memory or other removable memory module) and memory slot, a PCMCIA slot and card, and other fixed or removable storage units and interfaces that allow software and data to be transferred from the storage unit to memory.","Data agent  may be a software module or part of a software module that is generally responsible for performing storage operations on the data of the client  stored in data store \/ or other memory location. Each client  may have at least one data agent  and the system  can support multiple clients . Data agent  may be distributed between client  and storage manager  (and any other intermediate components), or it may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent .","As used herein, the term module might describe a given unit of functionality that can be performed in accordance with one or more embodiments of the present invention. As used herein, a module might be implemented utilizing any form of hardware, software, firmware, or a combination thereof. For example, one or more processors, controllers, ASICs, PLAs, logical components, software routines or other mechanisms might be implemented to make up a module. In implementation, the various modules described herein might be implemented as discrete modules or the functions and features described can be shared in part or in total among one or more modules. In other words, as would be apparent to one of ordinary skill in the art after reading this description, the various features and functionality described herein may be implemented in any given application and can be implemented in one or more separate or shared modules in various combinations and permutations. Even though various features or elements of functionality may be individually described or claimed as separate modules, one of ordinary skill in the art will understand that these features and functionality can be shared among one or more common software and hardware elements, and such description shall not require or imply that separate hardware or software components are used to implement such features or functionality.","The overall system  may employ multiple data agents , each of which may perform storage operations on data associated with a different application. For example, different individual data agents  may be designed to handle Microsoft Exchange data, Lotus Notes data, Microsoft Windows file system data, Microsoft Active Directory Objects data, Microsoft SQL Server data, Microsoft Sharepoint Server data, and other types of data known in the art. Other embodiments may employ one or more generic data agents  that can handle and process multiple data types rather than using the specialized data agents described above.","If a client  has two or more types of data, one data agent  may be required for each data type to perform storage operations on the data of the client . For example, to back up, migrate, and restore all the data on a Microsoft Exchange server, the client  may use one Microsoft Exchange Mailbox data agent  to back up the Exchange mailboxes, one Microsoft Exchange Database data agent  to back up the Exchange databases, one Microsoft Exchange Public Folder data agent  to back up the Exchange Public Folders, and one Microsoft Windows File System data agent  to back up the file system of the client . These data agents  would be treated as four separate data agents  by the system even though they reside on the same client .","Alternatively, the overall system  may use one or more generic data agents , each of which may be capable of handling two or more data types. For example, one generic data agent  may be used to back up, migrate and restore Microsoft Exchange Mailbox data and Microsoft Exchange Database data while another generic data agent  may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data, etc.","Data agents  may be responsible for arranging or packing data to be copied or migrated into a certain format such as an archive file. Nonetheless, it will be understood that this represents only one example, and any suitable packing or containerization technique or transfer methodology may be used if desired. Such an archive file may include metadata, a list of files or data objects copied, the file, and data objects themselves. Moreover, any data moved by the data agents may be tracked within the system by updating indexes associated with appropriate storage managers  or secondary storage computing devices . As used herein, a file or a data object refers to any collection or grouping of bytes of data that can be viewed as one or more logical units.","Generally speaking, storage manager  may be a software module or other application that coordinates and controls storage operations performed by the system . Storage manager  may communicate with some or all elements of the system , including clients , data agents , secondary storage computing devices , and storage devices , to initiate and manage storage operations (e.g., backups, migrations, data recovery operations, etc.).","Storage manager  may include a jobs agent  that monitors the status of some or all storage operations previously performed, currently being performed, or scheduled to be performed by the system . (One or more storage operations are alternatively referred to herein as a \u201cjob\u201d or \u201cjobs.\u201d) Jobs agent  may be communicatively coupled to an interface agent  (e.g., a software module or application). Interface agent  may include information processing and display software, such as a graphical user interface (\u201cGUI\u201d), an application programming interface (\u201cAPI\u201d), or other interactive interface through which users and system processes can retrieve information about the status of storage operations. For example, in an arrangement of multiple storage operations cell, through interface agent , users may optionally issue instructions to various storage operation cells regarding performance of the storage operations as described and contemplated herein. For example, a user may modify a schedule concerning the number of pending snapshot copies or other types of copies scheduled as needed to suit particular needs or requirements. As another example, a user may employ the GUI to view the status of pending storage operations in some or all of the storage operation cells in a given network or to monitor the status of certain components in a particular storage operation cell (e.g., the amount of storage capacity left in a particular storage device ).","Storage manager  may also include a management agent  that is typically implemented as a software module or application program. In general, management agent  provides an interface that allows various management agents  in other storage operation cells to communicate with one another. For example, assume a certain network configuration includes multiple storage operation cells hierarchically arranged or otherwise logically related in a WAN or LAN configuration. With this arrangement, each storage operation cell may be connected to the other through each respective interface agent . This allows each storage operation cell to send and receive certain pertinent information from other storage operation cells, including status information, routing information, information regarding capacity and utilization, etc. These communications paths may also be used to convey information and instructions regarding storage operations.","For example, a management agent  in a first storage operation cell may communicate with a management agent  in a second storage operation cell regarding the status of storage operations in the second storage operation cell. Another illustrative example includes the case where a management agent  in a first storage operation cell communicates with a management agent  in a second storage operation cell to control storage manager  (and other components) of the second storage operation cell via management agent  contained in storage manager .","Another illustrative example is the case where management agent  in a first storage operation cell communicates directly with and controls the components in a second storage operation cell and bypasses the storage manager  in the second storage operation cell. If desired, storage operation cells can also be organized hierarchically such that hierarchically superior cells control or pass information to hierarchically subordinate cells or vice versa.","Storage manager  may also maintain an index, a database, or other data structure . The data stored in database  may be used to indicate logical associations between components of the system, user preferences, management tasks, media containerization and data storage information or other useful data. For example, the storage manager  may use data from database  to track logical associations between secondary storage computing device  and storage devices  (or movement of data as containerized from primary to secondary storage).","Generally speaking, the secondary storage computing device , which may also be referred to as a media agent, may be implemented as a software module that conveys data, as directed by storage manager , between a client  and one or more storage devices  such as a tape library, a magnetic media storage device, an optical media storage device, or any other suitable storage device. In one embodiment, secondary storage computing device  may be communicatively coupled to and control a storage device . A secondary storage computing device  may be considered to be associated with a particular storage device  if that secondary storage computing device  is capable of routing and storing data to that particular storage device .","In operation, a secondary storage computing device  associated with a particular storage device  may instruct the storage device to use a robotic arm or other retrieval means to load or eject a certain storage media, and to subsequently archive, migrate, or restore data to or from that media. Secondary storage computing device  may communicate with a storage device  via a suitable communications path such as a SCSI or Fibre Channel communications link. In some embodiments, the storage device  may be communicatively coupled to the storage manager  via a SAN.","Each secondary storage computing device  may maintain an index, a database, or other data structure  that may store index data generated during storage operations for secondary storage (SS) as described herein, including creating a metabase (MB). For example, performing storage operations on Microsoft Exchange data may generate index data. Such index data provides a secondary storage computing device  or other external device with a fast and efficient mechanism for locating data stored or backed up. Thus, a secondary storage computing device index , or a database  of a storage manager , may store data associating a client  with a particular secondary storage computing device  or storage device , for example, as specified in a storage policy, while a database or other data structure in secondary storage computing device  may indicate where specifically the data of the client  is stored in storage device , what specific files were stored, and other information associated with storage of the data of the client . In some embodiments, such index data may be stored along with the data backed up in a storage device , with an additional copy of the index data written to index cache in a secondary storage device. Thus the data is readily available for use in storage operations and other activities without having to be first retrieved from the storage device .","Generally speaking, information stored in cache is typically recent information that reflects certain particulars about operations that have recently occurred. After a certain period of time, this information is sent to secondary storage and tracked. This information may need to be retrieved and uploaded back into a cache or other memory in a secondary computing device before data can be retrieved from storage device . In some embodiments, the cached information may include information regarding format or containerization of archives or other files stored on storage device .","One or more of the secondary storage computing devices  may also maintain one or more single instance databases . Single instancing (alternatively called data deduplication) generally refers to storing in secondary storage only a single instance of each data object (or data block) in a set of data (e.g., primary data). More details as to single instancing may be found in one or more of the following commonly-assigned U.S. patent applications: 1) U.S. patent application Ser. No. 11\/269,512 (entitled SYSTEM AND METHOD TO SUPPORT SINGLE INSTANCE STORAGE OPERATIONS); 2) U.S. patent application Ser. No. 12\/145,347 (entitled APPLICATION-AWARE AND REMOTE SINGLE INSTANCE DATA MANAGEMENT); or 3) U.S. patent application Ser. No. 12\/145,342 (entitled APPLICATION-AWARE AND REMOTE SINGLE INSTANCE DATA MANAGEMENT), 4) U.S. patent application Ser. No. 11\/963,623 (entitled SYSTEM AND METHOD FOR STORING REDUNDANT INFORMATION); 5) U.S. patent application Ser. No. 11\/950,376 (entitled SYSTEMS AND METHODS FOR CREATING COPIES OF DATA SUCH AS ARCHIVE COPIES); 6) U.S. patent application Ser. No. 12\/565,576 (entitled SYSTEMS AND METHODS FOR MANAGING SINGLE INSTANCING DATA); or 7) U.S. patent application Ser. No. 12\/647,906 (entitled BLOCK-LEVEL SINGLE INSTANCING), each of which is incorporated by reference herein in its entirety.","In some embodiments, certain components may reside and execute on the same computer. For example, in some embodiments, a client  such as a data agent , or a storage manager , coordinates and directs local archiving, migration, and retrieval application functions as further described in the previously-referenced U.S. patent application Ser. No. 09\/610,738. This client  can function independently or together with other similar clients .","As shown in , each secondary storage computing device  has its own associated metabase . Each client  may also have its own associated metabase . However in some embodiments, each \u201ctier\u201d of storage, such as primary storage, secondary storage, tertiary storage, etc., may have multiple metabases or a centralized metabase, as described herein. For example, rather than a separate metabase or index associated with each client  in , the metabases on this storage tier may be centralized. Similarly, second and other tiers of storage may have either centralized or distributed metabases. Moreover, mixed architecture systems may be used if desired, that may include a first tier centralized metabase system coupled to a second tier storage system having distributed metabases and vice versa, etc.","Moreover, in operation, a storage manager  or other management module may keep track of certain information that allows the storage manager  to select, designate, or otherwise identify metabases to be searched in response to certain queries as further described herein. Movement of data between primary and secondary storage may also involve movement of associated metadata and other tracking information as further described herein.","In some examples, primary data may be organized into one or more sub-clients. A sub-client is a portion of the data of one or more clients , and can contain either all of the data of the clients  or a designated subset thereof. As depicted in , the data store  includes two sub-clients. For example, an administrator (or other user with the appropriate permissions; the term administrator is used herein for brevity) may find it preferable to separate email data from financial data using two different sub-clients having different storage preferences, retention criteria, etc.","Components of a Variable Instancing System",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 2","b":["200","200","130","165","205","115","130","130","165","165","205","115","130","205"]},"Both the variable instance database  and the storage devices  may be any type of storage suitable for storing data, such as Directly-Attached Storage (DAS) such as hard disks, storage devices in a Storage Area Network (SAN), e.g., a Fibre Channel SAN, an iSCSI SAN or other type of SAN, Network-Attached Storage (NAS), a tape library, optical media, or any other type of storage. The variable instance database  may comprise two or more data stores (e.g., in distributed fashion), or may be stored on a storage device using a Redundant Array of Independent Disks (RAID), for load-balancing, data reliability, increased input\/output, and\/or other purposes.","The storage devices  may all be in the same system  (as is illustrated in ) or the storage devices  may be arranged or positioned in two or more storage operation cells. For example, two or more storage devices  may be part of two or more storage operation cells  that are hierarchically organized. Generally, each of the storage devices  stores only a single instance of a data object. In some examples, each of the storage devices  can store multiple instances of a data object, but one single storage device  would not typically store all instances of a data object originally identified by the secondary storage computing device  as for variable instancing storage (however, one single storage device  could be configured to store all instance).","The clients  (and their data stores \/) are distinct from the storage devices . Another way of stating this is that the intersection of the set of the clients  and the set of the storage devices  is empty. Put another way, the set of the clients  and the set of the storage devices  is disjoint. Described yet another way, there are no common elements between the set of the clients  and the set of the storage devices .","The secondary storage computing device  includes various components, each of which performs various functions. These components include a data object identification component , an identifier generation component , an identifier comparison component , and a criteria evaluation component . The data object identification component  identifies data objects, such as in response to a storage operation. For example, a client  may transfer data objects to be variable instanced to the secondary storage computing device  in one or more streams of contiguous data. The data object identification component  identifies data objects within the streams of contiguous data.","The identifier generation component  generates a substantially unique identifier for the data object. Examples of a substantially unique identifier include a hash value, message digest, checksum, digital fingerprint, digital signature or other sequence of bytes that substantially uniquely identifies the data object. For example, substantially unique identifiers could be generated using Message Digest Algorithm 5 (MD5) or Secure Hash Algorithm SHA 512. In some instances, the word \u201csubstantially\u201d is used to modify the term \u201cunique identifier\u201d because algorithms used to produce hash values may result in collisions, where two different data objects, when hashed, result in the same hash value. However, depending upon the algorithm or cryptographic hash function used, collisions should be suitably rare and thus the identifier generated for a file or data object should be unique throughout the data storage system. The term \u201cprobabilistically unique identifier\u201d may also be used. In this case, the work \u201cprobabilistically\u201d is used to indicate that collisions should be low-probability occurrences, and, therefore, the identifier should be unique throughout the data storage system. In some cases, only the word \u201cidentifier\u201d is used to describe what the identifier generation component  generates for a data object.","The identifier comparison component  performs comparisons of substantially unique identifiers of various data objects to determine if the data objects are substantially similar. Two data objects are substantially similar as long as they contain the same data, even if certain metadata such as their names (e.g., file names), their security information (e.g., access control lists (ACLs)), their descriptive information, their timestamps, etc., are different. Two substantially similar data objects will therefore have the same substantially unique identifier. The identifier comparison component  can compare a data object's substantially unique identifier to determine if it matches any substantially unique identifiers of other data objects stored in the variable instance database .","The criteria evaluation component  evaluates aspects of data objects against a set of criteria. For example, the criteria evaluation component  may examine the size of the data object to determine if it is eligible for variable instancing. Data objects smaller than a predetermined size (e.g., 64 kb) may not be eligible for variable instancing. As another example, another criterion used by the criteria evaluation component  may be whether the data object is determined to be data or of type data (as opposed to metadata or of type metadata). As another example, another criterion used by the criteria evaluation component  may be to only use reference data objects that have been stored in storage devices  for less than a specific period of time. Put another way, a data object that has been stored in a storage device  longer than a predetermined period of time (e.g., 90 days) may not qualify as a valid instance in a variable instancing operation. The secondary storage computing device  may also contain other components that perform other functions.","The clients , as part of their functioning, utilize data, which includes files, directories, metadata (e.g., ACLs and any other streams associated with the data), and other data objects. (More details as to storage operations involving ACLs may be found in the assignee's U.S. patent application Ser. No. 12\/058,518, entitled SYSTEM AND METHOD FOR STORAGE OPERATION ACCESS SECURITY, the entirety of which is incorporated by reference herein.) The data on the clients  is generally primary data (e.g., production data). During a storage operation, the clients  (e.g., the data agents ) send a copy of each data object in their data to the secondary storage computing device .","Upon receiving the data object, the secondary storage computing device  (e.g., the identifier generation component ) generates a substantially unique identifier for the data object. The secondary storage computing device  determines the number of instances of the data object that should be stored on the storage devices . To determine this, the secondary storage computing device  accesses a storage policy and analyzes the storage policy to determine the number of instances of the data object that should be stored on the storage devices . Additionally or alternatively, the secondary storage computing device  may access the variable instance database  to determine the number of instances of the data object that should be stored on the storage devices . The variable instance database  utilizes one or more tables or other data structures (e.g., the tables , , and\/or  illustrated in ) to store the substantially unique identifiers of the data objects. The variable instance database  also stores a count of the number of instances of each data object that should be stored on the storage devices  and a count of the number of instances of each data object that is already stored on the storage devices .","If the number of instances of the data object that should be stored on the storage devices  is less than the number of instances of the data object that are already stored on the storage devices , the secondary storage computing device  sends a copy of the data object to one or more of the storage devices  for storage and if necessary, adds its substantially unique identifier to the variable instance database . The secondary storage computing device  also adds a pointer to the location at which the data object is stored to the variable instance database . If a sufficient number of instances of the data object has already been stored, the secondary storage computing device  can avoid sending another instance of the data object to the storage devices . In this case, the secondary storage computing device  may add a reference (e.g., to an index in the variable instance database , such as by incrementing a reference count in the table  illustrated in ) to the already stored instance of the data object. After the instance of the data object has been stored, various post-processing operations may be performed upon the data object (e.g., indexing the content of the data object, classifying its content, encrypting the data object, and\/or compressing it).","Instead of the clients  sending the data objects to the secondary storage computing device , and the secondary storage computing device  generating the substantially unique identifiers, the clients  can themselves generate a substantially unique identifier for each data object and transmit the substantially unique identifiers to the secondary storage computing device  for lookup in the variable instance database . Alternatively or additionally, the clients  can perform the lookup of the data objects in the variable instance database . If the secondary storage computing device  determines that a sufficient number of instances of a data object has not already been stored on the storage devices , the secondary storage computing device  can instruct the client  to send it a copy of the data object, which it then stores on the storage devices . Alternatively or additionally, the client  itself can send the copy of the data object to the storage devices . More details as to the generation of substantially unique identifiers may be found in the assignee's U.S. patent application Ser. No. 12\/058,367, entitled SYSTEM AND METHOD FOR STORING REDUNDANT INFORMATION, the entirety of which is incorporated by reference herein.","The secondary storage computing device  can support encrypted data objects. For example, one client  could generate a substantially unique identifier for a data object and then encrypt it using one encryption algorithm. Another client  could generate a substantially unique identifier for another data object and then encrypt it using another encryption algorithm. Additionally or alternatively, the secondary storage computing device  can both generate the substantially unique identifiers and encrypt the data objects. If the two data objects are substantially similar, they will both have the same substantially unique identifier. The secondary storage computing device  can then store both encrypted instances of the data object or only a single encrypted instance.","The secondary storage computing device  can also support compressed data objects. In general, the same compression algorithm may be used to compress data objects. Therefore, the secondary storage computing device  can generate a substantially unique identifier for a data object before or after it has been compressed because two substantially similar data objects that have been compressed will typically have the same substantially unique identifier. More details as to how the secondary storage computing device  can support encryption and compression in a single instancing system may be found in the assignee's U.S. patent application Ser. Nos. 12\/145,342 and 12\/145,347, both entitled APPLICATION-AWARE AND REMOTE SINGLE INSTANCE DATA MANAGEMENT, the entireties of each of which are incorporated by reference herein. Such encryption and compression techniques may be equally applicable to the systems and methods described herein.","Process for Receiving a Storage Policy",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 3","b":["105","105","125","105","105"]},"In general, for ease in describing features of the invention, aspects of the invention will now be described in terms of an administrator interacting with the storage manager  via his or her computer. As implemented, however, the administrator's computer receives data input by the administrator and transmits such input data to the storage manager . The storage manager  may query the index , retrieve requested pages or information, perform computations and\/or provide output data back to the administrator's computer, typically for visual display to the administrator. Thus, for example, under step , the administrator provides input specifying a number of instances of each data object to store. The storage manager  receives this input and processes it accordingly.","The process  begins at step  when the storage manager  receives an indication of a number of instances of each data object that should be stored under this storage policy. For example, the administrator may utilize an integrated management console that provides an interface to allow the administrator to specify the number of instances of each data object that is subject to the storage policy.  illustrates an example of such an interface. As another example, the storage manager  could receive the indication of the number of instances from another storage manager  of another storage operation cell  (e.g., from another storage manager  that is superior to it in a hierarchical arrangement of storage operation cells ).","At step  the storage manager  receives an indication of one or more locations at which to store the instances of the data objects subject to the storage policy. For example, the integrated management console may provide an interface that allows the administrator to specify one or more locations at which to store one or more instances of each data object subject to the storage policy.  illustrates an example of such an interface. As another example, the storage manager  could receive the indication of the storage locations from another storage manager  of another storage operation cell  (e.g., from another storage manager  that is superior to it in a hierarchical organization of storage operation cells ).","At step  the storage manager  may receive an indication of other aspects of the storage policy. For example, the administrator may optionally specify network pathways to utilize in storage operations, retention policies, data characteristics, compression or encryption requirements, preferred system components to utilize in storage operations, and other criteria relating to storage operations performed under the storage policy. At step  the storage manager  stores the storage policy in a data store (e.g., in the index ). The process  then concludes.","Interfaces for Configuring Storage Operations","Referring to , representative computer displays or web pages for configuring aspects of a storage policy are illustrated. The screens of  may be implemented in any of various ways, such as in C++ or as web pages in XML (Extensible Markup Language), HTML (Hyper Text Markup Language) or any other scripts or methods of creating displayable data, such as the Wireless Access Protocol (\u201cWAP\u201d). The screens or web pages provide facilities to present information and receive input data, such as a form or page with fields to be filled in, pull-down menus or entries allowing one or more of several options to be selected, buttons, sliders, hypertext links or other known user interface tools for receiving user input. While certain ways of displaying information to users is shown and described with respect to certain Figures, those skilled in the relevant art will recognize that various other alternatives may be employed. The terms \u201cscreen,\u201d \u201cweb page\u201d and \u201cpage\u201d are generally used interchangeably herein.","When implemented as web pages, the screens are stored as display descriptions, graphical user interfaces, or other methods of depicting information on a computer screen (e.g., commands, links, fonts, colors, layout, sizes and relative positions, and the like), where the layout and information or content to be displayed on the page is stored in a database typically connected to a server. In general, a \u201clink\u201d refers to any resource locator identifying a resource on a network, such as a display description provided by an organization having a site or node on the network. A \u201cdisplay description,\u201d as generally used herein, refers to any method of automatically displaying information on a computer screen in any of the above-noted formats, as well as other formats, such as email or character\/code-based formats, algorithm-based formats (e.g., vector generated), or matrix or bit-mapped formats. While aspects of the invention are described herein using a networked environment, some or all features may be implemented within a single-computer environment.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIGS. 4A and 4B","b":["400","400","405","115","420"]},"The administrator may specify any number of instances. One limit to the number of instances may be the number of storage devices  available for storing instances of data objects. A default number of instances (e.g., one instance, three instances) may be used if the administrator does not affirmatively specify a number of instances. The number specified may be used for all data objects, or the administrator may categorize and\/or classify data objects and specify different numbers for different categories and\/or classifications. For example, a set of clients  storing production data may use a relatively high number of instances, whereas a set of clients storing test or development data may use a relatively low number.","The interface  also includes a \u201cLocations\u201d tab  on which the administrator may specify the locations at which instances of data objects are to be stored and a \u201cSecurity\u201d tab  on which the administrator may specify security credentials for use in performing storage operations. The interface  also includes buttons , which enable the administrator to confirm or cancel the selections and\/or view help regarding the interface .",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 4B","FIG. 4B"],"b":["400","410","405","405","430","115","130","130","130"],"i":"a "},"A storage device  named \u201cStorage Device \u201d is selected in list box , indicating that it is a predetermined (i.e., pre-selected prior to run-time) storage device . The option \u201cAuto Determine\u201d is selected in list box . This indicates that when the storage operation is being performed which storage device  to use is to be automatically or dynamically determined (i.e., at run-time). The storage manager  may use various factors or criteria in determining which storage device  to use, such as a storage capacity of each of multiple storage devices , a speed or throughput of storage operations performed using each of multiple storage devices , an availability of each of multiple storage devices , a power consumption of each of multiple storage devices , etc. More details as to power management with regards to data storage operations may be found in International Pat. App. No. PCT\/US2008\/074686 (entitled POWER MANAGEMENT OF DATA PROCESSING RESOURCES, SUCH AS POWER ADAPTIVE MANAGEMENT OF DATA STORAGE OPERATIONS), the entirety of which is incorporated by reference herein.","The list box is expanded, showing the options available for storage of the fourth instance of data objects, which includes \u201cAuto Determine\u201d and several named storage devices : \u201cStorage Device ,\u201d \u201cStorage Device ,\u201d and \u201cStorage Device .\u201d Each list box  may provide as options all (or a subset thereof) of the storage devices  that are available throughout an organization implementing the systems and methods described herein. For example, if the organization implements storage operation cells organized in a hierarchical fashion, all the storage devices  throughout the hierarchically organized storage operation cells may be provided as options in each of the list boxes . As another example, if the organization implements storage operation cells organized in a hierarchical fashion, only the storage devices  in storage operation cells subordinate to the storage operation cells in which the client  storing the data objects is located may be provided as options in each of the list boxes . The storage manager  may query a table or other data structure (e.g., the table  illustrated in ) to determine locations that are available as options for storing data. Those of skill in the art will understand that other techniques may be used to determine locations for storing data.","Although the \u201cLocations\u201d tab  provides selections for only four locations, if the administrator had specified more or fewer instances (on the \u201cGeneral\u201d tab ), the \u201cLocations\u201d tab  would enable the administrator to select locations for each of the instances specified. The administrator can also add new locations by selecting the \u201cAdd New Location\u201d button . This causes the storage manager  to provide an interface that allows the administrator to add new locations for storing data, remove existing locations, and\/or modify locations in other fashions.","The interface  may also allow the administrator to configure other aspects of the storage policy. For example, the interface  may allow the administrator to specify how long to keep instances of a data object stored under the storage policy. The administrator may specify a date after which instances of the data object may be aged. Movement of data from one tier of storage to a subsidiary tier of storage (e.g., from secondary storage to tertiary storage) may be generally referred to as \u201caging data,\u201d and is discussed in more detail herein. Additionally or alternatively, for each instance of the data object, the administrator may specify a date after which the instance can be aged. Additionally or alternatively, the administrator may specify that the instances of the data object may be aged when the source data object (e.g., the data object in the primary copy of data) is aged. Additionally or alternatively, the administrator may specify a schedule for aging instances of the data object (e.g., after one year, only half of the original number of the data instances need to be kept, after two years, only one quarter of the original number of the data instances need to be kept, etc.). Those of skill in the art will understand that the administrator may specify criteria and\/or rules for aging instances of data objects in various fashions.","When aging instances of data objects, the storage manager  may apply rules and\/or criteria in order to optimize available storage space. For example, if a number of instances of a data object can be aged, the storage manager  may select the instances on storage devices  having the least available storage space, in order to free up available storage space. Additionally or alternatively, the storage manager  may select the instances on the most frequently used storage devices . Additionally or alternatively, the storage manager  may select the instances on storage devices  having the slowest times to store data or access stored data or the fastest times to store data or access stored data. Additionally or alternatively, the storage manager  may select the instances on storage devices to minimize cost, reduce power consumption, to minimize the risk of data loss, in accordance with data classification operations, in accordance with storage policies, and\/or other factors. Those of skill in the art will understand that the storage manager  may apply rules and\/or criteria in various fashions in order to optimize available storage space when aging instances of data objects.","Processes for Performing a Storage Operation",{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 5","FIGS. 4A and 4B","FIG. 1"],"b":["500","400","105","195","130","195","130","195","165","115","165","500","130","105"]},"The process  begins at step  when the secondary storage computing device  receives an indication to perform the storage operation. At step  the secondary storage computing device  retrieves the associated storage policy (e.g., from the index ). The storage policy may specify one or more storage operations (referred to as a storage operation in the singular for brevity) to perform. For example, the storage policy may specify that the secondary storage computing device  is to cause primary storage data (e.g., the data in data stores \/) to be copied to storage devices . At step  the secondary storage computing device  (e.g., the data object identification component ) identifies data objects subject to the storage operation. At step  the secondary storage computing device  determines the number of instances of the data object to store. This determination is discussed with reference to the process  illustrated in .","At step , the secondary storage computing device  evaluates whether the determined number of instances of the data object to store is greater than zero. If the storage manager  is to store one or more instances of the data object, the process  continues to step , where the storage manager  determines the one or more locations at which to store the one or more instances of the data object. This determination is discussed with reference to the process  illustrated in  At step , the secondary storage computing device  stores the one or more instances of the data object at the determined one or more locations. At step  the secondary storage computing device  stores one or more associations between the one or more instances of the data object and the one or more locations (e.g., in the table  in the variable instancing database  illustrated in ). Additionally or alternatively, the secondary storage computing device  updates one or more existing associations to reflect one or more new locations at which the one or more instances have been stored. At step  the storage manager determines whether there are more data objects subject to the storage operation. If so, the process  returns to step . If not, the process  concludes. At step , if the secondary storage computing device  determines that no instances of the data object are to be stored, the process  continues to step .",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 6","FIG. 7","FIG. 4A"],"b":["600","600","605","165","220","610","165","130","165","615","165","225","115","165","700","205","620","165","165","400"]},"At step , if an instance of the data object has already been stored, the secondary storage computing device  determines the number of instances of the data object that has already been stored. The secondary storage computing device  may do so by querying a table or other data structure (e.g., the table  illustrated in ) to make this determination. At step , the secondary storage computing device  determines if the number of instances of the data object that should be stored is greater than the number of instances of the data object that are already stored. If the number that should be stored is greater than the number already stored, the process  branches to step . At step  the secondary storage computing device  determines the number of instances of the data object to store and returns the determined number of instances of the data object to store. The process  then continues to step  (discussed below). If the number of instances that should be stored is not greater than the number already stored, the process  branches to step , where the secondary storage computing device  returns that the number of instances of the data object to be store is equal to zero. At step  the secondary storage computing device  updates a reference count of the data object (e.g., in the table  illustrated in ). The process  then concludes.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 10","FIG. 4B"],"b":["1000","1000","1010","165","400","1000","1060","165","1000","1050","165","1000"]},"If the locations are not expressly specified in the storage policy, the process  continues at step , where the secondary storage computing device  determines one or more criteria to be used to select locations. The criteria can include, for example and without limitation, a storage capacity (e.g., total or available) of storage devices , a speed or throughput of storage operations performed using storage devices , an availability of storage devices , a time to store data on the storage devices , a time to access data stored on the storage devices, a power consumption of storage devices , etc.","Another criterion could include minimizing the risk of total data loss. For example, consider two clients  storing identical sets of data objects, and two separate storage devices . If the data of the first client  is variable instanced using the first storage device , instances of all the data objects of this data would be stored on the first storage device . If, at a later time, the data of the second client  is variable instanced using the second storage device , references to the data objects stored on the first storage device  would be stored on the second storage device . This would result in the first storage device  storing all of the actual data objects, and the second storage device  storing only references to the actual data objects. If the media of the first storage device  were to fail, this could potentially result in the loss of all the actual data objects. To reduce the risk of total data loss, the actual data objects could be stored across two or more storage devices , and references to data objects could be similarly distributed across the two or more storage devices . Then, if one storage device were to fail, it would not result in a total loss of data. Similar distribution of data objects in variable instancing storage operations can be used for purposes of load balancing and\/or other purposes.","After the secondary storage computing device  has determined the one or more criteria, at step  the secondary storage computing device  determines the locations that are available for storing instances of data objects. This can include one or more storage devices  in the system  and\/or one or more storage devices  in one or more storage operation cells hierarchically or otherwise organized. At step  the secondary storage computing device  determines the locations, from the available locations, based upon the determined one or more criteria. The process  continues at step , where the secondary storage computing device  returns the determined locations. The process  then concludes.","Conventional data protection techniques and\/or single instance storage techniques may have additional copies (e.g., secondary and\/or tertiary copies) of data objects stored on archival media (e.g., on tape). However, such additional copies may be difficult to locate because they may not be tracked with any specificity, or in one place. Even if the additional copies of the data objects can be located on archival media, it may be time-consuming to access them due to features inherent to archival media (e.g., archival media such as tape is typically slower sequential access, in contrast with magnetic disks that allow for faster random access). In contrast to such conventional data protection techniques, the processes ,  and  enable an administrator to specify a variable number of instances of a data object to be stored at one or more locations (e.g., on fast-access storage devices, such as magnetic disk and\/or memory, or on slow-access storage devices, such as a tape library). The locations may provide for fast access to the instances of the data object, so that, when necessary, an administrator may quickly restore an instance of the data object. Storing multiple instances (up to N\u22121) of N data objects provides for less risk of data loss than single instance storage techniques, and generally nearly as less risk of data loss as conventional data protection techniques. Storing multiple instances (up to N\u22121) of N data objects also provides for more efficient use of available storage space than conventional data protection techniques, and generally nearly as efficient use as single instance storage techniques. Accordingly, the processes ,  and  enable an administrator to tailor data protection to strike an appropriate balance between 1) minimizing the risk of data loss, and 2) making efficient use of available data storage space, in accordance with the administrator's requirements.","The secondary storage computing device  may apply various criteria and\/or rules to optimize any or all of the processes ,  and . As previously noted, in step , the secondary storage computing device  gathers additional information about data objects (e.g., their size, security attributes, etc.). As an example of a criterion that may be applied, if the secondary storage computing device  determines that the size of a data object exceeds a threshold amount (e.g., one gigabyte (GB)) and the pre-specified number of instances to store of the data object exceeds a minimum number of instances, the secondary storage computing device  may reduce the pre-specified number of instances to the minimum number of instances (e.g., two instances). The secondary storage computing device  may do so in order to save available storage space on the storage devices . For example, a storage policy may specify that ten instances of a 2 GB file are to be stored on ten storage devices . Upon determining this information, the secondary storage computing device  may override the pre-specified number of instances (ten instances) to specify that only two instances of the 2 GB file are to be stored on two storage devices .","As another example of a criterion that may be applied, the secondary storage computing device  may maintain a count, for each data object, of a number of times that an instance of the data object has been processed by the secondary storage computing device . If the secondary storage computing device  determines that the number of times exceeds a first threshold number and the pre-specified number of instances to store of the data object does not exceed a second threshold number of instances, the secondary storage computing device  may increase the pre-specified number of instances to the second threshold number. For example, the secondary storage computing device  may encounter a file that is common to all or nearly all computing devices in a network (e.g., a file used by the operating system on each of the computing devices). Because this file is used by all or nearly all of the computing devices, it may be important, and therefore instances of it should be stored on multiple storage devices , in order to minimize the risk of its loss. In this case, the secondary storage computing device  may increase the pre-specified number of instances (e.g., two instances) to the second threshold number (e.g., ten instances) in order to store additional instances of the data object.","Similarly, if the secondary storage computing device  encounters fewer instances of a data object than it expects to encounter, the secondary storage computing device  may decrease the pre-specified number of instances (e.g., ten instances) to the second threshold number (e.g., four instances), or to the actual number of instances encountered.","As another example of a criterion that may be applied, the secondary storage computing device  may examine a data object's additional information (e.g., its metadata such as descriptive attributes, security information, information about a source of the data object, an owner, creator, author and\/or editor of the data object, etc.) to determine a priority of the data object. If the priority of the data object exceeds a threshold priority and the pre-specified number of instances to store of the data object does not exceed a threshold number of instances, the secondary storage computing device  may increase the pre-specified number of instances to the threshold number. For example, the secondary storage computing device  may encounter files that it determines to be of high priority (e.g., files containing financial information, files containing sales information, files coming from certain workgroups within an organization, certain computing devices, certain departments within an organization, etc.). If the secondary storage computing device  additionally determines that the pre-specified number of instances to store of each file does not exceed a threshold number of instances, the secondary storage computing device  may increase the pre-specified number of instances (e.g., two instances) to the second threshold number (e.g., ten instances), in order to store additional instances of the file.","In some examples, data objects are classified according to various attributes (e.g., size, security descriptors, association with an organizational unit, etc.). As another example of a criterion that may be applied, the secondary storage computing device  may increase or decrease the number of instances of a data object to store based upon its classifications.","Suitable Data Structures",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 7","b":["205","700","165","700","700","716","718","720","702","704","706","708"]},"Column  stores a reference count of the number of times an instance of the data object has been processed by the secondary storage computing device  and\/or of the number of instances already stored, column  stores a size of the data object, and column  stores a timestamp indicating when the data object was last processed by the secondary storage computing device , and\/or when an instance was last stored. For example, row  contains information about the data object named \u201cinetcom.dll\u201d (column ). The \u201cinetcom.dll\u201d data object has a substantially unique identifier of \u201c0xA1B3FG\u201d (column ), two instances of it should be stored (column ), and two instances of it have been stored (column ). The \u201cinetcom.dll\u201d data object has a size in kilobytes of 258 (column ) and the date on which it was last processed was \u201cNov. 1, 2008\u201d (column ). The table  may include other columns storing other information about data objects, such as information about the provenance of data objects, priority of data objects, owner of data objects, value of data objects, etc.","Another data structure that may be employed by aspects of the invention is, in one example, table , called \u201cLocations.\u201d The secondary storage computing device  may use the table  to store information about locations (e.g., storage devices ) that are available to store instances of data objects. The table  includes multiple rows (e.g., rows -), each of which is divided into columns in which information about a location is stored. Column  stores a identifier of a location and column  stores a name of a location. For example, row  contains information about a location having an identifier of \u201c00935\u201d (column ) and which is named \u201cStorage Device \u201d (column ). Additionally or alternatively, paths to data (e.g., network paths, Universal Naming Convention (UNC) paths, paths identified by Uniform Resource Identifiers (URIs), etc.) may be stored in table . The secondary storage computing device  may update the table  as locations become available and unavailable (e.g., by adding new rows, by deleting existing rows, and\/or marking as inactive existing rows), and update the location options available for selection in the interface  illustrated in  accordingly. The table  may include other columns storing other information about locations, such as information about their availability, their access time, their restore time, etc.","Another data structure that may be employed by aspects of the invention is, e.g., table , called \u201cDataObjectsLocations.\u201d The secondary storage computing device  may use the table  to store information about associations between instances of data objects and the locations at which they are stored. The table  includes multiple rows (e.g., rows -), each of which is divided into columns in which information about an association between a data object and a location is stored. For example, the data object named \u201cinetcom.dll,\u201d which has the substantially unique identifier of \u201c0xA1B3FG,\u201d is associated with locations having identifiers of \u201c00935\u201d and \u201c00121\u201d (rows  and  of table , respectively). These locations correspond to the locations named \u201cStorage Device \u201d and \u201cStorage Device ,\u201d respectively. This indicates that an instance of the \u201cinetcom.dll\u201d is stored at \u201cStorage Device \u201d and another instance is stored at \u201cStorage Device .\u201d As another example, the data object named \u201cFigures.pdf,\u201d which has the substantially unique identifier of \u201c0XFG329A,\u201d is associated with location \u201c00478\u201d (row  of table ), which corresponds to a location named \u201cStorage Device .\u201d The table  may include other columns storing other information, such as a column that stores a unique instance identifier for each instance of the data object, thereby associating the unique instance identifier with the instance's location.","Process for Restoring a Data Object",{"@attributes":{"id":"p-0109","num":"0108"},"figref":"FIG. 8","b":["800","115","130","800","805","165","130","810","165","130","815","165","161","165"]},"At step  the secondary storage computing device  determines one or more locations (e.g., one or more storage devices ) at which an instance of the data object is stored. The secondary storage computing device  may do so by querying a table or other data structure (e.g., the table  illustrated in ) to determine the storage devices . At step  the secondary storage computing device  selects a storage device  from which to restore the data object. The secondary storage computing device  may use various criteria or factors to select a storage device , such as a proximity of the storage device  of the instance to the location (e.g., a client ) to which it needs to be restored, an availability of each of multiple storage devices storing instances of the data object, a speed or throughput of restore operations performed using each of multiple storage devices , an availability of each of multiple storage devices , an access time of each of the multiple storage devices , a power consumption of each of the multiple storage devices , and\/or other factors. Additionally or alternatively, a request to restore a data object may specify one or more locations from which to restore the data object, and\/or preference criteria to use in selecting locations from which to restore data object. The secondary storage computing device  may use these various criteria or factors to select a \u201cbest location\u201d or \u201cpreferred location\u201d from which to restore the data object. At step  the secondary storage computing device  restores the data object from the selected location. At step  the secondary storage computing device  determines if there are more data objects to restore. If so, the process  returns to step . If not, the process  concludes.","Process for Aging Data","A storage policy may specify how long data is to be retained at specific tiers of storage or what criteria must be met before data may be moved from one tier of storage to another tier of storage. Such specifications may be cumulatively referred to as a \u201cretention policy.\u201d A retention policy may specify how long data is to be kept on one or more tiers of storage before it can be moved to one or more other tiers of storage. For example, certain data may be subject to a retention policy that specifies that it is to be stored on a higher speed\/faster access storage device  in secondary storage (e.g., on disk and\/or in memory) for two weeks before it can be moved off the storage device  to a storage device in tertiary storage (e.g., to a tape library, where tape storage provides slower access but provides for less costly data storage). Such aging of data from one tier of storage to another tier may be instigated by the storage manager  (e.g., a monitoring agent of the storage manager ).","As discussed herein, a storage policy may also specify that one or more instances of a data object are to be stored in secondary storage on one or more storage devices . Such specifications may be cumulatively referred to as a \u201cvariable instancing policy,\u201d or alternatively, as a \u201creduced instancing policy.\u201d If data subject to a retention policy includes data objects that are subject to a variable instancing policy, such data may not be able to be aged off of storage if such aging would result in a violation of the variable instancing policy. For example, consider an email mailbox of a user stored in secondary storage. The mailbox may contain a data object (e.g., an email attachment) that is subject to a variable instancing policy which specifies that five instances of the data object are to be stored in secondary storage across the organization implementing the variable instancing policy. Besides the instance of the data object in the mailbox, four other instances of the data object are stored in secondary storage across the organization, meaning that the variable instancing policy is satisfied. However, it also means that the mailbox cannot be aged, because to do so would result in storing a fewer number of instances of the data object (four) than is specified in the variable instancing policy (five).","One way to resolve this inability to age data containing data objects subject to a variable instancing policy (data that includes data objects is termed \u201ccontaining data\u201d) would be to identify such data objects and take appropriate action on them. For example, if the only instances of the data objects are those within the containing data, the secondary storage computing device  could move or copy those data objects to other media (e.g., via a copy of the data objects). This would allow the secondary storage computing device  to then age the containing data. As another example, if the only instances of the data objects to be retained are those within the containing data to be aged off of storage, the secondary storage computing device  could determine when the data objects are the subject of a storage operation. In place of storing references to the existing data objects in the containing data (which would prevent the containing data from being aged, because it is referenced by other data), the secondary storage computing device  could instead store the additional instances of the data objects. This would allow the secondary storage computing device  to then age the containing data (because it is not referenced by other data). As another example, if other instances of the data objects are available in other locations, the secondary storage computing device  could duplicate those other instances in such a way to satisfy the variable instancing policy (e.g., by copying instances of the data objects from a storage device  to another storage device ). This would allow the secondary storage computing device  to then age the containing data. Those of skill in the art will understand that other methods may be used to provide for storage of the appropriate number of instances of data objects.",{"@attributes":{"id":"p-0114","num":"0113"},"figref":["FIG. 9","FIG. 7"],"b":["900","900","905","165","910","165","915","165","210","165","115","165","700","165","130"]},"At step , the secondary storage computing device  determines if the data object is subject to a variable instancing policy. If it is subject to a valid (i.e., still in force) variable instancing policy (meaning that the instance of the data object should be stored in order to satisfy the number of instances specified in the variable instancing policy), the process  continues at step , where the secondary storage computing device  determines if one or more instances of the data object are stored in locations other than the containing data. At step , the secondary storage computing device  acts on the result of the determination of step . If one or more instances of the data object are stored in other locations, the process continues at step . At step , the secondary storage computing device  copies or duplicates one of the other instances of the data object to another storage device . Doing so satisfies the variable instancing policy by maintaining a sufficient number of instances of the data object. The process  then continues at step . If, at step , the secondary storage computing device  determines that no instances of the data object are stored in other locations, the process continues at either step  or step .","In some examples, the secondary storage computing device  considers other factors in copies or duplicating instances of data objects. For example, the secondary storage computing device  may monitor storage devices  that contain variable instanced data objects (e.g., using intermittent heartbeats or other monitoring techniques). If one of the storage devices  fails (e.g., an associated medium fails), then the secondary storage computing device  can determine which data objects the storage device  had stored, store an additional instance of each the determined data objects on other storage devices , and update any references to the data objects on the failed storage device . The secondary storage computing device  thus can take proactive corrective action to ensure that a variable instancing policy is satisfied. As a further precautionary measure, the secondary storage computing device  can maintain one or more redundant variable instance databases , so that if the primary variable instance database  fails, the secondary storage computing device  still can determine the number of instances of data objects stored in secondary storage across the system , their locations, and other information stored in the variable instance database .","At step , the secondary storage computing device  copies the data object to another location (e.g., to another storage device ). At step , the secondary storage computing device  sets a flag for the data object that the containing data cannot be aged until a storage operation is performed on another instance of the data object. Setting this flag causes the secondary storage computing device  to check for another instance of the data object in other storage operations that it (or another secondary storage computing device ) performs. When the secondary storage computing device  (or another secondary storage computing device ) performs another storage operation on an instance of the data object, another instance of the data object has been stored in another location (e.g., on another storage device ). The storage manager then clears the flag set for the data object. Once all set flags for data objects have been cleared, aging the containing data will not cause the variable instancing policy to be violated for any of the data objects within the containing data. After either of steps  and , at step  the secondary storage computing device  determines if there are more data objects subject to the variable instancing policy within the containing data. If so, the process  returns to step . If not, the secondary storage computing device  ages the containing data. The process  then concludes.","From the foregoing, it will be appreciated that specific embodiments of the storage system have been described herein for purposes of illustration, but that various modifications may be made without deviating from the spirit and scope of the invention. For example, although copy operations may have been described, the system may be used to perform many types of storage operations (e.g., backup operations, restore operations, archival operations, copy operations, Continuous Data Replication (CDR) operations, recovery operations, migration operations, HSM operations, etc.). As another example, while variable instancing at the level of data objects has been described, variable instancing can also be performed at the level of data blocks (e.g., blocks of data of fixed size, such as 32 Kb, 64 Kb, 128 Kb, 256 Kb, 512 Kb, etc.). Accordingly, the invention is not limited except as by the appended claims.","Terms and phrases used in this document, and variations thereof, unless otherwise expressly stated, should be construed as open ended as opposed to limiting. As examples of the foregoing: the term \u201cincluding\u201d should be read as meaning \u201cincluding, without limitation\u201d or the like; the term \u201cexample\u201d is used to provide exemplary instances of the item in discussion, not an exhaustive or limiting list thereof; the terms \u201ca\u201d or \u201can\u201d should be read as meaning \u201cat least one,\u201d \u201cone or more\u201d or the like; and adjectives such as \u201cconventional,\u201d \u201ctraditional,\u201d \u201cnormal,\u201d \u201cstandard,\u201d \u201cknown\u201d and terms of similar meaning should not be construed as limiting the item described to a given time period or to an item available as of a given time, but instead should be read to encompass conventional, traditional, normal, or standard technologies that may be available or known now or at any time in the future. Likewise, where this document refers to technologies that would be apparent or known to one of ordinary skill in the art, such technologies encompass those apparent or known to the skilled artisan now or at any time in the future.","The presence of broadening words and phrases such as \u201cone or more,\u201d \u201cat least,\u201d \u201cbut not limited to\u201d or other like phrases in some instances shall not be read to mean that the narrower case is intended or required in instances where such broadening phrases may be absent. The use of the term \u201cmodule\u201d does not imply that the components or functionality described or claimed as part of the module are all configured in a common package. Indeed, any or all of the various components of a module, whether control logic or other components, can be combined in a single package or separately maintained and can further be distributed in multiple groupings or packages or across multiple locations.","If a synchronization process or synchronization processes are described herein, it is not intended to require that multiple synchronizations occur simultaneously or that multiple computing systems being synchronized each receive the same data. Although in some examples the data can be broadcast to all participating computing systems simultaneously (or close to simultaneously), in other examples the data can be sent to different computing systems or groups of computing systems at different times. Likewise, in some examples the same data, or the same subset of the data can be sent to all computing systems. However, in other examples, subsets of the data can be tailored for a given computing system or group of computing systems.","Unless the context clearly requires otherwise, throughout the description and the claims, the words \u201ccomprise,\u201d \u201ccomprising,\u201d and the like are to be construed in an inclusive sense, as opposed to an exclusive or exhaustive sense; that is to say, in the sense of \u201cincluding, but not limited to.\u201d The word \u201ccoupled,\u201d as generally used herein, refers to two or more elements that may be either directly connected, or connected by way of one or more intermediate elements. Additionally, the words \u201cherein,\u201d \u201cabove,\u201d \u201cbelow,\u201d and words of similar import, when used in this application, shall refer to this application as a whole and not to any particular portions of this application. Where the context permits, words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word \u201cor\u201d in reference to a list of two or more items, that word covers all of the following interpretations of the word: any of the items in the list, all of the items in the list, and any combination of the items in the list.","The above detailed description of embodiments of the invention is not intended to be exhaustive or to limit the invention to the precise form disclosed above. While specific embodiments of, and examples for, the invention are described above for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. For example, while processes or blocks are presented in a given order, alternative embodiments may perform routines having steps, or employ systems having blocks, in a different order, and some processes or blocks may be deleted, moved, added, subdivided, combined, and\/or modified. Each of these processes or blocks may be implemented in a variety of different ways. Also, while processes or blocks are at times shown as being performed in series, these processes or blocks may instead be performed in parallel, or may be performed at different times.","The teachings of the invention provided herein can be applied to other systems, not necessarily the system described above. The elements and acts of the various embodiments described above can be combined to provide further embodiments.","Any patents and applications and other references noted above, including any that may be listed in accompanying filing papers, are incorporated herein by reference. Aspects of the invention can be modified, if necessary, to employ the systems, functions, and concepts of the various references described above to provide yet further implementations of the invention.","These and other changes can be made to the invention in light of the above Detailed Description. While the above description details certain embodiments of the invention and describes the best mode contemplated, no matter how detailed the above appears in text, the invention can be practiced in many ways. Details of the system may vary considerably in implementation details, while still being encompassed by the invention disclosed herein. As noted above, particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics, features, or aspects of the invention with which that terminology is associated. In general, the terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification, unless the above Detailed Description section explicitly defines such terms. Accordingly, the actual scope of the invention encompasses not only the disclosed embodiments, but also all equivalent ways of practicing or implementing the invention under the claims.","While certain aspects of the invention are presented below in certain claim forms, the inventors contemplate the various aspects of the invention in any number of claim forms. For example, while only one aspect of the invention is recited as embodied in a computer-readable medium, other aspects may likewise be embodied in a computer-readable medium. As another example, while only one aspect of the invention is recited as a means-plus-function claim under 35 U.S.C. \u00a7112, sixth paragraph, other aspects may likewise be embodied as a means-plus-function claim, or in other forms, such as being embodied in a computer-readable medium. (Any claims intended to be treated under 35 U.S.C. \u00a7112, \u00b66 will begin with the words \u201cmeans for.\u201d) Accordingly, the inventors reserve the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
