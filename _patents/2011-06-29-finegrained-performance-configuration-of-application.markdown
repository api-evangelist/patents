---
title: Fine-grained performance configuration of application
abstract: A method, system and computer program product for performance configuration of an application by setting at least one performance preference for a performance-sensitive class in the application, specifying performance preference propagation policy of the class in the application based on the at least one performance preference, and calling the class to perform performance configuration for application according to the performance preference propagation policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566811&OS=08566811&RS=08566811
owner: International Business Machines Corporation
number: 08566811
owner_city: Armonk
owner_country: US
publication_date: 20110629
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This invention claims priority to the foreign application 201010506468.X filed Sep. 30, 2010 in China.","1. Field","The invention relates to a computing environment. More particularly to a computer program, method, and system for achieving fine-grained performance configuration of an application.","2. General Background","Object-oriented programming (OOP) is a programming paradigm using \u201cobjects\u201d including the data and their methods to design applications and computer programs. An individual routine may form a subprogram that can encapsulate data and perform a function isolated from other subprograms. The separation between different objects improves reusability, flexibility, and extension of software. For the purpose of achieving a complete function, each object can receive information, process data and send information to other objects.","In object-oriented programming, a class is usually used to encapsulate a specific function or provide a blueprint that may be used for creating an object. It describes features and methods common to the created objects. All data and code contained in an object can be constructed by an instance of a class.","A stricter definition of a class is a cohesive packet composed of some type of specific metadata. It describes rules of behaviors of some objects, and these objects are referred to as instance of the class. A class has an interface and a structure. The interface describes how to interact with the class and its instance by a method, while the structure describes how to divide data in each instance into multiple features. A class is a specific type of object in a certain layer. A class has a representative form (meta object) at runtime, and it provides support at runtime for operating metadata relevant to the class.","There are some performance-sensitive classes, such as, collection utility classes which may have different configurations which produce different performance behaviors at runtime. Some configurations can make classes run faster but consume more memory; while some configurations can make classes consume less memory but run slower. Part of these configurations might be exposed through an Application Programming Interface (API) of a class, while other configurations may be hidden.","ArrayList in Java\u2122 has a constructor ArrayList (initialCapacity) which allows the developer to explicitly specify the initial size of its internal data structure. (Java and all Java-based trademarks and logos are trademarks or registered trademarks of Oracle and\/or its affiliates.) However, there are other hidden configurations that may affect ArrayList's performance behavior, such as the size-growth strategy and accompanying parameters, i.e., it can grow at a constant pace, with 10 in conservative cases and 100 in aggressive cases; it can also grow in a multiplying way, with 1.1 times in conservative cases and 2 times in aggressive cases. However, all these are invisible to developers.","Depending on different scenarios applied in an application, there may be different requirement for performance of the application code. For example, when a developer knows a HashMap instance will be used in a hot registry, he wants it to run faster even though that might makes it consume more memory. In the event that classA is a Daemon class used periodically, the programmer would want it to consume minimum memory even though that might makes it run slower. In other scenarios, the priority might be for the application to start up quickly.","However, currently there is no simple and unified approach to perform fine-grained performance configuration of an application to meet the requirements of the above scenarios.","According to one embodiment of the invention, there is provided a computer program product for achieving performance configuration of an application. The computer program product comprises a computer readable storage medium having computer readable program code embodied therewith, The computer readable program code comprises setting an at least one performance preference for a performance-sensitive class in the application, specifying a preference propagation policy of a class in the application based on the at least one performance preference; and calling the class to perform performance configuration for the application according to the performance preference propagation policy.","According to one embodiment of the invention, there is provided a method for achieving performance configuration of application. The method comprises setting at least one performance preference for performance-sensitive class in the application; specifying performance preference propagation policy of the class in the application based on the at least one performance preference; and calling the class to perform performance configuration for the application according to the performance preference propagation policy.","According to another embodiment of the invention, there is provided a system for achieving performance configuration of an application executing on a processor. The application having an at least one performance-sensitive class. The class having an interface for setting the at least one performance-sensitive performance preference for the at least one performance-sensitive performance-sensitive class in the application. The application having an interface for setting a performance preference propagation policy of the class and utilizing the interface for setting the performance preference propagation policy of the class.","Embodiments of the invention are described below with reference to drawings in detail.","In view of the deficiencies in prior art, various method, system, and computer program product embodiments of the invention are provided herein. The main idea of the invention is to provide a simple, flexible, and unified approach to achieve fine-grained performance configuration of application code. First, class libraries may be performance-aware, that is, a class may have different runtime behaviors such as optimizing for speed versus optimizing for memory and the like for different performance policies. The application developer may specify performance preferences in different scopes, including global scope, individual class scope, individual method scope, individual instance scope, and the like. At runtime, the preference propagates in the specified scope. For example, all code executed in the scope may query a current performance preference and follow the performance preference correspondingly. With the invention, the developers can be enabled to fine-configure the performance preference for the application code, configure performance at different granularity simply and flexibly, and without requiring a complex configuration for individual classes",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":"100"},"For this performance-sensitive class, the set performance preference enables the identified class to be performance-aware, and examples of the performance preference can include: \u201cAggressively Prefer Speed\u201d, \u201cPrefer Speed\u201d, \u201cNormal\u201d, \u201cPrefer Memory\u201d, \u201cAggressively Prefer Memory\u201d, and the like. The classes of the performance preference can be set as different performance preferences by setting different parameter values. At runtime, values corresponding to current valid preference setting are used, thereby running in a form preferred by developers. Usually, these parameter values only affect instance construction, but they can go beyond that.","For example, for class ArrayList, configuration information affecting performance and memory occupation can be found in ArrayList, and a set of parameters suitable to different performance environments are defined. In the next example, there is one default array size in ArrayList, and its initial value is 16. ArrayList can further define it as follows:","Default\u2014Size=16","Prefer Speed\u2014Size=128","Prefer Memory\u2014Size=2","Thus, in the scenario of Prefer Speed, the size of the array is set as 128; and in the scenario of Prefer Memory, the size of the data is set as 2.","A Preference-aware class should have one default preference, and one or more configurable preference options. Each preference option represents a unique strategy of a class at runtime. A typical implementation is to use a configuration file as shown below. Class library developers are responsible for creating the configuration file, such that the configuration file could be transparent to application developers.","ArrayList|Prefer Speed|Var1=16,Var2=32,Var3=0.75","ArrayList|Prefer Memory|Var1=8,Var2=2,Var3=0.85","ArrayList|Default|Var1=16,Var2=16,Var3=0.75","HashMap| . . .","At a process block , the process  performance preference propagation policy of the class in the application is specified based on the set of at least one performance preference. This step is described in detail below with reference to the description of process block  in .","In step , the class is called to perform performance configuration of the application according to the performance preference propagation policy. This step will be described in detail below with reference to the description of step  in .","Another embodiment of the invention is described with reference to .  illustrates a process  for achieving a fine-grained performance configuration of an application according to another embodiment of the invention. At a process block , like the process block  in , at least one performance preference is set for a performance-sensitive class in the application.","At a process block , a propagation scope for the performance preference may also be set for the identified performance-sensitive class, for the at least one performance preference. The propagation scope of the performance preference may be specified by class libraries developers. For example, the scope may include global, class, method and instance from high level to low level. Scope represents a preference configuration performed on a different granularity for the whole application. According to one embodiment of the invention, preferences for a low level scope override those for a high level scope. Further, a more complex override scheme might be designed, for example, \u201cforce-global\u201d to force the global setting, etc. According to one embodiment of the invention, the propagation scope of a performance preference could include:\n\n","In a process block , a performance preference propagation policy of the class in the application is specified based on the at least one performance preference and the performance preference propagation scope.","For example, for ArrayList, could be defined as follows:","Global=Default","ClassA=Prefer Speed","MethodB=Prefer Memory","Then, in everywhere ArrayList is used in method B, size=2. In all methods of class A, size=128. In all other situations, size is globally defined as 16.","According to embodiments of the invention, the application developers may use different means to define the usage of ArrayList in the developer's own program. An example definition is as follows:\n\n",". . .\n\n","For example, in its own class, it is defined as follows:",{"@attributes":{"id":"p-0047","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@Prefer Speed"]},{"entry":[{},"public class Sample{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"@Prefer Memory"]},{"entry":[{},"public void methodA( ){"]},{"entry":[{},"..."]},{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":{"@attributes":{"id":"ul0009-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":"c) Performance preference propagation policy may be written in well-defined APIs, such that the application developers can set and change performance preference by calling these APIs."}}}},"Then, in a process block , the class is called to perform performance configuration according to the performance preference propagation policy.","Different manners of specifying policy results in different embodiments. Taking ArrayList as an example, parameters may be configured into ArrayList according to a different manner in the previous step. When the application is running, specific parameters may be used automatically according to context to set the used ArrayList. A possible implementation is to use an Instrumentation function of Java to modify binary code, and enable program to follow the defined rule at runtime. For example,","Configuration file or annotation is read, and information defined by the application developers is extracted. For example, a global setting of Prefer Memory, and MethodB needs to apply Prefer Speed.","MethodB is used as Instrumentation. Code is added in the forefront of the method, and then the previous setting is obtained\u2014Prefer Memory; and current setting is changed\u2014Preference=Preference Speed; and code is added in the end of the method to reset Preference to the previous setting, that is, it returns to Prefer Memory. When the application program is running, ArrayList is constructed initially according to the manner of Prefer Memory. Each time MethodB is encountered, Prefer Speed is automatically applied and a different ArrayList is constructed in this manner, thereby achieving fine-grained control.","Specific embodiment according to an embodiment of the invention is as follows.\n\n",". . .","According to another embodiment of the invention, when performance preference propagation policy is specified, the specified performance preference propagation policy may be associated with a performance environment where the application is at runtime, so as to adapt change of the performance environment where the application is at runtime. Thus, when the application is running, performance preference propagation policy associated with the performance environment is determined according to the performance environment where the application is running. When the application calls the class, the class is enabled to be performance-aware according to the performance preference propagation policy associated with the performance environment, thereby achieving the fine-grained performance configuration of application.",{"@attributes":{"id":"p-0055","num":"0080"},"figref":"FIG. 3","b":["300","300","302","306","308"]},"According to another embodiment of the invention, the performance preference setting means  may set the at least one performance preference by setting different parameter values.","According to another embodiment of the invention, the system  may further comprise a performance preference propagation scope setting means , and the performance preference propagation scope setting means  sets propagation scope of the at least one performance preference for at least one performance preference. Further, the performance preference propagation policy specifying means  further specifies performance preference propagation policy of the class in the application based on the propagation scope of the at least one performance preference.","According to another embodiment of the invention, the performance preference propagation policy may be associated with the performance environment where the application is at runtime.","According to another embodiment of the invention, the performance configuring means  further comprises: means configured to, according to performance environment where the application is running, determine performance preference propagation policy associated with the performance environment; and means configured to call the class based on the performance preference propagation policy associated with the performance environment.","According to another embodiment of the invention, the performance preference propagation policy specifying means  may write the performance preference propagation policy into one policy configuration file of the class.","According to another embodiment of the invention, the performance preference propagation policy specifying means  may write the performance preference propagation policy into code annotation parts of the application.","According to another embodiment of the invention, the performance preference propagation policy specifying means  may set the performance preference propagation policy utilizing predefined APIs.","According to another embodiment of the invention, the propagation scope of the performance preference comprises at least one of global scope, class scope, method scope, instance scope.","Although a tool class ArrayList in Java is used as an example to explain in the description, those skilled in the art should appreciate that, various embodiments of the invention can be applied not only to all Java class libraries and Java classes, but also can be used in object-oriented language class libraries and development kits such as C++, C# etc. and aren't limit to ArrayList described herein.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method, or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that may contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that may communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (\u201cLAN\u201d) or a wide area network (\u201cWAN\u201d), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","While the apparatus and method have been described in terms of what are presently considered to be the most practical and preferred embodiments, it is to be understood that the invention need not be limited to the disclosed embodiments. The invention is intended to cover various modifications and similar arrangements included within the spirit and scope of the claims, the scope of which should be accorded the broadest interpretation so as to encompass all such modifications and similar structures. The present invention includes any and all embodiments of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DRAWINGS","p":["The above-mentioned features of the present invention will become more apparent with reference to the following description taken in conjunction with the accompanying drawings wherein like reference numerals denote like elements and in which:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2","b":"200"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3","b":"300"}]},"DETDESC":[{},{}]}
