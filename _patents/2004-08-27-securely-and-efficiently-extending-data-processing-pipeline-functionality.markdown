---
title: Securely and efficiently extending data processing pipeline functionality
abstract: The present invention extends to methods, systems, and computer program products for securely and efficiently extending data processing pipeline functionality. Data processing agents register, potentially based solely on configuration data contained in the data processing agents, to manipulate data of a data processing pipeline. Configuration data can identify a specified event (e.g., an SMTP verb) the data processing agent is to hook into. Upon detection of a specified event, one or more agents that have registered for the specified event are loaded into secure zones. Process boundaries separate agents from one another and from other processes such that execution of each agent is isolated from other processes. Pipeline related data (e.g., electronic message data) is transferred to each loaded agent. Application Program Interfaces (“APIs”) can be used to transfer data between modules that implement embodiments of the present invention.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08037123&OS=08037123&RS=08037123
owner: Microsoft Corporation
number: 08037123
owner_city: Redmond
owner_country: US
publication_date: 20040827
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["Not applicable.","1. The Field of the Invention","The present invention relates to data processing and, more particularly, to securely and efficiently extending data pipeline processing functionality.","2. Background and Relevant Art","Computer systems and related technology affect many aspects of society. Indeed, the computer system's ability to process information has transformed the way we live and work. Computer systems now commonly perform a host of tasks (e.g., word processing, scheduling, and database management) that prior to the advent of the computer system were performed manually. More recently, computer systems have been coupled to one another and to other electronic devices to form both wired and wireless computer networks over which the computer systems and other electronic devices can transfer electronic data. As a result, many tasks performed at a computer system (e.g., voice communication, accessing electronic mail, controlling home electronics, Web browsing, and printing documents) include the exchange of electronic messages between a number of computer systems and\/or other electronic devices via wired and\/or wireless computer networks.","Networks have in fact become so prolific that a simple network-enabled computing system may communicate with any one of millions of other computing systems spread throughout the globe over a conglomeration of networks often referred to as the \u201cInternet\u201d. Such computing systems may include desktop, laptop, or tablet personal computers; Personal Digital Assistants (PDAs); telephones; or any other computer or device capable of communicating over a digital network.","In particular, electronic mail has become an important method for communicating. To create an electronic mail message, a sending user typically manipulates input devices, such as a keyboard and mouse, within an electronic mail application to enter data (e.g. text and attachments) into the electronic mail message. The sending user also typically includes an electronic mail address of a recipient user in the electronic message, for example, by entering text in the \u201cTo\u201d field. The sending user then sends the electronic mail message to the recipient user by selecting a \u201cSend\u201d control within the electronic mail application. Sending the electronic message can cause the electronic mail message to be routed from the sending user's computer system, through one or more intermediate mail servers, to a destination mail server that stores electronic mail messages for the recipient user (e.g., in accordance with the Simple Mail Transfer Protocol (\u201cSMTP\u201d). To view the electronic mail message, the recipient user establishes a connection from an electronic mail application (at the recipient user's computer system) to the receiving mail server (e.g., in accordance with the Post Office Protocol (\u201cPOP\u201d) or Internet Message Access Protocol (\u201cIMAP\u201d)).","At each mail server, the electronic message is transferred through a message processing pipeline. The message processing pipeline can include one or more modules that perform different actions to the electronic mail message and\/or in response to receiving the electronic message. For example, a message processing pipeline can establish an SMTP connection (in accordance with SMTP commands) to receive the electronic mail message, can perform one or more operations based on the contents of the electronic message (e.g., determine how to route the message based on the destination Internet Protocol (\u201cIP\u201d) address), and establish an SMTP connection in accordance with SMTP commands) to route the message towards a destination mails server. At a destination mail server, a message processing pipeline can also implement additional functionality, such as, for example, running mail rules against the electronic message and scanning the electronic mail message for malicious programs.","During message pipeline development, developers typically have access to tools that allow virtually any functionality to be built-into a message processing pipeline. For example, if standards for a protocol are updated, a message processing pipeline can be re-designed to implement the updated standards. Thus, during development, message processing pipelines can be developed to include the latest electronic messaging technology. Accordingly, newer versions of email server software can, from time to time, be released such that electronic mail users can benefit from advancements in messaging technology.","However, while email users may require and\/or desire a plethora of specialized features, email server software has been traditionally distributed as a \u201cone size fits all\u201d package. That is, electronic mail server software has been made available to computer users as a bundled package that includes all of the commands, features and formats of that specific system. Thus, when a user desires a specific command, function or format that is not included in the system package, for example, not included in a message processing pipeline, that user must frequently wait until the designer of the email server software includes the specialized feature in a newer version of the email package.","In the upgraded version, the new feature is generally bundled with a variety of other features. Thus, this traditional method for obtaining the desired feature forces users to upgrade the entire email server software package in order to pick up the incremental feature, and frequently requires users to receive features that are not desired or needed simply because they were bundled with the desired feature. This process of needing to upgrade the system in order to obtain a desired feature results in the consumption of large amounts of money and\/or storage space for individuals and businesses.","Unfortunately, after email server software is released, it is difficult, if not impossible, to securely extend the functionality of the email server software. Users with significantly advanced technical skills may, to some extent, be able to design add-on modules to interact with the email server software, for example to interact with a message processing pipeline. However, there is now way to insure that an add-on module will appropriately interact with the email server software or that a designed module is not malicious (e.g., contains a Trojan Horse, virus, etc.). Thus, execution of an add-on module can, either intentionally or unintentionally, cause a message processing pipeline or other emails server software modules to fail. Accordingly, end-users may choose not to utilize add-on modules and may instead wait for the next version of the email server software.","Further, even if an add-on module is designed to appropriately interact with a message processing pipeline, installation of the add-on module may be difficult. For example, a user may be required to manipulate configuration settings of the email server software and run a number of patch programs to install the add-on module. Thus, installing an add-on module can be time consuming and many email users may lack required technical skills for performing such an installation. Further, it may be difficult, even for a technically proficient user, to identify the configuration settings that require manipulation and to identify the required patch programs.","Further, the inability to easily extend the functionality email server software, can prevent end-users from customizing a message processing pipeline to meet their particular needs. For example, a corporation may desire to extend message processing pipeline functionality to insure that electronic mail messages transferred through the message processing pipeline conform with unique corporate policies. However, since this functionality is limited to a small subset of customers (or single customer), it may be difficult to get the message processing pipeline developer to implement such functionality. Thus, the corporation may simply have no way to enforce the unique corporate polices on electronic mail messages (or is at least forced to wait for a newer version of the message processing pipeline). Therefore systems, methods, and computer program products that facilitate securely and efficiently extending data processing pipeline functionality would be advantageous.","The foregoing problems with the prior state of the art are overcome by the principles of the present invention, which are directed towards methods, systems, and computer program products for securely and efficiently extending data processing pipeline functionality. In some embodiments, a data processing agent registers to manipulate data of a data processing pipeline. A computer system receives a self-contained assembly that contains instructions for implementing a data processing agent and that contains configuration data indicating how the data processing agent is to be configured. For example, the configuration data can identify a specified event the data processing agent is to hook into. The computer system stores the assembly at a specified location. The computer system detects an occurrence of an event and determines that the specified event is the detected event. The computer system is configured to implement the data processing agent in accordance with the contained configuration data. The computer system loads the data processing agent such that the instructions can be executed to manipulate data related to the detected event in accordance with the contained configuration data.","In other embodiments, the functionality of a data processing pipeline is extended. A computer system detects an occurrence of an event. The computer system determines that one or more data processing agents have registered for the detected event. The computer system loads each of the one or more data processing agents into a secure zone such that execution of each data processing agent is isolated from execution all other data processing agents. The computer system maps the detected event to a corresponding handler at each of the one or more data processing agents. The computer system transfers pipeline related data to each corresponding handler such that the one or more data processing agents can process the pipeline related data.","Application Program Interfaces (\u201cAPIs\u201d) can be used transfer data between modules that implement embodiments of the present invention. An Initialize API can be used to transfer a Server value, Configuration Setting values, and an Agent Group value, to computer-executable instructions for initializing an instance of an agent runtime engine. An Invoke API can be used to transfer an Execution Context value, an Event Identifier value, and List of Other Context values, to computer-executable instructions for invoking agents corresponding to an event. An Asynchronous Invoke API can be used to transfer an Execution Context value, an Event Identifier value, a Time Out value, a Callback value, a State Value, and List of Other Context values, to computer-executable instructions for a asynchronously invoking an agent corresponding to an event. An Event Handler API can be used to transfer an Event Source value and Event Argument values, to computer-executable instructions for executing a specified agent handler.","These and other objects and features of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","The principles of the present invention provide for securely and efficiently extending data processing pipeline functionality. In some embodiments, a data processing agent registers to manipulate data of a data processing pipeline. A computer system receives a self-contained assembly that contains instructions for implementing a data processing agent and that contains configuration data indicating how the data processing agent is to be configured. For example, the configuration data can identify a specified event the data processing agent is to hook into. The computer system stores the assembly at a specified location. The computer system detects an occurrence of an event and determines that the specified event is the detected event. The computer system is configured to implement the data processing agent in accordance with the contained configuration data. The computer system loads the data processing agent such that the instructions can be executed to manipulate data related to the detected event in accordance with the contained configuration data.","In other embodiments, the functionality of a data processing pipeline is extended. A computer system detects an occurrence of an event. The computer system determines that one or more data processing agents have registered for the detected event. The computer system loads each of the one or more data processing agents into a secure zone such that execution of each data processing agent is isolated from execution all other data processing agents. The computer system maps the detected event to a corresponding handler at each of the one or more data processing agents. The computer system transfers pipeline related data to each corresponding handler such that the one or more data processing agents can process the pipeline related data.","Application Program Interfaces (\u201cAPIs\u201d) can be used transfer data between modules that implement embodiments of the present invention. An Initialize API can be used to transfer a Server value, Configuration Setting values, and an Agent Group value, to computer-executable instructions for initializing an instance of an agent runtime engine. An Invoke API can be used to transfer an Execution Context value, an Event Identifier value, and List of Other Context values, to computer-executable instructions for invoking agents corresponding to an event. An Asynchronous Invoke API can be used to transfer an Execution Context value, an Event Identifier value, a Time Out value, a Callback value, a State Value, and List of Other Context values, to computer-executable instructions for a asynchronously invoking an agent corresponding to an event. An Event Handler API can be used to transfer an Event Source value and Event Argument values, to computer-executable instructions for executing a specified agent handler.","Embodiments within the scope of the present invention include computer-readable media for carrying or having computer-executable instructions or data structures stored thereon. Such computer-readable media may be any available media, which is accessible by a general-purpose or special-purpose computer system. By way of example, and not limitation, such computer-readable media can comprise physical storage media such as RAM, ROM, EPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other media which can be used to carry or store desired program code means in the form of computer-executable instructions, computer-readable instructions, or data structures and which may be accessed by a general-purpose or special-purpose computer system.","In this description and in the following claims, a \u201cnetwork\u201d is defined as one or more data links that enable the transport of electronic data between computer systems and\/or modules. When information is transferred or provided over a network or another communications connection (either hardwired, wireless, or a combination of hardwired or wireless) to a computer system, the connection is properly viewed as a computer-readable medium. Thus, any such connection is properly termed a computer-readable medium. Combinations of the above should also be included within the scope of computer-readable media. Computer-executable instructions comprise, for example, instructions and data which cause a general-purpose computer system or special-purpose computer system to perform a certain function or group of functions. The computer executable instructions may be, for example, binaries, intermediate format instructions such as assembly language or intermediate language, or even source code.","In this description and in the following claims, a \u201ccomputer system\u201d is defined as one or more software modules, one or more hardware modules, or combinations thereof, that work together to perform operations on electronic data. For example, the definition of computer system includes the hardware components of a personal computer, as well as software modules, such as the operating system of the personal computer. The physical layout of the modules is not important. A computer system may include one or more computers coupled via a network. Likewise, a computer system may include a single physical device (such as a mobile phone or Personal Digital Assistant \u201cPDA\u201d) where internal modules (such as a memory and processor) work together to perform operations on electronic data.","Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations, including, personal computers, laptop computers, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, mobile telephones, PDAs, pagers, and the like. The invention may also be practiced in distributed system environments where local and remote computer systems, which are linked (either by hardwired data links, wireless data links, or by a combination of hardwired and wireless data links) through a network, both perform tasks. In a distributed system environment, program modules may be located in both local and remote memory storage devices.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1","b":["100","100","102","103","104","102","103","104","102","103","104","106","107","102","103","104"]},"As depicted in computer architecture , computer system  includes data pipeline , runtime container , and storage . Data pipeline  includes one or more data processing modules, such as, for example, pipeline modules , , and  that are configured to perform operations on message related data. Generally, an electronic message is (e.g., message ) is received at one end of data pipeline  and corresponding message related data (e.g., the contents of message ) is processed at each pipeline module.","For example, message  can be received at a first pipeline module (e.g., pipeline module ), the first pipeline module can perform some message related processing (including the issuing of events), and message  can them be transferred to the next pipeline module (e.g., pipeline module ). The next pipeline module can perform some message related processing (including the issuing of events), and message  can them be transferred to the next pipeline module. A horizontal series of three periods (an ellipsis) before, after, and between the expressly depicted pipeline modules , , and , indicates that one or more other pipeline modules can be included in data pipeline  before and\/or after and\/or between pipeline modules , , and . Processing implementing in pipeline components can modify an accessed message, for example, message \u2032 indicates that the processed message can differ from message .","Runtime container  includes event mapping module , diagnostic module , control module , control data , dispatcher , and context provider . Generally, event mapping module  interoperates with control module  and context provider  to provide dispatcher  the appropriate data for loading a data processing agent. Event mapping module  can monitor data pipeline  for the occurrence of events (e.g., issued form a pipeline module). When the occurrence of an event is detected, event mapping module  maps the event to the appropriate agent handlers. Event mapping can facilitate optimized execution of only appropriate agents that match an event. Event mapping module  can be configured in accordance with control data . Control data  can include data for configuring event mapping module  to store and read information related to specified data processing operations.","Control module  can enforce security and control restrictions on the execution of a data processing agent. For example, control module  can facilitate agent monitoring and assign agents to appropriate security zones or levels. Control module  can prevent unauthorized agent access to resources of computer system . For example, control module  can prevent an agent for utilizing memory outside an allocated range of memory.","Context provider  maps incoming message related data (e.g., contained in message ) to a consistent internal data representation. Context provider  can thus provide a consistent view of message related data processed in pipeline , that is in compatible format for data processing agents. Providing a consistent view of message related data facilitates more efficient security checks. For example, control module  can be designed to process message related data that is presented in the consistent internal data representation.","Dispatcher  can install agents (e.g., from storage ) into the memory of computer system . Dispatcher  can securely install agents in accordance with control and security restrictions imposed by control module . Dispatcher  can also pass the correct interfaces (e.g., APIs) to loaded agents.","Diagnostic module  can include one more modules for obtaining and storing diagnostic information related to agent execution. For example, diagnostic module  can include a Quality of Server (\u201cQoS\u201d) module, a logging module, and a monitor module. A QoS module can facilitate monitoring resource (e.g., CPU, disk space, threads, etc.) usage of each installed agent. Thus, the QoS module can prevent an agent from causing resource shortages or from lowering the quality of computer system . A logging module can be utilized by agents or event mapping module  to log information for troubleshooting or other purposes. An agent monitor can be used by external processes or components to access modules in runtime container  for management purpose and to obtain state information. For example, through a user-interface of the agent monitor an administrator can monitor and manage modules contained in runtime container .","Storage  can store one or more agents (e.g., agents , , ) that were copied from external locations (e.g., from other computer systems) to storage . A vertical series of three periods (a vertical ellipsis) before, after, and between the expressly depicted agents , , and , indicates that one or more other agents, in addition to agents , , and , can be stored in storage .","Generally, as depicted by the dashed lines runtime container , data pipeline , and agent container  are isolated from one another by process boundaries ,  and  respectively. Thus, modules contained in runtime container , data pipeline , and agent container  are also isolated from one another and from other process of computer system . Generally, a process boundary prevents resources allocated to a process from interacting with other processes. Operating system (\u201cOS\u201d) process boundaries and Common Language Runtime (\u201cCLR\u201d) domains (or CLR processes) are examples of process boundaries. However, process boundaries can be implemented using a variety of mechanisms and embodiments of the present invention are not limited to any particular process boundary implementation.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3","b":["300","300","100"]},"Method  includes an act of receiving a self-contained assembly that contains instructions for implementing a data processing agent and that contains configuration data indicating how the data processing agent is to be configured (act ). Configuration data can identify a specified event the data processing agent is to hook into. For example, agent  can be transferred form an external location to computer system . Agent  includes configuration data  and executable instructions . Configuration data  can include metadata that indicates how agent  is to be configured and\/or installed, including identifying one or more events agent  is to hook into. Executable instructions  can include intermediate language instructions (e.g., compiled from source code of a common language runtime (\u201cCLR\u201d) language, such as, for example, C++, C#, Visual Basic, etc.) for processing message related data.","Since agent  contains configuration data  there is little, if any, need for maintaining additional external configuration files data. Thus, agents are essentially self-configuring and installing. Accordingly, agents can be installed more efficiently and may be compatible in a variety of different computing environments.","Method  includes an act of storing the assembly at a specified location (act ). For example, agent  can be stored at storage . Method  includes an act of detecting the occurrence of an event (act ). For example, as message  is transferred through data pipeline , one or more of the corresponding pipelines modules (e.g., pipeline modules , , and ) may issue events. Event mapping module  can detect the occurrence of an event and pass an indication of the event to dispatcher .","Method  includes an act of determining that the detected event is the specified event (act ). For example, when dispatcher  receives an indication of an event, dispatcher  can scan storage  to identify agents that are to hook into the detected event. Dispatcher  can scan configuration data (e.g., metadata) contained in each stored agent and, based (potentially solely) on the configuration data, determine if an agent is to hook into the detected event.","In may be that each detected event is mapped to a specified topic string (either by event mapping module  or dispatcher ). Agent developers can include specified topic strings within an agent (e.g., in metadata) to indicate one or more events the agent is to hook into. For example, the topic string \u201cOnSessionStartEvent\u201d to represent an event indicating the start of an SMTP session. Other topic strings, such as, for example, \u201cOnDataCommand\u201d, \u201cOn EhloCommand\u201d, \u201cOnEndOfData\u201d, \u201cOnEndOfHeaders\u201d, \u201cOnHeloCommand\u201d, \u201cOnHelpCommand\u201d, \u201cOnMailCommand\u201d, \u201cOnNoopCommand\u201d, \u201cOnRcptCommand\u201d, \u201cOnReject\u201d, \u201cOnRsetCommand\u201d, \u201cOnSessionStopEvent\u201d, \u201cOnCategorization\u201d, \u201cOnDeleteMailItem\u201d, \u201cOnPostCategorization\u201d, \u201cOnSubmit\u201d, \u201cOnPerRecipient\u201d, \u201cOnAuthCommand\u201d, can also be used to represent a corresponding event indicating or related to other (e.g., required, optional, or vendor specific) SMTP commands (e.g., verbs or keywords). Other topic strings can be used to represent Extended Simple Mail Transfer Protocol (\u201cESMTP\u201d) keywords and verbs. Additional topic strings can be used to represent other events issued by pipeline modules of data pipeline .","Thus, dispatcher  can scan configuration data contained in stored agents to identify topic strings contained in agents and determine if identified topic strings match the topic string corresponding to a detected event. A match indicates to dispatcher  that an agent containing the topic string is to hook into the detected event.","Method  includes an act of configuring the computer system to implement the data processing agent in accordance with the contained configuration data in response to the determination (act ). For example, control module , event mapping module , and dispatcher  can configure computer system  to implement agent  in accordance with configuration data . Configuring computer system  can include allocating system resources (e.g., system memory and process resources) for use by agent .","Method  includes an act of loading the data processing agent such that the instructions can be executed to manipulate data related to the detected event in accordance with the contained configuration data (act ). For example, dispatcher  can load agent  into the system memory of computer system . Agent container  logical represents that agent  is restricted to accesses only specifically allocated system resources. Dispatcher  can interact with control module , through event mapping module , to appropriately allocate resources to agent . For example, agent container  can limit agent  to specified portions of memory and CPU resources. The resources of container  can be isolated form other processes running at computer system  such that inappropriate operation by agent  does not interrupt other processes or cause other processes to fail. The security and control associated with agent container  can be dictated by control module .","Accordingly, agents can be efficiently and securely loaded without reference to external consideration files.","Referring now to ,  illustrates an example of a computer architecture  that facilitates extending the functionality of a data processing pipeline. As depicted in computer architecture , data pipeline  includes one or more data processing modules, such as, for example, pipeline modules , , , and  that are configured to perform some function related to accessed message related data. Generally, an electronic message is (e.g., message ) is received at one end of data pipeline  and corresponding message related data is processed at each pipeline module.","For example, message  can be received at a first pipeline module (e.g., pipeline module ), the first pipeline module can perform some message related processing (including the issuing of events), and message  can then be transferred to the next pipeline module (e.g., pipeline module ). The next pipeline module can perform some message related processing (including the issuing of events), and message  can them be transferred to the next pipeline module. A horizontal series of three periods (an ellipsis) before, after, and between the expressly depicted pipeline modules , , , and  indicates that one or more other pipeline modules can be included in data pipeline  before and\/or after and\/or between pipeline modules , , , and . Pipeline components can modify a received message, for example, message \u2032 indicates that the processed message can differ from message .","Pipeline modules , , , and  can each be configured to issue one or more events related to processing a message. For example, pipelines modules , , , and  can issue events  through , , , and  and  respectively. The ellipsis between event  and event  indicates that one or more other events can be issued by pipeline module . Each of the events may be related to establishing a connection (e.g., an SMTP connection) for receiving\/sending an electronic message or performing other operations on message related data (e.g., scanning for Viruses, categorization, forwarding, etc.). Events can also be user-defined and\/or vendor specific for performing specified messaging operations. Agent runtime engine  can monitor data pipeline  for events and can load appropriate agents in response to detected events.","Runtime container  includes agent runtime engine . Agent runtime engine  can include one or more of the modules included in runtime container . Accordingly, agent runtime engine  can load agents, intercept invents, and transfer appropriate message related data to agents.","Storage  can store one or more agents (e.g., agents , , ) that were copied from external locations (e.g., from other computer systems) to storage . A vertical series of three periods (a vertical ellipsis) before, after, and between the expressly depicted agents , , and , indicates that one or more other agents, in addition to agents , , and , can be stored in storage . Each agent stored at storage , can include one or more handlers corresponding to one or more events. Thus, it may be that an agent is configured to perform plurality of different actions related to a corresponding plurality of different events. For example, an agent can include a handler for performing an action related to the SMTP HELO verb and also include a handler for performing an action related to the SMTP AUTH verb. Accordingly, the agent may be loaded upon the occurrence of an event related to the HELO or AUTH verbs.","As depicted in computer architecture , agents , , and  have been loaded into corresponding agent containers , , and  respectively. Each of the agents may have a handler that corresponds to a detected event. For example, handlers , , and  may correspond to event .","Generally, as depicted by the dashed lines, agent containers , , and  are isolated from one another as well as from runtime container  and data pipeline  by corresponding process boundaries , , , , and  respectively. Each agent container , , and  can be allocated specified resources (e.g., memory, CPU, storage, etc) that are not used by other processes. Thus, if an agent malfunctions, there is a reduced likelihood of the malfunction adversely affecting other agents, agent runtime engine , or any pipeline modules and vice versa. For example, while a malfunction of agent  may corrupt resources allocated to agent container , it is unlikely the malfunction of agent  would corrupt resources in agent container , agent container , runtime container , or data pipeline . A control module (e.g., control module ) can dictate resource allocation and establish process boundaries for agents.","Agent runtime engine  can also inject events back into data pipeline. Injected events can cause pipeline modules to perform operations on message related data. In some embodiments, agent runtime engine  injects events in response to a previously received event. For example, agent runtime engine  can inject event  in response to receiving event . In other embodiments, agent runtime engine  injects events in response to results from an agent. For example, agent runtime engine  can inject event  in response to results . Thus, either agent runtime engine  or an agent can cause an event to be injected into data pipeline .",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 4","b":["400","400","200"]},"Method  includes an act of detecting an occurrence of an event (act ). For example, agent runtime engine  can detect an occurrence of one of the events,  through , , , and  and . Method  includes an act of determining that one or more data processing agents have registered for the detected event (act ). For example, agent runtime engine  can scan configuration data contained in agents stored at storage . When contained configuration data indicates that an agent is to hook into the detected event (e.g., when topic strings match), the agent is loaded.","Method  includes an act of loading each of the one or more data processing agents into a secure zone (act ). Loading agents into secure zones causes the execution of each data processing agent to be isolated from execution all other data processing agents. For example, runtime agent engine  can issue invocation data  that causes agents , , and  to be loaded into corresponding agent containers , , and  respectively. Process boundaries , , and  isolate agents ,  and  from one another. As previously described, a control module (e.g., control module ) can dictate resources that are allocated to agent containers.","Invocation data  includes execution context , event ID , and context list , which can each include one or more name\/value pairs. Invocation data  is utilized to appropriately load registered agents. For example, execution context  can include a value created by agent runtime engine  to keep track of per session information related to loaded agents. Event ID  can include a value (e.g., a topic string) indicating the type of the detected event. Context list  contains a list of data and\/or objects from data pipeline .","Method  includes an act of mapping the detected event to a corresponding handler at each of the one or more data processing agents (act ). For example, agent runtime engine  can map a detected occurrence of one of the events  through , , , and  and  to a handler at each loaded agent (e.g., to handlers , , and ). An event mapping module (e.g. event mapping module ) can interoperate with a dispatcher (e.g., dispatcher ) to appropriately map an event.","Method  includes an act of transferring pipeline related data to each corresponding handler such that the one or more data processing agents can process the pipeline related data (act ). For example, agent runtime engine  can transfer agent data  to handlers , , and . Agent data  includes event source ID  and event data , which can each include one or more name\/value pairs. Event source ID  can include a value (e.g., a topic string) indicating the type of the detected event. Event data  can include one or more portions of message related data (e.g., the contents or headers of message ) that are used as processing input for loaded agents.","Accordingly, pipeline functionality is efficiently and securely extended.","Agents can return processing results (e.g., categorizing an electronic mail message, appending disclaimers to messages, indicates of viruses, etc). For example, agents  and  can return corresponding results  ad  respectively to agent runtime engine . In response to receiving results  and\/or  agent runtime  can inject event  into data pipeline .","Application Program Interfaces (\u201cAPIs\u201d) can be used transfer data between modules that implement embodiments of the present invention.  depicts some of the APIs that can be used. API  generally represents an Initialize API for initializing an agent runtime engine. API  can be used to transfer a server identifier specifying a server object that is to be associated with the agent runtime engine, a configuration file identifier specifying a configuration file having configuration data for initializing the agent runtime engine, and an agent group identifier specifying a portion of the configuration file. The transferred server identifier, configuration file identifier, and agent group identifier can be supplied as input to computer executable-instructions that initialize an agent runtime engine (e.g., agent runtime engine ). More specifically, an Initialize API can be of the format:",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/\/ Initializes the agent runtime instance."]},{"entry":[{},"\/\/\/ <param name=\u201cserver\u201d>"]},{"entry":[{},"\/\/\/ Specifies a server object the agent runtime is associated with."]},{"entry":[{},"\/\/\/ <\/param>"]},{"entry":[{},"\/\/\/ <param name=\u201cconfigFile\u201d>"]},{"entry":[{},"\/\/\/ Specifies a configuration file."]},{"entry":[{},"\/\/\/ <\/param>"]},{"entry":[{},"\/\/\/ <param name=\u201cagentGroup\u201d>"]},{"entry":[{},"\/\/\/ Specifies an agent group section id in the configuration file."]},{"entry":[{},"\/\/\/ <\/param>"]},{"entry":[{},"void Initialize(IServer server, string configFile, string agentGroup)"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003\/\/\/computer-executable instructions for initializing an agent"]},{"entry":[{},"\u2003\u2003runtime engine"]},{"entry":[{},"\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Where a sequence of three \u2018\/\u2019s indicate a comment. An IServer data type can include data fields (e.g., of a data structure) for identifying a server object.","API  generally represents an Invoke API for invoking agents. API  can be used to transfer an execution context to keep track of per session information related to agents, an Event topic (e.g., a topic string) denoting a type of event, and a context list including a list of data and\/or objects in a data processing pipeline. The transferred execution context, event topic, and context list can be supplied as input to computer executable-instructions that invoke an agent (e.g., agents , , and ). More specifically, an Invoke API can be of the format:",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/\/ Invoke agent runtime to execute agent handlers with the specific topic"},{"entry":"\/\/\/ <param name=\u201cexecutionContext\u201d>"},{"entry":"\/\/\/ an execution context object"},{"entry":"\/\/\/ <\/param>"},{"entry":"\/\/\/ <param name=\u201ceventTopic\u201d>"},{"entry":"\/\/\/ a string to denote the type of event"},{"entry":"\/\/\/ <\/param>"},{"entry":"\/\/\/ <param name=\u201ccontexts\u201d>"},{"entry":"\/\/\/ a list of contexts"},{"entry":"\/\/\/ <\/param>"},{"entry":"InvokeStatusCode Invoke(IExecutionContext executionContext,"},{"entry":"\u2003\u2003\u2003string eventTopic,"},{"entry":"\u2003\u2003\u2003params object[ ] contexts)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/\/computer-executable instructions for agent runtime to execute agent"},{"entry":"\u2003\u2003\/\/\/handlers with the specific topic"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"An IExecutionContext data type can include data fields for identifying an execution context. An execution context can be created by an agent runtime to keep track of per session information related to agents. A context list can include or identify data or objects from a data processing pipeline (e.g., SmtpCommand, SmtpResponse etc.)","API  generally represents an Asynchronous Begin Invoke API for asynchronous invoking agents to execute agent handlers with a specific topic. API  can be used to transfer an execution context to keep track of per session information related to agents, an event topic (e.g., a topic string) denoting a type of event, a time out value indicating when to terminate waiting for a response, a callback indicating an object to be called when the read is complete, state distinguishing an asynchronous read request for other read requests, and a context list including a list of data and\/or objects in a data processing pipeline. The transferred execution context, event topic, time out value, callback, state, and context list can be supplied as input to computer-executable instructions that asynchronously invoke an agent (e.g., agents , , and ) with a specific topic. More specifically, an Asynchronous Begin Invoke API can be of the format:",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/\/ Begins an asynchronous invoke operation to execute agent"},{"entry":"handlers with a specific"},{"entry":"\/\/\/ topic."},{"entry":"\/\/\/ <param name=\u201cexecutionContext\u201d>"},{"entry":"\/\/\/ an execution context object"},{"entry":"\/\/\/ <\/param>"},{"entry":"\/\/\/ <param name=\u201ceventTopic\u201d>"},{"entry":"\/\/\/ a string to denote if the type of event"},{"entry":"\/\/\/ <\/param>"},{"entry":"\/\/\/ <param name=\u201cmillisecondsTimeout\u201d>"},{"entry":"\/\/\/ a timeout value in milliseconds"},{"entry":"\/\/\/ <\/param>"},{"entry":"\/\/\/ <param name=\u201ccallback\u201d>"},{"entry":"\/\/\/ An optional asynchronous callback, to be called when the"},{"entry":"\/\/\/ read is complete."},{"entry":"\/\/\/ <\/param>"},{"entry":"\/\/\/ <param name=\u201cstate\u201d>"},{"entry":"\/\/\/ A user-provided object that distinguishes this particular"},{"entry":"\/\/\/ asynchronous read request from other requests."},{"entry":"\/\/\/ <\/param>"},{"entry":"\/\/\/ <param name=\u201ccontexts\u201d>"},{"entry":"\/\/\/ a list of contexts"},{"entry":"\/\/\/ <\/param>"},{"entry":"IAsyncResult BeginInvoke(IExecutionContext executionContext,"},{"entry":"\u2003\u2003\u2003string eventTopic,"},{"entry":"\u2003\u2003\u2003int millisecondsTimeout,"},{"entry":"\u2003\u2003\u2003AsyncCallback callback,"},{"entry":"\u2003\u2003\u2003object state,"},{"entry":"\u2003\u2003\u2003params object[ ] contexts)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/\/computer-executable instructions for asynchronously invoking"},{"entry":"\u2003\u2003an agent"},{"entry":"\u2003\u2003\/\/\/with a specific topic"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"An AsyncCallback data type can include data fields for identifying an object that is to be called back when the read is complete. An object data type can include data fields for distinguishing a read request form other read requests.","API  generally represents a Handler API for calling an agent handler. API  can be used to transfer an event source identifier (e.g., the SMTP verb that caused the event) and event data (e.g., message related data) to be processed by the handler. The transferred event source identifier and event data can be supplied as input to computer-executable instructions that call an agent handler (e.g., handlers , , , and ). More specifically, a Handler API can be of the format:",{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/\/ AuthCommandEvent delegate"},{"entry":"public delegate void AuthCommandEventHandler("},{"entry":"\u2003ReceiveCommandEventSource source,"},{"entry":"\u2003Smtp.AuthCommandEventArgs e)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003\/\/\/computer-executable instructions for calling an Authorization"},{"entry":"\u2003\u2003Command"},{"entry":"\u2003\u2003\/\/\/event handler"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A ReceiveCommandEventSource data type can include data fields for identifying the source of an event (e.g., an SMTP SESSION verb) and, in this example API, a Smtp.AuthCommandEventArgs data type includes data fields for data related to the SMTP AUTH verb. However, other data types, such as, for example, Smtp.DataCommandEventArgs, Smtp.EhloCommandEventArgs, Smtp.EndOfDataEventArgs, Smtp.EndOfHeadersEventArgs, Smtp.HeloCommandEventArgs, Smtp.HelpCommandEventArgs, Smtp.MailCommandEventArgs, Smtp.NoopCommandEventArgs, Smtp.RcptCommandEventArgs, Smtp.RejectEventArgs, Smtp.RsetCommandEventArgs, can be used to transfer data related to other corresponding SMTP verbs or keywords. Additionally, other data types can be used to transfer data related to ESMTP verbs and keywords and other events in a data processing pipeline.","It should be understood that the expressly described APIs, data, and data types are merely examples of some of the APIs, data, and data types that can be used to implement the present invention. It would be apparent to one skilled in the art, after having reviewed this description, that other APIs and\/or data and\/or data types, in addition to those expressly described, can be used to implement the present invention. For example, other data types can include integers, floating point, hexadecimal, octal, binary, logical, character, or even user-defined data structures.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 6","FIG. 6"]},"With reference to , an example system for implementing the invention includes a general-purpose computing device in the form of computer system , including a processing unit , a system memory , and a system bus  that couples various system components including the system memory  to the processing unit . Processing unit  can execute computer-executable instructions designed to implement features of computer system , including features of the present invention. The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (\u201cROM\u201d)  and random access memory (\u201cRAM\u201d) . A basic input\/output system (\u201cBIOS\u201d) , containing the basic routines that help transfer information between elements within computer system , such as during start-up, may be stored in ROM .","The computer system  may also include magnetic hard disk drive  for reading from and writing to magnetic hard disk , magnetic disk drive  for reading from or writing to removable magnetic disk , and optical disk drive  for reading from or writing to removable optical disk , such as, or example, a CD-ROM or other optical media. The magnetic hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by hard disk drive interface , magnetic disk drive-interface , and optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-executable instructions, data structures, program modules, and other data for the computer system . Although the example environment described herein employs magnetic hard disk , removable magnetic disk  and removable optical disk , other types of computer readable media for storing data can be used, including magnetic cassettes, flash memory cards, digital versatile disks, Bernoulli cartridges, RAMs, ROMs, and the like.","Program code means comprising one or more program modules may be stored on hard disk , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into computer system  through keyboard , pointing device , or other input devices (not shown), such as, for example, a microphone, joy stick, game pad, scanner, or the like. These and other input devices can be connected to the processing unit  through input\/output interface  coupled to system bus . Input\/output interface  logically represents any of a wide variety of different interfaces, such as, for example, a serial port interface, a PS\/2 interface, a parallel port interface, a Universal Serial Bus (\u201cUSB\u201d) interface, or an Institute of Electrical and Electronics Engineers (\u201cIEEE\u201d) 1394 interface (i.e., a FireWire interface), or may even logically represent a combination of different interfaces.","A monitor  or other display device is also connected to system bus  via video interface . Other peripheral output devices (not shown), such as, for example, speakers and printers, can also be connected to computer system .","Computer system  is connectable to networks, such as, for example, an office-wide or enterprise-wide computer network, a home network, an intranet, and\/or the Internet. Computer system  can exchange data with external sources, such as, for example, remote computer systems, remote applications, and\/or remote databases over such networks.","Computer system  includes network interface , through which computer system  receives data from external sources and\/or transmits data to external sources. As depicted in , network interface  facilitates the exchange of data with remote computer system  via link . Network interface  can logically represent one or more software and\/or hardware modules, such as, for example, a network interface card and corresponding Network Driver Interface Specification (\u201cNDIS\u201d) stack. Link  represents a portion of a network (e.g., an Ethernet segment), and remote computer system  represents a node of the network.","Likewise, computer system  includes input\/output interface , through which computer system  receives data from external sources and\/or transmits data to external sources. Input\/output interface  is coupled to modem  (e.g., a standard modem, a cable modem, or digital subscriber line (\u201cDSL\u201d) modem) via link , through which computer system  receives data from and\/or transmits data to external sources. As depicted in , input\/output interface  and modem  facilitate the exchange of data with remote computer system  via link . Link  represents a portion of a network and remote computer system  represents a node of the network.","While  represents a suitable operating environment for the present invention, the principles of the present invention may be employed in any system that is capable of, with suitable modification if necessary, implementing the principles of the present invention. The environment illustrated in  is illustrative only and by no means represents even a small portion of the wide variety of environments in which the principles of the present invention may be implemented.","In accordance with the present invention, modules including control modules, diagnostic modules, dispatchers, event mapping modules, context provider modules, agents, agent handlers, agent runtime engines, and pipeline modules as well as associated data, including electronic messages, events, control data, agents, invocation data, agent data, and results can be stored and accessed from any of the computer-readable media associated with computer system . For example, portions of such modules and portions of associated program data may be included in operating system , application programs , program modules  and\/or program data , for storage in system memory .","When a mass storage device, such as, for example, magnetic hard disk , is coupled to computer system , such modules and associated program data may also be stored in the mass storage device. In a networked environment, program modules depicted relative to computer system , or portions thereof, can be stored in remote memory storage devices, such as, system memory and\/or mass storage devices associated with remote computer system  and\/or remote computer system . Execution of such modules may be performed in a distributed environment as previously described.","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["To further clarify the above and other advantages and features of the present invention, a more particular description of the invention will be rendered by reference to specific embodiments thereof which are illustrated in the appended drawings. It is appreciated that these drawings depict only typical embodiments of the invention and are therefore not to be considered limiting of its scope. The invention will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
