---
title: Context managing mobile computing framework for enterprise application
abstract: A framework for handheld computing devices comprises a user interface controlling the display, selection and launching of program modules, controls patient context within the program modules, and provides for messaging and sharing of databases between and among program modules. Databases are shared between the program modules by the publishing of XML and metadata identifying the structure of the databases.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08027848&OS=08027848&RS=08027848
owner: Patient Keeper, Inc
number: 08027848
owner_city: Waltham
owner_country: US
publication_date: 20021231
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION(S)","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation-in-part of U.S. application Ser. No. 10\/238,841, filed Sep. 9, 2002 now abandoned, which was a continuation of U.S. application Ser. No. 10\/118,592, filed Apr. 8, 2002 now abandoned, which claims the benefit of U.S. Provisional Application No. 60\/282,249, filed on Apr. 6, 2001 and to U.S. Provisional Application No. 60\/282,131, filed on Apr. 6, 2001.","The entire teachings of the above applications are incorporated herein by reference.","This application relates generally to handheld computer devices and more specifically to a framework for handheld computer devices used in the health care industry.","In the health care industry, health care providers have become increasingly dependent on the use of computer systems and software to keep track of all aspects of patient data, including clinical, administrative and billing information. In the mid-1990's, CCOW (Clinical Context Object Workgroup) was developed to help aid health care providers manage patient data. The CCOW standard, now the ANSI approved Health Level 7 Context Management Standard version 1.4, establishes the basis for ensuring secure and consistent access to patient information from heterogeneous sources through synchronizing and coordinating applications\u2014such as those used for patient registration, order entry and results reporting\u2014so that they instinctively follow a specific context, including the identity of a user, a patient or a specific clinical observation. CCOW-compliant applications coordinate with each other via a behind-the-scenes context manager that enables them to work together in ways that behave like a single system from the health care provider's perspective.","In more recent years, health care providers have begun to use handheld computing devices and software, such as that offered by PatientKeeper, Inc., to keep track of patient data. The PatientKeeper systems are described in U.S. patent application Ser. No. 09\/356,543, titled \u201cDevice for Automating Billing Reimbursement,\u201d by inventors Matthew D. Barnhart, Stephen S. Hau, Yuri Ostrovsky and MinPont Chien, filed on Jul. 19, 1999 and U.S. patent application Ser. No. 09\/356,751, titled \u201cSystem for Automating Billing Reimbursement,\u201d by inventors Matthew D. Barnhart, Stephen S. Hau, Patrick McCormick, George A. Madrid, Craig A. Fields and Sanjay S. Vakil, filed on Jul. 19, 1999, the teachings of which are incorporated herein by reference.","In a typical health care environment, a hospital, for example, doctors will carry a handheld device with them as they treat patients. As tests are performed, diagnoses made, and treatment administered, a doctor can note all of the activity in the handheld device. After seeing several patients, the doctor then synchronizes the handheld device with a server which is connected to the hospital's main computer network. All patient data collected in the handheld is then uploaded to the hospital's main information system and at the same time, any patient data in the main system which has been updated since the last synchronization can be downloaded to the handheld device.","To perform the tasks of tracking clinical data, lab tests, billing data, and administrative data, etc., the handheld device must be capable of running programs for all of these applications. Furthermore, to ensure that changes to patient records made in one application transfer to the other applications on the handheld device, there must be a way for the application programs to communicated and share data specific to each patient. Thus, it is desirable to have a CCOW-like program on a handheld device which can manage the context of each application program.","The problem is that CCOW is written for devices with the computing power of a common desktop computer, not a handheld device, which typically has considerably less computing power and memory than desktop computers. Furthermore, a handheld device which is carried around by a doctor while treating patients need not have the full capabilities of a network computer system running CCOW. Thus, it is desirable to have an application which can run on a handheld device and manage the context of data being used by a plurality of application program modules.","The present invention comprises a framework for handheld devices which provides CCOW-like context management of data and program modules. The framework provides a user interface which presents all available program modules to the user as if they were a single application and allows for navigation between program modules. The framework also has a patient manager which allows a patient to be selected from a list and that patient's data to be recalled from memory. As a healthcare provider switches between program modules on the handheld device, the framework launches the subsequent program module in the same context as the previous program module, i.e. data for the current patient is immediately available and displayed in the subsequent program module. The framework also provides for inter-module integration which allows program modules to use other program modules on the handheld to retrieve and process data and allows messages to be sent between the program modules. Program modules are created with meta-data representations of the databases used by the applications. By communicating this meta-data to the server during synchronization, data can be retrieved from the server in a single pass (Turnkey Synchronization). Centralized Administration of the program modules, their data and the handheld framework is also provided.","A handheld device for providing access to patient medical data and software has a display, a plurality of program applications which process medical data, and a framework program which controls selection of the program applications, controls the patient context of each application, and controls the sharing of data between the applications. The framework may have metadata descriptions of how data is stored on the handheld device. The framework may control the synchronization of the handheld device to a server, and this synchronization may be effected in a single transaction. The handheld device may further comprise a library of databases and a messaging conduit for communicating messages between program modules. The handheld device may also comprise a user interface for displaying a particular program module, one or more tabs displaying and allowing the selection of other available program modules, and a patient selector.","A method for integrating health care applications on a handheld device comprises the steps of providing a handheld device having memory and a plurality of program modules stored in the memory, providing a framework program having libraries of data and a messaging conduit, selecting a first program module and a particular patient, from within the first program module, requesting data from a second program module, opening the second program module maintaining the context of the selected patient, providing the requested data for the patient, and returning to the first program module.","A method for communicating between program modules on a handheld device comprises the steps of providing a handheld device having memory and a plurality of program modules stored in the memory, providing a framework program having libraries of data and a messaging conduit, in a first program module, requesting data from a second program module by sending the data request through the messaging conduit to the framework, activating the second program module and checking if there are messages, conveying the data request from the framework to the second program module, processing the data in the second program module and returning it to the framework which then returns it to the first program module.","A user interface for operating health care applications on a handheld device comprises a window displaying a user interface of an active program module, a tab bar with tabs for selecting each available program module on the handheld device, and a patient selector for controlling the patient context of the program modules.","A description of preferred embodiments of the invention follows.","While the following description mainly pertains to use of the present invention in the health care industry, much of the methods and software described herein are broad enough for general application to a variety of fields.","The present invention is a framework for a handheld device. This handheld framework serves to integrate a plurality of program modules on the handheld device. Each program module administers its own database, but publishes the necessary information needed by the handheld framework to access those portions of the database which it is intended to access. Similarly, program modules can use this information to access data from other program modules' databases. The framework provides a User Interface, an Application Programming Interface, Metadata XML data description, Module Integration (messaging between modules), Centralized Administration and Turnkey Synchronization. The framework is platform independent and can utilize single (Palm) or multiple (Windows CE) threaded operating systems.","User Interface","The first feature of the handheld framework that a user will notice is the User Interface.  shows a handheld device  displaying the User Interface . At the bottom of the screen is a tab bar . The tab bar contains an icon for each of the available program modules on the handheld device. As program modules are added to the handheld device, their icons are added to the tab bar. The user can select a program module by tapping on the desired module's tab. The program modules can be provided with the handheld framework or developed by third party developers as well.","In the middle of the screen is the main application space . The active program module is displayed in the application space . When a user selects a different program module by tapping on its tab, the newly selected program module is launched in the application space . The application space  may also have a scroll bar if one is needed to display information that cannot fit in a single screen. The User Interface also has a drop down Patient List . This list of patients allows the user to select any of the patients whose data currently resides on the handheld device. Doctors can select which patients they intend to attend to on a given rotation (or it can be done automatically for them) and then download those patients into the handheld device. The doctor then only need select from the Patient List  as he moves from one patient to the next. The Patient List is common across all of the program modules and selecting a particular patient in one program module will result in all of the other program modules changing to that patient's context as well. This synchronization of all the program modules to the same patient happens automatically when a doctor selects a patient from the Patient List.","A goal of the User Interface  is to present all of the available program modules to a user as if they were all one application. Thus, whether a doctor is using program modules provided with the handheld framework or program modules written by a third party, they will all look like a single application. The User Interface is also platform independent, meaning it will appear and function the same on the various handheld device operating systems, such as the Palm OS or Pocket PC\/Windows CE platform. This facilitates more efficient programming for third-party developers writing their own custom program modules. The handheld framework provides rules for writing custom program modules such that they will automatically interoperate with the handheld framework and other program modules on the handheld device.","Application Programming Interface","The Application Programming Interface (API) is a set of functions for use by any developer wishing to create an application to run with the handheld framework. These functions remove much of the overhead work otherwise borne by software developers. With work already done for such difficult matters as memory and database management, the technical knowledge needed by the developer is reduced, whether it be a third-party developer or an employee of the provider of the handheld framework. Furthermore, a program module written according to the API will have operational consistency, exchangeability of data with other program modules also running on the handheld framework, and context management. The API has libraries of functions available to a programmer as well as the necessary documentation describing the way data is stored in a handheld device running the handheld framework.","Included in the API is a methodology for describing data. The method sets forth how data is described in the databases residing on the handheld device as well as on a server. The preferred method for describing data is using industry-standard extensible markup language, or XML. XML is used to put the data in an efficient format. This assists programmers in specifying how data is shared between program modules on the handheld device as well as how data is transferred between the handheld device and the server during synchronization operations. The use of XML also reduces the actual amount of data which needs to be transferred.","An application programmer uses the XML standards of the handheld framework when developing their own proprietary program modules. The programmer selects which data entities a program module will use and then creates the program module using the necessary XML descriptions of the data. The handheld framework will then be able to fully communicate with the databases which accompany the program module and any transfer of data to or from the program module to the handheld framework, server, or other program module will be transparent to the user.","Rules for Describing Data","The handheld framework provides the rules necessary for describing data. Since it is preferred that each program module owns its own databases, how the data is described in those databases must be shared with the handheld framework and other program modules with which data is to be shared. This is accomplished with a metadata description of all the data needed by a program module on the handheld device. In the preferred embodiment, the metadata is described in XML.","A developer writing a program module to work with the handheld framework must create a Data Store according to the rules provided with the handheld framework. The Data Store is separate from the main software code and describes the tables of data that the program module may use as well as the XML metadata describing how the data is stored. By allowing the handheld framework to see the metadata, the handheld framework, server or other program modules will know how to interact with the program module and exchange data with it. The Data Store metadata is used in the same way on any platform.","An example of metadata is shown in . The metadata  may have a value , a definition of an integer field  and a definition of a character field . In this example, the metadata is defining the fields \u201cpID\u201d and \u201cfoo\u201d for a particular record. If the code for a particular program module asks for \u201cfoo,\u201d the handheld framework looks to the metadata to see how to obtain \u201cfoo.\u201d The metadata instructs the handheld framework as to where \u201cfoo\u201d can be located. The handheld framework then retrieves the data and returns it to the program module requesting it. This method is used for communication between the handheld framework and program modules, between one program module and another, and between the handheld device and a server. The handheld framework also provides for methods of packaging, sending, receiving and unpacking data. The use of the metadata in packaging data allows for efficient compression and transmission of the data.","Module Integration in Single or Multiple threaded Operating Systems","Module integration allows any program module to access any open feature in any other program module on the handheld device. For example, a module that knows about a drug reference can provide a service to other modules that need to know about drugs, i.e. a prescription module wants to know about hazardous drug-drug interactions. Any program module can publish any features or functionality that it wants to provide as a service to other modules. For example, a Diagnosis module may wish to run inside a Charge\/Billing module since billing charges must be associated with a diagnosis. In general, messages are sent between program modules to request data, services or alter context.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5","b":["80","82","102","90","80","82","102","86","88","80","82"]},"When the code  requires data from a particular database, it sends a request  to get data to the handheld framework . In a single threaded OS, a portion of the framework's code is statically linked into the software code to enable it to communicate with the handheld framework . The handheld framework  then checks at  with the metadata tables  how the data is stored. At , the metadata tables  inform the handheld framework  how the data is stored by revealing the metadata information as shown in . The handheld framework  then retrieves the data at  from the database . Finally, the handheld framework  returns the data at  to the program module's main code .","Handheld devices currently come with either single or multiple threaded operating systems. This refers to the number of applications that can run on the handheld device at a given time. The Pocket PC\/Windows CE platform is an example of a multiple threaded operating system. The Palm OS platform is currently single threaded, but will likely move to multiple threaded in the near future. Multiple threaded environments provide the advantage of being able to execute certain functions in multiple program modules at the same time. For example, a message regarding laboratory test results can be sent to both a Diagnosis module and a Billing module at the same time.","When one program module is active and displayed in the application space and the user then selects another program module via the tab bar, the newly selected program module is then displayed in the application space. In a multiple threaded environment, the first program module can actually remain open while the second program module is being used. However, in a single threaded environment, the first application is closed and then the second application opened. Nevertheless, the handheld framework provides for the closing of the first and opening of the second program modules such that the transition is transparent to the user. Thus, one can see that it is easier for program modules to communicate with each other in a multiple threaded environment where they can both run simultaneously, than in a single threaded environment where only one program module is active at a given time. The handheld framework provides a solution to this problem by executing a message transfer sequence whereby messages between program modules travel through the handheld framework, thus simulating a multiple threaded environment on a single threaded handheld device.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["1","1","33","2","2","37","2","1","39","2","37","1","41","2","42","35","43","2","2","2","35","2","45","47","2","49","35","35","52","51","1","2","2","53","55","35","35","57","1","1","59","1","2","45","2"]},"Turnkey Synchronization","Communication between the program modules on the handheld device and the server works very similarly to communication between program modules and other program modules. Essentially, the server publishes metadata teaching the types of fields available on the server and the handheld framework provides for a proper mapping of those fields to the corresponding fields in the program modules on the handheld device.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 2"],"b":["70","20","71","73"]},"This effective mapping of fields on the handheld framework to the fields on the server allows for efficient packaging of data and requests for data. As a result, all data requests and fulfillments of those requests can occur rapidly in a single transaction between the handheld device and the server. This is referred to as Turnkey Synchronization.","Centralized Administration","Synchronization with the server also allows for centralized administration of a plurality of handheld devices at the server end. Management of all levels of the handheld devices is possible. For example, individual program modules can be automatically updated, new program modules can be added, and old program modules can be deleted. The handheld framework itself could also be updated using this process.","While this invention has been particularly shown and described with references to preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating the principles of the invention.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
