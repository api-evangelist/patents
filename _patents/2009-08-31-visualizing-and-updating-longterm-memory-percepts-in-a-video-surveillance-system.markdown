---
title: Visualizing and updating long-term memory percepts in a video surveillance system
abstract: Techniques are disclosed for visually conveying a percept. The percept may represent information learned by a video surveillance system. A request may be received to view a percept for a specified scene. The percept may have been derived from data streams generated from a sequence of video frames depicting the specified scene captured by a video camera. A visual representation of the percept may be generated. A user interface may be configured to display the visual representation of the percept and to allow a user to view and/or modify metadata attributes with the percept. For example, the user may label a percept and set events matching the percept to always (or never) result in alert being generated for users of the video surveillance system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08786702&OS=08786702&RS=08786702
owner: Behavioral Recognition Systems, Inc.
number: 08786702
owner_city: Houston
owner_country: US
publication_date: 20090831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","Embodiments of the invention provide techniques for conveying information learned by a video surveillance system. More specifically, embodiments of the invention relate to techniques for visualizing and updating long-term memory percepts in a video surveillance system.","2. Description of the Related Art","Some currently available video surveillance systems provide simple object recognition capabilities. For example, a video surveillance system may be configured to classify a group of pixels (referred to as a \u201cblob\u201d) in a given frame as being a particular object (e.g., a person or vehicle). Once identified, a \u201cblob\u201d may be tracked frame-to-frame in order to follow the \u201cblob\u201d moving through the scene over time, e.g., a person walking across the field of vision of a video surveillance camera. Further, such systems may be configured to determine when an object has engaged in certain predefined behaviors.","However, such surveillance systems typically require that the objects and\/or behaviors which may be recognized by the system to be defined in advance. Thus, in practice, these systems rely on predefined definitions for objects and\/or behaviors to evaluate a video sequence. In other words, unless the underlying system includes a description for a particular object or behavior, the system is generally incapable of recognizing that behavior (or at least instances of the pattern describing the particular object or behavior). Thus, what is \u201cnormal\u201d or \u201cabnormal\u201d behavior needs to be defined in advance, and separate software products need to be developed to recognize additional objects or behaviors. This results in surveillance systems with recognition capabilities that are labor intensive and prohibitively costly to maintain or adapt for different specialized applications. Accordingly, currently available video surveillance systems are typically unable to recognize new patterns of behavior that may emerge in a given scene or recognize changes in existing patterns. More generally, such systems are often unable to identify objects, events, behaviors, or patterns as being \u201cnormal\u201d or \u201cabnormal\u201d by observing what happens in the scene over time; instead, such systems rely on static patterns defined in advance.","One embodiment of the invention includes a method for a video surveillance system to process a sequence of video frames depicting a scene captured by a video camera. The method may generally include receiving a request to view a visual representation of a percept encoded in a long-term memory of a machine-learning engine. The precept may be used to encode a pattern of behavior learned by the machine-learning engine from analyzing data streams generated from the sequence of video frames. The method may also include retrieving the requested percept from the long-term memory of the machine-learning engine. The long-term memory stores a plurality of percepts. The method may also include generating a visual representation of the requested percepts. The visual representation presents a directed graph representing the pattern of behavior encoded by the requested percept.","Additionally, nodes in the directed graph may be used to represents one or more primitive events observed by the video surveillance system in the sequence of video frames and each links between nodes may represent a relationship between primitive events in the pattern of behavior.","Another embodiment of the invention includes a computer-readable storage medium containing a program which, when executed by a video surveillance system, performs an operation to process a sequence of video frames depicting a scene captured by a video camera. The operation may generally include receiving a request to view a visual representation of a percept encoded in a long-term memory of a machine-learning engine. The precept may be used to encode a pattern of behavior learned by the machine-learning engine from analyzing data streams generated from the sequence of video frames. The operation may also include retrieving the requested percept from the long-term memory of the machine-learning engine. The long-term memory may store a plurality of percepts. The operation may further include generating a visual representation of the requested percept. In general, the visual representation presents a directed graph representing the pattern of behavior encoded by the requested percept.","Still another embodiment of the invention provides a video surveillance system. The video surveillance system may generally include a video input source configured to provide a sequence of video frames, each depicting a scene. The video surveillance system may also include a processor and a memory containing a program, which when executed by the processor is configured to perform an operation to process the scene depicted in the sequence of video frames. The operation may generally include receiving a request to view a visual representation of a percept encoded in a long-term memory of a machine-learning engine. The precept may be used to encode a pattern of behavior learned by the machine-learning engine from analyzing data streams generated from the sequence of video frames. The operation may also include retrieving the requested percept from the long-term memory of the machine-learning engine. The long-term memory may store a plurality of percepts. The operation may further include generating a visual representation of the requested percept. In general, the visual representation presents a directed graph representing the pattern of behavior encoded by the requested percept.","Embodiments of the invention provide an interface configured to visually convey information learned by a behavior-recognition system. The behavior-recognition system may be configured to identify, learn, and recognize patterns of behavior by observing and evaluating events depicted by a sequence of video frames. In a particular embodiment, the behavior-recognition system may include both a computer vision engine and a machine learning engine. The computer vision engine may be configured to evaluate a stream of video frames. Typically, each frame of video may be characterized using multiple color (or grayscale) channels (e.g., a radiance value between 0-255 and a set of red, green, and blue (RGB) color channels values, each between 0-255). Further, the computer vision engine may generate a background image by observing the scene over a number of video frames. For example, consider a video camera trained on a stretch of a highway. In such a case, the background would include the roadway surface, the medians, any guard rails or other safety devices, and traffic control devices, etc., that are visible to the camera. Vehicles traveling on the roadway (and any other person or thing engaging in some activity) that are visible to the camera would represent scene foreground objects.","The computer vision engine may compare the pixel values for a given frame with the background image and identify objects as they appear and move about the scene. Typically, when a region of the scene (referred to as a \u201cblob\u201d or \u201cpatch\u201d) is observed with appearance values that differ substantially from the background image, that region is identified as depicting a foreground object. Once identified, the object may be evaluated by a classifier configured to determine what is depicted by the foreground object (e.g., a vehicle or a person). Further, the computer vision engine may identify features (e.g., height\/width in pixels, average color values, shape, area, and the like) used to track the object from frame-to-frame. Further still, the computer vision engine may derive a variety of information while tracking the object from frame-to-frame, e.g., position, current (and projected) trajectory, direction, orientation, velocity, acceleration, size, color, and the like. In one embodiment, the computer vision outputs this information as a stream of \u201ccontext events\u201d describing a collection of kinematic information related to each foreground object detected in the video frames. Each context event may provide kinematic data related to a foreground object observed by the computer vision engine in the sequence of video frames.","Data output from the computer vision engine may be supplied to the machine learning engine. In one embodiment, the machine learning engine may evaluate the context events to generate \u201cprimitive events\u201d describing object behavior. Each primitive event may provide semantic meaning to a group of one or more context events. For example, assume a camera records a car entering a scene, and that the car turns and parks in a parking spot. In such a case, the computer vision engine could initially recognize the car as a foreground object; classify it as being a vehicle, and output kinematic data describing the position, movement, speed, etc., of the car in the context event stream. In turn, a primitive event detector could generate a stream of primitive events from the context event stream such as \u201cvehicle appears,\u201d vehicle turns,\u201d \u201cvehicle slowing,\u201d and \u201cvehicle stops\u201d (once the kinematic information about the car indicated a speed of 0). As events occur, and re-occur, the machine learning engine may create, encode, store, retrieve, and reinforce patterns representing the events observed to have occurred, e.g., long-term memories (or long-term \u201cpercepts\u201d) representing a higher-level abstraction of a car parking in the scene\u2014generated from the primitive events underlying multiple observations of different cars entering and parking. The interface may be configured to visually convey such patterns. Specifically, the patterns may be stored in a long-term memory of the machine learning engine. Further still, patterns representing an anomalous event (relative to prior observation) or events identified as an event of interest may result in alerts passed to users of the behavioral recognition system.","In one embodiment, the machine learning engine may also include a transaction server. The transaction server may generate a visual representation of percepts encoded in the long-term memory of the machine-learning engine. Thus, the transaction server allows users to explore data learned by the machine-learning engine. Further, the transaction server allows users to supply metadata specifying how the system should respond to certain observed events and\/or behaviors (for example, when to produce (or not produce) an alert). For example, the transaction server may receive a request to view percepts stored in the long-term memory generated through observations of a scene over time. A percept may include one or more context events generalizing observations of multiple foreground objects of a scene over time. In response, the transaction server may generate a visual representation of the percept retrieved from the long-term memory. Further, the transaction server may also receive user requests to associate metadata with a percept retrieved from the long-term memory. The metadata may be used to guide system behavior. For example, a user may provide a name for percept, specify a rule that the system should generate an alert (or refrain from generating an alert) when a sequence of events that match a percept is observed, or otherwise modify metadata associated with a percept encoded in the long-term memory.","In the following, reference is made to embodiments of the invention. However, it should be understood that the invention is not limited to any specifically described embodiment. Instead, any combination of the following features and elements, whether related to different embodiments or not, is contemplated to implement and practice the invention. Furthermore, in various embodiments the invention provides numerous advantages over the prior art. However, although embodiments of the invention may achieve advantages over other possible solutions and\/or over the prior art, whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus, the following aspects, features, embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim(s). Likewise, reference to \u201cthe invention\u201d shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim(s).","One embodiment of the invention is implemented as a program product for use with a computer system. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable storage media. Examples of computer-readable storage media include (i) non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM or DVD-ROM disks readable by an optical media drive) on which information is permanently stored; (ii) writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive) on which alterable information is stored. Such computer-readable storage media, when carrying computer-readable instructions that direct the functions of the present invention, are embodiments of the present invention. Other examples media include communications media through which information is conveyed to a computer, such as through a computer or telephone network, including wireless communications networks.","In general, the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The computer program of the present invention is comprised typically of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described herein may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and\/or implied by such nomenclature.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","100","105","110","115","118","110","105","115","115","120","125","130","135","140","135","140","105"]},"Network  receives video data (e.g., video stream(s), video images, or the like) from the video input source . The video input source  may be a video camera, a VCR, DVR, DVD, computer, web-cam device, or the like. For example, the video input source  may be a stationary video camera aimed at a certain area (e.g., a subway station, a parking lot, a building entry\/exit, etc.), which records the events taking place therein. Generally, the area visible to the camera is referred to as the \u201cscene.\u201d The video input source  may be configured to record the scene as a sequence of individual video frames at a specified frame-rate (e.g., 24 frames per second), where each frame includes a fixed number of pixels (e.g., 320\u00d7240). Each pixel of each frame may specify a color value (e.g., an RGB value) or grayscale value (e.g., a radiance value between 0-255). Further, the video stream may be formatted using known such formats e.g., MPEG2, MJPEG, MPEG4, H.263, H.264, and the like. Additionally, although shown as a single video input source , the system  may support many video cameras\u2014each observing a distinct scene. Further, each camera may have multiple preset positions (i.e., a single camera may, in fact, be trained on more than one scene). In such cases, a separate instance of the computer vision engine  and machine learning-engine  may be available to observe the video stream from each camera (and presets, if any).","The computer vision engine  may be configured to analyze this raw information to identify active objects in the video stream, classify the objects, derive a variety of metadata regarding the actions and interactions of such objects, and supply this information to a machine-learning engine . In turn, the machine-learning engine  may be configured to evaluate, observe, learn, and remember details regarding events (and types of events) that transpire within the scene over time.","In one embodiment, the machine-learning engine  receives the video frames and the data generated by the computer vision engine . The machine-learning engine  may be configured to analyze the received data, build semantic representations of events depicted in the video frames, detect patterns, and, ultimately, to learn from these observed patterns to identify normal and\/or abnormal events. Additionally, data describing whether a normal\/abnormal behavior\/event has been determined and\/or what such behavior\/event is may be provided to output devices  to issue alerts, for example, an alert message presented on a GUI screen. In general, the computer vision engine  and the machine-learning engine  both process video data in real-time. However, time scales for processing information by the computer vision engine  and the machine-learning engine  may differ. For example, in one embodiment, the computer vision engine  processes the received video data frame-by-frame, while the machine-learning engine  processes data every N-frames. In other words, while the computer vision engine  analyzes each frame in real-time to derive a set of information about what is occurring within a given frame, the machine-learning engine  is not constrained by the real-time frame rate of the video input.","Note, however,  illustrates merely one possible arrangement of the behavior-recognition system . For example, although the video input source  is shown connected to the computer system  via the network , the network  is not always present or needed (e.g., the video input source  may be directly connected to the computer system ). Further, various components and modules of the behavior-recognition system  may be implemented in other systems. For example, in one embodiment, the computer vision engine  may be implemented as a part of a video input device (e.g., as a firmware component wired directly into a video camera). In such a case, the output of the video camera may be provided to the machine-learning engine  for analysis. Similarly, the output from the computer vision engine  and machine-learning engine  may be supplied over computer network  to other computer systems. For example, the computer vision engine  and machine-learning engine  may be installed on a server system and configured to process video from multiple input sources (i.e., from multiple cameras). In such a case, a client application running on another computer system may request (or receive) the results of over network .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1"],"b":["135","140","135","205","210","215","220","205","210","215","220","105","140","205","210","215","220","205","210","215","220"]},"In one embodiment, the BG\/FG component  may be configured to separate each frame of video provided by the video input source  into a stationary or static part (the scene background) and a collection of volatile parts (the scene foreground.) The frame itself may include a two-dimensional array of pixel values for multiple channels (e.g., RGB channels for color video or grayscale channel or radiance channel for black and white video). For example, the BG\/FG component  may model the background states for each pixel using an adaptive resonance theory (ART) network. That is, each pixel may be classified as depicting scene foreground or scene background using an ART network modeling a given pixel.","Additionally, the BG\/FG component  may be configured to generate a mask used to identify which pixels of the scene are classified as depicting foreground and, conversely, which pixels are classified as depicting scene background. The BG\/FG component  then identifies regions of the scene that contain a portion of scene foreground (referred to as a foreground \u201cblob\u201d or \u201cpatch\u201d) and supplies this information to subsequent stages of the pipeline. Pixels classified as depicting scene background maybe used to generate a background image modeling the background of scene.","The tracker component  may receive the foreground patches produced by the BG\/FG component  and generate computational models for the patches. The tracker component  may be configured to use this information, and each successive frame of raw-video, to attempt to track the motion of the objects depicted by the foreground patches as they move about the scene. More simply, the tracker attempts to relate the depiction of a particular object in one frame to the depiction of that object in subsequent frames as it moves throughout the scene.","The estimator\/identifier component  may receive the output of the tracker component  (and the BF\/FG component ) and classify each tracked object as being one of a known category of objects. For example, in one embodiment, estimator\/identifier component  may include a trained classifier configured to classify a tracked object as being a \u201cperson,\u201d a \u201cvehicle,\u201d an \u201cunknown,\u201d or an \u201cother.\u201d In this context, the classification of \u201cother\u201d represents an affirmative assertion that the object is neither a \u201cperson\u201d nor a \u201cvehicle.\u201d Additionally, the estimator\/identifier component may identify characteristics of the tracked object, e.g., for a person, a prediction of gender, an estimation of a pose (e.g., standing or sitting), or an indication of whether the person is carrying an object. Alternatively, the estimator\/identifier component  may include an unsupervised classifier configured to determine a collection of micro features (e.g., size, color, shininess, rigidity, etc.) and classify observed objects sharing a similar set of micro features as depicting an object of the same type.","The context processor component  may receive the output from other stages of the pipeline (i.e., the tracked objects, the background and foreground models, and the results of the estimator\/identifier component ). Using this information, the context processor  may be configured to generate a stream of context events regarding objects that have been tracked (by tracker component ) and classified (by estimator identifier component ). For example, the context processor component  may evaluate a foreground object from frame-to-frame and output context events describing that object's height, width (in pixels), position (as a 2D coordinate in the scene), acceleration, velocity, orientation angle, etc.","The computer vision engine  may take the outputs of the components , , , and  describing the motions and actions of the tracked objects in the scene and supply this information to the machine-learning engine . In one embodiment, the primitive event detector  may be configured to receive the output of the computer vision engine  (i.e., the video images, the object classifications, and context event stream) and generate a sequence of primitive events\u2014labeling the observed actions or behaviors in the video with semantic meaning. For example, assume the computer vision engine  has identified a foreground object and classified that foreground object as being a vehicle and the context processor component  estimates the kinematic data regarding the car's position and velocity. In such a case, this information is supplied to the machine-learning engine  and the primitive event detector . In turn, the primitive event detector  may generate a semantic symbol stream providing a simple linguistic description of actions engaged in by the vehicle. For example, a sequence of primitive events related to observations of the computer vision engine  occurring at a parking lot could include \u201cvehicle appears in scene,\u201d \u201cvehicle moves to a given location,\u201d \u201cvehicle stops moving,\u201d \u201cperson appears proximate to vehicle,\u201d \u201cperson moves,\u201d person leaves scene\u201d \u201cperson appears in scene,\u201d \u201cperson moves proximate to vehicle,\u201d \u201cperson disappears,\u201d \u201cvehicle starts moving,\u201d and \u201cvehicle disappears.\u201d As described in greater detail below, the primitive event stream may be used to excite the perceptual associative memory .","Illustratively, the machine-learning engine  includes a long-term memory , a perceptual memory , an episodic memory , a workspace , codelets , and a mapper component . In one embodiment, the perceptual memory , the episodic memory , and the long-term memory  are used to identify patterns of behavior, evaluate events that transpire in the scene, and encode and store observations. Generally, the perceptual memory  receives the output of the computer vision engine  (e.g., the context event stream) and a primitive event stream generated by primitive event detector . In one embodiment, the perceptual memory  may be implemented as a neural network having a graph of nodes and weighted links between nodes. In such a case, the input from the computer vision engine  is used to excite the perceptual memory , and the resulting sub-graph (i.e., a percept) is copied to the episodic memory  as a currently observed event. Thus, each percept may define a sub-graph of a neural network, where each node of the graph represents a primitive event (or combination of primitive events) and links between nodes represent relationships between primitive events.","The episodic memory  stores the percept, which represents observed events with details related to a particular episode, e.g., information describing time and space details related on an event. That is, the episodic memory  may encode specific details of a particular event, i.e., \u201cwhat and where\u201d an observed event occurred within a scene.","The long-term memory  may store percepts generalizing events observed in the scene. To continue with the example of a vehicle parking, the long-term memory  may encode percepts capturing observations and generalizations learned by an analysis of the behavior of objects in the scene such as \u201cvehicles tend to park in a particular place in the scene,\u201d \u201cwhen parking vehicles tend to move a certain speed,\u201d and \u201cafter a vehicle parks, people tend to appear in the scene proximate to the vehicle,\u201d etc. Thus, the long-term memory  stores observations about what happens within a scene with much of the particular episodic details stripped away. In this way, when a new event occurs, percepts in the episodic memory  and the long-term memory  may be used to relate and understand a current event, i.e., the new event may be compared with past experience, leading to both reinforcement, decay, and adjustments to the percepts stored in the long-term memory , over time. In a particular embodiment, the long-term memory  may be implemented as an ART network and a sparse-distributed memory data structure.","The mapper component  may receive the context event stream and the primitive event stream and parse information to multiple ART networks to generate statistical models of what occurs in the scene for different groups of context events and primitive events.","Generally, the workspace  provides a computational engine for the machine-learning engine . For example, the workspace  may be configured to copy percepts from the perceptual memory , retrieve relevant memories from the episodic memory  and the long-term memory , select and invoke the execution of one of the codelets . In one embodiment, each codelet  is a software program configured to evaluate different sequences of events and to determine how one sequence may follow (or otherwise relate to) another (e.g., a finite state machine). More generally, the codelet may provide a software module configured to detect interesting patterns from the streams of data supplied to the machine-learning engine . In turn, the codelet  may create, retrieve, reinforce, or modify metadata related to percepts in the episodic memory  and the long-term memory . By scheduling codelets  for execution, copying percepts to\/from the workspace , the machine-learning engine  performs a cognitive cycle used to observe, and learn, about patterns of behavior that occur within the scene.","As shown in , the machine-learning engine  also includes a transaction server  and a GUI interface . In one embodiment, the transaction server  and GUI tool  allow users to retrieve and generate visualizations of percepts encoded by the long term memory . For example, the transaction server  may be configured to process user requests from the GUI tool  to generate and display a visualization of a percept encoded in the long-term memory. Table I shows examples of transactions that may be supported by the transaction server :",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Transactions supported by the transaction server"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Transaction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Get preset list","Obtain a list of presets for a specified camera"]},{"entry":["Get list of percepts","Obtain a list of percepts for a specified preset"]},{"entry":["Get percept","Obtains data for a specified percept (e.g., including properties)"]},{"entry":["Set always alert","Specifies to always alert on event(s) matching a specified percept"]},{"entry":["Set always ignore","Specifies to never alert on event(s) matching a specified percept"]},{"entry":["Modify metadata property","Modify a specified property of a percept"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"figref":"FIG. 2","b":["260","140","260","140","270"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["260","304","306","260","304","260","260"]},"As shown, the method  begins at step , where the user  invokes the client . At step , a user interacts with the client  to connect to the transaction server . For example, the client  may connect to a specified IP address and port number on which the transaction server  is listening. At step , the client  queries for a list of cameras and associated presets . Each preset may include a location and orientation of a video camera observing (or having observed) a scene. At step , the transaction server  returns a list of cameras and presets to the client . At step , the client  displays the list of cameras and presets to the user .","At step , the user  selects a camera and a preset. The client  then queries for a list of percepts from the server  for the selected camera and preset (step ). At step , the server  returns the list of percepts to the client . Alternatively, the server  may be configured to return a list of long-term memory percepts for a currently active scene being observed by the computer vision engine  and machine-learning engine . At step , the client  displays the list of percepts to the user . The  may select a percept from the list. The client  may then display properties associated with the selected percept. The properties may include an identifier for the percept, a label for the percept, a measure of how strongly reinforced the percept is, alert preferences for the percept, etc. The client  may also allow the user  to modify one or more metadata properties for a percept. For example, a user  may modify a label for a percept to customize how the GUI tool  conveys information for the percept.","At step , the user  modifies metadata for a percept via the client . For example, the user  may modify metadata related to a selected percept (e.g., a name, an alert rule, etc.). At step , the client  sends a request to the server  to update the percept. At step , the server  attempts to update the metadata for the percept and returns a result to the client  indicating success or failure of the attempted update. After the step , the method  terminates.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4","b":["400","400","402","404","406","420","420","422","402","230","140","404","403","400","404","404","404","404"]},"Once the user selects a percept, the GUI interface tool may display a visual representation of the percept. For example, GUI  shows a visualization of a long-term memory percept, labeled \u201cHuman Drives Away.\u201d In one embodiment, the percept may be visually represented as a connected sequence of primitive events. Further, each primitive event may be represented as a box labeled with a name for the primitive event.","As discussed above, the percept itself may be a representation of a sub-graph of a neural network, where each node of the graph represents a primitive event (or combination of primitive events) and links between nodes represent relationships between primitive events. For example, the primitive events may correspond to a basic units of behavior such as a foreground object being observed to \u201cstart,\u201d \u201cstop,\u201d \u201cturn,\u201d \u201caccelerate,\u201d \u201cdecelerate,\u201d \u201cappear,\u201d or \u201cdisappear,\u201d etc. As this example illustrates, the primitive events may provide a collection of verbs describing a suite of basic actions that the video surveillance system can detect agents (i.e., foreground objects) engaging in. Further, because the video surveillance system may be configured to classify a given agent acting within a scene (e.g., as being a vehicle or person)\u2014the combination of an agent classification along with a primitive event provides the basic building blocks for a percept as well as for a visualization of such a percept used to convey a semantic description of learned patterns of behavior. For example, an analysis of a sequence of video frames could lead to the following percept generated from an agent\/primitive event stream: vehicle-appear\u2192vehicle-decelerate\u2192vehicle-slow\u2192vehicle stop. Thus, this example illustrates that each node may be associated with semantic labels describing the agents acting within a scene, as represented by the primitive events. In one embodiment, traversing the nodes of a percept encoded in the long-term memory, allows a clause describing a higher-order of behavior to be generated. For example, as shown in , percept number twelve includes five primitive events in an order corresponding to the order of an underlying percept in the long term memory; namely, Human Appear , Human Start , Human Move , Human Approach Vehicle , and Human Disappear .","Thus, as can be observed in GUI , the name for each primitive event provides an action which itself is associated with one or more agents in the scene. Further, the sequence is represented by arrows between the boxes (i.e., according to the order of the percept). As shown, the GUI  also displays properties of the selected percept, according to one embodiment. For example, properties  for the selected percept include an identifier for the percept (i.e., 12), a label for the percept (i.e., \u201cHuman Drives Away\u201d), and alert settings for the cluster  (i.e., \u201cNever\u201d).","In one embodiment, a user may modify the label (or other metadata) for the percept. The user may also set the machine-learning engine  to alert whenever the machine-learning engine determines that a series of event matching the percept has occurred. Further, the GUI  may also display a list  of agent types. For example, the list  of agent types may include a human, a car, a bag, and a motorcycle. Further, the GUI  may display a list  of primitive events. Illustratively, the list  of primitive events shown in GUI  includes an agent appearing, an agent disappearing, a first agent approaching a second agent, an agent leaving, an agent starting, an agent stopping, an agent turning, an agent changing, and an agent staying. Those skilled in the art will recognize that other agent types and actions may be supported by embodiments of the invention.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 5","b":["500","500","510","260","260","520","260","230","140","140","260","530","260","260","270","260","530","500"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 6","b":["600","600","610","260","620","260","625","630","260","140","635","640","260","140","645","625","635","645","260","650","640","650","600"]},"Advantageously, embodiments of the invention provide users with a visualization of data observed by a machine-learning engine of a behavior recognition system. Further, the visualization may provide an interface used to guide system behavior. In one embodiment, a GUI tool allows a user to visualize and specify metadata attributes related to percepts encoded as long-term memories within a long-term memory of a video surveillance system. For example, users may specify that observations that match an existing percept in the long-term memory should always (or never) result in an alert. Further, the GUI tool may allow users to modify other various metadata attributes associated with a percept, including semantic labels used to name the percept or to name nodes or links between nodes in the percept.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features, advantages, and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments illustrated in the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
