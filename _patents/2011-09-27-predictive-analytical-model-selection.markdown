---
title: Predictive analytical model selection
abstract: A computer-implemented method includes obtaining a database table, the database table including data arranged in a plurality of rows and a plurality of columns, each column of data being associated with a different tag that specifies a category for data in the column, using one or more processors to identify a first predictive model, from a collection of predictive models, that can be applied to the database table to generate a predictive output, in which identifying the first predictive model is based on one or more of the different tags, adding a name associated with the first predictive model to a set of names of predictive models that are compatible with the database table, and providing the set of names of predictive models to a client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08694540&OS=08694540&RS=08694540
owner: Google Inc.
number: 08694540
owner_city: Mountain View
owner_country: US
publication_date: 20110927
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application claims the benefit of U.S. Provisional Patent Application Ser. No. 61\/530,252, filed Sep. 1, 2011, the disclosure of which is hereby incorporated by reference in its entirety.","Predictive modeling generally refers to techniques for extracting information from data to build a model that can predict an output from a given input. Predicting an output can include predicting future trends or behavior patterns, or performing sentiment analysis, to name a few examples. Various types of predictive models can be used to analyze data and generate predictive outputs. Examples of predictive models include Naive Bayes classifiers, k-nearest neighbor classifiers, support vector machines, and logistic regression techniques, for example. Typically, a predictive model is trained with training data that includes input data and output data that mirror the form of input data that will be entered into the predictive model and the desired predictive output, respectively. The amount of training data that may be required to train a predictive model can be large, e.g., in the order of gigabytes or terabytes. The number of different types of predictive models available is extensive, and different models behave differently depending on the type of input data.","This specification relates to predictive analytical modeling selection for application software including database management systems. In some implementations, predictive analytical modeling selection can be employed to efficiently locate and identify one or more predictive models that are compatible with an input dataset. Furthermore, predictive analytical modeling selection can, in some implementations, be used to identify one or more predictive models that take, as input, features similar to but different from the features of an input dataset. Alternatively, or in addition, predictive analytical modeling selection can be used to rank models according to a level of compatibility with an input dataset.","In general, one aspect of the subject matter described in this specification can be embodied in a computer-implemented method, in which the method include obtaining a database table, the database table including data arranged in multiple rows and multiple columns, each column of data being associated with a different tag that specifies a category for data in the column, using one or more processors to identify a first predictive model, from a collection of predictive models, that can be applied to the database table to generate a predictive output, in which identifying the first predictive model is based on one or more of the different tags, adding a name associated with the first predictive model to a set of names of predictive models that are compatible with the database table, and providing the set of names of predictive models to a client device.","Another aspect of the subject matter described in this specification can be embodied in a system including one or more computing devices configured to perform operations including obtaining a database table, the database table including data arranged in multiple rows and multiple columns, each column of data being associated with a different tag that specifies a category for data in the column, identifying, based on one or more of the different tags, a first predictive model, from a collection of predictive models, that can be applied to the database table to generate a predictive output, adding a name associated with the first predictive model to a set of names of predictive models that are compatible with the database table, and providing the set of names of predictive models to a client device.","Another aspect of the subject matter described in this specification can be embodied in a storage medium having instructions stored thereon that, when executed by data processing apparatus, cause the data processing apparatus to perform operations that include obtaining a database table, the database table including data arranged in multiple rows and multiple columns, each column of data being associated with a different tag that specifies a category for data in the column, identifying, based on one or more of the different tags, a first predictive model, from a collection of predictive models, that can be applied to the database table to generate a predictive output, adding a name associated with the first predictive model to a set of names of predictive models that are compatible with the database table, and providing the set of names of predictive models to a client device.","These and other aspects can optionally include one or more of the following features. In some implementations, the method or operations can further include applying the first predictive model to the database table to obtain a predicted value, and adding the predicted value to the database table. Adding the predicted value to the database table can include replacing a missing column value in the database table. Adding the predicted value to the database table can include adding a new column to the database table, the new column including the predicted value.","In some implementations, identifying the first predictive model includes identifying a predictive model configured to: receive, as an input, data in a category specified by at least one of the different tags; and output data in a category specified by a second tag. The method or operations can further includes using the one or more processors to identify a second predictive model from the collection of predictive models, the second predictive model being configured to receive, as an input, both data in a category specified by at least one of the different tags and data in a category specified by the second tag, and adding a name associated with the second predictive model to the set of names of predictive models that are compatible with the database table. The method or operations can further include applying the first predictive model to the database table to obtain a predicted value, adding the predicted value to the database table in a new column to obtain an updated database table, and subsequently applying the second predictive model to the updated database table.","In some implementations, identifying the first predictive model based on one or more of the different tags includes identifying a predictive model configured to receive, as an input, data in a category specified by a second tag related to at least one of the different tags. The second tag can be superior to or subordinate to the at least one of the different tags in a hierarchal order of tags.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features and advantages of the invention will be apparent from the description and drawings, and from the claims.","A web application is software that executes on one or more server computing devices (or \u201cservers\u201d) and that is accessed over a network such as the Internet by users through web browsers or other software that runs on client computing devices (or \u201cclients\u201d). Data files include digital electronic files that are created, accessed, or modified by web applications and can be stored in repositories that are accessible to the servers. Web applications can provide a graphical user interface (GUI) to client devices by sending the client devices Hypertext Markup Language (HTML) documents or other information that can be used to render the GUIs. In some implementations, a web application is invoked and\/or controlled using scripts written in a scripting language. A script is a set of instructions and\/or queries that are written in the scripting language and that can be executed entirely on a client, entirely on a server, or on both the client and the server.","In some implementations, web applications run or utilize databases and include, for example, database management systems, word processors, email, financial tools, calendars, maps, and webpage-hosting applications. A database management system is a system that stores and manages data in a collection of one or more tables (e.g., database tables), each table having an array of rows and columns. By way of illustration, an to application programming interface (API) for a database management system can provide methods for reading, writing and creating database files, performing calculations on data in the database tables, and, in some implementations, manipulating a database GUI such as, for instance, by opening dialog boxes, creating new database tables, expanding or reducing the size of database tables, and\/or joining pre-existing database tables. The API for the database management system also provide methods for can reading, writing or otherwise modifying the data contained in the row or column fields of the database tables.","In addition to accessing web application functionality in scripts, a predictive modeling API can be provided, in which the predictive modeling API allows use of predictive models to obtain a predicted output based on a particular input dataset. The predictive modeling API can also be used to programmatically train of new predictive models. The predictive modeling API allows users to upload a dataset from web application database files (or from other sources of data) and invoke a predictive model to obtain predictions for queries. In various implementations, a prediction (i.e., the output of a predictive model) is either a numeric value or a categorization of a query. The predicted output then can be added back to the input dataset to replace a missing value or to expand the input dataset. Alternatively, or in addition, the predictive modeling API can use the dataset as training samples for training new predictive models.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","100","112","114","110","112","114","110","108","112","101","106","104","101","102","102","112","101","102","104","112","112","112","112","108","114","112","112","114","112","110"]},"As explained above, a database includes one or more database tables , each of which can include data entry fields (e.g., fields  and ) arranged in a two-dimensional array of rows and columns (e.g., columns A through I and rows 1-8). The data entry fields of the database table  include data values (e.g., a category value or a numeric value). In some implementations, a database table is missing a data value in one or more row and\/or column data entry fields.","The columns of the database table  can be associated with tags  (Tag A through tag I). A tag  specifies the type of feature contained in the corresponding column with which the tag is associated. For example, a column in a database table can be associated with a tag entitled \u201ctemperature.\u201d The data entry fields of the column associated with the tag \u201ctemperature\u201d thus respectively include, for example, numeric values corresponding to temperature values. In another example, a column in a database table can be associated with a tag entitled \u201ccity.\u201d The data entry fields of the column associated with the tag \u201ccity\u201d respectively include, for example, city names. Accordingly, tags provide a mechanism for identifying the data values contained in the columns of a database table. Each column of a database table can therefore be associated with a different tag .","In some implementations, a tag associated with a dataset column can be part of a tag hierarchy. That is, a particular tag can be subordinate to or superior to other tags in a hierarchal order of tags. For instance, in some cases, a tag hierarchy can include tags arranged in order of specificity. As an example,  shows several tags arranged in a tag hierarchy . A tag  entitled \u201cblog post text\u2014baseball\u201d may relate to text that can be found in a blog post and is concerned with the sport of baseball (e.g., a discussion of particular baseball team). The tag  then is subordinate to a tag  entitled \u201cblog post text\u2014sports,\u201d i.e., the tag  is more specific in that it relates to baseball and not sports generally. Similarly, a tag  entitled \u201cblog post text\u201d is superior to tag  i.e., the tag  is more general in that it relates to the text of blog posts in general and not the text of any particular blog post subject matter. The tag hierarchy may be stored, for example, on one or more servers in the data warehouse  or in another geographical location.","In some implementations, tags and corresponding tags in a tag hierarchy can be predefined. In some other implementations, tags and corresponding tags in a tag hierarchy can be determined using machine learning techniques. Some example feature tags include \u201czip code,\u201d \u201ctime,\u201d \u201cdate,\u201d and \u201ctext.\u201d For example, the \u201czip code\u201d feature tag can include sub-tags \u201ccontinent,\u201d \u201ccountry,\u201d \u201cstate,\u201d \u201ccity.\u201d In another example, the \u201ctime\u201d and \u201cdate\u201d feature tags can include sub-tags \u201cstock market events,\u201d \u201cseismic events,\u201d and \u201cweather events.\u201d The \u201ctext\u201d feature tags can include sub-tags \u201cnews,\u201d \u201copinion,\u201d and \u201centertainment.\u201d In some implementations, sub-tags can include additional sub-tags. For example, sub-tags \u201cnews,\u201d \u201copinion,\u201d and \u201centertainment\u201d can include additional sub-tags \u201cmagazine article,\u201d \u201cblog post,\u201d and \u201cnewspaper.\u201d","Referring again to , upon receiving the dataset (e.g., database table ) in the web application , the predictive modeling API  can invoke functionality of a predictive model  to obtain a predicted value for the dataset. For example, a predictive model can be invoked to calculate the value of at least one of the missing row and\/or column fields in the dataset (e.g., database table ). In some implementations, the predictive model can be used to add new data fields to the dataset (e.g., database table ). For instance, the predictive model can predict values that are combined with a dataset that may or may not have missing values, such that the dataset is expanded in size. (The predictive model is described further below.)","As an example, the database table  uploaded to the web application  can be supplied to a predictive model  by the predictive modeling API . In various implementations, the predictive model to which the database table is supplied is either categorical (if its predictions are categories) or regression (if its predictions are numeric values). Accordingly, depending on the predictive model type, the output of the predictive model can be a category or numeric value that is added back to the database table to replace a missing value or as part of a new field that is added to the table.","By way of illustration, the example database table  in  includes data values in a first feature column  (entitled, \u201cE-Mail Subject Line\u201d) that correspond to email message subject lines. The database table  also includes a second category column  (entitled \u201cE-Mail Classification\u201d) that categorizes the data values contained in the corresponding row of the first column. One or more of the data entry fields in the second column  may be empty (e.g., field ). When the data from the first column is supplied to a compatible predictive model (e.g., a predictive model that can take, as an input, e-mail subject lines), the predictive model generates a predicted value for each empty field in the second column . For example, the model may predict an output category indicative of whether the example represents SPAM or not. The predicted values can be placed in the empty field  of the second column . Alternatively, a database table can include feature columns containing numeric values and a category column that is a regression of those numeric values (e.g., next value in a series).","Referring again to , the action taken by the predictive model  can be, in some implementations, in response to a query (e.g., a request to predict the value of a missing row or column, a request to predict a value (category or numeric) to add to an existing database table, a request to locate a predictive model or predictive models capable of predicting a specified value, or a request to provide a recommendation of models compatible with an input dataset) submitted to the predictive modeling API  or the predictive model . In some implementations, the queries are automatically submitted to the predictive modeling API  or the model  in response to a database table being uploaded to the web application  (e.g., a script is executed such that the query is submitted to the predictive model  independent of a specific user request). Alternatively, in some implementations, a user uploading a database can request submission of the query to the predictive modeling API  or predictive model . For example, the user can select an option to submit a query through the GUI  (e.g., by clicking a link, checking a box, selecting an option from a drop-down menu).","In general, a predictive model is trained with training data that includes input data and output data that mirror the form of input data that will be entered into the predictive model and the desired predictive output, respectively. In some embodiments, there exists a collection of available predictive models to which an input dataset can be supplied. Thus, whether a particular predictive model in a collection of models would be compatible with a particular input dataset can depend on the type of features on which the model is trained and the type of features included in the input dataset supplied to the model. For instance, a predictive model is considered to be compatible with an input dataset when the types of features of the input dataset closely match the types of features on which the predictive model has been trained. That is, the predictive model takes, as an input, features in the same or similar categories as the features on which the model has been trained. In an example, a predictive model trained on a first type of data features (e.g., e-mail subject lines) can be considered to be compatible with an input dataset that includes, for example, e-mail subject lines in at least one of the input dataset columns. In contrast, the predictive model trained on e-mail subject lines would not be considered compatible with an input dataset that includes, for example, only zip codes in the input dataset columns.","In some implementations, a compatible model exactly matches an input dataset when the model takes as input the some or all of the same features associated with the columns of the input dataset in the same order the columns are arranged in the input dataset, and the model predicts the same output as the category column of the input dataset. For example, a predictive model that takes as an input features \u201ccity,\u201d \u201cdate,\u201d and \u201ctime of day\u201d and predicts temperature values directly matches an input dataset having columns containing the same features in the same order (i.e., cities in the first feature column, dates in the second feature column, times of day in the third feature column, and temperature in a category column). In addition, a predictive model that takes as input features \u201ccity,\u201d \u201cdate,\u201d and \u201ctime of day\u201d and predicts temperatures directly matches an input dataset having columns containing the two of those features in the same order (i.e., cities in the first feature column, dates in the second feature column, temperature values in a third category column). In some implementations, a compatible model indirectly matches an input dataset when the model takes as input at least some of the same input features associated with the columns of the input dataset, but not necessarily in the same order. For example, a predictive model that takes as an input features the values \u201ccity,\u201d \u201cdate,\u201d and \u201ctime of day\u201d in that order indirectly matches an input dataset having a first column containing date data and a second column containing city data, but no column containing time of day values.","However, the number of predictive models to select from for a particular input dataset may be too large for a user to efficiently and manually search. Alternatively, or in addition, one or more of the features that a predictive model takes as input may not match exactly with the type of features available in the input dataset. For example, an input dataset may include features in a column corresponding to blog post text, but the models available have been trained on text in general or blog post text specific to a particular category, such as sports. Accordingly, it may not be clear which predictive models are compatible with an input dataset. The user can submit queries to the web application, which are passed to the predictive modeling API, for recommendations of predictive models that exactly or indirectly match an input dataset (e.g., a user can inquire as to what predicted outputs can be obtained from the input dataset). Alternatively, or in addition, the user can submit queries to the web application, which are passed to the predictive modeling API, for recommendations of models that supply a desired predicted output based on the input dataset (e.g., a user can inquire as to what predicted models are required to obtain a temperature prediction for the input dataset).","In response to the queries, the predictive modeling API can be configured to search a collection of predictive models for one or more models that are compatible with an input dataset received from the web application or to provide recommendations for models that can be used to obtain the desired predicted output. Once the compatible predictive models are identified, a set containing the names of those models can be provided, for example, to one or more client devices. As explained above, the type of features included in the columns of an input dataset can be classified using a tag. Accordingly, to identify whether a predictive model is compatible with a particular input dataset, the tags associated with the columns of the input dataset can be checked against the features that the predictive model takes as input (i.e., the tags associated with the dataset on which the particular predictive model has been trained). When a predictive model is trained on a training dataset, the tags associated with the columns of the training dataset can be recorded by the predictive model.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 1"],"b":["400","402","112","112","114","114","404","110","114","406","114","112","408","104"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["500","404","400","112","114","502","114","104","112","114"]},"The predictive modeling API  then obtains () one of the predictive models  from a collection of predictive models. Once the predictive modeling API  has obtained the one or more tags associated with the input dataset, the API  checks () a predictive model in the collection of predictive models  to determine if there is a match between the tags obtained from the input dataset and the tags associated with the first predictive model. If a match between tags exists, the API  adds () a name associated with the predictive model to a set of compatible predictive models. If no match exists, the API  obtains () the next predictive model in the collection and performs another check () of the tags associated with the input dataset against the tags associated with the new predictive model, thus continuing the algorithm. In either case, the API  determines (, ) if the most recent predictive model checked is the last available in the collection. If no more models are available to check, the API  ends the search. Otherwise, the API  continues checking the remaining models in the collection.","In some embodiments, checking whether tags associated with an input dataset match tags associated with a predictive model entails comparing whether the predictive model takes as input the features identified by the input dataset tags, without preference to the column order from which the tags were obtained. For example,  is a schematic that illustrates an example of a system  used to obtain a list of predictive models compatible with an input dataset according to a first embodiment. An input database table  includes three feature columns , ,  and a category column . The first feature column  includes data specifying a geographic location, e.g., a city. The first feature column  is associated with a corresponding tag  entitled, \u201cCity.\u201d The second feature column  is directly adjacent to the first feature column and includes data specifying a date, e.g., a day and month of the year. The second feature column is associated with a corresponding tag  entitled, \u201cDate.\u201d The third feature column  is directly adjacent to the second feature column and includes data specifying a time of day. The third feature column is associated with a corresponding tag  entitled, \u201cTime of Day.\u201d The category column is located at the end of the database table  and is directly adjacent to the third feature column . The rows of the category column  include data specifying a temperature for the corresponding city, date and time of day. The category column is associated with a tag  entitled, \u201cTemperature.\u201d The tags of the input dataset are provided () from the web application  to a predictive modeling API .","When conducting a search of applicable models for the input dataset , the predictive modeling API  checks () whether the tags ,  and  match tags associated with a predictive model in a collection  of predictive models (e.g., model , , ). That is, the API  searches for a model that takes as an input city, date and time data values, without respect to the order of the tags, and outputs a temperature value as a predicted output. If the API  locates a model that takes, as an input, the features of the database table  in a different column order (e.g., a first column of values corresponding to a time of day, a second column of values (directly adjacent to the first column) corresponding to a city name, and a third column of values (directly adjacent to the second) corresponding to date values), where the model outputs a predicted temperature, the API  identifies the located model as compatible with the input database table  and adds () the name of model to a set  of compatible predictive models. The set  can be stored with the web application  on one or more servers of the data warehouse  or on servers in some other geographic location, in which the servers can communicate over one or more networks with the web application  and\/or predictive modeling API .","In some implementations, the predictive modeling API can identify compatible predictive models when less than all of the feature columns of an input dataset match the features that a predictive model takes as input. For example, if input database table  includes two feature columns ,  (e.g., a first feature column of values corresponding to city and a second feature column of values (directly adjacent to the first column) corresponding to a date) and a category column  (e.g., predicted temperature) but no third feature column, the API  can still identify a predictive model as compatible with the model when model takes as input city and date features and outputs a predicted temperature.","In some embodiments, the predictive modeling API can re-order the tags associated with the columns of the input dataset to aid identifying a predictive model compatible with the input dataset. For instance,  is a schematic that illustrates an example of a system used to obtain a list of predictive models compatible with an input dataset according to a second embodiment. Again, a database table  from a web application  is provided () to a predictive modeling API . However, predictive modeling API switches () the order of tags associated with the table columns prior to searching for a compatible model. That is, the predictive modeling API modifies the order of tags associated with columns , , and  of database table  (e.g., switching the location of first column  with the third column ) to produce a modified database table . The API then checks whether any predictive models in a collection of predictive models take, as an input, feature columns arranged in the same manner as the modified database table . If a compatible predictive model is located that can take the features in the modified order specified by the predictive modeling API, the predictive modeling API  then can re-order the arrangement of the columns of the input dataset to match the order in which the compatible predictive model will receive the features.","In some embodiments, a predictive model takes as input one or more features that do not match the name of a tag associated with a column of the input dataset. The predictive modeling API can still identify a predictive model that is compatible with the input dataset, if one or more of the model input features are, as part of a tag hierarchy, subordinate to or superior to the tag associated with the column of the input dataset.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 7","b":["700","730","740","712","714","730","702","704","706","703","705","707","714","750","780","710","710","710","714","780","703","705","707","780","703","705","707","703","702","730","714","714","755","716","730"],"i":["a","b","c"]},"In some embodiments, an input dataset lacks one or more feature columns that are required for applying a particular predictive model. For example, the predictive modeling API can identify a first predictive model that takes, as an input, three different features. However, the input dataset provided to the API can include columns associated with tags that match just two of the three features of the first predictive model. In such cases, the predictive modeling API can search for an additional model to apply to the input dataset to obtain the third missing feature and include both the first and second models in a set of applicable models. If an appropriate second model is located, the second model can be applied to the input dataset to obtain the third feature as a predicted output. The predicted output can be added to the input dataset to produce a modified input dataset. The modified input dataset then includes the three features required by the first predictive model, such that the first predictive model can be applied to the modified input dataset. That is, the second and first predictive models are \u201cstacked,\u201d with the second predictive model being applied to the input dataset to obtain a modified input dataset, and the first predictive model subsequently being applied to the modified input dataset.","In some embodiments, a user submits a query for one or more models. For example, a user can supply an input dataset and request, through the web application, a recommendation for a list of models capable of taking the input dataset and outputting a desired output (a directed search), such as temperature. The predictive modeling API  can be configured to search a collection of predictive models, in response to such a request, for predictive models that take as input one or more of the features of the input dataset and output a predicted temperature value. Alternatively, or in addition, the API  can search for two or more predictive models that need to be applied in a \u201cstack\u201d to obtain the desired prediction. For example, the API  can identify a second model which provides the desired output but is not compatible with the input dataset because the input dataset is missing one or more feature columns. The API  then can also identify a second predictive model that can take the input dataset and output the missing feature values necessary to add to the input dataset. When the second model is applied to the input dataset, the predicted output can be added to the input dataset to obtain a modified dataset that is compatible with the first dataset.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 8","b":["800","830","802","804","803","805","806","840","812","830","850","880","810","810","810","830","880","810","803","805","810","830"],"i":["a","b","c","a"]},"Because the input database table  does not include a column of values identifying humidity, the predictive modeling API  also can search for a predictive model that will supply the missing column of features to the table . For example, the predictive modeling API  can locate a predictive model (e.g. ) that takes, as an input, features corresponding to those identified by tags  and  (e.g., city name and date) and outputs a predicted humidity. If such a model can be found in the collection , the predictive modeling API  can add () the name of the first model (e.g., ) and add () the second model (e.g., ) to a set  of names of models that are compatible with the input database table . When the set of models is passed to a client device, the user can apply the models in a \u201cstack,\u201d i.e., the second predictive model (e.g., ) can be applied to the input database table  to obtain predicted humidity values, which are then added to the table . The first predictive model (e.g., ) then can be applied to the modified table that includes the humidity values to obtain predicted temperature values.","In some implementations, the user query can be a request to identify predictive models that are compatible with the input dataset (an undirected search). In response to the query, the API  can search for predictive models that exactly or indirectly match the input dataset, depending on the user identified preference. The API  thus lists models compatible with the input dataset informing the user what type of predictions can be obtained with the input dataset.","In some embodiments, the predictive models identified by the predictive modeling API can be ranked based on applicability to an input dataset. The set of predictive model names can be ranked based on how closely the features accepted by each model match tags associated with an input dataset. For example, the ranking may be based on: whether a predictive model takes as input feature columns that exactly match the names and order of tags associated with an input dataset; whether a predictive model takes as input feature columns that exactly match the names but not order of tags associated with an input dataset; whether a predictive model takes as input feature columns that match at least some of the names of tags associated with an input dataset; whether a predictive model takes as input feature columns that fall within the same hierarchal order as tags associated with an input dataset. Once the set of ranked predictive models is obtained, the set can be passed from the web application to the client device.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 9","b":"900"},"The models in the set  are ranked in order from 1 to 4, with the model ranked 1 corresponding to the predictive model having the greatest applicability to the input database table among the models of the set . For example, model A, which is ranked 1, can be a predictive model that takes as input three feature columns that exactly match the name and order (e.g., column 1 contains city names, column 2 contains dates, column 3 contains times of day) of the tags associated with the input database table. Model B, which is ranked 2, and therefore less applicable to the input dataset, can be a predictive model that takes as input three features that exactly match the name, but not order (e.g., column 1 contains times of day, column 2 contains city names, and column 3 contains dates) of tags associated with the input database table. Model C, which is ranked 3, can be a predictive model that takes as input three features, in which the second and third inputs of the model receive data that matches the name and order of the second and third tags associated with the input database table (e.g., date and time). The first input of Model C can correspond to a feature that is in the same hierarchy (e.g., state) as the first tag of the input database table. Model D, which is ranked 4, can be a predictive model that takes as input three features, in which only the first and second inputs match the name, but not order of two of the tags (e.g., city and time) associated with the input database table. Each of the models in the set  can be capable or predicting an output that corresponds to the category column of the input database (e.g., each model can be capable of predicting a temperature).",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 10","FIG. 10"],"b":["1000","1090","1080","1001","1003","1012","1014","1010","1016","1018","1020","1003"]},"The servers also include hardware or firmware devices including one or more processors , one or more additional devices , a computer readable medium , a communication interface , and one or more user interface devices . Each processor  is capable of processing instructions for execution within the server . In some implementations, the processor  is a single or multi-threaded processor. Each processor  is capable of processing instructions stored on the computer readable medium  or on a storage device such as one of the additional devices . The server  uses its communication interface  to communicate with one or more computers , for example, over the network . Examples of user interface devices  include a display, a camera, a speaker, a microphone, a tactile feedback device, a keyboard, and a mouse. The server  can store instructions that implement operations associated with the modules described above, for example, on the computer readable medium  or one or more additional devices , for example, one or more of a floppy disk device, a hard disk device, an optical disk device, or a tape device.","The predictive modeling API  is a separate computer program or, in some implementations, is part of the computer program that makes up the web application . The web application  and the predictive modeling API can communicate through method invocation, shared memory, network communication, or other means of inter or intra-process communication. The predictive modeling system  can optionally include other APIs as well (e.g. API ).","The predictive modeling API  exposes functionality through objects, methods or functions that allow scripts to query models and train models  using training data  obtained from application data . In some implementations, models are trained by a training system , which receives requests from the predictive modeling API  to initiate training and check the status of training. The predictive modeling API  provides the training system  with the location of training data  to be used in training a particular model. For example, the training data , such as a range of columns in a database table, can be obtained from the application data  through use of the web application API  and then provided to the training system  through use of the predictive modeling API .","Other APIs  can include, for instance, an API that allows scripts to communicate over computer networks using Transmission Control Protocol\/Internet Protocol (TCP\/IP) and an authentication API which provides a mechanism for authorizing a script's request to access a user's application data , models , and training data  through the web application  and the predictive modeling API . In some implementations, the web application  (or, e.g., a script engine) requests access permission from an authorization server. The authorization server is responsible for prompting the user operating the client device(s) (e.g., clients ) for permission to grant access to the required data, if necessary. If permission is granted, the authorization server returns a token that can be shared with the web application  (including, e.g., a web application API), and the predictive modeling API  in order to access the required data. Other authorization mechanisms are possible.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 11","FIG. 1"]},"As shown in , the predictive modeling API  obtains the dataset for expansion (). As explained above, the dataset can be, in some implementations, obtained from a client device or a database storing data. The predictive modeling API  identifies a tag for one or more features (). In some implementations, the predictive modeling API  evaluates each feature in the dataset to identify a tag. Feature types can be predefined, together with techniques for identifying those types. Example feature tags include \u201clocation,\u201d \u201czip code,\u201d \u201ctime,\u201d \u201cdate,\u201d and \u201ctext.\u201d Alternatively, or in addition, the predictive modeling API  can evaluate predictive models identified in a search for models compatible with the input dataset to identify a tag.","The predictive modeling API  determines whether to expand the identified features (). In some implementations, the system expands all features for which a tag was identified. For example, assuming the API  identifies a model that takes, as input, features having predefined tags for \u201ctime\u201d and \u201cdate,\u201d the predictive modeling API  can expand any features that match these tags. According to this example, a dataset that includes features \u201ctime\u201d and \u201ctemperature\u201d will result in expansion of the feature \u201ctime,\u201d which matches predefined tag \u201ctime,\u201d but will not result in expansion of the feature \u201ctemperature,\u201d which does not match tag \u201ctime\u201d or \u201cdate.\u201d","The predictive modeling API  then expands features (). In some implementations, the system expands all features for which a tag was identified. For example, if types \u201ctime\u201d and \u201cdate\u201d were designated as types for expansion, the system will expand any features that match either type \u201ctime\u201d or \u201cdate.\u201d In some implementations, expansion of a feature can involve expanding that feature to all sub-types associated with the identified type. For example, a \u201cGPS coordinates\u201d feature can be identified as a \u201clocation\u201d type and be expanded to some or all sub-types corresponding to the \u201clocation\u201d type (e.g., \u201ccontinent,\u201d \u201ccountry,\u201d \u201cstate,\u201d \u201ccity,\u201d \u201czip code,\u201d \u201cstreet,\u201d and \u201cstreet address\u201d).","The system then populates the expansions (). In some implementations, values for expansions can be obtained from by applying to the dataset a predictive model compatible with an input dataset. The compatible predictive model can be obtained as a result of a search for a compatible predictive model. The system then populates the expansions using the predicted output from the compatible predictive model. In some implementations, values for expansions can be automatically determined using training data examples. In some implementations, training data examples for populating expansions can be obtained from a database storing training data sets. For example, a GPS coordinates feature (a \u201clocation\u201d tag) can be expanded to sub-tags \u201cstate\u201d and \u201ccity.\u201d The expanded sub-tags \u201cstate\u201d and \u201ccity\u201d can be populated using existing training data examples that include GPS coordinates, \u201cstate\u201d and\/or \u201ccity.\u201d","The system optionally modifies the expanded training dataset (). In some implementations, expanded training data can be modified by reduction expansions in the training data. The system can reduce expansions using feature selection techniques. In some implementations, the system reduces expansions by iteratively removing one expansion from the expanded training data and testing whether removal of that expansion resulted in a positive impact on the prediction outcome. The system can exclude an expansion from the training data if removal of the expansion improved the accuracy of the prediction outcome. In some other implementations, the system can reduce expansions by removing subsets of two or more expansions from the expanded training data and testing whether removal of that subset resulted in a positive impact on the prediction outcome. The system can exclude expansion subsets from the training data if removal of those subsets improved the accuracy of the prediction outcome.","Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).","The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.","The term \u201cdata processing apparatus\u201d encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.","A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language resource), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","A system of one or more computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.","The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.","To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending resources to and receiving resources from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.","Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.","While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.","Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
