---
title: System and method for verifying computer program correctness and providing recoverable execution trace information
abstract: In a system for statically analyzing a specified computer, a verification condition generator converts the program into a logical equation, called a verification condition, and inserts program flow control labels into the sub-equations of the verification condition. The flow control labels identify conditional branch points in the specified computer program. A theorem prover is applied to the logical equation to determine truth of the logical equation, and when the truth of the logical equation cannot be proved, the theorem prover generates at least one counter-example identifying one of the conditions, one or more variable values inconsistent with that condition, and any of the flow control labels for conditional branch points of the program associated with the identified variable values. A post processing module converts each counter-example into an error message that includes a program trace when the counter-example identifies one or more of the flow control labels.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07024661&OS=07024661&RS=07024661
owner: Hewlett-Packard Development Company, L.P.
number: 07024661
owner_city: Houston
owner_country: US
publication_date: 20010105
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority on U.S. provisional patent application No. 60\/174,952, filed Jan. 7, 2000.","The present invention relates generally to tools that automatically verify, using static checking techniques, the correctness of a computer program with respect to predefined criteria, and particularly to a tool that derives verification conditions that are annotated in a way that enables the tool to indicate a specific sequence of program instructions associated with potential programming errors detected by the tool.","The purpose of a computer program verification system is to analyze a given computer program to determine whether or not it has certain desirable properties. Verification systems can also be used to analyze hardware components, formulae, algorithms, or, more generally, behavioral designs.","A typical verification system works by generating a verification condition (VC) from a given behavioral design, and then processing the verification condition with a theorem prover. A verification condition is a logical formula that, ideally, is valid if and only if all possible behaviors of the design have the desirable properties under consideration. In practice, the verification condition generated may be only an approximation of the ideal verification condition.","The theorem prover should have the property that when it fails to generate a proof, it generates a number of potential counter-examples. The verification system then post-processes these counter-examples into warnings that the desirable properties may not hold. A warning may be spurious; that is, it may warn about something that is not a real error. Spurious warnings may arise when the theorem prover does not have enough information to generate a proof, when the prover is too weak a prover to automatically generate a proof, or when the verification condition produced is not quite the ideal one.","A good verification system has the property that the warnings it produces are informative and easy for a designer to understand. If a warning message is informative and easy to understand, the designer can more easily determine whether a warning is real or spurious, and what its cause is. The designer can then act accordingly, correcting the design at the source of the problem, or ignoring the warning, possibly annotating the design so that the warning will be suppressed next time the verification system is run.","An informative warning message should, ideally, include a characterization of the possible defect (e.g., \u201carray index of out bounds\u201d, \u201ctiming constraint not satisfied\u201d, \u201crace condition\u201d, \u201cdeadlock\u201d, \u201cfailure to establish invariant\u201d) and a source location in the behavioral design where the verification system tried, but failed, to show the absence of the defect (e.g., \u201cline 218 of file \u2018ABC.source\u2019\u201d). However, because behavioral designs can include many behaviors that lead to a given source location, a warning message would be even more informative if it provided the sequence or set of behavioral aspects or steps that occur in the scenario of the reported defect, i.e., a program trace. Such behavioral aspects or steps are akin to an execution trace.","There is a class of authoring tools that performs verification functions and generates execution traces. These tools are called dynamic or run-time checkers, because they execute or simulate the execution of the behavioral design in question (i.e., the computer program) and output the active path at the time a possible defect is detected. Examples of such tools are PREfix (Intrinsa Corp., (1998)), which symbolically executes the given program, Testbed Studio, which uses an underlying model checker to perform an exhaustive, back-tracking symbolic simulation of a representation of a given design, and Eraser (Savage, S., et al., \u201cEraser: A Dynamic Data Race Detector for Multi-threaded Programs\u201d, ACM Transactions on Computer Systems (TOCS), 15(4):391\u2013411, November 1997. Also appeared in Proceedings of the Sixteenth ACM Symposium on Operating System Principles, Oct. 5\u20138, 1997, St. Malo, France, Operating System Review 31(5), ACM Press, 1997, ISBN 0-89791-916-5, pp 27\u201337.), which works as the program is actually being executed. In general, run-time checkers entail a number of disadvantages: there may be an overhead to their use, i.e., the program to be checked may be very intensive of resources; some errors in the program may only manifest themselves under certain run-time conditions, such as certain values of the initial parameters; and some errors may be non-reproducible.","By contrast, the present invention falls within a class of program verifiers known as static checkers. Static checkers catch errors at compile time without simulating or executing the program. A research project based on this strategy, the Extended Static Checker (ESC) has been implemented using the technology of program verification. With the ESC, as with static checkers generally, the behavioral design has been annotated by a developer so that the verification condition contains entries associated with specific positions in the source code of the program. The ESC represents a compromise between the rigorous demands of complete program verification and the limited utility of traditional static checkers. Use of a static checker can be important because the cost of a programming error can be greatly reduced if it is detected early in the development process.","Whereas hitherto, static checkers have been successful in pointing out specific source locations where errors or potential errors arise, their applicability has been limited in part because the designer must still ascertain the path that the program took to the error. Accordingly, it is an object of the present invention to cause a static checker to produce program traces that illustrate the possible run-time conditions (e.g., variable values and program execution path) that give rise to the error.","The present invention is a system and method for statically analyzing a specified computer program. A verification condition generator converts the program into a logical equation called a verification condition, and inserts program flow control labels into sub-equations of the verification condition. The flow control labels identify conditional branch points in the specified computer program. In a preferred embodiment, the computer program is converted into an intermediate language form before being converted into the logical equation.","In a preferred embodiment, at least one of the flow control labels is of the form {LBLPOS L P} or {LBLPOS L True}==>P wherein L is a flow control label name. In another embodiment, at least one of the flow control labels is of the form L==>P or is of the form L=k==>P wherein L is a flow control label name, k is a constant value and P is a subcomponent of the verification condition. In a further preferred embodiment, the flow control label name comprises a string that identifies the type of branch in the program, a line number in the specified computer program and, optionally, a column number on the line number.","A theorem prover is applied to the logical equation to determine the truth of the logical equation, and when the truth of the logical equation cannot be proved, the theorem prover generates at least one counter-example identifying a verification sub-condition (which corresponds to a desired program behavior), one or more variable values inconsistent with the verification sub-condition, and any of the flow control labels for conditional branch points of the program that direct the program to produce the identified variable values.","A post processing module converts each counter-example into an error message that includes a program trace when the counter-example identifies one or more of the flow control labels.","Referring to , the present invention may be implemented using a programmed general-purpose computer system . The computer system  includes: (a) one or more data processing units (CPU's) ; (b) memory , which will typically include both high speed random access memory as well as non-volatile memory (such as one or more magnetic disk drives); (c) a user interface ; (d) a network or other communication interface  for communicating with other computers as well as other devices; and (e) one or more communication busses  for interconnecting the CPU(s) , memory , user interface , and network interface .","The computer system's memory  stores procedures and data, typically including:\n\n","The verification condition static checking system  preferably includes:\n\n","The present invention has been implemented for the language Java in a research project at Compaq called ESC\/Java. See, for example, Leino, K. R. M., et al., \u201cESC\/Java User's Manual\u201d, SRC Technical Note 2000-002, Compaq Computer Corporation Systems Research Center, October 2000, also available at http:\/\/gatekeeper.dec.com\/pub\/DEC\/SRC\/technical-notes\/SRC-2000-002.html.","ESC\/Java performs modular checking: it can be used to check selected modules of a program without checking the entire program. This aspect facilitates use of ESC\/Java with programs that rely on libraries. ESC\/Java also permits checking for selected classes of errors: for example it is possible to check for deadlocks and race conditions without checking for array index bounds errors.","The present invention is used much in the same way as a type checker or like the C tool lint so that its warnings are of greatest meaning to the author of the program being checked.","Overview of the Method of the Present Invention","The operation of a preferred embodiment of the present invention is described with reference to . The annotated program , or behavioral design, to be checked is first processed by the verification condition generator . For a description concerning verification condition generation see K. Rustan M. Leino, \u201cEcstatic: An object-oriented programming language with an axiomatic semantics,\u201d Proceedings of the Fourth International Workshop on Foundations of Object-Oriented Languages, January 1997; and K. Rustan M. Leino, James B. Saxe, and Raymie Stata, \u201cChecking Java programs via guarded commands,\u201d Technical Note 1999-002, Compaq Systems Research Center, Palo Alto, Calif., May 1999.","The program annotations in the input program or design are supplied by the program developer or by an automatic annotation assistant, or both. VC annotations used with the present invention are described subsequently, and are distinct from program annotations. The verification condition generator  first converts the annotated program  to an intermediate programming language that facilitates analysis of the program, and then performs a second conversion to generate a \u201clogical equation\u201d that represents the verification condition (VC)  for the program. In a preferred embodiment, the intermediate programming language is a version of Dijkstra's guarded commands (Dijkstra, E. W., , Prentice-Hall, (1976); see also, Nelson, G., \u201cA Generalization of Dijkstra's Calculus\u201d, ACM Transactions on Programming Languages and Systems, 11(4):517\u201361, April 1989). The weakest precondition equations of Dijkstra are used to generate the VC. Alternate embodiments can utilize other logical rules, such as Hoare logic, to generate the VC (see Hoare, \u201cAn axiomatic basis for computer programming,\u201d Communications of the ACM, vol. 12, no. 10, pp. 576\u2013580, 583, October 1969). It is within the scope of the present invention for the VC generator to convert the annotated program to the logical equation without using an intermediate programming language.","An important function of the VC generator  is to insert flow control labels into the translated form of the program, as will be discussed in more detail below. The verification condition includes embedded flow control labels, which are implemented in a preferred embodiment as the LBLPOS and LBLNEG labels discussed below and shown in Tables 7 and 9. The logical equation that is the verification condition is typically a long list of logical sub-equations. Various subsets and combinations of the sub-conditions must be conclusively proved to be true for all possible program conditions. For example, a VC may be expressed as STU, where each of S, T and U is a sub-condition and  is the logical AND operator. Each of S, T and U comes separately from some component of the annotated program or its translated form. Each of S, T and U must separately be true in order for the VC to hold.","In another embodiment of the present invention, the VC is the starting point, that is, the invention need not go through the step of creating the VC, but instead inserts flow control labels directly into the VC.","The theorem prover is refutation-based: to prove a verification condition VC, the prover attempts to satisfy VC, where  is the logical negation operator, by finding sets of program conditions that cause VC to be false. Accordingly, the job of the theorem prover  is to symbolically evaluate the sub-equations of the verification condition, for all possible program conditions, to determine which ones (if any) it cannot conclusively prove to be true. In program verification, the failure to satisfy VC implies that the verification condition is valid and the program meets its specifications. Under these circumstances, as the theorem prover is unable to refute the verification condition, it exits and provides the user with a conclusion . Such an outcome does not necessarily mean that the program is entirely correct, it only implies that no errors in specified categories have been found. Other categories of errors are the programmer's responsibility. On the other hand, failure to prove any sub-equation to always be true means that one or more of the pre-conditions or post-conditions required for proper operation of the program is not satisfied, or may potentially not be satisfied (if the theorem prover is not able to prove the truth of a sub-equation, even though it is in fact true).","In the method of the present invention, because the program is being checked for a prescribed set of properties, the satisfaction of VC gives an error context for the original program. Accordingly, for each sub-equation whose truth cannot be proved and which is marked with a condition label, the theorem prover generates one or more counter-examples . A counter-example is typically a set of variable values that violates a specified one of the conditions required for proper operation of the program. Thus, a counter-example must identify the instruction or instruction element associated with a condition, the condition itself, and the set of variable values that cause the condition to be not true.","When using the present invention, a counter-example may also include one or more flow control labels, which identify a path through the program that produces the variable values and error in the counter-example. In some circumstances, a counter-example may not include any flow control labels because all program paths can result in the variable values in the counter-example.","The counter-examples are passed to an analysis module , also called the post processor, which converts the counter-examples into error messages , including program trace information that identifies the path through the program required to produce the variable values in the counter-example. Typically, the variables in the counter-example are given names that are uniquely indicative of their location in the source. Such names facilitate analysis by the post-processor module . The post-processor  is preferably a parse-engine that recognizes flow control labels within the VC and extracts relationships between them.","VC Annotations (Flow Control Labels) Used by the Present Invention","The present invention generates a VC such that the post-processing of counter-examples obtained by attempting to refute the VC can produce informative warning messages. To be informative, the warning messages must be as specific as possible. The ability to identify a location in the source where an error arises is well known in the art, but the error messages produced are not as informative as one might wish because they do not reveal the path that the program would take to encounter the error.","Accordingly, the method of the present invention inserts information into the VC that does not change the validity of the VC, but is such that the presence or absence of parts of this information in a counter-example provides sufficient data from which to reconstruct one or more execution or program traces that may violate desirable properties. An execution trace of this sort is not one that is produced as the program runs, rather it is one that is deduced from the information presented in the counter-example.","The information in the VC that permits reconstruction of an execution trace may be introduced in a number of different ways. The information may derive from annotations, such as flow control labels, inserted into the behavioral design or computer program , from annotations introduced into the guarded command form of the program or from annotations put directly into the VC itself.","In a preferred embodiment, in order to use the execution tracing feature of the verification condition static checking module , the program to be analyzed is typically annotated to indicate program specific pre-conditions and post-conditions that are to be verified. Examples of such conditions are provided below. Other conditions that are not program specific, such as making sure that no instruction \u201cdereferences\u201d a null pointer and that no instruction accesses an array element outside the array's boundaries, may be automatically checked by the module , even without annotation of the program. Such automatic checks are often found within static checkers of the prior art and can typically be overridden with specific annotations. Providing annotations to override automatic checks is useful, for instance, when the verifier module generates an spurious warning message for a particular instruction or program element.","To implement the invention, as shown in , a \u201cname\u201d or label is associated with each subcomponent of the design to which a verification condition applies. A subcomponent is an instruction or a portion of an instruction. In particular, subcomponents that control the execution of an annotated program , such as conditional branch points, are identified, step . Flow control labels are inserted into the program, step  and persist when and if the program is converted to an intermediate language, step . Alternately, steps  and  are performed while converting the program into an intermediate language. A verification condition is then generated from the annotated program, step .","Ultimately, the aforementioned flow control labels are attached to the verification condition so that they will appear in the counter-example context whenever information about the instructions appears in the counter-example. In general, the VC has a structure that corresponds to the structure of the program. Examples of label names and the way in which they are used are given below.","A label name \u201cL\u201d can be attached to a portion \u201cP\u201d of a verification condition in one of a variety of ways. Four exemplary cases in which labels can be applied are as follows:\n\n","Case 1: L==>P","The first case can be described with reference to an exemplary program control structure, represented in pseudo-code as follows:\n\n","To find whether this portion of code is always correct, the corresponding portion of the VC is the following mathematical formula:\n\n","When the VC is tackled by the theorem prover, it is desirable to know whether a particular counter-example is associated with a particular branch in a control structure such as that shown above. Accordingly, names associated with subcomponents of the control structure are caused to appear within the counter-examples. By attaching a name, L, with subcomponent P of the formula, the subcomponent can itself be replaced by an expression of the form L==>P in the VC. For this device to work, L must be a predicate whose name has not been used elsewhere within the VC. For some theorem provers, it may be necessary to declare that L is a predicate. L can also be thought of as a boolean variable.","In order to find a counter-example, the theorem prover tests for failures of the subcomponent L==>P. For this purpose, it is instructive to consider the truth table for the \u201cimplies\u201d operator. The only circumstance under which L==>P is false is when L is true and P is false, i.e., L  P. (The situation where L is false implies nothing at all about P.) For the theorem prover to construct a counter-example, that counter-example must contain L=True. Accordingly, the theorem prover attempts to refute the VC by inventing assignments to predicates and variables so that L is found to be true, but P is false and, hence, the entire VC is false. The theorem prover is not constrained by the values it can assign to L because L is a fresh variable. Furthermore, any counter-example now produced by the theorem prover includes L.","In accordance with the present invention, at least one label L inserted in a program is a flow control label and is associated with a particular conditional branch direction (e.g., the \u201cTHEN\u201d or \u201cELSE\u201d branch of an IF statement). The inclusion of the label L in the counter-example allows the user to determine the execution path of the program associated with the counter-example because the presence of the label in the counter-example indicates which branch direction was taken to arrive at the program state that violates a sub-condition of the VC for the program.","Case 2: L=k==>P","In the second case, L is not a predicate but takes the role of a term and k is a constant. For example, L may be an integer variable and k may be a particular integer value, such as 17. Thus, in a similar manner to the above, a subcomponent of the formula can also be replaced by an expression of the form L=k==>P in the VC. The reason for distinguishing the type of L in the first and second cases is that some theorem provers do not permit arbitrary names to be assigned to predicates, so L must be an integer variable. In general, a theorem prover may act differently on a predicate than on an integer variable.","As with the previous case, when the theorem prover finds a counter-example, it is such that the left hand side of the implies statement is true and the right hand side is false. In the above example, the left hand side of the implies statement is true if L=17. Accordingly, if the theorem prover finds a counter-example, within that counter example it can be found that L=17.","Ideally, a mechanism should be employed to prevent the theorem prover from producing counter-examples in which conditions such as L=17 (or L=True for Case 1, above) are printed but where such conditions are irrelevant. For example, when the theorem prover is working on an expression R that has not been labeled with L, if a situation is found in which R is false, then this situation holds whatever the value of L. If the theorem prover printed out L=17 in these circumstances, the output would be confusing. Accordingly, appropriate heuristic mechanisms are employed to ensure that labels such as L are only printed out when applicable to the subcomponents in question. In particular, these heuristic mechanisms prevent the label L from being included in a counter-example when the truth or falsity of the sub-condition associated with the label is not relevant to the counter-example. Stated another way, if the part of the VC where the label is located is the part which the theorem prover has been unable to prove, then the label will normally be included in the counter-example.","The first and second cases therefore show how a label associated with a particular subcomponent of a program can be caused to be included in a verification condition. An alternate embodiment can be envisaged in which L is assigned to a string variable instead of a boolean or an integer variable.","Case 3: LBLNEG and LBLPOS","Logically, a statement such as L==>P is equivalent to L V P. Because of this equivalence, a theorem prover normally has to consider two possible routes through the program separately. Where there are many such branches, the situation can become complex. For example, n branches leads to 2possible routes. In this context, the LBLPOS and LBLNEG constructs can both be utilized in flow control labels within the VC so that program or execution trace information can be revealed. When the VC contains flow control labels in subexpressions of the VC, using the LBLPOS and LBLNEG constructs, the counter-examples produced by the theorem prover also contain flow control labels. The LBLPOS and LBLNEG constructs can be wielded in a number of different ways, depending upon context.","In order to generate program trace information, a flow control label is inserted into conditional branch instructions in the program by the verification condition generator. Only conditional branch points of the program need to be labeled with flow control labels. This is because the sequence of branches that a program takes is the information needed to follow the sequence of events in a counter-example that illustrates an error or potential error condition. However, it may be helpful to label additional program statements as well to produce more complete program flow information and thus easier to understand counter-examples.","In general, a LBLPOS flow control label is included in the output produced by the theorem prover if the condition associated with the label is true in and relevant to the counter-example. A LBLNEG flow control label is included in the output produced by the theorem prover if the condition associated with the label is false in and relevant to the counter-example.","The context of each LBLNEG or LBLPOS\u2014flow control label has the form {LBLNEG label condition} or {LBLPOS label condition}. In a preferred embodiment, the \u201clabel\u201d identifies the line number of the instruction and the line position of the instruction operand or operator such as \u201cthen\u201d or \u201celse\u201d that is the subject of the program condition, and the \u201ccondition\u201d specifies the program condition to be applied and the variable or other instruction element to which it is to be applied or can be \u201ctrue\u201d or \u201cfalse\u201d.","By way of illustration, if\n\n","Next, let us consider a condition P of a verification condition that is annotated using the label \u201cLBLPOS L\u201d,\n\n","A further illustration of LBLPOS is as follows:\n\n","In this case, the condition P is replaced by True. Since True can always be made to be a part of any counter-example, label L would theoretically be produced with every counter-example, a result that would not be particularly useful. Instead, heuristics are used so that L is only produced where condition P is in the part of the VC identified by the theorem prover as potentially containing an error.","It is noted that a logical equivalent of (LBLPOS L P) is (LBLNEG L P). Uses of the LBLNEG and LBLPOS constructs are further illustrated and described in the Example, below.","Case 4: (LBLPOS L true)==>P","A further use of LBLPOS and LBLNEG is mathematically equivalent to the previous case. In general, the best way to attach a name to a portion of a verification condition may depend on the particular theorem prover used, and is not limited to the four examples given above.","In one embodiment of the present invention, flow control labels are assigned to a program prior to converting the annotated program to guarded command form. In another embodiment, flow control labels are assigned while converting the annotated program to guarded command form.","Ultimately, the LBLNEG and LBLPOS constructs serve as flags to alert the theorem prover that what immediately follows is a label name. In a preferred embodiment, each label name indicates the position in the source program of the subcomponent to which the label applies. In one embodiment, all labels begin with \u201ctrace.\u201d, for ease of recognition. A further component of the label name can be \u201cthen\u201d to denote that an IF branch of a choice control structure was taken, or \u201celse\u201d to denote that an ELSE branch was taken. A label name can also optionally contain one or more separators such as \u201c^\u201d. In a preferred embodiment, a label name contains a line and column number and, for example, a sequence number indicating the order of execution of the program statements that have been labeled. When a program contains a loop, which may be \u201cunfolded\u201d more than once while generating the VC, or contains a subprocedure that has been inlined more than once, the sequence number in the label name enables the user (typically a programmer) to determine which occurrence of the program statement is implicated in the error condition. An example of a label name is \u201ctrace.ElseA^2,8.11\u201d wherein the Else instruction is found at column 11 of line 8 of the annotated program and is the third instruction in the program to have a flow control label. An alternative naming scheme can be envisaged in which labels L are assigned a characteristic set of characters, e.g., \u201cXX\u201d followed by a number, in sequence, e.g., 1708. An accompanying table serves to correlate the variable names with their respective positions in the annotated program.","In a preferred embodiment, when presenting a counter example, the label names of statements implicated in the error condition are presented in the order dictated by their sequence numbers (\u201csequence number order\u201d).","Names appearing in a counter-example are extracted by the post-processor  . In turning these extracted names into a program trace for the warning message, the post-processor uses the recorded association between the name and the subcomponent of the design. For applications of the invention where the actions or steps in execution traces are ordered, the order of the associated subcomponents can be used to sort the reconstructed parts of the execution trace.","Operation of a Preferred Embodiment","Operation of a preferred embodiment of the present invention will be explained through an example, shown here in Tables 1 through 13.","Table 1 shows an example of a Java program that is to be checked by the verification condition static checking module  (program verifier).",{"@attributes":{"id":"p-0070","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"An example Java program, T.java used as input to the Verification Condition Static Checking"},{"entry":"Module. Line numbers are shown at the left hand side, beginning at line 1, and column"},{"entry":"numbers, beginning at column 0, in groups of 10 are shown at the top."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"01234567890123456789012345678901234567890"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1","class T {"]},{"entry":[{},"2","\u2002\u2009static int x;"]},{"entry":[{},"3"]},{"entry":[{},"4","\u2002\u2009static void m(int[] a, int[] b) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"5","\u2002int[] c;"]},{"entry":[{},"6","\u2002if (a != null) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"7","c = a;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"8","\u2002} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"9","c = b;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"10","\u2002}"]},{"entry":[{},"11","\u2002x = c.length;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"12","\u2002}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"13","}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In the Java program illustrated in Table 1, line 11 can only execute if c is not null. Accordingly, an appropriate check for the theorem prover is to establish whether c could ever be null and to produce a counter-example with a program or execution trace that shows how line 11 could be caused to execute with c null.","It can be seen that variable c is assigned in lines 11 and 13, in both branches of an if . . . then . . . else control structure. Execution of one of these branches gives rise to a potential error at line 11. It is an object of the present invention to show which of those branches is responsible.","Tables 2\u20136 represent an example of the operation of a program verifier that does not use the present invention. The operation of such a program will be contrasted with the operation of the present invention, as shown in Tables 7\u201313.","Table 2 shows the output generated by a program verifier module that does not utilize the present invention. A potential null dereferencing error is identified, but the error message does not provide an execution trace to indicate how the object reference \u201cc.length\u201d could have a null value.",{"@attributes":{"id":"p-0075","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"Output from prior art program verifier when applied to the program of Table 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"T.java:11: Warning: Possible null dereference (Null)"]},{"entry":[{},"\u2002\u2009\u2009\u2009\u2009x = c.length;"]},{"entry":[{},"1 warning{circumflex over (\u2009)}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The program verifier first produces an intermediate language representation of the program. In this example, the intermediate representation is in guarded command language, shown in Table 3.",{"@attributes":{"id":"p-0077","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"An intermediate-language program produced from the Program in Table 1,"},{"entry":"without applying the present invention"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","ASSUME boolAnd(is(a:4.22, type(int[])), isAllocated(a:4.22, alloc));"]},{"entry":["2","ASSUME boolAnd(is(b:4.31, type(int[])), isAllocated(b:4.31, alloc));"]},{"entry":["3","VAR int[] a@pre:4.22; int[] b@pre:4.31 IN"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["4","a@pre:4.22 = a:4.22;"]},{"entry":["5","b@pre:4.31 = b:4.31;"]},{"entry":["6","{\u2003\u2002VAR int[] c:5.10 IN"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["7","\u2009\u2009\u2009\u2009{\u2002\u2009ASSUME refNE(a:4.22, null);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["8","\u2009\u2009\u2009\u2009\u2009c:5.10 = a:4.22"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["9","\u2009\u2009\u2009\u2009[]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["10","\u2009\u2009\u2009\u2009\u2009ASSUME boolNot(refNE(a:4.22, null));"]},{"entry":["11","\u2009\u2009\u2009\u2009\u2009c:5.10 = b:4.31"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["12","\u2009\u2009\u2009\u2009};"]},{"entry":["13","\u2009\u2009\u2009\u2009ASSERT (LBLNEG Null@11.9 refNE(c:5.10, null));"]},{"entry":["14","\u2009\u2009\u2009\u2009x:2.13 = arrayLength(c:5.10)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["15","\u2003\u2003END;"]},{"entry":["16","\u2003\u2003EC = ecReturn"]},{"entry":["17","!\u2003\u2002SKIP"]},{"entry":["18","};"]},{"entry":["19","RESTORE a:4.22 FROM a@pre:4.22;"]},{"entry":["20","RESTORE b:4.31 FROM b@pre:4.31"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["21","END;"]},{"entry":["22","ASSERT (LBLNEG Exception:4.14@12.2 anyEQ(EC, ecReturn))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"For every proof obligation, an ASSERT statement is introduced into the intermediate language form. The ASSERT statement also eventually makes it into the VC.","The ASSERT statement at line 13 of Table 3 denotes a condition that needs to be proved, i.e., must hold for the program to correctly execute. Such an assert is ordinarily automatically inserted for any dereference operation. The use of LBLNEG here is so that the theorem prover will report the label if the condition that follows is false in the counter-example. (Thus this use of the LBLNEG construct is not as part of a flow control label.) The term \u201cNull@11.9\u201d in the same line denotes a check for a null dereference at line 11, column 9 of the original program. The \u2018@\u2019 symbol is used in labels as a symbol that the post-processor can find easily. A notation like this makes it easier for the theorem prover to parse the guarded command form and identify potential problems for illustration in the counter-examples. In Table 3, the term \u201crefNE\u201d means reference not equal. In line 13 of Table 3, the refE operator refers to variable c and null. Variable c is identified as \u201cc:5.10\u201d to denote that it is the variable that is declared at line 5, column 10 of the original program in Table 1.","The guarded command representation is, in turn, converted into the logical equation, called the verification condition, shown in Table 4. The verification condition includes many sub-equations. When any of these sub-equations can be evaluated to a value that causes the verification condition to be false, that situation represents an error or potential error (or a failure or weakness of the theorem prover). Each such sub-equation is identified as a counter-example, an example of which is shown in Table 5.",{"@attributes":{"id":"p-0081","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The verification condition produced from the intermediate-language program of Table 3."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","(IMPLIES"]},{"entry":["2","\u2009(AND (DISTINCT |ecReturn|))"]},{"entry":["3","\u2009(LBLNEG"]},{"entry":["4","\u2009\u2009\u2009|vc.T.m.4.2|"]},{"entry":["5","\u2009\u2009\u2009(IMPLIES"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["6","(AND"]},{"entry":["7","\u2009\u2009(EQ |x@pre:2.13| |x:2.13|)"]},{"entry":["8","\u2009\u2009(EQ |@true| (is |x:2.13| |T_int|))"]},{"entry":["9","\u2009\u2009(EQ |elems@pre| elems)"]},{"entry":["10","\u2009\u2009(EQ elems (asElems elems))"]},{"entry":["11","\u2009\u2009(< (eClosedTime elems) alloc)"]},{"entry":["12","\u2009\u2009(EQ LS (asLockSet LS))"]},{"entry":["13","\u2009\u2009(EQ |alloc@pre| alloc)"]},{"entry":["14","\u2009\u2009(EQ |@true| (is |a:4.22| (array |T_int|)))"]},{"entry":["15","\u2009\u2009(EQ |@true| (isAllocated |a:4.22| alloc))"]},{"entry":["16","\u2009\u2009(EQ |@true| (is |b:4.31| (array |T_int|)))"]},{"entry":["17","\u2009\u2009(EQ |@true| (isAllocated |b:4.31| alloc)))"]},{"entry":["18","(FORALL"]},{"entry":["19","\u2009\u2009(|a@pre:4.22| |b@pre:4.31| |c:5.10|)"]},{"entry":["20","\u2009\u2009(AND"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["21","(IMPLIES"]},{"entry":["22","\u2009(NEQ |a:4.22| null)"]},{"entry":["23","\u2009(AND"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["24","(LBLNEG |Null@11.9| (NEQ |a:4.22| null))"]},{"entry":["25","(FORALL"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["26","(|x:11.4|)"]},{"entry":["27","(IMPLIES"]},{"entry":["28","\u2002(EQ |x:11.4| (arrayLength |a:4.22|))"]},{"entry":["29","\u2002(LBLNEG |Exception:4.14@12.2| (EQ |ecReturn| |ecReturn|"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"210pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009\u2009))))))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["30","(IMPLIES"]},{"entry":["31","\u2002(NOT (NEQ |a:4.22| |null))"]},{"entry":["32","\u2002(AND"]},{"entry":["33","\u2009\u2009(LBLNEG |Null@11.9| (NEQ |b:4.31| null))"]},{"entry":["34","\u2009\u2009(FORALL"]},{"entry":["35","\u2009\u2009\u2009\u2009\u2009(|x:11.4|)"]},{"entry":["36","\u2009\u2009\u2009\u2009\u2009(IMPLIES"]},{"entry":["37","\u2009\u2009\u2009\u2009\u2009(EQ |x:11.4| (arrayLength |b:4.31|))"]},{"entry":["38","\u2009\u2009\u2009\u2009\u2009(LBLNEG |Exception:4.14@12.2| (EQ |ecReturn|"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009\u2009\u2009\u2009|ecReturn|)))))))))))"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In Table 4, the occurrence of the potential null dereference at line 11, column 9 of the original annotated program is indicated by the LBLNEG in two places, lines 24 and 33. Each of these two places corresponds to one of the two possible branches in the original program. The difficulty is that neither of these labels, when included in the counter-example output produced by the theorem prover, gives an indication of how the program progressed prior to encountering the error condition.",{"@attributes":{"id":"p-0083","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Output of Theorem Prover"},{"entry":"(based on input of Table 4 and the context axioms associated with the program of Table 1)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Counter-example labels (|vc.T.m.4.2| |Null@11.9|)"]},{"entry":[{},"counter-example context"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(AND"]},{"entry":[{},"\u2002\u2009\u2009TRUE"]},{"entry":[{},"\u2002\u2009\u2009(<= |x:2.13| intLast)"]},{"entry":[{},"\u2002\u2009\u2009(<= intFirst |x:2.13|)"]},{"entry":[{},"\u2002\u2009\u2009(< (eClosedTime |elems@pre|) |alloc@pre|)"]},{"entry":[{},"\u2002\u2009\u2009. . ."]},{"entry":[{},"\u2002\u2009\u2009(EQ |a:4.22| null)"]},{"entry":[{},"\u2002\u2009\u2009(EQ |b:4.31| null)"]},{"entry":[{},"\u2002\u2009\u2009(EQ |elems@pre| elems)"]},{"entry":[{},"\u2002\u2009\u2009(EQ |x@pre:2.13| |x:2.13|)"]},{"entry":[{},"\u2002\u2009\u2009(NEQ |bool$false| |@true|)"]},{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"It is from this counter-example (in particular, the labels shown in the first line of the counter-example) that the program verifier produces the error message shown in Table 2. Table 5 purposefully omits some portions of the counter-example context that are not relevant to this explanation.","By contrast, Tables 6, 7, 9, and 11 represent an example of the operation of a program verifier that uses the present invention.","Table 6 shows the output generated by a program verifier module that utilizes the present invention. A potential null dereferencing error is identified, along with a program trace that indicates how the object reference \u201cc.length\u201d could have a null value.",{"@attributes":{"id":"p-0087","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Output from the Program Verifier of the present invention"},{"entry":"(based on program of Table 1, applying the present invention)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"T.java:11: Warning: Possible null dereference (Null)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009\u2009\u2002x = c.length;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Execution{circumflex over (\u2009)}trace information:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2009\u2009\u2002Executed else branch in \u2033T.java\u2033, line 8, col 11."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1 warning"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The program verifier of the present invention produces an intermediate language representation of the program, shown in Table 7.",{"@attributes":{"id":"p-0089","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The intermediate-language program produced from the program in Table 1 by the"},{"entry":"verification condition generator, applying the present invention."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","ASSUME boolAnd(is(a:4.22, type(int[])), isAllocated(a:4.22, alloc));"]},{"entry":["2","ASSUME boolAnd(is(b:4.31, type(int[])), isAllocated(b:4.31, alloc));"]},{"entry":["3","VAR int[] a@pre:4.22; int[] b@pre:4.31 IN"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["4","a@pre:4.22 = a:4.22;"]},{"entry":["5","b@pre:4.31 = b:4.31;"]},{"entry":["6","{\u2003\u2002VAR int[] c:5.10 IN"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["7","\u2009\u2009{\u2002\u2009ASSUME refNE(a:4.22, null);"]},{"entry":["8","\u2009\u2009\u2003\u2009ASSUME (LBLPOS trace.Then{circumflex over (\u2009)}0,6.19 true);"]},{"entry":["9","\u2009\u2009\u2003\u2009c:5.10 = a:4.22"]},{"entry":["10","\u2009\u2009[]"]},{"entry":["11","\u2009\u2009\u2003\u2009ASSUME boolNot(refNE(a:4.22, null));"]},{"entry":["12","\u2009\u2009\u2003\u2009ASSUME (LBLPOS trace.Else{circumflex over (\u2009)}1,8.11 true);"]},{"entry":["13","\u2009\u2009\u2003\u2009c:5.10 = b:4.31"]},{"entry":["14","\u2009\u2009};"]},{"entry":["15","\u2009\u2009ASSERT (LBLNEG Null@11.9 refNE(c:5.10, null));"]},{"entry":["16","\u2009\u2009x:2.13 = arrayLength(c:5.10)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["17","\u2009\u2009\u2009\u2009\u2009\u2009\u2009END;"]},{"entry":["18","\u2009\u2009\u2009\u2009\u2009\u2009\u2009EC = ecReturn"]},{"entry":["19","!\u2009\u2009\u2009\u2009\u2009\u2009SKIP"]},{"entry":["20","};"]},{"entry":["21","RESTORE a:4.22 FROM a@pre:4.22;"]},{"entry":["22","RESTORE b:4.31 FROM b@pre:4.31"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["23","END;"]},{"entry":["24","ASSERT (LBLNEG Exception:4.14@12.2 anyEQ(EC, ecReturn))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 7 again uses the guarded command form. Note that this time, in contrast to Table 3, the intermediate language representation of the program includes flow control labels that identify the line and position of the \u201cthen\u201d and \u201celse\u201d instruction elements in the program as can be seen at lines 8 and 12 of Table 7 where LBLPOS flow control labels are printed. Note that the names of the labels include line and column numbers that represent the positions in the program at which they apply. The way in which LBLPOS flow control labels have been used in this example is that of Case 4, discussed above. The format of the flow control labels in this example is {LBLPOS Label True}. The names of the labels are respectively characteristic of the \u201cthen\u201d and \u201celse\u201d branch.","Table 8 shows the differences between the two intermediate language representations of Tables 3 and 7 to highlight the difference between the verification system of the prior art and the present invention. The version of the verifier module that utilizes the present invention inserts flow control labels in lines 8 and 12 of the intermediate language representation.",{"@attributes":{"id":"p-0092","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The differences between Tables 3 and 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"The following two lines of Table 7 are not present in Table 3:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Line 8:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2002\u2009ASSUME (LBLPOS trace.Then{circumflex over (\u2009)}0,6.19 true);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Line 12:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2002\u2009ASSUME (LBLPOS trace.Else{circumflex over (\u2009)}1,8.11 true);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"There are no other differences."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The intermediate language representation of the program is converted into the logical equation, called the verification condition, shown in Table 9.",{"@attributes":{"id":"p-0094","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The verification condition produced from the intermediate-language program of Table 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","\u2009(IMPLIES"]},{"entry":["2","\u2009\u2009(AND (DISTINCT |ecReturn|))"]},{"entry":["3","\u2009\u2009(LBLNEG"]},{"entry":["4","\u2003|vc.T.m.4.2|"]},{"entry":["5","\u2003(IMPLIES"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["6","\u2002(AND"]},{"entry":["7","\u2009\u2009\u2009\u2009(EQ |x@pre:2.13| |x:2.13|)"]},{"entry":["8","\u2009\u2009\u2009\u2009(EQ |@true| (is |x:2.13| |T_int|))"]},{"entry":["9","\u2009\u2009\u2009\u2009(EQ |elems@pre| elems)"]},{"entry":["10","\u2009\u2009\u2009\u2009(EQ elems (asElems elems))"]},{"entry":["11","\u2009\u2009\u2009\u2009(< (eClosedTime elems) alloc)"]},{"entry":["12","\u2009\u2009\u2009\u2009(EQ LS (asLockSet LS))"]},{"entry":["13","\u2009\u2009\u2009\u2009(EQ |alloc@pre| alloc)"]},{"entry":["14","\u2009\u2009\u2009\u2009(EQ |@true| (is |a:4.22| (array T_int|)))"]},{"entry":["15","\u2009\u2009\u2009\u2009(EQ |@true| (isAllocated |a:4.22| alloc))"]},{"entry":["16","\u2009\u2009\u2009\u2009(EQ |@true| (is |b:4.31| (array |T_int|)))"]},{"entry":["17","\u2009\u2009\u2009\u2009(EQ |@true| (isAllocated |b:4.31| alloc)))"]},{"entry":["18","\u2002(FORALL"]},{"entry":["19","\u2009\u2009\u2009\u2009(|a@pre:4.22| |b@pre:4.31| |c:5.10|)"]},{"entry":["20","\u2009\u2009\u2009\u2009(AND"]},{"entry":["21","\u2009\u2009\u2009\u2009\u2009(IMPLIES"]},{"entry":["22","\u2009\u2009\u2009\u2009\u2009\u2009(AND (NEQ |a:4.22| null) (LBLPOS |trace.Then{circumflex over (\u2009)}0,6.19| TRUE))"]},{"entry":["23","\u2009\u2009\u2009\u2009\u2009\u2009(AND (LBLNEG |Null@11.9| (NEQ |a:4.22| null))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["24","\u2003(FORALL"]},{"entry":["25","\u2009\u2009\u2009\u2009(|x:11.4|)"]},{"entry":["26","\u2009\u2009\u2009\u2009(IMPLIES"]},{"entry":["27","\u2009\u2009\u2009\u2009(EQ |x:11.4| (arrayLength |a:4.22|))"]},{"entry":["28","\u2009\u2009\u2009\u2009(LBLNEG |Exception:4.14@12.2| (EQ |ecReturn| ecReturn|))))))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["29","\u2009\u2009\u2009\u2009\u2009(IMPLIES"]},{"entry":["30","\u2009\u2009\u2009\u2009(AND (NOT (NEQ |a:4.22| null)) (LBLPOS |trace.Else{circumflex over (\u2009)}1,8.11| TRUE))"]},{"entry":["31","\u2009\u2009\u2009\u2009\u2009\u2009(AND (LBLNEG |Null@11.9| (NEQ |b:4.31| null))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["32","\u2003(FORALL"]},{"entry":["33","\u2009\u2009\u2009\u2009(|x:11.4|)"]},{"entry":["34","\u2009\u2009\u2009\u2009(IMPLIES"]},{"entry":["35","\u2009\u2009\u2009\u2009(EQ |x:11.4| (arrayLength |b:4.31|))"]},{"entry":["36","\u2009\u2009\u2009\u2009(LBLNEG |Exception:4.14@12.2| (EQ |ecReturn| |ecReturn|"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["37",")))))))))))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"This Table shows also the two occurrences of LBLNEG, at lines 23 and 31, corresponding to the check for a null dereference at line 11 of the original program. The two occurrences of LBLPOS, corresponding to the \u201cthen\u201d and \u201celse\u201d branches of the original program are also shown in table 9, at lines 22 and 30, respectively. Both occurrences of LBLPOS are found within an IMPLIES context, expressed in table 9 in the \u2018prefix\u2019 notation, i.e., \u201cx==>y\u201d is written as (IMPLIES (x)(y)). For example, the literal expression of lines 21\u201323 is:\n\n((NULL)(LBLPOS trace.Then^0,6.19 TRUE))==>((LBLNEG Null@11.9(NULL)) . . . )\n","Therefore, the verification condition in Table 9 includes expressions that contain both the LBLNEG labels for the null-dereferenced variable and the LBLPOS labels that indicate the sides of the branches. This verification condition is a precursor to a more informative presentation in which the position of the null-dereference is connected explicitly to an execution path through the program.","Table 10 shows the differences between the verification conditions shown in Tables 4 and 9. The verification condition generated by the version of the verifier module that utilizes the present invention includes flow control labels in lines 22 and 30 of the verification condition.",{"@attributes":{"id":"p-0098","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 10"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The differences between Tables 4 and 9"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Line 22 of Table 4:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(NEQ |a:4.22| null)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"is replaced in Table 9 by line 22:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(AND (NEQ |a:4.22| null) (LBLPOS |trace.Then{circumflex over (\u2009)}0,6.19| TRUE))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Line 31 of Table 4:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(NOT (NEQ |a:4.22| null))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"is replaced in Table 9 by line 30:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(AND (NOT (NEQ |a:4.22| null)) (LBLPOS |trace.Else{circumflex over (\u2009)}1,8.11| TRUE))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"There are no other differences."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The verification condition shown in Table 9 includes many sub-equations, two of which are labeled with flow control labels. When any of these sub-equations can be evaluated to a value that causes the verification condition to be false, that represents an error or potential error (or a failure or weakness of the theorem prover). Each such sub-equation is identified as a counter-example, an example of which is shown in Table 11.",{"@attributes":{"id":"p-0100","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 11"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Theorem Prover Output"},{"entry":"(based on verification condition of TABLE 9 and the context"},{"entry":"axioms associated with the program of TABLE 1)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Counter-example labels (|vc.T.m.4.2| |trace.Else{circumflex over (\u2003)}1,8.11|"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"|Null@11.9|)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"counter-example context"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(AND"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TRUE"]},{"entry":[{},"(<= |x:2.13| intLast)"]},{"entry":[{},"(<= intFirst |x:2.13|)"]},{"entry":[{},"(< (eClosedTime |elems@pre|) |alloc@pre|)"]},{"entry":[{},". . . "]},{"entry":[{},"(EQ |a:4.22| null)"]},{"entry":[{},"(EQ |b:4.31| null)"]},{"entry":[{},"(EQ |elems@pre| elems)"]},{"entry":[{},"(EQ |x@pre:2.13| |x:2.13|)"]},{"entry":[{},"(NEQ |bool$false| |@true|)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"It is from this counter-example (in particular, the labels shown in the first line of the counter-example) that the program verifier produces the error message shown in Table 6. So, here, the label \u201ctrace. Else^1,8.11\u201d indicates that an execution trace is contemplated and that a branch point encountered prior to the potential error was the \u201celse\u201d branch of line 8. The label \u201cNull@11.9\u201d describes the source of the error as being a null dereference at line 11, column 9.","Table 11 does not include some portions of the counter-example context that are not relevant to this explanation.","Tables 12 and 13 contain simplified versions of Tables 7 and 9, respectively, that make it easier to see the relationship between the portions of the program in which flow control statements have been inserted and the corresponding portions of the verification condition. Lines 5 and 9 of Table 12, which contain flow control labels (LBLPOS), are the ones introduced by the present invention.",{"@attributes":{"id":"p-0104","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 12"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Simplified Version of TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","ASSUME is (a:4.22, type(int[]));"]},{"entry":["2","ASSUME is (b:4.31, type(int[]));"]},{"entry":["3","VAR int[] c:5.10 IN"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["4","{ ASSUME refNE (a:4.22, null);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["5","ASSUME (LBLPOS trace.Then{circumflex over (\u2003)}0,6.19 true);"]},{"entry":["6","c:5.10 = a:4.22"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["7","[]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["8","ASSUME boolNot (refNE (a:4.22, null));"]},{"entry":["9","ASSUME (LBLPOS trace.Else{circumflex over (\u2003)}1,8.11 true);"]},{"entry":["10","c:5.10 = b:4.31"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["11","};"]},{"entry":["12","ASSERT (LBLNEG Null@11.9 refNE (c:5.10, null));"]},{"entry":["13","x:2.13 = arrayLength (c:5.10)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["14","END"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Note that this simplified version of Table 7 shown in Table 12 is only for the purpose of explaining Table 7 and draws attention to the parts that are of interest for understanding the present invention.",{"@attributes":{"id":"p-0106","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 13"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Simplified Version of TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["1","(LBLNEG"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2","|vc.T.m.4.2|"]},{"entry":["3","(IMPLIES"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["4","(AND"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["5","(EQ |@true| (is |x:2.13| |T_int|))"]},{"entry":["6","(EQ |@true| (is |a:4.22| (array |T_int|)))"]},{"entry":["7","(EQ |@true| (is |b:4.31| (array |T_int|))))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["8","(FORALL"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["9","(|c:5.10|)"]},{"entry":["10","(AND"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["11","(IMPLIES"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["12","(AND (NEQ |a:4.22| null) (LBLPOS |trace.Then{circumflex over (\u2003)}0,6.19| TRUE))"]},{"entry":["13","(LBLNEG |Null@11.9| (NEQ |a:4.22| null)))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["14","(IMPLIES"]},{"entry":["15","(AND (NOT (NEQ |a:4.22| null)) (LBLPOS trace.Else{circumflex over (\u2003)}1,8.11| TRUE))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["16","(LBLNEG |Null@11.9| (NEQ |b:4.31| null)))))))"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Note that Table 13 is a simplified version of Table 9, only for the purpose of explaining Table 9, drawing attention to the parts that are of interest for understanding the invention.","The present invention can be implemented as a computer program product that includes a computer program mechanism embedded in a computer readable storage medium. For instance, the computer program product could contain the program modules shown in . These program modules may be stored on a CD-ROM, magnetic disk storage product, or any other computer readable data or program storage product. The software modules in the computer program product may also be distributed electronically, via the Internet or otherwise, by transmission of a computer data signal (in which the software modules are embedded) on a carrier wave.","While the present invention has been described with reference to a few specific embodiments, the description is illustrative of the invention and is not to be construed as limiting the invention. Various modifications may occur to those skilled in the art without departing from the true spirit and scope of the invention as defined by the appended claims."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS","EXAMPLE","Alternate Embodiments"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Additional objects and features of the invention will be more readily apparent from the following detailed description and appended claims when taken in conjunction with the drawings, in which:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
