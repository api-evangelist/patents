---
title: Voice gateway with downstream voice synchronization
abstract: A network gateway is configured to facilitate on line and off line bi-directional communication between a number of near end data and telephony devices with far end data termination devices via a hybrid fiber coaxial network and a cable modem termination system. The described network gateway combines a QAM receiver, a transmitter, a DOCSIS MAC, a CPU, a voice and audio processor, a voice synchronizer, an Ethernet MAC, and a USB controller to provide high performance and robust operation. It is emphasized that this abstract is provided to comply with the rules requiring an abstract which will allow a searcher or other reader to quickly ascertain the subject matter of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or the meaning of the claims.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07023868&OS=07023868&RS=07023868
owner: Broadcom Corporation
number: 07023868
owner_city: Irvine
owner_country: US
publication_date: 20001213
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION(S)","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","A. Voice Synchronization","B. Echo Cancellation","A. The Voice Mode","B. The Fax Relay Mode","C. Data Relay Mode"],"p":["The present application is a continuation-in-part of patent application Ser. No. 09\/548,400, filed Apr. 13, 2000, now U.S. Pat. No. 6,765,931, which claims priority to provisional Application No. 60\/129,134, filed Apr. 13, 1999, Application No. 60\/136,685, filed May 28, 1999, and Application No. 60\/160,124, filed Oct. 18, 1999, Application No. 60\/170,595, filed Dec. 13, 1999 and Application No. 60\/170,592, filed Dec. 13, 1999. The priority of these applications are hereby claimed under 35 U.S.C. \u00a7\u00a7119(e), 120. These applications are expressly incorporated herein by referenced as though fully set forth in full.","The present invention relates generally to telecommunications systems, and more particularly, to a system for interfacing telephony devices with DOCSIS compatible networks.","Traditional dial-up modems provide online access through the public telephone network at up to 56 Kbps (equal to 56,000 bits per second). A cable modem, on the other hand, provides users with high-speed Internet access through a cable television network. Cable modem is capable of providing data rates as high as 56 Mbps, and is thus suitable for high speed Internet access, digital television (such as pay-per-view) and digital telephony.","In one aspect of the present invention, a method of synchronizing data clocked by a first clock to a second clock includes generating a clock error signal as a function of one or more data control flags, and fractionally resampling the data as a function of the offset.","In another embodiment of the present invention, a synchronization circuit, includes an error generation unit that generates a clock error signal as a function of an average far end sampling rate and a near end sampling rate and a sample tracker adapted to receive sampled data packets, wherein the sample tracker fractionally resamples the sampled data as a function of the clock error signal.","In a further aspect of the present invention, a network gateway adapted to exchange voice signals between a network line at a first clock frequency and a packet based network at a second clock frequency, includes a network port to interface with a packet based network; a telephony port to interface with a telephony device; a processor coupled to each of the ports and a voice synchronizer, coupled between the network and telephony ports. The voice synchronizer includes an error generation unit for generating a clock error signal in accordance with the ratio of the first and second clocks and a sample tracker, that receives sampled data packets, and fractionally resamples the sampled data as a function of the clock error signal.","In an exemplary embodiment of a cable modem system, a headend or cable modem termination system (CMTS) is located at a cable company facility and functions as a modem which services a large number of subscribers. Each subscriber has a cable modem (CM). Thus, the cable modem termination system must be capable of facilitating bidirectional communication with any desired one of the plurality of cable modems.","As used herein, the cable modem termination system (CMTS) is defined to include that portion of a headend which facilitates communication with a number of cable modems. A typical cable modem termination system includes a burst receiver, a continuous transmitter and a medium access control (MAC).","The cable modem termination system communicates with the cable modems via a hybrid fiber coaxial (HFC) network, wherein optical fiber provides communication to a number of fiber nodes and each fiber node typically serves approximately 500 to 2,000 subscribers, which communicate with the node via coaxial cable. The subscribers communicate with the fiber node via a common or shared coaxial cable.","The HFC network of a cable modem system utilizes a point-to-multipoint topology to facilitate communication between the cable modem termination system and the cable modems. Frequency domain multiple access (FDMA)\/time division multiplexing (TDM) is used to facilitate communication from the cable modem termination system to each of the cable modems, i.e., in the downstream direction. Frequency domain multiple access (FDMA)\/time domain multiple access (TDMA) is used to facilitate communication from each cable modem to the cable modem termination system, i.e., in the upstream direction.","The cable modem termination system includes a downstream modulator for facilitating the transmission of data communications to the cable modems and an upstream demodulator for facilitating the reception of data communications from the cable modems.","The downstream modulator of the cable modem termination system generally utilizes either 64 QAM or 256 QAM in a frequency band of 54 MHz to 860 MHz to provide a data rate of up to 56 Mbps. Since the upstream channel has a much lower data rate requirement, the upstream demodulator may use either QPSK or 16 QAM in a frequency range of 5 MHz to 42 MHz to provide a data rate of up to 10 Mbps.","Similarly, each cable modem includes an upstream modulator for facilitating the transmission of data to the cable modem termination system and a downstream demodulator for receiving data from the cable modem termination system. In the described exemplary embodiment, the upstream modulator of each cable modem typically uses either QPSK or 16 QAM within the 5 MHz to 42 MHz bandwidth of the upstream demodulator and the downstream demodulator of each cable modem may use either 64 QAM or 256 QAM in the 54 MHz to 860 MHz bandwidth of the downstream modulator (in North America). As those skilled in the art will appreciate, other modulation schemes may be used depending on the application.","In order to accomplish TDMA for upstream communication, time slots may be assigned to each cable modem within which cable modems having a message to send to the cable modem termination system. The assignment of such time slots is accomplished by providing a request contention area in the upstream data path within which the cable modems are permitted to contend in order to place a message which requests additional time in the upstream data path for the transmission of their message. The cable modem termination system responds to these requests by assigning time slots to the cable modems making such a request, so that as many of the cable modems as possible may transmit their messages to the cable modem termination system utilizing TDMA and so that the transmissions are performed without undesirable collisions.","Because of the use of TDMA, the cable modem termination system uses a burst receiver, rather than a continuous receiver, to receive packets of information from the cable modems via upstream communications. As those skilled in the art will appreciate, a continuous receiver may be utilized where generally continuous communications (as opposed to burst communications as in the present invention) are performed, so as to substantially maintain timing synchronization between the cable modem transmitter and the CMTS receiver, for proper reception of the communicated information. During continuous communications, timing recovery is a more straightforward process since signal acquisition generally only occurs at the initiation of such communications. Thus, acquisition is generally only performed in continuous receivers once per continuous transmission and each continuous transmission may be very long.","However, the burst communications inherent to TDMA systems entail periodic and frequent reacquisition of the signal. That is, during TDMA communications, the signal is reacquired for each separate burst transmission being received.","Referring now to , a hybrid fiber coaxial (HFC) network  facilitates the transmission of data between a headend , which includes at least one cable modem termination system, and a number of homes , each of which contains a cable modem. Such hybrid fiber coaxial networks are commonly utilized by cable providers to provide Internet access, cable television, pay-per-view and the like to subscribers.","Approximately 500 homes  are in electrical communication with each node ,  of the hybrid fiber coaxial network , typically via coaxial cables , , . Amplifiers  facilitate the electrical connection of the more distant homes  to the nodes ,  by boosting the electrical signals so as to desirably enhance the signal-to-noise ratio of such communications and by then transmitting the electrical signals over coaxial cables , . Coaxial cable  electrically interconnects the homes  with the coaxial cables , , which extend between amplifiers  and nodes , . Each node ,  is electrically connected to a hub , , typically via an optical fiber , . The hubs ,  are in communication with the headend , via optical fibers , . Each hub is typically capable of facilitating communication with approximately 20,000 homes .","The optical fibers ,  extending intermediate the headend  and each hub ,  defines a fiber ring which is typically capable of facilitating communication between approximately 100,000 homes  and the headend . The headend  may include video servers, satellite receivers, video modulators, telephone switches and\/or Internet routers , as well as the cable modem termination system. The headend  communicates via transmission line , which may be a T1 or T2 line, with the Internet, other headends and\/or any other desired device(s) or network.","In an exemplary embodiment of the present invention, a network gateway may facilitate on line and off line bi-directional communication between a number of near end data or telephony devices and far end data termination devices via a cable modem termination system. An exemplary topology is shown in  with a network gateway providing an interface to HFC network for a telephone , fax machine  and modem through a subscriber loop interface circuit (SLIC) . The network gateway also provides an interface to the HFC network for a telephone , a fax machine and a modem through our audio processor . A local area network (LAN)  and a universal synchronous bus (USB)  can also be provided access to the HFC network via the network gateway . The HFC network is coupled to a CMTS line card  in the CMTS . The CMTS card  is coupled a packet based network router  to determine whether the communication will be transported via a far end HFC network , a far end PSTN network  or the Internet . In the case of a far end PSTN network a PSTN gateway  provides an interface between a far end PSTN device  and a PSTN network  connected to the CMTS .","In the case of a far end HFC network, a network gateway provides an interface between the far end data termination devices B and the far end HFC network connected to the CMTS . As those skilled in the art will appreciate, the far end data termination devices  can include a variety of telephony and data devices including a telephone, fax machine, and modem via a SLIC or audio processor, as well as a LAN or USB.","A packet based network router  facilitates communication between the near end data devices and off line far end data terminating devices  via a circuit switched networks such as the public switched telephone network (PSTN)  and a PSTN gateway . Data termination devices include by way of example, analog and digital phones, ethernet phones, Internet Protocol phones, fax machines, data modems, cable modems, interactive voice response systems, PBXs, key systems, and any other conventional telephony devices known in the art. One of skill in the art will appreciate that the described exemplary network gateway is not limited to a telephony interface to the HFC network, but rather may interface with a variety of communication media such as for example, asymmetric digital subscriber line (ADSL), DSL, T or other networks known in the art. Therefore, the described hybrid fiber coaxial network is by way of example and not limitation.","An exemplary embodiment of the network gateway is shown schematically in . The described exemplary embodiment may provide a highly integrated solution implemented single chip that is compliant with the Data Over Cable Service Interface Specification (DOCSIS). DOCSIS was developed to ensure that cable modem equipment built by a variety of manufacturers is compatible, as is the case with traditional dial-up modems. The described exemplary embodiment can provide integrated functions for communicating with the CMTS. For example, a QPSK upstream modulator  transmits data to the far end data terminating device, a QAM downstream demodulator  receives data from the far end data terminating device via a CMTS, and a QPSK out of band downstream demodulator  receives out of band MPEG-2 encoded messages from the CMTS.","In addition, the described exemplary embodiment can support multiple inputs in accordance with a variety of protocols. For example, a universal serial bus transceiver  provides transparent bi-directional IP traffic between devices operating on a USB such as for example a PC workstation, server printer or other similar devices and the far end data terminating device. Additionally, an I.E.E 802.3 compliant media independent interface (MII)  in conjunction with an Ethernet MAC  also provide bi-directional data exchange between devices such as, for example a number of PCs and or Ethernet phones and the far end data terminating device. A voice and data processor  is used for processing and exchanging voice, as well as fax and modem data between packet based networks and telephony devices.","The QAM downstream demodulator  may utilize either 64 QAM or 256 QAM in the 54 to 860 MHz bandwidth to interface with the CMTS. The QAM downstream demodulator  accepts an analog signal centered at the standard television IF frequencies, amplifies and digitizes the signal with an integrated programable gain amplifier and A\/D converter. The digitized signal is demodulated with recovered clock and carrier timing. Matched filters and then adaptive filters remove multi-path propagation effects and narrowband co-channel interference. Soft decisions are then passed off to an ITU-TJ. 83 Annex A\/B\/C compatible decoder. The integrated decoder performs error correction and forwards the processed received data, in either parallel or serial MPEG-2 format to a DOCSIS Media Access Controller (MAC) .","The output of the downstream demodulator  is coupled to the DOCSIS MAC . The DOCSIS MAC  may include baseline privacy encryption and decryption as well as robust frame acquisition and multiplexing with MPEG-2-TS compliant video and audio streams. The DOCSIS MAC  implements the downstream portions of the DOCSIS protocol. The DOCSIS MAC  extracts DOCSIS MAC frames from MPEG-2 frames, processes MAC headers, and filters and processes messages and data.","Downstream data packets and message packets may be then placed in system memory  by a SDRAM interface  via the internal system bus . The SDPAM interface  preferably interfaces to a number of off the shelf SDRAMs which are provided to support the high bandwidth requirements of the Ethernet MAC  and other peripherals. The SDRAM interface  may support multiple combinations of 8, 16 or 32 bit wide SDRAMs, allowing for external data storage in the range of about 2 to 32 MBytes. The DOCSIS MAC  includes a number of direct memory access (DMA) channels for fast data access to and from the system memory  via the internal system bus .","The upstream modulator  provides an interface with the CMTS. The upstream modulator  may be configured to operate with numerous modulation schemes including QPSK and 16-QAM. The upstream modulator  supports bursts or continuous data, provides forward error correction (FEC) encoding and pre-equalization, filters and modulates the data stream and provides a direct 0\u201365 MHz analog output.","The DOCSIS MAC  can also implement the upstream portions of the DOCSIS protocol before transmission by the upstream modulator . The DOCSIS MAC  receives data from one of the DMA channels, requests bandwidth and frames the data for TDMA with other modems on the same upstream frequency.","The DOCSIS MAC interfaces with the MIPS core  via the ISB . An exemplary embodiment of the MIPS core  includes a high performance CPU operating at a speed of at least 80 MHz with 32-bit address and data paths. The MIPS core includes two way set associative instruction and data caches on the order of about 4 kbytes each. The MIPS core  can provide standard EJTAG support with debug mode, run control, single step and software breakpoint instruction as well as additional optional EJTAG features.","The upstream modulator  and the downstream demodulator  are controlled by the MIPS core  via a serial interface which is compatible with a subset of the Motorola M-Bus and the Philips IC bus. The interface consists of two signals, serial data (SDA) and serial clock (SCL), which may control a plurality of devices on a common bus. The addressing of the different devices may be accomplished in accordance with an established protocol on the two wire interface.","The described exemplary embodiment of the network gateway includes a full-speed universal serial bus (USB) transceiver  and USB MAC  which is compliant with the USB 1.1 specification. The USB MAC  provide concurrent operation of control, bulk, isochronous and interrupt endpoints. The USB MAC  also can support standard USB commands as well as class\/vendor specific commands. The USB MAC  include integrated RAM which allows flexible configuration of the device. Two way communication of information to a device operating on a USB can be provided, such as for example a PC on a USB 1.1 compliant twisted pair. The USB MAC  can be arranged for hardware fragmentation of higher layer packets from USB packets with automatic generation and detection of zero length USB packets. The USB MAC  may include DMA channels which are used to communicate received data to the system memory  via the internal system bus . Data stored in system memory  may then be processed and communicated to the cable modem termination system (not shown) via the DOCSIS MAC  and the upstream modulator . Similarly data received from the cable modem termination system and processed by the downstream demodulator  and stored in system memory as higher layer packets can be retrieved by the USB MAC  via the ISB  and assembled into USB packets with automatic generation of zero length USB packets. USB packets may then be communicated to the external device operating on the USB via the USB transceiver .","A media independent interface (MII)  can provide bi-directional communication with devices such as for example a personal computer (PC) operating on an Ethernet. The media independent interface  can forward data to and receive information from the Ethernet MAC . The Ethernet MAC  can also perform all the physical layer interface (PHY) functions for 100BASE-TX full duplex or half-duplex Ethernet as well as 10BBASE-T full or half duplex. The Ethernet MAC  can also decode the received data in accordance with a variety of standards such as for example 4B5b, MLT3, and Manchester decoding. The Ethernet MAC can perform clock and data recovery, stream cipher de-scrambling, and digital adaptive equalization. The Ethernet MAC  may include DMA channels which are used for fast data communication of processed data to the system memory  via the internal system bus . Processed data stored in system memory  may then be communicated to the cable modem termination system(not shown) via the upstream modulator . Similarly, data received from the cable modem termination system is processed by the downstream demodulator  and stored in system memory as higher layer packets which can then be retrieved by the Ethernet MAC  via the ISB  and encoded into Ethernet packets for communication to the external device operating on the Ethernet via the MII . The Ethernet MAC  may also perform additional management functions such as link integrity monitoring, etc.","In addition to the SDRAM interface , the described exemplary embodiment of the gateway includes a 16-bit external bus interface (EBI)  that supports connection to flash memories , external SRAM  or EPROMS . Additionally, the EBI  may be used to interface the described exemplary network gateway with additional external peripherals. The EBI  can provide a 24 bit address bus and a 16-bit bi-directional data bus. Separate read and write strobes can be provided along with multiple firmware configurable chip select signals. Each chip select can be fully programmable, supporting block sizes between about 4 K-bytes and 8 M-bytes, extended clock cycle access control and 8 or 16-bit selection of peripheral data bus width. In the described embodiment, the EBI  can support both synchronous and asynchronous transfers. Pseudonymous transfers may be supported through the use of read\/write strobes to indicate the start and duration of a transfer. The EBI  can include DMA access capability to or from the SDRAM interface . The DMA operation may take one or more forms. For example, in EBI mode, an EBI bridge can act as the DMA controller, and perform all pointer and buffer management tasks during DMA operations. In an external mode, an external device can act as the DMA controller and the EBI  can serve as a simple bridge. In DMA mode the MIPS core  can be responsible for DMA setup.","The network gateway may be vulnerable to network breaches due to peripheral devices such as PC employing windows or network Macintosh computers. These operating systems include \u201cfile sharing\u201d and \u201cprinter sharing\u201d which allow two or more networked computers in a home or office to share files and printers. Therefore the exemplary embodiment of the gateway includes IP security module  which interfaces with ISB . The MIPS core  can set-up and maintain all security associations. The MIPS core  can also filter all IP traffic and route any messages requiring security processing to the security module via the ISB . The security module  may support single DES (CBC and ECB modes) triple DES (CBC and ECB modes) MD-5 and SHA authentication in hardware to provide support for virtual private networks.","The security module  can implement the basic building blocks of the developing IP Security Standard (IPsec). The security module  may also be used to implement any other security scheme that uses the same basic blocks as IPsec, which uses two protocols to provide traffic security. A first protocol, IP Encapsulating Security Payload (ESP), provides private data privacy with encryption and limited traffic flow confidentiality. ESP may also provide connection less integrity, data source authentication and an anti-replay service. A second format, IP Authentication Header (AH), provides connection less integrity, data source authentication and an optical anti-replay service. Both protocols may be used to provide access based on the distribution of cryptographic keys and the management of traffic flows. The protocols may be used alone or in combination to satisfy the security requirements of a particular system. In addition, the security module  can support multiple modes of operation depending on a security association to the traffic carried by a simplex connection. For example, transport mode security association between two hosts, primarily protects protocols above the IP layer while tunnel mode security association provides security and control to a tunnel of IP packets.","The exemplary security module  addresses possible differences in packet format between IPsec and future security applications with a generalized scheme to determine where the authentication\/encryption algorithms are applied within a data packet. The authentication\/encryption algorithms consider each packet to consist of three parts, a header, body and trailer. The appropriate algorithm can be applied, using any specified parameters to the body section only.","In an encryption mode, the security module  can add and initialize any necessary headers, determine necessary parameters, generate the associated control message and add the control and data message. In the authentication mode, the control fields of the received data packets are parsed, the parameters are determined via a security association lookup table, control message is created and the control and data messages are enqueued.","The exemplary embodiment of the network gateway includes a DMA controller  having a number of channels that enable direct access over the ISB  between peripherals and the system memory . With the exception of the security module , packets received by the network gateway  cause DMA transfers from a peripheral to memory, which is referred to as a receive operation. A DMA transfer from memory to a peripheral is referred to as a transmit operation. Programmable features in each channel can allow DMA controller  to manage maximum ISB burst lengths for each channel, enable interrupts, halt operation in each channel, and save power when certain modules are not operational. The maximum ISB burst length may be programmed independently for each channel preferably up to 64 32 bit words. Each channel can include maskable interrupts connected to the MIPS core  which indicate buffer complete, packet complete and or invalid descriptor detected. Busy DMA channels may be stalled or completely disabled by the MIPS core . Source clocks (not shown) for each channel are can be connected to the channels based on the internal peripheral they service. For power reduction, these clocks may be turned off and on coincident with the respective peripheral's clock.","The DMA controller  can be operable in both non-chaining and chaining mode. In the non-chaining mode the DMA channel refers to its internal registers for the pertinent information related to a scheduled DMA burst transfer. The DMA controller can set-up the buffer start address, byte count, and status word registers before initiating the DMA channel for each allocated buffer. In the transmit direction, the DMA channels can send the specified number of bytes (preferably up to 4095) from the specified byte address. In the receive direction, the DMA channels can insert data into a specified memory location until a buffer has been completely filled or the end of a packet is detected.","In the chaining mode, the system memory can be partitioned as shown in  preferably using descriptor rings containing pointers to memory buffers as well as status information for each memory buffer. The MIPS core  can write the descriptor pointers while the DMA controller  follows by inserting\/taking data into\/from the location designated by the descriptor. Upon completion of the transfer of a buffer, the DMA controller  effectively clears the descriptor by updating the status to indicate that the data has been inserted\/taken. Specific information may be added to the descriptor to indicate the length of data in the block, specifying whether the data is the first or last block of a packet, etc.","In the downstream direction, the MIPS core  can fill or recognize a data block for a particular DMA channel, then write the next unused descriptor in the ring indicating that the block is filled and where the downstream data exists in memory. The DMA controller  can follow the DSP write to the descriptor ring, sending out data and clearing the descriptor when the transfer is complete. When the DMA controller  reads a descriptor that does not contain valid data, it can go idle until initiated by the DSP core.","In the upstream direction, the MIPS core , can allocates memory space for incoming data, then write the descriptor with the start address for that buffer. The DMA controller  read the base address and insert data until either the buffer is full or an end of packet has been detected. The DMA controller  can update the descriptor, communicating to the MIPS core  that the block is full, indicating the length of the data on the block, and\/or asserted first and or last buffer flags.","The described exemplary network gateway can include a voice processor  for processing and transporting voice over packet based networks such as PCs running network on a USB (Universal Serial Bus) or an asynchronous serial interface, Local Area Networks (LAN) such as Ethernet, Wide Area Networks (WAN) such as Internet Protocol (IP), Frame Relay (FR), Asynchronous Transfer Mode (ATM), Public Digital Cellular Network such as TDMA (IS-13x), CDMA (IS-9x) or GSM for terrestrial wireless applications, or any other packet based system. The described embodiment of the voice processor  also supports the exchange of voice, as well as fax and modem, between a traditional circuit switched network or any number of telephony devices and the CMTS (not shown). The voice processor may be implemented with a variety of technologies including, by way of example, embedded communications software that enables transmission of voice over packet based networks.","The embedded communications software is preferably run on a programmable digital signal processor (DSP). In an exemplary embodiment the voice processor  utilizes a ZSP core from LSI Logic Core ware library for mid to high end telecommunications applications. The DSP core  can include at least about 80 k words internal instruction RAM  and at least about 48 k words internal data RAM . The DSP core  can interface with the internal system bus  via a DSP\/ISB interface  and the peripheral bus  via the DSP\/PB interface .","The DSP core  can provide a JTAG Emulator interface as well as internal training recovery clock (TRC) sync interface. The voice processor  can include a grant synchronizer that insures timely delivery of voice signals to the MIPS core  for upstream transmission. In addition, a PCM interface  can provide the voice processor  with an interface to an internal audio processor  as well as an external audio processing circuits to support constant bit rate (CBR) services such as telephony. The PCM interface can provide multiple PCM channel controllers to support multiple voice channels. In the described exemplary embodiment of the gateway, there are four sets of transmit and receive FIFO registers, one for each of the four PCM controllers. However, the actual number of channels that may be processed may vary and is limited only by the performance of the DSP. The internal system bus  is used to transfer data, control and status messages between the voice processor  and the MIPS core . FIFO registers are preferably used in each direction to store data packets.","The described exemplary embodiment of the gateway includes an internal audio processor  with an analog front end  which interface the voice processor  with external subscriber line interface circuits (SLICs) for bi-directional exchange of voice signals. The audio processor  may include programable elements that implement filters and other interface components for a plurality of voice channels. In the transmit mode the analog front end  accepts an analog voice signal and digitizes the signal and forwards the digitized signal to the audio processor .","The audio processor  decimates the digitized signal and conditions the decimated signal to remove far end echos. As the name implies, echos in telephone systems is the return of the talker's voice resulting from the operation of the hybrid with its two-four wire conversion. If there is low end-to-end delay, echo from the far end is equivalent to side-tone (echo from the near-end), and therefore, not a problem. Side-tone gives users feedback as to how loud they are talking, and indeed, without side-tone, users tend to talk too loud. However, far end echo delays of more than about 10 to 30 msec significantly degrade the voice quality and are a major annoyance to the user. The audio processor can apply a fixed gain\/attenuation to the conditioned signal and forwards the gain adjusted signal to the voice processor  via the PCM interface. In the receive mode the audio processor accepts a voice signal from the PCM interface and preferably applies a fixed gain\/attenuation to the received signal. The gain adjusted signal is then interpolated from 8 kHz to 96 kHz before being D\/A converted for communication via a SLIC interface to a telephony device.","Each audio channel can be routed to a PCM port to allow for system level PCM testing. The PCM system tests, by way of example may require compliance with ITU G.711 for A-law and \u03bc-law encoding\/decoding.","The described exemplary embodiment of the network gateway include integrated peripherals including independent periodic interval timers , a dual universal asynchronous receiver-transmitter (UART)  that handles asynchronous serial communication, a number of internal interrupt sources , and a GPIO module  that provides multiple individually configurable input\/output ports. In addition, multiple GPIO ports can be provided to drive various light emitting diodes (LEDs) and to control a number of external SLICs. A peripheral bus bridge  can be used to interface the low speed peripheral to the internal system bus .","A. DOCSIS Cable Modem","1. Downstream Demodulator","The DOCSIS downstream demodulator  can support 64\/256 QAM. Referring to  the downstream demodulator  accepts an analog IF input signal , amplifies and digitizes the input signal with an integrated programable gain amplifier (PGA) , and an bit A\/D converter . An on chip gain recovery loop  circuit controls the PGA  to provide an on chip automatic gain control (AGC) function. The timing recovery also includes an on chip voltage controlled oscillator (not shown) which can be locked to an off chip crystal, controls the sampling of the A\/D converter . The stability of the crystal reference allows for accurate sub-sampling of the IF signal to produce a digital data stream centered on a lower IF center frequency.","A digital demodulator  demodulates the digitized output () of the A\/D converter , with recovered clock and carrier timing. The digital demodulator  includes digital mixers ,  which mix a complex data stream generated by a direct digital frequency synthesizer (DDFS)  under the control of the timing recovery loop with the digitized signal (). Matched interpolation filters ,  convert mixer outputs (), () to in-phase (I) and quadrature-phase(Q) baseband signals correctly sampled in both frequency and phase. Dual square root Nysquist filters ,  which may accommodate 11\u201318% roll-off factors, filter the I & Q baseband signals to reduce inter-symbol interference. In addition, notch filters ,  may be used to substantially reduce narrowband co-channel interference caused by intermodulation products from analog CATV channels. Notch filters ,  preferably place notches in the frequency spectrum at the frequencies of these subcarriers.","The downstream demodulator  preferably includes a configurable multi-tap decision directed equalizer . In the described exemplary embodiment, a  tap equalizer is used to remove intersymbol interference generated by worst case coaxial cable channels with multipath spreads of up to 4.5 \u03bcsec at 5.26 Mbaud. Blind convergence algorithms facilitate equalizer acquisition.","In addition to adaptive equalization, the configurable multi-tap decision directed equalizer  performs phase recovery on the equalized constellation points using a quadrature synthesizer and complex mixer under the control of the carrier recovery loop to track out residual carrier offsets and instantaneous phase offsets such as those caused by tuner microphonics. The output of the adaptive equalizer phase recovery block is forwarded to a forward error correction (FEC) decoder . The FEC decoder can support numerous decoders including ITU-T J.83 Annex A\/B\/C compatible decoders.","The Annex A\/C decoder consists of four major functions, frame synchronization, convolution de-interleaving, Reed-Solomon error correction and de-randomization. Hard decisions are preferably input into the frame synchronization block which locks onto the inverted sync bit pattern. The MIPS core  sets the characteristics of the frame synchronization acquisition and retention via a CPU interface . Once synchronized, data interleaving is removed by the convolution de-interleaver . The de-interleaver can be based on the Ramsey III approach, and can be programmable to provide depths from I=1\u2013204 with J=204\/I. An on chip RAM  can provide for I=1\u201312. After de-interleaving the data symbols are processed by a Reed-Solomon decoder, which can correct up to eight symbol errors per RS block. The decoded symbols are then de-randomized, which substantially undoes the randomization inserted at the modulator. The de-randomized output consists of MPEG-2 serial or parallel data, packet sync and a data clock.","The Annex B decoder includes five layers, trellis decoding, de-randomization, convolution de-interleaving, Reed-Solomon decoding and checksum decoding. The Annex B concatenated coding scheme along with interleaving provides good coding gain to combat gaussian noise while still protecting against burst errors. Soft decisions from the adaptative equalizer  are input to the trellis decoder which estimates the maximum likelihood of a sequence. The output sequences are forwarded to a frame synchronization and de-randomization block similar to those described for the Annex A\/C decoders. A Reed-Solomon decoder preferably corrects up to three symbol errors per RS block. The checksum decoder accurately identifies block containing uncorrectable errors. The downstream demodulator outputs MPEG-2 serial or parallel data, packet sync and a data clock to the DOCSIS MAC.","The downstream demodulator  also includes two AGC loops which provide control for both RF and IF variable gain amplifiers (VGAs). The gain control allocated to each loop may be established via a CPU interface . The RF gain control loop  may be closed at the tuner AGC  while the IF loop  may be completed with either an off chip VGA (not shown) or preferably with the internal PGA . The power of the internal IF signal is estimated and compared to a programmable threshold. If the estimated power exceeds the threshold, the appropriate AGC integrator is incremented by a programmable value. If the estimated power is less than the threshold, the appropriate AGC integrator is decremented by a comparable amount. The timing recovery loop  may include a timing error discriminant, a loop filter, and a digital timing recovery block which controls the digital re-sampler The carrier frequency\/phase recovery and tracking loops are all digital loops which simultaneously offer a wide acquisition range and a large phase noise tracking ability. The loops may use decision directed techniques to estimate the angle and direction for phase\/frequency compensation. The loops can be filtered by integral-plus-proportional filters, in which the integrator and linear coefficients of the filter are programmable to provide the means of setting the loop bandwidths. The upper bits of the loop filter can control the direct frequency synthesizer , providing both accurate frequency generation and fine phase resolution.","The downstream demodulator  uses an on chip VCO (not shown) referenced to a single off chip crystal which can provide all required chip clocks. In addition, a spare D\/A demodulator provides a 1-bit pulse-width modulated signal which may be used with an off chip RC filter. In addition, the downstream modulator may provide tuner control ports  which may be used to program two serially controlled tuner phase locked loop (PLL) frequency synthesizers.","2. Upstream Modulator","Referring to , the upstream modulator  can support QPSK and 16-QAM processing of burst or continuous data signals () received from the DOCSIS MAC. Burst encoding logic  includes FIFO registers and a FEC encoder, preamble preend and symbol mapper. The burst FIFO register decouples the input data rate from the transmission data rate and allows data to be input while a burst is being actively transmitted. The FEC encoder processes data stored in the FIFO. The FEC encoder may be a Reed-Solomon encoder with data randomization. The parallel to serial conversion of bytes entering the randomizer and serial to parallel conversion of bits leaving the randomizer may be programmed to be most significant bit (MSB) or least significant bit (LSB) first. The encoder may be programmed to correct from zero to ten symbols errors per RS block. The FEC encoder may also be configured to integrate the randomizer before or after the RS encoder. A programmable preamble of up to 1024 bits may then be added to the data burst and the completed data burst can be then mapped into 90 degree DQPSK, QPSK or 16-QAM.","The output of the burst encoding logic  is coupled to a pre-equalizer  which may be selectively enabled to pre-distort the transmitted waveform to offset the effects of inter-symbol interference (ISI). The data burst is then shaped by square root Nyquist filters ,  which may have a selectable excess bandwidth factor of 25% or 50%. The maximum passband ripple of these filters is preferably less than about 0.05 dB and the minimum stopband attenuation is preferably greater than about 60 dB. The shaped signals are forwarded to interpolation filter banks ,  which interpolate the signal to the sample rate. The outputs of these filters are then mixed or modulated onto quadrature carriers generated by a digitally tunable frequency synthesizer  by mixers , . The I and Q components are then combined by summer . The summer  outputs a digital waveform carrying the data burst whose spectrum is preferably centered on the desired RF frequency to a D\/A converter . The D\/A converter converts the digital, shaped output burst to an analog waveform. The D\/A converter  may have a sample rate of up to about 200 MHZ. A programmable gain attenuator  can be used to provide up to about 25 dB attenuation in steps on the order of about 0.4 dB.","3. DOCSIS MAC","The DOCSIS media access controller (MAC), includes baseline privacy encryption and decryption, transmission convergence support, a TDM\/TDMA framer, and a scatter\/gather DMA interface. The transmission convergence sub-layer supports robust frame acquisition and multiplexing with MPEG-TS compliant video and audio streams. The TDM\/TDMA preferably handles time synchronization with the cable modem termination system, upstream MAP decoding, bandwidth request generation and contention resolution. The DOCSIS MAC may be divided into four major functions, downstream functions, upstream functions, DMA interface and miscellaneous control. The downstream functions of the DOCSIS MAC include receiving MPEG frames () from the downstream demodulator, extracting the DOCSIS MAC frames from the MPEG frames, processing the MAC header, filtering messages and data, processing MAP and SYNC messages, decrypting data packets if necessary and providing cyclic redundancy checks (CRCs) on the MAC payloads.","Referring to , a downstream processor  can include a physical layer (PHY) interface which provides the interface to the downstream demodulator (not shown). The PHY receives the incoming MPEG stream, filters on the predefined PID, and uses the offset value contained in the MPEG frame to find the MAC frames. The extracted MAC frames pass to a MAC header processing block in a message processor  and through a rate conversion FIFO to a MAC header processing block in a downstream data encryption security (DES) processor  which provides baseline security by decrypting QAM downstream traffic. The MAC header processing blocks (not shown) examine the MAC header for type, wherein the MAC header processor in the message processor  processes only MAC messages while the MAC header processor in the downstream DES  processes packets that are not MAC messages.","The incoming MAC header is parsed for the presence of an extended header field. If the extended header field is present, the MAC header processor block parses the extended header type-length-value (TLV) fields, and searches for baseline privacy header. Once the baseline privacy header has been located, the MAC header processor forwards the associated value data to the downstream DES  for further parsing and interpretation. With the exception of the baseline privacy extended header, all other header types are preferably ignored by the MAC header processor. Both MAC header processing blocks determine the length of the extended header, calculate the header check sequence (HCS) over the MAC header and compare the calculated HCS with that contained in the MAC header. In the described exemplary embodiment, if the calculated HCS values do not match the HCS values contained in the MAC header, the MAC processor preferably discards the packets and signals the PHY interface requesting re-synchronization. Those packets where the calculated HCS values match the values contained in the MAC header, the MAC header processor preferably generates control signals to flag the type of packet, the beginning of the extended header, the beginning of the protocol data unit (PDU) and the length of the PDU. The MAC header processor routes all PDUs matching the network gateway extended header type to the downstream DES  for decryption.","The message processor  calculates the CRC over the message payload in accordance with the control signals generated by the MAC header processor and supplies data to the DMA controller . There are a number of fault conditions on the DMA interface that require specific action. If an HCS fail is generated by the MAC header processor the DMA is prematurely terminated. If the CRC is correct the message processor  preferably examines the type field of the message. The message processor  extracts the time stamp from SYNC messages and passes these to the timing regeneration circuit . The timing regeneration circuit  provides the timing recovery using the time stamp values from the sync messages. In addition, the message processor  forwards messages that match the upstream channel ID and UCD change count to a MAP processor . The remaining messages with valid CRC are passed to a downstream message DMA  through a rate adjustment FIFO. If a FIFO full state is encountered, the DMA discards the current packet, flushes the FIFO and waits until the next packet arrives.","The downstream DES  receives data packets and control signals from the header processor in the downstream processor . The downstream DES  determines what type of filtering should be applied to the packet based on information contained in the MAC header. If a packet supports baseline privacy the downstream DES filters the packet based on the silence identifier (SID). The DES  preferably decrypts packets using the key corresponding to the SID and even\/odd key bit in the baseline privacy header. The DOCSIS MAC does not perform decryption on packets that do not contain a baseline privacy header. The DES  preferably filters packets based upon the destination address and forwards the filtered packets to a CRC processor (not shown) which calculates a CRC-32 over the entire PDU payload. If the calculated CRC does not match the value stored in the packet, a CRC error flag is set and the packet is marked as erred in the downstream DMA buffer.","The downstream DMA  is used to transfer data to system memory (not shown). The downstream DMA  may have two channels, one of which is used to transfer data into system memory, the other is used to transfer message packets into memory. The two channels can be substantially identical in function. The downstream DMA can use structures in the memory to control transfer of information. The structures can be established and maintained by firmware. Data can be stored in regions of memory called particles. One structure contains a ring of buffer descriptors with each buffer descriptor describing particles in the shared memory. The DMA can store received downstream data in the particles and update the status and length in the buffer descriptor. The other structure is an additional ring of descriptors used to refer to single packets. Where a packet may be contained in any number of particles described by a like number of buffer descriptors, there is only one packet descriptor associated with the packet.","The upstream DMA  can include  upstream channels which read upstream packet headers and protocol data units (PDUs) from system memory. The upstream DMA  can preferably insers the HCS, CRC and piggyback fields when transferring packets to an upstream DES . The upstream DES  examines the extended header to determine if encryption is enabled. If encryption is not enabled, the upstream DES  forwards the packet to the upstream processor , otherwise if encryption is enabled the upstream DES  preferably uses the SID and even odd key bit in the extended header to perform a key lookup. The upstream DES  then encrypts the packet and forwards the packet to the upstream processor . The upstream processor  extracts MAC information elements (IEs) from the MAP FIFO and compares the elements to a next upstream minislot count. If the counts match, the upstream processor , evaluates the type of slot described by the MAP information element. If the network gateway needs to respond to the information element, the upstream processor  preferably loads the appropriate physical layer parameters to the upstream modulator  (see ) and forwards the appropriate message or data packet. This operation depends on the slot type and status of the network gateway. The upstream processor  preferably responds to initial maintenance slots and will ignore all station maintenance slots and requests until the MIPS core  (see ) signals that the network gateway has been initially ranged and assigned a SID (temporary or permanent) The upstream processor  responds to initial maintenance slots by extracting the ranging request message from internal memory that is programmed by the MIPS core. Once the network gateway has been initially ranged, the upstream processor  responds to station messages, requests, request\/data regions, and grants and not to initial maintenance messages.","Once ranged, the upstream processor , monitors the upstream DMA queues. In the described exemplary embodiment there are  independent upstream queues maintained by the upstream DMA . When a packet is ready for transmission, the upstream processor randomly selects one of the available requests slots. The upstream processor  then waits to receive a grant, an acknowledgment (grant with length zero) or an ACK time past the time it sent its request upstream. If the upstream processor  does not receive an acknowledgment or grant before the ACK time has past, the upstream processor  preferably uses truncated binary exponential back-off to select another request slot to resend its request. Once granted, the upstream processor , signals the upstream DMA  to begin extracting the packet from memory and forwarding the packet to the upstream DES for processing as described above. The upstream processor  then forwards the packet to the upstream modulator (not shown) at the appropriate transmission time.","4. Integrated Ethernet MAC","Referring to , the integrated Ethernet MAC performs all the physical layer interface functions for 100BASE-TX full duplex or half duplex Ethernet on CAT  twisted pair and 10BASE-T full or half duplex Ethernet on CAT ,  or  twisted pair. The Ethernet MAC  may be coupled directly to the Ethernet network via the media independent interface . In 100BASE-TX mode, the Ethernet MAC  preferably monitors the twisted pair for transitions in the energy level of the received signal. Signals can be qualified using squelch detect circuits. The Ethernet MAC enters and remains in a \u201clink fail\u201d state when valid signals are not detected on the receive twisted pair. In the link fail state, the Ethernet MAC  preferably transmits only idle codes. When the Ethernet MAC  detects a valid signal for a predetermined period, the Ethernet MAC  enters a link pass state and the appropriate transmit and receive functions are enabled.","The Ethernet MAC  preferably provides the ability to negotiate its mode of operation over the twisted pair link using the auto negotiation mechanisms defined in the IEEE 802.3u specifications, the contents of which are incorporated herein by reference as if set forth in full. Auto-negotiation should be selectively enabled by the Ethernet MAC. When enabled, the Ethernet MAC  preferably chooses a mode of operation by advertising its abilities and comparing those abilities to those received from its link partner.",{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 8","b":["122","122","316","318","320","322"]},"The Ethernet MAC  can receive a continuous data stream on twisted pair. A 100BASE-TX data stream is not always DC balanced, because the receive signal must pass through a transformer, and therefore, the DC offset of the differential receive input may wander. Baseline wander may reduce the noise immunity of the receiver. Wander Correction Logic  can be used to compensate for baseline wander by removing the DC offset from the input signal, thereby reducing the receive symbol error rate. Each receive channel of the Ethernet MAC  can include an analog to digital converter (ADC) . Ethernet MAC, exemplary the ADC  is a 6-bit, 125 MHz ADC, which samples the incoming analog data on the receive channel and produces a 6-bit output. The ADC output is forwarded to a digital adaptive equalizer  which removes interzonal interference created by the transmission channel media. The Ethernet MAC  combines feed forward equalization and decision feedback equalization to achieve an optimal signal to noise ratio. The digital design increases tolerances to on chip noise and the filter coefficients preferably self adapt to any quality of cable or cable length. The adaptive equalizer can be bypassed in 10BASE-TX mode which includes transmit pre-equalization capability.","The Ethernet MAC  can be include a digital clock recovery\/generator system  which creates all internal transmit and receive clocks. The transmit clocks cab be synched to a 50 MHz clock input while the receive clocks are locked to the incoming data streams. Clock recovery circuits optimized to MLT3, and Manchester encoding schemes can be included for use with each of three different operating modes. The input data streams are can be sampled by the recovered clock from each port and fed synchronously to the respective digital adaptive equalizer.","Following baseline wander correction, adaptive equalization, and clock recovery a data converter  converts the received data stream from MLT3 to NRZ data. The NRZ data is descrambled by a stream cipher de-scrambler  and then de-serializer  de-serializes and aligns the data into 5-bit code groups. The 5-bit code groups are decoded into 4-bit data nibbles by a decoder . The start of stream delimiter is replaced with preamble nibbles and the end of stream delimiter and idle codes are replaced with zeros. When an invalid code group is detected in the data stream, the Ethernet MAC  asserts the MII receive error RXER signal which asserts several error conditions which can be used to improperly terminate the data stream. While RXER is asserted, the receive data can be driven with \u201c01\u201d for an invalid data reception and \u201c10\u201d for a false carrier.",{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 9","b":["332","330","334","336","334","150","338","336","338","340","340"]},"The preamble and start of frame delimiter (SFD) can be initially transmitted over the MII, followed by transmission of actual data. If the packet is less than 64 bytes long, all zero pad bytes can be appended to the frame. CRC generator  automatically generates CRC which is appended if the packet is less than 64 bytes long.","5. Universal Serial Bus Transceiver and MAC","The exemplary network gateway preferably includes a USB 1.1 compliant full speed (12 M b\/sec) device interface. The USB 1.1 specification defines an industry-standard USB. The specification describes the bus attributes, the protocol definition, types of transactions, bus management, and the programming interface required to design and build systems and peripherals that are compliant with this standard. The USB 1.1 specification is incorporated herein by reference as if set forth in full. The (USB) can provide a ubiquitous link that can be used across a wide range of PC-to-telephone interconnects.","The USB interface, in the described embodiment, supports sixteen configurations, four concurrent interfaces per configuration, four alternative interfaces per interface and six concurrent endpoints. An endpoint is a uniquely identifiable portion of a USB device that is the termination of a data path between the host (e.g. MIP core) and device. Each USB logical device is composed of a collection of independent endpoints. Each logical device has a unique address assigned by the system at device attachment time. Each endpoint on a device is assigned a unique device-determined identifier called the endpoint number. Each endpoint has a device-determined direction of data flow. The combination of the device address, endpoint number, and direction allows each endpoint to be uniquely referenced. Each endpoint is a simplex connection that supports data flow in one direction: either input (from device to host) or output (from host to device). An endpoint has characteristics that determine the type of transfer service required between the endpoint and the client software.",{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 10","b":["370","372","374","376"]},{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 10A","b":["380","380","381","381","381"]},"The USB MAC can support multiple configurations, interfaces, alternative interfaces and endpoints. The size of the configuration RAM will limit on the total length of the descriptor sequence. Therefore, the size of the configuration RAM may be optimized for integration into various applications which may require more than the described 512 bytes of storage space. There are five descriptors, the device descriptor, configuration descriptor, string descriptor, as well as interface and endpoint descriptors. A descriptor sequence contains one device descriptor and one or more configurations, interface and endpoint descriptors. The length of a device\/configuration interface descriptor is nine bytes and the length of an endpoint descriptor is seven bytes. String descriptors are not stored in the configuration RAM.","The USB MAC processes all required USB standard device requests in hardware, including the clear_feature, get_configuration, get_descriptor, get_interface, get_status, set address, set_configuration, set_feature, and set_interface commands. The USB MAC extracts optional and class\/vendor commands such as, for example, set_descriptor, synch_frame, and get_string_descriptor and forwards those commands to the MIPS core for processing. Upon receipt of such device requests the USB MAC preferably issues an interrupt to the MIPS core which then extracts the setup command and processes it.","In the described exemplary embodiment of the network gateway, there are preferably six physical USB endpoints: one bulk RX endpoint, one bulk TX endpoint, one isochronous RX endpoint, one isochronous TX endpoint, and one interrupt RX endpoints. An isochronous transfer can provide guaranteed access to USB bandwidth with bounded latency and guaranteed constant data rate through the pipe as long as data is provided to the pipe The endpoint can be a given configuration specifies the maximum size data payload that it can transmit or receive. The USB uses this information during configuration to ensure that there is sufficient bus time to accommodate this maximum data payload in each frame. If there insufficient bus time for the maximum data payload, the configuration is established; if not, the configuration is not established. The interrupt transfer type supports those devices that send or receive small amounts of data infrequently, but with bounded service periods. An interrupt transfer preferably provides a guaranteed maximum service period for the pipe as well as an attempt to re-transfer the data at the next period, in the case of occasional delivery failure due to error on the bus. The endpoint description identifies whether a given interrupt pipe's communication flow is into or out of the host.","Bulk transfers can support the exchange of relatively large amounts of data at highly variable times where the transfer can use any available bandwidth. Bulk transfers preferably provide access to the USB on a bandwidth-available basis, with guaranteed delivery of data, but no guarantee of bandwidth or latency. In addition bulk transfers preferably attempts to re-transmit in the case of delivery failure. The bulk endpoint specifies the maximum data payload size that the endpoint can accept from or transmit to the bus. This maximum applies to the data payloads of the data packets; i.e., the size specified is for the data field of the packet not including other protocol-required information. The bulk endpoint is designed to support a maximum data payload size. The bulk endpoint preferably reports in its configuration information the value for its maximum data payload size. The USB does not require that data payloads transmitted be exactly the maximum size i.e., if a data payload is less than the maximum, it does not need to be padded to the maximum size. In the described exemplary embodiment, of the USB both RX\/TX bulk endpoints can support a maximum USB packet size of eight, sixteen, thirty two, or sixty four bytes. Both RX\/TX isochronous endpoints ,  can support a maximum USB packet size of eight, sixteen, thirty two, sixty four, one hundred and twenty eight, two hundred and fifty six or five hundred and twelve bytes. The control endpoints can support a maximum packet size of thirty two bytes and the interrupt RX interrupt endpoint can support a maximum USB packet size of eight bytes.","Both the bulk and isochronous endpoints ,  can support in hardware the fragmentation of higher layer packets (such as Ethernet packets) into USB packets in the transmit direction and the reassembly of higher layer packets from USB packets in the receive direction. An end of packet flag can be used to signal when a USB packet is shorter than the maximum packet size defined by the endpoint. In the case that the length of the higher layer packet is exactly an integer multiple of the maximum USB packet size, a zero length packet can be inserted to signal the end of packet. The USB MAC supports the generation of zero length packets in the transmit direction and the detection of zero length packets in the receive direction.","The USB MAC may include internal RX and TX RAM ,  for temporary data buffering among the bulk, isochronous and control endpoints. The endpoints are then forwarded to system memory. The USB preferably includes four direct memory access (DMA) channels for fast access to and from system memory through a system bus interface  coupled to the ISB. Preferably, two DMA channels are used for bulk RX\/TX endpoints and two are used for isochronous RX\/TX endpoints.","6. Audio Processor","The audio processor module provides an interface between the voice processor and external subscriber line circuits (SLICs). Referring to , the audio processor includes an analog front end  which provides bi-directional exchange of signals over the voice bandwidth, including voice or fax\/modem data signals modulated with a voice band carrier. The analog front end  can support four separate voice channels with an analog front end  having four pairs of 14-bit analog to digital converters (ADCs) and digital to analog converters (DACs).",{"@attributes":{"id":"p-0140","num":"0139"},"figref":"FIG. 11","b":["170","391","391","390","393"],"i":["a","b "]},"The analog front end may include a common mode voltage level generator  which provides an external common mode voltage level. Passive external circuitry coupled with the CM level generator  can be used to establish the DC level of the AC coupled input signals for the ADCs . A voltage reference  can be used to provide signals and bias currents for each of the ADC\/DAC pairs and provide a bias current for the CM level generator . The reference may be overdriven with an external reference or may be left disconnected externally, allowing the internal bandgap to set the reference voltage. A clock generator  can be used to divide the 98.304 MHz PLL clock down to 49.152 MHz, 24.576 MHz and 12.288 MHz. The clock generator  provides a sample clock for the ADC  and DAC .","The external analog interface between each channel of the audio analog front end and an external SLIC is shown in . In the described exemplary embodiment, of the analog front end resistors and convert the current output signal of DAC  to a voltage signal. Capacitors , and provide low pass smoothing and anti-alias filtering of the attenuated signal. Op-amp  provides signal ended differential conversion and amplification of the DAC output which can then be forwarded to the SLIC . In the transmit direction, an RC network at the input of the ADC  provides balanced impedances at both ADC input pin and provide attenuation of the transmit signal at the positive input. The balanced impedance interface ensures that power supply and digital substrate noise affect both ADC inputs equally. The ADC  samples the difference between the voltages at the inputs ,  so that common noise can be rejected. The passive components fix the ADC input  at a constant DC level equal to the common mode level  output by the CM generator . The ADC input  varies in direct proportion to the transmit signal  from the SLIC .","Referring to  a voice synchronizer  synchronizes the near end voice samples received by the ADC  to the average timing regeneration circuit clock to ensure voice exchange between the network gateway and CMTS does not introduce jitter due to data underflow or overflow. A decimator  downsamples the synchronized output of the voice synchronizer  from 96 kHz to a 8 kHz rate. The decimator  can be implemented with a FIR filter which may be either minimum phase or linear phase. A minimum phase filter is preferred for application such as voice which need low group delay but may tolerate group delay distortion introduced by the minimum phase filter. The linear phase filter is preferred for fax and data modem applications. The decimator can be used to attenuate signals which can not be represented by the lower sampling rate, and then drop eleven out of every twelve samples. If a sample is not used at the output, there is no need to calculate its value. Therefore the FIR realization of the decimator can be set up to so that only the one sample out of twelve that is needed is calculated, and then the data set is advanced by twelve samples and the next output is calculated, thereby forgoing the intervening eleven samples.","The decimated signal can be filtered by a 60 Hz high pass filter . The filter  reduces the 60 Hz interference induced on the transmit line due to proximity to power lines. The filter provides on the order of about 20 dB attenuation at 60 Hz relative to the transmission path loss at 1004 Hz. The filtered signal can be conditioned by a network echo canceller . The network echo canceller may interface with ITU-T G711, G726, G728 and G729 encoders. Double talk logic  can provide control functions including voice detection, automatic signal level control, transmit\/receive gain switching balance, noise level estimation and double talk detection. The adaptive cancellation processes the receive side signal samples through an adaptive model of the hybrid coupling and subtracts the result from the transmit side in difference operator . A high pass filter  is coupled to the echo canceller input to match the echo path impulse response.","Programmable gain adjuster  applies a fixed gain or attenuation to output () of the difference operator . Gain adjuster  can provide programmable gain\/attenuation adjustments of +\/\u221220 dB with step size of 1 dB. A fixed gain of attenuation  is applied to the gain adjusted signal. A multiplexer  coupled to the output of the fixed gain  allows the signal to be routed to a A-law\/\u03bc-law (G.711 compatible) encoder  which is coupled to an external PCM port which allows for external testing of the audio processor module. Multiplexer  also forwards the gain adjusted output signal to the voice processor  via the DSP interface  (see ).","The described exemplary embodiment of the audio processor includes multiplexer  coupled to the data interface in the receive mode. Multiplexer  may couple decoded samples to a A-law\/\u03bc-law decoder  which is also coupled to an external PCM port to allow for external testing of the audio processor module. The multiplexer  may also forward decoded samples from the data interface to a gain adjuster  which applies a fixed gain or attenuation to the decoded signal . Gain adjuster  compensates for system level gain adjustments and may provide programmable gain\/attenuation adjustments on the order of about +\/\u221220 dB with a step size of 1 dB. A 1 kHz test tone generator  that provides a digital representation of a 1004 Hz test tone at a level of 0 dBm. The test tone may be optionally injected into the data stream by summer  to debug and verify the audio processor. The test tone may be configurable in both frequency and amplitude, although it is preferably limited by the 8 kHz sample rate such that only 0\u20134 kHz may be allowed.","An interpolater  modifies the sample rate from 8 to 96 kHz. The interpolator  can be implemented with a FIR filter which may be either minimum phase or linear phase. A minimum phase filter is preferred for voice applications which require low group delay but may tolerate group delay distortion which may be introduced by the minimum phase filter. A linear phase filter is preferred for fax and or modem applications. In addition, a metering pulse generator  can be used to generate 12\/16 kHz metering pulses that are summed with the interpolated signal by summer . The metering pulses allow a user to monitor the cost of the call as it progresses. The rate at which the metering pulse generator  transmits the metering pulses varies depending on the rate per minute of the call. The minimum gap between pulses is, by way of example, on the order of about 100 msec but may be much greater for inexpensive local calls. The amplitude of the metered pulses can be adjustable to accommodate impedance changes during the on hook, off hook and ringing states. The interpolated signals are forwarded to the DAC  for communication to a telephony device via the SLIC (not shown)","Power efficiency is often important for telephony applications. Therefore, the described exemplary embodiment of the audio processor includes the capability to enter a power saving\/sleep mode wherein only those functions that are required for wake up are active. All circuits should be capable of reaching active steady state within about a 10 msec activation period.","The described exemplary embodiment of the preferred audio processor  further includes a ring generator which synthesizes reference waveforms which are forwarded to the SLIC to ring telephony devices. The ring generator can be used to support sinusoidal, trapezoidal and square waves. In addition the ring generator frequency, amplitude and DC offset can be configurable. A block diagram of a preferred ring generator  is shown in . The ring generator  includes a digital oscillator  which generates a sinusoid of a given frequency and amplitude determined by instructions ,  from the DSP core of the voice processor  via the DSP\/PB interface  (see ). The sample rate of the sinusoid can be, by way of example, on the order of about 1000 Hz, divided down from the 24.576 MHz system clock input . A variable clipper  symmetrically clips the sinusoid about zero such that the sinusoid may be converted into either a trapezoid or into a square wave. The DSP core of the voice processor  (see ) can be used to define the thresholds  with which the sinusoidal waveform is clipped. The clipped waveform can be scaled by multiplier , which applies a signal attenuation  defined by the voice processor . Summer  provides a configurable DC offset by adding a DC bias  as established by the voice processor. The offset may vary from negative full scale to positive full scale. A converter  can be used to convert the ring waveform () into a single bit representation. A single pole analog filter may be included on the output of the converter to reduce the quantization noise generated by the converter . The filtered signal is then forwarded the analog front end  for communication to a telephony device via the SLIC. In the described exemplary embodiment, of the audio processor each audio channel may be routed to a PCM port to allow for system level PCM testing. The PCM system tests, by way of example, can require compliance with ITU G.711 for A-law and \u03bc-law encoding\/decoding.","Digitizing and transmitting voice data via packets in a network system is a common telephony problem. Customarily Pulse Code Modulation (PCM) techniques digitize a voice signal by sampling an analog voice signal and converting each sample into a digital code which is communicated between compatible receiving and transmitting systems on the near and far ends of the network. In addition, in a voice band data mode, the exemplary network gateway may transparently exchange data without modification (other than packetization) between a near end telephony device (or circuit switched network) and the packet based network. This is typically used for the exchange of fax and modem data when bandwidth concerns are minimal. The problem that arises is that the receiving system's clock may not be correlated with the transmitter's clock. This difference, even if minute, may cause the sample buffer in the receiving unit to underflow or overflow. In the case of data underflow, samples are extracted from a sample buffer faster than samples are written to the buffer so that the system may collapse from data starvation. During data overflow, voice signals transmitted from one communication port enter the sample buffer in the receiving unit faster than they are extracted. The resulting overflow of data signals may result in artifacts in a voice call or data in voiceband data mode.","To prevent data signal overflow and underflow, it is, therefore, desirable to synchronize the receiving clock to the incoming data rate. A voice synchronizer may be used for this purpose. Although the the voice synchronizer is described in the context of an audio processor system within a network gateway, those skilled in the art will appreciate that the voice synchronizer is likewise suitable for various other telephony and telecommunications application.","Referring to , network gateway  supports the exchange of voice between a hybrid fiber coaxial (HFC) network  and a traditional circuit switched  or a packet based network . In an exemplary embodiment, telephony device  is connected to the PSTN over PSTN telephone gateway . The PSTN telephone gateway  may be clocked by a telephony network clock signal () from network clock reference  which is also coupled to CMTS  such that the PSTN telephone gateway  may be synchronized with the CMTS clock for the transfer of PCM voice packets () between the CMTS  and the PSTN telephone gateway . The telephony network clock is preferably a conventional Building Integrated Timing Supply (BITS) clock. The equipment requirements for interfacing to this clock are known to those skilled in the art and are described in Bellcore document TR-NWT-001244 the content of which is incorporated herein by reference as if set forth in full. The CMTS clock is synchronized with the telephony network clock signal () via CMTS clock synchronizer  which utilizes headend reference tick clock , as described in U.S. patent application Ser. No. 09\/501,850, the contents of which is incorporated herein by reference as if set forth in full.","A timebase message generator  generates time messages or stamps which provide the network gateway  an absolute time reference which is representative of the frequency of the crystal oscillator timing reference (not shown) of the CMTS , which is in turn synchronized to the telephone network clock .","Referring to , the network gateway  preferably includes a digital tracking loop  that provides a substantially stable clock output (). A difference between the time stamps forwarded by the CMTS and the output of a local time reference, that is derived from a numerically controlled oscillator , is formed by differencing circuit . This difference defines a frequency error value. This frequency error value is filtered by loop averaging filter  which prevents undesirable deviations in the frequency error value from affecting the numerically controlled oscillator  in a manner which would decrease the stability thereof or cause the numerically controlled oscillator  to operate at other than the desired frequency. The loop filter  can be configured so as to facilitate the rapid acquisition of the frequency error value, despite the frequency error value being large, and then to reject comparatively large frequency error values as the digital tracking loop  converges, i.e., as the output of the local timing reference becomes nearly equal to the absolute time reference, thereby causing the frequency error value to approach zero.","Referring to , in the downstream direction, voice or voiceband data packets are received by the network gateway , demodulated and re-formatted by the downstream demodulator\/DOCSIS MAC  and forwarded to system memory . In this and other embodiments, common reference numerals may be used to represent like components. The voice data is forwarded to a decoder system (not shown) within the voice processor . The decoder system preferably provides delay compensation, voice decoding, DTMF generation, call progress tone generation, comfort noise generation and lost frame recovery. Processed voice sample are then forwarded to a first voice queue . A voice synchronizer  is coupled to the output of the first voice queue . The voice synchronizer  re-samples the voice frames stored in the first voice queue  in accordance with an error signal and forwards re-sampled voice signals to a second voice queue  so that the rate at which samples are removed from the second voice queue  by a DAC  matches the rate at which they are inserted into the second voice queue  by the voice synchronizer .","In operation, each time the clock of the DAC  decrements to zero, a sample can be removed from the second voice queue  and transmitted to the near end telephony device  via a subscriber line interface circuit . In the described exemplary embodiment, the DAC  is preferably driven by sampled DAC clock . In a jitter-free system, the DAC  removes frames from the second voice queue  at the exact same rate at which frames are inserted into the first voice queue  by the voice processor . However, when jitter or other impairments are present voice synchronization is needed because the DAC clock of the receive unit within the network gateway may not be correlated to the far end sample clock that generated the received data. In a data underflow condition in the downstream direction, the DAC clock  in the network gateway  leads the far end sample clock so that if left uncorrected samples would be removed from the second voice queue  faster than they are being inserted in the first voice queue , so that the system may collapse from data starvation. During a data overflow condition in the downstream direction, the DAC clock  in the network gateway lags the far end sample clock so that samples are inserted into the voice queue faster than they are removed. The resulting overflow may result in artifacts in a voice call or data in voiceband data mode.","In the described exemplary network gateway, in the downstream direction a lost frame recovery engine in the voice and data processor is implemented whereby missing voice is filled with synthesized voice during data underflow conditions using the linear predictive coding model of speech. The voice is modelled using the pitch and spectral information from digital voice samples received prior to the lost packets. Similarly, during data overflow the voice and data processor preferably performs frame deletions to substantially eliminate the overflow condition. However, in voiceband data mode lost data may not be readily tolerated or recreated. Therefore, in voiceband data mode, the described exemplary voice synchronizer fractionally decimates the received voice signal () stored in the first voice queue  during data overflow and fractionally interpolates the voice samples during data underflow. Although voice synchronization is described in the context of an audio processor for voice and voice band data exchange over cable modem, those skilled in the art will appreciate that the techniques described for signal synchronization are likewise suitable for various applications requiring the synchronization of a signal in a system having two uncorrelated clocks. Accordingly, the described exemplary embodiment for voice and voiceband data synchronization in a signal processing system is by way of example only and not by way of limitation.","For example, referring to  a given input voice signal () may be represented by a series of samples () shown with arrow terminations. In the described exemplary embodiment, samples () satisfy Nyquist sampling criteria so that input voice signal  may be completely reconstructed from the series of samples (). Therefore, the input voice signal may be over sampled as represented by the dashed lines. For the data underflow case where the receive clock leads the transmit clock the input voice signal () may be sampled at a slightly higher frequency () shown with circles, so as to substantially eliminate the data underflow condition, by generating additional samples as a function of time.","Similarly, for the data overflow condition, the input voice signal may be downsampled with a slightly lower frequency, shown with \u201cx\u201d terminations, so as to substantially eliminate the data overflow condition by generating fewer samples as a function of time. For example if the DAC clock  were 96.0000152587890625 kHz, and the far end transmit clock as represented by the rate at which samples are written into the first voice queue  is 96.0 kHz, then the voice synchronizer  would preferably generate an additional data sample every 1\/(0.0000152587890625)=65536 samples. Therefore, the incoming signal would have to be resampled at the rate of (65536) (96 kHz) or 6.291456 GHz. Advantageously, the described exemplary embodiment generates an error signal as a function of the ratio between the rate at which frames arrive or are placed into the first voice queue  and the rate at which frames are removed from the second voice queue  so that only those samples that are required to fractionally decimate or interpolate the input voice signal should be computed.","Referring back to , in the upstream direction, the near end telephony device  transmits an analog voice signal to the network gateway  via the SLIC . An analog to digital converter  converts the incoming analog signal to digital samples with an ADC sample clock . If the TRC clock and the ADC clock are correlated, the ADC output is forwarded to the audio processor  for decimation, echo cancellation and other processing as previously described, prior to being forwarded to the encoder system of the voice processor . The voice processor encoder system can be provide, among other things, DTMF and call progress tone detection, voice activity detection, voice compression, and comfort noise estimation. Encoded voice sample are then forwarded to system memory  for transmission to the far end telephony device  by the upstream modulator and MAC . However, if the ADC clock  and the TRC clock are uncorrelated, voice synchronizer  should synchronize the digital voice samples to the TRC clock.","A general block diagram of an exemplary voice synchronizer is shown in . The voice synchronizer preferably includes an error generation unit , a sampling rate tracker  and a voice queue or FIFO . The error generation unit  includes two counters each of which may be clocked by a locally generated reference at 24.576 MHz . In the upstream direction the ADC forwards digital samples to the sample rate tracker . With the assumption that the ADC clock and the TRC clock are uncorrelated, an ADC 8 kHz clock  drives a first counter  and a TRC 8 kHz clock  drives a second counter . Counter outputs () and () are forwarded to low pass filters , \u2032 that average the output count (see ). The sample rate tracker  preferably fractionally decimates or interpolates the incoming signal () in accordance with the ratio of count A to count B. Thus if count A is larger than count B the sample rate tracker up-samples the incoming signal () by the ratio count A to count B. Otherwise the sample rate tracker  downsamples the incoming signal () by the ratio count A to count B. The sample rate tracker  forwards the resampled signal () to the FIFO  wherein the samples are assembled into a frame. The assembled frame is then forwarded to an encoder system of the voice and data processor (not shown) for voice compression, such as for example G.729.","Referring to , the operation of an exemplary sample rate tracker may be best demonstrated by an example. In  it is assumed that the input sample count, shown as samples 1, 2, 3, and 4, is 65537 and the output sample count, shown as samples A, B, C and D, is 65536 thereby creating a slight overflow condition. The distance between for example, sample 2 and B is equal to 1\/65536 of one input sample period. Therefore, an incoming 8 kHz signal would have to be resampled at the rate of (65536) (8 kHz) or 524.288 MHz to generate the additional samples required to eliminate the overflow condition. Referring to , in the extreme 65535 zeros would be placed between each individual data sample of the input signal stored in a data buffer. In a typical application eighteen data points would be used to compute the resampling. The number of data points represents a trade between the quality of the conversion and computational complexity. Low pass filter coefficients (Coef-1 through Coef-1179648) would be computed which, when applied to the samples stored in the buffer yield the resampled signal.","Advantageously, the generation of the error signal, defined as the output count divided by the input count, facilitates the regeneration of the desired resampled output with a reduced number of filter coefficients. For example, referring to , to compute output B we shift 655357 inputs with 65535 zeros, so that sample 65536 is not equal to zero and sample number 65537 is equal to zero. Therefore, only eighteen filter coefficients multiply non zero data and only those eighteen coefficients need be calculated for each sample. They are 2, 2+65536, 2+(2*65536), . . . 2+(17*65536). The process would then be repeated to compute output sample C. The first 65534 samples are zeros, sample number 65536 is non zero and sample 65537 is equal to zero.","In the downstream direction incoming PCM voice data is forwarded to the sample rate tracker . The voice data may not be synchronized to the local DAC sample clock that converts the received voice samples to an analog format prior to transmission to the near end telephony device. In the downstream direction the first counter  is driven by an adjustable frame clock . The speed of the frame clock is negotiated between the network gateway and the CMTS and is assumed to be 10 msec. The frame clock  may be generated by the MIPS core, or the DSP of the voice processor as a function of frame arrival time. The second counter  is preferably driven by a 100 Hz DAC clock  that is generated by a clock division counter as shown in . The sample rate tracker  preferably fractionally decimates or interpolates the incoming signal () in accordance with the ratio of count A to count B. Thus if count A is larger than count B the sample rate tracker up-samples the incoming signal () by the ratio count A to count B. Otherwise the sample rate tracker  downsamples the incoming signal () by the ratio count A to count B. The sample rate tracker  forwards the resampled signal () to the FIFO  (second voice queue  of ). The resampled signal is then converted to an analog signal via a DAC that may use 24.576 MHz DAC clock.",{"@attributes":{"id":"p-0165","num":"0164"},"figref":["FIG. 18","FIG. 18A"],"b":["527","526","525","527","548","544","546","547","546","543","550","551","552"],"i":"a"},"In this embodiment, the sample rate tracker  fractionally decimates or interpolates the incoming signal () in accordance with the filtered counter output () as compared to 3072. In the case where the TRC clock and the ADC clock are perfectly correlated the counter would output 3072 and the incoming signal () would not be resampled. However, for the case where the filtered counter output () is greater than 3072, the incoming signal is upsampled by the filtered counter output () divided by 3072 (A\/3072). Similarly, when filtered counter output () is less than 3072, the incoming signal is down-sampled by the filtered counter output () divided by 3072 (A\/3072).","Referring to , in an alternate voice synchronizer in the downstream direction, the MIPS core  increments a counter  when the network gateway  receives a new voice frame from the CMTS (not shown). The counter  preferably utilizes the DAC 24.576 MHz clock  as a reference. The counter output () provides the difference between the frame clock and the DAC clock. A low pass filter \u2032 again smooths or averages the difference in various frame arrival rates as previously described. The sample rate tracker  fractionally decimates or interpolates the incoming signal () in accordance with the output of filtered counter count () as compared to 24576. In the case where the frame arrival clock and the DAC clock are perfectly correlated the counter  would output 24576 and the incoming signal would not be resampled. However, for the case where the filtered counter output () is greater than 24576 the sample tracker  upsamples the incoming signal by the output () of the low pass filter divided by 24576 (i.e. A\/24576). Similarly, when the filtered counter output () is less than 24576, the sample rate tracker  down-samples the incoming signal by the output () of the low pass filter divided by 24576 (A\/24576).","Referring to , an alternate error generation unit utilizes packet control information  to generate a far end clock error signal  representing the difference between the far end sampling rate and the near end voice playout sampling rate. The clock error signal may then be used to fractionally resample the received data packets . In operation the DSP of the voice processor module may read from and write to data packet control registers within local memory of the DSP to monitor and control the flow of downstream data. For example, referring back to , the DSP may write a packet arrive indication to the packet control register when a downstream packet has arrived and been placed in a jitter buffer. The jitter buffer may be part of the voice processor's local memory or may be external memory accessed via the internal system bus and DSP\/ISB interface. The voice processor then processes voice samples and forwards the processed samples to the first voice queue . In operation the voice queue  writes a packet buffer ready indication to the packet control registers, that produces a maskable interrupt that is transmitted to the DSP of the voice processor module. In addition, the DSP may write a packet complete indication to the packet control registers indicating that the next packet has been delivered and clearing the packet buffer ready status. The period of the packet complete indication is negotiated between the network gateway and the CMTS and may be for example 10 msec. The packet complete indication is generated by the DSP of the voice processor in accordance with the reference clock locally generated at the cable modem.","In this embodiment the average far end sampling rate may be obtained from the packet arrival control signal and the near end voice playout sampling rate may be obtained from the packet complete control signal. One of skill in the art will appreciate that the present invention may utilize other control signals to obtain the average far end sampling rate and the near end playout rate. In addition, the control signals may be generated by for example the MIPS core of the cable modem.","A general block diagram of the alternate downstream voice synchronizer is shown in . In this and other embodiments, common reference numerals may be used to represent like components. The voice synchronizer preferably includes an error generation unit , the sampling rate tracker  and the voice queue or FIFO . The error generation unit  includes two counters ,  each of which may be driven by the locally generated TRC clock . The TRC clock may range in frequency from about 8 kHz to 24.576 MHz. However, one of skill in the art will appreciate that increasing the frequency of the TRC clock  will provide increasingly accurate error estimates. The first and second latches ,  coupled to counters ,  respectively are responsive to packet arrival control signals  and packet complete control signals  respectively. Latch  therefore outputs the count value between successive packet arrival control signals, i.e. last count () and current count () and latch  outputs the count value between successive packet complete control signals, i.e. last count () and current count (). Difference operator  is coupled to latch  and outputs the difference between the current and the last packet arrival counts, i.e. the count between successive packet arrival control signals output by latch . Similarly, difference operator is coupled to latch  and outputs the difference between the current and the last packet complete counts, i.e. the count between successive packet complete control signals output by latch . Low pass filters  and \u2032 are coupled to difference operators , respectively. The low pass filters  and \u2032 as previously described may be single pole filters that smooth the transitions between different sampling rates.","A difference operator  is coupled to the output of low pass filters  and \u2032 and forwards an estimate of the difference between the packet arrival period and packet complete period to the sample rate tracker . The sample rate tracker also receives the incoming PCM voice data. The sample rate tracker  fractionally decimates or interpolates the incoming signal () in accordance with the ratio of the packet arrival count and the packet complete count. Thus if in operation the packet arrival count is larger than the packet complete count, the sample rate tracker up-samples the incoming signal () by the ratio of the packet arrival count to the packet complete count. Otherwise the sample rate tracker  downsamples the incoming signal () by the ratio of the packet arrival count to the packet complete count. The sampling rate tracker  forwards the resampled signal () to the FIFO . The resampled signal is then converted to an analog signal via a DAC that may use the 24.576 MHz DAC clock.","One of skill in the art will appreciate that the voice synchronizer is not limited to DOCSIS compatible VOIP cable modem systems. Rather the present invention may be utilized to synchronize VOIP data in for example digital subscriber line (DSL) or other packet based networks. Therefore, the disclosed cable modem embodiment is by way of example only and not by way of limitation.","Referring to , in the analog front end of the audio processor, a DAC  forwards decoded voice signals to a local telephony device  and a ADC  receives signals from a local telephony device via a SLIC . The SLIC  contains a hybrid  which converts from two-four wires. Ideally the hybrid gain would be zero to eliminate coupling between the far end and near end transmission paths. However, the operation of the hybrid  typically results in a frequency dependent gain of less than about one-half. Hybrid gain commonly results in a telephony problem known as line echos, such as the reflection of the talker's voice at the mismatch created by the two-four wire conversion. If there is low end-to-end delay, echo from the far end is equivalent to side-tone (echo from the near-end), and therefore, not a problem. Side-tone gives users feedback as to how loud they are talking, and indeed, without side-tone, users tend to talk too loud. However, far end echo delays of more than about 10 to 30 msec significantly degrade the voice quality and are a major annoyance to the user. Therefore echo cancellers are typically used to remove far end echo.","Conventionally, a reference signal () is input into an adaptive filter  that models the transfer characteristics of the dialed telephone line (i.e. the hybrid plus the tail circuit which is the telephone line from DAC to ADC) so that the unwanted echo may preferably be canceled by subtracting filtered reference signal () from the near end digital input signal () in a difference operator . Typically, the adaptive filter  converges or adapts only in the absence of near end speech. Therefore, near end speech and\/or noise present on the near end digital input signal (), typically referred to as the double talk condition, may cause the adaptive filter  to diverge. Traditionally, echo cancellers utilize energy estimators , to estimate the energy (E) of the near end signal ()and the energy (E) of the far end () signal. A typical double algorithm  then declares near end speech active, disabling adaptation of the adaptive filter , when the energy of the near end signal is greater than the energy of the far end signal times the hybrid gain (H), (E>H*E).","A primary disadvantage of conventional approaches which utilize energy estimates is the delay introduced into the detection of near end speech by the energy estimators (typically low pass filters) which may significantly corrupt the output of difference operator , which is typically used as a the feedback error for filter adaptation. The described exemplary echo canceller includes a double talk algorithm that provides rapid detection of near end speech in the presence of far end speech along with a look ahead capability so that the adaptive filter may halt adaptation (i.e. freeze the filter taps or coefficients) before the near end speech reaches the difference operator.","Although echo cancellation is described in the context of an audio processor for voice exchange via a network gateway, those skilled in the art will appreciate that the techniques described for echo cancellation are likewise suitable for various applications requiring the cancellation of reflections, or other undesirable signals, from a transmission line. Accordingly, the described exemplary embodiment for echo cancellation in a signal processing system is by way of example only and not by way of limitation.","Referring to , a high pass filter  receives a reference signal (). The high pass filter  matches the echo path impulse response of the Rx data line. The output of the high pass filter  is input into the adaptive filter  that models the transfer characteristics of the dialed telephone line circuit. The adaptive filter  may be a linear transversal filter or other suitable finite impulse response filter. In addition, Rx data from the far end () is coupled to double talk logic  before the interpolator  of the audio processor (not shown) and the DAC  of the analog front end (not shown). The double talk logic  therefore receives a far end reference signal F(n) () with an 8 kHz sampling rate. In addition, the double talk logic  is preferably coupled between the ADC  of the analog front end and the decimator  of the audio processor (not shown). A downsampler  performs : sample decimation of the 96 kHz near end Tx data () and forwards the decimated near end data samples () to the double talk logic at an 8 kHz sample rate. To minimize delay, the downsampler does not low pass filter the near end samples () prior to decimation. Aliasing components which may be created are insignificant in that the output of the downsampler () simply drives the double talk detection logic  and is not transmitted to the far end. An energy estimator  estimates the background noise level of the decimated near end signal () and forwards the estimated level to the double talk logic . The energy estimator  is preferably a low pass filter with a long time constant, on the order of about 10 seconds. With a long time constant the energy estimator tends to track the minimum energy level of the decimated near end signal (). Energy estimator  estimates the short term energy of the far end TX data F(n).","The adaptive filter  can be based upon a normalized least mean square algorithm (NLMS) as described in S. Haykin, Adaptive Filter Theory, and T. Parsons, Voice and Speech Processing, the contents of which are incorporated herein by reference as if set forth in full. An error signal () at the output of the difference operator  for the filter adaptation may be characterized as follows:",{"@attributes":{"id":"p-0179","num":"0178"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"e","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"n"}},{"mrow":[{"mi":"Tx","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"n"}},{"munderover":{"mo":"\u2211","mrow":[{"mi":"j","mo":"=","mn":"0"},{"mi":"L","mo":"-","mn":"1"}]},"mo":"\u2062","mrow":{"mrow":[{"mi":"w","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"j"}},{"mi":"F","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","j"],"mo":"-"}}}],"mo":"\u2062"}}],"mo":"-"}],"mo":"="}}}},"where e(n) is the error signal at time n, F(n) is the reference signal () at time n and Tx(n) is the Tx data signal () input into the difference operator  at time n, and w(j) are the coefficients of the transversal filter where the dimension of the transversal filter is the worst case echo path length (i.e. the length of the tail circuit L) and W(j), for j=0 to L\u22121, is given by:\n\n()=()+\u03bc*()*()\n","wherein w(j) is preferably initialized to a reasonable value such as for example zero.","Assuming a block size of four msec (or 32 samples at a sampling rate of 8 kHz), the short term average energy of the reference signal Eis the sum of the last 32 reference samples so that the convergence gain may be given by:",{"@attributes":{"id":"p-0183","num":"0182"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"\u03bc","mo":"=","mfrac":{"mi":"\u03b1","msub":{"mi":"E","mrow":{"mi":"ref","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"n"}}}}}}}},"where \u03b1 is the adaptation step size and Eis the energy estimate of the far end data sample F(n). In the described exemplary embodiment \u03b1, is set to zero when near end voice is detected so that the convergence gain \u03bc is equal to zero and the filter coefficients are not updated. Otherwise \u03b1 is set to a constant of less than one and preferably in the range of 0.8\u20130.95. One of skill in the art will appreciate that the adaptive filter may be implemented in a variety of ways, including fixed point rather than the described floating point realization. Accordingly, the described exemplary adaptation logic is by way of example only and not by way of limitation.","The 96 kHz near end Tx data samples () are also decimated by a second 12:1 decimator . However, decimator  does include a low pass filter capability to prevent aliasing of the decimated signal. The decimated output () is forwarded to a 60 Hz high pass filter  which reduces the 60 Hz interference induced on the transmit line due to proximity to power lines. Filtered output () is input to the difference operator  that preferably cancels unwanted echo by subtracting filtered reference signal () from the filter output signal ().","In the described exemplary embodiment, the adaptive filter  models the transfer characteristics of the hybrid and the tail circuit of the telephone circuit. The tail length supported should preferably be at least 8 msec. The adaptive filter  may be a linear transversal filter or other suitable finite impulse response filter. The echo canceller preferably converges or adapts only in the absence of near end speech. Therefore, near end speech and\/or noise present on the input signal () may cause the adaptive filter  to diverge. To avoid divergence, the adaptive filter  can be selectively enabled by the double talk logic . The double talk logic  utilizes a sample based algorithm to detect the presence of near end speech without incurring the delays associated with conventional systems in accordance with the following equation:\n\n|Near|>*Peak{|()|}+Background_Noise()\n","The double talk logic  is used to declare near end speech active when the absolute value of the decimated near end signal () is greater than the product of the hybrid gain (H) and a peak statistic of the far end data samples () summed with the estimated background noise of the transmit data samples. The hybrid gain is generally a constant preferably less than about one-half. The background noise for a typical voice channel is on the order of about \u221270 dBm which is far less than average active speech levels, which are typically in the order of about \u221225 dBm. The background noise estimate is therefore initialized to a value of about \u221270 dBm and thereafter periodically updated () by the energy estimator . The peak statistic of the far end data samples is defined by the following logic:\n\nIf max{()|, . . . ,|(1)|]}>Peak(1) then\n\nPeak()=max{()|, . . . ,*|(1)|]}\n\nelse\n\nPeak()=*Peak(1);\n","where A is a weighting function that is greater than zero and less than or equal to one. The parameter L is the number samples over which the maximum is determined, typically in the range of zero to one hundred and twenty eight samples and preferably on the order of about 64 samples. The parameter d is preferably a constant that is also greater than zero and less than or equal to one and preferably on the order of about 0.99. Therefore, to determined the peak statistic of the far end, the double talk logic applies a weighting factor A to the absolute value of the current sample (F(n)) and previous L samples (F(n\u2212L)). If the maximum product is greater than the previous peak statistic Peak(n\u22121) then the current peak statistic Peak(n) is set at the maximum of the product of the weighting factor and far end samples. Otherwise the current peak statistic Peak(n) is set equal to d times the value of the previous peak statistic Peak(n\u22121).","In the described exemplary embodiment, A, L and d are empirically determined to optimize performance and computational load for a given application. For example, double logic  can more accurately detect near end speech if the maximum is determined over a larger number of samples L. However, computational intensity also increases with increasing number of samples L. A and d can be inversely related to the number of sample L, so that A and d are smaller for larger number of samples and vice versa.","In the described exemplary embodiment, there is a delay associated with the high-pass filter  and the decimator . The double talk logic , which has negligible delays, can receive and process near end data samples prior to their arrival at the difference operator . Thus, the delay associated with the high-pass filter  and the second decimator  provide a look-ahead of M samples allowing the double talk logic  to preferably disable adaptation of the adaptive filter  M samples before the near-end signal reaches the difference operator . The look ahead capability M is the sum of the equivalent delays associated with the high pass filter  and the second decimator  and is typically two-three 8 kHz samples for a ITU-T G712 compliant system.",{"@attributes":{"id":"p-0191","num":"0190"},"figref":"FIG. 20","b":["582","580","588","582","576"],"i":["a","a"]},"The relative strength of the near end signal compared to the echo coupled through the hybrid increases with decreasing hybrid gain (H) so that in the described exemplary embodiment, the accuracy of near end voice detection increases with decreasing hybrid gain(H). Referring to , in another aspect of the present invention, a short adaptive filter  is integrated into the preferred double talk detection algorithm. The adaptive filter  models the transfer characteristics of the dialed telephone line circuit. The adaptive filter  may be a linear transversal filter or other suitable finite impulse response filter. An error signal () at the output of the difference operator  for filter adaptation may be characterized as follows:",{"@attributes":{"id":"p-0193","num":"0192"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"msub":{"mi":"e","mn":"0"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"n"}},{"mrow":[{"msub":{"mi":"Tx","mn":"0"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"n"}},{"munderover":{"mo":"\u2211","mrow":[{"mi":"j","mo":"=","mn":"0"},{"mi":"K","mo":"-","mn":"1"}]},"mo":"\u2062","mrow":{"mrow":[{"msub":{"mi":"w","mn":"0"},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"j"}},{"mi":"F","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":["n","j"],"mo":"-"}}}],"mo":"\u2062"}}],"mo":"-"}],"mo":"="}}}},"where e(n) is the error signal at time n (), F(n) is the reference signal () at time n and T(n) is the Tx data signal () input into difference operator  at time n, and wW(j) are the coefficients of the transversal filter where the dimension of the transversal filter is preferably the worst case echo path length (i.e. the length of the tail circuit K) and W(j), for j=0 to K\u22121, is given by:\n\n()()+\u03bc*()*()\n","wherein W(j) is preferably initialized to a reasonable value such as for example zero.","Assuming a block size of one msec (or 8 samples at a sampling rate of 8 kHz), the short term average energy of the reference signal Eis the sum of the last eight samples so that the convergence gain may be given by:",{"@attributes":{"id":"p-0197","num":"0196"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"\u03bc","mo":"=","mfrac":{"mi":"\u03b1","msub":{"mi":"E","mrow":{"mi":"ref","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"n"}}}}}}}},"where \u03b1 is the adaptation step size and Eis the energy estimate of the far end data sample F(n). In the described exemplary embodiment, the double talk logic  does not selectively enable\/disable adaptation of the filter  in accordance with the detection of near end speech so that filter  continuously adapts. Therefore, to reduce the computational burden placed upon the system and to prevent the filter from diverging the adaptive filter  can be figured to adapt very slowly so that \u03b1 is preferably in the range of about 0.01\u20130.0001.","The adaptive filter  again filters the far end reference signal () so that the echo level is can be reduced by subtracting filtered reference signal () from the Tx data samples () in a difference operator . The adaptive filter  can be reduce line echos about 6\u201312 dB so as to improve the performance of the double talk logic. In the described exemplary embodiment, the output () of the difference operator , (i.e. Tx data samples with reduced echo) is then forwarded to double talk logic  which then detects near end speech and selectively enables\/disables adaptation of the adaptive filter  (see ).","7. Voice Processor","The Internet is a loose association of thousands of networks and millions of computers across the world that are interconnected through communication links. The emergence of Internet Protocol (IP) as the standard transport protocol for packet based networks has enabled an on-line revolution in communications service and applications. Traditional dial-up modems provide online access through the public telephone network at up to 56 Kbps (equal to 56,000 bits per second). A cable modem, on the other hand, provides users with high-speed Internet access through a cable television network at data rates as high as 56 Mbps. However, traditional cable modem service has been limited to data applications so that the realization of diverse communications services at increased data rates requires the development of a common broadband cable access network with integrated voice and data services. Cable Television Laboratories, Inc. (CableLabs\u00ae) a membership organization consisting of cable television system operators developed PacketCable 1.0 which defines interface specifications for interoperable equipment capable of providing packet-based voice, video and other high-speed multimedia services over hybrid fiber coax (HFC) cable systems utilizing the DOCSIS protocol.","The described exemplary network gateway includes a voice and data processor that supports the exchange of voice and data between a traditional circuit switched and a packet based network via a DOCSIS HFC network. The exemplary voice and data processor may be implemented with a programmable DSP software architecture as shown in . This architecture includes a high speed DSP  with program memory , preferably on the order of about a 80 k word SRAM, and data memory  preferably on the order of about a 48 k word SRAM. A PCM highway  provides the voice and data processor  access to the audio processor and optional external audio processing circuits. A grant synchronizer  insures delivery of samples to the network gateway for upstream transmission. The grant synchronizer signals the DSP  that a pending grant is about to arrive at the network gateway so as to allow the DSP  to synchronize itself to scheduled grants at the network gateway. A host interface  transfers data, control and status messages between the DSP  and the MIPS core .","The described exemplary embodiment preferably provides embedded media terminal adapter (MTA) capability in compliance with PacketCable 1.0. The exemplary embedded MTA may be implemented with the programmable DSP software architecture to provide a subscriber side interface to the subscriber's telephony device via the voice and data processor, as well as a network side interface to the DOCSIS cable modem. Referring to  the preferred embedded MTA  includes a host application programming interface (HAPI)  that provides a software messaging interface between the MIPS host and the voice and data processor DSP. The HAPI  facilitates the issuing of commands from the MIPS host to the voice and data processor DSP as well the sending of events from the DSP to the MIPS core host.","In addition, the MTA  can provide all signaling and encapsulation elements required to provide telephony service over a DOCSIS HFC network  including media transport and call signaling via quality service logic . For example, gateway control protocol (GCP) logic  receives and mediates call-signaling information between the PacketCable network and the PSTN. The GCP logic  maintains and controls the overall call state for calls requiring PSTN interconnection. The GCP logic  controls the voice and data processor , via the MTA  and HAPI interface , by instructing it to create, modify, and delete connections that support the media stream over the IP network. The GCP logic  also instructs the voice and data processor to detect and generate events and signals. The GCP logic  also exercise attribute control over the voice and data processor  providing instructions as to which attributes to apply to a connection, such as, for example, encoding method, use of echo cancellation, security parameters, etc.","The GCP logic  also interfaces with an external control element called a call agent or call management server (CMS)  to terminate and generate the call signaling from and to the PacketCable side of the network in accordance with the network-based call signaling (NCS) protocol specification. The PacketCable 1.0 NCS architecture places call state and feature implementation in the centralized CMS , and places telephony device controls in the MTA . The MTA  passes device events to the CMS , and responds to commands issued from the CMS. The CMS, is responsible for setting up and tearing down calls, providing advanced services such as custom calling features, performing call authorization, and generating billing event records, etc. For example, the CMS  instructs the MTA  to inform the CMS  when the phone goes off hook, and seven dual tone multi frequency (DTMF) digits have been entered. The CMS  instructs the MTA  to create a connection, reserve quality of service (QoS) resources through the access network for the pending voice connection, and to play a locally generated ringback tone. The CMS in turn communicates with a remote CMS (or MGC) to setup the call. When the CMS detects answer from the far end, it instructs the MTA to stop the ringback tone, activate the media connection between the MTA and the far-end MTA, and begin sending and receiving media stream packets.","When a voice channel is successfully established, real time transport protocol (RTP) is used to transport all media streams in a PacketCable compliant network to guarantee interoperability. Real time transport protocol (RTP) provides end-to-end delivery services for data with real time characteristics, such as interactive audio and video. Those services include payload type identification, sequence numbering, timestamping and delivery monitoring of the quality of service (QoS) and conveys to participants statistics such as for example packet and byte counts for the session. RTP resides right above the transport layer. The described exemplary embedded MTA  preferably includes RTP logic  that converts RTP packets (headers) to a protocol independent format utilized by the voice and data processor  and vice versa.","The described exemplary embedded MTA preferably includes channel associated signaling (CAS) logic  resident on the MIPS core that interfaces with the subscriber line interface circuits   via the GPIO interface  (see ) to provide ring generation, hookswitch detection, and battery voltage control. The CAS logic  preferably supports custom calling features such as for exam distinctive ringing.","The described exemplary embedded MTA  preferably includes MTA device provisioning logic  which enables the embedded MTA  to register and provide subscriber services over the HFC network . Provisioning logic  provides initialization, authentication, and registration functions. The Provisioning logic  also provides attribute definitions required in the MTA configuration file. The provisioning logic  includes a SNMP logic  that exchanges device information and endpoint information between the MTA  and an external control element called a provisioning server (not shown). The MTA also sends notification to the provisioning server that provisioning has been completed along with a pass\/fail status using the SNMP protocol.","The Provisioning logic  also includes DHCP logic  which interfaces with an external dynamic host configuration protocol (DHCP) server to assign an IP address to the MTA. The DHCP server (not shown) is a back office network element used during the MTA device provisioning process to dynamically allocate IP addresses and other client configuration information. Further provisioning logic preferably includes domain name server (DNS) logic  which interfaces with an external DNS server(not shown) to obtain the IP address of a PacketCable server given its fully\\qualified domain name.","The MTA configuration file is downloaded to the MTA from an external trivial file transfer protocol (TFTP) server (not shown) through TFTP logic . The TFTP server is a back office network element used during the MTA device provisioning process to download configuration files to the MTA. An HTTP Server may be used instead of a TFTP server to download configuration files to the MTA.","Each of PacketCable's protocol interfaces is subject to threats that could pose security risks to both the subscriber and service provider. The PacketCable architecture addresses these threats by specifying, for each defined protocol interface, the underlying security mechanisms (such as IPSec) that provide the protocol interface with the security services it requires, e.g., authentication, integrity, confidentiality. Security logic  is PacketCable compliant and provides for voice and provides end-to-end encryption of RTP media streams and signaling messages, to reduce the threat of unauthorized interception of communications. The security logic  preferably provides additional security services such as, for example, authentication, access control, integrity, confidentiality and non-repudiation.","DOCSIS service logic  preferably provides the primary interface between the MTA  and the DOCSIS cable modem (i.e. DOCSIS MAC and modulator\/demodulator) of the network gateway. The DOCIS service logic  provides multiple sub-interfaces such as for example a control sub-interface which manages DOCSIS service-flows and associated QoS traffic parameters and classification rules as well as a synchronization interface which is used to synchronize packet and scheduling prioritization for minimization of latency and jitter with guaranteed minimum constant bit rate scheduling. In addition, the DOCSIS service logic is used to request bandwidth and QoS resources related to the bandwidth. The DOCIS cable modem features of the network gateway then negotiate reserve bandwidth, guaranteed minimum bit rate etc, utilizing DOSCIS 1.1 quality of service feature. Similarly, DOCSIS service logic  preferably includes a transport interface which is used to process packets in the media stream and perform appropriate per-packet QoS processing.","The exemplary embedded MTA may best be illustrated in the is context of a typical voice communication across the DOCSIS HFC network. The user initiates a communication by going off hook. The CAS detects the off hook condition from the SLIC and sends an off hook event to the MTA call client. The MTA call client then instructs the GCP logic to generate a off hook signal. The GCP logic generates an of hook signal which is forwarded to the MTA call client and transmitted out the QoS service logic to the call management server via the DOCSIS MAC and upstream modulator of the network gateway and the CMTS. The call management server typically would transmit a return signal via the CMTS, DOCSIS MAC and downstream demodulator of the network gateway to the MTA call client via the QoS service logic. The MTA call client preferably forwards that signal to the GCP logic which decodes the signal, typically play dial tone. The GCP logic would then signal the MTA call client to play dial tone. The MTA call client then sends a command to the voice and data processor via the HAPI interface to play dial tone. The user then hears a dial tone.","Upon hearing a dial tone a user will then typically dial a number. The voice and data processor includes a DTMF detector which detects the dialed digits and forwards the detected digits to the MTA call client as events via the HAPI interface. The MTA call client forwards the event to the GCP logic which encodes the dialed digits into a signaling message which is returned to the MTA call client. The MTA call client transmits the signaling message out the QoS service logic to the call management server via the DOCSIS MAC and upstream modulator of the network gateway and the CMTS. The call management server would then instruct a called party MTA to generate a ring to the called number. If the called number answers by going off hook, the CAS of the called MTA would detect an off hook condition and signal the call management server. The call management server then instructs the MTA call client via the CMTS, and downstream demodulator, DOCSIS MAC and QoS service logic of the network gateway to establish a voice connection with a given set of features, i.e. use echo cancellation, and silence suppression, use given coder etc. In addition, the MTA call client is given the IP address of the called party, to which the RTP voice packets should be sent. The MTA call client forwards the received message to the GCP logic which decodes the received message. The GCP logic generates attribute instructions for the voice and data processor such as, for example, encoding method, use of echo cancellation, security parameters, etc. which are communicated to the voice and data processor via the MTA call client and the HAPI interface.","Voice packets are then exchanged. For example, if the calling party speaks, the voice and data processor would processor the voice and forward voice packets the MTA call client via the HAPI interface. The MTA call client would then forward those voice packet the RTP logic which would convert the packet from a protocol independent packet format to the RTP format. The RTP voice packets are then returned to the MTA which transmits the RTP voice packet to the CMTS via the QoS service logic and the DOCSIS MAC and upstream demodulator of the network gateway. The voice packets are then routed to the called party. Similarly, voice packets from the called party are communicated to the MTA of the call client via the QoS service logic. The MTA call client forwards the RTP voice packets to the RTP logic which converts the packet from the RTP format to the protocol independent packet format. The protocol independent voice packets are returned to the MTA call client which forwards them to the voice and data processor via the HAPI interface. The voice and data processor decodes the packets and communicates a digital stream to the called party. Voice exchange would continue in a similar manner until an on hook condition is detected by either the calling or called party CAS which would forwarded a on hook detection event to its respective MTA. The MTA would instructs the GCP logic to generate a hook detection signaling message which is returned to the MTA and forwarded to the call management server. The call management server would generate a request to play (dial tone, silence or receiver off hook) which is forwarded to the opposite MTA. The MTA would forward the request to the GCP logic which would then instruct the voice and data processor to play dial tone via the MTA and HAPI interface.","Telephony calls in the other direction are similarly processed. For example, the call management server instructs the MTA called client to ring a dialed number. The MTA called client instructs the GCP logic to generates an command to ring the dialed number. The command is then forwarded to the CAS via the MTA called client. The CAS generates a ring signal and forwards that signal to the SLIC which then rings the called telephony device. The MTA called client may also instruct the GCP logic to present call ID which preferably generates a command for the voice and data processor to present caller ID. If the user picks up the phone the CAS would detect an off hook condition and signal an off hook event back to the MTA. The MTA called client would then instruct the GCP logic to create an off hook detection signaling message, which when created is returned to the MTA and forwarded to the external call management server via the QoS service logic, DOCSIS MAC and upstream modulator of the network gateway and the CMTS. A communication channel would again be established with a given set of attributes as previously described.","Referring to , the GCP logic implements the NCS features of the PacketCable 1.0 specification including protocol transaction management, parsing, verification and formatting of protocol data units (PDUs) and other utility functions. The PacketCable protocol typically requires an acknowledgment that a request has been received. Therefore, the GCP logic includes transmitter queue  which registers all requests sent from the GCP logic to the call management server via a transmitter scheduler  and the MTA. A receive router  then analyzes packets received from the call management server via the MTA call client to determine if the received message is an acknowledgment or a new request. The receiver router  forwards new requests to a transaction queue . If the received packet is an acknowledgment of a request previously sent from the GCP logic to the call management server, the receiver router  clears that request that request by forwarding the acknowledgment () to the transmitter queue . The transmitter queue  periodically retransmits buffered requests until an acknowledgment from the call management server is received.","The transaction queue  registers the receipt of a given request from the call management server as well as the transmission of an acknowledgment of that request from the GCP logic to the call management server, so that the transaction queue  may preferably detect requests re-transmitted from the call management server for which an acknowledgment has already been sent. In addition, the transaction queue  parses the incoming requests according to the type of requests. The transaction queue  routes connection messages to a connection message parser . Connections messages are used to create or terminate a connection. The connection message parser generates and forwards connection controls (including connection attributes) () to the MTA which are then communicated to the voice and data processor via the HAPI interface. The transaction queue  routes request\/notify messages to a request\/notify message parser . Request\/notify messages may be signal requests such as play dial tone, busy tone etc. or requests to detect events such as for example, detect DTMF digits, fax tone, modem tone etc. The request\/notify message parser  preferably generates and forwards signal requests () to the voice and data processor via the MTA and HAPI interface. The request\/notify message parser  flags event detection requests () to an event filter .","Actual events detected by the voice and data processor (such as, for example, fax tone) or the CAS (such as, for example, off hook detected) are forwarded to the event filter via the MTA call client. The event filter  filters the events provided by the voice and data processor and CAS via the call client, and only transmits those detected events that the call management server requested, as indicted by flags () communicated to the event filter by the request\/notify message parser . The event filter  preferably forwards detected events of interest to the call management server to a message formatter . The message formatter  formats the detected event into the appropriate protocol and forwards the detected event message to transmitter queue , which registers the message and will retransmit the message if an acknowledgment is not received in a timely manner via the receiver router (). The transmitter queue  forwards the message to the transmitter scheduler  which bundles outgoing messages and forwards them to the MTA call client (not shown) for communication to the call management server.","The PacketCable 1.0 specification provides for the use of a digit map which is designed to reduce the number of messages communicated between the call management server and the MTA call agent when a user is dialing a number. For example, the dialing of long distance number involves the use of ten digits (i.e. the area code and number) which would require ten requests and acknowledgments i.e. one per digit. In the alternative the call management server may provide a digit map to the MTA call client which instruct digit map logic  to collect detected digits from the voice and data processor according to a specified format, for example ten digits for long distance call. The digit map logic  then forwards for example all ten digits to the event filter which filters the digit detection, and forwards events of interest to the message parser  for communication to the call management server as previously described through transmitter queue  and transmitter scheduler .","Event quarantine logic  buffers detected events received from the CAS or voice and data processor via the MTA call client for which the event filter has not received a detect event request from the call server manager via the request\/notify message parser flag (). Responses or the result () of a connection or signal requests are forwarded from the MTA call client to a response formatter  with the GCP logic which formats the result into the proper protocol and forwards that result to the transmitter scheduler  for communication to the call management server via the MTA call client. In addition, the response formatter  notifies the transaction queue  that an acknowledgment has been sent in response to a given request. The transaction queue  may then detect the re-transmission of a request from the call management server should that acknowledgment be lost or otherwise not received by the call management server. The transaction queue  preferably instructs the response formatter  to retransmit an acknowledgment when the transaction queue  detects the re-transmission of a request for which an acknowledgment had been previously sent.","Referring to , RTP logic  preferably converts RTP packets to the protocol independent packet format utilized on the voice and data processor and vice versa. In the described exemplary embodiment, the protocol independent packet payload is preferably identical to the RTP packet payload so that the RTP logic  need only convert between RTP and exchange headers. In the described exemplary embodiment a RTP shim  provides two way exchange of protocol independent packets with the MTA call client . The RTP shim  accepts these packets from the MTA call client , converts these packet header, to a RTP header and forwards the RTP packet to a RTP stack . The RTP stack  provides the statistical monitoring function required by the RTP protocol such as, for example, collecting statistics on the number of bytes sent and received, the number of packets lost and how much jitter was present. The RTP stack  provides two way exchange of RTP packet between the MTA call client and the RTP logic , receiving RTP packets from the RTP shim  and forwarding them to the MTA call client  and vice versa.","Referring to  the described exemplary host application programming interface (HAPI) provides a software messaging interface between the MTA call client  and the voice and data processor DSP. The HAPI  facilitates the issuing of commands from the MIPS core via the MTA call client to the voice and data processor DSP as well the sending of events from the DSP to the MTA call client . The HAPI interface  can be scalable to support multiple channels as well as multiple DSPs. In addition the HAPI  is a thread safe environment, providing multi-threading capability to support multiple channels. Multi-threading provides multiple, simultaneously-executing \u201cthreads\u201d within a single application. The benefit of a multi-threaded application is similar to that of a multi-tasked operating system, the application may perform multiple tasks by using separate threads.","In the described exemplary HAPI, an application programming interface (API)  receives commands from and issues responses to the MTA call client . The API  processes incoming packets adding an additional header word to identify the channel which should process the packet as well as other processing parameters such as for example, packet type (i.e. voice or fax), packet length. The API forwards processed API messages () to a physical interface (firmware layer)  that interfaces with the host port of the DSP underlying the voice and data processor so as to isolate the MTA call client software and the signal processing software from the underlying hardware. This methodology allows the software to be ported to various hardware platforms by porting only the hardware interface portions of the HAPI interface  to the target hardware. The physical interface  formats the message in accordance with the underlying DSP and forwards or transmits the message to the telephony algorithms executing on the DSP.","Similarly, the underlying DSP forwards processed packets, such as, for example, encoded voice packets, to the physical interface . The physical interface  preferably reformats the response into an API message. When a processed packet is forwarded to the physical interface  the underlying DSP also interrupts a APITask Thread  that retrieves the processed API messages from the physical interface . The APITask Thread  determines whether the API message is an event such as, for example, a voice or fax packet or a DTMF detection which are forwarded directly to the MTA call client (), or a response to a command\/request from the MTA call client. For example, the MTA call client may command the voice and data processor to turn off the echo canceller. Such a command is preferably processed by the API interface  to add the appropriate header word and forwarded to the physical interface . The physical interface  formats the message in accordance with the underlying DSP and issues the command the underlying voice channel to turn off the echo canceller. When the command has been complied with a response is returned from the underlying DSP to the physical interface . The physical interface  formats the response into an API message and forwards it to the APITask thread  which then forwards it as an API response to the API interface . The API interface  correlates the API responses received from the APITask thread  to the corresponding command\/request that prompted the response and forwards a HAPI response to the MTA call client .","Referring to , the described channel associated signaling (CAS) logic  utilizes a foreign exchange office (FXO) interface to provide exchange of commands and detection of events between the MTA call client  and standard commercial analog loop\/ground start devices such as, for example, plain old telephone sets (POTS), group three facsimiles, modems, answering machine or other similar devices. The CAS logic  can operate in switch mode, such that ABCD bits  are terminated within the CAS logic. The MTA call client interfaces with the CAS logic through high level commands  and events . For example, if the CAS logic detects a phone going off the hook, a detection event is forwarded to the MTA call client  which may then notify the call management server as previously described. The MTA call client is also able to issue high level commands to the CAS logic.","For example, to ring a phone, the MTA call client  sends a ring generation profile to the CAS logic, and the command is switched into raw CAS bits by FXO termination logic  to control the external interface via a hardware abstraction layer (HAL) . Similarly detected events, signaled from the hardware SLIC , including on\/off hook, flash hook and potentially pulse dial, are returned to the FXO termination logic  from the hardware abstraction layer as raw CAS bits. The HAL  provides a physical interface to the connected SLIC. The HAL  formats message signals in accordance with the underlying SLIC and forwards or transmits the message signal to the connected telephony device via the SLIC .","The FXO termination logic  preferably verifies the integrity of the detected event and forwards a detected event message to the MTA call client. The FXO termination logic  includes a state machine which monitors detected events signaled from the SLIC  via the hardware abstraction layer . The FXO termination logic  qualifies detected events signaled by the SLIC  to determine if a valid on\/off hook, flash hook or pulse dial has been detected. The FXO termination logic analyzes the period of the received signal to determine valid flash hook or pulse dial conditions. Similarly, the FXO termination logic  includes a state machine which associated with the ringing of connected phones. When the MTA call client issues a command to ring a connected phone with a pre-defined cadence and the associated FXO termination state machine will ring the connected phone in accordance with the MTA command.","The described exemplary voice and data processor is preferably implemented with a programmable DSP software architecture (see ). The programmable DSP  is effectively hidden within the embedded communications software layer. The software layer binds all core DSP algorithms together, interfaces the DSP hardware to the host, and provides low level services such as the allocation of resources to allow higher level software programs to run. An exemplary multi-layer software architecture loaded into the program memory  for execution on the DSP platform is shown in . The MTA call client  provides overall executive control and system management, and directly interfaces a DSP server  to the host MIPS core (see to ). The DSP server  provides DSP resource management and telecommunications signal processing. Operating below the DSP server layer are a number of physical devices (PXD) , , . Each PXD provides an interface between the DSP server  and an external telephony device (not shown) via a hardware abstraction layer (HAL) .","The DSP server  includes a resource manager  which receives commands from, forwards events to, and exchanges data with the MTA call client . The user application layer  can either be resident on the DSP  or alternatively within the MTA call client. An application programming interface  (API) provides a software interface between the user MTA call client  and the resource manager . The resource manager  manages the internal\/external program and data memory of the DSP . In addition the resource manager dynamically allocates DSP resources, performs command routing as well as other general purpose functions.","The DSP server  also includes virtual device drivers (VHDs) , , . The VHDs are a collection of software objects that control the operation of and provide the facility for real time signal processing. Each VHD , , includes an inbound and outbound media queue (not shown) and a library of signal processing services specific to that VHD , , . In the described exemplary embodiment, each VHD , , is a complete self-contained software module for processing a single channel with a number of different telephony devices. Multiple channel capability can be achieved by adding VHDs to the DSP server . The resource manager  dynamically controls the creation and deletion of VHDs and services.","A switchboard  in the DSP server  dynamically inter-connects the PXDs , , with the VHDs , , . Each PXD , , is a collection of software objects which provide signal conditioning for one external telephony device. For example, a PXD may provide volume and gain control for signals from a telephony device prior to communication with the switchboard . Multiple telephony functionalities can be supported on a single channel by connecting multiple PXDs, one for each telephony device, to a single VHD via the switchboard . Connections within the switchboard  are managed by the user application layer  via a set of API commands to the resource manager . The number of PXDs and VHDs is expandable, and limited only by the memory size and the MIPS (millions instructions per second) of the underlying hardware.","A hardware abstraction layer (HAL)  interfaces directly with the underlying DSP  hardware (see ) and exchanges telephony signals between the external telephony devices and the PXDs. The HAL  includes basic hardware interface routines, including DSP initialization, target hardware control, codec sampling, and hardware control interface routines. The DSP initialization routine is invoked by the user application layer  to initiate the initialization of the signal processing system. The DSP initialization sets up the internal registers of the signal processing system for memory organization, interrupt handling, timer initialization, and DSP configuration. Target hardware initialization involves the initialization of all hardware devices and circuits external to the signal processing system. The HAL  is a physical firmware layer that isolates the communications software from the underlying hardware. This methodology allows the communications software to be ported to various hardware platforms by porting only the affected portions of the HAL  to the target hardware.","The exemplary software architecture described above can be integrated into numerous telecommunications products. In an exemplary embodiment, the software architecture is designed to support telephony signals between telephony devices (and\/or circuit switched networks) and packet based networks. A network VHD (NetVHD) is used to provide a single channel of operation and provide the signal processing services for transparently managing voice, fax, and modem data across a variety of packet based networks. More particularly, the NetVHD encodes and packetizes DTMF, voice, fax, and modem data received from various telephony devices and\/or circuit switched networks and transmits the packets to the user application layer. In addition, the NetVHD disassembles DTMF, voice, fax, and modem data from the user application layer, decodes the packets into signals, and transmits the signals to the circuit switched network or device.","An exemplary embodiment of the NetVHD operating in the described software architecture is shown in . The NetVHD includes four operational modes, namely voice mode , voiceband data mode , fax relay mode , and data relay mode . In each operational mode, the resource manager invokes various services. For example, in the voice mode , the resource manager invokes call discrimination , packet voice exchange , and packet tone exchange . The packet voice exchange  may employ numerous voice compression algorithms, including, among others, Linear 128 kbps, G.711 u-law\/A-law 64 kbps (ITU Recommendation G.711 (1988)\u2014Pulse code modulation (PCM) of voice frequencies), G.726 16\/24\/32\/40 kbps (ITU Recommendation G.726 (12\/90)\u201440, 32, 24, 16 kbit\/s Adaptive Differential Pulse Code Modulation (ADPCM)), G.729A 8 kbps (Annex A (11\/96) to ITU Recommendation G.729\u2014Coding of speech at 8 kbit\/s using conjugate structure algebraic-code-excited linear-prediction (CS-ACELP)\u2014Annex A: Reduced complexity 8 kbit\/s CS-ACELP speech codec), and G.723 5.3\/6.3 kbps (ITU Recommendation G.723.1 (03\/96)\u2014Dual rate coder for multimedia communications transmitting at 5.3 and 6.3 kbit\/s). The contents of each of the foregoing ITU Recommendations being incorporated herein by reference as if set forth in full.","The packet voice exchange  is common to both the voice mode  and the voiceband data mode . In the voiceband data mode , the resource manager invokes the packet voice exchange  for exchanging transparently data without modification (other than packetization) between the telephony device (or circuit switched network) and the packet based network. This is typically used for the exchange of fax and modem data when bandwidth concerns are minimal as an alternative to demodulation and remodulation. During the voiceband data mode , the human speech detector service  is also invoked by the resource manager. The human speech detector  monitors the signal from the near end telephony device for speech. In the event that speech is detected by the human speech detector , an event is forwarded to the resource manager which, in turn, causes the resource manager to terminate the human speech detector service  and invoke the appropriate services for the voice mode  (i.e., the call discriminator, the packet tone exchange, and the packet voice exchange).","In the fax relay mode , the resource manager invokes a packet fax data exchange  service. The packet fax exchange  may employ various data pumps including, among others, V.17 which can operate up to 14,400 bits per second, V.29 which uses a 1700-Hz carrier that is varied in both phase and amplitude, resulting in 16 combinations of 8 phases and 4 amplitudes which can operate up to 9600 bits per second, and V.27ter which can operate up to 4800 bits per second. Likewise, the resource manager invokes a packet modem data exchange  service in the data relay mode . The packet modem data exchange  may employ various data pumps including, among others, V.22 bis\/V.22 with data rates up to 2400 bits per second, V.32 bis\/V.32 which enables full-duplex transmission at 14,400 bits per second, and V.34 which operates up to 33,600 bits per second. The ITU Recommendations setting forth the standards for the foregoing data pumps are incorporated herein by reference as if set forth in full.","In the described exemplary embodiment, the user application layer does not need to manage any service directly. The user application layer manages the session using high-level commands directed to the NetVHD, which in turn directly runs the services. However, the user application layer can access more detailed parameters of any service if necessary to change, by way of example, default functions for any particular application.","In operation, the user application layer opens the NetVHD and connects it to the appropriate PXD. The user application then may configure various operational parameters of the NetVHD, including, among others, default voice compression (Linear, G.711, G.726, G.723.1, G.723.1A, G.729A, G.729B), fax data pump (Binary, V.17, V.29, V.27ter), and modem data pump (Binary, V.22 bis, V.32 bis, V.34). The user application layer then loads an appropriate signaling service (not shown) into the NetVHD, configures it and sets the NetVHD to the On-hook state.","In response to events from the signaling service (not shown) via a near end telephony device (hookswitch), or signal packets from the far end, the user application will set the NetVHD to the appropriate off-hook state, typically voice mode. In an exemplary embodiment, if the signaling service event is triggered by the near end telephony device, the packet tone exchange will generate dial tone. Once a DTMF tone is detected, the dial tone is terminated. The DTMF tones are packetized and forwarded to the user application layer for transmission on the packet based network. The packet tone exchange could also play ringing tone back to the near end telephony device (when a far end telephony device is being rung), and a busy tone if the far end telephony device is unavailable. Other tones may also be supported to indicate all circuits are busy, or an invalid sequence of DTMF digits were entered on the near end telephony device.","Once a connection is made between the near end and far end telephony devices, the call discriminator is responsible for differentiating between a voice and machine call by detecting the presence of a 2100 Hz. tone (as in the case when the telephony device is a fax or a modem), a 1100 Hz. tone or V.21 modulated high level data link control (HDLC) flags (as in the case when the telephony device is a fax). If a 1100 Hz. tone, or V.21 modulated HDLC flags are detected, a calling fax machine is recognized. The NetVHD then terminates the voice mode  and invokes the packet fax exchange to process the call. If however, 2100 Hz tone is detected, the NetVHD terminates voice mode and invokes the packet data exchange.","The packet data exchange service further differentiates between a fax and modem by continuing to monitor the incoming signal for V.21 modulated HDLC flags, which if present, indicate that a fax connection is in progress. If HDLC flags are detected, the NetVHD terminates packet data exchange service and initiates packet fax exchange service. Otherwise, the packet data exchange service remains operative. In the absence of an 1100 or 2100 Hz. tone, or V.21 modulated HDLC flags the voice mode remains operative.","Voice mode provides signal processing of voice signals. Voice mode enables the transmission of voice over a packet based system such as Voice over IP (VoIP, H.323), Voice over Frame Relay (VoFR, FRF-11), Voice Telephony over ATM (VTOA), or any other proprietary network. The voice mode should also permit voice to be carried over traditional media such as time division multiplex (TDM) networks and voice storage and playback systems.","The PXDs for the voice mode provide echo cancellation, gain, and automatic gain control. The network VHD invokes numerous services in the voice mode including call discrimination, packet voice exchange, and packet tone exchange. These network VHD services operate together to provide: (1) an encoder system with DTMF detection, call progress tone detection, voice activity detection, voice compression, and comfort noise estimation, and (2) a decoder system with delay compensation, voice decoding, DTMF generation, comfort noise generation and lost frame recovery.","The services invoked by the network VHD in the voice mode and the associated PXD is shown schematically in . In the described exemplary embodiment, the PXD  provides two way communication with a telephone or a circuit switched network, such as a PSTN line (e.g. DS0) carrying a 64 kb\/s pulse code modulated (PCM) signal, i.e., digital voice samples.","The incoming PCM signal is initially processed by the PXD  to remove far end echos. As the name implies, echos in telephone systems is the return of the talker's voice resulting from the operation of the hybrid with its two-four wire conversion. If there is low end-to-end delay, echo from the far end is equivalent to side-tone (echo from the near-end), and therefore, not a problem. Side-tone gives users feedback as to how loud they are talking, and indeed, without side-tone, users tend to talk too loud. However, far end echo delays of more than about 10 to 30 msec significantly degrade the voice quality and are a major annoyance to the user.","An echo canceller  is used to remove echos from far end speech present on the incoming PCM signal before routing the incoming PCM signal back to the far end user. The echo canceller  samples an outgoing PCM signal from the far end user, filters it, and combines it with the incoming PCM signal . Preferably, the echo canceller  is followed by a non-linear processor (NLP)  which may mute the digital voice samples when far end speech is detected in the absence of near end speech. The echo canceller  may also inject comfort noise which in the absence of near end speech may be roughly at the same level as the true background noise or at a fixed level.","After echo cancellation, the power level of the digital voice samples is normalized by an automatic gain control (AGC)  to ensure that the conversation is of an acceptable loudness. Alternatively, the AGC can be performed before the echo canceller , however, this approach would entail a more complex design because the gain would also have to be applied to the sampled outgoing PCM signal . In the described exemplary embodiment, the AGC  is designed to adapt slowly, although it should adapt fairly quickly if overflow or clipping is detected. The AGC adaptation should be held fixed if the NLP  is activated.","After AGC, the digital voice samples are placed in the media queue  in the network VHD  via the switchboard \u2032. In the voice mode, the network VHD  invokes three services, namely call discrimination, packet voice exchange, and packet tone exchange. The call discriminator  analyzes the digital voice samples from the media queue to determine whether a 2100 Hz, a 1100 Hz. tone or V.21 modulated HDLC flags are present. As described above with reference to , if either tone or HDLC flags are detected, the voice mode services are terminated and the appropriate service for fax or modem operation is initiated. In the absence of a 2100 Hz, a 1100 Hz. tone, or HDLC flags, the digital voice samples are coupled to the encoder system which includes a voice encoder , a voice activity detector (VAD) , a comfort noise estimator , a DTMF detector , a call progress tone detector  and a packetization engine .","Typical telephone conversations have as much as sixty percent silence or inactive content. Therefore, high bandwidth gains can be realized if digital voice samples are suppressed during these periods. A VAD , operating under the packet voice exchange, is used to accomplish this function. The VAD  attempts to detect digital voice samples that do not contain active speech. During periods of inactive speech, the comfort noise estimator  couples silence identifier (SID) packets to a packetization engine . The SID packets contain voice parameters that allow the reconstruction of the background noise at the far end.","From a system point of view, the VAD  may be sensitive to the change in the NLP . For example, when the NLP  is activated, the VAD  may immediately declare that voice is inactive. In that instance, the VAD  may have problems tracking the true background noise level. If the echo canceller  generates comfort noise during periods of inactive speech, it may have a different spectral characteristic from the true background noise. The VAD  may detect a change in noise character when the NLP  is activated (or deactivated) and declare the comfort noise as active speech. For these reasons, the VAD  should be disabled when the NLP  is activated. This is accomplished by a \u201cNLP on\u201d message  a passed from the NLP  to the VAD .","The voice encoder , operating under the packet voice exchange, can be a straight 16 bit PCM encoder or any voice encoder which supports one or more of the standards promulgated by ITU. The encoded digital voice samples are formatted into a voice packet (or packets) by the packetization engine . These voice packets are formatted according to an applications protocol and outputted to the host (not shown). The voice encoder  is invoked only when digital voice samples with speech are detected by the VAD . Since the packetization interval may be a multiple of an encoding interval, both the VAD  and the packetization engine  should cooperate to decide whether or not the voice encoder  is invoked. For example, if the packetization interval is 10 msec and the encoder interval is 5 msec (a frame of digital voice samples is 5 ms), then a frame containing active speech should cause the subsequent frame to be placed in the 10 ms packet regardless of the VAD state during that subsequent frame. This interaction can be accomplished by the VAD  passing an \u201cactive\u201d flag to the packetization engine , and the packetization engine  controlling whether or not the voice encoder  is invoked.","In the described exemplary embodiment, the VAD  is applied after the AGC . This approach provides optimal flexibility because both the VAD  and the voice encoder  are integrated into some speech compression schemes such as those promulgated in ITU Recommendations G.729 with Annex B VAD (March 1996)\u2014Coding of Speech at 8 kbits\/s Using Conjugate-Structure Algebraic-Code-Exited Linear Prediction (CS-ACELP), and G.723.1 with Annex A VAD (March 1996)\u2014Dual Rate Coder for Multimedia Communications Transmitting at 5.3 and 6.3 kbit\/s, the contents of which is hereby incorporated by reference as through set forth in full herein.","Operating under the packet tone exchange, a DTMF detector  determines whether or not there is a DTMF signal present at the near end. The DTMF detector  also provides a pre-detection flag which indicates whether or not it is likely that the digital voice sample might be a portion of a DTMF signal. If so, the pre-detection flag is relayed to the packetization engine  instructing it to begin holding voice packets. If the DTMF detector  ultimately detects a DTMF signal, the voice packets are discarded, and the DTMF signal is coupled to the packetization engine . Otherwise the voice packets are ultimately released from the packetization engine  to the host (not shown). The benefit of this method is that there is only a temporary impact on voice packet delay when a DTMF signal is pre-detected in error, and not a constant buffering delay. Whether voice packets are held while the pre-detection flag is active could be adaptively controlled by the user application layer.","Similarly, a call progress tone detector  also operates under the packet tone exchange to determine whether a precise signaling tone is present at the near end. Call progress tones are those which indicate what is happening to dialed phone calls. Conditions like busy line, ringing called party, bad number, and others each have distinctive tone frequencies and cadences assigned them. The call progress tone detector  monitors the call progress state, and forwards a call progress tone signal to the packetization engine to be packetized and transmitted across the packet based network. The call progress tone detector may also provide information regarding the near end hook status which is relevant to the signal processing tasks. If the hook status is on hook, the VAD should preferably mark all frames as inactive, DTMF detection should be disabled, and SID packets should only be transferred if they are required to keep the connection alive.","The decoding system of the network VHD  essentially performs the inverse operation of the encoding system. The decoding system of the network VHD  comprises a depacketizing engine , a voice queue , a DTMF queue , a precision tone queue , a voice synchronizer , a DTMF synchronizer , a precision tone synchronizer , a voice decoder , a VAD , a comfort noise estimator , a comfort noise generator , a lost packet recovery engine , a tone generator , and a precision tone generator .","The depacketizing engine  identifies the type of packets received from the host (i.e., voice packet, DTMF packet, call progress tone packet, SID packet), transforms them into frames which are protocol independent. The depacketizing engine  then transfers the voice frames (or voice parameters in the case of SID packets) into the voice queue , transfers the DTMF frames into the DTMF queue  and transfers the call progress tones into the call progress tone queue . In this manner, the remaining tasks are, by and large, protocol independent.","A jitter buffer is utilized to compensate for network impairments such as delay jitter caused by packets not arriving at the same time or in the same order in which they were transmitted. In addition, the jitter buffer compensates for lost packets that occur on occasion when the network is heavily congested. In the described exemplary embodiment, the jitter buffer for voice includes a voice synchronizer  that operates in conjunction with a voice queue  to provide an isochronous stream of voice frames to the voice decoder .","Sequence numbers embedded into the voice packets at the far end can be used to detect lost packets, packets arriving out of order, and short silence periods. The voice synchronizer  can analyze the sequence numbers, enabling the comfort noise generator  during short silence periods and performing voice frame repeats via the lost packet recovery engine  when voice packets are lost. SID packets can also be used as an indicator of silent periods causing the voice synchronizer  to enable the comfort noise generator . Otherwise, during far end active speech, the voice synchronizer  couples voice frames from the voice queue  in an isochronous stream to the voice decoder . The voice decoder  decodes the voice frames into digital voice samples suitable for transmission on a circuit switched network, such as a 64 kb\/s PCM signal for a PSTN line. The output of the voice decoder  (or the comfort noise generator  or lost packet recovery engine  if enabled) is written into a media queue  for transmission to the PXD .","The comfort noise generator  provides background noise to the near end user during silent periods. If the protocol supports SID packets, (and these are supported for VTOA, FRF-11, and VoIP), the comfort noise estimator at the far end encoding system should transmit SID packets. Then, the background noise can be reconstructed by the near end comfort noise generator  from the voice parameters in the SID packets buffered in the voice queue . However, for some protocols, namely, FRF-11, the SID packets are optional, and other far end users may not support SID packets at all. In these systems, the voice synchronizer  must continue to operate properly. In the absence of SID packets, the voice parameters of the background noise at the far end can be determined by running the VAD  at the voice decoder  in series with a comfort noise estimator .","Preferably, the voice synchronizer  is not dependent upon sequence numbers embedded in the voice packet. The voice synchronizer  can invoke a number of mechanisms to compensate for delay jitter in these systems. For example, the voice synchronizer  can assume that the voice queue  is in an underflow condition due to excess jitter and perform packet repeats by enabling the lost frame recovery engine . Alternatively, the VAD  at the voice decoder  can be used to estimate whether or not the underflow of the voice queue  was due to the onset of a silence period or due to packet loss. In this instance, the spectrum and\/or the energy of the digital voice samples can be estimated and the result fed back to the voice synchronizer . The voice synchronizer  can then invoke the lost packet recovery engine  during voice packet losses and the comfort noise generator  during silent periods.","When DTMF packets arrive, they are depacketized by the depacketizing engine . DTMF frames at the output of the depacketizing engine  are written into the DTMF queue . The DTMF synchronizer  couples the DTMF frames from the DTMF queue  to the tone generator . Much like the voice synchronizer, the DTMF synchronizer  is employed to provide an isochronous stream of DTMF frames to the tone generator . Generally speaking, when DTMF packets are being transferred, voice frames should be suppressed. To some extent, this is protocol dependent. However, the capability to flush the voice queue  to ensure that the voice frames do not interfere with DTMF generation is desirable. Essentially, old voice frames which may be queued are discarded when DTMF packets arrive. This will ensure that there is a significant inter-digit gap before DTMF tones are generated. This is achieved by a \u201ctone present\u201d message passed between the DTMF queue and the voice synchronizer .","The tone generator  converts the DTMF signals into a DTMF tone suitable for a standard digital or analog telephone. The tone generator  overwrites the media queue  to prevent leakage through the voice path and to ensure that the DTMF tones are not too noisy.","There is also a possibility that DTMF tone may be fed back as an echo into the DTMF detector . To prevent false detection, the DTMF detector  can be disabled entirely (or disabled only for the digit being generated) during DTMF tone generation. This is achieved by a \u201ctone on\u201d message passed between the tone generator  and the DTMF detector . Alternatively, the NLP  can be activated while generating DTMF tones.","When call progress tone packets arrive, they are depacketized by the depacketizing engine . Call progress tone frames at the output of the depacketizing engine  are written into the call progress tone queue . The call progress tone synchronizer  couples the call progress tone frames from the call progress tone queue  to a call progress tone generator . Much like the DTMF synchronizer, the call progress tone synchronizer  is employed to provide an isochronous stream of call progress tone frames to the call progress tone generator . And much like the DTMF tone generator, when call progress tone packets are being transferred, voice frames should be suppressed. To some extent, this is protocol dependent. However, the capability to flush the voice queue  to ensure that the voice frames do not interfere with call progress tone generation is desirable. Essentially, old voice frames which may be queued are discarded when call progress tone packets arrive to ensure that there is a significant inter-digit gap before call progress tones are generated. This is achieved by a \u201ctone present\u201d message passed between the call progress tone queue  and the voice synchronizer .","The call progress tone generator  converts the call progress tone signals into a call progress tone suitable for a standard digital or analog telephone. The call progress tone generator  overwrites the media queue  to prevent leakage through the voice path and to ensure that the call progress tones are not too noisy.","The outgoing PCM signal in the media queue  is coupled to the PXD  via the switchboard \u2032. The outgoing PCM signal is coupled to an amplifier  before being outputted on the PCM output line ","An exemplary voice signal processor is disclosed U.S. patent application Ser. No. 09\/522,185, entitled \u201cVoice and Data Exchange Over a Packet Based Network,\u201d the contents of which is hereby incorporated by reference as though fully set forth herein.","Fax relay mode provides signal processing of fax signals. Fax relay mode enables the transmission of fax signals over a packet based system such as VoIP, VoFR, FRF-11, VTOA, or any other proprietary network. For the purposes of explanation, first fax machine is called a sending fax that is connected to the sending network gateway through a PSTN. The sending network gateway is connected to a CMTS via a HFC network. Additional fax machines may be on line connections coupled to the other end of the CMTS via a network gateway and a HFC network, or off line connections, coupled to the CMTS for example by a telephone network gateway and a PSTN.","The transfer of fax signals over packet based networks may be accomplished by at least three alternative methods. In the first method, fax data signals are exchanged in real time. Typically, the sending and receiving fax machines are spoofed to allow transmission delays plus jitter of up to about 1.2 seconds. The second, store and forward mode, is a non real time method of transferring fax data signals. Typically, the fax communication is transacted locally, stored into memory and transmitted to the destination fax machine at a subsequent time. The third mode is a combination of store and forward mode with minimal spoofing to provide an approximate emulation of a typical fax connection.","In the fax relay mode, the network VHD invokes the packet fax data exchange. The packet fax data exchange provides demodulation and re-modulation of fax data signals. This approach results in considerable bandwidth savings since only the underlying unmodulated data signals are transmitted across the packet based network. The packet fax data exchange also provides compensation for network jitter with a jitter buffer similar to that invoked in the packet voice exchange. Additionally, the packet fax data exchange compensates for lost data packets with error correction processing. Spoofing may also be provided during various stages of the procedure between the fax machines to keep the connection alive.","The packet fax data exchange is divided into two basic functional units, a demodulation system and a re-modulation system. In the demodulation system, the network VHD couples fax data signals from a circuit switched network, or a fax machine, to the packet based network. In the re-modulation system, the network VHD couples fax data signals from the packet network to the switched circuit network, or a fax machine directly.","During real time relay of fax data signals over a packet based network, the sending and receiving fax machines are spoofed to accommodate network delays plus jitter. Typically, the packet fax data exchange can accommodate a total delay of up to about 1.2 seconds. Preferably, the packet fax data exchange supports error correction mode (ECM) relay functionality, although a full ECM implementation is typically not required. In addition, the packet fax data exchange should preferably preserve the typical call duration required for a fax session over a PSTN\/ISDN when exchanging fax data signals between two terminals.","The packet fax data exchange for the real time exchange of fax data signals between a circuit switched network and a packet based network is shown schematically in . In this exemplary embodiment, a connecting PXD (not shown) connecting the fax machine to the switch board \u2032 is transparent, although those skilled in the art will appreciate that various signal conditioning algorithms could be programmed into PXD such as echo cancellation and gain.","After the PXD (not shown), the incoming fax data signal is coupled to the demodulation system of the packet fax data exchange operating in the network VHD via the switchboard \u2032. The incoming fax data signal is received and buffered in an ingress media queue . A V.21 data pump  demodulates incoming T.30 message so that T.30 relay logic  can decode the received T.30 messages . Local T.30 indications are packetized by a packetization engine  and if required, translated into T.38 packets via a T.38 shim  for transmission to a T.38 compliant remote network gateway (not shown) across the packet based network. The V.21 data pump  is selectively enabled\/disabled by the T.30 relay logic  in accordance with the reception\/ transmission of the T.30 messages or fax data signals. The V.21 data pump  is common to the demodulation and re-modulation system. The V.21 data pump  communicates T.30 messages such as for example called station tone (CED) and calling station tone (CNG) to support fax setup between a local fax device (not shown) and a remote fax device (not shown) via the remote network gateway.","The demodulation system further includes a receive fax data pump  which demodulates the fax data signals during the data transfer phase. The receive fax data pump  supports the V.27ter standard for fax data signal transfer at 2400\/4800 bps, the V.29 standard for fax data signal transfer at 7200\/9600 bps, as well as the V.17 standard for fax data signal transfer at 7200\/9600\/12000\/14400 bps. The V.34 fax standard, once approved, may also be supported. The T.30 relay logic  enables\/disables the receive fax data pump  in accordance with the reception of the fax data signals or the T.30 messages.","If error correction mode (ECM) is required, receive ECM relay logic  performs high level data link control( HDLC )de-framing, including bit de-stuffing and preamble removal on ECM frames contained in the data packets. The resulting fax data signals are then packetized by the packetization engine  and communicated across the packet based network. The T.30 relay logic  selectively enables\/disables the receive ECM relay logic  in accordance with the error correction mode of operation.","In the re-modulation system, if required, incoming data packets are first translated from a T.38 packet format to a protocol independent format by the T.38 packet shim . The data packets are then de-packetized by a depacketizing engine . The data packets may contain T.30 messages or fax data signals. The T.30 relay logic  reformats the remote T.30 indications and forwards the resulting T.30 indications to the V.21 data pump . The modulated output of the V.21 data pump  is forwarded to an egress media queue  for transmission in either analog format or after suitable conversion, as 64 kbps PCM samples to the local fax device over a circuit switched network, such as for example a PSTN line.","De-packetized fax data signals are transferred from the depacketizing engine  to a jitter buffer . If error correction mode (ECM) is required, transmitting ECM relay logic  performs HDLC de-framing, including bit stuffing and preamble addition on ECM frames. The transmitting ECM relay logic  forwards the fax data signals, (in the appropriate format) to a transmit fax data pump  which modulates the fax data signals and outputs 8 KHz digital samples to the egress media queue . The T.30 relay logic selectively enables\/disables () the transmit ECM relay logic  in accordance with the error correction mode of operation.","The transmit fax data pump  supports the V.27 ter standard for fax data signal transfer at 2400\/4800 bps, the V.29 standard for fax data signal transfer at 7200\/9600 bps, as well as the V.17 standard for fax data signal transfer at 7200\/9600\/12000\/14400 bps. The T.30 relay logic selectively enables\/disables () the transmit fax data pump  in accordance with the transmission of the fax data signals or the T.30 message samples.","If the jitter buffer  underflows, a buffer low indication is coupled to spoofing logic . Upon receipt of a buffer low indication during the fax data signal transmission, the spoofing logic  inserts \u201cspoofed data\u201d at the appropriate place in the fax data signals via the transmit fax data pump  until the jitter buffer  is filled to a pre-determined level, at which time the fax data signals are transferred out of the jitter buffer . Similarly, during the transmission of the T.30 message indications, the spoofing logic  can insert \u201cspoofed data\u201d at the appropriate place in the T.30 message samples via the V.21 data pump .","An exemplary fax relay is disclosed U.S. patent application Ser. No. 09\/522,185, entitled \u201cVoice and Data Exchange Over a Packet Based Network,\u201d the contents of which has been previously incorporated herein by reference.","Data relay mode provides full duplex signal processing of data signals. Data relay mode enables the transmission of data signals over a packet based system such as VoIP, VoFR, FRF-11, VTOA, or any other proprietary network. The data relay mode should also permit data signals to be carried over traditional media such as TDM. Network gateways, support the exchange of data signals other network gateways via a HFC network and CMTS or off line devices via for example a circuit switched network such as the PSTN. For the purposes of explanation, the first modem is referred to as a call modem. Far end modems are typically called answer modems.","In data relay mode, a local modem connection is established on each end of the packet based network . That is, the call modem and the call network gateway establish a local modem connection, as does the destination answer modem and its respective answer network gateway . Next, data signals are relayed across the packet based network . The call network gateway demodulates the data signal and formats the demodulated data signal for the particular packet based network . The answer network gateway compensates for network impairments and remodulates the encoded data in a format suitable for the destination answer modem . This approach results in considerable bandwidth savings since only the underlying demodulated data signals are transmitted across the packet based network.","In the data relay mode, the packet data modem exchange provides demodulation and modulation of data signals. With full duplex capability, both modulation and demodulation of data signals can be performed simultaneously. The packet data modem exchange also provides compensation for network jitter with a jitter buffer similar to that invoked in the packet voice exchange. Additionally, the packet data modem exchange compensates for system clock jitter between modems with a dynamic phase adjustment and resampling mechanism. Spoofing may also be provided during various stages of the call negotiation procedure between the modems to keep the connection alive.","The packet data modem exchange invoked by the network VHD in the data relay mode is shown schematically in . In the described exemplary embodiment, a connecting PXD (not shown) connecting a modem to the switch board \u2032 is transparent, although those skilled in the art will appreciate that various signal conditioning algorithms could be programmed into the PXD such as filtering, echo cancellation and gain.","After the PXD, the data signals are coupled to the network VHD via the switchboard \u2032. The packet data modem exchange provides two way communication between a circuit switched network and packet based network with two basic functional units, a demodulation system and a remodulation system. In the demodulation system, the network VHD exchanges data signals from a circuit switched network, or a telephony device directly, to a packet based network. In the remodulation system, the network VHD exchanges data signals from the packet based network to the PSTN line, or the telephony device.","In the demodulation system, the data signals are received and buffered in an ingress media queue . A data pump receiver  demodulates the data signals from the ingress media queue . The data pump receiver  supports the V.22 bis standard for the demodulation of data signals at 1200\/2400 bps; the V.32 bis standard for the demodulation of data signals at 4800\/7200\/9600\/12000\/14400 bps, as well as the V.34 standard for the demodulation of data signals up to 33600 bps. Moreover, the V.90 standard may also be supported. The demodulated data signals are then packetized by the packetization engine  and transmitted across the packet based network.","In the remodulation system, packets of data signals from the packet based network are first depacketized by a depacketizing engine  and stored in a jitter buffer . A data pump transmitter  modulates the buffered data signals with a voiceband carrier. The modulated data signals are in turn stored in the egress media queue  before being output to the PXD (not shown) via the switchboard \u2032. The data pump transmitter  supports the V.22 bis standard for the transfer of data signals at 1200\/2400 bps; the V.32 bis standard for the transfer of data signals at 4800\/7200\/9600\/12000\/14400 bps, as well as the V.34 standard for the transfer of data signal up to 33600 bps. Moreover, the V.90 standard may also be supported.","During jitter buffer underflow, the jitter buffer  sends a buffer low indication to spoofing logic . When the spoofing logic  receives the buffer low signal indicating that the jitter buffer  is operating below a predetermined threshold level, it inserts spoofed data at the appropriate place in the data signal via the data pump transmitter . Spoofing continues until the jitter buffer  is filled to the predetermined threshold level, at which time data signals are again transferred from the jitter buffer  to the data pump transmitter .","End to end clock logic  also monitors the state of the jitter buffer . The clock logic  controls the data transmission rate of the data pump transmitter  in correspondence to the state of the jitter buffer . When the jitter buffer  is below a predetermined threshold level, the clock logic  reduces the transmission rate of the data pump transmitter . Likewise, when the jitter buffer  is above a predetermined threshold level, the clock logic  increases the transmission rate of the data pump transmitter .","Before the transmission of data signals across the packet Abased network, the connection between the two modems must first be negotiated through a handshaking sequence. This entails a two-step process. First, a call negotiator  determines the type of modem (i.e., V.22, V.32bis, V.34, V.90, etc.) connected to each end of the packet based network. Second, a rate negotiator  negotiates the data signal transmission rate between the two modems.","The call negotiator  determines the type of modem connected locally, as well as the type of modem connected remotely via the packet based network. The call negotiator  utilizes V.25 automatic answering procedures and V.8 auto-baud software to automatically detect modem capability. The call negotiator  receives protocol indication signals (ANSam and V.8 menus) from the ingress media queue , as well as AA, AC and other message indications from the local modem via a data pump state machine , to determine the type of modem in use locally. The call negotiator  relays the ANSam answer tones and other indications from the data pump state machine  to the remote modem via a packetization engine . The call negotiator also receives ANSam, AA, AC and other indications from a remote modem (not shown) located on the opposite end of the packet based network via a depacketizing engine . The call negotiator  relays ANSam answer tones and other indications to a local modem (not shown) via an egress media queue  of the modulation system. With the ANSam, AA, AC and other indications from the local and remote modems, the call negotiator  can then negotiate a common standard (i.e., V.22, V.32 bis, V.34, V.90, etc.) in which the data pumps must communicate with the local modem and the remote modems.","The packet data modem exchange preferably utilizes indication packets as a means for communicating answer tones, AA, AC and other indication signals across the packet based network However, the packet data modem exchange supports data pumps such as V.22 bis and V.32 bis which do not include a well defined error recovery mechanism, so that the modem connection may be terminated whenever indication packets are lost. Therefore, either the packet data modem exchange or the application layer should ensure proper delivery of indication packets when operating in a network environment that does not guarantee packet delivery.","The packet data modem exchange can ensure delivery of the indication packets by periodically retransmitting the indication packet until some expected packets are received. For example, in V.32 bis relay, the call negotiator operating under the packet data modem exchange on the answer network gateway periodically retransmits ANSam answer tones from the answer modem to the call modem, until the calling modem connects to the line and transmits carrier state AA.","Alternatively, the packetization engine can embed the indication information directly into the packet header. In this approach, an alternate packet format is utilized to include the indication information. During modem handshaking, indication packets transmitted across the packet based network include the indication information, so that the system does not rely on the successful transmission of individual indication packets. Rather, if a given packet is lost, the next arriving packet contains the indication information in the packet header. Both methods increase the traffic across the network. However, it is preferable to periodically retransmit the indication packets because it has less of a detrimental impact on network traffic.","A rate negotiator  synchronizes the connection rates at the network gateways , , (see ). The rate negotiator receives rate control codes from the local modem via the data pump state machine  and rate control codes from the remote modem via the depacketizing engine . The rate negotiator  also forwards the remote rate control codes received from the remote modem to the local modem via commands sent to the data pump state machine . The rate negotiator  forwards the local rate control codes received from the local modem to the remote modem via the packetization engine . Based on the exchanged rate codes the rate negotiator  establishes a common data rate between the calling and answering modems. During the data rate exchange procedure, the jitter buffer  should be disabled by the rate negotiator  to prevent data transmission between the call and answer modems until the data rates are successfully negotiated.","Similarly error control (V.42) and data compression (V.42bis) modes should be synchronized at each end of the packet based network. Error control logic  receives local error control messages from the data pump receiver  and forwards those V.14\/V.42 negotiation messages to the remote modem via the packetization engine . In addition, error control logic  receives remote V.14\/V.42 indications from the depacketizing engine  and forwards those V.14\/V.42 indications to the local modem. With the V.14\/V.42 indications from the local and remote modems, the error control logic  can negotiate a common standard to ensure that the network gateways utilize a common error protocol. In addition, error control logic , communicates the negotiated error control protocol () to the spoofing logic  to ensure data mode spoofing is in accordance with the negotiated error control mode.","V.42 is a standard error correction technique using advanced cyclical redundancy checks and the principle of automatic repeat requests (ARQ). In accordance with the V.42 standard, transmitted data signals are grouped into blocks and cyclical redundancy calculations add error checking words to the transmitted data signal stream. The receiving modem calculates new error check information for the data signal block and compares the calculated information to the received error check information. If the codes match, the received data signals are valid and another transfer takes place. If the codes do not match, a transmission error has occurred and the receiving modem requests a repeat of the last data block. This repeat cycle continues until the entire data block has been received without error.","Various voiceband data modem standards exist for error correction and data compression. V.42 bis and MNP5 are examples of data compression standards. The handshaking sequence for every modem standard is different so that the packet data modem exchange should support numerous data transmission standards as well as numerous error correction and data compression techniques.","An exemplary data relay is disclosed U.S. patent application Ser. No. 09\/522,185, entitled \u201cVoice and Data Exchange Over a Packet Based Network,\u201d the contents of which has been previously incorporated herein by reference.","Although a preferred embodiment of the present invention has been described, it should not be construed to limit the scope of the appended claims. For example, the present invention can be implemented by both a software embodiment or a hardware embodiment. Those skilled in the art will understand that various modifications may be made to the described embodiment. Moreover, to those skilled in the various arts, the invention itself herein will suggest solutions to other tasks and adaptations for other applications. It is therefore desired that the present embodiments be considered in all respects as illustrative and not restrictive, reference being made to the appended claims rather than the foregoing description to indicate the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["These and other features, aspects, and advantages of the present invention will become better understood with regard to the following description, appended claims, and accompanying drawings where:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14A"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 17A"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 17B"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 17C"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 17D"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 18A"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 18B"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 18C"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 18D"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 20A"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 28","FIG. 22"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 32"}]},"DETDESC":[{},{}]}
