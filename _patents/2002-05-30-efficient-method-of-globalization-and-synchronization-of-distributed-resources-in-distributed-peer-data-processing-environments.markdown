---
title: Efficient method of globalization and synchronization of distributed resources in distributed peer data processing environments
abstract: Syndrome values are employed as a mechanism for synchronization and consistency in a distributed data processing environment. Syndromes are computed for local resources on individual peer nodes and an aggregate syndrome is computed from the individual syndromes. This renders it easy to determine not only that a change has occurred but it also makes it easy to determine which node needs to be updated and thus avoids the needless transmission of updated contents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07010576&OS=07010576&RS=07010576
owner: International Business Machines Corporation
number: 07010576
owner_city: Armonk
owner_country: US
publication_date: 20020530
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","How the Resources are Stored and Represented","Overview of System Operation","When a Node Starts Up","When a Local Resource is Updated","When a Peer Process Fails or is Stopped","Load-Balancing of Downloads When Multiple Peer Members are Started at Once","Gathering the Changes of the Distributed Resources"],"p":["The present invention is generally directed to distributed data processing environments. More particularly, the present invention is directed to methods and systems for synchronizing global resources in an efficient manner. Even more particularly, the present invention is directed to the use of local and aggregate syndromes as a mechanism for maintaining consistent, synchronized global resources.","In distributed data processing environments, distributed applications often require information which includes information about peer processes or nodes. This information includes such things as globalized resource or configuration data regarding distributed resources or distributed configuration data. In other words, each peer process has its own set of resource (that is, it has one of the distributed resources), and also uses collected resources belonging to all peer processes (that is, uses globalized resources).","One of the solutions to the problem of global resource synchronization (that is, global resource consistency in the temporal domain) in a distributed data processing environment is the use of a central data repository to store copies of the resources so that every peer process is able to access, from one location, a globalized view of the resources. This method provides an easy way to globalize the distributed resources by simply updating the single central repository without introducing any concern for synchronization of the global resource between peer nodes. However, this method, with its central repository could easily become not only a single point of failure but could also easily become a bottleneck which severely and negatively impacts system performance. Without some form of central repository, coordination or synchronization, peer processes work incorrect or even fail. This is because, in this approach, globalization is carried out through a single location: every peer process is trying to access this location and thereby causes a performance degradation. Accordingly, the synchronization methods proposed herein seek to avoid such problems.","Another solution to the problem of synchronization of globalized distributed resources is the replication of the global resources on every peer node. In this approach, there is the advantage that there is no single point of the failure or performance bottleneck, because every peer node keeps a replicated copy of the globalized resource. However, there are still several issues and areas of concern that occur with resource replication as a solution method. For example, there is the issue of how one can efficiently distribute the resources. Additionally, assuming that one starts with a consistent set of distributed resources, there is also the issue of how to efficiently synchronize the replicated copy of the globalized resource as changes occur in the distributed environment. These concerns are exacerbated when the distributed resources are determined for the first time, as for example when a new node joins the peer computing environment and when the distributed resources need to be resynchronized whenever the one of distributed resources is changed or when one of the peer nodes either fails or leaves the established distributed environment.","Unfortunately, it is not only difficult to notify all of the peer processes, in a synchronized manner, concerning changes made in the distributed resources (for example, changes in their content, as opposed to other resource attributes such as time of last local access) so as to preclude the use of different resource contents for the globalized resource amongst the peer processes (or nodes), but it is also difficult to optimize the globalization of the distributed resources. That is to say, it is difficult to provide updated information to a plurality of peer applications running in a distributed system, particularly if the information needed is voluminous. Additionally, if a few peer processes miss the notification of the changes or receive the notifications asynchronously, the overall coordination between peer processes may fail or may cause unexpected and undesired results. The negative impact of the inconsistency problem is even greater under the following situations:\n\n","The consistency problem between peer processes has been dealt with to limited degrees in other systems, see \u201cGroup Communication in the Amoeba Distributed Operating System\u201d by M. F. Kassshoek and A. S. Tanenbaum, Proceedings of the IEEE 11th International Conf. on Distributed Computing Systems, pp. 222\u2013230, and \u201cDesign Alternatives for Process Group Membership and Multicast\u201d by K. P. Birman, R. Cooper and B Gleeson, pp 1\u201331, 1991. The contribution to this art added by the present invention is the consistent synchronization and efficient globalization of the distributed resources provided, and the \u201cease of use\u201d in identifying specific semantics related to the consistent and automatic propagation of the notifications between peer processes. This allows an application program to use the resource in a consistent manner at all times.","Therefore, it is important that applications have a mechanism to notify all peer processes concerning changes made to distributed resources in a synchronized manner as well as having a mechanism for the automatic propagation of the changes between peer processes. Applications which execute in an environment with tight consistency requirements should therefore be able to benefit from being provided with an infrastructure that not only provides synchronization but which also provides propagation of the changes in distributed resources. However, it is very difficult to create such infrastructure; if all of the applications are forced to do it on their own, each one runs the risks of repeating the same errors, and they may still lose consistency with each other. Accordingly, the present invention provides an infrastructure which solves these problems in an efficient manner which is available to all applications running in a distributed data processing environment.","In accordance with a preferred embodiment of the present invention a method is provided for synchronizing global resources in a distributed data processing environment. The method comprises the steps of: generating a local syndrome within each one of a set of peer nodes in the distributed environment, the local syndrome being a function of the contents of the shared global resource (that is, the replicated globalized resource); generating an aggregate syndrome as a function of the local syndromes; updating local versions of the shared global resources upon receipt of an aggregate syndrome which does not match the local version of the aggregate syndrome; and transmitting new local syndrome values to the peers following the update operation. In particular, the present invention takes advantage of the generation of syndrome values which provide a shortened indication of whether or not a given globally shared resource has changed. Furthermore, the present invention also takes advantage of the generation of an aggregate syndrome from a plurality of local syndromes so as to provide a degree of granularity in determining which peer nodes include shared global resource information which does not match the rest.","Accordingly, it is an object of the present invention to improve the operation of distributed data processing systems.","It is also an object of the present invention to provide a mechanism to indicate changes in shared global resources in distributed data processing systems.","It is also a further object of the present invention to provide a mechanism which facilitates the entry and removal of nodes in a clustered data processing environment.","It is yet another object of the present invention to take advantage of existing Group Service interfaces, protocols and utilities to improve upon the sharing of global resources.","It is a still further object of the present invention to provide synchronization of global resources without exchanging the full content of the globally shared resource.","It is also an object of the present invention to provide consistent notification of changes in globally shared resources in a distributed data processing environment.","It is another object of the present invention to significantly improve access to globally shared resources.","It is a still further object of the present invention to take advantage of existing API's (Application Programming Interfaces).","It is also an object of the present invention to permit individual peer processes to track changes in the global resources.","Lastly, but not limited hereto, it is an object of the present invention to promote the utilization of distributed data processing environments.","The recitation herein of a list of desirable objects which are met by various embodiments of the present invention is not meant to imply or suggest that any or all of these objects are present as essential features, either individually or collectively, in the most general embodiment of the present invention or in any of its more specific embodiments.","A proper understanding of the operation of the present invention is best had from first considering the problems intended to be solved. These problems include:\n\n","The present invention solves the above problems by providing the following:\n\n","Therefore, applications which employ the features of the present invention have the following general advantages:\n\n","To achieve the goals described above, the following concepts and functionalities of Group Services system software are used. These services are provided with the software that accompanies pSeries data processing systems offered by the assignee of the present invention. These concepts and functionalities include:\n\n","The following methods are used for communication between peers in distributed systems:\n\n","In the present context, these messaging primitives are assumed as already implemented. They may be implemented using the Group Services protocol, as described above for the pSeries of machines, but they are not limited to the Group Services protocols and any similar set of communication tools may be employed. The only important feature is the behavior indicated above.","Attention is now more specifically focused upon how the goals and objectives of the present invention are achieved in terms of currently available resources, such as the communication utilities described above. In particular, attention is directed to  which illustrates for Node x (reference numeral ), a single peer node in a distributed data processing network, the physical structures and the data structures employed in the present invention. Node  includes application program  which communicates with operating system  through the use of API's presented as an interface by operating system . Operating system  also includes utilities  such as the communication and Group Services utilities described above. These utilities are used for sending and receiving messages and for performing operations which permit nodes to join and leave the membership group and which also allow for soft failures which do not bring down the whole system when single or even multiple peer processing nodes fail.",{"@attributes":{"id":"p-0036","num":"0058"},"figref":"FIG. 1","b":["150","140","140","150","100","110","160","100","120","120","124","125","110","110"],"sub":["1","2","n","i","1","2","n"]},"While  illustrates the structure of a typical node operating in the context of the present invention, a more expansive view is shown in  which illustrates one form of a distributed data processing environment. In particular, the environment shown in  depicts a standard configuration of nodes (. through .) which are connected with a system of message exchange through switch . This is a typical configuration for the above mentioned pSeries of data processing systems.","Attention is now focused upon specific mechanisms for carrying out the methods recited herein so as to achieve the goals, purposes and objects stated above.","Each node has local resource  which is managed (or updated) locally and replicated globalized and aggregated resource  which consists of all local resources (see ). In , the local resource is the information which is managed by the node. The globalized resource is the collection of the local resources. One of the major objects of the present invention is to aggregate the local resources and to replicate them efficiently and consistently. Furthermore each resource (either aggregated or local) is represented via two entities: its content and its syndrome.","The content is the resource itself, which can be large (as for example, in the case of a large data file or database file). However, the syndrome of the resource comprises a relatively small amount of data which is represented as a function of the content:\n\nsyndrome=(content)\n\nIn this context, the function S generally satisfies the following conditions. If S associates, via a candidate function mapping, syndrome swith content c, and correspondingly associates syndrome swith content c, thus implying that one can write s=S(c) and s=S(c), where the parentheses denote a function relationship between the entities specified, it is generally, if not almost always, the case that:\n\nif , then ,\n\n","The specific function S which is chosen to satisfy the above described properties is not critical. It could comprise a monotonically increasing or decreasing value as a function of the contents. It could just as easily comprise a cyclic redundancy check (CRC) code, or a collection of such codes, or it could even the comprise MD5 digest code developed by Ronald L. Rivest of MIT (which takes as input a message of arbitrary length and produces as output a 128-bit \u201cfingerprint\u201d or \u201cmessage digest\u201d of the input), or any other codes which enables the resources to be distinguished with high probability. Certainty of distinction is not essential. It is also worth noting that the syndrome function used in the generation of the local syndromes s, does not have to comprise the same syndrome function which is used to generate the aggregate syndrome. However, for purposes of simplicity, implementation and ease of understanding, the same syndrome generating function, S, is preferably used both for the generation of local syndromes as well as for the generation of the aggregate syndrome.","If the distributed local resources is to be updated only on a single node, the function, s, is preferably a monotonically increasing or decreasing function since then the resulting value is uniquely mappable to a resource. However, for the globalized resource, CRC or MD5 coding functions are preferred candidates since they are more easily aggregated at any one of nodes.","Furthermore, the aggregated syndrome, SG, is computed from the syndromes of the globalized resource:\n\n(),\n\nwhere s+s+s+ . . . +sis a collection, in the sense of a concatenation of all distributed syndromes, rather than indicating a modulo-2 or exclusive-OR summing operation.\n","The globalized resource comprises the distributed local resources and its aggregated syndrome is based upon (that is, is a function of) all of the local syndromes. Therefore, two globalized resources are different if two aggregated syndromes are different.","Attention is now focused upon different ones of the relevant events that occur in a distributed data processing system. These include the situations of having a new node join the group, updating resources and handling peer process failure or stoppage.","See  for the flow chart of the process employed when a new node joins an existing group. When a peer process starts up, the new node joins (entry step ) a Group Services group, global_group, using the Group Services API, through which the system of nodes is then notified of membership change events as well as being notified of the state change events, as described, for example, in U.S. Pat. No. 6,026,426. In the first phase of join approval notification, the already-joined processes do nothing, while the joining peer process carry out the following operations:\n\n",{"@attributes":{"id":"p-0047","num":"0000"},"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":["(1.) (Node with the changing local resource) (See .)\n    \n    ","(2.) (Other nodes) On the receipt of the first phase of the state value protocol, the following steps are carried out:\n    \n    "]}},"Group Services automatically issues a failure protocol to the peer processes when a peer process or node fails. There is no need to have special action other than voting \u201cAPPROVE\u201d.","As shown in , if multiple peer members join at once and their aggregate syndromes are different from the already-joined nodes (which means the joiner are out of sync), the joining members need to sync their globalized resource with the globalized resource in the already-joined members. Instead of synchronizing with one of the nodes, the synchronization is preferably accomplished in parallel by distributing the synchronization load. For example, if the number of already joined nodes is \u201cn\u201d and the number of joining members is \u201cm,\u201d then each already-joined node supports ceiling(m\/n) joining nodes to transfer the new globalized resource, as suggested in .","As shown in , when multiple members join at once and their local resources are already updated, they need to be collected. The first member in the membership list is considered, by default, to be the master node. All of the other nodes send the updates to the master node. The master node gathers them and broadcasts the final collection to all members.","While the present invention has been described above in terms of its usage on an IBM pSeries machine which includes a plurality of nodes and which includes operating system level programs, interfaces, protocols or utilities such as Group Services and Topology Services which facilitate implementation of the methods set forth above, it should be fully understood that the concepts disclosed herein are equally applicable for usage in any distributed environment. It is also noted that while the present invention has been described above in terms of specific syndrome functions, it is noted that while the ideal syndrome maps all different values for the content of the globally shared resources into different syndrome values, this is neither strictly possible nor required since the present invention achieves its goals of efficiency even if there are infrequent (or more likely, rare) instances where communication of relatively large amounts of shared global resource information (content) occurs. In short, syndrome perfection is not a required aspect of the present invention.","It is also noted that the description above is particularly addressed to the situation in which the shared global resource is a data file stored on or in a nonvolatile data storage medium such as a rotating magnetic or optical disk memory system. However, it is noted that the shared global resource also includes information stored in a volatile memory system such as system RAM (Random Access Memory).","While the invention has been described in detail herein in accordance with certain preferred embodiments thereof, many modifications and changes therein may be effected by those skilled in the art. Accordingly, it is intended by the appended claims to cover all such modifications and changes as fall within the true spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The subject matter which is regarded as the invention is particularly pointed out and distinctly claimed in the concluding portion of the specification. The invention, however, both as to organization and method of practice, together with the further objects and advantages thereof, may best be understood by reference to the following description taken in connection with the accompanying drawings in which:",{"@attributes":{"id":"p-0022","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0029"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0030"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0028","num":"0031"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
