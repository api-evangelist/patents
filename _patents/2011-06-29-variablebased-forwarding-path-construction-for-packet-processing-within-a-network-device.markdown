---
title: Variable-based forwarding path construction for packet processing within a network device
abstract: In general, this disclosure describes techniques for applying, with a network device, subscriber-specific packet processing using an internal processing path that includes service objects that are commonly applied to multiple packet flows associated with multiple subscribers. In one example, a network device control plane creates subscriber records that include, for respective subscribers, one or more variable values that specify service objects as well as an identifier for a packet processing template. A forwarding plane of the network device receives and maps subscriber packets to an associated subscriber record and then processes the packet by executing the packet processing template specified by the subscriber record. When the forwarding plane reaches a variable while executing the specified packet processing template, the forwarding plane reads the associated variable value from the subscriber record to identify and then apply the subscriber-specific service object specified by the variable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08948174&OS=08948174&RS=08948174
owner: Juniper Networks, Inc.
number: 08948174
owner_city: Sunnyvale
owner_country: US
publication_date: 20110629
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The invention relates to packet-based computer networks and, more particularly, to forwarding packets within computer networks.","A network service provider offers services to subscribers that access a service provider core network using an access network. Services offered may include, for example, traditional Internet access, Voice-over-Internet Protocol (VoIP), video and multimedia services, and security services. The service provider network may support multiple types of access network infrastructures that connect to service provider network access gateways to provide access to the offered services.","Because the access gateways are positioned near the edge of the service provider network directly upstream from the subscribers and operate to provide an operational endpoint (i.e., terminate) the subscriber connections (e.g., digital subscriber line- or cable-based connections) into the service provider network, the access gateways typically provide mechanisms for identifying subscriber traffic and providing subscriber-specific services. The access gateways apply subscriber policies to manage subscriber traffic on a per-subscriber basis as such traffic traverses the service provider core network boundary.","Network devices, such as access gateways, often include a control unit that provides control plane functionality for the network device. In some cases, the network devices may also include a plurality of forwarding components, such as packet forwarding engines (PFEs), and a switch fabric that collectively provide a forwarding plane for forwarding network traffic.","The control plane functions provided by the control unit include storing network topologies in the form of routing tables, executing routing protocols to communicate with peer routing devices to maintain and update the routing tables, and providing a management interface to allow user access and configuration of the network device. The control unit maintains routing information that represents the overall topology of the network and defines routes to destination prefixes within the network.","The control unit derives a forwarding information base (FIB) that includes a number of service objects generated and\/or allocated by the control unit in accordance with the routing information and control information and installs the service objects to the forwarding components. The data and instructions that constitute the service objects define an internal processing and forwarding path for each incoming packet received by the network device. For example, to generate a route table lookup service object, the control unit selects routes defined by the network topology and maps packet key information (e.g., destination information and other select information from a packet header) to one or more specific next hop network devices and ultimately to one or more specific output interfaces of interface cards of the network device. Typically, the control unit installs the service objects into each of the forwarding components to update the FIB and control traffic processing and forwarding within the forwarding plane. Bifurcating control and forwarding plane functionality allows the FIB in each of forwarding components to be updated without degrading packet forwarding performance of the network device.","In general, this disclosure describes techniques for applying, with a network device, subscriber-specific packet processing using an internal processing path that includes service objects that are commonly applied to multiple packet flows associated with multiple subscribers. In one example, a control plane of a network device manages subscribers to identify subscriber-specific services and service attributes for each of the subscribers. The control plane further identifies services and service attributes that are common to multiple subscribers and that may be applied using a common service object of an internal processing path of the network device forwarding plane.","The control plane directs the forwarding plane to create and install, to the internal processing path, packet processing templates for respective sets of subscribers that share services. The packet processing templates include a number of service objects that apply forwarding, filtering, rate-limiting, queuing, accounting, and\/or other services that may be applied in common to the respective sets of subscribers. In addition, each packet processing template specifies one or more variables, the value for which may be later determined \u201cin-flight,\u201d that is, while processing a packet in the forwarding plane using the template. The control plane creates and installs within the internal processing path subscriber records that specify, for respective subscribers, one or more variable values as well as an identifier for a packet processing template. The variable values may identify, for example, a particular service object installed to the internal processing path or an attribute value that determines an aspect of the service object functionality.","The forwarding plane receives and maps subscriber packets to an associated subscriber record for the subscriber and then processes the packet within the internal processing path using the packet processing template specified by the subscriber record. When the forwarding plane reaches a variable while executing the specified packet processing template, the forwarding plane reads the associated variable value from the subscriber record to identify and then apply the subscriber-specific service operation or attribute value for the variable. Subscriber record variable values may in this way alter the execution path of the packet processing template based on the identity of the subscriber rather than upon the packet key, which may be overloaded among multiple subscribers.","The techniques may provide one or more advantages. For example, the techniques allow the control plane to create and modify an internal processing path in the forwarding plane for subscriber packets using a simple data structure: a subscriber record. In other words, having created and installed a packet processing template for a set of subscribers, the control plane may map traffic of any number of additional subscribers to the packet processing template by creating corresponding subscriber records that identify the packet processing template and include subscriber-specific variable values. As a result, the forwarding plane may apply a common internal processing path to multiple subscriber flows while still providing subscriber-specific processing as needed. This may increase the scalability of the network device in both the number of subscribers and number of services dimensions by reducing both the setup time and the amount of processing path resources required to support each subscriber.","In one example, a method comprises installing, to a forwarding plane of a network device, a packet processing template that specifies a common service to apply to a plurality of packet flows during packet processing with the packet processing template and a variable that determines execution paths associated with the packet processing template. The method also comprises generating, for a first packet flow of the plurality of packet flows, a first subscriber record that specifies a first variable value for the variable. The method further comprises receiving, with the network device, a first packet associated with the first packet flow. The method further comprises processing the first packet with the packet processing template by using the first variable value specified by the first subscriber record to select, for the first packet, an execution path associated with the packet processing template.","In another example, a network device comprises an interface card, a control unit comprising one or more processors, and a forwarding component associated with the interface card. The forwarding component comprises a key engine, a packet processing template that specifies a common service to apply to a plurality of packet flows during packet processing with the packet processing template and a variable that determines execution paths associated with the packet processing template. The forwarding component also comprises a first subscriber record that specifies a first variable value for the variable, wherein the first subscriber record is associated with a first packet flow of the plurality of packet flows, wherein the interface card receives a first packet associated the first packet flow, and wherein the key engine executes the packet processing template by using the first variable value specified by the first subscriber record to select, for the first packet, an execution path associated with the packet processing template.","In another example, a non-transitory computer-readable medium contains instructions. The instructions cause one or more programmable processors to install, to a forwarding plane of a network device, a packet processing template that specifies a common service to apply to a plurality of packet flows during packet processing with the packet processing template and a variable that determines execution paths associated with the packet processing template. The instructions also cause the one or more programmable processors to generate, for a first packet flow of the plurality of packet flows, a first subscriber record that specifies a first variable value for the variable. The instructions also cause the one or more programmable processors to receive, with the network device, a first packet associated with the first packet flow. The instructions also cause the one or more programmable processors to process the first packet with the packet processing template by using the first variable value specified by the first subscriber record to select, for the first packet, an execution path associated with the packet processing template.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["2","12","6","4","12","6"]},"Subscriber devices A-N (\u201csubscriber devices \u201d) attach to SP network  via access network  to obtain services offered by SP network  to subscribers. Subscriber devices  may each comprise, for example, a mobile phone, a smart phone, a desktop\/laptop computer, a gaming console, a video-conferencing suite, a workstation, a wireless device, a network-ready appliance, a file server, print server, a digital subscriber line (DSL) router, a cable modem, or another device with which to access services of SP network . A subscriber may represent, for instance, an enterprise, a residential subscriber, or a mobile subscriber. Subscriber devices  connect to access network  via access links  that may each comprise wired and\/or wireless communication links. The term \u201ccommunication link,\u201d as used herein, comprises any form of transport medium, wired or wireless, and can include intermediate nodes such as network devices. Each of access links  may include, for instance, aspects of an asymmetric DSL network, WiMAX, a T-1 line, an Integrated Service Digital Network (ISDN), or wired Ethernet.","Access network  aggregates data traffic from one or more subscribers for transport to\/from core network  of SP network . Access network  includes network nodes (not shown in ) that execute communication protocols to transport control and user data to facilitate communication between subscriber devices  and core network . Access network  may comprise, for example, digital subscriber line access multiplexers (DSLAMs), switches, edge routers, broadband remote access servers (BRAS), a gateway general packet radio service (GPRS) support node (GGSN) and other GPRS support node (GSNs), a Universal Mobile Telephone System (UMTS) having a UMTS Terrestrial Radio Access Network (UTRAN), and\/or a 3GPP Long Term Evolution (LTE) mobile access network employing, for instance, service gateways (SGWs), packet data network gateways (PDNs), and eNodeBs, a mobile IP network, an IP network, or another type of network that provides access for subscribers  to core network . The elements of access network  may support a variety of protocols, such as Internet Protocol (IP), Frame Relay, Asynchronous Transfer Mode (ATM), Ethernet, Point-to-Point Protocol (PPP), Point-to-Point Protocol over Ethernet (PPPoE), GPRS tunneling protocol (GTP), and virtual local area network (VLAN)-related protocols, among others. Subscriber devices  may each have a dedicated subscriber interface, e.g., an ATM virtual circuit (VC) or an Ethernet virtual local area network (VLAN), to access network .","Core network  may represent a public network that is owned and operated by a service provider to interconnect a plurality of networks, such as access network . Core network  may implement Multi-Protocol Label Switching (MPLS) forwarding and in such instances may be referred to as an MPLS network. In some instances, core network  represents a plurality of interconnected autonomous systems, such as the Internet, that offers services from one or more service providers.","In some instances, transport links couple service node  to access network  and core network . Service nodes  may be considered as located \u201cbehind\u201d the access network. All network traffic exchanged between access network  and core network  traverses service node . Service node  may constitute a part of a backhaul network, which may include land-based transmission lines, frequently leased by a service provider, to transport data and control traffic between access network  and core network . The backhaul network typically also includes switches, aggregation devices, and routers. Service node  may comprise a network edge or core router that routes network packets to\/from access network , or service node  may comprise an intermediate network device that transports packets between access network  and core network . In some embodiments, service node  comprises an MX-series router manufactured by Juniper Networks, Inc., of Sunnyvale, Calif. Various embodiments of SP network  may include additional service nodes.","Service node  may also represent an access gateway, a layer three network edge device that manages subscriber attachment sessions and routes subscriber data traffic to\/from core network . In such instances, service node  authenticates or receives authentication for subscriber device , authorizes the devices to access core network , and may provide network configuration information to the devices. When one of subscriber devices  attempt to attach to core network , service node  may authenticate the device by interfacing to a server using a AAA protocol, such as Remote Authentication Dial-In User Service (RADIUS) or the Diameter protocol, to authenticate the subscriber device or a user thereof. Service node  in such instances may comprise, for example, a GGSN, an edge router such as a BRAS, a CMTS, or another network device.","In some embodiments, service node  comprises a switching device that forwards layer two (L2) traffic based on, for example, MAC layer addresses. L2 traffic may include Ethernet frames addressable by MAC layer addresses that may be used, in accordance with the techniques described herein, to identify a subscriber or subscriber class.","A network service provider that administers SP network  offers services on a per-subscriber basis to subscriber devices  that access the service provider network. Services offered may include, for example, traditional Internet access, Voice-over-Internet Protocol (VoIP), video and multimedia services, and security services. The network service provider may configure SP network  to offer services to subscribers in accordance with one or more service level agreements (SLAs) that define network performance levels in a number of dimensions, including the type of offered services and corresponding service parameters (e.g., upstream\/downstream bandwidth, reliability (e.g., up-time), security, quality of service, rate limits, and others). In this way, SLAs or other service agreements may govern communication between SP network  and subscriber devices .","Any one of subscriber devices  may begin exchanging data packets with core network , and such packets traverse service node  as members of at least one packet flow. The term \u201cpacket flow\u201d refers to a set of packets originating from a particular source device and sent to a particular destination device as part of an application communication session between the source and destination device. A flow of packets, in either the upstream (sourced by subscriber devices ) or downstream (destined for subscriber devices ) direction, may be identified by the five-tuple: <source network address, destination network address, source port, destination port, protocol>. This five-tuple generally identifies a packet flow to which a received packet corresponds and, depending on the flow direction, a subscriber may be associated with either the source network address or the destination network address of the flow. In some instances, access network  may overload the five-tuple or a subset thereof with packet flows for multiple different subscribers and\/or with multiple packet flows for the same subscriber. For example, subscriber device A may establish multiple traffic bearers to service node  each having distinct QoS parameters that correspond with the service being born, e.g., VoIP or bulk data transfer. Packet flows may therefore also be characterized and identified according to other characteristics, including VLAN tags, PPPoE session, and GTP tunnel identifiers of network layer or data link layer protocol headers\/tags that encapsulate the packets. Service node  may identify an application using deep packet inspection (DPI).","Service node  differentially process subscriber data traffic packets based on packet flow requirements for a subscriber packet flow by applying configurable packet processing operations, including packet forwarding, filtering, rate limiting, marking, accounting, policy-based routing and redirection, advertisement insertion, lawful intercept, class of service, and traffic shaping, for instance, to subscriber traffic exchanged with subscriber devices . That is, service node  receives values for configurable parameters for subscribers and\/or associated subscriber flows and internally schedules packets and otherwise processes the packets in accordance with the configurable parameters.","In some cases, packet processing operations may be commonly applied to multiple packet flows that each requires the same operation according the same parameters. Such flows may each require additional packet processing operations that are distinct from those required by other the flows to which the same operation is to be applied. In other words, a set of multiple flows may have some packet processing operations applied by service node  in common, while other packet processing operations applied by service node  differ among the flows within the set. \u201cDistinct,\u201d in this case, refers to those operations that are not to be commonly applied to all flows in the set of multiple packet flows. Subsets of the set of multiple packet flows may thus nevertheless have \u201cdistinct\u201d operations in common, although such operations are not common to every flow in the set.","In accordance with techniques of this disclosure, service node  identifies a set of multiple packet flows to which common packet processing operations may be applied. Service node  additionally determines, for the group of multiple packet flows, distinct packet processing operations for the packet flows and associates each of the distinct operations with a variable value. Service node  further associates, in subscriber records for respective packet flows, the variable values with packet flows to which the corresponding distinct operations are to be applied. Each of the subscriber records for the set of multiple packet flows also specifies a common logical interface (IFL).","A common IFL of service node  defines common packet processing operations for the group and one or more variables in a packet processing template. The variables of the packet processing template represent a placeholder for variable values in subscriber records. Logical interfaces of service node  that interface to a packet processing template are referred to hereinafter as template IFLs. To map an additional packet flow to the template IFL previously defined for the group, service node  generates for the additional packet flow a new subscriber record that specifies variable values as well as the template IFL.","Upon receiving a packet associated with one of the group of multiple packet flows, service node  maps the packet to its associated packet flow, identifies the subscriber record for the associated packet flow, and processes the packet using the template IFL for the group of packet flows. To apply the distinct operations to the packet (i.e., those operations not common to the template IFL because common to all packet flows of the group), service node  looks up the variable values in the identified subscriber record. Each of the variable values specifies a distinct operation for application, which service node  applies to the packet.","As a result, service node  may process, using a single template IFL, packets for multiple packet flows that nevertheless require distinct operations. Each IFL of service node  may require management, hardware, and software resources that are inherently limited within service node . By overloading a IFL using a template IFL yet still providing subscriber- and\/or flow-specific packet processing operations, the techniques increase the number of packet flows and\/or subscribers that may be uniquely handled by service node . Moreover, because service node  may map new flows to previously defined template IFLs by simply generating appropriate subscriber records for the new flows, the techniques eliminate the requirement of creating new IFLs for every new flow and may thus decrease an average setup time required by service node  for new flows.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2","b":["12","12"]},"In this example, service node  includes a control unit  that provides control plane functionality for the device. Control unit  may be distributed among multiple entities, such as one or more routing units and one or more service cards insertable into a chassis. In such instances, service node  may therefore have multiple control planes. Service node  also includes a plurality of forwarding components in the form of example packet forwarding engines A-N (\u201cPFEs \u201d) and a switch fabric  that together provide a forwarding plane for forwarding and otherwise processing subscriber traffic. PFEs  receive and send data packets via interfaces of interface cards A-N (\u201cIFCs \u201d) each associated with a respective one of PFEs . Each of PFEs  and its associated ones of IFCs  may reside on a separate line card for service node  (not shown). Example line cards include flexible programmable integrated circuit (PIC) concentrators (PFCs), dense port concentrators (DPCs), and modular port concentrators (MPCs). Each of IFCs  may include interfaces for various combinations of layer two (L2) technologies, including Ethernet, Gigabit Ethernet (GigE), and Synchronous Optical Networking (SONET) interfaces. In various aspects, each of PFEs  may comprise more or fewer IFCs. Switch fabric  provides a high-speed interconnect for forwarding incoming data packets to the selected one of PFEs  for output over a network.","Control unit  is connected to each of PFEs  by internal communication link . Internal communication link  may comprise a 100 Mbps or 1 Gbps Ethernet connection, for instance. Daemons A-N (\u201cdaemons \u201d) executed by control unit  are user-level processes that run network management software, execute routing protocols to communicate with peer routing devices, execute configuration commands received from an administrator, maintain and update one or more routing tables, manage subscriber flow processing, and create one or more forwarding tables for installation to PFEs , among other functions. One of daemons  may comprise a client for an AAA protocol, such as a RADIUS client.","Control unit  may include one or more processors (not shown in ) that execute software instructions, such as those used to define a software or computer program, stored to a computer-readable storage medium (again, not shown in ), such as non-transitory computer-readable mediums including a storage device (e.g., a disk drive, or an optical drive) and\/or a memory such as random-access memory (RAM) (including various forms of dynamic RAM (DRAM), e.g., DDR2 SDRAM, or static RAM (SRAM)), Flash memory, another form of fixed or removable storage medium that can be used to carry or store desired program code and program data in the form of instructions or data structures and that can be accessed by a processor, or any other type of volatile or non-volatile memory that stores instructions to cause the one or more processors to perform techniques described herein. Alternatively, or in addition, control unit  may include dedicated hardware, such as one or more integrated circuits, one or more Application Specific Integrated Circuits (ASICs), one or more Application Specific Special Processors (ASSPs), one or more Field Programmable Gate Arrays (FPGAs), or any combination of one or more of the foregoing examples of dedicated hardware, for performing the techniques described herein.","PFEs  process packets by performing a series of operations on each packet over respective internal packet processing paths as the packets traverse the internal architecture of service node . Operations may be performed, for example, on each packet by any of a corresponding ingress interface, an ingress PFE , an anchor PFE , an egress PFE , an egress interface or other components of service node  to which the packet is directed prior, such as one or more service cards. PFEs  each include service objects that, when executed, examine the contents of each packet (or another packet property, e.g., incoming interface) and on that basis make forwarding decisions, apply filters, and\/or perform accounting, management, traffic analysis, class of service decisions, lawful intercept, and load balancing, for example. In one example, each of PFEs  arranges service objects as next hop data that can be chained together as a series of \u201chops\u201d along an internal packet processing path for the service node. The result of packet processing determines the manner in which a packet is forwarded or otherwise processed by PFEs  from its input interface on one of IFCs  to its output interface on one of IFCs . A particular packet may be processed by multiple PFEs .","PFE interface  presents an interface by which daemons  may allocate service objects of PFEs  to apply services to subscriber packet flows. In accordance with the described techniques, PFE interface  presents an interface by which daemons  arranges allocated service objects into a packet processing template IFL that specifies a number of variables that affect operation based on respective variable values for the packet flow being processed. Daemons  direct PFEs  via PFE interface  to install respective sets of packet processing template IFLs A-N (\u201ctemplates \u201d) with which PFEs  process subscriber packet flows. Each of PFEs  may include zero or more template IFLs. Templates A of PFE A may include zero or more template IFLs, for instance. PFE interface  may comprise one or more user- or kernel-level libraries, programs, toolkits, application programming interfaces (APIs) and may communicate control and data messages to PFEs  via internal communication link  using sockets.","For example, one of daemons  may execute a command line interface (CLI) that receives, from a user, a command to apply a lawful intercept function to a particular packet flow for a subscriber. As another example, one of daemons  may receive a subscriber profile that indicates that packet flows for the subscriber should receive a particular class of service. In response, daemons  invoke PFE interface  to apply the service to the packet flow. PFE interface  allocates the service in PFEs  and then directs PFEs  to generate or modify an IFL for the packet flow to include the service in a list of services to apply to packets in the packet flow.","In some cases, the service to be newly applied to a packet flow is also be applied by PFEs  to another packet flow and the service can therefore be commonly applied to both packet flows. In accordance with techniques described in this disclosure, daemons  via PFE interface  direct PFEs  to generate a new template for both packet flows to include the service as implemented, in part, by a service object, such as a filter, classifier, class of service queue, counter, policer, lawful intercept component, traffic flow template, routing table, or mobility tunnel endpoint identifier handler. In some instances, the multiple packet flows also require services that are distinct among the flows. In such instances, daemons  direct PFEs  to generate the new template to include a variable placeholder for the distinct services for the respective packet flows. PFEs  install the new template to templates .","In the illustrated example, daemon A directs PFEs  to install the new template to templates A using template IFL generation message . Template IFL generation message  includes a list of variables for application to the new template IFL. In some instances, template IFL generation message  attaches the included list of variables to an existing IFL to transform the existing IFL into a template IFL.","In addition, daemons  map packet flows to subscribers to the template IFL and generate respective subscriber records for the packet flows. A subscriber record is the set of unique attributes needed for each subscriber packet flow to uniquely identify and provide traffic treatment and accounting for that flow with a particular template IFL. A subscriber record specifies the template IFL of templates  with which to process packets belonging to the packet flow corresponding to the subscriber record. The subscriber record additionally specifies variable values for the list of variable applied by PFEs  to the specified template IFL of templates . Daemons  install, via PFE interface , newly generated or modified subscriber records to sets of subscriber records A-N (\u201csubscriber records \u201d) of PFEs . Each of subscriber records  may include zero or more subscriber records. In the illustrated example, daemon A downloads to subscriber records A of PFE A, with subscriber record creation message , a subscriber record to alter the execution of a specified template in templates A based on variable values of the subscriber record. Subscriber record creation message  includes the list of variable values for a corresponding packet flow and specifies the one of templates A with which to process packets for the packet flow. Subscriber record creation message  may further include an associated key structure that PFE A may use to map packets having matching packet properties to the subscriber record being created in subscriber records A. Packet properties matched may include, for example, packet metadata such as a particular packet's ingress interface or egress interface (as determined by the PFEs) as well as information carried by the packet and packet header, such as packet header fields, destination route prefixes, VLAN tags, layer four (L4) or Transport Layer protocol destination ports, tunnel header metadata (e.g., TEIDs), and the packet payload.","When service node  receives packets, PFEs  of the service node map the packets to one of subscriber records  of the PFEs. PFEs  may then process the packets using templates  according to subscriber records  for the packets that specify variable values for the templates. In this way, subscriber records  may affect the processing path of packets for multiple flows mapped to a single template in templates  with lists of variable values that may require substantially fewer resources than those required to create separate IFLs for each packet flow. As a result, the techniques may reduce the average number of resources to support any given packet flow and increase the number of flows supportable by service node .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 2","FIG. 2"],"b":["12","20","20","20","12","78","14","40","14","32","32","34","34","36","36","78","12","12","14","12","12"]},"Daemons  operate over and interact with kernel , which provides a run-time operating environment for user-level processes. Kernel  may comprise, for example, a UNIX operating system derivative such as Linux or Berkeley Software Distribution (BSD). Kernel  offers libraries and drivers by which daemons  may interact with the underlying system. PFE interface  of kernel  comprises a kernel-level library by which daemons  and other user-level processes or user-level libraries may interact with programming interface  of PFE A. PFE interface  may include, for example, a sockets library for communicating with PFE A over dedicated network links.","Hardware environment  of control unit  comprises microprocessor  that executes program instructions loaded into a main memory (not shown in ) from storage (also not shown in ) in order to execute the software stack, including both kernel  and user space , of control unit . Microprocessor  may comprise one or more general- or special-purpose processors such as a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), or any other equivalent logic device. Accordingly, the terms \u201cprocessor\u201d or \u201ccontroller,\u201d as used herein, may refer to any one or more of the foregoing structures or any other structure operable to perform techniques described herein.","RPD  executes one or more interior and\/or exterior routing protocols to exchange routing information with other network devices and store received routing information in routing information base  (\u201cRIB \u201d). RIB  may include information defining a topology of a network, including one or more routing tables and\/or link-state databases. RPD  resolves the topology defined by routing information in RIB  to select or determine one or more active routes through the network and then installs these routes to forwarding information base  (\u201cFIB \u201d). Typically, RPD  generates FIB  in the form of a radix or other lookup tree to map packet information (e.g., header information having destination information and\/or a label stack) to next hops and ultimately to interface ports of interface cards associated with respective PFEs .","Command line interface daemon  (\u201cCLI \u201d) provides a shell by which an administrator or other management entity may modify the configuration of service node  using text-based commands. Simple Network Management Protocol daemon  (\u201cSNMP \u201d) comprises an SNMP agent that receives SNMP commands from a management entity to set and retrieve configuration and management information for service node . Using CLI  and SNMP , for example, management entities may enable\/disable and configure services, manage classifications and class of service for packet flows, install routes, enable\/disable and configure rate limiters, configure traffic bearers for mobile networks, and configure interfaces, for example. RPD , CLI , and SNMP  in this example configure forwarding plane B via PFE interface  to implement configured services, add\/modify\/delete routes, add subscriber records, add hash keys, and modify packet processing paths by installing service objects to PFEs .","PFE interface  allows daemons  to drive the installation and configuration of packet processing path  of PFE A. In particular, PFE interface  includes an application programming interface (API) by which daemons  may request allocation of a service component (e.g., a counter or policer) of processing path  and receive an identifier for the requested service component, arrange service components into template processing paths  (\u201ctemplate paths \u201d) and standard processing paths  (\u201cpaths \u201d), install subscriber records, and map packet flows to subscriber records and logical interfaces for processing.","PFE A, in combination with other PFEs  of service node , implements forwarding plane B (also known as a \u201cdata plane\u201d) functionality to handle packet processing from ingress interfaces on which packets are received to egress interfaces to which packets are sent. Forwarding plane B determines data packet forwarding through service node , applies services, rate limits packet flows, filters packets, and otherwise processes the packets using service objects and lookup data installed by control plane A to forwarding plane B. While  illustrates only PFE A in detail, each of PFEs  of service node  comprises similar modules that perform substantially similar functionality.","PFE A includes ASIC-based packet processors (\u201cASICs \u201d) that map packets to subscriber records and execute processing path  in accordance with techniques described herein. ASICs  include one or more programmable application-specific integrated circuits having key engine  that executes microcode (or \u201cmicroinstructions\u201d) to control and apply fixed hardware components of ASICs  to process packet \u201ckeys.\u201d A packet key includes packet fields and other parameters that determine a flow of packet processing for the packet along an internal processing path, such as template paths  and paths . Key engine  includes key buffer  to store packet field data for corresponding packets that the key engine is currently processing. Key buffer  may also provide limited writable memory to which elements of the internal processing path may write to pass messages accessible by future elements. Some instances of ASICs  may include a plurality of key engines each having an associated key buffer and record buffer.","Internal processing path  (\u201cprocessing path \u201d) of ASICs  comprises programmable, executable microcode and fixed hardware components that determine the packet processing actions and other operations performed by key engine . Processing path  may include service objects in the form of, for example, executable instructions, programmable logic, and application-specific logic that perform lookups, rate limit packet flows, count packets, implement classes of service, perform lawful intercept, classify packets, apply filters, route packets, and manipulate packet keys, among other functions. PFE A may store executable instructions of processing path  in computer-readable storage media, such as static random access memory (SRAM). While illustrated within ASICs , executable instructions of processing path  may be stored in memory external to ASICs  onboard PFE A. PFE A also stores additional illustrated data structures, such as lookup key table , subscriber records , record buffer , and key buffer , in computer-readable storage media, such as internal or external SRAM.","In some aspects, one or more service objects of processing path  comprise a next hop data structure to initiate processing. At the end of each processing step by key engine , the result is a next hop that may specify additional processing or the termination of processing, for instance. In addition, next hops may specify one or more functions to be executed by key engine  and\/or one or more hardware elements to be applied (e.g., policers). Next hops thus form the primary data structure that can be used to initiate a service, chain next hops to allow for multiple services to be performed on a single packet, and terminate an internal processing path. Key engine  may be associated with a result (or \u201clookup\u201d) buffer that stores results for executing next hops. For example, key engine  may execute a lookup specified by a next hop and store the result of the lookup to the associated result buffer. The contents of a result buffer may affect the actions of the next hop in the next hop chain.","Logical interfaces  (\u201cIFLs \u201d) is a table or other data structure that includes one or more logical interfaces that each determines services commonly applied to a group of subscribers. The number of IFLs  may be limited in various implementations of PFE A due to memory restrictions, the rate at which PFE microprocessor  can establish paths in processing path , the bandwidth between control unit  and PFE A, and the rate at which control unit  can allocate service objects and determine paths in processing path . Each of IFLs  is an interface to a processing path in either template paths  or paths . Paths  represents one or more processing paths for execution by key engine  on key buffer . In accordance with techniques of this disclosure, template paths  includes one or more processing paths, for execution by key engine  on key buffer , that each include one or more variables that resolve to a variable value in record buffer  to determine a next service object for execution. Respective IFLs  that map to template paths  and paths  are alternatively referred to herein as template IFLs and standard IFLs, respectively.","Subscriber records  may represent an example embodiment of subscriber records A of . Each of subscriber records  contains information required by PFE A to process packets of a subscriber packet flow. That is, subscriber records  describe the treatment of subscribers by PFE A. Each of subscriber records  specifies one of IFLs  with which to process packets mapped to the subscriber record. Subscriber records that specify a template IFL also include one or more variable values that specify service objects for corresponding variables in the one of template paths  for which the template IFL is an interface. Subscriber records  may store variable values using an index table that maps table entry indices to a particular value. For example, a variable value in the first entry of a table for a subscriber record may be a value for index  of the subscriber record. Alternatively, subscriber records may store variables and corresponding values as associative data pairs that each maps a variable name to a corresponding value. As described in detail below, each of subscriber records  may also include a lookup key.","PFE microprocessor  manages ASICs  and executes programming interface  to provide an interface for\/to control unit . PFE microprocessor  may execute a microkernel to provide an operating environment for interfaces. Programming interface  receives messages from control unit  directing packet forwarding engine A to configure logical interfaces , template paths , and paths  of processing path .","Daemons  via PFE interface  may direct programming interface  to allocate a service object (e.g., a counter) in processing path  for application to packets for a particular flow. Programming interface  returns a reference to the service object that daemons  may then bind to the flow and, in some cases, the associated subscriber using subscriber records . Daemons  generate a service descriptor for the reference and add the service descriptor to a subscriber record for the flow as a variable value to associate the service provided by the service object with the subscriber record. In addition, daemons  insert a variable placeholder into one of template paths  for a template IFL specified by the subscriber record. The variable placeholder directs forwarding plane B to correlate the variable with a service descriptor for the variable in the subscriber record during packet processing. In this way, daemons  specify, using the service descriptor, the location of the service object in the subscriber record to ensure that forwarding plane B applies the service object to packets mapped to the subscriber record. By allocating different service objects for different subscriber flows and adding respective service descriptors for the service objects to respective subscriber records for the subscriber flows, control plane A differentiates processing, by forwarding plane B executing a single one of template paths , of packets for multiple different subscriber flows. In some instances, PFE interface  manages aspects of service object allocation and IFL and subscriber record generation on behalf of daemons  using a kernel library or user library, for example.","In some cases, daemons  add service descriptors for static service objects to template paths  such that key engine  of forwarding plane B always executes static service objects to packets processed using the templates. In other words, the static service object applies a service that is common among all subscriber flows mapped to the template. In some cases, daemons  may insert a variable placeholder into template paths  that specifies a default service descriptor for the variable. During processing of packets for a packet flow, key engine  of forwarding plane B applies the service object specified by the default service descriptor when a corresponding variable value for the variable is not specified in the one of subscriber records  for the packet flow.","A reference to a service object provided by programming interface  to daemons  may comprise, for example, a global resource index, an index locally managed by PFE A, a combination of an index to a bank of service objects and an offset to a particular service object within the bank, a memory pointer to, e.g., a next hop, or a data value. A service descriptor may comprise a pointer, index, or a variable name that resolves to a variable value in record buffer , for example. In some instances a service descriptors may additionally or alternatively comprise an index or global identifier for a service object.","Service node  maps incoming subscriber traffic to one of subscriber records  to identify the logical interface of IFLs  with which to process the traffic. Service node  may terminate a number of different types of subscriber connections that subscribers use to access a network through the service node. For example, service node  may terminate Internet Protocol (IPv4 or IPv6) network connections, single- or double-tagged VLAN attachments, GPRS and\/or LTE network tunnels for a mobile subscriber, PPPoE connections, and\/or mobile IP tunnels. A subscriber connection is associated with an upstream packet flow and a downstream packet flow, and a particular subscriber (e.g. a campus or enterprise network, or a mobile phone) device may be association with multiple subscriber connections. Each of these termination models requires a different lookup key with which to identify subscriber packets for the subscriber connections. Lookup key table  includes one or more lookup keys that specify packet parameters, the values for which uniquely identify the packet as belonging to a particular packet flow for a subscriber that connects to service node  according to a termination model. For example, lookup key table  may include an entry that specifies a Gateway GPRS Support Node (GGSN) subscriber Ginterface lookup key that specifies a TEID for Ginterface GTP tunnels for subscriber connections carried by a GPRS network.","In the illustrated embodiment, hash engine  of ASICs  executes a hash function to generate a hash value from packet parameters according to a termination model lookup key defined in lookup key table  for the subscriber connection type. The hash function executed by hash engine  may be SHA-1, MD5, or another one-way function that generates a hash value from one or more parameter values. Each of subscriber records  in this embodiment stores a subscriber record lookup key having packet parameter values corresponding to lookup key in the termination model lookup key table  for the subscriber connection type for the subscriber record. Hash engine  uses the hash value to determine a subscriber record index to one of subscriber records  stored in memory. If the lookup key of the subscriber record in subscriber records  referenced by the subscriber record index matches the lookup key of the packet, hash engine  loads (or directs key engine  to load) the keyed-to subscriber record to record buffer  associated with key engine . Record buffer  stores the subscriber record, including each of the variable values, for the packet being processed by key engine . In this way, key engine  may carry the variable values along a template path being executed. The keyed-to subscriber record also specifies one of IFLs , which key engine  then executes to process key buffer . The operations of hash engine  are one example of steps for associating a subscriber packet with a subscriber record. Other methods may be performed by PFE A components to associate subscriber packets with respective subscriber records, including simple matching of a packet lookup key with respective lookup keys of subscriber records .","When executing one of template paths  for a template IFL, key engine  resolves the variables of the template path to the service objects specified by variable values of one of subscriber records . If the subscriber record does not specify a variable value for the variable, key engine  may instead execute a default service descriptor for the variable or, if no such default service descriptor is specified for the variable in the template path, execute a nop instruction (i.e., no operation) for the variable, and proceed to execute the remaining service objects of the template path.","In the illustrated embodiment, key engine  resolves the variables to a value in the subscriber record temporarily stored by record buffer . For example, a variable of a template path may specify index . To resolve the variable, key engine  reads the service descriptor specified by index  of the subscriber record stored by record buffer . To process packets for another packet flow using the same template path, hash engine  keys to and loads the subscriber record in subscriber records  for the packet flow to record buffer . Key engine  resolves the variables of the template path to the service descriptors that specify distinct services for the packet flow and applies the service objects pointed to by the service descriptors. In this way, forwarding plane B may process multiple different packet flows using a single template processing path and a different subscriber record for each of the packet flows.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 4","b":["75","75","76","76","75","76"]},"Subscriber records  specify an IFL for a internal packet processing path, such as one of template paths. For example, subscriber record A includes IFL , a data value that specifies an IFL for template path A. Subscriber records  each may additionally include a collection of variable identifiers-variable value associative pairs (\u201cvariable pairs\u201d) that specify variable values for template paths variables identified using the variable identifiers. Subscriber record A includes variable pairs A-N. In some instances, subscriber records  may include a reference to an additional subscriber record to increase the number of variable pairs available for the packet flow.","Template path A includes a plurality of service objects A-N (\u201cservice objects\u201d) that each implements a service for application to a packet upon execution of the template path by the forwarding plane. In accordance with techniques described herein, some of service objects  represent a group of service objects selectable by resolving one of variables A-N (\u201cvariables \u201d) to a variable value in one of subscriber records . Each of variables  is identified by a corresponding variable identifier. For example, service objects B-B(\u201cservice objects B\u201d) are a group of service objects. Service objects B may each represent, for example, a different counter in a bank of counters, a different queue in a set of class of service queues, different filters or policers, or different next hops for handling mobility tunnels for different packet flows. Any of a group of service objects may be referenced by a variable value in subscriber record A for variable A identified by variable identifier A. By resolving the variable to a variable value in subscriber record A for variable A, i.e., to variable value Afor variable identifier A, the forwarding plane determines the one of the group of service objects to apply to packets belonging to the packet flow corresponding to subscriber record A. Some of service objects , e.g., service objects A, C, and D are commonly applied to each packet flow mapped via one of subscriber records  to template path A.","Each of variables  may be a variable instruction or group of instructions that, when executed, resolve to a value for the variable. The value for a variable may itself represent an instruction or group of instructions in the form of a service descriptor that is a memory pointer to a service object. For example, in subscriber record A, value Afor variable identifier Aof variable A may specify service object B. Subscriber records B-D may additionally specify template path A and may include different values for variable identifier Ain order to specify distinct service objects in the group of service objects B-B. As a result, the forwarding plane executing template path A for a packet uses subscriber records  to alter the processing path within template path A based on the packet flow to which the packet belongs.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 5","FIG. 2"],"b":["12","12","14","16","24","20","200","20","14","25","20","202"]},"Upon receiving a subscriber packet on one of interface cards  (), PFE A associates the subscriber packet with the subscriber record installed to subscriber records A (). PFE A determines from the subscriber record the specified logical interface (IFL), which in this example is a template IFL for the packet forwarding template (). PFE A processes the packet using the packet forwarding template using variable values of the subscriber record for corresponding variables of the packet forwarding template ().","The techniques described in this disclosure may be implemented, at least in part, in hardware, software, firmware or any combination thereof. For example, various aspects of the described techniques may be implemented within one or more processors, including one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components. The term \u201cprocessor\u201d or \u201cprocessing circuitry\u201d may generally refer to any of the foregoing logic circuitry, alone or in combination with other logic circuitry, or any other equivalent circuitry. A control unit comprising hardware may also perform one or more of the techniques of this disclosure.","Such hardware, software, and firmware may be implemented within the same device or within separate devices to support the various operations and functions described in this disclosure. In addition, any of the described units, modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware or software components. Rather, functionality associated with one or more modules or units may be performed by separate hardware or software components, or integrated within common or separate hardware or software components.","The techniques described in this disclosure may also be embodied or encoded in a computer-readable medium, such as a non-transitory computer-readable medium or computer-readable storage medium, containing instructions. Instructions embedded or encoded in a computer-readable medium may cause a programmable processor, or other processor, to perform the method, e.g., when the instructions are executed. Computer readable storage media may include random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, a hard disk, a CD-ROM, a floppy disk, a cassette, magnetic media, optical media, or other computer-readable storage media. It should be understood that the term \u201ccomputer-readable storage media\u201d refers to physical storage media, and not signals or carrier waves, although the term \u201ccomputer-readable media\u201d may include transient media such as signals, in addition to physical storage media.","Various embodiments of the invention have been described. These and other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5","FIG. 2"]}]},"DETDESC":[{},{}]}
