---
title: System and method for analyzing and generating supplementary service data units in packet based multimedia communications systems
abstract: A supplementary service, such as H.450 in a specific embodiment, test client is provided. The H.450 test client can send and receive H.450 application protocol data units in any H.225 message. The test client allows for the setting of desired H.450 parameters and allows for the display of the H.450 message itself.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07401135&OS=07401135&RS=07401135
owner: Siemens Communications, Inc.
number: 07401135
owner_city: Boca Raton
owner_country: US
publication_date: 20001219
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","RESERVATION OF COPYRIGHT","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation-in-part of commonly owned U.S. patent application Ser. No. 09\/586,408, filed Jun. 1, 2000, and titled \u201cSystem and Method for Sending Messages Defined by an ASN.1 Structure from an Application to the Signaling Entity and Vice Versa Via a Tree Structured Text String,\u201d now abandoned which is hereby incorporated by reference in its entirety as if fully set forth herein.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the U.S. Patent and Trademark Office patent file or records available to the public, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","The present invention relates to telecommunication systems and, particularly, to a system and method for sending messages from an application to signaling entities and, for particular embodiments, the sending of APDUs between H.323\/H.450 endpoints.","2. Description of the Related Art","The Abstract Syntax Notation One (ASN.1), described in the International Telecommunications Union (ITU) X.680 and X.691 specifications, defines a data structure protocol for describing messages to be exchanged between distributed computer systems. ASN.1 defines data units independently of system architecture. Because of this, ASN.1 is used to generate programming language code that forms the core of a wide variety of messaging systems applications, including ITU-T Recommendation H.323.","The ITU-T Recommendation H.323 is a group of specifications defining the operation of a multimedia communication system over packet networks. The ITU-T Recommendation H.323 specifies H.245 control signaling for negotiation of media channel usage, Q.931 (H.225.0) for call signaling and call setup, H.225.0 Registration, Admission, and Status (RAS), H.450 for supplementary services, and RTP\/RTCP for sequencing audio and video packets. An exemplary system implementing the Recommendation H.323 is the HiPath\u2122 5500 system, available from Siemens Information and Communication Networks, Inc.","H.323-based systems use ASN.1 coded messages and protocol state machines for describing the application protocol data units (APDU) or packets of data used for signaling between H.323 endpoints, servers, gateways, and gatekeepers.","The processing of H.323 ASN.1 messages is typically implemented in a protocol stack, and its functions are accessed by application programs through application programming interfaces (API). The software primitives of the APIs are typically written with programming languages, such as C, C++, and Java, and all the associated parameters are expressed and declared in the corresponding language.","Whenever new features, such as new parameters or completely new supplementary services are added to the protocol stack of a software product, such as an H.323 application, software changes must be done in three layers: new functional entities must be added to the protocol stack; new parameters or programming primitives must be added to the API; and applications and their user interfaces must be changed or enhanced to allow user access to the new features. Each operation carried out by the new feature must be callable via an API that must be explicitly exported to the application. The changes must be made at the source code level, and the new software system must be recompiled and linked together and loaded to the customer's target system.","Thus, changes and additions to the software require replacement of the software in the target system. While software can be downloaded remotely, an interruption of the target system's operation occurs, which can hinder the simple \u201cplugging in\u201d of new features to the system.","Moreover, unless the API is modified, the application cannot access new features. Thus, even relatively small changes and additions to the signaling protocols and related protocol stacks require relatively high development effort, since the API source code must be modified.","Therefore, there is a need for an improved method for updating the protocol stack of an API based software product. There is particularly a need for an improved method for updating the processing of ASN.1 messages in an H.323 telecommunications system.","Further, as is known, H.225 messages are used for call signaling to establish a connection between endpoints. Initially, an H.225.0 RAS (registration, admission, status) channel is established between an endpoint and a gatekeeper (in the gatekeeper-routed call model). After the RAS signaling channel is established, an H.225.0 call signaling channel is established between endpoints. H.225.0 call signaling messages include SETUP, ALERTING, CONNECT, RELEASE COMPLETE, and FACILITY. The user-user information element of an H.225 message can carry an H.450 APDU (application protocol data unit) for H.450 supplementary services. Such services are call-related services beyond the basic call and can include Call Forwarding, Call Transfer, Call Waiting, Message Waiting Indication, Conference, and the like.","As can be appreciated, newly implemented H.450 supplementary service features must be tested with all possible normal and exceptional events. To perform these tests, various H.450 messages must be sent and received by the endpoints. As such, there is a need for a system and method for sending, receiving, and displaying such test messages.","These and other problems in the prior art are overcome in large part by a system and method according to the present invention. According to the present invention, signaling messages and parameters that are defined by an ASN.1 structure are sent as a tree-structured text string from an application to a signaling entity (SE) and vice versa. As new signaling entities are added to support new features, the features can receive and send primitives without the programmer having to change or expand the API.","According to an implementation of the present invention, application programming interfaces (APIs) are provided which implement a first recursive function for interpreting text strings representative of ASN.1 structures for communicating with an application program. A second recursive function receives and interprets ASN.1 value trees from signaling entities (SE).","According to an implementation of the invention, an H.450 test client is provided. The H.450 test client can send and receive H.450 application protocol data units in any H.225 message. The test client allows for the setting of desired H.450 parameters and allows for the display of the H.450 message itself.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 1-14"},"ASN.1 Text Strings","An exemplary computer system implementing a communication system according to an implementation of the invention is shown in . As will be described in greater detail below, the system  may be embodied as an H.323 terminal. In particular, the system may be embodied as a personal computer, such as an x86 compatible personal computer or an Apple Macintosh G4. The computer  includes a processor  adapted to implement computer code according to the present invention. Further, according to an implementation of the present invention, the processor  implements an operating system (not shown) for generating a graphical user interface (GUI)  to control system operation.","As shown in , an application program , such as a telephony application, one or more APIs , and one or more signaling entities -are resident. As will be explained in greater detail below, the APIs  implement recursion functions  that allow ASN.1 text strings to be passed to the application  and the signaling entities . Thus, as will be explained in greater detail below, when upgrading the system, i.e., when new signaling entities are provided, the APIs need not be altered.","More particularly,  is a functional diagram of the system according to the present invention. The system includes an application program , such as a telephony program. The application program  communicates via text strings with one or more APIs , as will be explained in greater detail below. The text strings contain the ASN.1 tree structure of the message and the corresponding values.","The ASN.1 tree structure is defined in terms of \u201cvaluetrees\u201d and \u201csyntaxtrees.\u201d The syntaxtree is static and contains the syntax of all possible information elements of a message structure. The valuetree is dynamic and contains all information elements that exist for a specific message. The value tree also contains the values of the various fields.","In one implementation, the structure of the message, i.e., the syntaxtree is provided to the application program  ahead of time. In that case, although the application  and the corresponding signaling entity  must be updated in order to add new features, the API  remains the same.","In an alternate implementation, the structure and syntax of the message are provided to the application program  from the stack (not shown). In that case, the application program  will first call the corresponding API to retrieve the syntaxtree structure for the message from the stack. In this case, to add new features, both the application program  and the API  could be left unchanged. The only change then required to the system is new signaling entity script.","In operation, a first recursive function receives the syntaxtree text strings , fills in the valuetrees, and passes them to one or more signaling entities . The signaling entities may be any entities adapted to generate encodeable data according to specified functions. In particular, the signaling entities  may be embodied as H.450 signaling entities. Such signaling entities include the Message Waiting Indication (MWI), Call Transfer, Call Diversion, Call Hold, Call Waiting Call Completion, Call Pickup, and Number Identification signaling entities. The signaling entities  may be implemented in protocol description language (PDL) scripts. Further details on PDL scripts are available from Radvision, Ltd. The PDL scripts contain the state machine code of the signaling entities and also implement machines arranged in a tree structure.","In turn, the signaling entities  communicate their respective APDUs (application protocol data unit) for ASN.1 encoding\/decoding . The ASN.1 encoded octet strings are then provided onto the network .","When messages are received from the network, the ASN.1 octet strings are decoded, and the corresponding APDUs are provided to the appropriate signaling entities . The APIs  then receive the message values from the signaling entities , interpret them using a second recursion function , and pass them as text strings to the application.","Operation of an embodiment of the invention is illustrated with reference to the flowchart of . In a step , an application program  builds up a tree-structured text string, i.e., the valuetree, for a message, such as an H.450 message. In a step , the API  receives the valuetree string and fills the information elements into the valuetree. In a step , the appropriate signaling entity  is created according to the operation in the message. In a step , the signaling entity sends the message in an H.450 APDU over the network. In a step , the H.450 APDU is received from the network by the receiving party at its corresponding remote signaling entity. In a step , the remote signaling entity sends the message's valuetree to its API. In a step , the API reads out the valuetree and sends the information elements to the application program in a tree-structured text string. Finally, in a step , the application program receives the tree-structured text string and processes the information elements.","Operation of a particular implementation of the present invention may be illustrated by way of a specific example. According to a specific embodiment, code implementing the example follows as an Appendix. Shown in  is a software model of the example. The model includes an MWI Test Utility , i.e., Application Program. The Message Waiting Test utility tests the H.450 message waiting indication supplementary service. The Message Waiting supplementary service indicates on the served user that messages are waiting on the message center.","The model also includes an H.450 Test API , a Message Center Signaling Entity , a Served User Signaling Entity , and a Message Linker . To signal the relevant information over the network, APDUs with activation, deactivation, and interrogation operations are sent to and received from the network by the Served User Signaling Entity and the Message Center Signaling Entity ","The Message Linker functions to provide a distribution process by determining to which signaling entity a specific text primitive or APDU is to be sent. That is, messages are sent to and received from the signaling entities via the Message Linker ","As seen in the Appendix, the H450 Test API employs the files H450api.c, H450api.h, and H450struct.h. The Supplementary Service employs the files MWI.pdl and MWI-operations.asn. The H450 Test API implements initAPI, setCallback, initH450Root, and endH450Root initialization and termination functions. The initAPI function initializes the API. The setCallback function sets the callback. The initH450Root creates and initializes, and the end450Root function terminates, the H450 root protocol.","As is known, when a PDL state machine is executed, the resulting data structure is called a \u201cprocess.\u201d As the PDL engine executes the state machines, the processes are also arranged in a tree structure and the process tree is built in a hierarchical manner. When a process activates another process, the new process is located under the existing process in the process tree, the new process being defined as a \u201cchild\u201d process of the existing process.","In addition to the process tree, the PDL engine builds another tree called the \u201cprotocol\u201d tree. A protocol is a data structure that allows interaction between the application and the PDL machines. The protocol tree has a similar structure to that of the process tree, but not all of the elements of the process tree are recreated in the protocol tree.","The Test H450 API () implements createH450protocol, closeH450protocol, newH450RootChild, and newH450Child protocol functions. The createH450protocol function creates a new H450 protocol under the protocol root. The closeH450protocol closes the H450 protocol. The newH450RootChild is called when a new protocol is created under the protocol root. The newH450Child function is called when a new child is created under the message linker protocol.","The H450 test API implements the following message functions: sendmessage450, newH450message, fillin, and recursion. The sendmessageH450 function is called when a new message is sent from the application to the H450 protocol. The newH450message is called if the applsend function is executed in the PDL script in order to send a message back to the application.","The fillin( ) and recursion( ) function to transform the tree-structured text-strings into valuetree structures and vice versa. The fillin( ) function receives the string as a parameter and fills in the various fields in the valuetree (XMLstring->valuetree). The recursion( ) function reads out the valuetree and parses its nodes and values into a textstring (valuetree->XMLstring).",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 5","b":["650","652","654","656","658","660","662","664"]},"As noted above, one aspect of implementing the invention is a graphical user interface.  illustrates an exemplary graphical user interface  for the message waiting indication (MWI) test utility. As shown, the graphical user interface  includes a message center (MC) test control  and a served user test control . The GUI  further includes a text display region , used to display the ASN.1 text strings. The message center test control  includes an Activate Request button , a Deactivate Request button , an Interrogation Response (ack) button , and an Interrogation Response (rej) button . The served user test control  includes an Activate Response (ack) button , an Activate Response (rej) button , a Deactivate Response (ack) button , a Deactivate Response (rej) button , and an Interrogation Request button . The Message Waiting Indication (MWI) service activates an indication device (e.g. LED) on the served user endpoint if a message (e.g. voicemail) is waiting on the message center. Three operations can be sent over the network: Activation (to activate the MWI (turn on LED)); Deactivation (to deactivate the MWI (turn off LED)); Interrogation (the served user queries its MWI status).","The \u201cXXX Request Buttons\u201d (where XXX stands, e.g., for Activation) request to send the corresponding operation in an H.450 APDU to the peer entity. If the peer entity receives an indication of an operation (e.g. activation), it will respond by either acknowledging the request by pressing the \u201cXXX Response (ack) Button\u201d or by rejecting the request by pressing the \u201cXXX Response (rej) Button\u201d.","In operation, a user can push a button, such as Activate Request . In response, a dialog window  () is displayed. As shown, the dialog window  includes a plurality of data fields, and a SAVE button and a SEND button. Shown are servedUserNr, basicService, msgcenterld, nbOfMessages, originatingNr, timestamp, and priority fields. Once filled in, by pressing the SAVE button, the values are stored in a h4507.ini file; by pressing SEND, the message is sent as a text string to the signaling entity.","H.450 Test Utility","As noted above, one aspect of the invention is an ability to send and receive any H.450 protocol data unit (PDU) in any H.225 message. More particularly,  illustrates an exemplary H.225 signaling message . As shown, the signaling message  includes a TCP header  and an H.225.0 V2 message . The H.225.0 V2 message  is representative of, for example, a SETUP, CONNECT, FACILITY, etc., message. The H.225.0 V2 message  includes H.225.0 V2\/Q.931 information elements , setup information element  and an H.450 PDU . The H.450 PDU  includes a network facility extension (NFE) , an interpreter APDU (IAPDU) , an H.450 feature , an MSI extension , and an MSI specific feature . The NFE  defines the type of source and destination of the operation. The IAPDU  defines what the receiver is to do if it does not understand the command. The H.450 feature  is the APDU itself, and contains an MSI extension which identifies the manufacturer, as does the MSI specific feature .","As will be explained in greater detail below, the present invention allows the user to send test H.225 messages, with or without H.450 APDUs. If an H.450 APDU is to be sent, the user can select the specific H.450 APDU and any combination of information elements and network facility extension. The messages are then sent and received, as will be discussed in greater detail below.","A graphical user interface is used to build the H.450 APDU. A graphical user interface in accordance with an implementation of the present invention is shown in . The GUI  allows the user to select the H.225 message which is to be tested. For example, the user can select SETUP , ALERTING , or FACILITY buttons to select the corresponding H.225 message. One or more informational fields , such as called party and calling party phone number and alias may also be provided. Further, a list field  is provided to display the received H.450 message in an XML-like syntax, as generally described above. The list field  displays the H.225 message in which the H.450 APDU was received, and also displays all the H.450.1 information elements.","If the user decides to send an H.225 message, e.g., by clicking on SETUP, and after inputting the target number or name, the dialog box  of  is displayed. The dialog box  allows setting the H.450 information elements. Thus, the dialog box  includes an interpretation APDU select dialog  and a network facility extension select dialog . Using the pulldown , the user can select any of a plurality of interpretation APDUs. Alternatively, by deactivating the checkbox  the user can elect to send an H.225 message without the IAPDU. Similarly, the user can elect to send no network facility extension, by clicking on the checkbox .","The user can input a source and destination entity using the source entity dialog box  and destination entity dialog box , respectively. The source entity dialog allows the user to enter an entity type and a source entity address . The source entity address  allows a user to input a value and address type , . As shown, a Party Number type has been selected. The party number dialog allows the user to select a type of party number and then, more specifically, the type of private or public party number. Alternatively, a transport address may be supplied.","Similarly, the destination entity dialog can be used to select an entity type , and includes a destination entity address dialog . The destination entity address dialog can be used to input a value and select a destination entity address type . As shown, a transported type has been selected. The transport ID, e.g., IP address and port, may be input using the dialog . If a party number type had been selected, the user could input a party number type and a private party number type or public party number type ","The entries may be saved by clicking on SAVE . Alternatively, the H.225 message may be sent without the H.450 APDU by clicking on button  or with the APDU by clicking on button .",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 12A","FIG. 12B","FIG. 12A","FIG. 9"],"b":["1200","1200","1202","1204","1206","1208","1204","1200","1206","1208","1208"]},"If the user highlights an APDU in the List dialog  and clicks the OK button , the Select Operation Argument Dialog  () appears. The Select Operation Argument Dialog  includes an OK button , a Cancel button , a New button , and a List Dialog .","By clicking the Cancel button , the user can decide not to send an Argument with this APDU, which will close the dialog and send the message immediately. Clicking on New  will start the H450 Builder Application which allows the user to build a new argument and add it to the List dialog . Once the new Argument is created and the Builder is exited, the List  is refreshed.","If the user highlights an Argument in the List  and clicks the OK button , the H.450 Client processes all necessary RAS procedures and send the setup message together with the H.450 APDU to the specified destination.","Operation of the H450 Builder is shown in greater detail with reference to  and . More particularly,  illustrates a Create APDU dialog . The Create APDU dialog  includes an OK button , a Cancel button  and an entry dialog . If the user presses Cancel , the application terminates.","Otherwise, at startup, the Builder first asks what type of APDU the user wants to create. The user does so by typing in the appropriate APDU in the Entry dialog . The user can type in \u201ch4501\u201d to build an H.450 APDU or \u201ch450x\u201d to build an argument, where x refers to the number of the H.450 recommendation. When the user clicks \u201cOK\u201d , the Builder GUI () appears.","The APDU Builder  displays a tree control, which displays the whole syntaxtree of the H450 APDU. By clicking on the nodes of the tree, the user can select or deselect nodes for building. If a leaf node (i.e., an end node) is selected, a dialog box (not shown) appears for the user to fill in data.","For example,  illustrates a syntaxtree for an H4501 supplementary service. The user can select network facility extension, InterpretationAPDU, and serviceAPDU nodes. If the user selects networkfacilityextension, the user can choose a SourceEntity, a SourceEntityAddress, and a DestinationEntity and DestinationEntityAddress. If the user selects destinationEntityAddress, a variety of choices are available, such as H323-ID, url-ID, and the like. The user can select one and fill in the appropriate value.","Turning now to , a flowchart illustrating operation of an implementation of the invention is shown. In step , the user uses GUI  () to select a particular H.225 message for sending. In a step , a selection of the IAPDU may be made, using the checkbox  and the dialog  () or the Select APDU, Select Operation Argument dialogs (). In a step , a selection of the Network Facility Extension may be made using the checkbox  and the dialog  or the Builder . As discussed above, this can include selection of a variety of source and destination entities, and addresses, including party numbers or transport IDs. In a step , the user can elect to save the filled in information or send the H.225 message with or without the APDU, using buttons , , or  (or the dialogs , , , ). In a step , the H.450 IAPDU is displayed.","The invention described in the above detailed description is not intended to be limited to the specific form set forth herein, but is intended to cover such alternatives, modifications and equivalents as can reasonably be included within the spirit and scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the invention is obtained when the following detailed description is considered in conjunction with the following drawings in which:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 9","FIG. 10"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 12A","FIG. 12B"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
