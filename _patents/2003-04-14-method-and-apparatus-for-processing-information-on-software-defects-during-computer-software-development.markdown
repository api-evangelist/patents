---
title: Method and apparatus for processing information on software defects during computer software development
abstract: An apparatus for processing data relating to software defects operates within an on-line analytical processing environment that includes an on-line analytical processing presentation tool (). An on-line analytical processing cube model builder () builds a plurality of interrelated tables () with on-line analytical processing cube model metadata (). The cube model () is configured to be processed by the associated on-line analytical processing presentation tool (). A data extraction tool () communicates with a defect tracking database () containing said data relating to software defects. The data extraction tool () extracts said data from the defect tracking database (), transforms the extracted data into the software defect entries, and loads the software defect entries into the tables ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07401321&OS=07401321&RS=07401321
owner: International Business Machines Corporation
number: 07401321
owner_city: Armonk
owner_country: US
publication_date: 20030414
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to the art of computer software development. It finds particular application in tracking and analyzing identified software defects in large commercial, business, and military software development projects, and will be described with particular reference thereto. However, the invention also finds application in analysis of smaller scale software development projects, in analysis of defects in other types of computer system developments such as, for example, an installation of a complex distributed database system for a nationwide or global business concern.","2. Description of Related Art","Modern computer software development projects are highly complex undertakings that involve teams of software developers each working on selected software components or modules destined to be combined to form the final software product. Quality control groups test modules, interactions between modules, interactions between modules and the supporting operating system, and so forth using hardware testbeds to identify software defects during the development. Project engineers coordinate the workflow, forecast project timelines, and otherwise manage project activities.","Software defects inevitably are introduced during development of large, complex software products. Resolution of defects in complex software development projects is a difficult task due, among other reasons, to a high degree of interrelatedness of various software components. Resolution of one identified defect can give rise to other defects. Such defect interaction is reduced but not eliminated through the use of modular programming concepts.","Quality control groups test software modules to identify and characterize software defects. When a defect is identified, information pertaining to the defect is recorded in a database, and the associated software module or modules are tested to identify characteristics of the defect such as the scope of affected software components, the software versions or releases which exhibit the defect, operating conditions under which the defect manifests, severity of the defect, and so forth. The identified defect information is forwarded to a software development team which is assigned the task of remedying the defect.","In a complex software project, defects are discovered and subsequently resolved on a continuing basis, and it is useful to maintain accurate, up-to-date records and statistics pertaining to the discovered software defects. For example, a decrease in a rate of newly discovered defects in a component over time is typically indicative of increasing robustness and reliability of that component, and is thus an indicator that good progress is being made. Conversely, an increasing rate of newly discovered defects, or a large time interval between discovery and resolution of severe defects, can be indicative of substantial problems with the associated software component or components.","In the past, data pertaining to software defects has been stored and tracked using dedicated source control or defect tracking systems that are optimized to provide an efficient defect remediation workflow. In these systems, each defect is typically classified based on its severity, assigned a resolution priority based on its impact on software performance, and assigned to a software developer or development team for resolution. A defect status is stored in a relational database or other storage entity, and is monitored and tracked until the defect is remedied. After remediation is complete, the defect information is preferably retained for statistical defect analyses or other purposes.","Existing defect tracking systems are suitable for managing remediation of specific defects, but provide limited information relevant to workflow coordination and forecasting for the software development project as a whole. Information for high-level management tasks come in various data formats and from various sources. Project engineers study incoming defect rates, risk factors associated with defects, defect resolution rates, and the like in order to generate development timeline projections, to allocate development resources, to identify problematic software components, and so forth.","Existing defect tracking systems that are targeted toward efficient defect remediation workflow typically do not provide information on defects in a form that is readily applied to these high level project engineering tasks. Moreover, information contained in these defect tracking systems is not readily integrated with other types of information related to project development. Project engineers would benefit from a system, apparatus, method, or article of manufacture for integrating information on software defects with other types of information, and for arranging such integrated data compilations in a format that is supportive of high level project development tasks. Preferably, such a system, apparatus, method, or article of manufacture would be compatible with existing data analysis tools that are familiar to typical software project engineers, such as commercial spreadsheet programs that provide tabular and graphical representations of data compilations.","The present invention contemplates an improved method and apparatus which overcomes these limitations and others.","In accordance with one aspect, an apparatus is disclosed for processing data relating to software defects. The apparatus is operative within an associated on-line analytical processing environment that includes at least an on-line analytical processing presentation tool for presenting results of on-line analytical processing. An on-line analytical processing cube model builder builds a plurality of interrelated tables with on-line analytical processing cube model metadata. The tables include at least a defects fact table containing software defects entries corresponding to said data relating to software defects and a plurality of dimension tables. The cube model is configured to be processed by the associated on-line analytical processing presentation tool. A data extraction tool communicates with a defect tracking database containing said data relating to software defects. The data extraction tool extracts said data from the defect tracking database, transforms the extracted data into the software defect entries, and loads the software defect entries into the defects fact table.","In accordance with another aspect, a method is provided for processing data on software defects identified during software development. Information pertaining to identified software defects is formatted and loaded as defect entries into a defects database. A multidimensional on-line analytical processing cube model associated with the defects database is constructed. The cube model includes at least a plurality of time dimensions. An on-line analytical processing cube is constructed based on the defects database, the cube model, and a selection of cube dimensions. The on-line analytical processing cube is accessed using an on-line analytical processing presentation tool.","In accordance with yet another aspect, an article of manufacture is disclosed comprising a program storage medium readable by a computer and embodying one or more instructions executable by the computer to perform a method for processing data on identified software defects. An on-line analytical processing cube containing information pertaining to identified software defects is generated. The on-line analytical processing cube is accessed using an on-line analytical processing presentation tool.","Numerous advantages and benefits of the invention will become apparent to those of ordinary skill in the art upon reading and understanding this specification.","With reference to , one or more defect tracking databases ,  contain information on software defects of a software development effort. The information in the defect tracking databases ,  is entered by quality control teams, development teams, or other entities that discover and characterize the software defects. The databases ,  are typically relational databases, but can be substantially any type of information storage entity. In a typical embodiment, the databases ,  store, for each identified defect, information such as: a component name identifying which software component apparently contains the defect; defect originator information pertaining to who identified the defect; defect owner information pertaining to who is responsible for remedying the defect; a defect severity indicator; a defect state such as opened, closed, working, verified, or the like; dating information such as a creation date indicating when information on the defect was first recorded, an assignment date specifying when the defect owner was assigned the defect, and a last-modified date indicating when the defect entry was last updated; a defect abstract that includes a textual summarization of defect characteristics; release information pertaining to which version or release of the software contains the defect; and so forth.","The defect tracking databases ,  generally employ a proprietary or non-standard storage format, and provide limited analysis capabilities. The databases ,  are also typically incompatible with other information sources such as project management tools , and are not directly readable by general-purpose data analysis and display packages such as a conventional spreadsheet program . The defect tracking databases ,  do not provide flexible analysis capabilities such as are desired by project engineers and other high level software development project personnel.","To provide flexible on-line analytical processing (OLAP) capabilities appropriate for high level software development tasks, a data warehouse database  includes interrelated tables  and metadata defining a cube model  that represents a structural relationship between the tables . The cube model  is an on-line analytical processing metadata object which represents a structural relationship among tables and table columns in a relational database. The metadata defining the cube model  is based on a suitable entity relationship schema for interrelating the tables , such as a star schema or a snowflake schema, that relates relational database tables containing data and metadata pertaining to the defects. The warehouse defect database  with metadata defining the cube model  can be selectively processed using structured query language (SQL) commands to generate OLAP cubes having selected dimensions and dimensional hierarchies for further analysis.","A cube model builder  constructs the warehouse defect database  with exemplary star schema tables , table joins, and the OLAP metadata with dimensional information, and other structural aspects of the defects cube model  within a relational database environment. In a suitable embodiment, the cube model  is built within a DB2 relational database environment (available from IBM Corporation). However, other database environments can also be used.","The constructed warehouse defects database  is loaded with information on defects contained in the defect tracking databases ,  by an extraction, transformation, and loading (ETL) tool . Because the defect tracking databases ,  typically employ non-standard data formatting, the ETL tool  is preferably a customized software tool, for example a C++ program or program suite, that is designed to operate on data having the specific format of the defect tracking databases , . Although two defect tracking databases ,  are shown as being processed by the ETL tool  in , it will be appreciated that only a single defect tracking database, or more than two defect tracking databases, can similarly be processed by the ETL tool . Moreover, the ETL tool  preferably loads additional information pertaining to software defects form other sources, such as from the project management tools . For example, the project management tools  may store information on allocation of software development resources such as hardware testbeds, or information on estimated progress in resolution of identified defects.","After the initial creation and loading of the warehouse defect database , the contents are occasionally refreshed so that the warehouse database  including metadata of the cube model  contains substantially up-to-date information on identified software defects. In a suitable refresh method, a data refresh trigger  references a system clock  to trigger the ETL tool  to perform a contents update of the warehouse database  on a daily or other selected periodic time interval.","The defects metadata cube model  provides a suitable framework for performing OLAP analyses of the defects data. In an exemplary arrangement shown in , an OLAP cube builder  generates one or more SQL statements that are processed by an SQL engine  to effect generation of one or more OLAP cubes ,  based on the cube model  that each have selected dimensions and dimensional hierarchies. In the illustrated embodiment of , the OLAP cube  is a virtual object that is logically defined by selection of dimensions and dimensional hierarchies of the cube model . This virtual nature of the OLAP cube  is indicated by showing the cube  using dashed lines. The virtual cube  advantageously uses limited memory; however processes employing the cube  can be slowed down by additional processing employed to extract data during analyses using the virtual cube .","On the other hand, the OLAP cube  is fully instantiated; that is, the cube  exists in a separate random access memory and\/or disk space from the cube model , the separate space being configured in conformance with the cube dimensions selected for the cube . The fully instantiated nature of the OLAP cube  is indicated by showing the cube  using solid lines. The fully instantiated cube  occupies more memory an equivalent virtual cube; however, processing using the fully instantiated cube  is typically faster than equivalent processing employing an equivalent virtual cube. OLAP cubes preferably can also be generated by the OLAP cube builder  which are partially instantiated and partially virtual. Those skilled in the art can optimize between virtual and instantiated cubes to make efficient use of available disk and random access memory space while achieving a desired analysis processing speed.","The OLAP cubes ,  are accessed by an end user operating an OLAP presentation tool . In the exemplary embodiment of , the end user operates the spreadsheet program  that includes the OLAP presentation tool  as an add-in program, such as a spreadsheet plug-in program, to slice, dice, and drill through the cube to data, plot selected slices of cube data, or otherwise analyze data stored in the cubes , .","The present invention is typically implemented using one or more computer programs, each of which executes under the control of an operating system, such as IBM OS\/2, Microsoft Windows, DOS, etc. IBM-AIX, UNIX, LINUX, and other operating systems and causes one or more computers to perform the desired functions as described herein. Thus, using the present specification, the invention may be implemented as a machine, process, or article of manufacture by using standard programming and\/or engineering techniques to produce software, firmware, hardware or any combination thereof.","Generally, the computer programs and\/or operating system are all tangibly embodied in a computer-readable device or media, such as memory, data storage devices, and\/or data communications devices, thus making a computer program product or article of manufacture according to the invention. As such, the term \u201carticle of manufacture\u201d as used herein are intended to encompass a computer program accessible from any computer readable device or media.","Furthermore, the computer programs and operating system are comprised of instructions which, when read and executed by one or more computers cause the one or more computers to perform process operations necessary to implement and\/or use the present invention. Under control of the operating system, the computer programs may be loaded from the memory, data storage devices, and\/or data communications devices into the memories of one or more computers for use during actual operations. Those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope of the present invention.","Moreover, the illustrated defect processing system shown in  is exemplary only. Those skilled in the art can readily modify the arrangement and\/or interrelation of components to adapt the defect processing system to specific defect information sources, OLAP engines, and OLAP presentation software configurations. For example, the OLAP cube builder  is optionally integrated into the add-in OLAP presentation tool , so that the presentation tool component  of the spreadsheet program  directly constructs the OLAP cubes ,  for navigation by an end user operating the spreadsheet program . Alternatively, the OLAP cube builder  can be integrated into the SQL engine . Those skilled in the art can readily make other modifications to the exemplary embodiment of . For instance, the data refresh trigger  can be integrated into the ETL tool .","The cube model builder  preferably constructs the metadata cube model  to conform with a standardized general purpose metadata specification. Further, the OLAP cube builder  and the OLAP presentation tool  are preferably configured to read and process metadata formatted in accordance with the standardized general purpose metadata specification. In this arrangement, the OLAP cube builder  and the OLAP presentation tool  are advantageously standardized products rather than customized components. However, it is also contemplated to employ a non-standard metadata format for the metadata cube model , in which case the OLAP cube builder  and the OLAP presentation tool  are suitably modified or configured to read and process the non-standard metadata format.","With reference to , a preferred embodiment of the interrelated tables  is described. The tables  have an entity relationship corresponding to an exemplary star schema topology. However, a snowflake schema or other schema can be substituted for the star schema topology. A defects facts table  has a plurality of columns for each defect entry row. A plurality of dimension tables , , , , , ,  are joined to the defects facts table  by a primary key column of the dimension table that corresponds with one or more foreign key columns of the defect facts table .","In the exemplary illustrated embodiment of , the columns of the defects facts table  include a COMPONENTID which identifies the software component in which the defect was detected. COMPONENTID stores a foreign key joining to the COMPONENT dimension table . OWNERID identifies the defect owner, while ORIGINATORID identifies the defect originator. These columns of the facts table  store foreign keys that join to the USER dimension table . SEVERITYID contains a defect severity level indicator, and stores a foreign key that joins to the SEVERITY dimension table . STATEID contains a defect state (for example, opened, closed, being verified, etc.), and stores a foreign key that joins to the STATE dimension table .","Several time columns CREATIONID, LASTUPDATEID, ASSIGNDATEID, RESPONSEDATEID, and ENDDATEID contain a defect entry creation date, a date of last entry update, a date of owner assignment, a date the owner accepted or returned the defect, and a date that the defect was closed or canceled, respectively. These columns store foreign keys that join to the TIME dimension table . These columns provide information about when events happened to a defect such as being opened or closed.","The column EXTRACTEDID contains a date that the defect entry contents were last extracted by the ETL tool . This column also stores a foreign key that joins to the TIME dimension table . In a preferred embodiment, whenever the ETL tool  extracts data on a defect, a new row is created in the facts table  which contains information that is current as of the extract date for that defect. The EXTRACTEDID identifies the extraction date for each row of the facts table  so that a snapshot of the defect data is recorded and stored each time the ETL tool  performs an update. EXTRACTEDID is used to identify the state of a defect at a point in time, by tagging the extracted data with the extract date. This enables a detailed analysis or snapshot of defects at a selected time in the past, e.g. one month ago.","ANSWERID is used by the defect owner to accept or return the defect, and stores a foreign key that joins to the ANSWER dimension table . DEFECT_NUMBER contains a unique identification number or name for the defect entry. DEFECT_DESC which contains a textual abstract or summarization of the defect. AGE contains an age of the defect starting from the creation date to a current date. RELEASEID contains an identification of the software release or version containing the defect, and stores a foreign key that joins to the RELEASE dimension table . ENVIRONMENT identifies the operating system or other environmental information in which the defect manifested. LEVEL specifies the level in which the defect manifested. DUPLICATE is used to indicate a duplicate defect entry row. REFERENCE stores a reference name or handle for the defect. PREFIX which contains a defect type code.","Table I provides a summary of the tables , , , , , , ,  of the exemplary star schema interrelated tables .",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Description of Tables of the Star Schema"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Table","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Component","The COMPONENT table shows the component name and"]},{"entry":[{},"its sub-component name. The integer primary key"]},{"entry":[{},"from Component table is referenced as a foreign"]},{"entry":[{},"key in DEFECTFACT table."]},{"entry":["Severity","The Severity table has Severityid and Severity"]},{"entry":[{},"description that describes the problem of the defect."]},{"entry":[{},"The integer primary key from Severity table is referenced"]},{"entry":[{},"as a foreign key in DEFECTFACT table."]},{"entry":["User","The User table contains a list of originator name and"]},{"entry":[{},"owner name with Role as the higher category. Its primary"]},{"entry":[{},"key is varchar datatype and it physically joins the"]},{"entry":[{},"Originatorid and Ownerid (as the foreign key) from the"]},{"entry":[{},"DEFECTFACT table."]},{"entry":["State","The State table shows the status of the defect. The"]},{"entry":[{},"higher category column is grouped in either Open or"]},{"entry":[{},"Close category. The Open category (open, working,"]},{"entry":[{},"returned, and verify) and the Close category (closed,"]},{"entry":[{},"canceled) are grouped respectably. Its integer primary"]},{"entry":[{},"key is referenced as a foreign key in DEFECTFACT table."]},{"entry":["Answer","The Answer table shows the answer name and the answer"]},{"entry":[{},"description of the defect especially when the defect"]},{"entry":[{},"is either accepted or returned from the owner. Its integer"]},{"entry":[{},"primary key is referenced as a foreign key in"]},{"entry":[{},"DEFECTFACT table."]},{"entry":["Release","The Release table contains the Releaseid and Release"]},{"entry":[{},"name. Its integer primary key is referenced as a foreign"]},{"entry":[{},"key in DEFECTFACT table."]},{"entry":["Time","The Time table defines the time period for which we"]},{"entry":[{},"report and update data. The Time dimension references"]},{"entry":[{},"several dimensions such as. AssignDate, CreateDate,"]},{"entry":[{},"EndDate, ExtractDate, LastUpdate, and ResponseDate."]},{"entry":["DefectFact","The DefectFact table contains the foreign keys"]},{"entry":[{},"columns from the dimension tables and others columns"]},{"entry":[{},"that are used in the defect model."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"It will be appreciated that different or other information pertaining to software defects can be similarly incorporated into the multidimensional defects metadata cube model. For example, an allocation of each defect to a software quality control hardware testbed can be included. This information is typically stored in the project management tools , and is useful in OLAP analyses for determining optimal allocation of defects among the available hardware testbeds. Similarly, an estimate of the progress toward remedying the defect, quantified for example as a percentage completion of defect remediation, can similarly be extracted from the project management tools  by the ETL tool .","In addition to metadata pertaining to the interrelationship of the tables , the metadata of the cube model  includes other on-line analytical processing metadata objects such as measure objects. Each measure object defines a measurement entity that is operative in conjunction with a dimensional context. In a preferred embodiment, two measures are provided: a Defect_Count measure and a Defect_Count_Average measure. These exemplary measures are described below.","The Defect_Count measure is defined as a constant value of 1. Its aggregation function is set as COUNT and it maps to the AGE column in the DefectFact table . An exemplary Defect_Count measure of the defect cube model  is defined in XML below:",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"- <measure name=\u201cDEFECT_COUNT\u201d schema=\u201cDEFECT\u201d"]},{"entry":[{},"BusinessName=\u201cDEFECT_COUNT\u201d createTime="]},{"entry":[{},"\u201c2003-02-20T17:09:21\u201d creator=\u201cARBOR\u201d"]},{"entry":[{},"modifyTime=\u201c2003-02-20T17:11:53\u201d modifier=\u201cARBOR\u201d>"]},{"entry":[{},"\u2003<datatype schema=\u201cSYSIBM\u201d name=\u201cINTEGER\u201d length=\u201c4\u201d"]},{"entry":[{},"\u2003scale=\u201c0\u201d \/>"]},{"entry":[{},"- <sqlExpression template=\u201c{$$1}\u201d>"]},{"entry":[{},"\u2003<column name=\u201cAGE\u201d tableSchema=\u201cDEFECT\u201d tableName="]},{"entry":[{},"\u2003\u201cDEFECTFACT\u201d \/>"]},{"entry":[{},"\u2003<\/sqlExpression>"]},{"entry":[{},"\u2003\u2002<aggregation function=\u201cCOUNT\u201d \/>"]},{"entry":[{},"\u2003\u2002<\/measure>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["22","72"],"figref":"FIG. 2"},"The Defect_Count_Average measure is suitably defined as an average value of the total defect count. Its aggregation function is calculated by averaging based on the ExtractDate column in the DefectFact table . A suitable Defect_Count_Average measure in the defect cube model  is defined in XML below:",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"- <measure name=\u201cDEFECT_COUNT_AVERAGE\u201d schema="},{"entry":"\u201cDEFECT\u201d"},{"entry":"businessName=\u201cDEFECT_COUNT_AVERAGE\u201d createTime="},{"entry":"\u201c2003-02-20T17:09:21\u201d"},{"entry":"creator=\u201cARBOR\u201d modifyTime=\u201c2003-03-11T17:49:40\u201d modifier="},{"entry":"\u201cARBOR\u201d>"},{"entry":"\u2003<datatype schema=\u201cSYSIBM\u201d name=\u201cINTEGER\u201d length="},{"entry":"\u2003\u201c4\u201d scale=\u201c0\u201d \/>"},{"entry":"\u2003<sqlExpression template=\u201c1\u201d \/>"},{"entry":"-<aggregation function=\u201cCOUNT\u201d>"},{"entry":"\u2003<dimensionRef name=\u201cANSWER\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cASSIGNDATE\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cCREATEDATE\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cDUPLICATE\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cENDDATE\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cENVIRONMENT\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cLASTUPDATE\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cLEVEL\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cORIGINATOR\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cOWNER\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cPREFIX\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cREFERENCE\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cRELEASE\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cRESPONSEDATE\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cSEVERITY\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<dimensionRef name=\u201cSTATE\u201d schema=\u201cDEFECT\u201d \/>"},{"entry":"\u2003<\/aggregation>"},{"entry":"\u2003<aggregation function=\u201cAVG\u201d \/>"},{"entry":"\u2003\u2002<\/measure>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["22","72"],"figref":"FIG. 2"},"The Defect_Count and Defect_Count_Average measures are exemplary only. Those skilled in the art can readily incorporate other measures into the multidimensional defects metadata cube model . For example, a base level Estimated_Duration measure can be included to track the duration of remedying a defect. An extra column Duration is suitably added to the facts table . Task duration data is typically stored in the Project Management tools , and can be extracted, formatted, and loaded into the facts table  by the ETL tool . The Estimated_Duration measure can be rolled up using a SUM aggregation function along all dimensions. For example, an end user can get information such as the total number of days to close all defects of a particular component having a severity equal to 1.","A base level measure Days_Completed is optionally incorporated to track the completion status of defects in terms of days. Typically, the project management tools  track a percentage of completion of each task. This percentage completion data is extracted by the ETL tool  and stored in an added Percentage_Complete column of the Fact table . The measure Days_Completed is computed by the following expression:\n\nDays_Completed=(Percentage_Complete\/100)\u00d7Estimated_Duration\u2003\u2003(1)\n\nwhere Percentage_Complete is the contents of the additional column of the facts table , and the Estimated_Duration measure was defined previously.\n","Another derived measure, Task_Completion, is optionally created using the following expression:\n\nTask_Completion=Days_Completed\/Estimated_Duration\u00d7100%\u2003\u2003(2).\n\nA suitable aggregation function of Task_Completion is given by:\n\nSUM(Days_Completed)\/SUM(Estimated_Duration)\u00d7100%\u2003\u2003(3).\n\nThe Days_Completed measure is an intermediate measure with the SUM aggregation function. Estimated_Duration is also a fully additive measure with the SUM aggregation functions. The value of measure Task_Completion is calculated using the aggregated value of Days_Completed and Estimated_Duration.\n","Yet another derived measure, a Remaining_Effort_in_Days measure, is optionally incorporated to show an end user an overall status of the defect remediation efforts. This measure is suitably computed according to:\n\nRemaining_Effort_in_Days=Estimated_Duration\u2212Days_Completed\u2003\u2003(4).\n","Still yet another derived measure, Defect_Count_by_Week, is optionally incorporated to represent a number of defects at the end of the week. In order to enable this measure, an extra column is suitably added to the Time dimension table , namely a \u201cLast_Day_of_Week\u201d column, which stores a binary value indicating whether a day is a last day of a week. For example, a value of 1 can be used to indicate a last day of a week, while a value of 0 is used for the other six days of each week. The measure is then defined as:\n\nDefect_Count_by_Week=Defect_Count\u00d7Last_Day_of_Week\u2003\u2003(5).\n\nDerived measures indicating the defect count by Month, Quarter, or other time interval can be similarly constructed.\n","The described measures are exemplary only. Those skilled in the art can readily incorporate different or other measures into the multidimensional defects metadata cube model  in similar fashion.","The metadata of the cube model  further includes dimension objects. A dimension object provides a way to categorize a set of related attributes that together describe one aspect of a measure. Dimensions are used in the cube model  to organize the calculated data according to logical categories such as Severity, Priority, or Time. Related attributes and the joins for grouping attributes together are defined in the dimension's object specific definition properties. Dimensions reference one or more hierarchies. Hierarchies describe the relationship and structure of the dimensional attributes and can be used to drive navigation and calculation of the dimension.","The exemplary cube model  includes eighteen dimensions and hierarchies, which are set forth below.\n\n","With reference to , the cube model builder  includes a facts and dimensions tables builder  that a builds the structure of the interrelated tables  including the facts table , dimension tables , , , , , , , and table joins. A suitable data definition language (DDL) script embodiment of the tables builder  for creating the interrelated tables  is set forth below:",{"@attributes":{"id":"p-0059","num":"0130"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SET CURRENT SCHEMA = DEFECT;"},{"entry":"-- ====================================================="},{"entry":"-- Drop DEFECT tables"},{"entry":"-- ====================================================="},{"entry":"DROP TABLE DEFECTFACT;"},{"entry":"DROP TABLE TIME;"},{"entry":"DROP TABLE COMPONENT;"},{"entry":"DROP TABLE USER;"},{"entry":"DROP TABLE SEVERITY;"},{"entry":"DROP TABLE STATE;"},{"entry":"DROP TABLE RELEASE;"},{"entry":"DROP TABLE ANSWER;"},{"entry":"-- ====================================================="},{"entry":"-- Create DEFECT tables"},{"entry":"-- ====================================================="},{"entry":"CREATE TABLE TIME"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["( TIMEID","\u2003\u2003\u2003\u2003INTEGER","\u2003\u2003\u2003\u2003NOT NULL,"]},{"entry":["\u2003YEAR","INTEGER","NOT NULL,"]},{"entry":["\u2003QUARTER","INTEGER","NOT NULL,"]},{"entry":["\u2003MONTH","INTEGER","NOT NULL,"]},{"entry":["\u2003WEEK","INTEGER","NOT NULL,"]},{"entry":["\u2003DAY","INTEGER","NOT NULL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CREATE TABLE COMPONENT"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["( COMPONENTID","INTEGER","NOT NULL,"]},{"entry":["COMPONENT_CATEGORY","VARCHAR(20)","NOT NULL,"]},{"entry":["COMPONENT_NAME","VARCHAR(50)","NOT NULL,"]},{"entry":["SUB_COMP_NAME","VARCHAR(50)","NOT NULL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CREATE TABLE USER"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["( USERID","VARCHAR(15)","NOT NULL,"]},{"entry":["ROLE","VARCHAR(25)","NOT NULL,"]},{"entry":["USER_NAME","VARCHAR(30)","NOT NULL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CREATE TABLE SEVERITY"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["( SEVERITYID","INTEGER","NOT NULL,"]},{"entry":["SEVERITY_DESC","VARCHAR(25)","NOT NULL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CREATE TABLE STATE"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["( STATEID","INTEGER","NOT NULL,"]},{"entry":["CATEGORY","VARCHAR(25)","NOT NULL,"]},{"entry":["STATE","VARCHAR(25)","NOT NULL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CREATE TABLE RELEASE"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["( RELEASEID","INTEGER","NOT NULL,"]},{"entry":["RELEASE_NAME","VARCHAR(25)","NOT NULL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CREATE TABLE ANSWER"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["( ANSWERID","INTEGER","NOT NULL,"]},{"entry":["ANSWER_NAME","VARCHAR(30)","NOT NULL,"]},{"entry":["ANSWER_DESCRIPTION","VARCHAR(100)","NOT NULL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"CREATE TABLE DEFECTFACT"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["( COMPONENTID","INTEGER","NOT NULL,"]},{"entry":["OWNERID","VARCHAR(15)","NOT NULL,"]},{"entry":["ORIGINATORID","VARCHAR(15)","NOT NULL,"]},{"entry":["SEVERITYID","INTEGER","NOT NULL,"]},{"entry":["STATEID","INTEGER","NOT NULL,"]},{"entry":["CREATIONID","INTEGER","NOT NULL,"]},{"entry":["ANSWERID","INTEGER","NOT NULL,"]},{"entry":["DEFECT_NUMBER","VARCHAR(15)","NOT NULL,"]},{"entry":["DEFECT_DESC","VARCHAR(100)","NOT NULL,"]},{"entry":["AGE","INTEGER","NOT NULL,"]},{"entry":["RELEASEID","INTEGER","NOT NULL,"]},{"entry":["ENVIRONMENT","VARCHAR(25)","NOT NULL,"]},{"entry":["LEVEL","VARCHAR(25)","NOT NULL,"]},{"entry":["DUPLICATE","VARCHAR(25)","NOT NULL,"]},{"entry":["LASTUPDATEID","INTEGER","NOT NULL,"]},{"entry":["ASSIGNDATEID","INTEGER","NOT NULL,"]},{"entry":["RESPONSEDATEID","INTEGER","NOT NULL,"]},{"entry":["ENDDATEID","INTEGER","NOT NULL,"]},{"entry":["REFERENCE","VARCHAR(25)","NOT NULL,"]},{"entry":["PREFIX","VARCHAR(2)","NOT NULL,"]},{"entry":["EXTRACTEDID","INTEGER","NOT NULL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-- ====================================================="},{"entry":"-- Create Primary Keys on DEFECT tables"},{"entry":"-- ====================================================="},{"entry":"ALTER TABLE TIME"},{"entry":"\u2003\u2003\u2003ADD PRIMARY KEY (TIMEID);"},{"entry":"ALTER TABLE COMPONENT"},{"entry":"\u2003\u2003\u2003ADD PRIMARY KEY (COMPONENTID);"},{"entry":"ALTER TABLE USER"},{"entry":"\u2003\u2003\u2003ADD PRIMARY KEY (USERID);"},{"entry":"ALTER TABLE SEVERITY"},{"entry":"\u2003\u2003\u2003ADD PRIMARY KEY (SEVERITYID);"},{"entry":"ALTER TABLE STATE"},{"entry":"\u2003\u2003\u2003ADD PRIMARY KEY (STATEID);"},{"entry":"ALTER TABLE RELEASE"},{"entry":"\u2003\u2003\u2003ADD PRIMARY KEY (RELEASEID);"},{"entry":"ALTER TABLE ANSWER"},{"entry":"\u2003\u2003\u2003ADD PRIMARY KEY (ANSWERID);"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD PRIMARY KEY (EXTRACTEDID, DEFECT_NUMBER);"},{"entry":"-- ====================================================="},{"entry":"-- Create Foreign Keys on DEFECT tables"},{"entry":"-- ====================================================="},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (RELEASEID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES RELEASE (RELEASEID) ON DELETE"},{"entry":"\u2003\u2003\u2003\u2003RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (COMPONENTID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES COMPONENT (COMPONENTID) ON"},{"entry":"\u2003\u2003\u2003\u2003DELETE RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (ORIGINATORID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES USER (USERID) ON DELETE RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (OWNERID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES USER (USERID) ON DELETE RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (SEVERITYID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES SEVERITY (SEVERITYID) ON DELETE"},{"entry":"\u2003\u2003\u2003\u2003RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (STATEID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES STATE (STATEID) ON DELETE RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (ANSWERID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES ANSWER (ANSWERID) ON DELETE"},{"entry":"\u2003\u2003\u2003\u2003RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (CREATIONID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES TIME (TIMEID) ON DELETE RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (EXTRACTEDID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES TIME (TIMEID) ON DELETE RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (LASTUPDATEID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES TIME (TIMEID) ON DELETE RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (ASSIGNDATEID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES TIME (TIMEID) ON DELETE RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (RESPONSEDATEID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES TIME (TIMEID) ON DELETE RESTRICT;"},{"entry":"ALTER TABLE DEFECTFACT"},{"entry":"\u2003\u2003\u2003ADD FOREIGN KEY (ENDDATEID)"},{"entry":"\u2003\u2003\u2003\u2003REFERENCES TIME (TIMEID) ON DELETE RESTRICT;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["74","76","78","80","82","84","86","72","74","76","78","80","82","84","86","72"]},"With continuing reference to , the cube model builder  further includes a dimensional data loading module  that generates and loads dimensional data into the dimension tables , , , , , , . In a preferred embodiment, a dimensional data generator  generates text files that contain the dimensional data, and a dimensional data loader  transfers the dimensional data from the text files into the dimension tables , , , , , , . Advantageously, this enables the dimensional data generator  to employ C++ or another general purpose programming language that can write to text files for computing the dimensional data.","With exemplary reference to the TIME dimension table , a text file containing time dimensional data is created by the dimensional data generator . The text file contains the time dimensional data as semicolon-delimited text with each entry of the form XXX;YYYY;QU;MO;WEEK;DAY, where the first field XXX is the primary key value, the second field YYYY is the year, the third field QU is the quarter, the fourth field MO is the month, the fifth field WEEK is the week of the month, and the last field DAY is the day of the month. A portion of such a text file for the date range Jan. 1, 2002 through Jan. 8, 2002 inclusive is shown below:\n\n","With continuing reference to , the dimensional data contained in the various semicolon-delimited text files that are created manually or by the dimensional data generator  are loaded into the dimension tables , , , , , ,  by the dimensional data loader . In a suitable embodiment, the dimensional data loader  is embodied by the following exemplary DDL script:","SET CURRENT SCHEMA=DEFECT;",{"@attributes":{"id":"p-0063","num":"0000"},"ul":{"@attributes":{"id":"ul0057","list-style":"none"},"li":[{"@attributes":{"id":"ul0057-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0058","list-style":"none"},"li":"Load data into DEFECT tables"}},"IMPORT FROM COMPONENT.txt OF DEL MODIFIED BY COLDEL; INSERT INTO COMPONENT;","IMPORT FROM USER.txt OF DEL MODIFIED BY COLDEL; INSERT INTO USER;","IMPORT FROM SEVERITY.txt OF DEL MODIFIED BY COLDEL; INSERT INTO SEVERITY;","IMPORT FROM STATE.txt OF DEL MODIFIED BY COLDEL; INSERT INTO STATE;","IMPORT FROM RELEASE.txt OF DEL MODIFIED BY COLDEL; INSERT INTO RELEASE;","IMPORT FROM ANSWER.txt OF DEL MODIFIED BY COLDEL; INSERT INTO ANSWER;","IMPORT FROM TIME.txt OF DEL MODIFIED BY COLDEL; INSERT INTO TIME;","IMPORT FROM DEFECTFACT.txt OF DEL MODIFIED BY COLDEL; INSERT INTO DEFECTFACT;\n\nwhere, for example, TIME.txt is the semicolon-delimited text file containing the time dimensional data, ANSWER.txt is the text file containing the answer dimensional data, and so forth, and the object of each \u201cINSERT INTO\u201d clause identifies the dimension table to be loaded.\n"]}},"The DEFECTFACT.txt file referenced in the above DDL script is suitably created by the ETL tool  using a custom-written C++ or other program that extracts data from the defect tracking databases , , the project management tools , and optionally other sources, and transforms the data into semicolon-delimited data which is written to the text file DEFECTFACT.txt. The last IMPORT command of the above script then loads data from the DEFECTFACT.txt file into the defects facts table .","The described cube model builder  is exemplary only. Those skilled in the art can readily modify the described components or substitute other components for building specific metadata tables with specific dimensions and entity relationship schema. For example, rather than semicolon-delimited text files, other data formats can be used which can be imported into the interrelated tables  by DDL scripts or the like.","Moreover, although the dimensional data loading module  is shown in  as a component of the cube model builder , it can also optionally be accessed by the ETL tool  to update the dimension tables during refreshing of the defects data. In one preferred embodiment, when a cube model refresh operation is triggered by the data refresh trigger , in addition to the ETL  updating the facts table , the various dimension tables , , , , , ,  are also updated by the dimensional data loading module . However, since certain dimensional data is expected to remain static across refreshes, these data are optionally not updated. For example, the ANSWER.txt dimensional data typically does not change once it is set up, and so the ANSWER dimension table  is preferably not updated at each refresh. Moreover, the dimensional data loading module  can advantageously perform checks to determine whether dimensional data already stored in the dimension tables , , , , , ,  has changed, and thus limit updating to new, deleted, or modified dimensional content. Similarly, the ETL  can perform checks to limit updating of defects entries to new, deleted, or modified defect entries.","With returning reference to , the multidimensional defects metadata cube model  is accessed by the SQL engine  in accordance with SQL statements generated by the OLAP cube builder  to generate the one or more OLAP cubes ,  for analysis. In one arrangement, the OLAP cube builder  is embodied as a distinct software component that is accessed by project engineers to generate OLAP cubes for detailed analysis by end users. In another arrangement, the OLAP cube builder  is integrated into the add-in OLAP presentation tool  that is accessed by the end user, so that the end user directly generates the OLAP cubes ,  as part of the end user's analyses. Various combinations of integrated and discrete cube builder components are also contemplated.","To generate the OLAP cubes , , cube dimensions are selected. For dimensions with a plurality of possible hierarchies, a hierarchy for each selected dimension is also selected. For example, if the CREATEDATE dimension is selected as a dimension of an OLAP cube, one suitable hierarchy selection is: {year, month, day}. Within this hierarchy, a user can drill down to assess defect data by year, month, or day. Alternatively, another suitable hierarchy selection is: {year, week}, which allows data to be assessed by year or by week.","With continuing reference to  and with further reference to , OLAP cubes ,  are analyzed by the spreadsheet  using the add-in OLAP presentation tool .  shows an exemplary screenshot  showing such an analysis. A drop-down component selector icon  operable by a mouse or other pointing device is used to select a component of the software development for analysis. The component dimension table  identifies the components which can be selected. In the screenshot , a spreadsheet region  shows a data tabulation using a severity dimension  and a state dimension . A rightmost column  shows the defect counts for this two-dimensional matrix. Moreover, the OLAP presentation tool  provides a selection region  that includes other dimensions such as \u201cOwner\u201d, \u201cOriginator\u201d, \u201cCreateDate\u201d, and so forth, which are selectable by the end user via the mouse or other pointing device. Selecting, for example, \u201cCreateDate\u201d using the mouse will cause the spreadsheet region  to display a newly dimensioned matrix that includes as a dimension the defect entry creation date.","With continuing reference to  and with further reference to , an exemplary plot  generated by the spreadsheet program  in conjunction with the add-in OLAP presentation tool  is shown. A plot abscissa  is indexed by week, and an ordinate coordinate  is a total number of defects opened or closed. A first curve  corresponds to total number of opened defects, and is seen to be generally level during January and February, and generally decreasing during March, as a function of week. A second curve  corresponds to total number of closed defects, and is seen to be increasing as a function of week as identified defects are remedied.","When the defect data is extracted and put into the defect fact table  the date of the extraction is included in the EXTRACTEDID column. At any point in the future this snapshot of the defect data can be analyzed. As an example,  shows that there were  open defects on January 27th. For any snapshot a complete analysis of defects can be done by severity, component, owner, or other stored data. Furthermore, comparisons can be done across time.  compares the number of open and closed defects week by week. The data shown for each week is from a snapshot of the defect data taken that week. Snapshots can be taken at suitable time intervals to provide a desired temporal resolution for analyzing the data. In a contemplated approach, daily or weekly snapshots are extracted.","The spreadsheet screenshot  of  and the plot  of  are exemplary only. Those skilled in the art can readily generate otherwise-dimensioned matrices and plots using the described spreadsheet program  in conjunction with the add-in OLAP presentation tool . Moreover, those skilled in the art can readily substitute other general purpose analysis programs in place of the exemplary spreadsheet program .","The invention has been described with reference to the preferred embodiments. Obviously, modifications and alterations will occur to others upon reading and understanding the preceding detailed description. It is intended that the invention be construed as including all such modifications and alterations insofar as they come within the scope of the appended claims or the equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may take form in various components and arrangements of components, and in various process operations and arrangements of process operations. The drawings are only for the purposes of illustrating preferred embodiments and are not to be construed as limiting the invention.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 5","FIG. 1"]}]},"DETDESC":[{},{}]}
