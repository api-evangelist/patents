---
title: Managing reusable software assets
abstract: In general, techniques are described that facilitate the reuse of software assets within an enterprise. A software asset, as used herein, refers to a set of one or more related artifacts that have been created or harvested for the purpose of applying that asset repeatedly in subsequent development environments. A system, for example, is described that includes a repository to store artifacts, and an asset source to generate a software asset based on the artifacts. The system further includes an asset management system to receive the software asset from the asset source and store the software asset within an asset library. The system may further include a model having one or more elements, and an asset retrieval module to selectively retrieve a subset of the software assets from the asset library based on input from a user identifying one or more of the elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07149734&OS=07149734&RS=07149734
owner: Logic Library, Inc.
number: 07149734
owner_city: Rochester
owner_country: US
publication_date: 20020326
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation-in-part and claims priority from U.S. patent application entitled \u201cTargeted Asset Capture, Identification, and Management,\u201d filed Jul. 6, 2001, and having U.S. Ser. No. 09\/900,101, and U.S. patent application entitled \u201cGenerating Reusable Software Assets from Distributed Artifacts\u201d to Brent A. Carlson et. al., filed Mar. 18, 2002, and having U.S. Ser. No. 10\/100,749, the entire contents of each of which are incorporated herein by reference.","The invention relates to computer software, and more particularly, managing reusable software assets.","Over the past several years, software development efforts within enterprises have grown tremendously, resulting in large volumes of software code, documentation, models, and other related artifacts. A large enterprise, for example, may have a significant number of ongoing software development projects at any one time ranging in size from small projects involving a handful of programmers to massive endeavors involving hundreds of programmers.","In the past few years, there has been a tremendous amount of work in the area of software engineering and, in particular, the reuse of software across development projects. Reusing software can have significant advantages in, for example, reducing the resources, expense, and development time for a software project. Identifying artifacts for reuse from the various repositories of a given enterprise, however, can be a complex task. In addition to the problems involved in identifying a potentially massive number of artifacts, the artifacts are typically stored within repositories dispersed throughout the enterprise, and maintained by specialized development or operational environments.","In general, the invention is directed to techniques that facilitate the reuse of software assets within an enterprise. A software asset, as used herein, refers to a set of one or more related artifacts that have been created or harvested for the purpose of applying that asset repeatedly in subsequent development environments. Source code and binary code are examples of artifacts for software assets. Other examples of artifacts include related documentation, such as requirement specifications, design documents, operation manuals, and the like. Additional examples of artifacts include models, such as a process model, structural model, resource model, implementation model, and the like, that may include use cases, object models, collaboration diagrams, deployment models, and the like.","In one embodiment, a system comprises a repository to store artifacts, and an asset source to generate a software asset based on the artifacts. The system further comprises an asset management system to receive the software asset from the asset source and to store the software asset within an asset library.","In another embodiment, a system comprises a plurality of repositories to store artifacts, and asset templates that define schemas for reusable software assets in accordance with a data description language. The system further comprises a plurality of asset sources to monitor the repositories and generate software assets having metadata that reference the artifacts in accordance with schemas of the asset templates, and an asset management system to receive the software assets from the asset sources and store the software assets within an asset library.","In another embodiment, a system comprises a plurality of repositories to store artifacts, and a multi-level hierarchy of asset sources to generate software assets having metadata that reference the artifacts. The higher-level asset sources of the hierarchy receive software assets from low-level asset sources of the hierarchy and form aggregate software assets. The system further comprises an asset management system to receive the aggregate software assets from the hierarchy of asset sources and store the aggregate software assets within an asset library.","In another embodiment, a system comprises a model having one or more elements, and a database to store reusable software assets. The system further comprises an asset retrieval module to receive input from a user selecting an element of the model, and to selectively retrieve a subset of the software assets from the database based on the input.","In another embodiment, a method comprises retrieving artifacts from repositories, and generating software assets based on the artifacts in a form that conforms to a data description language. The method further comprises publishing the software assets for storage within an asset library.","In another embodiment, a method comprises receiving input from a user selecting one or more elements of a model, and retrieving software assets from an asset library based on the selected elements.","In another embodiment, a computer-readable medium comprises instructions to cause a processor to receive input from a user selecting one or more elements of a model, and retrieve software assets from an asset library based on the selected elements.","In another embodiment, a computer-readable medium comprises data structures that store software models having elements, and software assets having metadata that maps the software asset to the elements of the software models.","The techniques described herein may offer one or more advantages. For example, an enterprise may make use of distributed asset sources to provide generalized interfaces to diverse repositories, and to generate software assets in a normalized form that complies with a data description language. The software assets may be generated, for example, in accordance with one or more asset templates that define schemas for the assets. A user, such as a library administrator, may readily modify the asset templates to easily control the content and structure of the reusable software assets. This level of abstraction can be leveraged to automate or semi-automate the process of capturing artifacts from the repositories. In this manner, the asset management system provides users with a centralized asset library that offers a consistent, normalized view of the artifacts maintained over the many diverse repositories. In addition, an enterprise can make use of the system for bulk entry of assets, thereby simplifying and accelerating the process of capturing legacy software assets within the enterprise.","The asset management system can be configured to provide a full range of asset capture activities, ranging from fully-automated asset capture to semi-automated or manual approaches that require at least some manual intervention during the capture process. Accordingly, the asset management system can be configured to automatically capture assets from the repositories and produce normalized assets, or to automatically require the augmentation of the assets with artifacts not present within the repositories.","Among many other possible advantages, the asset management system provides for the association of software assets captured from diverse repositories with elements of software models, such as a process model, a structural model, a resource model, an implementation model, and the like. Accordingly, users can develop specifications for software projects, for example, and easily identify reusable software assets within the asset library that may be leveraged for the project.","The invention includes a targeted asset capture system that maps software resources to a domain model, and search and management tools for retrieving asset information and controlling asset acquisition. The domain model may include a process-centered organization and\/or a structural organization of model tasks, functions, and data types. Capture includes mapping to the model functions and data types, and preferably also includes capturing other information about the asset and about the quality of mapping. The domain model may be used to build a search specification for searching for available assets that meet some or all of a set of functional (and\/or nonfunctional) requirements. The search specification may also be published in part or in whole as a development specification.","In one aspect, the invention comprises an asset capture software utility. The utility includes a database for cataloguing software resource information, and means for mapping functions and data types to a predetermined domain model. The domain model may be a two-part model comprising a process model and a structural model, which may be linked to one another. There may be multiple process models for a single structural model. The utility may use synonyms to suggest mappings to the domain model. The mapping means may include means for adding user comments, such as comments on the character or quality of the mapping or on the usage or purpose of certain functions and data types.","In another aspect, the invention comprises a database of resource information, where the resource information includes functionality information mapped to a predetermined domain model. The database may include a search engine, for example an engine that can score resources according to how well they match functional or nonfunctional requirements. The search engine may include means for creating a persistent search specification that can be used by multiple users. Individual resources may be attached to the search specification for consideration. The search specification may be publishable, in whole or in part, as a requirements specification for software development. The search engine may notify one or more users of additions to the database that match a persistent search specification. Functionality information may be mapped over multiple domain models. The database may include means for viewing the domain model (e.g., graphically) in order to specify a search. The means may include means of navigating between process-side and structural-side of a domain model. The database may also include resource usage information, which may be linked to projects and may include information such as licensing data, resource acquisition tools, and usage reporting tools.","In a further aspect, the invention includes methods of classifying resources against a domain model, by mapping resource data types to model data types and resource functions to model functions, and storing the results in a searchable database. The domain model may include a process model and a structural model, which may be linked together. Multiple process models may also be linked to a single structural model. The method may include using synonyms to search model function and data type descriptions. Comments may be added to the database, for example on the quality of the mapping or on individual function or data type usage or purposes. The method may also include forwarding asset acquisition requests to an acquirer and storing acquisition information such as license keys. The method may also include generating usage reports or acquisition request reports.","In still another aspect, the invention includes methods of managing resources within an enterprise, by maintaining a searchable database of resource information including location information and functionality information, the functionality information being mapped to a domain model. The methods may include searching the database for resources that match functional or nonfunctional requirements, for example by creating a persistent search specification. A persistent search specification may be shared between users and\/or published as a requirements document. Assets may be attached to the persistent search specification, and the method may include publishing the portions of the specification that are not matched by the attached assets. One or more users may also be notified when resources are added to the database that match the persistent search specification. The method may further include forwarding requests for resource acquisition to an acquirer, and storing acquisition information such as license keys. The method may also include generating reports on acquisition requests and\/or resource usage.","In yet another aspect, the invention includes methods of mapping software resources to a domain reference model, including determining functions and data types to be mapped, sorting them into an order from most simple to most complex, and presenting them to a user in the determined order for mapping. As the user is presented with individual functions and data types, previously created mappings are used to refine further mapping suggestions. The determined order may include, for example, viewing all data types before viewing functions. The user may elect to map functions and data types in a different order.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 1","b":"2"},"Repositories A\u2013N (herein repositories ) represent any data source within an enterprise that stores information (herein artifacts) relevant to the management of reusable assets. Repository A may store, for example, reusable software components. These components are typically independently deployable code elements that often conform to a standardized component model, such as Enterprise JavaBeans (EJB) and the Component Object Model (COM). These components typically have well-defined interfaces that provide access to the encapsulated services or functions. An example of this type of repository includes a source code development environment that often stores the source code and the executable code within a repository to provide version control and to facilitate collaborative development.","As another example, repository B may store code elements that present functional interfaces to web services (web svcs) for remote access by client software via networking protocols, such as HTTP, HTTPS, FTP, SOAP, XML messaging, and the like. The enterprise may make use of these assets for quickly assembling web-based applications. One example of this type of software asset includes a server-side code element for providing web-based financial transactions.","As another example, repository C may store schemas that conform to a data description language, such as XML, that can be used to assemble metadata for data transfer within the enterprise. Repository D may store modeling information (models) that provides formal representations of various software components. The modeling information may include use cases, object models, collaboration diagrams, deployment models, and the like. The modeling information may conform to the Unified Modeling Language (UML), for example. Repository N may store documentation related to the software components, including requirements specifications, design documents, and the like.","In addition, the artifacts stored by repositories  are not limited to those artifacts generated during the development of the software components, but can encompass artifacts related to the deployment of the asset, such as particular instances of the software components. Accordingly, system  can be used to aggregate artifacts generated through the lifecycle of the asset, including artifacts generated during the development of the asset through the deployment of various instances of the asset, and artifacts generated through ongoing tracking of that asset within the operational environment. Examples of operational artifacts deployed within operational environments of the enterprise include component instances deployed within an application server.","Repositories  may also comprise \u201cactive\u201d repositories that manage data related to an asset in arbitrary form, and present \u201cviews\u201d of that assemble the data into a consumable form. For example, a defect tracking system may manage any number of defects that can be organized into views related to specific assets, e.g., views that show only those defects pertinent to particular versions of assets under development.","Generally, these artifacts are likely developed and maintained within repositories  using specialized development tools. Accordingly, repositories  may comprise a variety of storage facilities having very diverse interfaces. System  makes use of one or more asset sources A\u2013N (herein asset sources ) that provide a generalized, abstract interface to the underlying repositories . Asset sources  interact with repositories  to extract the artifacts, and assemble related artifacts to provide composite, normalized views of the reusable software assets. In particular, asset sources  generate asset descriptions that describe the related artifacts for each asset in a normalized form.","Asset sources  output the software assets in a normalized form that complies with a data description language. In other words, the software assets include or reference artifact data from repository A, as well as metadata that conforms to the data description language. The data description language describes the format, organization and structure of the asset. Accordingly, the normalized assets produced by asset sources  may take the form of electronic documents, files, scripts, data streams, software objects, and the like, that contain the metadata conforming to the data description language. Other example languages include Extensible Style Language (XSL), Extensible Linking Language (XLL), Standardized Multimedia Authoring Language (SMIL), as well as variations of the Standard Generalized Markup Language (SGML).","As described in detail below, users A can readily tailor each of asset sources  to the particular requirements of the corresponding one of repositories . As described in detail below, users  may use asset definition templates to generically describe the normalized assets produced by asset sources .","Asset management system  provides a centralized resource for collecting the asset descriptions from asset sources , and for publishing the asset descriptions to make the descriptions available to users A\u2013P (herein users ) within the enterprise. More specifically, asset management system  provides a comprehensive, searchable view of the software assets and related artifacts stored within the various repositories . By interacting with asset management system , users  can identify and make use of the assets.","System  may provide one or more advantageous features for capturing and managing reusable software assets. The use of asset sources  to provide a generalized interface to diverse repositories  can be leveraged to automate or semi-automate the process of capturing artifact information from repositories . Accordingly, an enterprise can make use of system  for bulk entry of assets, thereby simplifying and accelerating the process of capturing legacy software assets within the enterprise. In addition, asset management  and asset source  provide users  with a consistent, normalized view of the artifacts maintained over the many diverse repositories . Furthermore, asset management system  and asset sources  may interact so as to provide a current view of repositories , even though repositories  may change over time.","Furthermore, asset management system  and asset sources  can be configured to provide a full range of asset capture activities, ranging from fully-automated asset capture to semi-automated or manual approaches that requires at least some manual intervention of users  during the capture process. Accordingly, asset management system  and asset sources  automatically make available to users  assets that are automatically generated from repositories . In addition, asset management system  and asset sources  can be configured to allow users  to augment the assets with artifacts not present within repositories  during the capture process.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 2","FIG. 1"],"b":["6","6"]},"For example, asset management system  may include publishing module  and asset capture module  that interact with asset sources  to collect and aggregate artifacts from repositories  (), such as asset source A and repository A, as illustrated for exemplary purposes in . Generally, asset source A collects and normalizes assets from repository A. In addition, asset source A provides an abstract interface for interaction with publishing module  and asset capture module , thereby hiding the specific requirements of repository A from these modules.","In general, asset capture module  can augment the information extracted from repository A, and provides for resolution of conflicts between the extracted information and information required for publication of the asset by asset source A. Upon receiving notification  from asset source A indicating the availability of a new or updated asset, asset capture module  issues one or more messages  to asset source A to retrieve the asset. Messages  may comprise, for example, Simple Object Access Protocol (SOAP) messages, Remote Method Invocation (RMI) calls, or any other mechanism for communication between modules. In addition, asset capture module  may access asset library  to retrieve a current instance of the asset being produced by asset source A. Asset capture module  may present the current instance of the asset as well as the asset produced by asset A to user  for reconciliation.","Asset source A and asset capture module  make use of asset templates  to validate the asset information. In one embodiment, asset source A, or a schema generation module, generates a virtual schema in accordance by applying asset templates  to a base schema for an asset. Asset templates conform to a data description language, such as the extensible markup language (XML), and may include definition templates and constraint templates. The base schema conforms to a schema definition language, and defines a class of elements that conform to the data description language. In this manner, the base schema may remain static and need not be modified to support new classes of assets.","To define classes of permissible assets, a user, such as one of users  or library administrator , may create definition templates, constraint templates, or both. More specifically, the user may create one or more definition templates that define sub-classes for the elements defined by base schema. In this manner, the user can extend the element definitions of base schema without modifying base schema.","In addition, the user may create one or more constraint templates that define requirements for instances of the elements. Constraint templates may define requirements for instances of elements belonging to the classes defined by base schema, instances of elements belonging to the sub-classes defined by definition templates, or both. For example, constraint templates may define a required cardinality for the instances of the elements, a required minimum or maximum number of the instances, a range for a required number of the instances of the elements, a required attribute for the instances, a required parameter value for the instances of the elements, specific required instances of the elements, and the like.","Asset source A generates the schema information of virtual schema by first generating a data structure representing the classes of elements defined by base schema. Asset source A then applies definition templates to base schema to extend the schema information to include the sub-classes of elements defined within definition templates. Finally, Asset source A applies constraint templates to update the schema information to include the restrictions defined by constraint templates.","Definition templates and constraint templates conform to the data description language to which the elements of base schema comply, e.g., XML. Accordingly, the user can easily create and modify definition templates and constraint templates, and need only modify base schema in order to support new classes of assets.","Asset source A and asset capture module  may use asset templates  to drive the asset capture process. Based on the content and structure described by the asset schemas, which may be dynamically generated from asset templates , asset source A and asset capture module  identify any incomplete artifact data that needs to be added to the capture asset, either manually or in automated fashion. In this manner, asset source A can produce assets in a normalized form that complies with the schema information. The assets are normalized in the sense that the assets are described in a data description language, such as XML, and the elements and attributes are substantially similar.","The following pseudocode illustrates an exemplary base schema, definition template and constraint template that may be used for capturing information related to reusable software assets. In particular, the following exemplary base schema defines a parent class of elements named ASSET, and two child classes of elements named KEYWORD and RELATION.",{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<XSD:SCHEMA >"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<XSD:ELEMENT NAME=\u201cASSET\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<XSD:ELEMENT NAME=\u201cKEYWORD\u201d MINOCCURS=\u201c0\u201d MAXOCCURS=\u201cUNBOUNDED\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<XSD:ATTRIBUTE NAME=\u201cNAME\u201d TYPE=\u201cXSD:STRING\u201d USE=\u201cREQUIRED \u201d\/>"]},{"entry":[{},"<XSD:ATTRIBUTE NAME=\u201cVALUE\u201d TYPE=\u201cXSD:STRING\u201d USE=\u201cREQUIRED\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/XSD:ELEMENT>"]},{"entry":[{},"<XSD:ELEMENT NAME=\u201cRELATION\u201d MINOCCURS=\u201c0\u201d MAXOCCURS=\u201cUNBOUNDED\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<XSD:ATTRIBUTE NAME=\u201cROLE\u201d TYPE=\u201cXSD:STRING\u201d USE=\u201cREQUIRED\u201d\/>"]},{"entry":[{},"<XSD:ATTRIBUTE NAME=\u201cID\u201d TYPE=\u201cXSD:ID\u201d USE=\u201cREQUIRED\u201d\/>"]},{"entry":[{},"<XSD:ATTRIBUTE NAME=\u201cTYPE\u201d TYPE=\u201cXSD:STRING\u201d USE=\u201cREQUIRED\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/XSD:ELEMENT>"]},{"entry":[{},"<XSD:ATTRIBUTE NAME=\u201cNAME\u201d TYPE=\u201cXSD:STRING\u201d USE=\u201cREQUIRED\u201d\/>"]},{"entry":[{},"<XSD:ATTRIBUTE NAME=\u201cTEMPLATE\u201d TYPE=\u201cXSD:STRING\u201d USE=\u201cREQUIRED\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/XSD:ELEMENT>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/XSD:SCHEMA>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<TEMPLATE NAME=\u201cASSET-DEFINITION-TEMPLATE\u201d PARENT=\u201cASSET-SCHEMA.XSD\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<DEFINE-KEYWORD NAME=\u201cCATEGORY\u201d TYPE=\u201cSTRING\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ADD-VALUE VALUE=\u201cFINANCE\u201d\/>"]},{"entry":[{},"<ADD-VALUE VALUE=\u201cBANKING\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/DEFINE-KEYWORD>"]},{"entry":[{},"<DEFINE-KEYWORD NAME=\u201cPRICE\u201d TYPE=\u201cDECIMAL\u201d\/>"]},{"entry":[{},"<DEFINE-KEYWORD NAME=\u201cALIAS\u201d TYPE=\u201cSTRING\u201d\/>"]},{"entry":[{},"<DEFINE-RELATION ROLE=\u201cUSES\u201d TYPE=\u201cASSOCIATION\u201d\/>"]},{"entry":[{},"<DEFINE-RELATION ROLE=\u201cPREDECESSOR\u201d TYPE=\u201cPREVIOUS-VERSION\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<MAX-OCCURS VALUE=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/DEFINE-RELATION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/TEMPLATE>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The following exemplary constraint template provides requirements for the use of, and constraints for, the instances of the elements.",{"@attributes":{"id":"p-0085","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<TEMPLATE NAME=\u201cASSET-CONSTRAINT-TEMPLATE\u201d PARENT=\u201cASSET-DEFINITION-"},{"entry":"TEMPLATE.XML\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<USE-KEYWORD NAME=\u201cCATEGORY\u201d\/>"]},{"entry":[{},"<USE-KEYWORD NAME=\u201cPRICE\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<MAX-OCCURS VALUE=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/USE-KEYWORD>"]},{"entry":[{},"<USE-RELATION ROLE=\u201cPREDECESSOR\u201d\/>"]},{"entry":[{},"<USE-RELATION ROLE=\u201cUSES\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<MIN-OCCURS VALUE=\u201c1\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/USE-RELATION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/TEMPLATE>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"10"},"The following pseudocode illustrates an exemplary document that describes a reusable software asset, and which complies with the exemplary base schema, definition template, and constraint template listed above.",{"@attributes":{"id":"p-0087","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<ASSET NAME=\u201cBANKING-ASSET-2.0\u201d TEMPLATE=\u201cASSET-CONSTRAINT-TEMPLATE.XML\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<KEYWORD NAME=\u201cCATEGORY\u201d VALUE=\u201cBANKING\u201d\/>"]},{"entry":[{},"<KEYWORD NAME=\u201cPRICE\u201d VALUE=\u201c100.00\u201d\/>"]},{"entry":[{},"<RELATION ROLE=\u201cUSES\u201d ID=\u201cCURRENCY-ASSET-4.1\u201d TYPE=\u201cASSOCIATION\u201d\/>"]},{"entry":[{},"<RELATION ROLE=\u201cPREDECESSOR\u201d ID=\u201cBANKING-ASSET-1.0\u201d TYPE=\u201cPREVIOUS-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"VERSION\u201d\/>"},{"entry":"<\/ASSET>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The form of asset capture module  may vary depending on whether asset management system  is configured for manual, semi-automated, or automated asset capture. Asset capture module  may comprise, for example, editing tools by which a user  can manually supply information to complete or augment the information captured from repository A. In addition, the user may interact with the editing tools to resolve any conflicts between the extracted asset information and the required information. For semi-automated or automated environments, asset capture module  may invoke one or more scripts to automate the augmentation of information with the asset information extracted by asset source . Asset capture module  may be embedded within asset management system  as illustrated, or remotely connected to the asset management system .","In some fully automated environments, asset source A may bypass asset capture module  by withholding notification , and may issue notification  to publishing module  indicating that the asset is ready for publishing to asset library . In fully automated environments, asset source A validates the asset information using asset definition templates .","Upon receiving notification , publishing module  issues messages  to asset source A to retrieve the normalized asset from asset source A. Upon retrieving the normalized asset, publishing module  stores the asset within asset library .","Asset management system  may further include a modeling module  that allows users  to develop models  that represent functionality of interest to the enterprise. For example, user  may interact with modeling module  to develop models  that may include process models, structural models, resource models, implementation models, and the like, for a software development project. Modeling module  may comprise an integrated proprietary modeling tool, or any conventional modeling tool capable of producing modeling information, such as Rational Rose\u2122 from the Rational Software Corporation of Cupertino, Calif., or combinations of both such tools.","Asset retrieval module  allows users  to access and manage asset data within asset library . In particular, asset retrieval module  allows one or more users  to develop model-driven search specifications (search specs) . In other words, asset retrieval module  allows users  to select elements from one or more of models  to build search specifications . Scoring engine  scores each asset published by publishing module  against search specifications  to aid in identifying the most relevant assets within asset library . In this manner, users  can selectively retrieve assets from asset library  using modeling data from models  to guide the search process. Asset library  may be implemented as any data source, such as a relational database management system (RDBMS), an object-oriented database, flat files, and the like.","Library administration (admin) module  provides an interface by which library administrator  can manage asset library . For example, library administrator  may define rules that control the development of search specifications . In addition, library administrator  may edit asset templates  to define new asset types or update the schemas for existing asset types.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 3","b":["12","56","12","56","4","4","56","56","58","56","47"]},"More specifically, EV module  generates the assets in a form compliant with a data description language, and may include metadata as well as actual artifact data, or references to artifacts stored within either repository A or artifact storage . Asset source A manages artifact storage  to store artifact data retrieved from repository A as needed, and provides artifact interface  for external access. Accordingly, upon publication to asset library  (), the stored assets may comprise metadata, artifact data, references to artifact data within artifact storage  of one or more asset sources  or a central artifact storage, or any combination thereof.","Asset source A includes a read-only interface  for use by publishing module  () for extracting assets in a normalized form compliant with a data description language. In other words, publishing module  invokes read-only interface  to direct EV module  extract one or more asset from staging area . Upon receiving the assets from staging area  via read-only interface , publishing module  stores the assets within asset library .","In addition, asset source A may include a writable interface  that allows asset capture module  to augment the artifact information of the underlying repository A or artifact storage . Asset capture module  invokes read-only interface  to direct EV module  to extract one or more asset from staging area . Upon receiving the assets from staging area  via writable interface , asset capture module  augments the artifact data via writable-interface  using manual, semi-automated, or automated techniques, as described herein.","The following code illustrates exemplary embodiments for interfaces , , and , that may be provided by asset source . \n\n\n\n",{"@attributes":{"id":"p-0099","num":"0098"},"figref":["FIG. 4","FIG. 1","FIG. 2"],"b":["6","12","24","26","6","12","68","24","26","12","12","24","26"]},"When asset sources  detect new or updated artifacts within repositories  (), the asset sources  extract the information from repositories  (). Asset source A, for example, may extract new or updated artifact information stored within repository A. For exemplary purposes, the remainder of  is described in reference to asset source A and repository A.","After extracting the artifact information, asset source A, generates the asset based on the extracted artifact information in a form that complies with a data description language, such as XML, and stores the asset within staging area  (). Asset source A selects one or more asset templates  that provide an asset schema for controlling the generation. During this process, asset source A validates the generated asset to determine whether any additional information is needed to augment or reconcile the artifact information ().","If, based on the validation, additional information is need to augment or reconcile the artifact information, asset source A determines whether the asset is an editable asset, possibly based on configuration information or the asset schema provided by asset templates  (). If so, asset source A sets a status of the asset as \u201ceditable\u201d (), and issues notification  to asset capture module  to indicate that an editable asset is available within staging area  ().","In response, asset capture module  provides the required information, possibly in a manual, semi-automated, or fully-automated manner (). In addition, asset capture module  may assist users  in reconciling the instance of the asset stored within staging area  with a current version of the asset that may be stored within asset library . Upon completion of the editing process by asset capture module , asset source A changes the status of the asset within staging area  from \u201ceditable\u201d to \u201cpublishable\u201d (). Similarly, if the asset was non-editable, or if additional information was not needed (no branch of ), asset source A bypasses asset capture module  and marks the asset as \u201cpublishable\u201d ().","Next, asset source A issues notification  to publishing module  that an asset within staging area  is ready for publishing (). Finally, publishing module  retrieves the asset from asset source A (), and publishes the asset to asset library , possibly in a manual, semi-automated, or fully-automated manner, thereby making the asset available to users  via asset retrieval module . Asset source A sets the status of the asset within the staging area as \u201cpublished\u201d (), and repeats the process for subsequent new or updated asset artifacts.","The update and publication process described above need not be triggered by the detection of new or updated artifact information within a repository. User  may, for example, trigger the process by selecting an asset within asset library , and initiating an update process (as indicated by dashed line ). In particular, asset capture module  may reconcile the instance of the asset generated by asset module A with a current version of the asset stored within asset library . User  may also initiate the creation of a new asset through this process by selecting one or more template(s) and proceed edit the newly created asset according to the templates.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 5","b":["100","102","102","102","104","102","104","100","102"]},"For example, asset sources A\u2013C are coupled to repositories , and form a first layer of asset source hierarchy . More specifically, asset source A is configured to generate assets based on artifacts stored within repository A. Similarly, asset source B is configured to generate assets based on artifacts stored within repository B. Asset source C is configured to generate assets based on artifacts storied within repository C and repository D. In other words, asset source C monitors both repository C and repository D, and generates assets based on new or updated artifacts.","In the illustrated example hierarchy , asset sources A\u2013C comprise read-only asset sources, and publish assets to upper levels of asset source hierarchy  without invoking a capture tool. Accordingly, asset sources A\u2013C need not support writeable interfaces.","Asset source D receives and aggregates assets from asset sources A, B. In particular, asset source D may receive incomplete assets from asset sources A, B, and may combine the artifacts, or references thereto, of the received assets to form aggregate assets. Asset source D may invoke asset capture tool A to augment or reconcile the aggregate assets.","Similarly, asset source E receives and aggregates assets from asset sources C, D, and may invoke asset capture tool B to augment or reconcile the aggregate assets. Accordingly, the aggregate assets produced by asset source E should be complete, and in a state for publishing to asset library . Alternatively, asset sources D, E, for example, may treat assets from each of sources A, B, C as independent assets for publishing to asset library .",{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 6","FIG. 2"],"b":["26","6","8","110","12","4","112","110","8","47","26","8","48","47"]},"During the process, capture logic  maps the artifacts of the asset produced by asset source A to searchable elements of models . In particular, capture logic  makes use of rules engine  to map the metadata and artifact data of the generated assets to elements of models . During the asset generation process, capture logic  allows users  or a library administrator  () to dynamically define and modify mapping rules  to customize the mapping process. In one embodiment, rules engine  may comprise a Java-based rules engine, such as JRules\u2122 from ILOG Incorporated of Paris, France. Other embodiments may implement the mapping process through other techniques, e.g., hardcoded procedural logic.",{"@attributes":{"id":"p-0113","num":"0112"},"figref":"FIG. 7","b":["26","112","28","12","58","122","112","12","124","126","47","112","110","8","112"]},"Next, capture logic  maps the asset to one or more model elements of models  (). Capture logic  may, for example, invoke rules engine  to perform the mapping based on mapping rules . In addition, capture logic  may drive user interface  to map the assets to model elements based on input from users . In this manner, capture logic  builds associations between generated assets and the elements of models . Assets may be associated with, for example, interfaces, components, functions, case steps, and other elements that may be described within models .","Next, capture logic  updates the asset to include additional metadata based on the developed mapping, as well as any additional artifacts and other metadata that may have been provided by users  or automated scripts. (). Finally, capture logic  communicates the updated asset to asset source A for storage in staging area  ().",{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 8","b":["6","8","42","37","140","48","142","37","42","48","144"]},"Next, asset retrieval module  directs scoring engine  to search asset library  in accordance with the search specification  (). Based on the search specification, scoring engine  ranks the assets within asset library  using a scoring algorithm that determines, for example, how closely each asset satisfies the criteria of the search specification  ().","Asset retrieval module  displays to the user the ranked assets found within asset library  by scoring engine  (), and selects one or more of the assets in response to user input (). Based on user request, asset retrieval module  attaches the selected assets to the search specification  (). In this fashion, the user can selectively retain the assets for a software project. In one embodiment, scoring engine adaptively updates the search specification  based on the assets attached by the user, thereby dynamically refining scoring algorithm ().","Domain Reference Model","The asset capture and identification tools of the invention allow resources to be mapped to a domain reference model (DRM). The DRM may be built in commercially available standalone software, such as Rational Rose, available from Rational Software of Lexington, Mass., or may be directly integrated as a part of a standalone tool.","A DRM identifies both atomic and higher-level tasks or process elements. Preferably, these elements are organized in two different models. The first model is the structural model, which is similar in organization to a library of code components. Each reference component in the structural model contains one or more functions applicable to the domain. These functions may be organized in intermediate groupings called interfaces that associate functions according to expect usage patterns or other criteria. However, the components defined in the structural model are not actually implemented as executable code, but simply serve as a reference model of possible functions within the domain.","The second model is generally a business process model, which identifies higher-level areas within the domain and breaks them into processes and subprocesses. At the atomic level, the processes are broken down to \u201cuse cases,\u201d which detail the necessary steps of a particular task. These steps are associated with the components, interfaces, and functions in the structural model, and may be repeated in different combinations in the various use cases. The model need not be organized around a business structure, but may comprise any appropriate topical organization (e.g., a technical reference architecture for software component implementation and deployment).","The business-process side of a DRM for the insurance industry is shown in .  shows a top-level categorization of life insurance processes, organized into the categories Underwriting, Illustrations, Billing\/Collections, Party Changes, Policy Changes, Disbursements, Claims, Remediation, Taxation, and Accounting. As shown, Remediation has been selected, and subcategories of remediation processes are shown at right, including Customer Inquiry Handling, Insurance Commissioner Inquiry Handling, Scoring a Complaint, Determining a Settlement Type, and Processing Settlement. As shown in FIG. , if Processing Settlement is selected, additional subtopics No Settlement Amount, Cash Surrender without Surrender Charge, Return of Premiums Paid, Return of Premiums Paid Less Insurance Costs, and Policy Cancellation\/Restore Original Policies. As indicated by icon , Cash Surrender without Surrender Charge is a lowest-level process, which has an associated set of use cases. Cross-branching may also be allowed, wherein certain subprocesses appear in more than one process.","The set of use cases represent a series of steps making up an algorithm for executing the associated subprocess. For the Cash Surrender without Surrender Charge, a portion of the associated set of use cases is shown in graphical form in . The use case diagram may indicate responsible personnel (settlement clerk ) as well as individual use cases (the algorithm steps).",{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 12","b":["214","216"]},"Asset Capture Tool","The asset capture module  illustrated in , referred to below as the asset capture tool, is used to catalogue resources by constructing a metadata document for placement into an asset library (\u201cpublishing\u201d the asset). Individual data types and functions from the asset are mapped to the domain reference model (or to multiple models), and the mappings are saved as metadata for later searching to identify usable assets for new projects. In preferred embodiments of the invention, additional information may be included such as comments on the quality of the mapping, details of the asset characteristics such as language and licensing arrangements, or structural diagrams of the asset.","The asset capture process according to one embodiment of the invention is illustrated in . The menu  shows the steps of the workflow process. Log  creates a running record of asset acquisition. The log window preferably remains throughout the asset capture process, but has been omitted from subsequent figures in order to conserve space.","Initially, the user configures the asset capture tool, setting options for the acquisition process such as the level of detail to be saved in the log, the group of DRMs to be used in the mapping process, and the schema and target repository for storing information.","The user then proceeds to the definition stage. The asset to be added to the library is located, and general information about the asset is entered in the overview section.  shows the classification step. Using the data entry box , the user specifies values for descriptors relating to the asset as a whole. In the embodiment shown, required descriptors are marked with an asterisk; a value for these descriptors must be entered before the user can proceed with publication of the asset. The descriptors shown in  represent nonlimiting examples of the types of information that may be stored about the asset. A standard set of descriptors is preferably provided as part of the schema set in the configuration step, which may include any information relevant to a person deciding whether to use the asset, including descriptions of the asset itself and associated information such as licensing options. The user may also add one or more additional descriptors at this stage. These descriptors will not be added to the schema for other assets, but will be included in the metadata pertaining to the asset being added to the database.","Once the classification step has been completed, the user specifies the asset model and component diagram that will be used to catalogue the asset. If an asset model and\/or a component diagram do not yet exist, the asset capture tool will preferably give the user the option to create them, as shown in .","As part of the asset capture process, a component interface diagram will be created for the asset (unless one already exists). Preferably, the asset capture tool will be able to create or update the component diagram either automatically or manually, and will offer the user a choice of either procedure, as shown in . However, systems that provide only manual or only automatic means for building the component diagram also fall within the scope of the invention. The following description pertains primarily to automatic methods of generating the component diagram. However, any \u201cmanual\u201d method that produces a component interface diagram compatible with the asset capture tool (preferably conforming to the Unified Modeling Language standard) is considered to be within the scope of the invention.","To automatically generate the component interface diagram, the asset capture tool first identifies functions within the asset, and preferably allows the user to specify which functions are external, as shown in . The asset shown includes a collection of functions used for management of different currencies (for example, functions for determining exchange rates). Checkboxes  are used to identify functions that are intended to be accessible to a developer using the resource, e.g., functions and data types that are part of the API for the asset. Preferably, the user can view asset documentation for the functions, for example via a Show Details button .","As shown in , the asset capture tool next identifies any custom data types used by the external functions of the asset, and allows the user to select any additional data types that are part of the API for the asset. (Standard \u201cprimitive\u201d data types such as integers and Boolean variables are preferably not presented at this stage, although they are taken into account in later steps of the asset capture process). Again, details on the data types may be viewed, and the structural model may be adjusted, via buttons . For example, a collection of primitive data types making up a compound type may be viewed (e.g., a CurrencyValue type that includes both a decimal amount and a string identifying the currency).","The data on external functions and data types is used to generate an interface diagram, typically using an external tool such as Rational Rose. A generated interface diagram for the currency management asset is shown in . The diagram shows the selected external interfaces  presented by the CurrencyManagement component. Additional information about the functions may be accessed through the illustrated graphical user interface (GUI). After reviewing the diagram, the user is preferably given the option to \u201cpublish\u201d the diagram. In one embodiment of the invention, the diagram is saved as an HTML document, which is added to the metadata for the asset. The HTML document is available to a later user who finds the asset in the database, so that he can better evaluate its suitability for the task at hand, even if he does not have Rational Rose or a similar external tool installed on his machine.","In the final step of the asset definition phase, other descriptive elements of the asset (referred to herein as \u201cartifacts\u201d of the asset) such as its architectural assumptions, examples, warranty, and reviews may be specified, as shown in . Preferably these artifacts may be specified by value (where a copy of the artifact is made for later publication as part of the asset into the asset library), by reference (where a URL or other form of file reference is documented as part of the asset), or by description (where a text field documents the (typically physical) location of the artifact). Artifacts may include both functional and nonfunctional characteristics of the asset. Nonfunctional characteristics are distinct from the functional characteristics that are mapped against the DRM. In preferred embodiments, both nonfunctional and functional characteristics can be searched.","After the asset definition phase has been completed, synonyms for the asset may be defined, as shown in . These synonyms are designed to improve the quality of searches by associating words used in the asset functions and descriptions with likely synonymous search words. For example, if an asset routinely uses \u201cschedule\u201d internally to refer to a collection of insurance rates, it may be desirable to associate \u201cschedule\u201d with \u201crates\u201d to improve the probability of appropriate functions being displayed during a search for functions handling insurance rates. As will be described in more detail in connection with searches, one system according to the invention uses substring substitution of synonyms to improve search quality. More complicated semantic analysis in view of defined synonyms may also be used and falls within the scope of the invention.","After definition of asset-specific synonyms, the user maps the asset to one or more DRMs contained within the group of models selected during the configuration step. The reference model is selected, as shown in . In the embodiment shown, only one reference model may be selected, but multiple portions of that model may be run simultaneously. In other embodiments, multiple DRMs may be selected to run either simultaneously or sequentially. In , the Currency Management model includes both management functions and exchange functions. If the user knows that only management functions are performed by the asset, he may select only that portion of the model for mapping. If both management and exchange functions are performed, or if the user is not certain of the full scope of functions performed, all parts of the model may be used.","The user may view synonyms that have been defined for the DRM or on an enterprise-wide basis, as shown in . In the embodiment shown, the user cannot add synonyms to the DRM or to the library as a whole, but has the option to enable or disable certain synonyms. This feature is particularly useful for words that may have multiple meanings. For example, \u201cmoney\u201d is enabled as a synonym for \u201ccurrency.\u201d However, if the user knows that the asset uses the term \u201cschedule\u201d to mean a collection of insurance rates, he may wish to disable the synonym of \u201ctime\u201d for \u201cschedule.\u201d","Once the reference model and synonyms have been selected, the asset can be mapped against the DRM. In preferred embodiments, the mapping begins with data types and proceeds through functions, working from the least to the most complex. By using information from earlier mappings, the quality of automatic suggestions for mapping can be improved.",{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 23","b":["254","256","258"]},{"@attributes":{"id":"p-0140","num":"0139"},"figref":["FIG. 24","FIG. 25"],"b":"260"},"The mapping process for functions proceeds in the same fashion as the mapping process for custom datatypes. The user has available the same set of descriptors for describing the quality of the mapping between available external functions that were available for mapping datatypes. By mapping datatypes first, the asset capture tool can use datatype equivalencies to select likely candidates for functional equivalencies. For example, a function called Convert( ) that takes CurrencyValue as an argument may be a more likely match in a currency exchange package than one that takes GregorianDate. Functions, like datatypes, may be mapped in a many-to-many relation, and the additional-data, partial-data, and comments fields can be used to annotate the quality and characteristics of the mapping(s).","Once all functions and datatypes have been mapped to the DRM to create the component diagram, the accumulated metadata for the asset can be uploaded to the database for searching. Any of a number of standard file formats may be used for database entries.","Model Based Search Specification","Once assets have been classified in a library database, a search engine should be provided to allow them to be accessed. While standard search engines may be used on the database described above, it is preferable to use a specialized engine designed to take maximum advantage of the unique data stored in the library.","According to one embodiment of the invention, the search engine is designed to allow construction of a search specification using either the process-based side or the structural side of a domain reference model as described above.  and \u2013 show the process of constructing a search specification, performing a search, and interpreting the results.","A user unfamiliar with software development can nevertheless identify assets useful for creating a tool to solve a particular need, by navigating the business process-based side of the domain reference model shown in . Proceeding through  as described above, the user selects functions from within the DRM until he reaches a use case diagram. The use cases making up the diagram can be viewed as shown in . For any use case within the diagram, the user may view associated functions from the structural portion of the DRM, as shown in . The user then selects the desired functions from the list for addition to the search specification. Preferably, the user may be given the option to automatically select all of the functions associated with the use case, or selected blocks of functions associated with individual use case steps. The graphical user interface and drill-down through the process side of the DRM makes it easy for the user to identify all of the needed functionality, even if he is unfamiliar with the conventional process of developing technical specifications. In a preferred embodiment of the invention, the library database also provides a DRM search facility that allows users to selectively enter a DRM at any point based on query results (e.g., a keyword search for DRM elements associated with the term \u201ccurrency\u201d and preferably its synonyms), thus allowing the user to rapidly find model elements of interest.","A search specification constructed in this manner is shown in . Two functions  have been identified from the candidates shown in : GetNRAStatus from the PolicyRecordManagement functions, and addExchangeRate from the CurrencyManagement functions. In addition, the user can specify general parameters  and function-specific parameters  for how close a match is required.","Keyword searches may also be available through the search engine, as shown in . Particularly in these searches, the search engine preferably makes use of the asset-specific, DRM-specific and enterprise-wide synonyms that were defined during initial library configuration and during asset capture. Thus, when a user searches for \u201ccurrency,\u201d the system returns both assets with functions and datatypes involving \u201ccurrency\u201d and functions and datatypes involving \u201cmoney.\u201d","In either type of search, the user preferably may specify nonfunctional requirements such as operating system, license type, or language. These requirements may preferably be given weights in the same manner that individual functions can be weighted.","A result for the search specification shown in  is shown in . Three potentially useful assets have been identified; they are ranked according to how closely they fit the search criteria. The user may select some or all of the assets returned for further investigation via checkboxes . The selected assets are then attached to the search specification, as shown in . The search engine preferably learns by observing which assets are attached, in order to refine its scoring algorithm for later searches; those resources that were attached to the search specification will be preferentially returned in subsequent similar searches.","Before or after the assets have been attached to the search specification, the user can investigate them in more detail, as shown in . The Asset Details window allows the user to view any of the descriptors that were entered during the asset capture process, such as reviews of the asset and support issues. The user can use the detailed data to select the assets he wishes to acquire.","One feature of the invention is that a user who is familiar with business processes, but not with construction of formal technical specifications, can build a search specification and attach useful assets to it. The search specification can be used by others who are less familiar with the business process, but who are familiar with software development, to identify assets that can be readily used together. By allowing such collaboration, the invention provides more effective leveraging of software assets within an enterprise.","In the event that a search specification results in no potentially useful assets being found, the user preferably may specify that the specification be published as an initial requirements document for new asset development. If a partial match is found, the user preferably may similarly publish the unmatched portion of the specification as a requirements document. The user may also choose to mark a search specification such that the user will be informed in the event that any asset subsequently published into the library sufficiently conforms to the specification.","Asset Management","In preferred embodiments of the invention, the system also facilitates the software asset acquisition process. An acquisition workflow is shown in . Once an appropriate asset or assets have been identified using the search specification, the user may submit an acquisition request . Acquisition requests are associated with individual development projects.","The system first determines whether the asset is associated with the project . If it is, the system checks to see if the asset is registered . If the asset is both associated with the project and registered, then it is already available for use in development and its status is displayed to the user . If the asset is associated with the project and not registered, it may be that it is already under consideration by the Project Manager, or that it has previously been rejected. If the system determines that the asset has not been rejected , it displays the asset's \u201cpending\u201d status to the user . If the asset has previously been rejected, then the user is required either to give a reason for requesting reconsideration of the rejection  or to cancel the request.","If the asset is not already associated with the project, or if the user is requesting reconsideration of a rejection, the asset status is set to \u201cpending project manager approval,\u201d  and the Project Manager is notified  of the new acquisition request.","A summary of asset acquisition requests according to one embodiment of the invention is shown in . Depending on the needs of the individual system, this view may be available only to Project Managers and other designated users, to all users for a particular project, or to all users in the system.","Each pending request is preferably listed by requester , project , and name . Additional information may also be included such as version numbers , descriptions , and notes . By selecting links , the manager may view the details of any request.",{"@attributes":{"id":"p-0158","num":"0157"},"figref":["FIG. 33","FIG. 34"]},"In some embodiments of the invention, the acquisition screen may allow the user to send a purchase order, a request for internally developed assets, or otherwise formally acquire the asset. Alternatively, the acquisition screen may simply memorialize the acquisition of the resource by other channels, as in the screen shown in . In that screen, the acquirer may record any software license keys, describe the location of hardware keys, and make any necessary notes on the conditions of the software purchase. If the license is for a certain number of instantiations or workstations, there may also be provided a mechanism for assigning instantiations or workstations to projects to avoid violating the terms of the license. For internally developed or acquired assets, there may be departmental cross-charges for use of the asset; these may also be tracked in preferred embodiments of the invention.","The system preferably also includes means for tracking the usage of individual assets by different projects. In preferred embodiments, this information may either be viewed directly by the library in the form of prebuilt reports or exported for further processing. As an example of a prebuilt report,  shows a summary of published and unpublished assets created by a particular user or department. For published assets, links  allow the publisher or another user to review the projects currently registered to use the asset. For users with the appropriate permissions, departmental cross-charges and the like may be modified.","Various embodiments of the invention have been described. These and other embodiments are within the scope of the following claims."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 35"}]},"DETDESC":[{},{}]}
