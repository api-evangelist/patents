---
title: System and methodology that facilitates client and server interaction in a distributed industrial automation environment
abstract: The present invention relates to a system and methodology providing a virtual “namespace” architecture between client and server components in an industrial automation environment, wherein the namespace can be a structured store of logical names, instances and definitions, together with access and modification components. An Active Directory Service Interface (ADSI) family can be employed, for example, to navigate and access the namespace structure and contents. The present invention employs the concept of a “service” to encapsulate server-side behavior accessed through the namespace. Thus, logical names can be utilized to decouple client components from the physical location and implementation of server components. Some services, known as “basic services”, may ignore the logical container structure exposed by an area model in a namespace. By contrast, services which utilize an area context and a set of named service items to interact with clients can be referred to as “namespace extensions.” Further, services known as “context services” may use the area model to scope and control accesses, yet not employ a service item namespace organized by the area model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07308473&OS=07308473&RS=07308473
owner: Rockwell Automation Technologies, Inc.
number: 07308473
owner_city: Mayfield Heights
owner_country: US
publication_date: 20020729
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to industrial control systems, and more particularly to a system and methodology to facilitate management and control of distributed applications in an industrial automation environment.","Industrial control systems have enabled modern factories to become partially or completely automated in many circumstances. These systems generally include a plurality of Input and Output (I\/O) modules that interface at a device level to switches, contactors, relays and solenoids along with analog control to provide more complex functions such as Proportional, Integral and Derivative (PID) control. Communications have also been integrated within the systems, whereby many industrial controllers can communicate via network technologies such as Ethernet, Control Net, Device Net or other network protocols and media and also communicate to higher level computing systems. Generally, industrial controllers utilize the aforementioned technologies along with other technology to control, cooperate and communicate within and across multiple and diverse applications.","At the core of the industrial control system is a logic processor such as a Programmable Logic Controller (PLC). Programmable Logic Controllers are programmed by systems designers to operate manufacturing processes via user-designed logic programs or user programs. The user programs are stored in memory and generally executed by the PLC in a sequential manner although instruction jumping, looping and interrupt routines, for example, are also common. Associated with the user program are a plurality of memory elements or variables that provide dynamics to PLC operations and programs. These variables can be user-defined and can be defined as bits, bytes, words, integers, floating point numbers, timers, counters and\/or other data types to name but a few examples.","Industrial controllers and associated control systems have increasingly become more sophisticated and complicated as control applications have been distributed across the plant floor and in many cases across geographical or physical boundaries. As an example, multiple controllers and\/or other devices may communicate and cooperate to control one or more aspects of an overall manufacturing process via a network, whereas other devices may be remotely located, yet still contribute to the same process. In other words, control applications have become less centrally located on a singular control system having associated responsibilities for an entire operation. Thus, distribution of the overall control function and\/or process frequently occurs across many control components, systems or devices.","Due to the distributed nature of modern control systems, it has become more difficult to achieve reliable communications, control and operational harmony amongst diverse components that are often only bound via common network connections. Thus, many network components do not operate according to well-coordinated software interactivity even though the network components may communicate via common network protocols such as Ethernet. For example, custom interfaces and\/or communications configurations may have to be developed for each control component residing on the network in order for the control components to act in a coordinated manner. As the number of components increase, costly start-up time and development efforts are expended in order to cause the control components to communicate and ultimately cooperate to achieve an overall manufacturing process or outcome.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is intended to neither identify key or critical elements of the invention nor delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","The present invention relates to a system and methodology to facilitate optimized communications and interactions between control components operating in a distributed industrial controller environment. A service architecture is provided that includes a set of naming and\/or binding conventions along with supporting mechanisms which connect client, server, peer and\/or other control components. The service architecture provides a framework of conventions and supporting components that facilitate exposure of services, as supported by server components, to one or more client applications. It is noted that although the server components can be distributed from other respective components, the server components generally do not have to be resident on remote computers in order for client components employing the service architecture to connect or bind to the server components.","According to one aspect of the present invention, a physical topology of computers and automation devices cooperate with a logical access hierarchy and a family of virtualized automation service behaviors. Thus, various aspects of an automation solution are provided, wherein physical, logical and behavioral dimensions are considered and addressed. In this manner, the present invention maps these aspects into a consistent whole thereby mitigating the number of custom \u201cuser\u201d mappings or interfaces. The mappings provided by the service architecture include several aspects. One such aspect is that of a \u201cnamespace\u201d, which can be modeled as a structured hierarchy of logical names and definitions, including access and modification mechanisms employed to access such information. Another aspect is that of a virtualized \u201cservice\u201d, that is, a behavior supported by one or more server processes and accessed via the namespace. Yet another aspect is that of a directory or \u201cbind context\u201d, which identifies a point of access to a respective service. As will be described in more detail below, binding and\/or naming conventions can be achieved via explicit, absolute designations or can be achieved via relative names or relative binding contexts that operate as an indirect or implied addressing or mapping convention between respective contexts, components, and services.","The following description and the annexed drawings set forth in detail certain illustrative aspects of the invention. These aspects are indicative, however, of but a few of the various ways in which the principles of the invention may be employed and the present invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention relates to a system and methodology providing a virtual \u201cnamespace\u201d architecture between client and server components in an industrial automation environment, wherein the namespace can be a structured store of logical names, instances, and definitions, together with access and modification components. An interface family known as Active Directory Service Interface (ADSI) can be employed, for example, to navigate and access the namespace structure and contents. The present invention employs the concept of a \u201cservice\u201d to encapsulate server-side behavior accessed through the namespace. Thus, logical names can be utilized to decouple client components from the physical location and implementation of server components. Clients use logical service and item names to interact with servers, as opposed to physical location information and server-specific connection data.","Some services, known as \u201cbasic services\u201d, may ignore the logical container structure exposed by an area model in a namespace. By contrast, services which utilize an area context and a set of named service items to interact with clients can be referred to as \u201cnamespace extensions.\u201d Further, services known as \u201ccontext services\u201d may use an area model to scope and control accesses, yet not employ a service item namespace organized by the area model.","Referring initially to , a schematic block diagram illustrates a service architecture  in accordance with an aspect of the present invention. The service architecture  provides an industrial automation model and environment, wherein remote\/disparate client and server automation components can interact and cooperate to control an industrial process. It is noted that nomenclature Rrepresents service architecture elements, whereas Srepresents components specific to a service. It is also noted that described component interactions of adjoining components can reside in similar or shared processes. In addition, change notification and redundancy management components can be provided. These components are not shown.","The service architecture includes a directory  (R) that provides a persistent store of \u201cglobally interesting\u201d or relevant information for one or more control components. The directory  includes \u201cTier\u201d Directory objects which are described below and can include Applications, Areas, and Directory Entries, for example. The scope of the directory  may be local to a machine or global to a network, for example. A directory client (R)  (e.g., a component exposing ADSI interfaces) interacts with the directory  to provide support for access to directory content. The directory client  can include service management interfaces for service binding via directory entries and host basic, context and namespace extension service components.","A namespace server  (R) is provided that aggregates service item names in areas to provide tier two or higher (tiers described below in ) service item namespaces. The namespace server  generally expects server-specific components implementing a name provider interface and resolves service item names into server connection data. A name provider  (S) extracts service item names from supporting server processes and exposes internal structure of tier service item names. A namespace extension  (S) exposes service item names via ADSI or other interfaces and can act as a bridge between tier namespace components.","The service architecture  also includes a service client proxy (S)  that provides a client-side Application Programming Interface (API). In addition, the client proxy  can manage multiple servers on behalf of a client application . A service configuration  (S) component facilitates creating and editing directory areas and entries to expose services and to define servers. A server process  (S) supports service behavior and exposes the behavior to one or more clients  via service-specific interfaces and transport mechanisms accessed via the service architecture . Multiple server processes can participate, each contributing service item names to the aggregated service item namespace. Thus, the service architecture  incorporates multiple perspectives in a client and server environment including logical, physical, and behavioral aspects. These aspects can be permutations of access, computer and service dimensions of the namespace, for example.","Referring now to , a multi-tiered namespace architecture is provided for constructing a namespace in accordance with an aspect of the present invention. A tree structure  organizes access to multiple individual server processes  (e.g., five) in multiple (e.g., four) area containers . An upper tier , can be implemented as a directory system element, and can be structured as a composite tree of containers and directory entries. The containers model includes logical groupings or \u201careas\u201d, wherein one possible analogy is to physical locations within an installation. The composite tree of logical containers or \u201carea model\u201d can represent other groupings natural to an automation solution.","A lower tier of the namespace can be formed by aggregating service item names, owned and defined by server software components, within the context of an area . This can be achieved via service management behaviors in a directory system element and collaborating service item name management behavior carried out by the namespace server component, described above. Service item names generally are not stored in the directory. Rather, directory entries carry information referencing the server process which supports a given service and hence a set of service names. Service name syntax and definition typically remains the responsibility of the server processes participating in the service. A knowledgeable process (also known as a namespace server) can take this information, contact the referenced server processes, extract service item names from those processes, and aggregate them within the context of an area . This forms a service item namespace, organized by the area access hierarchy and accessible to clients via ADSI or other interface component, and possibly accessible via some service-specific interface family.","Service item names are generally required to be unique within an area . Thus, name collisions within an area are resolved by pre-pending the service item name with a logical server process name. Beyond names, an entity referenced by a service item name can carry additional properties, properties accessible via ADSI or other interface and possibly a service-specific mechanism. A similar string can appear in different service namespaces as a service item name within a given area . This is not prohibited by namespace composition mechanisms, but this usage may be somewhat more difficult in practice.","Referring now to , an exemplary namespace is illustrated in accordance with an aspect of the present invention. A relatively straight-forward situation involves a generic piece of manufacturing equipment, for example. An application referred to as a \u201cBagger\u201d  including an industrial controller  is placed in a physical situation of industrial control components and associated networks, as illustrated in . It is to be appreciated that the configuration depicted in  is exemplary in nature and a plurality of other configurations are possible in accordance with the present invention.","The machine is located in a physical area called \u201cBay One\u201d , together with a machine called a \u201cCrimper\u201d . Bay One  can be part of a larger physical space named \u201cEast Wing\u201d , thus, several other bays could also exist. One or more automation devices can operate the Bagger , including a Data Highway Plus (DH+) network or other type network  which connects the devices, and a rack mount computer  located in Bay One. The DH+ network  is known by plant personnel as the \u201cDHPlus East Wing Network\u201d, the full extent of this factory automation network is not shown in . The rack mount computer  is also a node on an Ethernet network  in which the system administrator has chosen to name network machines using place names, thus a large server machine  is called \u201cChicago\u201d, while the smaller, more focused rack mount computer  is called \u201cEvanston\u201d.","A process on Evanston  is referred to as \u201cMfgComms\u201d. This process reads data values from the industrial controller  operating the Bagger machine  over the DH+ network . MfgComms can be a data access server, exposing respective data items via OLE for Process Control Data Access (OPC-DA) interfaces, for example. A string \u201c$DataItems\u201d identifies the data access service that is implemented in a namespace extension, which indicates its service item names appear in the area access hierarchy.","Assuming a system management tool that can browse service namespaces (e.g., a service and ADSI aware browser component), an illustration as in  depicts a data access service in this example. Thus, with a single server process supporting the data access service, service item names  generally are required to be unique within server boundaries, and the service  is exposed in the \u201cBagger\u201d area of the access hierarchy. Given ADSI or other types of interfaces, the directory and namespace server components cooperate to present a navigable namespace of data access service item names as illustrated in , wherein an access hierarchy of areas act as containers. This hierarchy maps to the physical plant floor layout illustrated in .","This information can be exposed to a user in a data access enabled product. The canonical example can be a component which currently acts as an OLE for Process Control (OPC) client, sinking data values from OPC servers. Clients of this sort can become data access client applications by utilizing ADSI and service management interfaces to bind to the data items service in the Bagger area, establishing a \u201cbind context\u201d and obtaining an IOPCServer interface, and utilize data access service item names, either absolute or relative to the bind context, to establish OPC advise connections.","The data access service namespace of  also illustrates a namespace extension service. The Service Architecture hosts some data access components to realize the data access service item namespace shown , and to enable data access clients to obtain and employ a service-specific client-side interface, namely IOPCServer, for example. Subsequent sections below illustrate the Service Architecture and service-specific components. What has been described thus far are data item names supported by the MfgComms process which have been exposed in an access hierarchy of area containers. If additional servers existed in this situation, the respective servers names can also be aggregated into the data access service item namespace.","In order to issue messaging commands across a factory network like DH+ (or other network), the MfgComms process employs network addresses and other, possibly device-specific formatting information to form messages for those devices. One possible way to operate with this is to collect the information into a structure with a human-legible name, and use this name to refer to the physical device. Thus, from the physical layout diagram in , the industrial controller  is called \u201cBaggerSLC\u201d and an HMI device  is known as \u201cBaggerPV.\u201d From the physical diagram, the \u201cDHPlus East Wing Network\u201d  is a name for the factory network connecting substantially all the devices in substantially all the bays in the east wing of the plant. The logical names used in the MfgComms process can be similar to the names that identify the physical automation devices.","Since the Service Architecture is extensible, MfgComms can expose a factory network navigation or \u201cfactory topology\u201d service, in which the factory networks and connected devices appear as service items. Further, this topology service can employ a network.device form of name structure to identify devices. Again, as in the data access case above, the Service Architecture hosts some service-specific components to support the \u201cFactoryDevices\u201d service as a namespace extension.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5","b":["400","410","420"]},"The notion of a container to scope service items names can be useful. For example, since ADSI reflects container\/child relationships, and one aspect of the Service Architecture is to present, via ADSI, a seamless, navigable hierarchy from names owned by disparate sources, it can be expected to, expose the \u201cDHPlus East Wing Network\u201d as a container in a $FactoryDevices service  which is illustrated in .","In addition, similar groupings can be exposed in a $DataItems service , as shown in . Assuming that MfgComms process employed a DeviceName.DalaltemName convention to identify individual data items, \u201cBaggerSLC\u201d becomes a container beneath the $DataItems service in the \u201cBagger\u201d area . The use of a \u201cnamed device\u201d to scope data access service item names can be a decision on the part of the MfgComms server process and is generally not required by the Service Architecture.","The effect of service name hierarchy is illustrated in  and . These figures illustrate the Factory Topology and Data Access service namespaces, respectively. Both figures show server process name hierarchy within a service namespace, and locate that service within a similar area or access hierarchy. The area hierarchy is carried by the directory system element, while the service item names observed in the respective service namespace are defined and carried by the server process supporting that service behavior. Respective services can be namespace extensions exposing additional \u201cservice-specific\u201d hierarchy. This service-specific hierarchy is at the discretion of the supporting server process, which is the example process MfgComms and generally is not a requirement of the Service Architecture.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 8","FIG. 9"],"b":["700","710","800","810"]},"The Bagger process example described above describes the notion of a service item namespace, illustrating some of the concepts. For example, service item namespaces were constructed for namespace extension services such as \u201c$Data Access\u201d and \u201c$Factory Devices\u201d, and some views were illustrative of how the service items supported by the MfgComms process can be defined in the area hierarchy. It is to be appreciated that a plurality of other services and hierarchies can be configured, however. One method for exposing a service in an access area places a directory entry in the area, with a directory entry whose properties identify the exposed service and reference a specific server process on a specific machine. The namespace component can then employ these \u201cServer\u201d directory entries to contact the server process and extract service item names.","While the above process can be employed, it can have some constraints. In particular, when a server process supports a service in several areas, identical directory entries generally would be needed in respective area containers, entries which would need to be kept congruent as the user modifies individual directory entry properties. Rather than a \u201cfind all the Server directory entries like this one and update them\u201d behavior, the respective properties can be removed from the Area Model into a distinct directory hierarchy of their own, organized by service, computer and server process. Area containers in the access hierarchy can carry a directory entry which points into the service hierarchy.","This service hierarchy can be a distinct directory in its own right and is illustrated by . Under a \u201cServices\u201d container , services currently exposed are illustrated in the area hierarchy. In this example, the server process name and its host computer name are combined into a container name, using a computer::process convention. This container parents two forms of directory entries. The first is a \u201cConfiguration\u201d directory entry , which is the connection and server reference information to form the service item namespaces discussed above. The second form is a reference to the access area in which the server process supports the service behavior. The example illustrates two areas \u02dc\\\\East Wing\\Bay One\\Bagger  and \\\\East Wing\\Bay One\\Bagger \u2014in which the MfgComms process supports the $DataItems service. Given an area access hierarchy and a service hierarchy, a \u201cservers\u201d hierarchy, can be constructed which is ordered along computer\/processes\/services dimensions. A version of this appears in . A servers hierarchy  is depicted, wherein changes made in one leg of an Access\/Services\/Servers tripod can be reflected in other legs.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 12","b":"1100"},"Proceeding to , directory client instances are created that support interfaces for directory access. At , logical area containers, physical server definitions, and other directory entries are created. In one aspect at , and within an area A, for example, a directory entry specific to a service X that references a server S is created, wherein A, X, and S are integers respectively. At , the process extracts the service X item names from server S, aggregates the names into area A and exposes the names via a directory interface. At , the process binds a client service proxy component to service X in area A, thus establishing a connection to server S. At , service item names are employed to interact with server S to obtain service X functionality.","What has been described above are preferred aspects of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art will recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
