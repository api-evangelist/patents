---
title: Method and apparatus for efficient management of XML documents
abstract: A storage manager represents XML-compliant documents as a collection of objects in memory, allowing the storage manager to manipulate the document, or parts of the document, with a consistent interface and to provide for features that are not available in conventional XML documents, such as element attributes with types other than text and documents that contain binary rather than text information. The XML-compliant document may be associated with a schema document which defines the arrangement of the document elements and attributes. The schema data associated with a document can contain a mapping between document elements and program code to be associated with each element. The storage manager further has methods for retrieving the code from the element tag. The retrieved code can then be invoked using attributes and content from the associated element and the element then acts like a conventional object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07721194&OS=07721194&RS=07721194
owner: Groove Networks, Inc.
number: 07721194
owner_city: Beverly
owner_country: US
publication_date: 20050318
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a division of U.S. patent application Ser. No. 09\/588,195 entitled Method and Apparatus for Efficient Management of XML Documents filed Jun. 6, 2002 by Raymond E. Ozzie, Kenneth G. Moore, Ransom L. Richardson and Edward J. Fischer","This invention relates to storage and retrieval of information and, in particular, to storage and retrieval of information encoded in Extended Markup Language (XML).","Modern computing systems are capable of storing, retrieving and managing large amounts of data. However, while computers are fast and efficient at handling numeric data they are less efficient at manipulating text data and are especially poor at interpreting human-readable text data. Generally, present day computers are unable to understand subtle context information that is necessary to understand and recognize pieces of information that comprise a human-readable text document. Consequently, although they can detect predefined text orderings or pieces, such as words in an undifferentiated text document, they cannot easily locate a particular piece of information where the word or words defining the information have specific meanings. For example, human readers have no difficulty in differentiating the word \u201cwill\u201d in the sentence \u201cThe attorney will read the text of Mark's will.\u201d, but a computer may have great difficulty in distinguishing the two uses and locating only the second such use.","Therefore, schemes have been developed in order to assist a computer in interpreting text documents by appropriately coding the document. Many of these schemes identify selected portions of a text document by adding into the document information, called \u201cmarkup tags\u201d, which differentiates different document parts in such a way that a computer can reliably recognize the information. Such schemes are generally called \u201cmarkup\u201d languages.","One of these languages is called SGML (Standard Generalized Markup Language) and is an internationally agreed upon standard for information representation. This language standard grew out of development work on generic coding and mark-up languages, which was carried out in the early 1970s. Various lines of research merged into a subcommittee of the International Standards Organization called the subcommittee on Text Description and Processing Languages. This subcommittee produced the SGML standard in 1986.","SGML itself is not a mark-up language in that it does not define mark-up tags nor does it provide a markup template for a particular type of document. Instead, SGML denotes a way of describing and developing generalized descriptive markup schemes. These schemes are generalized because the markup is not oriented towards a specific application and descriptive because the markup describes what the text represents, instead of how it should be displayed. SGML is very flexible in that markup schemes written in conformance with the standard allow users to define their own formats for documents, and to handle large and complex documents, and to manage large information repositories.","Recently, another development has changed the general situation. The extraordinary growth of the Internet, and particularly, the World Wide Web, has been driven by the ability it gives authors, or content providers, to easily and cheaply distribute electronic documents to an international audience. SGML contains many optional features that are not needed for Web-based applications and has proven to have a cost\/benefit ratio unattractive to current vendors of Web browsers. Consequently, it is not generally used. Instead, most documents on the Web are stored and transmitted in a markup language called the Hypertext Markup Language or HTML.","HTML is a simple markup language based on SGML and it is well suited for hypertext, multimedia, and the display of small and reasonably simple documents that are commonly transmitted on the Web. It uses a small, fixed set of markup tags to describe document portions. The small number of fixed tags simplifies document construction and makes it much easier to build applications. However, since the tags are fixed, HTML is not extensible and has very limited structure and validation capabilities. As electronic Web documents have become larger and more complex, it has become increasingly clear that HTML does not have the capabilities needed for large-scale commercial publishing.","In order to address the requirements of such large-scale commercial publishing and to enable the newly emerging technology of distributed document processing, an industry group called the World Wide Web Consortium has developed another markup language called the Extensible Markup Language (XML) for applications that require capabilities beyond those provided by HTML. Like HTML, XML is a simplified subset of SGML specially designed for Web applications and is easier to learn, use, and implement than full SGML. Unlike HTML, XML retains SGML advantages of extensibility, structure, and validation, but XML restricts the use of SGML constructs to ensure that defaults are available when access to certain components of the document is not currently possible over the Internet. XML also defines how Internet Uniform Resource Locators can be used to identify component parts of XML documents.","An XML document is composed of a series of entities or objects. Each entity can contain one or more logical elements and each element can have certain attributes or properties that describe the way in which it is to be processed. XML provides a formal syntax for describing the relationships between the entities, elements and attributes that make up an XML document. This syntax tells the computer how to recognize the component parts of each document.","XML uses paired markup tags to identify document components. In particular, the start and end of each logical element is clearly identified by entry of a start-tag before the element and an end-tag after the element. For example, the tags <to> and <\/to> could be used to identify the \u201crecipient\u201d element of a document in the following manner:","document text . . . <to>Recipient<\/to> . . . document text.","The form and composition of markup tags can be defined by users, but are often defined by a trade association or similar body in order to provide interoperability between users. In order to operate with a predefined set of tags, users need to know how the markup tags are delimited from normal text and the relationship between the various elements. For example, in XML systems, elements and their attributes are entered between matched pairs of angle brackets (< . . . >), while entity references start with an ampersand and end with a semicolon (& . . . ;). Because XML tag sets are based on the logical structure of the document, they are easy to read and understand.","Since different documents have different parts or components, it is not practical to predefine tags for all elements of all documents. Instead, documents can be classified into \u201ctypes\u201d which have certain elements. A document type definition (DTD) indicates which elements to expect in a document type and indicates whether each element found in the document is not allowed, allowed and required or allowed, but not required. By defining the role of each document element in a DTD, it is possible to check that each element occurs in a valid place within the document. For example, an XML DTD allows a check to be made that a third-level heading is not entered without the existence of a second-level heading. Such a hierarchical check cannot be made with HTML. The DTD for a document is typically inserted into the document header and each element is marked with an identifier such as <!ELEMENT>.","However, unlike SGML, XML does not require the presence of a DTD. If no DTD is available for a document, either because all or part of the DTD is not accessible over the Internet or because the document author failed to create the DTD, an XML system can assign a default definition for undeclared elements in the document.","XML provides a coding scheme that is flexible enough to describe nearly any logical text structure, such as letters, reports, memos, databases or dictionaries. However, XML does not specify how an XML-compliant data structure is to be stored and displayed, much less efficiently stored and displayed. Consequently, there is a need for a storage mechanism that can efficiently manipulate and store XML-compliant documents.","In accordance with one embodiment of the invention, an in-memory storage manager represents XML-compliant documents as a collection of objects in memory. The collection of objects allows the storage manager to manipulate the document, or parts of the document with a consistent interface and to provide for features that are not available in conventional XML documents, such as element attributes with types other than text and documents that contain binary, rather than text, information. In addition, in the storage manager, the XML-compliant document is associated with a schema document (which is also an XML document) that defines the arrangement of the document elements and attributes. The storage manager can operate with conventional storage services to persist the XML-compliant document. Storage containers contain pieces of the document that can be quickly located by the storage manager.","In accordance with another embodiment, the storage manager also has predefined methods that allow it to access and manipulate elements and attributes of the document content in a consistent manner. For example, the schema data can be accessed and manipulated with the same methods used to access and manipulate the document content.","In accordance with yet another embodiment, the schema data associated with a document can contain a mapping between document elements and program code to be associated with each element. The storage manager further has methods for retrieving the code from the element tag. The retrieved code can then be invoked using attributes and content from the associated element and the element then acts like a conventional object.","In all embodiments, the storage manager provides dynamic, real-time data access to clients by multiple processes in multiple contexts. Synchronization among multiple processes accessing the same document is coordinated with event-driven queues and locks. The objects that are used to represent the document are constructed from common code found locally in each process. In addition, the data in the objects is also stored in memory local to each process. The local memories are synchronized by means of a distributed memory system that continually equates the data copies of the same element in different processes.","In still another embodiment, client-specified collections are managed by a separate collection manager. The collection manager maintains a data structure called a \u201cwaffle\u201d that represents the XML data structures in tabular form. A record set engine that is driven by user commands propagates a set of updates for a collection to the collection manager. Based on those updates, the collection manager updates index structures and may notify waffle users via the notification system. The waffle user may also navigate within the collection using cursors.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":"100"},"The client computer  includes a central processing unit (CPU) , which may include a conventional microprocessor, random access memory (RAM)  for temporary storage of information, and read only memory (ROM)  for permanent storage of information. A memory controller  is provided for controlling system RAM . A bus controller  is provided for controlling bus , and an interrupt controller  is used for receiving and processing various interrupt signals from the other system components.","Mass storage may be provided by diskette , CD-ROM , or hard disk . Data and software may be exchanged with client computer  via removable media, such as diskette  and CD-ROM . Diskette  is insertable into diskette drive , which is connected to bus  by controller . Similarly, CD-ROM  can be inserted into CD-ROM drive , which is connected to bus  by controller . Finally, the hard disk  is part of a fixed disk drive , which is connected to bus  by controller .","User input to the client computer  may be provided by a number of devices. For example, a keyboard  and a mouse  may be connected to bus  by keyboard and mouse controller . An audio transducer , which may act as both a microphone and a speaker, is connected to bus  by audio controller . It should be obvious to those reasonably skilled in the art that other input devices, such as a pen and\/or tablet and a microphone for voice input, may be connected to client computer  through bus  and an appropriate controller. DMA controller  is provided for performing direct memory access to system RAM . A visual display is generated by a video controller , which controls video display .","Client computer  also includes a network adapter  that allows the client computer  to be interconnected to a network  via a bus . The network , which may be a local area network (LAN), a wide area network (WAN), or the Internet, may utilize general-purpose communication lines that interconnect multiple network devices.","Client computer system  generally is controlled and coordinated by operating system software, such as the WINDOWS NT\u00ae operating system (available from Microsoft Corp., Redmond, Wash.). Among other computer system control functions, the operating system controls allocation of system resources and performs tasks such as process scheduling, memory management, networking and I\/O services.","As illustrated in more detail in , the storage manager  resides in RAM  (equivalent to RAM  in ) and provides an interface between an application program  which uses XML documents  and  and the persistent storage  in which the documents  and  are stored. The application  can interact with storage manager  by means of a consistent application programming interface  irregardless of the type of persistent storage  used to store the objects. Internally, the storage manager  represents each document , , as a hierarchical series of objects - and -, respectively. The storage manager  can store the documents  and  in persistent storage  as schematically illustrated by arrow  using a variety of file systems, such as directory-based file services, object stores and relational file systems.","The inventive system operates with conventional XML files. A complete XML file normally consists of three components that are defined by specific markup tags. The first two components are optional, the last component is required, and the components are defined as follows:\n\n","<?xml version=\u201c1.0\u201d encoding=\u201cUTF-8\u201d standalone=\u201cyes\u201d?>\n\n","<!DOCTYPE Appl SYSTEM \u201capp.dat\u201d>\n\n","If all three components are present, and the document instance conforms to the document model defined in the DTD, the document is said to be \u201cvalid.\u201d If only the last component is present, and no formal document model is present, but each element is properly nested within its parent elements, and each attribute is specified as an attribute name followed by a value indicator (=) and a quoted string, document instance is said to be \u201cwell-formed.\u201d The inventive system can work with and generate well-formed XML documents.","Within the storage manager , XML documents are represented by means of data storage partitions which are collectively referred to by the name \u201cGroove Document\u201d to distinguish the representation from conventional XML documents. Each Groove document can be described by a DTD that formally identifies the relationships between the various elements that form the document. These DTDs follow the standard XML format. In addition, each Groove document has a definition, or schema, that describes the pattern of elements and attributes in the body of the document. XML version 1.0 does not support schemas. Therefore, in order to associate a Groove schema document with an XML data document, a special XML processing instruction containing a URI reference to the schema is inserted in the data document. This processing instruction has the form:","<?schema URI=\u201cgroovedocument:\/\/\/GrooveXSS\/$PersistRoot\/sample.xml\u201d?>","Some elements do not have, or require, content and act as placeholders that indicate where a certain process is to take place. A special form of tag is used in XML to indicate empty elements that do not have any contents, and therefore, have no end-tag. For example, a <ThumbnailBox> element is typically an empty element that acts as a placeholder for an image embedded in a line of text and would have the following declaration within a DTD:","<!ELEMENT ThumbnailBox EMPTY>","Where elements can have variable forms, or need to be linked together, they can be given suitable attributes to specify the properties to be applied to them. These attributes are specified in a list. For example, it might be decided that the <ThumbnailBox> element could include a Location and Size attributes. A suitable attribute list declaration for such an attribute would be as follows:",{"@attributes":{"id":"p-0056","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<!ATTLIST ThumbnailBox"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003Location","ENTITY","#REQUIRED"]},{"entry":[{},"\u2003\u2003Size","CDATA","#IMPLIED"]},{"entry":[{},">"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"This tells the computer that the <ThumbnailBox> element includes a required Location entity and may include a Size attribute. The keyword #IMPLIED indicates that it is permissible to omit the attribute in some instances of the <ThumbnailBox> element.","XML also permits custom definition statements similar to the #DEFINE statements used with some compilers. Commonly used definitions can be declared within the DTD as \u201centities.\u201d A typical entity definition could take the form:","<!ENTITY BinDoc3487 SYSTEM \u201c.\/3487.gif\u201d NDATA>","which defines a file location for the binary document \u201cBinDoc3487.\u201d Once such a declaration has been made in the DTD, users can use a reference in place of the full value. For example, the <ThumbnailBox> element described previously could be specified as <ThumbnailBox Location=BinDoc3487 Size=\u201cAutosize\u201d\/>. An advantage of using this technique is that, should the defined value change at a later time, only the entity declaration in the DTD will need to be updated as the entity reference will automatically use the contents of the current declaration.","Within the storage manager, each document part is identified by a Uniform Resource Identifier (URI) which conforms to a standard format such as specified in RFC . URIs can be absolute or relative, but relative URIs must be used only within the context of a base, absolute URI. When the document is stored in persistent storage, its parts may be identified by a different STORAGEURI that is assigned and managed by the particular file system in use.","In accordance with the principles of the invention, within each document part, in the storage manager internal memory is represented by a collection of objects. For example, separate elements in the XML document are represented as element objects in the storage manager. This results in a structure that is illustrated in . In , an illustrative XML document  is represented as a collection of objects in storage manager . In particular, the XML document  contains the conventional XML processing statement  which identifies the XML version, encoding and file references as discussed above. Document  also contains an XML processing statement  which identifies a schema document  in storage manager  which is associated with the document . The illustrative XML document also contains a set of hierarchical elements, including ElementA  which contains some text , ElementA contains ElementB  which has no text associated with it. ElementB also contains ElementC , which, in turn, contains two elements. Specifically, ElementC contains ElementD  that has an attribute (ID, with a value \u201cfoo\u201d) and ElementE .","In the storage manager , the elements, ElementA-ElementE, are represented as element objects arranged in a hierarchy. In particular, ElementA is represented by ElementA object . Each element object contains the text and attributes included in the corresponding XML element. Therefore, element object  contains the text . Similarly, ElementB  is represented by element object  and elements ElementC, ElementD and ElementE are represented by objects ,  and , respectively. Element object , which represents element ElementD, also includes the attribute ID that is included in the corresponding element. Each element object references its child element objects by means of database pointers (indicated by arrows between the objects) into order to arrange the element objects into a hierarchy. There may also be attribute indices, such as index  that indexes the ID attribute in element object .","The representation of the XML document  by means of an object collection allows the storage manager  to manipulate its internal representation of the document  with a consistent interface that is discussed in detail below. The storage manager  can also provide features that are not available in conventional XML documents, such as collection services that are available via a collection manager that is also discussed in detail below.","As described above, Groove documents that contain XML data may have a definition, or schema document, that describes the pattern of elements and attributes in the body of the document. The schema document is stored in a distinct XML document identified by a URI. The schema document has a standard XML DTD definition, called the meta-schema, which is shown below:",{"@attributes":{"id":"p-0066","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<!-- The Document element is the root element in the schema -->"},{"entry":"<!ELEMENT Document (Registry*, AttrGroup*, ElementDecl*)>"},{"entry":"<!ATTLIST Document"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003URL","CDATA","#REQUIRED"]},{"entry":">"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<!ELEMENT Registry TagToProgID*>"},{"entry":"<!ELEMENT TagToProgID EMPTY>"},{"entry":"<!ATTLIST TagToProgID"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Tag","CDATA","#REQUIRED"]},{"entry":["\u2003\u2003ProgID","CDATA","#REQUIRED"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":">"},{"entry":"<!ELEMENT AttrGroup AttrDef*>"},{"entry":"<!ELEMENT AttrDef EMPTY>"},{"entry":"<!ATTLIST AttrDef"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Name","CDATA","#REQUIRED"]},{"entry":["\u2003\u2003Type","CDATA","#REQUIRED"]},{"entry":["\u2003\u2003Index","CDATA","#IMPLIED"]},{"entry":["\u2003\u2003DefaultValue","CDATA","#IMPLIED"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":">"},{"entry":"<!ELEMENT ElementDecl (ElementDecl* | AttrGroup | ElementRef*)>"},{"entry":"<!ATTLIST ElementDecl"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003Name","CDATA","#REQUIRED"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":">"},{"entry":"<!ELEMENT ElementRef EMPTY>"},{"entry":"<!ATTLIST ElementRef"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Ref","CDATA","#REQUIRED"]},{"entry":">"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Each of the elements in the schema defines information used by the storage manager while processing the document. The \u201cRegistry\u201d section forms an XML representation of a two-column table that maps XML element tags to Windows ProgIDs. (In the Common Object Model (COM) developed by Microsoft Corporation, a ProgID is a text name for an object that, in the COM system, is \u201cbound\u201d to, or associated with, a section of program code. The mapping between a given ProgID and the program code, which is stored in a library, is specified in a definition area such as the Windows\u2122 registry.)","This arrangement is shown in  that illustrates an XML document  and its related schema document . Both of these documents are resident in the storage manager  and would actually be represented by objects as shown in . However, in , the documents have been represented in conventional XML format for clarity.  shows the storage manager operational in a Windows\u2122 environment that uses objects constructed in accordance with the Common Object Model (COM) developed by the Microsoft Corporation, Redmond, Wash., however, the same principles apply in other operating system environments.","XML document  includes the normal XML processing statement  that identifies the XML version, encoding and file references. A schema XML processing statement  references the schema document  which schema document is associated with document  and has the name \u201curn:groove.net:sample.xml\u201d defined by name statement . It also includes a root element  which defines a name \u201cdoc.xml\u201d and the \u201cg\u201d XML namespace which is defined as \u201curn:groove.net\u201d","Document  has three other elements, including element  defined by tag \u201curn:groove.net:AAA\u201d, element  defined by tag \u201curn:groove.net:BBB\u201d and element  defined by tag \u201curn:groove.net:NoCode\u201d. Element  is a simple element that has no corresponding bound code and no corresponding tag-to-ProgID mapping in the schema document .","Within the \u201cregistry\u201d section defined by tag , the schema document  has two element-to-COM ProgID mappings defined. One mapping is defined for elements with the tag \u201curn:groove.net:AAA\u201d and one for elements with the tag \u201curn:groove.net:BBB.\u201d The bound code is accessed when the client application  invokes a method \u201cOpenBoundCode( ).\u201d The syntax for this invocation is given in Table 15 below and the steps involved are illustrated in . Invoking the OpenBoundCode( ) method on a simple element, such as element  generates an exception. The process of retrieving the bound code starts in step  and proceeds to step  in which the OpenBoundCode( ) is invoked. Invoking the OpenBoundCode( ) method on an element with the element tag \u201curn:groove.net:AAA\u201d causes the storage manager  to consult the registry element  in the schema document  with the element tag as set forth in step . From section , the storage manager retrieves the ProgID \u201cGroove.Command\u201d as indicated in step . In step , the storage manager calls the COM manager  in instructs it to create an object with this ProgID. In a conventional, well-known manner, in step , the COM manager translates the ProgID to a CSLID using a key in the Windows Registry . In step , the COM manager uses the CSLID to find a dynamically loadable library (DLL) file in the code database  that has the code for the object. Finally, in step , the COM manager creates the object and returns an interface pointer for the object to the storage manager  which, in turn, returns the pointer to the client application . The routine then finishes in step . The client application  can then use the pointer to invoke methods in the code that use attributes and content in the associated element. The element then behaves like any other COM object. A similar process occurs if the OpenBoundCode( ) method is invoked on elements with the tag \u201curn:groove.net:BBB.\u201d","The \u201cAttrGroup\u201d section defines non-XML characteristics for attributes. An attribute's data type can be defined as some type other than text and the attribute may be indexed to facilitate fast retrieval of the elements that containing it.","The \u201cElementDecl\u201d section provides a form of element definition similar to the DTD <!ELEMENT> declaration, but allows for extended attribute characteristics and the definition of non-containment element references.","The following example shows the sample portions of a schema document for an XML document that defines a \u201ctelespace\u201d that is previously described.",{"@attributes":{"id":"p-0075","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<groove:Document URL=\u201cTelespaceSchema.xml\u201d"},{"entry":"\u2003\u2003\u2003\u2003xmlns:groove=\u201curn:groove.net:schema.1\u201d>"},{"entry":"\u2003<groove:Registry>"},{"entry":"\u2003\u2003<groove:TagToProgID groove:Tag=\u201cg:Command\u201d"},{"entry":"\u2003\u2003\u2003groove:ProgID=\u201cGroove.Command\u201d\/>"},{"entry":"\u2003\u2003<groove:TagToProgID groove:Tag=\u201cgroove:PropertySetChanged\u201d"},{"entry":"\u2003\u2003\u2003groove:ProgID=\u201cGroove.PropSetChangeAdvise\u201d\/>"},{"entry":"\u2003<\/groove:Registry>"},{"entry":"\u2003<groove:AttrGroup>"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cID\u201d Index=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003<!-- KEY EXCHANGE ATTRIBUTES -->"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cNKey\u201d Type=\u201cBinary\u201d\/>"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cReKeyId\u201d Type=\u201cString\u201d\/>"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cT\u201d Type=\u201cString\u201d\/>"},{"entry":"\u2003\u2003<!-- AUTHENTICATION ATTRIBUTES -->"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cMAC\u201d Type=\u201cBinary\u201d\/>"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cSig\u201d Type=\u201cBinary\u201d\/>"},{"entry":"\u2003\u2003<!-- ENCRYPTION ATTRIBUTES -->"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cIV\u201d Type=\u201cBinary\u201d\/>"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cEC\u201d Type=\u201cBinary\u201d\/>"},{"entry":"\u2003\u2003<!-- XML Wrapper Attributes -->"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cRows\u201d Type=\u201cLong\u201d\/>"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cCols\u201d Type=\u201cLong\u201d\/>"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cItems\u201d Type=\u201cLong\u201d\/>"},{"entry":"\u2003\u2003<groove:AttrDef Name=\u201cItemID\u201d Type=\u201cBool\u201d Index=\u201ctrue\u201d\/>"},{"entry":"\u2003<\/groove:AttrGroup>"},{"entry":"\u2003<groove:ElementDecl Name=\u201cgroove:Telespace\u201d>"},{"entry":"\u2003\u2003<AttrGroup>"},{"entry":"\u2003\u2003\u2003<AttrDef Name=\u201cPersist\u201d DefaultValue=\u201cTrue\u201d Type=\u201cBool\u201d\/>"},{"entry":"\u2003\u2003\u2003<AttrDef Name=\u201cAccess\u201d DefaultValue=\u201cIdentity\u201d"},{"entry":"\u2003\u2003\u2003Type=\u201cString\u201d\/>"},{"entry":"\u2003\u2003<\/AttrGroup>"},{"entry":"\u2003\u2003<ElementRef Element=\u201cDynamics\u201d\/>"},{"entry":"\u2003\u2003<ElementRef Element=\u201cMembers\u201d\/>"},{"entry":"\u2003<\/groove:ElementDecl>"},{"entry":"<\/groove:Document>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In this example, there are two entries in the Tag to ProgID mapping table. The first maps the tag \u201cg:Command\u201d (which, using XML namespace expansion, is \u201curn:groove.net.schema.1:Command\u201d) to the ProgID \u201cGroove.Command.\u201d In the section defining attributes, the \u201cID\u201d attribute is indexed, the data type of the NKey attribute is binary, and so on.","This schema data is represented by element objects and can be accessed and manipulated by the same storage manager element and attribute interface methods used to manipulate documents as described in detail below. In particular, the information that describes a document can be manipulated using the same interfaces that are used for manipulating the document content.","In accordance with another aspect of the invention, sub-documents can be associated with a primary document. Any document may be a sub-document of a given document. If a document contains a sub-document reference to another document, then the referenced document is a sub-document. If two documents contain sub-document references to each other, then each document is a sub-document of the other document. Each sub-document is referenced from the primary document with conventional XML XLink language, which is described in detail at website www.w3.org\/TR\/xlink. Links may also establish a relationship between an all-text XML document and a binary sub-document. Binary documents do not have links to any kind of sub-document. If the link is to a document fragment, a subdocument relationship is established with the document that contains the fragment. The relationship of documents and sub-documents is illustrated in .","For example, main document  contains links  which include a link, represented by arrow , to document  and a link, represented by arrow , to a binary document . Documents  and  are thus sub-documents of document . Document , in turn, contains links  which include a link, represented by arrow  to document  with content . Document  is a sub-document of document . Document  contains binary content  and, therefore, cannot have links to sub-documents.","Sub-document links follow the standard definition for simple links. An exemplary element definition of a link is as follows:",{"@attributes":{"id":"p-0081","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<!ELEMENT GrooveLink ANY>"]},{"entry":[{},"<!ATTLIST GrooveLink"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003xml:link","CDATA","#FIXED \u201csimple\u201d"]},{"entry":[{},"\u2003\u2003href","CDATA","#REQUIRED"]},{"entry":[{},"\u2003\u2003role","CDATA","#IMPLIED \u201csub-document\u201d"]},{"entry":[{},"\u2003\u2003title","CDATA","#IMPLIED"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003show","(parsed|replace|new) #IMPLIED"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003actuate","(auto|user)","#IMPLIED"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003serialize","(byvalue|byreference|ignored) #IMPLIED"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003behavior","CDATA","#IMPLIED"]},{"entry":[{},"\u2003\u2003content-role","CDATA","#IMPLIED"]},{"entry":[{},"\u2003\u2003content-title","CDATA","#IMPLIED"]},{"entry":[{},"\u2003\u2003inline","(true|false)","#IMPLIED \u201ctrue\u201d"]},{"entry":[{},">"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"It is also possible to establish a sub-document relationship without using the above definition by adding to a document an XML link which has an xml:link attribute with a value \u201csimple\u201d, and a href attribute. Such a link will establish a sub-document relationship to the document identified by a URI value in the href attribute.","Given the relationships from a document to its sub-documents, it is possible to make a copy of an arbitrary set of documents and sub-documents. Within a single storage service, it may be possible to directly perform such a copy. To cross storage services or to send multiple documents to another machine, the entire hierarchy of such documents must be \u201cdescribable\u201d in a serialized fashion. The inventive Storage Manager serializes multiple documents to a text representation conforming to the specification of MIME Encapsulation of Aggregate documents, such as HTML (MHTML) which is described in detail at website ftp.isi.edu\/in-notes\/rfc2557.txt.","The following data stream fragment is an example of a document and a referenced sub-document as they would appear in an MHTML character stream. In the example, \u201cSP\u201d means one space is present and \u201cCRLF\u201d represents a carriage return-line feed ASCII character pair. All other characters are transmitted literally. The MIME version header has the normal MIME version and the Groove protocol version is in a RFC822 comment. The comment is just the word \u201cGroove\u201d followed by an integer. The boundary separator string is unique, so a system that parsed the MIME, and then each body part, will work correctly. The serialized XML text is illustrated in UTF-8 format, but it could also be transmitted in WBXML format. The XML document has a XML prefix, which includes the version and character encoding. The binary document is encoded in base64.",{"@attributes":{"id":"p-0085","num":"0087"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"MIME-Version: SP 1.0 SP (Groove SP 2) CRLF"},{"entry":"Content-Type: SP multipart\/related; SP boundary=\u201c<<[[&&&]]>>\u201d CRLF"},{"entry":"CRLF"},{"entry":"--<<[[&&&]]>>Content-Type: SP text\/XML; SP charset=\u201cUTF-8\u201d"},{"entry":"<?xml version=\u201c1.0\u201d encoding=\u2018utf-8\u2019?>"},{"entry":"<rootelement>"},{"entry":"."},{"entry":"."},{"entry":"."},{"entry":"<\/rootelement> CRLF"},{"entry":"CRLF"},{"entry":"--<<[[&&&]]>>"},{"entry":"Content-ID: SP <URI> CRLF"},{"entry":"Content-Type: SP application\/octet-stream CRLF"},{"entry":"Content-Transfer-Encoding: base64 CRLF"},{"entry":"CRLF"},{"entry":"R0IGODIhdQAgAPcAAP\/\/\/\/\/\/zP\/\/mf\/\/Zv\/\/M\/\/\/AP\/M\/\/\/MzP\/Mmf\/MZv\/MM\/\/MAP+Z\/\/+Z"},{"entry":"zP+Zmf+ZZv+ZM\/+ZAP9m\/\/9mzP9mmf9mZv9mM\/9mAP8z\/\/8zzP8zmf8zZv8zM\/8zAP8A\/\/8A"},{"entry":"zP8Amf8AZv8AM\/8AAMz\/\/8z\/zMz\/mcz\/Zsz\/M8z\/AMzM\/8zMzMzMmczMZszMM8zMAMyZ\/8yZ"},{"entry":"zMyZmcyZZsyZM8yZAMxm\/8xmzMxmmcxmZsxmM8xmAMwz\/8wzzMwzmcwzZswzM8wzAMwA\/8wA"},{"entry":"zMwAmcwAZswAM8wAAJn\/\/5n\/zJn\/mZn\/Zpn\/M5n\/AJnM\/5nMzJnMmZnMZpnMM5nMAJmZ\/5mZ"},{"entry":"OG\/qTMnzJUWQHoMKHUq0KEagRpMqXaoUaU6dG2IKIOqRKtOkTq9q3VrV5sd\/XMOKZZp1rNmz"},{"entry":"GsuiXct2hNq2cMVmXdkzZ12LLe\/ehYrXpsy\/MPUGHvw04IzCdhFbzasYMd+aUxsnnrzTq1uw"},{"entry":"cTN3tVrxrebPWDGDHr3UM+nTHE2jXn1RNevXEI3Dfi179urDJrte5BzVcknNhyNHZiyzJnGv"},{"entry":"uWMuppu7uHLkyV1Kxe1ccOGZ0Cn\/xshcu8\/K2g2LQ8bJGPJj4eh3+\/WNHb118PAtBn8aXTrn"},{"entry":"6s7tl2QP9b399fhNN55tbe31FYEITIRbgqAtyCBwAz5I20MUVmjhhRgyFBAAOw=="},{"entry":"--<<[[&&&]]>>--"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Unlike most XML processors, such as document editors or Internet browsers, the storage manager provides for concurrent document operations. Documents may be concurrently searched, elements may be concurrently created, deleted, updated, or moved. Copies of element hierarchies may be moved from one document to another. In most XML processors, all of the updates to a document are driven by a single user, who is usually controlling a single thread within a single process on a single computer.","The storage manager maintains XML document integrity among many users updating the same document, using multiple threads in multiple processes. In a preferred embodiment, all of the updates occur on a single computer, but, using other different, conventional inter-processor communication mechanisms, other operational embodiments are possible.  shows the basic structure of the storage manager and illustrates how it isolates application programs from cross-process communication issues. For example, two separate processes  and  may be operating concurrently in the same computer or in different computers. Process  is a \u201chome\u201d process as described below, while process  is another process designated as Process N. Within process , a multi-threaded client application program  is operating and within process , a multi-threaded client application program  is operating.","Each application program  and  interfaces with a storage manager designated as  and , respectively. In process , the storage manager comprises a storage manager interface layer  which is used by application program  to control and interface with the storage manager. It comprises the database, document, element and schema objects that are actually manipulated by the application. The API exported by this layer is discussed in detail below. The storage manager  also includes distributed virtual object (DVO) database methods , DVO methods for fundamental data types , DVO common system methods  and distributed shared memory . Similarly, the storage manager operating in process  includes transaction layer , DVO database methods , DVO methods for fundamental data types , DVO common system methods  and distributed shared memory .","The two processes  and  communicate via a conventional message passing protocol or inter-process communication (IPC) system . For processes that run in a single computer, such a system can be implemented in the Windows\u00ae operating system by means of shared memory buffers. If the processes are running in separate computers, another message passing protocol, such as TCP\/IP, can be used. Other conventional messaging or communications systems can also be used without modifying the operation of the invention. However, as is shown in , application programs  and  do not directly interact with the message passing system . Instead, the application programs  and  interact with storage managers  and , respectively, and storage managers  and  interact with the message passing system  via a distributed shared memory (DSM) system of which DSM systems  and  are a part.","A number of well-known DSM systems exist and are suitable for use with the invention. In accordance with a preferred embodiment, the DSM system used with the storage manager is called a C Region Library (CRL) system. The CRL system is an all-software distributed shared memory system intended for use on message-passing multi-computers and distributed systems. A CRL system and code for implementing such as system is described in detail in an article entitled \u201cCRL: High-Performance All-Software Distributed Memory System\u201d, K. L. Johnson, M. F. Kaashoek and D. A. Wallach, , ACM, December 1995; and \u201cCRL version 1.0 User Documentation\u201d, K. L. Johnson, J. Adler and S. K. Gupta, MIT Laboratory for Computer Science, Cambridge, Mass. 02139, August 1995. Both articles are available at web address www.pdos.lcs.mit.edu\/crl.","Parallel applications built on top of the CRL, such as the storage manager, share data through memory \u201cregions.\u201d Each region is an arbitrarily sized, contiguous area of memory. Regions of shared memory are created, mapped in other processes, unmapped, and destroyed by various functions of the DSM system. The DSM system used in the present invention provides a super-set of the functions that are used in the CRL DSM system. Users of memory regions synchronize their access by declaring to the DSM when they need to read from, or write to, a region, and then, after using a region, declaring the read or write complete. The effects of write operations are not propagated to other processes sharing the region until those processes declare their need for it. In addition to the basic shared memory and synchronization operations, DSM provides error handling and reliability with transactions. The full interface to inventive DSM is shown in Table 1.",{"@attributes":{"id":"p-0092","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["DSM Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AddNotification(DSMRgn* i_pRgn, const","Adds a local event that will be signaled"]},{"entry":["IgrooveManualResetEvent * i_pEvent);","with the data in the region changes."]},{"entry":["Close( );","Shuts down the DSM. There must be no"]},{"entry":[{},"mapped regions at this client."]},{"entry":["Create(UINT4 i_Size, INT4","Creates a new region. It also atomically"]},{"entry":["i_CallbackParam, INCAddress","maps the new region and initiates a"]},{"entry":["i_InitialOwner, DSMRId & io_RId,","StartWrite on the new region if Size is"]},{"entry":["DSMRgn * & o_pRgn, void * & o_pData);","non-zero. Size is the initial size of the"]},{"entry":[{},"data in the new region. RId is identifier of"]},{"entry":[{},"the new region. pRgn is the new region if"]},{"entry":[{},"Size is non-zero."]},{"entry":["AddDatabase(UINT2 i_DatabaseNumber);","Adds a new database to the region"]},{"entry":[{},"mapping tables."]},{"entry":["DatabaseFlushNotify(UINT2","Cleans up unused region resources."]},{"entry":"i_DatabaseNumber, TimeMillis"},{"entry":"i_StartTime);"},{"entry":["Destroy(DSMRId& i_RId);","Destroys an existing region entirely. RId"]},{"entry":[{},"is a valid identifier of the region to be"]},{"entry":[{},"destroyed."]},{"entry":["EndRead(DSMRgn* i_pRgn);","Closes a read operation on the region's"]},{"entry":[{},"data. pRgn is the valid region."]},{"entry":["EndWrite(DSMRgn* i_pRgn);","Closes a write operation on the region's"]},{"entry":[{},"data. pRgn is the valid region."]},{"entry":["Flush(DSMRgn* i_pRgn);","Flushes the region from this client's local"]},{"entry":[{},"cache to the region's home client. pRgn is"]},{"entry":[{},"the valid region."]},{"entry":["GetSize(DSMRgn* i_pRgn);","Returns the size(number of bytes) of the"]},{"entry":[{},"given valid region. pRgn is the valid"]},{"entry":[{},"region."]},{"entry":["Init(CBSTR i_BroadcastGroup,","Initializes the DSM. BroadcastGroup is"]},{"entry":["DSMRgnMapCallback * i_pCallback =","the name of the group in which this DSM"]},{"entry":["NULL, void * i_pCallbackParam = NULL,","client belongs. URCSize is the size of the"]},{"entry":["BOOL * o_pMasterClient = NULL, UINT4","Unmapped Regions Cache. PAddress is"]},{"entry":["i_WaitTimeOut = 1000, UINT4 i_URCSize =","the Inter-node Communication Address of"]},{"entry":["1<<10, INCAddress * o_pAddress =","this DSM client. pMasterClient specifies"]},{"entry":["NULL);","whether this DSM client is the"]},{"entry":[{},"Master(First) client."]},{"entry":["Map(const DSMRId& i_RId, INT4","Maps the region to this client's memory"]},{"entry":["i_CallbackParam, BOOL i_InitialOwner);","space. RId is a valid identifier of the"]},{"entry":[{},"region to be mapped."]},{"entry":["RemoveDatabase(UINT2","Removes the specified database from the"]},{"entry":["i_DatabaseNumber);","region mapping tables."]},{"entry":["RemoveNotification(DSMRgn* i_pRgn,","Removes interest in changes to data in a"]},{"entry":["const IGrooveManualResetEvent *","region."]},{"entry":"i_pEvent);"},{"entry":["Resize(DSMRgn* i_pRgn, UINT4 i_Size);","Resizes the given valid region while"]},{"entry":[{},"maintaining the original data(which may"]},{"entry":[{},"be truncated if the size is decreased)."]},{"entry":[{},"pRgn is the valid region. Size is the new"]},{"entry":[{},"size."]},{"entry":["GetRId(const DSMRgn* i_pRgn);","Returns the identifier for the given valid"]},{"entry":[{},"region. pRgn is the valid region."]},{"entry":["SignalNotification(DSMRgn* i_pRgn);","Sets the signal that notification has"]},{"entry":[{},"occurred."]},{"entry":["StartRead(DSMRgn* i_pRgn, INT4","Initiates a read operation on the region's"]},{"entry":["i_CallbackParam, void * & o_pData);","data. RgnStartRead (or RgnStartWrite)"]},{"entry":[{},"must be called before the data can be"]},{"entry":[{},"read. pRgn is the valid region."]},{"entry":["StartTransactionRead(DSMRgn* i_pRgn,","Initiates a transactional read operation on"]},{"entry":["INT4 i_CallbackParam, void * & o_pData);","the region's data. RgnStartRead (or"]},{"entry":[{},"RgnStartWrite) must be called before the"]},{"entry":[{},"data can be read. pRgn is the valid"]},{"entry":[{},"region."]},{"entry":["StartTransactionWrite(DSMRgn* i_pRgn,","Initiates a transactional write operation on"]},{"entry":["INT4 i_CallbackParam, void * & o_pData);","the region's data. RgnStartWrite must be"]},{"entry":[{},"called before the data can be modified."]},{"entry":[{},"pRgn is the valid region."]},{"entry":["StartWrite(DSMRgn* i_pRgn, INT4","Initiates a write operation on the region's"]},{"entry":["i_CallbackParam, void * & o_pData);","data. RgnStartWrite must be called before"]},{"entry":[{},"the data can be modified. pRgn is the"]},{"entry":[{},"valid region."]},{"entry":["Unmap(DSMRgn* & io_pRgn);","Unmaps the region from this client's"]},{"entry":[{},"memory space. pRgn is the valid region"]},{"entry":[{},"to be unmapped."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Each storage manager  and  comprises a DSM node that uses one or more DSM regions (not shown in ) located in the address space of the corresponding process , . These regions contain DVO objects and classes that can be used to represent documents, elements and schema of the XML data that is managed by the storage manager. Portions of documents, usually elements and index sections, are wholly contained within a region. Although the DSM system provides a conceptually uniform node space for sharing regions, there are issues that result in the need to single out a specific node or process to perform special tasks.","Consequently, within the DSM synchronization protocol, a single node is identified as a \u201chome node\u201d for each region. Within the many processes running the storage manager on a single computer, one process, called the \u201chome process\u201d, is the process that performs all disk I\/O operations. To reduce the amount of data movement between processes, the home process is the home node for all regions. Other implementations are possible, in which any node may be the home for any region and any process may perform disk I\/O. However, for personal computers with a single disk drive, allowing multiple processes to perform disk I\/O introduces the need for I\/O synchronization while not alleviating the main performance bottleneck, which is the single disk.","In accordance with the DSM operation, if a process has the most recent copy of a region, then it can read and write into the region. Otherwise, the process must request the most-recent copy from the home process before it can read and write in the region. Each DSM system ,  interfaces with the message passing system  via an interface layer called an internode communication layer (, ) which isolates the DVM system from the underlying transport mechanism. It contains methods that send messages to a broadcast group, and manipulate addresses for the corresponding process and the home process.","The inventive storage manager uses shared objects as the basis for XML objects. Many systems exist for sharing objects across processes and computers. One such object-sharing model is based on the use of the shared memory facilities provided by an operating system. One of the biggest drawbacks of such a shared memory model is unreliability due to memory write failures that impact the integrity of other processes. For example, if one process is in the process of updating the state of an object and the process fails before setting the object to a known good state, other processes will either see the object in an invalid state or may blocked indefinitely waiting for the failed process to release its synchronization locks. The shared memory model also suffers from the locality constraints of shared memory in a tightly coupled multi-computer\u2014it provides no way to share objects over a network.","Another model that provides distributed object sharing and remote method invocation is the basis for the distributed object management facilities in Java or the Object Management Group's CORBA system. Although providing the ability to share objects over a computer network, clients of such systems need to be aware of whether an object is local or remote\u2014objects are not location independent. Performance is another drawback of this approach. All operations on an object need to be transmitted to the object server, since the server contains the only copy of the object state and serves as the synchronization point for that data.","In order to overcome these drawbacks, the inventive storage manager uses a distributed virtual object (DVO) system to provide the primitive data types that XML object types are built upon. The DVO system also provides its callers with the illusion that all data is reliably contained in one process on a single computer node, even though the data may be in multiple processes on many computers or may truly be just in one process on a single computer node.","The DVO object-sharing model is shown in . All processes, on all computers, that are sharing an object have the same method code. For example, process  and process  in  have copies of the same object. Thus, each of processes  and  has a copy of the same method code  and  in the respective process address space. The volatile data state for an object is stored in DSM regions. Thus, the object data  for the object copy in process  is stored in region  in the address space of process . Similarly, the object data  for the object copy in process  is stored in region  in the address space of process . Object methods synchronize their access to the object's data by using the DSM synchronization functions that synchronize the regions as illustrated by arrow . In this manner, DVO objects are location independent, failures are contained within a single process, and multiple changes to a local object do not require data movement across the inter-node transport.","The DVO system provides basic objects that may be used as building blocks to manage XML documents for the storage manager and is divided into three functional pieces. The DVO database  contains objects that handle the DVO local context in each process and the shared tables that contain information about open databases and documents contained within those databases. In DVO, \u201cdatabases\u201d are conceptual storage containers and may channel objects that are ultimately stored in any kind of storage service . DVO documents are associated with XML or binary documents, which are visible to a client of the storage manager. DVO documents are also used to contain the indices and metadata associated with a collection.","DVO types  is a set of object classes that can be used within DVO documents to implement higher-level data model constructs. DVO types range from simple data containment objects through complex, scalable index structures. Each DVO type is implemented with two classes\u2014one is a \u201cnon-shared class\u201d that uses memory pointers in object references and the other is a \u201cshared class\u201d that uses logical addresses, called database pointers, for object references. The \u201cshared class\u201d has two sub-forms\u2014one is the representation of the object in a shared DSM region and the other is the representation of the object stored on-disk in an object store database. The DVO system  provides methods to transfer objects between their shared and non-shared implementations.","The different DVO types are shown in Table 2.",{"@attributes":{"id":"p-0103","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["DVO Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Binary Document","A kind of document that handles binary data."]},{"entry":["B-tree Index","The type of the root of a b-tree index. It contains a"]},{"entry":[{},"description of the index, as well as the address of the root"]},{"entry":[{},"index node."]},{"entry":["Btree Node","A piece of a Btree index which can contain variable numbers"]},{"entry":[{},"of records, sorted by one or more keys."]},{"entry":["Collection Document","A kind of document that handles Collection documents. In"]},{"entry":[{},"addition to the Document methods, it has methods to handle"]},{"entry":[{},"the collection descriptor, indices within the collection, and"]},{"entry":[{},"read marks."]},{"entry":["Document","The base type from which the other document types inherit"]},{"entry":[{},"common methods, such as Open, Close, Create, and Write."]},{"entry":["Extendible Hashing","A type implementation of extendible hashing, as defined in"]},{"entry":[{},"\u201cExtendible Hashing - A Fast Access Method for Dynamic"]},{"entry":[{},"Files\u201d, Ronald Fagin, Jurg Nievergelt, Nicholas Pippenger, H. Raymond Strong."]},{"entry":[{},"ACM Transactions on Database Systems"]},{"entry":[{},"4(3), pages 315-344, 1979."]},{"entry":["FlatCollectionDocument","A specific kind of CollectionDocument used in shared"]},{"entry":[{},"regions."]},{"entry":["FlatDocument","A specific kind of XMLDocument used in shared regions."]},{"entry":["FlatNode","A specific kind of Node used in shared regions."]},{"entry":["Node","The type used to store XML elements. It has methods to"]},{"entry":[{},"manage the element name, the element's parent, element"]},{"entry":[{},"content, element attributes, links to other elements, and"]},{"entry":[{},"change notifications."]},{"entry":["Ordered Bucket","A kind of index which supports key ordered sorting (integer,"]},{"entry":[{},"double, string)"]},{"entry":["Ordered Index","A type that provides a collated data vector. It has methods"]},{"entry":[{},"for adding, removing, and changing key\/data pairs,"]},{"entry":[{},"managing index cursors, and managing parent and sub-"]},{"entry":[{},"indicies."]},{"entry":["Ordered Index Types","Data types, called records and fields, that can be stored in"]},{"entry":[{},"ordered indices."]},{"entry":["Ordinal Ordered Index","A kind of index that support ordinal addressing. It is"]},{"entry":[{},"conceptually similar to vector that allows any entry to be"]},{"entry":[{},"addressed by position (e.g., vec[14]). In addition to the index"]},{"entry":[{},"methods, it has methods to move entries to specific positions"]},{"entry":[{},"within the index."]},{"entry":["Red-Black Index","A kind of ordered index that implements balancing using the"]},{"entry":[{},"red-black binary tree algorithm."]},{"entry":["W32BinaryDocument","A specific kind of binary document for 32-bit Windows"]},{"entry":[{},"platforms."]},{"entry":["XML Document","A kind of document that handles XML documents. In"]},{"entry":[{},"addition to the Document methods, it has methods to handle"]},{"entry":[{},"schemas and indexes."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The DVO system  objects isolate the upper levels of DVO from physical storage and process locality issues. The DVO system objects use DSM for invoking and handling requests to and from the home process. Requests include operations such as opening, closing, and deleting a database, finding documents in a database, and opening, closing, deleting, and writing database documents. The DVO system  in the master process  can also retrieve DVO objects from a storage service . A storage service, such as service , is a utility program that stores and retrieves information from a persistent medium and is responsible for the physical integrity of a container, database or file. It ensures that all updates are durable and that all internal data structures (e.g., redirection tables, space allocation maps) are always consistent on disk. Other processes, such as process  cannot access the storage service  directly, but can access the system indirectly via its DSM regions .","The storage manager  can operate with different types of physical storage systems, including container or object stores, stream file systems and ZIP files. In order to achieve atomic commits, the object store storage service can be implemented using page-oriented input\/output operations and a ping-pong shadow page table.","Individual storage manager methods are atomic. Multiple storage manager operations, even operations on different documents, may be grouped into \u201ctransactions.\u201d Transactions not only protect XML data integrity, but they also improve performance because they enable the storage manager to reduce the number of region lock operations and reduce the amount of data movement over the message passing system.","The storage manager supports both read-write and read-only transactions built on DSM synchronization primitives described in the DSM documentation referenced above, which primitives insure consistency in multiple processes or computers. Read-write transactions provide for the atomicity and consistency of a set of database read and write operations. Each region that is changed as part of a transaction will be kept in a \u201clocked\u201d state until the transaction is committed or aborted. This prevents operations that are not part of the transaction from seeing the changes. Further, each transaction stores a \u201cbefore image\u201d of the regions it modifies so that, if the transaction is aborted (as a result of an explicit API call or an exception), the effects of the transaction can be undone. Depending on the performance requirements, an alternative implementation would write undo information rather than storing the full \u201cbefore image.\u201d A read-only transaction uses the same interface as a read-write transaction. A read-only transaction ensures that multiple read operations are consistent. Like other transactions, it uses DSM functions to keep all read regions in a \u201cread state\u201d until it is finished.","In addition, checkpoints can be used to ensure that changes are persistent and provide durability for storage manager operations. A checkpoint may be performed at any time. Checkpoints are used in conjunction with data recovery logging. All operations write \u201credo\u201d information to a sequential recovery log file when they are committed. When the checkpoint is committed, the recovery log file will be flushed to persistent storage and will ensure that the operations can be recovered. Since transactions do not write \u201credo\u201d information until they are committed, if a checkpoint operation is commenced in the middle of a transaction, the transaction operations will not be flushed.","Transactions are scoped to a thread and a database. Once a transaction is started on a thread for a particular database, that transaction will be automatically used for all subsequent storage manager operations on that database and thread. An extension of conventional operating system threads is used, so that transactions correctly handle calls that need to be marshaled to other threads, for example, a user interface thread, using the Groove system's simple marshaler. Storage manager calls made on a thread and database that doesn't have a transaction started-will cause the storage manager to create a \u201cdefault transaction\u201d that will be committed just before the call ends. Alternatively, starting a new transaction on a thread and database that already has an existing transaction in progress will cause the new transaction to automatically \u201cnest\u201d in the existing transaction. Nested transactions provide the ability to roll back the system within the outer transaction. In particular, inner, nested transactions are not finally committed until the outermost transaction is committed. For example, if a nested transaction is committed, but the containing transaction is later aborted, the nested transaction will be aborted.","In a preferred embodiment of the invention, the storage manager is implemented in an object-oriented environment. Accordingly, both the storage manager itself and all of the document components, such as documents, elements, entities, etc. are implemented as objects. These objects, their interface, the underlying structure and the API used to interface with the storage manager are illustrated in . The API is described in more detail in connection with . Referring to , the storage manager provides shared access to documents, via the document manipulation API , but, in order to enable a full programming model for client applications, additional communication and synchronization operations are provided, within the context of a document. For example, the storage manager provides queued element operations, which enable one process to send an element to another process via the Queue API . Elements can be sent by value (a copy of the whole element) or by reference to the element. Synchronization operations are also provided to allow one or more threads to wait for an element to be enqueued to a given queue. The storage manager also provides RPC-style element communication and synchronization, via the RPC API .","Other client components may need to be aware of when documents are created in or deleted from storage manager. Accordingly, the storage manager provides an interface to an interest-based notification system for those client components via notification API . The notification system  provides notifications to client components that have registered an interest when a document is created or deleted.","Document data is represented by a collection of objects including database objects, document objects, element objects and schema objects . The objects can be directly manipulated by means of the document manipulation API .","The document related objects  are actually implemented by the distributed virtual object system  that was discussed in detail above. The distributed virtual object system  can also be manipulated by element queue and RPC objects  under control of the queue and RPC API .","The distributed virtual object system  communicates with the distributed shared memory via interface  and communicates with the logging operations via interface . Similarly, the distributed virtual object system can interact with the storage services via interface .","The following is a description of the interfaces for each of the objects used to implement a preferred embodiment of the inventive storage manager. These object are designed in accordance with the Common Object Model (COM) promulgated by Microsoft Corporation, Redmond, Wash., and can be manipulated in memory as COM objects. However, COM is just one object model and one set of interface methodologies. The invention could also be implemented using other styles of interface and object models, including but not limited to the Java and CORBA object models.",{"@attributes":{"id":"p-0116","num":"0118"},"figref":"FIG. 9","b":"900"},{"@attributes":{"id":"p-0117","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveStorageManager : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CreateDatabase (BSTR","Creates a database. A database can be"]},{"entry":["i_DatabaseURI, VARIANT_BOOL","either temporary or permanent, and single or"]},{"entry":["i_Temporary, VARIANT_BOOL","multi-process. The DatabaseURI specifies"]},{"entry":["i_SingleProcess, IUnknown *","the location of the database."]},{"entry":"i_pSecurityContext, VARIANT_BOOL"},{"entry":"i_CreateOnCheckpoint,"},{"entry":"IgrooveDatabase ** o_ppDatabase);"},{"entry":["CreateOrOpenDatabase (BSTR","Creates a new database or opens an existing"]},{"entry":["i_DatabaseURI, VARIANT_BOOL","database."]},{"entry":"i_Temporary, VARIANT_BOOL"},{"entry":"i_SingleProcess, IUnknown *"},{"entry":"i_pSecurityContext, VARIANT_BOOL"},{"entry":"i_CreateOnCheckpoint,"},{"entry":"VARIANT_BOOL * o_pCreated,"},{"entry":"IgrooveDatabase ** o_ppDatabase);"},{"entry":["CreateTemporaryElement (BSTR","Creates a temporary element."]},{"entry":"i_Name, Iunknown * i_pParent,"},{"entry":"IgrooveElement ** o_ppElement);"},{"entry":["CreateTemporaryXMLDocument","Creates an empty temporary document with a"]},{"entry":["(BSTR i_NamePrefix, BSTR","unique URI"]},{"entry":"i_SchemaURI, IUnknown*"},{"entry":"i_pAdditionalSchemaURIs,"},{"entry":"IgrooveXMLDocument **"},{"entry":"o_ppXMLDocument);"},{"entry":["CreateTransform (BSTR","Creates a transformation interface."]},{"entry":"i_CollectionDescriptorURI, BSTR"},{"entry":"i_SecondaryDescriptorURI, BSTR"},{"entry":"i_CollectionDescriptorName,"},{"entry":"IgrooveTransform ** o_ppTransfom);"},{"entry":["DeleteDatabase (BSTR","Deletes a database."]},{"entry":"i_DatabaseURI);"},{"entry":["IsHomeProcess (VARIANT_BOOL *","Determine whether we are the home process"]},{"entry":"o_pHomeProcess);"},{"entry":["OpenCrossProcessSemaphore (BSTR","Creates a semaphore object that can be used"]},{"entry":["i_Name, VARIANT_BOOL i_Reentrant,","to synchronize activity in different processes."]},{"entry":["IgrooveCrossProcessSemaphore **","If the semaphore is not Reentrant, repeated"]},{"entry":["o_ppSemaphore);","attempts to lock the semaphore within the"]},{"entry":[{},"same thread and process will block."]},{"entry":["OpenDatabase (BSTR i_DatabaseURI,","Open an existing database."]},{"entry":"VARIANT_BOOL i_SingleProcess,"},{"entry":"Iunknown * i_pSecurityContext,"},{"entry":"IgrooveDatabase ** o_ppDatabase);"},{"entry":["OpenDatabaseURIEnum(IGrooveBST","Returns an Enumeration of the databases that"]},{"entry":["REnum ** o_ppDatabaseURI);","are currently open."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Another interface  (IGrooveStorageURISyntax) is used by a client of a storage manager that needs to perform operations on parts of standard names, which are in the form of Uniform Resource Identifiers (URIs). Table 4 includes the methods for the IGrooveStorageURISyntax interface.",{"@attributes":{"id":"p-0119","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveStorageURISyntax : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["BuildDatabaseURI (BSTR","Builds a database URI from its pieces."]},{"entry":"i_ServiceName, BSTR"},{"entry":"i_DatabasePath, VARIANT_BOOL"},{"entry":"i_Relative, BSTR *o_pURI);"},{"entry":["BuildDocumentURI (BSTR","Builds a document URI from its pieces."]},{"entry":"i_ServiceName, BSTR"},{"entry":"i_DatabasePath, BSTR"},{"entry":"i_DocumentName, VARIANT_BOOL"},{"entry":"i_Relative, BSTR * o_pURI);"},{"entry":["MakeAbsolute (BSTR i_RelativeURI,","Given a relative URI within the scope of this"]},{"entry":["BSTR * o_pAbsoluteURI);","database, return an absolute URI."]},{"entry":["MakeRelative (BSTR i_AbsoluteURI,","Given an absolute URI within this database,"]},{"entry":["BSTR * o_pRelativeURI);","return a relative URI within the scope of this"]},{"entry":[{},"database."]},{"entry":["OpenDatabasePath (BSTR I_URI,","Returns the directory path portion of a URI."]},{"entry":"BSTR * o_pDatabasePath);"},{"entry":["OpenDocumentName (BSTR i_URI,","Returns the document name portion of a URI."]},{"entry":"BSTR * o_pDocumentName);"},{"entry":["OpenPersistRootPath (BSTR *","Returns the directory path to the root of the"]},{"entry":["o_pPath);","Groove persistent data directories."]},{"entry":["OpenServiceName (BSTR i_URI,","Returns the storage service portion of a URI."]},{"entry":"BSTR * o_pServiceName);"},{"entry":["Parse (BSTR i_URI, BSTR *","Parses the pieces of the given URI."]},{"entry":"o_pServiceName, BSTR *"},{"entry":"o_pDatabasePath, BSTR *"},{"entry":"o_pDocumentName);"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0120","num":"0122"},"figref":"FIG. 10","b":"1000"},{"@attributes":{"id":"p-0121","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveLinkCallback : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["HandleLink (IGrooveElement *","Called when the specified"]},{"entry":["i_pLinkElement, IGrooveByteInputStream *","element contains a link"]},{"entry":["i_pLinkData);","attribute definition."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Another interface  (IGrooveRPCServerCallback) is used by a client of a storage manager that needs to handle remote procedure calls (RPCs) on elements within XML documents. RPC server callbacks are a sub-class of the \u201cutil\u201d base class (described below), that is, all of the methods of IGrooveElementUtilBase also apply to IGrooveRPCServerCallback. Table 6 defines the methods used in the storage manager RPC server callback interface.",{"@attributes":{"id":"p-0123","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveElementRPCServerCallback : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["HandleCall (IGrooveElement * i_pInput,","Handle a RPC, receiving input"]},{"entry":["IgrooveElement ** o_ppOutput);","parameters in the Input"]},{"entry":[{},"element and returning output"]},{"entry":[{},"parameters in the"]},{"entry":[{},"Output element."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0124","num":"0126"},"figref":["FIGS. 11","FIG. 11"],"b":["12","13","1100"]},{"@attributes":{"id":"p-0125","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveDatabase : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Checkpoint ( );","Creates a durable point of state for the"]},{"entry":[{},"database."]},{"entry":["ClearDataLost ( );","Clears the database flag that indicates data"]},{"entry":[{},"may have been lost since the database was"]},{"entry":[{},"opened or the last transaction was"]},{"entry":[{},"committed."]},{"entry":["CreateBinaryDocumentFromStream","Creates a binary document with the specified"]},{"entry":["(IgrooveByteInputStream *i_pStream,","name in the database."]},{"entry":"BSTR I_DocumentName,"},{"entry":"IgrooveBinaryDocument **"},{"entry":"o_ppDocument);"},{"entry":["CreateOrOpenXMLDocument (BSTR","Opens the specified XML document; creates"]},{"entry":["i_DocumentName, BSTR","an empty document with the specified name"]},{"entry":["i_RootElementName, BSTR","and schema it if it doesn't already exist."]},{"entry":"i_SchemaURI, IUnknown *"},{"entry":"i_pAdditionalSchemaURIs,"},{"entry":"VARIANT_BOOL * o_pCreated,"},{"entry":"IGrooveXMLDocument **"},{"entry":"o_ppDocument);"},{"entry":["CreateXMLDocument (BSTR","Creates an empty XML document with the"]},{"entry":["i_DocumentName, BSTR","specified name and schema in the database."]},{"entry":"i_RootElementName, BSTR"},{"entry":"i_SchemaURI, IUnknown *"},{"entry":"i_pAdditionalSchemaURIs,"},{"entry":"IGrooveXMLDocument **"},{"entry":"o_ppDocument);"},{"entry":["CreateXMLDocumentFromStream","Given a stream of bytes, representing one of"]},{"entry":["(IGrooveByteInputStream * i_pStream,","the supported character set encodings of a"]},{"entry":["GrooveParseOptions i_ParseOptions,","XML document, creates an XML document in"]},{"entry":["BSTR i_DocumentName, BSTR","the database."]},{"entry":"i_SchemaURI, IUnknown *"},{"entry":"i_pAdditionalSchemaURIs, IUnknown *"},{"entry":"i_pLinkCallback,"},{"entry":"IGrooveXMLDocument **"},{"entry":"o_ppDocument);"},{"entry":["DeleteDocument (BSTR","Deletes the named document."]},{"entry":"i_DocumentName);"},{"entry":["DocumentExists (BSTR","Given the specified document name, checks"]},{"entry":["i_DocumentName, VARIANT_BOOL *","for the existence of the document in the"]},{"entry":["o_pDocumentExists);","database."]},{"entry":["IsTransactionInProgress","Returns TRUE if a transaction is in progress."]},{"entry":"(VARIANT_BOOL *"},{"entry":"o_pTransactionInProgress);"},{"entry":["OpenBinaryDocument (BSTR","Opens the specified binary document."]},{"entry":"i_DocumentName,"},{"entry":"IGrooveBinaryDocument **"},{"entry":"o_ppDocument);"},{"entry":["OpenCrossProcessSemaphore (BSTR","Creates a new cross process synchronization"]},{"entry":["i_Name, VARIANT_BOOL","object. If Name is not specified, the default"]},{"entry":["i_Reentrant,","name for the database is used. If the"]},{"entry":["IGrooveCrossProcessSemaphore **","semaphore is not Reentrant, repeated"]},{"entry":["o_ppSemaphore);","attempts to lock the semaphore within the"]},{"entry":[{},"same thread and process will block."]},{"entry":["OpenDocumentNameEnum","Returns an enumeration of the documents"]},{"entry":["(VARIANT_BOOL i_OpenOnly,","currently in a database."]},{"entry":"IGrooveBSTREnum **"},{"entry":"o_ppDocumentNames);"},{"entry":["OpenTransaction (VARIANT_BOOL","Creates a new transaction on the database."]},{"entry":["i_BeginLock, VARIANT_BOOL","BeginLock specifies whether the database"]},{"entry":["i_ReadOnly, VARIANT_BOOL","cross process semaphore should be locked."]},{"entry":["i_BeginTransaction, VARIANT_BOOL","BeginTransaction specifies whether the"]},{"entry":["i_Reentrant, BSTR i_LockName,","transaction should start now. If LockName is"]},{"entry":["IGrooveTransaction **","not specified, the default name for the"]},{"entry":["o_ppTransaction);","database is used. If the semaphore is not"]},{"entry":[{},"Reentrant, repeated attempts to lock the"]},{"entry":[{},"semaphore within the same thread and"]},{"entry":[{},"process will block."]},{"entry":["OpenURI (BSTR * o_pDatabaseURI);","Returns the URI for this database."]},{"entry":["OpenXMLDocument (BSTR","Opens the specified XML document."]},{"entry":"i_DocumentName,"},{"entry":"IGrooveXMLDocument **"},{"entry":"o_ppDocument);"},{"entry":["WasDataLost (VARIANT_BOOL *","Returns the value of a flag indicating whether"]},{"entry":["o_pDataLost);","data may have been lost since the database"]},{"entry":[{},"was opened or the last transaction was"]},{"entry":[{},"committed."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 8 illustrates the methods for an interface  (IGrooveCrossProcessSemaphore) for a client of a storage manager that needs to synchronize access among processes.",{"@attributes":{"id":"p-0127","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveCrossProcessSemaphore : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DoLock (VARIANT_BOOL","Locks the semaphore. If ReadOnly is"]},{"entry":["i_ReadOnly);","TRUE, only retrieval operations may be"]},{"entry":[{},"performed on the database,"]},{"entry":[{},"otherwise, any operation may"]},{"entry":[{},"be performed."]},{"entry":["DoUnlock ( );","Unlocks the semaphore."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 9 illustrates an interface  (IGrooveTransaction) for a client of a storage manager that needs to group operations within a database. Transactions are a sub-class of cross-process semaphores, that is, all of the methods for IGrooveCrossProcessSemaphore also apply to IGrooveTransaction. The storage manager transaction interface includes the following methods:",{"@attributes":{"id":"p-0129","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveTransaction : IGrooveCrossProcessSemaphore"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Abort ( );","Ends the transaction. All work done to the"]},{"entry":[{},"database since the start of the transaction is"]},{"entry":[{},"discarded."]},{"entry":["Begin (VARIANT_BOOL i_ReadOnly);","Starts a transaction. If ReadOnly is false, the"]},{"entry":[{},"database may be updated."]},{"entry":["BeginIndependent (VARIANT_BOOL","Starts another transaction for this thread."]},{"entry":["i_ReadOnly);","Only one independent transaction is allowed"]},{"entry":[{},"per thread."]},{"entry":["Commit ( );","Ends the transaction. All work done to the"]},{"entry":[{},"database since the start of the transaction is"]},{"entry":[{},"reliably stored in the database."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0130","num":"0132"},"figref":"FIG. 12","b":"1200"},{"@attributes":{"id":"p-0131","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 10"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveDocument: IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OpenCrossProcessSemaphore (BSTR","Creates a new cross process synchronization"]},{"entry":["i_Name, VARIANT_BOOL","object. If Name is not specified, the URI for"]},{"entry":["i_Reentrant,","the document is used. If the semaphore is not"]},{"entry":["IgrooveCrossProcessSemaphore **","Reentrant, repeated attempts to lock the"]},{"entry":["o_ppSemaphore);","semaphore within the same thread and process will block."]},{"entry":["OpenDatabase (IGrooveDatabase **","Returns an interface to the database object"]},{"entry":["o_ppDatabase);","that contains this document."]},{"entry":["OpenName (BSTR *","Returns the document name."]},{"entry":"o_pDocumentName);"},{"entry":["OpenURI (BSTR * o_pURI);","Returns the URI that identifies this document."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 11 illustrates an interface  (IGrooveXMLDocument) for a client of a storage manager that needs to manage XML documents within a database. XML documents are a sub-class of documents, that is, all of the methods for IGrooveDocument also apply to IGrooveXMLDocument. The storage manager XML document interface includes the following methods:",{"@attributes":{"id":"p-0133","num":"0135"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 11"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveXMLDocument: IGrooveDocument"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GenerateGrooveID (BSTR","Generates an 8 byte identifier from the string"]},{"entry":["i_GrooveIDBase, double *","identifier I_GrooveIDBase."]},{"entry":"o_pGrooveID);"},{"entry":["ConvertGrooveIDToSerializedGrooveID","Converts an 8 byte identifier to the string"]},{"entry":["(double i_GrooveID, BSTR *","i_GrooveID."]},{"entry":"o_pGrooveIDString);"},{"entry":["ConvertSerializedGrooveIDToGrooveID","Converts a string version of a Groove"]},{"entry":["(BSTR i_GrooveIDString, double *","identifier to an 8 byte version."]},{"entry":"o_pGrooveID);"},{"entry":["CreateElement (BSTR i_Name,","Creates a new element with the supplied Tag;"]},{"entry":["IUnknown * i_pParent, IGrooveElement","the tag cannot be altered once created. If a"]},{"entry":["** o_ppElement);","Parent reference is supplied, the new element"]},{"entry":[{},"is created as a child of that parent."]},{"entry":["CreateElementCopy (IGrooveElement *","Does a deep\/shallow copy of the specified"]},{"entry":["i_pSource, IGrooveElement *","element and all of its children (recursively for"]},{"entry":["i_pParent, VARIANT_BOOL","deep; just the one level for shallow), putting"]},{"entry":["i_ShallowCopy, IGrooveElement **","the new element(s) in under the Parent"]},{"entry":["o_ppElement);","element."]},{"entry":["CreateElementFromSchema (BSTR","Creates an element that conforms to the"]},{"entry":["i_Name, IGrooveElement * i_pParent,","element's definition in the schema. Creates"]},{"entry":["IGrooveElement ** o_ppElement);","the element, its attributes, and any child"]},{"entry":[{},"elements."]},{"entry":["CreateElementFromStream","Using a parser, creates an element, reads"]},{"entry":["(IGrooveByteInputStream * i_pStream,","from a byte input stream and creates"]},{"entry":["GrooveParseOptions i_ParseOptions,","elements and attributes from the text stream"]},{"entry":["IUnknown * i_pParent, IUnknown *","as necessary, inserting them into the element,"]},{"entry":["i_pLinkCallback, IGrooveElement **","which is then returned to the caller. If a"]},{"entry":["o_ppElement);","Parent reference is supplied, the new element"]},{"entry":[{},"is created as a child of that parent."]},{"entry":["CreateLocator (IGrooveLocator **","Returns the interface to a new locator object."]},{"entry":"o_ppLocator);"},{"entry":["FindElementByID (BSTR i_ID,","Looks for an element of the specified ID and"]},{"entry":["IGrooveElement ** o_ppElement,","returns a boolean value if found."]},{"entry":"VARIANT_BOOL * o_pFound);"},{"entry":["OpenElementByID (BSTR i_ID,","Looks for an element of the specified ID."]},{"entry":"IGrooveElement **o_ppElement);"},{"entry":["OpenElementEnumByAttributeValue","Returns an enumeration of all of the elements"]},{"entry":["(BSTR i_ElementName, BSTR","within the document that have the named"]},{"entry":["i_AttributeName, BSTR","attribute with the specified value."]},{"entry":"i_AttributeValue, IGrooveElementEnum"},{"entry":"**o_ppElementEnum);"},{"entry":["OpenElementEnumByAttributeValueAs","Returns an enumeration of all of the elements"]},{"entry":["Bool (BSTR i_ElementName, BSTR","within the document that have the named"]},{"entry":["i_AttributeName, VARIANT_BOOL","attribute with the specified boolean type"]},{"entry":["i_AttributeValue, IGrooveElementEnum","value."]},{"entry":"**o_ppElementEnum);"},{"entry":["OpenElementEnumByAttributeValueAs","Returns an enumeration of all of the elements"]},{"entry":["Double (BSTR i_ElementName, BSTR","within the document that have the named"]},{"entry":["i_AttributeName, double","attribute with the specified double floating"]},{"entry":["i_AttributeValue, IGrooveElementEnum","type value."]},{"entry":"**o_ppElementEnum);"},{"entry":["OpenElementEnumByAttributeValueAs","Returns an enumeration of all of the elements"]},{"entry":["Long (BSTR i_AttributeName, long","within the document that have the named"]},{"entry":["i_AttributeValue, IGrooveElementEnum","attribute with the specified long integer type"]},{"entry":["**o_ppElementEnum);","value."]},{"entry":["OpenElementEnumByLocator (BSTR","Returns an element enumerator with"]},{"entry":["i_LocatorText, IGrooveElementEnum **","references to all elements satisfying the"]},{"entry":["o_ppElementEnum);","specified element locator expression. If there"]},{"entry":[{},"are no matching elements, the element"]},{"entry":[{},"enumerator will be created with no contents."]},{"entry":["OpenElementEnumByName (BSTR","Returns an enumeration of all of the elements"]},{"entry":["i_Name, IGrooveElementEnum **","within the document that have the specified"]},{"entry":["o_ppElementEnum);","tag name."]},{"entry":["OpenMetaElement (IGrooveElement **","Returns the interface to the meta element that"]},{"entry":["o_ppElement);","defines this XML document."]},{"entry":["OpenRootElement (IGrooveElement **","Opens the root element for the XML"]},{"entry":["o_ppRootElement);","document."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 12 illustrates the methods for an interface  (IGrooveBinaryDocument) for a client of a storage manager that needs to manage binary documents within a database. Binary documents are a sub-class of documents, that is, all of the methods for IGrooveDocument also apply to IGrooveBinaryDocument.",{"@attributes":{"id":"p-0135","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 12"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveBinaryDocument : IGrooveDocument"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OpenByteInputStream","Returns the interface to a byte stream"]},{"entry":["(IGrooveByteInputStream **","object that can be used to read bytes"]},{"entry":["o_ppByteInputStream);","within the binary document."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 13 illustrates an interface  (IGrooveLocator) for a client of a storage manager that needs to search for elements using locator queries as defined in a specification called XSLT. Details of the XSLT specification can be found at web address www.w3.org\/TR\/xslt. The storage manager locator interface includes the following methods:",{"@attributes":{"id":"p-0137","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 13"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveLocator : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["FindElement (BSTR i_LocatorStr,","Returns an interface to the element object"]},{"entry":["IGrooveElement * i_pContextElement,","that satisfies the search specified by the"]},{"entry":["IGrooveElement ** o_ppElement,","Locator string within the scope of the context"]},{"entry":["VARIANT_BOOL * o_pFound);","element."]},{"entry":["Invalidate (VARIANT_BOOL","Clears the state information in the interface"]},{"entry":["i_AssignNewIDs);","instance."]},{"entry":["OpenElementEnum (BSTR","Returns an enumerator of all elements that"]},{"entry":["i_LocatorStr, IGrooveElement *","match the Locator string, collated according to"]},{"entry":["i_pContextElement, VARIANT_BOOL","the specified sorting criteria."]},{"entry":"i_Sort, BSTR i_SortConstraint, BSTR"},{"entry":"i_SortKey, GrooveSortOrder"},{"entry":"i_SortOrder, IGrooveElementEnum **"},{"entry":"o_ppElements);"},{"entry":["OpenElementEnumWithTumblers","Perform the search specified by the Locator"]},{"entry":["(BSTR i_LocatorStr, IGrooveElement","string on the elements pointed to by the"]},{"entry":["*i_pContextElement, VARIANT_BOOL","context element, returning the tumbler values"]},{"entry":["i_RelativeTumblers,","for each match as well as the matching"]},{"entry":["IGrooveBSTREnum ** o_ppTumblers,","elements, collated according to the specified"]},{"entry":["VARIANT_BOOL i_Sort, BSTR","sorting criteria."]},{"entry":"i_SortConstraint, BSTR i_SortKey,"},{"entry":"GrooveSortOrder i_SortOrder,"},{"entry":"IGrooveElementEnum **"},{"entry":"o_ppElements);"},{"entry":["OpenText (BSTR i_LocatorStr,","Returns the text from element or attribute that"]},{"entry":["IGrooveElement * i_pContextElement,","satisfies the search specified by the Locator"]},{"entry":["BSTR * o_pValue);","string within the scope of the context element."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 14 illustrates an interface  (IGrooveTransform) for a client of a storage manager that needs to perform XML document transformations as defined in XSLT. The storage manager transform interface includes the following methods:",{"@attributes":{"id":"p-0139","num":"0141"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 14"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveTransform : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TransformXMLDocument","Transforms the input XML document,"]},{"entry":["(IGrooveXMLDocument *","returning the result of the transformation in"]},{"entry":["i_pXMLDocument, IGrooveElement *","ResultDocument."]},{"entry":"i_pStartElement, BSTR i_SortRule,"},{"entry":"long i_StartElementNum, long"},{"entry":"i_NumElements,"},{"entry":"IGrooveXMLDocument *"},{"entry":"io_pResultDocument, VARIANT_BOOL"},{"entry":"i_AlwaysOutputHeader, long *"},{"entry":"o_pElementsProcessed);"},{"entry":["TransformElement (IGrooveElement *","Transforms the input ContextElement,"]},{"entry":["i_pContextElement, BSTR","returning the result of the transformation in"]},{"entry":["i_TansformationTemplate,","ResultDocument."]},{"entry":"IGrooveXMLDocument **"},{"entry":"o_ppResultDocument);"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 15 illustrates an interface  (IGrooveElement) which allows a client of a storage manager to manipulate elements within XML documents. The storage manager element interface includes the following methods:",{"@attributes":{"id":"p-0141","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 15"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveElement : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AppendContent (BSTR i_Text,","Inserts the kind of content as the last of its"]},{"entry":["GrooveContentType i_Type);","type within this element."]},{"entry":["AppendContentElement","Inserts the element as the last content"]},{"entry":["(IGrooveElement * i_pElement);","element."]},{"entry":["AppendContentProcessingInstruction","Inserts a processing instruction, with target"]},{"entry":["(BSTR i_Target, BSTR i_Text);","Target, as the last processing instruction."]},{"entry":["CreateElement (BSTR i_Name,","Create a new element in the same"]},{"entry":["IGrooveElement * i_pParent,","document."]},{"entry":"IGrooveElement ** o_ppElement);"},{"entry":["CreateElementCopy (IGrooveElement *","Does a deep\/shallow copy of the specified"]},{"entry":["i_pSource, IGrooveElement * i_pParent,","element and all of its children (recursively for"]},{"entry":["VARIANT_BOOL i_ShallowCopy,","deep; just the one level for shallow), putting"]},{"entry":["IGrooveElement ** o_ppElement);","the new element(s) in the destination"]},{"entry":[{},"document. The returned element must be"]},{"entry":[{},"attached into the document's element tree."]},{"entry":["CreateElementFromSchema (BSTR","Creates an element that conforms to the"]},{"entry":["i_Name, IGrooveElement * i_pParent,","element's definition in the schema. Creates"]},{"entry":["IGrooveElement ** o_ppElement);","the element, its attributes, and any child"]},{"entry":[{},"elements."]},{"entry":["CreateElementRPCClient","Creates and returns the interface to the"]},{"entry":["(IGrooveElementRPCClient","element RPC client."]},{"entry":"**o_ppRPCClient);"},{"entry":["CreateElementRPCServer","Creates and returns the interface to the"]},{"entry":["(IGrooveElementRPCServer **","element RPC server."]},{"entry":"o_ppRPCServer);"},{"entry":["CreateElementRPCServerThread","Creates and returns the interface to the"]},{"entry":["(IGrooveElementRPCServerCallback *","element RPC server thread."]},{"entry":"i_pCallback,"},{"entry":"IGrooveElementRPCServerThread **"},{"entry":"o_ppRPCServerThread);"},{"entry":["CreateLink (IGrooveDocument *","Creates a link to another document, using"]},{"entry":["i_pDocument, BSTR i_Title, BSTR","the specified XLink parameters."]},{"entry":"i_Role, GrooveXLinkShow i_Show,"},{"entry":"GrooveXLinkActuate i_Actuate,"},{"entry":"GrooveXLinkSerialize i_Serialize);"},{"entry":["DecrementAttributeAsLong (BSTR","Subtracts 1 from the value of a long integer"]},{"entry":["i_Name, long * o_pOldValue);","type attribute."]},{"entry":["Delete ( );","Permanently removes the element from the"]},{"entry":[{},"document. No further operations may be"]},{"entry":[{},"performed on a deleted element"]},{"entry":["DeleteAllAttributes ( );","Removes all attributes from the element."]},{"entry":["DeleteAllContent ( );","Removes all child content elements and text"]},{"entry":[{},"from the element and deletes them from the"]},{"entry":[{},"document."]},{"entry":["DeleteAttribute (BSTR i_Name);","Removes the named attribute from the"]},{"entry":[{},"element."]},{"entry":["DeleteContent (long i_Ordinal);","Removes the content at the specified"]},{"entry":[{},"position from the element."]},{"entry":["DeleteLinkAttributes ( );","Removes all attributes that are links from the"]},{"entry":[{},"element."]},{"entry":["DetachFromParent ( );","Removes this element from the content of its"]},{"entry":[{},"parent. The element is still part of the"]},{"entry":[{},"document and must be reattached or"]},{"entry":[{},"destroyed before it is released."]},{"entry":["DoesAttributeExist (BSTR i_Name,","Returns whether the attribute is set on the"]},{"entry":["VARIANT_BOOL * o_pFound);","element."]},{"entry":["Duplicate (IGrooveElement *","Make the specified target element a"]},{"entry":["i_pTargetElement, VARIANT_BOOL","duplicate of this element, overriding"]},{"entry":["i_ShallowDuplicate);","attributes and, if ShallowDuplicate is FALSE,"]},{"entry":[{},"all descendent elements."]},{"entry":["FindAttribute (BSTR i_Name, BSTR *","Gets any arbitrary attribute as text. If the"]},{"entry":["o_pValue, VARIANT_BOOL *","attribute is not in the element, Found is"]},{"entry":["o_pFound);","FALSE and no value is returned."]},{"entry":["FindAttributeAsBinary (BSTR i_Name,","Gets any arbitrary attribute as Binary. The"]},{"entry":["IGrooveByteInputStream ** o_ppValue,","attribute must have been set as the given"]},{"entry":["VARIANT_BOOL *o_pFound);","type or be specified as that type in the"]},{"entry":[{},"document schema. If the attribute is not in"]},{"entry":[{},"the element, Found is FALSE and no value"]},{"entry":[{},"is returned."]},{"entry":["FindAttributeAsBinaryArray (BSTR","Gets any arbitrary attribute as Binary and"]},{"entry":["i_Name, SAFEARRAY(BYTE) *","return the value in an array. The attribute"]},{"entry":["o_ppValue, VARIANT_BOOL *","must have been set as the given type or be"]},{"entry":["o_pFound);","specified as that type in the document"]},{"entry":[{},"schema. If the attribute is not in the"]},{"entry":[{},"element, Found is FALSE and no value is"]},{"entry":[{},"returned."]},{"entry":["FindAttributeAsBinaryToStream (BSTR","Gets any arbitrary attribute as Binary and"]},{"entry":["i_Name, IGrooveByteOutputStream *","returns the value in a stream. The attribute"]},{"entry":["i_pStream, VARIANT_BOOL","must have been set as the given type or be"]},{"entry":["*o_pFound);","specified as that type in the document"]},{"entry":[{},"schema. If the attribute is not in the"]},{"entry":[{},"element, Found is FALSE and no value is"]},{"entry":[{},"returned."]},{"entry":["FindAttributeAsBool (BSTR i_Name,","Gets any arbitrary attribute as Boolean. The"]},{"entry":["VARIANT_BOOL * o_pValue,","attribute must have been set as the given"]},{"entry":["VARIANT_BOOL * o_pFound);","type or be specified as that type in the"]},{"entry":[{},"document schema. If the attribute is not in"]},{"entry":[{},"the element, Found is FALSE and no value"]},{"entry":[{},"is returned."]},{"entry":["FindAttributeAsDouble (BSTR i_Name,","Gets any arbitrary attribute as Double. The"]},{"entry":["double * o_pValue, VARIANT_BOOL *","attribute must have been set as the given"]},{"entry":["o_pFound);","type or be specified as that type in the"]},{"entry":[{},"document schema. If the attribute is not in"]},{"entry":[{},"the element, Found is FALSE and no value"]},{"entry":[{},"is returned."]},{"entry":["FindAttributeAsGrooveID (BSTR","Gets any arbitrary attribute as a Groove"]},{"entry":["i_Name, double * o_pValue,","identifier. The attribute must have been set"]},{"entry":["VARIANT_BOOL * o_pFound);","as the given type or be specified as that type"]},{"entry":[{},"in the document schema. If the attribute is"]},{"entry":[{},"not in the element, Found is FALSE and no"]},{"entry":[{},"value is returned."]},{"entry":["FindAttributeAsLong (BSTR i_Name,","Gets any arbitrary attribute as Long. The"]},{"entry":["long * o_pValue, VARIANT_BOOL *","attribute must have been set as the given"]},{"entry":["o_pFound);","type or be specified as that type in the"]},{"entry":[{},"document schema. If the attribute is not in"]},{"entry":[{},"the element, Found is FALSE and no value"]},{"entry":[{},"is returned."]},{"entry":["FindAttributeAsVARIANT (BSTR","Gets any arbitrary attribute as a variant"]},{"entry":["i_Name, VARIANT * o_pValue,","value. If the attribute is not in the element,"]},{"entry":["VARIANT_BOOL * o_pFound);","Found is FALSE and no value is returned."]},{"entry":["FindContentElementByName (BSTR","Within the context of this element, find an"]},{"entry":["i_Name, IGrooveElement **","element with the specified tag name. If the"]},{"entry":["o_ppElement, VARIANT_BOOL *","element is not found, Found is FALSE and"]},{"entry":["o_p Found);","no element reference is returned."]},{"entry":["FindContentElementByNameAndAttribute","Within the context of this element, find an"]},{"entry":["(BSTR i_Name, BSTR","element with the specified tag name and"]},{"entry":["i_AttributeName, BSTR i_AttributeValue,","attribute name with the specified attribute"]},{"entry":["IGrooveElement ** o_ppElement,","value. If the element is not found, Found is"]},{"entry":["VARIANT_BOOL * o_pFound);","FALSE and no element reference is"]},{"entry":[{},"returned"]},{"entry":["FindParent (IGrooveElement **","Gets an object's parent element. An"]},{"entry":["o_ppParent, VARIANT_BOOL *","element can have only a single parent and"]},{"entry":["o_pFound);","may only be referenced from a single"]},{"entry":[{},"content entry of a single element. If the"]},{"entry":[{},"element does not have a parent, Found is"]},{"entry":[{},"FALSE and no value is returned."]},{"entry":["GetActuate (GrooveXLinkActuate *","Returns the value of the Actuate parameter"]},{"entry":["o_pActuate);","in this element's link attribute."]},{"entry":["GetAttributeCount (long * o_pCount);","Returns the number of attributes an element"]},{"entry":[{},"has."]},{"entry":["GetContentCount (long * o_pCount);","Returns the number of content and text"]},{"entry":[{},"entries in this element."]},{"entry":["GetContentType (long i_Ordinal,","Returns the type of content at the specified"]},{"entry":["GrooveContentType * o_pType);","ordinal position."]},{"entry":["GetOrdinal (long * o_pOrdinal);","Gets the ordinal position within the parent's"]},{"entry":[{},"content of this element."]},{"entry":["GetSerialize (GrooveXLinkSerialize *","Returns the value of the Serialize parameter"]},{"entry":["o_pSerialize);","in this element's link attribute."]},{"entry":["GetShow (GrooveXLinkShow *","Returns the value of the Show parameter in"]},{"entry":["o_pShow);","this element's link attribute."]},{"entry":["IncrementAttributeAsLong (BSTR","Adds 1 to the value of a long integer type"]},{"entry":["i_Name, long * o_pOldValue);","attribute."]},{"entry":["InsertContent (long i_Ordinal, BSTR","Inserts the text entry at the specified ordinal"]},{"entry":["i_Text, GrooveContentType i_Type);","location"]},{"entry":["InsertContentElement (long i_Ordinal,","Inserts the element at the specified ordinal"]},{"entry":["IGrooveElement * i_pElement);","location"]},{"entry":["InsertContentProcessingInstruction (long","Inserts a Text processing instruction, with"]},{"entry":["i_Ordinal, BSTR i_Target, BSTR i_Text);","target Target, at the specified ordinal"]},{"entry":[{},"position."]},{"entry":["IsLinkElement (VARIANT_BOOL *","Determines whether or not the element"]},{"entry":["o_plsLink);","contains XLink markup."]},{"entry":["IsReferenced (VARIANT_BOOL *","Returns TRUE if this element is referenced."]},{"entry":"o_plsReferenced);"},{"entry":["IsSame (IGrooveElement * i_pElement,","Returns TRUE if the specified element"]},{"entry":["VARIANT_BOOL * o_plsSame);","object is this element or equal to this"]},{"entry":[{},"element."]},{"entry":["OpenAttribute (BSTR i_Name, BSTR","Gets any arbitrary attribute as text."]},{"entry":"*o_pValue);"},{"entry":["OpenAttributeAsBinary (BSTR i_Name,","Gets any arbitrary attribute as Binary. The"]},{"entry":["IGrooveByteInputStream ** o_ppValue);","attribute must have been set as the given"]},{"entry":[{},"type or be specified as that type in the"]},{"entry":[{},"document schema."]},{"entry":["OpenAttributeAsBinaryArray (BSTR","Gets any arbitrary attribute as Binary and"]},{"entry":["i_Name, SAFEARRAY(BYTE) *","return the value in an array. The attribute"]},{"entry":["o_ppValue);","must have been set as the given type or be"]},{"entry":[{},"specified as that type in the document"]},{"entry":[{},"schema."]},{"entry":["OpenAttributeAsBinaryToStream (BSTR","Gets any arbitrary attribute as Binary and"]},{"entry":["i_Name, IGrooveByteOutputStream *","returns the value in a stream. The attribute"]},{"entry":["i_pStream);","must have been set as the given type or be"]},{"entry":[{},"specified as that type in the document"]},{"entry":[{},"schema."]},{"entry":["OpenAttributeAsBool (BSTR i_Name,","Gets any arbitrary attribute as Boolean. The"]},{"entry":["VARIANT_BOOL * o_pValue);","attribute must have been set as the given"]},{"entry":[{},"type or be specified as that type in the"]},{"entry":[{},"document schema."]},{"entry":["OpenAttributeAsDouble (BSTR i_Name,","Gets any arbitrary attribute as Double. The"]},{"entry":["double * o_pValue);","attribute must have been set as the given"]},{"entry":[{},"type or be specified as that type in the"]},{"entry":[{},"document schema."]},{"entry":["OpenAttributeAsGrooveID (BSTR","Gets any arbitrary attribute as a Groove"]},{"entry":["i_Name, double * o_pValue);","identifier. The attribute must have been set"]},{"entry":[{},"as the given type or be specified as that type"]},{"entry":[{},"in the document schema."]},{"entry":["OpenAttributeAsLong (BSTR i_Name,","Gets any arbitrary attribute as Long. The"]},{"entry":["long * o_pValue);","attribute must have been set as the given"]},{"entry":[{},"type or be specified as that type in the"]},{"entry":[{},"document schema."]},{"entry":["OpenAttributeAsVARIANT (BSTR","Gets any arbitrary attribute as a variant"]},{"entry":["i_Name, VARIANT * o_pValue);","value."]},{"entry":["OpenAttributeEnum","Enumerates all of the element's attributes as"]},{"entry":["(IGrooveStringStringEnum **","text."]},{"entry":"o_ppAttributes);"},{"entry":["OpenAttributeVariantEnum","Enumerates all of the element's attributes as"]},{"entry":["(IGrooveNameValueEnum **","variant data types."]},{"entry":"o_ppEnum);"},{"entry":["OpenBoundCode (IGrooveBoundCode","Returns an instance of the object bound to"]},{"entry":["** o_ppBoundCode);","the element."]},{"entry":["OpenContentComment (long i_Ordinal,","Returns the text of the comment that is a"]},{"entry":["BSTR * o_pComment);","contained in this element at the specified"]},{"entry":[{},"Ordinal position."]},{"entry":["OpenContentElement_(long i_Ordinal,","Returns the child element interface that is a"]},{"entry":["IGrooveElement ** o_ppElement);","contained in this element at the specified"]},{"entry":[{},"Ordinal position."]},{"entry":["OpenContentElementByName (BSTR","Within the context of this element, find an"]},{"entry":["i_Name, IGrooveElement **","element with the specified tag name and"]},{"entry":["o_ppElement);","return its interface."]},{"entry":["OpenContentElementByNameAndAttribute","Within the context of this element, find an"]},{"entry":["(BSTR i_Name, BSTR","element with the specified tag name and"]},{"entry":["i_AttributeName, BSTR i_AttributeValue,","attribute name with the specified attribute"]},{"entry":["IGrooveElement ** o_ppElement);","value."]},{"entry":["OpenContentElementEnum","Returns an enumeration of all child content"]},{"entry":["(IGrooveElementEnum **","elements (non-recursively)."]},{"entry":"o_ppElements);"},{"entry":["OpenContentElementEnumByName","Returns an enumeration of all child content"]},{"entry":["(BSTR i_Name, IGrooveElementEnum **","elements (non-recursively). Only elements"]},{"entry":["o_ppElements);","with the given name will be returned."]},{"entry":["OpenContentElementEnumByNameAnd","Returns an enumeration of all content"]},{"entry":["Attribute (BSTR i_Name, BSTR","elements within the scope of this element"]},{"entry":["i_AttributeName, BSTR i_AttributeValue,","that have the specified tag name and"]},{"entry":["IGrooveElementEnum ** o_ppElements);","attribute name with the specified attribute"]},{"entry":[{},"value."]},{"entry":["OpenContentProcessingInstruction (long","Returns the XML processing instruction at"]},{"entry":["i_Ordinal, BSTR * o_pTarget, BSTR *","the specified ordinal position."]},{"entry":"o_pText);"},{"entry":["OpenContentProcessingInstructionTarget","Returns the target of the XML processing"]},{"entry":["(long i_Ordinal, BSTR * o_pTarget);","instruction at the specified ordinal position."]},{"entry":["OpenContentProcessingInstructionText","Returns the PI text of the XML processing"]},{"entry":["(long i_Ordinal, BSTR * o_pText);","instruction at the specified ordinal position."]},{"entry":["OpenContentText (long i_Ordinal, BSTR","Returns the context text at the specified"]},{"entry":["* o_pText);","ordinal position."]},{"entry":["OpenContentTextEnum","Enumerates the text entries"]},{"entry":["(IGrooveBSTREnum ** o_ppText);","(non-recursively)."]},{"entry":["OpenElementQueue","Create an element queue on the element."]},{"entry":["(IGrooveElementQueue ** o_ppQueue);","The element queue does not affect the"]},{"entry":[{},"element's structure."]},{"entry":["OpenElementReferenceQueue","Returns the interface to reference queue"]},{"entry":["(IGrooveElementReferenceQueue **","object."]},{"entry":"o_ppQueue);"},{"entry":["OpenHRef (BSTR * o_pHref);","Returns the value of the HREF parameter in"]},{"entry":[{},"this element's link attribute."]},{"entry":["OpenLinkAttributes (BSTR * o_pHref,","Retrieves all the standard link elements."]},{"entry":["BSTR * o_pTitle, BSTR * o_pRole,","Note: not all the attributes are mandatory"]},{"entry":"GrooveXLinkShow * o_pShow,"},{"entry":"GrooveXLinkActuate * o_pActuate,"},{"entry":"GrooveXLinkSerialize * o_pSerialize);"},{"entry":["OpenLinkedBinaryDocument","Returns the interface to the binary document"]},{"entry":["(VARIANT_BOOL i_SingleProcess,","that is referenced in the HREF parameter in"]},{"entry":["IUnknown * i_pSecurityContext,","this element's link attribute."]},{"entry":"IGrooveBinaryDocument **"},{"entry":"o_ppDocument);"},{"entry":["OpenLinkedXMLDocument","Returns the interface to the XML document"]},{"entry":["(VARIANT_BOOL i_SingleProcess,","that is referenced in the HREF parameter in"]},{"entry":["IUnknown * i_pSecurityContext,","this element's link attribute."]},{"entry":"IGrooveXMLDocument **"},{"entry":"o_ppDocument);"},{"entry":["OpenMultiReaderElementQueueReader","Create an element multi-reader queue on"]},{"entry":["(IGrooveMultiReaderElementQueueReader","the element and add a reader. This could"]},{"entry":["** o_ppQueue);","change the structure of the element."]},{"entry":["OpenMultiReaderElementQueueWriter","Create an element multi-writer queue on the"]},{"entry":["(GrooveMultiReaderQueueOptions","element and add a writer. This could"]},{"entry":["i_Options,","change the structure of the element."]},{"entry":"IGrooveMultiReaderElementQueueWriter"},{"entry":"** o_ppQueue);"},{"entry":["OpenMultiReaderElementReferenceQueue","Returns the interface to the multi-reader"]},{"entry":["Reader","element reference queue reader object."]},{"entry":"(IGrooveMultiReaderElementQueueReader"},{"entry":"** o_ppQueue);"},{"entry":["OpenMultiReaderElementReferenceQueue","Returns the interface to the multi-reader"]},{"entry":["Writer","element reference queue writer object."]},{"entry":"(GrooveMultiReaderQueueOptions"},{"entry":"i_Options,"},{"entry":"IGrooveMultiReaderElementQueueWriter"},{"entry":"** o_ppQueue);"},{"entry":["OpenName (BSTR * o_pName);","Returns the element's tag name."]},{"entry":["OpenParent (IGrooveElement **","Gets an object's parent element. An"]},{"entry":["o_ppParent);","element can have only a single parent and"]},{"entry":[{},"may only be referenced from a single"]},{"entry":[{},"content entry of a single element."]},{"entry":["OpenReadOnlyElement","Return the read-only element interface to"]},{"entry":["(VARIANT_BOOL i_AllowOpenParent,","this element."]},{"entry":"IGrooveReadOnlyElement **"},{"entry":"o_ppReadOnlyElement);"},{"entry":["OpenReference","Returns the element reference interface to"]},{"entry":["(IGrooveElementReference **","this element."]},{"entry":"o_ppElementReference);"},{"entry":["OpenRole (BSTR * o_pRole);","Returns the value of the Role parameter in"]},{"entry":[{},"this element's link attribute."]},{"entry":["OpenTitle (BSTR * o_pTitle);","Returns the value of the Title parameter in"]},{"entry":[{},"this element's link attribute."]},{"entry":["OpenURI (BSTR * o_pName);","Returns the URI to this element."]},{"entry":["OpenXMLDocument","Returns the interface pointer to the XML"]},{"entry":["(IGrooveXMLDocument **","document containing this element."]},{"entry":"o_ppDocument);"},{"entry":["Serialize (GrooveSerializeType i_Type,","Serializes the element to a stream with the"]},{"entry":["enum GrooveCharEncoding i_Encoding,","specified encoding and options."]},{"entry":"GrooveSerializeOptions i_Options,"},{"entry":"IGrooveByteInputStream **"},{"entry":"o_ppStream);"},{"entry":["SerializeReturnAdditionalLinkedDocuments","Serializes the element to a stream with the"]},{"entry":["(GrooveSerializeType i_Type, enum","specified encoding and options. Returns an"]},{"entry":["GrooveCharEncoding i_Encoding,","enumeration of interfaces to documents"]},{"entry":["GrooveSerializeOptions i_Options,","referenced by links in this element and all"]},{"entry":["IGrooveDocumentEnum **","descendents."]},{"entry":"o_ppAdditionalLinkedDocuments,"},{"entry":"IGrooveByteInputStream **"},{"entry":"o_ppStream);"},{"entry":["SerializeToStream","Serializes the element to a stream with the"]},{"entry":["(IGrooveByteOutputStream * i_pStream,","specified encoding and options."]},{"entry":"GrooveSerializeType i_Type, enum"},{"entry":"GrooveCharEncoding i_Encoding,"},{"entry":"GrooveSerializeOptions i_Options);"},{"entry":["SerializeToStreamReturnAdditionalLinked","Serializes the element to a stream with the"]},{"entry":["Documents (IGrooveByteOutputStream","specified encoding and options. Returns an"]},{"entry":["* i_pStream, GrooveSerializeType","enumeration of interfaces to documents"]},{"entry":["i_Type, enum GrooveCharEncoding","referenced by links in this element and all"]},{"entry":["i_Encoding, GrooveSerializeOptions","descendents."]},{"entry":"i_Options, IGrooveDocumentEnum **"},{"entry":"o_ppAdditionalLinkedDocuments);"},{"entry":["SetAttribute (BSTR i_Name, BSTR","Sets any arbitrary attribute as text."]},{"entry":"i_Value);"},{"entry":["SetAttributeAsBinary (BSTR i_Name,","Sets any arbitrary attribute as Binary. The"]},{"entry":["IGrooveByteInputStream * i_pValue);","attribute must have been set as the given"]},{"entry":[{},"type or be specified as that type in the"]},{"entry":[{},"document schema."]},{"entry":["SetAttributeAsBinaryArray (BSTR","Sets any arbitrary attribute as Binary and"]},{"entry":["i_Name, SAFEARRAY(BYTE) *","returns the value in an array. The attribute"]},{"entry":["i_pValue);","must have been set as the given type or be"]},{"entry":[{},"specified as that type in the document"]},{"entry":[{},"schema."]},{"entry":["SetAttributeAsBool (BSTR i_Name,","Sets any arbitrary attribute as Boolean. The"]},{"entry":["VARIANT_BOOL i_Value);","attribute must have been set as the given"]},{"entry":[{},"type or be specified as that type in the"]},{"entry":[{},"document schema."]},{"entry":["SetAttributeAsDouble (BSTR i_Name,","Sets any arbitrary attribute as Double. The"]},{"entry":["double i_Value);","attribute must have been set as the given"]},{"entry":[{},"type or be specified as that type in the"]},{"entry":[{},"document schema."]},{"entry":["SetAttributeAsGrooveID (BSTR i_Name,","Sets any arbitrary attribute as a Groove"]},{"entry":["double i_pValue);","identifier. The attribute must have been set"]},{"entry":[{},"as the given type or be specified as that type"]},{"entry":[{},"in the document schema."]},{"entry":["SetAttributeAsLong (BSTR i_Name, long","Sets any arbitrary attribute as Long. The"]},{"entry":["i_Value);","attribute must have been set as the given"]},{"entry":[{},"type or be specified as that type in the"]},{"entry":[{},"document schema."]},{"entry":["SetAttributeAsVARIANT (BSTR i_Name,","Sets any arbitrary attribute using a Variant,"]},{"entry":["VARIANT * i_pValue);","which may be any variant type."]},{"entry":["SetContent (long i_Ordinal, BSTR","Sets the content as the type's ordinal"]},{"entry":["i_Text, GrooveContentType i_Type);","position to the specified text. Note that"]},{"entry":[{},"content of different types have independent"]},{"entry":[{},"ordinal positions."]},{"entry":["SetContentElement (long i_Ordinal,","Set the content element at the specified"]},{"entry":["IGrooveElement * i_pElement);","ordinal position."]},{"entry":["SetContentProcessingInstruction (long","Set the content processing instruction at the"]},{"entry":["i_Ordinal, BSTR i_Target, BSTR i_Text);","specified ordinal position."]},{"entry":["SetContentTextEnum","Creates text entries, separated by <BR>"]},{"entry":["(IGrooveBSTREnum * i_pEnum);","elements, for each text string in the"]},{"entry":[{},"enumerator."]},{"entry":["SetLinkAttributes (BSTR i_Href, BSTR","Sets the link attributes needed to make the"]},{"entry":["i_Title, BSTR i_Role, GrooveXLinkShow","element a link element, including the"]},{"entry":["i_Show, GrooveXLinkActuate i_Actuate,","\u2018xml:link\u2019 attribute, which is implicitly set to"]},{"entry":["GrooveXLinkSerialize i_Serialize);","\u2018simple\u2019."]},{"entry":["SetName (BSTR i_Name);","Sets the name of the element."]},{"entry":["SetTempAttribute (BSTR i_Name, BSTR","Sets an attribute with a temporary value,"]},{"entry":["i_Value);","which will not be committed in a transaction."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 16 illustrates the methods for an interface  (IGrooveReadOnlyElement) for a client of a storage manager that needs to manipulate read-only elements within XML documents. Read-only elements are a sub-class of elements, that is, all of the methods for IGrooveElement also apply to IGrooveReadOnlyElement.",{"@attributes":{"id":"p-0143","num":"0145"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 16"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveReadOnlyElement : IGrooveElement"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OpenReadOnlyParent","Returns a read-only element interface to the"]},{"entry":["(IGrooveReadOnlyElement **","parent of this element."]},{"entry":"o_ppParent);"},{"entry":["OpenContentReadOnlyElement (long","Returns a read-only element interface to the"]},{"entry":["i_Ordinal, IGrooveReadOnlyElement **","content element at the specified Ordinal"]},{"entry":["o_ppElement);","position."]},{"entry":["OpenContentReadOnlyElementByName","Within the context of this element, find an"]},{"entry":["(BSTR i_Name,","element with the specified tag name and"]},{"entry":["IGrooveReadOnlyElement **","return its read-only interface."]},{"entry":"o_ppElement);"},{"entry":["FindContentReadOnlyElementByName","Within the context of this element, find an"]},{"entry":["(BSTR i_Name,","element with the specified tag name and"]},{"entry":["IGrooveReadOnlyElement **","return its read-only interface. If the element is"]},{"entry":["o_ppElement, VARIANT_BOOL *","not found, Found is FALSE and no element"]},{"entry":["o_pFound);","reference is returned."]},{"entry":["OpenContentReadOnlyElementEnum","Returns an enumeration of all child content"]},{"entry":["(IGrooveReadOnlyElementEnum **","elements read-only interfaces"]},{"entry":["o_ppElements);","(non-recursively)."]},{"entry":["OpenContentReadOnlyElementEnumByName","Returns an enumeration of all child content"]},{"entry":["(BSTR i_Name,","elements read-only interfaces"]},{"entry":["IGrooveReadOnlyElementEnum **","(non-recursively). Only elements with the"]},{"entry":["o_ppElements);","given name will be returned."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 17 illustrates an interface  (IGrooveElementReference) for a client of a storage manager that needs to manipulate element references within XML documents. The storage manager element reference interface includes the following methods:",{"@attributes":{"id":"p-0145","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 17"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveElementReference : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OpenElement","Returns a read-only element interface to"]},{"entry":["(IgrooveReadOnlyElement **","the referenced element."]},{"entry":"o_ppElement);"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"An interface  (IGrooveElementUtilBase) for use within the storage manager's other interfaces is shown in Table 18. The IGrooveElementUtilBase is not an interface for commonly-used objects, but is intended to serve as the base class for other sub-classes (shown in ) that do have commonly-used objects. All of the \u201cutil\u201d interfaces are associated with an element. The storage manager element util base interface includes the following methods:",{"@attributes":{"id":"p-0147","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 18"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveElementUtilBase : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OpenDocument","Returns the interface of the"]},{"entry":["(IgrooveXMLDocument **","containing XML document."]},{"entry":"o_ppDocument);"},{"entry":["OpenElement (IGrooveElement **","Returns the element's interface."]},{"entry":"o_ppElement);"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 19 illustrates an interface  (IGrooveBoundCode) for a client of a storage manager that needs to handle executable code associated with elements within XML documents. The storage manager bound code interface includes the following methods:",{"@attributes":{"id":"p-0149","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 19"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveBoundCode : IDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SetElement (IGrooveElement *","Sets the element interface pointer"]},{"entry":["i_pElement);","associated with this element tag."]},{"entry":["OpenElement (IGrooveElement **","Retrieves the element interface"]},{"entry":["o_ppElement);","pointer associated with"]},{"entry":[{},"this element tag."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0150","num":"0152"},"figref":"FIG. 13","b":["1300","1302"]},{"@attributes":{"id":"p-0151","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 20"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveElementQueue : IGrooveElementUtilBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Enqueue (IGrooveElement *","Enqueues the element. Note that the element"]},{"entry":["i_pElement);","must already be contained in the queue's"]},{"entry":[{},"document."]},{"entry":["Dequeue (long i_TimeoutMilliseconds,","Dequeues the next available element in the"]},{"entry":["IGrooveElement ** o_ppElement);","queue. Returns only when an element is"]},{"entry":[{},"available or after the timeout period. The"]},{"entry":[{},"returned IGrooveElement pointer will be NULL"]},{"entry":[{},"if the timeout period expires."]},{"entry":["DequeueEnum (long","Dequeues all available elements in the queue."]},{"entry":["i_TimeoutMilliseconds,","Returns only when an element is available or"]},{"entry":["IGrooveElementEnum **","after the timeout period. The returned"]},{"entry":["o_ppElements);","IGrooveElement pointer will be NULL if the"]},{"entry":[{},"timeout period expires."]},{"entry":["OpenEvent (IGrooveEvent **","Returns an event that can be used to \u2018Wait\u2019"]},{"entry":["o_ppEvent);","for an element to be enqueued"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 21 illustrates an interface  (IGrooveElementReferenceQueue) for a client of a storage manager that needs to manipulate queues on element references within XML documents. Element reference queues are a sub-class of the \u201cutil\u201d base class, that is, all of the methods for IGrooveElementUtilBase also apply to IGrooveElementReferenceQueue. The storage manager element reference queue interface includes the following methods:",{"@attributes":{"id":"p-0153","num":"0155"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 21"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveElementReferenceQueue : IGrooveElementUtilBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Enqueue (IGrooveElement *","Enqueues the element. Note that the element"]},{"entry":["i_pElement);","must already be contained in the queue's"]},{"entry":[{},"document."]},{"entry":["EnqueueReference (IGrooveElement *","Enqueues a reference to the element. Note"]},{"entry":["i_pElement);","that the element must already be contained in"]},{"entry":[{},"the queue's document."]},{"entry":["Dequeue (long i_TimeoutMilliseconds,","Dequeues the next available element in the"]},{"entry":["IGrooveElementReference **","queue. Returns only when an element is"]},{"entry":["o_ppElementReference);","available or after the timeout period. The"]},{"entry":[{},"returned IGrooveElementReference pointer"]},{"entry":[{},"will be NULL if the timeout period expires."]},{"entry":["DequeueEnum (long","Dequeues all available elements in the queue."]},{"entry":["i_TimeoutMilliseconds,","Returns only when an element is available or"]},{"entry":["IGrooveElementReferenceEnum **","after the timeout period. The returned"]},{"entry":["o_ppElementReferences);","IGrooveElementReferenceEnum pointer will"]},{"entry":[{},"be NULL if the timeout period expires."]},{"entry":["OpenEvent (IGrooveEvent **","Returns an event that can be used to \u2018Wait\u2019"]},{"entry":["o_ppEvent);","for an element to be enqueued"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 22 illustrates an interface  (IGrooveMultiReaderElementQueueReader) for a client of a storage manager that needs to remove elements from multi-reader queues on elements within XML documents. Multi-reader element queues are a sub-class of the \u201cutil\u201d base class, that is, all of the methods for IGrooveElementUtilBase also apply to IGrooveMultiReaderElementQueueReader. The storage manager multi-reader element queue reader interface includes the following methods:",{"@attributes":{"id":"p-0155","num":"0157"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 22"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveMultiReaderElementQueueReader : IGrooveElementUtilBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Dequeue (long i_TimeoutMilliseconds,","Dequeues the next available element in the"]},{"entry":["IGrooveElement ** o_ppElement);","queue. Returns only when an element is"]},{"entry":[{},"available or after the timeout period. The"]},{"entry":[{},"returned IGrooveElement pointer will be NULL"]},{"entry":[{},"if the timeout period expires."]},{"entry":["DequeueEnum (long","Dequeues all available elements in the queue."]},{"entry":["i_TimeoutMilliseconds,","Returns only when an element is available or"]},{"entry":["IGrooveElementEnum **","after the timeout period. The returned"]},{"entry":["o_ppElements);","IGrooveElement pointer will be NULL if the"]},{"entry":[{},"timeout period expires."]},{"entry":["OpenEvent (IGrooveEvent **","Returns an event that can be used to \u2018Wait\u2019"]},{"entry":["o_ppEvent);","for an element to be enqueued"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 23 illustrates an interface  (IGrooveMultiReaderElementQueueWriter) for a client of a storage manager that needs to add elements to multi-reader queues on elements within XML documents. Multi-reader element queues are a sub-class of the \u201cutil\u201d base class, that is, all of the methods for IGrooveElementUtilBase also apply to IGrooveMultiReaderElementQueueWriter. The storage manager multi-reader element queue writer interface includes the following methods:",{"@attributes":{"id":"p-0157","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 23"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveMultiReaderElementQueueWriter :"},{"entry":"IGrooveElementUtilBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Enqueue (IGrooveElement","Enqueues the element and returns the"]},{"entry":["*i_pElement, long *","number already enqueued. Note that the"]},{"entry":["o_pNumEnqueued);","element must already be contained in the"]},{"entry":[{},"queue's document."]},{"entry":["GetNumReaders (long *","Get the number of readers on the queue."]},{"entry":"o_pNumReaders);"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 24 illustrates an interface  (IGrooveMultiReaderElementReferenceQueueWriter) for a client of a storage manager that needs to add element references to multi-reader queues on elements within XML documents. Multi-reader element reference queues are a sub-class of the \u201cutil\u201d base class, that is, all of the methods for IGrooveElementUtilBase also apply to IGrooveMultiReaderElementReferenceQueueWriter. The storage manager multi-reader element reference queue writer interface includes the following methods:",{"@attributes":{"id":"p-0159","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 24"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveMultiReaderElementReferenceQueueWriter : IGrooveElementUtilBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Enqueue (IGrooveElement * i_pElement,","Enqueues the element and returns the"]},{"entry":["long * o_pNumEnqueued);","number already enqueued. Note that the"]},{"entry":[{},"element must already be contained in the queue's"]},{"entry":[{},"document."]},{"entry":["EnqueueReference (IGrooveElement *","Enqueues the element reference and"]},{"entry":["i_pElement, long * o_pNumEnqueued);","returns the number already enqueued."]},{"entry":[{},"Note that the element must already be"]},{"entry":[{},"contained in the queue's document."]},{"entry":["GetNumReaders (long *","Get the number of readers on the queue."]},{"entry":"o_pNumReaders);"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 25 illustrates an interface  (IGrooveMultiReaderElementReferenceQueueReader) for a client of a storage manager that needs to remove element references from multi-reader queues on elements within XML documents. Multi-reader element reference queues are a sub-class of the \u201cutil\u201d base class, that is, all of the methods for IGrooveElementUtilBase also apply to IGrooveMultiReaderElementReferenceQueueReader. The storage manager multi-reader element reference queue reader interface includes the following methods:",{"@attributes":{"id":"p-0161","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 25"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveMultiReaderElementReferenceQueueReader :"},{"entry":"IGrooveElementUtilBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Dequeue (long i_TimeoutMilliseconds","Dequeues the next available element"]},{"entry":["IGrooveElementReference **","reference in the queue. Returns only"]},{"entry":["o_ppElementReference);","when an element is available or after the"]},{"entry":[{},"timeout period. The returned"]},{"entry":[{},"IGrooveElementReference pointer will be"]},{"entry":[{},"NULL if the timeout period expires."]},{"entry":["DequeueEnum (long","Dequeues all available element references"]},{"entry":["i_TimeoutMilliseconds,","in the queue. Returns only when an"]},{"entry":["IGrooveElementReferenceEnum **","element is available or after the timeout"]},{"entry":["o_ppElementReferences);","period. The returned"]},{"entry":[{},"IGrooveElementReference pointer will be"]},{"entry":[{},"NULL if the timeout period expires."]},{"entry":["OpenEvent (IGrooveEvent ** o_ppEvent);","Returns an event that can be used to"]},{"entry":[{},"\u2018Wait\u2019 for an element to be enqueued"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 26 illustrates an interface  (IGrooveRPCClient) for a client of a storage manager that needs to perform remote procedure calls (RPCS) on elements within XML documents. RPC clients are a sub-class of the \u201cutil\u201d base class, that is, all of the methods for IGrooveElementUtilBase also apply to IGrooveRPCClient. The storage manager RPC client interface includes the following methods:",{"@attributes":{"id":"p-0163","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 26"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveElementRPCClient : IGrooveElementUtilBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DoCall (IGrooveElement * i_pInput,","Make a RPC, using the Input"]},{"entry":["IGrooveElement ** o_ppOutput);","element as the input parameters"]},{"entry":[{},"and receiving output parameters"]},{"entry":[{},"in the Output element."]},{"entry":["SendCall (IGrooveElement * i_pInput);","Make an asynchronous RPC,"]},{"entry":[{},"using the Input element"]},{"entry":[{},"as the input parameters."]},{"entry":["OpenResponseQueue","Returns the queue where"]},{"entry":["(IGrooveElementQueue **","responses are received."]},{"entry":"o_ppQueue);"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"An interface  (IGrooveRPCServerThread) for a client of a storage manager that needs to handle remote procedure calls (RPCs) on elements within XML documents is shown in Table 27. RPC server threads are a sub-class of the \u201cutil\u201d base class, that is, all of the methods for IGrooveElementUtilBase also apply to IGrooveRPCServerThread. The storage manager RPC server callback interface has no methods of its own, only those inherited from IGrooveElementUtilBase. It is provided as a distinct interface for type checking.",{"@attributes":{"id":"p-0165","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 27"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveElementRPCServerThread : IGrooveElementUtilBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(none)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Table 28 illustrates an interface  (IGrooveRPCServer) for a client of a storage manager that needs to handle remote procedure calls (RPCs) on elements within XML documents. RPC servers are a sub-class of the \u201cutil\u201d base class, that is, all of the methods for IGrooveElementUtilBase also apply to IGrooveRPCServer. The storage manager RPC server interface includes the following methods:",{"@attributes":{"id":"p-0167","num":"0169"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 28"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveElementRPCServer : IGrooveElementUtilBase"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OpenCallQueue","Returns the queue where"]},{"entry":["(IGrooveElementQueue **","calls are received."]},{"entry":"o_ppQueue);"},{"entry":["SendResponse (IGrooveElement *","Sends a response to the caller,"]},{"entry":["i_pInput, IGrooveElement * i_pOutput,","returning output parameters"]},{"entry":["VARIANT_BOOL * o_bResult);","in the Output element."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The following tables illustrate allowed values for the enumerated data types listed in the above interfaces. In particular, Table 29, illustrates allowed values for the GrooveSerializeType enumerated data type.",{"@attributes":{"id":"p-0169","num":"0171"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 29"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveSerializeType"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GrooveSerializeAuto","On input, Groove will determine the correct"]},{"entry":[{},"format by examining the first few bytes of the"]},{"entry":[{},"input stream. On output, Groove will select a"]},{"entry":[{},"format based on the kind of document or"]},{"entry":[{},"element data."]},{"entry":["GrooveSerializeMIME","Format is MHTML, as defined in RFC 2557."]},{"entry":["GrooveSerializeXML","Format is XML. Note that binary documents"]},{"entry":[{},"are not supported with this format, but it may"]},{"entry":[{},"be a body type in MHTML."]},{"entry":["GrooveSerializeWBXML","Format is WBXML. Note that binary"]},{"entry":[{},"documents are not supported with this format,"]},{"entry":[{},"but it may be a body type in MHTML."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 30 illustrates the allowed values for the GrooveSerializeOptions enumerated data type.",{"@attributes":{"id":"p-0171","num":"0173"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 30"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveSerializeOptions"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GrooveSerializeDefault","Use default serialization"]},{"entry":[{},"options."]},{"entry":["GrooveSerializeWithFormatting","Indent, with blanks, each"]},{"entry":[{},"level of child content"]},{"entry":[{},"elements beneath the"]},{"entry":[{},"parent element."]},{"entry":["GrooveSerializeSortedAttrs","Output the attributes for"]},{"entry":[{},"each element in order of"]},{"entry":[{},"ascending attribute name."]},{"entry":["GrooveSerializeNoFragmentWrapper","Output without the"]},{"entry":[{},"fragment wrapper for"]},{"entry":[{},"document fragments"]},{"entry":[{},"(elements)."]},{"entry":["GrooveSerializeNoNamespaceContraction","Output with fully expanded"]},{"entry":[{},"element and attribute"]},{"entry":[{},"names."]},{"entry":["GrooveSerializeNoProlog","Output without the XML"]},{"entry":[{},"document prolog."]},{"entry":["GrooveSerializeNoLinks","Output without linked"]},{"entry":[{},"documents."]},{"entry":["GrooveSerializeNotMinimum","Don't spend as much"]},{"entry":[{},"local processor time as"]},{"entry":[{},"needed to ensure the"]},{"entry":[{},"resulting output is the"]},{"entry":[{},"minimum size."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 31 illustrates the allowed values for the GrooveParseOptions enumerated data type.",{"@attributes":{"id":"p-0173","num":"0175"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 31"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveParseOptions"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GrooveParseDefault","Use default parse options."]},{"entry":["GrooveParseStripContentWhitespace","Remove all extraneous"]},{"entry":[{},"whitespace from element content."]},{"entry":["GrooveParseNoFragment","Parse a fragment that doesn't"]},{"entry":[{},"have a fragment wrapper."]},{"entry":["GrooveParseNoNamespaceExpansion","Parse the document, but don't"]},{"entry":[{},"expand namespaces to their fully"]},{"entry":[{},"qualified form."]},{"entry":["GrooveParseNoLinks","Parse a document and skip the"]},{"entry":[{},"links."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 32 illustrates the allowed values for the GrooveContentType enumerated data type.",{"@attributes":{"id":"p-0175","num":"0177"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 32"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveContentType"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GrooveContentElement","Content is a child element."]},{"entry":["GrooveContentText","Content is body text."]},{"entry":["GrooveContentCDATASection","Content is a CDATA section."]},{"entry":["GrooveContentProcessingInstruction","Content is a processing instruction."]},{"entry":["GrooveContentComment","Content is a comment."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 33 illustrates the allowed values for the GrooveXLinkShow enumerated data type.",{"@attributes":{"id":"p-0177","num":"0179"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 33"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveXLinkShow"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GrooveXLinkShowNew","New."]},{"entry":[{},"GrooveXLinkShowParsed","Parsed."]},{"entry":[{},"GrooveXLinkShowReplace","Replace"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Table 34 illustrates the allowed values for the GrooveXLinkActuate enumerated data type:",{"@attributes":{"id":"p-0179","num":"0181"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 34"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveXLinkActuate"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GrooveXLinkActuateUser","User."]},{"entry":[{},"GrooveXLinkActuateAuto","Auto."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Table 35 illustrates the allowed values for the GrooveXLinkSerialize enumerated data type.",{"@attributes":{"id":"p-0181","num":"0183"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 35"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveXLinkSerialize"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GrooveXLinkSerializeByValue","By value."]},{"entry":[{},"GrooveXLinkSerializeByReference","By reference."]},{"entry":[{},"GrooveXLinkSerializeIgnore","Ignore."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Table 36 illustrates the allowed values for the GrooveMultiReaderQueueOptions enumerated data type.",{"@attributes":{"id":"p-0183","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 36"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveMultiReaderQueueOptions"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GrooveMRQDefault","Use default options."]},{"entry":["GrooveMRQAllReceive","All readers receive each event"]},{"entry":[{},"notification."]},{"entry":["GrooveMRQEnqueueIfNoReaders","Enqueue even if no reader is"]},{"entry":[{},"currently queued to receive the"]},{"entry":[{},"element."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The fundamental data model of the storage manager is XML. XML is a semi-structured, hierarchical, hyper-linked data model. Many real world problems are not well represented with such complex structures and are better represented in tabular form. For example, spreadsheets and relational databases provide simple, tabular interfaces. In accordance with one aspect of the invention, in order to simplify the representation, XML structures are mapped to a tabular display, generally called a \u201cwaffle\u201d. The waffle represents a collection of data. This mapping is performed by the collection manager, a component of the storage manager.","Collections are defined by a collection descriptor, which is an XML document type description. Like a document schema, the collection descriptor is a special kind of document that is stored apart from the collection data itself. There are many sources of collection data, but the primary source of collection data is a software routine called a record set engine. Driven by user commands, the record set engine propagates a set of updates for a collection to the collection manager. Based on those updates, the collection manager updates index structures and may notify waffle users via the notification system. When a waffle user needs updated or new collection data, the waffle user will call the collection manager to return a new result array containing the updated data. The waffle user may also navigate within the collection using cursors.","The following list shows the XML DTD contents for a collection descriptor document:",{"@attributes":{"id":"p-0187","num":"0189"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<!ELEMENT Collection ANY>"},{"entry":"<!ATTLIST Collection"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Name","CDATA","#REQUIRED"]},{"entry":["\u2003\u2003Start","(record|index)","\u201crecord\u201d \u2003\u2003#REQUIRED"]},{"entry":["\u2003\u2003Version","CDATA","#REQUIRED"]},{"entry":["\u2003\u2003Location","CDATA","#IMPLIED"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":">"},{"entry":"<!ELEMENT Level (Column|Sorting|Level)*>"},{"entry":"<!ATTLIST Level"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Mapping","(Flatten|Direct)",{}]},{"entry":["\u2003\u2003Links","(Embed|Traverse)","\u201cTraverse\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":">"},{"entry":"<!ELEMENT Column EMPTY>"},{"entry":"<!ATTLIST Column"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Source","CDATA","#REQUIRED"]},{"entry":["\u2003\u2003Output","CDATA","#REQUIRED"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003MultiValue","(OnlyFirst|MultiLine|Concatenate)\u201c\u2003\u2002 OnlyFirst\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003MultiValueSeparator","CDATA","#IMPLIED \u201c,\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":">"},{"entry":"<!ELEMENT Sorting SortDescription+>"},{"entry":"<!ELEMENT SortDescription Group?|SortColumn+|Interval?>"},{"entry":"<!ATTLIST SortDescription"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003Name","CDATA","#REQUIRED"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":">"},{"entry":"<!ELEMENT SortColumn EMPTY>"},{"entry":"<!ATTLIST SortColumn"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003Source","CDATA","#REQUIRED"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003Order","(Ascending|Descending)","#REQUIRED"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003DataType","CDATA","#REQUIRED"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003Strength","(Primary|Secondary|Tertiary|Identical) \u201cIdentical\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003Decomposition (None|Canonical|Full) \u201cNone\u201d"},{"entry":">"},{"entry":"<!ELEMENT Group Group?|GroupColumn+>"},{"entry":"<!ATTLIST Group"},{"entry":"\u2003\u2003Grouping (Unique|Units) #REQUIRED"},{"entry":"\u2003\u2003GroupUnits (Years|Months|Days|Hours)"},{"entry":"\u2003\u2003AtGroupBreak (None|Count|Total) \u201cNone\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003Order (Ascending|Descending)","#REQUIRED"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003Strength","(Primary|Secondary|Tertiary|Identical) \u201cIdentical\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003Decomposition (None|Canonical|Full) \u201cNone\u201d"},{"entry":">"},{"entry":"<!ELEMENT GroupColumn EMPTY>"},{"entry":"<!ATTLIST GroupColumn"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Source","CDATA","#REQUIRED"]},{"entry":">"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<!ELEMENT Interval EMPTY>"},{"entry":"<!ATTLIST Interval"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Start","CDATA","#REQUIRED"]},{"entry":["\u2003\u2003End","CDATA","#REQUIRED"]},{"entry":">"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Every Collection has a name that is used to reference the collection. The Start attribute specifies how to find the \u201croot\u201d of the collection. A collection with a record root is just a set of records, whereas a collection that starts with an index is navigated through the index and then the set of records. An index may be a concordance or full-text. The optional Location attribute is a relative URL that identifies where in the root to actually begin.","A Level defines the contents of part of the output hierarchy. A level consists of the columns in the level, the ordering or grouping of records in the level, and definitions of sub-levels. A level is associated with records in the source record stream through the Mapping attribute. If the mapping is Direct, a level represents a single source record type. If the mapping is Flatten, the level contains a source record type and all descendants of that record. The Flatten mapping may only be specified on the only or lowest level in the collection. The Links attribute specifies how records with link attributes should handled. If links are Traversed, the record will be output as a distinct level. If links are Embedded, the child record of the source record will appear as though it is part of the source record.","A Column defines the mapping between a source field and the output array column. The Source attribute is a XSLT path expression in the source records. The Result attribute is a name of the field in the result array. The MultiValue and MultiValueSeparator attributes define how multi-valued source values are returned in the result.","Every collection must have at least one defined order. The order can be sorted collation or multi-level grouping with aggregate functions.","The SortColumn element defines the collation characteristics within a SortDescription. The Source attribute defines the name of the output column to be sorted. The Order must be either Ascending or Descending. The Strength and Decomposition values are input parameters that have the same meaning as defined in Unicode.","The two kinds of grouping are by unique values and by units. When a collection is grouped by unique values, all records with the same GroupColumn values will be together in the same group\u2014breaks between groups will occur at the change of GroupColumn values. When a collection is grouped by units, all records with the same GroupColumn values, resolved to the value of GroupUnits, will be together in the same group. For example, if GroupUnits is \u201cDays\u201d, all records for a given day will be in the same group. If AtGroupBreak is specified, a synthetic row will be returned that contains the result of the aggregate function at each value or unit break value.","The GroupColumn identifies the result column to be grouped.","The Interval identifies the two fields in each record that define a range. The datatypes of the Start and End columns must be either numeric or datetime.","The following example shows a collection descriptor document for a simple document discussion record view with six collation orders:",{"@attributes":{"id":"p-0197","num":"0199"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Collection Name=\u201cMain\u201d Start=\u201cRecord\u201d Version=\u201c0,1,0,0\u201d>"]},{"entry":[{},"\u2003<Level Mapping=\u201cFlatten\u201d>"]},{"entry":[{},"\u2003\u2003<Column Source=\u201cTitle\u201d Output=\u201cTitle\u201d\/>"]},{"entry":[{},"\u2003\u2003<Column Source=\u201c_Modified\u201d Output=\u201c_Modified\u201d\/>"]},{"entry":[{},"\u2003\u2003<Column Source=\u201c_CreatedBy\u201d Output=\u201c_CreatedBy\u201d\/>"]},{"entry":[{},"\u2003\u2003<Sorting>"]},{"entry":[{},"\u2003\u2003\u2003<SortDescription Name=\u201cByAscModified\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<SortColumn Source=\u201c_Modified\u201d Order=\u201cAscending\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003DataType=\u201cDateTime\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<\/SortDescription>"]},{"entry":[{},"\u2003\u2003\u2003<SortDescription Name=\u201cByDescModified\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<SortColumn Source=\u201c_Modified\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003Order=\u201cDescending\u201d DataType=\u201cDateTime\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<\/SortDescription>"]},{"entry":[{},"\u2003\u2003\u2003<SortDescription Name=\u201cByAscAuthor\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<SortColumn Source=\u201c_CreatedBy\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003Order=\u201cAscending\u201d DataType=\u201cString\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<\/SortDescription>"]},{"entry":[{},"\u2003\u2003\u2003<SortDescription Name=\u201cByDescAuthor\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<SortColumn Source=\u201c_CreatedBy\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003Order=\u201cDescending\u201d DataType=\u201cString\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<\/SortDescription>"]},{"entry":[{},"\u2003\u2003\u2003<SortDescription Name=\u201cByAscTitle\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<SortColumn Source=\u201cTitle\u201d Order=\u201cAscending\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003DataType=\u201cString\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<\/SortDescription>"]},{"entry":[{},"\u2003\u2003\u2003<SortDescription Name=\u201cByOrdinal\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<SortColumn Source=\u201c\u201d Order=\u201cOrdinal\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003DataType=\u201cLong\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<\/SortDescription>"]},{"entry":[{},"\u2003\u2003<\/Sorting>"]},{"entry":[{},"\u2003<\/Level>"]},{"entry":[{},"<\/Collection>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The following example shows a collection descriptor for a calendar view. Note the similarity to the prior example, but with a small change to the sort description, the collection is ordered by ranges of date intervals.",{"@attributes":{"id":"p-0199","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Collection Name=\u201cMain\u201d Start=\u201cRecord\u201d Version=\u201c0,1,0,0\u201d>"]},{"entry":[{},"\u2003<Level Mapping=\u201cFlatten\u201d>"]},{"entry":[{},"\u2003\u2003<Column Source=\u201cfrom-attributes(Subject)\u201d"]},{"entry":[{},"\u2003\u2003\u2003Output=\u201cSubject\u201d\/>"]},{"entry":[{},"\u2003\u2003<Column Source=\u201cfrom-attributes(Start)\u201d"]},{"entry":[{},"\u2003\u2003\u2003Output=\u201cStart\u201d\/>"]},{"entry":[{},"\u2003\u2003<Column Source=\u201cfrom-attributes(End)\u201d"]},{"entry":[{},"\u2003\u2003\u2003Output=\u201cEnd\u201d\/>"]},{"entry":[{},"\u2003\u2003<Column Source=\u201cfrom-attributes(RecurrenceEnd)\u201d"]},{"entry":[{},"\u2003\u2003\u2003Output=\u201cRecurrenceEnd\u201d\/>"]},{"entry":[{},"\u2003\u2003<Column Source=\u201cfrom-attributes(IsAllDay)\u201d"]},{"entry":[{},"\u2003\u2003\u2003Output=\u201cIsAllDay\u201d\/>"]},{"entry":[{},"\u2003\u2003<Column Source=\u201cfrom-attributes(IsRecurrent)\u201d"]},{"entry":[{},"\u2003\u2003\u2003Output=\u201cIsRecurrent\u201d\/>"]},{"entry":[{},"\u2003\u2003<Sorting>"]},{"entry":[{},"\u2003<SortDescription Name=\u201cDateRanges\u201d>"]},{"entry":[{},"\u2003\u2002<Interval Start=\u201cStart\u201d End=\u201cEnd\u201d\/>"]},{"entry":[{},"\u2003<\/SortDescription>"]},{"entry":[{},"\u2003\u2003<\/Sorting>"]},{"entry":[{},"\u2003<\/Level>"]},{"entry":[{},"<\/Collection>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As is the basic storage manager, the collection manager is implemented in an object-oriented environment. Accordingly, both the collection manager itself and all of the collection components including collections, waffles, cursors, result arrays and the record set engine are implemented as objects. These objects, their interface, the underlying structure and the API used to interface with the collection manager are illustrated in . The API is described in more detail in connection with . Referring to , the collection manager provides shared access to collections, via the collection manipulation API , but, in order to enable a full programming model for client applications, additional communication and synchronization operations are provided, within the context of a collection. For example, a user can control a record set engine  by means of the engine API . Under control of commands in the engine API , the record set engine  propagates a set of updates for a collection to the distributed virtual object system  that is discussed above. Based on those updates, the distributed virtual object system  updates index and other structures.","Other client components may need to be aware of changes within components, such as waffles, managed by the collection manager. Accordingly, the collection manager provides an interface  to an interest-based notification system  for those client components. The notification system  provides notifications to client component listeners who have registered an interest when values within objects  that represent a collection change.","Collection data is represented by a set of objects including collection objects, record objects, waffle objects, cursor objects and result array objects . The objects can be directly manipulated by means of the collection manipulation API . The collection related objects  are actually implemented by the distributed virtual object system  that was discussed in detail above.",{"@attributes":{"id":"p-0203","num":"0205"},"figref":"FIG. 15"},"Table 37 illustrates an interface  (IGrooveCollectionManager) for a collection manager that encapsulates the basic framework for the major operations performed on a collection. The collection manager interface includes the following methods:",{"@attributes":{"id":"p-0205","num":"0207"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 37"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveCollectionManager : IGrooveDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CreateCollection(IGrooveElement","Creates a new collection object. The"]},{"entry":["*i_pCollectionDescriptor, BSTR","CollectionDescriptor should contain a"]},{"entry":["i_CollectionURL, BSTR i_EngineID,","collection descriptor in XML according to the"]},{"entry":["IGrooveCollection **o_ppCollection);","GrooveCollection XML DTD."]},{"entry":["DeleteCollection(IGrooveXMLDocument","Deletes the specified collection from the"]},{"entry":["*i_pSourceDocument, BSTR","SourceDocument."]},{"entry":"i_CollectionURL);"},{"entry":["OpenCollection(IGrooveElement","Opens an existing collection object."]},{"entry":"*i_pCollectionDescriptor, BSTR"},{"entry":"i_CollectionURL, BSTR i_EngineID,"},{"entry":"IGrooveCollection **o_ppCollection);"},{"entry":["OpenCollectionEnum(IGrooveXMLDocument","Return an enumeration of all collections within"]},{"entry":["*i_pSourceDocument,","a document."]},{"entry":"IGrooveBSTREnum"},{"entry":"**o_ppCollectionNames);"},{"entry":["ParseCollectionDescriptor(IGrooveElement","Creates a collection document according to"]},{"entry":["*i_pCollectionElement, void*","the specified collection descriptor."]},{"entry":"m_Levels);"},{"entry":["UpdateCollection(void *i_Updates,","Perform the requested sequence of"]},{"entry":["BSTR i_EngineID, IGrooveElement **","operations (of kind"]},{"entry":["o_ppUpdateContext);","GrooveCollectionUpdateOp) on the collection"]},{"entry":[{},"for EngineID."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 38 illustrates an interface  (IGrooveCollection) for a collection that encapsulates the basic framework for the major operations performed on a collection. The collection interface includes the following methods:",{"@attributes":{"id":"p-0207","num":"0209"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 38"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface IGrooveCollection : IGrooveDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AdviseListeners(IGrooveElement","Notifies subscribing listeners of changes to this"]},{"entry":["*i_UpdateContext);","element."]},{"entry":["CloseWaffle(IGrooveWaffle","Removes an IGrooveWaffle instance from the list"]},{"entry":["*i_pWaffle);","of the collection's listeners."]},{"entry":["Delete(void);","Deletes the collection from the database."]},{"entry":["DisableListeners (void);","Disables event notifications for all subscribing"]},{"entry":[{},"listeners."]},{"entry":["EnableListeners (void);","Enables event notifications for all subscribing"]},{"entry":[{},"listeners. Event notifications are enabled by"]},{"entry":[{},"default, so this is only necessary if"]},{"entry":[{},"DisableListeners was previously called."]},{"entry":["Find(BSTR i_pQuery,","Using the specified XSLT query expression,"]},{"entry":["IGrooveCollection **","evaluate it on the collection and return a new"]},{"entry":["o_ppQueryResult);","collection as the result."]},{"entry":[{},"XSLT locators have the form:"]},{"entry":[{},"AxisIdentifier(Node Test Predicate)"]},{"entry":[{},"\u2003\u2003where AxisIdentifier is one of:"]},{"entry":[{},"\u2003\u2003\u2003from-ancestors"]},{"entry":[{},"\u2003\u2003\u2003from-ancestors-or-self"]},{"entry":[{},"\u2003\u2003\u2003from-attributes"]},{"entry":[{},"\u2003\u2003\u2003from-children"]},{"entry":[{},"\u2003\u2003\u2003from-descendants"]},{"entry":[{},"\u2003\u2003\u2003from-descendants-or-self"]},{"entry":[{},"\u2003\u2003\u2003from-following"]},{"entry":[{},"\u2003\u2003\u2003from-following-siblings"]},{"entry":[{},"\u2003\u2003\u2003from-parent"]},{"entry":[{},"\u2003\u2003\u2003from-preceding"]},{"entry":[{},"\u2003\u2003\u2003from-preceding-siblings"]},{"entry":[{},"\u2003\u2003\u2003from-self"]},{"entry":[{},"\u2003\u2003\u2003from-source-link"]},{"entry":[{},"\u2003NodeTest is of the form QName and tests"]},{"entry":[{},"whether the"]},{"entry":[{},"\u2003node is an element or attribute with the"]},{"entry":[{},"specified name."]},{"entry":[{},"\u2003A Predicate is of the form [ PredicateExpr ]"]},{"entry":[{},"\u2003PredicateExpr is a Expr"]},{"entry":[{},"\u2003Expr is one of:"]},{"entry":[{},"\u2003\u2003VariableReference"]},{"entry":[{},"\u2003\u2003( Expr )"]},{"entry":[{},"\u2003\u2003Literal"]},{"entry":[{},"\u2003\u2003Number"]},{"entry":[{},"\u2003\u2003FunctionCall"]},{"entry":[{},"\u2003Multiple predicates are separated by \u201c\/\u201d"]},{"entry":[{},"For example:"]},{"entry":[{},"from-children(ElementName[from-attributes(AttributeName)])"]},{"entry":["GetCursor(IGrooveCollectionCursor","Returns a copy of the cursor currently used by the"]},{"entry":["**o_ppCursor);","collection."]},{"entry":["GetCursorPosition(double *","Returns the relative position of the cursor as a"]},{"entry":["o_pRelativePosition);","number between 0.0 (first row) and 100.0 (last"]},{"entry":[{},"row)."]},{"entry":["GetEngineMappingTable(void","Returns the engine mapping table."]},{"entry":"**o_ppEngineURLs);"},{"entry":["GetExpansionMask(long","Gets the current value of the expansion mask."]},{"entry":"*o_pMask);"},{"entry":["GetRecordCount(long *","Returns the number of records in the collection."]},{"entry":"o_pRecordCount);"},{"entry":["HasOrdinalSort(BSTR *","If the collection has an ordinal index, returns the"]},{"entry":["o_pSortName, VARIANT_BOOL","sort name and the value TRUE, otherwise it"]},{"entry":["*o_pHaveSort);","returns FALSE."]},{"entry":["HasSort(BSTR i_ColumnName,","Returns a bool indicating whether or not a sort"]},{"entry":["GrooveCollationOrder","exists in the collection for the column specified by"]},{"entry":["i_CollationOrder, long i_Level,","i_ColumnName on level i_Level in collation order"]},{"entry":["BSTR *o_pSortName,","i_AscendingSort. If a sort exists the sort name is"]},{"entry":["VARIANT_BOOL *o_pHaveSort);","returned in o_pSortName."]},{"entry":["IsEmpty(VARIANT_BOOL","Returns a bool indicating whether or not the"]},{"entry":["*o_plsEmpty);","collection is empty."]},{"entry":["MarkAll(VARIANT_BOOL i_Read);","Sets the record read\/unread indicator for all"]},{"entry":[{},"records in the collection to be the value of Read."]},{"entry":["MarkRead(double i_RecordID);","Sets a specific record to be marked as read."]},{"entry":["MarkUnread(double i_RecordID);","Sets a specific record to be marked as unread."]},{"entry":["MoveCursor(GrooveCollectionCursorPosition","Every collection has a cursor. The cursor"]},{"entry":["i_AbsolutePosition,","establishes the starting position in the source"]},{"entry":["GrooveCollectionNavigationOp","document, which will then be used to build the"]},{"entry":["i_Navigator, long i_Distance, long","result document."]},{"entry":["*o_pDistanceMoved);","AbsolutePosition may have the values First, Last,"]},{"entry":[{},"or Current."]},{"entry":[{},"Navigator may have the following values:"]},{"entry":[{},"Value"]},{"entry":[{},"Description"]},{"entry":[{},"NextAny, PriorAny"]},{"entry":[{},"Move the cursor to the next\/previous source row,"]},{"entry":[{},"traversing down through child rows and up"]},{"entry":[{},"through parent rows."]},{"entry":[{},"NextPeer, PriorPeer"]},{"entry":[{},"Move the cursor to the next\/previous source row"]},{"entry":[{},"at the same level, stopping if a row at a higher"]},{"entry":[{},"level is reached."]},{"entry":[{},"NextParent, PriorParent"]},{"entry":[{},"Move the cursor to the next\/previous parent"]},{"entry":[{},"source row, traversing until the root row is"]},{"entry":[{},"reached."]},{"entry":[{},"NextData, PriorData"]},{"entry":[{},"Move the cursor to the next\/previous row that"]},{"entry":[{},"contains a data record."]},{"entry":[{},"NextUnread, PriorUnread"]},{"entry":[{},"Move the cursor to the next\/previous unread row."]},{"entry":[{},"Distance sets the numbers of iterations to move"]},{"entry":[{},"the cursor, starting at AbsolutePosition and"]},{"entry":[{},"moving through Distance iterations of Navigator"]},{"entry":[{},"movement."]},{"entry":[{},"MoveCursor returns the number of iterations the"]},{"entry":[{},"cursor was actually moved."]},{"entry":["MoveCursorToRecord(double","Sets the collection's cursor to point to the"]},{"entry":["i_RecordID);","specified record."]},{"entry":["MoveCursorToValue(BSTR","Using the current sort order, positions the cursor"]},{"entry":["i_pQuery, double * o_pRecordID);","to the row that meets the criteria of matching the"]},{"entry":[{},"relop to the input query values. The relop"]},{"entry":[{},"(relational operator) may be EQ, LT, LE, GT, or"]},{"entry":[{},"GE. The query values must match, in order, the"]},{"entry":[{},"datatypes of the columns of the current sort order"]},{"entry":[{},"or must be able to be converted in a loss-less"]},{"entry":[{},"manner to those datatypes. Fewer query values"]},{"entry":[{},"may be specified than are defined in the sort"]},{"entry":[{},"order, which will result in a partial match. For"]},{"entry":[{},"collections ordered on an interval, the first query"]},{"entry":[{},"value is the interval's starting value and the"]},{"entry":[{},"second is the ending value."]},{"entry":["MoveToCursor(IGrooveCollection","Moves the collection to the position specified by"]},{"entry":["Cursor *i_pCursor);","i_pCursor."]},{"entry":["Open(BSTR i_CollectionURL,","Creates or opens the collection specified by"]},{"entry":["IGrooveElement","I_CollectionURL within the Groove storage service"]},{"entry":["*i_pCollectionDescriptorElement,","i_ServiceType. Returns a bool indicating whether"]},{"entry":["VARIANT_BOOL i_Temp,","or not the collection was created for the first time."]},{"entry":"VARIANT_BOOL i_Shared,"},{"entry":"VARIANT_BOOL * o_pCreated);"},{"entry":["OpenRecord(double i_RecordID,","Returns an interface pointer to a specific record in"]},{"entry":["IGrooveRecord ** o_ppRecord);","the collection."]},{"entry":["OpenRecordID(double","Starting from the position of the SourceRecordID,"]},{"entry":["i_SourceRecordID, enum","perform the specified collection navigation"]},{"entry":["GrooveCollectionNavigationOp","operation and return the resulting record ID."]},{"entry":"i_Relation, double *"},{"entry":"o_pTargetRecordID);"},{"entry":["OpenResultArray(long","Given the collection's expansion mask, current"]},{"entry":["i_NumReturnRows, void","cursor position and current sort order, return at"]},{"entry":["*io_pResultArray);","most NumReturnRows into a result array"]},{"entry":[{},"conforming to the description below. Note that"]},{"entry":[{},"NumReturnRows is a quota only on the data rows -"]},{"entry":[{},"other synthesized header and footer rows may"]},{"entry":[{},"be returned as necessary."]},{"entry":[{},"\u2003\u2003\u2003\u2003Column Name"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003Data Type"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003Description"]},{"entry":[{},"RowType"]},{"entry":[{},"UINT1"]},{"entry":[{},"==WAFFLE_ROW_DATA if the row is a data"]},{"entry":[{},"record returned from an engine,"]},{"entry":[{},"==WAFFLE_ROW_HEADER false if the row is a"]},{"entry":[{},"synthesized header (e.g., category),"]},{"entry":[{},"==WAFFLE_ROW_FOOTER if the row is a"]},{"entry":[{},"synthesized footer (e.g., aggregate result)."]},{"entry":[{},"SynthKind"]},{"entry":[{},"UINT1"]},{"entry":[{},"If the row is a data row, this value is 0. If the row"]},{"entry":[{},"is a synthesized row, this value will be one of:"]},{"entry":[{},"BreakUnique: Indicates a change in value of"]},{"entry":[{},"categorized or sorted column. One of the"]},{"entry":[{},"ColumnName(i) columns will have the new"]},{"entry":[{},"value."]},{"entry":[{},"BreakUnitDay"]},{"entry":[{},"BreakUnitWeek"]},{"entry":[{},"BreakUnitMonth"]},{"entry":[{},"BreakUnitYear"]},{"entry":[{},"FuncTotal"]},{"entry":[{},"FuncCount"]},{"entry":[{},"EngineID"]},{"entry":[{},"UINT4"]},{"entry":[{},"If the row is a data row: Index into the EngineID"]},{"entry":[{},"table, which is a vector of URLs stored as BSTRs."]},{"entry":[{},"If the row is a synthesized row, EngineID is 0."]},{"entry":[{},"RecordID"]},{"entry":[{},"UINT4"]},{"entry":[{},"If the row is a data row: RecordID returned from"]},{"entry":[{},"the engine identified by EngineID. RecordIDs are"]},{"entry":[{},"unique within EngineIDs."]},{"entry":[{},"If the row is a synthesized row: RecordID is a"]},{"entry":[{},"unique number within the collection."]},{"entry":[{},"Level"]},{"entry":[{},"UINT1"]},{"entry":[{},"Number of levels to indent this row. Level 0 is the"]},{"entry":[{},"top or outermost level."]},{"entry":[{},"RelativePosition"]},{"entry":[{},"UINT2"]},{"entry":[{},"A number between 0 and 10000 indicating the"]},{"entry":[{},"relative offset of this row from the beginning of the"]},{"entry":[{},"collection. [It may be an approximation.] For"]},{"entry":[{},"example, 6823 is the value for a row that is"]},{"entry":[{},"68.23% of the way through the collection."]},{"entry":[{},"Read"]},{"entry":[{},"BOOL"]},{"entry":[{},"If the row is a data row: True if the [account??]"]},{"entry":[{},"has read the record. If the row is a synthesized"]},{"entry":[{},"row, Read is always true (even if it is collapsed)."]},{"entry":[{},"ColumnName(i)"]},{"entry":[{},"Defined by the collection descriptor."]},{"entry":[{},"Data value for this row\/column. There will be as"]},{"entry":[{},"many columns in the array as there were defined"]},{"entry":[{},"columns at all levels."]},{"entry":["OpenSchema(long i_Level,","Return an interface pointer to the schema"]},{"entry":["VARIANT_BOOL","description for the records in the collection."]},{"entry":"i_IncludeSystemColumns,"},{"entry":"IGrooveRecordSchema"},{"entry":"**o_ppCollectionSchema);"},{"entry":["OpenTransaction(IGrooveTransaction","Creates a transaction on the collection document."]},{"entry":"**o_ppTransaction);"},{"entry":["OpenWaffle(IGrooveWaffleListener","Creates an IGrooveWaffle instance and adds it to"]},{"entry":["*i_pListener, IGrooveWaffle","the collections list of event listeners."]},{"entry":"**o_ppWaffle);"},{"entry":["SetCursorPosition(double","Sets the current position of the cursor to the row"]},{"entry":["i_RelativePosition);","with the specified relative position. The position"]},{"entry":[{},"should be a number between 0.0 (first row) and"]},{"entry":[{},"100.0 (last row)."]},{"entry":["SetExpansionMask(long i_Mask);","Sets the current value of the expansion mask."]},{"entry":[{},"The mask is a stored in a DWORD, but only the"]},{"entry":[{},"first 10 (or so) bits are used. If a bit is set, all data"]},{"entry":[{},"the indicated level is expanded. The expansion"]},{"entry":[{},"mask is not persistent or shared \u2014its effect is only"]},{"entry":[{},"on this collection object. The default value of the"]},{"entry":[{},"expansion mask is all 1s."]},{"entry":["SetRecordExpansion(double","Sets the expansion state for a single row for this"]},{"entry":["i_RecordID, VARIANT_BOOL","scope. If Expand is true, the record will be"]},{"entry":["i_Expand);","expanded, otherwise it will be collapsed. If"]},{"entry":[{},"EngineID is 0, then all rows encompassed by"]},{"entry":[{},"specified synthesized RecordID will be either"]},{"entry":[{},"expanded or collapsed."]},{"entry":["Update(BSTR i_EngineURL,","Updates the collection. i_Operation is one of:"]},{"entry":["GrooveCollectionUpdateOp","OP_ADD, OP_DELETE, or OP_UPDATE."]},{"entry":"i_Operation, void *"},{"entry":"i_pUpdateRecord,"},{"entry":"IGrooveElement *"},{"entry":"io_pUpdateContext);"},{"entry":["UseSort(BSTR i_SortName,","Sets the sort order for the collection to the named"]},{"entry":["VARIANT_BOOL","sort order. The specified SortName must be one"]},{"entry":["i_RetainCursorPosition);","of the defined sort orders in the collection"]},{"entry":[{},"descriptor."]},{"entry":[{},"If i_RetainCursorPosition is true and the current"]},{"entry":[{},"cursor position identifies a data record, the current"]},{"entry":[{},"collection's cursor is positioned to the same record"]},{"entry":[{},"in the new sort order. Otherwise, the cursor"]},{"entry":[{},"position is positioned to the first row in the new"]},{"entry":[{},"sort order."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 39 illustrates an interface  (IGrooveCollectionListener) for a client of a collection manager that wishes to be notified whenever \u201csignificant\u201d events happen within the collection. Significant events may occur at any time and include updating, addition, deletion, reparenting, or a change in ordinal position of a collection element. The collection manager listener interface includes the following methods:",{"@attributes":{"id":"p-0209","num":"0211"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 39"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveCollectionListener : IGrooveDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OnRecordChange(IGrooveElement","Called when the data in this element"]},{"entry":["*i_pElement);","has been updated or the element"]},{"entry":[{},"has been added, deleted, reparented,"]},{"entry":[{},"or its ordinal position has changed."]},{"entry":["OnSortChange(void);","Called when the sort order for"]},{"entry":[{},"the collection changes."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 40 illustrates an interface  (IGrooveCollectionCursor) for a client of a collection manager that wants to move a cursor within the collection. A collection may have one or more cursors active at any time. The collection manager cursor interface includes the following methods:",{"@attributes":{"id":"p-0211","num":"0213"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 40"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"interface IGrooveCollectionCursor : IGrooveDispatch"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Move(GrooveCollectionCursorPosition","Moves the cursor in either an absolute"]},{"entry":["i_AbsolutePosition,","or relative amount."]},{"entry":"GrooveCollectionNavigationOp"},{"entry":["i_Navigator, long i_Distance, long","AbsolutePosition may have the values"]},{"entry":["*o_pDistanceMoved);","First, Last, or Current."]},{"entry":[{},"Navigator may have the following"]},{"entry":[{},"values:"]},{"entry":[{},"Value"]},{"entry":[{},"Description"]},{"entry":[{},"NextAny, PriorAny"]},{"entry":[{},"Move the cursor to the next\/previous"]},{"entry":[{},"source row, traversing down through"]},{"entry":[{},"child rows and up through parent rows."]},{"entry":[{},"NextPeer, PriorPeer"]},{"entry":[{},"Move the cursor to the next\/previous"]},{"entry":[{},"source row at the same level, stopping"]},{"entry":[{},"if a row at a higher level is reached."]},{"entry":[{},"NextParent, PriorParent"]},{"entry":[{},"Move the cursor to the next\/previous"]},{"entry":[{},"parent source row, traversing until the"]},{"entry":[{},"root row is reached."]},{"entry":[{},"NextData, PriorData"]},{"entry":[{},"Move the cursor to the next\/previous"]},{"entry":[{},"row that contains a data record."]},{"entry":[{},"NextUnread, PriorUnread"]},{"entry":[{},"Move the cursor to the next\/previous"]},{"entry":[{},"unread row."]},{"entry":[{},"Distance sets the numbers of iterations"]},{"entry":[{},"to move the cursor, starting at"]},{"entry":[{},"AbsolutePosition and moving through"]},{"entry":[{},"Distance iterations of Navigator"]},{"entry":[{},"movement."]},{"entry":[{},"Move returns the number of iterations"]},{"entry":[{},"the cursor was actually moved."]},{"entry":["OpenRecord (IGrooveRecord **","Returns an interface pointer to the"]},{"entry":["o_ppRecord);","record the cursor is currently set at."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The following tables illustrate allowed values for the enumerated data types listed in the above interfaces. In particular, Table 41, illustrates allowed values for the GrooveCollationOrder enumerated data type:",{"@attributes":{"id":"p-0213","num":"0215"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 41"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveCollationOrder"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CollateAscending","Ordered by ascending data values."]},{"entry":[{},"CollateDescending","Ordered by descending data values."]},{"entry":[{},"CollateOrdinal","Ordered by ordinal position."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Table 42 illustrates the allowed values for the GrooveCollectionNavigationop enumerated data type:",{"@attributes":{"id":"p-0215","num":"0217"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 42"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveCollectionNavigationOp"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NextAny","Move the cursor to the next source row,"]},{"entry":[{},{},"traversing down through child rows and up"]},{"entry":[{},{},"through parent rows."]},{"entry":[{},"PriorAny","Move the cursor to the previous source row,"]},{"entry":[{},{},"traversing down through child rows and up"]},{"entry":[{},{},"through parent rows."]},{"entry":[{},"NextPeer","Move the cursor to the next source row at the"]},{"entry":[{},{},"same level, stopping if a row at a higher level"]},{"entry":[{},{},"is reached."]},{"entry":[{},"PriorPeer","Move the cursor to the previous source row at"]},{"entry":[{},{},"the same level, stopping if a row at a higher"]},{"entry":[{},{},"level is reached."]},{"entry":[{},"NextParent","Move the cursor to the next parent source"]},{"entry":[{},{},"row, traversing until the root row is reached."]},{"entry":[{},"PriorParent","Move the cursor to the previous parent source"]},{"entry":[{},{},"row, traversing until the root row is reached."]},{"entry":[{},"NextData","Move the cursor to the next row that contains"]},{"entry":[{},{},"a data record."]},{"entry":[{},"PriorData","Move the cursor to the previous row that"]},{"entry":[{},{},"contains a data record."]},{"entry":[{},"NextUnread","Move the cursor to the next unread row."]},{"entry":[{},"PriorUnread","Move the cursor to the next unread row."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Table 43 illustrates the allowed values for the GrooveCollectionCursorPosition enumerated data type:",{"@attributes":{"id":"p-0217","num":"0219"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 43"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveCollectionCursorPosition"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"First","The first row in the collection."]},{"entry":[{},"Last","The last row in the collection."]},{"entry":[{},"Current","The current row in the collection. This"]},{"entry":[{},{},"position is useful for performing relative cursor"]},{"entry":[{},{},"movement."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Table 44 illustrates the allowed values for the GrooveCollectionRowType enumerated data type:",{"@attributes":{"id":"p-0219","num":"0221"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 44"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveCollectionRowType"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ROW_DATA","A row with data values."]},{"entry":[{},"ROW_HEADER","A row header, for example, column break"]},{"entry":[{},{},"values."]},{"entry":[{},"ROW_FOOTER","A row footer, for example, column break"]},{"entry":[{},{},"values and an aggregated result."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Table 45 illustrates the allowed values for the GrooveCollectionSynthType enumerated data type:",{"@attributes":{"id":"p-0221","num":"0223"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 45"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveCollectionSynthType"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["BreakUnique","Synthesized collection row indicates a change"]},{"entry":[{},"in value of categorized or sorted column. One"]},{"entry":[{},"of the other columns will have the new value."]},{"entry":["BreakUnitDay","Synthesized collection row is a break on the"]},{"entry":[{},"change in units of days."]},{"entry":["BreakUnitWeek","Synthesized collection row is a break on the"]},{"entry":[{},"change in units of weeks."]},{"entry":["BreakUnitMonth","Synthesized collection row is a break on the"]},{"entry":[{},"change in units of months."]},{"entry":["BreakUnitYear","Synthesized collection row is a break on the"]},{"entry":[{},"change in units of years."]},{"entry":["FuncTotal","Synthesized collection row is the result of an"]},{"entry":[{},"aggregate total function."]},{"entry":["FuncCount","Synthesized collection row is the result of an"]},{"entry":[{},"aggregate count function."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 46 illustrates the allowed values for the GrooveCollectionUpdateOp enumerated data type:",{"@attributes":{"id":"p-0223","num":"0225"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 46"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveCollectionUpdateOp"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OP_ADD","Add the record to the collection."]},{"entry":["OP_DELETE","Delete the record from the collection."]},{"entry":["OP_UPDATE","Change values of specific fields in this"]},{"entry":[{},"record, which is already in the collection."]},{"entry":["OP_REPARENT","Change this record's parent."]},{"entry":["OP_CHANGE_ORDINAL","Change the ordinal position of this"]},{"entry":[{},"record in the collection."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 47 illustrates the allowed values for the GrooveCollectionWaffleSystem enumerated data type:",{"@attributes":{"id":"p-0225","num":"0227"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"280pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 47"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveCollectionWaffleSystemColumns"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["WAFFLE_ROWTYPE_COLUMN","One of the values for"]},{"entry":[{},"GrooveCollectionRowType."]},{"entry":["WAFFLE_SYNTHKIND_COLUMN","If not a data row, one of the values in"]},{"entry":[{},"GrooveCollectionSynthType."]},{"entry":["WAFFLE_RECORDID_COLUMN","A unique identifier for the record. The"]},{"entry":[{},"RecordID must be unique within the"]},{"entry":[{},"collection, but may not be unique in other"]},{"entry":[{},"scopes."]},{"entry":["WAFFLE_PARENT_RECORDID_COLUMN","A reference to a parent record that contains"]},{"entry":[{},"the recordID of a record in the collection. If"]},{"entry":[{},"the record reference in the parent recordid is"]},{"entry":[{},"deleted, this record will also be deleted from"]},{"entry":[{},"the collection."]},{"entry":["WAFFLE_LEVEL_COLUMN","The number of indention levels from the root"]},{"entry":[{},"level of the hierarchy. The root level is 0."]},{"entry":["WAFFLE_RELPOS_COLUMN","A number between 0.0 (first row) and 100.0"]},{"entry":[{},"(last row)."]},{"entry":["WAFFLE_READ_COLUMN","A list of whoever has read this record. If this"]},{"entry":[{},"field is not present, no users have read the"]},{"entry":[{},"record."]},{"entry":["WAFFLE_EXPANDED_COLUMN","A boolean indicator for whether the row is"]},{"entry":[{},"collapsed or fully expanded."]},{"entry":["WAFFLE_HASCHILDREN_COLUMN","A boolean indicator for whether the row has"]},{"entry":[{},"children."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 48 illustrates the allowed values for the GrooveCollectionRecordlD enumerated data type:",{"@attributes":{"id":"p-0227","num":"0229"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 48"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GrooveCollectionRecordID"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NULL_RECORD_ID","The reserved value for the special null record id."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 49 illustrates the allowed values for the GrooveSortOrder enumerated data type:",{"@attributes":{"id":"p-0229","num":"0231"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 49"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"GrooveSortOrder"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Ascending","Collate by ascending data values"]},{"entry":[{},"Descending","Collate by descending data values."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"A software implementation of the above-described embodiment may comprise a series of computer instructions either fixed on a tangible medium, such as a computer readable media, e.g. a diskette, a CD-ROM, a ROM memory, or a fixed disk, or transmissible to a computer system, via a modem or other interface device over a medium. The medium can be either a tangible medium, including, but not limited to, optical or analog communications lines, or may be implemented with wireless techniques, including but not limited to microwave, infrared or other transmission techniques. It may also be the Internet. The series of computer instructions embodies all or part of the functionality previously described herein with respect to the invention. Those skilled in the art will appreciate that such computer instructions can be written in a number of programming languages for use with many computer architectures or operating systems. Further, such instructions may be stored using any memory technology, present or future, including, but not limited to, semiconductor, magnetic, optical or other memory devices, or transmitted using any communications technology, present or future, including but not limited to optical, infrared, microwave, or other transmission technologies. It is contemplated that such a computer program product may be distributed as a removable media with accompanying printed or electronic documentation, e.g., shrink wrapped software, pre-loaded with a computer system, e.g., on system ROM or fixed disk, or distributed from a server or electronic bulletin board over a network, e.g., the Internet or World Wide Web.","Although an exemplary embodiment of the invention has been disclosed, it will be apparent to those skilled in the art that various changes and modifications can be made which will achieve some of the advantages of the invention without departing from the spirit and scope of the invention. For example, it will be obvious to those reasonably skilled in the art that, although the description was directed to a particular hardware system and operating system, other hardware and operating system software could be used in the same manner as that described. Other aspects, such as the specific instructions utilized to achieve a particular function, as well as other modifications to the inventive concept are intended to be covered by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and further advantages of the invention may be better understood by referring to the following description in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
