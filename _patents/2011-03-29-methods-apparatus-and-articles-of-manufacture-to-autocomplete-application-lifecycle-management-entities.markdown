---
title: Methods, apparatus and articles of manufacture to autocomplete application lifecycle management entities
abstract: Example methods, apparatus and articles of manufacture to autocomplete application lifecycle management (ALM) entities are disclosed. A disclosed example method includes obtaining an action associated with an ALM entity, and tracing an ALM repository starting with the ALM entity to automatically identify a connected set of entities and relationships that complete the action.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09519476&OS=09519476&RS=09519476
owner: Hewlett Packard Enterprise Development LP
number: 09519476
owner_city: Houston
owner_country: US
publication_date: 20110329
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Application lifecycle management (ALM), which is also known as application management, is a process to manage the lifecycle of an application from inception to retirement. ALM combines business management and software engineering to facilitate and\/or integrate requirements management, architecture, coding, testing, tracking, and release management.","As used herein, an application lifecycle management (ALM) model or graph refers to a plurality of ALM entities and relations between those entities. ALM entities are intellectual and\/or business assets such as tests and\/or requirements that are developed using an ALM tool such as one or more modules of HP\u00ae ALM, which is sold by Hewlett-Packard\u00ae, the assignee of this patent. Example ALM entities include, but are not limited to, a requirement, a test to determine whether a requirement is satisfied, a result of an execution of a test, a resource such as a script or a program to execute a test, and\/or an attachment such as an image, a document and\/or a video. ALM relations define logical connections between two entities. Example hierarchical relations include, but are not limited to, contain, compose and\/or attach. Example connecting relations include, but are not limited to, realizes, uses and\/or depends on. An example ALM graph includes a test (a first entity) connected to both a result of an execution of the test (a second entity) and a script to execute the test (a third entity). In some examples, an ALM model and\/or graph may be represented and\/or defined by one or more extensible spring based eXtensible Markup Language (XML) files and\/or associated logic. Additionally or alternatively, an ALM model and\/or graph may be represented by one or more logical object model (LOM) files.","ALM tools such as HP ALM may be used to manage a large number of entities and\/or complex relations among these entities, and\/or to enable actions (e.g., copy and\/or baseline) to be performed on a set of entities and relations. The effort to ascertain the optimal, sufficient and\/or necessary set of entities and relations needed to complete, implement and\/or carry out an action is increasing as the scale and\/or complexity of enterprise applications increases. Assigning a user to manually perform this task is not only time consuming but is error prone. For example, the identified set may be too large (e.g., including unneeded, obsolete and\/or confusing entities and relations) or, more problematically, too small (e.g., excluding entities and relations needed for that action).","To overcome at least these challenges, example methods, apparatus and articles of manufacture to autocomplete ALM entities are disclosed herein. As used herein, autocompletion of an ALM entity refers to the automatic identification and\/or determination of the set of entities and relations required and\/or needed to complete, implement and\/or carry out an action associated with that ALM entity. In other words, given the ALM entity and the action, autocompletion refers to the automatic identification of a necessary and sufficient set of entities and relations for the action to be correct, coherent, and complete. As used herein, an action is complete, correct and\/or coherent when all entities and\/or relations required and\/or needed to carry out and\/or implement the action are included without the inclusion of any unneeded entities and\/or relations. Because the examples disclosed herein may be used to automatically complete an ALM entity, users are unburden from manually identifying entities and\/or relations, and the sufficiency and necessity of the set of identified entities and\/or relations can be ensured. That is, the set of identified entities and\/or relations contains only the entities relations necessary to carry out the action without containing any excess and\/or unneeded entities and\/or relations.","The examples disclosed herein implement a generic, extensible and configurable framework to manage and\/or utilize ALM graph traversal rules. Given one or a set of entry and\/or initial entities, the examples disclosed herein iteratively discover and\/or traverse an ALM model and\/or graph to automatically identify and\/or ascertain an optimal, sufficient and\/or necessary set of entities and relations needed to complete, implement and\/or carry out an action associated with those ALM entities. As disclosed herein, graph traversal rules are configurable and\/or enforceable per action.","Autocompletion may be used, for example, to implement any number and\/or type(s) of function(s) and\/or use case(s) within an ALM tool. For example, autocompletion may be used to: (a) capture a baseline, which is a snapshot of a set of entities and\/or relations at a particular point in time; (b) copy one or more entities between two projects, including all related entities and\/or relations; and\/or (c) create a filtered set of entities such as defects, tests planned and\/or executed for project planning and\/or tracking purposes.","A disclosed example method to autocomplete an ALM entity includes obtaining an action associated with the ALM entity, and tracing an ALM repository starting with the ALM entity to automatically identify a connected set of entities and relationships that complete the action.","A disclosed example apparatus to autocomplete an ALM entity includes a interface module to obtain an action associated with the ALM entity, and an autocompletor to trace an ALM repository starting with the ALM entity to automatically identify a connected set of entities and relationships that complete the action.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["100","100","100","105","110","115","105","110","100","105","100","115","115"]},"To implement ALM functionality, the example workstation  of  includes an ALM module . The example ALM module  of  includes an ALM core  that provides and\/or implements basic ALM functional and\/or building blocks and\/or ALM functions of the ALM module . The functionality of the example ALM module  of  is extensible via ALM sub-modules - implemented on top of the example ALM core . In other words, the example ALM sub-modules - utilize core ALM functionality implemented by the example ALM core  to implement higher level functionality such as ALM project copying and\/or creation of ALM baselines.","To create ALM project baselines, the example ALM module  of  includes a baseliner . Starting with one or more ALM entities identified by a user via the input device(s)  and the user interface module(s) , the example baseliner  of  directs an autocompleter  to automatically identify the set of entities and\/or relations linked to the identified entities, and saves the identified set as an ALM baseline. By using the example autocompletor  to automatically identify the set of entities and\/or relations, the ALM baseline will include all of the entities and\/or relations associated with the identified ALM entities.","To copy ALM projects and\/or information contained in ALM projects, the example ALM module  of  includes a copier . Starting with one or more ALM entities identified by a user via the input device(s)  and the user interface module(s) , the example copier  of  directs the example autocompleter  to automatically identify the set of entities and\/or relations linked to the identified entities, and copies the identified entities and\/or relations from a first ALM project to a second ALM project. By using the example autocompletor  to automatically identify the set of entities and\/or relations, the second ALM project will include all of the entities and\/or relations associated with the identified ALM entities","To autocomplete ALM entities, the example ALM module  of  includes the example autocompletor . Given one or more initial ALM entities and an action, the example autocompletor  of  automatically traverses through an ALM repository and\/or database  to automatically identify a necessary and\/or sufficient set of entities (i.e., descendants of the initial ALM entities) and\/or relations for the action to be correct, coherent, and complete. In some examples, the example autocompletor  applies one or more user-configurable and\/or user-definable logical filter(s)  that cause the autocompletor  to include and\/or exclude certain entities and\/or relations while autocompleting ALM entities. An example logical filter  causes the autocompletor  to not include covering tests. An example process that may be carried out to implement the example autocompletor  of  is described below in connection with .","ALM project information may be stored in the example ALM repository and\/or database  of  using any number and\/or type(s) of data structure(s) and\/or file(s). For example ALM project information may be stored using LOM files that define an inventory of ALM entities, the relations between the entities, and per action traversal rules for those relations. In some examples, LOM files are extensible in that a LOM file can include other LOM files. Some ALM entities of a LOM file may be assigned subtypes used by the autocompletor  to refine and\/or negate traversal rules when traversal is not applicable for a particular subtype. For example, an automated test subtype is not allowed to include design steps, thereby obviating the need for the autocompletor  to include any associated design entities and\/or relations while traversing the ALM repository . The example ALM repository and\/or database  may be implemented by any number and\/or type(s) of volatile and\/or non-volatile memory(-ies), memory device(s) and\/or storage device(s). In some examples, the ALM repository and\/or database  is stored and\/or implemented at the example workstation . Additionally or alternatively, the ALM repository and\/or database  may be implemented at another device such as another workstation and\/or a server accessed via, for example, a local-area network and\/or a wide-area network.","To access the example ALM repository and\/or database , the example workstation  of  includes a repository and\/or database interface . The example repository and\/or database interface  of  implements any number and\/or type(s) of application programming interface(s), message(s) and\/or protocol(s) to enable the ALM module  and\/or other portions of the example workstation  to access, store, write and\/or modify ALM information stored in the ALM repository and\/or database .","While an example workstation  configured and\/or programmed to autocomplete ALM entities is illustrated in , one or more of the interfaces, elements and\/or devices illustrated in  may be combined, divided, re-arranged, omitted, eliminated and\/or implemented in any other way. Further, the example user interface module(s) , the example display device(s) , the example input device(s) , the example ALM module , the example ALM core , the example baseliner , the example copier , the example autocompletor , the example ALM repository and\/or database , the example repository and\/or database interface  and\/or, more generally, the example workstation  may be implemented by the example process platform P of  and\/or one or more circuit(s), programmable processor(s), fuses, application-specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)), field-programmable logic device(s) (FPLD(s)), and\/or field-programmable gate array(s) (FPGA(s)), etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and\/or firmware implementation, at least one of the example user interface module(s) , the example display device(s) , the example input device(s) , the example ALM module , the example ALM core , the example baseliner , the example copier , the example autocompletor , the example ALM repository and\/or database , the example repository and\/or database interface  and\/or, more generally, the example workstation  is hereby expressly defined to include a tangible article of manufacture such as a tangible machine-readable medium storing machine-readable instructions such as the firmware and\/or software. Further still, the example workstation  may include interfaces, elements and\/or devices instead of, or in addition to, those illustrated in , and\/or may include more than one of any or all of the illustrated interfaces, elements and\/or devices.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 2","FIG. 2"],"b":["132","132","205","132"]},"The autocompletor  identifies any broken relations in the ALM graph (block ). A broken relation is a relation that is only logically connected to an entity at one end. If no broken relations are identified (block ), control exits from the example machine-accessible instructions of .","If at least one broken relation is found (block ), the autocompletor  selects a broken relation (block ) and determines whether traversal of the broken relation is needed and\/or required (block ). The autocompletor  determines whether the broken relation needs to be traversed based on (a) whether the relation is needed to complete the action, (b) subtype traversal rules and (c) the user-defined and\/or user-configurable rules . If at least one of the conditions is not met (block ), then control proceeds to block  to determine whether there is another broken relation to process.","If all three of the conditions are met (block ), the autocompletor  identifies the missing ALM entity (block ). In some examples, the identified missing ALM entity is added to the set of ALM entities identified by the autocompletor  even when the user-defined and\/or user-configurable rules  exclude the identified missing ALM entity.","If the identified missing ALM entity is weak and\/or dependent (e.g., it cannot be used alone as is) (block ), the autocompletor  identifies the independent and\/or strong ALM entity on which is depends (block ). The identified ALM entities are add to the set of ALM entities and\/or relations and, thus, to the ALM graph (block ). For example, if the identified missing ALM entity is a test, the folder (ALM entity) containing the test is identified and added. If the folder contains other tests than those identified by the autocompletor  they are, however, not included. Control then proceeds to block .","The autocompletor  determines whether there are more broken relations to process (block ). If there are more broken relations to process (block ), control returns to block  to select another broken relation.","If there are no more broken relations to process (block ), the autocompletor  removes any duplicate ALM entities and\/or relations contained in the ALM graph (block ). For example, if two different folder entities with a hierarchical relationship were added, the lower (e.g., dependent) folder may be removed. Control then returns to block  to identify whether any new broken relations have been introduced.","A processor, a controller and\/or any other suitable processing device may be used, configured and\/or programmed to execute and\/or carry out the example machine-readable instructions of . For example, the example process of  may be embodied in program code and\/or machine-readable instructions stored on a tangible computer-readable medium accessible by a processor, a computer and\/or other machine having a processor such as the example processor platform P of . Machine-readable instructions comprise, for example, instructions that cause a processor, a computer and\/or a machine having a processor to perform one or more particular processes. Alternatively, some or all of the example machine-readable instructions of  may be implemented using any combination(s) of fuses, ASIC(s), PLD(s), FPLD(s), FPGA(s), discrete logic, hardware, firmware, etc. Also, some or all of the example machine-readable instructions of  may be implemented manually or as any combination of any of the foregoing techniques, for example, any combination of firmware, software, discrete logic and\/or hardware. Further, many other methods of implementing the example process of  may be employed. For example, the order of execution may be changed, and\/or one or more of the blocks and\/or interactions described may be changed, eliminated, sub-divided, or combined. Additionally, any or all of the example machine-readable instructions of  may be carried out sequentially and\/or carried out in parallel by, for example, separate processing threads, processors, devices, discrete logic, circuits, etc.","As used herein, the term \u201ctangible computer-readable medium\u201d is expressly defined to include any type of computer-readable medium and to expressly exclude propagating signals. As used herein, the term \u201cnon-transitory computer-readable medium\u201d is expressly defined to include any type of computer-readable medium and to exclude propagating signals. Example tangible and\/or non-transitory computer-readable medium include a volatile and\/or non-volatile memory, a volatile and\/or non-volatile memory device, a compact disc (CD), a digital versatile disc (DVD), a floppy disk, a read-only memory (ROM), a random-access memory (RAM), a programmable ROM (PROM), an electronically-programmable ROM (EPROM), an electronically-erasable PROM (EEPROM), an optical storage disk, an optical storage device, magnetic storage disk, a network-attached storage device, a server-based storage device, a shared network storage device, a magnetic storage device, a cache, and\/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and\/or for caching of the information) and which can be accessed by a processor, a computer and\/or other machine having a processor, such as the example processor platform P discussed below in connection with .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3","FIG. 2"],"b":["100","132","100","100"]},"The processor platform P of the instant example includes at least one programmable processor P. For example, the processor P can be implemented by one or more Intel\u00ae, AMD\u00ae, and\/or ARM\u00ae microprocessors. Of course, other processors from other processor families and\/or manufacturers are also appropriate. The processor P executes coded instructions P present in main memory of the processor P (e.g., within a volatile memory P and\/or a non-volatile memory P), in a storage device P and\/or stored on a removable computer-readable storage medium P such as a CD, a DVD, a floppy disk and\/or a FLASH drive. The processor P may execute, among other things, the example machine-readable instructions of  to autocomplete an ALM entity. Thus, the coded instructions P may include the example instructions of .","The processor P is in communication with the main memory including the non-volatile memory P and the volatile memory P, and the storage device P via a bus P. The volatile memory P may be implemented by Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS Dynamic Random Access Memory (RDRAM) and\/or any other type of RAM device. The non-volatile memory P may be implemented by flash memory, and\/or any other desired type of memory device. Access to the memory P and the memory P may be controlled by a memory controller.","The processor platform P also includes an interface circuit P. Any type of interface standard, such as an external memory interface, serial port, general-purpose input\/output, as an Ethernet interface, a universal serial bus (USB), and\/or a PCI express interface, etc, may implement the interface circuit P.","One or more input devices P are connected to the interface circuit P. The input device(s) P permit a user to enter data and commands into the processor P. The input device(s) P can be implemented by, for example, a keyboard, a mouse, a touchscreen, a track-pad, a trackball, isopoint and\/or a voice recognition system.","One or more output devices P are also connected to the interface circuit P. The output devices P can be implemented, for example, by display devices (e.g., a liquid crystal display, a cathode ray tube display (CRT), a printer and\/or speakers). The interface circuit P, thus, typically includes a graphics driver card.","The interface circuit P may also include one or more communication device(s) P such as a network interface card to facilitate exchange of data with other computers, nodes and\/or routers of a network.","In some examples, the processor platform P also includes one or more mass storage devices P to store software and\/or data. Examples of such storage devices P include a floppy disk drive, a hard disk drive, a solid-state hard disk drive, a CD drive, a DVD drive, and\/or any other solid-state, magnetic and\/or optical storage device. The example storage devices P may be used to, for example, store the example instructions of . Additionally or alternatively, the coded instructions P may be obtained from a communicatively coupled device P such as an external floppy disk drive, an external hard disk drive, an external solid-state hard disk drive, an external CD drive, an external DVD drive a server, a network-attached storage device, a server-based storage device, and\/or a shared network storage device from which the coded instructions P may be downloaded and\/or installed. The device P may, for example, be communicatively coupled to the processor platform P via the communication devices P and\/or the interface P. In some examples, the removable storage medium P and\/or the device P contains, includes and\/or stores an installation package and\/or program including the coded instructions P.","Although certain example methods, apparatus and articles of manufacture have been described herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all methods, apparatus and articles of manufacture fairly falling within the scope of the claims of this patent either literally or under the doctrine of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0003","num":"0002"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0004","num":"0003"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 3","FIG. 1","FIG. 2"]}]},"DETDESC":[{},{}]}
