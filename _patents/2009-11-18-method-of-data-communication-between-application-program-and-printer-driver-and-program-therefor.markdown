---
title: Method of data communication between application program and printer driver, and program therefor
abstract: An information processing apparatus and method. The apparatus comprises a generation unit configured to generate a named shared memory that can be accessed by both an application which runs with a first bit number and a printer driver which runs with a second bit number different from the first bit number. A storing unit is configured to store information in the named shared memory generated by the generation unit, and an acquisition unit is configured to acquire the information stored by the storing unit from the named shared memory generated by the generation unit. The storing unit is executed by the printer driver, and the acquisition unit is executed by the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298522&OS=09298522&RS=09298522
owner: CANON KABUSHIKI KAISHA
number: 09298522
owner_city: Tokyo
owner_country: JP
publication_date: 20091118
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE EMBODIMENTS","First Embodiment","Effects of this Embodiment","Other Embodiments"],"p":["1. Field of the Invention","The present invention relates to a method and program for communication of data between an application program, which calls an API (Application Programming Interface) supplied by an operating system, and a printer driver called by the operating system.","2. Description of the Related Art","An application program for printing acquires various printing-related information via an API generally provided by an operating system (\u201cOS\u201d below) and notifies of print settings.","The application program calls the function of the OS-provided API in order to acquire the capabilities of the printer. The OS queries a printer driver regarding the capabilities of the printer and returns the acquired capabilities information to the application program. The application program utilizes the returned printer capabilities information to decide the print settings used when printing is performed. The application program then calls the OS-provided API to thereby notify the OS and printer driver of the print settings.","By way of example, the type of paper that can be handled depends upon printer capabilities. Accordingly, the application program acquires a list of paper types that can be handled by the printer performing the printing. The types of paper usable in printing are designated by the user or application program. In a case where the user is allowed to make the designation, the application program displays the acquired list of paper types on a display screen and the user is allowed to select the type of paper used in printing. A collection of selected values of setting items selected by the user in order to be used at the time of printing is referred to as the print settings. The OS or printer driver can be notified of these print settings in response to the application program calling the API provided by the OS. In addition to type of paper, other examples of ordinary setting items that can be mentioned are paper size and method of feed, double-sided printing, printing orientation and number of copies, etc.","In the case of the Windows (registered trademark) operating system from Microsoft, information relating to ordinary setting items such as the type of paper that can be handled by a printer can be acquired via an API referred to as a \u201cDeviceCapabilities function\u201d. By calling the function for every information category of setting item as in a list of paper type IDs, the application program can acquire a list of setting values on a per-category basis. Further, the information concerning the print settings used in printing can be reported from the application program to the OS or printer driver by calling an API referred to as a \u201cCreate DC function\u201d or \u201cReset DC function\u201d.","On the other hand, information relating to printer-specific features often cannot be acquired with a default API function provided by the OS. For example, with borderless printing used frequently in the printing of photographs, the amount of protrusion or \u201cextension\u201d beyond the size of the paper generally can be designated because it is required that the image be printed in an area larger than the paper size. The reason for this is an assumption that the user may set the paper in the printer in a skewed manner or that the paper will become skewed during its transport through the printer even if the paper has been set correctly. Accordingly, the set value of amount of extension in borderless printing differs depending upon the printer and although there are printers that enable the amount of extension to be set to large, medium and small values, there are also printers that only allow the amount of extension to be set to a small value. Information that cannot be acquired with an OS-provided default API function as in the manner of amount of extension in borderless printing will be referred to below as \u201cvender-specific information\u201d.","In order that an application program may acquire vendor-specific information in Windows, there is a method of utilizing a vendor-specific API provided by a module of the printer driver. There is also a method in which the application program acquires vendor-specific information from a printer driver by utilizing an API referred to as an \u201cExtEscape function\u201d provided by the OS.","A method of utilizing a vendor-specific API will be described first. The vendor-specific API is provided by a module constituting the printer driver. There are instances where the module is referred to as a \u201cprinter-driver SDK module\u201d. The application program first specifies the printer-driver SDK module. Next, the application program calls a LoadLibrary function, thereby loading the printer-driver SDK module into the address space of the process of the application program. The application program then calls the function of the vendor-specific API, which is provided by the printer-driver SDK module, whereby it can acquire the vendor-specific information (e.g., see the specification of Japanese Patent Laid-Open No. 2004-288013).","A method using the ExtEscape function will be described next. The ExtEscape function is an API provided by the OS and is used in order to transfer unique data between an application program and a printer driver. For example, the ExtEscape function is used when the application program determines whether the printer driver is equipped with an interface for executing its own image processing (e.g., see the specification of Japanese Patent Laid-Open No. 10-248014).","Since there are printers of many types and capabilities differ from one type to another, a printer driver is required for every type of OS. In the case of Windows, a large number of printer drivers are bundled with the OS product. Even if a printer driver is not bundled with the OS product, the OS is designed so that the appropriate printer driver is downloaded from Microsoft automatically via a network. Thus, with Windows, an environment is provided in which a large variety of printers print. Windows includes both a 32-bit version of the OS and a 64-bit version of the OS. Since a printer driver operates in close relation with the OS, a printer driver bundled with the 32-bit Windows product is a 32-bit printer driver and a printer driver bundled with the 64-bit Windows product is a 64-bit printer driver. The same holds true of printer drivers downloaded automatically. A 64-bit printer driver is downloaded in the case of the 64-bit version of the OS, and a 32-bit printer driver is downloaded in the case of the 32-bit version of the OS.","Further, there are two types of printer drivers that operate with Windows, namely a GDI printer driver and an XPS printer driver. GDI stands for \u201cGraphics Device Interface\u201d. This is a program, supplied by Windows, for allowing the application program to instruct graphic rendering that is independent of the output device. A characterizing feature of the GDI driver is that a rendering module of the printer driver interprets the rendering instruction of the application program implemented via the GDI and executes print processing.","On the other hand, one of the features of an XPS printer driver which can be mentioned is that the format of device-independent print data stored in a spool file is the XPS format. XPS stands for XML Paper Specification and is one open-standard electronic document format provided by Microsoft. The rendering instruction of the application program implemented via GDI is stored in a spool file upon being converted to XPS by an MXDC (Microsoft XPS Document Converter) provided by Microsoft. A rendering filter of the XPS printer driver interprets the XPS so that printing is executed. Here the MXDC of the XPS printer driver corresponds to the rendering module of the GDI printer driver.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2","b":["201","201","213","211","203","201","211","201","213","201","211","211","211","203","201","213"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3A","b":["201","301","301","201","311","321","311","321","201"]},"The application program  designates a vendor-specific Escape code (S) as the argument of the ExtEscape function in order to obtain the desired vendor-specific information as in the form of a list of amounts of extension in borderless printing, by way of example. At the same time, data necessary for Escape processing, described later, is passed as the argument of the ExtEscape function. When the application program  calls the ExtEscape function, the print support feature  of the OS calls a DrvDocumentEvent function of the user interface module  of the printer driver (S). The DrvDocumentEvent function is capable of referring to the argument when the ExtEscape function is called by the application program . When notification of the Escape event is given and processing of the DrvDocumentEvent function ends (S), the print support feature  allows the OS to call a DrvEscape function (S) of the rendering module  in the printer driver. The DrvEscape function is capable of referring to the argument when the application program  calls the ExtEscape function. The DrvEscape function executes processing conforming to the argument and generates return data of the ExtEscape function. Here the return data is arranged to include the vendor-specific information. The return data generated by the DrvEscape function is returned to the application program  via the print support feature  of the OS (S and S).","In a case where a 32-bit application program in the 32-bit version of Windows or a 64-bit application program in the 64-bit version of Windows has called the ExtEscape function, the printer driver generally operates in a process the same as that of the application program. On the other hand, in a case where the 32-bit application program in the 64-bit version of Windows has called the ExtEscape function, a 64-bit printer driver operates in a 64-bit process that is different from the 32-bit process of the application program.","However, in a case where vendor-specific information is returned from a printer driver to an application program by the conventional methods, the problems set forth below arise.","First, a problem which arises with the XPS printer driver is that return data of the ExtEscape function cannot be generated.  is an example of a schematic view illustrating the operation of the ExtEscape function in an XPS printer driver. The application program  designates a vendor-specific Escape code and calls the ExtEscape function in order to acquire vendor-specific information (S). Initially the print support feature  of the OS calls the DrvDocumentEvent function of a user interface module  in the XPS printer driver (S). After notification of the Escape event is given and processing of the interface module  ends (S), the print support feature  of the OS calls a DrvEscape function (S) of an MXDC . Since the MXDC  has been provided by Microsoft, as described above, the vendor-specific Escape code is processed as an unknown Escape code. Accordingly, since the ExtEscape function cannot generate return data with respect to the vendor-specific code, the problem which arises is that the application program  cannot acquire vendor-specific information (S and S).","Next, the problem with a printer driver bundled with the 64-bit version of the Windows product is that a vendor-specific API cannot be supplied to a 32-bit application program. According to the Windows specifications, a 64-bit module cannot be loaded into the address space of the process of a 32-bit application program. With the 64-bit version of Windows, a 64-bit printer driver is required but both a 32-bit application program and a 64-bit application program will operate. Accordingly, in order for a 64-bit printer driver to supply a vendor-specific API to a 32-bit application program that operates on the 64-bit version of Windows, it is required that the modules constituting the 64-bit printer driver include at least one 32-bit module. However, since the printer driver bundled with the 64-bit version of Windows is a 64-bit printer driver, as set forth above, no 32-bit module is included. Accordingly, with the 64-bit printer driver bundled with the 64-bit version of Windows, a problem which arises is that the vendor-specific API cannot be supplied to the 32-bit application program.","In addition, in a case where a printer driver is bundled with the Windows product, a problem which arises is that with the user interface module and rendering module, a vendor-specific API cannot be provided. The reason for this is that the user interface module and rendering module capable of being acquired by a GetPrinterDriver function are modules produced by Microsoft; an another-company-specific API cannot be provided. Furthermore, in a case where an XPS printer driver is bundled with the Windows product, return data of the ExtEscape function cannot be generated, as mentioned above, and therefore the problem which arises is that the application program cannot specify a vendor-specific API providing module.","Accordingly, the present invention has been devised in view of the foregoing problems and provides a method of data communication between an application program and a printer driver which operate in an operating system, wherein the data communication method does not use a vendor-specific API and is not dependent upon a rendering module.","According to one aspect of the present invention, there is provided a method of communicating data between an application program unit and a printer driver unit which operate in an operating system, comprising: a step of the application program unit generating a named object and notifying the printer driver unit of at least name information, which is for accessing the named object, via an API provided by the operating system; a step of the printer driver unit referring to the named object based upon the name information and generating return data from information obtained as well as generation-result information indicating whether generation of the return data succeeded or failed; a step of the printer driver unit storing the return data and the generation-result information in the named object; a step of the application program unit referring to the generation-result information; and a step of the application program unit referring to the return data, which has been stored in the named object, based upon the generation-result information.","In accordance with the present invention, a printer driver stores the vendor-specific information in a named object and an application program refers to the information contained in the named object, whereby the application program is capable of executing processing without a limitation being imposed by the specifications of an OS-provided API.","Furthermore, since the application program utilizes a named shared memory and an ExtEscape function, it is possible for both an event processing unit of a user interface module and an Escape processing unit of a rendering module to store vendor-specific information in the named shared memory. As a result, since processing by the user interface module becomes possible, the vendor-specific information can be returned to the application program even by an XPS printer driver.","Furthermore, by using the named object, vendor-specific information can be returned to the application program even in a case where an application program and printer driver having different operating conditions operate as separate processes.","Furthermore, a printer driver bundled with the 64-bit version of Windows is capable of returning vendor-specific information to a 32-bit application program.","Further, since the printer driver operates only when the application program calls the API, it is unnecessary for a program for providing vendor-specific information to be made to wait as a service or separate process.","Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawing.","The embodiments of the present invention will be described below in detail with reference to the accompanying drawings. It should be noted that the embodiments set forth below do not limit the present invention described in the scope of the claims, and all combinations of features described in the embodiments are not necessarily essential in the present invention.","First, reference will be had to  to describe the configuration of an XPS printer driver and a printing operation according to this embodiment. Further, a hardware configuration to which this embodiment is applicable will be described later with reference to .","<Operation of XPS Printer Driver at Time of Printing>",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIG. 5"],"b":["411","421","523","525"]},"By calling the user interface module  from the application program  via the print support feature  of the OS, the user is allowed to make various settings relating to printing.","If printing is instructed from the application program  by user operation, the content of this instruction is sent to the print support feature  of the OS. Specifically, DC (Device Context), which is a virtual print area, is created by a GDI and the DC is supplied to the application program . Document-data drawing processing is executed with respect to the DC by the application program . The drawing content is converted to the XPS format by the MSDC , as a result of which XPS-formatted print data is generated. The XPS-formatted print data is spooled temporarily in a storage device as a spool file  on a per-job basis by the print support feature  of the OS.","The description will be premised on the fact that the application program  causes the GDI to perform drawing. In the case of an application program that is capable of creating an XPS-formatted electronic document, on the other hand, it is possible for created XPS-formatted print data to be spooled without relying upon a GDI and MSDC .","The data that has been stored in the spool file  is supplied to a filter pipeline  called by a print pipeline service  of the OS. The filter pipeline  is composed of any number of filters described in a pipeline configuration file of the XPS printer driver (not shown). In a case where a print command that can be interpreted by a printing device  does not exist in the XPS format, at least a filter for converting the spooled XPS-formatted data to a print command in a format that can be interpreted by the printing device is required. In , the filter pipeline  is constituted by the layout filter  and rendering filter . The layout filter  acquires the XPS-formatted print data from the spool file and then edits and outputs the print data as necessary based upon the print settings. If there is no need to manipulate the print data, then the acquired print data is output as is. The output of the layout filter  is supplied to the rendering filter . The rendering filter  executes rendering processing of each page in the supplied XPS-formatted print data, makes a conversion to a print command upon executing the required image processing and outputs the print command. The print command that has been output by the rendering filter  is supplied to the printing device , which proceeds to execute a printing operation.","<Print Settings Dialog>","A print settings dialog which the user interface module  provides to the user will be described next.  is a diagram illustrating an example of a print settings dialog displayed when the print settings in this embodiment are made by the user. The print settings dialog displays settings-related content and accepts from the user an instruction and input for changing the settings content. Illustrated as an example in  is a setting relating to extension-amount information in borderless printing, which is information that cannot be acquired with an OS-provided API. Not illustrated here are setting items relating to ordinary information that can be handled by a printer, which information is obtained by the above-mentioned DeviceCapabilities function.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 6","b":["601","601","611","613","615","617","621","623","621","623"]},"By clicking an OK button  after each item is selected, the user can close the borderless settings dialog  and cause the set print settings to be reflected in printing. If a CANCEL button  is clicked, the borderless settings dialog  closes and the content of the selected setting items is discarded and is not reflected in printing. If a DEFAULTS button  is clicked, the set values of each of the setting items in the borderless settings dialog  are restored to the normal values. If a HELP button  is clicked, guidance related to the setting items in the borderless settings dialog  can be displayed in a separate window.","Thus, the user is capable of configuring printing relating to printer-specific capabilities, and not just ordinary information such as paper size, via a print settings dialog which the user interface module  provides to the user.","<Acquisition of Unique Data Using Named Shared Memory and ExtEscape Function>","Described next will be the flow of processing whereby the application program  acquires vendor-specific information from the XPS printer driver using the ExtEscape function. The named shared memory will be described first. A named shared memory is one type of file mapping object and is one named object provided by the OS. A feature of a named shared memory is that it is accessible from multiple processes. The multiple processes mentioned here include a 32-bit process and a 64-bit process. This means that the named shared memory is accessible from both the 32-bit and 64-bit processes. For example, even in a case where the process of an application program that calls the ExtEscape function and a process in which the printer driver called from the print support feature of the OS operates do not coincide in terms of the number of bits, access becomes possible from the process of the application by using the named shared memory.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 4","b":["201","401","401","201","401","402","301","331","403","331","331","401","401","404","331","405","301","341","406","341","201","407","408","201","401","409","201","401"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 7","b":["201","701","201","201","702","201","201","301","301","703","411","705"]},"The user interface module  for which the DrvDocumentEvent function has been called executes processing for storing the vendor-specific information in the named shared memory (). In a case where the event of which notification has been given to the DrvDocumentEvent function is the Escape event and, moreover, the vendor-specific Escape code has been designated, these being the conditions for processing, the named shared memory is accessed based upon the name information of the named shared memory passed as the argument of the ExtEscape function. The user interface module  reads out the type of vendor-specific information that has been stored in the named shared memory, generates vendor-specific information conforming to this type and stores this information in the named shared memory. Further, the user interface module  stores generation-result information, which indicates whether generation of the vendor-specific information has succeeded or failed, in the named shared memory. The user interface module  terminates processing of the DrvDocumentEvent function and notifies the print support feature  of the OS of the end of processing ().","The print support feature  of the OS calls the DrvEscape function of the MSDC , which is the rendering module, after the processing of the DrvDocumentEvent function in the user interface module  ends (). In a case where the vendor-specific Escape code has been designated, the MSDC  for which the DrvEscape function has been called cannot interpret the content of this code (). Accordingly, the DrvEscape function cannot execute processing and returns a failure result to the print support feature  of the OS (). From the processing result indicative of failure of the DrvEscape function of the MSDC , the print support feature  of the OS returns a result, indicative of failure of processing by the ExtEscape function, to the application program  as a return value ().","Following the end of processing by the ExtEscape function, the application program  acquires vendor-specific information through the following procedure (): First, since the return value of the ExtEscape function always means processing failure, the application program  ignores this return value. The application program  then refers to the generation-result information that has been stored in the application program . If the user interface module  succeeds in generating the vendor-specific information, the application program  acquires the vendor-specific information that has been stored the named shared memory. Finally, the application program  deletes the named shared memory ().","Thus, by using the named shared memory and the OS-provided ExtEscape function, the application program  is capable of acquiring vendor-specific information from the XPS printer driver. Accordingly, even in an environment in which a 32-bit application program operates using the 64-bit version of Windows, a printer driver that operates in a 64-bit process different from the process of the application program can provide vendor-specific information by using this method.","It should be noted that in a case where multiple types of vendor-specific information are acquired, it goes without saying that it will suffice if the application program  repeats the processing steps  and  a plurality of times as necessary after processing step  and finally executes the processing step .","It should be noted that although the name information of the named shared memory is passed as the argument of the ExtEscape function, information for generating the name information may just as well be passed as the argument. For example, the name of the named shared memory can be generated using a process ID and thread ID, as mentioned above. Accordingly, the process ID and thread ID may be passed to the argument of the ExtEscape function. In this case, the user interface module  generates the name information of the named shared memory using the process ID and thread ID passed as the argument and accesses the named shared memory using this name information.","<Structure of Data Stored in Named Shared Memory>","The structure of the data stored in a named shared memory will be described next.  is a diagram illustrating an example of the structure of data stored in a named shared memory in this embodiment. A named shared memory  is composed of members  to .","The member  indicates the size of the named shared memory . A signature  is any value that the user assigns to the named shared memory. Generally an integral value or a short character string is used. The signature  may be made a value capable of being identified commonly by both the application program and printer driver. An input data offset  is an offset indicating the position of offset data and is represented by the number of bytes, etc., from the beginning of the named shared memory . Input data size  is the size of the input data. Here the size of input data , described later, is represented by the number of bytes, etc. An output data offset  is an offset indicating the position of output data and is represented by the number of bytes, etc., from the beginning of the named shared memory . Output data size  is the size of the output data. Here the size of output data , described later, is represented by the number of bytes, etc.","Generation-result information  contains information indicting whether the user interface module  succeeded in generating the vendor-specific information. The application program  refers to this information and discriminates the vendor-specific information generation. The input data  contains data which the application program  delivers to the printer driver. The input data  may request only a single item in the vendor-specific information, or data that subdivides the content of a setting item and requests a plurality of setting items may be adopted as the input data. For example, in the case of a plurality of setting items, data that collectively requests a list of extension-amount setting values in borderless printing as the type of vendor-specific information may be adopted as the input data.","The output data  contains vendor-specific information that has been generated by the . For example, the output data  contains a list of extension-amount setting values in borderless printing conforming to the print settings information. Here the content of member  may be subdivided in accordance with the input content of the input data  and a plurality of setting items may be adopted as output data. For example, the output data  may contain a list of extension-amount setting values in borderless printing conforming to the feature as well as the number of elements included in the list. It should be noted that the data included in the input data  and output data  is not limited to the data mentioned and may be any data so long as it is data that is to be communicated between the application program and the user interface module. The member  is an unused area of the named shared memory .","<Processing for Acquiring Vendor-Specific Information of Application Program>","Next, processing by which the application program acquires vendor-specific information will be described.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 9","b":["901","903","905","907","823","909","823","911","913","911","801","913","915","905","915","903","916"]},"<Processing of DrvDocumentEvent Function>","Described next will be processing of the DrvDocumentEvent function of the user interface module.  is an example of a flowchart of processing of the DrvDocumentEvent function.","Processing starts at step S. Next, at step S, the user interface module determines whether the type of event of which it has been notified is the Escape event. Control proceeds to step S if the event is the Escape event and to step S if the event is not the Escape event. At step S, the user interface module determines whether the Escape code passed as the Escape event is the vendor-specific Escape code. Control proceeds to step S if the code is the vendor-specific Escape code and to step S if it is not. At step S, the user interface module acquires the name information of the named shared memory passed from the ExtEscape function by the argument and refers to the type of vendor-specific information from the named shared memory. The user interface module generates the vendor-specific information in accordance with the type and stores the information in the named shared memory together with the generation-result information indicating whether generation of the vendor-specific information succeeded or failed. At step S, the user interface module executes processing in accordance with various events other than the Escape event of which notification has been given. Control then proceeds to step S. The various events at step S and the content processing conforming to the events have no relation to the present invention and need not be described in detail. The user interface module finally terminates processing at step S.","<Example of Configuration of Printing System>","A printing system to which this embodiment is applicable will be described next with reference to .  is an example of a block diagram illustrating the configuration of a printing system in this embodiment. Broadly speaking, the printing system in this embodiment comprises a printing device  and a data processing apparatus . The data processing apparatus  comprises blocks  to . Although the data processing apparatus is assumed to be a personal computer or the like, it may be any type of equipment so long as this embodiment can be implemented. The equipment should have an OS environment in which an application program and printer driver are capable of operating.","A CRT display device  displays a print settings dialog provided by the user interface module of the printer driver. A controller (CRTC)  is for controlling the display device. Block  is a data input unit such as unit such as a keyboard, block  a keyboard controller, block  a coordinate input unit such as a pointing device, block  a pointing-device controller, block  a CPU for controlling the overall apparatus, block  a ROM storing a boot program, etc., and block  a RAM utilized as a storage location for application programs and a printer driver program relating to the flowchart of this embodiment, and as a work area. Block  is a hard-disk drive storing the OS, application programs, the printer driver program relating to the flowchart of this embodiment, font data and data files, etc. Block  is a hard-disk controller. A spool file is also stored in the hard-disk drive  temporarily. Block  is a floppy (registered trademark) disk drive serving as a device for driving a portable storage medium, and block  is a floppy (registered trademark) disk controller.","Also provided are an interface  and an interface controller . The data processing apparatus  is connected to the printing device , such as an ink-jet printer, via an interface cable. A system bus  connects the blocks mentioned above. When power is introduced to the apparatus, the CPU  is started up by the boot program stored in the ROM , loads the OS from the hard-disk drive  and then waits for the operator to perform an operation. In a case where a print command or a command to change the print settings of the printer driver is received from the operator via the keyboard  or pointing device , or in a case where the system has been configured to start up automatically, the printer driver program that has been stored on the hard-disk drive  is loaded to the RAM  and executed by the CPU .","In the above embodiment, an example in which both input data and output data are stored using a single named shared memory is illustrated. However, it goes without saying that it may be so arranged that the data may be partitioned and stored in a plurality of named shared memories.","In the above embodiment, an example in which a named shared memory is used in order to store input and output data is illustrated. However, it goes without saying that another named object may be used instead. An example of a method that can be mentioned stores input and output data utilizing a file instead of a named shared memory and communicates the name of the file from the application program to the printer driver via an OS-provided API.","Further, in the above embodiment, an example in which the name of the named shared memory is communicated from the application program to the printer driver via an OS-provided API is illustrated. However, it goes without saying that information for accessing the named shared memory may be delivered and not the name information. For example, it may be so arranged that notification is given of information for generating name information utilized in order to access the named shared memory. Specifically, if name information is generated from a process ID and thread ID, then a method available is to notify of the process ID and thread ID upon making the name-information generating rule agree between the application program and printer driver.","Further, if, in a case where another named object is used instead of a named shared memory, the handle of the named object can be shared by multiple processes in common, then it will suffice if the handle is delivered as information for accessing the named object.","In the above embodiment, an example in which the ExtEscape function is used as the OS-provided API is illustrated. However, the invention is not limited to this arrangement and it goes without saying that it will suffice if the API is one called by a module, which constitutes the printer driver, via the print support feature of the OS. For example, it goes without saying that areas for acquiring name information of a named shared memory and vendor-specific information may be added to a private area, etc., of the DEVMODE structure that stores the print settings information, and a DocumentProperties function or DeviceCapabilities function may be used.","By adopting the arrangement described above, a printer driver stores vendor-specific information in a named object and an application program refers to the information that has been stored in the named object by the printer driver, whereby the application program is capable of executing processing without a limitation being imposed by the specifications of an OS-provided API. Further, since the printer driver operates only when the application program calls the API, it is unnecessary for another program for providing vendor-specific information to be made to wait as a service or separate process.","Furthermore, since the application program utilizes a named shared memory and an ExtEscape function, it is possible for both an event processing unit of a user interface module in a print module and an Escape processing unit of a rendering module to store vendor-specific information in the named shared memory. Since processing by the user interface module becomes possible, the vendor-specific information can be returned to the application program even by an XPS printer driver.","Furthermore, by using the named object, vendor-specific information can be returned to the application program even in a case where an application program and printer driver having different operating conditions operate as separate processes. Of course, application is possible even in a case where an application program and printer driver operate as identical processes.","Furthermore, a printer driver bundled with the 64-bit version of Windows is capable of returning vendor-specific information to a 32-bit application program.","Thus, a data communication method which does not use a vendor-specific API and is not dependent upon a rendering module is possible.","Aspects of the present invention can also be realized by a computer of a system or apparatus (or devices such as a CPU or MPU) that reads out and executes a program recorded on a memory device to perform the functions of the above-described embodiment(s), and by a method, the steps of which are performed by a computer of a system or apparatus by, for example, reading out and executing a program recorded on a memory device to perform the functions of the above-described embodiment(s). For this purpose, the program is provided to the computer for example via a network or from a recording medium of various types serving as the memory device (e.g., computer-readable medium).","While the present invention has been described with reference to exemplary embodiments, it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.","This application claims the benefit of Japanese Patent Application No. 2008-316274, filed Dec. 11, 2008, which is hereby incorporated by reference herein in its entirety."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
