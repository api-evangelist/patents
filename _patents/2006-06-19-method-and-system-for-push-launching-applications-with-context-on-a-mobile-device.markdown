---
title: Method and system for push launching applications with context on a mobile device
abstract: A mobile information device may execute a Java MIDlet or a non-MIDlet application. The mobile information device may further include an object-oriented application program interface that allows one or more object-oriented object classes to allow input and output data to be communicated between Java MIDlets in different MIDlet Suites and between non-MIDlet applications. The application program interface may be used to push launch applications with context on the mobile information device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07469140&OS=07469140&RS=07469140
owner: Sprint Spectrum L.P.
number: 07469140
owner_city: Overland Park
owner_country: US
publication_date: 20060619
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["This application is a continuation of U.S. patent application Ser. No. 10\/762,052, which was filed Jan. 21, 2004, titled \u201cMethod and System for Push Launching Applications with Context on a Mobile Device,\u201d and issued on Jul. 18, 2006 as U.S. Pat. No. 7,079,839. U.S. patent application Ser. No. 10\/762,052 claims the benefit of U.S. Provisional Application No. 60\/457,001, filed Mar. 24, 2003, and titled \u201cMethod and System for Exchanging Data Between Portable Applications for Mobile Devices,\u201d which is incorporated by reference herein. U.S. patent application Ser. No. 10\/762,052 claims the benefit of U.S. Provisional Application No. 60\/457,010, filed Mar. 24, 2003, and titled \u201cMethod and System for Exchanging Data Between Portable Applications for Mobile Devices,\u201d which is incorporated by reference herein. U.S. patent application Ser. No. 10\/762,052 claims the benefit of U.S. Provisional Application No. 60\/456,997, filed Mar. 24, 2003, and titled \u201cMethod and System for Push Launching Applications with Context on a Mobile Device,\u201d which is incorporated by reference herein. U.S. patent application Ser. No. 10\/762,052 claims the benefit of U.S. Provisional Application No. 60\/457,005, filed Mar. 24, 2003, and titled \u201cMethod and System for Accessing a Universal Message Handler on a Mobile Information Device,\u201d which is incorporated by reference herein. U.S. patent application Ser. No. 10\/762,052 claims the benefit of U.S. Provisional Application No. 60\/457,121, filed Mar. 24, 2003, and titled \u201cMethod and System for Downloading and Managing Portable Applications on a Mobile Device,\u201d which is incorporated by reference herein.","This invention relates to communications on mobile devices. More specifically, it relates to a method and system for push launching applications with context on a mobile device.","Mobile devices such as mobile phones, personal digital\/data assistants, (\u201cPDA\u201d), two-way pagers, etc. are relatively inexpensive, have become commonplace, and are available to most consumers. These mobile network devices can be wireless or wired mobile devices.","Such mobile devices are typically limited to small physical size, light weights and corresponding small display screen sizes. These mobile devices have a number of constraints including limited processing power, limited memory, limited battery life, a limited number of buttons on a user interface, etc.","The larger a processor in a mobile device, the larger the size and weight the device will be. The more memory in a device the more expensive it will be. Faster processors, more memory and color displays consume more battery power.","Content and service providers who provide content and services via mobile devices have to balance the physical constraints of such mobile devices along with the ability to provide applications and content that consumers actually want, and are willing to pay for. The content and services have to be provided to mobile devices in a format that is usable on the mobile device and have to be provided quickly since most users of mobile devices pay for content and services by the minute.","There are relatively few applications that have been created to be used on mobile devices that provide content in a format useable on the mobile devices. The applications that do exist include text-based micro-browsers for delivering real-time stock quotes, access to news, sports scores, weather forecasts, text-based electronic commerce applications and other types of text-based applications.","There are a number of problems associated with developing applications for mobile devices. One problem is that virtually every mobile device has a unique hardware platform. An application written for one mobile device hardware platform won't work on another hardware platform for another mobile device.","To help overcome this problem for devices in general, Sun Microsystems of Mountain View, Calif., developed the Java programming language. Java is a high-level programming language that was designed to be platform-neutral (i.e., it can be run on virtually any hardware platform). Java programs are compiled into byte-code and run in a special software environment known as a \u201cvirtual machine.\u201d This and other characteristics of Java make it a useful language for programming a large number of different types of applications for mobile devices. Java is typically used for programming small applications, called Java \u201capplets.\u201d","When Java applets are downloaded onto a device they are executed by a Java virtual machine in a secure \u201csandbox.\u201d A sandbox is Java virtual machine security area for downloaded (i.e., remote or untrusted) applets. The sandbox is an area in which such applets are confined and prevented from accessing certain data and resources (e.g., system resources and data). Confinement to the sandbox prevents downloaded applets from carrying out potentially dangerous or malicious operations on the device. Applets have to \u201cplay\u201d inside the sandbox, and any attempt to \u201cescape\u201d is thwarted by a Java security manager.","However, the full version of the Java programming language was too large to be used on mobile devices with constrained resources. When Sun Microsystems developed the second version of Java, it was split into three editions. The three editions include micro version, Java 2 Micro Edition (\u201cJ2ME\u201d) for small mobile devices, a standard version, Java 2 Standard Edition (\u201cJ2SE\u201d) for desktop or other larger devices, and an enterprise version, Java 2 Enterprise Edition (\u201cJ2EE\u201d) for multi-tier networking applications.","J2ME is cross-platform programming language that can be embedded into small application environments such as mobile phones, PDAs, two-way pagers, etc. The J2ME environment can be implemented specifically for an individual device through a Connected Limited Device Configuration (\u201cCLDC\u201d). This configuration is typically used for mobile devices that are battery operated, memory constrained, processor limited, low bandwidth, and provide high latency, network connectivity. The CLDC defines the basic libraries that must be present in a J2ME implementation so that a Java virtual machine can run the application across different hardware platforms and environments.","The J2ME Mobile Information Device Profile (\u201cMIDP\u201d) is a set of Java Application Programming Interfaces (\u201cAPI\u201d) that provides the runtime environment for J2ME applications using the CLDC. The MIDP manages applications, user interfaces, networking and input\/output for the mobile device.","J2ME applications that conform to the MIDP are called \u201cMIDlets\u201d (instead of an applet). A group of related MIDlets can be grouped together to create a MIDlet Suite that can be used to provide a more complex application to a mobile device.","J2ME MIDlets are being used on mobile devices to provide platform independent applications on mobile devices such as games, audio and video players, site-specific applications (e.g., dynamic stock quote banner, dynamic news banner, etc.) device specific applications (e.g., new ring tones, new fonts, new graphical look-and-feel, etc.) and many other types of applications.","There are a number of problems associated with using MIDlets and MIDlet Suites on a mobile device. One problem is that for security reasons, one MIDlet Suite cannot launch another MIDlet Suite (i.e., act as its handler). Since the CLDC and MIDP does not define or use a Java security manager (i.e., a security manager is typically too big and complex for small devices), the interactions of MIDlets is limited to MIDlets packaged together in the same MIDlet Suite. However, the MIDP specification does not explicitly prohibit one MIDlet Suite from launching another MIDlet Suite.","Another problem is that a MIDlet in a one MIDlet Suite cannot accept input data from, or cannot provide output data to, another MIDlet in another MIDlet Suite because a MIDlet Suite is executed in its own sandbox. This limits the type of MIDlet applications that can be created for a mobile device and prevents the ability to allow interaction between MIDlets or MIDlet Suites that have already been created. Another problem is that a MIDlet Suite cannot accept input data from, or provide output data to other applications on the mobile device (i.e., non-MIDlet applications).","Thus, it is desirable to allow a J2ME MIDlet in a MIDlet Suite to accept data from, and provide data to, other MIDlets in other MIDlet Suites on a mobile device. It is also desirable to allow a MIDlet to accept data from, and provide data to, other non-MIDlet applications on a mobile device.","In accordance with preferred embodiments of the present invention, some of the problems associated with using J2ME MIDlets on mobile device are overcome. A method and system for push launching applications with context on a mobile information device is presented.","One aspect of the invention includes an object-oriented application program interface including a one or more object-oriented object classes to allow input and output data to be communicated between J2ME MIDlets in different MIDlet Suites and between MIDlets and non-MIDlet applications. The application program interface may be used to push launch applications with context on the mobile information device.","The foregoing and other features and advantages of embodiments of the present invention will be more readily apparent from the following detailed description. The detailed description proceeds with references to the accompanying drawings.","Exemplary Wireless Network System",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 1","FIG. 1"],"b":["10","10","12","14","16","18","20","10","14","16","18"]},"The mobile information devices  include mobile phones \u2032, personal digital\/data assistants (\u201cPDA\u201d) \u2033, one and two-way pagers \u2032\u2033 and other types of wireless mobile and non-mobile information devices (not illustrated).","The wireless gateways  provides a code division multiple access (\u201cCDMA\u201d), Wideband CDMA (\u201cWCDMA\u201d), Time Division-Synchronous CDMA (\u201cTD-SCDMA\u201d), Advanced Mobile Phone Service (\u201cAMPS\u201d), Digital AMPS (\u201cD-AMPS\u201d), Universal Mobile Telecommunications System (\u201cUMTS\u201d), Radio Frequency (\u201cRF\u201d), paging and wireless messaging, Packet Cellular Network (\u201cPCN\u201d), Global System for Mobile Communications, (\u201cGSM\u201d), Generic Packet Radio Services (\u201cGPRS\u201d), Personal Communications Services (\u201cPCS\u201d), Cellular Digital Packet Data (\u201cCDPD\u201d), Wireless Application Protocol (\u201cWAP\u201d), Digital Audio Broadcasting (\u201cDAB\u201d), Bluetooth, 802.11a, 802.11b, or other type of wireless interfaces for the mobile information devices .","Further information on these wireless interfaces may be found in their respective standards documents. CDMA, for example, is described in further detail in Telecommunications Industry Association (\u201cTIA\u201d) standards IS-95A and IS-95B, which are both incorporated herein by reference in their entirety. CDMA is also described in the International Telecommunications Union (\u201cITU\u201d) IMT-2000 series of standards, which are all incorporated herein by reference in their entirety. CDMA is further described in the TIA IS-2000 series of standards, which are all incorporated herein by reference in their entirety. The IS-2000 series of standards are commonly referred to as CDMA2000.","The WAP includes several protocols and standards designed to provide wireless devices with access to electronic content, and it was developed as an alternative to other markup languages and protocols developed for the World-Wide-Web. One component of the WAP is a Wireless Markup Language (\u201cWML\u201d), which includes markup tags, and provides control over formatting and layout of electronic content. The WML is often more appropriate to use for wireless devices such as wireless phones than other markup languages such as Hyper Text Markup Language (\u201cHTML\u201d), etc.","The databases  include electronic content such as text, hypertext, graphical data or references to graphical data images, audio, video and other content. The electronic content may be stored as a Web page or WAP page on a database server . The database server downloads or \u201cserves\u201d electronic content from the database  to the mobile information device.","A hypertext document includes markup codes called \u201ctags.\u201d The structure of hypertext documents is defined by document markup languages such as Hand Held Device Markup Language (\u201cHDML\u201d), HTML, compact HTML (\u201ccHTML\u201d), eXtensible Markup Language (\u201cXML\u201d), WML and voice extensible Markup Language (\u201cVoxML\u201d), and others. Markup languages also allow references to additional electronic content besides text including graphics, animation, audio, video, applets, MIDlets and other electronic data.","Electronic content is typically displayed on a mobile information device  with a software application called a \u201cbrowser.\u201d A browser on a mobile information device  may be a sub-set of a larger browser, or a micro-browser. A micro-browser may not be capable of displaying complete content of a requested electronic content as stored on database server . A micro-browser typically reads electronic content and renders the electronic content into a presentation of text, graphics, animation, audio, video, etc., for display on the mobile information device .","The information network  includes the Internet, the World-Wide-Web, an intranet, or other information network. As is known in the art, the Internet is a world-wide network of interconnected computers. The World-Wide-Web is an information system on the Internet designed for electronic content interchange.","The devices illustrated in  interact with wireless network system  based on standards proposed by the Institute of Electrical and Electronic Engineers (\u201cIEEE\u201d), International Telecommunications Union-Telecommunication Standardization Sector (\u201cITU\u201d), Internet Engineering Task Force (\u201cIETF\u201d), Wireless Application Protocol Forum (\u201cWAP\u201d) Forum, Java Community, the American National Standard Institute (\u201cANSI\u201d), or other standards.","IEEE standards can be found on the World Wide Web at the Universal Resource Locator (\u201cURL\u201d) \u201cwww.ieee.org.\u201d The ITU, (formerly known as the CCITT) standards can be found at the URL \u201cwww.itu.ch.\u201d IETF standards can be found at the URL \u201cwww.ietf.org.\u201d The WAP Forum standards can be found at the URL \u201cwww.wapforum.org.\u201d The Java Community standards can be found at the URL \u201cjavasun.com.\u201d ANSI standards can be found at the URL \u201cwww.ansi.org.\u201d","An operating environment for devices and interfaces used for the present invention include a processing system with one or more high speed Central Processing Unit(s) (\u201cCPU\u201d), or other types of processors, and a memory system. In accordance with the practices of persons skilled in the art of computer programming, the present invention is described below with reference to acts and symbolic representations of operations or instructions that are performed by the processing system, unless indicated otherwise. Such acts and operations or instructions are referred to as being \u201ccomputer-executed,\u201d \u201cCPU executed\u201d or \u201cprocessor executed.\u201d","It will be appreciated that acts and symbolically represented operations or instructions include the manipulation of electrical signals by the CPU or processor. An electrical system represents data bits which cause a resulting transformation or reduction of the electrical signals, and the maintenance of data bits at memory locations in a memory system to thereby reconfigure or otherwise alter the CPU's or processor operation, as well as other processing of signals. The memory locations where data bits are maintained are physical locations that have particular electrical, magnetic, optical, or organic properties corresponding to the data bits.","The data bits may also be maintained on a computer readable medium including magnetic disks, optical disks, organic memory, and any other volatile (e.g., Random Access Memory (\u201cRAM\u201d)) or non-volatile (e.g., Read-Only Memory (\u201cROM\u201d)) mass storage system readable by the CPU or processor. The computer readable medium includes cooperating or interconnected computer readable medium, which exist exclusively on the processing system or be distributed among multiple interconnected processing systems that may be local or remote to the processing system.","Java","As is known in the art, Java is an object-oriented programming language developed by Sun Microsystems of Mountain View, Calif. More information about Java can be found at the URL \u201cjava.sun.com.\u201d Java is based on object-oriented programming techniques. As is known in the art, object-oriented programming is used to design computer software including object-oriented objects that are easy to create, cost effective to modify, and reusable. Object-oriented objects include \u201cobject data\u201d and \u201cobject services.\u201d Object services are provided through \u201cobject methods\u201d (also called \u201cobject operations\u201d or \u201cobject functions\u201d). Object methods typically operate on private data such as \u201cinstance data\u201d or \u201cobject state data\u201d that an object owns. A collection of objects is called an \u201cobject class\u201d which is sometimes called an \u201cobject type.\u201d An object class acts as a template that describes the behavior of sets of objects. An object's implementation is typically encapsulated, and is hidden from public view. Object private instance data can only be accessed by object methods of an object class. Object public instance data is accessed through a public \u201cobject interface.\u201d","Java was designed to be platform-neutral (i.e., it can be run on virtually any hardware platform). Java programs are compiled into byte-code, which is not refined to the point of relying on platform-specific instructions. Java runs on a hardware device in a special software environment known as a \u201cvirtual machine.\u201d","This characteristic of Java makes it a useful language for programming a large number of different types of mobile information device  applications. Java is typically used in programming small applications, called Java \u201capplets.\u201d","Java 2 Platform Micro Edition","The Java 2 Platform Micro Edition (\u201cJ2ME\u201d) is used to create applications for fixed and mobile wireless devices. J2ME is a subset of the Java 2 Platform Standard Edition (\u201cJ2SE\u201d). More information about J2ME can be found at the URL \u201cjava.sun.com\/j2me.\u201d","J2ME includes two major elements: (1) configurations; and (2) profiles. J2ME configurations provide a set of libraries and a virtual machine for a category of wireless devices. A configuration is a specification that defines the minimum Java libraries and Java virtual machine capabilities for a mobile information device . A configuration is defined for classes of devices with similar memory requirements and processing power. J2ME configurations are defined for both fixed wireless devices and mobile wireless devices.","J2ME profiles are built on top of configurations to provide a run-time environment for a specific device. J2ME profiles manage applications, user interfaces, networking, input\/output and other functionality of a device.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 2","b":["22","22","12","24","26","28","30","32","34"]},"The mobile information device hardware layer  includes the native hardware for the mobile information device . The native operating system layer  includes the native operating system being used on the mobile information device .","The configuration layer  provides a Java Virtual Machine (\u201cJVM\u201d) . The Java libraries layer  includes Java core libraries, Java classes and Java APIs. As is known in the art, a JVM is an environment in which Java programs run. The JVM gives Java programs a software-based device they can interact with. The JVM allows a Java program to be run on virtually any physical device platform. The Java Virtual Machine layer  may include a Kilo Virtual Machine, a Compact Virtual Machine or other Java virtual machine.","The Kilo Virtual Machine (\u201cKVM\u201d) is a complete Java runtime environment for small devices. It is a Java virtual machine as defined by the JVM Specification except for some specific deviations that are necessary for proper functioning on small devices. It is specifically designed for small, resource-constrained devices with a few hundred Kilobytes (\u201cKbytes\u201d) of total memory. The Compact Virtual Machine (\u201cCVM\u201d) was designed for larger consumer and embedded devices. The CVM supports all Java 2 Platforms. However, the present invention is not limited to the two Java virtual machines described and other J2ME, Java or other virtual machines may be used.","Currently there are two widely used J2ME configurations  including the Connected Limited Device Configuration (\u201cCLDC\u201d) and the Connected Device Configuration (\u201cCDC\u201d).","The CLDC in the J2ME runtime environment targets small, resource-constrained devices, such as mobile phones, personal digital assistants, small retail payment terminals, etc. Typically, these devices run on either a 16- or 32-bit CPU or processor and have 512 Kbytes or less memory available for the Java platform and applications. The J2ME CLDC Specification, version 1.0a, JSR000030, is incorporated herein by reference.","The CDC is designed for next-generation devices with more robust resources (e.g., set-top boxes, in-car entertainment devices, Internet appliances etc.) Typically, these devices run on a 32-bit CPU or processor and have two Mega-bytes (\u201cMbytes\u201d) or more memory available for the Java platform and applications. The J2ME CDC Specification, version 1.0, JSR000036, is incorporated herein by reference.","Returning to , the profile layer  may include a Mobile Interface Device Profile (\u201cMIDP\u201d), PDA profile, Foundation profile, Personal profile, Remote Machine Invocation (\u201cRMI\u201d) profile or other profile.","The MIDP extends the CLDC to provide domain specific APIs for user interfaces, networking, databases, and timers. The MIDP is typically used for wireless mobile phones and two-way pagers. The J2ME MIDP Specification, version 1.0, JSR000037, is incorporated herein by reference. The PDA profile is also based on the CLDC. It provides user interface APIs and data storage APIs for handheld devices such as PDAs. The J2ME PDA profile specification, JSR000075, is incorporated herein by reference.","The Foundation Profile extends the APIs provided by the CDC, but it does not provide any user interface APIs. The J2ME Foundation profile Specification, version 1.0, JSR000046, is incorporated by reference. As the name \u201cfoundation\u201d implies, the Foundation profile is meant to serve as a foundation for other profiles, such as the Personal profile and the RMI profile.","The Personal profile extends the Foundation profile to provide Graphical User Interfaces (\u201cGUIs\u201d) capable of running Java Web applets. The RMI profile extends the Foundation profile to provide Remote Method Invocation for devices. It is used with the CDC\/Foundation profile. However, the Foundation profile is not currently used with CLDC\/MIDP. The J2ME Personal profile specification, JSR000062, is incorporated herein by reference.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 3","FIG. 2"],"b":["36","22","36","28","38","40","42","44","36","28","46","48","34","50","52","54"]},"J2ME applications that conform to the MIDP are called \u201cMIDlets.\u201d A MIDlet, includes a public object class definition. This public object class includes object methods that have been inherited from the MIDlet class. MIDlets can be grouped together in a MIDlet Suite by creating a Java Archive (\u201cJAR\u201d) file. An optional Java Application Descriptor (\u201cJAD\u201d) file may be used to describe the MIDlets that constitute the MIDlet Suite.","MIDlets are the executable entities within the MIDlet Suite. The MIDlet Suite typically comprises: (1) Java class files enclosed in a JAR file; (2) a manifest file describing the contents of the JAR; and (3) resources (images, etc.) enclosed in a JAR file. A JAD file, which is technically not part of the MIDlet Suite, may be used in conjunction with the MIDlet suite.","In addition to class and resource files, a JAR typically includes a manifest file that describes the contents of the JAR. The manifest file typically is called \u201cmanifest.mf\u201d and is stored in the JAR file itself. Table 1 lists some exemplary attributes that may be defined within the manifest file in a JAR. The manifest file, however, may include additional attributes, or it may omit some of the attributes listed in Table 1.",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["ATTRIBUTE","DESCRIPTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MIDlet-Name","Name of the MIDlet \u201cpackage\u201d. For example,"]},{"entry":[{},"\u201cStock Pack.\u201d"]},{"entry":["MIDlet-Version","Version number of the MIDlet."]},{"entry":["MIDlet-Vendor","Who created the MIDlet."]},{"entry":["MIDlet-Icon","Icon associated to show alongside the MIDlet-"]},{"entry":[{},"Name by the application manager. This is a"]},{"entry":[{},"graphics file stored as a PNG image."]},{"entry":["MIDlet-Description","Text describing the MIDlet."]},{"entry":["MIDlet-Info-URL","URL that may have more information about the"]},{"entry":[{},"MIDlet and\/or the vendor."]},{"entry":["MIDlet-<n>","This attribute contains up to three pieces of"]},{"entry":[{},"information:"]},{"entry":[{},"MIDlet name"]},{"entry":[{},"Icon for this MIDlet (optional)"]},{"entry":[{},"Class name the application manager will call"]},{"entry":[{},"to load this MIDlet."]},{"entry":["MIDlet-Jar-URL","URL of the JAR file."]},{"entry":["MIDlet-Jar-Size","The JAR file size in bytes."]},{"entry":["MIDlet-Data-Size","The minimum number of bytes required for"]},{"entry":[{},"persistent data storage."]},{"entry":["MicroEdition-Profile","What J2ME Profile is required by the MIDlet."]},{"entry":[{},"(e.g., MIDP)"]},{"entry":["MicroEdition-","What J2ME Configuration is required by the"]},{"entry":["Configuration","MIDlet."]},{"entry":[{},"(e.g., CLDC)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Although not required, a JAR file may be used in conjunction with a JAD file. As with the manifest file, this file includes information about a MIDlet. The JAD provides information to an application manager about the contents of a JAR file. With this information, decisions can be made as to whether or not a MIDlet is suitable for running on the device.","As an example, by looking at the attribute MIDlet-Data-Size, an application manager can determine if the MIDlet requires more persistent memory than the device can provide. The JAD provides means for parameters to be passed to a MIDlet without having to make changes to the JAR file. The JAD file can also use the same attributes as are listed Table 1. The JAD file, however, may use additional attributes, or it may omit some of the attributes listed in Table 1. Various types of MIDlets and MIDlet suites are created to provide functionality to mobile information devices .","Mobile Information Device J2ME Architecture",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 4","b":["56","12","56","24","26","28","38","40","32","42","58","60","62"]},"In J2ME, the a Java Application Manager (\u201cJAM\u201d)  is an application that includes a set of functionality that downloads electronic content to the mobile information device  from a information network , manages the electronic content on the device, and manages lifecycles of MIDlets , from launch to termination. The micro-browser  displays electronic content and content served via network  from Web and\/or WAP servers .","Electronic Content on a Mobile Information Device","There are many different methods for sending static (e.g., markup language) content to a mobile information device  including cHTML, WML, HTML, XHTML or others. Most electronic content on the Internet comes out of simple, static files. Dynamic content is also generated in application servers and Web servers, largely based upon information extracted from a database and capable of being modified dynamically (e.g., using XML, Java applets, Java Servlets, Enterprise JavaBeans (\u201cEJBs\u201d), MIDlets, or other server-side technologies).","A wireless gateway  typically distributes electronic content to the mobile information device  from a Web or WAP server . Once the electronic content is served to the mobile information device , it is typically rendered by a micro-browser .","Increasingly, Java applications, such as J2ME MIDlets that reside on a Web or WAP server  may be served through the information network  to mobile information devices  using the J2ME architecture  or other similarly layered architectures. The J2ME MIDlets are another type of electronic content. Such MIDlets may include applications for the mobile information device such as games, audio and video players, site-specific applications (e.g., dynamic stock banner, dynamic news banner, etc.) device specific applications (e.g., new ring tones, new graphical look-and-feel, etc.) and many other types of applications.","J2ME MIDlet Transfer Process","Once a MIDlet or MIDlet suite is created to provide a desired functionality and is ready to be distributed, it is loaded onto the mobile information device  by the J2ME JAM . The MIDP specification specifies that a manufacturer of a MIDP compliant device must provide an application manager (e.g., J2ME JAM ) built into the device that can load a J2ME MIDlet onto the device.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 5","b":["64","12","66","18","20","68"]},"As was discussed above individual MIDlets can be grouped together in a MIDlet Suite by creating JAR file  and an accompanying JAD file . The JAD file  includes information about the MIDlet application . For example, the JAD file  may include a version for the MIDlet application, a size of the MIDlet application, or other types of information.","If the mobile information device  already has the same version of the MIDlet , a user of the mobile information device  can be alerted to this fact so he\/she doesn't buy it again. The JAR file  can also include the size of the actual MIDlet , so that if the mobile information device  only has 2K of space left and the MIDlet  is 6K in size, it can pop up a window saying that the device doesn't have enough room to download and store this MIDlet .","Once the user is ready to download the application  and the J2ME JAM  has confirmed that there is enough space, the JAM  downloads  the MIDlet . The JAM  typically displays the download status . The JAM  will save the MIDlet  on the device and then present it as a selection so that the user can launch and use the MIDlet.","MIDlet Execution","When a MIDlet is launched, the MIDlet enters the KVM  and life cycle methods of the MIDlet are invoked. Each MIDlet has a life cycle with a distinct series of states. The state of a MIDlet is controlled by the JAM  based on user interaction (e.g., key presses, etc.) or program-based notification (e.g., messages, time-outs).",{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 6","b":["80","82","84","86"]},{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Sample MIDlet"]},{"entry":[{},"public class Sample extends MIDlet {"]},{"entry":[{},"public Sample( ) {"]},{"entry":[{},"}"]},{"entry":[{},"public void startApp( ) throws MIDletStateChangeException {"]},{"entry":[{},"}"]},{"entry":[{},"public void pauseApp( ) {"]},{"entry":[{},"}"]},{"entry":[{},"public void destroyApp(boolean unconditional) {"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Table 3 illustrates the MIDlet states and their corresponding description.",{"@attributes":{"id":"p-0095","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"MIDlet State","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PAUSED","The MIDlet is initialized and is quiescent. It"]},{"entry":[{},{},"should not be holding or using any shared"]},{"entry":[{},{},"resources. This state is entered:"]},{"entry":[{},{},"(1) After the MIDlet has been created using"]},{"entry":[{},{},"MIDlet.new( ). The public no-argument"]},{"entry":[{},{},"constructor for the MIDlet is called and returns"]},{"entry":[{},{},"without throwing an exception. The application"]},{"entry":[{},{},"typically does little or no initialization in this"]},{"entry":[{},{},"step. If an exception occurs, the application"]},{"entry":[{},{},"immediately enters the Destroyed state and is"]},{"entry":[{},{},"discarded;"]},{"entry":[{},{},"(2) From the Active state after the"]},{"entry":[{},{},"MIDlet.pauseApp( ) method returns"]},{"entry":[{},{},"successfully;"]},{"entry":[{},{},"(3) From the Active state when the"]},{"entry":[{},{},"MIDlet.notifyPaused( ) method returns"]},{"entry":[{},{},"successfully to the MIDlet; and"]},{"entry":[{},{},"(4) From the Active state when the startApp( )"]},{"entry":[{},{},"method throws a MIDlet state"]},{"entry":[{},{},"change exception."]},{"entry":[{},"ACTIVE","The MIDlet is functioning normally. This state is"]},{"entry":[{},{},"entered just prior to calling the"]},{"entry":[{},{},"MIDlet.startApp( ) method."]},{"entry":[{},"DESTROYED","The MIDlet has released all its resources and"]},{"entry":[{},{},"terminated. This state is entered:"]},{"entry":[{},{},"(1) When the MIDlet.destroyApp( ) method"]},{"entry":[{},{},"returns, except when the unconditional"]},{"entry":[{},{},"argument is false and a MIDlet state change"]},{"entry":[{},{},"exception is thrown. The destroyApp( ) method"]},{"entry":[{},{},"releases all held resources and"]},{"entry":[{},{},"performs any necessary cleanup so it may be"]},{"entry":[{},{},"garbage collected; and"]},{"entry":[{},{},"(2) When the MIDlet.notifyDestroyed( ) method"]},{"entry":[{},{},"returns successfully to the application. The"]},{"entry":[{},{},"MIDlet must perform the equivalent of the"]},{"entry":[{},{},"MIDlet.destroyApp( ) method before calling the"]},{"entry":[{},{},"MIDlet.notifyDestroyed( ) method."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"An exemplary MIDlet is shown in Table 4. This exemplary MIDlet prints a message in each of the MIDlet states.",{"@attributes":{"id":"p-0097","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"import javax.microedition.midlet.*;"},{"entry":"public class PrintStateMIDlet extends MIDlet {"},{"entry":"public void startApp( ) {"},{"entry":"System.out.printIn( \u201cHello From J2ME MIDlet...\u201d ); \/\/ ACTIVE STATE"},{"entry":"System.out.printIn(\u201cIn ACTIVE STATE...\u201d);"},{"entry":"pauseApp( );"},{"entry":"}"},{"entry":"public void pauseApp( ) {"},{"entry":"System. out. printIn( \u201cIn PAUSED STATE...\u201d ); \/\/ PAUSED STATE"},{"entry":"destroyApp( true );"},{"entry":"}"},{"entry":"public void destroyApp( boolean unconditional) {"},{"entry":"System.out.printIn( \u201cIn DESTROYED STATE...\u201d ); \/\/ DESTROYED"},{"entry":"STATE"},{"entry":"}"},{"entry":"} \/\/ End PrintStateMIDlet"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In current versions of J2ME, only one MIDlet can be active at a time on the mobile information device . A MIDlet is run in a foreground mode (or is paused). If the mobile information device  needs to process events requiring user interaction, the current MIDlet's execution is paused.","The original security model provided by the Java platform is known as the \u201csandbox model,\u201d which existed in order to provide a very restricted environment in which to run un-trusted code obtained from the open network . The essence of the sandbox model is that local code (e.g., applets stored on a device) was trusted to have full access to vital system resources (such as the file system or data) while downloaded remote code is not trusted and can access only the limited resources provided inside the sandbox.","In the new Java 2 Platform Security Architecture, there is no longer a built-in concept that all local code is trusted. Instead, new local code (e.g., MIDlets downloaded from the network  and installed on the local file system) is subjected to the same security control as non-local code in the original security model.","For security reasons, it is assumed that MIDlets within a MIDlet Suite packaged together are able interoperate. MIDlets within a MIDlet Suite are able to interoperate because they share the same name space. Since they share the same name space, the MIDlets in a MIDlet Suite can launch one another. In the current version of J2ME one MIDlet Suite currently cannot launch MIDlets in another MIDlet Suite or share data with MIDlets in another MIDlet Suite because they do not share the same name space.","The MIDP specification also does not define how one MIDlet can launch another MIDlet or act as a handler for another MIDlet or non-MIDlet application. The MIDP specification indicates that launching a MIDlet Suite is solely the responsibility of the JAM .","Extending MIDlets","To allow MIDlets in one MIDlet Suite to exchange or share data with MIDlets in another MIDlet Suite or with non-MIDlet applications, a new object-oriented application program interface is provided. This new object-oriented application program interface includes multiple object-oriented object classes with multiple object-oriented methods.","The object-oriented application program interface includes multiple object-oriented object classes to allow input and output data to be communicated between J2ME MIDlets in different MIDlet Suites and MIDlets and non-MIDlet applications. The object-oriented application program interface is stored on a computer readable medium. The object-oriented application program interface includes at least a first object-oriented object class and a second-object oriented class, each with one or more object-oriented methods.","The first object-oriented class accepts input data in a MIDlet in a MIDlet Suite from an application management system on a mobile information device when the MIDlet is invoked on the mobile information device. The input data is generated by another MIDlet in another MIDlet Suite (or by another non-MIDlet application).","The second object-oriented object class for sets output data from a MIDlet in a MIDlet Suite when the MIDlet is terminated on a mobile information device. The output data is available to an application management system on the mobile information device and can be used by other MIDlets in other MIDlet Suites, or by non-MIDlet applications.","In one embodiment of the present invention, the object-oriented application program interface is a J2ME API called \u201ccom.sprintpcs.util.\u201d However, the present invention is not limited to this exemplary J2ME API and other J2ME APIs with other monikers can also be used.",{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 7","b":["88","88","90","92","88"]},"One type of data that can be passed between MID lets from different MIDlet Suites or other non-MIDlet applications, is a Uniform Resource Identifier (\u201cURI\u201d). However, the present invention is not limited to passing URI data between MIDlets and other types of data can also be used.","As is known in the art a URI is a generic term for all types of identifiers that refer to objects on the Internet. In J2ME, URI( ) is a string that is designed to handle the parsing of URIs and provide access to the various components (scheme, host, port, userinfo, path, query string and fragment).","At the highest level a URI reference (hereinafter \u201cURI string\u201d) in string form has the syntax [scheme:]scheme-specific-part[#fragment], where square brackets \u201c[ . . . ]\u201d delineate optional components and the characters colon (\u201c:\u201d) and pound (\u201c#\u201d) delineate other components. An absolute URI specifies a scheme; a URI that is not absolute is said to be relative. URIs are also classified according to whether they are \u201copaque\u201d or \u201chierarchical\u201d.","An opaque URI is an absolute URI whose scheme-specific part does not begin with a slash character (\u201c\/\u201d). Opaque URIs are not subject to further parsing. Some examples of opaque URIs are illustrated in Table 5.",{"@attributes":{"id":"p-0113","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mailto:user@sprint.com","\/\/ mail"]},{"entry":[{},"news:comp.lang.j2me","\/\/ news"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A hierarchical URI is either an absolute URI whose scheme-specific part begins with a slash character (\u201c\/\u201d) or a relative URI, that is, a URI that does not specify a scheme. A hierarchical URI is subject to further parsing. Table 6 illustrates a few examples of hierarchical URIs.",{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"http:\/\/sun.java.com\/j2me"]},{"entry":[{},"docs\/guide\/collections\/j2me"]},{"entry":[{},"..\/..\/..\/sprint\/demo\/j2me"]},{"entry":[{},"file:\/..\/~calendar"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Parsing of a URI string with the URI( ) object class is done according to the URI syntax described in IETF-RFC 2396, incorporated herein by reference. Every URI consists of a scheme, followed by a colon (\u201c:\u201d), followed by a scheme-specific part. For URIs that follow the \u201cgeneric URI\u201d syntax, the scheme-specific part begins with two slashes (\u201c\/\/\u201d) and may be followed by an authority segment (comprised of user information, host, and port), path segment, query segment and fragment.","For URIs that do not follow the \u201cgeneric URI\u201d syntax, the entire scheme-specific part is treated as the \u201cpath\u201d portion of the URI. Unlike the java.net.URL class, the J2ME URI( ) string does not provide any built-in network access functionality nor does it provide any scheme-specific functionality (for example, it does not know a default port for a specific scheme). Rather, it only knows the grammar and basic set of operations that can be applied to a URI string.","Another description of data that can be passed to and from MIDlets is a Multipurpose Internet Mail Extension (\u201cMIME\u201d) media type definition for text, audio, video, images, applications, etc. MIME media descriptions used in URIs are described in IETF-RFCs 2045, 2046 and 2047, incorporated by reference. Other descriptions of Internet media types can also be used for the data that is passed to and from MIDlets, and the present invention is not limited to URIs or MIME descriptions.","Returning to , the exemplary System object class  includes two object methods: (1) appendReferringURI( ); and (2) setExitURI( ). However, the present invention is not limited to these object methods and more fewer or other object methods can also be used in the exemplary System object class . For example, in one exemplary embodiment, the System object class  implements only the setExitURI( ) and not the appendReferringURI( ). In addition, the present invention is not limited to the monikers used, or object-functionality described for the System object class . Other monikers and more, fewer, or other object-functionality can also be used.","The object-method appendReferringURI( ) sets a string that is passed to the JAM  and appended to the URI identifying a MIDlet, when the MIDlet invokes another MIDlet or another application through the setExitURI( ) object method. The object method setExitURI( ) sets a URI what is passed to the JAM  and invoked according to the rules of URI scheme and Internet media type processing.","Details of the exemplary System object class  are illustrated in Table 7. However, the present invention is not limited to the implementation details described for exemplary System object class  and other implementation details can also be used.",{"@attributes":{"id":"p-0122","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Public class System","System Object Class 90"]},{"entry":["Extends java.lang.Object","Object Methods Summary"]},{"entry":"Methods inherited by System( )"},{"entry":"from class"},{"entry":"java.lang.Object:"},{"entry":"(clone, equals, finalize, getClass,"},{"entry":"hashCode, notify, notifyAll,"},{"entry":"toString, wait, wait, wait)"},{"entry":"Public System( )"},{"entry":["public static void","Sets a string which is passed to the"]},{"entry":["appendReferring-","JAM 58 and appended to the URI"]},{"entry":["URI(java.lang.String","identifying the MIDlet when the"]},{"entry":["appendText)","MIDlet invokes another application"]},{"entry":[{},"through the setExitURI( ) method. A"]},{"entry":[{},"zero-length string or null will result in"]},{"entry":[{},"the base URI for the MIDlet being"]},{"entry":[{},"the referring URI when setExitURI( )"]},{"entry":[{},"is called."]},{"entry":[{},"Parameters:"]},{"entry":[{},"appendText\u2014The text string to be"]},{"entry":[{},"appended to the referring URI"]},{"entry":["public static void","Sets a URI that is passed to the JAM"]},{"entry":["setExit-","58 and invoked according to the"]},{"entry":["URI(java.lang.String exitURI)","rules of scheme and media type"]},{"entry":[{},"processing. Any path may be set; a"]},{"entry":[{},"zero-length string or null disables the"]},{"entry":[{},"exit-URI functionality. Defaults to"]},{"entry":[{},"null."]},{"entry":[{},"Parameters:"]},{"entry":[{},"exitURI\u2014URI invoked after"]},{"entry":[{},"application exits"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Returning again to , the exemplary Muglet object class  includes four object methods: (1) getMediaType( ); (2) getMuglet( ); (3) getReferringURI( ); and (4) getURI( ). However, the present invention is not limited to these object methods and more fewer or other object methods can also be used in the Muglet object class . In addition, the present invention is not limited to the monikers used or object-functionality described for the Muglet object class . Other monikers and more or other object-functionality can also be used.","The object method getMediaType( ) returns a string including an Internet media type (e.g., a MIME type) of an object when a Muglet is invoked. When a Muglet is invoked to handle a URI scheme, this object-method returns null. The object method getMuglet( ) returns a Muglet instance associated with the invocation of a MIDlet. The object method getReferringURI( ) returns a string including the URI of a Web\/WAP page or another Muglet that referenced an object resulting in the invocation of a Muglet to handle an Internet media type or identification of another MIDlet. The object-method getURI( ) returns a string including a temporary name that may be passed to another object-method (e.g., J2ME Connector.open( )) in order to access an object when the Muglet describes one (e.g., when getMediaType( ) returns a string).","Details of the exemplary Muglet object class  are illustrated in Table 8. However, the present invention is not limited to the implementation details described for exemplary Muglet object class  and other implementation details can also be used.",{"@attributes":{"id":"p-0126","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Public class Muglet","Muglet Object Class 92"]},{"entry":["Extends java.lang.Object","Object Methods Summary"]},{"entry":"Methods inherited by"},{"entry":"Muglet( ) from class"},{"entry":"java.lang.Object:"},{"entry":"(clone, equals, finalize,"},{"entry":"getClass, hashCode, notify,"},{"entry":"notifyAll, toString, wait,"},{"entry":"wait, wait)"},{"entry":"Public Muglet( )"},{"entry":["public static Muglet","Return the Muglet instance associated with"]},{"entry":["getMuglet( )","the invocation of this MIDlet. If this MIDlet"]},{"entry":[{},"was invoked as a Muglet scheme and"]},{"entry":[{},"media-type handler, a single instance is"]},{"entry":[{},"created and the same instance is returned"]},{"entry":[{},"each time this method is invoked. If this"]},{"entry":[{},"MIDlet was not invoked as a Muglet, no"]},{"entry":[{},"instance is created and null is returned."]},{"entry":[{},"Returns:"]},{"entry":[{},"Null if MIDlet not invoked as a Muglet,"]},{"entry":[{},"otherwise the single instance of Muglet."]},{"entry":["public java.lang. String","Returns a string including the content type"]},{"entry":["GetContentType( )","of an object when a Muglet is invoked;"]},{"entry":[{},"when a Muglet is invoked to handle a URI"]},{"entry":[{},"scheme, this method returns null."]},{"entry":[{},"Returns:"]},{"entry":[{},"Null if Muglet is invoked to handle a URI"]},{"entry":[{},"scheme."]},{"entry":["public java.lang. String","Returns a string including the Internet"]},{"entry":["GetMediaType( )","media type of an object when a Muglet is"]},{"entry":[{},"invoked; when a Muglet is invoked to"]},{"entry":[{},"handle a URI scheme, this method returns"]},{"entry":[{},"null."]},{"entry":[{},"Returns:"]},{"entry":[{},"Null if Muglet is invoked to handle a URI"]},{"entry":[{},"scheme."]},{"entry":["public java.lang.String","Returns a string including a temporary"]},{"entry":["getURI( )","name which may be passed to"]},{"entry":[{},"Connector.open( ) in order to access an"]},{"entry":[{},"object when the Muglet describes one"]},{"entry":[{},"(when getMediaType( ) returns a string)."]},{"entry":[{},"When no object is present and the Muglet"]},{"entry":[{},"has been invoked as a scheme handler,"]},{"entry":[{},"the full URI, including scheme, is returned."]},{"entry":[{},"This method does not return null."]},{"entry":[{},"Returns:"]},{"entry":[{},"A string including a URI or pathname."]},{"entry":["public java.lang.String","Returns a string including the URI of a"]},{"entry":["getReferringURI( )","web\/wap page that referenced an object"]},{"entry":[{},"resulting in the invocation of a Muglet to"]},{"entry":[{},"handle an Internet media type. If no"]},{"entry":[{},"referring URI exists for any reason, this"]},{"entry":[{},"method returns null."]},{"entry":[{},"Returns:"]},{"entry":[{},"A string including a URI or a null."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 8","b":["94","96","98"]},"Method  may further comprise appending an identifier for the MIDlet to the generating referring URI. The identifier is used by another MIDlet or another non-MIDlet application invoked by the MIDlet to identify the MIDlet. For example, it may be used to identify the MIDlet that set the output data.","Method  is illustrated with an exemplary embodiment. However, the present invention is not limited to this embodiment and other embodiments can also be used to practice the invention. In such an exemplary embodiment at Step , a J2ME MIDlet is executed on the mobile information device . The MIDlet has the setExitURI( ) object-oriented method from the System( )  object class available for setting output data including URI strings.","At Step , output data including a URI string is set from the MIDlet before the MIDlet is terminated on the mobile information device  using the setExitURI( ) object-oriented method. The output data is available to the JAM  on the mobile information device . The JAM  makes the output data available to other MIDlets in the same or another MIDlet suite or other non-MIDlet applications.","The \u201cExit URI\u201d functionality of the exemplary System object class  allows a MIDlet to tell the JAM  to access a specific URI upon exit from the MIDlet. The MIDlet may set the exit URI at any time during its execution, and may change the exit URI as many times as necessary during its execution. If the MIDlet exits on its own (i.e., by calling notifyDestroyed instead of being killed by the JAM  calling destroyApp( )), the JAM  will access the URI provided by the MIDlet.","Method  may further comprise appending a string identifier for the MIDlet to the generating referring URI. The string identifier is used by another MIDlet or another non-MIDlet application invoked by the MIDlet to identify the invoking MIDlet. The \u201creferring URI string\u201d functionality can also be used by a MIDlet in conjunction with the \u201cExit URI\u201d functionality.","Using Input Data Set by MIDlets",{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 9","b":["100","102","104"]},"Method  is illustrated with an exemplary embodiment. However, the present invention is not limited to this embodiment and other embodiments can also be used to practice the invention. In such an exemplary embodiment at Step , a J2ME MIDlet is invoked on the mobile information device  from the JAM . The MIDlet has the four object-oriented methods from the Muglet  object class available for using input data including a URI scheme or an Internet media type (e.g., MIME type) created by other MIDlets. At Step , input data including a URI scheme or an Internet media type created-by another MIDlet or a non-MIDlet application is accepted from the JAM  on the MIDlet using one or more of the object-oriented methods from Muglet  object class.",{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 10","b":["106","108","110","112","114"]},"Method  is illustrated with an exemplary embodiment. However, the present invention is not limited to this embodiment and other embodiments can also be used to practice the invention. In such an exemplary embodiment at Step , a J2ME MIDlet is invoked from the JAM  on the mobile information device  as a Muglet acting as a MIDlet handler. The Muglet includes the plural object-oriented methods from the Muglet object class  that available for using input data such as URI schemes and Internet media types created by other MIDlets or other non-MIDlet applications.","A MIDlet intended to process one or more type of URI scheme or Internet media type can be invoked as a MIDlet handler via the Muglet object class . A Muglet is constructed as a standard MIDlet, and may make use of the full range of features available to MIDlets. Additionally, such a Muglet enumerates which URI schemes and Internet media types are handled by including certain properties in a corresponding MIDlet Suite. When installed into a mobile information device , MIDlet Suite properties are used to configure the Muglet(s) to handle the specified URI schemes and Internet media types for other MIDlets and non-MIDlet applications on the mobile information device . Such a model may be similar to how common desktop web-browsers use \u2018plug-in\u2019 modules and external applications.","However, unlike plug-ins in the desktop web-browser environment, Muglet URI scheme and media type handlers do not run as extensions to a browser and do not have access to the browser context. Instead, Muglet URI scheme and media type handlers are independently-running applications.","Returning to , at Step , once invoked, a Muglet calls the GetMediaType( ) object method to determine what, if any, URI scheme or media type triggered execution of the Muglet.","Returned from the GetMediaType( ) object method is string that specifies a type and value of a URI scheme or Internet media type. In addition, a name can be provided in the case of an Internet media type that provides access to an actual object (e.g., via the J2ME Connector.openInputStream( ) object method).","At Step , the URI scheme or Internet Media Type is processed based on the return value of the GetMediaType( ) object method by calling one or more other object-oriented methods including getURI( ), getReferringURI( ) or getMuglet( ) in Muglet object class .","If a Muglet is invoked to handle a scheme or media type which is not recognized, the Muglet may exit immediately. It is possible to build a Muglet that runs as a URI scheme and Internet media type handler when invoked as such, and otherwise runs as a conventional MIDlet.","At Step , another MIDlet is invoked from the MIDlet handler using the processed input data. As is the case with standard J2ME MIDP implementation, only one MIDlet or non-MIDlet applications runs at any one time in the mobile information device , and there is no facility to have more than one Muglet URI scheme or Internet media type handler running at the same time.","In one embodiment, when a Muglet is invoked to handle a URI scheme or Internet media type, a MIDlet or non-MIDlet application being executed is suspended for the duration of the Muglet execution. Once the Muglet execution is complete, the invoking MIDlet or non-MIDlet application is resumed. It is possible, however, that the invoked application may itself use the Muglet functionality to exit to another application instead of returning to the original invoking application. This can cause the original invoking application to remain in a perpetually suspended state, thereby causing hanging system resources. Thus, in another embodiment, a MIDlet or non-MIDlet application must exit in order to call a Muglet.","Once invoked, a Muglet URI scheme or Internet media type handler has complete control over the interpretation of the URI scheme, Internet media type or object. Any errors in these items are handled as the Muglet desires.","A Muglet may also receive a referring URI string via the getReferringURI( ) object-oriented method from the Muglet object class . This URI string indicates the application or URL location from which the Muglet was invoked, and may be used by the Muglet as an exit URI when it terminates, so that control can be returned to a previous context.","For example, if a Muglet is invoked from a Web page as an Internet media type handler, it could set the exit URI string to the value of the incoming referring URI string, such that the mobile information device  would be returned to the same Web page being viewed when the Muglet exits. If the Muglet chooses to exit to another URI string or to no URI string, it may discard the referring URI string.","JAM Support for Exchanging Input and Output Data","In one embodiment of the present invention, the JAM  is built around the concept of a registry. The registry maintains information about what MIDlets or non-MIDlet applications are invoked to handle specific media types and URI schemes. The registry may include both MIDlet and non-MIDlet applications.","When a J2ME MIDlet is installed by the JAM , the JAD file  may specify content types that are handled by a MIDlet through one or more instances of a Content-<n>-Handler attribute as described below. A user of a mobile information device  is prompted to confirm the registration of the MIDlet as a scheme or media type handler. If there is already a handler registered for that scheme or media type, the user may be prompted to confirm the replacement or keep the existing handler registration.","The handler type and URI scheme or Internet media type name for an \u201cn-th MIDlet\u201d in a MIDlet Suite is specified as comma-separated strings. A handler type currently includes \u201curi-scheme\u201d or \u201cmedia-type\u201d. However, the present invention is not limited to these handler types and more or other handler types can also be used. Table 9 indicates exemplary handler type examples.",{"@attributes":{"id":"p-0151","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Handler type Example","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Content-1-Handler: uri-","A MIDlet that provides an enhanced email"]},{"entry":["scheme, mailto","handler."]},{"entry":["Content-2-Handler: media-","A MIDlet that provides a viewer for Graphic"]},{"entry":["type, image\/gif","Interchange Format (\u201cGIF\u201d) files."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Any properties in the MIDlet Suite specifying URI scheme or Internet media type handlers should also be present a corresponding JAD file . If the JAM  determines that any of the Internet media types and\/or URI schemes that the JAD file  is attempting to register cannot be registered (e.g., because they are protected media types or URI scheme), the JAM  will not download the JAR file , and will post a response with a \u201c906 Invalid Descriptor\u201d error code. More information on how MIDlet suites can be deployed over-the-air (\u201cOTA\u201d) may be found in the \u201cOver The Air User Initiated Provisioning Recommended Practice for the Mobile Information Device Profile,\u201d version 1.0, dated May 7, 2001, which is incorporated herein by reference.","When the JAM  receives a URI string to process, it determines the appropriate application to handle the corresponding URI scheme based on the registry entries. There are several sources of URI's that the JAM  handles, including URI strings from: (1) an exit URI from a MIDlet set by setExitURI( ); (2) a micro-browser; (3) a push message (e.g., Service Indication or Service Loading messages); or (4) native non-MIDlet applications.","Table 10 shows an example list of predefined URLs and their corresponding mappings. A Muglet implementation may includes a greater or fewer number of predefined URL mappings, and it may include URL mappings other than those listed in Table 10. Other URL schemes can be handled by an installed a MIDlet that implements the Muglet object class .",{"@attributes":{"id":"p-0155","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 10"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Scheme","Scheme Handling"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"http: https:","Launch mirco-browser 62 and get an indicated"]},{"entry":[{},{},"URL."]},{"entry":[{},"midlet:","Launch a specified MIDlet."]},{"entry":[{},"ams:","Launch specified content."]},{"entry":[{},"tel:","Place a phone call to the indicated phone"]},{"entry":[{},{},"number. (See IETF-RFC 2806, incorporated"]},{"entry":[{},{},"herein by reference)."]},{"entry":[{},"im:","Invoke a native instant messaging client"]},{"entry":[{},{},"application."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"When the JAM  invokes a MIDlet as a Muglet (e.g., as a URI scheme or Internet media type handler), it passes in the referring URI string to the Muglet, if available. If the Muglet was invoked from a link or content on a browser page, the URL of the page is used as the referring URI. If the Muglet was invoked due to an exit URI from another MIDlet, the JAM  appends a string provided by the exiting MIDlet to the Muglet using the appendReferringURI( ) object oriented method, and the Muglet uses the resulting URI as the referring URI. If a Muglet is invoked due to the user selecting it to handle stored content that the user selects to view, or due to a URI string in a notification, the referring URI string will be null.","A URI scheme allows another MIDlet to be specifically identified by other MIDlet and non-MIDlet applications. The scheme specific portion of the MIDlet URI includes fully qualified class name of a class that extends MIDlet (e.g., Muglet), and may refer to a specific MIDlet within a MIDlet Suite. The URI string may also include a query component that with parameters for a MIDlet by including a question mark (\u201c?\u201d) and a series of URL-encoded parameters after the fully qualified class name.","The entire URI scheme will be passed to the Muglet by the JAM  via the Muglet.getURI( ) object-oriented method. For example, the URI string: <a href=\u201cmidlet:com.sprintpcs.apps.calendar?date=\u201c20011003\u201d>","would launch a calendar MIDlet from \u201ccom.sprintpcs.apps\u201d with the date set to Oct. 3, 2001, from a Muglet.","The JAM  also supports the ability to \u201claunch\u201d stored non-java content by handling URI string with a scheme of (\u201cams:\u201d) and a scheme-specific part that is a content-ID of the target content. For example, the URI string <a href=\u201cams:sprintpcs.com.example_content\u201d> in a browser page would cause an ams: URI to be passed to the AMS, which would launch an appropriate handler for the stored content with a content-ID associated with \u201cexample_content.\u201d","If the JAM  encounters any URI that does not have a pre-defined handling requirement as described above in Table 10, it will attempt to locate a MIDlet that is registered to handle the scheme type using the registry. If such a MIDlet is located, the JAM  will launch the MIDlet and pass the URI string to the MIDlet through the Muglet.getURI( ) object-oriented method.","When the JAM  receives a content file to process, it will determine the appropriate application to handle that content-type based on the registry entries. There are at least three sources of content that the JAM  may need to handle, including: (1) \u201cams: content\u201d stored content folders; (2) files downloaded by micro-browser ; or (3) content from other native applications.","When a content type handled by a MIDlet is needs to be processed, the application that downloaded or generated the content passes both a content and a MIME or other Internet content-type to the JAM . The JAM  determines an appropriate Muglet (i.e., MIDlet handler) based on the registry, and launches the appropriate MIDlet.","The JAM  will pass the content-type to the Muglet through the Muglet.getContentType( ) object-oriented method, and will pass a locally significant URI string to the Muglet via the Muglet.getURI( ) method. When the Muglet passes this URI string to the J2ME Connector.open( ) object-oriented method, the JAM  will return a stream connection to a buffer that is holding the content.","The ability to invoke content, applications, services, downloads, etc. on the device from a push message is also supported. When a messaging client receives a WAP Service Indication (\u201cSI\u201d) or Service Loading (\u201cSL\u201d) message, the message may include a URI field. The handling of these messages is the responsibility of the messaging client, which will invoke the JAM  to handle the embedded URI scheme. Service Loading messages will cause the URI to be invoked without user intervention, and are generated from trusted carrier systems. Service Indication messages present text to the user, who can then elect to invoke the URI. In either case, the URI will be passed to the JAM  for handling.","A \u201cprotected MIDlet\u201d is a J2ME application that is downloaded using Hyper Text Transfer Protocol-Secure (\u201cHTTPS\u201d) from a trusted carrier domain. As is known in the art, HTTPS variation of HTTP that provides for encryption and transmission through a secure port. HTTPS allows HTTP to run over security mechanisms known as Secure Sockets Layer (\u201cSSL\u201d) or Transport Layer Security (\u201cTLS\u201d).","For a protected MIDlet, both the JAR  and JAD  files are downloaded via HTTPS from a trusted domain. When a MIDlet is protected, the JAM  enforces the following rules: (1) the MIDlet cannot be upgraded except from the trusted carrier domain; (2) no other application can register to handle any Internet media types or URI schemes that are handled by the protected MIDlet; and (3) only a user can delete a protected MIDlet from the JAM . When a user deletes the protected MIDlet, any Internet media types and URI schemes handled by that MIDlet are released, and can then be handled by other MIDlets or non-MIDlet application.","Exemplary Application Management System Operation",{"@attributes":{"id":"p-0167","num":"0166"},"figref":"FIG. 11","b":["150","150","150","150"]},"As shown in , the application management system interfaces with MIDlet A , which currently executes on the mobile information device. Using the previously described object-oriented methods, MIDlet A  may pass data to the application management system . For example, MIDlet A  may use the setExitURI( ) object-oriented method to pass data to the application management system . At dataflow , MIDlet A  passes setExitURI(C) to the application management system . The parameter \u201cC\u201d passed to the application management system  may be, for example, a URI or a MIME media type. MIDlet A  may use the setExitURI( ) to invoke another MIDlet or non-MIDlet application.","MIDlet A  may optionally pass data to the application management system  using the appendReferringURI( ) object-oriented method. This may be used, for example, in conjunction with the setExitURI(object-oriented method. At dataflow , MIDlet A  passes appendReferringURI(B) to the application management system . The parameter \u201cB\u201d passed to the application management system  may be additional data that is appended to that data passed to the application management system  through the setExitURI( ) object-oriented method.","MIDlet A  may set output data using the setExitURI( ) and appendReferringURI( ) object-oriented methods, and MIDlet A  may set the output data before it terminates on the mobile information device. Once MIDlet A  terminates on the mobile information device, the application management system  may make the output data available to MIDlets in the same MIDlet suite, to MIDlets in different MIDlet suites or to non-MIDlet applications.","Once MIDlet A  terminates, the application management system  may determine which application is registered to handle the output data generated by MIDlet A . For example, the application management system  may check to determine an application registered to handle a scheme of the output data generated by MIDlet A . The application management system  may then launch the application that is registered to handle that scheme.","As shown in , the application management system  launches MIDlet C  to handle the output data set by MIDlet A . At dataflow , MIDlet C  uses the getURI( ) object-oriented method to obtain the output data set by MIDlet A . In response, the application management system  returns to MIDlet C  the \u201cA\u201d output data, shown generally by dataflow .","Depending on the type of output data set by MIDlet A , MIDlet C  may optionally use one or more of getMediaType( ), getContentType( ), getMuglet( ), getReferring( ) or other object-object oriented methods to obtain the output data set by MIDlet A . These may be used in conjunction with or in place of the getURI( ) object-oriented method shown at dataflow .","MIDlet C  may additionally use the getReferringURI( ) object-oriented method to obtain additional output data set by MIDlet A . The getReferringURI( ) object-oriented method can be used to obtain the output data set by MIDlet A  via the appendReferringURI( ) object-oriented method. At dataflow , MIDlet C  uses the getReferringURI( ) object-oriented method to obtain additional output data set by MIDlet A . In response to the getReferringURI( ) object-oriented method, and as shown at dataflow , the application management system  returns parameters \u201cA\u201d and \u201cB\u201d to MIDlet C . Parameter \u201cA\u201d identifies MIDlet A , which invoked MIDlet C . Parameter \u201cB\u201d is the additional data that MIDlet A  passed to the application management system  via the appendReferringURI( ) object-oriented method.","Many different variations may be made to the operation of the application management system . While  depicts the application management system  passing data between two different MIDlets, the application management system  may alternatively pass data between a MIDlet and a non-MIDlet application. For example, MIDlet A  might be replaced by a non-MIDlet application, such that the non-MIDlet application generates output data that the application management system  then passes to MIDlet C . In another example, MIDlet C  might be replaced by a non-MIDlet application, such that the application management system  receives output data from MIDlet A  that the application management system  passes to the non-MIDlet application.",{"@attributes":{"id":"p-0176","num":"0175"},"figref":"FIG. 12","b":"200"},"Then, at Step , the application management system passes the input data to a first Java MIDlet in a first MIDlet suite on the mobile information device. Where the application that created the input data is a Java MIDlet, it may be in a different MIDlet suite than the first Java MIDlet. Thus, the application management system may use this method, for example, to receive input data from a MIDlet in one MIDlet suite and then pass the input data to a MIDlet in another MIDlet suite. Alternatively, the application management system may use this method to receive input data from a non-MIDlet application and then pass the input data to a MIDlet application.",{"@attributes":{"id":"p-0178","num":"0177"},"figref":"FIG. 13","b":["220","222"]},{"@attributes":{"id":"p-0179","num":"0178"},"figref":"FIG. 14","b":["240","242","244"]},{"@attributes":{"id":"p-0180","num":"0179"},"figref":"FIG. 15","b":["260","264"]},{"@attributes":{"id":"p-0181","num":"0180"},"figref":"FIG. 16","b":["280","282","284","286","288"]},"Push Launching Applications with Context","The application management system  may be used to perform a variety of different functions on the mobile information device, such as launching MIDlets. Once the application management system  launches a MIDlet, the application management system  can use the previously described object-oriented methods to pass data to the MIDlet. An application, such as one executing on another device, may advantageously use the ability of the application management system  to pass data to an executing MIDlet in order to push launch an application with context on the mobile information device.",{"@attributes":{"id":"p-0183","num":"0182"},"figref":"FIG. 17","b":["300","300","300"]},"As depicted in , the universal message handler  receives a push message via dataflow . The push message may be any type of push message, such as a WAP push message. The push message may include a URI, MIME media type or other identifier used in specifying an application to launch on the mobile information device. Once the universal message handler  receives the push message, the universal message handler  processes the push message in order to launch an application on the mobile information device.","The response of the universal message handler  to the push message may vary depending on a type of the push message. For example, a WAP Service Loading push message may be used to automatically launch an application on the mobile information device without requiring approval by the user of the mobile information device prior to launching the application. Thus, if the universal message handler  receives a WAP Service Loading push message, the universal message handler  may then proceed to launch the application specified by the WAP Service Loading push message without first seeking approval from the user of the mobile information device. For example, the universal message handler  may pass the WAP Service Loading push message to the application management system , which may in turn launch an application based on the contents of the WAP Service Loading push message.","A WAP Service Indication push message, however, requires approval from the user of the mobile information device prior to push launching the application specified by the WAP Service Indication push message. Thus, if the universal message handler  receives a WAP Service Indication push message, the universal message handler  may first request approval from the user of the mobile information device. As shown in , the universal message handler  may request approval from the user of the mobile information device via a popup message  or some other indication.","If the universal message handler  does not receive approval from the user, then the universal message handler  would not proceed to push launch the application as specified by the WAP Service Indication push message. If the universal message handler  does receive approval from the user, the universal message handler  may then pass the WAP Service Indication push message to the application management system , which may in turn launch the application specified by the WAP Service Indication push message. While the universal message handler  may provide the WAP Service Indication push message directly to the application management system , the universal message handler  may alternatively provide the application management system  with some other indication of the WAP Service Indication push message.","Once the application management system  receives a push message from the universal message handler , the application management system  may then determine an application registered to handle the push message. For example, if the push message specifies a URI scheme associated with instant messaging, then the application management system  may determine which application on the mobile information device is registered for instant messaging. The application management system  may then launch that application if it is not already executing on the mobile information device. As depicted in , the push message is associated with an instant messaging application, and therefore in response to receiving the push message the application management system  launches an instant messaging MIDlet .","The instant messaging MIDlet  may then interact with the application management system  via a dataflow . Data may be passed between the application management system  and the instant messaging MIDlet  via the dataflow  using any of the previously described object-oriented methods. For example, the application management system  may pass data to the instant messaging MIDlet , or the instant messaging MIDlet  may pass data to the application management system .","Using the previously described object-oriented methods to pass data between the application management system  and the instant messaging MIDlet  can allow the application management system  to launch the instant messaging MIDlet  with a particular context, such as can be specified in the push message. For example, the application management system  may pass to the instant messaging MIDlet  the URI specified in the push message, and the URI may include parameters that the instant messaging MIDlet  uses in establishing an instant messaging session with a particular context.","For example, the URI may specify a particular user with which the instant messaging MIDlet  should proceed to establish the instant messaging session. Thus, the application management system  may launch the instant messaging MIDlet  in response to the push message, and the application management system  may then pass the URI included in the push message to the instant messaging MIDlet . The instant messaging MIDlet  can then use the URI to responsively establish an instant messaging session with the user specified in the URI without first requiring any input by the user of the mobile information device.","Specifying the user with which to establish the instant messaging session is merely one example of a parameter specified in the URI that may be used to push launch the instant messaging MIDlet  with a particular context. The push message may also include parameters other than those specified in the URI, and these other parameters may also be used to push launch the instant messaging MIDlet  with a particular context. The application management system  may also pass these other parameters to the instant messaging MIDlet  using the previously described object-oriented methods, and these other parameters may be in addition to or in place of parameters specified in a URI.","If the application management system  did not have the ability to pass the URI or other parameters to the instant messaging MIDlet , application management system  could launch the instant messaging MIDlet  in response to the push message but would be unable to establish a particular context for the instant messaging MIDlet . Any such parameters would have to come from the user of the mobile information device. However, using the previously described object-oriented methods to pass data between the application management system  and the instant messaging MIDlet  can advantageously allow another application to push launch the instant messaging MIDlet  on the mobile information device with a particular context.","Instant messaging is merely one example of using the application management system  to push launch an application with context on the mobile information device. The application management system  may push launch other types of applications with context as well. For example, the universal message handler  may receive a push message that includes a URI for a particular webpage. The application management system  may then determine a MIDlet, such as a browser MIDlet, which is registered to handle that that type of URI. The application management system  may then launch the browser MIDlet and pass it the URI. Once the browser MIDlet receives the URI, the browser MIDlet may automatically browse to the webpage specified by the URI.","In addition to specifying a webpage to which the browser MIDlet should browse, the URI may additionally specify other parameters used in establishing a context for the browser MIDlet. For example, the URI may include other data to be used in completing one or more fields in the webpage that are used to further configure the webpage. For example, the URI may specify a webpage that provides stock quotes, and the URI may include additional parameters that specify one or more stocks. The browser MIDlet may then use the URI to browse to the stock quote webpage and to have the stock quote webpage display quotes for the stocks specified in the URI.","Rather that simply launching the browser MIDlet in response to the push message, the application management system  can use the previously described object-oriented methods to pass the browser MIDlet a URI or other parameters that establish a particular context for the browser MIDlet. Thus, another application can advantageously push launch the browser MIDlet and direct the browser MIDlet to browse to a particular URI, such as a webpage. The other application may further specify additional information that can be used in configuring the webpage, such as information that can be used to complete one or more fields in the webpage.","It should be understood, however, that many variations may be made the system described in . For example, the universal message handler  may be integrated into the application management system . The application management system  may then monitor for push messages sent to the mobile information device. In another example, a component other than the universal message handler  may monitor for push messages sent to the mobile information device. Other variations may be made as well.",{"@attributes":{"id":"p-0198","num":"0197"},"figref":"FIG. 18","b":["320","322","324"]},{"@attributes":{"id":"p-0199","num":"0198"},"figref":"FIG. 19","b":["340","342","344","346"]},"It should be understood that the programs, processes, methods and apparatus described herein are not related or limited to any particular type of computer or network apparatus (hardware or software), unless indicated otherwise. Various types of general purpose or specialized computer apparatus may be used with or perform operations in accordance with the teachings described herein. While various elements of the preferred embodiments have been described as being implemented in software, in other embodiments in hardware or firmware implementations may alternatively be used, and vice-versa.","In view of the wide variety of embodiments to which the principles of the present invention can be applied, it should be understood that the illustrated embodiments are exemplary only, and should not be taken as limiting the scope of the present invention. For example, the steps of the flow diagrams may be taken in sequences other than those described, and more, fewer or other elements may be used in the block diagrams.","The claims should not be read as limited to the described order or elements unless stated to that effect. In addition, use of the term \u201cmeans\u201d in any claim is intended to invoke 35 U.S.C. \u00a7112, paragraph 6, and any claim without the word \u201cmeans\u201d is not so intended. Therefore, all embodiments that come within the scope and spirit of the following claims and equivalents thereto are claimed as the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Preferred embodiments of the present inventions are described with reference to the following drawings, wherein:",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4","b":"12"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
