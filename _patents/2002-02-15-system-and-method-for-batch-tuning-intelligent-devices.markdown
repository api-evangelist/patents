---
title: System and method for batch tuning intelligent devices
abstract: System and method for batch-tuning multiple software components of an intelligent device. An intelligent device may include tunable components each associated with a tunable configuration file. A batch tuner may be used to generate batch configuration documents from the configuration files. The batch tuner may also be used to generate configuration files from a batch configuration document. In one embodiment, the batch configuration document and the configuration files are markup language documents. In one embodiment, an XML document type definition (DTD) may be used as the method of information exchange. In one embodiment, the batch tuner may use an API (e.g. DOM or SAX API) to access the batch configuration document and configuration files. In one embodiment, each component may be associated with an executable module conforming to the API, and the batch tuner may call the module for the component to generate the configuration file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07774435&OS=07774435&RS=07774435
owner: Oracle America, Inc.
number: 07774435
owner_city: Redwood City
owner_country: US
publication_date: 20020215
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims benefit of priority to Provisional Patent Application Ser. No. 60\/307,960, filed Jul. 26, 2001.","1. Field of the Invention","This invention relates to intelligent devices such as computer systems, and more particularly to a system and method for batch-tuning multiple components of an intelligent device.","2. Description of the Related Art","Intelligent devices typically include one or more software components that are executable within the devices. Intelligent devices may include, but by no means are limited to: smart appliances, printers, personal digital assistants (PDAs), cellular\/mobile phones, notebook computers, laptops, desktop computers, workstations, more powerful computer systems such as mainframes and high-end servers, even supercomputers.","Software components may include, but are not limited to, system software components including operating system software (e.g. Sun Solaris, Microsoft Windows, Windows NT, Linux, Macintosh, etc.), application software (e.g. database management, storage management, utility, etc.), and driver software for interfacing with and controlling hardware components. Hardware components may include, but are not limited to, processors, memory, firmware, storage devices, and external interfaces.","Software components often have parameters that are modifiable or \u201ctunable\u201d to change one or more aspects of the performance of the component. For example, a software application may have parameters that may be changed to adjust the amount of memory the application uses; using more memory may allow the application to run faster, while using less memory may allow the application to have a smaller \u201cfootprint.\u201d Another example of component parameters is system software parameters, including operating system parameters, which may be used for tuning system software including operating system software. For example, a system software parameter may specify the network address of the intelligent device. Operating system parameters may be used to adjust virtual memory allocation. Yet another example of component parameters is driver parameters that may be used to control some aspect of a hardware component, such as the default speed of a modem. Typically, the driver sets a register of the hardware component with the parameter value.","The process of setting parameters of components in intelligent devices may be referred to as \u201ctuning.\u201d The term \u201ctune\u201d may include the notion of optimizing one or more components of a system for a particular environment, especially by adjusting numerical parameters designed as hooks for tuning, e.g. by changing \u201c#define\u201d lines in C. For example, an intelligent device may be tuned for time (fastest execution), tuned for space (least memory use), and\/or tuned for configuration (most efficient use of hardware). The word \u201cconfigure\u201d may be used interchangeably with the word \u201ctune.\u201d","Components of an intelligent device may have a corresponding configuration tool with an interface that allows various parameters used to control the component to be modified or tuned. A configuration tool may be integrated in the component or may be a stand-alone application. Typically, the various parameter values associated with a component may be maintained in one or more files that may be referred to as \u201cconfiguration files.\u201d The configuration files may be stored within the intelligent device or alternatively may be stored externally to the intelligent device, e.g. on a server that is accessible by the intelligent device via a network. Any file format may be used for the configuration files so long as they are readable by the configuration tool. File formats may be public (e.g. plain text, Microsoft Word, Microsoft Excel, among others) or proprietary.","Typically, when an intelligent device is initially configured, each component's configuration file(s) will contain default values for the parameters used to tune the component. During the setup process of the intelligent device, a user may access the configuration tool for each of the components that the user desires to tune or reconfigure. The configuration tool may access the configuration file(s) for the component, and may display a portion or all of the parameters for the component. The user may then use the configuration tool to modify one or more of the parameters to \u201ctune\u201d the component as desired. The configuration tool may save the new parameter values to the configuration files if the user so desires. The user may repeat a similar process using the configuration tool of each of the components that the user desires to tune. The next time the component or components are initialized from the configuration file(s) (e.g. on reboot of the intelligent device), the new parameter values are read from the configuration file(s) by the component(s) and take effect to tune the component(s) as specified.","As an example, consider a system installed with Oracle, Veritas and Solaris components. Tunable parameters for this system exist in files with different types of markups, i.e.\/etc\/system and $ORACLE_HOME\/dbs\/init.ora for Oracle and \/etc\/system for Solaris and Veritas. When first installed on a system, these applications are untuned and, as such, in most large-scale deployments, unusable. In a one-off installation, the system is tuned and then is ready for use. In large-scale implementations, there may be a plurality of systems requiring similar or identical tuned parameters.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100","102","102","102","102","104","104","106","102","102","104","106","100","150","104","106","102","106","102","106","106","102","104","106","102"]},"In the prior art, if one or more other intelligent devices need to be tuned to match a first device, to tune the one or more other devices, the user may have to repeat the accessing and entering of parameter values through each of the configuration tools  on each of the devices, or alternatively may transfer one or more of the configuration files  to the one or more other devices device. The second option may be difficult because the various configuration files  may be stored in diverse locations on the intelligent device , and may actually be in different locations on the one or more other devices. Also, one or more non-tunable parameters in the configuration files  may be different between the two devices, and overwriting the configuration files may unintentionally replace parameters that should not be changed. Another problem may arise if the second intelligent device does not include all of the components found in the first device, and therefore the user may have to determine the components that are and are not present.","A system and method for batch-tuning multiple software components of an intelligent device is described. An intelligent device may include one or more tunable components each associated with one or more tunable configuration files. As applications evolve, tunable parameters may come and go. Embodiments of the batch tuning mechanism allow snapshots of tunable parameters on an intelligent device to be taken and maintained, and may provide a standard mechanism for dealing with system installations, restores, etc., and as such making the overall maintenance of intelligent devices more manageable.","To tune the components, a user modifies (tunes) the configuration files. The intelligent device may also include a batch tuning mechanism (referred to as a \u201cbatch tuner\u201d) to generate new and\/or modify existing batch configuration documents from a plurality of tunable configuration files on the intelligent device. The batch tuner may also include a mechanism to generate new and\/or modify existing configuration files from an existing batch configuration document. In one embodiment, the batch configuration document is a markup language document. In one embodiment, the configuration files are markup language documents. In one embodiment, the markup language used is the eXtensible Markup Language (XML).","In one embodiment, the mechanism to generate a new or modify an existing batch configuration document may use one or more executable scripts written in a script language such as Perl, or alternatively in a compiled language such as Java, C or C++. Note that in some embodiments other languages besides the ones mentioned above may be used. The script may be referred to as a generator script. The generator script may, when executed, parse a portion or all of the available tunable configuration files on the intelligent device and build these into a batch configuration document. If the batch configuration document does not already exist, the generator script may create a new batch configuration document. If the batch configuration document does exist, the generator script may modify the existing batch configuration document, or alternatively may create a new version of the batch configuration document.","The batch configuration document may include markup symbols (e.g. tags) that describe the contents of the configuration files from which the batch configuration document was generated, including all applicable tunable parameters from the configuration files. In one embodiment, the batch configuration document may be divided into sections, with one section for each configuration file. Each section may describe the particular configuration file to which it is associated, including all applicable tunable parameters from the configuration file. The sections may also include name and location (e.g. directory) information for the configuration files.","In one embodiment, the mechanism to generate new or modify existing configuration files from an existing batch configuration document may include an executable tuner script written in a script language. This script may be referred to as a tuner script. The tuner script may, when executed, read a previously created batch configuration document, verify that the relevant component(s) are present in the device, edit and\/or create the indicated configuration files, and optionally reboot the intelligent device if necessary. The tuner script may create a new configuration file for the component or, if the configuration file already exists, the tuner script may modify the existing file, or alternatively may create a new version of the file. If, when executing the tuner script, it is determined that a particular component that is included in the script does not exist in the intelligent device, then the section of the configuration document that tunes the configuration file(s) for the missing component may be skipped. Alternatively, the configuration files for all components as specified in the script may be modified and\/or created regardless of whether the component(s) are present or not.","In one embodiment, multiple versions of batch configuration documents may be generated on an intelligent device. In other words, a user may \u201ctune\u201d the intelligent device for a particular configuration, generate a first batch configuration document, retune the device to a second configuration, generate a second batch configuration document, and so on to create a plurality of batch configuration documents. The user may then use the batch tuner to easily switch from one configuration to another configuration by applying a different batch configuration document. Different batch configuration documents may be used to tune a portion or all of the components on the intelligent device. Thus, the user may use different batch configuration documents to tune particular subsets of components without having to retune all components on the intelligent device.","In one embodiment of an intelligent device with a batch tuner, one or more components may not require associated configuration tools, because the batch tuner may be used in lieu of the configuration tools to create new and\/or modify existing configuration files for the components.","In one embodiment, an XML document type definition (DTD) for describing a portion or all of the available tunable parameters and configuration files may be used as a standard method of information exchange in the methods described herein. In one embodiment, the batch tuner may include an interpretation layer for the XML documents which conform to the DTD. In one embodiment, the XML DTD may be used for both the configuration files and the batch configuration document. In one embodiment, the batch configuration document and the configuration files may conform to a document object model (DOM), and the batch tuner may use a DOM application programming interface (API) to access the batch configuration document and configuration files. In other embodiments, the batch tuner may use other interfaces to access the batch configuration document and configuration files, for example, SAX (Simple API for XML). In other embodiments, the configuration document and files may conform to other mechanisms that support user-defined data structures.","In one embodiment, each component may be associated with an executable module. When the batch tuner tunes a particular component, it may call the executable module for the component, which may then modify the configuration file(s) for the component using input from the batch tuner. In one embodiment, the modules may be written to conform to a standard application programming interface (API) that allows the modules to accept a document object model (DOM) tree as an input, for example, the DOM API or the SAX API.","During generating a batch configuration document from a plurality of tunable configuration files, the batch tuner may use the API (e.g. DOM or SAX API) to construct one or more DOM trees from the configuration files, where each configuration file is associated with a particular DOM tree. The DOM tree may include the parameter values for the tunable parameters in the configuration file associated with this DOM tree. The DOM tree for a configuration file may also include one or more other pieces of information about the file, including, but not limited to: a file name, location information for the file, a file description, links to one or more other configuration files that may need to be tuned in conjunction with tuning this file, and reboot\/reinitialize information.","After generating a DOM tree from a tunable configuration file, relevant information from the file, including the values of tunable parameters for the component associated with the file, may be accessed from the DOM tree and written to the batch configuration document. In one embodiment, the batch configuration document conforms to an XML DTD, and the relevant information is written to the document in accordance with the XML DTD. Once all available and applicable configuration files have been processed, the generation of the batch configuration document is complete.","Although embodiments are generally described as constructing a DOM tree from the configuration files, it is noted that other data structures, including other implementations of trees, may be used in various embodiments.","During tuning the intelligent device using a batch configuration document, the batch configuration document may be parsed by the batch tuner. In one embodiment, the batch tuner may use the API (e.g. DOM or SAX API) to generate a DOM tree for each configuration file described in the configuration document. Alternatively, the batch tuner may generate a DOM tree that describes the entire batch configuration document. In this embodiment, the DOM tree may be viewed as a \u201cgrove\u201d, with one DOM tree in the grove for each configuration file. The batch tuner may then access each configuration file and apply the parameter values from the DOM tree to the configuration file.","In one embodiment, a batch configuration document may be generated on one intelligent device, transferred to a second intelligent device, and used to configure components on the second device. On the second device, a copy of the batch tuner may be used to apply the contents of the transferred batch configuration document to one or more configuration files on the device.","One embodiment may include a mechanism for batch-tuning components within two or more devices. In this embodiment, the batch tuner may be used to generate a batch configuration document from one or more configuration files on a first intelligent device, where each configuration file on the first device is associated with a component on the first device, and from one or more configuration files on a second intelligent device, where each configuration file on the second device is associated with a component on the second device. The batch tuner on the first device may then be used to tune both devices by applying the contents of the batch configuration document to the configuration files on the first and second intelligent devices. In one embodiment, a configuration document may be generated by the batch tuner on a first intelligent device from only the one or more configuration files on a second intelligent device, or from two or more other intelligent devices. The batch tuner may then be used to tune the second device by applying the contents of batch configuration document to the one or more configuration files on the second device.","In one embodiment, multiple intelligent devices coupled to a network may access one or more batch configuration documents from a server on the network. One or more batch configuration documents may be generated on one or more of the intelligent devices on the network and copied to the server. In one embodiment, one or more batch configuration documents may also be generated on the server. An intelligent device may download one or more of the batch configuration documents from the server as required. The downloaded batch configuration document may be applied by a batch tuner on the device to tune the one or more components on the intelligent device.","While the invention is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the invention is not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude\u201d, \u201cincluding\u201d, and \u201cincludes\u201d mean including, but not limited to.","Embodiments of a system and method for batch-tuning one or more components of intelligent devices are described. An intelligent device may include tunable components each associated with one or more tunable configuration files. Intelligent devices typically include one or more software components that are executable within the devices. Intelligent devices may include, but by no means are limited to: smart appliances, printers, personal digital assistants (PDAs), cellular\/mobile phones, notebook computers, laptops, desktop computers, workstations, servers (e.g. Web and application servers), more powerful computer systems such as mainframes and high-end servers, even supercomputers. Software components may include, but are not limited to, system software including operating system software (e.g. Sun Solaris, Microsoft Windows, Windows NT, Linux, Macintosh, etc.), application software (e.g. database management, storage management, utility, etc.), and driver software for interfacing with and controlling hardware components. Intelligent devices typically include one or more hardware components such as processors, memory, firmware, storage devices, and external interfaces.","As applications evolve, tunable parameters may come and go. Embodiments of the batch tuning mechanism allow snapshots of tunable parameters on an intelligent device to be taken and maintained, and may provide a standard mechanism for dealing with system installations, restores, etc., and as such making the overall maintenance of intelligent devices more manageable. Possible implementations of embodiments of the batch tuning mechanism include, but are not limited to, large-scale deployments of software components, support (e.g. when a problem is logged, a snapshot may be generated using the batch tuning mechanism and provided with the problem information), and in Quality Assurance (QA) (e.g. for the replication of tests). For example, in QA, snapshots may be made of a plurality of alternative configurations, and may be applied to the system under test for testing under the different configurations.","As illustrated in , a batch tuning mechanism (referred to as a batch tuner ) may be used to generate one or more batch configuration documents, which may be referred to as taking a \u201csnapshot\u201d , from the tunable information on an intelligent device . In one embodiment, the snapshot  may include one or more markup language documents. In one embodiment, the documents may be eXtensible Markup Language (XML) documents. Note that other embodiments may use other document formats. The batch tuner  may also be used to generate configuration files from the snapshot ; this process may be referred to as \u201ctuning\u201d. The tuning may be performed on the original intelligent device  (e.g. during a restore) or alternatively on other intelligent devices (e.g. during installation of multiple systems).",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 3","FIG. 3"],"b":["270","274","270","280","270","282","270"],"i":["n ","n. "]},"In the above example, the classes myOracle, myVeritas and mySolaris may each include a parse and a restore method. In one embodiment, both of these methods may be available to a controlling method via a design pattern such as the visitor pattern. In software development, a design pattern is a written document that describes a general solution to a design problem that recurs repeatedly in many projects. In object-oriented programming, a design pattern may include the description of certain objects and object classes to be used, along with their attributes and dependencies, and the general approach to how to solve the problem. A design pattern allows the adding of new operations to composite class hierarchies without modifying the text of either the composite class or its variants.","The batch tuner  may be called (e.g. by a calling program , which in one embodiment may be controlled by user input) and provided with information describing what information is to be gathered (e.g. Oracle and Solaris but not Veritas). The batch tuning mechanism may then use a parse method to create a snapshot  of the software component(s). On the \u201cnew\u201d system, a restore method may be executed that reads the markup language snapshot(s), loads the relevant classes (using a design pattern such as the visitor pattern) and edits the relevant file(s).",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 4","b":["200","202","202","202","202","204","204","206","202","202","204","206","200","250","204","206","202","206","202","206","106","206","206"]},"Intelligent device  may also include batch tuner . Batch tuner  may include a mechanism to generate a new and\/or modify an existing batch configuration document  from the configuration files  on device . Batch tuner  may also include a mechanism to generate new and\/or modify existing configuration files  from an existing batch configuration document . In one embodiment, the batch configuration document  is a markup language document. In one embodiment, the existing configuration files  are also markup language documents. In one embodiment, the markup language used is the eXtensible Markup Language (XML). Other embodiments may use other document formats.","eXtensible Markup Language (XML) is an example of an SGML-based markup language. There is a DTD for XML. XML is a flexible way to create common information formats and share both the format and the data on the World Wide Web, intranets, and elsewhere. XML describes the contents of a page or file in terms of what data is being described. This means that an XML file may be processed purely as data by a program, may be stored with similar data on another computer or may be displayed. XML is \u201cextensible\u201d because the markup symbols are unlimited and self-defining.","In one embodiment, the mechanism to generate a new or modify an existing batch configuration document  may use one or more executable scripts  written in a script language such as Perl, or alternatively in a compiled language such as Java, C or C++. Note that in some embodiments other languages besides the ones mentioned above may be used. The script  may be referred to as a generator script. The generator script  may, when executed, parse a portion or all of the available tunable configuration files  on device  and build these into a batch configuration document . If the batch configuration document  does not already exist, the generator script  may create a new batch configuration document . If the batch configuration document  does exist, the generator script  may modify the existing batch configuration document , or alternatively may create a new version of the batch configuration document . The generator script  may be modified to add and\/or remove configuration files  that will be parsed, to change the name and\/or destination of the generated batch configuration document , or to make other modifications as necessary.","In one embodiment, the batch tuner  may include a user interface, and the mechanism to generate a new or modify an existing batch configuration document  may be performed manually through the user interface to the batch tuner . For example, the batch tuner  may have a user interface that allows a user to manually select configuration files  to be used in generating a new or modifying an existing configuration document . The user interface may be a text interface such as a command line interface, or alternatively may be a graphical user interface (GUI) to the batch tuner . Through the user interface, a user may initiate searches for tunable configuration files  and existing configuration documents , select from displayed configuration files  and configuration documents , or alternatively may manually enter the names of one or more configuration files  and\/or configuration documents . Through the user interface, the user may also initiate the creation of and\/or select existing configuration documents  to be used in the configuration process. The user interface may include a mechanism for the user to initiate the generation of a new configuration document , or alternatively to modify an existing configuration document , from the configuration files  specified using the user interface. The user interface to the batch tuner  may allow the user to perform other functions of the batch tuner  as well.","The batch configuration document  may include markup symbols (e.g. tags) that describe the contents of the configuration files  from which the batch configuration document  was generated, including all applicable tunable parameters from the configuration files . In one embodiment, the batch configuration document  may be divided into sections, with one section for each configuration file . Each section may describe the particular configuration file  to which it is associated, including all applicable tunable parameters from the configuration file . The sections may also include name and location (e.g. directory) information for the configuration files .  illustrates one embodiment of what such a batch configuration document  may look like for two configuration files. This example is not intended to be limiting in any way:","Referring again to , in one embodiment, the mechanism to generate new or modify existing configuration files  from an existing batch configuration document  may include an executable tuner script  written in a script language such as Perl, or alternatively in a compiled language such as Java, C or C++. Note that in some embodiments other languages besides the ones mentioned above may be used. The script  may be referred to as a tuner script. The tuner script  may, when executed, read a previously created batch configuration document , verify that the relevant component(s)  are present in the device , edit and\/or create the indicated configuration files , and optionally reboot the intelligent device  if necessary. If a configuration file  does not exist for a component , the tuner script  may create a new configuration file  for the component. If a configuration file  for a component  does exist, the tuner script  may modify the existing file , or alternatively may create a new version of the file . In one embodiment, the tuner script  may be modified to add configuration files  to or remove configuration files  from the script, to change the name and\/or destination of the configuration files  and\/or the batch configuration document  that is to be read, or to make other modifications as necessary. If, when executing the tuner script , it is determined that a particular component  that is included in the script  does not exist in device , then the section that tunes configuration files  for the missing component  may be skipped. Alternatively, the configuration files  for all components  as specified in the script  may be modified and\/or created regardless of whether the component(s) are present or not.","In one embodiment, the batch tuner  may include a user interface, and the mechanism to generate new or modify existing configuration files  from an existing batch configuration document  may be performed manually through the user interface to the batch tuner . For example, the batch tuner  may have a user interface that allows a user to select an existing configuration document  to be used in tuning an intelligent device , and to manually select configuration files  to be created and\/or modified from the existing configuration document  during the tuning process. The user interface may be a text interface such as a command line interface, or alternatively may be a graphical user interface (GUI) to the batch tuner . Through the user interface, a user may initiate searches for tunable configuration files  and existing configuration documents , select from displayed configuration files  and configuration documents , or alternatively may manually enter the names of one or more configuration files  and\/or configuration documents . Through the user interface, the user may select existing configuration documents  to be used in the tuning process. The user interface to the batch tuner  may allow the user to perform other functions of the batch tuner  as well.","As an example of using the method described herein to generate and use configuration documents  in tuning intelligent devices , a batch configuration document  may serve as a \u201cbackup\u201d of a particular configuration of an intelligent device . If the configuration of the device is corrupted, changed, or otherwise modified, the batch configuration document  may be used to restore the device  to the desired configuration.","In one embodiment, multiple versions of batch configuration document  may be generated on an intelligent device. A user may \u201ctune\u201d the device  for a particular configuration, generate a first version of batch configuration document , retune the device  for a second configuration, generate a second version of batch configuration document , and so on to create a plurality of batch configuration documents . The user may then use batch tuner  to easily switch from one configuration to another configuration, for example, by running script  with a different batch configuration document  specified.","In one embodiment, there may also be multiple versions of script  and\/or script . These multiple versions may specify different combinations of components  for different batch configuration documents . These different versions of batch configuration document  may be used to tune subsets of or all of components  on device . Thus, the user  may use different versions of batch configuration documents  to tune particular subsets of components  without having to retune all components . This may be useful, for example, if retuning one or more of components  would require rebooting device , and the user  desires to retune one or more other components  for a particular configuration without rebooting.","Note that component C of  does not have a configuration tool . This is to illustrate that, in one embodiment of an intelligent device  that includes a batch tuner , one or more components  may not require associated configuration tools , because batch tuner  may be used in lieu of the configuration tools  to create new and\/or modify existing configuration files  for the components .","A configuration file  may include configuration information for multiple components . The configuration information in a configuration file may include one or more tunable parameters for the associated component. For example, the intelligent device  may include a fourth component D (not shown), which shares configuration file C with component C. For example, a vendor may produce a plurality of related software components, where two or more of the software components may be installed in an intelligent device. The vendor may distribute one configuration file  to be shared by the installed two or more software components.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 6","b":["212","206","210","214","212","214","206","212","212","206","216"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 7","b":["212","216","212","202","206","202","212","260","206","212","262","206","202","206"]},"In one embodiment, there may be an executable module  for one or more of the tunable components . In this embodiment, when batch tuner  needs to tune a particular component , it may call the executable module  for the component , which may then modify configuration file(s) for the component using input from batch tuner . In one embodiment, the executable module  for a component  may be the configuration tool  associated with the component .","In one embodiment, batch tuner  may be able to generically access two or more different configuration files  for different components . In one embodiment, the configuration files  may conform to an XML document type definition (DTD) to provide for the generic access. A document type definition (DTD) is a specific definition that follows the rules of a markup language such as the Standard Generalized Markup Language (SGML) or a markup language based on SGML. A DTD is a specification that accompanies a document and identifies what the markup elements are that separate paragraphs, identify topic headings, and so forth and how each is to be processed. By mailing a DTD with a document, any location that has a DTD reader will be able to process the document and display, print or otherwise process it as intended.","The XML DTD provides a standard document type that allows the batch tuner  to generically access any configuration file  that conforms to the DTD. The XML DTD provides a method for describing all the available tunable parameters and related files. The XML DTD may be used as a standard method of information exchange in the methods as described in  and elsewhere herein. In one embodiment, batch tuner  may include an interpretation layer for the XML documents which conform to the DTD. In one embodiment, the XML DTD may be used for both the configuration files  and the batch configuration document . In one embodiment, batch configuration document  and configuration files  may conform to a document object model (DOM), and batch tuner  may use a DOM application programming interface (API) to access and\/or modify the document  and files . In other embodiments, the batch tuner may use other interfaces to access the batch configuration document and configuration files, for example, SAX (Simple API for XML). SAX provides an API that allows a programmer to generate, modify and\/or interpret Web files using the Extensible Markup Language (XML). In one embodiment, the modules  may be written to conform to a standard application programming interface (API) that allows the modules to accept a document object model (DOM) tree as an input.","The Document Object Model (DOM) is a platform- and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure and style of documents (e.g. markup language documents such as XML documents). The document may be further processed and the results of that processing can be incorporated back into the presented page. A document or Web page may include objects (elements, links, etc.) that can be manipulated using DOM. Using DOM, a program or script may delete, add, or change an object, change the content of an object and\/or add, delete or change an attribute of an object. The DOM application programming interface (API) provides a standardized, versatile view of a documents contents.","Building a DOM tree is typically the first step in processing a markup language (e.g. XML or HTML) document. A DOM tree is a tree of nodes, with each node corresponding to an object (element, link, attribute, text, etc.) of the markup language document the tree was generated from. A DOM tree may include a root node (also referred to as a root element or root object), one or more other levels of nodes, and terminal nodes (nodes at the lowest level on this \u201cbranch\u201d). The terminal nodes may be thought of as the actual \u201cdata\u201d in the tree.","When a markup language parser loads a document, it essentially scans the document, looks for elements, attributes, text, and so on and constructs a hierarchical DOM tree, using the API (e.g. DOM or SAX API), based on those items. When the parser encounters an object in the source document, it creates a new node in the tree containing a representation of that object. DOM and SAX, among others, provide an API for accessing the nodes in the document tree, and for reading, writing, and modifying individual nodes or entire fragments of the tree. The DOM tree allows the manipulation of the contents of the original markup language document.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 8","b":["206","206","200","212","212","200","210","402"]},"During generating batch configuration document  from the one or more tunable configuration files , batch tuner  may use the API  to construct one or more DOM trees  from the configuration files , where each configuration file  is associated with a particular DOM tree . The exemplary DOM tree  of  includes a root node  (which also may be referred to as a root element or root object), two levels of nodes  and , and terminal nodes . Terminal nodes  may be thought of as the actual \u201cdata\u201d in the tree. For example, terminal nodes  may include the parameter values for the tunable parameters in the configuration file  associated with this DOM tree . A DOM tree  for a configuration file  may also include one or more other pieces of information about the file , including, but not limited to: a file name, location information for the file (e.g. a path or directory), a file description (e.g. what component(s) does this file correspond to?), links to one or more other configuration files  that may need to be tuned in conjunction with tuning this file, and reboot\/reinitialize information (does retuning this file require reboot of the intelligent device or just reinitialization of the component?). Note that the structure of the exemplary DOM tree  as illustrated in  is not intended to be limiting in any way.","After generating a DOM tree  from a tunable configuration file , relevant information from the file , including the values of tunable parameters for the component  associated with the file , may be written to batch configuration document . If batch configuration document  does not exist, it may first be created. In one embodiment, batch configuration document  conforms to an XML DTD, and the relevant information is written to the document  in accordance with the XML DTD. Once all available and applicable (e.g. specified in script ) configuration files  have been processed, the generation (e.g. construction or modification) of configuration document  may be complete.","During tuning an intelligent device  using a batch configuration document , the batch configuration document  may be parsed by batch tuner . In one embodiment, batch tuner  may use the API  to generate a DOM tree  for each configuration file  described in configuration document . Alternatively, batch tuner  may generate a DOM tree  that describes the entire batch configuration document . In this embodiment, the DOM tree  may be viewed as a \u201cgrove\u201d, with one DOM tree in the grove for each configuration file . Batch tuner  may then access each configuration file  and apply the parameter values from the DOM tree  to the file .","In one embodiment, instead of directly accessing a configuration file  for each component , batch tuner  may instead call an executable module  for each component . In one embodiment, batch tuner  may pass configuration information from the batch configuration document  to the module  to allow the module  to modify the corresponding configuration file . The module  may then modify the corresponding configuration file  using the input information. In one embodiment, the input information may include the DOM tree  for the corresponding configuration file  extracted from configuration document . In one embodiment, after modifying the configuration file  (or alternatively creating the file , if it did not previously exist), the module  may return execution control to batch tuner . Batch tuner  may then call the next module , if any, and so on until all required modules  have been called. In another embodiment, execution of the modules  may be asynchronous. In other words batch tuner  may call each module  and pass the corresponding configuration information (e.g. DOM tree ) to each of the modules  without requiring the modules  to return execution control to the batch tuner .","Although embodiments are generally described as constructing a DOM tree from the configuration files, it is noted that other data structures, including other implementations of trees, may be used in various embodiments.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 9","b":["212","200","212","200","212","200","210","212","200","214","212","206","202","200","216","214","216","212","200","200","210","212","206","200","216","200","206","200","216","206","200","202","200"]},"In one embodiment, batch tuner  on intelligent device B may check to see if a component  specified by the information in batch configuration document  is present on device B and, if the component  is not present, may skip the tuning (e.g. modification and\/or creation of a corresponding configuration file ) of the missing component .","A component A (not shown) on intelligent device A may have a corresponding, similar component A (not shown) on device B. Configuration information for component A on device A may be located in configuration file A on intelligent device A, and may be included in batch configuration document  when document  is generated. After copying document  to device B, the configuration file A on device B may be updated with the configuration information from document  from configuration file A of device A. Note that component A of device B is said to be similar to component A of device B. As used herein, the term \u201csimilar components\u201d includes the notion of two or more components  which are tunable (e.g. configurable) using similar configuration files . As used herein, the term \u201csimilar configuration files\u201d includes the notion of two or more configuration files  which include one or more of the same tunable parameters and which may be used to tune similar components .","Note that the particular format of similar configuration files may be different. For example, the order of the tunable parameters in the two files may be different, and\/or the values of the tunable parameters may be different. Two similar components  may be identical, or may be different in one or more aspects, but still may be configurable using a similar configuration file . For example, a vendor may produce a circuit board and distribute the circuit board with a configuration file  comprising tunable parameters. The vendor may distribute, over the lifetime of the circuit board, two or more versions of the board, where each version of the board differs in one or more aspects from each of the other versions. The configuration file  for the circuit board may, however, remain unchanged over the life of the board, or alternatively may have changes that do not affect the processing of the configuration file  by the batch tuning process described herein. For example, if a markup language is used for the configuration file , then the order that tunable parameters and at least some other information appears in the configuration file  may be changed without affecting the processing of the configuration file  by the batch tuning process.","In one embodiment where executable modules  are called by the batch tuner  for each component , for the batch tuner  to tune a component  on device B, an executable module  must be present for the batch tuner  to call. In this embodiment, if a module  is not present for a component , the component may not be tuned. In one embodiment, one or more executable modules  may be copied from device A to device B in addition to document  and other documents. Alternatively an executable module  may be installed from another source, e.g. an executable module  for a particular component  may be downloaded from the vendor's Web site.","Note that intelligent devices A and B may be similar devices (e.g. the platform, operating system, suite of components , etc. may be similar). In one embodiment, devices A and B may be different (e.g. one or more of the platform, operating system, suite of components , etc. may be different). In one embodiment, one or more of the objects used in batch tuning as described herein (e.g. configuration document , configuration files , modules , etc.) are implemented to be platform-independent. In one embodiment, the objects conform to a platform-independent markup language (e.g. XML) DTD and DOM API. In other embodiments, the objects may conform to other markup languages and\/or APIs, for example, the SAX API.","The following is an example of generating a batch configuration document  on one intelligent device  and transferring it other intelligent devices . A workstation manufacturer may have a default configuration for each different model of workstation produced. After the assembly of a particular workstation, a copy of a \u201cdefault\u201d configuration document  and corresponding tuner script , previously created on a different workstation, may be copied (e.g. by floppy disk, CD, or over the network) to the workstation and executed by batch tuner  to tune the workstation to its \u201cdefault\u201d configuration.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 10","b":["200","200","210","212","214","212","206","202","200","206","202","200","210","200","200","212","206","200","200","216","200"]},"In one embodiment, a configuration document  may be generated by batch tuner  on device C from only the one or more configuration files  on a second intelligent device D, or from two or more other intelligent devices . Batch tuner  may then be used to tune device D by applying the contents of batch configuration document  to one or more configuration files  on device D in response to executing a tuner script  on device C.","For example, a system may include a workstation and one or more other intelligent devices such as printers, scanners, etc. A configuration document  may be generated on the workstation that includes tuning information for the workstation and for one or more of the other intelligent devices in the system. To tune the system, a tuner script  corresponding to the configuration document  may be executed on the workstation, and the tuning information in the configuration document  may be applied to the workstation and to one or more of the other intelligent devices in the system.","The intelligent devices  as illustrated in  may be connected and may communicate via a network such as the Internet, or via a direct connection (wired or wireless) such as a bus, a serial connection or a parallel connection between the intelligent devices . For example, intelligent devices  may be connected via a Universal Serial Bus (USB), General Purpose Interface Bus (GPIB), FireWire, IRDA, or other type of connection. One skilled in the art will recognize that there are numerous other wired and wireless mechanisms that may be used to connect two or more intelligent devices .",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 11","b":["200","212","240","200","240","220","240","212","200","220","212","220","216","212","220","200","212","216","200","216","210","200","202","200","212","216"]},"For example, a company may be divided into different business units that require different configurations for desktop computers. The business may have a server  that stores different versions of configuration documents  for the desktop computers in the different units. When a unit adds a new desktop computer, the configuration document  and corresponding tuner script  for the business unit may be downloaded from the server  to the new computer. The tuner script  may then be executed on the new computer to tune the computer to meet the requirements of the business unit.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 12","b":["212","206","300","206","200","212","214","206","214","206","200","214","210"]},"Tunable parameters may be extracted from the parsed tunable files  as indicated at . In one embodiment, the process of parsing the tunable files  and extracting tunable parameters may include construction one or more DOM trees  from the tunable files . A batch configuration document  may be created (or modified if one already exists), and the extracted tunable parameters may be added to and\/or modified in the document  as indicated at . In one embodiment, the extracted parameters may be stored in the document  in a markup language format. In one embodiment, the markup language is XML. In one embodiment, the tunable parameter information for each parsed file  may be stored in a portion of the configuration document  for the particular file , similar to the example file of .",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 13","b":["212","206","214","200","212","310","212","212","312","206","404","206","314","206","206","404","404","316","318","206","212","212","212","206","320","312","318","206","206","214"]},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 14","b":["212","202","200","350","212","202","212","212","352","206","202","200","212","354","206","212","200","356","202","202","200"]},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 15","b":["212","202","200","216","200","216","212","200","200","216","210","216","212"]},"At , a batch configuration document  may be opened for processing. In one embodiment, a DOM tree  may be generated from the batch configuration document  as indicated at . In one embodiment, the configuration document  may be in a markup language. In one embodiment, the markup language is XML. Since the contents of a markup language document are generally organized in a tree structure, the method may convert the tree structure of the document  into a DOM tree  for processing. In one embodiment, the method may convert the tree structure of the document  into a \u201cgrove\u201d of DOM trees , with one DOM tree in the grove for each configuration file  to be edited during the processing of the batch configuration document .","Using the DOM tree  generated at , a next configuration file  to be processed may be selected as indicated at . The selected configuration file  may then be opened as indicated at . If the configuration file  does not exist, then it may first be created. The portion of the DOM tree  generated at  for the configuration file  may then be used to add and\/or modify the values of the tunable parameters in the opened configuration file  as indicated at . In one embodiment, the portion of the DOM tree  for the particular component  may be passed to a module  for the component  associated with the configuration file , and the module  may perform the actions indicated at  and .","If the DOM tree  generated from the configuration document  includes more configuration files  to be tuned, then processing may return to  as indicated at . If all the configuration files  indicated in the configuration document  have been modified (or optionally skipped if the corresponding component  is not present in the device ), then the tuning of the configuration files  on the intelligent device  using the configuration document  has been completed. The intelligent device  may then optionally be rebooted to implement the tuning of the specified components .","The methods as described in  may be implemented in software, hardware, or a combination thereof. The order of method may be changed, and various steps may be added, reordered, combined, omitted, modified, etc.","Various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a carrier medium. Generally speaking, a carrier medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM, volatile or nonvolatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc. as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link.","In summary, a system and method for batch-tuning multiple components of intelligent devices have been disclosed. It will be appreciated by those of ordinary skill having the benefit of this disclosure that the illustrative embodiments described above are capable of numerous variations without departing from the scope and spirit of the invention. Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended that the following claims be interpreted to embrace all such modifications and changes and, accordingly, the specifications and drawings are to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
