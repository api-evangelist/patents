---
title: Network intrusion blocking security overlay
abstract: A database security overlay that identifies each network and local access gateway to a database, and monitors each access path from the identified gateways to analyze each connection to the database and block any connections determined to transport unauthorized or undesirable content. Access gateways that establish connections are identifiable by interprocess communication (IPC) mechanisms employed in accessing the database. An evaluator monitors access attempts, while a tapping mechanism on IPC mechanisms that provide the connections captures access attempts from the access gateways. The tapping mechanism intercepts and forwards access attempts to the evaluator to centralize and focus DB paths amid multiple local and external connections on the DB server. A lightweight check for each local access quickly determines if the access attempt warrants further scrutiny.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08261326&OS=08261326&RS=08261326
owner: International Business Machines Corporation
number: 08261326
owner_city: Armonk
owner_country: US
publication_date: 20080425
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Database security is becoming an increasingly imperative aspect of modern business practices as breaches of repositories containing sensitive information evoke high profile headlines, and resulting damages stemming from such a breach can be substantial. There is a modern trend towards a heightened duty that keepers of sensitive information have towards safeguarding databases from unauthorized access. Further, when such breaches do occur, it becomes equally as important to identify the scope of the breach so that appropriate mitigation activities may ensue. Accordingly, database access control and auditing mechanisms are often employed to protect and monitor access to a database.","Traditional database (DB) security has focused on user based security, typically via access based control. Such an approach establishes a privileged class of users, such as administrators and supervisory personnel. A presumption of trust tends to accompany these \u201csuper user\u201d roles, since they are empowered with substantial access privileges, including the ability to modify the privileges of other users to include the \u201csuper user\u201d status. Modern security implementation and auditing principles, however, strive for complete access coverage and monitoring. Exemption of a particular subset of such super users avoids the finely tuned scrutiny demanded by modern security approaches.","Modern database security includes data based techniques, which focus on the content of the accessed data, rather than traditional access based methods which address only who is requesting access. Such data based methods allow a rule-based approach which provides a high granularity of access control, thus avoiding overly restrictive constraints which may hamper legitimate access. However, conventional network path approaches suffers from the shortcoming that certain privileged paths, or local database accesses, such as those from a DBA (database administrator), maintenance, or other trusted application may evade even data-based security of a DB server since they access the box (server) directly through the local connection. Unfortunately, attempts to replicate the network appliance via a local agent or other processing then burdens the server with such security processing, degrading overall performance.","Accordingly, configurations herein substantially overcome the shortcomings of a network path approach by performing a lightweight, or first stage, check on the local database accesses to identify suspect connections, and transmitting access attempts on the suspect connections to the appliance in a second stage for more robust scrutiny. In this manner, the local lightweight check coupled with the network appliance provides a complete security overlay for both local and remote database access attempts, and relieves the database host and database management systems (DBMS) from performing the rule based check on the access attempts, thus relieving integration issues which may arise from retrofitting an existing DB installation with a local access check. The security overlay approach disclosed below entails no changes to the application or database schema\/definitions, avoiding a need to rearchitect or redeploy DB applications.","The configurations discussed below disclose a database security overlay that identifies each access gateway to a database, and monitors each access path from the identified gateways to analyze each connection to the database and block, monitor, and\/or log any connections determined to transport unauthorized or undesirable content from a single common point or path to the database, thus covering all local and remote access paths. The two phase approach provides an immediate lightweight check via attributes of the connection, and an exchange with an external evaluator if the connection attributes are not deterministic of the responsive action. Local access gateways that establish local connections are identifiable by interprocess communication (IPC) mechanisms employed in accessing the database, and remote gateways arrive via external network connections. An evaluator disposed on the external network connection monitors remote access attempts, while a tapping mechanism on IPC mechanisms that provide the local connections captures access attempts from the local access gateways. The tapping mechanism intercepts and forwards local access attempts to the evaluator to mitigate processing demands of monitoring the access attempts on the local DB server. Since interception of the database transactions is performed at the IPC level, no database specific calls or approaches are employed, thus the overlay operates in a heterogeneous manner with respect to individual DBMS implementations\/vendors, even for multiple DBMS installations on the same server.","A lightweight check for each access quickly determines if the access attempt warrants further scrutiny. A response to the access attempt is blocked pending a verdict from the evaluator, however, in view of enhanced performance, lower risk connections may be allowed to proceed pending a later verdict on the connection. The tapping mechanism monitors each IPC mechanism to the database, such as kernel calls, sockets, and shared memory, for forwarding to the evaluator, therefore addressing 1 DB access from all access paths via a single common access point. In this manner, each connection to the database, is scrutinized without burdening the database server with computing the propriety of each access attempt. Therefore, the scrutinizer provides a first stage screening of database connections via the lightweight check on connection attributes at a connection table, while the evaluator completes a second stage against a full set of access rules via a transactional exchange. This two stage approach is such that a rule is applied that decides, for example, that a DB connection needs to be watched and once watched (and therefore certain attributes like delays or redaction attached to the connection), responses from further rules (verdicts) are waited-on while the results computed by the evaluator.","In further detail, the configurations herein provide a method and apparatus for scrutinizing database connections by receiving a transaction requesting to access a database, in which the transaction is received on a connection between the database and an access portal, and identifying, via a lightweight check, connection attributes such as a watch status of the database connection, such that the connection attributes are indicative of a level of scrutiny to be applied to the connection. The lightweight check is performed by fetching a predetermined label corresponding to the connection from a table of connections to the database. A scrutinizer in the database server perform the lightweight check, and selectively transmits, based on the connection attributes such as the watch status being indicative of a need to analyze the connection, the received transaction to an evaluator, in which the evaluator is operable to apply a set of access rules for determining a verdict specifying whether the transaction is a suspect transaction indicative of undesirable access. The scrutinizer receives the verdict from the evaluator, such that the verdict is indicative of a responsive action (i.e. terminate the connection) based on applying the set of access rules to the transaction, and the scrutinizer then applies the responsive action to the transaction, in which the responsive action indicates whether to allow subsequent transactions on the connection to proceed.","In the example arrangement discussed further below, the evaluator is disposed external to the DB server, and may be connected on a network path to the database, and the received transaction comprises a plurality of received transactions, such that the evaluator applies the same set of access rules to both the transactions from the network path, and to the received (local) transactions based on the watch status being indicative of a need to analyze the connection. While the evaluator may be disposed on the network path and operable to perform direct interception of database transactions, the scrutinizer may nonetheless be configured to intercept both local and remote network traffic and forward the traffic to the evaluator such that all access paths receive similar treatment. Privileged accounts and numerous network access paths are mitigated by intercepting at a common access point via IPC intercepts of database access requests.","Connection requests to the database are employed to generate a lightweight table responsive to the lightweight check, such that generating includes receiving a connection request for connecting to the database, and identifying an origin and a user from which the connection request was received. The scrutinizer determines, from the identified origin and the user, the connection attributes corresponding to the connection. The determined attributes, such as a watch status, delay indicator, redaction indicator, and priority buffer are indicative of whether the connection attributes alone are conclusive of a responsive action for each particular transaction, whether transactions on the connection need be sent to the evaluator for a verdict, or waived if the connection is deemed low risk.","Discussed below is an example configuration for which mitigating risk of the so-called superusers (e.g. DBAs) is paramount. DBAs and other privileged users with system privileges typically can access any data in any schema. There is no need to explicitly grant privileges to objects containing PIT data and there is no way (in all databases) to limit such access. Preventing such access (mostly preventing SELECTs) is required by multiple regulations and in many geographies. This is usually solved through monitoring and real-time alerting but many are moving to prevention as a way to reduce cost (of review). Monitoring is also viewed as a compensating control whereas prevention is the real compliance requirement. Note that while SELECT statements are the most common, there are many activities that need to be prevented\u2014e.g. the DBA should not be able to create a view based on the sensitive data. Particular troublesome scenarios are numerous. The differences are in what the rules are based on\u2014e.g. based on user accounts, based on which IP or subnet the connection comes from, based on which application is making the request, based on the time of day, based on which schema and database objects are accessed, etc.","A further shortcoming of conventional DB security is presented with outsourced DBAs. Companies that outsource DBA positions are extremely sensitive to what external users have access to. This use case is a subset of the previous one but gets more visibility and priority. This use case also gets special attention due to the possibility of changes to business-affecting data. In the previous use case the focus is often on access to sensitive data and is often related to PII. However, there is also a similar use case involving business-affecting data. In this use case the focus is usually not only on access to data but even more on the ability that a DBA has to change data (i.e. DML vs. SELECT). While this scenario is as valid for internal DBAs as it is to outsourced work, internal implementations are often based on monitoring and auditing whereas outsourced scenario often require better preventive controls or at the very least a monitoring system that is not dependent on database functions.","A further environment to which the disclosed configurations are beneficial is one with a need to provide segmentation of applications and their related data. Because multiple applications often live in the same instance or on the same operating system and because users with system privileges can access data across these schema and database boundaries, there is a need to enforce policies in which privileged users of one application cannot connect to the schema of another application, even when running on the same instance or machine.","In alternate arrangements, the connection attributes include a redaction indicator to employ a masking or redacting arrangement with particularly sensitive data (e.g. credit card numbers) returned from the DB. In this arrangement, the evaluator receives a 3-tuple including the unredacted data for analysis, the subset of data to be redacted (i.e. which part of a string), and the format for applying the redaction. Analysis is performed on the sensitive data, however data returned is masked according to the 3-tuple, e.g. last 4 digits of credit card No., for example.","Alternate configurations of the invention include a multiprogramming or multiprocessing computerized device such as a workstation, handheld or laptop computer or dedicated computing device or the like configured with software and\/or circuitry (e.g., a processor as summarized above) to process any or all of the method operations disclosed herein as embodiments of the invention. Still other embodiments of the invention include software programs such as a Java Virtual Machine and\/or an operating system that can operate alone or in conjunction with each other with a multiprocessing computerized device to perform the method embodiment steps and operations summarized above and disclosed in detail below. One such embodiment comprises a computer program product that has a computer-readable storage medium including computer program logic encoded thereon that, when performed in a multiprocessing computerized device having a coupling of a memory and a processor, programs the processor to perform the operations disclosed herein as embodiments of the invention to carry out data access requests. Such arrangements of the invention are typically provided as software, code and\/or other data (e.g., data structures) arranged or encoded on a computer readable medium such as an optical medium (e.g., CD-ROM), floppy or hard disk or other medium such as firmware or microcode in one or more ROM or RAM or PROM chips, field programmable gate arrays (FPGAs) or as an Application Specific Integrated Circuit (ASIC). The software or firmware or other such configurations can be installed onto the computerized device (e.g., during operating system execution or during environment installation) to cause the computerized device to perform the techniques explained herein as embodiments of the invention.","The database security overlay as disclosed in an example configuration below provides database access control covering each access path into the database, in contrast to conventional methods which cover only a particular access portal. In a typical database, much of the access traffic occurs via network transport; the remainder occurs via local access gateways such as operator consoles. Accordingly, configurations herein cover either access by intercepting invocations of a local IPC mechanism used between a user access gateway (i.e. operator console) and the database. The intercepted communications undergo a two-stage check; first a screening based on the type of connection to determine if the connection warrants further scrutiny, and a second rule based check on the contents of the communications. Alternatively, the full rule based check may be implemented by disposing the evaluator on a network path for intercepting all communications; this is a configuration aspect which may be affected by the number of network paths into the DB server.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","120","130","120","122","140","142","158","140","158","152","108","158","150","120","152","160","166","160","162","164","130"]},"Collectively, the evaluator  coupled to the scrutinizer  effectively provides coverage for all database transactions (access attempts), whether local or remote. The scrutinizer therefore operates the same whether the connection is networked  or local  because in both cases the database server  acts as one of the endpoints. Alternatively, the evaluator , in an alternate configuration, may be disposed directly accessing the network path , to passively \u201csniffs\u201d actively block the remote\/network access attempts. In either case, the evaluator  compares the transactions  against a set of rules  indicative of improper or disallowed transactions. The scrutinizer  monitors connections by identifying a type of the transaction  via a lightweight check, and sends the transaction  to the evaluator  for comparison with the set of rules , shown by dotted line . The lightweight check, discussed further below, is intended to screen transactions  to allow trusted traffic to pass unhindered if the connection attributes alone can render a responsive action, while routing less trusted traffic to the evaluator  for further processing. Note that a variety of network configurations may be employed, and the scrutinizer  need not be employed for only local connections. Configurations having multiple network ingress points may find it beneficial to establish scrutinizer  based protection via a connection table rather than monitoring\/capturing each network path .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1","FIGS. 1 and 2"],"b":["110","152","110","200","152","110","140","162","163","158","150","163","201"]},"The lightweight check is performed by fetching a predetermined label, discussed further below, corresponding to the connection . The predetermined label indicates if further scrutiny is required for the particular connection , or if the connection is a trusted connection, as depicted at step . Therefore, in the simplest case, further scrutiny can be waived for connections already deemed secure or trusted. The connection attributes may themselves indicate a responsive action, or may indicate a need to invoke the evaluator . Based on the check, the scrutinizer  selectively transmits, if the watch status or other connection attributes are indicative of a need to analyze the connection , the received transaction  to the evaluator, as shown at step . The evaluator  is operable to apply a set of access rules  for determining a verdict, shown by arrow , specifying whether the transaction  is a suspect transaction indicative of undesirable access. Since the lightweight check involves only a table reference of a connection attribute, the server  is not also excessively burdened with scrutinizing traffic on the connections . Since the evaluator  applies similar analysis to the received local transactions  as the network connections , local connections  are equally as protected as network connections , and computation for the analysis offloaded to the evaluator  in either case.","The scrutinizer  then receives the verdict  (, below), as depicted at step , such that the verdict  is indicative of a responsive action based on applying the set of access rules  to the transaction , as shown at step . Alternatively, the connection attributes may have been deterministic of the responsive action. The responsive action may be indicative of a need to block the communication by terminating the connection , or alternatively may be indicative of merely logging the transaction  or other suitable action. The scrutinizer  employs the same rule set  as the evaluator , which allows a variety of responsive actions based on a variety of observable factors, such as the set of users, weekend (i.e. off hours), not coming from a certain IP, touching (accessing) a set of objects, reading vs. changing data, etc. Further, the same rule evaluation may be used to set the watch or set the verdict and in fact the watch state can change.","For example, suppose a DBA (i.e. trusted application) begins access using a sensitive schema so the rules  mark the connection to be watched (i.e. delayed). Then the DBA goes and uses a less sensitive schema so the rules can set the connection to not be delayed. Now he goes back to the sensitive schema so again the rules get evaluated and cause the connection to be delayed. Then when they access sensitive data the verdict comes back to terminate the connection. Alternate responsive actions may be envisioned responsive to particular scenarios. The scrutinizer  applies the responsive action to the transaction , in which the responsive action indicates whether to allow subsequent transactions on the connection to proceed, as depicted at step .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIGS. 1 and 3"],"b":["110","120","158","142","110","142","1","142","2","142","3","158","152","142","152","150","122","1","122","2","122","3","140","142","140","160","158","122","1"]},"The scrutinizer  initializes a lightweight table  having entries  for each connection - . . . -N to the database . Each attempt to establish a connection to the database generates a corresponding entry  in the lightweight table . Upon a connection attempt, the scrutinizer  sends the connection request to the evaluator  to assess the propriety of the connection according to the rule set. Subsequent transactions  on the connection are correlated to the entry  for that connection.","The lightweight connection table  includes a set of attributes for each connection, including a watch indicator , a delay indicator , a redaction attribute  and a priority buffer  for each connection . If the connection  is deemed to be of a low risk, for example from a trusted operator account located in a machine room, subsequent transactions  need not be scrutinized by the evaluator , thus avoiding burdening the evaluator  with transactions  on trusted connections . If the connection is not exempt from scrutiny, then the watch indicator  is set to \u201cY\u201d to forward the intercepted transactions  to the evaluator , as shown by arrow . Therefore, connections may be set as \u201cdon't watch\u201d (via the connection attributes) to alleviate the volume sent to the evaluator . Further, since the evaluator  performs the rule based processing of the transactions, the server  is not burdened with such security processing. Only the lightweight check, involving indexing the connection  and checking the watch indicator , is performed. Other attributes may be added to the lightweight table for scrutinizing transactions  classified on a per-connection  basis. The lightweight table therefore provides a common access point on the server  for quickly scrutinizing transactions  for which a responsive action is determinable without an evaluator  exchange. While further lessening the processing burden, the common access point provides effective scrutiny of local and remote accesses without enumerating each individual access path (i.e. network connections, local privileged DBA accounts, other \u201cback end\u201d connections) into the server.","The connection attributes further include, for each entry , a delay indicator , a redaction status , and a priority buffering . The delay indicator  indicates if the transaction  is delayed pending a verdict from the evaluator . The redaction status, or indicator , designates certain portions of fields for redaction by padding with a pad character (e.g. \u201c\u2212\u201d). The priority buffering  specifies a value that buffers, or delays, the transaction  to apply a priority to higher priority (i.e. less buffering delay) transactions. The priority buffering  may also be employed to enforce QoS (Quality of Service) provisions in service level agreements (SLAs). For example, a rule can fire that will mark a connection such that before passing the request to the database it waits for 2 milliseconds\u2014not waiting for a verdict, just \u201csleeping\u201d so that other connections get better response from the database. In this manner, the priority buffer is operable to throttle particular connections and provide better QoS to other connections.","Upon receiving an intercepted transaction , the evaluator  applies the rules from the rule set , and computes a verdict , similar to the processing performed for network communications . The delay indicator  thus causes the scrutinizer  to delay the transaction  until the verdict  is received from the evaluator , as shown by arrow , and is intended for those connections  for which the risk of even a small piece of information is substantial. If the delay indicator  is deemed not necessary for a connection , the verdict  is returned out of band with the intercepted transaction . Thus, when detecting a pattern of deviant activity, it is often that a relatively small number of offending or undesirable transactions is benign, as long as the pattern of deviant activity is detected in a timely manner, i.e. for example, denial or service attacks or mail address snoopers trying to detect a valid email.","In the example shown, the lightweight table  includes an entry  for each connection to the database. The connection  attribute identifies the connection so that successive transactions on the connection may be identified. The lightweight table  therefore adds entries  upon receipt of new connections and removes the entry  when the connection is terminated. The example entries include a connection -, emanating from user device - and employing a shared memory IPC mechanism. This connection - is for a trusted machine room device and is deemed not to be a risk, so the lightweight check by the scrutinizer  allows transactions to pass. Connection -, from laptop device -, is set to watch  value of Y (send to evaluator ), however without a delay , thus transactions  are permitted to pass until the evaluator  returns an unfavorable verdict . Connection -, from a network -, is set to a watch  of \u201cR\u201d to allow responses to pass, and only check requests, however to delay the requests until the verdict  is received (delay=\u201cY\u201d). Such an approach will delay the request, but once permitted will allow the entire response transaction  through, facilitating throughput when the requests yields many packets (i.e. rows) of data. In a typical arrangement, each packet of the transaction  would represent a line of a SQL query, and each response includes a packet for one or more rows. Not all servers will employ multiple IPC mechanisms . Either a request (query) to the database or the response from the database may represent multiple portions. Accordingly, the request or response may be taken as complete when the first portion of the corresponding reply is seen on the connection.","Upon completing of evaluation, the evaluator  returns the verdict  to indicate the result of the evaluation. If the verdict  indicates undesirable message traffic, then the scrutinizer  shuts down the connection , thus blocking subsequent message traffic. Alternatively, the evaluator  may operate in a monitor only mode in which questionable activity patterns are logged for audit purposes, but not restricted entirely.","The rule set  applied by the evaluator  is typically arranged in the form of a rule table , although alternative approaches and structures may be employed. In the example configuration, the rule table  includes a set of entries  for rules - . . . -N ( generally) to be applied by the evaluator . Such rules  may be numerous and highly granular, or may be merely screen for particular attributes and\/or warning flags, as disclosed in copending U.S. patent application Ser. No. 10\/723,521, filed Nov. 26, 2003, entitled \u201cSYSTEM AND METHODS FOR NONINTRUSIVE DATABASE SECURITY\u201d. The example rule employed by way of illustration each include, for each entry , an attribute , a condition , a match value , and an responsive action  to render as the verdict  if the rule is triggered.","For example, entry - examines transactions for a particular destination (attribute ), such as an IP address, based on a condition  such as an equality (EQ), to a value  (IP address 255.225.10.1), and returns an action  to block the transaction  (i.e. shut down the connection ). Entry - blocks transactions  emanating from (source attribute ) address 2555.225.20.2, and merely to log such transactions. Rule entry - looks for a pattern defined by more that 3 attempts to login, and returns a responsive action  of block. Rule entry - examines a masked portion of a sensitive attribute, such as a credit card number, and returns a verdict based on only the masked portion. The verdict  returned from a particular rule  may also indicate to modify the watch status or the delay status of the particular connection  in the lightweight table .","It should be noted that alternate arrangements may apply multiple network connections, or may apply only scrutinizer based monitoring. Such scrutinizer  based monitoring need not be performed only on local connections , and in operation involves performing the lightweight check to screen connections, followed by the evaluator  exchange for watched connections .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 3","FIGS. 1"],"b":["3","4","163","152","110","140","300","152","152","110","190","110","301","152","150","172","170","302","172","176","178"]},"If the transaction  corresponds to an existing connection , then the scrutinizer  identifies, via a lightweight check, the watch status  of the database connection , such that the watch status  is indicative of a level of scrutiny to be applied to the connection, as shown at step . The lightweight check is performed by fetching a predetermined label (i.e. watch attribute ) corresponding to the connection  to minimize the processing burden overhead on the server . A check is performed, at step , to evaluate the watch status  of the connection. The watch status  may be \u201cY\u201d, indicating that the transaction  is to be analyzed by the evaluator, a \u201cN\u201d indicating a trusted connection  with no need for further analysis, or an \u201cR\u201d, indicating that database responses  may be ignored following an allowed request . Ignoring responses  is beneficial when the responses are large compared to the request. In a large database , a single request may generate multiple packets in a response transaction. If the request determines that the content of the response is benign, there is no reason to burden the evaluator  with analyzing each individual packet in the response transaction .","The scrutinizer  selectively transmits, based on the watch status  being indicative of a need to analyze the connection , the received transaction  to the evaluator . The evaluator is operable to apply the set of access rules , as with network transactions , for determining a verdict  specifying whether the transaction  is a suspect transaction indicative of undesirable access, as shown at step . The lightweight table  further includes a delay indicator , which causes the scrutinizer  to delay the database transaction  until the responsive action is received from the evaluator , as shown at step . If the check at step  indicates a delay from the delay indicator  corresponding to the connection , the scrutinizer  restricts (i.e. blocks) the transaction  until the responsive action is received from the evaluator . While possibly imposing a small delay on DB response, this setting ensures that no sensitive data is obtained during the evaluator  analysis. If the delay indicator  is not set, the transaction  is allowed to proceed pending subsequent shutdown of the connection  if the verdict indicates so, as shown at step .","Upon completion by the evaluator , the scrutinizer  receives the verdict  indicative of a responsive action based on applying the set of access rules  to the transaction , as shown at step . A check is performed at step , and if the responsive action received from the evaluator  is indicative of a termination of the connection  resulting from the verdict  evaluating the transaction  as an undesirable communication, the scrutinizer  terminates and deletes the connection  from the lightweight table , as depicted at step . If the responsive action from the evaluator  is indicative of permitting the transaction  to proceed, the transaction  may be merely logged at the evaluator , as shown at step .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIGS. 5-8","FIG. 3","FIGS. 1","FIG. 4"],"b":["3","5","8","150","170","400","142","301","142","1","142","3","172","402","120","158","110","403","158","142","404","142","1","142","3","153","158","172","176","170","405"]},"The tap  watches the common access point (i.e. IPC mechanisms  set up for interception) for an attempt to connect to the database , as shown at step . The evaluator  receives a connection request  for connecting to the database, as shown at step , by receiving a communication  from the user access device  or other user portal  such as an application, and identifies the communication as a database connection request  as distinguished from a database request transaction  corresponding to an existing connection , depicted at steps  and .","The new connection request  generates an entry  in the lightweight table  corresponding to the connection request , as depicted at step . This includes storing an identity of the interprocess transport medium  from which the connection request emanated, as shown at step , and identifying an origin and a user from which the connection request  was received, such that the origin is indicative of a user access device , as shown at step .","The scrutinizer  determines, from the identified origin and the user, the watch status  corresponding to the connection  for storing in the watch status attribute  as depicted at step . Determining the watch status  further includes applying a set of watch rules , in which the watch rules  are indicative of an initial state of entries in the lightweight table . Subsequent responsive actions may modify the state of the lightweight table by modifying the connection attributes therein. Initially, such connection attributes include the watch status  based on at least the origin, the user, and the content of the connection request , the delay status , a redaction status , and a priority buffering , as shown at step . In the example arrangement, the watch rules  are derived from the full rule set , and used for initially classifying the watch status  for a particular connection . In the example shown, the scrutinizer  gathers parameters concerning the connection request, as shown at step , matches the gathered parameters to the set of watch rules , as depicted at step , and stores the watch status indicative of a need to evaluate transactions  transmitted on the connection , as disclosed at step . The lightweight table  also stores the delay indicator  attribute, in which the delay indicator  causes the scrutinizer to delay the database transaction  until the responsive action is received in the verdict , as depicted at step .","Once establishing a connection entry , the scrutinizer  monitors incoming traffic until receiving a transaction  attempting to access the database , such that the transaction  is received on a connection between the database  and an access portal , as shown at step . In the example arrangement, employing SQL and TCP\/IP, the received transaction  further includes a set of portions, such that each portion is contained in a packet, as depicted at step , thus receiving a series of packets that collectively define the transaction received on a watched connection . The received packets are aggregated as a single transaction, as depicted at step .","The scrutinizer  therefore receives a request transaction , which in a typical exchange implies that the request transaction  triggers a response transaction  by the database . Since the request  may not be identified as completed until the corresponding response  is received for the connection  from the database , the scrutinizer  permits each of the portions of the request transaction  to transmit to the database .","The scrutinizer  identifies, via a lightweight check, the watch status  of the database connection , such the at the watch status  is indicative of a level of scrutiny to be applied to the connection , as shown at step . The lightweight check is performed by fetching a predetermined label (i.e. watch status attribute) corresponding to the connection  from the lightweight table . The lightweight check avoids impeding database access by consuming less the 2% of CPU resources for performing fetching of the watch status  and the delay indicator , as depicted at step . Performance thresholds may be established such that the lightweight check consumes no more than a predetermined portion of CPU time, such as 3% or 4%, for example, however any suitable threshold may be established. The scrutinizer  selectively transmits, based on the watch status  being indicative of a need to analyze the connection , the received transaction  to the evaluator , such that the evaluator  applies a set of access rules  for determining a verdict  specifying whether the transaction  is a suspect transaction indicative of undesirable access, as disclosed at step .","The scrutinizer  identifies the response transaction  from the database  corresponding to the received transaction , since the response transaction  is received on the same watched connection , as disclosed at step . In particular configurations, the evaluator  may redact, from a database response  to the intercepted transaction, a portion of data according to a redaction format, such as for blanking parts of credit card numbers, as depicted at step . The scrutinizer  identifies a first portion (i.e. packet) of the corresponding response transaction, as shown at step , and informs the evaluator  that the request transaction  is complete and to begin evaluating the received request transaction , as depicted at step , thus instructing the evaluator  to commence analyzing the transaction by applying the set of rules  to the received transaction .","In the example arrangement shown, the evaluator  is disposed on the network path  to the database . Therefore, during operation, the evaluator  is operable to apply the set of access rules  to both the transactions from the network path , as depicted at step . As the received transaction  may comprise a plurality of received transactions , the evaluator  receives the received transactions  and transactions from the network path , as shown at step .","As the start (first packet) of the response transaction  is received by the scrutinizer , the evaluator  fetches the delay indicator  corresponding to the connection  to check if the response is to be delayed until the verdict is received, as shown at step . If so, then the scrutinizer  restricts the transaction  until the responsive action (verdict)  is received, as shown at step . The evaluator  may also identify, from the intercepted transaction , a portion of data for redaction, and applying an indication of the redaction and a redaction format corresponding to the portion of data. Alternate augmentation qualifiers and formats may be applied in alternate configurations. In either case, the scrutinizer receives the verdict indicative of a responsive action based on applying the set of access rules  to the transaction , as depicted at step . As indicted above, if the evaluator  determines an undesirable or inappropriate transaction , the responsive action received from the evaluator is indicative of a termination of the connection . The scrutinizer  then applies the responsive action to the transaction, such that the responsive action indicates whether to allow subsequent transactions  on the connection to proceed, as shown at step . Note that the responsive action may also modify the watch rules  or perform other actions than termination. For example, a verdict may indicate that a particular connection should be modified to change the delay attribute  to \u201cY\u201d to delay subsequent transactions  on that connection.","In alternate configurations, various augmentations and formats may be identified by the scrutinizer and apply to the corresponding response transaction. For example, the redaction specifier discussed above may take the following form: The intercept  will send the tap  a set of string 3-tupples as regular expressions. The first one means \u201cthis is the expression that needs to be asked\u201d, a second is \u201cthis is the mask\u201d and the third is a character. E.g. the first element can be [0-9] {16} is a credit card and the second [0-9] {12} meaning mask out the first 12 and the third may be a benign filler such as \u2018-\u2019 such that 1111222233334444 as is analyzed as ------------4444. A particular rule type informs the scrutinizer that the responsive action will replace the strings with the redaction\/filler in the response transaction.","Other scenarios and database environments may present access issues different from or in addition to the data level access for a trusted application as discussed above. An exemplary list follows, however there maybe other environments for which the disclosed approach is beneficial and this list is not meant to be exclusive.","Compliance with cross-border data access requirements\u2014Similar to the previous discussion of application and data segmentation, but since these requirements are very well-defined and always require guaranteed prevention they form a separate use case.","Separation of duties\u2014There are often requirements to require more than one person to collectively perform a highly-privileged activity. This is hard or impossible to implement when users have all privileges. Preventing based on multiple factors is used to implement such schemes (metaphorically\u2014similar to two people turning a key to launch a missile). This use case includes handling of patch installations, upgrades, backups, replication changes etc. This use case is also relevant when database links are involved and where data from one application is exposed through another, and the linked application cannot rely on the security rules built into the linking application.","Implementation of encryption schemes\u2014There are two types of implementations for encryption of data-at-rest. One is based on storage encryption where the data is encrypted on-disk. This provides protection from media theft. Access to data through the database is not affected. In this case prevention is used as an access control mechanism and the use case defaults generally to a DBA scenario, discussed above. The second scheme uses application-level encryption usually through database procedures that do the encryption (e.g. DBMS_CRYPTO in Oracle and the Crypto API in SQL Server). In this case the encryption keys are often stored in the database within tables. Prevention is then used to ensure that DBAs do not access the encryption keys. This is another special case similar to the DBA example presented above.","External policy definition for legacy applications with limited access control\u2014Applications (especially legacy application and database schemas that are part of a purchased application) often have very limited built-in schema access control. It is not possible to change these applications and yet access control is mandated by regulations. In order to maintain compliance and not have to replace applications, external prevention is used.","Data leak prevention, reporting and notification support\u2014Vulnerabilities in application and lax access control definitions increase the risk of leakage of sensitive data. This is different from the DBA scenario since the access is harder to predict (based on user) and because the access pattern involves not only credentials but also volume. For example, a vulnerable script or application can be changed to extract ALL records from the database. Prevention is based on extrusion of data and not on access. Prevention in this case is coupled with reporting to support notification\u2014e.g. rather than have all 2 million customer records extracted, terminate the connection as soon as the breach is identified (e.g. after access to 250 records), report on which 250 records were extracted and supply the records to allow notifying only these 250 customers.","Rogue application prevention\u2014Application data in the database should only be accessed and changed through the application. However, access control is almost always exclusively based on user name. Compliance requirements often specify that changes to data (and sometimes also access to data) should only be made through the application where application-level security is enforced. Any connection from another application, script or tool should be prevented. An example is the use of Excel to connect to the database, extract data and even change data using VBA.","Enforcement of change request process\u2014Most customers manage DBA tasks in a change request\/ticketing system. When a DBA needs to perform their work they should have a valid ticket number that references at least the instance. Most customers rely on auditing and reconciliation of activities produced by the auditing system with the ticket description. A more advanced approach is to require ticket information to be entered as part of the session and preventing certain activities if the ticket number is invalid or is not related to the instance. This can be used for all DBA work or, more likely, for security-affecting work such as changes to authentication attributes, changes to encryption options, changes to backup options, etc.","Those skilled in the art should readily appreciate that the programs and methods for providing an intrusion blocking security overlay as defined herein are deliverable to a processing device in many forms, including but not limited to a) information permanently stored on non-writeable storage media such as ROM devices, b) information alterably stored on writeable storage media such as floppy disks, magnetic tapes, CDs, RAM devices, and other magnetic and optical media, or c) information conveyed to a computer through communication media, for example as in an electronic network such as the Internet or telephone modem lines. Such delivery may be in the form of a computer program product having a computer readable storage medium operable to store computer program logic embodied in computer program code encoded thereon, for example. The operations and methods may be implemented in a software executable object or as a set of instructions embedded in an addressable memory element. Alternatively, the operations and methods disclosed herein may be embodied in whole or in part using hardware components, such as Application Specific Integrated Circuits (ASICs), Field Programmable Gate Arrays (FPGAs), state machines, controllers or other hardware components or devices, or a combination of hardware, software, and firmware components.","While the system and method for intrusion blocking security overlay has been particularly shown and described with references to embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following description of particular embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating the principles of the invention.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 5-8","FIG. 3"]}]},"DETDESC":[{},{}]}
