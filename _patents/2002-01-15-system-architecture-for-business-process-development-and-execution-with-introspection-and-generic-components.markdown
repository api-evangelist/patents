---
title: System architecture for business process development and execution with introspection and generic components
abstract: A system for designing a business process includes an introspection module that transforms implementation-specific components into generic components. The implementation-specific components are associated with a number of implementations. A component manager defines the generic components. A process designer selects at least one of the generic components from the component manager, and generates a business process that uses the at least one of the generic components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07562339&OS=07562339&RS=07562339
owner: BEA Systems, Inc.
number: 07562339
owner_city: San Jose
owner_country: US
publication_date: 20020115
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["This invention relates generally to the field of business process automation and more specifically to a system architecture for business process development and execution.","Organizations typically automate their business processes to manage their operations. A business process includes a series of activities that may be undertaken to perform the operations of an organization. For example, a business process may describe activities for processing a sales order, such as the steps of receiving a sales order, checking payment history, checking inventory, and so on. An organization may automate a business process by having a computer perform some activities such as receiving a sales order.","Automating business processes, however, has posed challenges. Designing and executing automated business processes may involve the use of multiple programming languages to integrate with backend applications. It may also involve the use of diverse client side devices and related applications to interface with people involved in a business process. The diversity of languages, devices, applications, people skills, geographies, and cultures may pose a challenge to automating a homogeneous business process that delivers a quality product and\/or service to a diverse set of customers.","In accordance with the present invention, business process development and execution is provided that substantially eliminate or reduce the disadvantages and problems associated with previously developed techniques.","According to one embodiment of the present invention, a system for designing a business process includes an introspection module that transforms implementation-specific components into generic components. The implementation-specific components are associated with a number of implementations. A component manager defines the generic components. A process designer selects at least one of the generic components from the component manager, and generates a business process that uses the at least one of the generic components.","Certain embodiments of the present invention may provide technical advantages. A technical advantage of one embodiment may be that business processes may be readily designed using components from multiple programming languages and enabling technologies. Another technical advantage of one embodiment may be that the embodiment provides a debugger that detects errors in a business process during the design stage. Another technical advantage of one embodiment may be that the embodiment provides a data analyzer that analyzes statistical data describing the execution of the business processes for organizational analysis.","Other technical advantages are readily apparent to one skilled in the art from the following figures, descriptions, and claims.","Embodiments of the present invention and its advantages are best understood by referring to  of the drawings, like numerals being used for like and corresponding parts of the various drawings.","System Architecture",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 1","FIG. 2"],"b":["10","10"]},"System  provides a business-centric approach towards business integration, where a designer may determine the activities needed to be performed in order to build and deliver a certain product or service. A business process that invokes services from an application to perform the tasks of activities may then be designed. System  may typically directly access an application programming interface (API) of an application using only services that are needed based on business process needs of a particular process activity. In contrast, other techniques create an adapter exposing a whole API or at least unnecessary portions of an API in case that functionality is needed. Other techniques usually expose all the functionality of an application since otherwise the adapter will need multiple modifications causing maintenance problems. This exposes security problems or holes. Referring back to system , the applications may be on the front end interacting with a human or on the back end interacting with a backend system. Thus, system  provides an active way of invoking an application's functionality for the specific purpose of implementing business processes.","According to one embodiment, system  provides for the design of business process that may be distributed over a network such as the Internet and that may interact with different applications. The business processes do not impose restrictions since the same model may be applied over a centralized or distributed approach. Accordingly, an organization may design and implement a federation of highly distributed business processes using system .","According to one embodiment, the business-centric approach of system  may be seen as an alternative to an application-centric approach towards integration. In typical application-centric integration, an event bus is used to execute methods of an application. An adapter or a connector to an event bus listens for messages intended for the application, executes a method of the application in response to receiving a message, and places a return value, if any, from the method on the event bus.","Application-centric integration, however, has flaws. Application-centric integration requires that programmers determine the interactions that an application will have, which involves identifying the combinations of events that might affect the application and the corresponding responses of the application based on other application events. This may also involve coordinating with previously exposed functionality of the application or creating new functionality for the application. The application is then coupled to an event bus in such a way that the determined interactions may take place. It may be even worse if each vendor uses its own proprietary bus.","In some situations, the required applications may not be connected to the event bus, which may result in methods that cannot be executed. Moreover, even if the applications are connected to the event bus, the connections may not be able to ensure the functionality of the applications. For example, an application may be listening for events from other applications that may never reach the application. Conversely, the application may post events that may not reach another application. Consequently, although applications may be listening for events and placing events on the event bus, integration may not occur.","Furthermore, an application may be designed to expose a vast amount of capabilities, but uses only a few of those capabilities when communicating with another application, resulting in a waste of resources. Additionally, the event bus may comprise proprietary material, and thus may have restrictions on its use. Consequently, application-centric integration poses problems, which may be inherently based on the designed architecture of a bus.","Additionally, known techniques address services from only people, applications, or organizations, but not all three, from a messaging metaphor. For example, workflow technologies address services from people, enterprise application integration technologies address services from applications, and business-to-business integration technologies address services from organizations, which may be mainly external organizations. None of these techniques were built from the ground up to simultaneously address the three services from a programmatically invokable service metaphor. System  provides for the ability to integrate services from people, applications, and organizations, whether they are internal or external, in a single seamless process.","According to the example of , an organization may comprise a data set of users that may represent, for example, people who may interact with system . An organization may include users that represent people who are responsible for performing tasks of activities of a business process. For example, a user may be responsible for receiving a sales order and verifying its completeness, which may be logically represented as tasks within activities of a business process.","The users may be organized into user sets (roles), where the users of a user set represent people who are responsible for the execution of specific activities. A user may be a member of any number of user sets. User sets may be associated with, for example, organizational roles defined within an organization, such as a salesperson role.","An organization may include organizational units, which may be associated with divisions within the organization such as departments or office locations. For example, an organizational unit may be associated with a particular department such as a sales department or a particular office location such as a Dallas office location.","Organizational units are used to group users into logical groups and may be used to specify the users that may access published and deployed business processes based on the organizational units where the business processes are deployed. For example, an organization develops a business process for processing a sales order that deals with operations in a sales department and no other department. The business process may be published and deployed to an organizational unit associated with the sales department such that only the users of the organizational unit, and no other users of the organization, may access the business process.","Referring to , system  includes a process designer , an organizational manager , and a component manager  coupled to a organizational repository , which is in turn coupled to a communication network . A portal  may interact with system  through communication network . System  may also include one or more process engines  coupled to communication network  and transactional databases , which are in turn coupled to a data warehouse . An analytical data browser  is coupled to data warehouse , and a computer  may be coupled to analytical data browser .","Process designer  allows a designer to design business processes, which are stored in organizational repository  when the business process is published. Before that, the business process may be stored in a local file system of the designer designing the business process. Process designer  may also be used to publish business processes to organizational repository  as well as to deploy business processes to process engines . Process designer  may use a debugger  to locate errors when designing business rules of business processes. Process designer  and debugger  are described in more detail with reference to .","Component manager  defines, describes, and organizes components. A component may be seen as a service to access a backend application. A component may comprise a modular software routine that has been compiled, and may be used with other components or programs when creating business rules. Component manager  stores components in a catalog of organizational repository  and supplies components definitions to process designer  and process engines .","Component manager  uses an introspection module framework  to automatically generate a catalog through introspection of exposed application programming interfaces (API) of applications . Introspection module  may access components of applications  written in any of a number of programming languages or technologies. Component manager  and introspection module  access an application programming interface of application , discover the structure of the components of application , and automatically create entries in the catalog for selected components. Once the component is selected, methods and attributes may be selected to be exposed to the persons coding the business rules of business process . An entry of the catalog may include metadata that describes the component. By performing these steps, component manager creates generic component wrappers that may be readily executed by scripts  of business process . Component manager  and introspection module  are described in more detail with reference to .","Process designer , component manager , and introspection module  allow for the design of a business process that controls the invocation of services from underlying applications  from tasks  defined in process task in process activities . The business rules of business process  includes instructions on what to invoke in applications , and can directly access a native application programming interface without exposing applications . Applications  are accessed based on component definition introspection performed with component manager . Accordingly, system  provides an active way to invoke application  for the specific purpose of executing a task .","According to one embodiment, process designer  and component manager  allow for business processes to be designed on a computer by manipulating graphical icons on a computer screen. These manipulations are stored in a file system . An example of a computer screen that may be used to design a business process is described with reference to .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 2","b":["74","78","78","80","82","78","80"]},"Each activity  comprises a series of tasks  that are executed in order to complete activity . \u201cEach\u201d as used in this document refers to each member of a set or each member of a subset of the set. For example, an activity  that notifies a client of an incomplete sales order may include the task of \u201csending an email message to the client.\u201d A task  may be executed according to a corresponding script , which may be written in any computer language, for example, COMPONENT INTEGRATION LANGUAGE of FUEGOTECH BPM by FUEGO, INC., also known as FUEGOTECH, INC., or other suitable meta language. Tasks  may execute components catalogued by component manager  when its execution is required after business process  has been published and deployed in process engines  or when debugging from business designer  or component manager .","To design business process , activities  are placed in a designer window . Activities  may have specific features or semantics, which may be designated by a particular color and\/or shape. For example, activity may be an activity that is used to begin a business process, and may be designated by a triangular shape pointing in the right-hand direction. Activity may be an activity that is used to end a business process, and may be designated by a triangular shape pointing in the left-hand direction.","An activity  of a business process  may connect to a subprocess that operates as a business process . The subprocess includes child activities , and the business process  includes parent activities . Business subprocess  may in turn connect to another business process .","Transitions  are used to indicate a next activity that is to be initiated after executing a previous activity. For example, transition indicates that activity is to be initiated after the execution of activity ","Transitions  may indicate multiple next activities that are to be initiated after the execution of a previous activity. For example, transitions and indicate that activities and , respectively, are to be initiated after the execution of activity . Depending upon how business process  is defined, either one or both activities and may be initiated after activity . For example, business process  may be defined such that depending upon a decision made at activity , either activity or activity is initiated after the execution of activity . Additionally, transitions  may direct multiple activities to a single next activity. For example, transitions and direct activities and , respectively, to activity ","Business process  includes abstract roles  that are used at design time to represent, in the abstract, user sets that represent the people of an organization who are responsible for performing an activity . Abstract role  may be matched to an organizational role when business process  is published. An abstract role represents in the abstract a user set responsible for performing the activity, and the organizational role may take on values that correspond to actual user sets of an organization. For example, an abstract role represents salespeople in the abstract, and the organizational role describes actual salespeople of an organization. At design time, abstract roles are used instead of organizational roles, which allows for a single business process to be re-used for multiple organizations.","An organizational role may be parametric, that is, the organizational role may be assigned a value that corresponds to a user set that is a subset of a larger user set. For example, one user set may represent salespeople from one state, and another user set may represent salespeople from another state. Thus, an organizational role may be used to create groups of users that can be instantiated with, for example, salespeople from different states. Activities placed within an abstract parametric role are the same across the different subgroups that can be defined for the abstract parametric role.","Abstract roles  are specified for activities  by placing activities  in the appropriate abstract role column. For example, abstract role is specified for activity , and abstract role is specified for activities and . To summarize, business process  may include activities  coupled by transitions  and associated with abstract roles.","As business process  is being created, documentation describing business process  may be generated by the designer or business analyst. The documentation is based on documentation added to the business process. The documentation that can be automatically generated based on the documentation added to the business process may comprise, for example, a hypertext markup language (HTML) document that includes, for example, a graphical representation of business process , documentation created by the designer, information about activities  such as associated abstract roles, and scripts  written to perform tasks . The documentation may also include a uniform resource identifier that represents a sub-process called by business process .","System  allows a designer to pre-define a business process  that manages activities  within business process . System  provides for the management of tasks  of activities , management of roles involved in performing human tasks , and management of components involved in performing automated tasks . System  provides designer screen  that may be used to design business process  in a graphical format. Designer screen  allows a designer to depict business processes , activities , and transitions  between activities .","Referring back to , organizational manager  defines the settings for organization. Organizational settings may describe the user sets, organizational roles and associated values, and organizational units of an organization, as well as holiday and calendar rules. Organizational repository  stores data used by system , and is described in more detail with reference to .","Communication network  may comprise, for example, a public switched telephone network, a public\/private data network, the Internet, a wired\/wireless link, a local, regional, or global communication network, or any suitable combination of the preceding. According to one embodiment, system  may be distributed across the Internet. Business processes  across the Internet may know of each other's existence, make calls to each other, and message each other without comprehending the messaging implementation of system .","Portal  provides for interaction with system . If an activity  requires user participation, process engines  push work to the user through portal . Portal  enforces the roles and permissions as defined in organizational repository  and displays activities relevant to the user. A user may use computer  to interact with portal  deployed in a website. Portal  may connect to organizational repository  to enforce portal  security based on roles. The connectivity may be enforced by communication network . In turn, portal  may connect to a federation of process engines  to execute tasks requested by a user interfacing through computer  based on business process  and activities  that are available for execution based on roles assigned and defined for the user in organizational repository .","Computer  may be used to access system  through portal . As used in this document, the term \u201ccomputer\u201d refers to any suitable device operable to accept input, process the input according to predefined rules, and produce output, for example, a personal computer, workstation, network computer, wireless data port, wireless telephone, personal digital assistant, one or more processors within these or other devices, or any other suitable processing device.","Process engine  executes and manages instances of a deployed business process . An example of an instance of a business process  may be processing a specific sales order using a business process for processing sales orders. Process engine  retrieves business process  from organizational repository , executes an instance of business process , and stores information about the instance (state) in transactional database . Each process engine  may be associated with one or more transactional databases . Each process engine  may be associated with one or more organizations, such that each process engine  executes business processes  published with the organizational information of an associated organization.","According to one embodiment, process engines  may also operate as a process container and provide business processes  with services for communicating with other business processes  across the Internet. For example, process engines  may listen for messages across the Internet, start business process  in response to receiving a message, manage the interaction with users across the Internet, and manage the persistency of instance variables or process instance variables across extended business process executions.","Process engines  may also provide a remote method integration (RMI) service that allows process engines  to communicate with each other, even through firewalls. Additionally, process engines  may ensure unity, that is, ensure that unnecessary repeated messages are not delivered. Process engines  provide these services so a designer does not need to worry about the implementation of these services. This messaging may take place when business process  is deployed in process engines .","Process engines  execute a worldwide web of business processes  in a manner analogous to web engines or worldwide web services. Process engines  include the definition of business process  and insure that the definition is executed at each point of business process .","An execution console  defines and manages process engines . For example, execution console  defines port settings for process engines  and database settings for transactional databases  associated with process engines . Execution console  may also be used to publish and deploy business processes .","Transactional databases  include persistence of process instance variables that record transactional data that is typically maintained for an instance of a business process. For example, a value describing the requested quantity of goods for a specific sales order is typically maintained for the instance that processes the specific sales order. The value is generally not needed for process instances that process other sales orders. Persistent process variables include process instance variables and argument variables. Process instance variables record values that may be passed from one activity of a business process to another activity of the same business process. Argument variables record values that may be passed from one business process to another business process.","Data warehouse  stores data received from transactional databases , which includes transactional data that is typically maintained for an instance of a business process. This is typically known as instance audit trail or instance event data. Data warehouse  may be updated periodically to reflect the latest changes. Data warehouse  may comprise an on-line analytical processing (OLAP) data warehouse. Analytical data browser  is used to analyze the transactional information stored in data warehouse . The transactional information may be used to detect, for example, an activity , user, or application  that is not performing as intended.","Analytical data warehouse  may be used to consolidate, drill-down, slice, dice, and pivot organization-wide data. Results may be reported using database formats or graphical charts. Users may directly manipulate data in order to, for example, identify trends, correlate information, or map-out a series of events. Analytical data browser  may provide value by placing information, regardless of where it is located, in a frame of reference to facilitate better informed business decisions. Analytical data browser  is described in more detail with reference to . Computer  may be used to interact with analytical data browser .","System  may provide advantages in developing and executing business processes . Process designer  may use debugger  to locate problems when designing a business process  and defining its business rules. Process designer  and debugger  are described in more detail with reference to . Component manager  may use introspection module  to access backend applications based on any of a number of implementations. Component manager  and introspection module  are described in more detail with reference to . Moreover, analytical data browser  may be used to analyze transactional information. Analytical data browser  is described in more detail with reference to . Consequently, system  may provide a foundation upon which an organization may design and implement a federation of highly distributed business processes .",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 3","FIG. 1"],"b":["26","26","26","26","52","54","66","52","64"]},"Organizational database  includes organizational information about an organization. Organizational roles  include information about organizational roles and values. Organizational roles are matched with abstract roles at publish time in order to specify users representing people who are responsible for performing the activities of business processes . Matchings  record the association between abstract roles and corresponding organizational roles.","Other organizational information may include, for example, organizational participants , organizational units  and calendar rules . Calendar rules may describe holiday rules , working hours, and time zones, which may be used to coordinate the execution of business processes  distributed over a large geographical region. The organizational information may be used by analytical data browser  to analyze transactional data.","Catalog  includes components that are accessible by other modules of system  such as process designer . The components may come from applications  that are not accessible by the other modules. Introspection module  transforms non-accessible components from applications  to components accessible by the other modules. Catalog  may be maintained by component manager  when synchronizing with organizational repository .",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 4","b":["78","402","416","78","418","428","78","402","78","78","78","80","80"]},"Catalog  of components is created at step . The components of catalog  may be created to fulfill the services of activities . Component manager  generates catalog  using introspection module  to access applications . Applications  may be implemented in a variety of programming languages or technologies in order to implement business rules specified for business process  at step . Business rules may be specified by associating a script  with a task  of each activity  of business process .","The components may be debugged at step . If the components are to be debugged, the method proceeds to step  to debug the components. If the components are not to be debugged, the method proceeds directly to step . At step , the business rules may be debugged. If the business rules are to be debugged, the method proceeds to step  to debug the business rules. If the business rules are not to be debugged, the method proceeds directly to step .","At step , business process  is published and deployed into process engine . A publication procedure performs a component binding with an application  that the procedure has to invoke. The component binding identifies a component to invoke based on the components of catalog . The procedure that generates the code for business process  identifies the programming language or technology in which the identified component is implemented. Depending upon the implementation, the code generated for the component may vary. For example, the code to invoke a JAVA component will not be the same as the code to invoke an automation component or an SQL component. When the generated code is invoked by process engine , process engine  knows what to execute and how to locate and execute the bound component.","After publication and deployment, the business rules of business process  are transformed into compiled code, for example, compiled JAVA code, that can be executed by process engines . The deployed business process  is ready to process instances created to achieve the execution of business process .","At step , business process  is initiated. A business process may be instantiated by a user or by an automated step. Tasks  of business process activities  are executed at step  by executing the components of tasks  at step . If the last component of task  has not been reached at step , the method returns to step  to continue executing the components of task .","If the last component of task  has been reached at step , the method proceeds to step  to determine whether the last activity  of business process  has been reached. If the last activity  has not been reached, the method returns to step  to execute a task  of a next activity . The process instance may be routed by process engine to the next activity . Process engines  may have multiple process instances flowing through activities  of business process . If the last activity of business process  has been reached, the method proceeds to step  to end business process . After ending business process , the method terminates.","The method allows for an business centric integration, by providing the capabilities to request a component from any of a number of applications . Catalog  includes components that are executable by the modules of system . Business processes  may be readily designed using the executable components of catalog . Additionally, components of catalog  may be selected such that catalog  includes components that are likely to be used in business processes , which may avoid overloading catalog  with components.","Process Designer and Component Manager Debugger",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 5","FIG. 1"],"b":["23","20","23","88","78"]},"Debugger  may include a syntax checker , a tree generator , and a component retriever . Syntax checker  checks the syntax of scripts . Syntax checker  may apply syntax rules to scripts  in order to determine syntactical errors. Syntax checker  may check whether business rules must conform to the grammar and the syntax of invoked components. Tree generator  generates a tree that represents a script . Debugger  uses the tree to check for errors. An example of a tree is described in more detail with respect to .","Component retriever  is used to invoke a component bound to an application . When debugger  reaches a node of a generated tree that requires a component invocation, debugger  knows what and how to invoke based on information catalogued in catalog . Debugger  may use introspection module  to execute or invoke a component. Using debugger , a developer of components or business rules may be able to identify problems before business process is published, deployed, or executed at run time by process engines .",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 6","b":["48","88","88"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["If order amount >=500, then\n        \n        ","else Action B.\n\nAction A may comprise, for example, \u201cPlace order in SAP\u201d, and Action B may comprise, for example, \u201cPlace order in Microsoft Excel.\u201d\n"]}}}},"Tree  represents the sequence of actions performed by script . In the illustrated example, the first action is to check the order amount. Branches \u201cgreater than or equal to 500\u201d and \u201cless than 500\u201d represent the two conditions of script , and point to the action performed as a result of the condition. For example, if the order amount of greater than or equal to 500, Action A is performed, and if the order amount is less than 500, Action B is performed.","Trees  representing other scripts  may differ from the illustrated example tree . Additionally, other methods of representing scripts  may be used.",{"@attributes":{"id":"p-0091","num":"0093"},"figref":"FIG. 7","b":["88","130","23","88","48","88","131","44","88","132","44","27","66"]},"Execution of script  is initiated at step . If there is a component to be executed at step , the method proceeds to step . At step , component retriever  retrieves the component and binds the component to application  to be invoked. Debugger  may use introspection module  to retrieve the component. Introspection module  executes the component for debugger  at step . Introspection module  may also determine an output value, if any, of an executed component. The method proceeds to step . An error may be handled by business rules or by default error rules of debugger  at step . If there is no error detected at step , the method proceeds directly to step .","At step , debugger  determines whether an expression of script  is to be evaluated. An example screen for requesting evaluation is described with reference to . If an expression is to be evaluated, the method proceeds to step . At step , debugger  reports the value of the expression, and the method proceeds to step . If there is no expression to be evaluated at step , the method proceeds directly to step .","At step , debugger  determines whether a requested breakpoint has been reached for the next line to be executed. A user may request that debugger  suspends execution at specified breakpoints of script . If a breakpoint has been requested, the method proceeds to step . At step , debugger  suspends execution of script  until a message to continue or resume execution is received, and the method proceeds to step . If no breakpoint has been requested at step , the method proceeds directly to step .","Debugger  determines whether the end of the script has been reached at step . If the end of the script has not been reached, the method returns to step  to determine whether a component needs to be executed or an expression needs to be evaluated. If the end of script  has been reached, the method proceeds to step , where debugger  reports the end of script . After reporting the end of the script, the method terminates.",{"@attributes":{"id":"p-0096","num":"0098"},"figref":"FIG. 8","b":["102","88","80","102","104","106","108","110","110"]},{"@attributes":{"id":"p-0097","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Description","Function"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Save 110a","Save 110a writes a copy of the script to"]},{"entry":[{},{},"a memory. This action saves the most"]},{"entry":[{},{},"current changes made to the script."]},{"entry":[{},"Save All 110b","Save All 110b writes a copy of the most"]},{"entry":[{},{},"current changes in the script and in the"]},{"entry":[{},{},"entire business process to a memory."]},{"entry":[{},"Check Syntax","Check Syntax 110c analyzes the script"]},{"entry":[{},"110c","for syntactical errors. It checks for"]},{"entry":[{},{},"compliance with CIL grammar."]},{"entry":[{},"Undo & Redo","Undo 110d cancels the last change made"]},{"entry":[{},"110d and e","to the script. Redo 110e cancels the"]},{"entry":[{},{},"last Undo action."]},{"entry":[{},"Cut 110f","Cut 110f stores highlighted information"]},{"entry":[{},{},"in memory and copies the information to"]},{"entry":[{},{},"a clipboard and removes the information"]},{"entry":[{},{},"from editing panel 112."]},{"entry":[{},"Copy 110g","Copy 110g captures highlighted"]},{"entry":[{},{},"information to a clipboard."]},{"entry":[{},"Paste 110h","Paste 110h restores information stored"]},{"entry":[{},{},"on a clipboard (from a Cut or Copy) into"]},{"entry":[{},{},"screen 112."]},{"entry":[{},"Go to Line","Go to Line 110i moves the cursor to the"]},{"entry":[{},"110i","line number entered in the dialog box."]},{"entry":[{},"Find 110j","Find 110j locates the requested"]},{"entry":[{},{},"information in a script. (Looking for"]},{"entry":[{},{},"patterns.)"]},{"entry":[{},"Find & Replace","Find and Replace 110k locates the"]},{"entry":[{},"110k","requested information in the script and"]},{"entry":[{},{},"replaces it with designated information."]},{"entry":[{},"Run 110","Run 110l executes the script in debug"]},{"entry":[{},"(Debugger)","mode, which displays the output of a"]},{"entry":[{},"110l","script before publication and"]},{"entry":[{},{},"deployment."]},{"entry":[{},"Step","Step 110m proceeds through each script"]},{"entry":[{},"(Debugger)","statement in debug mode."]},{"entry":[{},"110m"]},{"entry":[{},"Ignore Step","Ignore Step 110n ignores a next step as"]},{"entry":[{},"(Debugger)","the debugger proceeds through the script"]},{"entry":[{},"110n","statements."]},{"entry":[{},"Suspend","Suspend 110o pauses a script that is"]},{"entry":[{},"(Debugger)","running in debug mode."]},{"entry":[{},"110o"]},{"entry":[{},"Stop","Stop 110p ends a script that is running"]},{"entry":[{},"(Debugger)","in debug mode."]},{"entry":[{},"110p"]},{"entry":[{},"Back","Back 110q returns to a previous step in"]},{"entry":[{},"(Debugger)","a script during debug mode. Back 110q"]},{"entry":[{},"110q","recovers the state before executing the"]},{"entry":[{},{},"last step."]},{"entry":[{},"Forward","Forward 110r advances to the next step"]},{"entry":[{},"(Debugger)","in the script after the Back option in"]},{"entry":[{},"110r","debug mode has been selected."]},{"entry":[{},"Exit","Exit 110s closes the script debug"]},{"entry":[{},"(Debugger)","session."]},{"entry":[{},"110s"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"An editing panel  displays scripts . A catalog window  displays modules, components, methods, properties, and attributes available in catalog . These components are the ones introspected before as in  of ",{"@attributes":{"id":"p-0099","num":"0101"},"figref":"FIG. 9","b":["102","118","118","120","122","118","88","120","120","122"]},"A breakpoint panel  allows a user to suspend the execution of script  when an event occurs. Breakpoints may be set for a specified statement of a script . The breakpoints are listed in the breakpoint panel  as the debugger runs through script . Breakpoints may be set for a specified statement of a script . Stack trace panel  displays the stack trace of a script  currently being executed in order to detect the current state of execution.","Introspection Module",{"@attributes":{"id":"p-0101","num":"0103"},"figref":["FIG. 10","FIG. 12"],"b":["25","24","25","66","26","20","23","24","66","66"]},"Generic methods and attributes may also be bound to implementation-specific methods and attributes. TABLE 2 illustrates examples of generic components, methods, and attributes that may be bound to implementation-specific components, methods, and attributes.",{"@attributes":{"id":"p-0103","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE 2"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"Implementation-specific"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Generic","JAVA","SQL","AUTOMATION"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"Component","Class","SQL Table","Component"]},{"entry":[{},"Method","Method","None","Method"]},{"entry":[{},"Attribute","Attribute","Field","Attribute"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Introspection module  translates implementation-specific components into generic components that may be used by other modules. A component may be translated by binding a generic component identifier, for example, component , with an implementation-specific component identifier, for example, JAVA class . These bindings may be stored in a binding table . Component manager  may synchronize binding table  with organizational repository . Binding table  may be stored locally in the file system of the developer.","Introspection module  may include a generic introspection framework  and one or more implementation modules . Generic introspection framework  identifies the implementation associated with a component requested by a module, and then selects the appropriate implementation module  to retrieve the component. According to one embodiment, there may be logically one different implementation by technology or programming language. When defining a new implementation, the designer selects from a list of available implementation modules.","Implementation modules  include procedures that are used to access application programming interfaces (API) associated with any of one or more implementations. Implementation modules  may also map implementation-specific components to generic components, and send the mapping to generic introspection framework . In the illustrated example, implementation modules  include a JAVA implementation module , an SQL implementation module , and an AUTOMATION implementation module . Implementation modules  associated with any suitable implementation, however, may be used. For example, implementation modules  may be used to access implementation-specific components associated with, for example, ENTERPRISE JAVABEANS (EJB), CORBA, REMOTE METHOD INVOCATION (RMI), XML Schemas, Web Services, OR JAVA NAMING AND DIRECTORY INTERFACE (JNDI).","In the illustrated example, JAVA implementation module uses a reflection module  to retrieve components from a JAVA API . Reflection module  is a feature of JAVA that allows an executing JAVA application to examine, or introspect, upon itself, and manipulate internal properties of the application or JAVA class. For example, a JAVA class may retrieve the names of the members of the JAVA class. Reflection module  may be used to determine the structure of JAVA components in JAVA API . JAVA API  may include an interface that provides access to a back-end application  that is based on a JAVA programming language. JAVA API  may be provided by the vendor of the back-end application .","In the illustrated example, SQL implementation module is used to access a database . In SQL implementation module , an API such as JAVA DATABASE CONNECTIVITY (JDBC) that is implemented by each database vendor may be used. JDBC is a framework proposed by SUN MICROSYSTEMS INC. to access information in a database. This may provide an easy way to access a database from JAVA. (FUEGO'S native platform). By having an implementation of a JDBC driver to access a database vendor, tables and stored procedures may be introspected and exposed in the generic component view that abstracts the user from the underlying technical details.","In the illustrated example, AUTOMATION implementation module may use a COM bridge  to access a COM runtime API  that uses COM AUTOMATION introspection . In the case of AUTOMATION, COM BRIDGE may be used to reach the COM AUTOMATION component that may be running in a remote machine. By deploying COM BRIDGE in the remote machine, the COM component may be introspected and executed. To introspect a COM component, the COM BRIDGE may use COM runtime libraries that allow for discovery of the COM AUTOMATION component structure. This structure, which may describe methods, attributes, etc., is sent back to the AUTOMATION implementation module , which in turn returns the generic component view to generic introspection framework ISO. In turn, COM BRIDGE executes COM components at runtime based on the information cataloged after component introspection. AUTOMATION discovery  may be used to retrieve one or more COM components .",{"@attributes":{"id":"p-0110","num":"0112"},"figref":"FIG. 11"},"The method begins at step , where component manager  requests the introspection of an implementation-specific API composed of implementation-specific (I-S) components. The components may be introspected by specifying an implementation identifier corresponding to the implementation-specific components. An implementation identifier may include, for example, a JAVA package identifier to request JAVA implementation-specific components.  is for module definition.","Introspection module  determines the implementation of the requested implementation-specific components and couples the appropriate implementation module  at step . In the illustrated example, JAVA implementation module is the appropriate implementation module . Implementation module  accesses the corresponding implementation to introspect a target API.","Implementation module  looks for the implementation-specific components at step  using its own introspection mechanism (that is, reflection in JAVA, according to one example). In the illustrated example, reflection module  identifies the JAVA implementation-specific components of a JAVA API . The requested implementation-specific components are retrieved at step . In the illustrated example, JAVA classes of the requested JAVA package are retrieved. Implementation-specific components are selected at step . The components may be selected by a user. An example screen for selecting implementation-specific components are described with reference to .","The selected implementation-specific components are saved as generic components at step . The selected implementation-specific components may be saved as generic components by creating an entry in binding table  that associates the selected implementation-specific components with generic components. By saving implementation-specific components as generic components, modules such as process designer  may readily access the generic components without performing implementation-specific procedures.","At step , generic methods and\/or attributes may be generated. If generic methods and\/or attributes are to be generated, the method proceeds to step . At step , the appropriate implementation API looks for implementation-specific methods and\/or attributes associated with the requested implementation-specific component. In the illustrated example, reflection module  looks for the implementation-specific methods and\/or attributes associated with the requested JAVA class in JAVA API .","The implementation API retrieves the implementation-specific methods and\/or attributes at step . In the illustrated example, JAVA methods and\/or attributes are retrieved. Implementation-specific methods and\/or attributes are selected at step . The methods may be selected by a user. An example screen for selecting methods and\/or attributes is described with reference to . The selected methods and\/or attributes are saved as generic methods and\/or attributes at step . The selected methods and\/or attributes may be saved as generic methods and\/or attributes by creating an entry in binding table  that associates the selected methods with the corresponding generic methods and the same for the attributes. The method then proceeds to step .","If generic methods are not to be generated at step , the method proceeds directly to step . At step , the generic components and methods and\/or attributes are reported. After reporting the generic components, methods and\/or attributes, the method terminates.",{"@attributes":{"id":"p-0118","num":"0120"},"figref":"FIG. 12","b":["220","66","24","66","222","224","226","228","230","232","222","226","224","226","226","228","230","232","228","230","226","222","222"]},{"@attributes":{"id":"p-0119","num":"0121"},"figref":"FIG. 13","b":["240","24","222","242","246","222"]},{"@attributes":{"id":"p-0120","num":"0122"},"figref":"FIG. 14","b":["250","226","66","252","226","254","226","66","256","258","226","254","260","262","256"]},{"@attributes":{"id":"p-0121","num":"0123"},"figref":"FIG. 15","b":["270","66","270","272","274","276","278","280","282","228","226","284","228","66","286"]},"According to one embodiment, identifiers that may be used to locate and introspect components are listed in TABLE 3:",{"@attributes":{"id":"p-0123","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Technology","Technology Identifier"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AUTOMATION","AUTOMATION GUID"]},{"entry":["SQL","Database vendor connection properties"]},{"entry":["EJB","Application server vendor content properties"]},{"entry":["JNDI","Directory server connection properties"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0124","num":"0126"},"figref":"FIG. 16","b":["320","52","320","32","78","32","34"]},"An updater  retrieves data from transactional databases  and stores the data in data warehouse . Data may be updated in any suitable manner. For example, a process engine  may instruct updater  to update data warehouse . If multiple process engines  are running, the process engines  may be synchronized to update data warehouse . For example, data warehouse  may be locked while a process engine  is updating data warehouse . A process engine  may attempt to perform an update by attempting to lock data warehouse . If data warehouse  is already locked, process engine  cannot obtain a lock to update data. If data warehouse  is not locked, process engine  acquires a lock and updates data warehouse . Data warehouse  may consolidate information from multiple process engines  of the enterprise in order to provide information to the management of an organization.","A recovery process may be performed before data is updated in order to coordinate data received from multiple process engines  and avoid inconsistencies due to problems occurring when data is transferred from transactional database  to data warehouse . The recovery process checks whether an update execution was not properly completed. If the recovery process detects a failure, then the process may attempt to execute the update again. The update execution may be considered as an impotent operation if the update execution did not finish properly.","Data may be updated at any suitable time. For example, data may be updated when instructed by process engine  or by execution console . Alternatively, data may be automatically periodically updated. Periodic updating may be controlled by process engines .","A warehouse server  accesses and organizes data in data warehouse . Warehouse server  may use a metadata wrapper  that has information about the structure of data warehouse  to access the right data. Warehouse server  may generate n-dimensional cubes to organize and display data in an understandable way. The dimensions of the cubes represent, for example, organizational data, such as an organizational unit, and measures of the cubes represent transactional data such as number of completed instances. Warehouse server  may comprise, for example, an on-line analytical processing (OLAP) server. If data warehouse  comprises an OLAP data warehouse, any suitable OLAP server may be used to access data warehouse .","Measures may be filtered by dimensions to obtain more accurate analytical reports. In the context of process measurements, measures may be identified with, for example, the number of instances in activities , the number of instances completed by business process , the execution time of an instance of an activity , or the average wait time for an instance of an activity . Dimensions may be associated with, for example, organizational units, roles, users, or time. Filtering the measures by the dimensions provides for a focused search in a large amount of data. Warehouse server  manages the building of the cubes composed of measures and dimensions that allow for viewing, filtering and analysis with the analytical data browser .","Analytical data browser  interprets data organized by warehouse server . For example, analytical data browser  may be used to interpret the cubes generated by warehouse server . Analytical data browser  may comprise, for example, an OLAP browser. Computer  may be used to display the information interpreted by analytical data browser .","According to one embodiment, analytical data browser  may provide the following functionality:\n\n",{"@attributes":{"id":"p-0132","num":"0141"},"figref":["FIG. 17","FIG. 16"],"b":["36","10","36","78","338","340","344","340","78","338","338","78","80"]},"Fact tables  may include, for example, a workload table , a process performance table , and a task table . Workload table  describes a snapshot of statistical data for activities  executing at a specific time. For example, the statistical data may include the information described in TABLE 4.",{"@attributes":{"id":"p-0134","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Snapshot Time","time of the snapshot"]},{"entry":[{},"Activity Identifier","activity running"]},{"entry":[{},"Organizational Unit","organizational unit where the"]},{"entry":[{},"Identifier","activity is running"]},{"entry":[{},"Role Identifier","role executing the activity"]},{"entry":[{},"User Identifier","user running the activity"]},{"entry":[{},{},"(the user belongs to the"]},{"entry":[{},{},"identified role)"]},{"entry":[{},"Activity Origin","child activity belonging to a"]},{"entry":[{},{},"subprocess created by the"]},{"entry":[{},{},"running activity"]},{"entry":[{},"Organizational Unit","organizational unit where the"]},{"entry":[{},"Origin","child activity belongs"]},{"entry":[{},"Activity Waiting","parent activity which created"]},{"entry":[{},{},"a subprocess that includes"]},{"entry":[{},{},"the running activity"]},{"entry":[{},"Organizational Unit","organizational unit where the"]},{"entry":[{},"Identifier Waiting","parent activity belongs"]},{"entry":[{},"Quantity","quantity of instances running"]},{"entry":[{},{},"in the activity"]},{"entry":[{},"Average Task Time","average time since the instance"]},{"entry":[{},{},"reached the current activity"]},{"entry":[{},"Average Process Time","average execution time for"]},{"entry":[{},{},"the activity since the"]},{"entry":[{},{},"process began"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Process performance table  includes statistical data about completed activities . The statistical data may include, for example, the information described in TABLE 5.",{"@attributes":{"id":"p-0136","num":"0145"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Activity Identifier","Completed activity"]},{"entry":[{},"Role Identifier","role that executed the"]},{"entry":[{},{},"activity"]},{"entry":[{},"User Identifier","user who ran the activity"]},{"entry":[{},"Organizational Unit","Organizational unit where the"]},{"entry":[{},"Identifier","activity ran"]},{"entry":[{},"Completion Time","time when the activity ended"]},{"entry":[{},"Task Time","Execution time of the"]},{"entry":[{},{},"activity"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Task table  includes statistical data about completed instances. The statistical data may include, for example, the information described in TABLE 6.",{"@attributes":{"id":"p-0138","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Process Identifier","completed process"]},{"entry":[{},"Organizational Unit","organizational unit where the"]},{"entry":[{},"Identifier","activity is running"]},{"entry":[{},"Completion Time","time when the process ended"]},{"entry":[{},"Task Time","execution time of the process"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Recovery tables  are used to perform recovery procedures to coordinate data updated by multiple process engines . According to one example, one process engine  updates data warehouse  at a time. The updates of all process engines  represent a global update that describes the information at each process engine  at a specific time. Recovery tables  include a loads table  and a checkpoints table . Loads table  includes information about global updates, such as the time of a global update. Checkpoints table  includes information about the status of an update done by each process engine . This information may be used to determine if a process engine  has failed to update data warehouse, resulting in an incomplete global update.","Warehouse server  generates cubes  that organize data stored in data warehouse . Cubes  may have dimensions and measures. Dimensions represent categories used to organize data. Some dimensions may represent categories measured or evaluated using the measures. For example, a dimension may represent organizational units evaluated by profits, which are in turn represented by a measure. Combinations of dimensions may include, for example:\n\n","Cubes  may rank dimensions and elements within the dimensions into a hierarchy. For example, a date dimension may have a hierarchy that includes years, quarters, months, and days, and a process dimension may have a hierarchy that includes organizational units and activities. The date dimension may be ranked higher than the process dimension. Accordingly, a cube  may organize information by years, quarters, months, days, organizational units, and activities.","Measures represent values that may be organized according to the dimensions. Measures may be used to measure and evaluate dimensions. For example, measures may represent business indicators used to measure and evaluate an organizational unit represented by a dimension, which may allow a user to determine business trends. Cubes  for an organization focused on sales and might feature dimensions such as products, customers, and country, and measures such as costs, sales, and profits. Users may filter each measure by different dimensions to obtain the different views of data.","Analytical Data Browser","Analytical data browser  provides for analysis based on any combination of dimensions and measures. For example, a user may begin with an analysis determining the evolution of a sales margin over the last three months. If one month has a low value, the user may investigate the sold units, sales, and cost. If the reduction is a result of a smaller number of units sold, the user may examine if this trend is attributable to different products or sales regions.","Analytical data browser  provides for analysis at multiple levels of detail. For example, a date dimension may be analyzed at different levels of detail. An executive may view the performance of a business during an entire year, but may want to check the performance for the first quarter. To do this, the executive drills down into the date dimension to see the information split into quarters. Performance may be viewed at a monthly, weekly, or daily level. Analytical data browser  may provide the ability to spot a problem that may have occurred, discover its duration, and even its cause.","Information may be arranged into hierarchies, which may facilitate drilling. Drilling up presents a higher-level hierarchy, and drilling down presents a lower-level hierarchy. A user may drill to a highest level hierarchy or a lowest level hierarchy without going through intermediate levels.","A workload cube  describes a snapshot of executing instances of business processes . Workload cube  may include the dimensions described in TABLE 7.",{"@attributes":{"id":"p-0147","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 7"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Dimensions","Definition"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Date","Date the snapshot of business process"]},{"entry":[{},{},"captured."]},{"entry":[{},"Process","Hierarchical filter that allows"]},{"entry":[{},"(Hierarchy)","selection of process (top level),"]},{"entry":[{},{},"organizational unit (2nd level),"]},{"entry":[{},{},"activity (3rd level)."]},{"entry":[{},"Origin","Only valid for subflow process"]},{"entry":[{},{},"activities. Parent or originating"]},{"entry":[{},{},"process of activity being analyzed in"]},{"entry":[{},{},"child or subflow process."]},{"entry":[{},"Waiting","Activity that is waiting for business"]},{"entry":[{},{},"process to complete."]},{"entry":[{},"Roles","Organizational roles defined for"]},{"entry":[{},{},"business process."]},{"entry":[{},"Users","Users defined for business process."]},{"entry":[{},"Time","Time the snapshot of business process"]},{"entry":[{},{},"captured."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The measures for workload cube  may include the measures described in TABLE 8.",{"@attributes":{"id":"p-0149","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 8"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Measures","Definition"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Quantity","Internal measure."]},{"entry":[{},"Accumulator"]},{"entry":[{},"Task Wait Average","Average time instances remain at an"]},{"entry":[{},{},"activity before being routed to a next"]},{"entry":[{},{},"activity."]},{"entry":[{},"Process Wait","Cumulative time an instance has been"]},{"entry":[{},"Average","running. Instance average life time so"]},{"entry":[{},{},"far in the process."]},{"entry":[{},"Snapshots","Number of times the updater transferred"]},{"entry":[{},{},"information from process engines to"]},{"entry":[{},{},"data warehouse."]},{"entry":[{},"Quantity","Total number of instances at a given"]},{"entry":[{},{},"moment."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Process performance cube  describes work performed on each business process  by a user. Process performance cube  reflects the time taken to complete activities  within and between business process instances. The dimensions may include the dimensions described in TABLE 9.",{"@attributes":{"id":"p-0151","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 9"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Dimensions","Definition"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Date","Date the activity or instance completed"]},{"entry":[{},{},"execution."]},{"entry":[{},"Process","Hierarchical filter that allows"]},{"entry":[{},"(Hierarchy)","selection of process (top level),"]},{"entry":[{},{},"organizational unit (2nd level),"]},{"entry":[{},{},"activity (3rd level)."]},{"entry":[{},"Time","Time the activity or instance completed"]},{"entry":[{},{},"execution."]},{"entry":[{},"Roles","Organizational roles defined for the"]},{"entry":[{},{},"business process."]},{"entry":[{},"Users","Users defined for the business process."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Measures may include the measures described in TABLE 10.",{"@attributes":{"id":"p-0153","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 10"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Measures","Definition"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Work","Number of instances that successfully"]},{"entry":[{},{},"routed from this activity to a next"]},{"entry":[{},{},"activity."]},{"entry":[{},"Average Time","Average activity execution time to"]},{"entry":[{},"Activity","successfully route an instance to a"]},{"entry":[{},{},"next activity."]},{"entry":[{},"Average Time","Average instance execution time or"]},{"entry":[{},"Process","average time that an instance takes to"]},{"entry":[{},{},"go from the beginning to the end of a"]},{"entry":[{},{},"business process."]},{"entry":[{},"Process Completed","Total number of instances that were"]},{"entry":[{},{},"processed by a specific business"]},{"entry":[{},{},"process. This is process throughput."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0154","num":"0168"},"figref":["FIG. 18","FIG. 17"],"b":["400","356","356","400","410","356","412","410","414","356","416","356","418","356","420","422"]},"View buttons  may be used to select how to view a cube . Views in various OLAP browsers may include, for example: a spreadsheet, a plot diagram, a scatter plot diagram, three-dimensional grouped bars, three-dimensional stacking bars, three-dimensional mono series bars, a three-dimensional pie diagram, bars, pyramids, a tape, two measures, and an inverted axis. Although buttons  are illustrated, additional or alternative buttons  may be used.","A dimension and measures bar  may be used to select the dimensions and measures of cube . Dimensions and measures may be distinguished by any suitable manner, for example, font format or placement. The dimensions and measures may be organized in categories, for example, by date, process, origin, waiting, roles, users, time, and task waiting.","A window  displays a generated cube . In the illustrated example, cube  includes an x-axis  and a y-axis . A date dimension and a roles dimension have been selected for x-axis , and a task weight average measure has been selected for y-axis . Data  driven by a selected measure (task wait) and organized according to the dimensions of x-axis  and the measure of y-axis  is displayed. Window  includes a box  that describes a dimension used to organize and filter data . In the illustrated example, customer and shipping clerk roles are used to organize or visualize data  in a desired manner. Although an example screen  is illustrated, screen  may have any arrangement of elements suitable for viewing cube .",{"@attributes":{"id":"p-0158","num":"0172"},"figref":"FIG. 19","b":["356","450","356","356","414","400","452","454","424","452","434","456","430","430"]},"A measure is selected at step . A measure may be selected using a dimension and measure bar . In the illustrated example, the selected measure is used to describe information presented by y-axis . The measure may be selected by dragging a measure list icon to y-axis . Any suitable number of measures may be used. According to one example, only one measure may be used at a time. The measure may be filtered by more than one dimension.",{"@attributes":{"id":"p-0160","num":"0174"},"figref":"FIG. 20","b":["470","470"]},{"@attributes":{"id":"p-0161","num":"0175"},"figref":"FIG. 21","b":["472","472","472"]},{"@attributes":{"id":"p-0162","num":"0176"},"figref":"FIG. 22","b":"474"},{"@attributes":{"id":"p-0163","num":"0177"},"figref":"FIG. 23","b":"476"},"System  may allow decision-makers of an organization to make informed, coordinated decisions in a rapid-fire environment. Analytical data browser  may provide coordination of information and decision-making that may move an organization forward in a unified fashion, as opposed to the more traditionally upward flow of information and downward flow of decisions.","Although an embodiment of the invention and its advantages are described in detail, a person skilled in the art could make various alterations, additions, and omissions without departing from the spirit and scope of the present invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention and for further features and advantages, reference is now made to the following description, taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 17","FIG. 1"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 20 through 23"}]},"DETDESC":[{},{}]}
