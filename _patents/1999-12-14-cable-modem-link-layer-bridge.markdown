---
title: Cable modem link layer bridge
abstract: A cable modem link layer bridge includes a downstream forwarding task and an upstream forwarding task. The downstream forwarding task is structured to receive a first message from a cable network and forward the first message to a customer premises equipment (CPE). The upstream forwarding task is structured to receive a second message from the CPE and forward the second message to the cable network, the upstream and downstream forwarding tasks being multitasked such that the second message is forwarded by the upstream forward task while the first message is being forwarded by the downstream forwarding task.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06839355&OS=06839355&RS=06839355
owner: STMicroelectronics, Inc.
number: 06839355
owner_city: Carrollton
owner_country: US
publication_date: 19991214
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE ILLUSTRATED EMBODIMENTS"],"p":["The present invention relates to cable modems, and in particular, to a link layer bridge of a cable modem.","Cable operators are interested in deploying high-speed data communications systems on cable television systems. In an effort to enable the definition, design, development and deployment of data-over-cable systems on an uniform, consistent, open, non-proprietary, multi-vendor interoperable basis, the cable operators have prepared a series of interface specifications known as Data-Over-Cable Service Interface Specifications (DOCSIS). The intended service will allow transparent bi-directional transfer of Internet Protocol (IP) traffic, between the cable system of the cable operator and customer locations, over an all-coaxial or hybrid-fiber\/coax (HFC) cable network.",{"@attributes":{"id":"P-00004","num":"00004"},"figref":"FIG. 1","b":["10","10","12","14","12","16","18","20","22","12","18","20","14","20","14","10","16","16"]},"Although it specifies many basic requirements of the communication system , DOCSIS does not specify the details of how those requirement are implemented. For example, DOCSIS specifies (page 14) the following rules (among others) that the cable modem  must follow when exchanging data between the cable network  and the CPE , but does not specify the hardware and\/or software to be used by the cable modem  to satisfy the rules.","3.1.2.3.2 Forwarding","Cable modem (CM) forwarding in both directions MUST conform to the following general 802.1d guidelines:\n\n","An embodiment of the invention is directed to a cable modem link layer bridge that includes a downstream forwarding task and an upstream forwarding task. The downstream forwarding task is structured to receive a first message from a cable network and forward the first message to a customer premises equipment (CPE). The upstream forwarding task is structured to receive a second message from the CPE and forward the second message to the cable network, the upstream and downstream forwarding tasks being multitasked such that the second message is forwarded by the upstream forward task while the first message is being forwarded by the downstream forwarding task.","Another embodiment of the invention is directed to a cable modem link layer bridge that includes a station cache and a station cache manager. The station cache includes a plurality of station entries, with each station entry being associated with a respective one of a plurality of customer premises equipment (CPE). The station entry includes a function identifier that identifies an action to be taken by the bridge in response to receiving a message intended for the associated CPE. The station cache manager structured to modify the function identifier in response to a user request.","Another embodiment of the invention is directed to cable modem that includes a host for receiving messages directed to the cable modem; a first set of memory buffers for storing messages; a media access controller (MAC); a downstream forwarding task a second set of memory buffers; and a host receive task. The MAC is structured to receive a first message from a cable network and store the first message in a first memory buffer of the first set. The downstream forwarding task is structured to determine whether the first message is directed to the host. The host receive task is structured to copy the first message into a second memory buffer of the second set, release the first memory buffer for re-use by the MAC, and pass control of the first message to the host for processing using the second memory buffer.",{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 2","b":["50","50","52","54","56","58","52","16","50","54","20","50","54","20","56","50","20","50","60","58","52","54","56","58"]},"The host  has its own unique Ethernet address which allows data frames to be received by the host. The host includes both a TCP\/IP host or protocol stack that can receive and transmit IP frames and an LLC host or protocol stack that can receive and transmit LLC frames. In one embodiment, the TCP\/IP host is \u201cFusion\u201d from Pacific Software Inc., although other TCP\/IP hosts could be employed.","1.1 Bridge Functions","The bridge  is the part of the cable modem  that transfers data traffic back and forth between the CM MAC  interface and the Ethernet controller  interface. The bridge  operates at the data link layer level (Layer 2): it receives Ethernet frames on one interface and retransmits the very same frame on the other interface. A software implementation is described below, although those skilled in the art will understand that the same functions could be implemented in hardware.","The cable modem  supports the standard Ethernet frame format (DIX), as per RFC-894, and IEEE 802.3 (with SNAP-Sub-Network Address Protocol framing), as per RFC-1042 frame formats. The IEEE 802.3 frame format is implemented for 802.2 LLC commands XID and TEST addressed to the CM host .","DOCSIS specifies a certain number of Ethernet MAC address-based filtering rules for downstream and upstream directions; frames that do not conform to these filtering rules must be discarded by the bridge. The most important rule is based on the \u201clearning\u201d principle: the bridge must not forward frames transmitted between two nodes located on the same side of the bridge, such as the traffic between the CM and the CMTS (both located on the cable side) or between two CPE's (on the Ethernet side). Such frames, therefore, are discarded.","DOCSIS also requires filtering ability based on the Network Layer protocol embedded in the forwarded Ethernet frames. Filtering on IP (and ARP) or other Layer 3 protocol (such as IPX, NetBIOS, and Appletalk) is implemented, based on the Ethernet Type field value (for DIX framing) or the SNAP Ethernet Type (for 802.3 with SNAP framing). Filtering of IEEE 802.1d BPDU (Bridge Protocol Data Unit) is also implemented.","IP protocol filters (Layer 4) are also required by DOCSIS. The IP protocol filters can be used to restrict upstream or downstream traffic based on source and destination IP addresses, transport-layer protocols (such as TCP, UDP, and ICMP), and source and destination TCP\/UDP port numbers.","1.2 Downstream and Upstream Bridging Processes","Two of the main processes of the bridge  are the downstream bridging (from CM MAC  to Ethernet controller ) and the upstream bridging (from Ethernet controller to CM MAC). In a preferred embodiment of the present invention, these processes are implemented using separate tasks that are multitasked by the bridge microprocessor  or by plural microprocessors. The term \u201ctask\u201d is used herein in its known computer sense to refer to an independent processing context memory structures that allows the task to be processed independently from and simultaneously with other tasks.","1.2.1 Downstream Bridging Process","A downstream bridging process according to an embodiment of the present invention is shown in FIG. . The CM MAC  receives Ethernet frames from the cable network  and stores them in respective MAC memory buffers arranged in a downstream MAC queue . A downstream forward process  of the bridge  selects the next frame from the queue  and, based on the information in a frame header of the frame (Destination address, Source address, Type), three possible actions can follow:","1\/ discard the frame (step ), that is, release the memory buffer in which the frame was stored;","2\/ forward the frame to a transmit frame to CPE function  if the destination address of the frame matches an Ethernet address of one of a group of authorized CPEs that are coupled to the cable modem ; or","3\/ pass the frame up to a local host receive function  if the destination address of the frame matches the Ethernet address assigned to the CM host .","Upon receiving a frame from the downstream forwarding process , the transmit frame to CPE function  passes the frame to an Ethernet controller transmit function  of the Ethernet controller , which passes the frame to the appropriate CPE . If the Ethernet controller transmit function  is currently passing a previous frame to the CPE , then the Transmit frame to CPE function  attaches the memory buffer for the current frame to an Ethernet transmit queue . The Ethernet controller transmit function  takes frames from the Ethernet transmit queue  according to a predetermined order and forwards them to the CPE . Upon transmission of a frame to the CPE , the Ethernet controller transmit function  frees the memory buffer of the frame for re-use by the CM MAC  for a subsequent frame received by the CM MAC.","Upon receiving a frame from the downstream forwarding process , the local host receive function  determines from the frame header whether the frame is an IP frame or an LLC frame. If the frame is an IP frame, then the local host receive function  copies the frame into a Fusion stack specific data structure (\u201cmessage\u201d) and passes the Fusion message to a Fusion TCP\/IP host A. If the frame is an LLC frame, then the local host receive function  forwards the frame to an LLC host B. In either case, the memory buffer of the frame is freed by the host A, B upon completion of processing of the frame.","1.2.2 Upstream Bridging Process","An upstream bridging process according to an embodiment of the present invention is shown in FIG. . An Ethernet controller receive function  of the Ethernet controller  receives Ethernet frames from the CPE  and stores them in respective Ethernet receive buffers . A receive frame from CPE function  of the bridge  receives the frames from the Ethernet controller transmit function  and passes the frames to an upstream forwarding process . The upstream forwarding process  reads the frame header of each frame and, based on the information in the frame header (Destination address, Source address, Type), two possible actions can follow:","1\/ Discard the frame (step ), that is, release the Ethernet receive buffer; or","2\/ Forward the frame to the CM MAC  by placing the Ethernet receive buffer into an upstream MAC queue . The CM MAC  transmits frames in sequential order from the upstream MAC queue and releases the Ethernet receive buffers of the transmitted frames for re-use by the Ethernet controller receive function.","1.2.3 CM Upstream Transmission Process",{"@attributes":{"id":"P-00046","num":"00046"},"figref":"FIG. 4","b":["56","56","16","88","56","56","86","52","86","16","56","56"]},"1.3 CM\/CPE Downstream Bridging","A CM\/CPE downstream bridging process according to an embodiment of the present invention is shown in  local host transmit function  receives frames in memory buffers from the CM hosts A, B and passes them to the transmit frame to CPE function . Upon receiving a frame from one of the CM hosts A, B, the transmit frame to CPE function  passes the frame to the Ethernet controller transmit function  of the Ethernet controller , which passes the frame to the appropriate CPE . If the Ethernet controller transmit function  is currently passing a previous frame to the CPE , then the Transmit frame to CPE function  attaches the memory buffer for the current frame to the Ethernet transmit queue . The Ethernet controller transmit function  takes frames from the Ethernet transmit queue  according to a predetermined order and forwards them to the CPE . Upon transmission of a frame to the CPE , the Ethernet controller transmit function  frees the memory buffer of the frame for re-use by the CM hosts A, B.","1.3 CPE\/CM Upstream Bridging","A CPE\/CM upstream bridging process according to an embodiment of the present invention is shown in FIG. . The Ethernet controller receive function  of the Ethernet controller  receives Ethernet frames from the CPE  and stores them in respective Ethernet receive buffers . The receive frame from CPE function  of the bridge  receives the frames from the Ethernet controller transmit function  and passes the frames to the local host receive function .","Upon receiving a frame from the receive frame from CPE function , the local host receive function  determines from the frame header whether the frame is an IP frame or an LLC frame. If the frame is an IP frame, then the local host receive function  copies the frame into a Fusion message and passes the Fusion message to the Fusion TCP\/IP host A. If the frame is an LLC frame, then the local host receive function  forwards the frame to the LLC host B. In either case, the memory buffer of the frame is freed by the host A, B upon completion of processing of the frame.","1.3 Forwarding Rules","Forwarding rules are based on Data Link Layer (Layer 2) as well as Network Layer (Layer 3) and Transport Layer (Layer 4), if enabled. Layer 2 rules are based on:\n\n","Layer 3 rules (LLC protocol filters) are based on Ethernet Type value (such as 0x800 for IP, 0x806 for ARP, etc . . . ). The Ethernet Type is found right after the Source Address for DIX framing and at the end of the SNAP header for 802.3-SNAP framing. Layer 4 rules (IP protocol filters) apply for IP traffic and are based on protocol type (ICMP, IGMP, TCP or UDP) and UDP\/TCP port number.","The bridge  implements the forwarding rules described hereafter.","1.3.1 Downstream Forwarding Rules","The Layer 2 downstream forwarding rules implemented by the bridge  are as follows:\n\n","Once Layer 2 filtering is complete, the frame is still subject, if enabled, to Layer 3 and Layer 4 filtering.","1.3.2 Upstream Forwarding Rules","The Layer 2 upstream forwarding rules implemented in the present bridge design are as follows:\n\n","Once Layer 2 filtering is complete, the frame is still subject, if enabled, to Layer 3 and Layer 4 filtering.","3 Bridge Data Structures","The bridge  will essentially handle two flows of data:\n\n","To cope with these constraints, the bridge  uses simple fixed pools of memory buffers for frames coming from the CM MAC  and for frames coming from the Ethernet controller . The frames to and from the TCP\/IP host A are copied to and from the Fusion message structures.","3.1 General DOCSIS Bridge Data Structures","Each interface, the CM MAC  and the Ethernet controller , will maintain a separate pool of fixed buffers for received frames on their respective sides. The bridge  is responsible to release the buffers it gets from the CM MAC  once the frame has been successfully transmitted on the Ethernet port or discarded. The CM MAC  is responsible for releasing the buffers it gets from the bridge , once the upstream channel transmission is complete.","3.1.1 Abbreviations used in Data Structures","Buff Buffer","Dwstr Downstream","Upstr Upstream","Fwd Forward","Ether Ethernet","Len Length","Max Maximum","Min Minimum","Hdr Header","Msg Message","Ptr Pointer","Tx Transmit","Rx Receive","Sem Semaphore","3.1.2 General Bridge Data Structures Definition","#define u8 unsigned char \/* 8 bits on ST20 cc *\/","#define u16 unsigned short \/* 16 bits on ST20 cc *\/","#define u32 unsigned int \/* 32 bits on ST20 cc *\/","#define boolean int","#define true 1","#define false 0","Note: The \u201ccanonical\u201d maximum Ethernet frame size (as defined in the original DIX specifications) is 1518 bytes, including the Ethernet header (14 bytes), the maximum payload size (1500 bytes) and the 4-byte CRC.","The 48-bit Ethernet MAC address type is defined as follows:","typedef u8 a48[6]; \/* Ethernet Address (6 bytes) *\/","We also define the Ethernet header we must find at the beginning of an Ethernet frame:","typedef struct ether_hdr {\n\n","} ether_hdr;","As a placeholder for all the Bridge control variables, we define the Bridge Control Structure as follows:","typedef struct BridgeCtl {\n\n","} BridgeCtl;","BridgeCtl BridgeControl; \/* Define one control structure *\/","The different members of that structure are detailed below.","3.1.3 Memory Objects Management","To manage data structures such as buffers used by the forwarding processes, the bridge  employs a flexible mechanism able to provide upon request a data structure of the desired type and recycle them once the object (the data structure in this case) is not needed anymore, as shown in . As used herein, the term \u201cmemory object\u201d refers to data structures or collections of such structures stored in the processor's memory, either by static or dynamic memory allocation. However, the management system described herein is applicable to any kind of memory objects.","This mechanism accommodates several pools of different types of memory objects and different numbers of such memory objects in each of them. The memory management mechanism:\n\n","Each pool is implemented as an array  of the maximum number of the memory objects . The pool can be defined as ObjectType Objects[Size];.","For instance, the Downstream Forwarding Buffers pool is declared as follows:","static Dwstr_hdr Dwstr_Buff_Array[MAX_DWSTR];\n\n","Where \u201cMAX_DWSTR\u201d is the maximum number of such buffers we want to create. Note that the number of memory objects can be different for each pool. Also note that, although the memory is statically allocated in the present example, this method is valid for dynamically allocated memory as well.","Since each entry is a data structure, copying it back and forth is not desirable, especially for large data buffers. In order to access these entries, the bridge  uses a collection of as many pointers  as there are objects in the pool, logically organized as a stack . Each stack  is an array of pointers  where each pointer references a single object  in the pool and is defined as:","void *Pointer_Stack[Size];","To bridge  defines the downstream buffers pointer stack as:","static void *Dwstr_Ptr_Stack[MAX_DWSTR];\n\n","Since the pointers are of type void, they can point to any type of memory objects. The stack operation is controlled through a stack control structure :","typedef struct Stack_t","{\n\n","} Stack_t;","The top field is an index pointing to the next available pointer in the stack (like a stack pointer). The size field indicates how many objects this pool manages (can vary from one pool to another, according to each task need). The entry field is a pointer to the first element of the array of void pointers.","This system allows a stack-like management of pools of objects of any type and of any quantity, through a universal control structure type (Stack_t).","Two universal API's allow the bridge  to retrieve an object from the pool and to return the object to it:","void *Get_Object(Stack_t *s); \/* Get new object from stack *\/","void Return_Object (void *object, Stack_t *s);\n\n","Once again, using void pointers allows accommodating any type of objects.","To get an object from the pool as shown in , the pointer located at the present index value of the top field is returned; the top field is post-incremented. If the top field reaches the size field value, a NULL pointer is returned instead, indicating that the stack has been emptied.","To return an object to the stack as shown in , the top field is pre-decremented and the pointer value is written to the pointer array  at the new index value of the top field.","To initialize a stack, each pointer in the pointer array is initialized to point to one memory object in the object array. The fields of the stack control structure  are also initialized appropriately; note that the size and entry fields remain constant throughout the stack operation, the top field is initialized to 0.","3.1.4 Enumeration Types Definitions","In order to support the incoming frames sorting and filtering process, the following enum types are also defined:","enum Eth_Frame_Type {\n\n","}; \/* Set by examining Ethernet frame Destination Address *\/","enum Fwd_Decision {\n\n","}; \/* returned by forwarding rules *\/","3.2 CM MAC and Ethernet Controller Data Structures","3.2.1 CM MAC to Bridge Downstream Data structures","In the downstream direction, the buffer received from the CM MAC  actually contains the full CM MAC frame, starting with the DOCSIS header. Before passing the frame to the bridge , the CM MAC software will overwrite the first 6 bytes of the DOCSIS header in order to include the following information:\n\n","Because the DOCSIS header is of variable length, the bridge  uses the pointer to know where the Ethernet frame effectively begins inside the buffer. Once the buffer is not needed anymore (silent discard, transmission over the Ethernet port, copy to the Fusion IP stack), it is returned back to the downstream buffer pool.","Data Structures Definitions:","The buffer we get from CM MAC  begins with a specific header prepared by a downstream MAC driver in the CM MAC, overwriting the originally received CM MAC Header. This header contains information about the Ethernet frame beginning and length:","#define MAX_DWSTR_LEN 1800 \/* maximum length of DOCSIS frame *\/","typedef struct Dwstr_hdr {\n\n","} Dwstr_hdr;","The bridge maintains a pool of such Downstream buffers, using the stack based management system described above:","Stack_t Dwstr_Pool;","\/* Downstream Buffers Pool Control Structure *\/","static void *Dwstr_Ptr_Stack[MAX_DWSTR];","\/* Downstream Buffers Pointers Stack *\/","static Dwstr_hdr Dwstr_Buff_Array[MAX_DWSTR];","\/* Downstream Buffers Array *\/","If the downstream Buffer must be transmitted over the Ethernet interface, the pointer to that buffer is transmitted to the Ethernet controller transmit process using the Ethernet Transmission Queue that provides both a queuing mechanism for outbound Ethernet frames and a synchronization mechanism between the Downstream Forwarding task  and the Ethernet Controller ISR (Interrupt Service Routine).","message_queue *Dwstr_Fwd_Queue=&Dwstr_Fwd_Queue_Struct;","\/* Downstream Forwarding Message Queue *\/","Each message contains a pointer to a Downstream MAC Buffer. The total number of messages in the queue provides a flow control mechanism for the downstream traffic: if there is no more empty message available, indicating a congestion of the Ethernet network on the CPE side, newly arrived frames are dropped instead of being queued.","3.2.2 Bridge to DOCSIS Upstream Data Structures","In the upstream direction, the bridge  will maintain a pool of fixed size Ethernet receive buffers  dedicated for the upstream-bridged traffic.","Data Structures Definitions:","The buffers used for Upstream forwarding are defined as follows:","#define MAX_ETHER 1600 \/* maximum length of Ethernet frame *\/","#define MAX_MSG 10 \/* start with a pool of 10 buffers *\/","#define MSG_SIZE (MAX_ETHER+sizeof(int)*2)","\/* max Ethernet frame size+2 words *\/","typedef struct Upstr_hdr {\n\n","} Upstr_hdr;","The Upstream Buffer pool  will be implemented using the stack based management system described before:","Stack_t Upstr_Bri_Pool;","\/* Upstream Bridging Buffers Pool Control Structure *\/","static void *Upstr_Bri_Ptr_Stack[MAX_BRI_UPSTR];","\/* Upstream Bridging Buffers Pointers Stack *\/","static Upstr_hdr Upstr_Bri_Buff_Array[MAX_BRI_UPSTR];","\/* Upstream Bridging Buffers Array *\/","Note that a similar but separate buffer pool is implemented for the CM Local Host as discussed below in Section 4.2.2.","To queue each Upstream Buffer from the Ethernet receive ISR to the Upstream Forwarding task, an Upstream Message queue is implemented:","message_queue *Upstr_Fwd_Queue=&Upstr_Fwd_Queue_Struct;","\/* Upstream Forwarding Message Queue *\/","3.2.3 CPE MAC Address Table","The cable modem  maintains a table 100 of Ethernet MAC addresses of CPE devices connected to the cable modem. This table  is filled by either CM provisioning (stored into NV RAM, or set through a configuration file), or learning (by listening to the Ethernet port, and taking note of the Ethernet source address).","The CM  is set to support frames forwarding for up to a maximum number of CPE devices (device-dependent, or set by CMTS). However, it is necessary to keep track of other CPE devices connected to the Ethernet port, even though they are not taking part in the forwarding process, in order to filter out traffic between two CPE's.","Each CPE device information will be stored into a record as follows:","typedef struct MAC_addr {\n\n","} MAC_addr;","The supported field indicates whether that particular CPE is supported by the cable modem (i.e. the CM will forward its traffic back and forth). If the CPE is not supported, then all frames to and from that CPE will be discarded by the bridge . The provisioned field indicates whether that particular CPE has been provisioned by the CM (from the downloaded configuration file or through SNMP) or it has been learned by listening to the CPE port; it is only relevant when supported is true.","The forwarding field indicates how frames are to be forwarded to and from the CPE associated with the entry. For example, the forwarding field can indicate that only http-type frames, TCP\/IP frames, LLC frames, no frames, or all types of frames should be forwarded to and from the associated CPE. The CM manager  is programmed to set or change the value of the forwarding field as instructed by frames received from the cable system operator via the cable network , CM MAC , and bridge . It is envisioned that the level of service specified by the forwarding field will depend on the fees paid to the cable operator by the user of the associated CPE.","Since the table needs to be searched at least once for each incoming frame from the DOCSIS Cable port as well as from the Ethernet port, the bridge employs a fast and efficient method to search the CPE MAC address table . For that reason, the CPE MAC address table is implemented using a hash table .","To achieve a maximum spread of indices, the hashing function used by the bridge  combines the last 3 bytes of the Ethernet address: the first 3 bytes being assigned to the manufacturer by the IEEE (e.g. for STMicroelectronics: 00:80:e1:xx:xx:xx). Also to maximize the spread, the table size is chosen as a prime number.","#define Hash(addr) (((addr[5])+(addr[4])+(addr[3]))%HASHSIZE)","Note: Several hashing functions can be simulated and tested on a large number of random addresses to check which one produces the best spread of indices. One embodiment of the bridge  uses the function defined above.","Since the hashing function can produce the same key for different addresses, each hash table entry  can contain several records. Hence, each hash table entry  will be a null terminated linked list of one or more nodes . A first node  of each linked list points to either a null value or to the first CPE table entry (MAC_addr record). Each subsequent node of the linked list includes a subsequent CPE table entry and a pointer to the next record or the null value.","typedef struct ListNode{ \/* List Node with a link to \u201cnext\u201d *\/\n\n","} ListNode;","typedef struct List{ \/* Define a linked list of \u201cListNode\u201d *\/\n\n","} List;","#define HASHSIZE 37 \/* Size of hashing table (prime number) *\/","typedef List HashTable[HASHSIZE];","\/* Define Hash table as an array of linked lists *\/","HashTable CPE_Table; \/* CPE MAC Address Table *\/","To ensure that enough list nodes  entries are available, a pool of \u201cMAX_CPE\u201d list nodes  is created, using the stack based mechanism described before, from which we will draw a new entry each time we need to add one to the CPE table .","static Stack_t CPE_Pool;","\/* Create a stack of \u201cMAX_CPE\u201d ListNode's *\/","static void *CPE_Ptr_Stack[MAX_CPE];","\/* Stack of pointers to ListNode elements *\/","static ListNode ListNode_Array[MAX_CPE]={0};","\/* Array of list nodes, initialized to 0 *\/","The bridge  will need to \u201cpop\u201d a pointer from the stack, and use the \u201cListNode\u201d structure it is pointing to, each time a new CPE is either provisioned from the TFTP Configuration file or learned by listening to the Ethernet port. The Bridge will need to \u201cpush\u201d a pointer back to the stack, thus releasing the \u201cListNode\u201d structure it is pointing to, in the case of a CPE being provisioned after the maximum number of CPE's has been reached: the bridge will have to lookup the CPE table for a CPE that has been learned and remove it, since provisioned addresses must take preference over learned addresses.","Since at least two tasks, namely the downstream and upstream forwarding processes , , can access the CPE table , the bridge  implements an access synchronization mechanism to that common resource. The access synchronization mechanism is a mutual exclusion semaphore (mutex):","osw_mutex_t CPE_Table_Sem; \/* CPE Table Access Semaphore *\/","The first task wanting to access the table will \u201cwait\u201d on the mutex, but since the mutex is free, the first task will obtain access. If a second task wants to access the same CPE table  immediately after that, it will have to wait until the first task has released the mutex once finished accessing the table.","3.3 CM MAC \/ CM IP Host Data Structures","3.3.1 Fusion Inbound Receive Data Structures","Downstream frames for the CM IP host A are received on a pool of buffers managed by the CM IP host receive process . Once a downstream frame is determined to be intended for the local CM IP host A, by matching its Ethernet destination address with the CM MAC address, the CM IP host receive process  will obtain a Fusion message (\u201cm\u201d buffer) from the Fusion heap by invoking the function lwq_getbuf( ) and copying the frame contents into it. The Fusion message (m) structure is defined in the Fusion header file: m.h","The CM IP host receive process  is running in a different task context than the downstream forwarding task . A message queue is used by the downstream forwarding task  to pass the received Downstream Buffer address to the CM IP host receive task .","message_queue Fusion_RX_Queue;","\/* Fusion Receive Task message queue *\/","3.3.2 Fusion Outbound Transmit Data Structures","Outbound frames from the Fusion IP stack A come within Fusion messages (m structures). The bridge specific send routine (bridge_start( ) ) will copy the message contents into an Upstream buffer from a dedicated buffer pool, then invoke the CM MAC upstream send API (docsisdrv_SendPdu( ) ). The Fusion Upstream buffer pool is defined as follows:","static Stack_t Upstr_CM_Pool;","\/* Upstream Fusion Buffers Pool Control Structure *\/","static void *Upstr_CM_Ptr_Stack[MAX_CM_UPSTR];","\/* Upstream Fusion Buffers Pointers Stack *\/","static Upstr_hdr Upstr_CM_Buff_Array[MAX_CM_UPSTR];","\/* Upstream Fusion Buffers Array *\/","When returning to ndq_start( ), the function will release the Fusion message back to the Fusion heap (m_dispfn).","If no upstream buffer is available, the bridge_start( ) function will return without sending the frame; the outbound datagram is therefore lost. Retransmission of UDP datagrams is the responsibility of the UDP based application.","3.4 Bridge \/ Cable Modem Manager Data Structures","The Cable Modem Manager interface with the Bridge is performed through the Bridge Control Structure:","typedef struct BridgeCtl {\n\n","} BridgeCtl;","BridgeCtl BridgeControl; \/* Define one control structure *\/","The bridge  is not allowed to start data transfer between CM MAC  and the CM IP host A until the Bridge_Up flag is set to \u201ctrue\u201d. This flag can be set or reset either by the Cable Modem Manager, using the appropriate API, or by the CM IP host A, when calling the bridge_updown( ) function.","The bridge  does not start Downstream and Upstream forwarding processes until instructed to do so by the Cable Modem Manager by setting the Forwarding_Enabled flag. The Forwarding_Enabled flag is set to false by default. The Cable Modem Manager will eventually set it to true after successful registration.","The maximum number of CPE's supported by the bridge  is fixed to MAX_CPE. However, the number of effectively supported CPE's (lower than max) is kept in the Max_Supported_CPE variable whose value can be set by the Cable Modem Manager following the parsing of the CM Configuration file. The Supported_CPE and Learned_CPE variables keep track of the number of supported and learned (as opposed to provisioned) CPE's, respectively.","4 Bridge Application Programming Interfaces (API's)","4.1 Bridge Interface with CM MAC","4.1.1 Downstream Bridge \/ MAC Interface","The bridge  communicates with the CM MAC  by application programming interfaces (API's) defined below. In the downstream direction, the bridge  provides a buffer to the CM MAC (from the Downstream Buffer pool) and invokes the CM MAC receive API:","Dwstr_Buffer=Get_Object(&Dwstr_Pool);","Dwstr_error=docsisdrv_RecvPdu( (unsigned char *)Dwstr_Buffer,","(int)MAX_DWSTR_LEN);","This blocking API call will return only upon a CM MAC frame reception, successful or unsuccessful. The downstream forwarding process will be pending on this API call and process the received CM MAC frame.","4.1.2 Upstream Bridge \/ MAC Interface","In the upstream direction, the API to the Upstream CM MAC contains three pieces of information:\n\n","The Ethernet Controller receive interrupt service routine (ISR) will allocate a buffer of type Upstr_Hdr from the Upstream Forwarding Buffer pool and fill it out with the contents of the Ethernet frame. The Upstream forwarding task  will add, if the frame is to be forwarded, the length of the Ethernet frame and the service type. The frame is passed to the CM MAC  through this API:","Upstr_error=docsisdrv_SendPdu(Service_Type,","Upstr_Buff\u2192frame,","Upstr_Buff\u2192len);","Until further clarification, the service type field will be set to 0.","Although the upstream traffic from the cable modem IP host A, B could be passed to the CM MAC  using the very same Buffer pool, it was decided to use an identical but separate Buffer pool (Upstr_CM_Pool) with an identical buffer format (Upstr_hdr) for that purpose. That prevents the higher priority upstream bridged traffic from potentially \u201cstarving\u201d the CM IP host A, B by consuming all the available buffers. The CM MAC upstream transmission API can be invoked by both the Upstream Forwarding process and the Fusion send routine. The CM MAC driver is responsible for copying the Upstream buffers to its own queue and handling the possible reentrancy situations.","4.2 Bridge Interface with Fusion IP Stack","4.2.1 Fusion Downstream Receive Interface","The Fusion IP stack A will receive Ethernet frames, that match the CM MAC address, from the Downstream forwarding task . Once a downstream frame is routed to the local Fusion IP stack A, the local host receive process  will get a Fusion message of the appropriate size from the Fusion heap by calling the function lwq_getbuf( ) and copy the frame contents into the message buffer (pointed to by mp\u2192m_hp). If no Fusion message is available from the Fusion heap, the frame is discarded. In either case, the Downstream buffer is returned to the Downstream Buffer pool and the incoming message is queued into the Fusion's bridge device receive queue (lq_in( )).","The whole local host receive process , activated by the API call lwq_recv_task( ) runs in a different task context (local host receive task) than the downstream forwarding task (see section 5.1). The local host receive task  is activated by the Downstream Forwarding process  sending a message on the Fusion receive message queue: Fusion_RX_Queue. Fusion LWQ queuing routines (lwq.c) are enabled (compile option: LWQ)","4.2.2 Fusion Upstream Transmit Interface","In the upstream direction, the bridge  is seen as a Fusion network link layer device and therefore has an entry in the Network Device Table (ndevsw[ ]) with the following values (see Fusion Porting Guide, Chapter 5):",{"@attributes":{"id":"P-d0e3746","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["nd_name","= \u201cDOCSIS Bridge\u201d",{}]},{"entry":["nd_lladdr","= {AF_ETHER}","Ethernet-like Link Layer"]},{"entry":["nd_init","= bridge_init","Bridge init function"]},{"entry":["nd_updown","= bridge_updown","Bridge up\/down function"]},{"entry":["nd_send","= en_scomm","Standard Ethernet send function"]},{"entry":["nd_start","= bridge_start","Bridge start Ethernet Tx function"]},{"entry":["nd_ioctl","= bridge_ioctl","Bridge control function"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The Fusion Device Transmission queue (nd_xmitq) is disabled (compiler option: NO_TRANSMIT_Q) since the bridge upstream forwarding process implements its own upstream message queue . In order to transmit a frame upstream, the Fusion IP stack A will call its standard Ethernet send function (en_scommo( )), where the Ethernet header is pre-pended to the outgoing IP packet. The next function called (ndq_start( ) ) will dereference the nd_start pointer in the ndevsw structure in order to call the bridge-specific send routine:","bridge_start( ) .","The bridge-specific send routine (bridge_start( ) ) will copy the message contents into an Upstream message buffer from the Fusion Upstream buffer pool, and invoke the CM MAC upstream API (docsisdrv_SendPdu( ) ) with length and service type. When returned to, the ndq_start( ) function will release the Fusion message back to the Fusion heap (m_dispfn): see ndq_start( ) in m.c.","4.3 Bridge Interface with Cable Modem Manager","The Cable Modem Manager is a portion of the cable modem  that controls the operation of the bridge by setting a certain number of parameters, especially during the IP connectivity phase. Also, the configuration file downloaded through TFTP may contain some bridge-related parameters such as the maximum number of CPE's and CPE MAC addresses to provision into the CPE Table . The CM Manager interfaces with the bridge  through the following set of three API's.","4.3.1 Initialize Bridge Data Structures","The function prototype is:","void br_bridge_init(void);\/* Initialize Bridge data structures *\/","This function will initialize the various message queues and semaphores upon which the different tasks rely for communicating and transferring data. In addition, it will initialize the CPE Table data structures: hash table , list nodes buffers and stack.","4.3.2 Set Bridge Operating Parameters","The function prototype is:","int br_bridge_set (bridge_cmd parameter, int value);","\/* Set a Bridge parameter to desired value *\/","This API allows the CM Manager to set a bridge parameter, such as Downstream\/Upstream forwarding, to a given value. The supported parameters are defined in the enum bridge_cmd. They are:\n\n","The function prototype is:","int br_provision_CPE (a48 address);","\/* Provision a CPE MAC address *\/","This API allows the CM Manager to provision a CPE MAC Address, following the parsing of the CM Configuration File downloaded through TFTP. The address parameter is the 48-bit CPE MAC address to provision. The returned value is either \u201ctrue\u201d (the required parameter was set successfully) or \u201cfalse\u201d (the required parameter could not be set to the required value).","4.4 Bridge Interface with CPE Interface Ethernet Controller","4.4.1 Downstream Ethernet Transmit Interface","The bridge downstream forwarding process  needs to transmit Ethernet frames on the CPE Ethernet port and, when transmission is not possible immediately because the Ethernet controller is already transmitting a frame, queue them for transmission at a later time by the End of Transmission Interrupt handler or thread. The API for transmitting a frame on the Ethernet port is:","void Ether_Start(Dwstr_hdr *Dwstr_Buffer);","\/* starts Ethernet transmission of frame in downstream buffer *\/","This routine will set the Ethernet controller  to transmit the downstream frame passed as a parameter and also set the Ethernet Transmission flag:","volatile boolean Ether_TX_Active; \/* transmission active flag *\/","This flag will be reset by the Ethernet End of Transmission Interrupt handler or thread. It is used as a \u201cbusy\u201d signal to the downstream forwarding process, indicating that a frame is being transmitted and that subsequent frames must be queued.","The downstream forwarding process  uses a message queue  to communicate with the Ethernet controller : it copies a pointer to the downstream buffer into it.","message_queue *Dwstr_Fwd_Queue=&Dwstr_Fwd_Queue_Struct;","\/* Downstream Forwarding Message Queue *\/","The Ethernet End of Transmission Interrupt handler or thread will check this message queue: if there is a downstream buffer in the queue, it will immediately start transmitting it, using the Ether_Start( ) API, and leave the Ether_TX_Active flag set to \u201c1\u201d. If the queue is empty, it will reset the Ether_TX_Active flag and return.","The downstream forwarding process  must put all downstream frames for the CPE Ethernet port into the message queue , and then check the Ether_TX_Active flag:\n\n","Ethernet frames are received on the CPE Ethernet port of the Ethernet controller  and copied into an Upstream buffer  from the Upstream buffer pool. On the ST20-JEI platform, the upstream buffer is pre-allocated before the frame reception and the Ethernet controller  copies the received frame into the frame field of that buffer. On the Explorer platform, the received frame will be copied from the CS8900 memory into the Upstream buffer by the enet0_Thread( ) thread.","The Ethernet controller chip must be set to \u201cpromiscuous mode\u201d: it must accept any Ethernet frame, regardless of its destination address. Frame processing and filtering will be performed by the Upstream Forwarding task .","Upon successful frame reception, during the Ethernet receive ISR (or thread), the Upstream Buffer  is passed to the Upstream Forwarding task  by copying a pointer to the Upstream buffer into the Upstream Message queue :","message_queue *Upstr_Fwd_Queue=&Upstr_Fwd_Queue_Struct;","\/* Upstream Forwarding Message Queue *\/","The Upstream Forwarding task  is pending on that message queue and will process the Upstream frame, and then return the buffer back to the pool. After sending the received frame into the Upstream Message queue , the Ethernet receive ISR gets a new Upstream Buffer  from the Upstream buffer pool for the next received Ethernet frame.","5 Bridge Task Partitioning and Process Flow","5.1 Task Partitioning","The bridge  is concurrently running two separate tasks: the Downstream Forwarding task  and the Upstream Forwarding task 82. In parallel the local host receive task  is processing the incoming frames destined to the CM host A, B, thus avoiding to tie-up the Downstream bridged traffic while a frame is being processed up the CM host.","5.2 Downstream Bridging Tasks and Interrupts","In the downstream direction, one task will be implemented: the downstream forwarding task . In addition, for the ST20-JEI platform, two interrupt handlers associated with the Ethernet controller  will be used. On the Explorer platform, a short ISR, enet0_Isr( ) and a specific thread, enet0_Thread( ) will be used","Notes:","1. All details related to the MACE Ethernet Controller chip and its interrupt handlers are specific to the ST20-JEI platform.","2. On the MACE chip, the Transmit and Receive interrupt share the same interrupt handler, a checking of the Interrupt Status allows to branch to the Rx or Tx part of it, although in the present document, they are described as two separate handlers, for clarity purposes.","3. Similarly, on the Explorer platform, the enet0_Thread( ) contains sections of code for the downstream forwarding task , as well as code for the upstream forwarding task . Details for the upstream forwarding part are provided in section 5.3.","5.2.1 Downstream Forwarding Task","The downstream forwarding task  receives the DOCSIS frame buffer, and either discards the frame, passes it to the local host receive function  or to the Ethernet Transmission queue  (see section 1.2.1). The simplified process flow is:","Get buffer from Downstream Buffer pool","While (true)\n\n","End If","check Ethernet frame Destination Address (DA)","DoCase [DA]\n\n","End Case","DoCase [forwarding_decision]\n\n","End While","5.2.2 Ethernet Controller Transmit Interrupts","The following two interrupts complete the downstream forwarding task, on the ST20-JEI platform:\n\n","The simplified process flows are:","MACE Interrupt (Transmission complete):","Disable Transmit FIFO Empty Interrupt","Return Downstream buffer back to Downstream Buffer pool","If there is a message in Downstream Forwarding queue\n\n","End If","Dismiss Interrupt","On the Explorer platform, a similar process flow is performed in the relevant \u201ccase\u201d of the enet0_Thread( ).","Transmit FIFO Empty:","If more than 64 bytes left to transmit\n\n","Else\n\n","End If","Dismiss Interrupt","5.3 Upstream Bridging Tasks and Interrupts","In the Upstream direction, for bridged traffic (from the Ethernet controller ), one Upstream Forwarding task  will be implemented. In addition, for the ST20-JEI platform, two interrupt handlers associated with the Ethernet controller (MACE) are part of that process.","For the CM Host A, the local host transmit routine (bridge_start( )) will be called by the Fusion task device sending routine: ndq_start. It will operate in the original Fusion application task context and transmit the frame directly to the Upstream CM MAC driver, as described in section 5.5.","Note: On the MACE chip, the Transmit and Receive interrupt share the same interrupt handler, a checking of the Interrupt Status allows to branch to the Rx or Tx part of it, although in the present document, they are described as two separate handlers, for clarity purposes. On the Explorer platform, this is one \u201ccase\u201d of the enet0_Thread( ).","5.3.1 Upstream Forwarding Task","The upstream forwarding process  operates on frame received from the Ethernet controller  and either discards them or forwards them to the CM MAC . The simplified process flow is:\n\n","wait for Upstream Forwarding message queue from Ethernet Rx Interrupt","read message from queue, get Upstream buffer pointer","release Upstream Forwarding message","If Bridge device is not \u201cUp\u201d\n\n","End If","check Ethernet frame Destination Address (DA)","DoCase [DA]\n\n","End Case","DoCase [forwarding_decision]\n\n","End Case\n\n","On ST20-JEI platform, the following two interrupts are also part of the upstream forwarding process :\n\n","The simplified process flows are:","MACE Interrupt (Frame Received):","Send Upstream buffer pointer to Upstream Forwarding message queue.","Get new Upstream buffer from Upstream Forwarding Buffer pool.","Point MACE to start of Ethernet frame in Upstream buffer.","Dismiss Interrupt","Note: Upstream Buffer for the first frame is pre-allocated by the MACE Init routine.","Receive FIFO Full:","Copy 64 bytes (32 16-bit words) to current Upstream Buffer","Dismiss Interrupt","On the Explorer platform, a similar process flow is performed in the relevant \u201ccase\u201d of the enet0_Thread( ).","5.4 Local Host Receive Task","The local host receive task  is activated by the downstream forwarding task  through the local host receive task message queue. The simplified process flow is:","While (true)\n\n","End While","5.5 Local Host Tranmsit Routine","The local host transmit routine is bridge_start( ) at the end of Fusion Transmit calling tree. The simplified process flow is:","Get new buffer from the dedicated Fusion Upstream buffer pool","If Upstream buffer available\n\n","End If","5.6 IEEE 802.2 LLC Processing","As stated above, the cable modem  includes an LLC host B. As such, the CM responds appropriately to TEST and XID requests. The XID and TEST requests can be sent over IEEE 802.3 formatted frames only. Incoming frames using that format can be flagged by analyzing the 16-bit field that comes immediately after the Ethernet source address: for DIX framing, this is the \u201cEthernet Type\u201d, whose value is 2048 (0x800) for IP carrying frames, 2056 (0x806) for ARP, etc. If that 16-bit field value is equal or less than 1500 , most likely the frame is an IEEE 802.3 (LLC) formatted frame and that 16-bit field is actually the 802.3 \u201clength\u201d field. Downstream frames from the CM MAC  whose destination address matches the CM MAC address and with an \u201cEthernet Type\u201d value less or equal than 1500, will be passed to the LLC host B for further processing.","6 Procedural Design","6.1 Downstream Forwarding Procedures","6.1.1 Downstream Forwarding Task","Function Prototype:","static void Dwstr_Fwd_Task (void *p); \/* Downstream Forwarding *\/","Task Internal Data Structures:","task_tcb Dwstr_Fwd_Task_TCB; \/* Task Control Block *\/","task_desc Dwstr_Fwd_Task_Desc; \/* Task Descriptor *\/","Inter-Task Communication:","message_queue *Dwstr_Fwd_Queue=&Dwstr_Fwd_Queue_Struct;","\/* Downstream Forwarding Message Queue *\/","Note: message size is 4 bytes (1 pointer).","message_queue Fusion_RX_Queue;","\/* Fusion Receive Task message queue *\/","volatile boolean Ether_TX_Active=false;","\/* Ethernet transmission active flag *\/","osw_mutex_t CPE_Table_Sem; \/* CPE Table Access Semaphore *\/","Local Variables:","Dwstr_hdr *Dwstr_Buffer;\/* Downstream DOCSIS frame *\/","int Dwstr_error; \/* Error code returned by CM MAC *\/","MAC_addr *CPE_Entry; \/* CPE Table Entry *\/","ether_header * Hdr_Ptr, \/* pointer to Ethernet header *\/","enum Eth_Frame_Type Frame_Type; \/* Frame type classifier *\/","enum Fwd_Decision Forwarding; \/* Frame Forwarding decision *\/","message_buffer Dwstr_Msg; \/* temporary storage for Dwstr msg. *\/","message_buffer *Dwstr_Ptr=&Dwstr_Msg; \/* message pointer *\/","Static and Global Variables:","boolean Bridge_Up=false; \/* true if bridge interface is up *\/","boolean Forwarding_Enabled=false; \/* true if enabled *\/","HashTable CPE_Table; \/* CPE MAC Address Table *\/","int Max_Supported_CPE=MAX_CPE;","\/* Maximum number of supported CPE set by CM Manager *\/","int Supported_CPE=0; \/* Total number of supported CPE *\/","int Learned_CPE=0; \/* Total number of learned CPE *\/","Stack_t Dwstr_Pool;","\/* Downstream Buffers Pool Control Structure *\/","static void *Dwstr_Ptr_Stack[MAX_DWSTR];","\/* Downstream Buffers Pointers Stack *\/","static Dwstr_hdr Dwstr_Buff_Array[MAX_DWSTR];","\/* Downstream Buffers Array *\/","Process flow: See Section 5.2.1","Ancillary Functions called:","boolean Compare_MAC_Addr (a48 addr1, a48 addr2);","\/* returns true if both MAC addresses are equal *\/","static boolean Is_MAC_Management(a48 addr);","\/* returns true if MAC address is CM MAC Management *\/","MAC_addr *Search_CPE_Table(a48 addr, HashTable *Table);","\/* Search CPE Table for this address *\/","void Dwstr_Fusion_RX(Dwstr_hdr *Dwstr_Buffer);","\/* Copy frame inside DOCSIS buff into Fusion Message *\/","void Process_LLC_Cmd(Dwstr_hdr *Dwstr_Buffer);","\/* Process received LLC command *\/","void Ether_Start (Dwstr_hdr *Dwstr_Buffer);","\/* starts Ethernet transmission offrame inside DOCSIS buff *\/","6.1.2 Ethernet Transmit Interrupts","The MACE Ethernet controller will generate an interrupt when a frame is received or a frame transmission is complete:","void MaceInterrupt (void);","The MACE flags are checked, if it is a transmit interrupt, the corresponding process flow is executed.","Inter-Task Communication:","volatile boolean Ether_TX_Active=false;","\/* Ethernet transmission active flag *\/","Local Variables:","int xmtStat; \/* transmit status *\/","int intStat;","int retryStat;","int retryCount;","Static and Global Variables:","Stack_t Dwstr_Pool;","\/* Downstream Buffers Pool Control Structure *\/","Process flow: See Section 5.2.2","Ancillary Functions called:","void Ether_Start (Dwstr_hdr *Dwstr_Buffer);","\/* starts Ethernet transmission offrame inside DOCSIS buff *\/","In addition, the MACE Transmit FIFO will generate an interrupt request:","void TDTInterrupt (void);","6.2 Upstream Forwarding Procedures","6.2.1 Upstream Forwarding Task","Function Prototype:","static void Upstr_Fwd_Task (void *p) \/* Upstream Forwarding *\/","Task Internal Data Structures:","task_tcb Upstr_Fwd_Task_TCB; \/* Task Control Block *\/","task_desc Upstr_Fwd_Task_Desc; \/* Task Descriptor *\/","Inter-Task Communication:","message_queue *Upstr_Fwd_Queue=&Upstr_Fwd_Queue_Struct;","\/* Upstream Forwarding Message Queue *\/","osw_mutex_t CPE_Table_Sem; \/* CPE Table Access Semaphore *\/","Upstr_error=docsisdrv_SendPdu( Service_Type, Upstr_Buff\u2192frame, Upstr_Buff\u2192len);","Local Variables:","int Service_Type=0; \/* DOCSIS Service Type (0 by default) *\/","MAC_addr *CPE_Entry; \/* CPE Table Entry *\/","ether_header * Hdr_Ptr; \/* pointer to Ethernet header *\/","enum Eth_Frame_Type Frame_Type; \/* Frame type classifier *\/","enum Fwd_Decision Forwarding; \/* Frame Forwarding decision *\/","Upstr_hdr *Upstr_Buff; \/* Upstream message buffer *\/","message_buffer *Msg_Ptr;","\/* Pointer to Upstream message from Upstream Forwarding Queue *\/","int Upstr_error; \/* Error code from DOCSIS driver API *\/","Static and Global Variables:","boolean Bridge_Up=false; \/* true if bridge interface is up *\/","boolean Forwarding_Enabled=false; \/* true if enabled *\/","HashTable CPE_Table; \/* CPE MAC Address Table *\/","int Max_Supported_CPE=MAX_CPE;","\/* Maximum number of supported CPE set by CM Manager *\/","int Supported_CPE=0; \/* Total number of supported CPE *\/","int Learned_CPE=0; \/* Total number of learned CPE *\/","Stack_t Upstr_Bri_Pool;","\/* Upstream Bridging Buffers Pool Control Structure *\/","static void *Upstr_Bri_Ptr_Stack[MAX_BRI_UPSTR];","\/* Upstream Bridging Buffers Pointers Stack *\/","static Upstr_hdr Upstr_Bri_Buff_Array[MAX_BRI_UPSTR];","\/* Upstream Bridging Buffers Array *\/","Process flow: See Section 5.3.1","Ancillary Functions called:","boolean Compare_MAC_Addr (a48 addr1, a48 addr2);","\/* returns true if both MAC addresses are equal *\/","static boolean Is_BPDU (a48 addr);","\/* returns true if MAC address is Bridge Protocol Data Unit *\/","MAC_addr *Search_CPE_Table(a48 addr, HashTable *Table);","\/* Search CPE Table for this address *\/","static void Learn_CPE (a48 addr);","\/* Learn this CPE if allowed *\/","int Add_CPE_Table(a48 addr,","u8 Supported,","u8 Provisioned,","HashTable *Table);","\/*Add a CPE to the CPE MAC Address Table *\/","6.2.2 Ethernet Receive Interrupts","The MACE Ethernet controller will generate an interrupt when a frame is received or a frame transmission is complete:","void MaceInterrupt (void);","Note this is the same interrupt routine for reception and for end of transmission. The MACE flags are checked, if it is a receive interrupt, the corresponding process flow is executed.","Inter-Task Communication:","message_queue *Upstr_Fwd_Queue=&Upstr_Fwd_Queue_Struct;","\/* Upstream Forwarding Message Queue *\/","Local Variables:","int rcvStat; \/* receive status *\/","int len; \/* received frame length *\/","int dummy; \/* temporary H\/W register copy *\/","Upstr_hdr *Upstr_Buff; \/* Upstream message buffer *\/","Static and Global Variables:","static volatile boolean discardThisPacket;","\/* Discard Ethernet frames flag *\/","static char discardBuffer[2048];","\/* \u201ctrash\u201d buffer for discarded frames *\/","static MACE_PRAM *dv;","\/* pointer to MACE Ethernet Controller H\/W registers *\/","static volatile char *maceRecvBuffer;","\/* Buffer MACE Ethernet Controller is receiving into *\/","static volatile int maceRecvLen=0;","\/* Received bytes counter *\/","Process flow: See Section 5.3.2","Ancillary Functions called: None.","In addition, the MACE Receive FIFO will generate an interrupt request:","void RDTInterrupt (void);","6.3 Local Host Receive Task","This task actually starts Fusion message state machine upon reception of a frame from the downstream forwarding task .","Function Prototype:","static void Fusion_RX_Task (void *p); \/* Fusion Receive Task *\/","Task Internal Data Structures:","task_tcb Fusion_RX_Task_TCB; \/* Task Control Block *\/","task_desc Fusion_RX_Task_Desc; \/* Task Descriptor *\/","Inter-Task Communication:","message_queue Fusion_RX_Queue;","\/* Fusion Receive Task message queue *\/","Local Variables: None.","Static Variables: None.","Process flow: See Section 5.4","6.4 Fusion Bridge Device Procedures","These procedures are part of the bridge  as seen from the Fusion protocol stack: see Fusion Porting Guide and section 4.2.2.","6.4.1 Bridge Transmission Start Procedure","Function Prototype:","int bridge_start(m * mp);","Inter-Task Communication:","Upstr_error=docsisdrv_SendPdu(Service_Type,","Upstr_Buff\u2192frame,","Upstr_Buff\u2192len);","Static and Global Variables:","static Stack_t Upstr_CM_Pool;","\/* Upstream Fusion Buffers Pool Control Structure *\/","Local Variables:","int Service_Type=0; \/* DOCSIS Service Type (0 by default) *\/","Upstr_hdr *Upstr_Buff; \/* Upstream message buffer *\/","Process flow: See Section 5.5","6.4.2 Bridge Initialization Procedure","Function Prototype:","int bridge_init(netdev * ndp);","Static and Global Variables:","Process flow:","Initialize Fusion data structure (local_fns_data[ ]) with CM MAC address.","Initialize and Start Fusion Receive Task","Initialize Ethernet controller (Tx and Rx are disabled).","Initialize and Start Downstream Forwarding Task.","Initialize and Start Upstream Forwarding Task.","6.4.3 Bridge Up\/Down Procedure","Function Prototype:","int bridge_updown(netdev * ndp, u16flags, char * options);","Static and Global Variables:","boolean Bridge_Up=false; \/* true if bridge interface is up *\/","Process flow:","If flags value is: Up (true)","Initialize Link Layer structure of Fusion Network Device Data Structure.","Enable Ethernet Controller frame reception and Interrupts.","Allocate buffer pool from Fusion LWQ heap.","Enable Data transfer between CM MAC and CM IP host (Fusion).","Else (flags value is: Down (false))","Release Fusion LWQ buffer pool.","Disable Ethernet Controller frame reception and Interrupts.","Disable Data transfer between CM MAC and CM IP host (Fusion).","Disable Data forwarding between CM MAC and CPE Ethernet port.","End If","6.4.4 Bridge Input\/Output Control","Function Prototype:","int bridge_ioctl(netdev * ndp, int cmnd, char * addr);","Static and Global Variables:","Process flow:","DoCase [cmnd]\n\n","EndCase","Note: This function is implemented for compatibility with Fusion Network Device interface only; it does not perform any action regarding the operation of the bridge .","7 DOCSIS Bridge File Structure","7.1 Implementation Files","The DOCSIS Bridge implementation code will be in the following files:","1. bridgecm.c (Downstream and Upstream Forwarding)","Dwstr_Fwd_Task( ) \/* Downstream Forwarding Task *\/","Upstr_Fwd_Proc( ) \/* Upstream Forwarding Task *\/","Compare_MAC_Addr( ) \/* Compares 2 MAC addresses *\/","Is_MAC_Management( ) \/* check if frame is MAC Management *\/","Is_BPDU ( ) \/* check if Bridge Protocol Data Unit *\/","Learn_CPE( ) \/* Learn a CPE (if allowed) *\/","Init_Bridge_Buffers( ) \/* Init Bridge Buffer pools *\/","Init_Bridge_Queues( ) \/* Init Bridge message queues *\/","Start_Bridge( ) \/* Bridge Startup routine *\/","2. mace_bri.c (MACE Ethernet Controller Interface: on the JEI platform only)","MaceInterrupt( ) \/* MACE controller interrupt handler *\/","TDTInterrupt( ) \/* Tx FIFO interrupt handler *\/","RDTInterrupt( ) \/* Rx FIFO interrupt handler *\/","Ether_Init( ) \/* Ethernet controller H\/W init routine *\/","Ether_UpDown( ) \/* Ethernet controller enable routine *\/","Ether_Start( ) \/* Ethernet controller transmit routine *\/","Ether_IoCtl( ) \/* Ethernet controller control routine *\/","EnableEtherInterrupts( ) \/* MACE interrupts enable *\/","DisableEtherInterrupts( ) \/* MACE interrupts disable *\/","InstallInterrupts( ) \/* MACE interrupts setup *\/","3. enet_bri.c (CS8900 Ethernet Controller Interface: Explorer platform only)","Ether_Init( ) \/* Ethernet controller H\/W init routine *\/","Ether_UpDown( ) \/* Ethernet controller enable routine *\/","Ether_Start( ) \/* Ethernet controller transmit routine *\/","Ether_IoCtl( ) \/* Ethernet controller control routine *\/","enet0_Thread( ) \/* Interrupt processing thread *\/","4. bridgedv.c (DOCSIS Bridge Fusion Network Device Interface)","bridge_init( ) \/* Fusion Network Device Init *\/","bridge_updown( ) \/* Fusion Network Device Rx\/Tx enable *\/","bridge_start( ) \/* Fusion Network Device transmit start *\/","bridge_ioctl( ) \/* Fusion Network Device Control *\/","Fusion_RX_Task( ) \/* Fusion IP Protocol Stack receive task *\/","Dwstr_Fusion_Rx( )\/* Fusion Downstream Receive routine *\/","Init_Upstr_Fusion_Buffers \/* Init Fusion Buffers pool *\/","5. mncs_llc.c (802.2 LLC processing code)","Process_LLC_Cmd( ) \/* Process received 802.2 LLC command *\/","6. cpe_table.c (CPE MAC Address Table processing)","Init_CPE_Table( ) \/* Initialize CPE Table Data Structures *\/","Search_CPE_Table( ) \/* Search CPE Table for a MAC address *\/","Add_CPE_Table( ) \/* Add a CPE to CPE MAC Address Table *\/","Remove_Learned_CPE( ) \/* Remove learned CPE from CPE Table *\/","7. bridge_if.c (Bridge Interface with Cable Modem Manager)","br_bridge_init( ) \/* Initialize Bridge data structures *\/","br_bridge_set( ) \/* Set Bridge parameter to desired value *\/","br_provision_CPE( ) \/* Provision a CPE MAC address *\/","8. buffers.c (Stack based Memory Objects Management)","Init_Stack( ) \/* Initialize Stack control structures *\/","Get_Object( ) \/* Get new object from stack *\/","Return_Object( ) \/* Return an object back to stack *\/","7.2 Header Files","The header files allow the bridge implementation code to share data structures and function prototypes. The file bridgedv.c includes all of the Fusion headers plus some specific headers for interface with the bridge . The CM MAC software will also share some header files with the bridge software.","bridge.h DOCSIS Bridge private headers","Included by:","bridgecm.c","mace_bri.c (JEI platform)","enet_bri.c (Explorer platform)","bridge_if.c","bridgecm.h DOCSIS Bridge Interface headers","Included by:","bridgecm.c","mace_bri.c (JEI platform)","enet_bri.c (Explorer platform)","bridgedv.c","bridge_if.c","CM MAC Software","mcns_if.h DOCSIS Bridge\/MAC Interface headers","Included by:","bridgecm.c","CM MAC Software","Fusioncm.h DOCSIS Bridge\/Fusion Interface headers","Included by:","bridgecm.c","bridgedv.c","ether_bri.h DOCSIS Bridge\/Ethernet Controller Interface headers","Included by:","bridgecm.c","mace_bri.c (JEI platform)","enet_bri.c (Explorer platform)","ether_if.h Function Prototypes for Ethernet Control Routines","Included by:","mace_bri.c (JEI platform)","enet_bri.c (Explorer platform)","bridgedv.c","mcns_llc.h 802.2 LLC Interface headers","Included by:","mcns_llc.c","bridgecm.c","hash.h Hash Table headers","Included by:","bridgecm.c","cpe_table.c","bridge_if.c","bridge_if.h Bridge and CM Manager Interface Headers","Included by:","bridgecm.c","cpe_table.c","bridge_if.c","The above description of illustrated embodiments is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Accordingly, the invention is not limited by the disclosure, but instead the scope of the invention is to be determined entirely by the following claims, which are to be construed in accordance with established doctrines of claim interpretation."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"P-00022","num":"00022"},"figref":["FIG. 9","FIG. 7"]},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
