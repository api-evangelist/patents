---
title: Tree structure to pass data values to prepared statement object
abstract: A method of processing a query in a system in an object oriented programming environment, includes using a code to create a condition filter in a standard query language statement, the condition filter defining properties to be satisfied by a result of the query, and the condition filter using an object to execute a precompiled query language statement, and sending the standard query language statement to a database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06925472&OS=06925472&RS=06925472
owner: Sun Microsystems, Inc.
number: 06925472
owner_city: Palo Alto
owner_country: US
publication_date: 20010711
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","EXAMPLE 1","EXAMPLE 2","EXAMPLE 3"],"p":["1. Field of the Invention","The present invention relates to an application programming interface (API), and more particularly, to an application programming interface with a tree structure to pass data values to a prepared statement object.","2. Discussion of the Related Art","A JDBC (Java Database Connectivity) provides connection for programs written in Java to the data in common databases. The JDBC permits encoding of access request statements in SQL (structured query language). The SELECT statement in the SQL statement includes 3 clauses\u2014SELECT, FROM, and WHERE.","Conventionally, an API uses a string filter to create a SQL WHERE clause as a string and pass it to persistent object framework (POF). Then, in the persistent object framework, a JDBC Statement object is used to request a query to get the result data from a database. The Statement object is an object used for executing a simple SQL statement and obtaining the results produced by it. However, the Statement object needs to be compiled each time it is being used since it does not store the compiled results.","Accordingly, the present invention is directed to an application programming interface (API) that is an improvement of the related art.","Additional features and advantages of the invention will be set forth in the description which follows, and in part will be apparent from the description, or may be learned by practice of the invention. The objectives and other advantages of the invention will be realized and attained by the structure particularly pointed out in the written description and claims hereof as well as the appended drawings.","To achieve these and other advantages and in accordance with the purpose of the present invention, as embodied and broadly described, a method of processing a query in a system in an object oriented programming environment, comprising:\n\n","In another aspect of the present invention, a method of processing a query in a system in an object oriented programming environment, comprising: using an application programming interface (API) to create a standard query language (SQL) WHERE clause statement in a SQL statement and to pass the SQL WHERE clause statement to a persistent object framework (POF); and sending the SQL statement to a database, wherein the SQL WHERE clause statement includes a condition filter and uses a PreparedStatement object to request the query.","In another aspect of the present invention, an application programming interface (API) for a database query system in an object oriented programming environment, the application programming interface adapted to effect the steps comprising: creating a condition filter for a standard query language (SQL) WHERE clause statement; and passing the condition filter to a persistent object framework, wherein the SQL WHERE clause statement uses a PreparedStatement object to request a query.","In another aspect of the present invention, a computer program product comprising a computer useable medium having computer readable code embodied therein for a database query, the computer program product adapted to effect the steps comprising: making a connection with a database; using a code to create a condition filter in a standard query language statement, the condition filter defining properties to be satisfied by a result of the query, and the condition filter using an object to execute a precompiled query language statement; and sending the standard query language statement to the database.","In another aspect of the present invention, A computer program product comprising a computer useable medium having computer readable code embodied therein for a database query, the computer program product comprising: means for using a code to create a condition filter in a standard query language statement, means in the condition filter for defining properties to be satisfied by a result of the query, and means in the condition filter for using an object to execute a precompiled standard query language statement.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of the invention as claimed.","Reference will now be made in detail to the preferred embodiment of the present invention, examples of which are illustrated in the accompanying drawings.","The FIGURE illustrates database access with the API (application programming interface) of the present invention.","The FIGURE shows a Java application, an API of the present invention, a database, and a JDBC for connecting the Java application to the database. The API of the present invention creates a condition filter for SQL WHERE clause statement that uses a JDBC PreparedStatement object in a persistent object framework (POF). The PreparedStatement object is an object that represents a precompiled SQL statement. The SQL statement is pre-compiled and stored in the PreparedStatement object. Thus, the PreparedStatement object can be used to efficiently execute the statement multiple times. The SQL statement contained in the PreparedStatement object can take one or more parameters as input arguments (IN parameters). The IN parameter is a parameter whose value is not specified when the SQL statement is created. The PreparedStatement object has a question mark (\u201c?\u201d) as a placeholder for each IN parameter. An application has to set a value for each question mark in a PreparedStatement object before executing the PreparedStatement. The PreparedStatement object has the potential to be more efficient than the Statement object because it has been pre-compiled and stored for future use. For that reason, a SQL statement that is executed many times may be created as a PreparedStatement object to increase efficiency.","The classes for the API of the present invention are described now.","CXPFilter class: This class is a base class to construct the condition filter for SQL WHERE clause to be used to create a JDBC PreparedStatement object. The data values in conditions will be replaced with \u2018?\u2019 and the corresponding data value list will also be created. The order of data values in the list is the same as the order of \u2018?\u2019 in the WHERE clause. Therefore, it is easy to use PreparedStatement.set( ) functions to set the data values. This class uses a tree data structure to store conditions internally. Following are characteristics of the CXPFilter:\n\n",{"@attributes":{"id":"p-0022","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class CXPFilter"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\/\/ Condition operators"]},{"entry":[{},"\u2003\u2003static public final String COND_OPER_EQUAL = \u2033=\u2033;"]},{"entry":[{},"\u2003\u2003static public final String COND_OPER_NOT_EQUAL = \u2033! =\u2033;"]},{"entry":[{},"\u2003\u2003static public final String COND_OPER_GREAT = \u2033>\u2033;"]},{"entry":[{},"\u2003\u2003static public final String COND_OPER_LESS = \u2033<\u2033;"]},{"entry":[{},"\u2003\u2003static public final String COND_OPER_GREAT_EQUAL =\u2033>=\u2033;"]},{"entry":[{},"\u2003\u2003static public final String COND_OPER_LESS_EQUAL = \u2033<=\u2033;"]},{"entry":[{},"\u2003\u2003\/\/Null operators"]},{"entry":[{},"\u2003\u2003static public final String NULL_OPER_NULL = \u2033IS NULL\u2033;"]},{"entry":[{},"\u2003\u2003static public final String COND_OPER_NOT_NULL = \u2033IS NOT"]},{"entry":[{},"NULL\u2033;"]},{"entry":[{},"\u2003\u2003\/\/Logic operators"]},{"entry":[{},"\u2003\u2003static public final String LOGIC_OPER_AND = \u2033AND\u2033;"]},{"entry":[{},"\u2003\u2003static public final String LOGIC_OPER_OR = \u2033OR\u2033;"]},{"entry":[{},"\u2003\u2003\/\/Case function name"]},{"entry":[{},"\u2003\u2003static public final String CASE_FUNCTION_LOWER = \u2033LOWER\u2033;"]},{"entry":[{},"\u2003\u2003static public final String CASE_FUNCTION_UPPER = \u2033UPPER\u2033;"]},{"entry":[{},"\u2003\u2003static public final String CASE_FUNCTION_INITCAP = \u2033INITCAP\u2033;"]},{"entry":[{},"\u2003\u2003public String getFilterStringForPreparedStmt ( ) throws CXException;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009\/\/Traverses the condition tree and return a filter string with"]},{"entry":[{},"\u2009\/\/ \u2032?\u2032 replacing the corresponding data values for WHERE"]},{"entry":[{},"\u2009\/\/ clause for JDBC PreparedStatement object,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003public string getFilterString ( ) throws CXException;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009\/\/ Used for debugging only. It traverses the condition tree"]},{"entry":[{},"\u2009\/\/ and return a filter string for WHERE clause. Comment the"]},{"entry":[{},"\u2009\/\/ statement where calls this function after you finish"]},{"entry":[{},"\u2009\/\/ debugging. Otherwise, it will impact the performance of the"]},{"entry":[{},"\u2009\/\/ application."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003public ArrayList getValueList ( ) throws CXException;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2009\/\/ Traverse the condition tree and return a data value list."]},{"entry":[{},"\u2009\/\/ The order of data values in the list is the same as the"]},{"entry":[{},"\u2009\/\/ order of \u2032?\u2032 in the WHERE clause."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"CXPNormalFilter class: The CXPNormalFilter is a derived class of the CXPFilter. This class constructs a normal condition filter for SQL WHERE clause to be used to create a JDBC PreparedStatement object. None of parameters in the CXPNormalFilter can be null. The characteristics of the CPXNormalFilter are as follows:\n\n",{"@attributes":{"id":"p-0024","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002public class CXPNormalFilter extends CXPFilter"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public CXPNormalFilter (String columnName, String operator, Object"]},{"entry":[{},"value) throws CXException;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":{"@attributes":{"id":"ul0014-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":"Note that none of the parameters can be \u201cnull \u201d."}}}},"CXPLikeFilter Class: The CXPLikeFilter is another derived class of the CXPFilter. This class constructs a LIKE condition filter for SQL WHERE clause to be used to create a JDBC PreparedStatement object. None of parameters in the CXPLikeFilter can be null. The characteristics of the CPXLikeFilter are as follows:\n\n",{"@attributes":{"id":"p-0026","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class CXPLikeFilter extends CXPFilter"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\u2002public CXPLikeFilter (String, columnName, String pattern)"]},{"entry":[{},"\u2003\u2003\u2002throws CXException;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":{"@attributes":{"id":"ul0019-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":"Note that none of the parameters can be \u201cnull\u201d."}}}},"CXPIsNullFilter Class: The CXPIsNullFilter is another derived class of CXPFilter. This class constructs a IS NULL condition filter for SQL WHERE clause to be used to create a JDBC PreparedStatement object. None of parameters in the CXPIsNullFilter can be null. The characteristics of the CPXIsNullFilter are as follows:\n\n",{"@attributes":{"id":"p-0028","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class CXPIsNullFilter extends CXPFilter"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public CXPIsNulLFilter (String columnName, String operator)"]},{"entry":[{},"\u2003\u2003throws CXException;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":{"@attributes":{"id":"ul0024-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":"Note that none of parameters can be \u201cnull \u201d."}}}},"CXPCaseFilter Class: The CXPCaseFilter is another derived class of CXPFilter. This class constructs a case condition filter for SQL WHERE clause to be used to create a JDBC PreparedStatement object. None of parameters in the CXPCaseFilter can be null. The characteristics of the CPXCaseFilter are as follows:\n\n",{"@attributes":{"id":"p-0030","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class CXPCaseFilter extends CXPFilter"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public CXPCaseFilter (String, columnName, String operator,"]},{"entry":[{},"\u2003\u2003String value, String caseFunc) throw CXException;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":{"@attributes":{"id":"ul0029-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0030","list-style":"none"},"li":"Note that none of parameters can be \u201cnull \u201d."}}}},"CXPToDateFilter Class: The CXPToDateFilter is another derived class of CXPFilter. This class constructs a To_DATE condition filter for SQL WHERE clause to be used to create a JDBC PreparedStatement object. None of parameters in the CXPToDateFilter can be null. The characteristics of the CPXToDateFilter are as follows:\n\n",{"@attributes":{"id":"p-0032","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class CXPToDateFilter extends CXPFilter"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\u2002public CXPToDateFilter (String columnName, String operator,"]},{"entry":[{},"\u2003\u2003\u2002String dateStr, String dateFormat) throws CXException;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0034","list-style":"none"},"li":{"@attributes":{"id":"ul0034-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0035","list-style":"none"},"li":"Note that none of parameters can be \u201cnull \u201d."}}}},"CXPLogicFilter Class: The CXPLogicFilter is another derived class of CXPFilter. This class constructs a logic condition filter for SQL WHERE clause to be used to create a JDBC PreparedStatement object. The characteristics of the CXPLogicFilter are as follows:\n\n",{"@attributes":{"id":"p-0034","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class CXPLogicFilter extends CXPFilter"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\u2002public CXPLogicFilter (CXPFilter, filter1, String operator,"]},{"entry":[{},"\u2003\u2003\u2002CXPFilter filter2) throws CXException;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"CXPQuery Class: The CXPQuery is also used in the API discussed as the related art. In the present invention, a line \u201cvoid setFilter (CXPFilter, filter);\u201d is added to the CXPQuery used in the API discussed as the related art.","Following are examples for using the API of the present invention.","Target\n\n","Code\n\n","Output\n\n","Target\n\n","Original Code\n\n","New Code\n\n","Output\n\n","Target\n\n","Original Code\n\n","New Code\n\n","Output\n\n","By using the API of the present invention, an application performance for database accessing can be improved since the PreparedStatement is used. Moreover, with the API of the present invention, different SQL WHERE clauses can be easily formed, thus a flexible JDBC can be provided.","It will be apparent to those skilled in the art that various modifications and variations can be made in the application programming interface (API) of the present invention without departing from the spirit or scope of the invention. Thus, it is intended that the present invention covers the modifications and variations of this invention provided that they come within the scope of any claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawing, which is included to provide further understanding of the invention and is incorporated in and constitutes a part of this specification, illustrates an embodiment of the invention and together with the description serves to explain the principles of the invention. In the drawing:","The  is a block diagram showing database access with an interface according to the present invention."]},"DETDESC":[{},{}]}
