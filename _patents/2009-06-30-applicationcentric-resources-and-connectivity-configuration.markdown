---
title: Application-centric resources and connectivity configuration
abstract: In various exemplary embodiments, a system and associated method to provide application-centric resource management of a plurality of functional units in an enterprise environment is disclosed. The system, in an exemplary embodiment, comprises a deploy service module to determine whether one or more of the plurality of functional units within the enterprise environment is added or removed, an information model repository to provide information related to the plurality of functional units, a functional unit container to store a listing of resource services related to the plurality of functional units, and a managed resources container to associate each of the plurality of functional units with one or more development components in the enterprise environment. A user-interface is configured to display non-technical management information relating to each of the plurality of functional units.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507587&OS=09507587&RS=09507587
owner: SAP SE
number: 09507587
owner_city: Walldorf
owner_country: DE
publication_date: 20090630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["The present application relates generally to the field of computer technology and, in a specific exemplary embodiment, to a system and method of allowing a non-technical user to readily determine whether applications and other functional components are running reliably on a server.","Today's Java\u00ae-based enterprise server consists of several thousand technical components that generate hundreds of thousands of data records. Each of the components and data records is capable of being monitored. In addition there are thousands of interdependencies between the components and data records. Once an application is deployed on the enterprise server, the application effectively disappears as a single entity. Technical parts of the application are intermixed with components of both the server and other applications. The intermixing makes monitoring an availability of an entire application an expensive and time-consuming process requiring significant knowledge about the specific server architecture and technical details of both the server and applications running thereon. The complexity also leads administrators to investigate multiple false alarms from unimportant or unused technical components. To make matters worse, the applications can be spread across multiple physical hosts in a server cluster.","Java\u00ae servers typically present a rich set of universal configuration tools to allow managing different aspects of the applications that run on the server. The universal configuration tools however impose a problem: from the many applications running on the server, only a few of the tools directly bring business value and are important for the administrator. Yet, to configure the important applications the administrator has to know and understand the generic tools. Alternatively, applications can provide their own, specific-configuration tools, but this increases the development cost of the application and can lead to having multiple non-coherent and non-standardized configuration tools.","The description that follows includes illustrative systems, methods, techniques, instruction sequences, and computing machine program products that embody the present invention. In the following description, for purposes of explanation, numerous specific details are set forth to provide an understanding of various embodiments of the inventive subject matter. It will be evident, however, to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. Further, well-known instruction instances, protocols, structures, and techniques have not been shown in detail.","As used herein, the term \u201cor\u201d may be construed in either an inclusive or exclusive sense. Similarly, the term \u201cexemplary\u201d is construed merely to mean an example of something or an exemplar and not necessarily a preferred or ideal means of accomplishing a goal. Additionally, although various exemplary embodiments discussed below focus on administration of Java-based servers and related environments, the embodiments are given merely for clarity in disclosure. Thus, any type of server environment, including various system architectures, may employ various embodiments of the application-centric resources system and method described herein and is considered as being within a scope of the present invention.","In an exemplary embodiment, a system to provide application-centric resource management to a non-technical user of various functional units in an enterprise environment is disclosed. The system includes a number of components including a deploy service module to determine whether one or more of the functional units within the enterprise environment exists, or is added or removed, an information model repository to provide information for each of the functional units, and a functional unit container to store a listing of resource services for the functional units. A managed resources container associates each of the functional units with one or more development components in the enterprise environment to allow the non-technical user to readily monitor and manage the functional units. A user-interface displays non-technical information relating to each of the functional units in, for example, an iconic form that the non-technical user can simply select. Controlling systems, including hardware or software as appropriate, is built into, for example, the Java\u00ae server. More complete details are provided herein.","An exemplary method can include determining whether one or more functional units exists within the enterprise environment, providing information related to the functional units, and storing a listing of resource services related to each of the functional units. The functional units are associated with one or more development components in the enterprise environment. A display allows a non-technical user to monitor and manage the functional units based on non-technical management information displayed. The user can simply select, for example, an icon to manage the functional units as is described below in more detail.","In another exemplary embodiment, a machine-readable storage medium including a plurality of instructions that, when executed by one or more processors, causes at least one of the one or more processors to perform a method, such as the one described above.","Overview of an Exemplary Enterprise-System\u2014Adaptable to Inventive Features of Systems and Methods Described","With reference now to , a network diagram depicts an exemplary enterprise-system  having a client-server architecture in an enterprise environment. The exemplary enterprise-system  includes a client machine  with a web client  (e.g., a browser, such as the INTERNET EXPLORER\u00ae browser developed by Microsoft\u00ae Corporation of Redmond, Wash., USA), a small device client machine  having a small device web client  (e.g., a browser without a script engine) and a client\/server machine  with a programmatic client . Each of the client machines , ,  is coupled to an enterprise application platform , which provides server-side functionality, via a network  (e.g., the Internet, an enterprise-based VPN, or a hard-wired enterprise connection) to one or more clients. The enterprise application platform  comprises a combination of, for example, machines, software, and firmware. The enterprise application platform  can be based upon an integrated technology software-platform such as, for example, SAP NetWeaver\u00ae (produced by SAP AG, Walldorf, Germany). Further, while the exemplary enterprise-system  of  employs a client-server architecture, inventive features of the present application are of course not limited to such an architecture, and could equally well find application in, for example, a distributed or peer-to-peer architecture system.","Turning specifically to the enterprise application platform , one or more web servers  and Application Program Interface (API) servers  are coupled to, and provide web and programmatic interfaces to, one or more application servers . The one or more application servers  are, in turn, coupled to one or more database servers  that facilitate access to one or more databases . The one or more databases can include a user interface library . The one or more web servers , API servers , application servers , and database servers  host a plurality of cross-functional service modules . The one or more application servers  further host a plurality of domain application modules .","The plurality of cross-functional service modules  provides services to both users and processes that utilize the enterprise application platform . For example, the plurality of cross-functional service modules  provides portal services (e.g., web services), database services, and connectivity to the plurality of domain application modules  for users that operate the client machine , the client\/server machine , and the small device client machine . Additionally, the plurality of cross-functional service modules  provides an environment to deliver enhancements to existing applications and to integrate third party and legacy applications with existing ones of the plurality of cross-functional service modules  and the plurality of domain application modules .","Referring now to , a block diagram of particular components within the exemplary enterprise-system  of  illustrates enterprise applications and services of the enterprise application platform . The enterprise application platform  includes the plurality of cross-functional service modules  and domain application modules . In a specific exemplary embodiment, the plurality of cross-functional service modules  each include portal modules , relational database modules , connector and messaging modules , API modules , and development modules . As will be recognizable to a skilled artisan, each of the modules can be implemented in hardware, software, or firmware.","The portal modules  enable a single point of access to another one of the plurality of cross-functional service modules  and domain application modules  for the client machine , the client\/server machine , and the small device client machine . The portal modules  can process, author, and maintain web pages that present content (e.g., user interface elements and navigational controls) to the user. In addition, the portal modules  enable user roles, a construct that associates a role with a specialized environment utilized by a user to execute tasks, utilize services, and exchange information with other users and within a defined scope. For example, the role determines the content that is available to the user and the activities that the user may perform. The portal modules  can include a generation module, a communication module, a receiving module, and a regenerating module (albeit not shown explicitly). Further, the portal modules  comply with web services standards or utilize a variety of Internet technologies including Java, J2EE, Advanced Business Application Programming Language (ABAP) and Web Dynpro (both available from SAP AG, Walldorf, Germany), XML, JCA, JAAS, X.509, LDAP, WSDL, WSRR, SOAP, UDDI, and Microsoft\u00ae .NET (each known independently in the art).","The relational database modules  provide support services for access to the one or more databases  including the user interface library  (see ). The relational database modules  provide support for object relational mapping, database independence, and distributed computing. The relational database modules  are utilized to add, delete, update, and manage database elements. In addition the relational database modules  comply with database standards or utilize a variety of database technologies including SQL, SQLDBC, Oracle, MySQL, Unicode, JDBC (each known independently in the art).","The connector and messaging modules  enable communication across different types of messaging systems utilized by the plurality of cross-functional service modules  and domain application modules  by providing a common messaging application processing interface. The connector and messaging modules  enable asynchronous communication on the enterprise application platform .","The API modules  enable development of service-based applications by exposing an interface to existing and new applications as services. Repositories are included in the platform as a central place to find available services when building applications.","The development modules  provide a development environment for the addition, integration, updating, and extension of software components on the enterprise application platform  without impacting existing ones of the plurality of cross-functional service modules  and domain application modules .","With continuing reference to  and turning now to the plurality of domain application modules , a customer relationship management application module  enables access to and facilitates collecting and storing of relevant personalized information from multiple data sources and business processes. For example, enterprise personnel that are tasked with developing a buyer into a long-term customer may utilize the customer relationship management application module  to provide assistance to the buyer throughout a customer engagement cycle.","Enterprise personnel may also utilize a financial application module , along with various business processes, to track and control financial transactions within the enterprise application platform . The financial application module  facilitates execution of operational, analytical, and collaborative tasks associated with financial management. Specifically, the financial application module  enables performance of tasks related to financial accountability, planning, forecasting, and managing the cost of finance.","A human resource application module  may be utilized by particular enterprise personnel and business processes to manage, deploy, and track all enterprise personnel or certain subsets thereof. Specifically, the human resource application module  enables the analysis of human resource issues and facilitates human resource decisions based on real-time information.","A product life-cycle management application module  enables management of a product throughout a life-cycle of the product. For example, the product life-cycle management application module  enables collaborative engineering, custom product development, project management, asset management, and quality management among business partners, both within and outside of the enterprise.","A supply chain management application module  enables monitoring of performances observed in supply chains. The supply chain management application module  facilitates adherence to production plans and on-time delivery of products and services.","A third party application module , as well as a legacy application module , can be integrated with the plurality of domain application modules  and utilize the plurality of cross-functional service modules  on the enterprise application platform . As will be recognizable to a skilled artisan and as discussed above, each of the various modules described herein can be implemented in hardware, software, or firmware.","Integration of the Application-Centric Resources and Connectivity Configuration into the Exemplary Enterprise System","As noted above, administration and management of enterprise-based systems in general, and Java application servers in particular, requires significant technical knowledge from the administrators. The significant technical knowledge is a direct result of the complex architecture of the server and specific requirements of hundreds of technical components.","In an exemplary embodiment, a proposed solution groups technical entities of a Java\u00ae server including applications running on the server, underlying components, and monitoring and troubleshooting of content the applications generate into a plurality of hierarchical units. The hierarchical units begin with non-technical, user-understandable entities such as, for example, applications and functional units (FUNs) and progress through architectural and development components (DCs). Additionally, relationships between the monitoring and diagnostic data and corresponding grouping units can be embedded directly in the server software. The embedded software is therefore an application-centric resource providing a componentization of all technical entities on the server.","In addition, relationships between the monitoring and diagnostic data and the corresponding applications and related functionalities will be embedded into hardware, firmware, or software running on the Java\u00ae server. The embedded component, described in detail below, is the application-centric resource. A user views an application merely as a single entity; its hundreds of technical components will be hidden. By viewing the application as a single entity, a calculation of an aggregated availability status of an entire application can be determined. Consequently, by viewing the application as a single entity, instead of looking at possibly tens or hundreds of parameters and log entries, the user is presented with a single status indicator. Having this information embedded in the operational data of a server, the user is given a generic administration tool (e.g., an Application Manager) that simply presents a list of applications and corresponding configurable entities, and associates every configurable entity with a corresponding configuration tool.","For example, with reference to , an exemplary application of an application centric administration resource  provides an overview of a use of various inventive features of the system. The application-centric administration resource  describes relationships between various functional units (e.g., such as applications), their possible configurations such as connectivity, log and trace levels, properties, database resources, and so on. Thus, a generic administration tool, such as an application manager, can present a list of applications and their corresponding configurable entities and associate every configurable entity with a corresponding configuration tool. Each of these concepts is described in depth herein.","A user can check a runtime status option  of a particular application merely by looking at a graphical user interface (GUI) on a selection screen. (Neither the screen nor the GUI is shown but such graphical displays can take a variety of forms, such as icons representing the selection choices. Such graphical displays, including buttons and clickable links, are known independently in the art.) From the GUI, the user can select a plurality of components to check. The selection process can include selecting from a menu, by for example, keyboard, mouse, or touch-screen entry. The user will see a given application as a single entity. The hundreds of technical components either directly supporting or indirectly involved with the application are hidden.","If the runtime status option  indicates the application is not running, the user can select a start the application option  merely by selecting a component from the selection screen. Similarly, if the runtime status option  indicates the application is not running, the user can select a stop the application option  merely by selecting another component from the selection screen. (Of course, a skilled artisan will recognize that a start\/stop selection option can simply be combined but the exemplary application of an application-centric administration resource  merely serves as an overview of the system.)","As an example of system and method functionality, when the user chooses to stop a functional unit (FUN), all development components (DCs) that belong to the FUN are processed (except for DCs used by other, still active FUNs). Additionally, all managed elements that are deployed with the DCs belonging to the FUN are found (e.g., JEE applications, J2EE applications, AS Java\u00ae services, etc.). Those managed elements are then stopped, thus completing the FUN \u201cstop\u201d operation. The mapping between DC and functional unit is many-to-many. In this way, there could be DCs that are not mapped to any functional unit. These DCs will still indirectly participate into runtime operations of the FUNs as there could be other DCs mapped to a functional unit that use these.","Therefore, once the application has been started or stopped, the user can optionally select a view affected option  indicating other applications or components that may be affected by starting or stopping the given application. For example, before actually stopping a first FUN, a user can be presented with a list of all dependent FUNs, along with any dependency hierarchies which will also be stopped as a result of the action on the first FUN. The user can further be given an option to cancel the stop action.","Consequently, the exemplary application of an application-centric administration resource  provides a hierarchical system that can simply provide a high-level overview of any given application running on the server or it can be used to provide additional depth into other interrelationships of components within the server. Thus, should a problem occur, the hierarchy and the dependencies will be used to drill-down to a possible root cause of the problem. Various arrangements of the hierarchy and the dependencies are discussed in detail, below.","From the runtime status option , the user can also choose a view Development Components (DCs) option . The view DCs option  allows the user to view underlying DCs either supporting or related to the given application. The interrelationships between applications and DCs are discussed in more detail with reference to , below.","Additionally, from the runtime status option , the user can also choose an application configuration option  or a view related logs option . The application configuration option  is described in detail, below. The view related logs option  allows the user to select, for example, a graphical or textual display of an overview of relevant data to the user in a non-technical format. Grouping and data correlation between the application and related components within the application-centric administration resource  allows automatic filtering-out of the relevant log and trace data, thus significantly reducing the volume of data to be analyzed. For example, an application server (e.g., such as the one or more application servers  of ) can include certain \u201ccorrelators\u201d in its records to correlate an application to its related components. This correlation helps provide an application-centric presentation or format to the user. Grouping and data correlation and presentation techniques are known independently in the art.","Thus, the view DCs option , the application configuration option , and the view related logs option  each allow the user to drill-down to another level in the overall enterprise system. Consequently, the user can simply receive an overall status check on one or more applications by checking the runtime status option . Alternatively, the user can drill-down to various levels but only as needed to discern additional information. Regardless of the depth to which the user selects to view operations of the Examiner enterprise system however, there is no need for the user to possess any technical hardware, software, or architectural expertise to determine a system status.","From the runtime status option , the user can also choose a view dependencies option  allowing the user to view an overview of components upon which the application depends or interrelates. From the view dependencies option , the user can also choose to navigate directly to any one or more of the underlying dependent components by selecting a navigate to dependency option . Once the user has navigated to the any one or more of the underlying dependent components, the user can return directly to the runtime status option .","Overall, the application-centric administration resource  allows the user to view an aggregated state of an entire FUN without a need to check any of its dependencies and individual elements. Thus, the user can identify any problematic FUNs with minimal effort simply by referring to, for example, a simple graphical user interface. Therefore, if the aggregated state shows there is a problem with a particular FUN, the sub-hierarchy of that FUN can be expanded one or more levels down. Thus, the problematic FUN will have a \u201cproblem chain\u201d automatically expanded.","Additionally, given a DC name, the user can determine one or more functional units to which the DC belongs. This capability is useful since many application user notes refer to DC names rather than functionalities.","By viewing the aggregated state details, especially in the case of reported problems, the user can directly see what problems are reported for the FUN as a result of the aggregation, as well as the concrete operational state and the cause for the state. Therefore, if a dependency has failed to initialize or is missing the details for the FUN, an operational state of \u201cEnabled-Initialization Errors\u201d can be displayed. If concrete errors are reported in the logs, a statement of \u201cErrors Reported\u201d can also be displayed.","As a result, the user can view a list of top level FUNs with their associated aggregated state. Should any of the FUNs have a potential problem, the user can proceed by drilling down into the details and dependencies for one or more FUNs thus allowing a non-technical user to manage an entire enterprise environment. Currently, a similar task under the prior art involves looking at a list of, for example, approximately 2000 DCs, and potentially browsing a large number of long records and logs, many of which are meaningless to the non-technical or casual user. However, using exemplary embodiments of the application-centric administration resource and system described herein, the list of FUNs may typically be only approximately 100 DCs in an average enterprise environment and an analysis of related log files is automatic. Additionally, the FUNs can be hierarchically organized. Thus, the top-level may contain only approximately 20 elements.","Consequently, in a specific exemplary embodiment of the application-centric administration resource , the user can see a complete list of FUNs on the system, together with their aggregated state including information such as vendor or revision number. The user can then control a level down to which the hierarchy is displayed in the list by expanding or collapsing branches or specifying that only a certain number of top levels be shown.","Additionally, the user can filter for any of the one or more FUNs that have reported problems. The user can also exclude entire FUNs and DCs as well as individual errors from the state calculation and error reporting scheme, thus allowing for reduced reporting \u201cnoise.\u201d","The user is also able to clearly distinguish an application afflicted with one or more problems from an application that is running normally. If an application is not functioning correctly, each of the drill-down options, discussed above, allows the user to determine which component or components can be a root cause of an application problem. As the user drills-down, any malfunctioning or failed components will be flagged (not shown).","As an additional example, in a specific exemplary embodiment, if either an application or a component is not operating in a normal state, the application or component can be checked with a yellow flag as behaving improperly, or a red flag indicating a complete failure of the application or an underlying component. Means for determining the operational state of various types of software or hardware components are known independently in the art. Once the underlying problem component is identified, the user can simply select the improperly operating component and the proper tool for resolving the issue is automatically proposed. The user can start the tool simply by selecting it and the problem context is then passed to the tool.","Referring now to , an exemplary relationship block diagram  illustrates various direct and indirect relationships between various elements configured within the application-centric resource of . The exemplary relationship block diagram  thereby describes a plurality of relationships between different elements involved in operations involving an enterprise system. For example, as briefly described above, relationships between functional units (FUNs) are defined by various sources. The FUNs describe one or more user-understandable functionalities of various components, such as an application, running on the enterprise system. However, the FUNs are not limited to applications. The FUNs can describe an entire product through a portion of the product (e.g., an application) to part of a product or application such as a user-interface associated with an application.","Relationships between the FUNs and DCs can be described by, for example, a common information model (CIM) standard, known independently in the art. The CIM standard defines how managed components in an enterprise system are represented as a common set of objects along with relationships between the objects. CIM serves as a basis for most of the other distributed management task force (DMTF) standards such as web-based enterprise management (WBEM) and systems management architecture for server hardware (SMASH). Relationships between FUNs and DCs can also be determined in models such as SAP EDEN (produced by SAP AG, Walldorf, Germany). Runtime references between DCs can be defined by the DC in the development environment to use functionalities implemented in another DC. Such definitional reference techniques are known independently in the art.","With continuing reference to , the exemplary relationship block diagram  defines a specific exemplary embodiment of a relationship structure between various FUNs and (development components) DCs, thereby providing an overview of a plurality of dependencies that may be directly viewed from the application-centric administration resource  of . The exemplary relationship block diagram  includes a second FUN  that is implemented in, or a member of a first FUN . The second FUN  implements a first DC  and has a functional requirement to a third FUN . The third FUN , in turn, implements a third DC . The first DC  has a runtime reference to two additional DCs: a second DC  and a fourth DC . Thus, as understood by a skilled artisan, the runtime references can be configured to be viewed in the application-centric administration resource  only at runtime of a given application or, alternatively, can be configured to be viewed at any time. A fourth FUN  implements the second DC , resulting in an indirect relationship between the second FUN  and the fourth FUN  exists through the second DC . The mapping of a DC to a FUN may be accomplished during build time using, for example, the NetWeaver\u00ae developer studio plug-ins (produced by SAP AG, Walldorf, Germany).","As will be recognizable to a skilled artisan based on the above-description, runtime references between DCs are commonly defined by a developer of the DC in a development environment to use functionalities implemented in another DC. Thus, an \u201cimplemented in\u201d relationship between a FUN and one or more DCs is introduced for administration of the application-centric resource. The relationship expresses that, for example, a functionality \u201cX\u201d is realized by a DC \u201cY.\u201d Thus, the DC \u201cY\u201d is essential to the functionality \u201cY\u201d for proper operation.","Referring now to , an exemplary architectural model into which the application-centric administration resource  of  can be deployed includes an application server (AS) Java\u00ae engine . In a specific exemplary embodiment, the AS Java\u00ae engine  is an SAP NetWeaver\u00ae (produced by SAP AG, Walldorf, Germany) application server.","The AS Java\u00ae engine  includes a CIM repository , a functional unit container , and a Java\u00ae managed bean (MBean) server . The functional unit container  is coupled to a deploy service module  and a non-modeled managed resource container . An administrator module  is coupled to all components indirectly through the functional unit container .","The functional unit container  is built as a component of an AS Java\u00ae service and, as such, becomes an integral part of the AS Java\u00ae core. The functional unit container  reads information for existing FUNs from the CIM repository . The functional unit container  stores the information for the existing FUNs in a functional unit MBeans module . MBeans that represent the functional units are registered with the Java\u00ae Mbean server  and are stored in an Mbean modeled and managed resources container . Additionally, the functional unit container  processes events coming from the deploy service module . Consequently, any added or removed functional units, which are serviced by the deploy service module , can be either registered or un-registered through addition or removal of the appropriate MBeans.","The functional unit container  utilizes a convenience application programming interface (API)  within the CIM repository  to make a determination whether a functional unit is installed or not. The convenience API  is coupled to a namespace container . The namespace container  is generally a run-time container within the CIM repository  that can contain, for example, CIM classes, instances, and qualifier declarations.","Any operations performed within the AS Java\u00ae engine  can only be executed on an installed functional unit. The installed functional unit may or may not be configured. A configured functional unit may require different administration than a functional unit not yet configured. Thus, information pertaining to whether a functional unit is configured or not is retrieved from the CIM repository  and is retained in the functional unit MBeans module . Mbeans within the functional unit Mbeans module  have relations to Mbeans within the mbeans represented in the modeled and managed resources container  of the Java\u00ae MBean server . These relations can be utilized when an operation performed on a functional unit is executed (e.g., start\/stop, configure, etc.). These relations are built based on the information arriving with every development component (DC). However, a deployment of a description of a functional unit does not necessarily mean that there are related DCs.","For managed resources that are not modeled within the CIM repository , a need can still exist to communicate directly to the container of the resource to map it to a proper functional unit and to execute operations on it (e.g., such as log configuration, log viewing, etc.). Thus, this resource type is contained within the non-modeled managed resource container . A skilled artisan will independently recognize that a plug-in can be provided within the AS Java\u00ae engine  to use introduced functional unit MBeans and display the MBeans to the user in an application management user-interface (UI) . All the operations performed by the user in the application management UI  can be executed on the functional unit MBeans. Additionally, the application management UI  can be constructed with links to one or more existing managed resource configuration UIs . Configuration of the managed resources assigned to a functional unit can be delegated to the one or more existing managed resource configuration UIs  by passing the needed context information.","Additionally, one or more service-oriented architecture (SOA) configuration UIs  can adopt concepts of the functional units and directly use the functional unit MBeans. Based upon the description provided herein, a skilled artisan will recognize that extensions to low-level MBeans and any AS engine UIs can be made such that the MBeans know about the functional units to which they are related.","Referring now to , a block diagram  of a specific exemplary embodiment of mapping relationships of various elements within the architectural model of  is illustrated. The block diagram  defines exemplary relationships between a functional unit  and its various components. The block diagram  includes a CIM model  and an application server model . The CIM model , in this exemplary embodiment, includes the functional unit . The CIM model  can be based on either the CIM or EDEN models, discussed above. The application server model  can be, for example, be the AS Java\u00ae engine  discussed above, or any other application server.","To illustrate mapping relationships, the application server model  includes a specific example of a particular type of functional unit, an information technology support for asset management (ITSAM) functional unit . (Generic ITSAM applications are known independently in the art.) The ITSAM functional unit  includes an operations block  defining operations such as start, stop, and so on. The ITSAM functional unit  consists of an ITSAM J2EE development component . Underlying the ITSAM J2EE development component  is an ITSAM J2EE application component  and an ITSAM J2EE service component . The ITSAM J2EE application component  and the ITSAM J2EE service component  have application runtime and service runtime to an ITSAM J2EE application  and an ITSAM J2EE service , respectively (each having an MBean implementation). Additionally, the ITSAM J2EE application  and the ITSAM J2EE service  each include an operations block ,  defining operations such as start, stop, and so on for each component.","Thus, as an example, by employing the application-centric administration resource  (), execution of an operation (e.g., a start operation) on the functional unit  can be divided into a plurality of steps. Based on relations built into the CIM model , all functional units that are affected by the operation can be readily found. The affected functional units each have one or more managed objects or technical components (e.g., such as DCs) associated therewith. Relationships between the affected functional units, the one or more managed objects or technical components associated with the affected functional units, and the functional unit  can then be readily matched to each other. As a result of all affected functional units being mapped, one to another, once the operation is executed on the functional unit , any affected functional units can also be displayed to the user through the application-centric administration resource .","Consequently, the block diagram  illustrates, in this specific exemplary embodiment, how the functional unit  is mapped with a plurality of underlying DCs, other technical components, and other affected functional units. Thus, the user employing the application-centric administration resource  () need only view, at a top-level, the functional unit . However, with concurrent reference to , a skilled artisan can appreciate that the user can still drill-down directly to all DCs and any technical components associated with the functional unit  since all units have been mapped, one to another.","With concurrent reference to , and now , an exemplary table  to store a current state of a DC retrieved from the log content on the application server is illustrated. In a specific exemplary embodiment, a description of one of the functional unit Mbeans  to be used to retrieve a state of the DC based on the log content can be implemented by the following code, recognizable to a skilled artisan. A resulting version of the exemplary table  for each of the DCs can be stored in, for example, the functional unit container .\n\n",{"@attributes":{"id":"p-0072","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public interface DCLogContentMBean {"},{"entry":"\/**"},{"entry":"* List all available DCs which have a status provided by logs"},{"entry":"* @return"},{"entry":"*\/"},{"entry":"public String[ ] listDCs( );"},{"entry":"\/**"},{"entry":"* Provides if the given DC is initialized normal( without warnings)"},{"entry":"* @param dcName"},{"entry":"* @return"},{"entry":"*\/"},{"entry":"public boolean isFailToInitialize(String dcName);"},{"entry":"\/**"},{"entry":"* Gives a number of FATAL errors reported by this DC"},{"entry":"* @param dcName"},{"entry":"* @return"},{"entry":"*\/"},{"entry":"public int getNumberOfFatals(String dcName);"},{"entry":"\/**"},{"entry":"* Gives a number of errors reported by this DC"},{"entry":"* @param dcName"},{"entry":"* @return"},{"entry":"*\/"},{"entry":"public int getNumberOfErrors(String dcName);"},{"entry":"\/**"},{"entry":"* provides time of last error reported"},{"entry":"* @param dcName"},{"entry":"* @return"},{"entry":"*\/"},{"entry":"public long getLastErrorTimestamp(String dcName);"},{"entry":"\/**"},{"entry":"* provides time of first error reported"},{"entry":"* @param dcName"},{"entry":"* @return"},{"entry":"*\/"},{"entry":"public long getFirstErrorTimestamp(String dcName);"},{"entry":"\/**"},{"entry":"* Removing given DC from status table"},{"entry":"* @param dcName"},{"entry":"*\/"},{"entry":"public void clearState(String dcName);"},{"entry":"\/**"},{"entry":"* Provides list of LogRecord IDs related with given DC"},{"entry":"* @param dcName"},{"entry":"* @return"},{"entry":"*\/"},{"entry":"public String[ ] getMessageIDs(String dcName);"},{"entry":"\/**"},{"entry":"* Reinitialize the list of message IDs related with initialization"},{"entry":"of servlet."},{"entry":"* if file named \u201cHttpMessageIDCodes.properties\u201d in server directory"},{"entry":"exist the * info will be get from this file otherwise the predefined set"},{"entry":"of message IDs"},{"entry":"* will be."},{"entry":"*\/"},{"entry":"public void reInit( );"},{"entry":"\/**"},{"entry":"* for given list with DC Names returns an array of DC states"},{"entry":"* @see DCState class."},{"entry":"* @param dcNames"},{"entry":"* @return"},{"entry":"*\/"},{"entry":"public DCState[ ] getStates(String[ ] dcNames);"},{"entry":"\/**"},{"entry":"* Starts the pop Thread if it is not started. Seems to have a"},{"entry":"problem with that."},{"entry":"* Restart the monitor service if it is nesccessary ."},{"entry":"* @TODO Evaluate the behavior"},{"entry":"*\/"},{"entry":"public void startPoping( );"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"With reference now to , an exemplary method  to administer an application-centric resource provides an overview of utilization of the exemplary architectural model of  using various techniques, components, and resources described herein. As noted with reference to , above, the exemplary method  can be implemented using various types of GUIs, touch-screens, and pointing devices, all known independently in the art.","At operation , a user selects an application or functionality to manage. The user can either launch an operation on the application at operation , check a deploy-runtime state of an application at operation , or select application resources to configure at operation . Optionally, the user can select one or more business processes to enable at operation . The business processes may or may not be related to a particular application.","Once an operation is launched at operation , the user can additionally choose to check the deploy-runtime state at operation . Although not shown directly, the runtime state can include viewing DC runtime states, viewing reported error or fatal traces, or viewing monitoring metrics deployed by an application or other functionality. An overall check on the health of the application or other functionality can also be selected at operation . The health check can be implemented in various ways including, for example, simply displaying a green, yellow, or red status flag as discussed above with regard to . Alternatively, a simple status check such as \u201cenabled,\u201d \u201cdisabled,\u201d or \u201cOK\u201d can be displayed to the user. Additionally, the health check can also include a graphical display of monitoring counters, tests, or traces and logs of a given application or functionality. Each of the display options and associated codes for health tests is known independently in the art.","Should the user choose to select application resources to configure at operation , the GUI can display all configurable resources for a specific application or functionality. The user can simply select a resource, navigate to a specific configuration UI in the context of the selected resource at operation , and be able to graphically detect how other applications or functionalities may be affected on the overall enterprise system at operation . Other affected functionalities are described with reference to , above. Optionally, a generic configuration tool can also be launched at operation . The configuration tool passes the context of the application being configured so that the generic configuration tool automatically shows only data relevant for the particular application, thus saving the user a need to know what tools are available and how to find concrete application configurations in a particular tool.","In general, the user has multiple tools to change the configuration of an AS Java\u00ae engine, such as a resource editor. Thus, when the user performs a change in the resource editor, the user can see which functionalities are potentially affected. If the user changes the parameters of, for example, a destination, the user can see a list of all functionalities which use that destination. The resource editor can also call a generic functionality which takes as input a resource (e.g., such as various editable content including connectivity, properties, configuration, and so on) and returns any potentially affected FUNs.","Therefore, while various embodiments of the inventive nature of the system and method for implementing an application-centric resource are described with reference to assorted implementations and exploitations, it will be understood that these embodiments are illustrative only and that a scope of the present inventions is not limited merely to those described embodiments. Moreover, the application-centric systems and methods described herein may be implemented with facilities consistent with any hardware system or hardware systems either defined herein or known independently in the art using techniques described herein. Many variations, modifications, additions, and improvements are therefore possible.","Modules, Components, and Logic","Additionally, certain embodiments described herein may be implemented as logic or a number of modules, components, or mechanisms. A module, logic, component, or mechanism (collectively referred to as a \u201cmodule\u201d) may be a tangible unit capable of performing certain operations and is configured or arranged in a certain manner. In certain exemplary embodiments, one or more computer systems (e.g., a standalone, client, or server computer system) or one or more components of a computer system (e.g., a processor or a group of processors) may be configured by software (e.g., an application or application portion) or firmware (note that software and firmware can generally be used interchangeably herein as is known by a skilled artisan) as a module that operates to perform certain operations described herein.","In various embodiments, a module may be implemented mechanically or electronically. For example, a module may comprise dedicated circuitry or logic that is permanently configured (e.g., within a special-purpose processor) to perform certain operations. A module may also comprise programmable logic or circuitry (e.g., as encompassed within a general-purpose processor or other programmable processor) that is temporarily configured by software or firmware to perform certain operations. It will be appreciated that a decision to implement a module mechanically, in the dedicated and permanently configured circuitry, or in temporarily configured circuitry (e.g., configured by software) may be driven by cost and time considerations.","Accordingly, the term module should be understood to encompass a tangible entity, be that an entity that is physically constructed, permanently configured (e.g., hardwired), or temporarily configured (e.g., programmed) to operate in a certain manner and\/or to perform certain operations described herein. Considering embodiments in which modules or components are temporarily configured (e.g., programmed), each of the modules or components need not be configured or instantiated at any one instance in time. For example, where the modules or components comprise a general-purpose processor configured using software, the general-purpose processor may be configured as respective different modules at different times. Software may accordingly configure the processor to constitute a particular module at one instance of time and to constitute a different module at a different instance of time.","Modules can provide information to, and receive information from, other modules. Accordingly, the described modules may be regarded as being communicatively coupled. Where multiples of such modules exist contemporaneously, communications may be achieved through signal transmission (e.g., over appropriate circuits and buses) that connect the modules. In embodiments in which multiple modules are configured or instantiated at different times, communications between such modules may be achieved, for example, through the storage and retrieval of information in memory structures to which the multiple modules have access. For example, one module may perform an operation, and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then, at a later time, access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices and can operate on a resource (e.g., a collection of information).","Exemplary Machine Architecture and Machine-Readable Medium","With reference to , an exemplary embodiment extends to a machine in the form of an exemplary computer system  within which instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed. In alternative exemplary embodiments, the machine operates as a standalone device or may be connected (e.g., networked) to other machines. In a networked deployment, the machine may operate in the capacity of a server or a client machine in server-client network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a network router, a switch or bridge, or any machine capable of executing instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term \u201cmachine\u201d shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.","The exemplary computer system  includes a processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory  and a static memory , which communicate with each other via a bus . The exemplary computer system  may further include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)). The exemplary computer system  also includes an alpha-numeric input device  (e.g., a keyboard), a user interface (UI) navigation device or cursor control device  (e.g., a mouse), a disk drive unit , a signal generation device  (e.g., a speaker), and a network interface device .","Machine-Readable Medium","The disk drive unit  includes a machine-readable medium  on which is stored one or more sets of instructions and data structures (e.g., software instructions ) embodying or used by any one or more of the methodologies or functions described herein. The software instructions  may also reside, completely or at least partially, within the main memory  or within the processor  during execution thereof by the exemplary computer system ; the main memory  and the processor  also constituting machine-readable media.","While the machine-readable medium  is shown in an exemplary embodiment to be a single medium, the term \u201cmachine-readable medium\u201d may include a single medium or multiple media (e.g., a centralized or distributed database, or associated caches and servers) that store the one or more instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any tangible medium that is capable of storing, encoding, or carrying instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention, or that is capable of storing, encoding, or carrying data structures used by or associated with such instructions. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media. Specific examples of machine-readable media include non-volatile memory, including by way of exemplary semiconductor memory devices (e.g., EPROM, EEPROM, and flash memory devices); magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.","Transmission Medium","The software instructions  may further be transmitted or received over a communications network  using a transmission medium via the network interface device  utilizing any one of a number of well-known transfer protocols (e.g., HTTP). Examples of communication networks include a local area network (LAN), a wide area network (WAN), the Internet, mobile telephone networks, Plain Old Telephone (POTS) networks, and wireless data networks (e.g., WiFi and WiMax networks). The term \u201ctransmission medium\u201d shall be taken to include any intangible medium that is capable of storing, encoding, or carrying instructions for execution by the machine, and includes digital or analog communications signals or other intangible medium to facilitate communication of such software.","Although an overview of the inventive subject matter has been described with reference to specific exemplary embodiments, various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the present invention. Such embodiments of the inventive subject matter may be referred to herein, individually or collectively, by the term \u201cinvention\u201d merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is, in fact, disclosed.","The embodiments illustrated herein are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed. Other embodiments may be used and derived therefrom, such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. For example, although various embodiments are described in terms of a Java\u00ae server, a skilled artisan will recognize that the inventive features can be applied to other hardware and software-based systems as well. In a specific instance, the term \u201cMbeans\u201d is well-known in the art. However, any concept of Mbeans can be supplemented in other non-Java environments by any resource (e.g., a hardware or software \u201capplication\u201d that provides resource management such as, for example, getting information on and selecting applications, collecting statistics on an enterprise system, and notifying events such as faults or state changes to the enterprise system). Also, the term application can include a variety of interpretations. An application can involve a simple stand-alone tool for accomplishing a goal or can be a tool that invokes one or more development or technical components. The latter interpretation would likely most benefit from various inventive concepts discussed herein. Thus, the Detailed Description is not to be taken in a limiting sense, and the scope of various embodiments is defined only by the appended claims, along with the full range of equivalents to which such claims are entitled.","Moreover, plural instances may be provided for resources, operations, or structures described herein as a single instance. Additionally, boundaries between various resources, operations, modules, engines, and data stores are somewhat arbitrary, and particular operations are illustrated in a context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within a scope of various embodiments of the present invention. In general, structures and functionality presented as separate resources in the exemplary configurations may be implemented as a combined structure or resource. Similarly, structures and functionality presented as a single resource may be implemented as separate resources.","These and other variations, modifications, additions, and improvements fall within a scope of the present invention is represented by the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["Various ones of the appended drawings merely illustrate exemplary embodiments of the present invention and cannot be considered as limiting its scope.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 5B","FIG. 5A"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 5C","FIG. 5C"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
