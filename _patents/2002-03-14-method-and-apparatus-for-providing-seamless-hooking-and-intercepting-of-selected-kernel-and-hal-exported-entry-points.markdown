---
title: Method and apparatus for providing seamless hooking and intercepting of selected kernel and HAL exported entry points
abstract: In a computer system having at least one host processor, a method and apparatus for providing seamless hooking and interception of selected entrypoints includes finding the IDT for each CPU which can include scanning the HAL image for the HAL PCR list. Saving the interrupt handler currently mapped in the CPU's interrupt descriptor table. Patching the original interrupt into the new interrupt handler. Storing the new interrupt exception into the CPU's interrupt descriptor table. Hooking a select entrypoint by first determining if the entrypoint begins with a one byte instruction code. If it does, saving the address of the original entrypoint, saving the original first one byte instruction, and patching the new interrupt intercept routine to jump to the original entrypoint's next instruction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07039739&OS=07039739&RS=07039739
owner: Hewlett-Packard Development Company, LP.
number: 07039739
owner_city: Houston
owner_country: US
publication_date: 20020314
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a Continuation of application Ser. No. 09\/788,899 filed on Feb. 20, 2001, now U.S. Pat. No. 6,480,919, which is a Continuation of application Ser. No. 09\/152,597 filed on Sep. 14, 1998, now U.S. Pat. No. 6,275,893.","The present invention relates to computer systems, and more particularly, but not by way of limitation, to a method and apparatus for providing seamless hooking and interception of selected entrypoints of an operating system, such as entrypoints of either the kernel or the hardware abstraction layer.","One of the key factors in the performance of a computer system is the speed at which the central processing unit (CPU) operates. Generally, the faster the CPU operates, the faster the computer system can complete a designated task. Another method of increasing the speed of a computer system is through the use of multiple CPUs. This is commonly known as multiprocessing. With multiple CPUs, algorithms required to complete a task can be executed substantially in parallel as opposed to their sequential execution, thereby decreasing the total time to complete the task.","However, as CPUs are dependent upon peripherals for providing data to the CPU and storing the processed data from the CPU, when a CPU needs to read or write to a peripheral, the CPU is diverted from a current algorithm to execute the read\/write transaction. As can be appreciated, the length of time that the CPU is diverted is typically dependent upon the speed of the I\/O transaction.","One advancement developed to increase the efficiency of I\/O transactions is the intelligent input\/output (IO) architecture. In the IO approach to I\/O, low-level interrupts are off loaded from a CPU to I\/O processors (IOPs). The IOPs are additional processors that specifically handle I\/O With support for message-passing between multiple independent processors, the IO architecture relieves the host processor of interrupt-intensive I\/O tasks, greatly improving I\/O performance especially in high-bandwidth applications such as networked video, groupware, and client\/server processing.","Typical IO architectures use a \u201csplit driver\u201d model which inserts a messaging layer between the portion of the device driver specific to the operating system and the portion of the device driver specific to the peripheral. The messaging layer splits the single device driver of today into two separate modules, an Operating System Service Module (OSM), and a Downloadable Driver Module (DDM). The only interaction one module has with another module is through this messaging layer.","The OSM comprises the portion of the device driver which is specific to the operating system. The OSM interfaces with the operating system of the computer system (which is commonly referred to in the art as the \u201chost operating system\u201d) and is executed by the CPU. Typically, a single OSM may be used to service a specific class of peripherals. For example, one OSM would be used to service all block storage devices, such as hard disk drives, and CD-ROM drives.","The DDM provides the peripheral-specific portion of the device driver that understands how to interface to the particular peripheral hardware. To execute the DDM, an IOP is added to the computer system. A single IOP may be associated with multiple peripherals, each controlled by a particular DDM, and contains its own operating system such as, for example, the IO Real-Time Operating System (iRTOS). The DDM directly controls the peripheral, and is executed by the IOP under the management of the iRTOS.","In general operation, the communications model used in the IO architecture is a message passing system. When the CPU seeks to read or write to a peripheral in an IO system, the host operating system makes what is known as a \u201crequest\u201d. The OSM translates the request by the host operating system and, in turn, generates a message. The OSM sends the message across the messaging layer to the DDM associated with the peripheral which processes it appropriately to achieve a result. Upon completion of the processing, the DDM sends the result back to the OSM by sending a message through the messaging layer. It can be appreciated that to the host operating system, the OSM appears just like any other device driver.","By executing the DDM on the IOP, the time-consuming portion of transferring information from and to the peripheral hardware is off-loaded from the CPU to the IOP With this off-loading, the CPU is no longer diverted for inordinate amounts of time during an I\/O transaction. Moreover, because the IOP is a hardware component essentially dedicated to the processing of the I\/O transactions, the problem of I\/O bottlenecking is mitigated. Accordingly, any performance gains to be achieved by adding an additional or faster CPU to the computer system may be unhindered by the I\/O processing bottleneck.","There are three common approaches to implement the IO architecture. The first is an IOP installed on the motherboard of the computer system. In this approach, the IOP is installed directly on the motherboard and is used for IO processing. In this particular configuration, the IOP is often used as a standard PCI bridge, and can also be used to bring intelligence to the PCI bus.","The second approach is to include an IOP on adapter cards, such that with an IOP on an adapter card, IT managers can add intelligent I\/O to the computer system by adding an additional adapter.","The third approach is to install the IOP in the computer system via an optional plug-in card. This allows systems to be populated with one IOP per host adapter plugged into a slot instead of on the motherboard.","Although the intent of IO was the implementation of portable, high-performance intelligent I\/O systems there exists a number of problems with IO architecture. As is often the case, one problem is cost. The inclusion or the addition of additional hardware and extra processors (the IOPs) to a computer system will ultimately raise the price of the system.","Another problem arises as a result of the direction the computer industry has taken in the adoption of an IOP \u201cstandard\u201d. Currently, the computer industry is pushing to adopt the Intel i960 processor for the industry standard IO IOP Some of the problems with the i960 include computing and speed problems, especially when the i960 is compared to other existing processors on the market.","In a multiprocessor system environment one proposed solution to the i960 IOP is to use software to solely dedicate at least one of the host processors to controlling the I\/O. As can be appreciated, current system processors have very superior computing power and speed as compared with the i960. Another advantage of a host processor IOP is that no additional hardware needs to be purchased or added. This is especially true when upgrading an existing computer system to be IO compliant. However, in making a computer system IO compliant by dedicating a host processor, many problems have been encountered. One problem is making the dedicated host processor appear to the rest of the computer system to be an IO IOP in a seamless manner. It is desired that a computer system having a host processor IOP appear to a user to be a typical IO compliant computer system in all aspects including software interaction and hardware interaction.","Many existing computer systems utilize kernel based operating systems In a kernel based operating system, such as Windows NT, the operating system has a layered architecture. In this type of operating system, the kernel is at the core of the layered architecture and manages only basic operating system functions. The kernel is responsible for thread dispatching, multiprocessor synchronization, and hardware exception handling.","Another piece of software often associated with the operating system is the hardware abstraction layer (HAL). The HAL is an isolation layer of software that hides, or abstracts hardware differences from higher layers of the operating systems. Because of the HAL, the different types of hardware all look alike to the operating system, removing the need to specifically tailor the operating system to the hardware with which it communicates. Ideally, the HAL provides routines that allow a single device driver to support the same device on all platforms.","HAL routines can be called from both the base operating system, including the kernel, and from device drivers. The HAL enables device drivers to support a wide variety of I\/O architectures without having to be extensively modified. The HAL is also responsible for hiding the details of symmetric multiprocessing hardware from the rest of the operating system.","In the early days of Windows NT, it was common practice for the hardware OEMs to be responsible for providing the HAL software for their particular hardware to the manufacturer of the operating system. As multiprocessing systems became more commonplace, there was a shift from the hardware OEMs supplying the HAL routines, to the OS manufacturer supplying the HAL routines for all the hardware OEMs.","Therefore, as can be further appreciated, when making of a computer system IO compliant by dedicating at least one of the host processors for an IOP, it is not practical to modify an existing operating system or HAL Rather it would be more advantageous to provide \u201croutines\u201d that are seamlessly hooked into the operating system.","The present invention overcomes the above identified problems as well as other shortcomings and deficiencies of existing technologies by providing a method and apparatus for seamless hooking and interception of selected entrypoints of an operating system, such as entrypoints of either the kernel or the hardware abstraction layer.","The present invention further provides, in a computer system having at least one host processor, a method and apparatus for providing seamless hooking and interception of selected entrypoints by first scanning the HAL image for the HAL PCR list, whereupon the interrupt handler currently mapped in the CPU's interrupt descriptor table is then saved. The original interrupt is then patched into a new interrupt handler. Then the new interrupt exception is stored into the CPU's interrupt descriptor table. Subsequent thereto, a select entrypoint is hooked by first determining if the entrypoint begins with a one byte instruction code. If it does, the address of the original entrypoint is saved. The new interrupt intercept routine is then patched to jump to the original entrypoint's next instruction for selected conditions.","With reference to , , ,  and  there are shown block diagrams illustrating an exemplary embodiment of the present invention. The purpose of these block diagrams is to illustrate, among other things, the features of the present invention and the basic principles of operation thereof. These block diagrams are not necessarily intended to schematically represent particular modules of circuitry or control paths.","Referring now to , there is illustrated a schematic block diagram of a computer system . As illustrated, computer system  is a multiprocessor system and contains the following: multiple host processors , ,  and ; module  which contains the operating system; module  which contains IO software; and associated hardware . As depicted, the associated hardware  includes items such as a LAN controller , SCSI controller , audio controller , and graphics controller .","As computer system  is a multiprocessing computer, it is able to execute multiple threads simultaneously, one for each of the processors therein Further it is contemplated that the processors in computer system  can operate either asymmetrically, symmetrically, or in a combination thereof.","Although the present invention is illustrated in a computer system having four host processors, it is contemplated that the present invention could also be utilized in a computer system with virtually any number of host processors, including, but not limited to a single host processor.","In this particular embodiment of computer system , the IO software of module  is utilized to dedicate one or more of the processors (such as processor ) for use as a input\/output processor (IOP) such that computer system  is an IO compliant computer system.","Referring now to , there is illustrated a more detailed block diagram of an exemplary architecture for operating system . As depicted the architecture of operating system  is a kernel based operating system. Operating system  includes subsystems  (which operate in user mode), and system or executive services  (which operate in kernel mode). Executive services  are made up of multiple components, such as the I\/O manager , the object manager, the security reference monitor , the process manager , the local procedure call facility , the virtual memory manager, , the kernel , and the hardware abstraction layer (HAL) . The components that make up the executive services provide basic operating system services to subsystems  and to each other. The components are generally completely independent of one another and communicate through controlled interfaces.","Still referring to , the I\/O manager  manages all input and output for the operating system including the managing of the communications between drivers of computer system . Object manger  is for creating, managing, and deleting executive objects. Security reference monitor  is utilized to ensure proper authorization before allowing access to system resources such as memory, I\/O devices, files and directories. Process manager  manages the creation and deletion of processes by providing a standard set of services for creating and using threads and processes in the context of a particular subsystem environment. Local procedure call facility  is a message-passing mechanism for controlling communication between the client and server when they are on the same machine. Virtual memory manager  maps virtual addresses in the process' address space to physical pages in the computer's memory.","Still referring to , kernel  is the core of the architecture of operating system  and manages the most basic of the operating system functions. It is responsible for thread dispatching, multiprocessor synchronization, and hardware exception handling.","Still referring to , in this particular embodiment applications utilized in computer system  are kept separate from the operating system  itself. Operating system  runs in a privileged processor mode known as kernel-mode and has access to system data and hardware. Applications run in a nonprivileged processor mode known as user mode and have limited access to system data and hardware through a set of tightly controlled application programming interfaces (APIs) or entrypoints.","In this exemplary embodiment, good results have also been achieved in the present invention by using a microkernel-based operating system for operating system . In a microkernel-based operating system, only the functions that can not be reasonably performed elsewhere remain in the kernel. The functionalities that are removed from the standard kernel are put in subsystems . Subsystems  provide the traditional operating system support to applications through a set of APIs.","Hardware abstraction layer (HAL)  is an isolation layer of software that hides, or abstracts hardware differences from higher layers of the operating system. Through the utilization of HAL , the different types of hardware all \u201clook\u201d alike to the operating system. The HAL  removes the need to specifically tailor the operating system to the hardware with which it communicates. Routines of HAL  can be called from both the base operating system (including the kernel) and from the device drivers.","In this exemplary computer system, the processors \u2013 provide two mechanisms for interrupting program execution interrupts and exceptions. An interrupt is an asynchronous event that is typically triggered by an I\/O device. An exception is a synchronous event that is generated when the processor detects one or more predefined conditions while executing an instruction.","Interrupts are forced transfers of execution from the currently running program or task of a processor to a special procedure to task called an interrupt handler. Interrupts typically occur at random times during the execution of a program, in response to signals from hardware. They are used to handle events external to the processor, such as requests to service peripheral devices. Software can also generate interrupts by executing the INT n instruction.","Generally a processor's interrupt handling mechanism allows interrupts to be handled transparently to application programs and the operating system or executive. When an interrupt is signaled, the processor halts execution of the current program or task and switches to an interrupt handler procedure that is written specifically to handle the interrupt condition. The processor accesses the interrupt handler procedure through an entry in the interrupt descriptor table (IDT).","When execution of the interrupt handler is complete, the processor resumes execution of the interrupted procedure or task. The resumption of the interrupted procedure or task happens without loss of program continuity, unless the interrupt caused the currently running program to be terminated.","As described hereinabove, a processor can receive interrupts from two sources. The first is from external (hardware generated) interrupts. External interrupts are generally received through pins on the processor or through the local APIC serial bus.","The second source of interrupts is from software-generated interrupts. A very common software-generated interrupt is the INT n instruction. The INT n instruction generates a call to the interrupt or exception handler specified with the destination operand. The destination operand specifies an interupt vector number. The interrupt vector number specifies an interrupt descriptor in the interrupt descriptor table (IDT), i.e., it provides index into the IDT. The selected interrupt descriptor in turn contains a pointer to an interrupt or exception handler procedure.","A particular call to interrupt procedure is the Int. The Int instruction generates a special one byte opcode (CC) that is intended for calling the debug exception handler. This one byte form for Int is valuable because it can be used to replace the first byte of any instruction with a breakpoint, including other one-byte instructions, without over-writing other code.","Referring now to , there is illustrated a block flow diagram  illustrating a routine or method for seamlessly hooking and unhooking selected exported entrypoints without the need to provide a special kernel or HAL. This is performed so that an alternative routine can be selectively substituted for the selected entrypoint routines. Although illustrated as part of the IO software, it is contemplated that the present invention is not limited to this type of software, rather could be utilized in virtually any type of software or hardware.","As depicted by block , the IDT for each CPU is found. This step could include scanning the HAL image for each of the processors in the computer system for the table of system processor control registers (PCRs). There is generally one PCR per processor in the computer system . Subsequent thereto, as indicated by block , the original Int handler mapped in each CPU's IDT entry  is saved, this includes saving the contents of the original Int vector information. Then, as indicated by block , the original Int handler code is patched into the new Int handler code. This is performed so that a direct jump can be made to the original Int handler code if the exception is not for interception.","Then, as indicated by block , the new Int vector information is loaded into the IDT of each of the processors. This code is responsible for intercepting Int exceptions and dispatching the new Int exceptions to a corresponding new routine. Any Int's not created by the new routine will be forwarded to the original dispatch handler provided by the operating system.","Then, as indicated by block , the selected entrypoints, from either the HAL or kernel are hooked. Generally, blocks \u2013 are performed during the initialization sequence of the computer system. An exemplary hooking routine is given in detail hereinbelow with reference to .","Still referring to , as indicated by block , entrypoints no longer requiring interception are then unhooked. An example of when this occurs is at a select time after the initialization sequence, certain entrypoints may no longer be needed whereby these entrypoints should operate in a \u201cnormal\u201d routine, thus the unneeded entrypoints are unhooked.","Referring now to , there is illustrated a block diagram  illustrating an exemplary embodiment of a hooking routine in accordance with the principles of the present invention.","As depicted in block , a determination is first made whether a selected entrypoint begins with a one byte instruction. If it does not begin with a one byte instruction, the \u201cno\u201d branch is followed to block  where the routine ends without hooking the selected entrypoint.","If the determination is made that the entrypoint begins with a one byte instruction, the \u201cyes\u201d branch is followed to block . The address of the original entrypoint are saved in the data structure of the new or substitute routine. As indicated by block , the original 1 byte instruction is then saved into the new Int intercept routine. Then, as indicated by block , the new Int intercept routine is patched to jump to the original entrypoint's next instruction. This is done for instances when the encountered Int is not the new Int.","Then, as indicated by block , the first byte of the original entrypoint is replaced by an Int instruction. This is performed, such that all callers of this particular entrypoint will cause an Int exception to occur and vector to the new driver's INT handler.","Referring now to , there is illustrated a block flow diagram  of an exemplary embodiment of how the hooked entrypoint is handled in accordance with the principles of the present invention when an INT exception occurs. Because the first byte location of the hooked entrypoint is the INT, the INT exception is executed by all callers of the entrypoint. As depicted by block  whenever an INT is encountered, a determination is made as to the caller or origin of the interrupt. If the determination is made that the caller of the interrupt is not a caller of interest for the particular new routine, then the \u201cno\u201d branch is followed to block , where the routine jumps back to the original routine for the caller of the interrupt. If the determination is made that the caller of the interrupt is a caller of interest for the particular new routine the \u201cyes\u201d branch is followed to block , where a jump is made to the new routine.","Therefore, as can be appreciated by one of ordinary skill in the art, the present invention provides, in a computer system having at least one host processor, a method and apparatus for providing seamless hooking and interception of selected entrypoints. The HAL image for the HAL PCR list is scanned, whereupon the interrupt handler currently mapped in the CPU's interrupt descriptor table is saved. The original interrupt is then patched to the new interrupt handler. Then the new interrupt exception is stored into the CPU's interrupt descriptor table. A select entrypoint is hooked by first determining if the entrypoint begins with a one byte instruction code. If it does, the address of the original entrypoint is saved. The new interrupt intercept routine is patched to jump to the original entrypoint's next instruction for selected conditions.","Although a preferred embodiment of the present invention has been illustrated in the accompanying Drawings and described in the foregoing Detailed Description, it will be understood that he invention is not limited to the embodiment disclosed, but is capable of numerous rearrangements, modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims."],"BRFSUM":[{},{}],"heading":["FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete understanding of the present invention may be had by reference to the following Detailed Description and appended claims when taking in conjunction with the accompanying Drawings wherein:",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
