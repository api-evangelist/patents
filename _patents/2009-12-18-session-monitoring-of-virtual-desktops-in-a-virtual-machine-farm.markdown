---
title: Session monitoring of virtual desktops in a virtual machine farm
abstract: Disclosed are techniques for determining the status of virtual machine sessions on a computing device for a user by reading from a memory location written to by a program executing within a virtual machine. The memory location is preferably a registry key that contains the status of a remote user session operating on a guest operating system operational on the virtual machine, the virtual machine executing in a virtual environment comprising a plurality of virtual machines operating on a computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949408&OS=08949408&RS=08949408
owner: Microsoft Corporation
number: 08949408
owner_city: Redmond
owner_country: US
publication_date: 20091218
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["Remote computing systems may enable users to access resources hosted by the remote computing systems. Servers on the remote computing systems can execute programs and transmit signals indicative of a user interface to clients that can connect by sending signals over a network conforming to a communication protocol such as the TCP\/IP protocol. Each connecting client may be provided a session, i.e., an execution environment that includes a set of resources. Each client can transmit signals indicative of user input to the server and the server can apply the user input to the appropriate session. The clients may use protocols such as the Remote Desktop Protocol (RDP) to connect to a server resource. Protocols such as RDP typically handle graphics, device traffic such as USB, printer keyboard and mouse and in addition, virtual channels for application between server and a client. The terminal server hosts client sessions which can be in hundreds in a typical server configuration.","Enabling remote connections to centralized desktops hosted in virtual machines is commonly used for centralized computing scenarios. Deployment of virtual desktops requires load balancing of host computers that host virtual machines, placement of virtual machines on the hosts, and properly orchestrating the startup, wake up, and preparation of virtual machines for receiving connections.","Aspects of the invention are embodied in a system adapted to connect a client computing device to one of a plurality of virtual machines executing on a plurality of servers. The system preferably facilitates the connection of a client computer to one of a plurality of virtual machines executing on a plurality of servers. The server is a computing device comprising a processor and has a memory that communicates with the computing device when the system is operational. Alternatively methods can be carried out at least partially on the computing device and instructions can be stored on a computer readable medium that carry out aspects of the invention when executed.","In general, a host module determines the status of user sessions operation on a virtual machine by polling a memory location, e.g., a registry key, in which a virtual machine reports the status of user sessions on the virtual machine. The host module can, in turn, report the status information to a server that uses the status information to reconnect remote computing devices with preexisting user sessions. The virtual machine reports status of user sessions by writing the status of said user sessions to the memory location, e.g., the registry key.","Preferably, a virtualization manager polls the values stored in the memory, e.g., the registry key. Preferably, the polling can occur at different rates based on the previous state of the user session. The host module is preferably operating in a second operating system that is operational on the computing device.","Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the inventions. Certain well-known details often associated with computing and software technology are not described in the following disclosure for the sake of clarity. Furthermore, those of ordinary skill in the relevant art will understand that they can practice other embodiments of the disclosed subject matter without one or more of the details described below. While various methods are described with reference to steps and sequences in the following disclosure, the description as such is for providing a clear implementation of embodiments of the disclosed subject matter, and the steps and sequences of steps should not be taken as required to practice the invention.","It should be understood that the various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus disclosed herein, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage media that may be loaded into and executed by a machine, such as a computer. In the case of program code execution on programmable computers, the computing device generally includes a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may implement or utilize the processes described in connection with the disclosed subject matter, e.g., through the use of an application programming interface (API), reusable controls, or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","Aspect of a computing environment in which the invention may have application is in virtualized computing. In such a virtualized computing environment, a plurality of virtual machines, each having an independent operating system, operate on the same underlying hardware. Access to the underlying physical hardware by each virtual machine is governed by a program that is sometimes referred to as a virtual machine monitor. A variations of a virtual machine monitor is referred to as a hypervisor.  illustrates a virtual machine environment , with a plurality of virtual machines , , comprising a plurality of virtual processors , , , , and corresponding guest operating systems , . The plurality of virtual processors , , ,  can provide emulation of various hardware processors ,  and architectures. The virtual machines ,  are maintained by a virtualizing manager  (e.g., a hypervisor) which may have a scheduler  and other components (not shown). The virtualizing manager  mediates the access that virtual machines ,  have to hardware .","In some instances, a user may desire to access computing applications remotely, i.e., applications that are running on a separate computing device. One implementation provides a user with such access through a remote desktop. A remote desktop system is a computer system that maintains applications that can be remotely executed by client computer systems. Input is entered at a client computer system and transferred over a network (e.g., using protocols based on the International Telecommunications Union (ITU) T.120 family of protocols such as Remote Desktop Protocol (RDP)) to an application on a server, such as terminal server (TS). The application processes the input as if the input were entered at the server.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["200","202","204","202","206","208","210","212","206","204"]},"When a remote desktop client connects to a terminal server via a terminal server gateway (not shown), the gateway may open a socket connection with the terminal server and redirect client traffic on the RDP port or a port dedicated to remote access services. The gateway may also perform certain gateway specific exchanges with the client using a terminal server gateway protocol transmitted over HTTPS.","During the TS Session , an application running in the session generates output in response to the received input  and the output  is transferred over the network to the TS client machine . The TS client machine  runs a TS client program that presents the output data. Thus, input is received and output presented at the TS client machine , while processing actually occurs at the terminal server . A session can include a shell and a user interface such as a desktop, the subsystems that track mouse movement within the desktop, the subsystems that translate a mouse click on an icon into commands that effectuate an instance of a program, etc. While an application is rendered, a desktop environment may still be generated and hidden from the user. It should be understood that the foregoing discussion is exemplary and that the presently disclosed embodiments may be implemented in various client\/server environments and not limited to a particular terminal services product.","An example of a remote access system is Terminal Services\u2122 systems provided by the Microsoft\u00ae Corporation. A Terminal Services\u2122 system is discussed in the examples below; however, it is to be appreciated that the techniques discussed are applicable to other remote access systems such as Virtual Network Computing (VNC), Citrix XenApp, and the like.","In a further detailed illustration of a remote computing environment, a connection broker controls the allocation of sessions to users communicating in a remote access system environment. A broker allocates a session to a user based on session state information stored in the broker. Session state information may include, for example, session IDs, user names, names of the servers where sessions are residing, the number of active sessions in each server computer, and so on. As used herein a session may be a virtual desktop session or a terminal services session.","In a remote access system environment, there may be more than one server computer that can service a particular user. As such there is a redirection process that determines where to send a request from a remote computing device that is attempting to connect to a server. In that instance, the remote computing device first connects to a redirector that provides load balancing, etc. of clients. In such a case, a redirection server typically first receives the request for a connection. The redirection server then accepts the connection request and queries the connection broker to determine where the user can be redirected. The connection broker analyzes the session state information of that particular environment and identifies a server to which the user can be redirected. The identified server may posses a session previously accessed by the user, but later disconnected, to which the user can be reconnected again. In an embodiment, an identified server may provide a new session to which the user can be connected, provided the user does not posses any other existing sessions.","The broker sends information to the redirecting server which in turn returns the information to a client to enable the client to establish a connection with the identified server. For example, the information may include a machine ID, a session ID, and location of the identified server. The redirecting server analyzes the information received and redirects the user to the identified server. Once the user establishes the connection with the identified server, the user can access applications present in the identified server. These applications may be compatible to the broker logic that was used in identifying the server from the terminal services environment.","The systems described above may be used to connect, for example, a client computer to one of a plurality of virtual desktops running on a server or to a session on a terminal server. The client computer examines a redirection token in a remote desktop protocol (RDP) packet. The client computer connects to one of the many virtual desktops based on information contained in the redirection token. Use of the redirection token enables integration of the session hosted with one or more virtual machines (VMs) (or terminal servers) with the existing terminal session deployment model. The client computer, using the token, can be appropriately directed to either a virtual desktop or terminal session.","In another embodiment, an RDP client computer is connected to one of the virtual desktops using a connection broker and a pool manager. When the client computers connected, the connection broker assigns the client computer to a virtual desktop hosted in a VM on a VM host server, and the pool manager indicates which of the virtual desktops are available to be assigned.","In a further embodiment, the RDP client computer is connected to a virtual desktop. The RDP client computer indicates an identifier such as pool name that is used by the broker to generate an internet protocol (IP) address to establish connection between the client computer and the virtual desktops. Since the individual virtual desktop IP address is not known until the VM is orchestrated (woken up, started, etc), only a single network name of the redirector is initially required to be externally exposed to the clients. The construction of the virtual desktop and terminal services integration system and an environment in which this integration system may be enabled by techniques is set forth first below with reference to the figures.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["502","504","508","524","510","512","508","524","508","504","502"],"i":["a","n","a","n"]},"Client devices (-) may be any computing device capable of communicating with a network , and are also referred to as terminal services clients. In one embodiment, the client devices (-) are general purpose desktop computing devices assigned to users (e.g., employees) that are connected to the wired network . Although the illustrated client devices (-) are depicted as a desktop PC, the client devices may be implemented as any of a variety of conventional computing devices including, for example, a server, a notebook or portable computer, a workstation, a mainframe computer, a mobile communication device, a PDA, an entertainment device, a set-top box, an Internet appliance, a game console, and so forth. In one embodiment, client devices (-) transmit requests for content, send content and receive content using an RDP protocol . Client devices (-) receive content in an RDP packet  format from redirector device .","Network  may be any type of communications network, such as a local area network, wide area network, cable network, the internet, the World Wide Web or a corporate enterprise network. Content is transmitted from and received by client devices (-) in a packetized format via network  for delivery to and from redirector device .","Redirector device  includes a processor . Included in memory (not shown) may be a redirector module . Broker module  includes a connection broker module , a session cache  and a pool manager module . Broker module  may be disposed in a server, such as server , may be disposed in a standalone server or may be disposed within redirector device .","Server  includes a plurality of virtual desktops  (-), generally known as virtual machines. Although the illustrated virtual desktops (-) are shown within  server, the virtual desktops (-) may be individually implemented as any of a variety of conventional computing devices including, for example, a server, a notebook or portable computer, a workstation, a mainframe computer, a mobile communication device, a PDA, an entertainment device, a set-top box, an Internet appliance, a game console, and so forth. Redirector  communicates with Broker module  on behalf of from clients (-) to assist with the delivery of RDP packets to broker module . Redirector  also transmits requests from broker module  to establish a connection between one of virtual desktops (-) and client devices (-). Such requests are received in broker  by connection broker . Broker  also receives from server  an indication of which virtual desktops (-) are available.","Broker  also receives a session cache information  indicating criteria which sessions are currently active for various virtual desktops (-). Connection broker  then provides an indication to redirector  indicating which one of the virtual desktops (-) are available for connection (i.e., virtual machines with no active sessions) to one of the client devices (-). In one embodiment, connection broker  may indicate that one of client devices (-) may connect to terminal server . The redirector  feeds a packet  to one of client devices (-) containing a redirection token , indicating an IP address of the virtual desktop. Also the redirector  sends an indication of that the virtual machine is now available for connection to one of client devices (-). In this embodiment, the broker maintains a list of the names of the virtual desktops and the corresponding IP address of the virtual desktop . Thus when an identifier is provided with the client request, the re-director  communicates with broker to determine a connection between one of the client devices (-) with the corresponding virtual desktop . The redirector  supplies the IP address of the virtual desktop to the client device  along with the name of the virtual machine so that client device  may directly connect and authenticate to the virtual desktop.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4","b":["600","502","502","500"],"i":["a","n"]},"The client device  has process capabilities and memory suitable to store and execute computer-executable instructions. In this example, client device  includes one or more processors , memory  and is coupled with network interface . The memory  may include volatile and nonvolatile memory, removable and non-removable media implemented in any method or technology for storage of information, such as computer-readable instructions, data structures, program modules or other data. Such memory includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, RAID storage systems, or any other medium which can be used to store the desired information and which can be accessed by a computer system.","Stored in memory  are operating system module , application(s) , and RDP protocol handler module . The modules may be implemented as software or computer-executable instructions that are executed by the one or more processors .","The operating system module  contains an operating system that may enable the other modules of the client device  to receive, process, and exchange data. In addition, the operating system module  may also enable the client device  to communicate with other devices across a network  using network interface .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["700","518","518","500","518"],"i":["a","n"]},"The virtual desktop  has process capabilities and memory suitable to store and execute computer-executable instructions. In this example, virtual desktop  includes one or more processors  (which in the case of a virtual machines system would be virtual processors) and memory .","Stored in memory  are operating system module , one or more application(s) , and database . The modules may be implemented as software or computer-executable instructions that are executed by the one or more processors .","The operating system module  contains an operating system that may enable the other modules of the virtual desktop  to receive, process, and exchange data. In addition, the operating system module  may also enable the virtual desktop  to communicate with other devices via redirector device .","The flow diagram in  depicts exemplary processes - used by processor  (see ) in redirector device  and broker  (see ), and represents a sequence of operations that can be implemented in hardware, software, and a combination thereof. The flow diagram in  depicts exemplary processes - used by processor  (see ) in client device  (see ), and also represents a sequence of operations that can be implemented in hardware, software, and a combination thereof. The flow diagram in  depicts exemplary processes - used by processor (not shown) in server  (see ), and additionally represents a sequence of operations that can be implemented in hardware, software, and a combination thereof. In the context of software, the blocks represent computer-executable instructions that, when executed by one or more processors, perform the recited operations.","Generally, computer-executable instructions include routines, programs, objects, components, data structures, and the like that perform particular functions or implement particular abstract data types. The order in which the operations are described is not intended to be construed as a limitation, and any number of the described blocks can be combined in any order and\/or in parallel to implement the process. For discussion purposes, the processes are described with reference to , although it may be implemented in other system architectures.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["800","508","524","502","518","512","802","502","518","522","526","804","806","530","808","530","518","530","552","810","530","526"],"i":["a","n","a","n"]},"In block , the connection broker  reads a table in policy module  indicating which of the virtual desktops (-) may be used with a particular client device . Such elements of the table may be set by an administrator. In accordance with the table, the virtual desktop  is selected and the IP address for the virtual desktop  and identity (machine name) is provided to redirector  in block . Redirector  then sends the IP address and the corresponding name to the client device . In block , a redirection packet is sent to the client along with the virtual desktop identity so that the client can connect directly to the virtual desktop and authenticate the connection.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 7","b":["900","502","518","512","902","502","518","502","512","904","502","508","502","906","518","512"],"i":["a","n"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 8","b":["1000","510","502","1002","510","518","1004","510","508","1006","510","518","1008","510","510","502"]},"As noted previously, a user may disconnect from a session or virtual desktop while the session or virtual desktop is still active. When the user reconnects to that session or virtual desktop, the user expects the system to be in the previous state. Consequently, when a user reconnects after disconnecting from a session or virtual desktop, the redirector and broker must locate the previous session so that the user can properly reconnect. The flow chart of  further illustrates aspect of the system described with reference to the system of  and further illustrates aspects of the invention that illustrate how a server tracks virtual desktops that are active within virtual machines operating on a server.","As illustrated in  and as previously described with respect to , a virtualization environment  may have a plurality of virtual machines - operable on a single server system. Some of the virtual machines may be active, i.e. running current remote desktop user sessions. For example, virtual machine  is illustrated as having an active virtual desktop A. Others of the virtual machines may be in a dormant state with no current remote desktop sessions connected. Others may have a current remote desktop connection that is inactive where the previous state of the desktop has been saved. A user who reconnects to such an remote desktop connection may desire or expect to see the previous connection state of the remote desktop. All of the various states of the virtual machines and the states of their respective remote desktop sessions need to be tracked on the server computer and preferably reported to the connection broker so that users can reconnect to disconnected sessions with the previous state.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 9","FIG. 3"],"b":["912","914","914","518","140","914","918","510","918","524","528"]},"Preferably, session monitoring is based on Microsoft's Hyper-V Key-Value-Pair Integration Component (KVP IC) architecture that allows data exchange between Host and Guest partitions. By using KVP IC the Host partition provides an interface for data exchange by using a specified registry key in the Guest partition. To retrieve data from Guest partition, the Host partition computer instructions make queries to Hyper-V. Consequently, KVP session monitoring has two parts: guest and host.","The guest part is implemented as a separate library that is linked to a Session Environment service . The main functions of Session Environment Service  is to receive session notifications sent to the service by the Guest OS, enumerate local sessions and save session data to a registry key, e.g., HKLM\\Software\\Microsoft\\Virtual Machine\\Guest\\Sessions. Preferably, the sessions are saved in the following format:\n\n","Preferably, this information should be stored in no more that about 153 characters. Current implementations of KVP IC support text strings of up to 1024 characters long. As a result, a current embodiment can support around 6 sessions. If value of Sessions key in the guest's registry exceeds 1024 characters, host will see \u201cSessions\u201d property with empty value. In reality we will be able to store a lot more sessions than 6.","Preferably, Session Environment Service  will check whether it is running in a virtual machine so that it can avoid CPU-overhead of writing registry keys when running in a NON-virtual environment (i.e. Physical OS). That can be determined by enumerating all hardware devices to detect a virtual machine bus for example.","In one embodiment, the KVP session monitoring is based on continuous polling of registry  values by Hyper-V. In general, the last value of the \u201cSessions\u201d string is compared to the new value. This embodiment relieves the need to use, for example, a networking connection between the Host and Guest OS and avoids the need for network configuration of the Guest OS that may otherwise be needed.","Preferably, the default polling rate used to query value of \u201cSessions\u201d key are: a fast polling rate of 3 seconds right after orchestration, a medium polling rate of 15 seconds while a user is connected to a VM, and a slow polling rate of 1 minute when no user is connected actively. Polling is for implementation that do not support asynchronous notifications of changed registry-keys. If asynchronous notifications of changed registry-keys was available, that process could also be used. The purpose of the different polling rates is to try to minimize race-conditions wherein a Connection Broker may not have up to date information regarding the session information.","The Session notification module is responsible for simulating session change events by comparing the previous (i.e. the last) and the new values of \u201cSessions\u201d string. In general, a module, referred to as CompareSessionMaps, preferably takes two indexed arrays with session information parsed from the previous and new values of \u201cSessions\u201d strings.  provides a flow chart describing the process for determining the session states. In one embodiment, the process is performed twice. First it is performed as comparing previous values to new values to determine which sessions have changed. Second, it is performed as comparing new values to previous values to determine which sessions are gone.","At step  two session maps are compared. The first time, the comparison will compare the previous values to the new values. In step , if the session is not found then it is an indication that the session no longer exists. Consequently, at step  a determination is made to simulate a logout. The session is erased from the host list of sessions at step . The other case, at step  is when the new sessions are compared to old sessions. In that case, when there is a new session, it would not be found at step  and no logoff would be simulated at step . In that case, a new session is reported at step .","If a session is found at step , i.e. there are values for both the previous and the new sessions, then a comparison is made to determine if there has been a change to the username or the domain name at step . If so, the previous session is logged off at step . If the station has changed as determined at step , then there is an indication that the previous session was disconnected at step . If the state has changed as determined at step , then the new session information is updated at step  and the session is returned at step .","Any of the above mentioned aspects can be implemented in methods, systems, computer readable media, or any type of manufacture. For example, a computer readable medium can store thereon computer executable instructions for connecting a remote client computer to one of a plurality of virtual machines executing on a plurality of servers.","As described above, aspects of the presently disclosed subject matter may execute on a programmed computer.  and the following discussion is intended to provide a brief description of a suitable computing environment in which the those aspects may be implemented. One skilled in the art can appreciate that the computer system of  can in some embodiments effectuate the server and the client of . In these example embodiments, the server and client can include some or all of the components described in FIG.  and in some embodiments the server and client can each include circuitry configured to instantiate specific aspects of the disclosed embodiments.","The term circuitry used through the disclosure can include specialized hardware components. In the same or other embodiments circuitry can include microprocessors configured to perform function(s) by firmware or switches. In the same or other example embodiments circuitry can include one or more general purpose processing units and\/or multi-core processing units, etc., that can be configured when software instructions that embody logic operable to perform function(s) are loaded into memory, e.g., RAM and\/or virtual memory. In example embodiments where circuitry includes a combination of hardware and software, an implementer may write source code embodying logic and the source code can be compiled into machine readable code that can be processed by the general purpose processing unit(s).",{"@attributes":{"id":"p-0067","num":"0075"},"figref":"FIG. 11","b":["20","21","22","23","21","23","24","25","26","20","24","20","27","28","29","30","31","24","25","29","31","21","27","28","30","23","32","33","34","20","29","31"]},"A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules  and program data . A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite disk, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A display  or other type of display device can also be connected to the system bus  via an interface, such as a video adapter . In addition to the display , computers typically include other peripheral output devices (not shown), such as speakers and printers. The system of  also includes a host adapter , Small Computer System Interface (SCSI) bus , and an external storage device  connected to the SCSI bus .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another computer, a server, a router, a network PC, a peer device or other common network node, a virtual machine, and typically can include many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  can include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  can be connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  can typically include a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, can be connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are examples and other means of establishing a communications link between the computers may be used. Moreover, while it is envisioned that numerous embodiments of the presently disclosed subject matter are particularly well-suited for computer systems, nothing in this document is intended to limit the disclosure to such embodiments.","The foregoing detailed description has set forth various embodiments of the systems and\/or processes via examples and\/or operational diagrams. Insofar as such block diagrams, and\/or examples contain one or more functions and\/or operations, it will be understood by those within the art that each function and\/or operation within such block diagrams, or examples can be implemented, individually and\/or collectively, by a wide range of hardware, software, firmware, or virtually any combination thereof.","While particular aspects and embodiments of the subject matter described herein have been shown and described, it will be apparent to those skilled in the art that, based upon the teachings herein, changes and modifications may be made and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of the subject matter described herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
