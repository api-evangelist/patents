---
title: Software selection based on available storage space
abstract: Software selection based on available storage space involves determining that a data package (e.g., a software component) is not to be loaded (e.g., not to be installed) onto a storage device (e.g., a disk drive) of a computer (e.g., a target computer). This determination is based on the available storage capacity of the storage device (e.g., free disk space) and on a storage requirement of the optional data package (e.g., disk space required by the proposed software component). In some example embodiments, available storage capacity is determined automatically (e.g., by using an application programming interface).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856778&OS=08856778&RS=08856778
owner: Adobe Systems Incorporated
number: 08856778
owner_city: San Jose
owner_country: US
publication_date: 20090429
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["The subject matter disclosed herein generally addresses methods and apparatus for selecting software to be loaded or installed onto a storage device of a target computer. Specifically, the present disclosure addresses such methods and apparatus involving selecting software based on available storage space of the storage device of the target computer.","Software installation programs, often referred to as \u201csoftware installers,\u201d that load or install software onto a storage device of a computer are well-known. An example of a simple installer is an executable file containing a self-extracting archive of the software to be installed onto the storage device. An administrator of the computer, having decided to install the software onto the storage device, generally copies the executable file to the computer (e.g., to the storage device) and executes the file. During execution, the executable file extracts software components (e.g., files) from the archive and copies them to the storage device.","An example of a more sophisticated installer is one that presents the administrator with a user interface to select or deselect software for installation onto the storage device. A software installer may propose to the administrator a default set of software components selected for installation, and the administrator may use the user interface to modify that set prior to installation so that the modified set of software components is installed onto the storage device. This type of feature provides the administrator with some flexibility in allocating available storage capacity of the storage device.","Example methods and apparatus are directed to software selection based on available storage space. Examples merely typify possible variations. Unless explicitly stated otherwise, components and functions are optional and may be combined or subdivided, and operations may vary in sequence or be combined or subdivided. In the following description, for purposes of explanation, numerous specific details are set forth to provide a thorough understanding of example embodiments. It will be evident to one skilled in the art, however, that the present subject matter may be practiced without these specific details.","To facilitate selection of software to be loaded or installed onto a storage device of a target computer, a user interface may allow an administrator to estimate the available storage space of the storage device. Based on this estimate, software to be loaded or installed is automatically selected or deselected so that the selected software does not exceed the available storage space. Fully automated versions may automatically access the available storage space (e.g., via an application programming interface (API)) before automatically selecting or deselecting software for installation.","Potential advantages include, but are not limited to, reducing the need for an administrator to select or deselect software to be loaded or installed onto a storage device of a target computer, assisting the administrator in deciding whether a particular piece of software is to be selected or deselected, and efficiently using human or machine resources by raising the likelihood that an entire set of selected software pieces may be successfully installed on the first attempt, without exceeding the available storage capacity of the storage device.","Software selection based on available storage space involves determining that, while one piece of software (e.g., a data package, or a software component) is selected to be loaded or installed onto a storage device (e.g., a disk drive) of a computer (e.g., a target computer), a second piece of software is not to be loaded or installed onto the storage device. This determination is made based on the available storage capacity of the storage device (e.g., free disk space) and on a storage requirement of the second piece of software. Available storage capacity, according to various example embodiments, may be estimated, accessed, received, determined, or any combination thereof. Available storage capacity may be estimated by an administrator (e.g., a user) and received via a user interface (e.g., a graphical window, or a data entry field). In some example embodiments, available storage capacity is determined automatically (e.g., by using an API call at the target computer). In certain example embodiments, available storage capacity is estimated by an administrator at a local computer (e.g., an administrator's computer) and revised by automatic determination at a remote computer (e.g., a target computer).","As used herein, \u201cdata package\u201d refers to any packaged or bundled set of data loadable onto a storage device of a computer. For example, a data package may include system files, executable files, data files, libraries, media content, file system directories, metadata files, raw data, or any combination thereof. A data package is deemed as \u201cmandatory\u201d if the manufacturer or distributor of the data package has indicated that the data package is required or if software to be installed cannot operate without the data package. Where a data package is not deemed as mandatory but is nonetheless available for loading onto the storage device, the data package is deemed as \u201coptional.\u201d","As used herein, \u201csoftware component\u201d refers to any data package that constitutes a component of a computer software program or of a suite of computer software programs (e.g., a software application). A software component is deemed as \u201crequired\u201d if the manufacturer or distributor of the software program(s) has indicated that the software component is required or if the software program(s) cannot operate without the software component. Where a software component is not deemed as required but is nonetheless potentially advantageous to install, the software component is deemed as \u201cproposed.\u201d",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","110","190","150","110","190"]},"The administrator's computer  is a computer used by an administrator (e.g., a user) to load or install software onto one or more remote computers (e.g., target computer ) accessible via a network (e.g., network ). The administrator's computer  is a computer system (e.g., , computer system ) and may be a personal computer (PC).","In example embodiments that include the administrator's computer , the administrator's computer  includes at least an administration module , an installation configuration module , and a user interface  (e.g., , window ). The administrator's computer  may include a memory , a data structure , or any combination thereof.","The network  may be any network that communicatively connects two or more computers to each other (e.g., the administrator's computer  to the target computer ). The network  may be a wired network, a wireless network, or any combination thereof, and may include one or more networks that are private or public (e.g., the Internet).","The target computer  is a computer system (e.g., , computer system ) and may be a PC. The target computer  includes at least a storage device  (e.g., a disk drive). The storage device  has a finite storage capacity, at least a portion of which is available for storing data (e.g., free disk space). According to various example embodiments, the target computer  may include an installation module , a storage module , a machine-readable medium  (e.g., , machine-readable medium ), an executable file , a memory , a data structure , or any combination thereof.","At the administrator's computer , the administration module  is implemented using hardware and receives an estimate of the available storage capacity of the storage device . The administration module  also presents a data set via user interface . The data set indicates at least a mandatory data package as selected for loading onto the storage device  and indicates an optional data package as not selected for loading onto the storage device . This has the effect of presenting to an administrator at least the mandatory data package as selected for loading onto the storage device  while presenting the optional data package as not selected for loading onto the storage device .","The installation configuration module  is implemented using hardware and accesses loading information at the administrator's computer . As used herein, \u201cloading information\u201d refers to information relevant in facilitating the loading of software (e.g., data packages, software components, storage requirements, files, dependencies, etc.). The loading information may be stored in a data structure (e.g., data structure , or , loading information ). The loading information identifies the mandatory data package, the optional data package, and a storage requirement of the optional data package. The installation configuration module  also determines that the optional data package is not to be loaded onto the storage device . This determination is based on the estimate of the available storage capacity and on the storage requirement of the optional data package. Furthermore, this determination is performed at the administrator's computer . The installation configuration module  additionally generates the data set based on the determination. The installation configuration module  may also generate, based on the data set, one or more instructions to load at least the mandatory data package onto the storage device .","In some example embodiments, the optional data package is a first optional data package among multiple optional data packages. In some of these example embodiments, the installation configuration module  generates the data set indicating a second optional data package as selected for loading onto the storage device . This has the effect of selecting a particular optional data package for loading onto the storage device  while not selecting another optional data package for loading onto the storage device . The installation configuration module  may additionally generate, based on the data set, one or more instructions to load at least the second optional data package onto the storage device .","Where the optional data package is a first optional data package among multiple optional data packages, and where the installation configuration module  generates the data set indicating a second optional data package as selected for loading onto the storage device , the administration module  may receive, after the presenting of the data set, a revised data set via the user interface . The revised data set indicates a second optional data package as not selected for loading. This has the effect of allowing an administrator to override an automatic selection of a particular optional data package and indicate that it is not to be loaded onto the storage device . The installation configuration module  may additionally generate, based on the revised data set, one or more instructions to load at least the mandatory data package onto the storage device .","Where the optional data package is a first optional data package among multiple optional data packages, the storage requirement may be a first storage requirement. According to some example embodiments, the installation configuration module  identifies the first optional data package by determining that the first storage requirement is greater than a second storage requirement of a second optional data package among the multiple optional data packages. This has the effect of preferring smaller data packages in the selection of optional data packages to be loaded onto the storage device . Alternatively, in some example embodiments, the installation configuration module  identifies the first optional data package by determining that the first storage requirement is less than the second storage requirement. This has the effect of preferring larger data packages in the selection of optional data packages to be loaded onto the storage device .","In some example embodiments, the mandatory data package includes a required software component, the optional data package includes a proposed software component, and the installation configuration module  generates the data set indicating at least the required software component as selected for loading onto the storage device  and indicating the proposed software component as not selected for loading onto the storage device . This has the effect of presenting to the administrator at least the required software component as selected for loading onto the storage device  while presenting the proposed software component as not selected for loading onto the storage device .","The administration module  may receive an estimated value at a memory  of the administrator's computer . This reception occurs via a user interface . The estimated value represents the available storage capacity of the storage device  and may be provided by an administrator (e.g., a user). The administration module  also presents a data set via the user interface . The data set indicates at least a required software component as selected for loading onto the storage device  and indicates a proposed software component as not selected for loading onto the storage device . This has the effect of presenting to an administrator at least the required software component as selected for installation onto the storage device  while presenting the proposed software component as not selected for installation onto the storage device .","The installation configuration module  may read a data structure  (e.g., , loading information ) at the administrator's computer . As used herein, \u201cdata structure\u201d refers to a body of data organized for temporary or permanent storage on a machine-readable medium (e.g., a record of a database, or a file of a file system). For example, the data structure  may be an eXtensible Markup Language (XML) file. The data structure  identifies the required software component, the proposed software component, and a storage requirement of the proposed software component. The installation configuration module  also determines that the proposed software component is not to be installed onto the storage device . This determination is based on the estimated value and the storage requirement. Furthermore, this determination is performed at the administrator's computer . The installation configuration module  additionally generates the data set based on the determination. The installation configuration module  may also generate, based on the data set, one or more instructions to load at least the required software component onto the storage device .","In some example embodiments, the proposed software component is a first proposed software component among multiple proposed software components. In some of these example embodiments, the installation configuration module  generates the data set indicating a second proposed software component as selected for loading onto the storage device . This has the effect of selecting a particular proposed software component for installation onto storage device  while not selecting another proposed software component for installation onto the storage device . The installation configuration module  may additionally generate, based on the data set, one or more instructions to install at least the second proposed software component onto the storage device .","Where the proposed software component is a first proposed software component among multiple proposed software components, and where the installation configuration module  generates the data set indicating a second proposed software component as selected for installation onto the storage device , the administration module  may receive, after the presenting of the data set, a revised data set via the user interface . The revised data set indicates a second proposed software component as not selected for loading. This has the effect of allowing an administrator to override an automatic selection of a particular proposed software component and indicate that it is not to be installed onto the storage device . The installation configuration module  may additionally generate, based on the revised data set, one or more instructions to load at least the required software component onto the storage device .","Where the proposed software component is a first proposed software component among multiple proposed software components, the storage requirement may be a first storage requirement. According to some example embodiments, the installation configuration module  identifies the first proposed software component by determining that the first storage requirement is greater than a second storage requirement of a second proposed software component among the multiple proposed software components. This has the effect of preferring smaller software components in the selection of proposed software components to be loaded onto the storage device . Alternatively, in some example embodiments, the installation configuration module  identifies the first proposed software component by determining that the first storage requirement is less than the second storage requirement. This has the effect of preferring larger software components in the selection of proposed software components to be loaded onto the storage device .","At the target computer , the installation module  is implemented using hardware and accesses loading information also at the target computer . The loading information may be stored in a data structure (e.g., data structure ). The loading information identifies a mandatory data package, an optional data package, and a storage requirement of the optional data package. The installation module  also determines that the optional data package is not to be loaded onto the storage device . This determination is based on a storage value representing available storage capacity of the storage device  and on the storage requirement of the optional data package. Furthermore, this determination is performed at target computer . The installation module  additionally generates, based on the determination, a data set indicating at least the mandatory data package as selected for loading onto the storage device  and not indicating the optional data package as selected for loading onto the storage device . The installation module  may also generate, based on the data set, one or more instructions to load at least the mandatory data package onto the storage device . According to some example embodiments, installation module  also determines the storage value. For example, the storage value may be determined by using one or more API calls (e.g., as provided by the operating system of the target computer ).","The storage module  stores the data set on a machine-readable medium (e.g., machine-readable medium ). For example, the storage module  may write the data set to a memory  of the target computer . As another example, the storage module  may copy the data set to a machine-readable medium  of the target computer .","In some example embodiments, the optional data package is a first optional data package among multiple optional data packages. In some of these example embodiments, the installation module  generates the data set indicating a second optional data package as selected for loading onto the storage device . The installation module  may also load, based on the data set, at least the second optional data package onto storage device .","The loading information may be included in an executable file . Where an executable file  includes the loading information, the installation module  extracts the loading information from the executable file .","Where the optional data package is a first optional data package among multiple optional data packages, the storage requirement may be a first storage requirement. According to some example embodiments, the installation module  identifies the first optional data package by determining that the first storage requirement is greater than a second storage requirement of a second optional data package among the multiple optional data packages. This has the effect of preferring smaller data packages in the selection of optional data packages to be loaded onto the storage device . Alternatively, in some example embodiments, the installation module  identifies the first optional data package by determining that the first storage requirement is less than the second storage requirement. This has the effect of preferring larger data packages in the selection of optional data packages to be loaded onto the storage device .","In some example embodiments, the mandatory data package includes a required software component, the optional data package includes a proposed software component, and the installation module  generates the data set indicating at least the required software component as selected for loading onto the storage device  and indicating the proposed software component as not selected for loading onto the storage device . This has the effect of selecting at least the required software component for loading onto the storage device  while not selecting the proposed software component for loading onto the storage device .","The installation module  may receive a storage value at the memory  of the target computer . This reception may be via an API call. For example, the installation module  may use an API call provided by the operating system of the target computer  to receive the storage value. The storage value represents the available storage capacity of the storage device .","The installation module  may also read a data structure  (e.g., , loading information ) at the target computer . The data structure  identifies a required software component, a proposed software component, and a storage requirement of the proposed software component. The installation module  also determines that the proposed software component is not to be installed onto storage device . This determination is based on the storage value and the storage requirement. Furthermore, this determination is performed at the target computer . The installation module  additionally generates, based on the determination, a data set indicating at least the required software component as selected for installation onto the storage device  and not indicating the proposed software component as selected for installation onto the storage device . The installation module  is may also install, based on the data set, at least the required software component onto the storage device .","In some example embodiments, the proposed software component is a first proposed software component among multiple proposed software components. In some of these example embodiments, the installation module  generates the data set indicating a second proposed software component as selected for installation onto the storage device . The installation module  may also install, based on the data set, at least the second proposed software component onto the storage device .","The data structure  may be included in the executable file . Where the executable file  includes the data structure , the installation module  extracts the data structure  from the executable file .","Where the proposed software component is a first proposed software component among multiple proposed software components, the storage requirement may be a first storage requirement. According to some example embodiments, the installation module  identifies the first proposed software component by determining that the first storage requirement is greater than a second storage requirement of a second proposed software component among the multiple optional data packages. This has the effect of preferring smaller software components in the selection of proposed software components to be installed onto the storage device . Alternatively, in some of these example embodiments, the installation module  identifies the first proposed software component by determining that the first storage requirement is less than the second storage requirement. This has the effect of preferring larger software components in the selection of proposed software components to be installed onto the storage device .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 2","b":["200","200","210","220","240","250","260"]},"Operation  involves receiving an estimate of the available storage capacity of a storage device (e.g., , storage device ) at a machine (e.g., , administrator's computer ). The estimate may be received at an administrator's computer (e.g., , administrator's computer ). For example, the estimate may be received at an administration module (e.g., , administration module ) of the administrator's computer. The estimate may be received in the form of an estimated value. For example, the estimate may be received as an estimated value at a memory (e.g., , memory ) of the administrator's computer. According to some example embodiments, the estimate is received via a user interface (e.g., , user interface ). For example, the estimate may be received via a data entry field or a graphical user interface (GUI). In certain example embodiments, the estimated value is provided by an administrator (e.g., a user).","Operation  involves accessing loading information. The loading information identifies a mandatory data package to be loaded onto the storage device (e.g., , storage device ), an optional data package, and a storage requirement of the optional data package. The mandatory data package may be a required software component, and the optional data package may be a proposed software component. In some example embodiments, the loading information is accessed at a machine (e.g., , administrator's computer ). The accessing of the loading information may involve reading a data structure (e.g., , data structure , or , loading information ). For example, operation  may involve reading an XML file that identifies a required software component to be installed onto the storage device (e.g., , storage device ), a proposed software component, and a storage requirement of the proposed software component.","Operation  involves determining, based on the estimate of the available storage capacity of the storage device (e.g., , storage device ) and on the storage requirement, that the optional data package is not to be loaded onto the storage device (e.g., , storage device ). For example, this determination may be based on the storage requirement being greater than the estimate of the available storage capacity of a storage device (e.g., , storage device ). As another example, this determination may be based on the storage requirement being greater than a reduced estimate (e.g., an estimated value reduced by a selected value). As a further example, this determination may be based on the storage requirement being within a selected percentage of the estimate (e.g., a selected percentage of an estimated value). According to some example embodiments, operation  is performed at the administrator's computer (e.g., , administrator's computer ). Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, operation  includes determining that the proposed software component is not to be installed onto the storage device (e.g., , storage device ).","Operation  involves generating a data set of data packages to be loaded onto the storage device (e.g., , storage device ). Generation of the data set is based on the determination performed in operation . The data set indicates at least the mandatory data package as selected for loading onto the storage device (e.g., , storage device ) and indicates the optional data package as not selected for loading onto the storage device (e.g., , storage device ). Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, the data set indicates at least the required software component as selected to be installed onto the storage device (e.g., , storage device ) and indicates the proposed software component as not selected to be installed onto the storage device (e.g., , storage device ).","Operation  involves presenting the data set via a user interface (e.g., , user interface , or , window ). According to some example embodiments, the data set is presented to an administrator (e.g., a user).","Method  may further include operation , which involves generating one or more instructions (e.g., a set of instructions) to load at least the mandatory data package onto the storage device (e.g., , storage device ). In these example embodiments, the generation of the one or more instructions is based on the data set generated in operation . Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, operation  includes generating, based on the data set, one or more instructions to install at least the required software component onto the storage device (e.g., , storage device ).","In certain example embodiments, the optional data package is a first optional data package among multiple optional data packages. In some of these example embodiments, operation  involves generating the data set such that the data set indicates a second optional data package among the multiple optional data packages as selected for loading onto the storage device (e.g., , storage device ). This has the effect of selecting the second optional data package for loading onto the storage device while not selecting the first optional data package for loading onto the storage device. Method  may further include operation , which involves generating, based on the data set, one or more instructions (e.g. a set of instructions) to load at least the second optional data package onto the storage device (e.g. , storage device ). Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, the second optional data package is a second proposed software component. In these example embodiments, operation  includes generating, based on the data set, one or more instructions to install at least the second proposed software component onto the storage device (e.g., , storage device ).","Where the optional data package is a first optional data package among multiple optional data packages, and where operation  involves generating the data set such that the data set indicates a second optional data package as selected for loading onto the storage device (e.g., , storage device ), method  may further include operation , which involves receiving, after the presenting of the data set in operation , a revised data set via the user interface (e.g., , user interface , or , window ). The revised data set indicates the second optional data package as not selected for loading onto the storage device (e.g., , storage device ). According to some example embodiments, the generation of one or more instructions in operation  is based on the revised data set received in operation . Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, operation  includes generating, based on the revised data set, one or more instructions to install at least the required software component onto the storage device (e.g., , storage device ).","Where the optional data package is a first optional data package among multiple optional data packages, the storage requirement may be a first storage requirement. According to some example embodiments, method  further includes operation , which may involve identifying the first optional data package by determining that the first storage requirement is greater than a second storage requirement of a second optional data package among the multiple optional data packages. This has the effect of preferring smaller data packages in the selection of optional data packages to be loaded onto the storage device (e.g., , storage device ). Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, operation  includes identifying a first proposed software component by determining that its storage requirement is greater than a second storage requirement of a second proposed software component.","Alternatively, operation  may involve identifying the first optional data package by determining that the first storage requirement is less than the second storage requirement. This has the effect of preferring larger data packages in the selection of optional data packages to be loaded onto the storage device (e.g., , storage device ). Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, operation  includes identifying a first proposed software component by determining that its storage requirement is less than a second storage requirement of a second proposed software component.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 3","b":["300","300","320","340","350","360"]},"Operation  involves accessing loading information at a machine (e.g., , target computer ). The loading information identifies a mandatory data package to be loaded onto a storage device (e.g., , storage device ) of the machine (e.g., , target computer ), an optional data package, and a storage requirement of the optional data package. The mandatory data package may be a required software component, and the optional data package may be a proposed software component. The accessing of the loading information may involve reading a data structure (e.g., , data structure , or , loading information ). For example, operation  may involve reading an XML file that identifies a required software component to be installed onto the storage device (e.g., , storage device ), a proposed software component, and a storage requirement of the proposed software component.","Operation  involves determining based on available storage capacity of the storage device (e.g., , storage device ) and on the storage requirement, that the optional data package is not to be loaded onto the storage device (e.g., , storage device ). For example, this determination may be based on the storage requirement being greater than the available storage capacity. As another example, this determination may be based on the storage requirement being greater than the available storage capacity reduced by a value (e.g., reduced by a selected value). As a further example, this determination may be based on the storage requirement being within a selected percentage of the storage value. According to some example embodiments, operation  is performed at a target computer (e.g., , target computer ). Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, operation  includes determining that the proposed software component is not to be loaded onto the storage device (e.g., , storage device ).","Operation  involves generating a data set of data packages to be loaded onto the storage device (e.g., , storage device ). Generation of the data set is based on the determination performed in operation . The data set indicates at least the mandatory data package as selected for loading onto the storage device (e.g., , storage device ) and does not indicate the optional data package as selected for loading onto the storage device (e.g., , storage device ). Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, the data set indicates at least a required software component as selected to be installed onto the storage device (e.g., , storage device ) and does not indicate a proposed software component as selected to be installed onto the storage device.","Operation  involves storing the data set on a machine-readable medium (e.g., , machine-readable medium ). As explained in greater detail below, the machine-readable medium may be a memory (e.g., , memory ) of a machine (e.g., , target computer ). According to some example embodiments, the data set is stored in a memory (e.g., , memory ) at the target computer (e.g., , target computer ).","In some example embodiments, method  includes operation , which involves determining the available storage capacity of the storage device (e.g., , storage device ). According to some example embodiments, operation  includes receiving a storage value representing the available storage capacity of the storage device (e.g., , storage device ). The storage value may be received at a memory (e.g., , memory ) of a machine (e.g., , target computer ). For example, the storage value may be received, via an API call provided by the operating system of the target computer (e.g., , target computer ), at a memory (e.g., , memory ) of the target computer (e.g., , target computer ).","Method  may further include operation , which involves loading at least the mandatory data package onto the storage device (e.g., , storage device ). In these example embodiments, the loading is based on the data set generated in operation . Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, operation  includes installing, based on the data set, at least the required software component onto the storage device (e.g., , storage device ).","In certain example embodiments, the optional data package is a first optional data package among multiple optional data packages. In some of these example embodiments, operation  involves generating the data set such that the data set indicates a second optional data package among multiple optional data packages as selected for loading onto the storage device (e.g., , storage device ). This has the effect of selecting the second optional data package for loading onto the storage device while not selecting the first optional data package for loading onto the storage device. Method  may further include operation , which involves loading, based on the data set, at least the second optional data package onto the storage device (e.g. , storage device ). Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, the second optional data package is a second proposed software component. In these example embodiments, operation  includes installing, based on the data set, at least the second proposed software component onto the storage device (e.g., , storage device ).","In various example embodiments, method  includes operation , which involves extracting the loading information at the target computer (e.g., , target computer ). The loading information may be extracted from an executable file (e.g., , executable file ). According to some example embodiments, extracting the loading information involves extracting a data structure (e.g., , data structure , or , loading information ). For example, the loading information may be extracted from a data structure (e.g., , data structure , or , loading information ) contained in an executable file (e.g., , executable file ).","Where the optional data package is a first optional data package among multiple optional data packages, the storage requirement may be a first storage requirement. According to some example embodiments, method  further includes operation , which may involve identifying the first optional data package by determining that the first storage requirement is greater than a second storage requirement of a second optional data package among the multiple optional data packages. This has the effect of preferring smaller data packages in the selection of optional data packages to be loaded onto the storage device (e.g., , storage device ). Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, operation  includes identifying a first proposed software component by determining that its storage requirement is greater than a second storage requirement of a second proposed software component.","Alternatively, operation  may involve identifying the first optional data package by determining that the first storage requirement is less than the second storage requirement. This has the effect of preferring larger data packages in the selection of optional data packages to be loaded onto the storage device (e.g., , storage device ). Where the mandatory data package is a required software component, and where the optional data package is a proposed software component, operation  includes identifying a first proposed software component by determining that its storage requirement is less than a second storage requirement of a second proposed software component.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 4","FIG. 1","FIG. 1"],"b":["400","401","403","404","403","400","402","401","400","405","406","405","400","157","400","400","400","155","401","403","405"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 5","FIG. 1"],"b":["115","500","500","510","520","521","530"]},"The presentation  presents a data set of data packages (e.g., software components) to be loaded or installed onto a storage device (e.g., , storage device ) of a target computer (e.g., , target computer ). The presentation  presents a mandatory data package  (\u201cYakSoft Core Engine,\u201d a required software component), optional data packages  and  (\u201cYakSoft Additional Fonts\u201d and \u201cYakSoft Advanced Scripting Tools,\u201d both being proposed software components), and a storage requirement  (\u201c133.1 MB\u201d) of an optional data package  (\u201cYakSoft Additional Fonts\u201d). As shown in the example, selection indicators  and  indicate that one optional data package  (\u201cYakSoft Additional Fonts\u201d) is selected for loading onto the storage device (e.g., , storage device ) and that another optional data package  (\u201cYakSoft Advanced Scripting Tools\u201d) is not selected for loading onto the storage device (e.g., , storage device . The selection indicators  and  are checkboxes that may each be checked or unchecked to respectively indicate selection or non-selection of a data package (e.g., a software component). For example, an administrator (e.g., a user) may use a pointing instrument (e.g., a computer mouse) to check or uncheck one or more selection indicators (e.g., selection indicators  and ).","The graphical data entry tool  is a slider bar operable to enter an estimated value representing an estimate (e.g., an estimated value) of the available storage capacity of the storage device (e.g., , storage device ) of the target computer (e.g., , target computer ). For example, an administrator (e.g., a user) may use a pointing instrument (e.g., a computer mouse) to enter the estimated value using the graphical data entry tool .","The alphanumeric data entry tool  is a text entry field operable to enter the estimate (e.g., an estimated value). For example, an administrator (e.g., a user) may use a keyboard to enter an estimated value in the alphanumeric data entry tool . A graphical data entry tool  and the alphanumeric data entry tool  may be coupled in a manner that propagates one or more values from one to the other.","The action initiator  is a graphical button operable to initiate the storage of the information shown in window  for subsequent revision, confirmation, submission, action, or any combination thereof. For example, responsive to a mouse click on the action initiator , the user interface (e.g., , user interface ) may display a subsequent window allowing an administrator (e.g., a user) to confirm or cancel selections shown in presentation , non-selections shown in presentation , an estimated value entered via the graphical data entry tool , an estimated value entered via the alphanumeric data entry tool , or any combination thereof.","The window , in some example embodiments, contains a graphical selector operable to request that the available storage capacity of the storage device (e.g., , storage device ) be automatically accessed, determined, received, or any combination thereof, at the target computer (e.g., , target computer ). For example, the window  may contain a toggle button that allows an administrator (e.g., a user) to specify that one or more operations of a particular example embodiment of method  are to be performed at the target computer (e.g., , target computer ). This may have the effect of causing an installation configuration module (e.g., , installation configuration module ) at an administrator's computer (e.g., , administrator's computer ) to generate an executable file (e.g., , executable file ) that, when executed on the target computer (e.g., , target computer ) executes one or more operations of the method .",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 6","FIG. 1","FIG. 1","FIG. 1"],"b":["600","151","150","600","151","600","601","600","600","603","603"]},{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 7","FIG. 7"],"b":["700","724","424","424"]},"Computer system  includes processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU), a digital signal processor (DSP), application specific integrated circuits (ASICs), radio-frequency integrated circuits (RFICs), or any combination of these), main memory , and static memory , which communicate with each other via bus . Computer system  may further include graphics display unit  (e.g., a plasma display panel (PDP), a liquid crystal display (LCD), a projector, or a cathode ray tube (CRT)). Computer system  may also include alphanumeric input device  (e.g., a keyboard), cursor control device  (e.g., a mouse, a trackball, a joystick, a motion sensor, or other pointing instrument), storage unit , signal generation device  (e.g., a speaker), and network interface device .","Storage unit  includes a machine-readable medium  on which is stored instructions  (e.g., software) embodying any one or more of the methodologies or functions described herein. Instructions  (e.g., software) may also reside, completely or at least partially, within main memory  and\/or within processor  (e.g., within a processor's cache memory) during execution thereof by computer system , main memory  and processor  also constituting machine-readable media. Instructions  (e.g., software) may be transmitted or received over network  via network interface device .","As used herein, the term \u201cmemory\u201d refers to a machine-readable medium able to store data temporarily or permanently and may be taken to include, but not be limited to, random-access memory, read-only memory, buffer memory, flash memory, and cache memory. While machine-readable medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) able to store instructions (e.g., instructions ). The term \u201cmachine-readable medium\u201d shall also be taken to include any medium that is capable of storing instructions (e.g., instructions ) for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, data repositories in the form of solid-state memories, optical media, and magnetic media.","Throughout this specification, plural instances may implement components, operations, or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations, one or more of the individual operations may be performed concurrently, and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements fall within the scope of the subject matter herein.","Certain embodiments are described herein as including logic or a number of components, modules, or mechanisms. Modules may constitute either software modules (e.g., code embodied on a machine-readable medium or in a transmission signal) or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments, one or more computer systems (e.g., a standalone, client or server computer system) or one or more hardware modules of a computer system (e.g., a processor or a group of processors) may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations as described herein.","In various embodiments, a hardware module may be implemented mechanically or electronically. For example, a hardware module may comprise dedicated circuitry or logic that is permanently configured (e.g., as a special-purpose processor, such as a field programmable gate array (FPGA) or an application-specific integrated circuit (ASIC)) to perform certain operations. A hardware module may also comprise programmable logic or circuitry (e.g., as encompassed within a general-purpose processor or other programmable processor) that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically, in dedicated and permanently configured circuitry, or in temporarily configured circuitry (e.g., configured by software) may be driven by cost and time considerations.","Accordingly, the term \u201chardware module\u201d should be understood to encompass a tangible entity, be that an entity that is physically constructed, permanently configured (e.g., hardwired), or temporarily configured (e.g., programmed) to operate in a certain manner and\/or to perform certain operations described herein. As used herein, \u201chardware-implemented module\u201d refers to a hardware module. Considering embodiments in which hardware modules are temporarily configured (e.g., programmed), each of the hardware modules need not be configured or instantiated at any one instance in time. For example, where the hardware modules comprise a general-purpose processor configured using software, the general-purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor, for example, to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.","Hardware modules can provide information to, and receive information from, other hardware modules. Accordingly, the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware modules exist contemporaneously, communications may be achieved through signal transmission (e.g., over appropriate circuits and buses) that connect the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times, communications between such hardware modules may be achieved, for example, through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example, one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then, at a later time, access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices, and can operate on a resource (e.g., a collection of information).","The various operations of example methods described herein may be performed, at least partially, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors may constitute processor-implemented modules that operate to perform one or more operations or functions. The modules referred to herein may, in some example embodiments, comprise processor-implemented modules.","Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of a method may be performed by one or processors or processor-implemented modules. The performance of certain of the operations may be distributed among the one or more processors, not only residing within a single machine, but deployed across a number of machines. In some example embodiments, the processor or processors may be located in a single location (e.g., within a home environment, an office environment or as a server farm), while in other embodiments the processors may be distributed across a number of locations.","The one or more processors may also operate to support performance of the relevant operations in a \u201ccloud computing\u201d environment or as a \u201csoftware as a service\u201d (SaaS). For example, at least some of the operations may be performed by a group of computers (as examples of machines including processors), these operations being accessible via a network (e.g., the Internet) and via one or more appropriate interfaces (e.g., application program interfaces (APIs).)","The performance of certain of the operations may be distributed among the one or more processors, not only residing within a single machine, but deployed across a number of machines. In some example embodiments, the one or more processors or processor-implemented modules may be located in a single geographic location (e.g., within a home environment, an office environment, or a server farm). In other example embodiments, the one or more processors or processor-implemented modules may be distributed across a number of geographic locations.","Some portions of this specification are presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory (e.g., a computer memory). These algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein, an \u201calgorithm\u201d is a self-consistent sequence of operations or similar processing leading to a desired result. In this context, algorithms and operations involve physical manipulation of physical quantities. Typically, but not necessarily, such quantities may take the form of electrical, magnetic, or optical signals capable of being stored, accessed, transferred, combined, compared, or otherwise manipulated by a machine. It is convenient at times, principally for reasons of common usage, to refer to such signals using words such as \u201cdata,\u201d \u201ccontent,\u201d \u201cbits,\u201d \u201cvalues,\u201d \u201celements,\u201d \u201csymbols,\u201d \u201ccharacters,\u201d \u201cterms,\u201d \u201cnumbers,\u201d \u201cnumerals,\u201d or the like. These words, however, are merely convenient labels and are to be associated with appropriate physical quantities.","Unless specifically stated otherwise, discussions herein using words such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining,\u201d \u201cpresenting,\u201d \u201cdisplaying,\u201d or the like may refer to actions or processes of a machine (e.g., a computer) that manipulates or transforms data represented as physical (e.g., electronic, magnetic, or optical) quantities within one or more memories (e.g., volatile memory, non-volatile memory, or any combination thereof), registers, or other machine components that receive, store, transmit, or display information. Furthermore, unless specifically stated otherwise, the terms \u201ca\u201d or \u201can\u201d are herein used, as is common in patent documents, to include one or more than one instance. Finally, as used herein, the conjunction \u201cor\u201d refers to a non-exclusive or, unless specifically stated otherwise."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Some embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
