---
title: Network traffic data collection and query
abstract: An apparatus is equipped to receive descriptive data for network traffic. In one embodiment, the apparatus is equipped to conditionally modify timing data of the network traffic to conform the timing data to the timing patterns of previously network traffic, when determined that the timing data of the network traffic are aberrations. Further, the apparatus is equipped with a query facility that supports a network oriented query language. The language includes specific network oriented language elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06965574&OS=06965574&RS=06965574
owner: Arbor Networks, Inc.
number: 06965574
owner_city: Lexington
owner_country: US
publication_date: 20010620
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Overview","Data Collection","Management\/Configuration","Query Generation","Network Oriented Query Language","Query Compilation","Query Execution","Example Host Computer System","CONCLUSION AND EPILOGUE"],"p":["1. Field of the Invention","The present invention relates to the field of networking. More specifically, the present invention relates to the collection of network traffic data, and the selective analysis of the collected data.","2. Background Information","With advances in integrated circuit, microprocessor, networking and communication technologies, increasing numbers of devices, in particular, digital computing devices, are being networked together. Devices are often first coupled to a local area network, such as an Ethernet based office\/home network. In turn, the local area networks are interconnected together through wide area networks, such as SONET networks, ATM networks, Frame Relays, and the like. Of particular importance is the TCP\/IP based global inter-networks, Internet.","As a result this trend of increased connectivity, increasing numbers, of applications that are network dependent are being deployed. Examples of these network dependent applications include but are not limited to, email, net based telephony, world wide web and various types of e-commerce. For these applications, success inherently means high volume of network traffic for their implementing servers. To ensure continuing success, quality of service through orderly and efficient handling of the large volume of network traffic has become of paramount importance. Various subject mailers, such as scalability, distributive deployment and caching of contents as well as preventing network misuse have become of great interest to the artisan.","Many of these subject matters rely on the collection and analysis of network traffic data. A number of prior art tools are available to perform such data collection and analyses. An example of such prior art tool is the NetFlow Collector and Analyzer available from CISCO, Inc. of San Jose, Calif. These early generation data collection and analysis tools all suffer from at least a common deficiency in that they lack a flexible and versatile query facility that allows a wide variety of interrogatories to be made against a collection of network traffic data, to facilitate in-depth analysis of the network traffic. Such in-depth analyses are increasingly needed to understand and manage the performance of today and future complex networks.","Thus, a more flexible and versatile methodology is desired.","An apparatus is equipped to receive descriptive data for network traffic. In one embodiment, the apparatus is equipped to conditionally modify timing data of the network traffic to conform the timing data to the timing patterns of previously deleted network traffic, when it is determined that the timing data of the network traffic are aberrations. Further, the apparatus is equipped with a query facility that supports a network oriented query language. The language includes specific network oriented language elements.","In one embodiment, the language elements include\n\n","In the following description, various aspects of the present invention will be described. However, it will be apparent to those skilled in the art that the present invention may be practiced with only some or all aspects of the present invention. For purposes of explanation, specific numbers, materials and configurations are set forth in order to provide a thorough understanding of the present invention. However, it will also be apparent to one skilled in the art that the present invention may be practiced without the specific details. In other instances, well known features are omitted or simplified in order not to obscure the present invention.","Parts of the description will be presented in terms of operations performed by a processor based device, using terms such as receiving, analyzing, determining, generating, and the like, consistent with the manner commonly employed by those skilled in the art to convey the substance of their work to others skilled in the art. As well understood by those skilled in the art, the quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, and otherwise manipulated through mechanical and electrical components of the processor based device; and the term processor include microprocessors, micro-controllers, digital signal processors, and the like, that are standalone, adjunct or embedded.","Various operations will be described as multiple discrete steps in turn, in a manner that is most helpful in understanding the present invention, however, the order of description should not be construed as to imply that these operations are necessarily order dependent. The terms \u201crouting devices\u201d and \u201croute\u201d are used throughout this application, in the claims as well as in the specification. The terms as used herein are intended to be genus terms that include the conventional routers and conventional routing, as well as all other variations of network trafficking, such as, switches or switching, gateways, hubs and the like. In particular, these operations need not be performed in the order of presentation. Further, the description repeatedly uses the phrase \u201cin one embodiment\u201d, which ordinarily does not refer to the same embodiment, although it may.","Referring now to , wherein a block diagram illustrating an overview of the present invention, in accordance with one embodiment, is shown. As illustrated, the present invention includes network traffic data collection facility  and network traffic data query facility . Network traffic data collection facility  includes network traffic data collector , associated temporary data storage buffer , and associated persistent data storage . Network traffic data query facility  includes end user interface , query generator , query compiler  and query execution engine . The elements are operationally coupled to each other as shown.","Data collector  is provided to facilitate collection of descriptive data associated with network traffic of interest. As will be described in more detail below, data collector  advantageously includes \u201cauto timing correction\u201d for the descriptive data being collected. That is, data collector  detects timing \u201caberrations\u201d, and automatically corrects timing data that are deemed to be \u201caberrations\u201d. Timing \u201caberration\u201d refers to the phenomenon where a significant difference exists between a routing device and its \u201cmonitoring\u201d sensing device on the perception of time, and\/or the timing data for network traffic between two nodes exhibits a temporal or sudden substantial difference from timing patterns of early network traffics between the same two nodes or two nodes of the same communities. Such timing \u201caberrations\u201d are known to exist between routing devices and their \u201cmonitoring\u201d sensing devices, as well as known to occur from time to time for network traffic packets routed on a \u201cbest effort\u201d basis (such as, network traffic packets routed over the Internet).","In one embodiment, the descriptive data are collected for network traffic flows. A network traffic flow comprises source address, destination address, source port, destination port, Layer 3 protocol, TOS byte (DSCP), and identification of the ingress interface.","Temporal data buffer  and persistent storage  are provided to store the collected network traffic data. The network traffic data are typically first stored in temporal data buffer  before being stored into persistent storage . However, in the presently preferred embodiments, direct storage into persistent storage  is also provided. Further, network traffic data stored in persistent storage  may be reloaded into temporal data buffer  for processing. In alternate embodiments, queries may be run directly against network traffic data stored in persistent storage , without first explicitly reloading them back into temporal data buffer . In one embodiment, temporal data buffer  is a circular buffer disposed in system memory of the \u201chost\u201d system \u201chosting\u201d data collector , and persistent storage  is disposed on a mass storage device, such as a disk drive, of the \u201chost\u201d system (not shown) of data collector . In alternate embodiments, persistent storage  may be disposed on a distributed storage device, such as network storage, accessible from the \u201chost\u201d system.","End user interface , as will be described in more detail below, is provided to facilitate a user in submitting \u201chigh level\u201d (abstracted) query commands against the collected network traffic data. These query commands result in queries formed using language elements of the network oriented query language of the present invention, to be run against the collected network traffic data. In one embodiment, end user interface  also includes features that allow an administrator having the proper authority to configure data collection facility  and query facility . In alternate embodiments, separate interfaces may be used for the administration functions instead.","Query generator , as will be described in more detail below, is provided to process the \u201chigh level\u201d (abstracted) query commands, and in response, \u201cgenerates\u201d the appropriate query or queries formed with language elements of the network oriented query language of the present invention.","Query compiler , as will be described in more detail below, is provided to \u201ccompile\u201d queries formed using language elements of the network oriented query language of the present invention, into byte codes for execution under the control of query execution engine . Query execution engine , as will be described in more detail below, control execution of the byte codes as well as performs conventional execution runtime services, such as memory allocation request and release, error\/exception handling, and so forth.","For the illustrated embodiment, query compiler  includes an application programming interface (API) (not shown), through which queries formed using language elements of the network oriented query language of the present invention, may be programmatically submitted by other processes, such as network management processes , for compilation, and in turn execution by engine . Management processes  may be co-resident with query facility  on the same \u201chost\u201d system (not shown) of query facility  or remotely disposed away the \u201chost\u201d system, and communicate with query facility  using conventional cross system communication techniques. In alternate embodiments, the various components of query facility , i.e. end user interface , query generator , and so forth, may be co-resident on the same \u201chost\u201d system, or distributedly disposed. Again, the distributedly disposed components may communicate with each other using conventional cross system communication techniques.","The relevant aspects of the various elements, including the manner they cooperate with one another will be described in turn below.","Referring now also to , a flow chart illustrating the operational flow of the relevant aspects of data collector , in accordance with one embodiment, is shown. As illustrated, at block , data collector  receives a \u201creporting\u201d of descriptive data associated with certain network traffic of interest. The descriptive data may be provided by a routing device routing network traffic, a sensor sensing or monitoring network traffic being routed, or other devices of the like. The provision may be made as part of a periodic reporting that the routing or sensor device is configured to make periodically, or the provision may be made in response to an inquiry by data collector , or at the direction of a \u201cdirector\u201d device directing distributed network traffic management. One example of such \u201cdirector\u201d device is described in co-pending U.S. patent applications, Ser. No. 09\/631,898, entitled \u201cA Distributed Solution For Regulating Network Traffic\u201d, filed on Aug. 4, 2000, and Ser. No. 09\/685,518, entitled \u201cProgressive and Distributed Regulation of Selected Network Traffic Destined for a Network Node\u201d, filed on Oct. 9, 2000. These applications are hereby fully incorporated by reference.","For the illustrated embodiment, data collector  supports a plurality of formats under which the descriptive data may be reported. Accordingly, at block , data collector , upon receipt of the reported data, first determines the format of the descriptive data. It is assumed each support format may be uniquely determined. For example, each format may include an identifier or an identifying attribute disposed at certain position of the data. For the multi-format embodiment, if the data format is not discernable, the data is discarded, and an error is logged (not shown).","Upon determining the data format of the received data, data collector , among other things, proceeds to analyze the timing data. As alluded to earlier, a routing device's perception of time may be significantly different from that of its sensors. Additionally, for packet traffic being routed on a \u201cbest effort\u201d basis over a network such as the Internet, from time to time, the timing data, i.e. the time elapsed from the time a packet is sent out of a source node to the time the packet arrives at a data node may become distorted. To further illustrate, when packet is sent from node A to node B, most of the times the timing data would reflect a 10+\/\u22121 \u201ctiming ticks\u201d as transmit time, however from time to time, unusually large timing values, like 50 or unusually small timing values, like 1, may be reported. In these cases, data collector  advantageously recognizes these unusually large or unusually small timing values as \u201caberrations\u201d, and automatically corrects them accordingly.","Thus, for the embodiment, at block , data collector  determines if the timing data of the reported data is \u201cconsistent\u201d with the timing patterns of other routing devices and\/or prior network traffic. Data collector  maintains profile records of the historic timing patterns. If data collector  determines that the timing data are not consistent with the timing patterns of other routing devices and\/or prior network traffic, at block , data collector automatically adjusts the timing data to conform the timing data of the received network traffic to the timing patterns of the other routing devices and\/or prior network traffic. The amount of modification to be applied to adjust the timing data to conform to the timing patterns of other routing devices and\/or prior network traffic data is application dependent, and preferably configurable by an administrator with the proper authority.","At block , either upon determining that the timing data are consistent or the making of the adjustment, data collector  saves the descriptive data into the temporal and\/or persistent storage \u2013. For the embodiment, data collector  also converts and saves the received data in a common format to facilitate more efficient operation for subsequent query processing. Further, at block , data collector  updates the adjustment data it employs to \u201cauto correct\u201d the timing data, based on the timing data of the received network traffic data.","In one embodiment, data collector  employs a pair of deviation thresholds +\/\u2212\u201cdelta\u201d to determine whether the timing data of the received data are to be considered as aberrations or not. In one embodiment, \u201cdelta\u201d is one standard deviation of the earlier timing data. In one embodiment, the adjustment to be applied in an \u201cauto correct\u201d situation is an adjustment value necessary to bring the timing data of the received data into alignment (e.g. within the earlier mentioned +\/\u2212\u201cdelta\u201d threshold range) with a weighted running average of the timing data. In one embodiment, the weighting favors the historic data over the most recent data. That is, the weighting scheme implicitly gives more credence to earlier observed timing patterns then to the most recently observed timing behavior.",{"@attributes":{"id":"p-0042","num":"0045"},"figref":"FIG. 3","b":["104","302","304"]},"Similarly,  illustrates the common data format for storing the network traffic data in persistent data storage . As illustrated, the header values are stored in accordance with file header format  (16 bytes for the embodiment), whereas the entry values are stored in accordance with data header format  (28 bytes for the embodiment).","Referring now to \u2013, wherein two block diagrams illustrating two panes of end user interface  for use to manage or configure the data collection and query facilities of the present invention, in accordance with one embodiment, are shown. As alluded to earlier, these panes, panes  and  are made available to an administrator with proper authority. Enforcement or ensuring the administrator as one having the necessary authority, may be accomplished using anyone of a number of techniques known in the art, such as through the \u201clog in\u201d process of the \u201chost\u201d system.","As illustrated, pane  includes drop list  for presenting the configurable parameters, and field  for setting the parameter value of the selected parameter. In one embodiment, the parameters include, but are not limited to",{"@attributes":{"id":"p-0046","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},{},{},"Default"]},{"entry":["Name of Field","Type","Description","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["BufferSize","Number","Temporal buffer size in bytes","1M"]},{"entry":["RecvQueueSize","Number,","Kernel buffer size in bytes","MAX"]},{"entry":[{},"or MAX"]},{"entry":["UdpPorts","Numbers,","Which UDP ports to listen on","2055"]},{"entry":[{},"space","for network traffic flow data"]},{"entry":[{},"delimited"]},{"entry":["TcpPorts","Numbers,","Which TCP ports to listen on","2001"]},{"entry":[{},"space","for client connections"]},{"entry":[{},"delimited"]},{"entry":["Monitoring","ON or","When OFF, incoming network","ON"]},{"entry":[{},"OFF","traffic flow is dropped"]},{"entry":[{},{},"(rather than being added"]},{"entry":[{},{},"to the temporal buffer)"]},{"entry":["Logging","ON or","When ON, incoming network","OFF"]},{"entry":[{},"OFF","traffic flow is written into"]},{"entry":[{},{},"a system log file"]},{"entry":["Checksumming","ON or","When ON, checksum is","ON"]},{"entry":[{},"OFF","performed on input files."]},{"entry":["AllowedUdpSenders","Space","Which IP addresses may send","ALL"]},{"entry":[{},"delimited","network traffic flow data"]},{"entry":[{},"IP addrs,"]},{"entry":[{},"or ALL,"]},{"entry":[{},"or NONE"]},{"entry":["AllowedTcpClients","Space","Which IP addresses may","ALL"]},{"entry":[{},"delimited","connect as clients"]},{"entry":[{},"IP addrs,"]},{"entry":[{},"or ALL,"]},{"entry":[{},"or NONE"]},{"entry":["MaxLogFileSize","Number","After reaching this size in","100M"]},{"entry":[{},{},"bytes, close the current log"]},{"entry":[{},{},"file and start a new one"]},{"entry":["RecycleLogFiles","ON or","If ON, when disk fills up,","OFF"]},{"entry":[{},"OFF","replace oldest log file;"]},{"entry":[{},{},"if OFF, just stop logging"]},{"entry":["Flush Delay or","Number","Max seconds before logged","5"]},{"entry":["LogFileFlushDelay",{},"data is flushed to disk"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Pane  is provided to facilitate an authorized administrator in performing various management operations, including state and\/or status checking. Pane  includes in particular field  for entering the various management operation commands. In one embodiment, the management commands include, but are not limited to",{"@attributes":{"id":"p-0048","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Command","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["show buffersize","Show the size in bytes of the temporal data"]},{"entry":[{},"buffer"]},{"entry":["show datasize","Show the size in bytes of the data present in the"]},{"entry":[{},"temporal buffer"]},{"entry":["show file logging","Show whether file logging is enabled"]},{"entry":["show file recycling","Show whether file recycling is enabled"]},{"entry":["show monitoring","Show whether monitoring is enabled"]},{"entry":["show checksumming","Show whether checksumming is enabled"]},{"entry":["show ports","Show the UDP ports being listens for network"]},{"entry":[{},"traffic flow"]},{"entry":["show query version","Show the current version of the query language"]},{"entry":["show current time","Show the current time in UnixSecs"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Command","Effect"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["set buffersize <number>","Set the size in bytes of the temporal data buffer"]},{"entry":["set maxlogfilesize","Set the size in bytes of the maximum log file"]},{"entry":"<number>"},{"entry":["start monitoring","Start monitoring network traffic flow"]},{"entry":["stop monitoring","Stop monitoring network traffic flow"]},{"entry":["start file logging","Start file logging"]},{"entry":["stop file logging","Stop file logging"]},{"entry":["start file recycling","Start file recycling"]},{"entry":["stop file recycling","Stop file recycling"]},{"entry":["set checksumming","Turn checksumming on or off"]},{"entry":"{ON\/OFF}"},{"entry":["add port <number>","Add a UDP port to ports to be listen"]},{"entry":["remove port <number>","Remove a UDP port from ports to be listen"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Command","Effect"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["save to <filename>","Save the data in the temporal buffer to"]},{"entry":[{},"specified file"]},{"entry":["load from <filename>","Load the data in the specified file into the"]},{"entry":[{},"temporal buffer"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Referring now to \u2013, wherein two block diagrams illustrating two panes of end user interface  for use to run queries against a collection of network traffic data, in accordance with one embodiment, are shown. As illustrated, panes  and  include fields  and  for a user to submit \u201chigh level\u201d (abstracted) queries that result in queries formed with language elements of the network oriented query language of the present invention or \u201cadvanced\u201d queries expressed with the language elements.","As those skilled in the art would appreciate, panes \u2013 in practice typically include many more end user interface features, such as buttons and the like. These features are not illustrated, so not to obscure the present invention.","Referring now to \u2013, wherein two block diagrams illustrating query generator  of  in further details, in accordance with one embodiment, are shown. As illustrated in , query generator  includes library  of parameterized pre-packaged queries formed with language elements of the network oriented query language of the present invention, and logic  for looking up the parameterized pre-packaged queries based on \u201chigh level\u201d (abstracted) query \u201ccommands\u201d.","As illustrated in , upon invocation, at block , query generator  extracts the \u201ckeywords\u201d from the \u201chigh level\u201d (abstracted) query \u201ccommand\u201d entered. At block , query generator , using the extracted \u201ckeyword\u201d, looks up the corresponding pre-packaged query. At block , query generator  resolves the query parameters of the retrieved pre-packaged query, based on the \u201cparameter values\u201d submitted in conjunction with the \u201chigh level\u201d (abstracted) query \u201ccommand\u201d entered. Upon processing the parameters, query generator , at block  outputs the pre-packaged query for compilation by query compiler , and eventual execution under the control of execution engine .","In one embodiment, the \u201chigh level\u201d (abstracted) query \u201ccommands\u201d and their corresponding queries include",{"@attributes":{"id":"p-0054","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Query Command","Que"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["mq hist keys values","mquery {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["conditions","DefHist 1 Keys = keys Values = values"]},{"entry":[{},"If DataPresent ForEachFlow {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If conditions {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"AddToHist 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"PrintHist 1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":["mq top100 keys","mquery {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["conditions","DefArray 1 keys"]},{"entry":[{},"If DataPresent ForEachElow {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If conditions {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"AddToArray 1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"command to print top100 output"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":["mq hdrhist keys","mquery {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["values conditions","DefHist 1 Keys = keys Values = values"]},{"entry":[{},"If DataPresent ForEachPacket {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If conditions {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If (var255 == 0)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"var255 = BaseSeqNumber"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AddToHist 1"]},{"entry":[{},"Set var255 = BaseSeqNumber +"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"NumEntriesinPacket"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"}"]},{"entry":[{},"PrintHist 1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Listed above are just examples of some of the \u201chigh level\u201d (abstracted) query commands that can be supported under the present invention. The meaning of the various language elements are either self-explanatory or will be readily apparent in view of the descriptions to follow. As those skilled in the art will appreciate, especially in view of the descriptions to follow, the present invention may be practiced with many more \u201chigh level\u201d (abstracted) query commands (or less).","In accordance with the presently preferred embodiment, the network oriented query language of the present invention includes the language elements, and syntax as set forth below:",{"@attributes":{"id":"p-0057","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Language Element","Expansion"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["<MQuery>","mquery <CommandBlock> |"]},{"entry":[{},"mbinnedquery <CommandBlock> binsize |"]},{"entry":[{},"mbinnedquery <CommandBlock>"]},{"entry":[{},"binsize start stop"]},{"entry":[{},"Binsize, start, and stop are in seconds;"]},{"entry":[{},"Start and stop are in the UnixSecs domain"]},{"entry":[{},"while binsize is an absolute number"]},{"entry":["<CommandBlock>","<Command> |"]},{"entry":[{},"{<CommandList> }"]},{"entry":["<CommandList>","<Command> |"]},{"entry":[{},"<Command> <CommandList>"]},{"entry":[{},"Commands may be separated by newlines"]},{"entry":[{},"or semicolons if you wish but it is"]},{"entry":[{},"not required."]},{"entry":["<Command>","<IfCommand> |"]},{"entry":[{},"<SetCommand> |"]},{"entry":[{},"<IncrCommand> |"]},{"entry":[{},"<IncrByCommand> |"]},{"entry":[{},"<DefHistCommand> |"]},{"entry":[{},"<DefArrayCommand> |"]},{"entry":[{},"<WithFirstPacketCommand> |"]},{"entry":[{},"<WithLastPacketCommand> |"]},{"entry":[{},"<ForEachPacketCommand> |"]},{"entry":[{},"<ForEachFlowCommand> |"]},{"entry":[{},"<AddToHistCommand> |"]},{"entry":[{},"<AddToArrayCommand> |"]},{"entry":[{},"<PrintCommand> |"]},{"entry":[{},"<NewLineCommand> |"]},{"entry":[{},"<PrintHistCommand> |"]},{"entry":[{},"<PrintArrayCommand> |"]},{"entry":["<IfCommand>","If <Expr> <CommandBlock> |"]},{"entry":[{},"If <Expr> <CommandBlock> Else"]},{"entry":[{},"<CommandBlock>"]},{"entry":["<SetCommand>","Set <Var> <Expr> |"]},{"entry":[{},"Set <Var> = <Expr> |"]},{"entry":[{},"<Var> = <Expr>"]},{"entry":["<IncrCommand>","Incr <Var> |"]},{"entry":[{},"<Var>++"]},{"entry":["<IncrByCommand>","lncr <Var> By <Expr> |"]},{"entry":[{},"<Var> += <Expr>"]},{"entry":["<DefHistCommand>","<DefHist> <Index> <KeyExpr> |"]},{"entry":[{},"<DefHist> <Index> <KeyExpr>"]},{"entry":[{},"<ValExpr>"]},{"entry":["<DefArrayCommand>","Define Array <Index> <Expr> |"]},{"entry":[{},"DefArray <Index> <Expr>"]},{"entry":["<WithFirstPacketCommand>","<WithFirstPacket> <CommandBlock>"]},{"entry":["<WithLastPacketCommand>","<WithLastPacket> <CommandBlock>"]},{"entry":["<ForEachPacketCommand>","<ForEachPacket> <CommandBlock>"]},{"entry":["<ForEachFlowCommand>","<ForEachFlow> <CommandBlock>"]},{"entry":["<AddToHistCommand>","Add to Histogram <Index> |"]},{"entry":[{},"Add to Hist <Index> |"]},{"entry":[{},"AddToHist <Index> |"]},{"entry":[{},"AddHist <Index>"]},{"entry":["<AddToArrayCommand>","Add To Array <Index> |"]},{"entry":[{},"AddToArray <Index> |"]},{"entry":[{},"AddArray <Index>"]},{"entry":["<PrintCommand>","Print \u201cstring\u201d |"]},{"entry":[{},"Print\u201cstring \u201d |"]},{"entry":[{},"Print <Expr> |"]},{"entry":[{},"Print<Expr> |"]},{"entry":[{},"Print <Lvar>"]},{"entry":["<NewLineCommand>","NewLine |"]},{"entry":[{},"NL"]},{"entry":["<PrintHistCommand>","Print Histogram <Index> |"]},{"entry":[{},"Print Hist <Index> |"]},{"entry":[{},"PrintHist <Index>"]},{"entry":["<PrintArrayCommand>","Print Array <Index> |"]},{"entry":[{},"PrintArray <Index>"]},{"entry":["<Expr>","CurrentTime |"]},{"entry":[{},"DataPresent |"]},{"entry":[{},"MulDiv32 <Expr>, <Expr>, <Expr>|"]},{"entry":[{},"MulDiv64 <Expr>, <Lvar>, <Lvar>|"]},{"entry":[{},"32-bit constant integer |"]},{"entry":[{},"network address in dotted quad format |"]},{"entry":[{},"<Var> |"]},{"entry":[{},"<HeaderValue> |"]},{"entry":[{},"<EntryValue> |"]},{"entry":[{},"<ExprLogical> |"]},{"entry":[{},"<ExprBitwise> |"]},{"entry":[{},"<ExprArithmetic> |"]},{"entry":[{},"<PrintType>:<Expr> |"]},{"entry":[{},"(<Expr>)"]},{"entry":["<Var>","Var<Index>"]},{"entry":["<DefHist>","Define Histogram |"]},{"entry":[{},"Define Hist  |"]},{"entry":[{},"DefHist"]},{"entry":["<Index>","A number from 0 to 255"]},{"entry":["<KeyExpr>","Keys <ExprList> |"]},{"entry":[{},"Keys = <ExprList> |"]},{"entry":[{},"Key <ExprList> |"]},{"entry":[{},"Key = <ExprList> |"]},{"entry":[{},"Bins <ExprList> |"]},{"entry":[{},"Bins = <ExprList> |"]},{"entry":[{},"Bin <ExprList> |"]},{"entry":[{},"Bin = <ExprList>"]},{"entry":["<ValExpr>","Values = <ValueList>"]},{"entry":["<WithFirstPacket>","With First Packet |"]},{"entry":[{},"WithFirst Packet |"]},{"entry":[{},"WithFirstPacket |"]},{"entry":[{},"For First Packet |"]},{"entry":[{},"ForFirst Packets |"]},{"entry":[{},"ForFirstPacket"]},{"entry":["<WithLastPacket>","With Last Packet |"]},{"entry":[{},"WithLast Packet |"]},{"entry":[{},"WithLastPacket |"]},{"entry":[{},"For Last Packet |"]},{"entry":[{},"ForLast Packet |"]},{"entry":[{},"ForLastPacket"]},{"entry":["<ForEachPacket>","For Each Packet |"]},{"entry":[{},"ForEach Packet |"]},{"entry":[{},"ForEachPacket"]},{"entry":["<ForEachFlow>","For Each Flow |"]},{"entry":[{},"ForEach Flow |"]},{"entry":[{},"ForEachFlow"]},{"entry":["<Lvar>","LVar<Index>"]},{"entry":["<HeaderValue>","OrigFlowType |"]},{"entry":[{},"NumEntriesInPacket |"]},{"entry":[{},"RouterUptime |"]},{"entry":[{},"UnixSecs |"]},{"entry":[{},"SensorUnixSecs |"]},{"entry":[{},"BaseSequenceNumber |"]},{"entry":[{},"EngineType |"]},{"entry":[{},"Engineld |"]},{"entry":[{},"UnixMSecs |"]},{"entry":[{},"AggregationMethod |"]},{"entry":[{},"AggregationVersion |"]},{"entry":[{},"SamplingInterval |"]},{"entry":[{},"SenderAddr"]},{"entry":["<EntryValue>","SourceAddr |"]},{"entry":[{},"DestAddr |"]},{"entry":[{},"NextHop |"]},{"entry":[{},"InInterface |"]},{"entry":[{},"OutInterface |"]},{"entry":[{},"NumPackets |"]},{"entry":[{},"NumBytes |"]},{"entry":[{},"FlowStartTime |"]},{"entry":[{},"FlowEndTime |"]},{"entry":[{},"SourcePort |"]},{"entry":[{},"DestPort |"]},{"entry":[{},"PAD8 |"]},{"entry":[{},"TcpFlags |"]},{"entry":[{},"Protocol |"]},{"entry":[{},"TOS |"]},{"entry":[{},"SourceAS |"]},{"entry":[{},"DestAS |"]},{"entry":[{},"SourceNetmask |"]},{"entry":[{},"DestNetmask |"]},{"entry":[{},"PAD16 |"]},{"entry":[{},"NumFlows"]},{"entry":["<ExprLogical>","! <Expr> |"]},{"entry":[{},"<Expr> && <Expr> |"]},{"entry":[{},"<Expr> || <Expr> |"]},{"entry":[{},"<Expr> <> Expr> |"]},{"entry":[{},"<Expr> != <Expr> |"]},{"entry":[{},"<Expr> == <Expr> |"]},{"entry":[{},"<Expr> = <Expr> |"]},{"entry":[{},"<Expr> <= <Expr> |"]},{"entry":[{},"<Expr> < <Expr> |"]},{"entry":[{},"<Expr> >= <Expr> |"]},{"entry":[{},"<Expr> > <Expr>"]},{"entry":["<ExprBitwise>","~ <Expr> |"]},{"entry":[{},"<Expr> & <Expr> |"]},{"entry":[{},"<Expr> AND <Expr> |"]},{"entry":[{},"<Expr> | <Expr> |"]},{"entry":[{},"<Expr> OR <Expr> |"]},{"entry":[{},"<Expr> {circumflex over (\u2009)} <Expr> |"]},{"entry":[{},"<Expr> EOR <Expr> |"]},{"entry":[{},"<Expr> XOR <Expr>"]},{"entry":["<ExprArithmetic>","<Expr> + <Expr> |"]},{"entry":[{},"<Expr> \u2212 <Expr> |"]},{"entry":[{},"<Expr> * <Expr> |"]},{"entry":[{},"<Expr> \/ <Expr> |"]},{"entry":[{},"<Expr> % <Expr> |"]},{"entry":[{},"<Expr> # <Expr> |"]},{"entry":["<ExprList>","<Expr> |"]},{"entry":[{},"{ <Expr> <Expr> . . . <Expr> }"]},{"entry":[{},"Multiple exprs in a list should be space-"]},{"entry":[{},"delimited"]},{"entry":["<ValueList>","<Value> |"]},{"entry":[{},"{<Value> <Value> . . . <Value> }"]},{"entry":[{},"Multiple values in a list should be space-"]},{"entry":[{},"delimited"]},{"entry":["<Value>","Sum:<Expr> |"]},{"entry":[{},"Or:<Expr> |"]},{"entry":[{},"Min:<Expr> |"]},{"entry":[{},"Max:<Expr> |"]},{"entry":[{},"First:<Expr> |"]},{"entry":[{},"Last:<Expr> |"]},{"entry":[{},"Unique:<Expr>"]},{"entry":["<PrintType>","UInt: |"]},{"entry":[{},"Int: |"]},{"entry":[{},"CUInt: |"]},{"entry":[{},"CInt: |"]},{"entry":[{},"Secs: |"]},{"entry":[{},"MSecs: |"]},{"entry":[{},"TcpFlags: |"]},{"entry":[{},"Protocol: |"]},{"entry":[{},"IPAddr: |"]},{"entry":[{},"Bits: |"]},{"entry":[{},"Hex:"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"@"}]}}}}},"The above example language elements support the singular execution of a query (mquery), and repeated execution of a query over a plurality of time bins (mbinnedquery). A time bin is synonymous with a time period. An example of a time bin is the time period from time unit 9:01 to 9:02. An example of a timing bin specification is (900, 1000, 10), which is interpreted to mean that the first time bin is to start at \u201ctime tick\u201d 900, and the last time bin is to stop at \u201ctime tick\u201d 1000, with each time bin having a bin size of 10 \u201ctime ticks\u201d. Accordingly, the example time bin specification results in 10 time bins (over which the query is to be run).","The above example language elements assume two types of working data structures for returning the result of the query, a histogram data structure and an array data structure. The two data structures are created using the command element \u201cDefine Histogram\u201d (also specifiable as Define Hist or DefHist), and \u201cDefine Array\u201d (also specifiable as DefArray).","The query results are added to the histogram or array data structures through the corresponding \u201cAdd to\u201d language elements. The query results are selected using the remaining language elements, which are substantially self-explanatory to those skilled in art. In particular, those skilled in the art will appreciate that inclusion of network oriented language elements such as the various versions of \u201cWith First Packet\u201d, \u201cWith Last Packet\u201d, \u201cFor First Packet\u201d, \u201cFor Last Packet\u201d, \u201cFor Each Packet\u201d, and the various predetermined network oriented \u201cheader value\u201d and \u201centry value\u201d keywords, renders the query language especially efficient in articulating interrogatories against a collection of network traffic data. Those skilled in the art will also appreciate that the present invention may be practiced with more or less language elements.","Referring now to , wherein a flow chart illustrating the operational flow of the relevant aspects of query compiler , in accordance with one embodiment, is shown. As illustrated, upon invocation, at block , query compiler  locates the \u201cnext\u201d command of the query being compiled. Locating the \u201cnext \u201d command of the query being compiled may be effectuated using any one of a number of \u201cparsing\u201d techniques known in the art. Upon locating the \u201cnext\u201d command of the query being compiled, at block , query compiler  identifies the command read (e.g. from a language dictionary maintained by query compiler ). Next, at block , query compiler  reads the rest of the command syntax, and determines the semantic for the identified command.","Then, at block , query compiler  determines if end of query has been reached. If not, query compiler  returns to block , and continues the compilation process from there. Eventually, the end of query being compiled is reached. At such time, query compiler  may optionally apply one or more optimizations to the commands analyzed, block . The optimizations may be any one or more of the applicable compiler optimization techniques known in the art.","Finally, with or without optimizing the commands analyzed, at block , query compiler  generates byte codes for the commands analyzed. \u2013illustrate one example implementation of the byte code generation part of query compiler . In alternate embodiments, other equivalent \u201ccode generation\u201d approaches may be practiced instead. In one embodiment, query compiler  includes the size of the byte code generated for the query in the beginning of the executable byte codes.","Referring now to , wherein a flow chart illustrating the operational flow of the relevant aspects of query execution engine  in accordance with one embodiment, is shown. As illustrated, upon invocation, if necessary (e.g. when invoked the first time), query execution engine  initializes the runtime environment for query execution, block . Initialization tasks include but are not limited to obtaining and initializing a memory pool allocation, loading an exception handler, and so forth.","Upon setting up the runtime environment, query execution engine  determines if the query to be executed is a binned query, block . If so, query execution engine  further determines the time bin structure, i.e. the time bins over which the query is to executed.","Thereafter, query execution engine  successively fetches and dispatches the \u201cbyte codes\u201d of the query to be executed, blocks \u2013. As each \u201cbyte code\u201d is executed, query execution engine  repeats the process, until eventually all generated \u201cbyte codes\u201d of a query has been executed, for each and every applicable time bin. Execution of each byte code is dependent on the semantic of the corresponding command or commands, similar to other \u201cbyte code\u201d based execution known in the art. These corresponding portions may be implemented in any one of a number of implementation approaches of these like kind \u201cbyte code\u201d based execution facilities known in the art.","In one embodiment, as part of controlling the execution, query execution engine  automatically \u201capportions\u201d the selected data between two time bins, when the selected data straddles two time bins and the query is a binned query. Query execution engine  analyzes the amount of \u201cstraddling\u201d in each of the neighboring time bins, and proportionally apportions the data accordingly. In alternate embodiment, disproportionate or weighted apportionment may also be supported.","In one embodiment, as part of controlling the execution, query execution engine  also automatically amplifies the selected data, if the selected data were collected by the reporting\/monitored device on a sampling basis. For the illustrated embodiment, query execution engine  also analyzes the data to determine the sampling ratio, and amplifies accordingly. For example, in querying for packet count during a time period, upon determining that the packet count data were collected on a \u201c1 of 10\u201d sampling method, query execution engine  automatically amplifies the packet count data by 10\u00d7. In alternate embodiments, non-corresponding, i.e. amplification that is larger or smaller the sampling ratio, may also be supported.","At the end of execution, for the illustrated embodiment, query execution engine  \u201ctears down\u201d the execution environment, block . In alternate embodiments, fully or partially persistent runtime environment for different queries may be practiced instead.",{"@attributes":{"id":"p-0070","num":"0073"},"figref":"FIG. 9","b":["101","103","900","902","904","900","906","908","910","912","904","906","906","910","902","912"]},"Thus, it can be seen from the above descriptions, a novel method and apparatus for collecting network traffic data and querying the collected data has been described. The novel scheme is particularly useful in detecting misuse of network links, e.g. a denial of service attack.","While the present invention has been described referencing the illustrated and above enumerated embodiments, the present invention is not limited to these described embodiments. Numerous modification and alterations may be made, consistent with the scope of the present invention as set forth in the claims to follow. Thus, the above described embodiments are merely illustrative, and not restrictive on the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The present invention will be described by way of exemplary embodiments, but not limitations, illustrated in the accompanying drawings in which like references denote similar elements, and in which:",{"@attributes":{"id":"p-0012","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0019"},"figref":"FIGS. 5","i":["a","b "],"b":"5"},{"@attributes":{"id":"p-0017","num":"0020"},"figref":"FIGS. 5","i":["c","d "],"b":"5"},{"@attributes":{"id":"p-0018","num":"0021"},"figref":"FIGS. 6","i":["a","b "],"b":"6"},{"@attributes":{"id":"p-0019","num":"0022"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0020","num":"0023"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0025"},"figref":"FIGS. 10","i":["a","e "],"b":"10"},{"@attributes":{"id":"p-0023","num":"0026"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GLOSSARY"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ATM","Asynchronous Transfer Mode"]},{"entry":[{},"AS","Autonomous System"]},{"entry":[{},"DNS","Domain Name Service"]},{"entry":[{},"DSCP","Differentiated Services Code Point"]},{"entry":[{},"IP","Internet Protocol"]},{"entry":[{},"SONET","Synchronous Optical Network"]},{"entry":[{},"TCP","Transmission Control Protocol"]},{"entry":[{},"TOS","Type of Service"]},{"entry":[{},"UDP","User Datagram Protocol"]},{"entry":[{},"Unixsecs","Time in seconds"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}}]},"DETDESC":[{},{}]}
