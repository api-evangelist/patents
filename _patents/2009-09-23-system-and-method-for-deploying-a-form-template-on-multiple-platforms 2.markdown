---
title: System and method for deploying a form template on multiple platforms
abstract: The present embodiments are directed to systems and methods of creating and deploying electronic forms for collecting information from a user using a browser or other application. Various embodiments herein include features for automatically selecting and configuring services for rendering and submitting intelligent forms or other data structures in an automated process environment. The automated process environment may include features which permit an enterprise to blend electronic forms, process management, document security, and document generation capabilities to deliver applications which may reduce paperwork, accelerate decision-making processes, and help ensure regulatory compliance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542378&OS=09542378&RS=09542378
owner: Adobe Systems Incorporated
number: 09542378
owner_city: San Jose
owner_country: US
publication_date: 20090923
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["With the growing use of communications networks such as the Internet, it has become more common for companies and other users to serve electronic forms or documents in a variety of ways over networks to clients, customers, or other end users. The end users may use a computer or other electronic device and a browser running on this device to access a web page, for example to view a form or document and to complete the form and then submit the form data back to a web server for processing of the data.","For example, a client of a web service provider may provide insurance information using such a served form or a customer may provide credit card or other purchasing information to complete a purchase via a fillable form. In other cases, enterprises or businesses may allow employees to generate letters or packages that are then transmitted to recipients such as customers on a large customer list using such a finable form or document. Often, these fillable forms or documents are rendered or created as document, letter, package, or form templates. During rendering, data may be retrieved from a data source and merged into the template to create a document or form to be served to a client device.","Various embodiments herein include one or more of systems, methods, software, and\/or data structures to automatically select and configure services for rendering and submitting intelligent forms or other data structures in an automated process environment. As an example, the automated process environment may include features which permit an enterprise to blend electronic forms, process management, document security, and document generation capabilities to deliver applications which may reduce paperwork, accelerate decision-making processes, and help ensure regulatory compliance. The following embodiments and aspects thereof are described and illustrated in conjunction with systems, tools, and methods which are meant to be exemplary and illustrative, and not limiting in scope.","According to a first aspect, a computer-implemented method is provided that may include retrieving a form definition template from a data storage. The form definition template may include an electronic document and defines a form that includes electronic form data to be displayed to a user. In addition, the form definition template may be deployable on one or more platforms when rendered into a runtime format. The method also includes retrieving behavior information (or \u201chints\u201d) associated with the form definition template. Further, the behavior information may specify a render service to be used to render the form definition template from a design format to a runtime format. The method may also include: using the behavior information, associating a render service with the form definition template in a data storage.","According to a second aspect, a computer system including a processor and a data storage is provided. The data storage may store a plurality of form definition templates. Each of the form definition templates may include an electronic document and may define a form that includes electronic form data to be displayed to a user. Further, the plurality of form definition templates may be deployable on one or more platforms when rendered into a runtime format. The data storage may also store behavior information (or \u201chints\u201d) associated with each of the form definition templates. The hints may be stored with its associated form definition template or separately. Further, the behavior information may specify a render service to be used to render each form definition template from a design format to a runtime format and a submit service to be used to capture data submitted by a user of a form rendered from one of the plurality of form definition templates. The data storage may also store a process design module that includes a behavior information retriever module. The process design module may be run by the processor to generate a process that includes at least one of the plurality of form definition templates. Additionally, the behavior information retriever module may be run by the processor to retrieve the behavior information associated with a form definition template included in the process and, in response, to associate a render service and a submit service with the included form definition template.","According to a third aspect, a computer-implemented method is provided that includes generating a form definition template that includes an electronic document and defines a form that includes electronic form data to be displayed to a user. The form definition template may be deployable on one or more platforms when rendered into a runtime format. The method also includes generating behavior information (or \u201chints\u201d) associated with the form definition template. The behavior information may specify a render service to be used to render the form definition template from a design format to a runtime format. The method further includes storing the behavior information associated with the form definition template in a data storage structure.","In addition to the exemplary aspects and embodiments described above, further aspects and embodiments will become apparent by reference to the drawings and by study of the following descriptions.","Various embodiments herein include one or more of systems, methods, software, and\/or data structures to automatically select and configure services for rendering and submitting intelligent forms or other data structures in an automated process environment. As an example, the automated process environment may include features which permit an enterprise to blend electronic forms, process management, document security, and document generation capabilities to deliver applications which may reduce paperwork, accelerate decision-making processes, and help ensure regulatory compliance. The specific details of the various systems and methods described herein are presented below with reference to .","An embodiment of an exemplary system  is shown in . This embodiment includes two main components: a Form Designer  and a Form Server . The Form Designer  (or \u201cProcess Designer,\u201d or simply \u201cDesigner\u201d) may allow a form designer and\/or a process (or \u201cworkflow\u201d) designer to design e-forms, to preview forms while designing, and to develop processes that utilize one or more forms. The Form Server  (or simply \u201cServer\u201d) enables the access of completed forms using a Web Server  running one or more web applications  for public access. The Designer  and the Server  may reside at the same computer system as the Web Server  or a separate and independent system.","The Designer  or another application may be used to create intelligent, reusable form definition templates . The Designer  may provide a simple way to create and maintain e-forms without involving third-party tools. Further, the Designer  may create templates  (typically XML Forms Architecture (\u201cXFA\u201d)) or structured XML user-interface \u201cform\u201d definitions that render the data and the presentation specified by the template  in a format suitable for a user's run-time environment.","Employing graphical design tools for user interfaces of the Designer , form or process designers may easily include list boxes, drop down lists, command buttons, radio buttons, check boxes, lines, circles, images and static text, e.g., anything they need to create a form. The Designer  can also be used to incorporate database lookups, calculations, automatic formatting, choice lists and even automatic error checking to prevent respondents from entering incorrect data and delaying the processing of their e-forms.","The second component of the system , the Form Server , may be a server that takes form templates  created with the Designer  and delivers them in any of a number of browsers  (or applications operative to display forms such as web browsers, Adobe Acrobat, FLASH players, and the like). In this document, the term \u201cServer\u201d is generally used to refer to this type of server, referring to the computer code effecting the functionality. Communication with the Server  may refer to a number of means, whether entirely in the same physical system or by telecommunication means, or a combination of such means.","The Server  may also allow, in a variation, a user to enter data into a form while disconnected from the Internet, i.e., offline. The form may be single-paged or multi-paged. A package, containing form information, may be prepared by the Server  when invoked, typically by a programming interface. In one example, the package may be downloaded to a separate system of the user. The user may then be able to use his or her browser (or application) to access the content of the package and fill in the form while disconnected from the Internet. Subsequently, the user may have the option of going online to submit a completed form or submit a partially submitted form for validation.","This latter aspect may be implemented as a standalone system or software; alternatively it may be a subcomponent of the Server . In other words, the Server  may be able to both perform (1) packaging of the form template and then transmitting the package to the local user system, and (2) transforming the form template and then delivering the browser language file for display\/rendering on the user system. It may also simply provide functionality to prepare a package of the form template and then possibly transmit the package to the local user system, without the more typical feature of receiving form input from an online user.","The Server  may also be operative to take a form definition template  created with the Designer  and to deliver it in any of a number of browsers (or application formats). In this regard, templates may be designed once and then deployed to any number of users, allowing organizations to manage their e-process and e-business initiatives without creating and maintaining a user interface to accommodate each browser or application type.","The Server  may deliver the run-time form in the appropriate language or format, for instance, Hyper Text Markup Language (HTML), Portable Document Format (PDF), FLASH (SWF), or the like. The Server  may extract a form's field information, such as the type and the positioning of data for a form, and a form's boilerplate information, such as the lines and the static text, from the template  and may convert it to a format that suits the target form for viewing on a user's system. To accomplish this, the Form Server  may include a plurality of render services  operative to render form templates  in a number of different runtime formats which are viewable on a user's computer system . For example, one render service  may render a form template  into PDF format, while another render service  may render a form template  into SWF format. Additionally, each render service  may include configuration information such as input parameters (e.g., Adobe Acrobat Reader enabled), user defined parameters, and others.","The Server  may also provide intelligent templates for user interfaces. In this regard, an enterprise can validate a user's data entry before processing by performing calculations, accessing databases, or enforcing business rules on field-level data. Whenever data is submitted to the Server  using one of a plurality of available submit services , the Server  may merge the data it has received into the template and execute the business logic contained in the template. The resulting data may then be returned to the user's browser.","The submit services  may generally be used to capture data from a user inputting data into a rendered form. The submit services  may determine the file format for the captured data. As an example, submit services  may be operative to handle captured data in numerous submit formats including XML Data package (XDP) format, PDF format, XML Data format, URL-encoded Data format, and others. In addition, the submit services  may include other items in the submit package, including annotations, digital signatures, PDF files, templates, and other items.","To allow end-users to print and save forms locally, the Server  may convert the template  (typically XFA), with or without merged data from a data storage , to another format suitable for printing, such as PDF. Unlike with ordinary HTML forms that print using the web browser, enterprises can precisely control the layout and pagination of these forms. In this regard, users can therefore print their filled-out forms such as license applications, customer statements, invoices, order confirmations, contracts, insurance policies, change of address forms and the like, for their records. They can also sign them and mail them to comply with laws, regulations or policies, where required.","The Server  may be accessible by users' computer systems  via an Application Programming Interface  (\u201cAPI\u201d). In this regard, the Server  may become active when it is requested (via the API ) to perform a function by the web server  (e.g., a request to serve a rendered form to a user's computer system ).","As can be appreciated, XML (eXtensible Markup Language) may be used for its versatility. As a system for defining, validating and sharing document formats, XML has emerged as the basis for business-to-business (B2B) communications on the Internet. However, the embodiments described herein are not necessarily limited to the use of XML as a specification as is clear to a person skilled in the art. Generally, XML Forms Architecture (\u201cXF A\u201d) is an open, public specification that defines how a form will appear and act in an XML environment. This open architecture ensures that form solutions expand with the needs of the enterprise and integrate easily with products from other vendors. By separating its data elements from the details of its graphic presentation, XF A assumes no proprietary data schema, which means that an enterprise can use the system for a broad range of e-process operations. Because XFA works with a large number of browsers or computer platforms, an enterprise can confidently treat all users in the electronic domain the same.","In one or more embodiments, end users may access the Server , by a browser or otherwise, to retrieve a form package containing a form, which typically may be developed earlier by a form designer or process designer using the Designer . The Server  may transform the form into an offline form package. The offline form package may include all the pages in the form in the appropriate language supported by the browser or application, any associated images, and supporting client-side scripts. Typically, the end user may save this form package to his or her local system and can disconnect from the Internet without affecting completion of the form. As can be appreciated, the form package may be saved to any system accessible to the user. The end user may then open the offline form package to access the form. The end user can subsequently fill in the form and save the data locally (or anywhere accessible to the user) while offline (e.g., while disconnected from the Internet). In addition, the user can open previously saved form data to complete a form before submitting it, typically back to the Server .","The Application Programming Interface (API)  is generally the method used by Web applications  to communicate with, and access the services of, the Server . The API  may be used to interface with the Server  and integrate the Server  functionality into Web applications . As mentioned earlier, the Server  is typically stateless, and is therefore typically accessible via the API . This means that the Server  typically becomes active when it is requested (via the API ) to perform a function.","The Web applications  may provide the end user with access to Web facilities. This can be done using HTML pages, Application Server Pages (\u201cASP\u201ds), ColdFusion pages, and others. Using the API , the web applications  may gather information from the end users (e.g., using computer systems ). From a single template, the Server  may determine the browser type and then transform the form template , with or without data from the data storage , into a format that best suits that particular browser or application type using an appropriate render service .","Embodiments described herein may produce and read form data in an XML format. This enables organizations to exchange data between form and non-form applications using standard XML processing tools. As mentioned earlier, the embodiments described herein are not limited to XML, but the following serves as a description of how the features could be implemented using XML.","The template  may generally include the form layout information created using Designer . The template  generated by the Designer  is typically (but not exclusively) an XML-based document (typically XFA) that contains all information such as form object placement, naming, display properties, validations, and calculations. The form template  (also known as form definition template) may be edited by a form designer and is typically not changed by the user. Generally, the template  may contain all of the information necessary to display and manipulate the data displayed to the user.","The form data stored in the data storage  represents the content entered by the user and data generated by calculations housed in the form template . As an example, the data  may be saved in an XML document. The template  typically contains all of the static information such as object names, drop down lists, calculations, number formatting, and the like, while the associated data file may contain the information entered by the user at runtime. Additionally, the content saved in the data file may be structured to respect page, group, and data record information.","Security features may be added to forms to verify that form data has not been tampered with. Using a signature object, one can protect the integrity of forms by allowing end users to use certificates to digitally sign form data. Once the data is signed, it cannot be altered on the form. Verifying the signature guarantees that no one has tampered with the data after it was submitted. When a user signs a form, a message digest of the data to be signed is created and a mathematical computation combines the user's private key with the specified form data and encrypts them together. The output is a digital signature. This digital signature contains the locked form object values and the certificate information of the person who signed the form. When viewed as part of the submitted XML form data, the encrypted data is unreadable. When the Server's cryptographic component verifies the signature, it uses the public key to read the signed data and compares the signed data to the unencrypted data on the form. If the encrypted and unencrypted data do not match, this means that the data has been tampered with since it was signed and the verification fails.","Using an appropriate render service , the Server  may deliver a form and render it in the format that best matches the presentation and form filling capabilities of the target browser or application. The render service  may accomplish this by extracting the field information and the boilerplate information from the form template  (typically XFA-XFT). The render service  may then convert the form template  to a version that is suitable for a particular browser or application. For example, the render service  may render the form in to a PDF, HTML, SWF, or other file formats.","The Server  may also execute validations and calculations included on the form and return the resulting data to the browser. Calculations and validations can also be executed on the client side using a script language such as JavaScript. Most intelligence in the forms may typically be executed on the Server . For example, when a user clicks on a button on a form, the data may be posted to the Server . The Server  may then merge the received data into the form template and executes any programming associated with the button that was clicked. In some cases, client-side calculations and validations may be supported by the browser or application, allowing intelligence to be executed by the browser or application on the client side.","When end users request a form from the Server  (or click a button or image on a form), they initiate a series of specific processes and interactions between the Server , their browser, and the web application . When a user requests a form, the web application  may initiate a method to request the form from the Server . The call to the Server  may include the name of the requested form and the form presentation. When the user environment is unknown, the render service  may determine the format in which to render the form based on the browser or application information that is passed with the method call. The render service  of the Server  may then transform the form template , form images, and data into output suitable for the target browser or application.","As noted above, one or more form templates  may be used by a process (or workflow) designer to create an automated process. One or more form templates  may be used in a multi-step process that involves multiple users executing multiple tasks. A task represents an action that a user needs to complete in order for the next step in the process to occur. An example process may include a mortgage application process. Initially, a loan applicant may request and complete an interactive mortgage application form. Next, the form may be routed to a decision maker for approval. In addition, a decision or a request for more information may then be provided to the loan applicant to further the loan application process. As can be appreciated, the process designer may include several automatic and\/or manual steps in the process for completing the loan application sequence.","Generally, when a process designer wishes to add a form template  to a particular workflow, the process designer needs to first select an appropriate render service  for the selected form template . In addition to selecting a render service , the process designer may also need to configure the settings of the selected render service . As well as selecting and configuring the render service , the process designer may typically have to select and configure a submit service  for the form template  as well. As can be appreciated, these selection and configuration steps may be time consuming, repetitive, and error prone. For example, the process designer may have to first determine what render and submit services are available, and then configure the parameters of the selected services as supported by the particular features of the form template  (e.g., a form template  may only be able to be rendered in HTML). In addition, the process designer may have a difficult time determining what data structure (e.g., XML schema, or other data structures) is required by the selected form template , which may be important for interpreting data submitted by a submit service  to other steps in the workflow.","To address the above-noted issues and other issues, the present system  includes \u201chints\u201d  or behavior information (e.g., program code) associated with the form templates . In operation, a form designer may develop hints  for each form template  that specify behavior information about the templates . Such information may include which render services  and submit services  to use, configurations for the render services  and submit services , which data structures (e.g., XML schema, or other data structures) to be used with the form template , as well as other behavior information. Such other behavior information may include: in what format the form submits data (e.g., XDP, PDF, email, or the like); whether the form includes process fields (e.g., to allow users to control the path of a work flow); the data structure of the form; what type of PDF form the form is (e.g., Acroform, Flat, XFA, or the like); whether the form supports being rendered as a Form Guide; a list of variations available in a form (e.g., different views of the same form, such as an \u201cinitial view\u201d and an \u201capproval view\u201d); whether the form supports various submit features of one or more applications or browsers; whether the form supports commenting; whether the form supports encryption; and other behavior information.","Using the hints  for a form template , a process designer using the Designer  to develop a process does not need to manually determine behavior information for a form template  prior to adding the form template  to a process. In this regard, when a form template  is added to a process, a hint retriever module  associated with the Designer  may \u201cretrieve\u201d the hints  for the form template , and then automatically select and configure the render service and submit service for the form template . Further, the hint retriever module  may retrieve the hints  to determine which data structure should be used for the form template . As can be appreciated, by automatically selecting the render services  and the submit service , the process designer may develop processes using form templates  in a more efficient and less error-prone manner.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","100","200","108","104","202"]},"The form designer may then generate hints (e.g., the hints  shown in ) associated with the form template (step ). For example, the hints may be program code written by the form designer that, when retrieved, provides behavior information to a process designer application using the form template in a process. Once the hints have been generated, the form template and its associated hints may then be stored in a data storage (step ), such as the data storage  shown in , where they may be subsequently retrieved by a process designer application.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 1","FIG. 1"],"b":["300","300","104","302","304","110","110","306","308","310"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIG. 1","FIG. 1"],"b":["400","400","100","100"]},"In the process  shown in , the steps for designing a process are simplified by utilizing configuration units that group together: 1) a process used to retrieve data to be merged into a form (\u201cprepare data process\u201d); 2) a render process; and 3) a submit process. These configuration units are referred to herein as \u201cAction Profiles.\u201d Generally, the process  simplifies process design by tying form rendering directives to associated form templates, rather than tying the form rendering directives to associated processes using the form templates. In this regard, associations between a form template and the render and submit processes used need not be redefined each time a form is used in another process. Further, by allowing process designers to customize prepare data processes independent of render and submit processes, the process  allows process designers to utilized default render and submit processes without having to spend the time to manually select and configure render and submit processes each time a form is used in another process.","The process  begins with a user requesting a form for rendering (step ). As an example, a user may request a form using a browser of the computer system  shown in . Next, an Action Profile for the requested form may be loaded (step ). As noted above, the Action Profile may specify a prepare data process, a render process, and a submit process for the requested form.","The process  may then call the prepare data process specified by the loaded Action Profile (step ). The prepare data process may then proceed to collect customer-defined data to be merged into the form from one or more sources such as databases, web services, as well as other sources (step ). Once the form data has been added to the form, the process  may call the render process specified by the Action Profile (step ). As noted above, the render process may render the form template into a format viewable by a user (step ). The render process may also merge form data into the rendered form (step ).","Next, the rendered form may be displayed to a user in a suitable format, such as PDF, HTML, SWF, or the like (step ). The user may interact with the form using a user interface, and then submit data entered to the form back to the system (step ). Once the data has been submitted, a submit process specified by the Action Profile may be called (step ), wherein data may be extracted from the submitted form in a predetermined format (step ). As can be appreciated, once the formatted data has been captured, it may be used by other steps in the process dependent upon the specific application.","As noted above, in this embodiment, the prepare data process is separated from the render process. Advantageously, process designers may define prepare data processes without modifying default rendering processes. This feature may be beneficial since modifying rendering processes may be time consuming, repetitive, and error-prone. Additionally, as can be appreciated, the aforementioned \u201cdata structure hints\u201d may be helpful to the designer of the prepare data process by providing information to the designer about the type and location of the data structure used in the form.","Although the invention has been described and illustrated with a certain degree of particularity, it is understood that the present disclosure has been made only by way of example and that numerous changes in the combination and arrangement of parts can be resorted to by those skilled in the art without departing from the spirit and scope of the invention, as hereinafter claimed. Embodiments, such as the system shown in  and the methods , , and  of , of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus (such as the web services, the document and its intelligence\/functions\/scripts, and so on). The computer-readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter affecting a machine-readable propagated signal, or a combination of one or more of them. The term \u201cdata processing apparatus\u201d encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.","A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Generally, the elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Typically, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, a digital camera, to name just a few. Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.","To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.","While this specification contains many specifics, these should not be construed as limitations on the scope of the invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.","Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and\/or parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software and\/or hardware product or packaged into multiple software and\/or hardware products."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
