---
title: Uniform point cloud decimation
abstract: A method, apparatus, system, article of manufacture, and computer readable medium provide the ability to create a point cloud indexed file. A grid (of cells that are divided into subcells) is mapped over points in a point cloud dataset. An occupancy value, that indicates whether a subcell contains a point, is computed for each subcell. A surface area contribution factor is computed for each cell and identifies a count of subcells that are occupied divided by a total number of subcells. The surface area contribution factor for each cell and points for each cell are written to the point cloud indexed file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317965&OS=09317965&RS=09317965
owner: Autodesk, Inc.
number: 09317965
owner_city: San Rafael
owner_country: US
publication_date: 20110324
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Hardware Environment","Software Embodiment Overview","Software Embodiment Details","Logical Flow","CONCLUSION","REFERENCES"],"p":["This application is related to the following co-pending and commonly-assigned U.S. patent application(s), which is\/are incorporated by reference herein:","U.S. patent application Ser. No. 12\/619,490, filed Nov. 16, 2009, by Carl Christer Janson, entitled \u201cPoint Cloud Decimation Engine.\u201d","1. Field of the Invention","The present invention relates generally to visualizing data points, and in particular, to a method, apparatus, and article of manufacture for normalizing a view of large point cloud data.","2. Description of the Related Art","(Note: This application references a number of different publications as indicated throughout the specification by reference numbers enclosed in brackets, e.g., [x]. A list of these different publications ordered according to these reference numbers can be found below in the section entitled \u201cReferences.\u201d Each of these publications is incorporated by reference herein.)","Point clouds are often created by reality capture devices such as laser three-dimensional (3D) scanners that measure a large number of points (e.g., from thousands to many billions of points [3D coordinates]) on the surface of an object, and output a point cloud as a data file. The point cloud represents the visible surface of the object that has been scanned or digitized. With the increase usage of such reality capture devices, large point cloud data sets are more frequently created for consumption by design applications. The challenge that design software faces is visualizing and using this data efficiently in the applications. While the point cloud data set is often very large, the number of points an application is capable of handling for visualization and other needs is a small fraction\u2014a few million points, for example. Prior art methods fail to provide the ability to process the massive volume of points, in real time (e.g., preserving a ten [10] frames per second or faster rate) to read a small fraction of points that have the property of accurately representing the original data set without loss of detail or information that causes misrepresentation of the original data. Such problems may be better understood with a detailed description of prior art point cloud processing and viewing methodologies.","Point cloud visualization and applications are increasingly important in design, especially due to the decrease in the price point of the technology. Point clouds can contain an enormous number of points. One of the major challenges is representing the set of points while providing the ability to extract a small subset that is highly representative of the spatial region of interest.","As described above, a point cloud is created using a laser beam\/scanner that scans objects\/surfaces to obtain millions of points. Prior art methodologies may attempt to select a subset of the points in a quick and efficient manner. One approach divides a volume of interest into equal size rectangular 3D cells. Each of the thousands of cells may contain millions of points. The issue arises as to how to determine how many and which points to select from\/in a cell. In the prior art, the total number of points in a cell may be compared to the total number of points in other cells. These relative totals are then used to determine how many points to select from each cell. Thereafter, points are merely read in the order in which they are stored in memory. Point sample density falls off as the square of the distance from the scanner, since the scan process can be viewed as emitting rays radially from the scanner location. Thus, the further an object\/surface lies from the optics source, the sparser the sampled points are.","Accordingly, there is a desire to eliminate the scanner artifact, to normalize the point selection, and to obtain a uniform distribution\/real depiction of the distribution of the point cloud data regardless of the location of the scanner. Many prior art approaches have attempted to solve such problems. Such approaches range from nearest neighbor based approaches [1] to frequency domain based approaches [4]. Concepts of downsampling, borrowed from image processing techniques have also been incorporated in solutions to view large point data sets [2]. Goals of some techniques include noise removal and optimal representation, at the expense of computation and with freedom to modify the original point set [3].","Another prior art based solution (e.g., AutoCAD\u2122 PCG\u2122 available from the assignee of the present invention) referred to as a point cloud decimation engine (which is described in copending U.S. patent application Ser. No. 12\/619,490, filed Nov. 16, 2009, which application is incorporated by reference herein), while maintaining really good frame rates, may have issues with a \u201chalo\u201d effect around the scanners, since the indexing scheme uses the count of points within a cell to determine the relative point contribution from the cell. In this regard,  illustrate the halo effect caused by prior art solutions. In , the \u201cS\u201d indicates the location of the scanner device. As illustrated, an object\/surface on a plane (r) close to the scanner S will have more points scanned compared to that of an object laying on a plane (3r) located a further distance from the scanner S.  illustrates a \u201chalo\u201d with a dense pattern of points for the object in close proximity to the scanner\/light source.","However, to provide a practical approach, an industrial strength and simple solution is paramount, with a clear demonstration of uniformity of display for a wide class of customer data sets.","Embodiments of the invention achieve uniform point cloud decimation through relative surface area contribution estimation by the introduction of the notion of \u201coccupancy\u201d of a spatial subdivision or cell. A raw set of points is input and used to produce an indexed version on disk (e.g., using a PCG [point cloud grid] file format) to store the data for efficient disk access.","The occupancy metric is an estimation of surface area contribution, hence informational content, of a spatial subdivision. The surface area contribution provides a relative weight to a subdivision cell in terms of the number of points to be contributed from the cell. Surface area contribution is combined with techniques to distribute points within a cell\u2014so that when more points from a cell are read sequentially from disk\u2014it provides an increasingly high resolution rendering, uniformly increasing in density throughout the scene. A specific example of distributing points with this property is described\u2014using randomization of points.","Embodiments of the invention yield image quality comparable to some of the specialized rendering packages, while being substantially faster than other indexing schemes including up to 8 times faster in some cases.","In the following description, reference is made to the accompanying drawings which form a part hereof, and which is shown, by way of illustration, several embodiments of the present invention. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","202","202","202","204","204","204","206","202","214","216","228","202","232"]},"In one embodiment, the computer  operates by the general purpose processor A performing instructions defined by the computer program  under control of an operating system . The computer program  and\/or the operating system  may be stored in the memory  and may interface with the user and\/or other devices to accept input and commands and, based on such input and commands and the instructions defined by the computer program  and operating system  to provide output and results.","Output\/results may be presented on the display  or provided to another device for presentation or further processing or action. In one embodiment, the display  comprises a liquid crystal display (LCD) having a plurality of separately addressable liquid crystals. Each liquid crystal of the display  changes to an opaque or translucent state to form a part of the image on the display in response to the data or information generated by the processor  from the application of the instructions of the computer program  and\/or operating system  to the input and commands. The image may be provided through a graphical user interface (GUI) module A. Although the GUI module A is depicted as a separate module, the instructions performing the GUI functions can be resident or distributed in the operating system , the computer program , or implemented with special purpose memory and processors.","Some or all of the operations performed by the computer  according to the computer program  instructions may be implemented in a special purpose processor B. In this embodiment, the some or all of the computer program  instructions may be implemented via firmware instructions stored in a read only memory (ROM), a programmable read only memory (PROM) or flash memory within the special purpose processor B or in memory . The special purpose processor B may also be hardwired through circuit design to perform some or all of the operations to implement the present invention. Further, the special purpose processor B may be a hybrid processor, which includes dedicated circuitry for performing a subset of functions, and other circuits for performing more general functions such as responding to computer program instructions. In one embodiment, the special purpose processor is an application specific integrated circuit (ASIC).","The computer  may also implement a compiler  which allows an application program  written in a programming language such as COBOL, Pascal, C++, FORTRAN, or other language to be translated into processor  readable code. After completion, the application or computer program  accesses and manipulates data accepted from I\/O devices and stored in the memory  of the computer  using the relationships and logic that was generated using the compiler .","The computer  also optionally comprises an external communication device such as a modem, satellite link, Ethernet card, or other device for accepting input from and providing output to other computers .","In one embodiment, instructions implementing the operating system , the computer program , and the compiler  are tangibly embodied in a computer-readable medium, e.g., data storage device , which could include one or more fixed or removable data storage devices, such as a zip drive, floppy disc drive , hard drive, CD-ROM drive, tape drive, etc. Further, the operating system  and the computer program  are comprised of computer program instructions which, when accessed, read and executed by the computer , causes the computer  to perform the steps necessary to implement and\/or use the present invention or to load the program of instructions into a memory, thus creating a special purpose data structure causing the computer to operate as a specially programmed computer executing the method steps described herein. Computer program  and\/or operating instructions may also be tangibly embodied in memory  and\/or data communications devices , thereby making a computer program product or article of manufacture according to the invention. As such, the terms \u201carticle of manufacture,\u201d \u201cprogram storage device\u201d and \u201ccomputer program product\u201d as used herein are intended to encompass a computer program accessible from any computer readable device or media.","Of course, those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with the computer .","Although the term \u201cuser computer\u201d or \u201cclient computer\u201d is referred to herein, it is understood that a user computer  may include portable devices such as cell phones, notebook computers, pocket computers, or any other device with suitable processing, communication, and input\/output capability.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 3","FIG. 2"],"b":["300","302","202","306","302","202","306"]},"A network  such as the Internet connects clients  to server computers . Network  may utilize ethernet, coaxial cable, wireless communications, radio frequency (RF), etc. to connect and provide the communication between clients  and servers . Clients  may execute a client application or web browser and communicate with server computers  executing web servers . Such a web browser is typically a program such as MICROSOFT INTERNET EXPLORER\u2122, MOZILLA FIREFOX\u2122, OPERA\u2122, APPLE SAFARI\u2122, etc. Further, the software executing on clients  may be downloaded from server computer  to client computers  and installed as a plug in or ACTIVEX\u2122 control of a web browser. Accordingly, clients  may utilize ACTIVEX\u2122 components\/component object model (COM) or distributed COM (DCOM) components to provide a user interface on a display of client . The web server  is typically a program such as MICROSOFT'S INTERNENT INFORMATION SERVER\u2122.","Web server  may host an Active Server Page (ASP) or Internet Server Application Programming Interface (ISAPI) application , which may be executing scripts. The scripts invoke objects that execute business logic (referred to as business objects). The business objects then manipulate data in database  through a database management system (DBMS) . Alternatively, database  may be part of or connected directly to client  instead of communicating\/obtaining the information from database  across network . When a developer encapsulates the business functionality into objects, the system may be referred to as a component object model (COM) system. Accordingly, the scripts executing on web server  (and\/or application ) invoke COM objects that implement the business logic. Further, server  may utilize MICROSOFT\u2032S\u2122 Transaction Server (MTS) to access required data stored in database  via an interface such as ADO (Active Data Objects), OLE DB (Object Linking and Embedding DataBase), or ODBC (Open DataBase Connectivity).","Generally, these components - all comprise logic and\/or data that is embodied in\/or retrievable from device, medium, signal, or carrier, e.g., a data storage device, a data communications device, a remote computer or device coupled to the computer via a network or via another data communications device, etc. Moreover, this logic and\/or data, when read, executed, and\/or interpreted, results in the steps necessary to implement and\/or use the present invention being performed.","Although the term \u201cuser computer\u201d, \u201cclient computer\u201d, and\/or \u201cserver computer\u201d is referred to herein, it is understood that such computers  and  may include portable devices such as cell phones, notebook computers, pocket computers, or any other device with suitable processing, communication, and input\/output capability.","Of course, those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with computers  and .","Embodiments of the invention are implemented as a software application on a client  or server computer . At least one or more of the following three elements are used to provide a uniform distribution\/decimation of large point clouds in accordance with one or more embodiments of the invention: (1) Surface area estimation\u2014with cell occupancy as one implementation of estimating it; (2) downsampling; and (3) a successive space filling distribution of points\u2014with randomization of points as one method of achieving that. A brief introduction of each element will follow with a detailed description of each element and a methodology that utilizes the different elements.","The cell occupancy determination is a metric that is used to determine the relative contribution (fraction) of points to read from a particular cell. Embodiments of the invention break up a volume\/cell into subcells and use the notion that if a subcell has at least one point from the scan, it is considered occupied. The number of occupied subcells are accumulated to provide an estimate of surface area contribution to the cell. Accordingly, the notion of cell occupancy enables a simple, consistent, and quick determination of the surface area contribution for a particular cell. The surface area contribution can be used as a metric to determine the number of points to use\/read from a cell. In other words, if one cell has one million points and another cell as two million points, cell occupancy is used do estimate the surface area contribution of that cell while eliminating the \u201chalo\u201d effect and providing uniformity\/normalization across the cells. If the cells can be normalized with a contribution factor between zero (0) and one (1), the number of points to be selected can be based on such a contribution factor. Embodiments of the invention provide the ability to determine such a contribution factor based on the notion of cell occupancy.","Downsampling is used to account for the sparseness of point distribution based on the distance from the scanner. In this regard, as the point lies further from the scanner source, a coarser subgrid results. However, closer to the scanner source, the point distribution is denser. One or more embodiments of the invention perform downsampling to reduce the resolution in subgrids\/subcells from a high resolution to a lower\/coarser resolution (e.g., from 256 to 128 bits).","The randomization of points provides the ability to store the points in a grid in a random manner so as to evenly distribute the retrieval of the points for a cell. To better understand this concept, background information regarding the storage of points may be useful. Indexed files may be represented on disk as a 3D grid of uniform sized cells. Points within a cell are sequential on disk. Thus, when retrieving\/reading\/querying a cell, and to avoid lengthy disk operations, points are merely read in the sequential order in which they are stored. Traditionally, such points may merely be stored in the order in which they are scanned. Embodiments of the invention randomize the order in which the points are stored such that when the points are subsequently read (in the sequential order they are stored in), random points from the cell are retrieved. Such randomization enables a point retrieval that provides an even contribution to the details of the scene.","As used herein, the term \u201ccell\u201d defines an element in a main 3D grid of equal sized rectangular cells that is how points are spatially organized on disk. Further, a cell is the unit that can be spatially queried from a file containing the point cloud data.","The term \u201csubcell\u201d is used for the runtime processing algorithm, where the \u201ccell\u201d is further divided into finer cells for purposes of determining the occupancy metric, and randomizing points within a cell, as will become clearer below.","Occupancy","There are two key challenges in trying to achieve a uniform point distribution:\n\n","To achieve intra-cell point distribution, in one implementation, points are randomized as described in more detail below.","To achieve inter-cell consistency, one or more embodiments of the invention uses a metric to capture surface area\/information content of a cell\u2014and utilizes the notion of \u201coccupancy\u201d as a method to achieve this. One key insight for determining occupancy is to view the scanning process as capturing surface areas. Thus, one may view occupancy as estimating the surface area contribution from within a cell. Such a surface area contribution correlates to the relative informational content of a cell.","In order to estimate the surface area contribution, one may hypothetically analyze a surface intersecting a (256\u00d7256\u00d7256) grid of subcells of a cell. The number of subcells intersected provides an estimation of the surface area.","The term \u201csubcells\u201d may be used at two resolutions for two different purposes. One subcell and resolution is the finest 256\u00d7256\u00d7256 level used for occupancy calculation. The other subcell and resolution is the coarser 16\u00d716\u00d716 resolution for point randomization within a cell.","Since a scan consists of discrete points, determining if a subcell intersects with a surface may be equivalent to determining if a subcell has\/contains at least one point. A count of subcells (say an N\u00d7N\u00d7N subcell grid) divided by N*N to normalize is the \u201coccupancy factor\u201d for a cell. Since we are estimating surface area, the N*N factor normalizes the area contribution taking into account the current subcell resolution. Such an approach ensures that cells with relatively fewer points are given importance based on the number of subcells occupied so that important details are not missed.","If the occupancy of a first cell is 0.8 and a second cell is 0.2 (on a scale of 0-1), then four (4) times as many points should be retrieved, on the average, from first cell as compared to the second cell in order to achieve visual consistency between the cells. Such point retrieval may be achieved by reading sequentially the required number of points from a cell.","Occupancy Accuracy","The natural question is\u2014how accurate a measure is occupancy of the area contribution of the scanned surfaces within a cell.",{"@attributes":{"id":"p-0062","num":"0063"},"figref":["FIG. 4","FIG. 5","FIG. 5"],"b":["502","502","504"]},"For simplicity of argument, if the area of the region is\n\narea==()\u00b7()\n","The error can be approximated by the perimeter cells, in the worst case:\n\n2()\u00b72(1)\n\nIn terms of relative error, this would be:\n",{"@attributes":{"id":"p-0065","num":"0066"},"maths":[{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mfrac":{"mrow":[{"mn":"2.","mo":"\u2062","mrow":{"mi":["k","b","b"],"mo":[".",".",".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"+","mi":"a"}}}},{"mi":["a","k","k","b","b"],"mo":[".",".",".","."]}]}}},{"@attributes":{"id":"MATH-US-00001-2","num":"00001.2"},"math":{"@attributes":{"overflow":"scroll"},"mi":"or"}},{"@attributes":{"id":"MATH-US-00001-3","num":"00001.3"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mfrac":{"mn":"2","mi":"k"},"mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"+","mfrac":{"mn":"1","mi":"a"}}}}}}]},"What this means is, the error depends on the aspect ratio of the rectangle, and the relative size of the rectangle, relative to the grid cell size. One may question how the error relates to the optimality of visual representation. The accuracy of area estimation (i.e. occupancy) determines the optimality of the visual representation. The accuracy of the occupancy may be affected by one or more of the following:\n\n","Aspect ratios of objects in the scene may further affect the accuracy of the area estimation through occupancy calculation. Cells with thin objects (smaller value of a in ), will tend to contribute a larger relative number of sample points based on relative occupancy values. This will result in areas of the scene with finer details getting more emphasis\u2014which in many cases is desirable. Since the data is displayed on a screen, even a line (which has geometrically zero area) has area as defined by pixel resolution, which offers a practical lower bound for the value of the aspect ratio to be considered in error estimation.","Downsampling","As described above, to account for the sparcity of point distribution as the distance from the scanner increases, downsampling may be performed. In this regard, as the distance from the scanner increases, it is desirable to achieve a subgrid of increasing coarseness. For example, given a 256\u00d7256\u00d7256 subcell resolution, for dense scans, a reasonable surface approximation can be obtained. However, in some cases for sparser scans, or situations where the scan resolution is less than the grid resolution because of distance from the scanner, an averaging filter may be applied. Typical averaging or noise removal filters in image processing may look at a moving window, and in the downsampling process, look for a certain pixel configuration to determine the downsampled value. Thus, if the scan results in sparse points compared to the resolution, holes in the view may result.","In accordance with embodiments of the invention, the downsampling is performed with respect to the occupancy from above.  illustrate how downsampling results in a more accurate estimation of surface area in accordance with one or more embodiments of the invention.  illustrates a coarser (by factor of 2) downsampling. One may note that the \u201cnormalized area\u201d (number of cells\/N*N) is higher in  compared to that of  (almost 0.5 v\/s 0.25\u2014i.e. double).","More specifically, the occupancy of the downsampled image is computed if the change is significant from the higher resolution grid. To perform the downsampling\/apply the filter, the resolution may be reduced by a factor of two (2) in each iteration (e.g., evolving from 256\u00d7256\u00d7256 to 128\u00d7128\u00d7128, etc.). A voxel (volumetric pixel) is \u201cset\u201d if any of the pixels in a subgrid\/cell is set. Referring again to , the downsampling of the points from  results in the subgrid of . The shaded areas indicate whether a particular cell is occupied by virtue of containing a point in the subcell. The resulting subgrid of  is more coarse compared to that of the dense\/higher resolution subgrid of .","Often times, a dense grid structure has many holes and is not uniform. Upon filtering\/downsampling, the holes (e.g., voids in a surface) may be filled and the grid of points may be more regular.  illustrates a downsampled version of the dense high resolution grid of points of . As illustrated, holes are filled and the grid structure is coarse and more uniform subsequent to the downsampling.","Randomization of Points","As described above, when points are read from disk, they are read sequentially (no disk seek operations are performed to expedite the processing). If you have a limited number of points to be read, it is desirable to obtain a range of points that are distributed across a volume\/region. Embodiments of the invention enable the ability to randomize the points that are read while maintain the sequential read operation.","In order to achieve a distribution of the points read, each cell is divided into a 16\u00d716\u00d716 set of subscells for classification purposes, points are bucketed within these subcells, and points are randomly selected from each of the subcells, and written out to disk\u2014representing a spatially random list of points in the cell.","The following illustrates one method of randomization. If one thinks of a sequential cell numbering scheme (the next sequential cell index is an adjacent cell)\u2014if the indices are bit-reversed and sorted\u2014then\u2014selecting from this sorted sequence results in a maximal spatial (or cell) separation of points. Such a point separation provides a nice \u201cfilling in\u201d of points as more points are progressively read from the cell. Table A illustrates a 2D analogy:",{"@attributes":{"id":"p-0077","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"char"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"char"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"char"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"char"}}],"thead":{"row":[{"entry":[{},"TABLE A"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0","1","2","3"]},{"entry":[{},"7","6","5","4"]},{"entry":[{},"8","9","10","11"]},{"entry":[{},"15","14","13","12"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}}}},"Looking at the bit pattern of sequential indices with the bits reversed:\n\n","In other words, by listing individual subcells in sequential order and inverting the bits in the subcell, the points are randomized. Thus, the order in which the points in the cells are stored on disk (for subsequent readout) is randomized. Such randomization results in a good separation between points. While this is one randomization approach\u2014other methods of randomization, e.g. through a random number generator that indicates which subcell to pick, can also applied at this stage. Furthermore, randomizing is just one method of achieving the desired property that points are uniformly distributed, there are more deterministic methods that can be used to achieve the same desired property of points stored on disk. If points are uniformly distributed across cells, a well dispersed distribution that avoids aliasing artifacts results.  illustrates a cell  with subcells  (1-15). When processing the cell , it is desirable to store all of the points in the cell  but randomize the storage of the points. Thus, the cell  is divided into a grid and points are put into each of the grids\/subcells . Subcells  are picked\/selected randomly for the order in which they are stored on disk (e.g., 0, 8, 4, 12, 2, etc.) A random number generator may be used to determine which subcell  to store first.","Accordingly, points within a 3D cell are distributed in a random pattern, however, with the property that they have a distribution with successive (random) points that are \u201cfar apart\u201d. Such a randomization results in the property that as points are sequentially read from the start of the cell, space is populated with a uniformly increasing density, eliminating aliasing or spatial bias artifacts.",{"@attributes":{"id":"p-0081","num":"0086"},"figref":"FIG. 9"},"The input  is the raw set of points from different raw formats and the output  is a point cloud indexed file (e.g., PCG file) that contains points in each cell of the rectangular grid written out to disk sequentially, such that points in each cell are randomized, so that when reading points in, they fill in space progressively.","At step , the extents of the point cloud are obtained (e.g., in the form of input ). The extents may be from the raw format header or a sequential pass of all the points in the raw input data may be conducted.","At step , the rectangular grid is defined\/computed. The maximum number of points per cell are specified as well as the maximum number of cells. An exemplary value of these settings are three (3) million points per cell and one (1) million cells.","At step , points are allocated to cells. For example, a pointlist of the points per cell may be created. Such points can be stored in temporary files if there are a large number of points in the original point cloud. Once the points are allocated, the cell grid is in memory and a pointer to points that contain all the points in the cell has been created\/retrieved.","Thus, steps - provide the ability to map, in a computer, a grid over points in the point cloud dataset where the grid contains one or more cells and each of the cells is divided into one or more subcells. Such a mapping retrieves\/obtains the extents of the point loud dataset, defines the grid (by specifying a maximum number of points per cell and maximum number of cells), and allocates the points in the point cloud dataset to the cells.","At step , the occupancy for each cell is computed. The occupancy\/occupancy value indicates that a subcell is occupied if the subcell contains at least one of the points from the point cloud dataset.  illustrates the logical flow for the occupancy determination step  of  that is performed for each cell (referred to as cell[i]) in the grid cell.","At step , an N\u00d7N\u00d7N equal subcell grid (where N=245) is created.","At step , for each point P in cell[I,J,K], if subcell[i,j,k] contains P, the subcell[i, j, k] occupied bit is set.","At step , the occupancy\/surface area contribution factor is computed as the total number of subcells (i.e., subcell[i,j,k] with the occupancy bit set divided by N*N):",{"@attributes":{"id":"p-0091","num":"0096"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"OCCUPANCY","mo":"=","mrow":{"mfrac":{"mrow":[{"mo":["(",")"],"mrow":{"mi":["Total","#","of","with","occupancy","bit","set"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mrow":{"mi":"subcell","mo":"\u2061","mrow":{"mo":["[","]"],"mrow":{"mi":["i","j","k"],"mo":[",",","]}}}}},{"mi":["N","N"],"mo":"*"}]},"mo":"."}}}}},"Accordingly, the surface area contribution factor is computed for each of the cells. The surface area contribution factor is a count of the total subcells that are occupied divided by the total number of subcells.","Referring again to , at step , downsampling is performed (e.g., when a point cloud dataset resolution is less than a grid resolution). Such a downsampling may reduce the subcell grid resolution by a factor of two (2) for each iteration of downsampling that is performed.  illustrates the detailed logical flow for downsampling in accordance with one or more embodiments of the invention. For each iteration of downsampling (up until a maximum number of iterations), the downsampled occupancy is computed by repeating the steps of .","At step , N\u2032 is set equal to N\/2.","At step , set subcell\u2032[i,j,k]=1 if one of the bits of subcell[2*i(+1_,2*j(+1),2*k(+1)] is set. In other words, if one of the bits in the 2\u00d72\u00d72 set of cells with the lower corner being subcell[2i,2j,2k] is set, the subcell is set as being occupied.","At step , OCCUPANCY\u2032 is set equal to the total number of subcell\u2032[i,j,k] that have the occupancy bit set divided by N\u2032*N\u2032:",{"@attributes":{"id":"p-0097","num":"0102"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msup":{"mi":["OCCUPANCY","\u2032"]},"mo":"=","mfrac":{"mrow":[{"mo":["(",")"],"mrow":{"mi":["Total","#","of","with","occupancy","bit","set"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mrow":{"msup":{"mi":["subcell","\u2032"]},"mo":"\u2061","mrow":{"mo":["[","]"],"mrow":{"mi":["i","j","k"],"mo":[",",","]}}}}},{"msup":[{"mi":["N","\u2032"]},{"mi":["N","\u2032"]}],"mo":"*"}]}}}}},"At step , a determination is made regarding whether the change to OCCUPANCY\u2032 from OCCUPANCY is more than a threshold (i.e., indicating if a downsampling was needed). If the threshold is exceeded, the prime values are utilized (i.e., OCCUPANCY=OCCUPANCY\u2032, N=N\u2032, and SUBCELL=SUBCELL\u2032) and another downsamping iteration begins at step .","If the threshold is not exceeded (i.e., another downsampling iteration is not needed), processing continues in  with step .","Referring to , once step  has been completed, sufficient downsampling has been performed as necessary to compute the occupancy factor and the occupancy has been calculated per cell. Accordingly, at step , the points are randomized and the cell contents are written to disk. For each cell[i] in the cell grid, the steps of  are performed.","At step , the cell OCCUPANCY and point count are written as a cell header in the output file.","At step , an N\u00d7NxN subcell grid is created (where N=16).","At step , points are allocated from cell[i] into each of the subcells.","At step , a determination is made if there are points left in cell[i]. If not, the process is complete at step . In other words, steps - are performed while there are points left in cell[i].","At step , an order of subcells spanning the full range of non-empty subcells in the 16\u00d716\u00d716 set of subcells are randomly chosen.","At step , one point per subcell is picked\/selected.","At step , the picked points are written to a buffer.","At step , when the buffer is full or a threshold is reached, the points are written to disk. The layout of the data as written on disk is:","[Cell1 Header: Occupancy, Point Count, Offset to point list1],","[Cell2 Header: Occupancy, Point Count, Offset to point list2],",". . .","[CellN Header: Occupancy, Point Count, Offset to point listN]","[Cell1 Randomized Point list],","[Cell2 Randomized Point list],",". . .","[CellN Randomized Point list],","Thus, both the surface area contribution factor and a set of points are written to a point cloud indexed file. The writing includes (for each cell) a cell header that includes the surface area contribution factor for that cell and the total cell point count for that cell. Lastly, as described above using random subcell ordering to pick points sequentially, points within a cell are written to disk in a random order.","Accordingly, the process performed as described with respect to  provides for performing several passes through the point cloud data set. In the first pass, the points are sequentially read and allocated into cells. Such a pass results in a cell grid in memory and a pointer to a list of points in the cell. The first pass also determines the total volume of space occupied by the points and the total number of points in the point cloud.","In the second pass, the cells are processed cell by cell. The cell is divided into subcells and all of the points associated with the cell being examined are sequentially read. As each point is read, based on the extents of the cell and the coordinate values of the point, the subcell location for a point can be quickly and efficiently determined. If a point lies in a particular subcell, an \u201coccupied\u201d bit is set for that subcell. Thus, as the set of points for a cell are processed, the occupancy bits corresponding to the subcells are set. Thereafter, a downsampling pass may be performed to obtain a downsampled version of the occupancy bits. Finally, randomization may be performed where random values of the subcells are selected and used to write the points out to a buffer or temporary file that is then written out to disk as part of the PCG file.","Once the data is stored on disk, embodiments of the invention may further provide for reading\/using the file. Thus, the point cloud indexed file may be obtained. Thereafter, based on the surface area contribution factor (from the cell header), the number of points to read for a cell is determined. The specified number of points may then be read and displayed on a display device.","This concludes the description of the preferred embodiment of the invention. The following describes some alternative embodiments for accomplishing the present invention. For example, any type of computer, such as a mainframe, minicomputer, or personal computer, or computer configuration, such as a timesharing mainframe, local area network, or standalone personal computer, could be used with the present invention. Further, embodiments of the invention provide a very low overhead, platform independent solution that can scale from small handheld systems to large server bases systems with multi-billion point capabilities.","As a result of the above described embodiments, the ability to store and read points for large point cloud data sets may provide processing times two times that of prior art methods. Thus, embodiments of the invention are useful when rapid quality indexing is needed and may be implemented in a highly parallelizable and incremental method (e.g., in an editing application).","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto.",{"@attributes":{"id":"p-0124","num":"0000"},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":["[1] Rixio Morales, Yunhong Wang, Zhaoxiang \u201cUnstructured Point Cloud Surface Denoising and Decimiation using RBF K-Nearest Neighbor Kernel\u201d Advances in Multimedia Information Processing, Lecture Notes in Computer Science, 2011 Vol. 6298\/2011 pp 214-225 DOI: 10.1007\/978-3-642-15696-0_20.","[2] Zhigiang Du, Qiaoxiong Li \u201cA new method of storage and visualization for massive point cloud dataset\u201d 22CIPA Symposium, Oct. 11-15, 2009 Kyoto, Japan.","[3] Hui Huang, Dan Li Hao Zhang Uri Ascher \u201cConsolidation of Unorganized Point Clouds for Surface Reconstruction\u201d ACM SIGGRAPH Asia 2009, Article No.: 176, 10.1145\/1661412.1618522.","[4] J. Manson, G. Petrova, S. Schaefer \u201cStreaming Surface Reconstruction UsingWavelets\u201d Eurographics Symposium on Geometry Processing 2008 Pierre Alliez and Szymon Rusinkiewicz (Guest Editors) Volume 27 (2008), Number 5."]}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 7A","FIG. 7B"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 10","FIG. 9"],"b":"910"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
