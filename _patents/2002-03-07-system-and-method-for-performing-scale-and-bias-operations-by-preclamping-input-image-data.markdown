---
title: System and method for performing scale and bias operations by preclamping input image data
abstract: In one embodiment, a scale and bias unit for use in a graphics system includes a preclamping unit configured to receive an input and to responsively generate an output value equal to a first value if the input is within a first input range. The scale and bias unit also includes a processing unit coupled to the preclamping unit and configured to perform a calculation on the input to generate the output value. The processing unit does not perform the calculation if the input is within the first input range.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06847378&OS=06847378&RS=06847378
owner: Sun Microsystems, Inc.
number: 06847378
owner_city: Santa Clara
owner_country: US
publication_date: 20020307
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates generally to the field of computer graphics and, more particularly, to performing scale and\/or bias operations in a computer graphics system.","2. Description of the Related Art","A computer system typically relies upon its graphics system for producing visual output on the computer screen or display device. Early graphics systems were only responsible for taking what the processor produced as output and displaying it on the screen. In essence, they acted as simple translators or interfaces. Modern graphics systems, however, incorporate graphics processors with a great deal of processing power. They now act more like coprocessors rather than simple translators. This change is due to the recent increase in both the complexity and amount of data being sent to the display device. For example, modern computer displays have many more pixels, greater color depth, and are able to display more complex images with higher refresh rates than earlier models. Similarly, the images displayed are now more complex and may involve advanced techniques such as anti-aliasing and texture mapping.","As a result, without considerable processing power in the graphics system, the CPU would spend a great deal of time performing graphics calculations. This could rob the computer system of the processing power needed for performing other tasks associated with program execution and thereby dramatically reduce overall system performance. With a powerful graphics system, however, when the CPU is instructed to draw a box on the screen, the CPU is freed from having to compute the position and color of each pixel. Instead, the CPU may send a request to the video card stating \u201cdraw a box at these coordinates.\u201d The graphics system then draws the box, freeing the processor to perform other tasks.","Generally, a graphics system in a computer (also referred to as a graphics system) is a type of video adapter that contains its own processor to boost performance levels. These processors are specialized for computing graphical transformations, so they tend to achieve better results than the general-purpose CPU used by the computer system. In addition, they free up the computer's CPU to execute other commands while the graphics system is handling graphics computations. The popularity of graphical applications, and especially multimedia applications, has made high performance graphics systems a common feature of computer systems. Most computer manufacturers now bundle a high performance graphics system with their systems.","Since graphics systems typically perform only a limited set of functions, they may be customized and therefore far more efficient at graphics operations than the computer's general-purpose central processor. While early graphics systems were limited to performing two-dimensional (2D) graphics, their functionality has increased to support three-dimensional (3D) wire-frame graphics, 3D solids, and now includes support for three-dimensional (3D) graphics with textures and special effects such as advanced shading, fogging, alpha-blending, and specular highlighting.","A modern graphics system may generally operate as follows. First, graphics data is initially read from a computer system's main memory into the graphics system. The graphics data may include geometric primitives such as polygons (e.g., triangles), NURBS (Non-Uniform Rational B-Splines), sub-division surfaces, voxels (volume elements) and other types of data. The various types of data are typically converted into triangles (e.g., three vertices having at least position and color information). Then, transform and lighting calculation units receive and process the triangles. Transform calculations typically include changing a triangle's coordinate axis, while lighting calculations typically determine what effect, if any, lighting has on the color of triangle's vertices. The transformed and lit triangles may then be conveyed to a clip test\/back face culling unit that determines which triangles are outside the current parameters for visibility (e.g., triangles that are off screen). These triangles are typically discarded to prevent additional system resources from being spent on non-visible triangles.","Next, the triangles that pass the clip test and back-face culling may be translated into screen space. The screen space triangles may then be forwarded to the set-up and draw processor for rasterization. Rasterization typically refers to the process of generating actual pixels (or samples) by interpolation from the vertices. The rendering process may include slopes of edges of the polygon or triangle, and then calculating pixels or samples on these edges based on these interpolated slopes. Pixels or samples may also be calculated in the iinterior of the polygon or triangle.","As noted above, in some cases samples are generated by the rasterization process instead of pixels. A pixel typically has a one-to-one correlation with the hardware pixels present in a display device, while samples are typically more numerous than the hardware pixel elements and need not have any direct correlation to the display device. Where pixels are generated, the pixels may be stored into a frame buffer, or possibly provided directly to refresh the display. Where samples are generated, the samples may be stored into a sample buffer or frame buffer. The samples may later be accessed and filtered to generate pixels, which may then be stored into a frame buffer, or the samples may possibly be filtered to form pixels that are provided directly to refresh the display without any intervening frame buffer storage of the pixels.","The pixels are converted into an analog video signal by digital-to-analog converters. If samples are used, the samples may be read out of sample buffer or frame buffer and filtered to generate pixels, which may be stored and later conveyed to digital to analog converters. The video signal from converters is conveyed to a display device such as a computer monitor, LCD display, or projector.","A graphics system may perform scale and bias operations in order to adjust the colors of images and\/or to select and expand a small range of values in a particular input image. Scale and bias operations are typically controlled with several floating point values (e.g., a scale and a bias for each channel). Scale and bias operations that may be performed on pixels in the pixel transfer pipeline may be specified in OpenGL: glPixelTransfer<pname>, <value>(<pname>, <value>); where <pname> specifies GL_RED_SCALE, GL_RED_BIAS, GL_GREEN_SCALE, GL_GREEN_BIAS, GL_BLUE_SCALE, GL_BLUE_BIAS, GL_ALPHA_SCALE, or GL_ALPHA_BIAS. Other scale and bias operations may be used to perform color matrix extension (SGI_color_matrix) and convolution extension (EXT_convolution). Since scale and bias operations may be performed several times in the pixel transfer pipeline, it is desirable to increase the efficiency of these operations.","Various embodiments of systems and methods of performing scale and bias operations by preclamping input image data are disclosed. In one embodiment, a scale and bias unit for use in a graphics system includes a preclamping unit configured to receive an input and to responsively generate an output value equal to a first value if the input is within a first input range. The scale and bias unit also includes a processing unit coupled to the preclamping unit and configured to perform a calculation on the input to generate the output value. The processing unit does not perform the calculation if the input is within the first input range. The preclamping unit may also be configured to responsively generate the output value equal to a second value if the input is within a second input range. If so, the processing unit may be configured to not perform the calculation if the input is within the second input range.","In one embodiment, the first range of inputs may be a range of inputs greater than or equal to a high input value. The preclamping unit may be configured to subtract the high input value from the input to generate a first difference and to detect that the input is within the first range of inputs if the first difference is greater than zero. Similarly, the second range of inputs may be a range of inputs less than or equal to a low input value. The preclamping unit may be configured to subtract the low input value from the input to generate a second difference and to detect that the input is within the second range of inputs if the second difference is less than or equal to zero. The processing unit may be coupled to receive the second difference from the preclamping unit and to multiply the first difference by a scale value to generate the output value if the input is not within the first and the second input ranges.","In one embodiment, the first range of inputs may be a range of inputs greater than or equal to a high input value. The preclamping unit may be configured to subtract the high input value from the input to generate a first difference and to detect that the input is within the first range of inputs if the first difference is greater than zero. Similarly, the second range of inputs may be a range of inputs less than or equal to a low input value. The preclamping unit may be configured to subtract the low input value from the input to generate a second difference and to detect that the input is within the second range of inputs if the second difference is less than or equal to zero. The processing unit may be coupled to receive the second difference from the preclamping unit and to multiply the first difference by a scale value to generate the output value if the input is not within the first and the second input ranges.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. Note, the headings are for organizational purposes only and are not meant to be used to limit or interpret the description or claims. Furthermore, note that the word \u201cmay\u201d is used throughout this application in a permissive sense (i.e., having the potential to, being able to), not a mandatory sense (i.e., must).\u201d The term \u201cinclude\u201d, and derivations thereof, mean \u201cincluding, but not limited to\u201d. The term \u201cconnected\u201d means \u201cdirectly or indirectly connected\u201d, and the term \u201ccoupled\u201d means \u201cdirectly or indirectly connected\u201d.","Computer System-",{"@attributes":{"id":"P-00032","num":"00032"},"figref":"FIG. 1","b":"80"},"As shown, the computer system  includes a system unit  and a video monitor or display device  coupled to the system unit . The display device  may be any of various types of display monitors or devices (e.g., a CRT, LCD, or gas-plasma display). Various input devices may be connected to the computer system, including a keyboard  and\/or a mouse , or other input device (e.g., a trackball, digitizer, tablet, six-degree of freedom input device, head tracker, eye tracker, data glove, or body sensors). Application software may be executed by the computer system  to display graphical objects on display device .","Computer System Block Diagram-",{"@attributes":{"id":"P-00035","num":"00035"},"figref":"FIG. 2","b":["1","80","102","104","104","106","104"]},"Host processor  may include one or more processors of varying types, e.g., microprocessors, multi-processors and CPUs. The system memory  may include any combination of different types of memory subsystems such as random access memories (e.g., static random access memories or \u201cSRAMs,\u201d synchronous dynamic random access memories or \u201cSDRAMs,\u201d and Rambus dynamic random access memories or \u201cRDRAMs,\u201d among others), read-only memories, and mass storage devices. The system bus or host bus  may include one or more communication or host computer buses (for communication between host processors, CPUs, and memory subsystems) as well as specialized subsystem buses.","In , a graphics system  is coupled to the high-speed memory bus . The graphics system  may be coupled to the bus  by, for example, a crossbar switch or other bus connectivity logic. It is assumed that various other peripheral devices, or other buses, may be connected to the high-speed memory bus . It is noted that the graphics system  may be coupled to one or more of the buses in computer system  and\/or may be coupled to various types of buses. In addition, the graphics system  may be coupled to a communication port and thereby directly receive graphics data from an external source, e.g., the Internet or a network. As shown in the figure, one or more display devices  may be connected to the graphics system .","Host CPU  may transfer information to and from the graphics system  according to a programmed input\/output (I\/O) protocol over host bus . Alternately, graphics system  may access system memory  according to a direct memory access (DMA) protocol or through intelligent bus mastering.","A graphics application program conforming to an application programming interface (API) such as OpenGL\u00ae or Java 3D\u2122 may execute on host CPU  and generate commands and graphics data that define geometric primitives such as polygons for output on display device . Host processor  may transfer the graphics data to system memory . Thereafter, the host processor  may operate to transfer the graphics data to the graphics system  over the host bus . In another embodiment, the graphics system  may read in geometry data arrays over the host bus  using DMA access cycles. In yet another embodiment, the graphics system  may be coupled to the system memory  through a direct port, such as the Advanced Graphics Port (AGP) promulgated by Intel Corporation.","The graphics system may receive graphics data from any of various sources, including host CPU  and\/or system memory , other memory, or from an external source such as a network (e.g., the Internet), or from a broadcast medium, e.g., television, or from other sources.","Note while graphics system  is depicted as part of computer system , graphics system  may also be configured as a stand-alone device (e.g., with its own built-in display). Graphics system  may also be configured as a single chip device or as part of a system-on-a-chip or a multi-chip module. Additionally, in some embodiments, certain of the processing operations performed by elements of the illustrated graphics system  may be implemented in software.","Graphics System-",{"@attributes":{"id":"P-00043","num":"00043"},"figref":"FIG. 3","b":["112","112","112","14","18","20","22","24","112","26","28","14","18"]},"In some embodiments, one or more of these components may be removed. For example, the texture buffer may not be included in an embodiment that does not provide texture mapping. In other embodiments, all or part of the functionality incorporated in either or both of the media processor or the hardware accelerator may be implemented in software.","In one set of embodiments, media processor  is one integrated circuit and hardware accelerator is another integrated circuit. In other embodiments, media processor  and hardware accelerator  may be incorporated within the same integrated circuit. In some embodiments, portions of media processor  and\/or hardware accelerator  may be included in separate integrated circuits.","As shown, graphics system  may include an interface to a host bus such as host bus  in  to enable graphics system  to communicate with a host system such as computer system . More particularly, host bus  may allow a host processor to send commands to the graphics system . In one embodiment, host bus  may be a bi-directional bus.","Media Processor-",{"@attributes":{"id":"P-00048","num":"00048"},"figref":"FIG. 4","b":["14","14","112","80","80","112","14"]},"Transformation refers to the spatial manipulation of objects (or portions of objects) and includes translation, scaling (e.g., stretching or shrinking), rotation, reflection, or combinations thereof. More generally, transformation may include linear mappings (e.g., matrix multiplications), nonlinear mappings, and combinations thereof.","Lighting refers to calculating the illumination of the objects within the displayed image to determine what color values and\/or brightness values each individual object will have. Depending upon the shading algorithm being used (e.g., constant, Gourand, or Phong), lighting may be evaluated at a number of different spatial locations.","As illustrated, media processor  may be configured to receive graphics data via host interface . A graphics queue  may be included in media processor  to buffer a stream of data received via the accelerated port of host interface . The received graphics data may include one or more graphics primitives. As used herein, the term graphics primitive may include polygons, parametric surfaces, splines, NURBS (non-uniform rational B-splines), sub-divisions surfaces, fractals, volume primitives, voxels (i.e., three-dimensional pixels), and particle systems. In one embodiment, media processor  may also include a geometry data preprocessor  and one or more microprocessor units (MPUs) . MPUs  may be configured to perform vertex transformation, lighting calculations and other programmable functions, and to send the results to hardware accelerator . MPUs  may also have read\/write access to texels (i.e., the smallest addressable unit of a texture map) and pixels in the hardware accelerator . Geometry data preprocessor  may be configured to decompress geometry, to convert and format vertex data, to dispatch vertices and instructions to the MPUs , and to send vertex and attribute tags or register data to hardware accelerator .","As shown, media processor  may have other possible interfaces, including an interface to one or more memories. For example, as shown, media processor  may include direct Rambus interface  to a direct Rambus DRAM (DRDRAM) . A memory such as DRDRAM  may be used for program and\/or data storage for MPUs . DRDRAM  may also be used to store display lists and\/or vertex texture maps.","Media processor  may also include interfaces to other functional components of graphics system . For example, media processor  may have an interface to another specialized processor such as hardware accelerator . In the illustrated embodiment, controller  includes an accelerated port path that allows media processor  to control hardware accelerator . Media processor  may also include a direct interface such as bus interface unit (BIU) . Bus interface unit  provides a path to memory  and a path to hardware accelerator  and video output processor  via controller .","Hardware Accelerator-","One or more hardware accelerators  may be configured to receive graphics instructions and data from media processor  and to perform a number of functions on the received data according to the received instructions. For example, hardware accelerator  may be configured to perform rasterization, 2D and\/or 3D texturing, pixel transfers, imaging, fragment processing, clipping, depth cueing, transparency processing, set-up, and\/or screen space rendering of various graphics primitives occurring within the graphics data.","Clipping refers to the elimination of graphics primitives or portions of graphics primitives that lie outside of a 3D view volume in world space. The 3D view volume may represent that portion of world space that is visible to a virtual observer (or virtual camera) situated in world space. For example, the view volume may be a solid truncated pyramid generated by a 2D view window, a viewpoint located in world space, a front clipping plane and a back clipping plane. The viewpoint may represent the world space location of the virtual observer. In most cases, primitives or portions of primitives that lie outside the 3D view volume are not currently visible and may be eliminated from further processing. Primitives or portions of primitives that lie inside the 3D view volume are candidates for projection onto the 2D view window.","Set-up refers to mapping primitives to a three-dimensional viewport. This involves translating and transforming the objects from their original \u201cworld-coordinate\u201d system to the established viewport's coordinates. This creates the correct perspective for three-dimensional objects displayed on the screen.","Screen-space rendering refers to the calculations performed to generate the data used to form each pixel that will be displayed. For example, hardware accelerator  may calculate \u201csamples.\u201d Samples are points that have color information but no real area. Samples allow hardware accelerator  to \u201csuper-sample,\u201d or calculate more than one sample per pixel. Super-sampling may result in a higher quality image.","Hardware accelerator  may also include several interfaces. For example, in the illustrated embodiment, hardware accelerator  has four interfaces. Hardware accelerator  has an interface  (referred to as the \u201cNorth Interface\u201d) to communicate with media processor . Hardware accelerator  may receive commands and\/or data from media processor  through interface . Additionally, hardware accelerator  may include an interface  to bus . Bus  may connect hardware accelerator  to boot PROM  and\/or video output processor . Boot PROM  may be configured to store system initialization data and\/or control code for frame buffer . Hardware accelerator  may also include an interface to a texture buffer . For example, hardware accelerator  may interface to texture buffer  using an eight-way interleaved texel bus that allows hardware accelerator  to read from and write to texture buffer . Hardware accelerator  may also interface to a frame buffer . For example, hardware accelerator  may be configured to read from and\/or write to frame buffer  using a four-way interleaved pixel bus.","The vertex processor  may be configured to use the vertex tags received from the media processor  to perform ordered assembly of the vertex data from the MPUs . Vertices may be saved in and\/or retrieved from a mesh buffer .","The render pipeline  may be configured to rasterize 2D window system primitives and 3D primitives into fragments. A fragment may contain one or more samples. Each sample may contain a vector of color data and perhaps other data such as alpha and control tags. 2D primitives include objects such as dots, fonts, Bresenham lines and 2D polygons. 3D primitives include objects such as smooth and large dots, smooth and wide DDA (Digital Differential Analyzer) lines and 3D polygons (e.g. 3D triangles).","For example, the render pipeline  may be configured to receive vertices defining a triangle, to identify fragments that intersect the triangle.","The render pipeline  may be configured to handle full-screen size primitives, to calculate plane and edge slopes, and to interpolate data (such as color) down to tile resolution (or fragment resolution) using interpolants or components such as:\n\n","In embodiments using supersampling, the sample generator  may be configured to generate samples from the fragments output by the render pipeline  and to determine which samples are inside the rasterization edge. Sample positions may be defined by user-loadable tables to enable stochastic sample-positioning patterns.","Hardware accelerator  may be configured to write textured fragments from 3D primitives to frame buffer . The render pipeline  may send pixel tiles defining r, s, t and w to the texture address unit . The texture address unit  may use the r, s, t and w texture coordinates to compute texel addresses (e.g. addresses for a set of neighboring texels) and to determine interpolation coefficients for the texture filter . The texel addresses are used to access texture data (i.e. texels) from texture buffer . The texture buffer  may be interleaved to obtain as many neighboring texels as possible in each clock. The texture filter  may perform bilinear, trilinear or quadlinear interpolation. The texture environment  may apply texels to samples produced by the sample generator . The texture environment  may also be used to perform geometric transformations on images (e.g., bilinear scale, rotate, flip) as well as to perform other image filtering operations on texture buffer image data (e.g., bicubic scale and convolutions).","In the illustrated embodiment, the pixel transfer MUX  controls the input to the pixel transfer unit . The pixel transfer unit  may selectively unpack pixel data received via north interface , select channels from either the frame buffer  or the texture buffer , or select data received from the texture filter  or sample filter .","The pixel transfer unit  may be used to perform scale, bias, and\/or color matrix operations, color lookup operations, histogram operations, accumulation operations, normalization operations, and\/or min\/max functions. Depending on the source of (and operations performed on) the processed data, the pixel transfer unit  may output the processed data to the texture buffer  (via the texture buffer MUX ), the frame buffer  (via the texture environment unit  and the fragment processor ), or to the host (via north interface ). For example, in one embodiment, when the pixel transfer unit  receives pixel data from the host via the pixel transfer MUX , the pixel transfer unit  may be used to perform a scale and bias or color matrix operation, followed by a color lookup or histogram operation, followed by a min\/max function. The pixel transfer unit  may also scale and bias and\/or lookup texels. The pixel transfer unit  may then output data to either the texture buffer  or the frame buffer .","Fragment processor  may be used to perform standard fragment processing operations such as the OpenGL\u00ae fragment processing operations. For example, the fragment processor  may be configured to perform the following operations: fog, area pattern, scissor, alpha\/color test, ownership test (WID), stencil test, depth test, alpha blends or logic ops (ROP), plane masking, buffer selection, pick hit\/occlusion detection, and\/or auxiliary clipping in order to accelerate overlapping windows.","Texture Buffer ","In one embodiment, texture buffer  may include several SDRAMs. Texture buffer  may be configured to store texture maps, image processing buffers, and accumulation buffers for hardware accelerator . Texture buffer  may have many different capacities (e.g., depending on the type of SDRAM included in texture buffer ). In some embodiments, each pair of SDRAMs may be independently row and column addressable.","Frame Buffer ","Graphics system  may also include a frame buffer . In one embodiment, frame buffer  may include multiple memory devices such as 3D-RAM memory devices manufactured by Mitsubishi Electric Corporation. Frame buffer  may be configured as a display pixel buffer, an offscreen pixel buffer, and\/or a super-sample buffer. Furthermore, in one embodiment, certain portions of frame buffer  may be used as a display pixel buffer, while other portions may be used as an offscreen pixel buffer and sample buffer.","Video Output Processor-","A video output processor  may also be included within graphics system . Video output processor  may buffer and process pixels output from frame buffer . For example, video output processor  may be configured to read bursts of pixels from frame buffer . Video output processor  may also be configured to perform double buffer selection (dbsel) if the frame buffer  is double-buffered, overlay transparency (using transparency\/overlay unit ), plane group extraction, gamma correction, psuedocolor or color lookup or bypass, and\/or cursor generation. For example, in the illustrated embodiment, the output processor  includes WID (Window ID) lookup tables (WLUTs)  and gamma and color map lookup tables (GLUTs, CLUTs) . In one embodiment, frame buffer  may include multiple 3DRAM64s (not shown in ) that include the transparency overlay  and all or some of the WLUTs . Video output processor  may also be configured to support two video output streams to two displays using the two independent video raster timing generators . For example, one raster (e.g., A) may drive a 1280\u00d71024 CRT while the other (e.g., B) may drive a NTSC or PAL device with encoded television video.","DAC  may operate as the final output stage of graphics system . The DAC  translates the digital pixel data received from GLUT\/CLUTs\/Cursor unit  into analog video signals that are then sent to a display device. In one embodiment, DAC  may be bypassed or omitted completely in order to output digital pixel data in lieu of analog video signals. This may be useful when a display device is based on a digital technology (e.g., an LCD-type display or a digital micro-mirror display).","DAC  may be a red-green-blue digital-to-analog converter configured to provide an analog video output to a display device such as a cathode ray tube (CRT) monitor. In one embodiment, DAC  may be configured to provide a high resolution RGB analog video output at dot rates of 240 MHz. Similarly, encoder  may be configured to supply an encoded video signal to a display. For example, encoder  may provide encoded NTSC or PAL video to an S-Video or composite video television monitor or recording device.","In other embodiments, the video output processor  may output pixel data to other combinations of displays. For example, by outputting pixel data to two DACs  (instead of one DAC  and one encoder ), video output processor  may drive two CRTs. Alternately, by using two encoders , video output processor  may supply appropriate video input to two television monitors. Generally, many different combinations of display devices may be supported by supplying the proper output device and\/or converter for that display device.","Sample-to-Pixel Processing Flow-","In one set of embodiments, hardware accelerator  may receive geometric parameters defining primitives such as triangles from media processor , and render the primitives in terms of samples. The samples may be stored in a sample storage area (also referred to as the sample buffer) of frame buffer . The samples are then read from the sample storage area of frame buffer  and filtered by sample filter  to generate pixels. The pixels are stored in a pixel storage area of frame buffer . The pixel storage area may be double-buffered. Video output processor  reads the pixels from the pixel storage area of frame buffer  and generates a video stream from the pixels. The video stream may be provided to one or more display devices (e.g., monitors, projectors, head-mounted displays, and so forth) through DAC  and or video encoder .","The samples are computed at positions in a two-dimensional sample space (also referred to as rendering space). The sample space may be partitioned into an array of bins (also referred to herein as fragments). The storage of samples in the sample storage area of frame buffer  may be organized according to bins (e.g., bin ) as illustrated in FIG. . Each bin may contain one or more samples. The number of samples per bin may be a programmable parameter.","Scale & Bias Operations",{"@attributes":{"id":"P-00087","num":"00087"},"figref":["FIG. 8","FIG. 8","FIGS. 1-7"],"b":"182"},"In , graphics data (e.g., one or more pixels or texels) is input to a scale and bias unit . In this embodiment, the scale and bias unit  includes a preclamping unit  and a processing unit . The scale and bias unit  may be configured to perform computations used to scale and bias an input pixel, to scale an input pixel and add the results to an accumulation buffer, to blend an input pixel into an accumulation buffer, and\/or to perform color space conversion of an input pixel using a color matrix operation. The processing unit  may perform multiplication and addition in order to perform operations such as output=input*scale+bias. In one embodiment, color matrix operations may be performed by passing a set of inputs through the processing unit  several times and accumulating the intermediate results in an adder (not shown). Several preclamping and\/or processing units may be included in some embodiments so that different channels (e.g., R, G, B, and A) may be processed in parallel.","The scale and bias unit  is coupled to a set of control registers . The control registers may include one or more registers  that each store a high input value and one or more registers  that each store a low input value, as will be described in more detail below.","Typically, scale and bias operations are linear operations of the form output=input*scale+bias. The scale and the bias values may be floating-point numbers in the \u2212infinity to +infinity range. Floating-point operations are typically expensive to perform (in terms of processing time and\/or hardware), and thus the scale and bias computation may be a relatively expensive operation. However, for certain scale and bias operations, the range of output values is limited. For example, certain scale and bias operations may produce outputs that are restricted, or clamped, between two limits (e.g., from 0 to 1 or from \u22121 to 1). In , an exemplary graph of the output of a scale and bias function as a function of input is shown. Here, the output is clamped between out_low and out_high. Because scale and bias operations are linear operations, the output of the scale and bias operation for inputs greater than or equal to in_high will be out_high. Similarly, the output for inputs less than or equal to in_low will be out_low. The ranges of inputs that produce the same output (out_high or out_low) are referred to as saturation ranges. The preclamping unit  may select inputs in the saturation ranges (e.g., by performing subtraction operations like those described below) and output the appropriate output, out_high or out_low, instead of providing the saturation-range inputs to the processing unit . Thus, by preclamping the inputs, the relatively expensive scale and bias calculation (performed by processing unit ) may be bypassed for certain inputs. Accordingly, by preclamping the inputs, the efficiency of the scale and bias unit  may be increased.","In some embodiments, once the in_high, in_low, out_high, and out_low values are known, the scale and bias operation may be redefined as output=out_low+(in\u2212in_low)*scale. (In an alternative embodiment, the operation may be redefined as output=out_high\u2212(in_high\u2212in)*scale.) As a result, the processing unit  may include a subtractor, an adder, and a multiplier.","In_high, in_low, out_high, and out_low may be fixed-point numbers. In one embodiment, the scale may be represented as a fraction*2. The difference in\u2212in_low may be calculated and then pre-shifted left by a specified amount (the amount of shifting may be calculated in hardware or software). The shifted difference may then be multiplied by the fraction (or mantissa) from the scale. The result of the multiplication may be post-shifted left by another pre-specified amount and added to out_low to produce the output of the scale and bias opearation. In such an embodiment, a fixed-point multiplier may be used to perform the multiplication, even though the scale is a floating-point number. This may decrease the expense of the scale and bias operation in some embodiments.","In one embodiment, the processing unit  may also include a post-clamping unit (not shown) to clamp output values to a certain range.","The current scale and bias values may be used to determine the relationship between the input and output values (e.g., whether the output is increasing or decreasing with increasing input values) for a particular operation. This relationship may then be used to determine the input values in_low and in_high for that operation. In one embodiment, software (e.g., a device driver program executed by a host computer system  and stored in a memory  (e.g., as shown in FIG. )) may perform the calculations to determine in_high and in_low. In other embodiments, this determination may be performed in hardware.",{"@attributes":{"id":"P-00095","num":"00095"},"figref":["FIGS. 10A-11B","FIG. 10A","FIG. 10B"],"b":["10","202","204","204"]},{"@attributes":{"id":"P-00096","num":"00096"},"figref":["FIG. 11A","FIG. 11B","FIGS. 10-11"]},"In one embodiment, the preclamping unit  may also perform the first stage of the scale and bias calculation (e.g., by calculating the difference in\u2212in_low). For example, as mentioned above, the scale and bias operation may be redefined as output=out_low+(in\u2212in_low)*scale. The preclamping unit  may calculate in\u2212in_low and in\u2212in_high to determine whether the current input value is a saturation-range input. If in\u2212in_low is negative or zero, the preclamping unit  may output out_low as the result and bypass the processing unit . The preclamping unit  may also calculate in\u2212in_high. If the result of the subtraction is non-negative, the preclamping unit  may output out_high as the result and bypass the processing unit . In one embodiment, the preclamping unit may include several subtractors so that multiple subtractions (e.g., to check for both saturation input ranges for a particular input) can be performed in parallel. In some embodiments, the subtractions for several channels (e.g., R, G, B, and A) may be performed in parallel. If the result of the in\u2212in_low subtraction is not negative or zero and the result of the in\u2212in_high subtraction is negative or zero, the preclamping unit  may pass the result of the in\u2212in_low subtraction to the processing unit  for further processing.","Color matrix operations may include one or more scale and bias operations. In some embodiments, the output of a color matrix operation may be clamped. For example, if the output of a color matrix operation is input to a LUT (Lookup Table) and inputs to the LUT are clamped to a certain range, the inputs to the color matrix operation may be clamped. As a result, the outputs of the color matrix operation may be clamped to the range specified for the inputs to the LUT. Thus, the preclamping unit  may also preclamp the inputs to the color matrix unit .",{"@attributes":{"id":"P-00099","num":"00099"},"figref":["FIGS. 12A and 12B","FIG. 12A","FIG. 12A"],"b":["200","204"]},"For color matrix operations, the each input channel may be preclamped as described above for a scale and bias operation.","In some embodiments, the scale may be combined with the color matrix elements to produce a color matrix like the one shown in FIG. B. For example, n may equal m*scale, n may equal m*scale, and so on. As a result, the scale and bias operation used in the color matrix operation may be simplified, as shown in the equation of FIG. B. This may decrease the number of times a multiplier is used in the color matrix operation in some embodiments. In one embodiment, the color matrix parameters n may be calculated by software.","Note that in some embodiments, 3\u00d73 color matrix operations may be performed on three input channels (e.g., R, G, and B).",{"@attributes":{"id":"P-00103","num":"00103"},"figref":"FIG. 13"},"At , if the input is less than or equal to in_low, the output is out_low and further processing (e.g., by a multiplier) may be skipped, as shown at . Similarly, if the input is greater than or equal to in_high, the output is out_high and further processing may be skipped, as shown at -. Otherwise, the output may be calculated (e.g., by a processing unit ), as shown at .","Exemplary Scale and Bias Unit",{"@attributes":{"id":"P-00106","num":"00106"},"figref":["FIGS. 14 and 15","FIG. 14"],"b":["200","200","200","420","202","430","440","445","450","455","460","200"]},"To implement a dynamic mixing operation, a color component of an image pixel X(I,J) from the image buffer in frame buffer  may be provided to Input, and the corresponding color component of an accumulation buffer pixel A(I,J) may be provided to Input and to Input (through multiplexer ). The \u03b1 component of the image pixel X(I,J) may be provided to Input. The output value OUTPUT may be sent back to an accumulation buffer.","The shift units  and  may allow the scale and bias unit  to shift the outputs of subtractor  and multiplier  respectively. In one embodiment, the shift units may be left shift units. Shift unit  may be controlled by a preshift value and the shift unit  may be controlled by a post-shift value. The preshift and postshift values may be determined by driver software (e.g., software executing on host processor ). Driver software may write to a preshift register and postshift register (e.g., in control registers ). In one embodiment, shift unit  may be used to remove leading zeros from an operand provided on pathway .","To implement a load operation (e.g., a GL_LOAD operation), a component of an image pixel from the image buffer in the frame buffer  may be provided to Input. The value zero may be provided to Input. A programmable scale factor may be provided to Input. Input may be set to zero. The output value OUTPUT may be transferred to an accumulation buffer.","To implement a return operation (e.g., a GL_RETURN operation), a component CCof an accumulation buffer pixel may be provided to pathway , a programmable scale factor may be provided to Input, and Input may be set to zero. The pathway  may be provided with the component CCin any of various ways. For example, CCmay be provided to Input and zero may be provided to Input. The output value OUTPUT may be transferred to the frame buffer  (e.g., to an image buffer in frame buffer ).","To implement an add operation (e.g., a GL_ADD operation), a component CCof an accumulation buffer pixel may be provided to pathway , the value one may be provided at Input for the scale factor, and a programmable bias value may be provided at Input (e.g., a selecting an input line of multiplexer  which couples to a bias value register). The output value OUTPUT may be sent to an accumulation buffer (e.g., in texture buffer ).","The pathway  may be provided with the component CCin any of various ways. For example, in one alternative embodiment, subtraction unit  (which may include an internal adder and a two's complement unit) may have an alternative path around its two's complement unit, e.g., an alternative path that goes from Input to an input port of the internal adder. When the bypass path is enabled, Input goes directly to the internal adder port. Thus, the component CCmay be provided to path  by providing the component CCto Input, zero to Input, and enabling the alternative path.","To implement a multiply operation (e.g., a GL_MULT operation), a component CCof an accumulation buffer pixel may be provided to pathway , a programmably-determined value may be provided at Input for the scale factor, and the value zero may be provided at Input. The output value OUTPUT may be sent to an accumulation buffer (e.g., in texture buffer ).","To implement an accumulate operation (e.g., a GL_ACCUM operation), a component of an image pixel from the image buffer in the frame buffer  may be provided to Input. The value zero may be provided to Input. A programmable scale factor may be provided to Input. The corresponding component of accumulation buffer pixel A(I,J) may be provided to Input (via multiplexer ). The output value OUTPUT may be transferred to an accumulation buffer (e.g., in texture buffer ).","In one embodiment, the pixel transfer unit  may include four copies of the scale and bias unit . Thus, the pixel transfer unit  may operate on four input channels simultaneously. For example, the four input channels may be allocated respectively to the four pixel components (R, G, B, and A). Thus, in at least some operational modes (e.g., in the load, return, add, multiply and accumulate modes), the pixel transfer unit  may compute all four components for a single pixel in parallel.","Furthermore, the pixel transfer unit  may be configured to operate on more than one pixel simultaneously. For example, two pixels may be processed per clock under the assumption that each pixel uses two channels. Alternatively, four pixels may be processed per clock under the assumption that each pixel uses one channel.","In the dynamic mixing operation, the alpha component of the image pixel may be used to determine the blend factor for the red, green and blue components, and thus, the alpha component may not experience the same kind of mixing as the red, green and blue components.","To implement a matrix-vector multiplication Z=C*U, e.g., a color space conversion, each component Zof the output vector may be assigned to a corresponding copy of the scale and bias unit . Each copy of the scale and bias unit  may receive the components Uof the input vector over successive clock cycles and multiply each component Uby the matrix coefficient C. A sum of the products C*Umay be accumulated in accumulator register . The input vector components may be presented successively at Input. Input may be set to zero. The matrix coefficients Cmay be multiplexed into Input over the successive cycles. The output of accumulator register  may be fed back through multiplexer  to adder  through Input.","Three copies of the scale and bias unit  may be used in parallel to perform a 3\u00d73 matrix multiply. Four copies of the scale and bias unit  may be used in parallel to perform a 4\u00d74 matrix multiply.","The matrix multiplication modes may be used to perform any of the following color space conversions: YUV to RGB; YUV to RGB (each YUV input pixel may produce two RGB pixels of output); RGB to RGB; RGB\u03b1 to RGB\u03b1.","Scale and bias unit  may include a set of multiplexers so that appropriate values are supplied to each of the inputs Input, Input, Input and Input for each operational mode. For example, in one embodiment, scale and bias unit  may include multiplexers , ,  and  as indicated in FIG. .","The multiplexer  may select between a pre-bias value and accumulation buffer pixel color.","The multiplexer  may select between matrix coefficients in matrix multiply mode. In dynamic blending mode, multiplexer  passes the frame buffer \u03b1 value. In multiply mode, multiplexer  passes the registered scale value (i.e., a programmably determined scale value).","Multiplexer  provides one of a color bias constant, the accumulation buffer pixel color, a post-bias constant, or accumulator register 's contents to Input. The color bias constant may be useful in certain color space conversions. The post-bias constant may be used in an add operation. The accumulation buffer pixel color may be selected during a dynamic mixing operation.","Pixel transfer unit  may also include a control unit (not shown). The control unit may drive the control lines (i.e., the select lines) of the multiplexers through one or more cycles to implement the various operations described above. The control unit may respond to a value stored in a control register. The value stored in the control register may be programmably determined (e.g., by a device driver).","In one embodiment, the inputs to the pixel transfer unit  may be four channels of pixel data (e.g., one 4-channel pixel, two 2-channel pixels, or four 1-channel pixels). The pixel transfer unit  may also receive a three-channel accumulation buffer pixel during the dynamic blending mode.","The pixel transfer unit  may include a set of registers that store operational parameters such as scale value, shift values, bias values, matrix coefficients, and so on. For example, 16 scale values may be stored to support 4\u00d74 matrix operation. The control unit may cycle through the different channels of input data and select the correct combination of inputs and register values to perform the desired operation.","In other embodiments, pixel transfer unit  may include more than or less than four copies of scale and bias unit .","Although the embodiments above have been described in considerable detail, other versions are possible. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications. Note the section headings used herein are for organizational purposes only and are not meant to limit the description provided herein or the claims attached hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 4","b":"3"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 5","b":"3"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 6","b":"3"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIGS. 9-11B"},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIGS. 12A and 12B"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 13"},{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIGS. 14-15"}]},"DETDESC":[{},{}]}
