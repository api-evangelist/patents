---
title: Web request broker controlling multiple processes
abstract: A web server configured to respond to client requests over a network such as the World Wide Web includes a web listener having a Hypertext Transfer Protocol (HTTP) daemon, a plurality of extension programs configured to perform respective operations, and a web request broker configured to identify one of the programs for responding to a client request, and determine the availability of an instance of the identified program. The web request broker maintains control of multiple instances of each server extension program to provide enhanced server operation without overwhelming server resources. The web request broker maintains a minimum number of instances of the identified program in memory, each executed in its own address space. The web request broker determines whether an available instance of the identified program is available from an existing number of instances, and selectively initiates a new instance of the program if no other instance is available. If no instance is available and the existing number of instances exceeds the maximum prescribed number, then the web request broker returns the reply to the web listener to send a reply over the network that the request was not processed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06845505&OS=06845505&RS=06845505
owner: Oracle International Corporation
number: 06845505
owner_city: Redwood Shores
owner_country: US
publication_date: 19970203
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","Overview of Web Server Architecture","Web Request Broker"],"p":["This invention relates to server architectures in networked computer systems, more specifically to web servers executing server applications supporting dynamic operations for web users.","The World Wide Web includes a network of servers on the Internet (\u201cweb servers\u201d), each of which has one or more HTML (Hypertext Markup Language) pages. The HTML pages on a web server provide information and hypertext links to other documents on that and (usually) other web servers. Web servers communicate with clients by using the Hypertext Transfer Protocol (HTTP).","Users of the World Wide Web use a client program, referred to as a browser, to request, decode and display information from a selected web server. When the user of a browser selects a link, a request is sent over the Internet to the web server that stores information specified in the link. In response to the request, the web server transmits the specified information to the browser that issued the request. The browser receives the information, presents the received information to the user, and awaits the next user request.","Traditionally, the information stored on web servers is in the form of static HTML pages. Static HTML pages are created and stored at the web server prior to a request from a web browser. In response to a request, a static HTML page is merely read from storage and transmitted to the requesting browser. Currently, there is a trend to develop web server applications that respond to browser requests by performing dynamic operations. For example, a web server may respond to a request by issuing a query to a database, dynamically constructing a web page containing the results of the query, and transmitting the dynamically constructed HTML page to the requesting browser. To perform dynamic operations, the functionality of the web server must be enhanced or augmented. Various approaches have been developed for extending web servers to support dynamic operations.","One approach to the provide dynamic operations in response to requests from web browsers uses the common gateway interface (CGI). CGI is a specification for transferring information between a web server and a CGI program. A CGI program is any program designed to accept and return data that conforms to the CGI specification. The program could be written in any programming language, including C, Perl, or Visual Basic.","The CGI approach suffers from the disadvantage that a separate process (a separate instance of the CGI program) is initiated each time the specified request is received by the server. Receipt of a thousand such requests from different users will thus cause a thousand processes to be initiated, exhausting available resources on the server.","An alternative approach to providing dynamic responses to requests involves using a \u201cplug-in\u201d extensions. A plug-in extension intercepts messages sent to the server at various stages to perform application-specific processing for a specific user request. A web server plug-in executes in the same address space as the web server and all other web server plug-ins. Hence, an application developer designing a plug-in must be familiar with the lower level operational details of the web server. Moreover, execution of the plug-ins in the same address space as the web server exposes the web server to security and stability risks, where a faulty plug-in may cause other plug-ins or the web server itself to crash, or perform in an unpredictable manner.","There is a need for an arrangement that enables web servers to support dynamic server operations, where multiple external processes may be initiated, managed, and terminated in a controllable, scalable and efficient manner.","There is also a need for an arrangement for responding to a client request issued to a web server executing multiple instances of a program configured to process the request, where the request from the client is selectively dispatched to an available instance.","There is also a need for an arrangement that responds to a client request, where an instance of a program configured to process the request is selectively initiated based on the availability of existing instances and a predetermined maximum number of instances.","These and other needs are attained by the present invention, where a web request broker controls processing of a request by identifying a program that corresponds to the request, selectively initiating an instance of the program, and dispatching the request to the instance to process the request.","According to one aspect of the present invention, a request issued to a server from a client over a network system is processed by obtaining the request over a network, and identifying a program that corresponds to the request. An instance of the program is selectively initiated based on a prescribed number of instances of the program. The request is dispatched to the initiated instance of the program, and the instance executes the corresponding program to process the request. The request is then responded to, based on the execution of the instance. Hence, a plurality of programs, for example server extensions, may be added to a server process in a controllable manner. Moreover, the selective initiation of an instance of an identified program ensures that the server maintains control of the multiple instances, preserving stability in server operations. The prescribed number of instances may also specify both a minimum and a maximum number of instances, enabling processing delays to be minimized by maintaining at least a minimum number of instances in memory for subsequent requests, while maintaining control of server resources by limiting the maximum number of instances.","According to another aspect of the present invention, a method for execution by a server is configured to respond to a request for performance of an operation. The method includes obtaining the request over a network, and forwarding the request to a dispatcher plug-in executed by the server. The request is processed by causing the dispatcher plug-in to determine whether an available instance of a program, configured to handle the request, is available from an existing number of the program instances. If an instance is available, then the request is dispatched for execution by the available instance. If no instance is available, then a new instance is initiated if the existing number of instances does not exceed a maximum prescribed number. If no instance is available and the existing number of instances exceeds the maximum prescribed number, then a reply is sent over the network indicating the request was not processed. Hence, the dispatcher plug-in manages server resources in processing the request by selectively dispatching the request for execution or denying the request based upon the availability of an instance relative to the maximum prescribed number of instances.","Hence, the present invention enables a plurality of extension programs to be added to a server process in a controllable manner. The dispatcher plug-in controls execution of different extension programs running in separate and independent instances, and selectively routes requests to available instances, ensuring that the server process and the server extension programs are not overloaded.","Additional objects, advantages and novel features of the invention will be set forth in part in the description which follows, and in part will become apparent to those skilled in the art upon examination of the following or may be learned by practice of the invention. The objects and advantages of the invention may be realized and attained by means of the instrumentalities and combinations particularly pointed out in the appended claims.","A method and apparatus for responding to a request issued to a server from a client over a network system is described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without the specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.",{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 1","b":["10","12","14","10","16","18","20","14","12","10","12","22","16","14","24","22","22","16","22","16"]},"As described below, the web listener  receives the client request over the network , and forwards the request to the web request broker . The web request broker  selectively dispatches the request to an executable instance of one of the server extension programs  for processing. The web listener , upon receiving a reply from the web request broker , outputs the reply to the client request via the network . Upon receiving the reply, the web browser  determines the type of request received, and determines how to handle the response. For example, the response may either be processed natively by the web browser , or the web browser  may use one of the browser extension programs  for further processing. The browser extension programs  will typically be implemented as a client-side plug-in that performs specific processing of the reply. Upon completing the processing, the client  will typically display the result in the web browser's main viewing area as a hypertext mark-up language (HTML) page.","According to the present invention, web request broker , is configured to manage processing of client requests by selectively routing the client request to server extensions running in separate processes.",{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 2","b":["10","16","16","16","14","16","18"],"i":"a "},"The web request broker  includes a dispatcher plug-in  and a plurality of execution engines . The web request broker  controls processing of the client request by identifying an extension program  configured to process the client request, and dispatching the client request for execution by an available instance of the extension program. The dispatcher plug-in  includes a configuration library  that identifies the available programs for handling different requests, described in detail below. Once the dispatcher plug-in  identifies a program extension  that is configured to process the request, the dispatcher plug-in  determines whether an available instance of the program configured to handle the request is available, and dispatches the request for execution by the available instance, described below.","The web server  also includes a plurality of server extension programs , and . Each server extension program, also referred to as a system cartridge, is configured for a different operation. Specifically, a server extension program is configured as a cartridge that performs a well-defined function, or as a programmable cartridge that acts as an interpreter or a routine environment for an application. An example of a programmable cartridge is a PL\/SQL agent , configured to process database queries according to the Oracle-based Programming Language using Structured Query Language (PL\/SQL). The PL\/SQL agent executes a client request having a database query by executing an individual process  (i.e., a separate instance of the PL\/SQL agent ). Execution of the instance causes the instance to process the request, for example accessing a database server  in communication with the instance  via a data link .","Another example of a programmable cartridge-type server extension program is a JAVA interpreter , which enable web application developers to write server-side JAVA applications to process client requests. Similarly, a custom server may be configured as an extension program in order to provide dynamic operations, for example accessing processes executed by a third party server .","The extension programs , , and , stored as executable code, are executed by first initiating an instance  of the corresponding extension program  into server memory, and executing the instance. An instance is equivalent to a process in a UNIX environment. The web request broker  manages the execution of each of the extension programs  by initiating a predetermined minimum number of instances , , for the extension programs , , , respectively. If the web request broker  receives a client request and determines that no instance  of the appropriate extension program is available, the web request broker  will initiate a new instance of the program to execute the request if the existing number of instances does not exceed a maximum prescribed number.","For example, if a client request specifies a request for access of the database , the web request broker  will identify the PL\/SQL agent as the program configured to handle the request. The web request broker  will determine whether an existing instance of the program is available to handle the request. If no instance is available, e.g., all the existing instances -are processing other client requests, the web request broker  will initiate a new instance if the existing number of instances does not exceed a maximum prescribed number.","As shown in , the web request broker  includes web request broker execution engines (WRBX)  for each of the extension programs . The execution engine  controls execution of the instances of the corresponding program by providing an application programming interface (WRB API) that specifies predetermined operations to be performed by the instances of the corresponding program. By establishing basic callback functions between the execution engine  and an extension program, any extension program can be integrated into the server  by configuring the extension program to respond to the callback functions (for example an initialization function, a request handler, and a shutdown function), and then registering the extension program in the configuration library , described below.","Thus, if the dispatcher plug-in  determines that the PL\/SQL agent is the appropriate extension to process a request, the dispatcher plug-in  dispatches the request to the execution engine . If a new instance of the program  needs to be initiated, the dispatcher plug-in  creates a new instance of the program in a separate address space and dispatches the request to the execution engine of the new instance. The address space used to execute the instance of the program may be within memory of the computer system upon which the web request broker is executing, or on another computer system. The execution engine then issues a request handler callback function to the specified instance , causing the instance to process the request, for example by accessing the database . The instance executing the request returns the result to the execution engine , which forwards the result to the dispatcher plug-in . In the event that the web request broker  detects a fault in the operation, the execution engine issues a shutdown function to abort the instance from memory.","Hence, the execution engine provides an application programming interface to the web request broker  (WRB API) that specifies predetermined operations to be performed. Use of the WRB API enables programmers of the extension programs  to configure each extension program for high-level integration into the server  independent of the protocols used by the particular web listener with which the extension program will be used.",{"@attributes":{"id":"P-00036","num":"00036"},"figref":"FIGS. 3A and 3B","b":["50","16","16","18","52","30","54","34","34","34","36","34","20"],"i":"b "},"The dispatcher plug-in  determines in step  if the request object type (e.g., the virtual path specified in the client request) corresponds to an identifiable program, where the request object type corresponds to an object type stored in the configuration library . If the request object type does not correspond to an identifiable program, the request is returned to the web listener  in step  (see FIG. B). If in step  the HTTP daemon recognizes the request as a request for a static HTML page, the HTTP daemon accesses the static HTML page from the page memory , and sends the reply to the client in step . If the client request is not recognized by the HTTP daemon, the reply is sent to the client in step  indicating that the request was unrecognizable.","If in step  the dispatcher plug-in  identifies from the configuration library  an extension program configured to handle the request, the dispatcher plug-in  determines in step , shown in , whether an available instance of the identified program is available among the existing number of instances . If in step  the dispatcher plug-in  identifies an available instance, for example instance of the PL\/SQL agent , the corresponding execution engine  is called in step  to execute the available instance to process the request, described below. However, if in step  no instance of the identified program  is available, the dispatcher plug-in  determines in step  if the existing number of instances exceeds a maximum prescribed number, stored in the configuration library . If the existing number of instances exceeds the maximum prescribed number in step , the dispatcher plug-in  returns the request to the web listener  in step , after which the web listener sends a reply to the client over the network in step  indicating the request was not processed.","If in step  the existing number of instances does not exceed the maximum prescribed number, the dispatcher plug-in  initiates a new instance of the identified program and dispatches the request to the execution engine of the new instance. For example, the dispatcher plug-in  initiates a new instance of the PL\/SQL agent . During this step, the stored sequences of instructions for the PL\/SQL agent are accessed to create a new instance of the program in an address space that is separate from the address space in which dispatcher plug-in  is executing.","Once the new instance , is running, the dispatcher plug-in  dispatches the request to the execution engine associated with the new instance in step . The execution engine sends a callback message to the new instance requesting execution of the request. The execution engine  passes in the callback message any parameters necessary for the instance to process the request, for example passwords, database search keys, or any other argument for a dynamic operation executed by the instance . The instance then executes the request.","During the execution of the request by the instance in step , the dispatcher plug-in  monitors the instance to determine the occurrence of a fault in step . If in step  the dispatcher plug-in  detects a fault, the dispatcher plug-in  calls the corresponding execution engine  in step  to abort the instance  having the fault. The corresponding execution engine  in turn issues a shut down command across the API to the faulty instance. The instance, responding to the shut down command by the execution engine , will shut down without affecting any other process in any other address space.","If in step  no fault is detected, the dispatcher plug-in  receives a reply from the instance  upon completion of execution in step . The dispatcher plug-in  in step  forwards the reply to the web listener , which responds to the client with the reply from the executed instance . After executing the instance, the dispatcher plug-in  in step  maintains the instance in the memory, as shown in step  to enable execution of a subsequent request.","Hence, the disclosed arrangement manages multiple instances of different extension programs to process a variety of user requests. Each instance  for any program  is executed in a separate memory space, enabling a faulty instance  of a program  to be aborted without affecting any other instances of the programs. The web request broker  also controls the number of instances for each given extension program . Hence, server resources are controlled to ensure that a large number of requests do not overwhelm the server  by an uncontrollable generation of instances. Execution throughput also is improved by maintaining a minimum number of instances ready for execution. Moreover, additional instances may be initiated and maintained in memory for executing subsequent requests, as opposed to terminating an instance after a single execution and then reloading the extension program into memory in order to recreate an instance for execution of a subsequent request.",{"@attributes":{"id":"P-00044","num":"00044"},"figref":"FIG. 4","b":["10","10","90","10","30","92","18","20","30","94","34","20","36","20","20","94","94"]},"After registering the extension programs with the dispatcher plug-in , the dispatcher plug-in  initiates the minimum instances for each program in a separate address space in step . Once the minimum number of instances has been initiated, the server  is prepared to process client requests. Each execution engine  tracks the location in memory and status of each instance  of the corresponding program .",{"@attributes":{"id":"P-00046","num":"00046"},"figref":["FIG. 5","FIG. 2","FIG. 5","FIG. 2"],"b":["10","30","16","16","17","16","18"],"i":"a"},"The transport adapter  is configured to recognize the protocols of different HTTP daemons, and can convert the client requests received from the HTTP daemon \u2032 into a converted client request having a second protocol independent from the protocol of the HTTP daemon \u2032 and matching the protocol of the web request broker . Hence, the transport adapter  enables the web request broker  to be used with HTTP daemons from different vendors. Moreover, transport adapter  may be configured to accommodate different server architectures and operating systems. Hence, the transport adapter  converts a client request from the HTTP daemon \u2032 from a first protocol to a second protocol compatible with the web request broker . Similarly, replies from the web request broker are converted to the transport protocol of the HTTP daemon \u2032 to enable the HTTP daemon \u2032 to send the reply to the user via the network.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
