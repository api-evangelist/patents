---
title: Systems and methods for database proxy request switching
abstract: The present application is directed towards systems and methods for selecting a database from a plurality of databases to forward a SQL query request based on a property of the SQL request. A device intermediary to a plurality of clients and databases may establish a plurality of connections to the plurality of databases. The device may receive, from a client of the plurality of clients, a request to execute a SQL query. The device may evaluate one or more properties of the request to execute the SQL query responsive to a policy. The device may select a database from the plurality of databases based on a result of evaluation of the one or more properties of the request to execute the SQL query. The device may forward the request to execute the SQL query to the selected database via a connection of the plurality of connections.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589029&OS=09589029&RS=09589029
owner: Citrix Systems, Inc.
number: 09589029
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20111215
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE DISCLOSURE","BACKGROUND OF THE DISCLOSURE","BRIEF SUMMARY","DETAILED DESCRIPTION OF THE DISCLOSURE"],"p":["The present application claims priority to U.S. Provisional Patent Application No. 61\/427,696, entitled \u201cSYSTEMS AND METHODS FOR DATABASE PROXY REQUEST SWITCHING\u201d, filed Dec. 28, 2010, which is incorporated herein by reference in its entirety for all purposes.","The present application generally relates to data communication networks. In particular, the present application relates to systems and methods for providing database proxy services.","A typical network incorporates a plurality of intermediaries between servers and clients to facilitate communication and to provide a variety of network services. The servers may be application or webservers, providing various types of information and\/or services to other servers or clients. However, as the types and amount of information increases exponentially, managing this becomes more complex as well. Databases and database servers are increasingly common and integrated with network systems to store, organize and provide various types of information. In particular, database servers generally operate according to a client-server relationship with another network device. Database servers may communicate using one or more protocols, but commonly using Standard Query Language (SQL).","The present application is directed towards systems and methods for providing database proxy services between a database server and a client. In some embodiments, a network appliance serves as an intermediary or proxy between the database server and a client. The appliance may provide one or more database-related services, including but not limited to server-side connection multiplexing, load balancing, database health monitoring, authentication, database caching, SQL firewall, and content switching for scalable databases. To support at least some of these services, the appliance may be configured to support the SQL language and\/or one or more database protocols. The appliance may be configured to adapt some of the available services for supporting application or web servers, to support database servers. For example, policy expressions for HTTP transactions may be modified or extended to support SQL-related protocols. In some other aspects, service monitors may be modified or extended to provide monitoring for databases. Further, the appliance for supporting the database-related services may include a multi-core architecture (also referred to herein as a \u201cmulti-core system\u201d).","In one aspect, the disclosure is directed to a method for selecting by an intermediary device a database from a plurality of databases to forward a structured query language (SQL) query request based on a property of the SQL request. The method may include establishing, by a device intermediary to a plurality of clients and a plurality of databases, a plurality of connections to the plurality of databases. The device may receive, from a client of the plurality of clients, a request to execute a structured query language (SQL) query. The device may evaluate, responsive to a policy, one or more properties of the request to execute the SQL query. The device may select a database from the plurality of databases based on a result of evaluation of the one or more properties of the request to execute the SQL query. The device may forward the request to execute the SQL query to the selected database via a connection of the plurality of connections.","In some embodiments, the device establishes a pool of connections to each database of the plurality of databases. The device may multiplex structured query language (SQL) requests from the plurality of clients via the pool of connections to a database of the plurality of databases. The policy may specify an expression to evaluate the one or more properties comprising a characteristic of a database connection for the request to execute the SQL query comprising one of the following: identification of an authenticated user, a name of the database, a character set sent by the client and client's capabilities. The policy may specify an expression to evaluate the one or more properties of the request to execute the SQL query. The one or more properties may include command parameters of the request for the SQL query comprising one or more of the following: a size of the request and a type of command. In some embodiments, the policy may specify an expression to evaluate the one or more properties of the request to execute the SQL query comprising a grammar part and a data part of the SQL query.","In certain embodiments, a load balancer may select the database from the plurality of databases based on least connection load balancing. The device may determine, responsive to the result of the evaluation, that the request to execute the SQL query comprises a write query and selecting the database comprising a master database in a master and slave configuration. The device may determine, responsive to the result of the evaluation, that the request for the SQL query comprises a read query and selecting the database comprising a slave database in a master and slave configuration. The device may determine, responsive to the result of the evaluation, that the SQL query is for the database corresponding to one or more of a predetermined user, a predetermined database name and a predetermined table.","In another aspect, the disclosure is directed to a system for selecting by an intermediary device a database from a plurality of databases to forward a structured query language (SQL) query request based on a property of the SQL request. The system may include a device intermediary to a plurality of clients and a plurality of databases. The device may establish a plurality of connections to the plurality of databases. A database proxy of the device may receive from a client of the plurality of clients, a request to execute a structured query language (SQL) query. A policy engine of the database proxy may evaluate, responsive to a policy, one or more properties of the request to execute the SQL query. The database proxy may select a database from the plurality of databases based on a result of evaluation of the one or more properties of the request to execute the SQL query. The database proxy may forward the request to execute the SQL query to the selected database via a connection of the plurality of connections.","In some embodiments, the device establishes a pool of connections to each database of the plurality of databases. The database proxy may multiplex structured query language (SQL) requests from the plurality of clients via the pool of connections to a database of the plurality of databases. The policy may specify an expression to evaluate the one or more properties comprising a characteristic of a database connection for the request to execute the SQL query comprising one of the following: identification of an authenticated user, a name of the database, a character set sent by the client and client's capabilities. The policy may specify an expression to evaluate the one or more properties of the request to execute the SQL query. The one or more properties may include command parameters of the request for the SQL query comprising one or more of the following: a size of the request and a type of command. The policy may specify an expression to evaluate the one or more properties of the request to execute the SQL query comprising a grammar part and a data part of the SQL query.","In some embodiments, a load balancer of the device selects the database from the plurality of databases based on least connection load balancing. The database proxy, responsive to the result of the evaluation by the policy engine, may determine that the request to execute the SQL query comprises a write query and selecting the database comprising a master database in a master and slave configuration. The database proxy, responsive to the result of the evaluation by the policy engine, may determine that the request for the SQL query comprises a read query and selecting the database comprising a slave database in a master and slave configuration. The database proxy, responsive to the result of the evaluation by the policy engine, may determine that the SQL query is for the database corresponding to one or more of a predetermined user, a predetermined database name and a predetermined table.","The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.","The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements.","For purposes of reading the description of the various embodiments below, the following descriptions of the sections of the specification and their respective contents may be helpful:\n\n","Prior to discussing the specifics of embodiments of the systems and methods of an appliance and\/or client, it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to , an embodiment of a network environment is depicted. In brief overview, the network environment comprises one or more clients -(also generally referred to as local machine(s) , or client(s) ) in communication with one or more servers -(also generally referred to as server(s) , or remote machine(s) ) via one or more networks , \u2032 (generally referred to as network ). In some embodiments, a client  communicates with a server  via an appliance .","Although  shows a network  and a network \u2032 between the clients  and the servers , the clients  and the servers  may be on the same network . The networks  and \u2032 can be the same type of network or different types of networks. The network  and\/or the network \u2032 can be a local-area network (LAN), such as a company Intranet, a metropolitan area network (MAN), or a wide area network (WAN), such as the Internet or the World Wide Web. In one embodiment, network \u2032 may be a private network and network  may be a public network. In some embodiments, network  may be a private network and network \u2032 a public network. In another embodiment, networks  and \u2032 may both be private networks. In some embodiments, clients  may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network  to the servers  located at a corporate data center.","The network  and\/or \u2032 be any type and\/or form of network and may include any of the following: a point to point network, a broadcast network, a wide area network, a local area network, a telecommunications network, a data communication network, a computer network, an ATM (Asynchronous Transfer Mode) network, a SONET (Synchronous Optical Network) network, a SDH (Synchronous Digital Hierarchy) network, a wireless network and a wireline network. In some embodiments, the network  may comprise a wireless link, such as an infrared channel or satellite band. The topology of the network  and\/or \u2032 may be a bus, star, or ring network topology. The network  and\/or \u2032 and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.","As shown in , the appliance , which also may be referred to as an interface unit  or gateway , is shown between the networks  and \u2032. In some embodiments, the appliance  may be located on network . For example, a branch office of a corporate enterprise may deploy an appliance  at the branch office. In other embodiments, the appliance  may be located on network \u2032. For example, an appliance  may be located at a corporate data center. In yet another embodiment, a plurality of appliances  may be deployed on network . In some embodiments, a plurality of appliances  may be deployed on network \u2032. In one embodiment, a first appliance  communicates with a second appliance \u2032. In other embodiments, the appliance  could be a part of any client  or server  on the same or different network ,\u2032 as the client . One or more appliances  may be located at any point in the network or network communications path between a client  and a server .","In some embodiments, the appliance  comprises any of the network devices manufactured by Citrix Systems, Inc. of Ft. Lauderdale Fla., referred to as Citrix NetScaler devices. In other embodiments, the appliance  includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks, Inc. of Seattle, Wash. In another embodiment, the appliance  includes any of the DX acceleration device platforms and\/or the SSL VPN series of devices, such as SA 700, SA 2000, SA 4000, and SA 6000 devices manufactured by Juniper Networks, Inc. of Sunnyvale, Calif. In yet another embodiment, the appliance  includes any application acceleration and\/or security related appliances and\/or software manufactured by Cisco Systems, Inc. of San Jose, Calif., such as the Cisco ACE Application Control Engine Module service software and network modules, and Cisco AVS Series Application Velocity System.","In one embodiment, the system may include multiple, logically-grouped servers . In these embodiments, the logical group of servers may be referred to as a server farm . In some of these embodiments, the serves  may be geographically dispersed. In some cases, a farm  may be administered as a single entity. In other embodiments, the server farm  comprises a plurality of server farms . In one embodiment, the server farm executes one or more applications on behalf of one or more clients .","The servers  within each farm  can be heterogeneous. One or more of the servers  can operate according to one type of operating system platform (e.g., WINDOWS NT, manufactured by Microsoft Corp. of Redmond, Wash.), while one or more of the other servers  can operate on according to another type of operating system platform (e.g., Unix or Linux). The servers  of each farm  do not need to be physically proximate to another server  in the same farm . Thus, the group of servers  logically grouped as a farm  may be interconnected using a wide-area network (WAN) connection or medium-area network (MAN) connection. For example, a farm  may include servers  physically located in different continents or different regions of a continent, country, state, city, campus, or room. Data transmission speeds between servers  in the farm  can be increased if the servers  are connected using a local-area network (LAN) connection or some form of direct connection.","Servers  may be referred to as a file server, application server, web server, proxy server, or gateway server. In some embodiments, a server  may have the capacity to function as either an application server or as a master application server. In one embodiment, a server  may include an Active Directory. The clients  may also be referred to as client nodes or endpoints. In some embodiments, a client  has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients -","In some embodiments, a client  communicates with a server . In one embodiment, the client  communicates directly with one of the servers  in a farm . In another embodiment, the client  executes a program neighborhood application to communicate with a server  in a farm . In still another embodiment, the server  provides the functionality of a master node. In some embodiments, the client  communicates with the server  in the farm  through a network . Over the network , the client  can, for example, request execution of various applications hosted by the servers -in the farm  and receive output of the results of the application execution for display. In some embodiments, only the master node provides the functionality required to identify and provide address information associated with a server \u2032 hosting a requested application.","In one embodiment, the server  provides functionality of a web server. In another embodiment, the server receives requests from the client , forwards the requests to a second server and responds to the request by the client  with a response to the request from the server . In still another embodiment, the server  acquires an enumeration of applications available to the client  and address information associated with a server  hosting an application identified by the enumeration of applications. In yet another embodiment, the server  presents the response to the request to the client  using a web interface. In one embodiment, the client  communicates directly with the server  to access the identified application. In another embodiment, the client  receives application output data, such as display data, generated by an execution of the identified application on the server .","Referring now to , an embodiment of a network environment deploying multiple appliances  is depicted. A first appliance  may be deployed on a first network  and a second appliance \u2032 on a second network \u2032. For example a corporate enterprise may deploy a first appliance  at a branch office and a second appliance \u2032 at a data center. In another embodiment, the first appliance  and second appliance \u2032 are deployed on the same network  or network . For example, a first appliance  may be deployed for a first server farm , and a second appliance  may be deployed for a second server farm \u2032. In another example, a first appliance  may be deployed at a first branch office while the second appliance \u2032 is deployed at a second branch office'. In some embodiments, the first appliance  and second appliance \u2032 work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server","Referring now to , another embodiment of a network environment deploying the appliance  with one or more other types of appliances, such as between one or more WAN optimization appliance , \u2032 is depicted. For example a first WAN optimization appliance  is shown between networks  and \u2032 and a second WAN optimization appliance \u2032 may be deployed between the appliance  and one or more servers . By way of example, a corporate enterprise may deploy a first WAN optimization appliance  at a branch office and a second WAN optimization appliance \u2032 at a data center. In some embodiments, the appliance  may be located on network \u2032. In other embodiments, the appliance \u2032 may be located on network . In some embodiments, the appliance \u2032 may be located on network \u2032 or network \u2033. In one embodiment, the appliance  and \u2032 are on the same network. In another embodiment, the appliance  and \u2032 are on different networks. In another example, a first WAN optimization appliance  may be deployed for a first server farm  and a second WAN optimization appliance \u2032 for a second server farm \u2032","In one embodiment, the appliance  is a device for accelerating, optimizing or otherwise improving the performance, operation, or quality of service of any type and form of network traffic, such as traffic to and\/or from a WAN connection. In some embodiments, the appliance  is a performance enhancing proxy. In other embodiments, the appliance  is any type and form of WAN optimization or acceleration device, sometimes also referred to as a WAN optimization controller. In one embodiment, the appliance  is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. In other embodiments, the appliance  includes any of the product embodiments referred to as BIG-IP link controller and WANjet manufactured by F5 Networks, Inc. of Seattle, Wash. In another embodiment, the appliance  includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks, Inc. of Sunnyvale, Calif. In some embodiments, the appliance  includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco, Calif. In other embodiments, the appliance  includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland, N.J. In one embodiment, the appliance  includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino, Calif., such as the PacketShaper, iShared, and SkyX product embodiments provided by Packeteer. In yet another embodiment, the appliance  includes any WAN related appliances and\/or software manufactured by Cisco Systems, Inc. of San Jose, Calif., such as the Cisco Wide Area Network Application Services software and network modules, and Wide Area Network engine appliances.","In one embodiment, the appliance  provides application and data acceleration services for branch-office or remote offices. In one embodiment, the appliance  includes optimization of Wide Area File Services (WAFS). In another embodiment, the appliance  accelerates the delivery of files, such as via the Common Internet File System (CIFS) protocol. In other embodiments, the appliance  provides caching in memory and\/or storage to accelerate delivery of applications and data. In one embodiment, the appliance  provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment, the appliance  provides transport layer protocol optimizations, flow control, performance enhancements or modifications and\/or management to accelerate delivery of applications and data over a WAN connection. For example, in one embodiment, the appliance  provides Transport Control Protocol (TCP) optimizations. In other embodiments, the appliance  provides optimizations, flow control, performance enhancements or modifications and\/or management for any session or application layer protocol.","In another embodiment, the appliance  encoded any type and form of data or information into custom or standard TCP and\/or IP header fields or option fields of network packet to announce presence, functionality or capability to another appliance \u2032. In another embodiment, an appliance \u2032 may communicate with another appliance \u2032 using data encoded in both TCP and\/or IP header fields or options. For example, the appliance may use TCP option(s) or IP header fields or options to communicate one or more parameters to be used by the appliances , \u2032 in performing functionality, such as WAN acceleration, or for working in conjunction with each other.","In some embodiments, the appliance  preserves any of the information encoded in TCP and\/or IP header and\/or option fields communicated between appliances  and \u2032. For example, the appliance  may terminate a transport layer connection traversing the appliance , such as a transport layer connection from between a client and a server traversing appliances  and \u2032. In one embodiment, the appliance  identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance  via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance \u2032 via a second transport layer connection.","Referring now to , a network environment for delivering and\/or operating a computing environment on a client  is depicted. In some embodiments, a server  includes an application delivery system  for delivering a computing environment or an application and\/or data file to one or more clients . In brief overview, a client  is in communication with a server  via network , \u2032 and appliance . For example, the client  may reside in a remote office of a company, e.g., a branch office, and the server  may reside at a corporate data center. The client  comprises a client agent , and a computing environment . The computing environment  may execute or operate an application that accesses, processes or uses a data file. The computing environment , application and\/or data file may be delivered via the appliance  and\/or the server .","In some embodiments, the appliance  accelerates delivery of a computing environment , or any portion thereof, to a client . In one embodiment, the appliance  accelerates the delivery of the computing environment  by the application delivery system . For example, the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location, such as a branch office of the company. In another embodiment, the appliance  accelerates transport layer traffic between a client  and a server . The appliance  may provide acceleration techniques for accelerating any transport layer payload from a server  to a client , such as: 1) transport layer connection pooling, 2) transport layer connection multiplexing, 3) transport control protocol buffering, 4) compression and 5) caching. In some embodiments, the appliance  provides load balancing of servers  in responding to requests from clients . In other embodiments, the appliance  acts as a proxy or access server to provide access to the one or more servers . In another embodiment, the appliance  provides a secure virtual private network connection from a first network  of the client  to the second network \u2032 of the server , such as an SSL VPN connection. It yet other embodiments, the appliance  provides application firewall security, control and management of the connection and communications between a client  and a server .","In some embodiments, the application delivery management system  provides application delivery techniques to deliver a computing environment to a desktop of a user, remote or otherwise, based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques, a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment, the application delivery system  may reside or execute on a server . In another embodiment, the application delivery system  may reside or execute on a plurality of servers -. In some embodiments, the application delivery system  may execute in a server farm . In one embodiment, the server  executing the application delivery system  may also store or provide the application and data file. In another embodiment, a first set of one or more servers  may execute the application delivery system , and a different server may store or provide the application and data file. In some embodiments, each of the application delivery system , the application, and data file may reside or be located on different servers. In yet another embodiment, any portion of the application delivery system  may reside, execute or be stored on or distributed to the appliance , or a plurality of appliances.","The client  may include a computing environment  for executing an application that uses or processes a data file. The client  via networks , \u2032 and appliance  may request an application and data file from the server . In one embodiment, the appliance  may forward a request from the client  to the server . For example, the client  may not have the application and data file stored or accessible locally. In response to the request, the application delivery system  and\/or server  may deliver the application and data file to the client . For example, in one embodiment, the server  may transmit the application as an application stream to operate in computing environment  on client .","In some embodiments, the application delivery system  comprises any portion of the Citrix Access Suite\u2122 by Citrix Systems, Inc., such as the MetaFrame or Citrix Presentation Server\u2122 and\/or any of the Microsoft\u00ae Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment, the application delivery system  may deliver one or more applications to clients  or users via a remote-display protocol or otherwise via remote-based or server-based computing. In another embodiment, the application delivery system  may deliver one or more applications to clients or users via steaming of the application.","In one embodiment, the application delivery system  includes a policy engine  for controlling and managing the access to, selection of application execution methods and the delivery of applications. In some embodiments, the policy engine  determines the one or more applications a user or client  may access. In another embodiment, the policy engine  determines how the application should be delivered to the user or client , e.g., the method of execution. In some embodiments, the application delivery system  provides a plurality of delivery techniques from which to select a method of application execution, such as a server-based computing, streaming or delivering the application locally to the client  for local execution.","In one embodiment, a client  requests execution of an application program and the application delivery system  comprising a server  selects a method of executing the application program. In some embodiments, the server  receives credentials from the client . In another embodiment, the server  receives a request for an enumeration of available applications from the client . In one embodiment, in response to the request or receipt of credentials, the application delivery system  enumerates a plurality of application programs available to the client . The application delivery system  receives a request to execute an enumerated application. The application delivery system  selects one of a predetermined number of methods for executing the enumerated application, for example, responsive to a policy of a policy engine. The application delivery system  may select a method of execution of the application enabling the client  to receive application-output data generated by execution of the application program on a server . The application delivery system  may select a method of execution of the application enabling the local machine  to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment, the application delivery system  may select a method of execution of the application to stream the application via the network  to the client .","A client  may execute, operate or otherwise provide an application, which can be any type and\/or form of software, program, or executable instructions such as any type and\/or form of web browser, web-based client, client-server application, a thin-client computing client, an ActiveX control, or a Java applet, or any other type and\/or form of executable instructions capable of executing on client . In some embodiments, the application may be a server-based or a remote-based application executed on behalf of the client  on a server . In one embodiments the server  may display output to the client  using any thin-client or remote-display protocol, such as the Independent Computing Architecture (ICA) protocol manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. or the Remote Desktop Protocol (RDP) manufactured by the Microsoft Corporation of Redmond, Wash. The application can use any type of protocol and it can be, for example, an HTTP client, an FTP client, an Oscar client, or a Telnet client. In other embodiments, the application comprises any type of software related to VoIP communications, such as a soft IP telephone. In further embodiments, the application comprises any application related to real-time data communications, such as applications for streaming video and\/or audio.","In some embodiments, the server  or a server farm  may be running one or more applications, such as an application providing a thin-client computing or remote display presentation application. In one embodiment, the server  or server farm  executes as an application, any portion of the Citrix Access Suite\u2122 by Citrix Systems, Inc., such as the MetaFrame or Citrix Presentation Server\u2122, and\/or any of the Microsoft\u00ae Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment, the application is an ICA client, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla. In other embodiments, the application includes a Remote Desktop (RDP) client, developed by Microsoft Corporation of Redmond, Wash. Also, the server  may run an application, which for example, may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond, Wash., a web or Internet server, or a desktop sharing server, or a collaboration server. In some embodiments, any of the applications may comprise any type of hosted service or products, such as GoToMeeting\u2122 provided by Citrix Online Division, Inc. of Santa Barbara, Calif., WebEx\u2122 provided by WebEx, Inc. of Santa Clara, Calif., or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond, Wash.","Still referring to , an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service  may include monitoring, measurement and\/or management software and\/or hardware, including data collection, aggregation, analysis, management and reporting. In one embodiment, the performance monitoring service  includes one or more monitoring agents . The monitoring agent  includes any software, hardware or combination thereof for performing monitoring, measurement and data collection activities on a device, such as a client , server  or an appliance , . In some embodiments, the monitoring agent  includes any type and form of script, such as Visual Basic script, or Javascript. In one embodiment, the monitoring agent  executes transparently to any application and\/or user of the device. In some embodiments, the monitoring agent  is installed and operated unobtrusively to the application or client. In yet another embodiment, the monitoring agent  is installed and operated without any instrumentation for the application or device.","In some embodiments, the monitoring agent  monitors, measures and collects data on a predetermined frequency. In other embodiments, the monitoring agent  monitors, measures and collects data based upon detection of any type and form of event. For example, the monitoring agent  may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example, the monitoring agent  may collect data upon detection of any user input events, such as a mouse click. The monitoring agent  may report or provide any monitored, measured or collected data to the monitoring service . In one embodiment, the monitoring agent  transmits information to the monitoring service  according to a schedule or a predetermined frequency. In another embodiment, the monitoring agent  transmits information to the monitoring service  upon detection of an event.","In some embodiments, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of any network resource or network infrastructure element, such as a client, server, server farm, appliance , appliance , or network connection. In one embodiment, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of any transport layer connection, such as a TCP or UDP connection. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures network latency. In yet one embodiment, the monitoring service  and\/or monitoring agent  monitors and measures bandwidth utilization.","In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures end-user response times. In some embodiments, the monitoring service  performs monitoring and performance measurement of an application. In another embodiment, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of any session or connection to the application. In one embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of a browser. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of HTTP based transactions. In some embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of a Voice over IP (VoIP) application or session. In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of a remote display protocol application, such as an ICA client or RDP client. In yet another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of any type and form of streaming media. In still a further embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of a hosted application or a Software-As-A-Service (SaaS) delivery model.","In some embodiments, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of one or more transactions, requests or responses related to application. In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures any portion of an application layer stack, such as any .NET or J2EE calls. In one embodiment, the monitoring service  and\/or monitoring agent  monitors and measures database or SQL transactions. In yet another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures any method, function or application programming interface (API) call.","In one embodiment, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of a delivery of application and\/or data from a server to a client via one or more appliances, such as appliance  and\/or appliance . In some embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of delivery of a virtualized application. In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of delivery of a streaming application. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of delivery of a desktop application to a client and\/or the execution of the desktop application on the client. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of a client\/server application.","In one embodiment, the monitoring service  and\/or monitoring agent  is designed and constructed to provide application performance management for the application delivery system . For example, the monitoring service  and\/or monitoring agent  may monitor, measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example, the monitoring service  and\/or monitoring agent  monitors individual ICA sessions. The monitoring service  and\/or monitoring agent  may measure the total and per session system resource usage, as well as application and networking performance. The monitoring service  and\/or monitoring agent  may identify the active servers for a given user and\/or user session. In some embodiments, the monitoring service  and\/or monitoring agent  monitors back-end connections between the application delivery system  and an application and\/or database server. The monitoring service  and\/or monitoring agent  may measure network latency, delay and volume per user-session or ICA session.","In some embodiments, the monitoring service  and\/or monitoring agent  measures and monitors memory usage for the application delivery system , such as total memory usage, per user session and\/or per process. In other embodiments, the monitoring service  and\/or monitoring agent  measures and monitors CPU usage the application delivery system , such as total CPU usage, per user session and\/or per process. In another embodiments, the monitoring service  and\/or monitoring agent  measures and monitors the time required to log-in to an application, a server, or the application delivery system, such as Citrix Presentation Server. In one embodiment, the monitoring service  and\/or monitoring agent  measures and monitors the duration a user is logged into an application, a server, or the application delivery system . In some embodiments, the monitoring service  and\/or monitoring agent  measures and monitors active and inactive session counts for an application, server or application delivery system session. In yet another embodiment, the monitoring service  and\/or monitoring agent  measures and monitors user session latency.","In yet further embodiments, the monitoring service  and\/or monitoring agent  measures and monitors measures and monitors any type and form of server metrics. In one embodiment, the monitoring service  and\/or monitoring agent  measures and monitors metrics related to system memory, CPU usage, and disk storage. In another embodiment, the monitoring service  and\/or monitoring agent  measures and monitors metrics related to page faults, such as page faults per second. In other embodiments, the monitoring service  and\/or monitoring agent  measures and monitors round-trip time metrics. In yet another embodiment, the monitoring service  and\/or monitoring agent  measures and monitors metrics related to application crashes, errors and\/or hangs.","In some embodiments, the monitoring service  and monitoring agent  includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. In another embodiment, the performance monitoring service  and\/or monitoring agent  includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto, Calif. In one embodiment, the performance monitoring service  and\/or monitoring agent  includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco, Calif. In other embodiments, the performance monitoring service  and\/or monitoring agent  includes any portion of the business service management products, such as the BMC Performance Manager and Patrol products, manufactured by BMC Software, Inc. of Houston, Tex.","The client , server , and appliance  may be deployed as and\/or executed on any type and form of computing device, such as a computer, network device or appliance capable of communicating on any type and form of network and performing the operations described herein.  depict block diagrams of a computing device  useful for practicing an embodiment of the client , server  or appliance . As shown in , each computing device  includes a central processing unit , and a main memory unit . As shown in , a computing device  may include a visual display device , a keyboard  and\/or a pointing device , such as a mouse. Each computing device  may also include additional optional elements, such as one or more input\/output devices -(generally referred to using reference numeral ), and a cache memory  in communication with the central processing unit .","The central processing unit  is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments, the central processing unit is provided by a microprocessor unit, such as: those manufactured by Intel Corporation of Mountain View, Calif.; those manufactured by Motorola Corporation of Schaumburg, Ill.; those manufactured by Transmeta Corporation of Santa Clara, Calif.; the RS\/6000 processor, those manufactured by International Business Machines of White Plains, N.Y.; or those manufactured by Advanced Micro Devices of Sunnyvale, Calif. The computing device  may be based on any of these processors, or any other processor capable of operating as described herein.","Main memory unit  may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor , such as Static random access memory (SRAM), Burst SRAM or SynchBurst SRAM (BSRAM), Dynamic random access memory (DRAM), Fast Page Mode DRAM (FPM DRAM), Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM), Extended Data Output DRAM (EDO DRAM), Burst Extended Data Output DRAM (BEDO DRAM), Enhanced DRAM (EDRAM), synchronous DRAM (SDRAM), JEDEC SRAM, PC100 SDRAM, Double Data Rate SDRAM (DDR SDRAM), Enhanced SDRAM (ESDRAM), SyncLink DRAM (SLDRAM), Direct Rambus DRAM (DRDRAM), or Ferroelectric RAM (FRAM). The main memory  may be based on any of the above described memory chips, or any other available memory chips capable of operating as described herein. In the embodiment shown in , the processor  communicates with main memory  via a system bus  (described in more detail below).  depicts an embodiment of a computing device  in which the processor communicates directly with main memory  via a memory port . For example, in  the main memory  may be DRDRAM.",{"@attributes":{"id":"p-0091","num":"0100"},"figref":["FIG. 1F","FIG. 1F","FIG. 1F","FIG. 1F"],"b":["101","140","101","140","150","140","122","101","130","150","101","130","124","101","124","100","101","130","101","130","130"],"i":["b ","b ","a "]},"The computing device  may support any suitable installation device , such as a floppy disk drive for receiving floppy disks such as 3.5-inch, 5.25-inch disks or ZIP disks, a CD-ROM drive, a CD-R\/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, hard-drive or any other device suitable for installing software and programs such as any client agent , or portion thereof. The computing device  may further comprise a storage device , such as one or more hard disk drives or redundant arrays of independent disks, for storing an operating system and other related software, and for storing application software programs such as any program related to the client agent . Optionally, any of the installation devices  could also be used as the storage device . Additionally, the operating system and the software can be run from a bootable medium, for example, a bootable CD, such as KNOPPIX\u00ae, a bootable CD for GNU\/Linux that is available as a GNU\/Linux distribution from knoppix.net.","Furthermore, the computing device  may include a network interface  to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above. The network interface  may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing the computing device  to any type of network capable of communication and performing the operations described herein. A wide variety of I\/O devices -may be present in the computing device . Input devices include keyboards, mice, trackpads, trackballs, microphones, and drawing tablets. Output devices include video displays, speakers, inkjet printers, laser printers, and dye-sublimation printers. The I\/O devices  may be controlled by an I\/O controller  as shown in . The I\/O controller may control one or more I\/O devices such as a keyboard  and a pointing device , e.g., a mouse or optical pen. Furthermore, an I\/O device may also provide storage  and\/or an installation medium  for the computing device . In still other embodiments, the computing device  may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry, Inc. of Los Alamitos, Calif.","In some embodiments, the computing device  may comprise or be connected to multiple display devices -, which each may be of the same or different type and\/or form. As such, any of the I\/O devices -and\/or the I\/O controller  may comprise any type and\/or form of suitable hardware, software, or combination of hardware and software to support, enable or provide for the connection and use of multiple display devices -by the computing device . For example, the computing device  may include any type and\/or form of video adapter, video card, driver, and\/or library to interface, communicate, connect or otherwise use the display devices -. In one embodiment, a video adapter may comprise multiple connectors to interface to multiple display devices -. In other embodiments, the computing device  may include multiple video adapters, with each video adapter connected to one or more of the display devices -. In some embodiments, any portion of the operating system of the computing device  may be configured for using multiple displays -. In other embodiments, one or more of the display devices -may be provided by one or more other computing devices, such as computing devices and connected to the computing device , for example, via a network. These embodiments may include any type of software designed and constructed to use another computer's display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device  may be configured to have multiple display devices -","In further embodiments, an I\/O device  may be a bridge  between the system bus  and an external communication bus, such as a USB bus, an Apple Desktop Bus, an RS-232 serial connection, a SCSI bus, a FireWire bus, a FireWire  bus, an Ethernet bus, an AppleTalk bus, a Gigabit Ethernet bus, an Asynchronous Transfer Mode bus, a HIPPI bus, a Super HIPPI bus, a SerialPlus bus, a SCI\/LAMP bus, a FibreChannel bus, or a Serial Attached small computer system interface bus.","A computing device  of the sort depicted in  typically operate under the control of operating systems, which control scheduling of tasks and access to system resources. The computing device  can be running any operating system such as any of the versions of the Microsoft\u00ae Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS\u00ae for Macintosh computers, any embedded operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices, or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include: WINDOWS 3.x, WINDOWS 95, WINDOWS 98, WINDOWS 2000, WINDOWS NT 3.51, WINDOWS NT 4.0, WINDOWS CE, and WINDOWS XP, all of which are manufactured by Microsoft Corporation of Redmond, Wash.; MacOS, manufactured by Apple Computer of Cupertino, Calif.; OS\/2, manufactured by International Business Machines of Armonk, N.Y.; and Linux, a freely-available operating system distributed by Caldera Corp. of Salt Lake City, Utah, or any type and\/or form of a Unix operating system, among others.","In other embodiments, the computing device  may have different processors, operating systems, and input devices consistent with the device. For example, in one embodiment the computer  is a Treo 180, 270, 1060, 600 or 650 smart phone manufactured by Palm, Inc. In this embodiment, the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five-way navigator device. Moreover, the computing device  can be any workstation, desktop computer, laptop or notebook computer, server, handheld computer, mobile telephone, any other computer, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.","As shown in , the computing device  may comprise multiple processors and may provide functionality for simultaneous execution of instructions or for simultaneous execution of one instruction on more than one piece of data. In some embodiments, the computing device  may comprise a parallel processor with one or more cores. In one of these embodiments, the computing device  is a shared memory parallel device, with multiple processors and\/or multiple processor cores, accessing all available memory as a single global address space. In another of these embodiments, the computing device  is a distributed memory parallel device with multiple processors each accessing local memory only. In still another of these embodiments, the computing device  has both some memory which is shared and some memory which can only be accessed by particular processors or subsets of processors. In still even another of these embodiments, the computing device , such as a multi-core microprocessor, combines two or more independent processors into a single package, often a single integrated circuit (IC). In yet another of these embodiments, the computing device  includes a chip having a CELL BROADBAND ENGINE architecture and including a Power processor element and a plurality of synergistic processing elements, the Power processor element and the plurality of synergistic processing elements linked together by an internal high speed bus, which may be referred to as an element interconnect bus.","In some embodiments, the processors provide functionality for execution of a single instruction simultaneously on multiple pieces of data (SIMD). In other embodiments, the processors provide functionality for execution of multiple instructions simultaneously on multiple pieces of data (MIMD). In still other embodiments, the processor may use any combination of SIMD and MIMD cores in a single device.","In some embodiments, the computing device  may comprise a graphics processing unit. In one of these embodiments, depicted in , the computing device  includes at least one central processing unit  and at least one graphics processing unit. In another of these embodiments, the computing device  includes at least one parallel processing unit and at least one graphics processing unit. In still another of these embodiments, the computing device  includes a plurality of processing units of any type, one of the plurality of processing units comprising a graphics processing unit.","In some embodiments, a first computing device executes an application on behalf of a user of a client computing device . In other embodiments, a computing device executes a virtual machine, which provides an execution session within which applications execute on behalf of a user or a client computing devices . In one of these embodiments, the execution session is a hosted desktop session. In another of these embodiments, the computing device  executes a terminal services session. The terminal services session may provide a hosted desktop environment. In still another of these embodiments, the execution session provides access to a computing environment, which may comprise one or more of: an application, a plurality of applications, a desktop application, and a desktop session in which one or more applications may execute.","B. Appliance Architecture",{"@attributes":{"id":"p-0102","num":"0111"},"figref":["FIG. 2A","FIG. 2A","FIG. 2"],"b":["200","200","200","206","202","204"]},"Hardware layer  provides the hardware elements upon which programs and services within kernel space  and user space  are executed. Hardware layer  also provides the structures and elements which allow programs and services within kernel space  and user space  to communicate data both internally and externally with respect to appliance . As shown in , the hardware layer  includes a processing unit  for executing software programs and services, a memory  for storing software and data, network ports  for transmitting and receiving data over a network, and an encryption processor  for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments, the central processing unit  may perform the functions of the encryption processor  in a single processor. Additionally, the hardware layer  may comprise multiple processors for each of the processing unit  and the encryption processor . The processor  may include any of the processors  described above in connection with . For example, in one embodiment, the appliance  comprises a first processor  and a second processor \u2032. In other embodiments, the processor  or \u2032 comprises a multi-core processor.","Although the hardware layer  of appliance  is generally illustrated with an encryption processor , processor  may be a processor for performing functions related to any encryption protocol, such as the Secure Socket Layer (SSL) or Transport Layer Security (TLS) protocol. In some embodiments, the processor  may be a general purpose processor (GPP), and in further embodiments, may have executable instructions for performing processing of any security related protocol.","Although the hardware layer  of appliance  is illustrated with certain elements in , the hardware portions or components of appliance  may comprise any type and form of elements, hardware or software, of a computing device, such as the computing device  illustrated and discussed herein in conjunction with . In some embodiments, the appliance  may comprise a server, gateway, router, switch, bridge or other type of computing or network device, and have any hardware and\/or software elements associated therewith.","The operating system of appliance  allocates, manages, or otherwise segregates the available system memory into kernel space  and user space . In example software architecture , the operating system may be any type and\/or form of Unix operating system although the invention is not so limited. As such, the appliance  can be running any operating system such as any of the versions of the Microsoft\u00ae Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS\u00ae for Macintosh computers, any embedded operating system, any network operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices or network devices, or any other operating system capable of running on the appliance  and performing the operations described herein.","The kernel space  is reserved for running the kernel , including any device drivers, kernel extensions or other kernel related software. As known to those skilled in the art, the kernel  is the core of the operating system, and provides access, control, and management of resources and hardware-related elements of the application . In accordance with an embodiment of the appliance , the kernel space  also includes a number of network services or processes working in conjunction with a cache manager , sometimes also referred to as the integrated cache, the benefits of which are described in detail further herein. Additionally, the embodiment of the kernel  will depend on the embodiment of the operating system installed, configured, or otherwise used by the device .","In one embodiment, the device  comprises one network stack , such as a TCP\/IP based stack, for communicating with the client  and\/or the server . In one embodiment, the network stack  is used to communicate with a first network, such as network , and a second network . In some embodiments, the device  terminates a first transport layer connection, such as a TCP connection of a client , and establishes a second transport layer connection to a server  for use by the client , e.g., the second transport layer connection is terminated at the appliance  and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments, the device  may comprise multiple network stacks, for example  and \u2032, and the first transport layer connection may be established or terminated at one network stack , and the second transport layer connection on the second network stack \u2032. For example, one network stack may be for receiving and transmitting network packet on a first network, and another network stack for receiving and transmitting network packets on a second network. In one embodiment, the network stack  comprises a buffer  for queuing one or more network packets for transmission by the appliance .","As shown in , the kernel space  includes the cache manager , a high-speed layer 2-7 integrated packet engine , an encryption engine , a policy engine  and multi-protocol compression logic . Running these components or processes , , ,  and  in kernel space  or kernel mode instead of the user space  improves the performance of each of these components, alone and in combination. Kernel operation means that these components or processes , , ,  and  run in the core address space of the operating system of the device . For example, running the encryption engine  in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel, thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example, data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode, such as from a kernel level data structure to a user level data structure. In another aspect, the number of context switches between kernel mode and user mode are also reduced. Additionally, synchronization of and communications between any of the components or processes , , ,  and  can be performed more efficiently in the kernel space .","In some embodiments, any portion of the components , , ,  and  may run or operate in the kernel space , while other portions of these components , , ,  and  may run or operate in user space . In one embodiment, the appliance  uses a kernel-level data structure providing access to any portion of one or more network packets, for example, a network packet comprising a request from a client  or a response from a server . In some embodiments, the kernel-level data structure may be obtained by the packet engine  via a transport layer driver interface or filter to the network stack . The kernel-level data structure may comprise any interface and\/or data accessible via the kernel space  related to the network stack , network traffic or packets received or transmitted by the network stack . In other embodiments, the kernel-level data structure may be used by any of the components or processes , , ,  and  to perform the desired operation of the component or process. In one embodiment, a component , , ,  and  is running in kernel mode  when using the kernel-level data structure, while in another embodiment, the component , , ,  and  is running in user mode when using the kernel-level data structure. In some embodiments, the kernel-level data structure may be copied or passed to a second kernel-level data structure, or any desired user-level data structure.","The cache manager  may comprise software, hardware or any combination of software and hardware to provide cache access, control and management of any type and form of content, such as objects or dynamically generated objects served by the originating servers . The data, objects or content processed and stored by the cache manager  may comprise data in any format, such as a markup language, or communicated via any protocol. In some embodiments, the cache manager  duplicates original data stored elsewhere or data previously computed, generated or transmitted, in which the original data may require longer access time to fetch, compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element, future use can be made by accessing the cached copy rather than refetching or recomputing the original data, thereby reducing the access time. In some embodiments, the cache memory element may comprise a data object in memory  of device . In other embodiments, the cache memory element may comprise memory having a faster access time than memory . In another embodiment, the cache memory element may comprise any type and form of storage element of the device , such as a portion of a hard disk. In some embodiments, the processing unit  may provide cache memory for use by the cache manager . In yet further embodiments, the cache manager  may use any portion and combination of memory, storage, or the processing unit for caching data, objects, and other content.","Furthermore, the cache manager  includes any logic, functions, rules, or operations to perform any embodiments of the techniques of the appliance  described herein. For example, the cache manager  includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client  or server . In some embodiments, the cache manager  may operate as a program, service, process or task executing in the kernel space , and in other embodiments, in the user space . In one embodiment, a first portion of the cache manager  executes in the user space  while a second portion executes in the kernel space . In some embodiments, the cache manager  can comprise any type of general purpose processor (GPP), or any other type of integrated circuit, such as a Field Programmable Gate Array (FPGA), Programmable Logic Device (PLD), or Application Specific Integrated Circuit (ASIC).","The policy engine  may include, for example, an intelligent statistical engine or other programmable application(s). In one embodiment, the policy engine  provides a configuration mechanism to allow a user to identify, specify, define or configure a caching policy. Policy engine , in some embodiments, also has access to memory to support data structures such as lookup tables or hash tables to enable user-selected caching policy decisions. In other embodiments, the policy engine  may comprise any logic, rules, functions or operations to determine and provide access, control and management of objects, data or content being cached by the appliance  in addition to access, control and management of security, network traffic, network access, compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.","The encryption engine  comprises any logic, business rules, functions or operations for handling the processing of any security related protocol, such as SSL or TLS, or any function related thereto. For example, the encryption engine  encrypts and decrypts network packets, or any portion thereof, communicated via the appliance . The encryption engine  may also setup or establish SSL or TLS connections on behalf of the client -, server -, or appliance . As such, the encryption engine  provides offloading and acceleration of SSL processing. In one embodiment, the encryption engine  uses a tunneling protocol to provide a virtual private network between a client -and a server -. In some embodiments, the encryption engine  is in communication with the Encryption processor . In other embodiments, the encryption engine  comprises executable instructions running on the Encryption processor .","The multi-protocol compression engine  comprises any logic, business rules, function or operations for compressing one or more protocols of a network packet, such as any of the protocols used by the network stack  of the device . In one embodiment, multi-protocol compression engine  compresses bi-directionally between clients -and servers -any TCP\/IP based protocol, including Messaging Application Programming Interface (MAPI) (email), File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), Common Internet File System (CIFS) protocol (file transfer), Independent Computing Architecture (ICA) protocol, Remote Desktop Protocol (RDP), Wireless Application Protocol (WAP), Mobile IP protocol, and Voice Over IP (VoIP) protocol. In other embodiments, multi-protocol compression engine  provides compression of Hypertext Markup Language (HTML) based protocols and in some embodiments, provides compression of any markup languages, such as the Extensible Markup Language (XML). In one embodiment, the multi-protocol compression engine  provides compression of any high-performance protocol, such as any protocol designed for appliance  to appliance  communications. In another embodiment, the multi-protocol compression engine  compresses any payload of or any communication using a modified transport control protocol, such as Transaction TCP (T\/TCP), TCP with selection acknowledgements (TCP-SACK), TCP with large windows (TCP-LW), a congestion prediction protocol such as the TCP-Vegas protocol, and a TCP spoofing protocol.","As such, the multi-protocol compression engine  accelerates performance for users accessing applications via desktop clients, e.g., Microsoft Outlook and non-Web thin clients, such as any client launched by popular enterprise applications like Oracle, SAP and Siebel, and even mobile clients, such as the Pocket PC. In some embodiments, the multi-protocol compression engine  by executing in the kernel mode  and integrating with packet processing engine  accessing the network stack  is able to compress any of the protocols carried by the TCP\/IP protocol, such as any application layer protocol.","High speed layer 2-7 integrated packet engine , also generally referred to as a packet processing engine or packet engine, is responsible for managing the kernel-level processing of packets received and transmitted by appliance  via network ports . The high speed layer 2-7 integrated packet engine  may comprise a buffer for queuing one or more network packets during processing, such as for receipt of a network packet or transmission of a network packet. Additionally, the high speed layer 2-7 integrated packet engine  is in communication with one or more network stacks  to send and receive network packets via network ports . The high speed layer 2-7 integrated packet engine  works in conjunction with encryption engine , cache manager , policy engine  and multi-protocol compression logic . In particular, encryption engine  is configured to perform SSL processing of packets, policy engine  is configured to perform functions related to traffic management such as request-level content switching and request-level cache redirection, and multi-protocol compression logic  is configured to perform functions related to compression and decompression of data.","The high speed layer 2-7 integrated packet engine  includes a packet processing timer . In one embodiment, the packet processing timer  provides one or more time intervals to trigger the processing of incoming, i.e., received, or outgoing, i.e., transmitted, network packets. In some embodiments, the high speed layer 2-7 integrated packet engine  processes network packets responsive to the timer . The packet processing timer  provides any type and form of signal to the packet engine  to notify, trigger, or communicate a time related event, interval or occurrence. In many embodiments, the packet processing timer  operates in the order of milliseconds, such as for example 100 ms, 50 ms or 25 ms. For example, in some embodiments, the packet processing timer  provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2-7 integrated packet engine  at a 10 ms time interval, while in other embodiments, at a 5 ms time interval, and still yet in further embodiments, as short as a 3, 2, or 1 ms time interval. The high speed layer 2-7 integrated packet engine  may be interfaced, integrated or in communication with the encryption engine , cache manager , policy engine  and multi-protocol compression engine  during operation. As such, any of the logic, functions, or operations of the encryption engine , cache manager , policy engine  and multi-protocol compression logic  may be performed responsive to the packet processing timer  and\/or the packet engine . Therefore, any of the logic, functions, or operations of the encryption engine , cache manager , policy engine  and multi-protocol compression logic  may be performed at the granularity of time intervals provided via the packet processing timer , for example, at a time interval of less than or equal to 10 ms. For example, in one embodiment, the cache manager  may perform invalidation of any cached objects responsive to the high speed layer 2-7 integrated packet engine  and\/or the packet processing timer . In another embodiment, the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer , such as at every 10 ms.","In contrast to kernel space , user space  is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space  directly and uses service calls in order to access kernel services. As shown in , user space  of appliance  includes a graphical user interface (GUI) , a command line interface (CLI) , shell services , health monitoring program , and daemon services . GUI  and CLI  provide a means by which a system administrator or other user can interact with and control the operation of appliance , such as via the operating system of the appliance . The GUI  or CLI  can comprise code running in user space  or kernel space . The GUI  may be any type and form of graphical user interface and may be presented via text, graphical or otherwise, by any type of program or application, such as a browser. The CLI  may be any type and form of command line or text-based interface, such as a command line provided by the operating system. For example, the CLI  may comprise a shell, which is a tool to enable users to interact with the operating system. In some embodiments, the CLI  may be provided via a bash, csh, tcsh, or ksh type shell. The shell services  comprises the programs, services, tasks, processes or executable instructions to support interaction with the appliance  or operating system by a user via the GUI  and\/or CLI .","Health monitoring program  is used to monitor, check, report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program  comprises one or more programs, services, tasks, processes or executable instructions to provide logic, rules, functions or operations for monitoring any activity of the appliance . In some embodiments, the health monitoring program  intercepts and inspects any network traffic passed via the appliance . In other embodiments, the health monitoring program  interfaces by any suitable means and\/or mechanisms with one or more of the following: the encryption engine , cache manager , policy engine , multi-protocol compression logic , packet engine , daemon services , and shell services . As such, the health monitoring program  may call any application programming interface (API) to determine a state, status, or health of any portion of the appliance . For example, the health monitoring program  may ping or send a status inquiry on a periodic basis to check if a program, process, service or task is active and currently running. In another example, the health monitoring program  may check any status, error or history logs provided by any program, process, service or task to determine any condition, status or error with any portion of the appliance .","Daemon services  are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments, a daemon service may forward the requests to other programs or processes, such as another daemon service  as appropriate. As known to those skilled in the art, a daemon service  may run unattended to perform continuous or periodic system wide functions, such as network control, or to perform any desired task. In some embodiments, one or more daemon services  run in the user space , while in other embodiments, one or more daemon services  run in the kernel space.","Referring now to , another embodiment of the appliance  is depicted. In brief overview, the appliance  provides one or more of the following services, functionality or operations: SSL VPN connectivity , switching\/load balancing , Domain Name Service resolution , acceleration  and an application firewall  for communications between one or more clients  and one or more servers . Each of the servers  may provide one or more network related services -(referred to as services ). For example, a server  may provide an http service . The appliance  comprises one or more virtual servers or virtual internet protocol servers, referred to as a vServer, VIP server, or just VIP -(also referred herein as vServer ). The vServer  receives, intercepts or otherwise processes communications between a client  and a server  in accordance with the configuration and operations of the appliance .","The vServer  may comprise software, hardware or any combination of software and hardware. The vServer  may comprise any type and form of program, service, task, process or executable instructions operating in user mode , kernel mode  or any combination thereof in the appliance . The vServer  includes any logic, functions, rules, or operations to perform any embodiments of the techniques described herein, such as SSL VPN , switching\/load balancing , Domain Name Service resolution , acceleration  and an application firewall . In some embodiments, the vServer  establishes a connection to a service  of a server . The service  may comprise any program, application, process, task or set of executable instructions capable of connecting to and communicating to the appliance , client  or vServer . For example, the service  may comprise a web server, http server, ftp, email or database server. In some embodiments, the service  is a daemon process or network driver for listening, receiving and\/or sending communications for an application, such as email, database or an enterprise application. In some embodiments, the service  may communicate on a specific IP address, or IP address and port.","In some embodiments, the vServer  applies one or more policies of the policy engine  to network communications between the client  and server . In one embodiment, the policies are associated with a vServer . In another embodiment, the policies are based on a user, or a group of users. In yet another embodiment, a policy is global and applies to one or more vServers -, and any user or group of users communicating via the appliance . In some embodiments, the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication, such as internet protocol address, port, protocol type, header or fields in a packet, or the context of the communication, such as user, group of the user, vServer , transport layer connection, and\/or identification or attributes of the client  or server .","In other embodiments, the appliance  communicates or interfaces with the policy engine  to determine authentication and\/or authorization of a remote user or a remote client  to access the computing environment , application, and\/or data file from a server . In another embodiment, the appliance  communicates or interfaces with the policy engine  to determine authentication and\/or authorization of a remote user or a remote client  to have the application delivery system  deliver one or more of the computing environment , application, and\/or data file. In yet another embodiment, the appliance  establishes a VPN or SSL VPN connection based on the policy engine's  authentication and\/or authorization of a remote user or a remote client  In one embodiment, the appliance  controls the flow of network traffic and communication sessions based on policies of the policy engine . For example, the appliance  may control the access to a computing environment , application or data file based on the policy engine .","In some embodiments, the vServer  establishes a transport layer connection, such as a TCP or UDP connection with a client  via the client agent . In one embodiment, the vServer  listens for and receives communications from the client . In other embodiments, the vServer  establishes a transport layer connection, such as a TCP or UDP connection with a client server . In one embodiment, the vServer  establishes the transport layer connection to an internet protocol address and port of a server  running on the server . In another embodiment, the vServer  associates a first transport layer connection to a client  with a second transport layer connection to the server . In some embodiments, a vServer  establishes a pool of transport layer connections to a server  and multiplexes client requests via the pooled transport layer connections.","In some embodiments, the appliance  provides a SSL VPN connection  between a client  and a server . For example, a client  on a first network  requests to establish a connection to a server  on a second network \u2032. In some embodiments, the second network \u2032 is not routable from the first network . In other embodiments, the client  is on a public network  and the server  is on a private network \u2032, such as a corporate network. In one embodiment, the client agent  intercepts communications of the client  on the first network , encrypts the communications, and transmits the communications via a first transport layer connection to the appliance . The appliance  associates the first transport layer connection on the first network  to a second transport layer connection to the server  on the second network . The appliance  receives the intercepted communication from the client agent , decrypts the communications, and transmits the communication to the server  on the second network  via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such, the appliance  provides an end-to-end secure transport layer connection for the client  between the two networks , \u2032.","In one embodiment, the appliance  hosts an intranet internet protocol or IntranetIP  address of the client  on the virtual private network . The client  has a local network identifier, such as an internet protocol (IP) address and\/or host name on the first network . When connected to the second network \u2032 via the appliance , the appliance  establishes, assigns or otherwise provides an IntranetIP address , which is a network identifier, such as IP address and\/or host name, for the client  on the second network \u2032. The appliance  listens for and receives on the second or private network \u2032 for any communications directed towards the client  using the client's established IntranetIP . In one embodiment, the appliance  acts as or on behalf of the client  on the second private network . For example, in another embodiment, a vServer  listens for and responds to communications to the IntranetIP  of the client . In some embodiments, if a computing device  on the second network \u2032 transmits a request, the appliance  processes the request as if it were the client . For example, the appliance  may respond to a ping to the client's IntranetIP . In another example, the appliance may establish a connection, such as a TCP or UDP connection, with computing device  on the second network  requesting a connection with the client's IntranetIP .","In some embodiments, the appliance  provides one or more of the following acceleration techniques  to communications between the client  and server : 1) compression; 2) decompression; 3) Transmission Control Protocol pooling; 4) Transmission Control Protocol multiplexing; 5) Transmission Control Protocol buffering; and 6) caching. In one embodiment, the appliance  relieves servers  of much of the processing load caused by repeatedly opening and closing transport layers connections to clients  by opening one or more transport layer connections with each server  and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as \u201cconnection pooling\u201d.","In some embodiments, in order to seamlessly splice communications from a client  to a server  via a pooled transport layer connection, the appliance  translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as \u201cconnection multiplexing\u201d. In some embodiments, no application layer protocol interaction is required. For example, in the case of an in-bound packet (that is, a packet received from a client ), the source network address of the packet is changed to that of an output port of appliance , and the destination network address is changed to that of the intended server. In the case of an outbound packet (that is, one received from a server ), the source network address is changed from that of the server  to that of an output port of appliance  and the destination address is changed from that of appliance  to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement numbers expected by the client  on the appliance's  transport layer connection to the client . In some embodiments, the packet checksum of the transport layer protocol is recalculated to account for these translations.","In another embodiment, the appliance  provides switching or load-balancing functionality  for communications between the client  and server . In some embodiments, the appliance  distributes traffic and directs client requests to a server  based on layer 4 or application-layer request data. In one embodiment, although the network layer or layer 2 of the network packet identifies a destination server , the appliance  determines the server  to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment, the health monitoring programs  of the appliance  monitor the health of servers to determine the server  for which to distribute a client's request. In some embodiments, if the appliance  detects a server  is not available or has a load over a predetermined threshold, the appliance  can direct or distribute client requests to another server .","In some embodiments, the appliance  acts as a Domain Name Service (DNS) resolver or otherwise provides resolution of a DNS request from clients . In some embodiments, the appliance intercepts a DNS request transmitted by the client . In one embodiment, the appliance  responds to a client's DNS request with an IP address of or hosted by the appliance . In this embodiment, the client  transmits network communication for the domain name to the appliance . In another embodiment, the appliance  responds to a client's DNS request with an IP address of or hosted by a second appliance \u2032. In some embodiments, the appliance  responds to a client's DNS request with an IP address of a server  determined by the appliance .","In yet another embodiment, the appliance  provides application firewall functionality  for communications between the client  and server . In one embodiment, the policy engine  provides rules for detecting and blocking illegitimate requests. In some embodiments, the application firewall  protects against denial of service (DoS) attacks. In other embodiments, the appliance inspects the content of intercepted requests to identify and block application-based attacks. In some embodiments, the rules\/policy engine  comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities, such as one or more of the following: 1) buffer overflow, 2) CGI-BIN parameter manipulation, 3) form\/hidden field manipulation, 4) forceful browsing, 5) cookie or session poisoning, 6) broken access control list (ACLs) or weak passwords, 7) cross-site scripting (XSS), 8) command injection, 9) SQL injection, 10) error triggering sensitive information leak, 11) insecure use of cryptography, 12) server misconfiguration, 13) back doors and debug options, 14) website defacement, 15) platform or operating systems vulnerabilities, and 16) zero-day exploits. In an embodiment, the application firewall  provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following: 1) required fields are returned, 2) no added field allowed, 3) read-only and hidden field enforcement, 4) drop-down list and radio button field conformance, and 5) form-field max-length enforcement. In some embodiments, the application firewall  ensures cookies are not modified. In other embodiments, the application firewall  protects against forceful browsing by enforcing legal URLs.","In still yet other embodiments, the application firewall  protects any confidential information contained in the network communication. The application firewall  may inspect or analyze any network communication in accordance with the rules or polices of the engine  to identify any confidential information in any field of the network packet. In some embodiments, the application firewall  identifies in the network communication one or more occurrences of a credit card number, password, social security number, name, patient code, contact information, and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences, in one embodiment, the application firewall  may take a policy action on the network communication, such as prevent transmission of the network communication. In another embodiment, the application firewall  may rewrite, remove or otherwise mask such identified occurrence or confidential information.","Still referring to , the appliance  may include a performance monitoring agent  as discussed above in conjunction with . In one embodiment, the appliance  receives the monitoring agent  from the monitoring service  or monitoring server  as depicted in . In some embodiments, the appliance  stores the monitoring agent  in storage, such as disk, for delivery to any client or server in communication with the appliance . For example, in one embodiment, the appliance  transmits the monitoring agent  to a client upon receiving a request to establish a transport layer connection. In other embodiments, the appliance  transmits the monitoring agent  upon establishing the transport layer connection with the client . In another embodiment, the appliance  transmits the monitoring agent  to the client upon intercepting or detecting a request for a web page. In yet another embodiment, the appliance  transmits the monitoring agent  to a client or a server in response to a request from the monitoring server . In one embodiment, the appliance  transmits the monitoring agent  to a second appliance \u2032 or appliance .","In other embodiments, the appliance  executes the monitoring agent . In one embodiment, the monitoring agent  measures and monitors the performance of any application, program, process, service, task or thread executing on the appliance . For example, the monitoring agent  may monitor and measure performance and operation of vServers A-N. In another embodiment, the monitoring agent  measures and monitors the performance of any transport layer connections of the appliance . In some embodiments, the monitoring agent  measures and monitors the performance of any user sessions traversing the appliance . In one embodiment, the monitoring agent  measures and monitors the performance of any virtual private network connections and\/or sessions traversing the appliance , such an SSL VPN session. In still further embodiments, the monitoring agent  measures and monitors the memory, CPU and disk usage and performance of the appliance . In yet another embodiment, the monitoring agent  measures and monitors the performance of any acceleration technique  performed by the appliance , such as SSL offloading, connection pooling and multiplexing, caching, and compression. In some embodiments, the monitoring agent  measures and monitors the performance of any load balancing and\/or content switching  performed by the appliance . In other embodiments, the monitoring agent  measures and monitors the performance of application firewall  protection and processing performed by the appliance .","C. Client Agent","Referring now to , an embodiment of the client agent  is depicted. The client  includes a client agent  for establishing and exchanging communications with the appliance  and\/or server  via a network . In brief overview, the client  operates on computing device  having an operating system with a kernel mode  and a user mode , and a network stack  with one or more layers -. The client  may have installed and\/or execute one or more applications. In some embodiments, one or more applications may communicate via the network stack  to a network . One of the applications, such as a web browser, may also include a first program . For example, the first program  may be used in some embodiments to install and\/or execute the client agent , or any portion thereof. The client agent  includes an interception mechanism, or interceptor , for intercepting network communications from the network stack  from the one or more applications.","The network stack  of the client  may comprise any type and form of software, or hardware, or any combinations thereof, for providing connectivity to and communications with a network. In one embodiment, the network stack  comprises a software implementation for a network protocol suite. The network stack  may comprise one or more network layers, such as any networks layers of the Open Systems Interconnection (OSI) communications model as those skilled in the art recognize and appreciate. As such, the network stack  may comprise any type and form of protocols for any of the following layers of the OSI model: 1) physical link layer, 2) data link layer, 3) network layer, 4) transport layer, 5) session layer, 6) presentation layer, and 7) application layer. In one embodiment, the network stack  may comprise a transport control protocol (TCP) over the network layer protocol of the internet protocol (IP), generally referred to as TCP\/IP. In some embodiments, the TCP\/IP protocol may be carried over the Ethernet protocol, which may comprise any of the family of IEEE wide-area-network (WAN) or local-area-network (LAN) protocols, such as those protocols covered by the IEEE 802.3. In some embodiments, the network stack  comprises any type and form of a wireless protocol, such as IEEE 802.11 and\/or mobile internet protocol.","In view of a TCP\/IP based network, any TCP\/IP based protocol may be used, including Messaging Application Programming Interface (MAPI) (email), File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), Common Internet File System (CIFS) protocol (file transfer), Independent Computing Architecture (ICA) protocol, Remote Desktop Protocol (RDP), Wireless Application Protocol (WAP), Mobile IP protocol, and Voice Over IP (VoIP) protocol. In another embodiment, the network stack  comprises any type and form of transport control protocol, such as a modified transport control protocol, for example a Transaction TCP (T\/TCP), TCP with selection acknowledgements (TCP-SACK), TCP with large windows (TCP-LW), a congestion prediction protocol such as the TCP-Vegas protocol, and a TCP spoofing protocol. In other embodiments, any type and form of user datagram protocol (UDP), such as UDP over IP, may be used by the network stack , such as for voice communications or real-time data communications.","Furthermore, the network stack  may include one or more network drivers supporting the one or more layers, such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device  or as part of any network interface cards or other network access components of the computing device . In some embodiments, any of the network drivers of the network stack  may be customized, modified or adapted to provide a custom or modified portion of the network stack  in support of any of the techniques described herein. In other embodiments, the acceleration program  is designed and constructed to operate with or work in conjunction with the network stack  installed or otherwise provided by the operating system of the client .","The network stack  comprises any type and form of interfaces for receiving, obtaining, providing or otherwise accessing any information and data related to network communications of the client . In one embodiment, an interface to the network stack  comprises an application programming interface (API). The interface may also comprise any function call, hooking or filtering mechanism, event or call back mechanism, or any type of interfacing technique. The network stack  via the interface may receive or provide any type and form of data structure, such as an object, related to functionality or operation of the network stack . For example, the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments, the data structure comprises a portion of the network packet processed at a protocol layer of the network stack , such as a network packet of the transport layer. In some embodiments, the data structure  comprises a kernel-level data structure, while in other embodiments, the data structure  comprises a user-mode data structure. A kernel-level data structure may comprise a data structure obtained or related to a portion of the network stack  operating in kernel-mode , or a network driver or other software running in kernel-mode , or any data structure obtained or received by a service, process, task, thread or other executable instructions running or operating in kernel-mode of the operating system.","Additionally, some portions of the network stack  may execute or operate in kernel-mode , for example, the data link or network layer, while other portions execute or operate in user-mode , such as an application layer of the network stack . For example, a first portion of the network stack may provide user-mode access to the network stack  to an application while a second portion of the network stack  provides access to a network. In some embodiments, a first portion of the network stack may comprise one or more upper layers of the network stack , such as any of layers 5-7. In other embodiments, a second portion of the network stack  comprises one or more lower layers, such as any of layers 1-4. Each of the first portion and second portion of the network stack  may comprise any portion of the network stack , at any one or more network layers, in user-mode , kernel-mode, , or combinations thereof, or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user-mode  and kernel-mode .","The interceptor  may comprise software, hardware, or any combination of software and hardware. In one embodiment, the interceptor  intercept a network communication at any point in the network stack , and redirects or transmits the network communication to a destination desired, managed or controlled by the interceptor  or client agent . For example, the interceptor  may intercept a network communication of a network stack  of a first network and transmit the network communication to the appliance  for transmission on a second network . In some embodiments, the interceptor  comprises any type interceptor  comprises a driver, such as a network driver constructed and designed to interface and work with the network stack . In some embodiments, the client agent  and\/or interceptor  operates at one or more layers of the network stack , such as at the transport layer. In one embodiment, the interceptor  comprises a filter driver, hooking mechanism, or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack, such as via the transport driver interface (TDI). In some embodiments, the interceptor  interfaces to a first protocol layer, such as the transport layer and another protocol layer, such as any layer above the transport protocol layer, for example, an application protocol layer. In one embodiment, the interceptor  may comprise a driver complying with the Network Driver Interface Specification (NDIS), or a NDIS driver. In another embodiment, the interceptor  may comprise a mini-filter or a mini-port driver. In one embodiment, the interceptor , or portion thereof, operates in kernel-mode . In another embodiment, the interceptor , or portion thereof, operates in user-mode . In some embodiments, a portion of the interceptor  operates in kernel-mode  while another portion of the interceptor  operates in user-mode . In other embodiments, the client agent  operates in user-mode  but interfaces via the interceptor  to a kernel-mode driver, process, service, task or portion of the operating system, such as to obtain a kernel-level data structure . In further embodiments, the interceptor  is a user-mode application or program, such as application.","In one embodiment, the interceptor  intercepts any transport layer connection requests. In these embodiments, the interceptor  execute transport layer application programming interface (API) calls to set the destination information, such as destination IP address and\/or port to a desired location for the location. In this manner, the interceptor  intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor  or client agent . In one embodiment, the interceptor  sets the destination information for the connection to a local IP address and port of the client  on which the client agent  is listening. For example, the client agent  may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments, the client agent  then communicates the redirected transport layer communication to the appliance .","In some embodiments, the interceptor  intercepts a Domain Name Service (DNS) request. In one embodiment, the client agent  and\/or interceptor  resolves the DNS request. In another embodiment, the interceptor transmits the intercepted DNS request to the appliance  for DNS resolution. In one embodiment, the appliance  resolves the DNS request and communicates the DNS response to the client agent . In some embodiments, the appliance  resolves the DNS request via another appliance \u2032 or a DNS server .","In yet another embodiment, the client agent  may comprise two agents  and \u2032. In one embodiment, a first agent  may comprise an interceptor  operating at the network layer of the network stack . In some embodiments, the first agent  intercepts network layer requests such as Internet Control Message Protocol (ICMP) requests (e.g., ping and traceroute). In other embodiments, the second agent \u2032 may operate at the transport layer and intercept transport layer communications. In some embodiments, the first agent  intercepts communications at one layer of the network stack  and interfaces with or communicates the intercepted communication to the second agent \u2032.","The client agent  and\/or interceptor  may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example, in one embodiment, the interceptor  operates or interfaces with the transport layer of the network stack  transparently to any protocol layer below the transport layer, such as the network layer, and any protocol layer above the transport layer, such as the session, presentation or application layer protocols. This allows the other protocol layers of the network stack  to operate as desired and without modification for using the interceptor . As such, the client agent  and\/or interceptor  can interface with the transport layer to secure, optimize, accelerate, route or load-balance any communications provided via any protocol carried by the transport layer, such as any application layer protocol over TCP\/IP.","Furthermore, the client agent  and\/or interceptor may operate at or interface with the network stack  in a manner transparent to any application, a user of the client , and any other computing device, such as a server, in communications with the client . The client agent  and\/or interceptor  may be installed and\/or executed on the client  in a manner without modification of an application. In some embodiments, the user of the client  or a computing device in communications with the client  are not aware of the existence, execution or operation of the client agent  and\/or interceptor . As such, in some embodiments, the client agent  and\/or interceptor  is installed, executed, and\/or operated transparently to an application, user of the client , another computing device, such as a server, or any of the protocol layers above and\/or below the protocol layer interfaced to by the interceptor .","The client agent  includes an acceleration program , a streaming client , a collection agent , and\/or monitoring agent . In one embodiment, the client agent  comprises an Independent Computing Architecture (ICA) client, or any portion thereof, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla., and is also referred to as an ICA client. In some embodiments, the client  comprises an application streaming client  for streaming an application from a server  to a client . In some embodiments, the client agent  comprises an acceleration program  for accelerating communications between client  and server . In another embodiment, the client agent  includes a collection agent  for performing end-point detection\/scanning and collecting end-point information for the appliance  and\/or server .","In some embodiments, the acceleration program  comprises a client-side acceleration program for performing one or more acceleration techniques to accelerate, enhance or otherwise improve a client's communications with and\/or access to a server , such as accessing an application provided by a server . The logic, functions, and\/or operations of the executable instructions of the acceleration program  may perform one or more of the following acceleration techniques: 1) multi-protocol compression, 2) transport control protocol pooling, 3) transport control protocol multiplexing, 4) transport control protocol buffering, and 5) caching via a cache manager. Additionally, the acceleration program  may perform encryption and\/or decryption of any communications received and\/or transmitted by the client . In some embodiments, the acceleration program  performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally, the acceleration program  can perform compression on any of the protocols, or multiple-protocols, carried as a payload of a network packet of the transport layer protocol.","The streaming client  comprises an application, program, process, service, task or executable instructions for receiving and executing a streamed application from a server . A server  may stream one or more application data files to the streaming client  for playing, executing or otherwise causing to be executed the application on the client . In some embodiments, the server  transmits a set of compressed or packaged application data files to the streaming client . In some embodiments, the plurality of application files are compressed and stored on a file server within an archive file such as a CAB, ZIP, SIT, TAR, JAR or other archive. In one embodiment, the server  decompresses, unpackages or unarchives the application files and transmits the files to the client . In another embodiment, the client  decompresses, unpackages or unarchives the application files. The streaming client  dynamically installs the application, or portion thereof, and executes the application. In one embodiment, the streaming client  may be an executable program. In some embodiments, the streaming client  may be able to launch another executable program.","The collection agent  comprises an application, program, process, service, task or executable instructions for identifying, obtaining and\/or collecting information about the client . In some embodiments, the appliance  transmits the collection agent  to the client  or client agent . The collection agent  may be configured according to one or more policies of the policy engine  of the appliance. In other embodiments, the collection agent  transmits collected information on the client  to the appliance . In one embodiment, the policy engine  of the appliance  uses the collected information to determine and provide access, authentication and authorization control of the client's connection to a network .","In one embodiment, the collection agent  comprises an end-point detection and scanning mechanism, which identifies and determines one or more attributes or characteristics of the client. For example, the collection agent  may identify and determine any one or more of the following client-side attributes: 1) the operating system an\/or a version of an operating system, 2) a service pack of the operating system, 3) a running service, 4) a running process, and 5) a file. The collection agent  may also identify and determine the presence or versions of any one or more of the following on the client: 1) antivirus software, 2) personal firewall software, 3) anti-spam software, and 4) internet security software. The policy engine  may have one or more policies based on any one or more of the attributes or characteristics of the client or client-side attributes.","In some embodiments, the client agent  includes a monitoring agent  as discussed in conjunction with . The monitoring agent  may be any type and form of script, such as Visual Basic or Java script. In one embodiment, the monitoring agent  monitors and measures performance of any portion of the client agent . For example, in some embodiments, the monitoring agent  monitors and measures performance of the acceleration program . In another embodiment, the monitoring agent  monitors and measures performance of the streaming client . In other embodiments, the monitoring agent  monitors and measures performance of the collection agent . In still another embodiment, the monitoring agent  monitors and measures performance of the interceptor . In some embodiments, the monitoring agent  monitors and measures any resource of the client , such as memory, CPU and disk.","The monitoring agent  may monitor and measure performance of any application of the client. In one embodiment, the monitoring agent  monitors and measures performance of a browser on the client . In some embodiments, the monitoring agent  monitors and measures performance of any application delivered via the client agent . In other embodiments, the monitoring agent  measures and monitors end user response times for an application, such as web-based or HTTP response times. The monitoring agent  may monitor and measure performance of an ICA or RDP client. In another embodiment, the monitoring agent  measures and monitors metrics for a user session or application session. In some embodiments, monitoring agent  measures and monitors an ICA or RDP session. In one embodiment, the monitoring agent  measures and monitors the performance of the appliance  in accelerating delivery of an application and\/or data to the client .","In some embodiments and still referring to , a first program  may be used to install and\/or execute the client agent , or portion thereof, such as the interceptor , automatically, silently, transparently, or otherwise. In one embodiment, the first program  comprises a plugin component, such an ActiveX control or Java control or script that is loaded into and executed by an application. For example, the first program comprises an ActiveX control loaded and run by a web browser application, such as in the memory space or context of the application. In another embodiment, the first program  comprises a set of executable instructions loaded into and run by the application, such as a browser. In one embodiment, the first program  comprises a designed and constructed program to install the client agent . In some embodiments, the first program  obtains, downloads, or receives the client agent  via the network from another computing device. In another embodiment, the first program  is an installer program or a plug and play manager for installing programs, such as network drivers, on the operating system of the client .","D. Systems and Methods for Providing Virtualized Application Delivery Controller","Referring now to , a block diagram depicts one embodiment of a virtualization environment . In brief overview, a computing device  includes a hypervisor layer, a virtualization layer, and a hardware layer. The hypervisor layer includes a hypervisor  (also referred to as a virtualization manager) that allocates and manages access to a number of physical resources in the hardware layer (e.g., the processor(s) , and disk(s) ) by at least one virtual machine executing in the virtualization layer. The virtualization layer includes at least one operating system  and a plurality of virtual resources allocated to the at least one operating system . Virtual resources may include, without limitation, a plurality of virtual processors , , (generally ), and virtual disks , , (generally ), as well as virtual resources such as virtual memory and virtual network interfaces. The plurality of virtual resources and the operating system  may be referred to as a virtual machine . A virtual machine  may include a control operating system  in communication with the hypervisor  and used to execute applications for managing and configuring other virtual machines on the computing device .","In greater detail, a hypervisor  may provide virtual resources to an operating system in any manner which simulates the operating system having access to a physical device. A hypervisor  may provide virtual resources to any number of guest operating systems , (generally ). In some embodiments, a computing device  executes one or more types of hypervisors. In these embodiments, hypervisors may be used to emulate virtual hardware, partition physical hardware, virtualize physical hardware, and execute virtual machines that provide access to computing environments. Hypervisors may include those manufactured by VMWare, Inc., of Palo Alto, Calif.; the XEN hypervisor, an open source product whose development is overseen by the open source Xen.org community; HyperV, VirtualServer or virtual PC hypervisors provided by Microsoft, or others. In some embodiments, a computing device  executing a hypervisor that creates a virtual machine platform on which guest operating systems may execute is referred to as a host server. In one of these embodiments, for example, the computing device  is a XEN SERVER provided by Citrix Systems, Inc., of Fort Lauderdale, Fla.","In some embodiments, a hypervisor  executes within an operating system executing on a computing device. In one of these embodiments, a computing device executing an operating system and a hypervisor  may be said to have a host operating system (the operating system executing on the computing device), and a guest operating system (an operating system executing within a computing resource partition provided by the hypervisor ). In other embodiments, a hypervisor  interacts directly with hardware on a computing device, instead of executing on a host operating system. In one of these embodiments, the hypervisor  may be said to be executing on \u201cbare metal,\u201d referring to the hardware comprising the computing device.","In some embodiments, a hypervisor  may create a virtual machine -(generally ) in which an operating system  executes. In one of these embodiments, for example, the hypervisor  loads a virtual machine image to create a virtual machine . In another of these embodiments, the hypervisor  executes an operating system  within the virtual machine . In still another of these embodiments, the virtual machine  executes an operating system .","In some embodiments, the hypervisor  controls processor scheduling and memory partitioning for a virtual machine  executing on the computing device . In one of these embodiments, the hypervisor  controls the execution of at least one virtual machine . In another of these embodiments, the hypervisor  presents at least one virtual machine  with an abstraction of at least one hardware resource provided by the computing device . In other embodiments, the hypervisor  controls whether and how physical processor capabilities are presented to the virtual machine .","A control operating system  may execute at least one application for managing and configuring the guest operating systems. In one embodiment, the control operating system  may execute an administrative application, such as an application including a user interface providing administrators with access to functionality for managing the execution of a virtual machine, including functionality for executing a virtual machine, terminating an execution of a virtual machine, or identifying a type of physical resource for allocation to the virtual machine. In another embodiment, the hypervisor  executes the control operating system  within a virtual machine  created by the hypervisor . In still another embodiment, the control operating system  executes in a virtual machine  that is authorized to directly access physical resources on the computing device . In some embodiments, a control operating system on a computing device may exchange data with a control operating system on a computing device , via communications between a hypervisor and a hypervisor . In this way, one or more computing devices  may exchange data with one or more of the other computing devices  regarding processors and other physical resources available in a pool of resources. In one of these embodiments, this functionality allows a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In another of these embodiments, multiple hypervisors manage one or more of the guest operating systems executed on one of the computing devices .","In one embodiment, the control operating system  executes in a virtual machine  that is authorized to interact with at least one guest operating system . In another embodiment, a guest operating system  communicates with the control operating system  via the hypervisor  in order to request access to a disk or a network. In still another embodiment, the guest operating system  and the control operating system  may communicate via a communication channel established by the hypervisor , such as, for example, via a plurality of shared memory pages made available by the hypervisor .","In some embodiments, the control operating system  includes a network back-end driver for communicating directly with networking hardware provided by the computing device . In one of these embodiments, the network back-end driver processes at least one virtual machine request from at least one guest operating system . In other embodiments, the control operating system  includes a block back-end driver for communicating with a storage element on the computing device . In one of these embodiments, the block back-end driver reads and writes data from the storage element based upon at least one request received from a guest operating system .","In one embodiment, the control operating system  includes a tools stack . In another embodiment, a tools stack  provides functionality for interacting with the hypervisor , communicating with other control operating systems  (for example, on a second computing device ), or managing virtual machines , on the computing device . In another embodiment, the tools stack  includes customized applications for providing improved management functionality to an administrator of a virtual machine farm. In some embodiments, at least one of the tools stack  and the control operating system  include a management API that provides an interface for remotely configuring and controlling virtual machines  running on a computing device . In other embodiments, the control operating system  communicates with the hypervisor  through the tools stack .","In one embodiment, the hypervisor  executes a guest operating system  within a virtual machine  created by the hypervisor . In another embodiment, the guest operating system  provides a user of the computing device  with access to resources within a computing environment. In still another embodiment, a resource includes a program, an application, a document, a file, a plurality of applications, a plurality of files, an executable program file, a desktop environment, a computing environment, or other resource made available to a user of the computing device . In yet another embodiment, the resource may be delivered to the computing device  via a plurality of access methods including, but not limited to, conventional installation directly on the computing device , delivery to the computing device  via a method for application streaming, delivery to the computing device  of output data generated by an execution of the resource on a second computing device \u2032 and communicated to the computing device  via a presentation layer protocol, delivery to the computing device  of output data generated by an execution of the resource via a virtual machine executing on a second computing device \u2032, or execution from a removable storage device connected to the computing device , such as a USB device, or via a virtual machine executing on the computing device  and generating output data. In some embodiments, the computing device  transmits output data generated by the execution of the resource to another computing device \u2032.","In one embodiment, the guest operating system , in conjunction with the virtual machine on which it executes, forms a fully-virtualized virtual machine which is not aware that it is a virtual machine; such a machine may be referred to as a \u201cDomain U HVM (Hardware Virtual Machine) virtual machine\u201d. In another embodiment, a fully-virtualized machine includes software emulating a Basic Input\/Output System (BIOS) in order to execute an operating system within the fully-virtualized machine. In still another embodiment, a fully-virtualized machine may include a driver that provides functionality by communicating with the hypervisor . In such an embodiment, the driver may be aware that it executes within a virtualized environment. In another embodiment, the guest operating system , in conjunction with the virtual machine on which it executes, forms a paravirtualized virtual machine, which is aware that it is a virtual machine; such a machine may be referred to as a \u201cDomain U PV virtual machine\u201d. In another embodiment, a paravirtualized machine includes additional drivers that a fully-virtualized machine does not include. In still another embodiment, the paravirtualized machine includes the network back-end driver and the block back-end driver included in a control operating system , as described above.","Referring now to , a block diagram depicts one embodiment of a plurality of networked computing devices in a system in which at least one physical host executes a virtual machine. In brief overview, the system includes a management component  and a hypervisor . The system includes a plurality of computing devices , a plurality of virtual machines , a plurality of hypervisors , a plurality of management components referred to variously as tools stacks  or management components , and a physical resource , . The plurality of physical machines  may each be provided as computing devices , described above in connection with .","In greater detail, a physical disk  is provided by a computing device  and stores at least a portion of a virtual disk . In some embodiments, a virtual disk  is associated with a plurality of physical disks . In one of these embodiments, one or more computing devices  may exchange data with one or more of the other computing devices  regarding processors and other physical resources available in a pool of resources, allowing a hypervisor to manage a pool of resources distributed across a plurality of physical computing devices. In some embodiments, a computing device  on which a virtual machine  executes is referred to as a physical host  or as a host machine .","The hypervisor executes on a processor on the computing device . The hypervisor allocates, to a virtual disk, an amount of access to the physical disk. In one embodiment, the hypervisor  allocates an amount of space on the physical disk. In another embodiment, the hypervisor  allocates a plurality of pages on the physical disk. In some embodiments, the hypervisor provisions the virtual disk  as part of a process of initializing and executing a virtual machine .","In one embodiment, the management component is referred to as a pool management component . In another embodiment, a management operating system , which may be referred to as a control operating system , includes the management component. In some embodiments, the management component is referred to as a tools stack. In one of these embodiments, the management component is the tools stack  described above in connection with . In other embodiments, the management component  provides a user interface for receiving, from a user such as an administrator, an identification of a virtual machine  to provision and\/or execute. In still other embodiments, the management component  provides a user interface for receiving, from a user such as an administrator, the request for migration of a virtual machine from one physical machine  to another. In further embodiments, the management component identifies a computing device on which to execute a requested virtual machine and instructs the hypervisor on the identified computing device to execute the identified virtual machine; such a management component may be referred to as a pool management component.","Referring now to , embodiments of a virtual application delivery controller or virtual appliance  are depicted. In brief overview, any of the functionality and\/or embodiments of the appliance  (e.g., an application delivery controller) described above in connection with  may be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the application delivery controller being deployed in the form of an appliance , such functionality may be deployed in a virtualized environment  on any computing device , such as a client , server  or appliance .","Referring now to , a diagram of an embodiment of a virtual appliance  operating on a hypervisor  of a server  is depicted. As with the appliance  of , the virtual appliance  may provide functionality for availability, performance, offload and security. For availability, the virtual appliance may perform load balancing between layers 4 and 7 of the network and may also perform intelligent service health monitoring. For performance increases via network traffic acceleration, the virtual appliance may perform caching and compression. To offload processing of any servers, the virtual appliance may perform connection multiplexing and pooling and\/or SSL processing. For security, the virtual appliance may perform any of the application firewall functionality and SSL VPN function of appliance .","Any of the modules of the appliance  as described in connection with  may be packaged, combined, designed or constructed in a form of the virtualized appliance delivery controller  deployable as one or more software modules or components executable in a virtualized environment  or non-virtualized environment on any server, such as an off the shelf server. For example, the virtual appliance may be provided in the form of an installation package to install on a computing device. With reference to , any of the cache manager , policy engine , compression , encryption engine , packet engine , GUI , CLI , shell services  and health monitoring programs  may be designed and constructed as a software component or module to run on any operating system of a computing device and\/or of a virtualized environment . Instead of using the encryption processor , processor , memory  and network stack  of the appliance , the virtualized appliance  may use any of these resources as provided by the virtualized environment  or as otherwise available on the server .","Still referring to , and in brief overview, any one or more vServers A-N may be in operation or executed in a virtualized environment  of any type of computing device , such as any server . Any of the modules or functionality of the appliance  described in connection with  may be designed and constructed to operate in either a virtualized or non-virtualized environment of a server. Any of the vServer , SSL VPN , Intranet UP , Switching , DNS , acceleration , App FW  and monitoring agent may be packaged, combined, designed or constructed in a form of application delivery controller  deployable as one or more software modules or components executable on a device and\/or virtualized environment .","In some embodiments, a server may execute multiple virtual machines -in the virtualization environment with each virtual machine running the same or different embodiments of the virtual application delivery controller . In some embodiments, the server may execute one or more virtual appliances  on one or more virtual machines on a core of a multi-core processing system. In some embodiments, the server may execute one or more virtual appliances  on one or more virtual machines on each processor of a multiple processor device.","E. Systems and Methods for Providing a Multi-Core Architecture","In accordance with Moore's Law, the number of transistors that may be placed on an integrated circuit may double approximately every two years. However, CPU speed increases may reach plateaus, for example CPU speed has been around 3.5-4 GHz range since 2005. In some cases, CPU manufacturers may not rely on CPU speed increases to gain additional performance. Some CPU manufacturers may add additional cores to their processors to provide additional performance. Products, such as those of software and networking vendors, that rely on CPUs for performance gains may improve their performance by leveraging these multi-core CPUs. The software designed and constructed for a single CPU may be redesigned and\/or rewritten to take advantage of a multi-threaded, parallel architecture or otherwise a multi-core architecture.","A multi-core architecture of the appliance , referred to as nCore or multi-core technology, allows the appliance in some embodiments to break the single core performance barrier and to leverage the power of multi-core CPUs. In the previous architecture described in connection with , a single network or packet engine is run. The multiple cores of the nCore technology and architecture allow multiple packet engines to run concurrently and\/or in parallel. With a packet engine running on each core, the appliance architecture leverages the processing capacity of additional cores. In some embodiments, this provides up to a 7\u00d7 increase in performance and scalability.","Illustrated in  are some embodiments of work, task, load or network traffic distribution across one or more processor cores according to a type of parallelism or parallel computing scheme, such as functional parallelism, data parallelism or flow-based data parallelism. In brief overview,  illustrates embodiments of a multi-core system such as an appliance \u2032 with n-cores, a total of cores numbers 1 through N. In one embodiment, work, load or network traffic can be distributed among a first core A, a second core B, a third core C, a fourth core D, a fifth core E, a sixth core F, a seventh core G, and so on such that distribution is across all or two or more of the n cores N (hereinafter referred to collectively as cores .) There may be multiple VIPs  each running on a respective core of the plurality of cores. There may be multiple packet engines  each running on a respective core of the plurality of cores. Any of the approaches used may lead to different, varying or similar work load or performance level  across any of the cores. For a functional parallelism approach, each core may run a different function of the functionalities provided by the packet engine, a VIP  or appliance . In a data parallelism approach, data may be paralleled or distributed across the cores based on the Network Interface Card (NIC) or VIP  receiving the data. In another data parallelism approach, processing may be distributed across the cores by distributing data flows to each core.","In further detail to , in some embodiments, load, work or network traffic can be distributed among cores  according to functional parallelism . Functional parallelism may be based on each core performing one or more respective functions. In some embodiments, a first core may perform a first function while a second core performs a second function. In functional parallelism approach, the functions to be performed by the multi-core system are divided and distributed to each core according to functionality. In some embodiments, functional parallelism may be referred to as task parallelism and may be achieved when each processor or core executes a different process or function on the same or different data. The core or processor may execute the same or different code. In some cases, different execution threads or code may communicate with one another as they work. Communication may take place to pass data from one thread to the next as part of a workflow.","In some embodiments, distributing work across the cores  according to functional parallelism , can comprise distributing network traffic according to a particular function such as network input\/output management (NW I\/O) A, secure sockets layer (SSL) encryption and decryption B and transmission control protocol (TCP) functions C. This may lead to a work, performance or computing load  based on a volume or level of functionality being used. In some embodiments, distributing work across the cores  according to data parallelism , can comprise distributing an amount of work  based on distributing data associated with a particular hardware or software component. In some embodiments, distributing work across the cores  according to flow-based data parallelism , can comprise distributing data based on a context or flow such that the amount of work A-N on each core may be similar, substantially equal or relatively evenly distributed.","In the case of the functional parallelism approach, each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine or VIP of the appliance. For example, core  may perform network I\/O processing for the appliance \u2032 while core  performs TCP connection management for the appliance. Likewise, core  may perform SSL offloading while core  may perform layer 7 or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and\/or described in conjunction with . In this the approach, the work across the cores may be divided by function in either a coarse-grained or fine-grained manner. In some cases, as illustrated in , division by function may lead to different cores running at different levels of performance or load .","In the case of the functional parallelism approach, each core may be configured to run one or more functionalities of the plurality of functionalities provided by the packet engine of the appliance. For example, core  may perform network I\/O processing for the appliance \u2032 while core  performs TCP connection management for the appliance. Likewise, core  may perform SSL offloading while core  may perform layer 7 or application layer processing and traffic management. Each of the cores may perform the same function or different functions. Each of the cores may perform more than one function. Any of the cores may run any of the functionality or portions thereof identified and\/or described in conjunction with . In this the approach, the work across the cores may be divided by function in either a coarse-grained or fine-grained manner. In some cases, as illustrated in  division by function may lead to different cores running at different levels of load or performance.","The functionality or tasks may be distributed in any arrangement and scheme. For example,  illustrates a first core, Core  A, processing applications and processes associated with network I\/O functionality A. Network traffic associated with network I\/O, in some embodiments, can be associated with a particular port number. Thus, outgoing and incoming packets having a port destination associated with NW I\/O A will be directed towards Core  A which is dedicated to handling all network traffic associated with the NW I\/O port. Similarly, Core  B is dedicated to handling functionality associated with SSL processing and Core  D may be dedicated handling all TCP level processing and functionality.","While  illustrates functions such as network I\/O, SSL and TCP, other functions can be assigned to cores. These other functions can include any one or more of the functions or operations described herein. For example, any of the functions described in conjunction with  may be distributed across the cores on a functionality basis. In some cases, a first VIP A may run on a first core while a second VIP B with a different configuration may run on a second core. In some embodiments, each core  can handle a particular functionality such that each core  can handle the processing associated with that particular function. For example, Core  B may handle SSL offloading while Core  D may handle application layer processing and traffic management.","In other embodiments, work, load or network traffic may be distributed among cores  according to any type and form of data parallelism . In some embodiments, data parallelism may be achieved in a multi-core system by each core performing the same task or functionally on different pieces of distributed data. In some embodiments, a single execution thread or code controls operations on all pieces of data. In other embodiments, different threads or instructions control the operation, but may execute the same code. In some embodiments, data parallelism is achieved from the perspective of a packet engine, vServers (VIPs) A-C, network interface cards (NIC) D-E and\/or any other networking hardware or software included on or associated with an appliance . For example, each core may run the same packet engine or VIP code or configuration but operate on different sets of distributed data. Each networking hardware or software construct can receive different, varying or substantially the same amount of data, and as a result may have varying, different or relatively the same amount of load .","In the case of a data parallelism approach, the work may be divided up and distributed based on VIPs, NICs and\/or data flows of the VIPs or NICs. In one of these approaches, the work of the multi-core system may be divided or distributed among the VIPs by having each VIP work on a distributed set of data. For example, each core may be configured to run one or more VIPs. Network traffic may be distributed to the core for each VIP handling that traffic. In another of these approaches, the work of the appliance may be divided or distributed among the cores based on which NIC receives the network traffic. For example, network traffic of a first NIC may be distributed to a first core while network traffic of a second NIC may be distributed to a second core. In some cases, a core may process data from multiple NICs.","While  illustrates a single vServer associated with a single core , as is the case for VIP A, VIP B and VIP C. In some embodiments, a single vServer can be associated with one or more cores . In contrast, one or more vServers can be associated with a single core . Associating a vServer with a core  may include that core  to process all functions associated with that particular vServer. In some embodiments, each core executes a VIP having the same code and configuration. In other embodiments, each core executes a VIP having the same code but different configuration. In some embodiments, each core executes a VIP having different code and the same or different configuration.","Like vServers, NICs can also be associated with particular cores . In many embodiments, NICs can be connected to one or more cores  such that when a NIC receives or transmits data packets, a particular core  handles the processing involved with receiving and transmitting the data packets. In one embodiment, a single NIC can be associated with a single core , as is the case with NIC D and NIC E. In other embodiments, one or more NICs can be associated with a single core . In other embodiments, a single NIC can be associated with one or more cores . In these embodiments, load could be distributed amongst the one or more cores  such that each core  processes a substantially similar amount of load. A core  associated with a NIC may process all functions and\/or data associated with that particular NIC.","While distributing work across cores based on data of VIPs or NICs may have a level of independency, in some embodiments, this may lead to unbalanced use of cores as illustrated by the varying loads  of .","In some embodiments, load, work or network traffic can be distributed among cores  based on any type and form of data flow. In another of these approaches, the work may be divided or distributed among cores based on data flows. For example, network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases, the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. In some embodiments, the data flow is based on any unit or portion of network traffic, such as a transaction, a request\/response communication or traffic originating from an application on a client. In this manner and in some embodiments, data flows between clients and servers traversing the appliance \u2032 may be distributed in a more balanced manner than the other approaches.","In flow-based data parallelism , distribution of data is related to any type of flow of data, such as request\/response pairings, transactions, sessions, connections or application communications. For example, network traffic between a client and a server traversing the appliance may be distributed to and processed by one core of the plurality of cores. In some cases, the core initially establishing the session or connection may be the core for which network traffic for that session or connection is distributed. The distribution of data flow may be such that each core  carries a substantially equal or relatively evenly distributed amount of load, data or network traffic.","In some embodiments, the data flow is based on any unit or portion of network traffic, such as a transaction, a request\/response communication or traffic originating from an application on a client. In this manner and in some embodiments, data flows between clients and servers traversing the appliance \u2032 may be distributed in a more balanced manner than the other approached. In one embodiment, data flow can be distributed based on a transaction or a series of transactions. This transaction, in some embodiments, can be between a client and a server and can be characterized by an IP address or other packet identifier. For example, Core  A can be dedicated to transactions between a particular client and a particular server, therefore the load A on Core  A may be comprised of the network traffic associated with the transactions between the particular client and server. Allocating the network traffic to Core  A can be accomplished by routing all data packets originating from either the particular client or server to Core  A.","While work or load can be distributed to the cores based in part on transactions, in other embodiments load or work can be allocated on a per packet basis. In these embodiments, the appliance  can intercept data packets and allocate them to a core  having the least amount of load. For example, the appliance  could allocate a first incoming data packet to Core  A because the load A on Core  is less than the load B-N on the rest of the cores B-N. Once the first data packet is allocated to Core  A, the amount of load A on Core  A is increased proportional to the amount of processing resources needed to process the first data packet. When the appliance  intercepts a second data packet, the appliance  will allocate the load to Core  D because Core  D has the second least amount of load. Allocating data packets to the core with the least amount of load can, in some embodiments, ensure that the load A-N distributed to each core  remains substantially equal.","In other embodiments, load can be allocated on a per unit basis where a section of network traffic is allocated to a particular core . The above-mentioned example illustrates load balancing on a per\/packet basis. In other embodiments, load can be allocated based on a number of packets such that every 10, 100 or 1000 packets are allocated to the core  having the least amount of load. The number of packets allocated to a core  can be a number determined by an application, user or administrator and can be any number greater than zero. In still other embodiments, load can be allocated based on a time metric such that packets are distributed to a particular core  for a predetermined amount of time. In these embodiments, packets can be distributed to a particular core  for five milliseconds or for any period of time determined by a user, program, system, administrator or otherwise. After the predetermined time period elapses, data packets are transmitted to a different core  for the predetermined period of time.","Flow-based data parallelism methods for distributing work, load or network traffic among the one or more cores  can comprise any combination of the above-mentioned embodiments. These methods can be carried out by any part of the appliance , by an application or set of executable instructions executing on one of the cores , such as the packet engine, or by any application, program or agent executing on a computing device in communication with the appliance .","The functional and data parallelism computing schemes illustrated in  can be combined in any manner to generate a hybrid parallelism or distributed processing scheme that encompasses function parallelism , data parallelism , flow-based data parallelism  or any portions thereof. In some cases, the multi-core system may use any type and form of load balancing schemes to distribute load among the one or more cores . The load balancing scheme may be used in any combination with any of the functional and data parallelism schemes or combinations thereof.","Illustrated in  is an embodiment of a multi-core system , which may be any type and form of one or more systems, appliances, devices or components. This system , in some embodiments, can be included within an appliance  having one or more processing cores A-N. The system  can further include one or more packet engines (PE) or packet processing engines (PPE) A-N communicating with a memory bus . The memory bus may be used to communicate with the one or more processing cores A-N. Also included within the system  can be one or more network interface cards (NIC)  and a flow distributor  which can further communicate with the one or more processing cores A-N. The flow distributor  can comprise a Receive Side Scaler (RSS) or Receive Side Scaling (RSS) module .","Further referring to , and in more detail, in one embodiment the packet engine(s) A-N can comprise any portion of the appliance  described herein, such as any portion of the appliance described in . The packet engine(s) A-N can, in some embodiments, comprise any of the following elements: the packet engine , a network stack ; a cache manager ; a policy engine ; a compression engine ; an encryption engine ; a GUI ; a CLI ; shell services ; monitoring programs ; and any other software or hardware element able to receive data packets from one of either the memory bus  or the one of more cores A-N. In some embodiments, the packet engine(s) A-N can comprise one or more vServers A-N, or any portion thereof. In other embodiments, the packet engine(s) A-N can provide any combination of the following functionalities: SSL VPN ; Intranet UP ; switching ; DNS ; packet acceleration ; App FW ; monitoring such as the monitoring provided by a monitoring agent ; functionalities associated with functioning as a TCP stack; load balancing; SSL offloading and processing; content switching; policy evaluation; caching; compression; encoding; decompression; decoding; application firewall functionalities; XML processing and acceleration; and SSL VPN connectivity.","The packet engine(s) A-N can, in some embodiments, be associated with a particular server, user, client or network. When a packet engine  becomes associated with a particular entity, that packet engine  can process data packets associated with that entity. For example, should a packet engine  be associated with a first user, that packet engine  will process and operate on packets generated by the first user, or packets having a destination address associated with the first user. Similarly, the packet engine  may choose not to be associated with a particular entity such that the packet engine  can process and otherwise operate on any data packets not generated by that entity or destined for that entity.","In some instances, the packet engine(s) A-N can be configured to carry out the any of the functional and\/or data parallelism schemes illustrated in . In these instances, the packet engine(s) A-N can distribute functions or data among the processing cores A-N so that the distribution is according to the parallelism or distribution scheme. In some embodiments, a single packet engine(s) A-N carries out a load balancing scheme, while in other embodiments one or more packet engine(s) A-N carry out a load balancing scheme. Each core A-N, in one embodiment, can be associated with a particular packet engine  such that load balancing can be carried out by the packet engine. Load balancing may in this embodiment, require that each packet engine A-N associated with a core  communicate with the other packet engines associated with cores so that the packet engines A-N can collectively determine where to distribute load. One embodiment of this process can include an arbiter that receives votes from each packet engine for load. The arbiter can distribute load to each packet engine A-N based in part on the age of the engine's vote and in some cases a priority value associated with the current amount of load on an engine's associated core .","Any of the packet engines running on the cores may run in user mode, kernel or any combination thereof. In some embodiments, the packet engine operates as an application or program running is user or application space. In these embodiments, the packet engine may use any type and form of interface to access any functionality provided by the kernel. In some embodiments, the packet engine operates in kernel mode or as part of the kernel. In some embodiments, a first portion of the packet engine operates in user mode while a second portion of the packet engine operates in kernel mode. In some embodiments, a first packet engine on a first core executes in kernel mode while a second packet engine on a second core executes in user mode. In some embodiments, the packet engine or any portions thereof operates on or in conjunction with the NIC or any drivers thereof.","In some embodiments the memory bus  can be any type and form of memory or computer bus. While a single memory bus  is depicted in , the system  can comprise any number of memory buses . In one embodiment, each packet engine  can be associated with one or more individual memory buses .","The NIC  can in some embodiments be any of the network interface cards or mechanisms described herein. The NIC  can have any number of ports. The NIC can be designed and constructed to connect to any type and form of network . While a single NIC  is illustrated, the system  can comprise any number of NICs . In some embodiments, each core A-N can be associated with one or more single NICs . Thus, each core  can be associated with a single NIC  dedicated to a particular core . The cores A-N can comprise any of the processors described herein. Further, the cores A-N can be configured according to any of the core  configurations described herein. Still further, the cores A-N can have any of the core  functionalities described herein. While  illustrates seven cores A-G, any number of cores  can be included within the system . In particular, the system  can comprise \u201cN\u201d cores, where \u201cN\u201d is a whole number greater than zero.","A core may have or use memory that is allocated or assigned for use to that core. The memory may be considered private or local memory of that core and only accessible by that core. A core may have or use memory that is shared or assigned to multiple cores. The memory may be considered public or shared memory that is accessible by more than one core. A core may use any combination of private and public memory. With separate address spaces for each core, some level of coordination is eliminated from the case of using the same address space. With a separate address space, a core can perform work on information and data in the core's own address space without worrying about conflicts with other cores. Each packet engine may have a separate memory pool for TCP and\/or SSL connections.","Further referring to , any of the functionality and\/or embodiments of the cores  described above in connection with  can be deployed in any embodiment of the virtualized environment described above in connection with . Instead of the functionality of the cores  being deployed in the form of a physical processor , such functionality may be deployed in a virtualized environment  on any computing device , such as a client , server  or appliance . In other embodiments, instead of the functionality of the cores  being deployed in the form of an appliance or a single device, the functionality may be deployed across multiple devices in any arrangement. For example, one device may comprise two or more cores and another device may comprise two or more cores. For example, a multi-core system may include a cluster of computing devices, a server farm or network of computing devices. In some embodiments, instead of the functionality of the cores  being deployed in the form of cores, the functionality may be deployed on a plurality of processors, such as a plurality of single core processors.","In one embodiment, the cores  may be any type and form of processor. In some embodiments, a core can function substantially similar to any processor or central processing unit described herein. In some embodiment, the cores  may comprise any portion of any processor described herein. While  illustrates seven cores, there can exist any \u201cN\u201d number of cores within an appliance , where \u201cN\u201d is any whole number greater than one. In some embodiments, the cores  can be installed within a common appliance , while in other embodiments the cores  can be installed within one or more appliance(s)  communicatively connected to one another. The cores  can in some embodiments comprise graphics processing software, while in other embodiments the cores  provide general processing capabilities. The cores  can be installed physically near each other and\/or can be communicatively connected to each other. The cores may be connected by any type and form of bus or subsystem physically and\/or communicatively coupled to the cores for transferring data between to, from and\/or between the cores.","While each core  can comprise software for communicating with other cores, in some embodiments a core manager (not shown) can facilitate communication between each core . In some embodiments, the kernel may provide core management. The cores may interface or communicate with each other using a variety of interface mechanisms. In some embodiments, core to core messaging may be used to communicate between cores, such as a first core sending a message or data to a second core via a bus or subsystem connecting the cores. In some embodiments, cores may communicate via any type and form of shared memory interface. In one embodiment, there may be one or more memory locations shared among all the cores. In some embodiments, each core may have separate memory locations shared with each other core. For example, a first core may have a first shared memory with a second core and a second share memory with a third core. In some embodiments, cores may communicate via any type of programming or API, such as function calls via the kernel. In some embodiments, the operating system may recognize and support multiple core devices and provide interfaces and API for inter-core communications.","The flow distributor  can be any application, program, library, script, task, service, process or any type and form of executable instructions executing on any type and form of hardware. In some embodiments, the flow distributor  may any design and construction of circuitry to perform any of the operations and functions described herein. In some embodiments, the flow distributor distribute, forwards, routes, controls and\/ors manage the distribution of data packets among the cores  and\/or packet engine or VIPs running on the cores. The flow distributor , in some embodiments, can be referred to as an interface master. In one embodiment, the flow distributor  comprises a set of executable instructions executing on a core or processor of the appliance . In another embodiment, the flow distributor  comprises a set of executable instructions executing on a computing machine in communication with the appliance . In some embodiments, the flow distributor  comprises a set of executable instructions executing on a NIC, such as firmware. In still other embodiments, the flow distributor  comprises any combination of software and hardware to distribute data packets among cores or processors. In one embodiment, the flow distributor  executes on at least one of the cores A-N, while in other embodiments a separate flow distributor  assigned to each core A-N executes on an associated core A-N. The flow distributor may use any type and form of statistical or probabilistic algorithms or decision making to balance the flows across the cores. The hardware of the appliance, such as a NIC, or the kernel may be designed and constructed to support sequential operations across the NICs and\/or cores.","In embodiments where the system  comprises one or more flow distributors , each flow distributor  can be associated with a processor  or a packet engine . The flow distributors  can comprise an interface mechanism that allows each flow distributor  to communicate with the other flow distributors  executing within the system . In one instance, the one or more flow distributors  can determine how to balance load by communicating with each other. This process can operate substantially similarly to the process described above for submitting votes to an arbiter which then determines which flow distributor  should receive the load. In other embodiments, a first flow distributor \u2032 can identify the load on an associated core and determine whether to forward a first data packet to the associated core based on any of the following criteria: the load on the associated core is above a predetermined threshold; the load on the associated core is below a predetermined threshold; the load on the associated core is less than the load on the other cores; or any other metric that can be used to determine where to forward data packets based in part on the amount of load on a processor.","The flow distributor  can distribute network traffic among the cores  according to a distribution, computing or load balancing scheme such as those described herein. In one embodiment, the flow distributor can distribute network traffic according to any one of a functional parallelism distribution scheme , a data parallelism load distribution scheme , a flow-based data parallelism distribution scheme , or any combination of these distribution scheme or any load balancing scheme for distributing load among multiple processors. The flow distributor  can therefore act as a load distributor by taking in data packets and distributing them across the processors according to an operative load balancing or distribution scheme. In one embodiment, the flow distributor  can comprise one or more operations, functions or logic to determine how to distribute packers, work or load accordingly. In still other embodiments, the flow distributor  can comprise one or more sub operations, functions or logic that can identify a source address and a destination address associated with a data packet, and distribute packets accordingly.","In some embodiments, the flow distributor  can comprise a receive-side scaling (RSS) network driver, module  or any type and form of executable instructions which distribute data packets among the one or more cores . The RSS module  can comprise any combination of hardware and software, In some embodiments, the RSS module  works in conjunction with the flow distributor  to distribute data packets across the cores A-N or among multiple processors in a multi-processor network. The RSS module  can execute within the NIC  in some embodiments, and in other embodiments can execute on any one of the cores .","In some embodiments, the RSS module  uses the MICROSOFT receive-side-scaling (RSS) scheme. In one embodiment, RSS is a Microsoft Scalable Networking initiative technology that enables receive processing to be balanced across multiple processors in the system while maintaining in-order delivery of the data. The RSS may use any type and form of hashing scheme to determine a core or processor for processing a network packet.","The RSS module  can apply any type and form hash function such as the Toeplitz hash function. The hash function may be applied to the hash type or any the sequence of values. The hash function may be a secure hash of any security level or is otherwise cryptographically secure. The hash function may use a hash key. The size of the key is dependent upon the hash function. For the Toeplitz hash, the size may be 40 bytes for IPv6 and 16 bytes for IPv4.","The hash function may be designed and constructed based on any one or more criteria or design goals. In some embodiments, a hash function may be used that provides an even distribution of hash result for different hash inputs and different hash types, including TCP\/IPv4, TCP\/IPv6, IPv4, and IPv6 headers. In some embodiments, a hash function may be used that provides a hash result that is evenly distributed when a small number of buckets are present (for example, two or four). In some embodiments, hash function may be used that provides a hash result that is randomly distributed when a large number of buckets were present (for example, 64 buckets). In some embodiments, the hash function is determined based on a level of computational or resource usage. In some embodiments, the hash function is determined based on ease or difficulty of implementing the hash in hardware. In some embodiments, the hash function is determined based on the ease or difficulty of a malicious remote host to send packets that would all hash to the same bucket.","The RSS may generate hashes from any type and form of input, such as a sequence of values. This sequence of values can include any portion of the network packet, such as any header, field or payload of network packet, or portions thereof. In some embodiments, the input to the hash may be referred to as a hash type and include any tuples of information associated with a network packet or data flow, such as any of the following: a four tuple comprising at least two IP addresses and two ports; a four tuple comprising any four sets of values; a six tuple; a two tuple; and\/or any other sequence of numbers or values. The following are example of hash types that may be used by RSS:\n\n","The hash result or any portion thereof may used to identify a core or entity, such as a packet engine or VIP, for distributing a network packet. In some embodiments, one or more hash bits or mask are applied to the hash result. The hash bit or mask may be any number of bits or bytes. A NIC may support any number of bits, such as seven bits. The network stack may set the actual number of bits to be used during initialization. The number will be between 1 and 7, inclusive.","The hash result may be used to identify the core or entity via any type and form of table, such as a bucket table or indirection table. In some embodiments, the number of hash-result bits are used to index into the table. The range of the hash mask may effectively define the size of the indirection table. Any portion of the hash result or the hash result itself may be used to index the indirection table. The values in the table may identify any of the cores or processor, such as by a core or processor identifier. In some embodiments, all of the cores of the multi-core system are identified in the table. In other embodiments, a port of the cores of the multi-core system are identified in the table. The indirection table may comprise any number of buckets for example 2 to 128 buckets that may be indexed by a hash mask. Each bucket may comprise a range of index values that identify a core or processor. In some embodiments, the flow controller and\/or RSS module may rebalance the network rebalance the network load by changing the indirection table.","In some embodiments, the multi-core system  does not include a RSS driver or RSS module . In some of these embodiments, a software steering module (not shown) or a software embodiment of the RSS module within the system can operate in conjunction with or as part of the flow distributor  to steer packets to cores  within the multi-core system .","The flow distributor , in some embodiments, executes within any module or program on the appliance , on any one of the cores  and on any one of the devices or components included within the multi-core system . In some embodiments, the flow distributor \u2032 can execute on the first core A, while in other embodiments the flow distributor \u2033 can execute on the NIC . In still other embodiments, an instance of the flow distributor \u2032 can execute on each core  included in the multi-core system . In this embodiment, each instance of the flow distributor \u2032 can communicate with other instances of the flow distributor \u2032 to forward packets back and forth across the cores . There exist situations where a response to a request packet may not be processed by the same core, i.e. the first core processes the request while the second core processes the response. In these situations, the instances of the flow distributor \u2032 can intercept the packet and forward it to the desired or correct core , i.e. a flow distributor instance \u2032 can forward the response to the first core. Multiple instances of the flow distributor \u2032 can execute on any number of cores  and any combination of cores .","The flow distributor may operate responsive to any one or more rules or policies. The rules may identify a core or packet processing engine to receive a network packet, data or data flow. The rules may identify any type and form of tuple information related to a network packet, such as a 4-tuple of source and destination IP address and source and destination ports. Based on a received packet matching the tuple specified by the rule, the flow distributor may forward the packet to a core or packet engine. In some embodiments, the packet is forwarded to a core via shared memory and\/or core to core messaging.","Although  illustrates the flow distributor  as executing within the multi-core system , in some embodiments the flow distributor  can execute on a computing device or appliance remotely located from the multi-core system . In such an embodiment, the flow distributor  can communicate with the multi-core system  to take in data packets and distribute the packets across the one or more cores . The flow distributor  can, in one embodiment, receive data packets destined for the appliance , apply a distribution scheme to the received data packets and distribute the data packets to the one or more cores  of the multi-core system . In one embodiment, the flow distributor  can be included in a router or other appliance such that the router can target particular cores  by altering meta data associated with each packet so that each packet is targeted towards a sub-node of the multi-core system . In such an embodiment, CISCO's vn-tag mechanism can be used to alter or tag each packet with the appropriate meta data.","Illustrated in  is an embodiment of a multi-core system  comprising one or more processing cores A-N. In brief overview, one of the cores  can be designated as a control core A and can be used as a control plane  for the other cores . The other cores may be secondary cores which operate in a data plane while the control core provides the control plane. The cores A-N may share a global cache . While the control core provides a control plane, the other cores in the multi-core system form or provide a data plane. These cores perform data processing functionality on network traffic while the control provides initialization, configuration and control of the multi-core system.","Further referring to , and in more detail, the cores A-N as well as the control core A can be any processor described herein. Furthermore, the cores A-N and the control core A can be any processor able to function within the system  described in . Still further, the cores A-N and the control core A can be any core or group of cores described herein. The control core may be a different type of core or processor than the other cores. In some embodiments, the control may operate a different packet engine or have a packet engine configured differently than the packet engines of the other cores.","Any portion of the memory of each of the cores may be allocated to or used for a global cache that is shared by the cores. In brief overview, a predetermined percentage or predetermined amount of each of the memory of each core may be used for the global cache. For example, 50% of each memory of each code may be dedicated or allocated to the shared global cache. That is, in the illustrated embodiment, 2 GB of each core excluding the control plane core or core  may be used to form a 28 GB shared global cache. The configuration of the control plane such as via the configuration services may determine the amount of memory used for the shared global cache. In some embodiments, each core may provide a different amount of memory for use by the global cache. In other embodiments, any one core may not provide any memory or use the global cache. In some embodiments, any of the cores may also have a local cache in memory not allocated to the global shared memory. Each of the cores may store any portion of network traffic to the global shared cache. Each of the cores may check the cache for any content to use in a request or response. Any of the cores may obtain content from the global shared cache to use in a data flow, request or response.","The global cache  can be any type and form of memory or storage element, such as any memory or storage element described herein. In some embodiments, the cores  may have access to a predetermined amount of memory (i.e. 32 GB or any other memory amount commensurate with the system ). The global cache  can be allocated from that predetermined amount of memory while the rest of the available memory can be allocated among the cores . In other embodiments, each core  can have a predetermined amount of memory. The global cache  can comprise an amount of the memory allocated to each core . This memory amount can be measured in bytes, or can be measured as a percentage of the memory allocated to each core . Thus, the global cache  can comprise 1 GB of memory from the memory associated with each core , or can comprise 20 percent or one-half of the memory associated with each core . In some embodiments, only a portion of the cores  provide memory to the global cache , while in other embodiments the global cache  can comprise memory not allocated to the cores .","Each core  can use the global cache  to store network traffic or cache data. In some embodiments, the packet engines of the core use the global cache to cache and use data stored by the plurality of packet engines. For example, the cache manager of  and cache functionality of  may use the global cache to share data for acceleration. For example, each of the packet engines may store responses, such as HTML data, to the global cache. Any of the cache managers operating on a core may access the global cache to server caches responses to client requests.","In some embodiments, the cores  can use the global cache  to store a port allocation table which can be used to determine data flow based in part on ports. In other embodiments, the cores  can use the global cache  to store an address lookup table or any other table or list that can be used by the flow distributor to determine where to direct incoming and outgoing data packets. The cores  can, in some embodiments read from and write to cache , while in other embodiments the cores  can only read from or write to cache . The cores may use the global cache to perform core to core communications.","The global cache  may be sectioned into individual memory sections where each section can be dedicated to a particular core . In one embodiment, the control core A can receive a greater amount of available cache, while the other cores  can receiving varying amounts or access to the global cache .","In some embodiments, the system  can comprise a control core A. While  illustrates core  A as the control core, the control core can be any core within the appliance  or multi-core system. Further, while only a single control core is depicted, the system  can comprise one or more control cores each having a level of control over the system. In some embodiments, one or more control cores can each control a particular aspect of the system . For example, one core can control deciding which distribution scheme to use, while another core can determine the size of the global cache .","The control plane of the multi-core system may be the designation and configuration of a core as the dedicated management core or as a master core. This control plane core may provide control, management and coordination of operation and functionality the plurality of cores in the multi-core system. This control plane core may provide control, management and coordination of allocation and use of memory of the system among the plurality of cores in the multi-core system, including initialization and configuration of the same. In some embodiments, the control plane includes the flow distributor for controlling the assignment of data flows to cores and the distribution of network packets to cores based on data flows. In some embodiments, the control plane core runs a packet engine and in other embodiments, the control plane core is dedicated to management and control of the other cores of the system.","The control core A can exercise a level of control over the other cores  such as determining how much memory should be allocated to each core  or determining which core  should be assigned to handle a particular function or hardware\/software entity. The control core A, in some embodiments, can exercise control over those cores  within the control plan . Thus, there can exist processors outside of the control plane  which are not controlled by the control core A. Determining the boundaries of the control plane  can include maintaining, by the control core A or agent executing within the system , a list of those cores  controlled by the control core A. The control core A can control any of the following: initialization of a core; determining when a core is unavailable; re-distributing load to other cores  when one core fails; determining which distribution scheme to implement; determining which core should receive network traffic; determining how much cache should be allocated to each core; determining whether to assign a particular function or element to a particular core; determining whether to permit cores to communicate with one another; determining the size of the global cache ; and any other determination of a function, configuration or operation of the cores within the system .","F. Systems and Methods for Monitor Distribution in Multi-Core Systems","The systems and methods described herein are directed towards monitor distribution in multi-core systems. In general overview, the systems and methods distribute ownership of monitors for services and ownership of monitoring of services, each of which may have one or more associated monitors, over a plurality of cores. If a core owns or is responsible for a monitor for a service, the core may be responsible for sending probes to the service according to the monitor and receiving the result of each probe. If a core owns or is responsible for monitoring of a service, the core may be responsible for tracking the state of the service by processing the results of probes sent to the service by itself or other cores. As a result, the workload for monitoring and tracking the state of services may be distributed across the plurality of cores.","Each core in the plurality of cores may be responsible for monitors for services, and each core may send probes to the services according to the monitors and receive the results. If a core is not responsible for the service, the core may send the results of its probes for the service to the owner core. If a core owns the service, and is thus responsible for tracking the state of the service, the core may determine the state of the service. The core may determine the state of the service by processing the results of probes for the service. The core may determine the state of the service by processing the results of probes sent by itself, probes sent by other cores, or both. The owner core may send messages to other cores regarding the state of the service or a change in the state. The owner core responsible for the service may be considered or referred to as the consolidator of the monitoring for the service.","A core may be generally described herein as being an owner of a service or owning monitoring of a service. If a core owns a service, the core or the packet processing engine on the core may take responsibility for establishing and\/or maintaining a state of the service for the multi-core system. In another aspect, a core that owns a service may be a core or packet processing engine that is designated as the core or the packet processing engine of the plurality of cores and\/or plurality of packet engines of the multi-core system to be responsible for monitoring the service.","Referring now to , a block diagram of an appliance  using a plurality of monitoring agents on a plurality of cores to monitor a plurality of network services is shown. In brief overview, an appliance  comprises a plurality of monitoring agents arranged in a table. Each of the plurality of cores may include a copy of the table, which is described in fuller detail in . Each of the plurality of monitoring agents is assigned to monitor a service. In one embodiment, each of the plurality of monitoring agents may be assigned a weight. Monitoring agents may also be referred to as probes.","Still referring to , an appliance  comprises a plurality of monitoring agents or monitors. A monitoring agent may comprise any program, script, daemon, or other computing routine that reports a performance or operational characteristic of a network service  to the appliance . A monitoring agent may communicate with a network service  once, or on a predetermined frequency, such as every 1 msec or 1 sec. In some embodiments, a monitoring agent may use a request\/reply messaging mechanism or protocol with the server. In other embodiments, a monitoring agent may have a custom or proprietary exchange protocol for communicating with the server. In some embodiments, a single monitoring agent may monitor a plurality of servers. In other embodiments, a plurality of agents may monitor a single server. In still other embodiments, a plurality of monitoring agents may each monitor a plurality of servers, wherein each of the plurality of servers is monitored by a plurality of monitoring agents.","In the embodiment shown, the one or more monitoring agents are associated with one or more network services . In other embodiments, the one or more monitoring agents may monitor an appliance , vServer, network service , client, database, database server or any other network resource. In one embodiment, a user specifies a type of network service to associate with the one or more monitoring agents. In another embodiment, a user customizes a monitoring agent. In still another embodiment, a generic monitoring agent is used. In yet another embodiment, the one or more monitoring agents determine the response time of the one or more network services  for responding to a request of one of the following types: ping, transport control protocol (tcp), tcp extended content verification, hypertext transfer protocol (http), http extended content verification, hypertext transfer protocol secure (https), https extended content verification, user datagram protocol, domain name service, and file transfer protocol.","In some embodiments, the one or more monitoring agents are protocol-specific agents (e.g., for SQL, TCP, HTTP, etc), each agent determining availability for a network service of a particular protocol-type. In some embodiments, a monitoring agent determines a response time of a server  or network service  to a TCP request. In one of these embodiments, the agent uses a \u201cTCP\/ICMP echo request\u201d command to send a datagram to the network service , receive a datagram from the network service  in response, and determine a response time based on the roundtrip time of the datagram. In another of these embodiments, the monitoring agent verifies that the response from the network service  included expected content and did not contain errors.","In other embodiments, a monitoring agent determines availability of a network service  to a UDP request. In one of these embodiments, the agent uses a \u201cUDP echo\u201d command to send a datagram to the network service , receive a datagram from the network service  in response, and determine a response time based on the roundtrip time of the datagram. In another of these embodiments, the monitoring agent verifies that the response from the network service  included expected content and did not contain errors. In still other embodiments, the monitoring agent determines availability of a network service  to an FTP request. In one of these embodiments, the monitoring agent sends an FTP command, such as a \u201cget\u201d command or a \u201cput\u201d command, to the network service  and determines a time needed by the network service  to respond to the command. In another of these embodiments, the monitoring agent verifies that the response from the network service  included expected content, such as contents of a file requested by a \u201cget\u201d command, and did not contain errors.","In yet other embodiments, the monitoring agent determines availability of a network service  to an HTTP request. In one of these embodiments, the monitoring agent sends an HTTP command, such as a \u201cget\u201d request for a uniform resource locator (URL) or a file, to the network service  and determines a time needed by the network service  to respond to the request. In another of these embodiments, the monitoring agent verifies that the response from the network service  included expected content, such as the contents of a web page identified by the URL, and did not contain errors.","In further embodiments, the monitoring agent determines availability of a network service  to a DNS request. In one of these embodiments, the monitoring agent sends a DNS request, such as a dnsquery or nslookup for a known network address, to the server  or network service  and determines a time needed by the server  or network service  to respond to the request. In another of these embodiments, the monitoring agent verifies that the response from the network service  included expected content, such as the domain name of a computing device  associated with the known network address, and did not contain errors.","A monitoring agent may be assigned a weight by a network appliance . A weight may comprise an integer, decimal, or any other numeric indicator. In some embodiments, a user may configure the weight corresponding to a given monitoring agent. In some embodiments, all monitoring agents may be assigned equal weight. In other embodiments, a plurality of monitoring agents may each be assigned different weights. The weights may be assigned to the monitors based on any criteria indicating relative importance, including without limitation importance of the monitored service, reliability of the monitoring mechanism, and the frequency of monitoring.","In one embodiment, a monitoring agent may be assigned a weight based on the relative importance of the service the appliance monitors. For example, if most user requests in a given environment were HTTP requests, a monitoring agent monitoring HTTP availability of a server  might be assigned a weight of 10, while a monitoring agent monitoring FTP availability of a server  might be assigned a weight of 3. Or, for example, if an administrator placed a high priority on UDP applications, a monitoring agent monitoring UDP availability of a server may be assigned a weight of 20, while a DNS monitoring agent may be assigned a weight of 5.","In some embodiments, an appliance  may compute a sum of the weights of the monitoring agents currently reporting a network service  as operational. For example, if five monitoring agents, each assigned a weight of 30, are monitoring a network service , and three of the five monitoring agents report the network service  as available, the appliance may determine the sum of the monitoring agents currently reporting the network service  as operational to be 90. Or for example, if only two monitoring agents, one with a weight of 20 and the other with a weight of 40, are reporting a server  as available, the appliance may compute the sum of the monitoring agents currently reporting a server  as operational to be 60.","Referring now to , a block diagram of an embodiment of a table  used for monitoring services in a multi-core system is depicted. The table  may be store on or in communication with a packet processing engine . Each packet processing engine  may be associated with a table . The entries of the tables  associated with the packet processing engines  may include copies of information regarding the monitors.","In brief overview, the table  may include entries corresponding to monitors for services. Each entry may correspond to a monitor. Each entry in the table  may include fields of information associated with the monitor. The fields of information may include the service name, the monitor name, the activity status of the monitor with respect to the core, and the next time the monitor is scheduled to send a probe to the service (also referred to herein as the \u201cprobe time\u201d). In some embodiments, the fields of information may include the identity of the core that owns the service being monitored. In some embodiments, the fields of information may include the identity of the core that owns the monitor. In many embodiments, the fields of information may include the weight assigned to the monitor.","In various embodiments, a packet processing engine  may create an entry in the table  when the packet processing engine  receives an instruction from the multi-core device  to create a monitor for a service. In some embodiments, the multi-core device  may send the instruction to create a monitor to the packet processing engine  that will own the monitor. In other embodiments, the multi-core device  may send the instruction to create the monitor to all the packet processing engines . In some of these embodiments, each packet processing engine  may create an entry for the monitor in its respective tables  according to the instruction. In other of these embodiments, a packet processing engine  may disregard the instruction to create a monitor if the packet processing engine  will not own the monitor.","The packet processing engine  may process the instruction to create the entry in the table . In some embodiments, the packet processing engine  may process the instruction via parsing. In some embodiments, the packet processing engine  may parse the instruction into the service name, the monitor name, and the information for the monitoring schedule. In other embodiments, the packet processing engine  may parse the instruction into the service name, the number of monitors for the service, and information for the monitoring schedules. In many embodiments, the packet processing engine  may create a new entry in the table  and store the service name and the monitor name. In additional embodiments, the packet processing engine  may create multiple entries according to the number of monitors for the service, according to the instruction. In these embodiments, the packet processing engine  may store, for each entry, the service name and a monitor name chosen according to a predetermined method. In many embodiments, the packet processing engine  may store, for each entry, the information for the monitoring schedule. In additional embodiments, the packet processing engine  may store, for any entry, any information obtained by further parsing of the instruction.","The packet processing engine  may access the information for the monitoring schedule stored for an entry to calculate a next probe time for a monitor. The packet processing engine  may then store the next probe time for the monitor. In many embodiments, the information for the monitoring schedule may include a frequency of monitoring. In various embodiments, the information for the monitoring schedule may include a formula to calculate the next probe time. In some embodiments, upon sending a probe to a service, the packet processing engine  may calculate the next probe time and overwrite the obsolete probe time for the entry. In other embodiments, the packet processing engine  may delete the entry and create a new entry for the monitor with the next probe time.","The packet processing engine  may determine the owner of the monitor according to a predetermined algorithm, as described in further detail below. The packet processing engine  may configure the activity status of the monitor with respect to the core according to the determination. If the packet processing engine  determines the core owns the monitor, the activity status of the monitor may be set to \u201cschedulable.\u201d As a result, the packet processing engine  schedules probes for the service according to the monitor's activity status. If the packet processing engine  determines the core does not own the monitor, the activity status of the monitor may be set to \u201cnon-schedulable.\u201d As a result, the packet processing engine  does not schedule probes for the service according to the monitor's activity status.","Referring now to , a flow diagram depicting an embodiment of steps of a method for configuring a table used for monitoring services in a multi-core system is shown and described. In brief overview, the method includes establishing (step ) a configuration for monitors. The configuration may identify a plurality of monitors to monitor one or more services managed by a plurality of packet processing engines operating on each of the plurality of cores. The method further includes identifying (step ) for each of the plurality of packet processing engines, from the configuration, a monitor name and service name for each monitor of the plurality of monitors. The method further includes computing (step ), by each of the plurality of packet processing engines, for each monitor of the plurality of monitors a value based on a function of the monitor name and the service name. The method further includes determining (step ), by each of the plurality of packet processing engines, a packet processing engine from the plurality of packet processing engines to establish the monitor for the service based on the value corresponding to an identifier of the packet processing engine. Although the steps are described with respect to one packet processing engine operating on one core, methods for configuring tables by each of the packet processing engines would be apparent to one of ordinary skill in the art.","In further detail, at step , the packet processing engine  may establish the configuration for monitors by allocating memory and creating a table for the monitors. The packet processing engine  may create entries for the table in response to instructions from the multi-core device to create monitors for services. The packet processing engine  may process the instructions to obtain the fields for the entries. For example, the packet processing engine  may parse an instruction to obtain the service name and the monitor name.","The multi-core system may use any type and form of monitor configuration to establish one or more monitors. The configuration may be established via a set of one or more commands or instructions, such as a set of commands received via the graphical user interface (GUI)  or the command line interface (CLI) , as described in . In some embodiments, the packet processing engine  may parse an instruction of a configuration to determine a type of monitor. In some embodiments, the packet processing engine  may parse an instruction to determine a type of monitor. For example, the packet processing engine  may determine that the monitor probes the state of a service, a least response time of a service, a dynamic response time of the service, or any other characteristic of the service. In additional embodiments, the packet processing engine  may parse the instruction to obtain the weight of the monitor. The packet processing engine  may parse an instruction to obtain information for a monitoring schedule. The packet processing engine  may use the information for the monitoring schedule to calculate the next probe time. In any of these embodiments, the packet processing engine  may store in an entry any of the information obtained by parsing an instruction to create monitor or any information derived from the parsing.","The packet processing engine  may establish the entries of the table  in any order. In some embodiments, the packet processing engine  establishes entries in the order that the packet processing engine  receives instructions to create the monitors. In other embodiments, the packet processing engine  establishes entries in order of the service and monitor names. In further embodiments, the packet processing engine  establishes entries in order of the probe times. In some embodiments, the packet processing engine  establishes entries according to ownership of the monitors. For example, the packet processing engine  may group monitors the packet processing engine  owns apart from the monitors that belong to other cores.","At step , the packet processing engine  may identify configuration information for each monitor. In some embodiments, the packet processing engine  may identify a monitor name and a service name for each monitor from fields in the entry for each monitor. The packet processing engine  may load copies of the monitor and service names into a buffer for additional processing. The packet processing engine may identify other configuration information for each monitor as identified in table . In various embodiments, the packet processing engine  may identify the type of monitor, the weight of the monitor, the identity of the core that owns the monitor, the identity of the core that owns the service associated with the monitor, or any other configuration information.","At step , for each monitor, the packet processing engine  may compute a value based on any configuration information for a monitor. In some embodiments, the packet processing engine  may compute a value using a function of the monitor name and service name. In various embodiments, the monitor name may be an identifier of a monitor. In many embodiments, the service name may be an identifier of a service. In numerous embodiments, the packet processing engine  may compute a value based on a function of any configuration information, such as the monitor name, service name, type of monitor, weight of the monitor, identity of the core that owns the monitor, identity of the core that owns the service associated with the monitor, or any combination thereof. The function or the result of the function may be used to identify the owner of the monitor. The result may be used as a lookup or index into a table that identifies cores. The function may be a hash function that identified an index into an indirection table to select the core. As a result, the value may correspond to an identifier of a packet processing engine. The packet processing engine  may compute the value using any function that results in a desired distribution of monitor ownership among the packet processing engines . The packet processing engine  may compute the value using copies of the monitor name, service name, or any other configuration information loaded into a buffer.","In some embodiments, the packet processing engine  computes the value according to the sums of the ASCII values of the monitor and service names. In these embodiments, the packet processing engine  may add the sum of ASCII values of the monitor name to the sum of ASCII values of the service name. In one of these embodiments, the packet processing engine  may divide this sum by the number of packet processing engines. In another of these embodiments, the packet processing engine  may perform a modulo operation upon the sum according to the number of packet processing engines. In further embodiments, the packet processing engine  may create a variable that stores the number of monitors that have been created. In these embodiments, the packet processing engine  may add the sum of the ASCII values of the service name to the number of created monitors. The packet processing engine  may then divide the sum by the number of packet processing engines or perform a modulo operation according to the number of packet processing engines. After the packet processing engine  computes the value, the packet processing engine  may increment the variable to account for the newly created monitor.","The packet processing engine  may determine the packet processing engine to establish the monitor for the service based on the computed value. In some embodiments, the packet processing engine  may compare the computed value to a value assigned to the packet processing engine  upon boot-up, wherein the value indicates the packet processing engine 's order among the plurality of packet processing engines. In other embodiments, the packet processing engine  may compare the computed value to an identifier of the packet processing engine . If the comparison indicates the packet processing engine  owns the monitor, the packet processing engine  sets the activity status of the monitor to \u201cschedulable.\u201d As a result, the packet processing engine  will schedule probes for the service according to the monitor. If the comparison indicates that the packet processing engine  does not own the monitor, the packet processing engine  sets the activity status of the monitor to \u201cnon-schedulable.\u201d As a result, the packet processing engine  does not schedule probes for the service, although the information for the monitor will remain in the table .","Referring now to , a flow diagram depicting steps of an embodiment of a method for monitoring services in a multi-core system is shown and described. In brief overview, the method includes sending probes to monitor services according to iterations through the entries of the table . For one iteration through the table , the method includes initializing variables (step ) associated with the services. The method further includes initializing (step ) a list of services with significant probe results. The method further includes sending (step ) a probe to a service according to the ownership of a monitor and the probe time. The method further includes receiving and processing (step ) the result of the probe. The method further includes determining (step ) if probes have been sent for all the entries in the table . The method further includes sending (step ) information regarding the results of the probes to services owned by other packet processing engines.","For each iteration through the table , the packet processing engine  may initialize variables associated with the services. A variable may be related to the results of probes for a service. A variable may indicate a change in state for a service. The packet processing engine  may create and initialize the variables when the multi-core device  boots up. In this embodiment, the packet processing engine  may initialize the variables at the beginning of each iteration through the table . In other embodiments, the packet processing engine  may initialize the variables at the end of each iteration through the table .","The packet processing engine  may send a probe to a service according to the ownership of a monitor and the probe time. The packet processing engine  may examine activity status of the monitor to determine if the packet processing engine  owns the monitor. If the activity status is \u201cnon-schedulable,\u201d the packet processing engine  does not own the monitor. The packet processing engine  then examines the activity status for the next entry in the table . In this manner, the packet processing engine  continues examining the entries in the table  until the packet processing engine  encounters a monitor that the packet processing engine  owns. When the packet processing engine  encounters a monitor that the packet processing engine  owns, the packet processing engine  compares the scheduled probe time for the monitor with a signal from a clock. If the scheduled probe time is less than or equal to the signal from the clock, the packet processing engine  creates a probe according to the monitor and sends the probe to the service. The packet processing engine  may calculate the next probe time and overwrite the probe time field of the entry with the newly calculated probe time. The packet processing engine  may then continue examining the activity statuses and probe times of entries in the table  until the packet processing engine .","With the examining of activity statuses and probe times and sending of probes, the packet processing engine  may receive and process the result of a probe. The packet processing engine  may use the result of a probe to adjust a variable associated with a service. In some embodiments, the packet processing engine  may increment or decrement the variable according to the result of a probe. For example, if the probe indicates a service is \u201cup,\u201d the packet processing engine  may increment the variable, but if the probe indicates a service is \u201cdown,\u201d the packet processing engine  may decrement the variable. In some embodiments, the magnitude of the increment or decrement is a predetermined value. In other embodiments, the magnitude of the increment or decrement depends on the result of the probe.","After adjusting the variable, the packet processing engine  may determine if the packet processing engine  owns the service being monitored. If the packet processing engine  owns the service, the packet processing engine  may use the variable to update the state of the service, as described in . If the packet processing engine  does not own the service, the packet processing engine  evaluates the variable associated with the service to determine if the packet processing engine  needs to report the results of the probe to the owner packet processing engine . In some embodiments, the packet processing engine  may compare the variable with a predetermined threshold. If the variable is greater than the threshold, the packet processing engine  may determine if the service is already included in the list of services with probe results. If the service is not in the list, the packet processing engine  may add the service to the list. If the variable is less than the threshold, the packet processing engine  may remove the service from the list.","After the packet processing engine  finishes sending probes and processing the results for the entries in the table , the packet processing engine  may send information regarding the results of the probes to services owned by other packet processing engines. In many embodiments, the packet processing engine  may examine the list of services with probe results. For each service in the list, the packet processing engine  may prepare a message with the service name and the value of the variable associated with the service. The packet processing engine  may send the message to the packet processing engine that owns the service. The packet processing engine  may delete the service from the list. In some embodiments, the packet processing engine  deletes the service after sending the message to the packet processing engine that owns the service. In other embodiments, the packet processing engine  deletes all the services from the list after all the messages with variables for the services have been sent to the respective packet processing engines. The packet processing engine  returns to (step ) to process another iteration through the table .","Referring now to , a flow diagram depicting steps of an embodiment of a method for updating the state of a service in a multi-core system is shown and described. The method includes receiving and processing (step ) by a packet processing engine  that owns a service (also referred to herein as \u201cowner packet processing engine\u201d) the probe results for the service from other packet processing engines. In some embodiments, the owner packet processing engine  receives a message from another packet processing engine. The message may include a service name and a value of a variable associated with the service. The value of the variable may reflect the results of probes sent to the service by the packet processing engine that sent the message. The owner packet processing engine may update a variable associated with the state of a service according to the value in the message. In some embodiments, the owner packet processing engine may add the value in the message to the variable associated with the state of the service, and in other embodiments, the owner packet processing engine may subtract the value.","The method also includes determining (step ) if the state of a service has changed. In some embodiments, the owner packet processing engine determines if the state of a service has changed by comparing the variable associated with the state of the service to a predetermined threshold. In some embodiments, the owner packet processing engine detects if the variable was previously less than the threshold and the updated owner packet processing engine exceeds the threshold. In other embodiments, the owner packet processing engine detects if the variable previously exceeded the threshold and the updated variable is less than the threshold.","The method also includes sending (step ) messages about the new state of the service to the other packet processing engines. In some embodiments, in response to the detection, the owner packet processing engine creates a message including the state of the service, according to the updated variable. The owner packet processing engine may send the message to all of the other packet processing engines. In other embodiments, in response to the detection, the owner packet processing engine places the service in a list of services whose statuses have changed. In these embodiments, the owner packet processing engine may create and send messages regarding the states of the services in the list on a predetermined basis. For example, the owner packet processing engine may create and send the messages according to a predetermined frequency, and then delete all the services from the list.","An example of monitor distribution in a multi-core system is herein described. In this example, the multi-core system has 8 cores and monitors 4 services. The multi-core system is configured to have 20 monitors that monitor the 4 services, and 5 monitors are dedicated to each service. The multi-core system establishes service names and monitor names for each of the 20 monitors. The multi-core system may compute a hash value for each monitor based on the service and monitor names. The hash value may determine which core owns a monitor and is responsible for sending probes to the service according to the monitor. In this example, a hash value may fall between 0 and 8000. If the hash value falls between 0 and 999, core  owns the monitor. If the hash value falls between 1000 and 1999, core  owns the monitor, and so on. In this example, core  owns the first service, and the hash values for the monitors determine that cores , , , , and  own the monitors for the first service. Core  owns the second service, and the hash values for the monitors determine that cores , , , , and  own the monitors for the second service. Core  owns the third service, and the hash values for the monitors determine that cores , , , , and  own the monitors for the third service. Core  owns the fourth service, and the hash values for the monitors determine that cores , , , , and  own the monitors for the fourth service.","Each core in the multi-core system includes a table that stores entries for all 20 monitors. Each core sets the activity statuses for entries to \u201cschedulable\u201d for the monitors it owns and \u201cunschedulable\u201d for the monitors it does not own. In one example, core  sets the activity statuses for its monitors for the first and third services to \u201cschedulable,\u201d but sets activity statuses for all other monitors in its table to \u201cunschedulable.\u201d In another example, core  sets the activity statuses for its monitors for the second and fourth services to \u201cschedulable,\u201d but sets activity statuses for all other monitors in its table to \u201cunschedulable.\u201d The remaining cores set the activity statuses for monitors in its table in the same manner.","If a monitor is set to \u201cschedulable,\u201d a core may send probes according to the monitor to the service. The core may receive the results of the probes. If the core does not own the service, the core may send a message including the results of the probes to the owner core. For example, core  may send the results of its probes for the third service to core . In another example, core  may send the results of its probes for the second service to core , the results of its probes for the third service to core , and the results of its probes for the fourth service to core .","If a core does own a service, the core may determine the state of the service according to results of the probes for the service. The core may determine the state by processing the results of its own probes or results sent from other cores. For example, core  may process the results of its probes for the first service to update the state. Core  may also process the results of probes sent from cores , , , and  to update the state of the first service. In another example, core  may process the results of its probes for the third service to update the state. Core  may also process the results of probes sent from cores , , , and  to update the state of the third service. In any of these examples, once a core has updated the state of a service it owns, the core may send a message to the other cores regarding the state of the service.","G. Systems and Methods for Configuring and Using Object-Oriented Policy Expressions","Referring now to , an example of a portion of an object model used to facilitate processing of HTTP data is shown. Various embodiments of object models incorporating one or more features described herein may be modified or adapted to support SQL and other protocols. In brief overview, object classes are defined for a number of elements in the HTTP protocol. Defined classes include a request , response , hostname , url , query , cookie , and text . Each class is defined to include a number of fields and\/or methods, which may include or return objects corresponding to other classes or may include or return other data types, such as integers.","Still referring to , now in greater detail, an object model may comprise a set of defined object classes which allows a computing device to specify and manipulate data, and\/or a set of defined object classes which allows a user of a computing device to direct the operations of the computing device. An object model may have any properties associated with object-oriented design or programming including, without limitation, inheritance, abstraction, encapsulation, and polymorphism. Examples of object models that may be used in conjunction with the object-oriented expressions described herein include, without limitation, the Java object model, the Component Object Model (COM), and the HTML Document Object Model (DOM), and any portion or combinations of portions of those models. In some embodiments, an object model or a portion of an object model may correspond to a protocol. For example, an object model may be created to represent HTTP communications, with the object model providing classes and methods for accessing and manipulating HTTP communications. Or an object model may be created to represent TCP, IP, UDP, ICA, or SSL communications. Or an object model may be created to represent an appliance, with the object model providing classes and methods for accessing and manipulating state information relating to an network appliance .","An object class may comprise an abstract description of an object and any methods associated with the object. An object, a particular instance of a class, may represent any type or form of data, process, or protocol. Example objects may include, without limitation, strings, text, numbers, lists, protocols, data streams, connections, devices, data structures, systems, and network packets.","An object class may have a number of members. A member of an object class may comprise any field, method, constructor, property, or variable specified by the object class. In some embodiments, a member of an object class may comprise an object of a second object class. For example, in the embodiment shown, the object class \u201chttp_request\u201d  contains a method \u201cgetUrl\u201d which returns a url object. In other embodiments, a member of an object class may be a primitive data type of an underlying architecture, such as an integer, floating point number, byte, array, or boolean variable. For example, the class \u201ccookie\u201d contains a field \u201ccount\u201d which is an integer identifying the number of name-value pairs in the list. In still other embodiments, a member of an object class may comprise a constant. In still other embodiments, a member of an object class may comprise a method.","In some cases, a member of an object class may be defined in the object class definition. In other cases, a member of an object class may be defined in a parent class of the object class. In still other cases, a member of an object class may be defined in a parent of the object class and modified in the class definition for the object. For example, both the \u201ccookie\u201d  and \u201cquery\u201d  classes inherit the methods \u201cgetName\u201d and \u201cgetValue\u201d from their parent class \u201clist_nv\u201d which is a class representing lists of name-value pairs.","In the embodiment shown, the http_request class  contains a number of methods which may be used to process an HTTP request. Fields and methods me be provided to identify and manipulate any portion or portions of an HTTP request including, without limitation, the URL, cookie, body, content-type, date, version, and hostname. In one embodiment, a method or methods may be provided to determine whether a given data stream is a validly formatted HTTP request. A similar class and\/or methods may also be provided for an HTTP response.","The url class  shown may comprise any number of fields and methods for operating and identifying a url. In one embodiment, the url may contain methods for parsing one or more of a hostname, port, server, domain, file suffix, path, and query. In one embodiment, the url may be a subclass of a general text object, which may allow the url to be treated as unformatted text. For example, the url class  may be a subclass of the text class . In one embodiment, the url class may comprise methods for rewriting all or a portion of the url. In some embodiments, the url class may be applied to any portion of text. For example, the url class may comprise a constructor which accepts a string of text and creates a url object by parsing the string. In these and other embodiments, the url class may comprise a method for indicating whether a URL is a properly formatted URL. In some embodiments, a URL class may comprise a method for identifying one or more URLs in a text string. For example, a static method \u201cfindURL\u201d might be provided which returns a list of validly formatted URLs in a given text sequence. This method could be used, for example, to find a number of URLs contained in the body of an HTTP response. The url class may then provide methods for modifying one or more of the found URLs.","The cookie class  may comprise any number of fields and methods for identifying and processing a cookie. In one embodiment, the cookie may be an HTTP cookie. In the embodiment shown, the cookie class represents a cookie as a list of name value pairs. The \u201cgetValue\u201d method, in response to receiving a number n, may return a text object of the nth value in the list. The getName method, in response to receiving a number n, may return a text object of the nth value in the name. In other embodiments, a cookie may be represented using any other syntax or data type including, without limitation, a string, or linked list. In some embodiments, the cookie class may provide a method for inserting and\/or altering a cookie. In other embodiments, a HTTP response or request object class may provide a method for inserting or modifying a cookie contained in a request or response.","The \u201ctext\u201d class  shown may comprise any number of fields and\/or methods for operating on a text sequence. A text sequence may comprise any sequence of bytes capable of being treated as characters. In some embodiments, a text object may comprise a discrete sequence of bytes. In other embodiments, a text object may comprise one or more bytes of a byte stream. In these embodiments, a text object may be used to operate on portions of the byte stream even if the entire stream has not been received. Methods that may be used in conjunction with text objects may include, without limitation, comparisons, truncations, searches, sorts, and regular expression matching and searching. For example, a method may be provided to determine whether a given substring is found within a text object. Or for example, a method may be provided to determine a portion of a text object preceding a special character. Or, for example, a method may be provided for identifying a sequence of text following a given regular expression.","In some embodiments, methods may also be provided for formatting or confirming formatting of text so that it can be processed by other classes and\/or methods. For example, a method may be provided that ensures a text object may be treated as XML. This method might check that the text object conforms to proper XML formatting and does not contain any malicious or inadvertent errors. Or, for example, a similar method may be provided to determine whether a text sequence can be treated as a URL. This method may, for example, find and replace any characters which need to be replaced by escape sequences so that the text object conforms to proper URL formatting conventions.","An object model may be implemented using any physical data structures or other underlying physical implementations. In some embodiments, a number of objects may access the same object in physical memory to perform the methods associated with each object. In one embodiment, the object model shown may be implemented so that a plurality of object instances operate on a underlying data stream, without needing to produce separate copies of the data stream for each object instance. To give a detailed example, with respect to the object model shown, an appliance may receive an HTTP communication from a client and store it in memory. The appliance may then execute identify a http_request object, and then call functions in the http_request object class  to obtain a url and\/or a cookie object. The appliance may then call addition functions or reference fields in the url and cookie objects. Some or all of these methods may operate by parsing some or all of the underlying data stream, and then returning references to portions of the stream. For example, a url object may store the beginning and ending memory locations of the url in the underlying data stream. Each method of the url class may then parse and\/or modify portions of data within the identified memory locations. In this manner, the appliance may be able to process a data stream using an object model without having to maintain additional copies of data in the data stream.","In other implementations, one or more additional copies of some or all of a data stream may be made with respect to some objects. These object may perform operations on a copy of a portion of data stream, and, as may be appropriate, update the data stream with any changes made to the copy.","The object model shown and others may specify object classes and data structures that can be applied to any input stream. For example, the object model shown may be used to treat any input stream as an http_request object, and then utilize any of the functionality provided by the http_request object class. Further, although the object model shown relates to HTTP data, other object models may be used to provide functionality with respect to TCP, SSL, or ICA streams. In some embodiments, an object model and implementation may be provided such that an appliance may select from a number of object models to process a given data stream. For example, upon receiving a given data stream, an appliance may determine that the data stream is an ICA stream, and apply an appropriate object model for processing the ICA stream. However, if HTTP data is transmitted within the ICA stream, the appliance may also apply an HTTP object model, such as the one shown, for processing the HTTP data. In this way, an appliance may specify any structure or structures to apply to a received byte stream.","Referring now to , an example documentation screen for an object class representing a URL is shown. In brief overview, the documentation screen comprises a partial list of a number of methods and a constructor for the \u201chttp_url_t\u201d class, which represents a URL. The documentation screen indicates a number of methods are implemented in the \u201chttp_url_t\u201d class, and a number of methods implemented in the parent class \u201ctext_t.\u201d These classes may correspond to the \u201curl\u201d and \u201ctext\u201d classes described with respect to .","Referring now to , a number of example object-oriented expressions for use in a policy engine are shown. In brief overview, an object oriented expression  contains a number of object classes, which may correspond to protocols, protocol objects, data structures, and data types. An object-oriented expression may specify a member of an identified object, which may comprise methods, data types, or other object classes. A number of example object-oriented expressions , , are shown. These object oriented expressions may be used by a network device in performing any function including, without limitation, analyzing traffic flows, identifying system properties, load balancing, content switching, and application security.","Still referring to , now in greater detail, object-oriented expressions may comprise any expression which allows the specification of data and functions with respect to an object model. A first example object oriented expression  identifies an object class and a member of the object class. In the syntax of the object-oriented expressions shown, a member of an object is designated by a period following the object and then a string naming the member of the object. For example, HTTP.REQ identifies the member method named \u201cREQ\u201d for the HTTP object. In this example, method names may be denoted with all uppercase. In other embodiments, any other syntax may be used to specify object-oriented expressions. Examples of syntaxes that may be used include, without limitation, the syntax or a combination of syntaxes of ActionScript, Java, JavaScript, C#, Visual FoxPro, VB.Net, C++, Python, Perl, PHP, Ruby and\/or Objective-C.","In the example object-oriented expression , the expression identifies the protocol HTTP. In one embodiment, HTTP may correspond to an object class, an abstract object class, a static object class, or any other component of an object model. In some embodiments, HTTP may be a parent class of a number of object classes used to represent and process HTTP communications. In other embodiments, \u201cHTTP\u201d may be a static class or method comprising one or more objects and\/or methods relating to the representation and processing of HTTP communications. For example, the expression \u201cHTTP.REQ\u201d may return an object corresponding to an HTTP request within a data stream. In one embodiment, this object may be an instance of an object class such as the \u201chttp_request\u201d class discussed in . In the embodiment shown, the expression may return a boolean value indicating whether \u201cjoe\u201d is contained in a value named \u201cid\u201d in the query portion of a URL of an HTTP request.","The example object-oriented expression provides an example of explicit typecasting, which may be used to specify structure with respect to arbitrary portions of a data stream. In the example, the string returned from a HTTP request header item corresponding to eh Accept-Language is explicitly typecast into a list. The TYPECAST_TO_LIST method accepts as an argument the list delimiter, and returns a list based on the delimiter. The expression then identifies a CONTAINS method to determine whether one of the list elements is \u201cen\u201d. This example may be used to configure a device to detect whether an HTTP request indicates the requestor accepts English as a language. In some embodiments, an object model and expression syntax may allow a data stream to be explicitly typecast into any object class. This may allow a user configuring a device to specify arbitrary structures to be applied with respect to a data stream. This may in turn allow a user to leverage knowledge of a protocol or convention to format input streams in a manner convenient for processing.","As another example of an explicit typecasting, the expression HTTP.RES.HEADER(\u201cLocation\u201d).TYPECAST_TO_URL.QUERY may be used to typecase an element of the HTTP header so that it is treated as a URL. By typecasting text elements to a URL, the URL processing methods may be made available to analyze content in any portion of a network traffic stream.","In some embodiments, two or more object-oriented expressions may be used in conjunction with an operator, such as AND, OR, NOT, GREATER THAN, or LESS THAN, to produce a value. For example, in expression two expressions which may return boolean values are joined with an OR operator. The result of the combined expression will be the OR of the values returned by the two expressions. In other embodiments, operators may work with respect to any objects or data types including, without limitation, integers, floating point numbers, and strings.","Though the specific examples shown reflect object-oriented statement in the context of an HTTP object model, object-oriented statements and models may be used to access any portions or portion of network traffic passing through a device. In addition, object-oriented statements and models may be used to access system properties of a device, or properties of a given connection or connected device.","In one embodiment, an object-oriented expression may be used to base network device behavior on any properties of the device. For example, the expression SYS.TIME.WITHIN(time1, time2) might be used to base behavior based on a time of day, or day of year. Or, for example, the expression SYS.CONNECTIONS.SSL_OPEN.COUNT might be used to return a count of the total number of SSL connection are currently open with a system. In both of these examples, the SYS object represents the system executing the policy, and a number of methods and\/or fields are provided within the SYS object to access information about system status.","In another embodiment, an object-oriented expression may be used to base network device behavior on any properties of a client connected to the device. In one embodiment a \u201cCLIENT\u201d object might be provided to represent the properties of a client sending or receiving a currently processed data stream. For example, the expression: CLIENT.IP.SRC.IN_SUBNET(10.100.202.0\/24), might be used to return a true\/false value based on whether a client corresponding to a data stream is in a given subnet. Or, for example, the expression CLIENT.AGENT.VERSION_NUM might be used to retrieve the version number of a client agent executing on the client. Or, for example, the expression CLIENT.VLAN.VIRTUAL_IP might be used to access the virtual IP address of a client.","In still another embodiment, an object-oriented expression may be used to base network device behavior on any property of a server connected to the device. For example, SERVER.METRICS.HTTP.AVG_RESP_TIME might be used to access the average response time of a server for generating HTTP requests. Or, for example, SERVER.ICA.MAX_CONNECTIONS. might be used to identify a maximum number of ICA connections specified for a given server. Or, for example, SERVER.ETHER.HEADER might be used to identify the ethernet packet headers of a given connection to a server.","In some embodiments, an object-oriented expression may be used to buffer a certain amount of a communication before or during processing. For example, an appliance serving as a proxy for HTTP communications may wish to base some behavior on an initial part of the response. In this case, it may be desirable to only buffer a portion of the response, so that end-to-end response time does not unduly suffer. In one embodiment, an expression may specify a number of bytes to receive before an expression is evaluated. For example, the expression HTTP.REQ.getBody(5000).TYPECAST_TO_NV_LIST(\u2018=\u2019, \u2018&\u2019).getValue(\u201cid\u201d) may be used to buffer the first 5000 bytes of an HTTP request body, and then treat those bytes as a name-value pair list. The expression then specifies to get the value corresponding to the name \u201cid.\u201d","Referring now to , an example of a policy which may be used in configuring a device is shown. In brief overview, a policy  comprises an expression  which may be evaluated in the context of a rule . A policy  may also comprise an action which specifies an action to be taken if the rule is satisfied.","Still referring to , now in greater detail a policy may be used to configure a device. In some embodiments, a policy may be used to configure any device including, without limitation, a WAN optimization appliance , an SSL\/VPN appliance , an acceleration appliance , a caching appliance , a load balancing appliance, and\/or a device providing any combination of features of those devices. In other embodiments, a policy may be used to configure a client agent or server agent.","In some embodiments, a policy engine executing on a device may interpret, evaluate, and\/or execute policies with respect to functions of the device. For example, a policy engine  may execute on an appliance  and interpret and execute a number of policies directing other actions and modules of the appliance including, without limitation, an SSL\/VPN module , an Intranet IP module , a switching module , a DNS module , an acceleration module , an application firewall module , and\/or a monitoring agent . In some embodiments a single set of policies may be provided for directing a plurality of appliance functions. In other embodiments, a separate set of policies may be used to configure each of a number of appliance functions. Policies may be stored in any manner within a device. In some embodiments, a policy may be compiled before it is executed on a device. In other embodiments, a policy may be interpreted at runtime.","A policy  may comprise one or more expressions . An expression in a policy may be evaluated by a device at runtime with respect to the objects specified in the expression to produce a value. An expression  may be any type of expression. In one embodiment, an expression  may be an object-oriented expression. An expression may be used anywhere within a policy. In some embodiments an expression may be specified in a rule of a policy. In other embodiments, an expression may be specified in an action of a policy.","A policy  may also comprise a rule . The rule may be evaluated at runtime with respect to objects, methods, and operators identified in the rule to produce a result. Depending on the result, the appliance may then execute one or more actions specified in the policy. For example, if a rule evaluates to \u201ctrue\u201d an appliance may execute the action associated with the rule. Or if a rule evaluates to \u201cfalse\u201d and appliance may not execute the action associated with the rule. In some embodiments, a rule may comprise a single expression. In other embodiments, a rule may comprise a plurality of expressions connected by operators.","A policy  may also comprise an action . An action may specify any action to be taken. Examples of actions may include, without limitation, blocking or allowing a data stream, forwarding a data stream or object to a given server or device, storing an object in memory, altering a portion of a data stream, altering one or more system properties, performing an acceleration technique, and performing a compression technique. In the policy  shown, upon determining that an HTTP request URL contains a user identifier of \u201cJOE\u201d, the policy dictates an action of forwarding the request to a specified server. In some embodiments, an action may comprise an expression to be evaluated at runtime","Referring now to , an example of an expression input screen  for a user to input an object-oriented expression is shown. In brief overview, an expression input screen  comprises a number of pull-down menus  which allow a user to specify members of classes to include in a created expression. The screen  may also comprise a display where a user may be able to see and\/or edit a text version of the expression. The screen may further comprise a display  which displays to the user information corresponding to one or more objects.","Still referring to , now in greater detail, an expression input screen allows input of object oriented expressions by a user in any manner. In the embodiment shown, pull-down menus  may be used to select objects. In other embodiments, any other input elements may be used to accept an object oriented expression including, without limitation, text fields, menus, buttons, checkboxes, and toolbars. In some embodiments, input elements of a screen  may provide functionality for a user to create and verify valid expressions. In some embodiments, the pull-down menus  may be automatically populated with members of the previous specified class. For example, upon a user selecting \u201cURL\u201d in the menu shown, the next pull down menu may be populated with the members of the URL object class. In this way a user may be able to efficiently navigate class hierarchies and object models to generate an expression. In other embodiments, syntax highlighting, auto-completion, and\/or auto-recommendation may be used to enable a user to easily create and verify expressions. For example, a user may be provided with a text field  to compose an expression, wherein the text field highlights in red any unrecognized objects or syntax. Or for example, a user may be provided with a text field  which, upon a user typing an object class, the text field displays a list of members of the object class.","In some embodiments, an expression input screen  may display to the user information about any objects or expressions. In some embodiments, the screen  may display the properties and\/or recommended uses of a given class. In one embodiment, the screen  may be integrated with or used alongside one or more class documentation screens such as depicted in .","Referring now to , an example of a configuration interface screen which may be used to configure a plurality of policies corresponding to one or more network devices is shown. In brief overview, a screen displays a list of network device functions  with folders containing one or more policies, policy groups, or settings related to the functions. In the example shown, the screen displays folders for system policies, network policies, DNS policies, SSL policies, SSL offload policies, compression policies, integrated caching policies, protection features, load balancing policies, content switching policies, cache redirection policies, global load balancing policies, SSL VPN policies, and application security policies. In some embodiments, a number of policies, policy groups, and\/or settings corresponding to a function may be referred to as a profile.","Still referring to , now in greater detail, a configuration interface may allow a user to specify policies or settings related to one or more network devices. In some embodiments, a configuration interface may be used to configure an appliance  including, without limitation, a VPN appliance, acceleration appliance, or WAN optimization device. In some embodiments, a single configuration interface may allow a user to configure a plurality of appliances. For example, a user may be able to specify one or more appliances to apply a given policy, policy group, or setting to. In one embodiment, a user may be able to specify that a number of appliances share a configuration profile. For example, a user may configure a cluster of appliances  such that each appliance has the same policy settings. In other embodiments, a configuration interface  may be used to configure one or more client agents .","A configuration interface  may comprise any means of collecting input including, without limitation, GUIs, and command-line interfaces. A configuration interface may comprise one or more expression input screens . In one embodiment, a configuration interface may read configuration information from a file. In another embodiment, a configuration interface may receive configuration information over a network. For example, a configuration interface  may comprise means for a user to download one or more policies, settings, policy groups, or profiles. These may comprise commonly used policies or settings for a number of applications.","A configuration interface may obscure any aspects of a policy, policy group or configuration from a user. For example, a configuration interface may fill in any portions of a policy or policy group automatically or by default such that the user does not need to actively configure those portions. For example, a configuration interface may provide a default list of actions, where the user only needs to specify a list of rules under which the actions should be taken. The syntax and implementation of the actions may be completely or partially hidden from the user.","Referring now to , an example of using a computer to configure an appliance using a configuration interface is shown. In brief overview, a configuration interface  comprising an expression input screen  is displayed on a client . The client  transmits the configuration data received via the configuration interface to the appliance .","Still referring to , now in greater detail, a configuration interface  may be displayed on a client  in any manner. In some embodiments, a configuration interface  may comprise an application executing on the client. In other embodiments, a configuration interface  may comprise a web page displayed by the appliance. In still other embodiments, a configuration interface  may comprise a web page displayed by a third device.","A configuration interface  may comprise any means for a user to input configuration data including, without limitation, text fields, menus, buttons, windows, checkboxes, and drag-and-drop functions. In some embodiments, a configuration interface  may comprise an expression input screen . In other embodiments, a configuration interface may also provide screens for a user to input one or more policies. In some embodiments these screen may be integrated with one or more expression input screens.","A configuration interface may transmit configuration information to an appliance  by any means. The configuration information may be transmitted via any protocol or protocols. In one embodiment, user-inputted configuration information may be saved to a file on the client , and then the file may be transmitted to the appliance. In other embodiments, a user may input information into a web page or a web application which may then transfer the configuration information to the appliance. In some embodiments, the configuration information may be compiled, formatted, or otherwise processed before it is transmitted to the appliance . In still other embodiments, the configuration information may be compiled, formatted, or otherwise processed after it has been received by the appliance.","Referring now to , an embodiment of a method of configuring an object-oriented policy of a network device with an object-oriented expression to specify structure in a payload of a packet stream received by a network device is depicted. In brief overview, a configuration interface  is provided by a device in order to configure a policy  for a network device  (step ). The device receives, via the configuration interface , an expression  for the policy  (step ). The device receives, via the configuration interface  user information identifying an action to be taken based on an evaluation of the expression (step ).","Still referring to , now in further detail, a configuration interface may be provided for configuring a policy  for a network device  in any manner (step ). In some embodiments the configuration interface  may comprise a command line interface. In other embodiments, the configuration interface  may comprise a graphical user interface. The configuration interface  may comprise one or more of a drag-and-drop interface, a list-selection interface, or a syntax-highlighting interface. In some embodiments, the configuration interface  resides on a client device . In other embodiments, the configuration interface  executes on the network device . In some embodiments, a device providing the configuration interface  is connected to an appliance  by a network . In some embodiments, the configuration interface  is a webpage. In some other embodiments, the configuration interface  is a webpage that resides on the network device . In other embodiments, the configuration interface  is a webpage that resides on a separate server .","A device receives, via the configuration interface , an expression  for the policy  specifying an object class to apply to a portion of the payload of a packet stream and a member of the object class (step ). In some embodiments, the expression may be received via an expression input screen . In one embodiment, the expression  identifies a portion of text within a packet stream. In certain embodiments, the expression  specifies a protocol, and may also specify one or more methods and fields related to the protocol. For example, the expression may specify a protocol of HTTP, HTML, FTP, SMTP, ICA, and\/or SSL. The specified protocol may then be applied to parse a data stream according to the protocol.","The received expression may specify any object class. For example, the received expression may specify any of the object classes described in the object model of . An object class may be specified in any manner. In one embodiment, specifying an object class may comprise specifying an instance of the object class. For example, the expression \u201cHTTP.REQ\u201d may specify an instance of the \u201chttp_request\u201d object from . In some embodiments, the received expression may comprise an object-oriented expression.","The received expression may also specify any member of an identified object class. The member may comprise any object, data type, or method. In some embodiments, the member comprises a field. In other embodiments, the member may comprise a field corresponding to a second object class. In some embodiments, the member of the object class comprises a method. In some embodiments, the member of the object class is inherited from a parent class of the object class. The member of the object class may correspond to an HTTP request or response. In other cases, a member of the class may be a uniform resource locator (\u201cURL\u201d) or a cookie.","In other embodiments, the expression  comprises an explicit typecasting. The explicit typecasting may be used to specify an object class to use with respect to a field or returned object. For example, a field containing a number may be explicitly typecast to an alphanumeric string in order to execute a string comparison. Or for example, a stream of bytes may be typecast to a list with a given delimiter. Or for example, a data stream may be typecast as corresponding a particular protocol or protocol object.","A device may receive, via the configuration interface , information that identifies an action for the policy , the action to be taken based on an evaluation of the expression  (step ). In some embodiments, the action may comprise an object-oriented expression. In certain embodiments, the method performs the action in order to provide load-balancing, content switching, application security, application delivery, network acceleration, or application acceleration. For example, in order to accelerate network activity, the method may evaluate an expression  to determine the location of the user and, based on the user's location, route the user's traffic to the geographically closest server or servers . In some embodiments, a policy may perform security, acceleration, load-balancing or content switching functions by rewriting a URL in either the HTTP request or response. For example, an action may specify to modify the HTTP request so that the URL refers to a specific server or server farm . In some cases, the action received from the configuration interface  may be an expression for \u201cno action\u201d or for a default action.","Referring now to , an embodiment of a method of applying, by a device, object-oriented expressions  in a policy  to specify a structure in a payload of a packet stream received by an appliance  is depicted. In brief overview, an appliance  identifies a policy  comprising an object-oriented expression  to evaluate with respect to a payload of a received packet stream (step ). The appliance  assigns values to a data structure specified by the object-oriented expression  based on a portion of the payload (step ). The appliance  performs an evaluation of the expression  based on the assigned values (step ) and takes, in response to the evaluation, an action specified by the policy  (step ).","Still referring to , now in further detail, an appliance may identify a policy to apply to a data stream any manner (step ). In some embodiments, an appliance may read a policy from one or more configuration files. In other embodiments, a policy engine  in an appliance may store a number of policies in memory. In still other embodiments, an appliance may identify a policy in response to a type or protocol of the data stream. For example, an appliance may have a set of policies applied to all incoming TCP streams. Or for example, an appliance may identify one or more policies that are applied to SSL streams. In one embodiment, an appliance may identify a policy based on a sender or a recipient of a data stream. For example, a VPN appliance may have a set of policies which are applied to incoming connection requests from clients. Or an acceleration device may identify one or more polices to apply to a HTTP stream from a server . In some embodiments, the policy may comprise a policy received via a configuration interface .","The packet stream may be received in any manner, and from any source. In some embodiments, the packet stream may be transparently intercepted by the appliance. In other embodiments, the appliance may receive the packet stream in the process of proxying one or more transport layer connections. The packet stream may comprise any type of packets including, without limitation, IP packets, TCP packets, UDP packets, and ICMP packets. The packet stream may comprise any other protocol or protocols.","The identified policy may comprise an object-oriented expression to evaluate with respect to the payload of a packet stream. The object-oriented expression may comprise any type of object-oriented expression, and may specify one or more object classes, fields, and methods. In some embodiments, the object-oriented expression may comprise part of a rule. In some embodiments, the expression may specify one or more objects corresponding to a client, server, HTTP protocol, or the appliance.","The object-oriented expression may be evaluated with respect to any payload of a packet stream. In one embodiment, the expression may be evaluated with respect to the payload of a TCP or UDP stream. In another embodiment, the expression may be evaluated with respect to an SSL stream. In still another embodiment, the expression may be evaluated with respect to the payload of an ICA stream. The packet stream may be received from any source including, without limitation, a client, server, client agent, server agent, or a second appliance.","The appliance assigns values to a data structure as specified by the object-oriented expression  (step ). A data structure may comprise the physical representation of an object instance. In some embodiments, the appliance may parse some or all of the received payload to assign the values. In other embodiments, the appliance may perform any methods specified by the expression or included in an object model to assign values. For example, with respect to the expression:","\u201cHTTP.REQ.HEADER(\u201cAccept-Language\u201d).TYPECAST_TO_LIST(\u201c,\u201d)\u201d the appliance may assign values to an object corresponding each of the request, header, and comma-delimited list specified. In some embodiments, the assigning of values may comprise determining a portion or portions of the data stream corresponding to an object. In some embodiments, the step  includes applying, by the appliance , a class specified by the object-oriented expression  to a byte stream of the payload. For example, if an expression specifies a URL class, the appliance may assign a value to an underlying URL data structure by determining the starting and ending points of a URL within the received payload. These starting and ending points may then be stored in a URL data structure and used to perform any of the methods in the URL class. In some embodiments, the appliance may assign values to a plurality of data structures specified by the object-oriented expression. In one embodiment, a policy engine  may perform any functions related to the evaluation of a policy.","The appliance may perform an evaluation of the expression  based on the assigned values in any manner (step ). In some embodiments, the appliance may use one or more methods of an object class specified by the expression to perform the evaluation. In some embodiments, the evaluation may produce a boolean value. In other embodiments, the evaluation may produce an integer, string, or other object. The appliance may use the assigned values in any manner. In the URL example above, the appliance, after determining a starting and ending point for the URL, may then use those values to perform any operations with respect to the URL. In some embodiments, the appliance may then perform the getSuffix( ) method referenced in , which identifies a file type suffix of the requested URL. This method may also comprise determining a starting and ending point of the suffix in relation to the starting and ending point of the URL. The appliance may then use the starting and ending points of the suffix to perform any evaluations of the file suffix, such as comparing it to the string \u201c.jsp\u201d to determine if the requested URL corresponds to a Java Server Page.","In some embodiments, the appliance may evaluate a rule comprising the expression. In other embodiments, the appliance may evaluate a rule comprising a plurality of expressions.","The appliance may then, in response to the evaluation, take an action specified by the policy  (step ). In one embodiment, the appliance takes an action if the result of the evaluation is a value corresponding to true. In another embodiment, the appliance may take an action if the result of the evaluation is non-zero. The action taken may be any action including, without limitation, any action relating to load-balancing, content switching, application security, application delivery, network acceleration, or application acceleration. In some embodiments, the action may comprise a \u201cno action.\u201d","In some embodiments, the appliance may perform the action immediately following the evaluation. In other embodiments, the appliance may perform the action subsequent to evaluating at least one other policy. In still other embodiments, the appliance may perform the action after waiting a predetermined amount of time or waiting until a resource becomes available. In one embodiment, the appliance may perform the action after receiving additional portions of the packet stream.","In some embodiments, the appliance may then forward the received packet stream to one or more appliances servers, clients, or client agents. The appliance may perform any other network appliance functions with respect to the packet stream including, without limitation, acceleration, compression, and load balancing.","Now referring to , a method, in an appliance , for applying object-oriented expressions  in a policy  to specify structure in a payload of a packet stream received by the appliance  is shown. In brief overview, the appliance identifies a policy  including an object-oriented expression  to evaluate with respect to a payload of a received packet stream (step ). The appliance assigns values to a data structure specified by the object-oriented expression  based on a portion of the payload (step ). The appliance also performs an evaluation of the expression  based on the assigned values (step ). In response to the evaluation, the appliance alters a portion of the received packet stream (step ) and transmits the altered packet stream (step ).","Still referring to , now in greater detail, the appliance may identify a policy  that specifies an object-oriented expression  to evaluate with respect to a payload of a received packet stream (step ). This step may be performed in any manner described herein.","The appliance may assign values to a data structure specified by the object-oriented expression  based on a portion of the payload in any manner (step ). This step may be performed in any manner described herein.","The appliance performs an evaluation of the expression based on the assigned values (step ). This step may be performed in any manner described herein.","In response to the evaluation, the appliance may alter a portion of the received packet stream (step ). In some embodiments, altering a portion of the received packet stream may comprise taking an action in response to the evaluation (step ). In some embodiments, the portion of the packet stream that is altered is specified by a data structure identified by the object-oriented expression. In other embodiments, the portion of the packet stream that is altered is specified by a second object-oriented expression. In some embodiments, the portion of the packet stream to be altered may be specified by an object-oriented expression in an action of the policy. In some embodiments, the appliance may rewrite a URL in the body of an HTTP response or request. In other embodiments, the appliance may rewrite a form field value in the packet stream. The form field that is altered may be a field in an HTTP request, an HTTP response or any other field in an object that is part of the packet stream. In still another embodiment, the appliance may alter one or more name-value pairs contained in the packet stream. In some embodiments, the appliance may rewrite a portion of the received packet stream to obscure or remove confidential data including, without limitation, personal identification numbers, checking account routing numbers, personal contact information, social security numbers, passwords and other confidential information.","To give a detailed example, upon receiving an HTTP stream from a client destined to a server, an appliance providing application security functions for the server may determine to apply a policy:","if (HTTP.Request.getCookie( ).getValue(\u201cusername\u201d).length>20) then","HTTP.Request.getCookie( ).setValue(\u201cusername\u201d, \u201cvoid\u201d)","In this example the appliance may parse some or all of the HTTP stream to identify the portion of the stream containing the request, and then the cookie within the request. The appliance may do this in any manner, including maintaining one or more internal data structures with references pointers pointing to the areas of the stream corresponding to the request and cookie. The appliance may then identify the value of a \u201cusername\u201d name-value pair within the cookie and determine the whether the length of the value is greater than 20 characters. A length of over 20 characters may indicate an application error or a malicious attack, such as an attempted buffer overflow attack. Upon determining the length is greater than 20 characters, the appliance may then alter the value to \u201cvoid\u201d or any other signal which may notify the server receiving the stream that an inappropriate value was sent by the client. The appliance may use and\/or modify any internal data structures in order to alter the stream. The appliance may then forward the altered stream to the server. In other embodiments, the appliance may simply block the stream from reaching the server upon detecting the potential overflow. In these embodiments, the appliance may return an error message to the client.","In another embodiment, the appliance may replace an entire HTTP response with a new response. For example, if the appliance determines that a response contains confidential data in a form, the appliance may replace the response with a response indicating an error or with a response comprising neutral content. In yet another embodiment, an appliance may replace or rewrite an entire HTTP request or response header.","The appliance may then transmit the altered packet stream in any manner (step ). In some embodiments, the appliance may forward the altered packet stream to a server or client designated as the recipient of the stream. In other embodiments, the appliance may redirect the stream to an appliance, server or client other than the intended recipient of the stream. The appliance may transmit the altered packet stream using any protocol or protocols including, without limitation, TCP, IP, UDP, SSL, and ICA.","H. Systems and Methods for Handling Undefined Policy Expressions","Referring now to , an embodiment of a method, in an appliance , for applying a policy  specifying an action to be taken in the event an element of the policy  is undefined is shown. In brief overview, an appliance identifies a policy  to evaluate with respect to a payload of a received packet stream, where the policy  specifies (i) an expression , (ii) a first action to take based on the expression  and (iii) a second action  to take if an element is undefined (step ). The appliance determines that an element of the policy  is undefined with respect to the payload (step ). In response to its determination that an element is undefined, the appliance takes the second action (step ). Broadly speaking, the method allows a policy to specify an action to be taken if an error or exception is encountered when the appliance attempts to evaluate the policy. In this manner, the second action may be a fallback or error-handling method.","Still referring to , now in greater detail, an appliance identifies a policy  to evaluate with respect to a payload of a received packet stream, where the policy  specifies an expression , a first action to take based on the expression  and a second action  to take if an element of the policy is undefined (step ). The appliance may identify the policy in any manner. In one embodiment, the expression may be an object-oriented expression. In another embodiment, the expression  may identify an object class to apply to a portion of the payload of a packet stream and a member of the object class. In another embodiment, the expression  specifies a protocol, and may also specify one or more related methods and fields. The expression may identify any type of object and\/or object class. In some embodiments, the expression may comprise one or more methods of an object class.","The packet stream may be received in any manner and from any source. In some embodiments, the packet stream may be transparently intercepted by the appliance. In other embodiments, the appliance may receive the packet stream in the process of proxying one or more transport layer connections. The packet stream may comprise any type of packets including, without limitation, IP packets, TCP packets, UDP packets, and ICMP packets. The packet stream may comprise any other protocol or protocols.","The first action specified by the policy may comprise any action. In some embodiments, the first action may comprise an action to be performed if the expression or a rule containing the expression evaluates to true. In some embodiments, the action may relate to load-balancing, content switching, application security, application delivery, network acceleration, or application acceleration. In other embodiments, either action may comprise to a \u201cno action\u201d or a default action.","The second action specifies an action to be taken if an element of the policy is undefined. An element of the policy may comprise any portion of the policy including, without limitation, one or more expressions, rules, or operators. An element may be undefined in any circumstance where an appliance cannot successfully assign a value to the element. In one embodiment, an element may be undefined if the element results in a comparison of incompatible types such as, for example, determining whether an integer is greater than a list, or a boolean value is equal to a string. In other embodiments, an element may be undefined if the element results in one or more null values. For example, if an expression attempts to access a \u201cusername\u201d value within a URL object and the expression is applied to a data stream with a URL with no username value specified, an operation with respect to the username may be undefined. In other embodiments, an element may be undefined as a result of one or more improper typecasts.","In some embodiments, the second action may have been specified by a user via a configuration interface. For example, upon entering or viewing a policy in the configuration interface, a user may be prompted to enter an action to be taken if the policy is undefined at runtime. In other embodiments, the second action may comprise a preconfigured default second action. For example, a group of policies may have a default action to take in the event of an undefined element. For example, a group of policies enabling URL rewriting may have a default second action of not rewriting any URLs. Or a group of policies for performing load balancing may have a default second action of forwarding the packet stream to a designated backup server.","The appliance  may determine if an element of the policy  is undefined with respect to the payload in any manner (step ). In some embodiments, the appliance may determine that the policy is undefined in the process of evaluating the policy. In other embodiments, the appliance may determine that the policy is undefined in the process of precompiling, compiling or interpreting the policy. In some embodiments, the appliance may determine the policy is undefined by detecting one or more exceptions generated during the evaluation of the policy. For example, the appliance may detect a null pointer, overflow, or arithmetic processing exception during the evaluation of the policy.","In response to the determination that an element is undefined, the appliance may take the second action (step ). The second action may comprise any action described herein. In some embodiments, the second action may comprise terminating the receipt and or transmission of the packet stream. In other embodiments, the second action may comprise no action.","I. Systems and Methods for Configuring and Using Policy Groups","Referring now to , an example of a policy bank is shown. In brief overview, a policy bank comprises a group of one or more policies with a specified order for evaluation. In the example shown, the order is specified by line numbers for each of the policies. Each policy may also have a flow instruction , , , (generally ) indicating a policy to be evaluated after evaluation of the current policy.","Still referring to , now in greater detail, a policy bank  may comprise any number of policies including, without limitation, 1, 2, 3, 4, 5, 6, 10, 20, 50, and 100 policies. The policies of a policy bank may comprise any policies described herein. In some embodiments, a policy bank may comprise a group of policies performing a common function. For example, a policy bank may comprise a group of policies providing load balancing functions. Or for example, a policy bank may comprise a group of all the policies for providing caching.","A policy bank may be configured in any manner. In some embodiments, a configuration interface  may be provided which allows a user to create and group one or more polices. In some embodiments, a configuration interface may be provided which allows a user to name a given policy bank. In other embodiments, a configuration interface may be provided which allows a user to specify one or more attributes of a policy bank. For example, a policy bank may have a default action to perform in the event of an exception or undefined policy. Or, for example, a policy bank may have a set of circumstances in which the policy bank is applied. For example, a user may specify that a policy bank is to be used with respect to all incoming HTTP traffic. Or, for example, a user may specify a policy bank to be used upon receiving any connection requests from new devices. In other embodiments, a policy bank may comprise a set of attributes which are used to enforce certain characteristics in the policies of the policy bank. For example, a policy bank may require that no policies in the policy bank access a certain object. The attributes of a policy bank may be enforced at configuration time or at runtime.","A policy bank may be stored in any manner. In some embodiments, a policy bank may be stored on a file in an appliance. In other embodiments, a policy bank may be stored in a policy engine  of an appliance.","A policy bank may comprise any means of ordering policies for evaluation. In one embodiment, a policy bank may comprise an ordered list of policies. In other embodiments, a policy bank may comprise a set of policies with one or more flow instructions  indicating an evaluation order. In still other embodiments, a policy bank may comprise a numbered list of policies to be executed in order of increasing numbers.","Each expression in a policy bank may specify a flow instruction . A flow instruction  may comprise any information or expression indicating a policy to be executed in the event the policy containing the flow instruction evaluates to true. In one embodiment, a flow instruction may comprise a \u201cNEXT\u201d statement , which indicates that the next policy in the bank should be evaluated. In another embodiment, a flow instruction may comprise a \u201cGOTO\u201d statement which identifies another policy in the policy bank to be evaluated next. In some embodiments, a GOTO statement may identify a policy by a line number. In other embodiments, a GOTO statement may identify a policy by a policy name or other identifier. In still another embodiment, a flow instruction may comprise an \u201cEND\u201d statement, which indicates that no more policies of the policy bank should be evaluated.","In some embodiments, a flow instruction may comprise an expression or expression to be evaluated to determine the policy to be executed next. A flow instruction may comprise any expression including, without limitation, any object-oriented expression. For example, the flow instruction specifies that an integer following a \u201cservnum\u201d portion of a query should be added to 17 to determine the line of the policy to be executed next. In the example policy bank, the flow instruction may be used to distribute HTTP requests among a number of servers based on a parameter in the requests.","In some embodiments, a configuration interface  may be provided with means for a user to order policies within a policy bank. The configuration interface may allow a user to specify line numbers, priorities, list ordering, or any other means of specifying evaluation order. In some embodiments, a configuration interface  may allow a user to specify one or more flow instructions with respect to a policy or a policy bank. In other embodiments, the configuration interface may also provide any input means for entering one or more flow instructions corresponding to policies in the policy bank.","Referring now to , an embodiment of a method of flow control among policies  used in a network device  processing a packet stream is shown. In brief overview, the method includes identifying, by an appliance , a plurality of policies  to apply to a received packet stream, where at least one of the policies  includes a policy identifier (step ). The appliance processes a first policy  of a plurality of policies , the first policy  identifying (i) a rule that includes a first expression  (ii) a first action to be taken based on an evaluation of the rule , and (iii) a second policy  from among multiple policies (step ). Based on an evaluation of the expression , the appliance determines that the rule evaluates to true (step ). In response to the determination, the appliance  processes the identified second policy  (step ).","Still referring to , now in further detail, the appliance identifies a plurality of policies  to apply to a received packet stream where at least one of the plurality policies specifies a policy identifier (step ). The appliance may identify the plurality of policies in any manner. In some embodiments, the appliance may identify that the plurality of policies corresponds to policies for a given data stream, data stream source, or data stream recipient. In one embodiment, the plurality of policies may comprise a policy bank.","The packet stream may be received in any manner and from any source. In some embodiments, the packet stream may be transparently intercepted by the appliance. In other embodiments, the appliance may receive the packet stream in the process of proxying one or more transport layer connections. The packet stream may comprise any type of packets including, without limitation, IP packets, TCP packets, UDP packets, and ICMP packets. The packet stream may comprise any other protocol or protocols.","The at least one policy identifier may comprise any means of identifying a policy, including, without limitation, a line number, policy name, or priority number. In some embodiments, each policy  of the multiple policies  specifies a ranking indicating a default order in which the policies  should be processed.","The appliance  processes a first policy  of the plurality of policies  in which the first policy  identifies a rule that specifies a first expression , a first action to be taken based on the evaluation of the rule , and an expression  identifying a second policy  of the plurality of policies  (step ). The first policy may be processed in accordance with any method for evaluating and processing a policy. In some embodiments, the first policy may comprise an object-oriented expression. In other embodiments, the first policy may comprise a rule comprising an object-oriented expression.","The first policy may contain any expression identifying a second policy. In some embodiments, the first policy may comprise a name of a second policy. In other embodiments, the first policy  includes an integer that specifies the ranking of a second policy  to be processed next if the first action applies.","In some embodiments, the first policy may comprise a flow instruction . The first policy may comprise any flow instruction, including \u201cnext,\u201d \u201cgoto,\u201d or \u201cend.\u201d The first policy may comprise any other elements including, without limitation, an action to be performed if an element of the first policy is undefined. In one embodiment, each policy of the plurality of policies may comprise a flow instruction.","Based on the evaluation of the expression  by the appliance , the appliance determines the rule evaluates to true (step ). In some embodiments, this step includes evaluating an object-oriented expression .","In response to the determination that the rule evaluates to true, the appliance  may process the identified second policy  (step ). In one embodiment, step  may comprise executing a flow instruction specified by the first policy. In some embodiments, the appliance  may evaluate an expression  to determine a ranking of a second policy  from among the multiple policies  to be processed next. In some other embodiments, the appliance  may evaluate an object-oriented expression  to determine a ranking of a second policy  among the multiple policies  to be processed next. For example, the appliance may evaluate an expression to determine a line number to be used in conjunction with a GOTO flow instruction. After determining the line number, the appliance may then process the policy at the given line number.","In some embodiments, the appliance may also take the action specified by the first policy upon determining the rule is true. In other embodiments, upon determining the rule is true, the appliance may store the action specified by the first policy in a list. This list may be used to store a number of actions to be taken. In one embodiment, as an appliance processes a number of policies in a policy bank, the appliance may store a list of actions for each policy that contained a rule that evaluated to true. After processing the number of policies, the appliance may then take all of the actions stored in the list. In another embodiment, as an appliance processes a plurality of policy banks, the appliance may store a list of actions for each policy that contained a rule that evaluated to true. After processing the number of policy banks, the appliance may then take all of the actions stored in the list.","Referring now to , a block diagram illustrating flow control among a plurality of policy groups is shown. In brief overview, a policy bank comprises a number of policies. One of the policies comprises an invocation action  which invokes a second policy bank . The invocation action  indicates a policy bank to be processed if the rule of the policy containing the action evaluates to true. After processing the invoked policy bank, an appliance may then resume processing the first policy bank . This processing will be further described with respect to .","Still referring to , a configuration interface  may be provided which allows a user to specify an order of execution among policy groups by including one or more invocation actions . An invocation action may identify a policy group in any manner including, without limitation, by name, by memory location, or by any other identifier. In some embodiments, the policy groups may comprise policy banks. In still other embodiments, an invocation action  may specify a specific policy within a second policy bank.","In some embodiments, an invocation action  may include one or more directives indicating how the second policy group is to be processed. In one embodiment, an invocation action  contained in a first policy bank may specify whether or not processing of the first policy bank should be resumed after processing the invoked policy bank. In another embodiment, an invocation action  may specify whether or not processing of the first policy bank should be resumed if a hard stop or exception is encountered in the invoked policy bank. For example, an invocation action may specify that if an \u201cEND\u201d flow instruction is encountered in the second policy bank, that processing should resume with the first policy bank. Or an invocation action may specify that if an exception or \u201cEND\u201d flow instruction is encountered in the second policy bank, that no more policies of the first policy bank should be processed.","In this manner, a user may configure a number of policy banks to ensure that certain policies are processed, even where the results of one or more policy banks are uncertain. For example, a policy bank providing policies for denying access to restricted URLs may invoke a policy bank for providing SQL security upon detecting that a URL indicates that a request contains SQL queries. The invocation may specify that regardless of the outcome of the SQL security policy bank processing, processing should resume at the URL module after the processing of the SQL policy bank. In this manner, the user may be assured that all of the restricted URL enforcement policy bank are executed, which may ensure that all restricted URLs are blocked.","A user may also use policy bank invocation actions  to ensure that policies are not evaluated in the event a given policy bank encounters an exception or hard stop. For example, a policy bank providing content switching policies may, after determining an application corresponding to a request, may invoke a policy bank containing application security policies for the application. The invocation may indicate that if the application security policy bank encounters an \u201cEND\u201d instruction, no more policies are to be evaluated in the content switching policy bank. This may be used in cases where an \u201cEND\u201d instruction in the application security policy bank indicates that a security requirement has not been met, and thus no more processing of the request should be done.","In some embodiments, an appliance may be configured with one or more default execution orders for policy groups. For example, an appliance might have one or more global policy groups which are always applied first, followed by one or more appliance or vServer specific policy groups which are processed following the global policy groups. In some embodiments, policy banks may have a default ordering responsive to the functions the policy banks perform. For example, a policy bank of SSL policies may be applied first to incoming traffic, and then a set of security policies may be to the decrypted traffic, followed by a bank of content switching policies.","Referring now to , an embodiment of a method of flow control among policy groups used in a network device  processing a packet stream is shown. In brief overview, an appliance identifies a first policy group to apply to a received packet stream (step ). The appliance processes a first policy of the first policy group, where the first policy identifies (i) a rule specifying a first expression , and (ii) information identifying a second policy group (step ). The appliance evaluates the rule (step ). In response to the evaluation of the rule , the appliance processes the identified second policy group (step ). After processing the second policy group, the appliance processes a second policy  of the first policy group (step ).","Still referring to , now in greater detail, an appliance may identify a first policy group to apply to a received packet stream in any manner (step ). The packet stream may be received from any source and may comprise any protocol or protocols.","In some embodiments, the first policy may comprise an object-oriented expression. In other embodiments, the first policy may comprise a rule including at least one expression and\/or object-oriented expression. In some embodiments, the first policy  specifies an action to be taken based on an evaluation of the rule ","The information identifying a second policy group may comprise any form of identifying information. In one embodiment, the second policy group may comprise a policy bank, and the identifying information may comprise a name of the policy bank. In some embodiments, the information identifying the second policy bank may comprise an invocation action .","The appliance may process the first policy  in any manner (step ). The appliance may evaluate one or more object oriented expressions in processing the policy.","The appliance  may evaluate the rule in any manner (step ). In some embodiments, the appliance may evaluate an object-oriented expression . In some embodiments, the appliance may determine a boolean value corresponding to the rule.","In response to the evaluation of the rule , the appliance processes the identified second policy group (step ). In some embodiments, the appliance may only process the second policy group if the rule evaluates to true. In other embodiments, the appliance may only process the second policy group if the rule evaluates to a non-zero value. The appliance may process the second group in any manner. In some embodiments, the appliance may process the second policy bank beginning with a specific policy identified by an invocation action .","In some embodiments, after processing the second policy group, the appliance may process a second policy of the first policy group. For example, in , an appliance may evaluate the policy of line  in the policy bank . If the rule is true, the appliance may take the invocation action , and the appliance may process policy bank . After completing the processing of policy bank P, the appliance may return to the policy bank and process the next instruction, which is line . In some embodiments, the appliance may only resume processing the first policy bank if the second policy bank results in a soft stop, such as where the last instruction of a policy bank points a NEXT instruction, as in line  of policy bank . In other embodiments, the appliance may resume processing of the first policy bank even where a hard stop is indicated, such as line  of policy bank ","In some embodiments, the second policy group may also contain one or more invocation actions. In these embodiments, policy bank evaluations may be chained in any manner. In some embodiments, an appliance  may process a third policy group, where the third policy group is identified by a policy  in the second policy group. In other embodiments, the first policy bank may have a plurality of invocation actions . In these embodiments, the appliance may process a third policy group, where the third policy group is identified by a second policy  of the first policy group. In still other embodiments, the first policy  specifies a second policy  of the first policy group to be processed after the second policy group is processed. For example, a policy comprising an invocation action  may also comprise a flow instruction which specifies a policy of the first policy group to be processed after processing returns from the second policy group.","J. Systems and Methods for Database Proxy Request Switching","Referring now to , a system for providing database proxy services between one or more database servers and one or more application servers is depicted. An intermediary device of the system, such as an appliance, may select a database from a plurality of databases to forward a structured query language (SQL) query request based on a property of the SQL request. In brief summary, the appliance  may provide a plurality of services for facilitating and processing communications with databases or database servers , including but not limited to load balancing , health monitoring , authorization, authentication and auditing (AAA) , database caching , SQL firewall , content switching and policy-based transactions. In some embodiments, specialized network services available to web servers and application servers may be adapted to support a plurality of databases or database servers. For example, the packet switching system of an appliance may be configured or adapted to support database protocols, such as SQL, so as to provide some or all of these services.","The load balancer and\/or content switching module may include any embodiments of the switching features  described in embodiments of . The load balancer may include any embodiments of a vServer  to provide switching and\/or load balancing functionality. In any of these embodiments, the switching  and\/or vServer  may be designed and\/or constructed to perform any of the database proxying, switching and load balancing functionality described herein. In some embodiments, the load balancer manages switching between databases based on application one or more policies and policy expressions on a database request or query. Similarly, the appliance may provide content switching between databases, database servers and\/or connections based on application of one or more policies and policy expressions. For example and in one embodiment, a policy engine of the appliance may apply one or more policies on a received database message, such as a SQL query. A policy expression may, for example, parse or identify properties or parameters, such as user information, from the query and direct the query to a connection previously established (e.g., for the user) to a database. Thus, by using policy expressions, the appliance may be able to support user persistence for database communications with respect to a database connection, database, database server, and\/or core of the multi-core system. The appliance can similarly use policy expressions to maintain persistence with respect to a database, database server, database connection, etc.","The health monitoring module  may include any embodiment of the monitors described in conjunction with . The monitors may be designed and configured to support, provide and implement health monitoring of database services, database servers and\/or databases by the appliance  as described herein. The health monitors, in communication with one or more database services, database servers and\/or databases, may transmit and\/or receive messages using SQL or other database-based communications. The appliance may perform health monitoring based on policies and\/or policy expressions. For example, policy expressions may identify a database protocol, user, or other information for monitoring related to a particular query, set of queries, user, connection, database, protocol, and\/or database server. The appliance may provide health monitoring for various aspects of database communication and transaction by executing one or more vservers on the appliance. The appliance may associate one or more health monitoring policies to each of these vservers.","The SQL firewall may be part of or include any embodiment of the AppFW described herein, such as any embodiment of the AppFw  of . The SQL firewall may be designed and constructed to perform checking and protection of database communications traversing the appliance , such as checking SQL queries and responses. The SQL firewall may allow, deny, filter, redirect or otherwise process database communications responsive to applying one or more firewall policies. The firewall policies may include one or more features, such as embodiments of policy expressions substantially similar to policy expressions described above in connection with .","The database caching may include any embodiments of caching described herein, including but not limited to the cache management  functionality described in conjunction with . The cache management of the appliance may be designed and constructed to cache database-related objects, SQL queries and responses as described herein. The database caching may cache selected content based on one or more policies applied to a database query or data transfer. The one or more policies may include one or more features, such as embodiments of policy expressions substantially similar to policy expressions described above in connection with .","A database server may be a server or program that provides database services to other computer programs or hardware devices. A database server may include and\/or provide access to one or more databases. In some embodiments, a database server may be referred as a database. Database servers are sometimes referred to as database management systems (DBMS). Examples of database servers include Oracle, DB2, Informix, Ingres and Structured Query Language (SQL) servers. Although each server may use its own query logic and\/or structure, the SQL query language may be more or less the same across most database servers. Each database server may support one or more databases. A database server may include one or more features of a server  and\/or client , for example, embodiments of servers and clients described above in connection with .","A database may include one or more storage devices that supports particular data structures for holding information. In some embodiments, a database or database server may include a storage area network (SAN). By way of illustration, some of the commonly-deployed databases include MYSQL (e.g., open source), MICROSOFT SQL Server (e.g., popular with small to medium enterprises), Oracle (e.g., common in mission-critical deployments), PostgreSQL and DB2.","One or more servers or application servers  may be in communication with a database server  over one or more networks , \u2032. An application server may request data from a database server, or may send data to a database for storage. An application server may include one or more features of various embodiments of a server  or client , for example, embodiments of servers  and clients described above in connection with .","An intermediary device  or appliance  may support or facilitate communications between a server  and a database server , e.g., by providing one or more specialized services. These specialized services may be directed to supporting particular database protocols and\/or data transfer or access characteristics. In brief overview, the appliance may support one or more of the following features or services, though not limited to: (1) Connection Multiplexing, which can allow requests from multiple client connections to share one or many server-side connections, and may further support load balancing, content switching and connection pooling features; (2) Load balancing, which may use request tracking to provide least-connection-based load balancing to equally load database servers, or use other load balancing mechanisms including custom-load-balancing; Content Switching may be deployed in a master\/slave configuration to scale databases, e.g., parsing the SQL queries, and sending write queries (e.g., INSERT\/UPDATE\/DELETE) to the master and read queries to the slaves; properties of the SQL query may be exposed through application of one or more policies or policy expressions; (3) Monitors, which can be SNMP based and\/or SQL query based, which may include TCP monitors and monitors which describe the health of each database and\/or database server; (4) AAA, for example to provide a single audit point and\/or provide authentication for funneling requests from a single client side connection to different server-side connections; (5) Caching which can optimize web applications, for example using memcached, which may or may not involve modifying the application; (6) SQL Firewall for providing features such as SQL injection prevention; and (7) other features such as Rewrite, Responder, Compression and SSL offload.","In various embodiments, a server  or client  accessing a database may use a protocol of the database to communicate with the database server . Each database may have its own protocol, although in certain cases, the SQL language is common between a plurality of databases. Some of these protocols may be built on top of TCP and may be connection-based. The protocol structure, features, parameters and characteristics may parallel HTTP to a certain extent. For example, SQL is also request-response based. SQL protocol communications may involve an initial handshake for exchanging capabilities and\/or compatibilities in a client-server relationship. The handshake may also involve authentication of the \u201cclient\u201d. To support SQL protocol, the appliance may be configured to support properties associated with a client-server connection. Properties may be defined and\/or configured for an authenticated user. One or more properties may be parsed from a query (e.g., SQL query) and\/or identified based on the query. In some embodiments, an authenticated user is a user who has established a connection (e.g., client-server connection). Different permissions may be granted to different users. Accordingly, each connection may be associated with an authenticated user to prevent multiplexing of requests between different users. In a web application deployment, however, multiple clients (e.g., application servers) may have the same user. In using and supporting protocols like MYSQL, the appliance may be configured to change the user associated with a connection. The appliance may operate in a number of modes. In one mode, the client-side connection may be authenticated with respect to a user. In another mode, the appliance may operate and\/or reside transparently between the client and the server.","Properties may be defined and\/or configured for each database. Each database server may have the ability to host multiple databases. Each connection may be associated with a database. However, it may be undesirable or not possible for requests from different databases to be multiplexed on the same connection. The appliance may be configured to support creation of a connection without a database association. Such connections may be used to run commands which query the health of a server, for example. The appliance may be able to change the database associated with a connection.","Properties may be defined and\/or configured with respect to client-server capabilities. Each connection may have or support one or more associated client-server capabilities or properties, for example server version, protocol version, compression, ssl, transactions, character set, etc. Each of these capabilities or properties may be associated with, or define a connection. The appliance may be configured to prevent multiplexing of requests of connections with different capabilities.","Properties may be defined and\/or configured for compression and\/or SSL. Various database protocols may support compression and\/or SSL. For properties that do not support compression and\/or SSL, the appliance may be configured to provide graceful degradation. In some embodiments, one or more properties may be used to identify a connection for directing a query to an appropriate database or database server. The intermediary may determine, based on the one or more properties, a connection, database and\/or database server that is available and\/or suitable handling the query. For example, a particular existing connection may be able to support SSL or compression associated with one or more identified properties.","Properties may be defined and\/or configured for transactions. One aspect of a database connection is the presence of a transaction. Transactions can ensure that multiple SQL queries are treated as a single atomic query. If a connection to the database occurs in the middle of a transaction, queries from another client-side connection may be unable to multiplex onto the transaction and\/or connection. Transactions may be started by using the query \u201cBEGIN\u201d and terminated by using the query \u201cCOMMIT\u201d. In MYSQL, a connection can be made transactional during handshake by unsetting the autocommit bit, or by issuing the query \u201cSET AUTOCOMMIT=0\u201d. The appliance may support any version of MYSQL, including but not limited to, for example, version 4.1.","In some embodiments, the appliance may process or handle MYSQL packets. Every mysql packet may include a 4-byte header. This header may contain the size of the trailing body. The appliance may use this data structure to parse, extract and interpret the 4-byte header, e.g., to determine a packet type. The appliance can then parse the body of a MYSQL packet based on the packet type.","The appliance may determine the type and\/or characteristic of a MYSQL transaction. For example, the appliance may determine the value of the connection level AUTOCOMMIT parameter or the presence of BEGIN:COMMIT queries. The AUTOCOMMIT parameter may be set during the initial handshake. This parameter can also be set after connection establishment, e.g., using the query SET AUTOCOMMIT. In some embodiments, the appliance is configured to parse every query to determine the beginning and end of a transaction. The appliance may be configured, e.g., by a nsapimgr knob or control, to be transaction aware or not. The appliance may be configured by another knob or control, on whether to apply explicit parsing. This control may an option to avoid the processing overhead for parsing of every query.","In MYSQL protocol, a response may include flags to indicate whether a connection is in a transaction or not. If the connection is a transaction, the TRANSACTION flag is generally set. If the Autocommit mode is OFF, then the AUTOCOMMIT flag is not set. The appliance may parse the response for one or more of these flags. If the TRANSACTION flag is set or AUTOCOMMIT flag is not set, the appliance may not activate connection multiplexing. In some embodiments, connection multiplexing is activated by default if the above condition is not met.","A Mysql database server may support a plurality of character sets. The appliance may support a different number of character sets from that of the database server. The appliance may be configured to support a matching dataset with respect to the server during connection establishment. In some embodiments, the appliance may be configured or reconfigured to support a particular character set at any time by sending and\/or processing a query. In some embodiments, a character set is associated with a connection. The appliance may process requests on connections such that a request with one character set is not multiplexed onto a connection with a different character set.","The appliance may be built and\/or configured to parse queries sent by the client and results sent by the server. The appliance may make portions of each request and\/or response available to an administrator through policy expressions (e.g., Policy Infrastructure, PI expressions). In some embodiments, the appliance is built and\/or configured to support most or at least some character sets. The appliance may support some of the more commonly used data sets, e.g., UTF-18, ASCII and LATIN-x series. The character set associated with a connection can change after the initial handshake. This may be implemented by the appliance using one or more queries, such as:","SET NAMES <charset> COLLATION <collation>","SET CHARACTER SET <charset>","In some embodiments, the appliance includes an algorithm for character set handling. Character set handling may involve a first or initial character set which is identified during authentication. This character set may be used to parse messages, e.g., the uname\/db sent in the message. This character set may be used to parse messages, e.g., the uname\/db sent in the message. The server may assume that received queries are expressed using this character set. After authentication, the client can change the character set using one of a plurality of ways, for example, using the following commands or queries transmitted to the appliance:\n\n","If two or more queries are received on the same connection, e.g., SET NAMES and SET CHARACTER SET, the appliance may handle the potential conflict. By way of illustration and in one embodiment, a client may create a TCP connection to the appliance. The appliance may send a server hello message with a first character set (e.g., to vsvr\u2192charset, with default value: LATIN1). The client may send an authentication packet (e.g., AuthPkt) with charset C1. If, for example, the appliance determines that C1 is not an ASCII compatible encoding like LATIN1\/2\/5\/7 and C1 is not UTF8 (only supported types), the appliance may return an ERROR message. The appliance may set its supported character set to C1 (e.g., CPCB\u2192udb\u2192cset=C1). The appliance may then parse for parameters and\/or properties (such as uname\/db) using C1. The appliance may further handle certain queries that modify the state of the connection (such as SET\/PREPARE) so that these do not break request switching.","In some embodiments, responsive to receiving the latter queries, the appliance may respond back to the client with an OK response, but store the request onto the connection for separate or special processing.","By way of illustration, and not intended to be limiting in any way, the following pseudo code is one embodiment of a method for handling some of the above situations:",{"@attributes":{"id":"p-0410","num":"0427"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"if request from client is a Query"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"the query may be parsed using CPCB\u2212>udb\u2212>n_cset"]},{"entry":[{},"if command == \u2033SET\u2033"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if query == \u2033SET NAMES \u2032C2\u2032\u2033 && C2 is supported"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CPCB\u2212>udb\u2212>n_cset = C2"]},{"entry":[{},"Cpcb\u2212>udb\u2212>query_list << query"]},{"entry":[{},"Respond with OK"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"else if query == \u2033SET CHARACTER SET \u2032C2\u2032\u2033 && C2 is"]},{"entry":[{},"supported"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CPCB\u2212>udb\u2212>n_cset = C2"]},{"entry":[{},"Cpcb\u2212>udb\u2212>query_list << query"]},{"entry":[{},"Respond with OK"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else if query is valid"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cpcb\u2212>udb\u2212>query_list << query"]},{"entry":[{},"Respond with OK"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"move to ABORT_CONN_TRACK"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else if command == \u201cPREPARE\u201d \u2225 \u201cUSE\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"cpcb\u2212>udb\u2212>query_list << query"]},{"entry":[{},"Respond with OK"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"end"},{"entry":"..."},{"entry":"Content Switch\/Load Balance"},{"entry":"..."},{"entry":"Find Server connection(SPCB) with same UDB as the client"},{"entry":"if no SPCB found"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"send AuthPkt on a new SPCB"]},{"entry":[{},"for each stored_query in UDB\u2212>query_list"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"response = Send stored_query on SPCB"]},{"entry":[{},"if response is ERROR"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Close SPCB"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end"]},{"entry":[{},"response = forward query to server"]},{"entry":[{},"return response to client"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"else"},{"entry":"response = forward query to server"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return response to client"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"end"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In the above, UDB may represent a data structure that stores client properties such as username, database, charset, etc. When a connection is created to the backend server, a connection with the same UDB may be picked up from a connection re-use pool. A query list may also be checked when matching to a UDB. While parsing the query, CSET may be used as a default character set. The initial CSET may be set in the authentication packet. Following authentication, the appliance may change the value of CSET when commands like SET NAMES or SET CHARSET are received. In some embodiments, the appliance may store a plurality of queries for each connection. Beyond a predetermined number of queries, the appliance may trigger a special mode for handling, e.g., Abort Conn Tracking Mode.","In some embodiments, the appliance may handle some SQL commands in a modified or different manner, e.g., SET, USE <db>, INIT_DB, PREPARE and COM_PREPARE commands. SET SQL queries may be used to define variables and\/or properties which are associated with the connection. SET commands may be used to define global variables too. The appliance may apply a \u201cWTM off\u201d mode, e.g., to differentiate between global and local variable, or to handle conflicts. An user can change a database associated with a connection using the INIT_DB command or the USE query. In these cases, the appliance can parse the database value sent. Based on the determined database, the appliance can either (1) send a request to a corresponding server, (2) wait for an OK message and then set the database associated with the connection to the determined database, or (3) generate the OK message itself. If the appliance is in the middle of a transaction, the appliance may in some embodiments send the query directly to the server. The above behavior may be controlled via an API knob. The PREPARE or COM_PREPARE queries or commands may be used to create prepared statements associated with a connection. For the PREPARE or COM_PREPARE queries, the appliance may operate in a WTM off mode.","In some embodiments, the appliance may support connection multiplexing. The appliance may track the beginning and end of each SQL request and response, e.g., similar to that in HTTP requests and responses. The appliance may track this by accumulating and\/or parsing incoming request data until the appliance determines the server for sending the request to. In some embodiments, at least the request header is accumulated in this process. Once the server is selected or identified, the appliance may identify or select a back-end connection from the server-side pool. The appliance may link the back-end connection to the client connection. The server-side connection may be selected based on corresponding or matching properties or parameters (e.g., user\/db\/capabilities). In situations where there is lack of a matching connection, a new back-end connection may be established. In some embodiments, the new connection is established if the appliance is in authentication mode.","In some embodiments, the appliance forwards the request to the identified server. The appliance may forward the response from the server to the client. When the complete request\/response has been transmitted, the appliance may process the connections (e.g., client and\/or server side connections) for reuse (e.g., using an init(Client\/Server)ForReuse process). The appliance may delink or decouple the client-server connections. The delinked or decoupled connections may be placed in queues (e.g., serverinfor queues). These connections may be further segregated based on parameters such as user, db, capabilities, etc.","The appliance may provide authentication services to database protocol connections. The appliance may operate in a Transparent Mode. In the transparent mode, the appliance may create a connection between the client and the server that is end-to-end. In this case, when a client connects to the appliance, a connection to the server is created concurrently. The appliance may serve as a bridge for the authentication process, while the authentication occurs on the server. When the authentication is complete, the appliance can decouple the two connections and place them in the reuse pool. In some embodiments, a user may not need to configure any credentials on the appliance, possibly reducing friction involved in deployment. Monitors may be limited to TCP\/SNMP-based monitors in the absence of available credentials.","In some embodiments, the appliance may operate in Authentication Mode (e.g., instead of Transparent Mode). An administrator may configure database users on the appliance as SQL users. The appliance may authenticate the client side connection. The appliance may provide credentials for server-side connections. In this mode, the appliance may define or add SQL user as a new type of user, e.g., to distinguish from AAA-type user. This may avoid the situation where a user tries to login via AAA\/VPN using the credentials of a database user (i.e., SQL user) and vice versa.","In some embodiments, the appliance may provide load balancing features. Some of these features may be adapted from pre-existing features described above. By way of illustration, load balancing in the Transparent Mode may involve selection of a server with a matching server-side connection that is available. The appliance may select from one of a plurality of servers providing access to a requested content, file or type of data. The appliance may select from one of a plurality of servers that is consistent with, or supports the properties identified based on the received query. The appliance may select from one of a plurality of connections that is consistent with, or supports the properties (e.g., character set) identified based on the received query. The appliance may select one of the plurality of servers and\/or connections for handling the query based on application of a policy on one or more properties identified. In certain embodiments, the appliance may select one of a plurality of servers and\/or connection that supports a transaction type identified based on one or more received queries.","The appliance may select one of the plurality of servers and\/or connections that is presently not handling any queries, or handling fewer queries than another server and\/or connection. By way of illustration, the appliance may determine that one or more queries have been buffered\/stored for a first connection or database server, and may select another connection or database server for handling a new query. The appliance may reconfigure a selected connection based on the query and\/or one or more properties identified. In some embodiments, the appliance may establish a new connection for sending the query to the selected database server.","In some embodiments, the appliance may provide content switching features. The appliance may provide one or more database-related content switching policies adapted from available content switching policies. The content switching policies may use various rules or conditions to select a server, e.g., via connection characteristic, command parameters, properties or information based on an SQL query. These types of information may be parsed, tested or exposed using policy expressions.","The appliance may be configured to support various policy expressions for supporting database queries and transactions. Various types of information or properties may be exposed through policy or PI expressions, e.g., via a policy engine of the appliance. The policy expressions may include one or more features of policy expressions described above in connection with . Policy expressions configured for HTTP or other protocols may be adapted for SQL.","One classification of properties or information that an appliance may expose through policy expressions is connection characteristics. Connection characteristics may include data associated with a database connection. Since each of the connection characteristic data point may be dependent on the respective database protocol, each data point may be name-spaced in connection with the respective protocol. Examples of policy expressions for connection characteristics include:\n\n","Another classification of properties or information that an appliance may expose through policy expressions is command parameters. Command parameters may include characteristics of the actual request. Command parameters may be protocol specific and hence may incorporate protocol specific namespacing. Examples of policy expressions for command parameters may include:\n\n","Yet another classification of properties or information that an appliance may expose through policy expressions is based on SQL Query Information. Data manipulation on a database may be carried out using SQL queries. The grammar for these queries are mostly standard for databases. In some embodiments, there are different approaches for exposing SQL queries to the user through policies. One approach may be to expose the entire query string to the user and allow the user to make decisions using existing string manipulation functions. Another approach may involve parsing the query and exposing parts of the query using policy expressions. One non-limiting example of a SQL query is:",{"@attributes":{"id":"p-0424","num":"0449"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SELECT","COL1,COL2","FROM TABLE1","WHERE CONDITION1;"]},{"entry":["(command)","(selectpart)","(frompart)","(wherepart)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Each section of the SQL query may have an associated name. These names we may be used in or identified using policy expressions. Examples of policy expressions based on SQL query information include:\n\n","Another classification of properties or information that an appliance may expose through policy expressions is Response Parameters. Response parameters, such as server status and error numbers, may be exposed through expressions. Expressions for rows and field set can also be exposed. To expose the individual column, the appliance can be configured to use terminology similar to JDBC, where the datatype of the column may be known to the user. If the datatype of the column sent by a server is different from that of the expression, an undefined return value (e.g., UNDEF) may be raised. NULL columns may be checked using an IS_NULL( ) expression, for example. Examples of policy expressions based on response parameters include:\n\n","In view of the policy expressions described above, as well as in connection with , an appliance can be configured to provide various database proxy services. For example, policy expressions configured for HTTP or other protocols may be adapted for SQL. The appliance may provide and manage content switching and\/or load balancing between connections, databases and\/or database servers by applying policy expressions to parse database communications received by the appliance. Via policy expressions, for example, a policy of the appliance may provide user persistence by directing database queries from the same user to a single database connection. An appliance may manage switching between databases by applying one or more policies on a query to identify related information managed via multiple databases and\/or database servers. An appliance may also provide health monitoring with respect to database queries of a particular user by using policies to identify the databases, connections and\/or database servers that a user uses within a session.","In some embodiments, the appliance may identify that a SQL query is made across multiple packets. The appliance may parse any portion of a query, which may include one or more packets, only to the extent identified by a policy or needed for a particular operation. For example, the appliance may identify a database servers by parsing a first keyword of the query (e.g., in a first packet of the query) via policy expressions. The appliance may associate the database server with the query without inspecting the other packets of the query, thereby providing server persistence. This decision-making based on inspecting a first packet of a query may also reduce processing latency. In doing so, the appliance may be able to improve efficiency and performance in processing database queries. In some embodiments, the appliance uses query hashes to provide persistency to the server, e.g., similar to the mechanism employed in HTTP URL Hash Persistence. The appliance may parse a SQL hash and reduce server load by sending the same query to the same server.","In some embodiments, the appliance may provide a centralized log for database operations and\/or communications. The appliance may perform logging (e.g., database audit logging) based on policies. For example, policy expressions may identify a database protocol, user, or other information for logging particular query or set of queries. Similarly, the appliance may perform tailored health monitoring using policies and policy expressions.","Although much of SQL is standard, each database implementation may include many proprietary elements. To support various database implementations, the appliance may provide different policy expressions for each implementation. By way of illustration, at least some of the policy expressions described above are MYSQL policy expressions. Some of these policy expressions may be used with or adapted for other databases.","In some embodiments, the appliance supports nested queries. A SQL query can contain nested SQL queries, for example:","SELECT t1.* from (select * from t2) as t1;","where the portion in parenthesis is a nested query. One method would be expose this as a string. Another method is to support a construct (e.g., \u201cTYPE_CAST_TO_SQL_QUERY\u201d) which can treat a string as a SQL query and then allow any part of it to be accessible to the user through the earlier mentioned policy expression.","In some embodiments, the appliance supports multiple queries in single command. Such a single command packet can contain multiple SQL queries which are separated by a separator (e.g., \u201c;\u201d). The appliance can provide a control or knob to a user, to indicate to the appliance whether to parse each query to determine the presence of multiple queries.","In some embodiments, a substantial portion of requests to a database are SQL queries. The appliance may parse these queries for tracking transactions. If a policy has been configured which references a part of the query, the appliance will parse the query. In some embodiments, the appliance may parse only the portion of a query being referenced in a policy. Various sections of the query may be determined based on the presence of certain keywords like FROM, WHERE, INTO, etc. For example if a FROMPART of a query is needed, then the part of the query extending to the end of FROMPART may be parsed. In some embodiments, this parsing is performed in a streaming manner, e.g., for efficiency reasons. The state of the parser may be stored in a parameter, SqlInfo, which is similar to HttpInfo for the HTTP protocol.","In some embodiments, the appliance can monitor the health of various database servers using one or more types of monitors. The monitors may include one or more features of embodiments of monitors described above in connection with . The appliance may use a TCP Monitor. This form of monitoring indicates if the database server is up or not. In some embodiments, most if not all services (e.g., including database-related services) may be monitored using a TCP monitor. In some embodiments, the appliance may use a SNMP Monitor. Database servers may expose information through SNMP. In some embodiments, a user may be able to determine the status of a server based on SNMP. In certain embodiments, an appliance may use a SQL Query Monitor. The status of database servers can be determined by first sending custom SQL queries and then inspecting the response. Such monitors can be configured on an appliance by using user-space monitors. The appliance may be configured with adequate libraries for a user to include such monitors. In cases where user space monitors are already be present, the appliance may also provide native monitors. These monitors may receive information about an SQL user, a query and\/or a PIRL expression, and inspect the response to determine server status. For SQL query monitors, the appliance may provide policy expressions to read the response. By way of illustration, one embodiment of a command for adding a SQL monitor is as follows:","add lb monitor mysql_mon MYSQL -sql_user my_user -sql_db my_db -sql_charset utf8-sql_query \u201cSELECT * FROM table1\u201d-up_condition \u201cMYSQL.RES.ROWS[0].COLUMN[0]==1\u201d","In certain embodiments, since database protocols differ between one another, an appliance may distinguish a corresponding service from each database protocol to be of a different service type. In some embodiments, various services of an appliance may be configured as follows:","add lb vserver lb1 MYSQL|SQLSVR|ORACLE . . . -authentication ON|OFF","add cs vserver cs1 MYSQL|SQLSVR|ORACLE . . . -authentication ON|OFF","add service svc1 MYSQL . . .","bind lb vserver lb1 svc1","add cs policy cspol1-rule \u201cSQL.COMMAND==\\\u201cSELECT\\\u201d\u201d","bind cs vserver cs1 lb1-policy cspol1-priority 10","add sql user user1-password pass1","In some embodiments, by way of illustration, the appliance handles and\/or facilitates handshake and\/or authentication between a client (e.g., a client or server device) and a server (e.g., database server) as follows. In certain embodiments, the appliance may act as a \u201cclient\u201d in communication with a database server. The appliance may also operate (e.g., issue or modify requests) on behalf of a client accessing a database of a database server.","Referring to , one embodiment of a method for providing database proxy services is depicted. In brief overview, the method includes the step of establishing, by an appliance intermediary between a database server and a client, a connection to a database server (). The database server sends a server hello packet to the appliance (). The appliance may send a client authentication packet in response to the hello packet (). The server may generate a response (). Responsive to completion of authentication, the appliance may send one or more request packets ().","In further details of , an appliance intermediary between a database server and a client establishes a connection to the database server. In some embodiments, when the appliance initiates or establishes a connection to the database server, the server may perform handshaking and\/or authentication with the appliance. The server (e.g., database server) may send a hello packet (). In some embodiments, the database server sends a hello packet with one or more of the following details:\n\n","In some embodiments of . the appliance may send a client authentication packet in response to the hello packet. The client or appliance may send a client authentication packet in response to the hello packet. The client authentication packet may include the following parameters or information:\n\n","In certain embodiments, the server may generate a response. In some embodiments, the server may generate and send a response to the appliance. This response may be an OK packet or an Error packet. In some embodiments, the response includes a result packet. The response packet can be of one or a plurality of types. The type of response may be determined by the first byte of the packet, for example.","In some embodiments, the server may generate an OK response. This type of response may indicate that the operation was successful. In case of write commands, the command may also include the number of rows affected (e.g., the number of database rows written to). This response may include a server status field. If the response is an Error packet, the connection may be closed or terminated, e.g., by the client, server and\/or appliance .","In some embodiments, the server may generate an ERROR response. This message may be returned in case of a failure. The message may include an error code field that the appliance can interpret to identify the type and\/or source of the failure, any other information related to the failure, and\/or actions to take in view of the failure. The OK packet may, in some embodiments indicate completion of authentication for the requesting client or user.","In some embodiments, the server may generate a response including a result set. The result set may be generated responsive to a command from the client. The result set may comprise multiple packets which may be sent in the following order: (1) Result Set Header Packet: the number of columns, (2) Field Packets: column descriptors, (3) EOF Packet: end of Field Packets, (4) Row Data Packets: row contents, and (5) EOF Packet: end of Data Packets. The appliance may monitor the state of the packets in the result set. The second EOF may indicate the completion of the response.","The appliance may parse and\/or process the received packets to interpret or identify the type of each packet. In case of packets related to monitors, data included in the packets may be parsed and\/or interpreted, e.g., to obtain the health and\/or status of a database. In some embodiments, the appliance is able to first ascertain a need to parse a packet (e.g., based on identification of the packet) before parsing the packet. Some of these embodiments are similar to how the appliance performs HTTP body parsing.","In further details of , responsive to completion of authentication, the appliance may send one or more request packets. In some embodiments, the appliance or client may send one or more request packets. A request packet may be referred to as a command packet in some embodiments. Each request packet may be one of a plurality of types of request. The first byte of this packet may indicate or define the type of the request. By way of illustration and not intended to be limiting, some of the various types of requests or commands may include:\n\n","Referring to , one embodiment of a method for selecting by an intermediary device a database from a plurality of databases to forward a structured query language (SQL) query request based on a property of the SQL request is depicted. In brief overview, the method includes the step of establishing, by a device intermediary to a plurality of clients and a plurality of databases, a plurality of connections to the plurality of databases (). The device may receive, from a client of the plurality of clients, a request to execute a structured query language (SQL) query (). The device may evaluate, responsive to a policy, one or more properties of the request to execute the SQL query (). The device may select a database from the plurality of databases based on a result of evaluation of the one or more properties of the request to execute the SQL query (). The device may forward the request to execute the SQL query to the selected database via a connection of the plurality of connections ()","In further details of , a device intermediary to a plurality of clients and a plurality of databases may establish a plurality of connections to the plurality of databases or database servers (generally \u201cdatabases\u201d). In some embodiments, the device establishes a connection to a database responsive to receiving a query in connection with the database. For example, the device may determine that the query is addressed\/directed to the database, or can be appropriately processed by the database. In certain embodiments, the device establishes a connection to a database, operating as a proxy of the database. The device may establish a plurality of connections to a plurality of databases to operate as a switch (e.g., access or content switch) between the databases. The device may establish a connection to a database to provide, facilitate, protect, control and\/or manage access to the database. In some embodiments, () may incorporate any of the steps or features discussed above in connection with () of .","In various embodiments, the device may establish a connection to each database server. In some embodiments, the device may establish a connection to each database residing in, or accessed via one or more database servers. Some database servers or databases may support certain character sets. The appliance may be configured to support a number of character sets, some of which may match, or is compatible with, that of certain database servers. In some embodiments, the appliance may be configured to support a matching dataset with respect to a respective database server during connection establishment.","The device may establish a pool of connections to each database of the plurality of databases. The pool of connections may include connections supporting different properties and\/or variants of SQL protocol. The pool of connections may include active connections (e.g., actively handling communications) and inactive connections. The pool of connections may include some connections that are available for reuse from a previous communication session (e.g., database query or transaction). In some embodiments, the device may transmit different queries to the same database over different connections to the database. The device may multiplex, distribute or redirect SQL requests\/queries from a plurality of clients, via the pool of connections, to one or more databases of the plurality of databases.","Referring now to (), the device may receive, from a client of the plurality of clients, a request to execute a structured query language (SQL) query. The device may receive the SQL query as a proxy for a database server. In some embodiments, the device intercepts all or some queries or requests transmitted from a client. For example, the device may be configured to intercept SQL queries or requests from a client. The device may proxy and\/or process the SQL queries or requests. In some embodiments, the device performs load balancing across connections, databases and\/or database servers responsive to receiving a plurality of queries or requests from one or more clients.","The device may receive the SQL query or request in any type or form of communication packet, frame or message. The device may parse and\/or process received packets to interpret or identify the type of each packet. For example, the device may determine that a message includes a query in MYSQL or any other type of database protocol. The device may recognize or determine that the message or request includes a SQL query or request, for example, by parsing some portion of the message or request (e.g., header information). The device may engage in an initial handshake with the client for exchanging capabilities and\/or compatibilities in a client-server relationship. The handshake may include authentication of the client. In some embodiments, the device determines that a message or request is a SQL message based on the handshaking process. The device may determine that a message or request may include a SQL message based on an identification of the destination (e.g., destination address is an IP address of a database server) and\/or connection (e.g., a connection ID of a connection that supports properties of a SQL query).","In some embodiments, a SQL firewall of the device may perform checking and protection of database communications traversing the device, such as checking SQL queries and responses. The SQL firewall may allow, deny, return, filter or redirect a database query from a client, e.g., by applying one or more firewall policies. In some embodiments, the device may authenticate a user and\/or client side connection to the device. The device may provide an audit point and\/or authentication for funneling requests, e.g., from one or more client side connections to different server-side connections. The device may recognize or support a SQL user as a new type of user, e.g., to distinguish from a typical AAA-type user. The device may authenticate a SQL user using SQL or database-specific policies prior to assigning a server-side connection to transmit a query of the user. The device may apply SQL or database-specific policies in response to receiving a query from a SQL user.","In further details of (), the device may evaluate, responsive to a policy, one or more properties of the request to execute the SQL query. The device may parse queries sent by one or more clients. The device may expose and\/or make portions of each request and\/or response available to an administrator through policy expressions. The device may determine a type, property and\/or characteristic of a SQL transaction or query. The device can then parse the body of a SQL packet based on the packet type. The device may parse a query to identify a character set of the query (e.g., extract the value of C2, to associate with a corresponding connection for example). In certain embodiments, the appliance processes multiple queries in single command or packet. In some embodiments, the device can parse and\/or evaluate nested SQL queries, and may evaluate the queries according to the nested sequence.","In some embodiments, the device manages switching and\/or load balancing between databases based on application of one or more policies and policy expressions on a database request or query. The device may identify or determine one or more properties related to the client, query and\/or database, for example, based on information extracted from the query and\/or the type of the query. One or more properties may be used by the device to identify a connection for directing a query to an appropriate database or database server. For example and in some embodiments, a character set identified based on a SQL query may be associated with a connection. The device may determine, based on the one or more properties, a connection, database and\/or database server that is available and\/or suitable handling the query. For example, the device may determine, via application of a policy or otherwise, that a particular existing connection is able to support SSL or data compression associated with one or more identified properties.","In certain embodiments, to support various database implementations, the appliance may provide different policy expressions for each implementation. The appliance may create, store, maintain, manage, select and\/or enforce policies for processing a database query. The appliance may maintain and\/or select particular policies directed to certain types of SQL queries and\/or properties associated with received SQL queries. Responsive to a policy, the device may evaluate one or more properties of the request to process or redirect the SQL query. In some embodiments, the policy may specify an expression (e.g., policy expression) to evaluate the one or more properties. The one or more properties, may include a characteristic of a database connection for the request to execute the SQL query. The one or more properties or characteristics may, for example, include one or more of the following: identification of an authenticated user, a name of the database, a character set sent by the client and client's capabilities. Other embodiments of properties that can be evaluated are described above in connection with .","The one or more properties or characteristics may, in certain embodiments, include one or more command parameters of the request for the SQL query. A command parameter may include one or more of the following: a size of the request and a type of command. Some embodiments of command parameters are described above in connection with . In some embodiments, the policy may specify an expression to evaluate the one or more properties of the request to execute the SQL query, comprising a grammar part and a data part of the SQL query. Embodiments of these properties are described above in connection with .","Referring now to (), the device may select a database from the plurality of databases based on a result of evaluation of the one or more properties of the request to execute the SQL query. The device may select a database that matches or is compatible with the capabilities of the client and\/or SQL transaction. For example, the device may select a database that supports a character set indicated by the request or query. The device may select a database based on availability of data or content requested by the client. In some embodiments, the device may select a database from the plurality of databases based on any one or more of the following: an address or identifier of the database in the request, the level of access provided to the authenticated user, the availability of a suitable connection to the database, the proximity and\/or availability of the corresponding database server, and the load on the corresponding database server.","In some embodiments, a load balancer of the device selects the database from the plurality of databases. For example, the load balancer may select a database based on least connection load balancing (e.g., the number of active and inactive connections to the database, the total number of connections to the database), availability of the respective database server, available bandwidth on a connection to the database, the amount of SQL queries processed by the database server, the number of queries buffers or queued for the database or database server, and\/or other properties determined based on the request. The device may select from one of a plurality of database servers providing access to a requested content, file or type of data. The device may select from one of a plurality of servers that is consistent with, or supports the properties identified based on the received query. The device may select from one of a plurality of connections that is consistent with, or supports the properties (e.g., character set) identified based on the received query.","The device may select one of the plurality of servers and\/or connections for handling the query based on application of a load balancing or other policy on one or more properties identified. In certain embodiments, the device may select one of a plurality of servers and\/or connection that supports a transaction type identified based on one or more received queries. The device may select one of the plurality of servers and\/or connections that is presently not handling any queries, or handling fewer queries than another server and\/or connection. By way of illustration, the device may determine that one or more queries have been buffered\/stored for a first connection or database server, and may select another connection or database server for handling a new query.","In some embodiments, the device determines, responsive to the result of the evaluation, that the request to execute the SQL query comprises a write query. The device may select a database that includes a master database in a master and slave configuration. In some embodiments, the device determines, responsive to the result of the evaluation, that the request to execute the SQL query comprises a read query. The device may select a database that includes a slave database in a master and slave configuration. In certain embodiments, the device determines, responsive to the result of the evaluation, that the SQL query is directed to a database corresponding to one or more of: a current connection, a present SQL transaction, a predetermined user, a predetermined database name and a predetermined table.","In certain embodiments, by recognizing certain properties using policy expressions, the device may be able to support user persistence for database communications with respect to a database connection, database, database server, and\/or processing core (e.g., of a multi-core system in the device for handling SQL communications). The device can use policy expressions to maintain transaction persistence for a group of SQL communications, with respect to a database, database server, database connection, etc.","In further details of (), the device may forward the request to execute the SQL query to the selected database via a connection of the plurality of connections. In certain embodiments, the device selects a database that has a suitable connection to convey the request (e.g., secured with SSL). In some embodiments, the device selects a connection or establishes a connection to the database after selecting the database. In some of these embodiments, the device selects an available connection to the selected database, e.g., from a pool of established connections. The device may reconfigure an available connection to the selected database, e.g., based on the one or more properties identified. For example, the one or more properties may request SSL or local caching features to be supported. The device may select a connection that supports the requested features, or reconfigure a connection to support the requested features.","In some embodiments, the device may grant different permissions to different users (e.g., based on the identified properties). The device may assign a particular connection (e.g., supporting a certain level of access permissions) to an authenticated user to prevent multiplexing of requests between different users with different access permissions.","In certain embodiments, the device may select a connection based on a UDB of the client. The UDB may represent a data structure that stores client properties such as username, database, character set, etc. The device may select a connection that matches the UDB of the client from a pool of connections (e.g., a connection re-use pool), when making a server-side connection to the database. In some embodiments, the appliance may reconfigure a selected connection based on the query and\/or one or more properties identified. In some other embodiments, the appliance may establish a new connection for sending the query to the selected database server.","In some embodiments, the device may store or buffer a plurality of queries for each connection. When the device determines that a predetermined number of queries has been accumulated or stored, the device may trigger a special mode for handling, e.g., Abort Conn Tracking Mode. In some embodiments, in response to the determination, the device may forward the queries in batch mode via the assigned connection.","By way of illustration of the methods described herein, the device may perform connection multiplexing between a plurality of databases. The device may track the beginning and end of each SQL request and response. The device may accumulate and\/or parse incoming request data until the device determines the appropriate server for sending the request to. In some embodiments, the device accumulates the request header in this process. Once the server is selected or identified (e.g., via a policy determination based on properties identified in the request header), the device may identify or select a back-end connection from the server-side pool. The device may link the back-end connection to the client connection. The server-side connection may be selected based on corresponding or matching properties or parameters (e.g., user, client and\/or database capabilities). In situations where a matching connection is not available, a new back-end connection may be established by the device.","It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or, in some embodiments, on multiple machines in a distributed system. In addition, the systems and methods described above may be provided as one or more computer-readable programs or executable instructions embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk, a hard disk, a CD-ROM, a flash memory card, a PROM, a RAM, a ROM, or a magnetic tape. In general, the computer-readable programs may be implemented in any programming language, such as LISP, PERL, C, C++, C#, PROLOG, or in any byte code language such as JAVA. The software programs or executable instructions may be stored on or in one or more articles of manufacture as object code.","In view of the structure, functions and apparatus of the systems and methods described here, the present solution provides a dynamic, efficient and intelligent system for providing database proxying and switching. Having described certain embodiments of methods and systems for providing the monitoring in a multi-core system, it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the invention may be used. Therefore, the invention should not be limited to certain embodiments, but rather should be limited only by the spirit and scope of the present disclosure."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["The foregoing and other objects, aspects, features, and advantages of the invention will become more apparent and better understood by referring to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1D"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 1E-1H"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6D"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 6E"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 7D"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 7E"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 7F"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7G"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 8C"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 10A"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 10B"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 12A"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 12B"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 12C"}]},"DETDESC":[{},{}]}
