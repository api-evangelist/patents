---
title: Value templates in animation timelines
abstract: Methods and systems for animation timelines using value templates are disclosed. In some embodiments, a method includes generating a data structure corresponding to a graphical representation of a timeline and creating an animation of an element along the timeline, where the animation modifies a property of the element according to a function, and where the function uses a combination of a string with a numerical value to render the animation. The method also includes adding a command corresponding to the animation into the data structure, where the command is configured to return the numerical value, and where the data structure includes a value template that produces the combination of the string with the numerical value. The method further includes passing the produced combination of the string with the numerical value to the function and executing the function to animate the element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08982132&OS=08982132&RS=08982132
owner: Adobe Systems Incorporated
number: 08982132
owner_city: San Jose
owner_country: US
publication_date: 20110228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS","Copyright Notice","Introduction","An Animation Software Program","A User Interface","Declarative Timeline Data Structures","Parameterized Timelines","Property\/Attribute Value Templates","A Computer System"],"p":["This specification relates to computer programming, and, more particularly, to value templates in animation timelines.","Some animations or multimedia presentations may include one or more \u201cactors\u201d (e.g., images) performing various tasks, movements, or transitions on a \u201cstage\u201d (e.g., a screen or display). For example, a relatively simple animation may include a transition that hides or shows an object in a computer window. Meanwhile, a more complex animation may include a set of two or more actors (e.g., images of human characters), each actor having a set of elements (e.g., head, arms, body, legs, etc.) that may be displayed in a coordinated or choreographed manner to give the viewer the impression that the actors are moving (e.g., walking, jumping, etc.) across the screen.","In traditional timeline-based animation applications, in order to create more than one hide or show transition for more than one actor, a designer has traditionally taken one of two approaches. First, the designer may perform the animation completely in software code. Alternatively, the designer may create an animation on a timeline for each transition\/actor combination, and then use software code to programmatically jump to a selected place in the timeline in order to execute the appropriate combination.","This specification is related to systems and methods for generating, using, and\/or executing timelines in an animation application (e.g., animation design software, website development program, Internet browser, etc.) using value templates. In some embodiments, the timeline techniques described herein may be used to manipulate and choreograph any technology available via JavaScript, for example, including audio, video, DOM elements (e.g., XML, HTML, SVG, etc), other JavaScript functions and libraries (including those that manage drawing into bitmap elements such as Canvas). These techniques may also be used to manipulate properties on an Internet browser (e.g., viewport scroll position, window title or window dimensions) and\/or to trigger communication between frames, windows, or a client and a server.","In some embodiments, a method may include generating a data structure corresponding to a graphical representation of a timeline and creating an animation of an element along the timeline, where the animation modifies a property of the element according to a function, and where the function uses a combination of a string with a numerical value to render the animation. The method may also include adding a command corresponding to the animation into the data structure, where the command is configured to return the numerical value, and where the data structure includes a value template that produces the combination of the string with the numerical value. The method may further include passing the produced combination of the string with the numerical value to the function and executing the function to animate the element.","In some embodiments, the function may include a Cascading Style Sheets (CSS), a Scalable Vector Graphics (SVG) function, or the like. Moreover, certain techniques disclosed herein allow an animation program to generate formatted property\/attribute values for use during each update step of an animation. As such, these techniques allow developers and\/or users to animate complex CSS properties and DOM attributes, for example.","In other embodiments, a computer-readable storage medium may have instructions stored thereon that, upon execution by a computer system, cause the computer system to receive a request to render an animation and parse a command within a data structure corresponding to the animation, where the command is configured to output a numerical value, and where the data structure includes a value template that produces a modified version of the numerical value. The instructions may also cause the computer system to execute the command and render the animation, at least in part, by providing the modified version of the numerical value to a function configured to apply the modified version of the numerical value to an object property.","In yet other embodiments, a system may include at least one processor and a memory coupled to the at least one processor, where the memory stores program instructions, and wherein the program instructions are executable by the at least one processor to receive a request to render an animation. For example, the animation may include a timeline data structure, and the timeline data structure may include a plurality of commands. The program instructions may be executable to also cause the processor to parse the plurality of commands, execute at least one of the plurality of commands, and in response to the execution, receive an output property value. The program instructions may be executable to also cause the processor to add a string to the output property value defined by a value template declared within the timeline data structure to create a modified output property value and pass the modified output property value to a library function.","While this specification provides several embodiments and illustrative drawings, a person of ordinary skill in the art will recognize that the present specification is not limited only to the embodiments or drawings described. It should be understood that the drawings and detailed description are not intended to limit the specification to the particular form disclosed, but, on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description. As used herein, the word \u201cmay\u201d is meant to convey a permissive sense (i.e., meaning \u201chaving the potential to\u201d), rather than a mandatory sense (i.e., meaning \u201cmust\u201d). Similarly, the words \u201cinclude,\u201d \u201cincluding,\u201d and \u201cincludes\u201d mean \u201cincluding, but not limited to.\u201d","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by any one of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","This detailed description first discusses an illustrative animation software program, followed by an example of a graphical user interface for such a program. The description then discloses various techniques for creating and processing declarative timeline data structures, as well as by techniques for parameterizing those timelines. The specification further discloses techniques for using value template within timelines. Lastly, the description discusses a computing system configured to implement certain embodiments disclosed herein. The term \u201canimation,\u201d as used throughout this specification, may include an animation, graphical presentation, multimedia content, advertisement, motion picture, film, movie, cartoon, or the like.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by a person of ordinary skill in the art in light of this specification that claimed subject matter may be practiced without necessarily being limited to these specific details. In some instances, methods, apparatuses or systems that would be known by a person of ordinary skill in the art have not been described in detail so as not to obscure claimed subject matter.","Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification, the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here, and is generally, considered to be a self-consistent sequence of operations or similar signal processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification, therefore, a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals, typically represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the special purpose computer or similar special purpose electronic computing device.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1","FIG. 13"],"b":["112","120","122","112","112"]},"To design a new animation, animation engine or module  may receive user input  requesting that a new animation file or project be created. Thereafter, the user may request, for example, that one or more input objects  (e.g., an image, sound and\/or video clip) be added to the animation. Examples of image files and formats include JPEG, JFIF, TIFF, RAW, PNG, GIF, BMP, CGM, SVG, PNS, and JPS, among others. The user may then continue to interact with animation engine , for example, by changing a property (e.g., a position, color, font, background, opacity, etc.) of the newly added image over time, which may be graphically represented in a \u201ctimeline.\u201d Once the animation is complete, the animation engine may create output animation  and store it in storage medium . As described in more detail below, storage medium  may include a system memory, a disk drive, DVD, CD, etc. Additionally or alternatively, animation engine  may retrieve input animation  from storage medium  to allow the user to further develop an existing animation or file.","In some embodiments, animation engine  may include a number of routines, algorithms, functions, and\/or libraries that expose an application programming interface (API) that allows a user to create an animation, presentation, multimedia file, or the like. For example, in a case where output animation  is encoded in a HyperText Markup Language (HTML) file for display on a web browser or the like (e.g., Internet Explorer\u00ae, Firefox\u00ae, Safari\u00ae, Chrome\u00ae, etc.), animation engine  may include implementations of scripting languages (e.g., JavaScript) and associated libraries (e.g., jQuery) that allow the user to encode an animation within an HTML file using a particular API. More generally, animation engine  may include software code that allows the user to implement any number of technologies such as, for example, HTML, Java, JavaScript, Cascading Style Sheets (CSS), Scalable Vector Graphics (SVG), Canvas (a procedural model that updates bit maps in HTML), etc. that may be suitable for animating content. In some embodiments, the functions disclosed in the sections presented below may be performed by animation engine  implemented by program instructions stored in a computer-readable storage medium and executable by one or more processors (e.g., one or more CPUs or GPUs).","Animation engine  may further include a layout engine (not shown) to enable the rendering of web pages or the like. For example, in certain embodiments, animation engine  may include a WebKit module that is configured to display of web content in windows, executes JavaScript, and also to implement other browser features (e.g., clickable links, etc.). In other embodiments, however, any other suitable rendering engine may be implemented as part of animation engine .","Turning to , an illustrative user interface (UI)  of an example software program configured to implement various systems and methods disclosed herein is depicted. In some embodiments, UI  may be implemented as user interface  of animation engine  described in . As shown, UI  includes menu  that allows selection of a design view, code view, or preview view. The selected view (\u201cdesign,\u201d in this case) may be bolded to indicate the current state of UI . When in design view, UI  may display a variety of menus, windows or panels (e.g., -), and\/or toolboxes (e.g., ) that allow a user to create or develop an animation, presentation, advertisement, motion picture, or the like. The code view may display resulting software code (e.g., HTML) that may be rendered or executed to reproduce the animation, whereas the preview view may present the animation as it would appear in a selected Internet browser, media player, or the like.","As illustrated, UI  includes stage  where an animation is graphically developed by the user. For example, the user may open or import one or more images, objects, or \u201cactors\u201d (e.g., input objects  of ) and place them on stage . Toolbar or toolbox  may allow the user to make certain modifications to those actors. Additionally or alternatively, toolbox  may allow a user to create certain types of actors (e.g., text, lines, geometric figures, etc.) and add them directly to stage . UI  also includes layer window or panel  configured to show Document Object Model (DOM) elements of the underlying HTML code, as well as library window or panel , which is configured to dynamically display object or animation libraries that may be available to the user during operation. For example, in some embodiments, an animation library may allow a user to introduce an existing function to an animation. Similarly, UI  may include actions window or panel , which may be configured to dynamically display actions that allow the user to create event-based animation (e.g., in response to a user \u201cclicking\u201d on a particular actor, etc.).","UI  further includes properties window or panel  configured to show certain properties that are associated with a selected actor or object (\u201csaladimage,\u201d in this example). In some cases, properties panel  may expose object properties that may be modified by a user. For example, if the object is a graphical element, applicable properties may include, but are not limited to, a position, size, color, background, font type, opacity, 2-dimensional transformation (e.g., rotation, translation, etc.), and 3-dimensional transformations, among others. In the case of an audio element, for instance, properties may include, but are not limited to, level, pitch, playback speed, and sound effects (e.g., delay, reverb, distortion, etc.), among others. In some cases, by selecting a particular actor (e.g., on state ) and modifying a given property in panel  that is associated with that actor, UI  may allow the user to \u201canimate\u201d that actor.","UI  includes timeline panel , which enables the user to select an existing timeline or to create a new timeline upon which the animation may be developed. In some embodiments, a designer may develop two or more timelines simultaneously and\/or one timeline nested within another. Upon selection or creation of a particular timeline in panel , the selected timeline appears in panel . In this example, a \u201cdefault timeline\u201d is shown in panel . As illustrated, timeline panel  is configured to animate three actors\u2014i.e., \u201csaladimage,\u201d \u201csaladDescription,\u201d and \u201cnavbar.\u201d In some embodiments, timeline panel  enables a user to add, remove, or select one or more of the available actors to the selected timeline by \u201cdragging-and-dropping\u201d the actor in and out of timeline panel . As shown in , location properties of each actor (\u201cleft,\u201d \u201ctop,\u201d and \u201ctop,\u201d respectively) are configured to change over time, although in general any property of any actor may be added or removed from the current or default timeline.","In some embodiments, timeline panel  may include a \u201cplayhead\u201d or \u201ctimeline cursor\u201d  that indicates the point in time of the animation that is currently playing, or the point where playback will start when the user initiates or plays the animation. In some embodiments, a user may click and drag playhead  along the timeline to move to a different portion of the animation. Furthermore, panel  may be synchronized with panel  such that, while the user moves playhead  around, panel  approximately simultaneously displays a corresponding portion of the animation.","In some embodiments, panel  may include a bar (e.g., bar ) or some other graphical representation that indicates the start time, end time, and\/or duration of the animation of each property of each actor being modified over time. For example, panel  shows that the \u201cleft\u201d property of the \u201csaladimage\u201d actor begins to be modified at t=0 seconds, and that the \u201ctop\u201d property of the \u201csaladDescription\u201d actor begins to be modified sometime after that. The modifications to both properties of both actors ends simultaneously at t=1 seconds. In other words, the different animations of \u201csaladimage\u201d and \u201csaladDescription\u201d occur at least partially in parallel. On the other hand, the modification to the \u201ctop\u201d property of the \u201cnavbar\u201d actor begins at t=1 seconds and continues on its own afterwards.","In some embodiments, UI  may be configured to allow a user to select a portion of a selected bar (e.g., the center, left and\/or right edge of bar ) and move it along the timeline to change the start time, end time, and\/or duration of the animation. In addition, panel  may also include zoom tool  that allows the user to modify the scale of the timeline during the design of the animation.","The timelines depicted in panels  and  of  may serve as a mechanism around which an animation or presentation is synchronized or choreographed. In some embodiments, different portions of an animation may utilize different timelines that are synchronized with a master timeline or the like. For example a first animation of a first element may be synchronized around a first timeline (e.g., to roll content onto a stage) and a second animation of a second element may be synchronized with a second timeline (e.g., to roll the content off the stage) to create a \u201ccontent rotator\u201d or the like. Both the first and second timelines may be synchronized with a master timeline. Additionally or alternatively, two or more timelines may be nested within each other so that, for example, an event in one timeline may trigger execution of another timeline. In some cases, elements may be placed on the timeline and then converted to \u201csymbols\u201d in order to be manipulated. In other cases, elements may be retrieved dynamically during execution of an animation (e.g., from external storage or from a web server).","In some embodiments, timeline panel  depicted in  may expose a graphical representation of a declarative timeline data structure. Turning now to , a flowchart of a method for creating and executing a declarative timeline data structure is depicted according to some embodiments. At , the method receives a request to create an animation (e.g., via user input  shown in ). At , the method generates a declarative timeline data structure. In some embodiments, the declarative timeline data structure may be created in the design view of UI . Additionally or alternatively, the declarative timeline data structure may be created using an HTML editor, text editor, or the like. At , a user may animate a particular element or image along the graphical representation of timeline. For example, the user may select that a given property of the element (e.g., position, color, opacity, etc.) change in a certain manner over time. In response to the animation, the method may add a corresponding declarative command or object to the declarative timeline data structure at .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4","b":["1","1","1"]},"The second command shown in  operates upon the same property (\u201cleft\u201d) of the same element (\u201cbike\u201d), but the command begins execution at t=10 milliseconds and continues for 2.49 seconds. A seventh attribute sets an easing function that determines the type of interpolation between frames of the animation caused by execution of the command (e.g., \u201ceaseInOutQuad\u201d). The third command operates on a different property (\u201copacity\u201d) of the same element (\u201cbike\u201d), begins execution at the same time as the first command, and continues to be executed at least partially in parallel with the second command. The fourth and fifth commands perform similar functions, but on a second element (\u201cbike \u201d).","The timeline data structure of , when executed, initially places the actor with the id of \u201cbike\u201d off stage and out of view at \u22121000 pixels, while it places \u201cbike \u201d on the stage. It then proceeds to incrementally move bike to the right, frame by frame, until it appears on stage (\u2212345 pixels); all the while, changing its opacity until it finally becomes fully visible (i.e., opacity=1). At partially in parallel with these operations, the timeline is also animating an actor called \u201cbike\u201d that moves off stage to the right, while fading to the point where it can be barely visible (i.e., opacity=0.2). (For purposes of illustration, screenshots of this example animation are discussed with respect to  below.)","In some embodiments, a timeline data structure such as that depicted in  may be defined declaratively as opposed to programmatically. In other words, the timeline data structure may include serialized, declarative commands or objects. For example, the declarative timeline may not include control flow statements or other instructions whose execution results in a decision to proceed in one of two or more paths (e.g., \u201cfor\u201d loops, \u201cwhile\u201d loops, etc.). Additionally or alternatively, the declarative timeline may not include conditional expressions (e.g., \u201cif . . . then\u201d). Additionally or alternatively, the declarative timeline may not include Boolean logic or operators.","In certain embodiments, a timeline data structure may be an array of elements, and each element may be a command or object that operates upon an actor to animate that actor (or otherwise modify a value of a property of that actor) over time. In some cases, timeline elements may themselves contain other timelines, thus resulting in a data structure that is tree-like. When implemented in animation engine such as engine  of , for instance, a declarative timeline data structure may include any type of command or object supported by the various technologies implemented in that engine (e.g., HTML, Java, JavaScript, CSS, SVG, Canvas, etc.).","Turning now to , a flowchart of a method for executing or rendering an animation that includes a declarative timeline is depicted according to some embodiments. In some cases, the method of  may be performed by an animation engine such as engine  of  operating in design or preview mode. Additionally or alternatively, the method of  may be executed by a web browser, media player, or the like. At , the method may receive a file (e.g., an HTML file) containing a declarative timeline data structure (e.g., an array) such as the one depicted in . At , the method may then create an actual timeline in memory (e.g., system memory). The method may then parse each command or object of the declarative data structure to identify each such command or object at . At , the method may pass each identified command or object and its corresponding attributes to an animation function configured to interpret such commands. At  the method may in response receive one or more run-time commands or objects corresponding to the identified declarative commands or objects as interpreted by the animation function. Then, at , the method may add the returned run-time commands or objects to the timeline created in the memory.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 6","FIG. 4"]},"Referring to both , the line \u201cvar t=jQuery.Spry.createTimeline( )\u201d creates a variable \u201ct\u201d as an actual timeline in memory, for example, as described at . The \u201cvar\u201d and \u201cfor\u201d lines that follow cause the function to step through the declarative data structure and parse each command or object in the array, for example, as described at . Within the \u201cfor\u201d loop that follows, conditional \u201cif\u201d statements assign the particular type of command within the data structure to variable \u201cs.\u201d First, the current object \u201carr[i]\u201d is stored in variable \u201cd,\u201d and variable \u201cs\u201d is assigned a \u201cnull\u201d value. If the current object or command is a \u201ctween\u201d command (i.e., \u201cd.tween\u201d is true), for example, then the \u201cSpry.createTween.apply\u201d line passes the current object is to an animation function (e.g., a tween implementation) as described at . In response, the animation function implementation produces a run-time version of the declarative tween command and stores it in variable \u201cs,\u201d for example, as described at . Then, the \u201ct.add(s, d.position, d.duration, d.easing\u201d line places the returned run-time tween command along with its current attributes in the \u201ct\u201d variable, for example, as described at . After stepping through each element of the declarative timeline data structure and adding a run-time command corresponding to each respective declarative object in the timeline, the timeline may be executed to render the animation.","In some embodiments, the method of  may parse trigger commands (e.g., to trigger playback of an audio file, execution of another timeline, etc.) as all as any other declarative command in the timeline data structure. Moreover, the run-time command returned by animation library may include more information (e.g., such as system level data or the like) than the declarative version of the same command to help the animation engine manipulate the objects. As such, in some embodiments the declarative version of a command added to the declarative timeline data structure may be smaller (or shorter) than the actual, run-time command that is executed during the rendering of the animation.","In some embodiments, a declarative timeline data structure such as the described in the preceding section may be parameterized in whole or in part. In some embodiments, parameterizing a timeline refers to the replacement of specific actors, properties, values, and\/or elements with named generic placeholders or strings. At run-time, the same parameterized timeline may be used (and re-used) to animate and\/or modify one or more different actors, properties, values, and\/or elements. Additionally or alternatively, the parameterized timeline may use different key frame values create transitions among any number of target values.","Turning to , a flowchart of a method for parameterizing a timeline is depicted according to some embodiments. At , the method receives a timeline representation of an animation. For sake of illustration, the received timeline representation may be the timeline data structure shown in . At , the method may select one or more original objects, actors, properties, and\/or values within the timeline representation to parameterize. In some embodiments, a user of animation engine  may select individual elements freely (e.g., by \u201cright-clicking\u201d an element and selecting a \u201cparameterize\u201d option). In other embodiments, programmatic elements within animation engine  may automatically parameterize certain types of elements. For instance, animation engine  may monitor the addition of a particular type of actor (e.g., images) to the animation and automatically parameterize newly added actors of that type without further selection or user input.","At , the method may replace references to the selected objects within the timeline with one or more corresponding placeholders. In some embodiments, the user may select the string that serves as a placeholder for each parameterized element. In other embodiments, animation engine  automatically creates these placeholders. At , the method may receive a request to animate or otherwise modify new objects, actors, properties, and\/or values that are different from the original ones. For example, a user may wish to substitute \u201cimage A\u201d with \u201cimage B\u201d in what is otherwise the same animation. At , the method may create a correlation between particular placeholders and the new objects, actors, properties, and\/or values. This correlation may be achieved, for example, by the use of a dictionary of key\/value pairs. In some embodiments, a dictionary may indicate a proper substitution of a placeholder in the parameterized timeline with a reference to the new objects, actors, properties, and\/or values to be animated. Further, in some cases such a dictionary may be declaratively defined and\/or it may be event-defined (e.g., created \u201con-the-fly\u201d) as discussed in more detail with respect to  below.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 8","FIG. 4","FIG. 8"],"b":["1","2","800","800","800"]},"Turning to , an example of parameterization dictionaries is shown according to some embodiments. As illustrated, the first line of code (var paramTimeline=createTimelineFromData(showBik_TLD) creates an instance of the parameterized timeline data structure shown in . Block  represents a first parameterization dictionary that indicates that \u201cbikeToShow\u201d be replaced with \u201cbike\u201d and \u201cbikeToHide\u201d be replaced with \u201cbike.\u201d Block  indicates that, at run-time, the key\/value pairs in the first parameterization dictionary should be used in the execution of the timeline. Similar to block , block  represents a second dictionary with inverted key\/value pairs (i.e., it indicates that \u201cbikeToShow\u201d be replaced with \u201cbike\u201d and \u201cbikeToHide\u201d be replaced with \u201cbike\u201d). Also block  passes the second parameterization dictionary to the timeline during execution. As a result, a first animation may be rendered where \u201cbike\u201d becomes visible as \u201cbike\u201d disappears off the stage, followed by a second animation where \u201cbike\u201d replaces \u201cbike.\u201d Notably, the two resulting animations are distinct from each other, despite both using the same parameterized timeline. Although shown in these examples as key\/value pairs, in other embodiments the format or type of dictionaries used to resolve placeholders may be implementation specific and\/or dependent upon the type of object, actor, property, and\/or value being parameterized.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 10","b":["1","1"]},"Turning to , a flowchart of a method for creating and executing event-based parameter replacement is depicted according to some embodiments. In some cases, rather that defining parameterization dictionaries declaratively, a key\/value dictionary may be defined \u201con-the-fly\u201d (i.e., during rendering of an animation). In some cases, such on-the-fly dictionary creation may be event-based, and may enable a viewer to affect the presentation of the animation at run-time. As illustrated, at  the method may define one or more events (e.g., a clicking a button, hovering over a particular area of a display, etc.). At  the method may receive an event-based selection that requests a modification of the animation. For example, a user may click on an icon representing \u201cbike\u201d to insert it in place of \u201cbike\u201d in an ongoing animation. At  the method may modify the executing timeline using a parameterization dictionary that is created in response to the event-based selection of block .",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 12","FIG. 11","FIG. 12"],"b":["1","2","3","1","2","3","1","2","3","1"]},"Turning now to  screenshots of an animation generated using techniques described herein are depicted according to some embodiments. As illustrated,  and  show \u201cbike\u201d leave the stage upon execution of \u201ctween\u201d commands that create the animation. Thereafter,  appears in the form of a menu, which allows a user to select one of three bikes (e.g., \u201cbike ,\u201d \u201cbike ,\u201d or \u201cbike \u201d). Upon selection of an event by the user (e.g., the user \u201cclicks\u201d on one of the three bikes), a corresponding key\/value entry is created in a parameterization dictionary, and the selected bike enters the stage at  and .","In some embodiments, parameterization dictionary entries may be created upon events that are at least in part independent from a user's direct action. In some cases, for instance, a key\/value entry may be created based on the user's browsing history and\/or other information specific to that user. For example, if code within a webpage determines that a user is likely male, an animation may be presented that substitutes a placeholder with a reference to an image of a woman. Conversely, if the code determines that the user is probably female, the animation may replace the placeholder with a reference to an image of a man. In both cases, the underlying timeline that is executed to render the animation may be the same and\/or similar. In some embodiments, a parameterized dictionary may have one or more entries generated based on one or more of the user's estimated and\/or detected age, social network connections, visited websites, shopping history, etc. In other embodiments, placeholders may be substituted by references to specified actors, objects, properties, values, etc. based on a type of browser, a connection bandwidth, etc.","Although the examples above describe timeline parameterization in term of graphical elements, in other embodiments other types of elements may be parameterized. For example, an audio recording may have properties such as frequency bands, levels, etc. Hence, in an animation where an audio file (e.g., WAV, OGG, RIFF, RAW, AU, 25 AAC, MP4, MP3, WMA, RA, etc.) has one or more property values varying along a timeline (e.g., a dynamic equalizer that changes levels for one or more frequency bands over time), such a timeline may be parameterized with respect to one or more of those properties to enable a user to substitute one audio file for another without creating a separate animation or timeline data structure.","Certain JavaScript frameworks may render an animation within a web browser at least in part by updating specific CSS style properties on one or more DOM elements at regular time intervals. The animation APIs for these frameworks typically allow the developer to specify the name of one or more numeric CSS properties to animate, a \u201cto\u201d value, and optionally a \u201cfrom\u201d value. These APIs usually restrict support to CSS properties that require a single \u201clength\u201d value that includes of a number and optionally a unit string, but typically cannot handle properties that require two or more numeric\/length values and\/or properties that have values wrapped with syntactic elements (e.g., \u201crgba(r,g,b,a)\u201d). Furthermore, CSS presently adds support for more property values that have more complex formats having multiple optional components that may be specified in any suitable order.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 14"},"Turning now to , a flowchart of a method for using value templates in animation timelines is depicted according to some embodiments. At , the method generates a data structure corresponding to a graphical representation of a timeline. For example, the data structure may be a declarative timeline data structure similar to those described in detail above. At , the method may allow a user to create an animation of an object (e.g., an image) along the timeline. In some embodiments, the animation modifies an image property according to a function (e.g., a library function, etc.), and the function uses a combination of a numerical value with a string to render the animation. At , the method may add a command corresponding to the animation into the data structure. For example, in some embodiments the command may be a tween command, or the like. Moreover, the command may be configured to return the numerical value needed by the function to execute the animation.","In some embodiments, the timeline data structure and\/or command may include a value template that adds text or a string to the numerical value produced by the command and yields a combination of the numerical value with the text or string. In some cases, the value template may include a placeholder; in other cases, a key\/value dictionary may provide similar functionality. Additionally or alternatively, the value template may also change the format of the numerical value. Examples of such value templates are discussed below with respect to . At , the method may pass the numerical value with the string to the function, and, at , the method may use the function to animate the image.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 16","FIG. 16"],"b":["1600","1610","1610","1620","1620"]},"At run-time, an algorithm similar to that described with respect to  may parse the timeline data structure and pass each parsed command to the function along with the value template. In the example of , at every stage of the animation of the tween command, the correct value between \u201c0 deg\u201d and \u201c90 deg\u201d may be calculated, and then formatted using the placeholder in value template  when the value is about to be set to trigger an update on the screen. For example, if the tween animation is at 50% of its duration, a \u201c45 deg\u201d value would be calculated, but the actual value that would be set for the property would be \u201crotate(45 deg).\u201d As a result, the value template within the timeline data structure may effectively add text or a string to the output value of its respective command.","Turning now to , an example of a timeline data structure having a value template that uses an array of values is depicted according to some embodiments. In this example, block  shows two \u201cto\u201d values, and block  shows two corresponding \u201cfrom\u201d values. In this case, the tween command is processing an array of values for two distinct properties (i.e., \u201ctranslate\u201d and \u201crotate\u201d). Accordingly, the value template within the data structure provides two placeholders \u201ctranslate( . . . ,@@0@@)\u201d and \u201crotate(@@1@@),\u201d respectively. Moreover, in this particular implementation, the syntax of the placeholder includes an index (\u201c0\u201d and \u201c1,\u201d respectively) that may be used to provide a particular ordering to the output of the tween command (i.e., the first element of the output value array is associated with the \u201ctranslate\u201d placeholder, whereas the second element is associated with the \u201crotate\u201d placeholder). As such, in this example, at 50% of the tween duration, the value that is actually passed to the CSS transform function is \u201ctranslate(100 px, 250 px) rotate(45 deg).\u201d",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 18","FIG. 17","FIG. 5","FIG. 17","FIG. 18"],"b":["1800","1810","1820"]},"In some embodiments, in addition to providing a string or text to be combined with output numerical values, certain techniques described herein may allow formatting of those numerical values.  is an example of a timeline data structure having a formatting function within a placeholder. In this case, value template  contains two placeholders that make use of formatting functions. Placeholder \u201c@@round(y)@@\u201d rounds the calculated value of \u201cy\u201d up or down to the nearest whole number, whereas placeholder \u201c@@floor(angle)@@\u201d rounds the calculated value of \u201cangle\u201d down to the closest whole number. Example of other rounding functions or indicators that may be implemented within placeholders include, but are not limited to, formatting functions that provide hexadecimal or binary values, ceiling values, limit decimal places, apply a filter, etc.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 20","FIG. 19"],"b":["1910","1910"]},"In some embodiments, the value template techniques described above may also be used to format or otherwise provide an indication of a particular color space (e.g., RGB, CMYK, grayscale, etc.) manipulated by an animation function. For example, a placeholder may include a color space's corresponding string and\/or change the formatting of the numerical values for each color element (e.g., decimal to hexadecimal) that is passed to the animation function.","Embodiments of a system and method for parameterizing timelines, as described herein, may be executed on one or more computer systems, which may interact with various other devices. One such computer system is illustrated by . In different embodiments, computer system  may be any of various types of devices, including, but not limited to, a personal computer system, desktop computer, laptop, notebook, or netbook computer, mainframe computer system, handheld computer, workstation, network computer, a camera, a set top box, a mobile device, a consumer device, video game console, handheld video game device, application server, storage device, a peripheral device such as a switch, modem, router, or in general any type of computing or electronic device.","In the illustrated embodiment, computer system  includes one or more processors  coupled to a system memory  via an input\/output (I\/O) interface . Computer system  further includes a network interface  coupled to I\/O interface , and one or more input\/output devices , such as cursor control device , keyboard , and display(s) . In some embodiments, it is contemplated that embodiments may be implemented using a single instance of computer system , while in other embodiments multiple such systems, or multiple nodes making up computer system , may be configured to host different portions or instances of embodiments. For example, in one embodiment some elements may be implemented via one or more nodes of computer system  that are distinct from those nodes implementing other elements.","In various embodiments, computer system  may be a uniprocessor system including one processor , or a multiprocessor system including several processors  (e.g., two, four, eight, or another suitable number). Processors  may be any suitable processor capable of executing instructions. For example, in various embodiments, processors  may be general-purpose or embedded processors implementing any of a variety of instruction set architectures (ISAs), such as the x86, PowerPC\u00ae, ARM\u00ae, SPARC\u00ae, or MIPS\u00ae ISAs, or any other suitable ISA. In multiprocessor systems, each of processors  may commonly, but not necessarily, implement the same ISA.","In some embodiments, at least one processor  may be a graphics processing unit. A graphics processing unit or GPU may be considered a dedicated graphics-rendering device for a personal computer, workstation, game console or other computing or electronic device. Modern GPUs may be very efficient at manipulating and displaying computer graphics, and their highly parallel structure may make them more effective than typical CPUs for a range of complex graphical algorithms. For example, a graphics processor may implement a number of graphics primitive operations in a way that makes executing them much faster than drawing directly to the screen with a host central processing unit (CPU). In various embodiments, the methods and techniques disclosed herein may, at least in part, be implemented by program instructions configured for execution on one of, or parallel execution on two or more of, such GPUs. The GPU(s) may implement one or more application programmer interfaces (APIs) that permit programmers to invoke the functionality of the GPU(s). Suitable GPUs may be commercially available from vendors such as NVIDIA\u00ae Corporation, ATI\u00ae Technologies (AMD\u00ae), and others.","System memory  may be configured to store program instructions and\/or data accessible by processor . In various embodiments, system memory  may be implemented using any suitable memory technology, such as static random access memory (SRAM), synchronous dynamic RAM (SDRAM), nonvolatile\/Flash-type memory, or any other type of memory. In the illustrated embodiment, program instructions and data implementing desired functions, such as those described above for embodiments of an animation module (such as animation module ) are shown stored within system memory  as program instructions  and data storage , respectively. In other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media or on similar media separate from system memory  or computer system . Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media\u2014e.g., disk or CD\/DVD-ROM coupled to computer system  via I\/O interface . Program instructions and data stored on a non-transitory computer-accessible medium may further be transmitted by transmission media or signals such as electrical, electromagnetic, or digital signals, which may be conveyed via a communication medium such as a network and\/or a wireless link, such as may be implemented via network interface .","In one embodiment, I\/O interface  may be configured to coordinate I\/O traffic between processor , system memory , and any peripheral devices in the device, including network interface  or other peripheral interfaces, such as input\/output devices . In some embodiments, I\/O interface  may perform any necessary protocol, timing or other data transformations to convert data signals from one component (e.g., system memory ) into a format suitable for use by another component (e.g., processor ). In some embodiments, I\/O interface  may include support for devices attached through various types of peripheral buses, such as a variant of the Peripheral Component Interconnect (PCI) bus standard or the Universal Serial Bus (USB) standard, for example. In some embodiments, the function of I\/O interface  may be split into two or more separate components, such as a north bridge and a south bridge, for example. In addition, in some embodiments some or all of the functionality of I\/O interface , such as an interface to system memory , may be incorporated directly into processor .","Network interface  may be configured to allow data to be exchanged between computer system  and other devices attached to a network, such as other computer systems, or between nodes of computer system . In various embodiments, network interface  may support communication via wired or wireless general data networks, such as any suitable type of Ethernet network, for example; via telecommunications\/telephony networks such as analog voice networks or digital fiber communications networks; via storage area networks such as Fibre Channel SANs, or via any other suitable type of network and\/or protocol.","Input\/output devices  (e.g., \u201cuser input \u201d in ) may, in some embodiments, include one or more display terminals, keyboards, keypads, touchpads, scanning devices, voice or optical recognition devices, or any other devices suitable for entering or retrieving data by one or more computer system . Multiple input\/output devices  may be present in computer system  or may be distributed on various nodes of computer system . In some embodiments, similar input\/output devices may be separate from computer system  and may interact with one or more nodes of computer system  through a wired or wireless connection, such as over network interface .","As shown in , memory  may include program instructions , configured to implement certain embodiments described herein, and data storage , comprising various data accessible by program instructions . In an embodiment, program instructions  may include software elements of embodiments illustrated in the above figures. For example, program instructions  may be implemented in various embodiments using any desired programming language, scripting language, or combination of programming languages and\/or scripting languages, e.g., C, C++, C#, Java\u2122, JavaScript\u2122, Perl, etc. Data storage  may include data that may be used in these embodiments. In other embodiments, other or different software elements and data may be included.","A person of ordinary skill in the art will appreciate that computer system  is merely illustrative and is not intended to limit the scope of the disclosure described herein. In particular, the computer system and devices may include any combination of hardware or software that can perform the indicated functions, including a computer, personal computer system, desktop computer, laptop, notebook, or netbook computer, mainframe computer system, handheld computer, workstation, network computer, a camera, a set top box, a mobile device, network device, internet appliance, PDA, wireless phones, pagers, a consumer device, video game console, handheld video game device, application server, storage device, a peripheral device such as a switch, modem, router, or in general any type of computing or electronic device. Computer system  may also be connected to other devices that are not illustrated, or instead may operate as a stand-alone system. In addition, the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly, in some embodiments, the functionality of some of the illustrated components may not be provided and\/or other additional functionality may be available.","A person of ordinary skill in the art will also appreciate that, while various items are illustrated as being stored in memory or on storage while being used, these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively, in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter-computer communication. Some or all of the system components or data structures may also be stored (e.g., as instructions or structured data) on a computer-accessible medium or a portable article to be read by an appropriate drive, various examples of which are described above. In some embodiments, instructions stored on a computer-accessible medium separate from computer system  may be transmitted to computer system  via transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as a network and\/or a wireless link. Various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a computer-accessible medium. Accordingly, the present invention may be practiced with other computer system configurations.","The various methods as illustrated in the figures and described herein represent example embodiments of methods. The methods may be implemented in software, hardware, or a combination thereof. The order of method may be changed, and various elements may be added, reordered, combined, omitted, modified, etc. Various modifications and changes may be made as would be obvious to a person of ordinary skill in the art having the benefit of this specification. It is intended that the invention embrace all such modifications and changes and, accordingly, the above description to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 21"}]},"DETDESC":[{},{}]}
