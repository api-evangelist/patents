---
title: System and method for performing object-modifying commands in an unstructured storage service
abstract: Embodiments of system and method for performing object-modifying commands in an unstructured storage service are described. Embodiments may include utilizing one or more nodes to implement an unstructured storage service including a service interface configured to service data storage requests and data retrieval requests from remote clients. The unstructured storage service is configured to isolate access to each of multiple storage domains of the service to different clients. Embodiments may also include receiving from a given remote client, a request to store a data object to a given storage domain of the service. The request further specifying a command to modify source data for the object prior to storing the object. Embodiments may also include using the unstructured storage service to perform the command without exporting the source data from the unstructured storage service to the given remote client prior to completion of the command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08682942&OS=08682942&RS=08682942
owner: Amazon Technologies, Inc.
number: 08682942
owner_city: Reno
owner_country: US
publication_date: 20110823
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["Many different computing applications rely on some type of storage medium for the persistent storage of various kinds of application data. For example, common office applications and multimedia applications generate and use application data of various types and formats, such as documents, spreadsheets, still images, audio and video data, among others. Frequently, such data is stored for repeated access or use on behalf of a user. For example, a user may wish to store and work with a number of documents or other data over a period of time, and may expect that the data will be readily available in a predictable state when needed.","In conventional computing systems, the storage medium used by applications for persistent application data storage is most commonly a magnetic fixed drive or \u201chard drive,\u201d although optical and solid-state storage devices are also used. Such devices are either integrated within a computer system that executes the applications or accessible to that system via a local peripheral interface or a network. Typically, devices that serve as application storage are managed by an operating system that manages device-level behavior to present a consistent storage interface, such as a file system interface, to various applications needing storage access.","Certain network-accessible storage services provide an alternative to the conventional storage. For example, a user may rely on a web service based storage service for much of their storage needs. The storage services may provide flexibility to the user in the form of scalability and reliability. For instance, web service based storage services may relieve users of the burden of managing and upgrading hardware storage resources (e.g., as a result of increased storage demands). Instead, these responsibilities may fall on the service provider. In these cases, instead of paying for actual storage hardware, users may pay the service provider a fee for using the storage service. Typically, web service based storage services offer command sets for non-manipulative actions on data, such as requests to store or retrieve data from the storage service.","While the system and method for performing object-modifying commands in an unstructured storage service is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the system and method for performing object-modifying commands in an unstructured storage service is not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit the system and method for performing object-modifying commands in an unstructured storage service to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the system and method for performing object-modifying commands in an unstructured storage service as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude,\u201d \u201cincluding,\u201d and \u201cincludes\u201d mean including, but not limited to.","Various embodiments of a system and method for performing object-modifying commands in an unstructured storage service are described. One embodiment of a storage model for providing data storage to users as a service, such as a web service, is illustrated in . In the illustrated model, storage service interface  is provided as a customer- or user-facing interface to unstructured storage service . According to the model presented to a user by interface , the storage service may be organized as an arbitrary number of buckets -accessible via interface . Each bucket  may be configured to store an arbitrary number of objects -, which in turn may store data specified by a user of the storage service. One or more users of clients  may submit requests to the storage service interface to store, retrieve, and, as described in more detail below, perform one or more operations on data object . Storage service interface may provide responses  to the requests, which may include acknowledgements and\/or retrieved data, for example. Generally, in addition to storage and retrieval of data objects, the requests or commands that the unstructured storage service may perform may include commands that modify data within the unstructured storage service. In this way, the clients are not burdened with removing the data from the unstructured storage service, performing the operations, and then returning the modified data to the storage service. This configuration may save network bandwidth and processing resources for the clients, for example.","In some embodiments storage service interface  may be configured to support interaction between the storage service and its users according to a web services model. For example, in one embodiment, interface  may be accessible by clients as a web services endpoint having a Uniform Resource Locator (URL), e.g., http:\/\/storageservice.domain.com, to which web services calls generated by service clients may be directed for processing. Generally speaking, a web service may refer to any type of computing service that is made available to a requesting client via a request interface that includes one or more Internet-based application layer data transport protocols, such as a version of the Hypertext Transport Protocol (HTTP) or another suitable protocol.","Web services may be implemented in a variety of architectural styles, using a variety of enabling service protocols. For example, in a Representational State Transfer (REST)-style web services architecture, the parameters that are pertinent to a web services call (e.g., specifying the type of service requested, user credentials, user data to be operated on, etc.) may be specified as parameters to the data transport command that invokes the web services call to the web services endpoint, such as an HTTP GET or PUT command. In some implementations, REST-style web services architectures are stateless, in that each web services call may contain all the information necessary to process that call without reference to external state information. In contrast to REST-style web services architectures, document-based or message-based web services architectures may encode the parameters and data pertinent to a web services call as a document that may be transmitted to a web services endpoint and then decoded and acted upon by the endpoint. For example, a version of eXtensible Markup Language (XML) or another suitable markup language may be used to format the web services request document. In some embodiments, the markup language used to format the request document may delimit parameters that control the processing of the request, while in other embodiments certain features of the markup language itself (e.g., certain tags) may directly control aspects of request processing. Additionally, in some embodiments, the resulting document may be encapsulated within another protocol, such as a version of the Simple Object Access Protocol (SOAP), for example, in order to facilitate processing of the web services request by the endpoint.","Other protocols may also be employed within various embodiments of web services architectures. For example, a version of Web Services Description Language (WSDL) may be employed by a web services endpoint to publish its interfacing requirements to potential clients. Web services endpoints may make themselves known to potential clients through a directory protocol such as a version of the Universal Description, Discovery and Integration (UDDI) protocol. Numerous other types of protocols relating to the provision of computing services via web services interfaces may exist, and any given web services implementation may use any suitable combination of such protocols.","It is contemplated that in some embodiments, interface  may support interfaces other than web services interfaces, instead of or in addition to a web services interface. For example, an enterprise may implement a storage service for use by clients external to the enterprise, who may access the service via web services protocols, as well as users within the enterprise, who may use a different type of interface (e.g., a proprietary interface customized to the enterprise's intranet). In some embodiments, interface  may support each of the various types of interfacing protocols through which any user of the storage service may access the service. In other embodiments, different instances of interface  may be provided for each distinct interface approach. It is noted that in some embodiments, those aspects of interface  related to handling interactions with clients (e.g., receiving and responding to service requests) may be implemented separately from those aspects that implement the general architecture of the storage service (e.g., the organization of the service into a hierarchy of buckets and objects). In some such embodiments, the portion of interface  relating to client interaction (e.g., via web services protocols) may be bypassed by certain users, such as those internal to an enterprise.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 10","FIGS. 3A-8"],"b":["110","200"]},"In various embodiments, the unstructured storage service may be configured to internally replicate data objects for data redundancy and resiliency purposes. After an operation is performed on a data object described herein, it may take some period of time for the change to propagate to all instances of the object. In various embodiments, clients may be made aware of this property, which may be referred to herein as eventual consistency. For instance, in an eventual consistency model, clients may be responsible for polling objects to determine that results have posted. In various embodiments, the time required for eventual consistency may be utilized to mask the computation time of the operations described herein. For instance, in some cases, inconsistencies caused by slow operations may be viewed by clients as a natural characteristic of the eventual consistency model.","In various embodiments, external compute logic  may undergo authentication in order to access the data associated with various clients. For instance, in some embodiments, the external compute logic may be issued a cryptographic key or other token for access to client data objects within the unstructured storage service.","In various embodiments, the unstructured storage service may also be configured to provide operation identifiers to enable clients to cancel pending requests. For instance, if requests processed by the unstructured storage service (or external compute logic) become stalled or some other anomaly occurs, clients may issue a cancel request command to cancel the pending operation. In various embodiments, the unstructured storage service may also include a metering component to determine costs associated with each client's use of the unstructured storage service. For instance, in various embodiments, clients may be charged for use of the unstructured storage service based on quantity of requests, quantity of data accessed, and\/or the computational intensity of such requests.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3A","FIG. 3B","FIG. 3C"],"b":["300","5","300","100","302","110","302","304","302","310","5","310","100","312","110","302","314","312","320","5","320","100","322","324","110","326","322","324"]},"In some embodiments, one or more filtering operations may be performed on a source object to identify some sub portion of the object that meets certain conditions. For instance, a search operation may be performed on text information of a source object to identify the locations of text (e.g., specific lines of text) that include a specified word or phrase. These locations (e.g., line numbers) may be stored within a data object made accessible to a requesting client. In various embodiments, the particular word(s) or phrases to search for may be specified by a filter command submitted by the remote client. As is the case for other commands described herein, the filter command may be specified by the client within a data storage request. The unstructured storage service may be configured to perform the filtering operations without exporting the source data that is being filtered to the client. One example of the filtering operations described herein may include a command similar to the \u201cgrep\u201d command-line text-search utility of the Unix operating system.","In various embodiments, the source data for a given object to be created need not be an existing object. For instance, in the illustrated embodiment of , client  may provide data along with a request  to the unstructured storage service. The unstructured storage service may perform an inline computation on the data as it is received. For instance, the client may stream the data to the service, and the internal compute logic  may apply one or more functions (or other data-modifying operations) on the data as it is received (or after any necessary buffering) in order to generate object . In one example, internal compute logic may apply a video compression algorithm to video data provided by client . In , the unstructured storage service may apply similar techniques to create outbound data. For instance, client  may submit request  to the unstructured storage service; the request may identify a data object to which a function (or other data-modifying operations) is to be applied. The unstructured storage service may provide the result of this function as outbound data . For instance, in one non-limiting example, client  may request that object  be encrypted and the result provided as outbound data . In various embodiments, outbound data  may be provided to client  without persisting a corresponding object for that data within the storage service. In other cases, in addition to providing the outbound data to client , the data may be persisted within the storage service.","In various embodiments, one or more tasks of the unstructured storage service may be offloaded to external compute logic. For instance, the unstructured storage service may be configured to offload computationally intensive tasks to external systems.  illustrates one such example. In the illustrated embodiment, client  may provide a sort request  to unstructured storage service . In the illustrated embodiment, the unstructured storage service may be configured to, for a given request, predict or estimate a measure of that request's computational intensity (e.g., in time or processing cycles). In cases where the measure of computational intensity is too large for the internal compute logic  (e.g., larger than some specified threshold), the unstructured storage service may offload one or more portions of the task to external compute logic . For instance, in the illustrated example, sort request  may be a sort request directed to an object having a large quantity of data to be sorted. The external compute logic may be one or more nodes (e.g., computers, such as that of ) or dedicated hardware devices (e.g., specialized hardware for encryption, compression, or random number generation). In some embodiments, external compute logic  may be one or more virtual instances of a computer system, which may also be provided as network-accessible service.","In cases where the unstructured storage service is to offload a request, internal compute logic may forward the original request or generate a new request, such as sort offload request . In the illustrated embodiment, external compute logic may receive the request, which may specify the object to be operated on as well as the commands to be performed on that object. In the illustrated embodiment, the command is a sort command directed to object . Accordingly, external compute logic  may sort data of object  to generate object . In various embodiments, to source object , external compute logic may issue a storage retrieval request to the unstructured storage service, as illustrated by get request . Similarly, to write the sorted object  to the unstructured storage service, external compute logic  may issue a put request  to the storage service.","In various embodiments, very computationally intensive tasks may be offloaded from one external logic component to another.  illustrates one such example. In the illustrated embodiment, client  may provide a sort request  to unstructured storage service . In the illustrated embodiment, the unstructured storage service may be configured to, for a given request, predict or estimate a measure of that request's computational intensity (e.g., in time or processing cycles). In cases where the measure of computational intensity is too large for the internal compute logic  (e.g., larger than some specified threshold), the unstructured storage service may offload one or more portions of the task to external compute logic . For instance, in the illustrated example, sort request  may be a sort request directed to an object having a large quantity of data to be sorted. As described above, the external compute logic may be one or more nodes or dedicated hardware devices. In some embodiments, external compute logic  may be one or more virtual instances of a computer system, which may also be provided as network-accessible service.","In cases where the unstructured storage service is to offload a request, internal compute logic may forward the original request or generate a new request, such as sort offload request . In the illustrated embodiment, external compute logic may receive the request, which may specify the object to be operated on as well as the commands to be performed on that object. In cases where the request is estimated or predicted to be more computationally intensive than external compute logic is rated to handle (e.g., according to a specified threshold), external compute logic may offload the command to external compute logic , which may be equipped to process the request. For instance, external compute logic may represent a physical or virtual cluster of computers. In the illustrated embodiment, the command is a sort command directed to object . Accordingly, external compute logic may sort data of object  to generate object . In various embodiments, to source object , external compute logic may issue a storage retrieval request to the unstructured storage service, as illustrated by get request . Similarly, to write the sorted object  to the unstructured storage service, external compute logic may issue a put request  to the storage service.","Various embodiments may support built-in objects, such as objects created from data that is not sourced from the remote clients. For instance, in various embodiments, objects may be created that include random or pseudo-random data, timestamps, and other data internally generated by the unstructured storage service. In some cases, objects may be created from physical and virtual data sources, such as thermometers (or other telemetry data sources), network cameras, or a national debt clock, for example. In various embodiments, the unstructured storage service may generate objects that specify characteristics or states of the storage service itself. For instance, in one example, clients may request an object listing for a specific domain of the storage service (e.g., similar to a directory listing). In response, the unstructured storage service may dynamically generate an object (e.g., \u201con-the-fly\u201d) that includes information listing the objects stored within that storage domain. In other examples, the unstructured storage service may generate an object that includes information about some other state of the unstructured storage service. For instance, a client may request the state of an ongoing command or computation. In response, the unstructured storage service may dynamically generate an object that includes information that specifies the progress or state of an ongoing computation. As described above, the unstructured storage service may include a metering component configured to determine a cost associated with performing computations for commands. In various embodiments, clients may request a data object that specifies the cost associated with an ongoing command (e.g., an operation on a large portion of data). In response, the unstructured storage service may dynamically generate an object that includes information that specifies the current cost (and\/or a projected cost) of an ongoing computation.","In some cases, the data source may be a dedicated portion of hardware, such as illustrated by the random number generator of . In , client  may issue a request to generate a random object  (e.g., an object that include one or more randomly or pseudo-randomly generated values). In response to the request, internal compute logic  may offload the request at  to external compute logic . External compute logic  may be configured to query a dedicate hardware random number generator (RNG)  in order to determine the data to be included within object , which is stored within the unstructured storage service at . In one non-limiting example, RNG  may be a Peripheral Component Interconnect (PCI) card including logic for randomly or pseudo-randomly generating data for objects. For example, RNG  may in some cases be a PCI card installed in a compute system on which external compute logic  executes.","In various embodiments, the unstructured storage service may be configured to perform one or more sampling operations, such as sampling text portions from multiple data objects, which may be combined into a single object. For instance, random samples of text may be sampled from multiple documents to perform a statistical analysis of natural language.  illustrates an example sampling operation. In the illustrated embodiment, client  may issue a sample generation request  to the unstructured storage service . Internal compute logic  may offload the request at  to external compute logic . External compute logic  may retrieve multiple objects from the unstructured storage service, as illustrated by multiple get operations . External compute logic may extract multiple samples from the retrieve objects and combine the samples into object . As illustrated, object  may be stored into unstructured storage service  at put operation .","In various embodiments, data may be captured from external sources (other than clients), such as illustrated in . In the illustrated embodiment, client  may issue a data capture request  to the unstructured storage service . Internal compute logic  may offload the request at  to external compute logic . External compute logic  may retrieve multiple objects from an external data source, such as illustrated by external data source . For instance, in various embodiments, external data source  may represent a network accessible video camera or other source of live data. In some embodiments, the data captured from the external data source may include log data from other computer systems (e.g., logs of performance data, errors, or other metrics). External compute logic may extract multiple portions of the external data and store each portion as one of objects . As illustrated, objects  may be stored into unstructured storage service  at put operations . For example, in some embodiments, each object  may correspond to one minute of video captured from the aforesaid video source. In various embodiments, objects  may be implemented as a bound circular buffer storing the n-most portions of data from the external data source. In some embodiments, similar techniques may be applied to log objects.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 9","b":["100","1000"]},"As illustrated at block , the method may include using one or more nodes to implement an unstructured storage service including a service interface configured to service data storage requests and data retrieval requests from remote clients. Furthermore, in various embodiments, the unstructured storage service is configured to isolate access to each of multiple storage domains of the service to respective clients. For instance, in various embodiments, this portion of the method may include providing an unstructured storage service similar to unstructured storage service  described above.","As illustrated at block , the method may also include receiving from a given remote client, a request to store a data object to a storage domain of the service or retrieve a data object from a storage domain of the service. In various embodiments, the request may further specify a command to modify data of the object prior to storing or subsequent to retrieving the object in accordance with the request. For instance, this type of request may include any of the client requests described above with respect to .","As illustrated at block , the method may include determining whether a measure of computational intensity of the command exceeds a threshold value of computational intensity for the unstructured storage service. For instance, in various embodiments, the method may include, for a given request, predict or estimate a measure of that request's computational intensity (e.g., in time or processing cycles). As noted by the negative output of block , if the measure of computational intensity does not exceed the threshold value, the method may include performing the command within the unstructured storage service without exporting the data object from the unstructured storage service to the given remote client prior to completion of the command (block ). For instance, as described above with respect to internal and external compute logic, the internal compute logic of the unstructured storage service may perform commands (e.g., sort, compress, etc.) if the command's computational intensity of the command does not exceed the aforesaid threshold. As illustrated by the positive output of block , if the measure of computational intensity exceeds the threshold value, the method may include using one or more components external to the unstructured storage service to perform the command on the data object without exporting the data object from the unstructured storage service to the given remote client prior to completion of the command (e.g., block ). For instance, as described above with respect to internal and external compute logic, the external compute logic of the unstructured storage service may perform commands (e.g., sort, compress, etc.) if the command's computational intensity of the command does exceed the aforesaid threshold. In this way, the clients are not burdened with removing the data from the unstructured storage service, performing the operations, and then returning the modified data to the storage service. In various embodiments, this technique may save network bandwidth and processing resources for the clients, for example.","In various embodiments of the method, the service interface may be a web service interface accessible to the remote clients over the Internet or other communication network. For instance, requests and commands for that interface may be defined by an application programming interface (API) for that web service interface. In various embodiments of the method, the storage requests handled may include HTTP PUT commands, and the storage retrieval requests may include HTTP GET commands.","In various embodiments of the method, different types of requests may be handled. For instance, embodiments may include servicing requests for text manipulation operations (e.g., text searching, text substituting, text sorting, text concatenation, etc), data compression, data encryption, data sorting, data joining, concatenation, searching, sampling, random number generation, or any other type of request described herein. In various embodiments, embodiments may include data that may be formed in to various visual representations (e.g., graphs, plots, etc.). Embodiments may include providing this data to clients in tabular or graphical form. In various embodiments, the request described herein may be requests to perform numeric calculation, such as sum, average, median, and standard deviation.","Example Computer System","Various embodiments of the system and method for performing object-modifying commands in an unstructured storage service, as described herein, may be executed on one or more computer systems, which may interact with various other devices. Note that any component, action, or functionality described above with respect to  may be implemented on one or more computers configured as computer system  of , according to various embodiments. In the illustrated embodiment, computer system  includes one or more processors  coupled to a system memory  via an input\/output (I\/O) interface . Computer system  further includes a network interface  coupled to I\/O interface , and one or more input\/output devices , such as cursor control device , keyboard , and display(s) . In some cases, it is contemplated that embodiments may be implemented using a single instance of computer system , while in other embodiments multiple such systems, or multiple nodes making up computer system , may be configured to host different portions or instances of embodiments. For example, in one embodiment some elements may be implemented via one or more nodes of computer system  that are distinct from those nodes implementing other elements.","In various embodiments, computer system  may be a uniprocessor system including one processor , or a multiprocessor system including several processors  (e.g., two, four, eight, or another suitable number). Processors  may be any suitable processor capable of executing instructions. For example, in various embodiments processors  may be general-purpose or embedded processors implementing any of a variety of instruction set architectures (ISAs), such as the x86, PowerPC, SPARC, or MIPS ISAs, or any other suitable ISA. In multiprocessor systems, each of processors  may commonly, but not necessarily, implement the same ISA.","System memory  may be configured to store program instructions  and\/or data  accessible by processor . In various embodiments, system memory  may be implemented using any suitable memory technology, such as static random access memory (SRAM), synchronous dynamic RAM (SDRAM), nonvolatile\/Flash-type memory, or any other type of memory. In the illustrated embodiment, program instructions  may be configured to implement any functionality of internal compute logic  described above. Additionally, data  of memory  may store any of the information or data structures described above, including but not limited to data objects . In some embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media or on similar media separate from system memory  or computer system . While computer system  is described as implementing the functionality of functional blocks of previous Figures, any of the functionality described herein may be implemented via such a computer system. In some embodiments, computer system , on which external compute logic  may be implemented, may also be configured similar to computer system .","In one embodiment, I\/O interface  may be configured to coordinate I\/O traffic between processor , system memory , and any peripheral devices in the device, including network interface  or other peripheral interfaces, such as input\/output devices . In some embodiments, I\/O interface  may perform any necessary protocol, timing or other data transformations to convert data signals from one component (e.g., system memory ) into a format suitable for use by another component (e.g., processor ). In some embodiments, I\/O interface  may include support for devices attached through various types of peripheral buses, such as a variant of the Peripheral Component Interconnect (PCI) bus standard or the Universal Serial Bus (USB) standard, for example. In some embodiments, the function of I\/O interface  may be split into two or more separate components, such as a north bridge and a south bridge, for example. Also, in some embodiments some or all of the functionality of I\/O interface , such as an interface to system memory , may be incorporated directly into processor .","Network interface  may be configured to allow data to be exchanged between computer system  and other devices attached to a network  (e.g., a computer on which external logic  is implemented) or between nodes of computer system . Network  may in various embodiments include one or more networks including but not limited to Local Area Networks (LANs) (e.g., an Ethernet or corporate network), Wide Area Networks (WANs) (e.g., the Internet), wireless data networks, some other electronic data network, or some combination thereof. In various embodiments, network interface  may support communication via wired or wireless general data networks, such as any suitable type of Ethernet network, for example; via telecommunications\/telephony networks such as analog voice networks or digital fiber communications networks; via storage area networks such as Fibre Channel SANs, or via any other suitable type of network and\/or protocol.","Input\/output devices  may, in some embodiments, include one or more display terminals, keyboards, keypads, touchpads, scanning devices, voice or optical recognition devices, or any other devices suitable for entering or accessing data by one or more computer systems . Multiple input\/output devices  may be present in computer system  or may be distributed on various nodes of computer system . In some embodiments, similar input\/output devices may be separate from computer system  and may interact with one or more nodes of computer system  through a wired or wireless connection, such as over network interface .","As shown in , memory  may include program instructions , which may be processor-executable to implement any element or action described above. In one embodiment, the program instructions may implement the methods described above, such as the methods illustrated by . In other embodiments, different elements and data may be included. Note that data  may include any data or information described above.","Those skilled in the art will appreciate that computer system  is merely illustrative and is not intended to limit the scope of embodiments. In particular, the computer system and devices may include any combination of hardware or software that can perform the indicated functions, including computers, network devices, Internet appliances, PDAs, wireless phones, pagers, etc. Computer system  may also be connected to other devices that are not illustrated, or instead may operate as a stand-alone system. In addition, the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly, in some embodiments, the functionality of some of the illustrated components may not be provided and\/or other additional functionality may be available.","Those skilled in the art will also appreciate that, while various items are illustrated as being stored in memory or on storage while being used, these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively, in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter-computer communication. Some or all of the system components or data structures may also be stored (e.g., as instructions or structured data) on a computer-accessible medium or a portable article to be read by an appropriate drive, various examples of which are described above. In some embodiments, instructions stored on a computer-accessible medium separate from computer system  may be transmitted to computer system  via transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as a network and\/or a wireless link. Various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a computer-accessible medium. Generally speaking, a computer-accessible medium may include a computer-readable storage medium or memory medium such as magnetic or optical media, e.g., disk or DVD\/CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR, RDRAM, SRAM, etc.), ROM, etc. In some embodiments, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link.","The methods described herein may be implemented in software, hardware, or a combination thereof, in different embodiments. In addition, the order of the blocks of the methods may be changed, and various elements may be added, reordered, combined, omitted, modified, etc. Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. The various embodiments described herein are meant to be illustrative and not limiting. Many variations, modifications, additions, and improvements are possible. Accordingly, plural instances may be provided for components described herein as a single instance. Boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Finally, structures and functionality presented as discrete components in the exemplary configurations may be implemented as a combined structure or component. These and other variations, modifications, additions, and improvements may fall within the scope of embodiments as defined in the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
