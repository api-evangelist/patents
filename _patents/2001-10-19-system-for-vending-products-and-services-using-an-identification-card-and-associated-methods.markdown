---
title: System for vending products and services using an identification card and associated methods
abstract: A highly integrated and flexible system for vending products and services to consumers. The system receives information in advance of the vend by having the consumer insert an identification (ID) card, preferably a driver's license, into a point-of-purchase terminal (referred to as an OSU device). The OSU device preferably contains an Optical Scanning Unit (OSU), capable of scanning the textual information on the ID card. In one embodiment, the scanned information is compared against optical templates present in the system to discern or verify the information on the ID card, and is then used by the system to enable or disable the vending transaction, and/or to allow access to several preregistered system accounts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06854642&OS=06854642&RS=06854642
owner: Chesterfield Holdings, L.L.C.
number: 06854642
owner_city: Seattle
owner_country: US
publication_date: 20011019
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The present invention relates generally to a system for vending products or services by the use of a standard ID card, such as a driver's license.","It is sometimes desirable to vend products or to provide services only after certain information has been provided by the consumer. For example, in order to vend age-restricted products, such as alcohol or cigarettes, the age of the consumer must be verified in advance of the purchase, typically by having the vendor visually check the consumer's driver's license to verify his date of birth. In another example, it may be desirable to vend gasoline to a consumer only after the validity of his driver's license has been verified.","To make the vending process more efficient, it is desirable to electronically automate the receipt of such pertinent information from the customer. But this is generally only possible if the consumer has some form of identification capable of storing such information in an electronic form. When one reviews the forms of identification typically held and carried by consumers, one finds two primary forms of identification\u2014credit cards and driver's licenses. In this respect, \u201ccredit cards\u201d should be understood to refer to other similar types of issued cards, such as debit cards, store-issued credit cards, bank-issued automatic teller machine (ATM) cards, and \u201csmart cards\u201d which contain integrated circuitry. However, both of these forms of identification have drawbacks when applied to automating the process of gathering information about the consumer in advance of the vending of products and services.","Credit cards typically contain magnetic strips or integrated circuitry that contain some amount of consumer information. However, credit cards are of limited utility in facilitating the automated information gathering process discussed above. First, not all consumers carry credit cards, especially many younger consumers. Second, the electronic information contained on credit cards is not always sufficient to allow an assessment of the propriety of vending a particular product to a given consumer. For example, credit cards typically do not contain information concerning the consumer's age or date of birth, a necessary piece of information for automating the vending of age-restricted products. Third, credit cards, especially store-issued credit cards, typically only allow for the purchase of those products or services sold by that store, and are therefore of limited utility. Fourth, the electronic information contained on credit cards is sometimes encrypted, or stored in formats unknown and undecipherable to the vendors. In short, credit cards, in their various formats, are generally not a suitable mechanism for gathering information about a consumer in advance of the vending of products and services.","Driver's licenses present an attractive means of gathering consumer information because they are widely held. However, driver's licenses, like credit cards, have historically been of limited utility for this purpose. First, driver's licenses come in many different formats, with each state issuing its own unique license. This makes automatic information gathering difficult for a vending system which is to operate on a nationwide (or international) scale. Second, not all states' driver's licenses contain a means for electronically storing information about the consumer. For example, not all states issue driver's licenses that contain a magnetic strip element. Third, even as to the driver's licenses that do contain electronic means of storing consumer information, the information may be limited, encrypted, or stored in formats unknown and undecipherable to the vendors, and thus suffer from the same problems as credit cards. Fourth, even if driver's licenses were suitable to automate the information gathering process, they lack the means for allowing consumers to pay for the purchase, and therefore have been of limited utility in automating the entire vending process.","A specific problem already mentioned is the vending of age-restricted products. Most, if not all, states impose minimum age requirements for the purchase of certain products such as alcohol, tobacco products, and other age-restricted products. In order to purchase such products, the customer traditionally must present identification to the seller to verify his or her age prior to the transaction. The inability to verify the customer's age prevents age-restricted products from being sold in vending machines in an automated fashion. This verification process is particularly problematic in the vending machine industry since vending machines, by their very nature, involve unattended point-of-purchase transactions. Some examples of prior approaches to this problem or related problems can be found in the following U.S. patents, all of which are incorporated herein by reference in their entirety: U.S. Pat. Nos. 4,884,212; 5,139,384; 5,146,067, 5,273,183; 5,352,876; 5,371,346; 5,450,980; 5,523,551; 5,641,050; 5,641,092; 5,647,505; 5,696,908; 5,722,526; 5,734,150; 5,774,365; 5,819,981; 5,859,779; 5,927,544; 5,988,346; 5,147,021; 4,982,072; 4,915,205; and 4,230,214.","Some prior art vending approaches, such as that of Sharrard, U.S. Pat No. 5,722,526, have contemplated using drivers licenses or other identification cards to verify the customer's age. In the Sharrard system, a customer inputs money into the vending machine and makes his or her selection. Thereafter, the customer is prompted to input an identification card such as a state government issued identification card or a driver's license containing the customer's birth date. The vending machine either optically reads the written birth date on the face of the card, or reads the birth date data from a magnetic strip contained on the back of the card. A processor unit compares this data with the present date that is keyed into the vending machine by its operator, and determines whether the customer is of a sufficient age to purchase the product.","Sharrard's disclosure notwithstanding, it is difficult to implement Sharrard's technique for age verification. As noted previously, not all driver's licenses contain magnetic strips, and even for those that do, age data may not be present on the strip or may be difficult to extract. Further, despite Sharrard's general disclosure of the idea of optically scanning a driver's license to extract age data, such a process is not disclosed or enabled in Sharrard, but is merely noted as a good idea.","Some prior art approaches such as U.S. Pat. No. 5,927,544, issued to Kanoh, suggests that age information can be \u201crecorded on the [credit] card\u201d to verify a vending customer's age for the purpose of vending age-restricted products, see Kanoh, Col. 4, 11. 55-58, but the present inventors submit that such information is in fact rarely present on a standard credit card. Although consumer reporting agencies, such as TRW and Equifax, and other credit card companies such as VISA or MasterCard, store information in databases for a large number of consumers, conventional vending machines are unable to access such information to verify the age of a purchaser. Those prior art vending machines that have connectivity to such databases contemplate using the database to verify credit or password information, but do not disclose or suggest using such databases to verify age. See Kanoh, Col. 4, 11. 37-42 (noting that the microprocessor in his vending machine enables \u201ca credit card company to check credit card numbers, personal identification code numbers, and other data via a communications link,\u201d but not mentioning age data).","What is needed is a highly flexible system for vending products and services that (1) can be implemented on a nationwide (or international) scale, (2) is fully automated, (3) is capable of extracting necessary information from a consumer to assist in the vending process, and (4) is capable of remotely managing and updating an unlimited number of vending machines. Additionally, such a system would be further advantaged by (1) providing means for allowing for the payment of the products and services vended, (2) being implementable by making only minor modifications to otherwise standard vending equipment, and (3) having the capability to vend a wide array of products and services. Such a system is disclosed herein.","Disclosed is a highly integrated and flexible system for vending products and services to consumers. The system receives information in advance of the vend by having the consumer insert an identification (ID) card, preferably a driver's license, into a point-of-purchase terminal (referred to as an Optical Scanning Unit (OSU) device). The OSU device preferably contains an Optical Scanning Unit (OSU), capable of scanning the textual and graphical information (such as a validation seal or other picture) on the ID card. The scanned information, such as the consumer's age, is then compared against optical templates present in the system (preferably in the OSU) to discern or verify the information on the ID card, and is then used by the system to enable or disable the vending transaction.","The system preferably contains several components that may be distributed on a nationwide basis depending on the desired system functionality and geographic scope of the proposed system. To add flexibility to and to enhance the performance of the system, a protocol that allows for the OSU devices to communicate with the remainder of the system has been developed and is disclosed. Additionally, optical character recognition (OCR) algorithms have been developed and are disclosed to facilitate the analysis of the ID cards, a process that presents special problems not encountered in OCR analysis generally. Furthermore, a design for an OSU, capable of reading and interpreting optical data and magnetic strip data, is disclosed.","In a related embodiment, the disclosed system allows a consumer's ID card to act as a smart card useable for purchasing a wide array of products and services, including food, gas, money, phone service, rental cars, etc., which are sold through the OSU devices connected to the system. The system may also be used to tap into or establish consumer accounts useable for paying for system products and services. The system may be used more generally to determine information about a person or consumer who accesses the system, for example, by tapping into law enforcement or immigration status databases after OSU analysis of their ID cards. Additionally, methods are disclosed for initializing an OSU device upon its installation in the system and for configuring and\/or update its functionality. Because the ID card of different states may be used on the system, the system may be implemented on a nationwide scale.","In the disclosure that follows, in the interest of clarity, not all features of actual implementations are described. It will of course be appreciated that in the development of any such actual implementation, as in any such project, numerous engineering and design decisions must be made to achieve the developers' specific goals (e.g., compliance with technical- and business-related constraints), which will vary from one implementation to another. Moreover, attention will necessarily be paid to proper engineering and design practices for the environment in question. It will be appreciated that such a development effort might be complex and time-consuming, but would nevertheless be a routine undertaking for those of skill in the art given the disclosure in the present specification.","I. System Overview","Disclosed herein is a transactional, multi-tiered, networked information system, referred to as the Davis\u2122 system. (\u201cDavis\u201d is an acronym for the \u201cDetsky Age Verification Information System\u201d). The system includes a broad range of technology and uses relating to the sale and distribution of products and\/or services. Many of these uses are disclosed herein, but one skilled in the art should recognize that the system disclosed herein is capable of many uses, none of which detract from the spirit of the disclosed inventive concepts.","In a preferred embodiment of the system, the system includes a terminal accessible by a consumer, such as a vending machine, an automatic teller machine (ATM), a gas pump, a public phone, etc. This terminal contains a means for determining certain information about the customer relevant to the desired purchase. In a preferred embodiment, the terminal is able to receive a piece of identification from the consumer, such as a driver's license or other identification (ID) card.","Preferably, but not exclusively, the consumer information is read from the ID card using optical scanning technology, the specifics of which will be disclosed later in this specification. Thus, the terminal includes an optical scanning unit (OSU) for receiving the ID card and \u201creading\u201d certain information from it. For example, assuming the terminal is a vending machine that vends age-restricted products such as cigarettes or alcohol, the consumer's age can be read from the ID card and processed by the system to determine the consumer's age and enable the purchase accordingly. If the terminal is a gas pump, the consumer's driver's license can be read and checked by the system to check its validity and enable the purchase of gas accordingly. If the terminal is an ATM, the consumer can use his ID card (as opposed to the more traditional, magnetic-strip debit cards issued by banks) to withdraw cash from his savings or checking account. Thus, the system allows a standard ID card, such as driver's licenses, to act as a \u201csmart card,\u201d even if such card otherwise lacks the means for storing electronic data, such as on a magnetic strip or in integrated circuitry included on the card. These are just a few examples of the functionality of the system, all of which are made feasible by the OSU.","An overview of the components of the system  is shown in FIG. . One skilled in the art will immediately recognize that the system is suitably flexible that certain components in the system can be combined, eliminated, or added based on the desired functionality as dictated by the product or service to be marketed.","A. The OSU Device ","The terminal with which the consumer reacts, and which contains (preferably) the optical scanning unit (OSU)  (see next section), is referred to generally as OSU device . For example, OSU device  might constitute a vending machine, an ATM, a public phone, a gas pump, etc.","The system  is capable of interfacing with several OSU devices , which may be connected to the system (e.g., to the OSU connection server(s) ) by any means known in the art to connect electronic devices, such as by fixed cable, modem, wireless, or other networking means. The OSU device 's primary function is to receive information from the consumer via its OSU  and to dispense products or services to the consumer (e.g., food, gas, money, etc.). Therefore, in accordance with the preferred embodiment, the consumer inserts his ID card into the OSU  on the OSU device , and a scanned image is taken of his ID card. This image may be sent to other parts of the system to be analyzed, such as the server cluster , using an optical character recognition scheme to be described in detail later, or the image data may be locally processed at the OSU device . To avoid long transmission delays, it is currently preferable to process the image within the OSU device  itself. However, in the future, as higher bandwidth communication systems are made available, it is contemplated that it may be preferable to process image data remotely at the servers. The OSU device  also performs other localized processing that need not be (or cannot be) performed by the remainder of the system.","An OSU device  is typically manufactured with certain factory standard functionality. For example, if the OSU device  is a vending machine, the machine will come pre-programmed to perform many of the functions standard to vending machines generally. However, the OSU device  may also be remotely configured or periodically updated as necessary either by the system , or locally by a portable computer or personal data assistant (PDA) device capable of interfacing with the OSU device . Remote updating from system  is preferable due to its flexibility because it allows OSU device operators and owners to control updates via a web-based administration tool accessible over the internet.","An OSU device  can be made to operate in \u201cconnection mode,\u201d \u201cbatch mode,\u201d or \u201cdisconnect mode,\u201d or may be attached to other non-Davis systems components if necessary or desirable. When operating in connection mode, the OSU device  constantly communicates with another portion of the system  to process certain consumer information. For example, analysis of the consumer's age, as determined optically and\/or using magnetic strip data from the consumer's driver's license, may be performed remotely by the system when operating in connected mode, although this is not presently preferred as previously mentioned. Connection mode is particularly useful for processing and validating consumer credit card information, which ideally should be performed during a consumer purchase transaction.","When operating in batch mode, the OSU device  is not in communication with other portions of the system  during a consumer transaction. Instead, the OSU device  may be made to connect to the system  during off-hours to process consumer information, or to receive update instruction from the system. However, as mentioned previously, it is currently preferred that consumer information is processed directly by the OSU devices .","When operating in disconnect mode, the OSU device  is configured and updated only when removed from service and attached to a PC or other device suitable for communicating with the OSU device  \u201coff line,\u201d such as a personal data assistant (PDA). In this sense, one skilled in the art should recognize that in a particular circumstance the OSU device  may be made to encompass all relevant functionality of the system , but without the benefit or necessity of communicating with a system or any other components. A good example of this would be an \u201cage validation terminal\u201d which could be installed in bars. In this embodiment, the consumer would simply insert his license into the terminal, most preferably in the presence of a bar attendant, at which point the terminal would perform an optical analysis of the license, and display a green light if the consumer's age is sufficient. In this embodiment, it may not be necessary to have the power of an entire networked system if the terminal itself is programmed off-hours to provide suitable functionality. In this scenario, the bar attendant is spared the potential discomfort of directly confronting the consumer about his age, and instead could rely on the age verification information provided by the terminal. Such a terminal may also prevent mistakes in age verification that otherwise might be made by the bar attendant, or may be able to determine validity concerns with the license that might not otherwise be discernable by the attendant.","The OSU device  may also be connected to other systems not normally included in system . For example, the OSU device  can be made to communicate with VisaNet (an on-line credit card service) to verify a consumer's credit card account information. Likewise, the OSU device  (or other parts of system ) may be configured to dial into VisaNet during off-hours to reconcile transactions made during a specific day. Of course, should the OSU device  be made to connect directly with such third party systems, the method of communication may need to be programmed into the OSU device  and will not necessary be the same as the connection, batch or disconnect modes generally contemplated with respect to system .","B. The OSU ","A preferred embodiment for the OSU  is shown in . As will be explained later in this disclosure, OSU  can be incorporated into a standard or custom-made OSU device , such as a vending machine.","The OSU  in a preferred embodiment is a dual-function card reader, capable of reading both the textual and graphical data printed on the face of an ID card, and (if present) a magnetic strip. Because the OSU  can read both optical and magnetic data, it is capable of receiving a wealth of important data concerning the consumer from a number of different consumer ID cards, including driver's licenses and credit cards. In this regard, the OSU  can handle consumer transactions using ID cards that contain both optical information and magnetic information (which might be the case for some states' driver's licenses), or separate ID cards where one contains textual information and the other contains magnetic strip information. For example, the consumer's driver's license can be optically read to determine his age, and subsequently his credit card can be magnetically read to pay for a desired purchase. The preferred embodiment of the OSU  is therefore extremely flexible. However, it should be noted that an OSU may function according to the inventive concepts disclosed herein even if it does not perform both optical and magnetic reading functions. Thus, for a given application, only optical reading may be required (e.g., if age verification was performed using only a driver's license, but payment was to be made with cash or through debiting of an account established on the system ), or only magnetic reading may be required. Additionally, an OSU  could also be easily modified by one of skill in the art to receive electrical data, e.g., as might reside in the integrated circuitry on a \u201csmart card,\u201d in conjunction with any combination of optical and magnetic data.",{"@attributes":{"id":"P-00047","num":"00047"},"figref":["FIGS. 2-5","FIG. 2"],"b":["6","200","6","10","200","200","202","200","203","204","203","200","206","6","10"]},{"@attributes":{"id":"P-00048","num":"00048"},"figref":"FIGS. 2-5","b":["6","208","209","210","212","214","216","218","220","221","223","225","219","222","224","6","230","232","234","6","219","222","224","10"]},"In operation, motor  controls and drives the gear train , which in turn controls the rubber-coated front and rear drives  and  to move the ID card  passed the CCD array  for optical reading and the magnetic head  for magnetic reading. A suitable motor for this purpose is part no. PF42T-48, which is manufactured by Nippon Pulse Motors and which has a full step angle of 7.5\u00b0. Lamp  extends through the entire width of the OSU , and acts to illuminate the textual and graphical information on the surface of the ID card  to create an image which is then picked up by the CCD array . A suitable lamp for use in OSU  is part no. BF386-20B, manufactured by JKL Components Corporation. A suitable CCD array is a 768 pixel by 1 pixel linear array part no. TSL1406, manufactured by Texas Advanced Optoelectronics Solutions, Inc., (TAOS).","Also included within the OSU , but not visible in , is the printed circuit board containing electronic control circuitry including microcontroller , flash memory , and static random access memory (SRAM) . As previously mentioned, this printed circuit board is connected to the standoffs  and , but has been removed from the Figures for clarity. Although the memory chips  and  can be used in a particular embodiment to hold a variety of data, in a preferred embodiment flash  contains the configuration data for the OSU . Thus, flash  contains the program that defines the general operation of the OSU as well as contains the templates used by this program to determine the validity of the license, and to locate, for example, the date of birth information on the license. Flash  also contains the programs or algorithms necessary to perform optical character recognition (OCR) on the received image data, e.g., to determine and interpret the \u201cdate of birth\u201d field of the license. SRAM  provides temporary storage of data obtained from the license, both optical and magnetic (if any), and provides general temporary storage for the microprocessor control system. An example of such temporary storage would be transaction information and batch information stored at the OSU prior to communication with the OSU CS . A suitable component for the microcontroller  is part no. SABC161PILFT, a 16-bit microcontroller manufactured by Siemens AG Semiconductor Division. A suitable component for flash memory  is part no. SST39SF040-70-4C, a 4 Megabit, 55 ns flash manufactured by Silicon Storage Technology, Inc. (SST). A suitable component for SRAM  is part no. TC554001AF71(Y), a 4 Megabit, 55 ns SRAM manufactured by Toshiba Corporation.","While it is currently preferable to scan, in a line by line fashion, the ID card under analysis to receive an image thereof, other suitable means of receiving an image are contemplated. For example, the OSU  could be fitted with a digital camera device to take a \u201csnap shot\u201d of the ID card, instead of scanning line by line. As used herein, \u201cscanning\u201d should therefore be understood as referring to line by line scanning to procure an image, or to other technologies akin to taking a picture or image of the ID card.","The relation of the components in the OSU  is shown in schematic form in FIG. . Also shown are the microcontroller 's connection to communication device  (such as a modem), which as previously explained communicates with an OSU CS , and its relation to the International Multi-Drop Bus , which is the bus internal to a standard vending machine, and which will be explained in further detail in a later portion of this disclosure. DEX (Direct Exchange) line  collects and communicates information about the vending machine in which OSU  is installed. DEX is well known in the vending machine arts and is based on a protocol published by the European Vending Association. In vending machines supporting DEX, DEX data stored within the vending machine may be shared with external devices such as hand held computers or the remainder of system . This protocol thus allows route operators or machine owners to access information such as inventory status of the vending machine, transaction data, metering data, and data pertaining to machine operation. An example of the latter would be temperature data for a machine supporting the vending of perishable food.","With reference to , the sequence of events occurring in the OSU  is exemplified for a typical transaction. In this example, it is assumed that the consumer uses a driver's license containing a magnetic strip, and that the consumer's age must be verified prior to allowing the purchase of an age restricted product from the OSU device . It is also assumed that payment might be made by a credit card. Of course, an actual transaction implemented with the OSU  need not be so limited to these assumptions.","When the consumer approaches the machine, display , under control of microcontroller , displays an instructional message, such as \u201cplease insert driver's license.\u201d The consumer complies by inserting his driver's license  into the bezel . When the front edge of the license passes first optical sensor , microcontroller  starts motor , which engages front drive  through gear  and gear train . Front drive  then quickly pulls the license into the OSU until the front edge of the license reaches second optical sensor . During the transport of the license, the license is supported underneath by idler rollers (not shown in the Figures).","Once the second sensor  is reached, the OSU prepares to optically scan the information on the face of the license. At this point, lamp  is turned on to illuminate the face of the license, and the license is slowly advanced under CCD array  to capture an optical image of the license. Suitably slow forward motion of the license for scanning is achieved by advancing the license 0.125 mils (one one-thousandth of an inch) per pulse of the stepper motor. Each step of the motor denotes what will ultimately be a line of single pixels in the stored driver's license image. Stepping and scanning the license occurs until the third optical sensor  is reached by the front edge of the license, at which point the license has been fully scanned. The line-by-line pixel data provided by the CCD array  is stored in SRAM  for further processing. The entire optical scanning process takes about 4.3 seconds, but a scanning time of 3.0 seconds is desired in a commercial embodiment. During scanning, display  could be made to display a message such as \u201cscanning license, please wait\u201d to inform the consumer of the progress of the transaction.","After a slight delay, motor  is again activated, but in a reverse direction, i.e., such that the license is eventually ejected from bezel . During this ejection process, the information on the magnetic strip is read by magnetic head . Ejection and magnetic reading of the license is preferably performed at the motor's maximum speed to provide a maximum magnetic signal detectable by magnetic head . If magnetic data is present on the license, microcontroller  stores this data in digital form in SRAM  along with the optical scanned data.","At this point, the stored optical and\/or magnetic data is processed, either locally by microprocessor  or by other components of the system  through communication device . To the extent data is processed by other components of the system , the OSU  waits for a response from OSU CS . If no response is received, the display  might be made to state an appropriate response, such as \u201cno server response, please try later,\u201d at which point the OSU  reverts to its idle or start condition.","The optical data is first compared with the templates residing in flash . The purpose of this comparison is to find a template match that would indicate to the microprocessor  in the OSU  that a valid driver's license has been presented for age verification and what issuing body (state or country) supplied the license. If no match is found, OSU  will interpret this result to mean that no age verification can be accomplished using the optical data. If however a match is found, information associated with the matching template will indicate where on the scanned image to look for detailed information concerning the owner of the license, and more specifically, his date of birth, as will be explained in more detail later. Where the decision is to be made locally at the OSU , the OSU  need only to look at the date of birth and may not need to determine other information about the consumer, such as name, driver's license number, etc. This date when compared to the current date (obtained from the real time clock in the OSU) will determine the age of the owner of the license. Preferably, optical character recognition of the name, address, driver's license number, and expiration date of the license will be sent to the server cluster  where additional checks can be made to further verify age, license validity, and other necessary information. Additionally, where the driver's license contains magnetic stripe data, similar information may be sent to the server cluster  prior to age verification, or may be used to further verify the information determined by optical analysis by comparing the optical and magnetic data.","If either the OSU  or other portions of the Davis system  determines that the consumer's age is adequate, display  would display an appropriate message, such as \u201capproved,\u201d and the display  would thereafter prompt the consumer to make payment to the OSU device , such as, by displaying the message \u201cinsert cash or credit card.\u201d This step might not be necessary if the consumer has a pre-registered account on the system connected to his driver's license, in which case his account would be debited accordingly. If a pre-registered account is to be the basis for payment, the optical recognition data obtained from the license will be sent to the server cluster  as a \u201ckey\u201d to access the system account.","The consumer then makes the payment, and the vending proceeds as it would in a standard vending machine. If the consumer uses a credit card to pay for the purchase, the OSU  scans the magnetic data using magnetic head , stores it in SRAM , and sends it to the OSU CS  to be processed, as will be explained in more detail later. Assuming the credit card is verified, the system will send an \u201capproved\u201d message to the OSU , which will then instruct the consumer via display  to \u201cselect product.\u201d If the credit card is not verified, or if insufficient credit remains on the card, the OSU  will be so notified by the system. In this case, the display  may state \u201cnot approved,\u201d and the OSU  will return to its idle or start condition. Additionally, the OSU  preferably reverts to its idle or start condition if any of the steps in the process take an inordinate amount of time.","In any event, once payment has been made in a satisfactory manner, the OSU will generate a \u201cvend enable\u201d signal on \u201cIMDB out\u201d line  in the vending machine to enable the purchase. After distribution of the product, the IMDB  internal to the vending machine will send a \u201cvend complete\u201d signal to microcontroller  on \u201cIMDB in\u201d line . At this point the batch buffer in SRAM  is updated, and a message such as \u201cthank you for your purchase\u201d is displayed by display  for a time.","Later, for example, during off-hours, the OSU  will transmit the batch buffer to the OSU CS  for reconciliation, a process step which is particularly useful when dealing with a transaction where payment is made by a credit card. When a credit card is presented for payment, it is presented before the product selection is made. The vending machine may have products being sold at various prices. Therefore, when the credit card is presented, the information on that card is sent to the server to obtain authorization for the purchase of unknown value. A preferable method to implement this credit authorization step is to request authorization for an amount that will allow the customer to select the highest priced item in the vending machine. Once authorization is completed, and when the customer selects a product, the price of that product is recorded in the batch buffer. This buffer, which lists all of the transactions occurring within the machine over some predetermined period of time, is transmitted to the OSU CS  at some time when the machine is not likely being used, say 2:00 AM. The server cluster  ultimately sends the batch to a credit card server (such as FSS  or other integrated system ) for reconciliation, whereby the credit card processing company compares the amount authorized to the amount of the actual purchase and charges the credit card account for the actual amount of the purchase. Information concerning cash transactions and DEX information, along with the credit card information, is also used by the server cluster  for the generation of system or OSU device  reports.","As mentioned earlier, the OSU device  can also operate in a batch or disconnect mode, such that the OSU device is either temporarily or permanently disconnected from the system. Operation in these modes may be intentional or may be inadvertent, such as when the system is not functioning or if communication between the system and the OSU device  is compromised. In either of these modes, the above flow would be modified accordingly. First, age validation would have to occur locally within the OSU , which might increase the processing power or amount of data storage that would be necessary in the OSU device . (As will be explained later, optical verification of a driver's license involves the use of algorithms and comparison with image templates, which generally increase the computing power needed for the verification function).","Second, the ability to verify the validity or creditworthiness of a credit card could not be made during the process of the transaction. In this circumstance, and if the system is not responding, payment is preferably handled in two ways. First, the OSU  could be configured to receive only cash payments. Second, the OSU  could additionally be configured to receive a credit card. In this latter case, the OSU  is preferably configured to analyze as much information as is possible to try and validate the transaction. Thus, with the assistance of the microcontroller  and information about correct credit card data format stored in memory within the OSU , the OSU  assesses the form of the credit card data and the expiration date. If acceptable in format, the credit card purchase can proceed. If not acceptable, the consumer may be instructed to pay for the purchase by cash. The transaction and credit card data would be stored in the OSU 's memory to be later sent to the system or retrieved by an operator to be processed.","C. The OSU Connection Server ","OSU connection server (OSU CS)  communicates with OSU devices  using a bi-directional \u201cDavis Terminal Protocol\u201d (DTP) , the specifics of which are discussed ii later in this specification. Essentially, the OSU CS  acts as a bridge or proxy for OSU devices  with respect to their communication with server cluster . The OSU CS  can simultaneously handle bi-directions communication with one or many OSU devices over any transmission means capable of supporting DTP . One skilled will recognize that OSU CS  could constitute a cluster of several servers to prevent any particular server from becoming overworked and to provide redundancy in case a particular server fails. The OSU CS  can also be locally or geographically dispersed to enhance system reliability and robustness.","Every time an OSU device  queries the system, or the system provides information to the OSU device , an \u201cOSU CS session\u201d is created. In this manner, the OSU CS  handles communication between the OSU devices  and the remainder of the system. The OSU CS  can be any suitable server, but in a preferred embodiment constitutes any system that supports the Java 2 platform. Preferably a commercial embodiment will use an x86 based server running linux 2.4 kerual with external modems connected through standard RS232 serial ports. Although several means of communication are possible between the OSU CS  and the remainder of the system (e.g., server cluster ), it is presently preferred to use Java 2 Enterprise Edition (J2EE) over a TCP\/IP connection to establish this communication link.","Depending on the application, OSU CSs  may not be necessary, and the OSU devices  could instead communicate with the server cluster  directly or by any other system using the Davis Terminal Protocol (DTP), which will be described later, or any other suitable protocol.","D. Server Cluster ","Server cluster  essentially functions as the operating system of the Davis system . It provides, among other things (1) services to manage the OSU devices  and their associated OSU CSs , (2) storage for data used by the system, (3) web (internet) application functionality, (4) connectivity to off-system services like VisaNet, and (5) other integrated e-business systems.","One skilled in the art will recognize that server cluster  can include databases for storage of necessary system and consumer data, and that such databases can be integral with or separate from the servers in the cluster. In a preferred commercial embodiment, server cluster  comprises (1) four Compaq Proliant systems running RedHat Linux 7.1 with the 2.4 Linux kernal, (2) two servers, each with 1 GM of RAM and 50 GB of mirrored disk storage provided hosting tasks utilizing JBOSS 3.0 J2EE protocol, and (3) two additional servers, each with 256 MB RAM, 25 GB mirrored disk storage, and dual external USRobotics modems, for providing hosting tasks to an OSU CS . In the preferred embodiment, the four modems are assigned to a single number call pool to which the OSU devices  connect. The modems preferably answer calls in a round robin fashion such that if one modem is busy another one in the pool answers the call. However, it should be recognized that while a cluster of networked servers is beneficial to handle overload and to provide redundancy in the event of server failure, server cluster  could constitute a single server in a given application.","E. Management Console ","The management console  is essentially the terminal by which the Davis system's administrator accesses the network. In a preferred embodiment, management console  constitutes any suitable personal computer or workstation and provides the administrator a user interface for accessing the system. From this console , the administrator can list, group, and report information about the various OSU devices . For example, assuming the OSU devices  are vending machines, the administrator can determine if any of the machines are running low on product. Furthermore, console  can be used to configure and deploy software updates for the OSU devices  and\/or other system components. For example, it is from this terminal that the administrator would deploy a new template specifying the configuration of a particular driver's license (e.g., the state of Texas), so that the system and the OSUs will know how to optically recognize and analyze such a license format.","In a preferred embodiment, limited system administration functionality is available to vending machine or other OSU device  operators. In this embodiment, each operator is assigned its own user profile and management console for logging into the system, from which they could add, edit, delete, inactivate, pulls reports on, etc., the OSU devices  under their control.","F. Monitor ","Monitor  monitors and maintains communication with critical system functions to increase system reliability. Monitor  provides manual and automated means to observe system functions and respond to system errors. For example, if an OSU CS  or OSU device  ceases to function properly, monitor  detects this error and responds appropriately. Thus, the monitor  may reroute communications to a working or redundant OSU CS , or page the system administrator. In the event of less critical system errors, monitor  may simply record the systems error in a system log that may later be addressed by the administrator.","Monitor  registers when a component of the system has come on line. In this respect, system components may broadcast their presence on the system to be picked up by monitor , or the components may be configured to register themselves on monitor  without further assistance. Once registered and on line, components preferably \u201cping\u201d monitor  at regular intervals to provide a \u201cheart beat\u201d for the system. Monitor  may also request a ping or may request information about system functions. For example, the monitor may request an OSU CS  to provide the number of active connections with various OSU devices  and duration of each connection. In a preferred embodiment, monitor  constitutes a server similar to the OSU CSs  as described above.","G. Financial Services System ","Financial Services System (FSS)  provides the system the ability to process account transactions, i.e., the ability for consumers to access their financial accounts in order to make purchases or receive other services on the system.","Several examples exist of financials services supportable by the system. For example, FSS  could constitute a credit card payment service, such as VisaNet. In such an embodiment, the consumer would input their credit card into the OSU device  and credit for the consumer's purchase would be effectuated and processed through VisaNet. If the system contains information linking a particular ID card (e.g., a license) to a credit card, such processing may also occur by simply having the consumer enter his ID card into the system, which effectively allows the ID card to work as a credit card on the system.","Additionally, FSS  could constitute an aggregation of several accounts of the consumer, such as his credit\/debit card accounts or checking or saving accounts. All of these accounts, if registered by the consumer on the system, may be accessible through the system  as part of FSS . This embodiment allows the system to function as an ATM, whereby a consumer enters his ID card into an OSU device  and can withdraw money from his account or perform other financial transactions with his accounts without using his designated bank debit card. In this embodiment, the OSU device  might constitute an ATM machine fitted with an OSU. Likewise, an OSU could be incorporated with cash registers or other point-of-sale machines to effectuate consumer purchases, and allow the consumer access to several of his accounts using a single ID card. Thus, by using his ID card at a point-of-sale terminal, the consumer can be presented with a list of accounts registered on the system, and may select an account to pay for the purchase.","In another embodiment, FSS  constitutes a Davis cash account set up by the consumer for use on the system . This embodiment is envisioned as being particularly useful in the marketing of low cost items such as candy bars. For such transactions, it may not be sensible to pay for the purchase with a credit card, as the credit transaction fees may be relatively expensive when compared to the cost of the item being purchased.","Using FSS , a consumer cash account can be established from which payment for purchases on the system will be drawn. Thus, the system could be used, again in conjunction with the FSS , to transfer funds from the consumer's bank account to the cash account, or the cash account could be established by other means, such as sending a check to the system administrator. Thereafter, when the consumer enters his ID card into the OSU device, credit for the purchase will be drawn from his cash account, or the OSU device  may present the consumer an option to either have the money so drawn or to provide cash payment to the OSU device . Such an embodiment is believed particularly suitable for vending machines, pay phones, slot machines, transportation ticket dispensers, stamp machines, etc. In this respect, it is important to note that the system has flexibility and utility beyond age verification. In other words, the system need not be used exclusively to vend age-restricted products, and whether age verification is required for a particular purchase transaction can be easily controlled by enabling or disabling such functionality using the system.","When dealing with consumer accounts on the Davis system, it is generally preferred that such accounts be accessible through the use of a personal identification number (PIN) to ensure security. In this regard, the OSU device  will contain a keyboard or other suitable means for allowing a PIN number to be entered after receipt and optical analysis of the ID card. Suitable PIN numbers may be distributed by traditional means by an administrator of the Davis system. Optionally, and more generally, a \u201cprivate key\u201d could be used to ensure security, which could comprise a PIN number, some sort of biometric input such as a finger print, a code generation device containing an internal clock and encrypted algorithms for generating an access code, etc.","H. User Interface ","User interface  generally constitutes a personal computer from which registered consumers can access certain system features, and may be as numerous as the number of consumers that use the system. For example, using interface , a consumer can log onto the system (preferably via the web or internet) to set up a system cash account, to transfer funds between registered accounts, or to check fund balances. Interface  can also be used to check product availability at a particular OSU device , to check their statuses, e.g., whether such devices are functional at the present time, or to check for the location of OSU devices  connected to the system. For security reasons, it is contemplated that consumers be issued passwords and user names that enable them to log on to the system.","Suppose a consumer wishes to use his driver's license to purchase products for sale on a given Davis system. Using user interface , the consumer can log onto the Davis system website and register her driver's license by inputting pertinent information from the face of the card, such as name, address, license number, date of birth, etc. (The system may thereafter be made to interface with an appropriate database or other integrated system , e.g., the Texas Department of Transportation, to ensure that the entered consumer information is correct). Thereafter, the consumer may be notified by e-mail that the license has been registered, and may be issued a personal identification number (PIN) to use in conjunction with the license at the OSU device . At user interface , the consumer may also register certain bank accounts on the system, allow money to be transferred or deducted from those accounts, authorize payments for purchases to be made from their credit card (e.g., through FSS ), or establish a cash account to pay for purchases made on the system. Once the service is activated in this manner, the consumer can use their driver's license to purchase products from any OSU device . (It should be noted that registration of the license or ID card may not be necessary for all applications, such as applications in which the consumer will pay for the purchase by standard means, or for services not requiring payment, such as emergency phone calls).","Interface  also preferably allows access to others who are not necessarily consumers. For example, interface  is contemplated as being accessible by registered operators who service and\/or stock the OSU devices , such as vending machine product distributors. Such operators should preferably have special passwords, and may have access to more detailed information in the system not available to the general consumer. Through interface , an operator can, for example, (1) add, edit, or remove OSU device  information, (2) create an OSU device  configuration for remote software updates, (3) provide or retrieve pertinent system data, such as DEX data, (4) manage driver routes, (5) create financial reports, or (6) manage the inventory in the OSU devices .","Thus, a registered operator may essentially perform many of the same acts as system administrator, but only for the OSU devices  under his control. For example, suppose an operator purchases 20 OSU devices  to vend tobacco in a hotel or casino. After creating an on-line account by logging into a user interface , he can access to his home page on the system and register each of the 20 vending machines. When the registered devices call into the Davis system, they can synchronize with the operator-configured settings. For example, the devices can be directed to dial in once a week to provide DEX, audit, or reporting data. From this information the operator is able to manage inventory, add optical scanning templates so that the devices will recognize inserted ID cards, and generally control the functionality of his OSU device .","I. Integrated Systems ","One skilled in the art will recognize that the system  could be made to interface with other integrated systems  to improve or enhance system performance. Examples of integrated systems  include VisaNet, law enforcement agencies, etc., and enable the system to act as a subscriber (i.e., to receive information from other systems), a provider (i.e., to provide information to other systems), or a transaction partner (e.g., with VisaNet). Certain systems constituting FSSs  may also constitute examples of integrated systems .","J. System Geography","It is contemplated that Davis system  could be deployed on a nationwide or international basis. Such flexibility is realizable because the system has the capability of recognizing ID cards issued from several different jurisdictions. In such an embodiment, it is preferred that the OSU devices  be located nationwide, that OSU CSs  be located in certain local regions (such as cities) such that they are capable of serving several different OSU devices  within their locales, and that the server cluster , monitor , and management console  be located at a \u201cheadquarter\u201d location in the vicinity of the Davis system administrator. Of course, user interfaces , FSS , and integrated systems  will likely exist somewhere distant from headquarters. Smaller more regional systems are also possible, and the disclosed preferred geographical distribution of the system may be easily be modified depending on system requirements.","II. Davis Terminal Protocol (DTP)","As previously mentioned, a specialized protocol is used in the communication between the OSU devices  and the OSU cluster servers (OSU CS)  called the Davis Terminal Protocol (DTP) (see , element ). After researching several available communication protocols it was determined that none of them met the requirements for the Davis system , such as:\n\n","In the current embodiment, the Davis system  uses the DTP protocol layered on top of the industry standard RS232 protocol for serial communications. DTP is itself composed of two layers: the Davis middle level protocol (DMP), and the Davis high level protocol (DHP). Written together, communication protocol for the Davis system thus consists of a DHP\/DMP\/RS232 stack, although any lower level communication protocol could support the DHP\/DMP stack disclosed herein. It is currently preferable in a commercial embodiment to use the V22 modem protocol, and thus the entire communication stack may be written as DHP\/DMP\/RS232\/V22 or simply DTP\/V22. Later, DTP can easily be upgraded in a commercial embodiment to the DTP\/TCP\/IP or DTP\/TCP\/PPP combinations when technological advances allow.","The different layers in the DHP\/DMP construction perform different functions independent of the other layers. Each layer of the protocol performs services for the layer above it and provides services to the layer below it. When two devices are communicating, each layer of the protocol stack communicates with the same layer of the protocol stack on the other device.  identifies three distinct communication phases that are utilized in DTP. In Phase , an OSU device  communicates with the Davis server system (i.e., either OSU CS  or server cluster ) and requests one of its services. It does so by calling one of the routines available in the DHP API (application programming interface). The DHP routine in turn forwards the request to the DMP layer. The DMP layer then forwards or repackages the request on to the native communication channel such as RS232 (and preferably V22). In Phase , the native communication channel relays the request from the OSU Device  to the Davis server system. In Phase , the Davis server system accepts the request and forwards it on to the receiving DMP layer. The DMP layer then passes the request on to the DHP layer, followed by the OSU CS  proxying the request on to the server cluster .","The three phases will repeat, now in the reverse direction, to allow the system to send a response to the OSU device . While this example assumes that the OSU device  has made the request to the system, the system may also make requests to the OSU device , thus allowing for asynchronous, bi-directional communication.","The DHP and DMP provide communication services independent of one another, and hence generally provide different functionality. Preferably, DHP provides APIs such as login requests, transaction requests, and update requests. By contrast, DMP provides for data packet field and segment definitions, handshaking, and other lower level tasks.","A. DMP","DMP provides reliable, full-duplex, byte stream-oriented service. It accepts data from the DHP layer, divides DHP segments into a set of DMP segments and adds a header to each segment, and sends individual segments to the modem. If the size of a segment exceeds the maximum payload capacity, DMP divides the segment into several segments and sets the sequence number field in the header for the benefit of the receiving system. The capacity of DMP data payload varies from 0 to 255 bytes per segment. DMP is also free to retransmit a single segment of 200 bytes as two segments each containing 100 bytes of data.","When a transmitted segment is received by the other system (e.g., OSU CS ), DMP checks the sequence number in the header to verify that number of segments that carry a particular unit of data. When the expected number of segments is received, the receiving system retains the data for analysis or other processing and sends an acknowledgment back to the sending system (e.g., OSU device ). The acknowledgment field in the header of the acknowledgment message contains the sequence number in the received data segment. To verify that a segment was received without errors, DMP uses the checksum field, which contains the sum of all segment bytes, with the exception of the last two bytes containing the check sum.","The preferred format for the DMP data segments is shown in the below table",{"@attributes":{"id":"P-d0e4732","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DMP Header Format"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field","Size (bits)","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Version","7","Specifies the protocol version and verifies"]},{"entry":[{},{},"that the sender, receivers are using a current"]},{"entry":[{},{},"version of the protocol. Preferably 0x01."]},{"entry":["ACK Flag","1","1 if the previous segment was received"]},{"entry":[{},{},"without errors."]},{"entry":["Sequence","8","Identifies the position of the data in the"]},{"entry":["Number",{},"senders bit stream."]},{"entry":["Acknowledge","8","The number of the last received"]},{"entry":["Number",{},"sequence."]},{"entry":["Length","8","Specifies the length of the data in bytes."]},{"entry":["Data","Varies"]},{"entry":["Checksum","16","The sum off all the bytes in the segment"]},{"entry":[{},{},"(used for error correction)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"B. Handshaking","When an OSU device  and a server desire to communicate, they must first \u201chandshake.\u201d DMP uses a 2-way handshake to initiate a connection, a process that ensures that both devices are ready to transmit data, and that both devices know that the other is ready to receive data before the transfer actually starts. The procedure works as follows: sending device A (e.g., OSU device ) sends a segment to device B (e.g., OSU CS ) wherein Sequence Number=0, and ACK_FLAG=0. When device B receives the segment from device A, and if device B is ready to communicate with A, it sends a segment to A wherein Sequence Number=0, Acknowledge Number=0, and ACK_FLAG=1. Thereafter, device A may transfer data to device B.","Note that a segment may be sent or received from either end at any time. If an acknowledgment (i.e., ACK_FLAG=1) is not received for a non-zero length segment after a timeout of 2 seconds, the segment will be retransmitted. If the segment was retransmitted 3 times and the acknowledgment was not received, the connection is terminated.","C. DHP","Like DMP segments, every DHP segment has a structure that includes a header and associated data. With respect the DHP header, the first byte (i.e., eight bits) specifies the version of DHP protocol (4 bits) and type of data (4 bits). The next word (16 bits, or two bytes) specifies the length of the data within the segment, which preferably can be as large as 64 K bytes. The rest of bytes in the segment constitute the data. This segment structure is shown in the below table:",{"@attributes":{"id":"P-d0e5059","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DHP Header Format"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Field","Size (bits)","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Version","4","Version of the DTP protocol."]},{"entry":[{},"Type","4","Type of data:"]},{"entry":[{},{},{},"0-Login Request"]},{"entry":[{},{},{},"1-Login Response"]},{"entry":[{},{},{},"2-Transaction Request"]},{"entry":[{},{},{},"3-Transaction Response"]},{"entry":[{},{},{},"4-Transaction Commit"]},{"entry":[{},{},{},"5-Transaction Commit Response"]},{"entry":[{},{},{},"6-Update Request"]},{"entry":[{},{},{},"7-Update Response"]},{"entry":[{},{},{},"8-DEX Submit"]},{"entry":[{},{},{},"9-DEX Response"]},{"entry":[{},{},{},"10-Logoff Request"]},{"entry":[{},"Length","24","Specifies the length of the data"]},{"entry":[{},"Data","Varies"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"There are two types of DHP segments, those that store payload data in an ASCII string format and those that store data in a binary format. Binary format is a sequence of bytes used to represent any type of data, such as numbers, bit-map images, or complex data structures. String data is a sequence of bytes used to represent ASCII characters, which is a more convenient way to represent some systems data such as birth date, person name, or an ID number. An example of a string format might be \u201cpropertyName1=value1; propertyName2=value2,\u201d and a more specific example for a \u201cTransaction Response\u201d packet may looks like \u201ctrn=1234567; time=09\/27\/01; err=0\u201d, where different properties are separated by a semicolon character \u2018;\u2019 and a property name and property value are separated by an equal sign character \u2018=\u2019. Each of the eleven types of exemplary segments illustrated in the above table is summarized below, along with a description of their function. One skilled will realize that other segment types, carrying different forms of data for a variety of purposes, could easily be implemented, depending on the requirements of the application.\n\n","Other segments are possible, such as segments used to update product information, such as product pricing.","D. Example of DMP Communication Protocol","As an example of the operation of DTP, including DHP and DMP, the below table provides the data packet sequence to show how two devices (A and B, preferably OSU device  and OSU CS ) login and logout using DTP. In this example, serial number for device A is 987654321.",{"@attributes":{"id":"P-d0e5632","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Bytes","Protocol","Description\/Data"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"A sends Login Request packet"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["2","DMP","DMP Version 1, ACK_FLAG = 0"]},{"entry":["0","DMP","Sequence Number 0"]},{"entry":["0","DMP","Acknowledge Number 0"]},{"entry":["16","DMP","Size of payload DMP"]},{"entry":["16","DHP","DHP Version 1, Login Request Packet"]},{"entry":["0","DHP","higher bite of the offload size"]},{"entry":["0","DHP","middle bite of the offload size"]},{"entry":["12","DHP","lower byte of the offload size"]},{"entry":["115","DHP","S"]},{"entry":["110","DHP","N"]},{"entry":["61","DHP","="]},{"entry":["57","DHP","9"]},{"entry":["56","DHP","8"]},{"entry":["55","DHP","7"]},{"entry":["54","DHP","6"]},{"entry":["53","DHP","5"]},{"entry":["52","DHP","4"]},{"entry":["51","DHP","3"]},{"entry":["50","DHP","2"]},{"entry":["49","DHP","1"]},{"entry":["3","DMP","higher bite of the checksum"]},{"entry":["41","DMP","lower bite of the checksum"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"B sends Login Response packet"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","DMP","DMP Version 1, ACK_FLAG = 1"]},{"entry":["0","DMP","Sequence Number 0"]},{"entry":["0","DMP","Acknowledge Number 0"]},{"entry":["4","DMP","Size of payload DMP"]},{"entry":["17","DHP","DHP Version 1, Login Response Packet"]},{"entry":["0","DHP","higher bite of the offload size"]},{"entry":["0","DHP","middle bite of the offload size"]},{"entry":["0","DHP","lower byte of the offload size"]},{"entry":["0","DMP","higher bite of the checksum"]},{"entry":["24","DMP","lower bite of the checksum"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"A sends Logoff Request packet"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","DMP","DMP Version 1, ACK_FLAG = 1"]},{"entry":["1","DMP","Sequence Number 1"]},{"entry":["0","DMP","Acknowledge Number 0"]},{"entry":["0","DMP","Size of payload DMP"]},{"entry":["0","DMP","higher bite of the checksum"]},{"entry":["4","DMP","lower bite of the checksum"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"As noted previously, a desirable advantage of the disclosed system is its ability to receive data from a consumer through optical, non-electronic means, e.g., from the printed text on the face of an ID card such as a driver's license. This enables the consumer's driver's license, in conjunction with the OSU, to operate as would a standard credit card containing a magnetic strip or a \u201csmart card\u201d containing integrated circuitry. This is a desirable way of obtaining consumer information, such as birth date, driver's license number, social security number, or the consumer's name. Indeed, when dealing with driver's licenses, optical analysis of the license may be the only reasonable way to automate information procurement, as not all states' licenses contain magnetic strips, and the magnetic data on the various states' licenses are encoded in differing formats.","With this in mind, a focus of the disclosed system has been to provide an optical analysis algorithm capable of recognizing and analyzing the textual printing on the face of the driver's licenses of all fifty states. Of course, the system is not so limited, and could be configured to recognize other textual forms of consumer identification. An analysis of driver's license is disclosed merely as a preferred embodiment.","A. Background","Textual data are often arranged in forms. The consistent, regular organization of a form or report makes it easy to obtain desired information very quickly. For example, the organization of a phone book makes it easy to find a specific telephone number. Other examples of forms include paycheck stubs, business cards, telephone bills, stock reports, insurance cards, credit cards, passports, visas, and driver's licenses. It is the consistency of the organization that makes the form useful.","It is often the case that a transaction involves or is conditioned upon an exchange of information between buyer and seller. One example has already been given. A liquor store clerk must verify the age of the consumer prior to a transaction. The consumer's driver's license (a form) provides the necessary information. A transaction for medical services provides another example. When a consumer receives services from a doctor, she shows her insurance card (a form) which provides the needed information to the doctor to bill the insurance company.","In many transactions that involve an information exchange involving a form, a human operator reads the information and either immediately acts upon it (by allowing the purchase of alcohol) or transfers the information from the customer's form (e.g., an insurance billing number) to a computer. This can be a laborious and error prone process. This function is normally performed by a human operator because humans can read forms and computers typically can not. There is therefore a need to enable computers with the ability to read forms, such as driver's licenses. This section describes methods believed to be novel for doing so. One skilled in the art will recognize that these methods are easily implementable on a computer, such as those provided in the disclosed system, and could be coded in any number of ways to perform the tasks described herein.","B. Template-Based Character Recognition","The preferred method for optically determining the textual information printed on the face of an ID card, such as a driver's license, employs the concept of template-based character recognition. According to this scheme, one starts with an unknown character or other image, such as a letter or a picture, and compares an optically scanned version of that character or image to a series of templates. The templates are compared to the scanned character or image to determine the extent of the \u201coverlap\u201d of each template. The template with the smallest degree of overlap, i.e., the one which \u201clines up\u201d with the scanned image, is chosen as the template that matches, and therefore determines, the scanned image. Of course, because the template and the scanned image may be differently centered, the template may need to be slid (e.g., up and down, and from left to right) with respect to the scanned image to ensure that the degree of overlap is accurately assessed.","Template-based character recognition involves two tasks: the recognition task itself, which is discussed in this section, and the task of template creation, which is discussed in the next section. This disclosure improves upon both of these aspects of template-based character recognition, in ways that are discussed below.","With respect to the recognition task, assume that a scanned test image, such as a scanned driver's license, contains a two-dimensional array of M by N pixels, and that D(i,j) represents the intensity of a particular pixel (i,j), preferably a gray scale value ranging from 0 Hex to FF Hex (i.e., from 0 to 255). Assume further that there is an unknown character starting at coordinate (r,s) in the test image that represents one of K possible characters represented by K templates. (The procedure for generating the templates will be disclosed later). These templates are denoted T(i,j), wherein k=1, 2, . . . K. The vertical and horizontal dimensions of the ktemplate are denoted by mand nrespectively.","Template matching involves comparing each of the K templates to the test image and choosing the template that is \u201cclosest\u201d to the test image to determine the unknown character at (r,s). This is accomplished by calculating the least-squares \u201cdistance\u201d between the test data D(i,j) and the templates T(i,j), which is a way of quantifying the extent of the overlap between the template and the unknown character. This distance dist(r,s), can be defined as: \n\n\nFor convenience, it has been assumed that M>>mand N>>n. This is a reasonable assumption because the unknown character is typically embedded in a large scanned image (e.g., several inches in both dimensions) while the size of the template is equal to the actual character size (about one tenth of an inch in both dimensions).\n","As noted, the metric provided by Equation 1 gives the distance between the template and the test image starting at coordinate (r,s). The template that provides the minimum distance in this equation is the \u201cwinner\u201d and is chosen as the template that represents the character under analysis. If the character under analysis is the kcharacter, then dist(r,s)=0; in other words, the character and the template match exactly, an ideal situation.","However, in practice, the test character as scanned will probably be corrupted by noise, sampling artifacts, or other distortion. Additionally, each of the pixels of the scanned characters will preferably be represented by a gray scale value, which may have poor contrast\u2014i.e., the image may constitute just a few shades of gray. This will cause this distance metric to be non-zero for the matching template, but hopefully small, especially in comparison to the other K\u22121, non-matching (incorrect) templates. However, such discrepancies can lead to errors in the recognition process, and may cause the distance for a non-matching template to be smaller than the distance for the correct template, resulting in an error and incorrect recognition.","To relieve these problems, it has been discovered that it is desirable to vary equation 1 to reduce error that might be attributed to gray scale variations as follows: \n\n\nIn this equation, fitting parameter \u03b1 scales the intensity of the template while fitting parameter \u03b2 denotes a constant intensity bias. This approach is believed to be novel in that these parameters adjust the contrast of the template to match the contrast of the test data. Convenient expressions for fitting parameters \u03b1 and \u03b2 which result in a minimal distance can be computed using ordinary calculus: \n\n\n\n\n\n\n\n\n\n\nTherefore, the minimum distance corresponding to the optimum \u03b1 and \u03b2 is\n\n(|\u03b1,\u03b2)=\u03a0\u2212\u03b1\u2003\u2003(eq.2)\n","Significant advantages are achieved through the use of this modified distance metric. First, in comparison to a traditional least-squares formulation, the above formulation only requires one pass through the data to determine the optimal \u03b1 and \u03b2 using the above equations, resulting is significant computational savings. By contrast, in a traditional least squares formulation, two passes would be required to determine the fitting parameters \u03b1 and \u03b2. In the first pass, the average value of the image data D(i,j) would be calculated. In the second pass, the variance of that data would be calculated. Because the variance calculation depends upon the average value, these two calculations must be done in sequence, and cannot be done simultaneously in one pass.","Second, because this formulation, via fitting parameters \u03b1 and \u03b2, adjusts the intensity levels of the template to match the test image, the intensity of a stored template is of no importance. In other words, the templates do not have to be stored with gray scale values, and can instead be more efficiently stored, such that every pixel in a template T(i,j) is denoted by either a logic \u20180\u2019 or a \u20181\u2019 (representing completely dark and light pixels). In other words, the templates can be stored as black and white images, without the need for storing gray scale values, typically eight bits per pixel (i.e., from 0 Hex to FF Hex). Additionally, \u201cquantization\u201d of the templates results in significant computational advantages because it turns many of the necessary multiplication steps into logical operations that are more efficient. Consider for example the calculation of parameter \u201cA\u201d above, which represents the sum of products of D(r+i,s+j) and T(i,j). Although the values for D(r+i,s+j) represent grayscale values, e.g., from 0 to 255, T(i,j) represent either ones or zeros. Therefore, \u201cA\u201d is really just the sum of all D(r+i,s+j) when T(i,j) is equal to one. No multiplies are required, except in the calculation of \u201c\u03a0.\u201d (Note that parameters \u201cB\u201d and \u201c\u03a9\u201d depend only on the template, T(i,j), and are computed in advance and stored in the template data structure for use during recognition). Some loss of accuracy results from this template \u201cquantization\u201d step. However, for images sampled at 400 dots-per-inch (dpi), this loss of accuracy should not lead to an intolerable error rate.","As mentioned earlier, the procedure for matching a template in the vicinity of the test character at coordinate (r,s) is to \u201cslide\u201d the templates horizontally and vertically with respect to the test image until a best fit is found, preferably pixel by pixel although other prescribed offsets could also be used such as every other pixel. At each offset for a given template, the fitting parameters \u03b1 and \u03b2 are calculated according to the formulas given above, and the distance is calculated for each offset. This yields several distance calculations for each template, corresponding to each slide of the template, and the smallest of these distances is kept as the minimum distance for each template. Each of the minimum distances for each template are then compared to determine the template with the smallest minimum distance, such template being determined as the matching template which determines the character at (r,s).","For larger templates, the template matching algorithms can become computationally demanding and a less computationally-demanding algorithm may be required. For this purpose, a modified distance metric can be used which only compares a subset of the pixels T(i,j) in the template with the pixels D(i,j) in the test image. This modified distance metric is represented as \n\n\nThis reduces any given distance measurement down to an assessment of P terms. The set of points (i, j) at which the distance is calculated is determined in advance and is optimized for best performance. This procedure is called \u201cfast\u201d template matching and is preferably only used for large templates. These \u201cfast\u201d templates can be stored more efficiently than the full test image.\n","C. Template Training","To be able to optically \u201cread\u201d pertinent information on, for example, a driver's license, it has been discovered that it is beneficial to allow the system to \u201clearn\u201d the template corresponding to a driver's license of a particular state, rather than \u201cfeeding\u201d the template into the computer in the first instance. This procedure can increase the accuracy with which optical recognition of characters on the license is determined when compared with pre-fed templates, which may or may not accurately reflect the true structure of the \u201cform,\u201d and which may not be able to handle variations in the elements on the license. However, while this training approach is believed novel, template training is not specifically necessary to the implementation of the disclosed invention, and pre-fed templates (i.e., templates generated off-line and in advance of recognition) may work adequately.","Template training involves using example characters to generate a character template T(i,j). Throughout the training process, it is assumed that a set of scanned forms is available. For example, if the problem presented is character recognition for a Texas driver's license, then we will assume that several, e.g., 30, different Texas driver's licenses have been scanned into the computer. This driver's license image data will be used during the training process. During template training, the driver's license data will be used to obtain examples of each character. For example, if we wanted to create a template for the character \u201c5,\u201d we would look through the inventory of 30 scanned Texas drivers licenses and extract all the examples of the character \u201c5\u201d to form the template. Note that an operator must review the scanned license to isolate those portions of the larger image that contain the image for the number \u201c5\u201d in order to provide the examples necessary to \u201ctrain\u201d the \u201c5\u201d template. This is a time consuming process which can be automated somewhat by a computer or workstation.","As the generation of only a single template is referred to, the index (\u201ck\u201d) has been dropped from the notation. Let A(i,j), A(i,j), . . . A(i,j) represent examples of a particular character isolated from the set of sample licenses. The template T(i,j) will preferably recognize all of the given examples as if they were actually embedded in a test image. Therefore, the template is chosen to minimize the distance between the template and each of the examples. Due to uncertainty in the sampling phase and other anomalies, the examples must be shifted until they are all aligned. The total error or distance between the template and the examples is expressly mathematically as \n\n\nThe offsets (r,s) are adjusted until a minimum of the total error is reached. At the minimum, the template is given by the average of all the examples, which is expressed mathematically as \n\n\nThis formula can be updated recursively as new examples are found. Thus, suppose A(i,j) represents a new example. When this new example is shifted until a best fit (i.e., minimum distance) is achieved, a new offset (r,s) is provided. The template formula can then be updated as follows: \n\n","D. Sequence Estimation","Information in a form is typically represented by more than just a single character. The information of interest may be a date, a number or amount, a word, a name, etc. These types of information are represented by a sequence of characters. A sequence estimation algorithm uses the character recognition algorithm of the previous sections to recognize the individual characters of a word, number, or other string of characters. The sequence estimation algorithm must also be able to detect the end of a variable length string of characters.","Sequence estimation takes as its input a pattern specification. The pattern specification defines specific characters, or more generally types of characters, that are present in a string of characters. Various different characters include numbers, capital letters, lower-case letters, punctuation, delimiters, and symbols. Character types include \u201cwild cards\u201d (designating any particular character), letter type (whether upper or lower case), and alphanumeric type (any letter or number). Character types may also include other symbols, for example, the seal appearing on a driver's license. A pattern specification also contains information on the minimum and maximum number of characters that can occur within a particular test image.","Take for example the birth date on a Texas driver's license, which takes the following format: MM-DD-YY, where MM represents the month, DD represents the day, and YY represents a year, and where each of these designator is separated by a dash \u201c-\u201d. In this format, both the month and the day may be either one or two characters in length (compare 9-1-75 with 11-12-75). Thus, a pattern specification for the date would look like\n\nN[1:2] \u201c-\u201d N[1:2] \u201c-\u201d N[2:2]\n\nThe \u201cN\u201d denotes that the particular field contains numbers, and [1:2] denotes a sequence with either one or two characters. Together, N[1:2] denotes that the computer should look for a variable length sequence of numbers of either one or two characters in length (the month). Continuing through the pattern specification, the computer next looks for one dash character \u201c-\u201d, followed by another variable length sequence of numbers of either one or two characters in length (the day), followed by yet another dash. Finally, the computer looks for the last sequence, which necessarily constitutes a two-character numerical sequence (the year). This exemplary pattern specification consists of five elements, referred to as pattern characters, although two of these pattern characters (N[1:2] and \u201cd\u201d) are repeated for this particular pattern specification.\n","Consider as another example the consumer's name as printed on the face of Texas driver's license, and assume that the name is written in all capital letters with the first name first and the last name last. A suitable pattern specification should be able to describe the name \u201cALEXANDER PEABODY\u201d as well as \u201cJON DOE,\u201d even though these names are different in length. Such a pattern specification might look like\n\nA[1:64] \u201c \u201d A[1:64]\n\nHere, the \u201cA\u201d designates a capital letter. So, this pattern tells the computer to look for between one and sixty-four capital letters in the first name, followed by a space, followed by between one and sixty-four capital letters in the last name. Again, this pattern specification consists of three pattern characters.\n","If lower case letters were used then the letter \u201ca\u201d could be used to designate the lower case alphabetic character type. Thus, if a name were printed using capital letters for only the first letter of each name, and if the last name were printed first and separated from the first name by a comma and a space (e.g., \u201cLewis, Terril\u201d), a suitable pattern specification might look like\n\nA[1:1] a[1:63] \u201c,\u201d \u201c \u201d A[1:1]a[1:63]\n","As noted earlier, the sequence estimation algorithm uses the pattern specification to determine what sets of templates to use when performing character recognition. Therefore, in the last given example above, sequence estimation will utilize 54 different templates to assess the consumer's name: 26 Texas license \u201ccapital letter\u201d templates, 26 Texas license \u201clower case letter\u201d templates, and Texas license templates designating the comma and space. For this example, the pattern specification contains four pattern characters.","There are two methods for sequence estimation: maximum likelihood sequence estimation (MLSE) and symbol by symbol detection. MLSE essentially builds a tree of all possible patterns allowed by the pattern specification. Every combined pattern is tried and the best matching pattern is the winner. Performing this comprehensive search is time consuming but can be efficiently implemented in a given application if necessary.","As an example of MLSE, suppose the computer is provided a pattern specification \u201cN[2:3],\u201d denoting the analysis of a sequence of numbers that is either two or three numbers long. There are 1100 different sequences that fit this specification: 00, 01, . . . , 09, 10, 11, . . . , 19, . . . , 99 (i.e., 100 two-number sequences), and 000, 001, . . . , 009, 010, 011, . . . , 019, . . . , 099, 100, 101, . . . , 999 (i.e., 1000 three-number sequences). In MLSE, the computer would concatenate together the image templates for each of these 1100 sequences, would compare each of these concatenated templates with the single test images of the characters under analysis, and would choose the one with the best match using the template matching algorithm disclosed above. In each case, the whole sequence of characters is compared as if it were one image as opposed to comparison of the individual characters.","While not as comprehensive, symbol by symbol detection generally performs as well as does MLSE when the distortion in the given image is low, which is usually the case in form processing, and therefore is the preferred approach employed by the OSU. In symbol by symbol detection, character recognition proceeds in a linear sequential fashion through the character string under analysis. Consider again the pattern specification of N[2:3]. Employing symbol by symbol detection, the computer would look at the specification and would see that the first character must be a number. The computer would perform template matching, as disclosed above, using the templates for the characters 0 through 9, and choose the best match. Suppose that the best matching template for the first character was \u201c5\u201d. The computer would then again consult the specification and see that the next character must also be a number. It would therefore again perform template matching and choose the best match. Suppose that the best matching template for the second character was \u201c4,\u201d so that, thus far, the sequence \u201c54\u201d has been recognized. Next the computer would look at the specification and see that the next character may be a number, but may also be a space (\u201c \u201d) because the specification indicates that the sequence may be either two or three numbers in length. Accordingly, when performing pattern matching, the computer consults the templates for 0 through 9, and additionally consults a space template (which would be a blank template). Suppose that the best matching character was \u201c \u201d. Then the computer ultimately determine that the sequence under analysis was \u201c54\u201d. Suppose, on the other hand, that the best matching character was \u201c3\u201d. Then the computer would ultimately determine that the sequence under analysis was \u201c543.\u201d","Representing a particular element pursuant to a pattern specification is beneficial in that it reduces the number of character (or symbol) template comparisons that need to be used in the analysis of a given element. Take, for example, the \u201clastname, firstname\u201d pattern specification of A[1:1] a[1:63] \u201c,\u201d \u201c \u201d A[1:1] a[1:63] discussed earlier. As noted, this pattern specification requires the use of 54 templates to perform an analysis of the alphabetical string \u201clastname, firstname\u201d. Were a pattern specification not used to assist in the analysis, each character in the name under analysis would potentially need to be compared against each of the 54 templates. For even a short name, like \u201cLi, Tan\u201d, consisting of five letters, a space, and a comma, this exercise could involve 54*7 template comparisons, which could be very computationally demanding and slow. By providing the algorithm, through the pattern specification, information concerning the expected characters in the element, the number of comparisons is greatly reduced. For example, determination of the first letter in the name requires comparison to only 26 templates, i.e., the upper case templates, and the sequence estimation algorithm may ignore the lower case letter templates, the space template, and the dash template. By the time the analysis is completed for this example, the number of comparisons is approximately cut in half. This results because the pattern specification references only a particular subset of templates to be used at certain points in the analysis.","E. Form Decomposition","Although the disclosed character recognition techniques may be used with a variety of forms, a driver's license is used as the example form in the following discussion due to its utility in the disclosed Davis system.","As shown in , a driver's license contains many different pieces of information, including: the license (form) header , which identifies the state in which the license was issued (e.g., \u201cTexas\u201d), (2) data , such as the holder's name, address, date of birth, driver's license number, and expiration date, (3) a holder ID photo , and (4) a validation seal , used to verify the genuineness of the license. For a particular state, the information is arranged on the card at various known locations. The date of birth, for example, is always located in the same general vicinity on a Texas driver's license.","To process the driver's license, the license is decomposed into three hierarchical levels, called \u201cform,\u201d \u201ccluster,\u201d and \u201celement.\u201d An element  denotes a single piece of information, such as the date of birth. A cluster  denotes a group of elements, or possibly a single element, that occur near each other on the license. For example, the license class, the date of birth (DOB), the expiration date, license restrictions (REST), and \u201cEND\u201d, may all represent elements  within a single cluster . A form  denotes a group of clusters, and typically represents the entire image under analysis.","The form and each cluster typically have \u201cheaders\u201d with which they are associated. For example, form header  on the Texas driver's license reads as \u201cTEXAS.\u201d Several pieces of graphical information within cluster  could operate as cluster header , such as \u201cCLASS:\u201d, \u201cDOB:,\u201d or even possibly the graphic of the Texas flag above these elements, were this graphic to be contained within cluster . For simplicity, and unless otherwise noted, it will be assumed that \u201cDOB:\u201d operates as the cluster header  for the cluster  illustrated in FIG. .","The form header and the cluster headers contain, respectively, a form header origin and cluster header origins. The form header origin  and the cluster header origins (e.g., ) are represented, respectively and preferably, by the upper-left-most pixel in the form header and the given cluster header. The form header origin is determined with reference to the upper-left most pixel in the entire scanned image, which is referred to for convenience as the image origin .Thus, if the image origin has horizontal and vertical coordinates of (0,0), and if, for example, the entire image is 1000 pixels in the horizontal direction and 768 pixels in the vertical direction, the form header origin  for the form header  in the exemplary Texas driver's license shown in  might be approximately (400,20).","The cluster header origins are determined with respect to form header origin. In this respect, once the form header origin is known, that origin operates as the \u201cmaster\u201d origin from which the clusters are located. Relating the cluster header origins to the form header origin, as opposed to the image origin, assists in the subsequent optical analysis of the clusters in the event that the printing on the license has been uniformly shifted in a given direction. Thus, if the form header origin  is \u201creset\u201d to (0*,0*), the cluster header origin  for the \u201cdate of birth\u201d cluster might be at approximately (\u2212350*,180*) with respect thereto, or approximately (50,200) with respect to the image origin. Of course, in a given application, the image origin can be used as the reference point for location of both the form header origin and the cluster header origins.","The location of each element, as defined by element origin , can be known with reasonable precision within a given cluster, and is determined with reference to the cluster header origin. An analysis of driver's licenses shows that there is a high variability (plus or minus 15 pixels) in the position of clusters relative to the form header origin but very small variability (plus or minus 1 pixel) in the position of elements relative to its cluster header origin. This provides the motivation for decomposing the form as described above.","F. Template Training in Practice And Exemplary File Structures",{"@attributes":{"id":"P-00187","num":"00187"},"figref":["FIGS. 9A and 9B","FIG. 10","FIGS. 9A and 9B"]},"Referring to , a file, called information file , contains the  basic structure for the analysis of a particular drivers license form. File  is in this embodiment split into two sections that comprises the form and cluster information files  (see ) and the font information files  (see ) for a particular license. In a preferred embodiment, each state would have entries in both of files  and , although only the state of Texas is shown as an example. Generally speaking, form and cluster information file  contains information used in processing a particular form, such as the form name, the name of the file containing the form header template, and the form header origin. Form information file  also contains information concerning the various clusters of interest in the form, such the cluster name, the names of the file containing the cluster header template, the cluster header origin, the element origin for each element in the cluster, the pattern specification for each element, and the font associated with each element. Optionally, file  may also contain information such as the sizes of the form header and the cluster header specified relative to the form header origin and the cluster header origin respectively. For example, if it is known that the form header is 300 pixels in the horizontal direction and 80 pixels in the vertical direction relative to the form header origin, these offset may also be specified in file , and may be of assistance in further defining the location of the form header in the image under analysis.","Generally speaking, font information file  contains all of the necessary font information for a particular form. What fonts are required for a particular form is determined by the pattern specifications specified in the corresponding form and cluster information file . Thus, in the simple example shown in , which contains the file structures necessary for determining the date of birth and expiration date on a Texas driver's license, the font information file  contains information concerning the fonts necessary to implement the pattern specification for these elements. In this case, the same pattern specification, N[1:2] \u201c-\u201d N[1:2] \u201c-\u201d N[2:2], is used to decipher both the date of birth and the expiration date because both of these elements on a Texas driver's license have the same format. However, for exemplary purposes, assume the date of birth is written in courier 12 point font, while the expiration date is written in courier italic 12 point font. Both of these font types are specified for each element, as shown in FIG. A.","As noted, both the form and cluster information file  and the font information file  specify and reference certain template file names, which are respectively referred to as form and cluster templates files  and character templates files . Form and cluster template files  contain the form header template and the cluster header templates for a given state. Thus, and for example, the Texas form and cluster template files in  include the form header template (e.g., \u201cTexas\u201d), which as previously noted is the first template that will be considered when determining the state corresponding to the license under analysis. Also included are the cluster header template files. In this example, \u201cDOB:\u201d is used as the cluster header, although other headers within this cluster could be used as well, such as \u201cCLASS:\u201d or even a graphic such as the picture of the Texas flag (see FIG. ). Of course, and depending on the information desired from the license, other headers may exist for a particular license form.","Font templates files  include all of the necessary character templates referenced by the pattern specification during sequence estimation. Thus, for the date of birth pattern specification, which references Font , a total of eleven templates are used, each written in Courier 12 point font as specified. Thus, ten of these templates correspond to font name N, which constitutes (preferably learned) templates for the numbers 0, 1, 2, . . . 9 as they appear in the date of birth field on a Texas drivers license. Together these 10 templates constitute a character template family. The eleventh template corresponds to font name dash (-), and is the template for the dash that separates the month, day, and year. Because, as assumed, the expiration date is written in Courier italic 12 point font, referencing Font , a different set of eleven templates are referenced, and which correspond to italicized versions of the eleven templates referenced with respect to the analysis of date of birth.","Of course, other fonts and character templates may be required for a given application. Additionally, and as mentioned earlier, letter fonts may be required for word or name analysis, such as capital letters and lower case letters, and which are designated respectively by \u201cA\u201d and \u201ca\u201d in the pattern specification. In this case, the font template file  would additionally contain 52 template files, corresponding to the 26 capital and lower case letters, for both the italics and non-italic Courier fonts. Further, each license form will probably require its own unique font templates, as it is unlikely that the fonts used between two different state's licenses will be suitably similar for analysis purposes, although this is possible.","Of course, an operative embodiment need not structure the files in the exact manner specified in . For example, the form header origin, or the size of the form header template, could be stored in file  instead of in . Furthermore, the form and cluster information file  could be hierarchically split into two separate form header and cluster files. Other variations are possible, as one skilled in the art will immediately recognize.","A suitable file structure such as that shown in  must be set up in advance of analyzing a particular license. This preferably requires template training and other manual and computer-assisted analysis of the example licenses. Thus, the form header  and cluster headers  are preferably trained as discussed above, and their origins  and (and, if necessary, sizes) determined. Element origins with a particular cluster must also be determined. Additionally, the font templates for the elements are preferably trained, again as discussed above. Finally, the pattern specification is determined. Such training is preferably formed on each state's license to be analyzed, again using preferably at least a minimum of thirty exemplary licenses. With such information pulled from the exemplary driver's licenses, files may then be structured and linked as shown in , (or more preferably, as in FIG. ), and analysis of a license may now begin.","G. Form Processing","Form processing begins by taking a test image of the form under analysis, preferably by scanning with the OSU , wherein each pixel of the test image is associated with a black-and-white (grayscale) intensity (i.e., D(i,j)). (Color information could also be stored, but is not expected to be necessary for the analysis of driver's licenses. If color information is desired, the lamps  in the OSU  would preferably be modified to illuminate the license in red, blue, and green light, as one skilled in the art would recognize.) This image is preferably initially stored in the SRAM memory  on the OSU , and processed locally using the necessary template information stored in Flash .","The first step in the analysis is to determine the state of the license at issue. In this regard, each state's header template file is compared to the relevant pixels on the test images, using the stored form header origin to determine the suspected location of the header. Therefore, when attempting to match the Texas header template, the form header origin (e.g., 400,20) specified in file  is located in the test image, and the characters present at that position on the image are template matched. Because the form headers (e.g., \u201cTexas\u201d) are typically printed in a large type face on the license, the \u201cfast\u201d template matching technique disclosed earlier preferably used for identifying the license type. Additionally, if information about the size of the form header has been stored in the form and cluster information file  as well as the form header origin, a particular rectangular field of pixels on the test image may be extracted, which may quicken analysis and better define the pixels on the test image to be analyzed.","Once the license type is determined and a template is chosen (e.g., the Texas template), cluster processing begins on each cluster of interest. For example, if it is desired to extract only the date of birth from a Texas driver's license, which would be necessary in an application requiring age verification, then there is only one cluster  to process. In this example, the cluster header origin is read from file , which as noted earlier corresponds to a pixel offset (x*,y*) with respect to the form header origin. However, because the location of the cluster may vary by plus-or-minus 15 pixels, the cluster header template  is preferably \u201cslid\u201d horizontally and vertically within this variable range to locate and \u201cset\u201d the cluster origin  as a particular pixel on the test image. This sliding and setting process involves assessment of the minimal distance as discussed above.","The analysis would be more complicated, and perhaps more time consuming, for an assessment of clusters that did not contain a cluster header, which would be the case if, for example, it was desirable to determine the name of the consumer from the face of the license. In this case, the cluster template would still have a pre-determined cluster origin, but would lack information about content. In this case, sequence estimation would begin immediately at the location of the cluster origin. Otherwise, a black rectangle the size of one capital letter could be used as a dummy cluster header template to assist in determining the location of the cluster or the elements within it.","Once the cluster header origin (or more generally, the cluster origin) has been determined, sequence estimation is performed for each element in the cluster as described above. The first step is to apply the element origin provided in file  to determine the location of the elements and the pixels at which sequence estimation analysis should begin. As noted previously, because the locations of the elements are known very precisely relative to the cluster origin (usually plus or minus one pixel), sequence estimation preferably begins immediately at this point without the need for template shifting and distance determinations. However, these extra steps may be useful in a given application to further ensure the accuracy of the analysis. Thereafter, the pattern specification (e.g., N[1:2] \u201c-\u201d N[1:2] \u201c-\u201d N[2:2]) is retrieved from file . Each portion of the pattern specification is linked to a font name in file , which in turn specifies the requisite character template files in file . These character template files in file  may then be used during sequence estimation as discussed above to determine the textual content of the element under analysis, in this case, the date of birth. As mentioned earlier, the templates consulted by the sequence estimation algorithm are preferably binary templates, which provides for efficient use of memory in the system and which speeds up the analysis.","H. Form Validation","As noted above, the test image of the driver's license is an optical image of the license that has been converted to grayscale. However, it might be easy to tamper with the license, e.g., by changing the date of birth with a marker, to fool the system. Or, a completely false form might be generated, e.g., using a computer and a printer. For this reason, it is preferred that a commercial system employ further analysis measures to verify the validity of the form being analyzed.","Several different methods of validation are possible. For example, most states' driver's licenses use a seal or hologram somewhere on the face of the license that can also be detected and analyzed using character recognition techniques. (The hologram can be detected as it will cast a shadow upon optical illumination within the OSU). This is preferably performed by training a template to represent the seal or hologram. Recognition of the seal or holographic image after recognizing the date of birth provides the needed verification, and helps to ensure that the form under analysis is not wholly false. For identification forms having a bar code, templates of the bar codes could also be stored and optically compared with the bar code on the form to further verify form validity using the disclosed techniques, which might be simpler in some applications than actually reading and interpreting the bar code in the standard manners known in the prior art.","Additional validation measures can be accomplished by comparing OCR data with magnetic stripe data. In this case, the OSU would also be fitted with a magnetic head, as in OSU , and the system configured to compare the optical data and the magnetic data to compare the retrieved information to ensure that tampering has not occurred. Further security could be added by encrypting the magnetic data. Of course, such a scheme would not be possible if the license under analysis does not contain a magnetic stripe, which is the situation in some states. Additionally, validation could be compared through a comparison of optical data with the consumer's credit card data to compare, for example, the consumer's name.","In the future, other types of verification may be used with licenses that could provide higher levels of security, and which could be easily handled with the disclosed techniques. For example, in the future, images could be encoded in the license which are only visible using an infrared detector. Such a security measure would be difficult to forge. If the OSU were fitted with an infra-red light source and detector, validation of the license could be performed with great confidence that the license is authentic and has not been tampered with.","I. Handling of ID Cards not yet having a Template on the System","It would be expected in a commercial system that a consumer may try to enter an ID card for which a template has not yet been created and stored in the system. In this instance, it is presently preferred that the ID card be scanned by the system, saved, e.g., in database , and that the following message be displayed to the consumer:\n\n","A. Arrangement of Data Structures in the Database","Periodically, it may be necessary to provide updates usable by the OSU devices  in the Davis system. For example, in a system placed in service on a nationwide scale, and capable of receiving several different driver's licenses, the system's templates may need to be periodically updated if a given state changes the structure of its license. Additionally, it may be possible to add new functionality to preexisting OSU devices . Thus, an OSU device initially structured as a vending machine could be updated to also act as a change machine, or may be modified to allow age verified vending. Likewise, the OSU devices  may have to report data to the system. Such data can take many forms and could constitute, for example, the sending of the image data taken from the license or provide information relevant to the servicing of the OSU device .",{"@attributes":{"id":"P-00213","num":"00213"},"figref":["FIG. 11","FIG. 11"],"b":["8","10","12","12","18","22","12","18","12","10","18","20","14","24","12","18"]},"Important system data is preferably stored in database , including the configuration data for each OSU device  present on the system. The configuration of the various data components necessary to run the system and which are preferably stored in database  are shown in FIG. .  illustrates the various data tables and files (more generally, data structures) that are stored in the database, and shows their relationships in an \u201cEntity Relationship Diagram\u201d (ERD) format that is well known to those of skill in the art of database architectures. Pursuant to this format, the various tables within database  have relationships structured in a one-to-one (1\u20141) format, a one-to-many (1-m) format, or a many-to-many (m\u2014m) format. Of course, the database could be structured in a variety of different ways to achieve suitable system performance as disclosed herein. Thus,  is merely exemplary of a commercial embodiment.","The contents of each table in  are described in the following paragraphs. It is important to note that the database structure supports more than one version of a template. For example, the state of Texas may have three different versions of its driver's license that have been issued and are active, and the system should be able to comprehend all three types. Accordingly, the system stores various versions of the templates and other supporting information relevant to the version, as shown in the disclosed \u201c[Name]_version\u201d tables below.","Consider, for example, tables \u201cHeader\u201d and \u201cHeader_version\u201d below. The \u201cHeader\u201d table has only a few fields, including header name, description, and status. By contrast, the \u201cHeader_version\u201d table contains a significant number of fields that apply to OCR analysis, including the form header templates that are used during OCR analysis. If an ID card authority like the State of Texas decides to issue a new license, a new form header version record is created and updated with the latest information. Such an organization scheme is similar to assigning a new model number to a product when just a few features in the product have been changed. In short, through this organizational scheme, a catalog of all versions of licenses issued in the State of Texas can be maintained and referenced in the database.\n\n",{"@attributes":{"id":"P-d0e9992","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Geo"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every geo record"]},{"entry":["Name","String","Name of the geographical location"]},{"entry":["Note","String","Description of the geographical location"]},{"entry":["Creator_id","String","The user id that created this record"]},{"entry":["Editor_id","String","The user id that edited this record last"]},{"entry":["Created","String","The date it was created"]},{"entry":["Edited","String","The date it was last edited"]},{"entry":["Active","String","Flag representing if the record is active or not"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Osu: The \u201cOsu\u201d table represents information for a particular OSU device .",{"@attributes":{"id":"P-d0e10220","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Osu"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every osu record"]},{"entry":["Osu_config_id","String","Osu config id that links this osu"]},{"entry":[{},{},"record to its configuration record"]},{"entry":[{},{},"in osu_config table"]},{"entry":["Serial_no","String","Osu unit serial number"]},{"entry":["Time_zone","String","Time zone for the osu unit"]},{"entry":["Line1","String","Address line 1 for the osu unit"]},{"entry":["Line2","String","Address line 2 for the osu unit"]},{"entry":["City","String","City in which osu is located"]},{"entry":["State","String","State in which osu is present"]},{"entry":["Zip","String","Zip code of the osu location"]},{"entry":["Directions","String","Directions if any to get to that osu unit"]},{"entry":["Cert","String","Certification of osu unit"]},{"entry":["Creator_id","String","The user id that created this record"]},{"entry":["Editor_id","String","The user id that edited this record last"]},{"entry":["Created","String","The date it was created"]},{"entry":["Edited","String","The date it was last edited"]},{"entry":["Active","String","Flag representing if the"]},{"entry":[{},{},"record is active or not"]},{"entry":["Acquirer_bin","Integer","Visa assigned Bank Identification"]},{"entry":[{},{},"number issued by the merchant's"]},{"entry":[{},{},"member bank or processor"]},{"entry":["Merchant_number","Integer","A unique number assigned by the"]},{"entry":[{},{},"signing merchant's bank or processor"]},{"entry":[{},{},"used to identify the merchant"]},{"entry":[{},{},"within the VisaNet system."]},{"entry":["Store_number","Integer","Number assigned by the signing"]},{"entry":[{},{},"member, processor to identify a specific"]},{"entry":[{},{},"merchant store within"]},{"entry":[{},{},"the VisaNet system"]},{"entry":["Terminal_number","Integer","Number assigned to identify a unique"]},{"entry":[{},{},"terminal within a merchant location"]},{"entry":["Device_code","Character","Device type of the merchant"]},{"entry":[{},{},"submitting the authorization request"]},{"entry":["Industry_code","Character","Industry type of the merchant"]},{"entry":[{},{},"submitting the authorization request"]},{"entry":["Language","String","Language to be used in formatting"]},{"entry":[{},{},"the authorization response text message"]},{"entry":["Merchant_category","Character","Number assigned by the signing"]},{"entry":[{},{},"member or processor to identify a"]},{"entry":[{},{},"merchant industry classification"]},{"entry":["Merchant_name","String","Merchant Name"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Osu_config: This table contains configuration information for each OSU device . It has 1-m relation with \u201cOsu\u201d so that a single configuration can be applied to multiple OSU devices . \u201cOsu_config\u201d is linked with \u201cOcr_form,\u201d \u201cHeader\u201d and \u201cOcr_font_set,\u201d and is related to each with a m\u2014m relation. As will be explained later, each of these three tables is associated with a corresponding version table. At one time, only one version of each will be active for a particular configurable OSU device .",{"@attributes":{"id":"P-d0e10970","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Osu_config"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every osu record"]},{"entry":["Name","String","Name of the osu configuration"]},{"entry":["Version","Integer","Version of the osu configuration"]},{"entry":["Creator_id","String","The user id that created this record"]},{"entry":["Editor_id","String","The user id that edited this record last"]},{"entry":["Created","String","The date it was created"]},{"entry":["Edited","String","The date it was last edited"]},{"entry":["Active","String","Flag representing if the record is active or not"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Header: This table contains information about the various form headers, and has a 1-m relation with \u201cHeader version\u201d table.",{"@attributes":{"id":"P-d0e11192","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Header"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every header record"]},{"entry":["Name","String","Name of the header"]},{"entry":["Description","String","Description of the header"]},{"entry":["Status","Integer","Status of header record to indicate if this header is"]},{"entry":[{},{},"the current (indicated by 0), added (indicated"]},{"entry":[{},{},"by 1) or removed (indicated"]},{"entry":[{},{},"by 2) one from the configuration"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Header_version: This table provides information for the headers, like their form header origin coordinates, and possibly their bottom right coordinates. It also stores multiple versions of the form header templates for the relevant states.",{"@attributes":{"id":"P-d0e11378","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Header_version"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every"]},{"entry":[{},{},"header version record"]},{"entry":["Template_package_id","String","Template package record id that this"]},{"entry":[{},{},"header version is a part of"]},{"entry":["Header_id","String","Header record id which it is a version of"]},{"entry":["Version","Integer","Version number of this header version"]},{"entry":["Image_name","String","Image name used by this"]},{"entry":[{},{},"header version record"]},{"entry":["Top_left_id","String","Top left corner of"]},{"entry":[{},{},"the header region structure"]},{"entry":["Right_bottom_id","String","Right bottom corner of"]},{"entry":[{},{},"the header region structure"]},{"entry":["Creator_id","String","The user id that created this record"]},{"entry":["Editor_id","String","The user Id that edited this record last"]},{"entry":["Created","String","The date it was created"]},{"entry":["Edited","String","The date it was last edited"]},{"entry":["Header_template","Binary","Scanned image of the header version"]},{"entry":["Active","String","Flag representing if this version"]},{"entry":[{},{},"is active for its parent header"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Ocr_font_set: As mentioned previously, elements in a given form can be written using various fonts, such as Courier font, and these may be printed in different sizes. Basic font information for the elements is provided in the \u201cOcr_font_set\u201d table. This table has 1-m relation with the \u201cOcr_font_set version\u201d table.",{"@attributes":{"id":"P-d0e11762","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Ocr_font_set"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every font set record"]},{"entry":["Name","String","Name of the Ocr Font Set"]},{"entry":["Description","String","Description if any, for the font set"]},{"entry":["Status","Integer","Status of font set record to indicate if this font set"]},{"entry":[{},{},"is the current (indicated"]},{"entry":[{},{},"by 0), added (indicated by 1) or removed"]},{"entry":[{},{},"(indicated by 2) one from the configuration"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Ocr_font_set_version: This table is dependent on \u201cOcr_font_set\u201d and provides information for any \u201cOcr_font_set.\u201d The basic information for each of the fonts is stored within this table. Thus, \u201cFamily\u201d represents the basic font type (e.g., Arial or Courier), \u201cFont_size\u201d represents the size of the font (e.g., 10 point or 12 point), and \u201cStyle\u201d represents modifications of the font, such as italicized or bolded. It has 1-m relation with \u201cFont_type\u201d table.",{"@attributes":{"id":"P-d0e11948","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Ocr_font_set_version"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every"]},{"entry":[{},{},"font set version record"]},{"entry":["Template_package_id","String","Template package record id that this"]},{"entry":[{},{},"font set version is a part of"]},{"entry":["Ocr_font_set_id","String","Font set record id which"]},{"entry":[{},{},"it is a version of"]},{"entry":["Version","Integer","Version number of this font set version"]},{"entry":["Family","String","Family of the font set"]},{"entry":[{},{},"(e.g., Arial or Courier)"]},{"entry":["Font_size","String","Size of the font set"]},{"entry":[{},{},"(e.g., 10 point or 12 point)"]},{"entry":["Style","String","Style of the font set (e.g., bold or italic)"]},{"entry":["Creator_id","String","The user id that created this record"]},{"entry":["Editor_id","String","The user id that edited this record Last"]},{"entry":["Created","String","The date it was created"]},{"entry":["Edited","String","The date it was last edited"]},{"entry":["Active","String","Flag representing if this version is"]},{"entry":[{},{},"active for its parent font set"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Font_type: This table stores the various types of characters recognizable by the system, such as \u201cA\u201d for upper case letters A-Z, \u201ca\u201d for lower case letters a-z, \u201cN\u201d for numbers 0-9, \u201cP\u201d for punctuation and symbols (such as .,\u2032\u2033-\/;:!?( )[ ]{ }%$), \u201cZ\u201d for any upper or lower case letter, \u201cX\u201d for any letter or number, \u201c*\u201d for a wildcard representing any character, and \u201cS\u201d for a space. It has a 1-m relation with \u201cFont_pattern\u201d table.",{"@attributes":{"id":"P-d0e12314","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Font_type"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every font type record"]},{"entry":["Ocr_font","String","Font set version record id which it is a type of"]},{"entry":"set_version_id"},{"entry":["Font_type","String","Specifies the type of character stored in the"]},{"entry":[{},{},"associated font type"]},{"entry":[{},{},"(e.g., \u201cA,\u201d \u201ca,\u201d \u201cN,\u201d \u201cP,\u201d etc.)"]},{"entry":["Description","String","Description of the character that font type has"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Font_pattern: This table stores the character templates for a given font. For example, there would be twenty six templates stored within the \u201cFont_pattern\u201d table for each upper case letter and for each font type. Thus, assuming two fonts (e.g., arial or courier), there would be a total of 52 templates stored for each font type \u201cA,\u201d representing upper case letters.",{"@attributes":{"id":"P-d0e12500","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Font_pattern"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every font pattern record"]},{"entry":["Font_type_id","String","Font type record id which this"]},{"entry":[{},{},"pattern is a part of"]},{"entry":["Name","String","Name of the pattern"]},{"entry":["Font_data","Binary","Image of the font pattern"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Ocr_form: This table stores information for a form template. It is related to the \u201cOcr_cluster\u201d table by a 1-m relation because a form template can have many clusters defined within it. It is associated with the \u201cHeader\u201d table by a 1\u20141 relation that links the header belonging to a particular form. It is also related to the \u201cOcr_form_version\u201d table. If any information is changed for an existing form template, a new version of it is created and a record is set for it in \u201cOcr_form_version\u201d table.",{"@attributes":{"id":"P-d0e12662","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Ocr_form"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every form record"]},{"entry":["Geo_id","String","Link to the Geo table for associated state"]},{"entry":[{},{},"information for a form record"]},{"entry":["Header_id","String","Header id for the form header"]},{"entry":["Name","String","Name of the form (e.g., Texas driver's license)"]},{"entry":["Description","String","Description if any of the form"]},{"entry":["Status","Integer","Status of form record to indicate if this form"]},{"entry":[{},{},"template is the current (indicated by 0), added"]},{"entry":[{},{},"(indicated by 1) or removed (indicated by 2)"]},{"entry":[{},{},"one from the configuration"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Ocr_form_version: This table is dependent on the \u201cOcr_form\u201d table and stores version information for each form. Included within this table is the X and Y coordinates for the starting position of the image under analysis. Thus, if it is known that the first ten pixels of a given form image contains information not indicative of the content of the form (e.g., because of the rounded corners that exist on the form), these first ten pixels can be ignored during OCR.",{"@attributes":{"id":"P-d0e12896","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Ocr_form_version"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every"]},{"entry":[{},{},"form version record"]},{"entry":["Template_package_id","String","Template package record id that"]},{"entry":[{},{},"this form version is a part of"]},{"entry":["Ocr_form_id","String","Form record id which it is a version of"]},{"entry":["Version","Integer","Version number of this form version"]},{"entry":["Xpos","Integer","X coordinate of the starting point"]},{"entry":[{},{},"of the form template"]},{"entry":["Ypos","Integer","Y coordinate of the starting point"]},{"entry":[{},{},"of the form template"]},{"entry":["Creator_id","String","The user id that created this record"]},{"entry":["Editor_id","String","The user id that edited this record last"]},{"entry":["Created","String","The date it was created"]},{"entry":["Edited","String","The date it was last edited"]},{"entry":["Active","String","Flag representing if this version"]},{"entry":[{},{},"is active for its parent ocr form"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Ocr_cluster: This table is dependent on \u201cOcr_form\u201d table and provides a list of clusters for a particular form. It has 1-m relation with the \u201cOcr_cluster_version\u201d table that provides versioning support. As discussed earlier, a cluster is a group of several elements. Therefore, \u201cOcr_cluster\u201d is associated with the \u201cOcr_element\u201d table to provide a list of necessary elements.",{"@attributes":{"id":"P-d0e13232","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Ocr_cluster"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every cluster record"]},{"entry":["Ocr_form_id","String","Form id which this cluster is a part of"]},{"entry":["Header_id","String","Header id for this cluster"]},{"entry":["Name","String","Name of the cluster"]},{"entry":["Description","String","Description of the cluster"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Ocr_cluster_version: \u201cOcr_cluster_version\u201d stores the top left and right bottom coordinates for the cluster header origin and also stores the cluster header template images. Thus, for example, this table is where the cluster header image for the cluster containing the date of birth (such as \u201cCLASS:\u201d, \u201cDOB:\u201d, or the image of the Texas flag) would be stored.",{"@attributes":{"id":"P-d0e13400","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Ocr_cluster_version"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every"]},{"entry":[{},{},"cluster version record"]},{"entry":["Template_package_id","String","Template package record id that"]},{"entry":[{},{},"this cluster version is a part of"]},{"entry":["Ocr_cluster_id","String","cluster record id which it is a version of"]},{"entry":["Version","Integer","Version number of this cluster version"]},{"entry":["Name","String","Name of the cluster version"]},{"entry":["Point_id","String","Starting point (X, Y) for"]},{"entry":[{},{},"the cluster version template"]},{"entry":["Cluster_template","Binary","cluster image for this version"]},{"entry":["Creator_id","String","The user id that created this record"]},{"entry":["Editor_id","String","The user id that edited this record last"]},{"entry":["Created","String","The date it was created"]},{"entry":["Edited","String","The date it was last edited"]},{"entry":["Active","String","Flag representing if this version is"]},{"entry":[{},{},"active for its parent ocr cluster"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Ocr_element: This table stores the name and description of particular elements, such as date of birth, expiration date, name, etc. It also is related with \u201cOcr_element_version\u201d table through a 1-m relation that provides versioning support.",{"@attributes":{"id":"P-d0e13742","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Ocr_element"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every element record"]},{"entry":["Ocr_cluster_id","String","Cluster id which this element is a part of"]},{"entry":["Name","String","Name of the element"]},{"entry":["Description","String","Description of the element"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Ocr_element_version: The \u201cOcr_element_version\u201d in effect stores the element origins for the various elements within a cluster. Thus, this table stores top left and right bottom coordinates (\u201ctop_left_id\u201d and \u201cbottom_right_id\u201d) for sliding a character template during OCR analysis, and preferably defines a small rectangle at the upper left corner of the character under analysis. In this regard and as disclosed earlier, it has been noted that the location of an element within a cluster varies approximately plus-or-minus one pixel within the cluster. Therefore, and for example, a small rectangle, perhaps 3-by-3 pixels in dimension, is set at the element origin in the test image where it is expected that the first character in the element is located. In other words, the small rectangle defines the element origin in the test image as a variable region. The upper left pixel of the character template is then moved or slid to correspond to one of the nine pixels within the 3-by-3 pixel rectangle, and a distance metric is calculated for each position. The minimum of these nine distance metrics will define the location of the first character of the element under analysis. This procedure is then repeated as the sequence estimation algorithm sequentially identifies each character in an element.","Also referenced in this table are the various fonts and pattern specification that are to be used for the various elements during OCR analysis.",{"@attributes":{"id":"P-d0e13897","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Ocr_element_version"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every"]},{"entry":[{},{},"element version record"]},{"entry":["Template_package_id","String","Template package record id that"]},{"entry":[{},{},"this element version is a part of"]},{"entry":["Ocr_font_set_id","String","Font set record id for"]},{"entry":[{},{},"this element version record"]},{"entry":["Element_pattern_id","String","Element pattern id for"]},{"entry":[{},{},"this element version record"]},{"entry":["Ocr_element_id","String","Element record id which it"]},{"entry":[{},{},"is a version of"]},{"entry":["Version","Integer","Version number of this cluster version"]},{"entry":["Top_left_id","String","Top left corner of the"]},{"entry":[{},{},"element region structure"]},{"entry":["Right_bottom_id","String","Right Bottom corner of the"]},{"entry":[{},{},"element region structure"]},{"entry":["Creator_id","String","The user id that created this record"]},{"entry":["Editor_id","String","The user id that edited this record last"]},{"entry":["Created","String","The date it was created"]},{"entry":["Edited","String","The date it was last edited"]},{"entry":["Active","String","Flag representing if this version is"]},{"entry":[{},{},"active for its parent ocr element"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Element_pattern: The \u201cElement_pattern\u201d table is linked to \u201cElement_pattern character\u201d table with a 1-m relation and is linked to the \u201cOcr_element_version\u201d table with a 1-m relation. The purposes of the \u201cElement_pattern\u201d and \u201cElement_pattern_character\u201d tables are to specify information about the pattern specification. For example, in the aforementioned pattern specification representing the six-digit date of birth (i.e., N[1:2] \u201c-\u201d N[1:2] \u201c-\u201d N[2:2]), there are five pattern characters in the pattern specification, three denoting the month, day, and year (N[1:2] and N[2;2]), and two denoting the dashes that separate them (\u201c-\u201d). Thus to create a database representation of a six-digit date of birth, one would create a record in the \u201cElement_pattern\u201d table with the name of \u201c6-digit date\u201d and then create pattern character entries in the \u201cElement_pattern_character\u201d table, each linking back to the newly created \u201cElement_pattern\u201d record.",{"@attributes":{"id":"P-d0e14305","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Element_pattern"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every element"]},{"entry":["Name","String","Description of pattern specification (e.g., \u201c6-digit"]},{"entry":[{},{},"date,\u201d \u201csocial security number,\u201d etc.)"]},{"entry":["Creator_id","String","The user id that created this record"]},{"entry":["Editor_id","String","The user id that edited this record last"]},{"entry":["Created","String","The date it was created"]},{"entry":["Edited","String","The date it was last edited"]},{"entry":["Active","String","Flag representing if this pattern"]},{"entry":[{},{},"specification is active"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Element_pattern_character: The \u201cElement_pattern_character\u201d table stores information concerning each pattern character in the pattern specification. Thus, stored here are information for each pattern character's character type (e.g., \u201cN\u201d representing numbers, or the dash symbol) and length of the pattern character, represented by minimum and maximum number of occurrences of the character of that type (e.g., a minimum of 1 for the month, and a maximum of 2 for the month). \u201cSeq\u201d stands for sequence and denotes the order of the pattern characters within the pattern specification. Thus, \u201cSeq\u201d equals 1 for the first pattern character (i.e., N[1:2]), 2 for the second pattern character (i.e., \u201c-\u201d), and eventually would equal 5 for the last pattern character (i.e., N[2:2]).",{"@attributes":{"id":"P-d0e14533","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Element_pattern_character"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every"]},{"entry":[{},{},"element pattern character record"]},{"entry":["Seq","Integer","Identifies the place of a pattern"]},{"entry":[{},{},"character in it pattern specification."]},{"entry":["Element_pattern_id","String","Element pattern id for this"]},{"entry":[{},{},"pattern character record"]},{"entry":["Character_type","String","Describe the type of character"]},{"entry":[{},{},"(e.g., \u201cN\u201d for numbers, \u201cA\u201d for"]},{"entry":[{},{},"upper case letter, etc.)."]},{"entry":["Min","Integer","Minimum character length of"]},{"entry":[{},{},"the element pattern character"]},{"entry":[{},{},"(e.g., 1 for month or day, or 2 for year)."]},{"entry":["Max","Integer","Maximum character length of"]},{"entry":[{},{},"the element pattern character"]},{"entry":[{},{},"(e.g., 2 for month, day, or year)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Template_package: This table provides versioning support for all OSU configuration components. It stores the version number of latest configuration and also the lists for \u201cHeader_version,\u201d \u201cOcr_font_set_version,\u201d \u201cOcr_cluster_version\u201d and \u201cOcr_element_version.\u201d Note the various tables contain a field called \u201ctemplate_package_id\u201d that provides the link or relationship to the \u201cTemplate_package\u201d table. This table is associated with each of these other version tables by a 1-m relation.",{"@attributes":{"id":"P-d0e14827","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Template_package"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every template package record"]},{"entry":["Version","Integer","Version number of the template package"]},{"entry":["Created","String","The date it was created"]},{"entry":["Active","String","Flag representing if this template"]},{"entry":[{},{},"package is active or not"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Trn: This table stores the Visa Net transactions performed for the OSU device . It is linked to \u201cOsu\u201d table through a 1-m relation.",{"@attributes":{"id":"P-d0e14995","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Trn"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Id","String","Unique identifier for every transaction record"]},{"entry":["Osu_id","Integer","Osu id to which this transaction record is linked"]},{"entry":["Returned_aci","String","Returned requested authorization characteristics indicator"]},{"entry":["Store_number","String","Number assigned by the signing member, processor to identify a"]},{"entry":[{},{},"specific merchant store within the VisaNet system"]},{"entry":["Terminal_number","Integer","Number assigned to identify a unique terminal within a merchant"]},{"entry":[{},{},"location"]},{"entry":["Auth_source","Character","Source of the authorization code"]},{"entry":["Trans_sequence","Integer","Terminal generated transaction sequence number"]},{"entry":["Response_code","String","Code indicating the status of the authorization request"]},{"entry":["Approval_code","String","Authorization code when a transaction has been approved"]},{"entry":["Local_trans_date_time","String","Date and time when the transaction took place"]},{"entry":["Auth_response","String","Response or display text message"]},{"entry":["Avs_result","Character","Avs Result"]},{"entry":["Retrieval_ref_number","String","Transaction retrieval reference number returned"]},{"entry":[{},{},"by the authorizing system"]},{"entry":["Market_data_identifier","Character","Industry specific data being submitted"]},{"entry":["Trans_id","Integer","Visa transaction identifier or Master Card reference number"]},{"entry":["Validation_code","String","Specific information generated by the card issuer"]},{"entry":["Group_ver","Integer","Addendum data group version number"]},{"entry":["Committed","Character","Flag representing if the transaction has been committed or not"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Whenever the configuration of an OSU device  is changed by the vending machine operator or Davis system administrator executing an update, a new version for that device is created and is added to its version table(s). At the same time, the \u201cTemplate_package\u201d table is updated. When an OSU device  connects to the system, its current configuration version number is supplied and is checked against the version number present in \u201cTemplate_package\u201d table. If the number present in the table is greater than the one sent by the device, that device requires an update. The latest configuration data is then retrieved from the database  by reviewing all the version tables discussed above. An update package is then created for and sent to the device. If the version numbers match, meaning no change is necessary in the configuration of the device, the server cluster  checks to see if a (new) template needs to be added to or deleted from that device's configuration file, and again an update package is created and sent accordingly. Update packages are created and sent to the devices in a format specified by the DTP protocol as explained earlier.","Control and management of the system occurs at management console , which was explained in some detail earlier. It is from this console that new data is entered onto the system, such as new or improved templates for the OSU devices , or new configuration updates for the OSU devices . Console  may also be used to add new OSU devices  to the system. System information may also be retrieved to console . For example, console  can obtain updates sent from the OSU devices , retrieve a template list supported by any OSU device , or delete templates from an existing OSU device .","Of course, database  also preferably includes data files for each of the consumers who have either pre-registered to use the system, or who have used the system. Such consumer files may contain important information about the consumer, such as their names and addresses, information regarding their registered accounts or actual storage of the accounts, and may also contain information that might make subsequent processing of the consumer's information easier. For example, once a consumer's date of birth has been assessed, it can be stored. Thereafter, if the system determines (through OCR) that a particular customer has requested to make a purchase, that consumer's file can be analyzed and, for example, the date of birth retrieved, making further OCR processing of the license potentially unnecessary.","In addition to the table definitions described above, in a commercial system, there may be over 100 tables in database  that are used to support and collect audit data, often referred to in the art as DEX or EVA data, and which was briefly discussed earlier. For more information concerning these DEX related data constructs, the reader is referred to \u201cEuropean Vending Association Data Transfer Standard,\u201d European Vending Association, Release 5.0, July 1999, which is hereby incorporated herein by reference for all that it teaches.","B. Update Payload Information","As has been discussed previously, it may be necessary to update the templates or other configuration information resident in the OSU  for optically analyzing a given license. Below is shown an example of the payload information that is sent by DTP to an OSU  to provide an update to such information, i.e., a Type  \u201cUpdate Response\u201d packet. This example shows only a representation of the payload of data and does not otherwise show DTP header or other supporting information that will also be sent with the Update Response packet. As mentioned earlier, the payload will ultimately be stored in the OSU , preferably in Flash .","As one skilled in the art will recognize, the payload information is organized in hierarchical data structure, as opposed to the relational database format used to organize the data structures in the database  associated with server cluster  (see FIG. ). In other words, the payload information is organized in a \u201ctree format,\u201d with one data structure referencing another and so on. Thus, the \u201cForm\u201d data structure references a data structure called \u201cPoint,\u201d which is has its own data structure, and so on. It will also be appreciated by those of ordinary skill that multiple versions of the data structures listed below will like be sent in a given application. For example, \u201cCluster N\u201d will be sent for every N clusters of interest in the form, and \u201cElement N\u201d will be sent for every N elements of interest within a particular cluster.","Preferably, each Update Response packet contains configuration information for a single form. Thus, if it were necessary to fully update the OSU  to provide image templates and other supporting OCR data for the states of Texas and Louisiana, at least two Update Response packets would be sent.","One or more update responses may be sent to the OSU device to complete a fall upgrade. The first byte of the update response payload determines the extent of the update that is to occur at the OSU . If the first byte equals \u201c00,\u201d the font information will be updated or added if it doesn't presently exist. If the first byte equals \u201c01,\u201d this is interpreted by the OSU  as an instruction to delete a font residing in the OSU . If the first byte equals \u201c1X,\u201d the form header templates stored in the OSU  are implicated, with \u201c10\u201d designating the replacing of an old template or the additional of a new header template, and \u201c11\u201d designating the deletion of a header template. If the first byte equals \u201c2X,\u201d other form structure information is implicated, such as the cluster information, the cluster headers, the character templates for the elements, the pattern specifications, etc. Specifically, \u201c20\u201d designates and update or addition to such information, while a \u201c21\u201d designates a deletion.","Some of the data in the payload is variable in length. For example, the cluster list may contain several clusters or only a single cluster. For this reason, the cluster list data structure contains at its end an End Of Line (\u201cEOL\u201d) marker to denote the boundary between that data structure and the next data structure in the payload.","Keeping the foregoing in mind, the Update Response payload is preferably represented as follows. Parenthetical description are used to tie the various data structures to concepts introduced earlier in this specification:","\u201cForm\u201d:\n\n","\u201cHeader\u201d: (represent both form and cluster headers)\n\n","\u201cRegion\u201d:\n\n","\u201cPoint\u201d: (specifies a particular pixel)\n\n","\u201cClusterlist\u201d: (a list of clusters associated with the form)\n\n","\u201cCluster N\u201d:\n\n","\u201cElementlist\u201d: (a list of elements associated with each cluster)\n\n","\u201cElement N\u201d:\n\n","\u201cPattern\u201d: (defines the pattern specification)\n\n","\u201cPattern Character N\u201d:\n\n","\u201cHeader Image\u201d: (i.e., the header templates)\n\n","\u201cFont\u201d:\n\n","\u201cFont Type List\u201d: (lists the various types of fonts, e.g., Courier 12 pt., Arial 10 pt., etc.)\n\n","\u201cCharacter Type N\u201d:\n\n","\u201cCharacter Template List\u201d:\n\n","\u201cCharacter Template N\u201d: (i.e., the character templates)\n\n","One of the advantages of the disclosed system is its ability to work with preexisting vending hardware. Only slight modifications are needed to retrofit such pieces of equipment with the OSU  disclosed herein. How such modifications are made to a standard vending machine is disclosed as illustrative of this process, but similar techniques would be used to modify other pieces of equipment, as one skilled in the art will recognize. The structure, functionality, and operation of such standard vending machines is also discussed in U.S. patent applications Ser. Nos. 09\/836,805 and 09\/851,198, which are incorporated by reference herein in their entirety, and which are assigned to the present assignee.",{"@attributes":{"id":"P-00318","num":"00318"},"figref":["FIG. 12","FIG. 12"],"b":["79","81","87","84","75","82","88","89","88","96","82","96","88","89"]},"However, in a vending machine retrofitted to include a OSU , vending of the product is, at least in some embodiments, only to be made upon verification of certain consumer information, such as his age or the validity of his driver's license. For this reason, the vending machine logic is preferably modified as shown in FIG. . In this figure, microcontroller  (see also ) has been inserted between the microprocessor  and the payment devices  and . (In this disclosure, for convenience and clarity, the control device within the OSU  is referred to as a \u201cmicrocontroller,\u201d while the control device on the vending machine is referred to as a \u201cmicroprocessor.\u201d However, as one skilled in the art will realize, these two devices are interchangeable as both microcontrollers and microprocessors perform similar functions). The microcontroller  is also in communication with a communication device , such as a modem, which in turn is connected to an OSU CS  as described above. (Of course, a modem is merely an exemplary way of providing communication, and any other suitable form of communication, e.g., wireless or optical cable, is also contemplated). Before allowing a purchase, the microcontroller  waits for the results of the OSU analysis to determine if the condition for purchase (e.g., age) has been met. If this condition is met, and if payment has been made at either of payment devices  or , then the vend will be made via the product dispensing mechanism . The microcontroller  must be operated in a fashion such that the microprocessor  doesn't know that the IMDB bus  has been disconnected from the payment devices  and , and therefore will send mock polling data on bus  for this purpose. Additionally, the microcontroller  must now perform the function of polling the payment devices  and , just as did the microprocessor  before the retrofit.",{"@attributes":{"id":"P-00320","num":"00320"},"figref":["FIG. 14","FIG. 14"],"b":["230","6","6","101","102","103","96","230","232","234"]},"In the retrofitted device, the microcontroller  essentially becomes the master processor and largely takes control over the native microprocessor  already present in the vending machine, although the microprocessor  will continue to run other normal vending machine functions, such as running the machine's dispensing motors and display . The microcontroller  directly communicates with the communication device , the cancel button , the payment devices  and , and the printer . The microcontroller  also controls the IMDB bus  through IMDB control circuits . To the extent that the microprocessor continues to run local systems functions like enabling the vending of products, it does so through receipt of commands from microcontroller . Microcontroller , when operating in an \u201coff-line\u201d mode, can make decisions concerning allowing or not allowing a purchase. When operating in an \u201con-line\u201d mode, microcontroller  receives instructions from the server cluster  through the communications device  concerning allowing or not allowing a purchase.","While the disclosed embodiment shows a traditional vending machine retrofitted with an OSU, one could of course build in accordance with the teachings in this disclosure an OSU device  from scratch containing an OSU. In such OSU original models, the architecture and circuitry could be arranged in any number of ways to achieve suitable functionality, as one skilled in the art will immediately recognize. For example, it would probably be beneficial in an OSU device  designed from scratch to combine the functionality of the verification controller  and the microprocessor  into a single microprocessor, and perhaps to dispense with the use of the microcontroller  IMOB bus  altogether. Likewise, it may be desirable for the microcontroller  to be positioned outside the OSU, or to reprogram an existing microprocessor  to perform the functions of the microcontroller  as disclosed herein.","VI. System Installation and Initialization","Suppose a vending machine operator, Bob's Beverages (\u201cBob\u201d), purchases a Davis system enabled beverage vending machine equipped with an OSU . Bob desires to sell alcoholic beverages from the machine in a hotel\/casino in Las Vegas, Nev. Bob, using a web browser on the public internet, e.g., from his interface , goes to the Davis system  website and \u201clogs in\u201d to a secure portion of the site using the user name and password that he received either when earlier registering with the system on-line or when he purchased the machine. Bob then creates a vending machine pool on the website and adds one machine to it\u2014the machine scheduled for delivery to the hotel. He enters data about the new vending machine to register it with the system, such as its unique identification number, machine type, location, etc.","Bob may then uses the on-line machine configuration editor to set machine and OSU  operation parameters, i.e., Bob creates a configuration file for his machine on-line. For example, Bob may review what types of ID card templates are currently supported by the system and may select which of those will be accepted by his machine. Thus, if the system currently supports 100 ID types, including 50 state driver's licenses type, Bob may choose all ID types or some subset of these to be supported by his machine. This ID type selection process will allow the templates for the selected ID card types to eventually be sent by the system to the OSU  in Bob's machine. With the configuration editor, Bob may also configure other functional aspects of his machine. For example, Bob may specify that periodic audits be scheduled for his machine, e.g., that DEX\/EVA information be sent daily at 2:00 am. He may also specify that only certain product selection window 75 rows will be used to sell age restricted alcoholic beverages, and therefore that the consumer's age will need to be verified by the system to vend products from these rows. He may further configure the system to accept either cash, coin, and credit card payment methods, and may require credit card information to be supplied by the consumer to provide further validation of the consumer's identity. After setting the relevant machine configuration parameters, Bob may now \u201clog out\u201d from the site.","When the machine arrives at the hotel\/casino location, Bob plugs it in and connects it to a telephone jack. At this point, the OSU  in the machine begins an initialization phase that preferably is factory pre-programmed into the machine, preferably in Flash . The machine accordingly dials a stored phone number to connect to the Davis system , and more specifically and preferably to a designated initialization computer connected to the system . That computer receives the call by modem, answers it, and notifies a relevant OSU-CS  on the system (e.g., one in the vicinity of the machine) that a connection is being attempted. The OSU-CS  attaches to the connection and requests security credentials from the OSU , again which are pre-programmed. The OSU-CS  then in secure fashion authenticates the OSU  as a new vending machine for the Bob's Beverages account, e.g., by verifying the ID code for the machine. Thereafter, a connection is established with the server cluster , thereby establishing a \u201csession\u201d as described earlier. The Davis session is responsible for maintaining dialogue with the OSU , via the OSU-CS , and for performing services on behalf of the OSU . In this case, i.e., during the initialization phase, the OSU  needs to be updated with the latest software and ID card support.","The OSU  makes an \u201cUpdate Request\u201d to the server cluster , which is initially transmitted to the OSU-CS  using the DTP protocol described earlier. The OSU-CS  receives the packet and accordingly requests the server cluster  to provide a data structure for the updates. The server cluster  in turn creates an EJB (Enterprise Java Bean, per the Java 2 Enterprise Edition platform defined by Sun Microsystems) to perform the service. This EJB then accesses system data to create an \u201cUpdate Response\u201d packet. During initialization, Bob's previously created configuration file is consulted to understand the functionality that is needed at Bob's machine. For example, in accordance with the configuration file, Bob may receive the necessary templates to perform template matching and identification for all 50 states, and may receive further template data for these states to read and interpret the date of birth on the license to verify the consumer's age. The \u201cUpdate Response\u201d is returned to the OSU-CS , which in turn repackages the data into a DTP packet and sends the data to the OSU  as described earlier. The OSU  then updates itself with the new data, preferably by storing it in Flash . The server cluster  then receives notification from the OSU  that the upgrade completed successfully. Optionally, the server cluster  may send an e-mail to Bob's user interface  to confirm the completion of the update procedure.","At this point Bob is ready to stock his machine and put it into operation. Suppose a 43-year-old hotel guest from Texas passes by the machine and decides to purchase a beer. He makes his selection and is prompted by the display  to swipe his credit card into credit card acceptor  or insert cash into currency acceptor . The consumer chooses to insert his credit card and then is prompted to insert his driver's license into OSU . He does so and in a few seconds receives his license back. A few seconds later, after locally performing the license and birth identification procedures outlined earlier, the display  states \u201cpurchase successful\u201d and his can of beer is dispensed. By contrast, a 17-year-old hotel guest from Colorado passes by the machine and tries to purchase a beer. He makes his selection and inserts a five-dollar bill when prompted. He then insert his drivers license. After failing the age verification procedure, the display  may state \u201cPurchase denied. Must be 21 for purchase. Please make another selection.\u201d That consumer then may select a soda for purchase, or may receive his five dollars back by aborting the transaction and selecting a change return option.","Assume many other purchases are made throughout the day. Then, at 2:00 am the next morning, and pursuant to Bob's desires as reflected in his downloaded configuration file, the machine dials the server cluster  via OSU CS  and uploads its DEX information. In the morning, Bob checks his e-mail and may find a received message from the system  saying that his machine was successfully audited. The message also preferably provides a link to the audit information. Bob may then click on the link and log into the Davis system where he may view the audit report for his new machine. From this report Bob may review detailed information concerning each information field collected by the DEX feature. For example, he can view information about each transaction, he can determine his inventory in the machine, see what product is most popular, \u201cwhen\u201d it is most popular, at what price, etc. After one week, Bob generates a location report to show hotel management how successful the machine has been with consumers. Based on its success, he receives approval to place one machine on each of the hotel's 50 floors plus 9 additional units throughout other areas of the hotel and casino.","Bob then purchases, configures, installs, and stocks the new machines as outlined above, bringing the total of Bob's machines at the hotel to 60. Ultimately Bob may expand his presence into other regions with many other machines, all of which can be easily managed and tracked using the disclosed system . Importantly, Bob may also have his machines automatically updated with the latest software and image templates to further improve the functionality of his machine.","VII. Other Embodiments","While this disclosure has primarily focused on the vending of age-restricted products as an illustrative embodiment, the technology disclosed in the system is capable of vending other products and services in a reliable and efficient manner, and performing other useful tasks.","An important advantage of the system stems from its ability to treat ordinary ID cards, such as driver's licenses, as \u201csmart cards,\u201d even when those cards do not contain means for electronically holding consumer information, such as magnetic strips or integrated circuits. In conjunction with the use of a personal identification (PIN) number, the ordinary driver's license, or any other ID card issued in any jurisdiction, opens the consumer to an enhanced ability to electronically purchase items and services, and without the need for vendors to issue specialized and expensive smart cards, which are usually only useful for purchasing a particular vendor's product.","Thus, the Davis system provides a convenient, low-cost, platform that provides \u201csmart card\u201d functionality. Furthermore, OSU devices  can easily be present at or incorporated in merchant point-of-sale equipment, building entrances, vending machines, cars, pay phones, personal computers, gas pumps, and personal data assistants (PDAs), enabling the consumer to use such devices with only his driver's license or other ID card. Indeed, a Davis system may contain several of these types of terminals (e.g., vending machines and gas pumps) in one network.","Here are some examples where the disclosed technology is expected to be useful:\n\n","As well as having other uses, the disclosed system may be implemented in a number of different ways depending on the desired system functionality. Databases and\/or servers could be combined with OSU devices. Other components disclosed herein as being integrated could also be separated if desirable. The specific hardware components could be easily changed or altered by those of ordinary skill. Furthermore, the system may be used to vend a wide array of products and services. For example, some of the OSU devices  could be configured to vend age-restricted products, while other OSU devices  on the system could be configured to act as ATMs, security monitors, gas pumps, etc. The disclosed system therefore has great flexibility.","Moreover, the use an OSU is not strictly necessary to realize some of the benefits that are disclosed herein. Other suitable means for receiving consumer information, e.g., such as by computer or keypad, or through electronic means such as by credit cards containing magnetic strips or smart cards containing integrated circuitry, may be useful in certain novel aspects as disclosed herein. In this vein, it should be noted that the disclosed systems and associated methods are believed to be patentable in several different respects, and with respect to several of its components and\/or subcomponents, even if the benefits of these other inventive aspects have not been specifically touted in this specification.","The concept of storage of data within a memory refers to storage in any suitable means for retaining digital data, such as in a memory chip or on a magnetic disk. References to multiple memories in the appended claims, such as a first memory and a second memory, should be understood as referring generally to storage in separate discrete memory devices, or storage on a single device in different memory locations, registers, or blocks within the same memory device.","From the foregoing detailed description of specific embodiments of the invention, it should be apparent that a system and associated methods for vending products and services using an identification card has been disclosed. Although specific embodiments of the invention have been disclosed herein in some detail, this has been done solely for the purposes of illustrating various aspects and features of the invention, and is not intended to be limiting with respect to the scope of the invention. It is contemplated that various substitutions, alterations, and\/or modifications, including but not limited to those design alternatives which might have been specifically noted in this disclosure, may be made to the disclosed embodiment without departing from the spirit and scope of the invention as defined in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00020","num":"00020"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00023","num":"00023"},"figref":"FIG. 9A"},{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 9B"},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 10","b":"18"},{"@attributes":{"id":"P-00026","num":"00026"},"figref":"FIG. 11","b":"1"},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 12"},{"@attributes":{"id":"P-00028","num":"00028"},"figref":["FIG. 13","FIG. 9"]},{"@attributes":{"id":"P-00029","num":"00029"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
