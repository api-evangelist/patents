---
title: Multipurpose memory system for use in a graphics system
abstract: A graphics system may include a frame buffer, a processing device coupled to output data, a multipurpose memory device that includes a plurality of storage locations and is coupled to store data output from the processing device, and a multipurpose memory controller coupled to the multipurpose memory device. The multipurpose memory controller may be configured to allocate a first plurality of the storage locations to a first image buffer configured to store image data, a second plurality of the storage locations to a first texture buffer configured to store texture data, and a third plurality of the storage locations to a first accumulation buffer configured to store accumulation buffer data. The multipurpose memory device may be configured to include a first image buffer, a first texture buffer, and a first accumulation buffer at the same time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06906720&OS=06906720&RS=06906720
owner: Sun Microsystems, Inc.
number: 06906720
owner_city: Santa Clara
owner_country: US
publication_date: 20020312
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates generally to the field of computer graphics and, more particularly, to memory devices used in computer graphics systems.","2. Description of the Related Art","A computer system typically relies upon its graphics system for producing visual output on the computer screen or display device. Early graphics systems were only responsible for taking what the processor produced as output and displaying it on the screen. In essence, they acted as simple translators or interfaces. Modern graphics systems, however, incorporate graphics processors with a great deal of processing power. They now act more like coprocessors rather than simple translators. This change is due to the recent increase in both the complexity and amount of data being sent to the display device. For example, modern computer displays have many more pixels, greater color depth, and are able to display more complex images with higher refresh rates than earlier models. Similarly, the images displayed are now more complex and may involve advanced techniques such as anti-aliasing and texture mapping.","As a result, without considerable processing power in the graphics system, the CPU would spend a great deal of time performing graphics calculations. This could rob the computer system of the processing power needed for performing other tasks associated with program execution and thereby dramatically reduce overall system performance. With a powerful graphics system, however, when the CPU is instructed to draw a box on the screen, the CPU is freed from having to compute the position and color of each pixel. Instead, the CPU may send a request to the video card stating, \u201cdraw a box at these coordinates.\u201d The graphics system then draws the box, freeing the processor to perform other tasks.","Generally, a graphics system in a computer is a type of video adapter that contains its own processor to boost performance levels. These processors are specialized for computing graphical transformations, so they tend to achieve better results than the general-purpose CPU used by the computer system. In addition, they free up the computer's CPU to execute other commands while the graphics system is handling graphics computations. The popularity of graphics applications, and especially multimedia applications, has made high performance graphics systems a common feature in many new computer systems. Most computer manufacturers now bundle a high performance graphics system with their computing systems.","Typically, a graphics system includes a frame buffer memory device that stores data to be output to a display. Frame buffers may be double-buffered so that data can be written into one buffer and read from the other buffer. Thus, the data may be rendered into one buffer while the data in the other buffer is being displayed. In addition to the frame buffer, some graphics systems include a texture memory device that stores texture data (e.g., groups of texels (texture elements) that make up a particular texture). Graphics systems may have additional memory needs. For example, graphics systems may need an accumulation buffer in which to store data before combining that data with other data. Some graphics systems use the system memory as an accumulation buffer. These systems may incur significant performance penalties since operations that use the accumulation buffer have to access the system memory over the system bus. In order to avoid the disadvantages of using the system memory as an accumulation buffer, some systems use a portion of the frame buffer for an accumulation buffer for rendering operations. As a result, these systems have a reduced effective frame buffer size. Additionally, these systems may have lower performance and precision for accumulation buffer operations than is desirable.","Various embodiments of a multipurpose memory device for use in a graphics system are disclosed. In one embodiment, a graphics system may include a frame buffer configured to store data, a processing device coupled to output data, a multipurpose memory device that includes a plurality of storage locations and is coupled to store data output from the processing device, and a multipurpose memory controller coupled to the multipurpose memory device. The multipurpose memory controller may be configured to allocate a first plurality of the storage locations to a first image buffer configured to store image data, a second plurality of the storage locations to a first texture buffer configured to store texture data, and a third plurality of the storage locations to a first accumulation buffer configured to store accumulation buffer data. The multipurpose memory device may be configured to include a first image buffer, a first texture buffer, and a first accumulation buffer at the same time.","In another embodiment, a graphics system may include a frame buffer configured to store data, a processing device coupled to the frame buffer, a multipurpose memory coupled to store data output from the processing device, and a memory controller coupled to the multipurpose memory and configured to dynamically allocate various different types of buffers such as texture buffers within the multipurpose memory. The memory controller may be configured to dynamically vary an amount of the multipurpose memory allocated to each type of buffer.","In some embodiments, a graphics system may include a frame buffer, a multipurpose memory device coupled to provide data to and to receive data from the frame buffer, and a memory controller coupled to the multipurpose memory device and configured to allocate a plurality of types of buffers in the multipurpose memory device. The memory controller may be configured to allocate a first type of buffer that is configured to store accumulation buffer data. The memory controller may also be configured to allocate a second type of buffer to store texture data in tiles. Addresses in the second type of buffer may be generated so that neighboring tiles are stored in different sets of banks in the multipurpose memory device. The multipurpose memory device may be configured to include the first type of buffer and the second type of buffer the same time.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. Note, the headings are for organizational purposes only and are not meant to be used to limit or interpret the description or claims. Furthermore, note that the word \u201cmay\u201d is used throughout this application in a permissive sense (i.e., having the potential to, being able to), not a mandatory sense (i.e., must).\u201d The term \u201cinclude\u201d, and derivations thereof, mean \u201cincluding, but not limited to\u201d. The term \u201cconnected\u201d means \u201cdirectly or indirectly connected\u201d, and the term \u201ccoupled\u201d means \u201cdirectly or indirectly connected\u201d.","Computer System\u2014",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":"80"},"As shown, the computer system  includes a system unit  and a video monitor or display device  coupled to the system unit . The display device  may be any of various types of display monitors or devices (e.g., a CRT, LCD, or gas-plasma display). Various input devices may be connected to the computer system, including a keyboard  and\/or a mouse , or other input device (e.g., a trackball, digitizer, tablet, six-degree of freedom input device, head tracker, eye tracker, data glove, or body sensors). Application software may be executed by the computer system  to display graphical objects on display device .","Computer System Block Diagram\u2014",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["1","80","102","104","104","106","104"]},"Host processor  may include one or more processors of varying types, e.g., microprocessors, multi-processors and CPUs. The system memory  may include any combination of different types of memory subsystems such as random access memories (e.g., static random access memories or \u201cSRAMs,\u201d synchronous dynamic random access memories or \u201cSDRAMs,\u201d and Rambus dynamic random access memories or \u201cRDRAMs,\u201d among others), read-only memories, and mass storage devices. The system bus or host bus  may include one or more communication or host computer buses (for communication between host processors, CPUs, and memory subsystems) as well as specialized subsystem buses.","In , a graphics system  is coupled to the high-speed memory bus . The graphics system  may be coupled to the bus  by, for example, a crossbar switch or other bus connectivity logic. It is assumed that various other peripheral devices, or other buses, may be connected to the high-speed memory bus . It is noted that the graphics system  may be coupled to one or more of the buses in computer system  and\/or may be coupled to various types of buses. In addition, the graphics system  may be coupled to a communication port and thereby directly receive graphics data from an external source, e.g., the Internet or a network. As shown in the figure, one or more display devices  may be connected to the graphics system .","Host CPU  may transfer information to and from the graphics system  according to a programmed input\/output (I\/O) protocol over host bus . Alternately, graphics system  may access system memory  according to a direct memory access (DMA) protocol or through intelligent bus mastering.","A graphics application program conforming to an application programming interface (API) such as OpenGL\u00ae or Java 3D\u2122 may execute on host CPU  and generate commands and graphics data that define geometric primitives such as polygons for output on display device . Host processor  may transfer the graphics data to system memory . Thereafter, the host processor  may operate to transfer the graphics data to the graphics system  over the host bus . In another embodiment, the graphics system  may read in geometry data arrays over the host bus  using DMA access cycles. In yet another embodiment, the graphics system  may be coupled to the system memory  through a direct port, such as the Advanced Graphics Port (AGP) promulgated by Intel Corporation.","The graphics system may receive graphics data from any of various sources, including host CPU  and\/or system memory , other memory, or from an external source such as a network (e.g., the Internet), or from a broadcast medium, e.g., television, or from other sources.","Note while graphics system  is depicted as part of computer system , graphics system  may also be configured as a stand-alone device (e.g., with its own built-in display). Graphics system  may also be configured as a single chip device or as part of a system-on-a-chip or a multi-chip module. Additionally, in some embodiments, certain of the processing operations performed by elements of the illustrated graphics system  may be implemented in software.","Graphics System\u2014",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["112","112","112","14","18","20","22","24","112","26","28","14","18"]},"In some embodiments, one or more of these components may be removed. For example, the texture buffer may not be included in an embodiment that does not provide texture mapping. In other embodiments, all or part of the functionality incorporated in either or both of the media processor or the hardware accelerator may be implemented in software.","In one set of embodiments, media processor  is one integrated circuit and hardware accelerator is another integrated circuit. In other embodiments, media processor  and hardware accelerator  may be incorporated within the same integrated circuit. In some embodiments, portions of media processor  and\/or hardware accelerator  may be included in separate integrated circuits.","As shown, graphics system  may include an interface to a host bus such as host bus  in  to enable graphics system  to communicate with a host system such as computer system . More particularly, host bus  may allow a host processor to send commands to the graphics system . In one embodiment, host bus  may be a bi-directional bus.","Media Processor\u2014",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4","b":["14","14","112","80","80","112","14"]},"Transformation refers to the spatial manipulation of objects (or portions of objects) and includes translation, scaling (e.g., stretching or shrinking), rotation, reflection, or combinations thereof. More generally, transformation may include linear mappings (e.g., matrix multiplications), nonlinear mappings, and combinations thereof.","Lighting refers to calculating the illumination of the objects within the displayed image to determine what color values and\/or brightness values each individual object will have. Depending upon the shading algorithm being used (e.g., constant, Gourand, or Phong), lighting may be evaluated at a number of different spatial locations.","As illustrated, media processor  may be configured to receive graphics data via host interface . A graphics queue  may be included in media processor  to buffer a stream of data received via the accelerated port of host interface . The received graphics data may include one or more graphics primitives. As used herein, the term graphics primitive may include polygons, parametric surfaces, splines, NURBS (non-uniform rational B-splines), sub-divisions surfaces, fractals, volume primitives, voxels (i.e., three-dimensional pixels), and particle systems. In one embodiment, media processor  may also include a geometry data preprocessor  and one or more microprocessor units (MPUs) . MPUs  may be configured to perform vertex transformation, lighting calculations and other programmable functions, and to send the results to hardware accelerator . MPUs  may also have read\/write access to texels (i.e., the smallest addressable unit of a texture map) and pixels in the hardware accelerator . Geometry data preprocessor  may be configured to decompress geometry, to convert and format vertex data, to dispatch vertices and instructions to the MPUs , and to send vertex and attribute tags or register data to hardware accelerator .","As shown, media processor  may have other possible interfaces, including an interface to one or more memories. For example, as shown, media processor  may include direct Rambus interface  to a direct Rambus DRAM (DRDRAM) . A memory such as DRDRAM  may be used for program and\/or data storage for MPUs . DRDRAM  may also be used to store display lists and\/or vertex texture maps.","Media processor  may also include interfaces to other functional components of graphics system . For example, media processor  may have an interface to another specialized processor such as hardware accelerator . In the illustrated embodiment, controller  includes an accelerated port path that allows media processor  to control hardware accelerator . Media processor  may also include a direct interface such as bus interface unit (BIU) . Bus interface unit  provides a path to memory  and a path to hardware accelerator  and video output processor  via controller .","Hardware Accelerator\u2014","One or more hardware accelerators  may be configured to receive graphics instructions and data from media processor  and to perform a number of functions on the received data according to the received instructions. For example, hardware accelerator  may be configured to perform rasterization, 2D and\/or 3D texturing, pixel transfers, imaging, fragment processing, clipping, depth cueing, transparency processing, set-up, and\/or screen space rendering of various graphics primitives occurring within the graphics data.","Clipping refers to the elimination of graphics primitives or portions of graphics primitives that lie outside of a 3D view volume in world space. The 3D view volume may represent that portion of world space that is visible to a virtual observer (or virtual camera) situated in world space. For example, the view volume may be a solid truncated pyramid generated by a 2D view window, a viewpoint located in world space, a front clipping plane and a back clipping plane. The viewpoint may represent the world space location of the virtual observer. In most cases, primitives or portions of primitives that lie outside the 3D view volume are not currently visible and may be eliminated from further processing. Primitives or portions of primitives that lie inside the 3D view volume are candidates for projection onto the 2D view window.","Set-up refers to mapping primitives to a three-dimensional viewport. This involves translating and transforming the objects from their original \u201cworld-coordinate\u201d system to the established viewport's coordinates. This creates the correct perspective for three-dimensional objects displayed on the screen.","Screen-space rendering refers to the calculations performed to generate the data used to form each pixel that will be displayed. For example, hardware accelerator  may calculate \u201csamples.\u201d Samples are points that have color information but no real area. Samples allow hardware accelerator  to \u201csuper-sample,\u201d or calculate more than one sample per pixel. Super-sampling may result in a higher quality image.","Hardware accelerator  may also include several interfaces. For example, in the illustrated embodiment, hardware accelerator  has four interfaces. Hardware accelerator  has an interface  (referred to as the \u201cNorth Interface\u201d) to communicate with media processor . Hardware accelerator  may receive commands and\/or data from media processor  through interface . Additionally, hardware accelerator  may include an interface  to bus . Bus  may connect hardware accelerator  to boot PROM  and\/or video output processor . Boot PROM  may be configured to store system initialization data and\/or control code for frame buffer . Hardware accelerator  may also include an interface to a texture buffer . For example, hardware accelerator  may interface to texture buffer  using an eight-way interleaved texel bus that allows hardware accelerator  to read from and write to texture buffer . Hardware accelerator  may also interface to a frame buffer . For example, hardware accelerator  may be configured to read from and\/or write to frame buffer  using a four-way interleaved pixel bus.","The vertex processor  may be configured to use the vertex tags received from the media processor  to perform ordered assembly of the vertex data from the MPUs . Vertices may be saved in and\/or retrieved from a mesh buffer .","The render pipeline  may be configured to rasterize 2D window system primitives and 3D primitives into fragments. A fragment may contain one or more samples. Each sample may contain a vector of color data and perhaps other data such as alpha and control tags. 2D primitives include objects such as dots, fonts, Bresenham lines and 2D polygons. 3D primitives include objects such as smooth and large dots, smooth and wide DDA (Digital Differential Analyzer) lines and 3D polygons (e.g. 3D triangles).","For example, the render pipeline  may be configured to receive vertices defining a triangle, to identify fragments that intersect the triangle.","The render pipeline  may be configured to handle full-screen size primitives, to calculate plane and edge slopes, and to interpolate data (such as color) down to tile resolution (or fragment resolution) using interpolants or components such as:","r, g, b (i.e., red, green, and blue vertex color);","r2, g2, b2 (i.e., red, green, and blue specular color from lit textures);","alpha (i.e., transparency);","z (i.e., depth); and","s, t, r, and w (i.e., texture components).","In embodiments using supersampling, the sample generator  may be configured to generate samples from the fragments output by the render pipeline  and to determine which samples are inside the rasterization edge. Sample positions may be defined by user-loadable tables to enable stochastic sample-positioning patterns.","Hardware accelerator  may be configured to write textured fragments from 3D primitives to frame buffer . The render pipeline  may send pixel tiles defining r, s, t and w to the texture address unit . The texture address unit  may use the r, s, t and w texture coordinates to compute texel addresses (e.g. addresses for a set of neighboring texels) and to determine interpolation coefficients for the texture filter . The texel addresses are used to access texture data (i.e. texels) from texture buffer . The texture buffer  may be interleaved to obtain as many neighboring texels as possible in each clock. The texture filter  may perform bilinear, trilinear or quadlinear interpolation. The texture environment  may apply texels to samples produced by the sample generator . The texture environment  may also be used to perform geometric transformations on images (e.g., bilinear scale, rotate, flip) as well as to perform other image filtering operations on texture buffer image data (e.g., bicubic scale and convolutions).","In the illustrated embodiment, the pixel transfer MUX  controls the input to the pixel transfer unit . The pixel transfer unit  may selectively unpack pixel data received via north interface , select channels from either the frame buffer  or the texture buffer , or select data received from the texture filter  or sample filter .","The pixel transfer unit  may be used to perform scale, bias, and\/or color matrix operations, color lookup operations, histogram operations, accumulation operations, normalization operations, and\/or min\/max functions. Depending on the source of (and operations performed on) the processed data, the pixel transfer unit  may output the processed data to the texture buffer  (via the texture buffer MUX ), the frame buffer  (via the texture environment unit  and the fragment processor ), or to the host (via north interface ). For example, in one embodiment, when the pixel transfer unit  receives pixel data from the host via the pixel transfer MUX , the pixel transfer unit  may be used to perform a scale and bias or color matrix operation, followed by a color lookup or histogram operation, followed by a min\/max function. The pixel transfer unit  may also scale and bias and\/or lookup texels. The pixel transfer unit  may then output data to either the texture buffer  or the frame buffer .","Fragment processor  may be used to perform standard fragment processing operations such as the OpenGL\u00ae fragment processing operations. For example, the fragment processor  may be configured to perform the following operations: fog, area pattern, scissor, alpha\/color test, ownership test (WID), stencil test, depth test, alpha blends or logic ops (ROP), plane masking, buffer selection, pick hit\/occlusion detection, and\/or auxiliary clipping in order to accelerate overlapping windows.","Texture Buffer ","In one embodiment, texture buffer  may include several SDRAMs. Texture buffer  may be configured to store texture maps, image processing buffers, and accumulation buffers for hardware accelerator . Texture buffer  may have many different capacities (e.g., depending on the type of SDRAM included in texture buffer ). In some embodiments, each pair of SDRAMs may be independently row and column addressable.","Frame Buffer ","Graphics system  may also include a frame buffer . In one embodiment, frame buffer  may include multiple memory devices such as 3D-RAM memory devices manufactured by Mitsubishi Electric Corporation. Frame buffer  may be configured as a display pixel buffer, an offscreen pixel buffer, and\/or a super-sample buffer. Furthermore, in one embodiment, certain portions of frame buffer  may be used as a display pixel buffer, while other portions may be used as an offscreen pixel buffer and sample buffer.","Video Output Processor\u2014","A video output processor  may also be included within graphics system . Video output processor  may buffer and process pixels output from frame buffer . For example, video output processor  may be configured to read bursts of pixels from frame buffer . Video output processor  may also be configured to perform double buffer selection (dbsel) if the frame buffer  is double-buffered, overlay transparency (using transparency\/overlay unit ), plane group extraction, gamma correction, psuedocolor or color lookup or bypass, and\/or cursor generation. For example, in the illustrated embodiment, the output processor  includes WID (Window ID) lookup tables (WLUTs)  and gamma and color map lookup tables (GLUTs, CLUTs) . In one embodiment, frame buffer  may include multiple 3DRAM64s  that include the transparency overlay  and all or some of the WLUTs . Video output processor  may also be configured to support two video output streams to two displays using the two independent video raster timing generators . For example, one raster (e.g., A) may drive a 1280\u00d71024 CRT while the other (e.g., B) may drive a NTSC or PAL device with encoded television video.","DAC  may operate as the final output stage of graphics system . The DAC  translates the digital pixel data received from GLUT\/CLUTs\/Cursor unit  into analog video signals that are then sent to a display device. In one embodiment, DAC  may be bypassed or omitted completely in order to output digital pixel data in lieu of analog video signals. This may be useful when a display device is based on a digital technology (e.g., an LCD-type display or a digital micro-mirror display).","DAC  may be a red-green-blue digital-to-analog converter configured to provide an analog video output to a display device such as a cathode ray tube (CRT) monitor. In one embodiment, DAC  may be configured to provide a high resolution RGB analog video output at dot rates of 240 MHz. Similarly, encoder  may be configured to supply an encoded video signal to a display. For example, encoder  may provide encoded NTSC or PAL video to an S-Video or composite video television monitor or recording device.","In other embodiments, the video output processor  may output pixel data to other combinations of displays. For example, by outputting pixel data to two DACs  (instead of one DAC  and one encoder ), video output processor  may drive two CRTs. Alternately, by using two encoders , video output processor  may supply appropriate video input to two television monitors. Generally, many different combinations of display devices may be supported by supplying the proper output device and\/or converter for that display device.","Sample-to-Pixel Processing Flow\u2014","In some embodiments, hardware accelerator  may receive geometric parameters defining primitives such as triangles from media processor , and render the primitives in terms of samples. The samples may be stored in a sample storage area (also referred to as the sample buffer) of frame buffer . The samples are then read from the sample storage area of frame buffer  and filtered by sample filter  to generate pixels. The pixels are stored in a pixel storage area of frame buffer . The pixel storage area may be double-buffered. Video output processor  reads the pixels from the pixel storage area of frame buffer  and generates a video stream from the pixels. The video stream may be provided to one or more display devices (e.g., monitors, projectors, head-mounted displays, and so forth) through DAC  and\/or video encoder .","The samples are computed at positions in a two-dimensional sample space (also referred to as rendering space). The sample space may be partitioned into an array of bins (also referred to herein as fragments). The storage of samples in the sample storage area of frame buffer  may be organized according to bins (e.g., bin ) as illustrated in FIG. . Each bin may contain one or more samples. The number of samples per bin may be a programmable parameter.","Multipurpose Memory Device","A graphics system such as the one illustrated in  may include a multipurpose memory device that is configurable as a texture buffer, an image buffer, and\/or an accumulation buffer (e.g., texture buffer ).  shows one embodiment of a graphics system that includes a multipurpose memory device . In this embodiment, the multipurpose memory device  is coupled to a frame buffer  and a hardware accelerator  by a data bus . The hardware accelerator  accesses the multipurpose memory device  via a memory controller , which provides control and\/or address signals to the multipurpose memory device . The multipurpose memory device  may include several memory devices (e.g., multiple SDRAM chips).","In this example, the multipurpose memory device  allocates different buffers to store different types of data: image data, texture data, and accumulation buffer data. In other embodiments, additional (or fewer) types of buffers may be supported. Each type of data is stored in a different type of buffer that is organized in a unique manner for that type of data. For example, each different type of buffer may store data that has a different data resolution (e.g., bits per pixel or sample) than data stored in other types of buffers. Similarly, each type of buffer may employ a unique interleaving pattern, address scrambling technique, data packing technique, etc. A first texture buffer A allocated in multipurpose memory device  stores texture data defining Texture , a second texture buffer B stores texture data defining Texture , and a third texture buffer C stores texture data defining Texture  (texture buffers A-C are collectively referred to as texture buffers ). An image buffer  allocated within the multipurpose memory device  stores image data. An accumulation buffer  allocated in the multipurpose memory device  stores accumulation buffer data. Each of these types of buffers (as well as other types of buffers in some embodiments) may be allocated in the multipurpose memory device  at a given time. In one embodiment, one buffer may be active (e.g., accessible by hardware accelerator ) at a given time.","Buffers - may be allocated with arbitrary sizes. In some embodiments, there may be maximum and\/or minimum sizes of buffers. These size limits may vary for different types of buffers.","Image data may be transferred to an image buffer  from system memory . Image data may include pixel data for pixels in a frame or portion of a frame. As the image data is transferred to the image buffer , it may be processed by a graphics system (e.g., by a media processor  and\/or a hardware accelerator ). After the image data is stored in the image buffer , it may be read out of the image buffer , passed through various filters and other processing units (e.g., in hardware accelerator ). After this processing, the image data may be rewritten to the image buffer  or the frame buffer . This process may be repeated several times before a final version of the image data is stored in the frame buffer . After the process has completed, the image buffer  may be deallocated.","The image buffer  may be configured to store high-resolution pixel data (e.g., 8 bytes per pixel) in scanline order. The image buffer  may be interleaved so that neighboring groups of pixels in the same scanline can be read out in parallel in some embodiments. Data within an image buffer  may be accessed horizontally or vertically in one embodiment. In such an embodiment, the image buffer  may also be interleaved so that neighboring groups of pixels in the same vertical screen column may be read out in parallel.","Accumulation buffer data may be stored in an accumulation buffer  after being read from the frame buffer  and processed (e.g., in hardware accelerator ). Accumulation buffer data may subsequently be read out of an accumulation buffer , processed in hardware accelerator , and written into the frame buffer . Accumulation buffer data may also be read from the frame buffer , processed in hardware accelerator , and stored into the accumulation buffer . Similar to image buffers , accumulation buffers  may be configured to store accumulation data in scanline order. However, accumulation data may be lower resolution data than the image buffer data in some embodiments. Accumulation buffer data may also be signed in some embodiments. Like an image buffer , an accumulation buffer  may be interleaved so that neighboring groups of pixels in the same scanline can be read out in parallel. Having an accumulation buffer  that is not part of the frame buffer  may allow accumulation operations to be performed without using the frame buffer  as both a data source and a data destination for the same operation.","For example, accumulation buffer data may include 48 bits per pixel in one embodiment. In such an embodiment, an accumulation buffer may be treated as a block of memory of size BufferSize (in pixels)*6 bytes. The memory controller  may pack pixels into bus blocks sized to take advantage of the available width of the data bus  (e.g., 6-byte pixels may be packed into 16-byte memory blocks for transmission on a 16-byte data bus .","Texture data defining a texture (e.g., in terms of texels) may be written to a texture buffer  from system memory . The texture data may be accessed during rendering (e.g., by hardware accelerator ) so that the texture may be applied to a surface. Texture data may be interleaved so that neighboring texels can be read out in parallel. Texture data may be in non-scanline order within a texture buffer . A rendering process that accesses a first texel may next access a neighboring texel in an arbitrary direction from the first texel. Accordingly, address scrambling may be used so that the texture data is stored within a texture buffer  in a way that may increase the number of neighboring texels in an arbitrary direction that may be accessed in a given number of memory access cycles. For example, texels may be stored in tiles (or pages) so that neighboring texels are in the same tile. To reduce tile-switching penalties (e.g., the latency incurred when switching between tiles stored in the same memory bank), neighboring tiles may be stored in different banks (or groups of banks) in the multipurpose memory device  in some embodiments.","A multipurpose memory device  may be configured to allocate different amounts of memory to different types of buffers. For example, if an application uses a large amount of texture buffer memory but little or no image buffer memory, the multipurpose memory device  may allocate more memory to texture buffers  than to image buffers . The same multipurpose memory device  may be configured to allocate more image buffers  than texture buffers  for applications that use more image buffer memory than texture buffer memory.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 9","b":["20","202","204","206","1301","1303","102","106","210","1303"]},"The requesting application program may use the returned indication to access the buffer, at . For example, the memory controller  may receive requests (e.g., from hardware accelerator ) to access data stored at a given address within the buffer. The buffer may be deallocated in response to the requesting process indicating that it has finished with the buffer (e.g., by sending an indication to a device driver), as shown at  and .","In some embodiments, a multipurpose memory device  may be managed in software. For example, when an application program requests a buffer (e.g., image, texture, or accumulation), a device driver may send a command to the memory controller  to allocate a buffer of the requested type and size at a particular base address (e.g., 1 Mb at address 4K). The device driver may also return an indication identifying the allocated buffer (e.g., an indication of the base address of the allocated buffer) to the requesting application program. The software application may track which buffers are currently allocated in a memory map (e.g., system memory ) that stores a descriptor.  shows one embodiment of a descriptor A that may be stored for each allocated buffer. Each descriptor A may identify the owning (requesting) process , the base address  of the buffer, the size  of the buffer, and the type  of the buffer. In an embodiment where software (e.g., a device driver) manages the multipurpose memory device , multipurpose memory device  may not be configured to store a memory map  indicating which buffers are currently allocated.","In alternative embodiments, a multipurpose memory device  may be managed in hardware. For example, a portion of the multipurpose memory device  may be allocated to store a memory map  identifying the currently allocated buffers. The memory map  may be implemented as a linked list of descriptors.  shows an exemplary descriptor B that identifies a descriptor ID , the owning (requesting) process , the base address  of the buffer, the size  of the buffer, and the type  of the buffer. Each descriptor B may be initialized when an application program, requests memory. In response to the request, a software program (e.g., a device driver) may initialize a descriptor B for the process and return a descriptor ID  identifying the descriptor B to the requesting application program. The software program may also send a command to the memory controller  to allocate a buffer of the requested type and size at the base address  indicated in the descriptor B. The requesting application may use the descriptor ID  to identify the descriptor B that describes the allocated buffer when accessing the buffer.","As buffers are allocated and deallocated, a multipurpose memory device  may experience memory fragmentation. In order to free up larger contiguous portions of memory, the device driver may move buffers around in the multipurpose memory device . As buffers are moved, the device driver may update the appropriate descriptors B to indicate a new base address  for the relocated buffers. Since the owning process for each buffer accesses its buffer by using a descriptor B, the buffers may be moved transparently to the owning process, since accessing the descriptor B will provide the new base address .","Although the embodiments above have been described in considerable detail, other versions are possible. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications. Note that the section headings used herein are for organizational purposes only and are not meant to limit the description provided herein or the claims attached hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4","b":"3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5","b":"3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6","b":"3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 10A-10B"}]},"DETDESC":[{},{}]}
