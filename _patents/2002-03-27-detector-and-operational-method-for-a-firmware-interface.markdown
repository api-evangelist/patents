---
title: Detector and operational method for a firmware interface
abstract: A detector detects information about a firmware system. The detector includes an interface that receives a generic instruction. The generic instruction may be a function call made through an EFI shell. The detector has a controller communicatively connected to the interface. The controller receives the generic instruction and gathers information about the firmware system. Gathering information about the firmware system permits platform-specific firmware system functions to be written to the firmware system. The controller gathers information about the firmware system by accessing a data-gathering function based on the generic instruction. The controller retrieves the information through the data-gathering function and transfers the information to the interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07100031&OS=07100031&RS=07100031
owner: Hewlett-Packard Development Company, L.P.
number: 07100031
owner_city: Houston
owner_country: US
publication_date: 20020327
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["Microprocessors can operate to control a myriad of hardware devices; an example of one such hardware device is an input\/output (I\/O) controller. For a microprocessor to properly control a hardware device, the microprocessor is directed by a series of instructions known as software. Software instructions exist on a variety of levels relative to the microprocessor. Software instructions that exist to directly control the microprocessor at a very basic level are typically known as firmware. When operational, the firmware and the microprocessor behave as a firmware system.","A basic input\/output system (BIOS) developed by Phoenix Technologies Ltd. is an example of firmware. Typically, the BIOS operatively controls microprocessors having an \u201cx86\u201d architecture. Microprocessors having an \u201cx86\u201d architecture are similar to many microprocessors from Intel Corporation and Advanced Micro Devices, Incorporated (AMD). The BIOS is typically stored in a read only memory (ROM) and directs a microprocessor to test hardware devices when started. The BIOS also loads and starts an operating system, such as DOS or Windows, both produced by Microsoft Corporation. The BIOS also supports data transfers among hardware devices. The BIOS is fairly transparent to a user of the operating system.","Until recently, a BIOS would serve to load and start an operating system of a computer. However, advancements in software engineering have led to the development of a firmware interface known as an Extensible Firmware Interface (EFI), developed by Intel Corporation. The EFI includes a layer of software that resides between a firmware system and the operating system. The EFI offers a higher-level set of software controllers, known as drivers, as components to the firmware system. The controllers direct functions of the firmware system and in turn direct various hardware devices through a higher-level programming language, such as the \u201cC\u201d programming language. A benefit to the EFI includes decoupling the operating system from the firmware system, which makes the operating system substantially independent of the firmware system. Moreover, an interface between the firmware system and the operating system is easier to maintain since the EFI is typically written in the higher level programming language than the firmware, which may be written in an assembly programming language.","An EFI includes an application programming interface (API) having a command line interface known as a shell. The EFI may include a collection of boot services, runtime services, loaded drivers, and loaded protocols. The EFI shell is similar to other command line interfaces. An example of another command line interface is a DOS shell developed by Microsoft Corporation. While the DOS shell allows a user to access functions of the operating system, the EFI shell allows a user to access functions of a single firmware system. Accessing functions of the firmware system is performed through information gathering functions that obtain information relative to the firmware system. Since the EFI shell interacts with a single firmware system, the information gathering functions of the EFI shell serve to gain access to that particular firmware system. An illustration of the EFI can be seen in .",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1","b":["102","100","102","104","102","112","112","114","112","116","114"]},"EFI  includes EFI operating system loader , which serves to load and start operating system . EFI  also includes a variety of service functions in EFI boot service ; the service functions include runtime services , boot devices , EFI drivers , and protocol handlers . These service functions, , , , and , start, commonly referred to as \u201cbooting\u201d and \u201chandshaking\u201d, associated hardware devices when computer system  is initialized. EFI  also includes EFI shell , which allows a user to interact with firmware system  through the variety of functions stored in EFI boot service .","Firmware developers often develop and implement software tools through EFI shell . These software tools are occasionally necessary to direct the microprocessor to perform a new desired function. However, present information gathering functions of the EFI shell are developed for a single firmware system, such as firmware system . The information gathering functions are incapable of interacting with other firmware systems.","Many manufacturers of computer systems purchase microprocessors and develop firmware to suit their particular needs. Some manufactures even develop multiple firmware systems for different products. EFI  and EFI shell  are not portable to multiple firmware platforms. Accordingly, the prior art requires matching between the particular firmware system  and EFI , which complicates the design of information gathering functions.","The invention provides certain features to advance the state of the art by providing, among other features, a detector for detecting information about a firmware system. Other features will be apparent in the description that follows.","In one aspect, the invention provides a detector for detecting information about a firmware system. The detector includes an interface that receives a generic instruction. The generic instruction can be a function call that is made through an EFI Boot Manager. The EFI Boot Manager may include an EFI shell in which the generic instruction can be made. The detector also has a controller that is communicatively connected to the interface. The controller receives the generic instruction and begins to gather information about the firmware system. Gathering information about the firmware system allows for platform-specific firmware system functions to be written to the firmware system. The controller gathers information about the firmware system by accessing a data-gathering function based on the generic instruction. The controller then retrieves the information through the data-gathering function. Afterwards, the controller transfers the information to the interface. In one aspect, the controller transfers the information to the EFI Boot Manager through the interface via the generic instruction. The detector may, thus, operate as an abstracted data gathering system of the EFI.","In another aspect, the detector is implemented through software instructions that direct a microprocessor of the firmware system to act in accordance with the invention. In a software implementation of the detector, the controller is configured to operate in response to an initialization of the firmware system. Functions of the controller are pre-compiled to run when the firmware system is started. Functions that perform a retrieval of information relative to the firmware system depend on a type of firmware system. For example, a retrieval of information relative to one type of firmware system may be implemented through tree function calls based on the type of firmware system; a retrieval of information relative to another type of firmware system may be performed through an Extended System Abstraction Layer Interface (ESI) based on the other type of firmware system. The ESI may be extended procedures of the System Abstraction Layer (SAL). However, the generic instruction, or generic instruction set, is independent of the firmware system type.","In yet another aspect, the firmware system can include Itanium family microprocessors from Intel Corporation. The firmware system can also include, either optionally or in combination, an IA-32 microprocessor from Intel Corporation.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["200","206","200","206","206","200","202","204","206","200"]},"Interface  is configured to receive a generic instruction. The generic instruction may, for example, include a function and\/or a flag that initiates another function. Controller  is configured to gather information about firmware system  by accessing a data-gathering function based on the generic instruction. Controller  retrieves information about firmware system  through the data-gathering function, and transfers the information to interface . Operation of detector  is shown in .",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 2","FIG. 2","FIG. 2","FIG. 2"],"b":["300","200","300","302","300","206","206","206","300","202","304","204","306","204","206","308","206","204","202","310"]},"The generic instruction may be received through the firmware interface, discussed below. An example of the firmware interface is an Extensible Firmware Interface (EFI) system that includes an EFI Boot Manager having an EFI shell developed by Intel Corporation. Firmware system  can include a microprocessor, such as an Itanium family microprocessor and\/or an IA- microprocessor, both from Intel Corporation. Firmware system  can also include a firmware instruction set such as a basic input\/output system (BIOS) developed by Phoenix Technologies Ltd.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 4","FIG. 3","FIG. 2"],"b":["308","300","308","401","402","206","206","404","406","308","403"]},"A tree function can include a method of searching for functions located at memory locations. As an example, a \u201ctree\u201d includes a root, which is analogous to a memory location. The root can include an address of a function in memory. The root typically has branches that extend to other memory locations and may be linked through pointers. Each branch has an end point, or vertex, which can be a root for another branch. A pointer is typically a variable that is analogous to a message that \u201cpoints\u201d to a memory location. Locating functions, in accordance with one embodiment of the invention, becomes a matter of moving the pointer along the branches of the tree. Similarly, the root, as well as other roots resulting from the branches, can have memory addresses for hardware devices that are either apart of, or interact with, firmware system . Gathering information about the hardware devices, in accordance with one embodiment of the invention, becomes a matter of traversing the tree to reveal information about the hardware devices.","Accessing firmware system  through the ESI may be performed in a different manner. The ESI can include a traversal algorithm such as a tree function, but the ESI can also operate to make such an algorithm transparent to a user. The ESI of one embodiment, therefore, behaves as an access interface to firmware system , using higher-level instructions than the tree functions, but still capable of implementing a traversal algorithm.","Steps  and  access firmware system  in different ways to gather information about firmware system . In certain embodiments, each step,  and , is specifically designed for a unique firmware system. Each step,  and , may also be implemented as software that functions as a driver for a particular firmware system. For example, step  may be implemented as a software driver for one firmware system, while step  may be implemented as a software driver for a different firmware system.","The operation of detector  of  described in  can be implemented by instructions that are stored on storage media. The instructions can be retrieved and executed by a processor. By way of an example, instructions may be software, program code, and firmware; storage media may be memory devices, tapes, disks, integrated circuits, and servers.","Advantages to software implementations of steps  and  include an abstraction of information gathering methods from the EFI Boot Manager. The abstraction of the information gathering methods enables the EFI to operate independently of firmware system . Information gathering software can be developed for each unique version of firmware system . Since the information gathering is decoupled from the EFI Boot Manager, the EFI Boot Manager and the EFI can be ported across different firmware platforms.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5","b":["513","502","500","502","504","504","504","502","512","512","514","512","516","517","514","514","517","514","519"]},"EFI  includes EFI operating system loader , which serves to load and start operating system . EFI  also includes a variety of service functions in EFI boot service ; the services, may for example, include runtime services , boot devices , EFI drivers , and protocol handlers . These service functions, , , , and , start, commonly referred to as \u201cbooting\u201d and \u201chandshaking\u201d, associated hardware devices when computer system  is initialized. EFI  also includes EFI Boot Manager  and detector . EFI Boot Manager  is communicatively connected to detector  and to EFI boot service . EFI Boot Manager  is communicatively connected to EFI boot service  and to firmware system  through detector . A user may interact with firmware system  through detector . EFI Boot Manager  may include EFI shell .","Detector  detects information about firmware system  by receiving a generic instruction from EFI Boot Manager . The generic instruction may be received from EFI shell . Detector  then gathers information about firmware system  by accessing a data-gathering function based on the generic instruction. Detector  then retrieves information about firmware system  through the data-gathering function. Detector  then transfers the information to EFI Boot Manager . Detector  may transfer the information to EFI shell . Detector  may, thus, operate as an abstracted data gathering system of EFI . In another embodiment of the invention, detector  may be implemented within runtime services , boot devices , EFI drivers , and\/or protocol handlers .","Advantages to the embodiment described above enable firmware developers to develop and implement software tools through the EFI Boot Manager that are portable across different firmware platforms, since EFI  including EFI Boot Manager  and EFI shell  can be ported across different firmware platforms. Having EFI  be portable is advantageous since software interfaces between firmware systems, such as firmware system , do not have to be redeveloped. Other advantages include having a set of pre-compiled information gathering functions that are available when a firmware platform is initialized. Moreover, potential software defects of the information gathering functions can be easily corrected and new features for the information gathering function can be easily implemented as pre-compiled software, thereby making a re-compilation of EFI  unnecessary.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 6","FIG. 5"],"b":["600","600","512","608","600","600","602","604","606","604","606","606","602"]},"Storage device  includes a partition for storing firmware . Firmware instruction set  resides in firmware . Storage device  may, for example, be read only memory, random access memory, or non-volatile random access memory. Microprocessor  may, for example, be an Itanium family microprocessor and\/or an IA- microprocessor, both from Intel Corporation. Firmware  may, for example, be a basic input\/output system (BIOS) developed by Phoenix Technologies Ltd.","In operation, interface device  receives the generic instruction from firmware interface . Microprocessor  receives and processes the generic instruction to access a data-gathering function located within firmware instruction set . Microprocessor  retrieves information about firmware platform  through the data-gathering function. Microprocessor  transfers the information to firmware interface  through interface device . In certain embodiments of the invention, the data-gathering function is pre-compiled to operate when firmware platform  is initialized. Firmware interface  may, for example, be an Extensible Firmware Interface (EFI) shell. The data-gathering function can include a plurality of functions organized into a library and implemented as software drivers. The data-gathering function can retrieve data through tree function calls and\/or through an Extended System Abstraction Layer Interface (ESI), as described in retrieve step  of .","Since certain changes may be made in the above methods and systems without departing from the scope of the invention, it is intended that all matter contained in the above description or shown in the accompanying drawing be interpreted as illustrative and not in a limiting sense. It is also to be understood that the following claims are to cover all generic and specific features of the invention described herein, and all statements of the scope of the invention which, as a matter of language, might be said to fall there between.","Those skilled in the art will appreciate variations of the above-described embodiments that fall within the scope of the invention. As a result, the invention is not limited to the specific examples and illustrations discussed above, but only by the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete understanding of the invention may be obtained by reference to the drawings, in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
