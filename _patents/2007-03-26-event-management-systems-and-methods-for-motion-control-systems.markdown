---
title: Event management systems and methods for motion control systems
abstract: A motion control system comprising a machine platform, at least one event destination, and an event handler. The machine platform carries out automated tasks and generates events. The event handler is configurable to receive at least one event from the machine platform and send the at least one event to the at least one event destination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07904194&OS=07904194&RS=07904194
owner: Roy-G-Biv Corporation
number: 07904194
owner_city: Bingen
owner_country: US
publication_date: 20070326
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Appendix A","Data Types"],"p":["This application is a continuation of U.S. patent application Ser. No. 11\/368,231 filed on Mar. 3, 2006 now abandoned, which claims priority of U.S. Provisional Application Ser. No. 60\/658,746 filed on Mar. 3, 2005, and the '231 application is a continuation-in-part of U.S. patent application Ser. No. 10\/074,577 filed on Feb. 11, 2002, now U.S. Pat. No. 7,031,798, and which claims priority of U.S. Provisional Application Ser. No. 60\/267,645 filed on Feb. 9, 2001. The contents of all related applications listed above are incorporated herein by reference.","The present invention relates to motion control systems and, more specifically, to an event management system optimized for the processing and distribution of events associated with a motion control device.","Electromechanical systems are used in numerous environments to translate electrical signals into mechanical movement. As examples, factory automation systems, toys, appliances, and the like all may use one or more electromechanical transducers that move in response to electrical control signals.","Typically, an application programmer familiar with a specific environment creates an application program defining a desired sequence of movements. U.S. Pat. Nos. 5,691,897, 5,867,385, and 6,209,037 to Brown et al. disclose systems and methods for generating, processing, and\/or distributing control commands to one or more motion control devices based on such an application program.","The present invention may be embodied as a part of an overall motion control system as described in the Brown et al. patents and will be described herein in that context. However, as described below, the principles of the present invention may have broader application to other motion control systems and methods, and the scope of the present invention should be determined by the claims appended hereto and not the following detailed description.","The present invention may be embodied as a motion control system comprising a machine platform, at least one event destination, and an event handler. The machine platform carries out automated tasks and generates events. The event handler is configurable to receive at least one event from the machine platform and send the at least one event to the at least one event destination.","Referring initially to , depicted therein is a motion control system  constructed in accordance with, and embodying, the principles of the present invention. The motion control system  is an event-based system used to control, configure, and query one or more motion based devices or machines such as indicated by reference character  in the drawing. The motion based devices or machines  will be referred to herein as the target device.","In the context of the motion control systems described herein, data is often associated with events. The term \u201cdata\u201d (or data items) includes any numeric or string data values collected from a target machine or device in an analog or digital format that is made compatible for computer systems. For example, BIT, BYTE, WORD, DWORD, LONG, REAL, DOUBLE, FLOAT, STRING, ASCII STRING are a few data types that represent data items. Data may be collected from data sources by reading register values on the data source, reading shared memory provided by the data source, sending commands to the data source for which a data response is given containing the data requested, reading variables provided by the data source, reading and writing to variables in a sequence necessary to produce data values, querying data using a proprietary or standard data protocol, calling a function provided by the target data source, etc. The term \u201cvariable\u201d as used herein refers to a data item that has both a name and optionally associated data. A data item may be a function call, a named data variable, a tag within a database, or the like. The terms \u201cvariable\u201d and \u201cdata item\u201d are used interchangeably to refer to a data point that includes one or more atomic data elements.","In the following discussion, the components or objects that form the motion control system  and the basic operation of the system  will first be described. After that will follow a discussion of the interaction between those objects and several detailed scenarios of typical actions of this system .","Referring initially to  of the drawing, it can be seen that the motion control system  comprises the motion based machine or device , a motion event manager , one or more motion event provider objects , a motion event interface , a motion web site , and a media creation tool .","The system  is adapted to be run on a general purpose computer platform comprising computer hardware and an operating system . The exemplary operating system  is a Windows variant and comprises a registry .","The web site  and media creation tool  provide access to one or more motion media files . The motion media files  contain what will be referred to herein as motion media.","The term \u201cmotion media\u201d includes motion scripts, motion application programs, and\/or individual motion instructions capable of causing the target device  to perform a desired motion operation comprising a discrete movement or sequence of movements.","The motion media comprises what will be referred to as motion commands. The term \u201cmotion commands\u201d will be used herein to refer to both control commands and media commands associated with a desired motion operation. The term \u201ccontrol commands\u201d as used herein refers to device-specific commands that may be directly run by a target device to obtain a desired motion operation.","The term \u201cmedia commands\u201d used herein refers to machine independent instructions that generically define a desired motion operation. Normally, media commands are converted into control commands before the target device executes the desired motion operation corresponding to a particular media command or set of media commands.","The term \u201capplication program\u201d will be used to refer to a set of control and\/or media commands associated with a sequence of discrete movements. In general, the term \u201capplication\u201d refers to client software that uses the functionality of the example motion control systems described herein. An application is typically an executable, but may also be a DLL, component, or other module that takes advantage of the functionality of the motion control systems described herein.","The term \u201cmodule\u201d as used herein refers to a binary block of computer logic that contains functions, objects, components, ActiveX components, .NET source, HTML, XML and\/or other computer code that can be executed in real-time or in script form. Several examples of a module include an executable EXE, a dynamic link library DLL, an OLE component or set of components housed within a DLL or EXE, an ActiveX Control, an HTML or XML based Control, a VB script source file, a Java Serverlet, Java Control, Java Object, .NET Package, etc.","The motion event manager  comprises a motion control component  and an event handling component . The motion event interface  further comprises a event provider configuration control  and a media view control . As used herein, the term \u201ccomponent\u201d refers to a logical organization of computer logic designed to perform a set of operations. Several examples of a component are an OLE Component, an ActiveX Control, an HTML or XML based Control, an HTML or XML based object, a NET object, a Visual Basic based object, etc.","The motion control system  operates basically as follows. The motion event providers  generate what will be referred to as event tokens based on the occurrence of a predetermined event. The event token is associated with the predetermined event in advance and thus identifies the predetermined event. The event token may also contain additional information such as the source of the predetermined event, parameters associated with the predetermined event, and the like.","The event tokens are sent to the motion event manager . The motion event providers  and motion event manager  run in separate processes and could perhaps run on separate physical machines connected over a network. As used herein, the term \u201cnetwork\u201d refers to a link between two or more computer systems and may be in the form of a packet based network, a streaming based network, broadcast based network, or peer-to-peer based network. Several network examples include a TCP\/IP network, the Internet, an Intranet, a wireless network using WiFi, a wireless network using radio waves and\/or other light based signals, etc.","The motion event providers  and motion event manager  thus use the system for the inter-process communication provided by the operating system to transmit the event tokens from the event providers  to the motion event manager .","The motion event manager  notifies the motion control component  when the event token is received and the identity of the event token. The action taken by the motion control component  upon receipt of an event token depends upon the nature of the event token. The received event token may contain or identify a particular control command, and the motion control component  can simply pass that control command to the target device . The received event token may contain or identify a particular media command, in which case the motion control component  may be required to convert the media command into a control command capable of being run by the target device . Another event token may start, stop, or otherwise control a separate application program run by the motion control component .","In the exemplary system , the association of motion media with event tokens is preferably made by the motion event manager . This association is typically represented by a table, spreadsheet, or other data storage means capable of defining relationships between event tokens and motion media. Upon receipt of each event token, the motion event manager  will identify the motion media previously associated with the received token and send the identified motion media to the motion control component  for control of the target device .","With the foregoing understanding of the basic operation of the system , the details of this exemplary motion control system  will now be described.","The motion event manager  handles the creation of each event provider  installed on the system by creating in-proc providers or injecting other providers into their target processes. The event manager  also catches events fired from each provider  and initiates the appropriate motion request for each event. In the exemplary system , the event manager  is the only object that communicates directly with the motion control component , as will be described in further detail below. The exemplary event manager  is accessible by double clicking its icon in the Windows System Tray in a conventional manner.","The purpose of the event handling component  is to handle the inter-process communications between the motion event manager  and the motion event providers . The exemplary event handling component  is or may be a conventional software object referred to as a message pump.","The motion event provider objects  are individually designed to monitor user configurable events from a given source. The exemplary system  employs two types of motion event providers : simple in-proc servers hosted by the motion event manager  and specialty DLLs that are injected into a target process to monitor event cases. Each motion event provider object  also contains an event configuration control  that, as will be described below, allows a user to configure all events supported by the motion event provider objects . The motion event provider objects  notify the motion event manager  of each event caught by the objects .","The motion event manager  and motion control component  operate together to allow interaction between the motion event providers  and the target device .","The motion control component  may be or incorporate parts of a software system as disclosed, for example, in U.S. Pat. Nos. 5,691,897 and 5,867,385. The systems disclosed in the '897 and '385 patents are capable of generating device-specific control commands based on hardware independent media commands written to a predetermined application programming interface.","As an alternative, the motion control component  may act as a conduit that passes device-specific control commands and query responses between the motion event providers  and the target device . A motion control component implemented in this manner would not convert between hardware independent media commands and device specific control commands.","A preferred implementation of the motion control component  would be to be for the component  to function in both a translation mode and in a pass-through mode. In the translation mode, the component  converts media commands into control commands. In the pass-through mode, the component  simply passes control commands from the motion event providers  to the target devices . In either mode, query responses are returned from the target devices  to the event provider  in an appropriate format.","The motion event configuration interface  is preferably a visual interface displayed on a screen to allow a user to configure all motion event providers  installed on the system . The exemplary interface  also provides access to the motion web site  where new motion media and motion event providers  may be downloaded and installed.","As will be described in more detail below, the configuration options allowed by the interface  include the ability to enable\/disable event providers  and map motion media to particular events supported by each provider . The interface  also provides access to the motion web site , allowing for new motion media and motion event providers  to be downloaded and installed onto the current system.","Each motion event provider  contains a visual configuration control  that allows the user to configure the events supported by each provider . The exemplary configuration controls  use the media view control object  to gain access to the available motion media in the motion media file  that can be mapped to each available event.","These controls may also be configured to allow the user to add new, customized events to the motion event providers . The dynamic events can be defined using parameters such as text (usernames, messages, email, etc.), date\/time, or any other parameter particular to an event provider's event source.","The media view control object  provides access to all installed motion media scripts as represented by the motion media file . Preferably, the media view control object  displays a conventional browse\/select dialog to allow identification and selection of the available motion media. This object  is used by the event provider configuration controls  and allows the configuration controls  to remain independent of the motion media format.","The media creation tool application  allows the user to customize and\/or create motion media. This application  preferably implements a graphical, easier to use, front-end user interface design.","The motion web site  provides a location for the user to download new motion media as well as new and\/or updated motion event providers . The motion media is preferably stored in a single meta file. New motion media downloaded from the motion web site  will be added to this meta file.","The present invention is preferably embodied using the Windows registry; typically, a component category is created for each of the motion event providers , allowing the motion event manager  to enumerate all providers  installed on the system. Primary event sources  are user actions (in any active application supported via a motion event provider) and operating system tasks.","With the foregoing understanding of the modules that form the exemplary system , various scenarios in which these modules typically interact will now be described.","Referring now to , depicted therein is the scenario describing the startup process of the motion event manager  of the system . Each of the steps of this startup process will now be described with reference to .","The motion event manager  process  begins on system startup. The motion event manager  process  next queries the MOTION_EVENT_PROVIDER component category in the Windows Registry to enumerate all motion event providers  installed on the system.","Third, the registry entry of each of the event providers  contains startup information indicating if the particular event provider is either a standard in-proc provider or a specialty provider that is injected into a target process to monitor event conditions.","Fourth, the motion event manger  creates a new instance of each provider . If the event provider  is a specialty provider that is injected into a target application process, the event manger  will read the target-process information from the provider's registry entry, find the target process, and perform the DLL-injection. If the target process is not active, the motion event manager  will continually monitor the creation of new applications, and perform the injection when\/if the requested application is launched.","Fifth, once the event providers  are created, the motion event manager  will send the appropriate initialization information to each provider , including callback information to allow the event providers  to post event messages back to the event manager .","Finally, the event provider  reads initialize message data and establish the necessary event syncs to monitor the events. The initialize message data includes a registry key identifying the location of the event configurations and preferences as last set by the motion event configuration interface  or the default installed set.","Referring now to , depicted therein is the DLL injection scenario map. This scenario describes the process of injecting a motion event provider DLL into the address space of a target application.","As shown in , the first step of this process is for the motion event manager  to determine which process into which the motion event provider  must be injected based on the registry entry of the provider .","Once the target process has been identified, the next step is for the event manager  to install a Windows message hook in the target process. This causes the event provider DLL to be loaded into the target address space of the target process. The event provider DLL has now been loaded into the required process, and will now wait for the \u201cinitialize\u201d message from the motion event provider .","Referring now to , depicted therein is the motion event configuration scenario map. This scenario map describes the process of configuring motion events of each of the motion event providers .","First, the user launches the motion event configuration interface  from system tray interface of the motion event manager .","Each event provider object  supports a custom visual control  that can be used to edit the object's supported events. The event configuration interface  creates and hosts these visual controls  for the user.","Next, when the event provider configuration control  is created and initialized, it will receive the location in the Windows Registry  of its persisted event data, which will be loaded into the control .","Next, the user will select an event provider  to configure. Individual events may be mapped to motion actions, and particular events (as well as the entire event provider itself) may be deactivated if desired. As noted above, these event configuration controls  may also provide the means to add additional, customized events based on input user parameters (custom text strings, buddy chat names, email messages, etc).","When the user selects an event to configure, the event provider configuration control  will defer to the media view control object . The media view control object  displays all available motion media via a dialog box, allowing the user to make a selection.","Finally, once the user makes a motion media selection, the media view control object  returns data back to the event provider configuration control object  (including human-readable description text of the event for display as well as a data token which can later be used to identify media selection). The configuration control object  then persists this information to the Windows Registry .","Referring now to , depicted therein is a motion event scenario map. This scenario describes the process of handling a motion event.","The scenario depicted in  begins whenever an event occurs. The occurrence of an event may be caused from a user action, operating system event, or an event situation monitored in a third-party application.","The event provider  then fires a event token associated with this event to the event manager . The event token has previously been stored in the registry during the event configuration process. If the provider  requires queried data to be returned, the provider  will also pass the necessary callback data to the event manager .","The event manager  next receives the event and passes the requested media information to the motion control component . The motion control component  then executes the specified motion media on the target motion device .","Finally, if a query action was requested, the motion control component  will return the appropriate data. The motion event manger  will send the data through the specified event provider callback mechanism.","Depicted in  is a motion web site scenario map. The scenario of  describes how a user may obtain new motion media and motion event providers  from the motion web site .","This process may be started when users visit the motion web site  to browse currently available motion event providers  and new motion media. In , the reference character is used to represent a motion media file stored locally by the system , while the reference character  represents a motion media file stored at a remote location.","Next, the user selects the desired provider\/media download option, and the new software is installed into the motion event manager  including the motion control component .","The next time the motion event configuration interface  is launched, the user will be able to configure the new event provider  or motion media in the local motion media file ","Alternatively, users may download new event providers  and motion media directly from within the motion event Configuration dialog interface. This configuration dialog will provide the following options to the user: Download new Motion Media and\/or Download\/install new motion event providers . The user or the motion event manager  may also check for new versions of currently installed motion media and\/or event providers .","Next, the user selects the desired provide\/media download or update option, and the configuration dialog interface object  automatically downloads and installs the new software from the media web site .","Finally, once the new software is installed the configuration dialog  will automatically update to provide access to the new components and\/or media.","Referring now to , depicted therein is the system shutdown scenario map. This scenario describes the process of shutting down the exemplary event manager module  associated with the motion control component .","Upon operating system shutdown, the motion event manager  will prepare to terminate.","The event manager  next posts a shutdown message to each event provider  currently being managed by the manager . Specialty event providers  that have been injected into external processes may have already finished if the target process has been shutdown. In this case those event providers  would have already notified the event manager  that they are no longer available.","Each event provider  performs any required shutdown tasks.","Upon finishing any shutdown tasks, each provider  will notify the event manager  that the provider  is now finished.","Once the event manager  receives notifications that each of the event providers  managed thereby have been shutdown, the event manager  itself is now finished.","Referring now to , depicted therein is a scenario map illustrating the mapping of text to motion events. This scenario generally describes the mapping of text based event situations to motion.","The first step of this process is for a text based event situation to occur. This text could be one or more of the following: (a) a particular sub-string in an Instant Message or the entire message string itself; (b) an Instant Message sent from a target screen or \u2018buddy\u2019 name; (c) a text string converted from a speech-to-text engine installed on the user's machine; and\/or (d) an email message meeting previously configured criteria (Sent From, Subject, message content, etc). In the case of an event created using a peer-to-peer networked application such as Instant Messenger-type process, text is entered at a remote source application and sent as a text message to a receiving application.","The motion event provider  monitoring the specific text based event catches the event, and performs any pre-processing of the text required to identify the particular event. In the peer-to-peer application described above, a DLL functioning as the event provider  is injected into the receiving application; the DLL event provider  intercepts the message received by the receiving application and treats the received message as an event.","Once an event has been identified, the event provider  will lookup the corresponding motion event token as previously configured. As generally described above, the motion event tokens are pre-loaded upon initialization. In the peer-to-peer example described above, the DLL functioning as the event provider  sends the text message as part of the event token to the event manager  using a process-to-process communication system as generally described above.","After the event token containing the text message is sent to the motion event manager , the event manager  determines the type of event represented by the received token.","If the event manager  determines that the received event token corresponds to a text event, the event manager  next parses the text parameter from the event token. The motion event manager  looks up the motion media associated with the event type and event text parameter. The appropriate motion media is then sent to the motion control component  for execution on the target motion device  as described above with reference to .","The process described above with reference to  can also occur in the reverse. In particular, the event manager  uses the motion control component  to continually query the target device  for state information. When the state information meets certain parameters, the control component  causes the event manager to \u2018create\u2019 a new event (such as a text event) and send it to an event provider .","The event provider  in turn then causes the receiving application to sent a message to a remote peer-to-peer application; again, the receiving and remote peer-to-peer applications may be Instant Messenger compatible applications.","An example of the use of the present system to verify motion status would be for the event manager  to continually or periodically query the target device  through the motion control component  for status parameters that indicate a fault condition. Once a fault condition occurs, the event manager  builds a text message that describes the fault and then sends the text message to a remote application, such as an Instant Messenger user, using process-to-process communication system and the peer-to-peer networked application.","The following Table A describes the interface specifications for components of the exemplary motion control system  described above using the exemplary motion control component .",{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE A"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["component","interface","method(s)\/description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["motion event",{},{}]},{"entry":"manager 30"},{"entry":[{},"IXMCEventProviderMgt"]},{"entry":[{},{},"EnumerateProviders used by"]},{"entry":[{},{},"configuration dialog object to"]},{"entry":[{},{},"get a list of all installed motion"]},{"entry":[{},{},"event providers 132"]},{"entry":[{},{},"EnableProvider( ) used to"]},{"entry":[{},{},"enable\/disable given event"]},{"entry":[{},{},"providers. will be called from"]},{"entry":[{},{},"the configuration dialog object"]},{"entry":[{},"IXMCEventScheme"]},{"entry":[{},{},"GetSchemes( ) used by"]},{"entry":[{},{},"configuration dialog object to"]},{"entry":[{},{},"get current list of schemes on the"]},{"entry":[{},{},"system"]},{"entry":[{},{},"AddScheme( ) - used by"]},{"entry":[{},{},"configuration dialog object to"]},{"entry":[{},{},"add a new scheme"]},{"entry":[{},{},"RemoveScheme( ) - used by"]},{"entry":[{},{},"configuration dialog object to"]},{"entry":[{},{},"remove a given scheme"]},{"entry":[{},{},"RenameScheme( ) - used by"]},{"entry":[{},{},"configuration dialog object to"]},{"entry":[{},{},"rename a given scheme"]},{"entry":"Event"},{"entry":"configuration"},{"entry":"controls 158"},{"entry":[{},"IXMCEventConfig"]},{"entry":[{},{},"Initialize( ) - called by the"]},{"entry":[{},{},"configuration dialog object"]},{"entry":[{},{},"which hosts this control, used to"]},{"entry":[{},{},"pass required init data, such as"]},{"entry":[{},{},"1) current registry location"]},{"entry":[{},{},"where event configuration data"]},{"entry":[{},{},"may be loaded\/persisted, 2)"]},{"entry":[{},{},"interface to the media"]},{"entry":[{},{},"view control 156, etc . . ."]},{"entry":"Media View"},{"entry":"Control 156"},{"entry":[{},"IXMCMediaViewCtrl"]},{"entry":[{},{},"method: SelectMedia( ) - called"]},{"entry":[{},{},"by each event configuration"]},{"entry":[{},{},"control. This method will dis-"]},{"entry":[{},{},"play a dialog to visualize all"]},{"entry":[{},{},"motion media available on the"]},{"entry":[{},{},"system and return a tokenized"]},{"entry":[{},{},"data param that can later identify"]},{"entry":[{},{},"the media item selected"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In the following discussion, the details of a number of the exemplary components of the system  will now be described.","The Windows Registry  is used to persist event management with motion control configuration data.","Data associated with the motion event providers  is persisted to the Windows Registry  primarily to accommodate event provider DLLs that need to be injected into a target process, an environment where those DLLs may not be able to rely on standard COM storage alternatives.","At runtime, when the motion event manager  initializes an event provider, the provider will receive a location in the registry where it should read its previously configured event data.","At design time, when hosted within the motion event configuration interface , the event configuration controls  of the event providers  receive the registry location, and will persist configuration changes to that location.","Event providers will persist both standard (hard coded) and custom events to their registry storage location. Associated with each event will be the configured motion event token data, which the provider will use when firing event notifications back to the motion event manager .","The motion event manager  manages all registry locations for the event provider objects.","The event manager provides a mechanism to support different event schemes. This allows configurations unique for several different users, situations, or motion devices. When a new scheme is selected via the motion event configuration interface , the event manager  will pass the new scheme registry location to each event provider object , allowing access to the new scheme data. Each scheme will be located in a unique sub key under the primary event manager registry location.","The user interface components  and  of the system  may be implemented in many different forms. The motion event configuration control  is used to configure all motion event providers  installed on the system, as well as to provide access to the motion web site  where new motion media and motion providers may be downloaded and installed. The interface of the media creation tool  is a preferably graphical representation of the motion device or system, where simple drag-drop, click, and record operations will facilitate the creating and modification of motion media.","The system  is designed to be easily extendible via new motion event provider and motion media components. The system  is also capable of supporting any number of additional event sources with the addition of new motion event providers  by registering these new providers with the system . These event providers  can link to virtually any event source to a target system .","The motion media formats can be modified and extended without requiring changes to any event provider objects. For example, a XMCMediaCtrl object proxies the raw motion media format to the event providers. Accordingly, once the XMCMediaCtrl component is updated to handle any new media formats, the event providers  may, by design, make use of the changes.","Instead of triggering entire motion programs as described above with reference to , a motion program or media set may be streamed to the device  through the system . Whether or not and how the media plays may be controlled by captured events. For example, a media player may fire events based on different musical notes or tones. When such events are received, one media stream may be selected over another, thus causing the motion device  to perform different actions. This may also occur with the standard motion programs described above.","Very large motion programs may be downloaded in partial form and then either downloaded in full over time or as certain specified events occur in the system.","Similar to streaming media support, single motion operations may also be supported in which a specified event causes a single motion operation to take place immediately. One example of this would be an event that causes movement of one axis in the clockwise direction.","Referring now to , depicted therein is a second example of a motion control system  constructed in accordance with, and embodying, the principles of the present invention. The motion control system  comprises a machine platform  and an event notification system .","The machine platform  may be implemented using a controller neutral platform technology as described, for example, in U.S. Pat. Nos. 5,691,897, 5,867,385, 6,209,037, 6,480,896, 6,513,058, 6,516,236, 6,542,925 and\/or 6,571,141, which are incorporated herein by reference. However, the machine platform  is or may be any motion control system, whether controller dependent or controller neutral, that comprises a machine converts motion commands into movement of an object.","In the context of the present application, the term \u201ccontroller\u201d refers to the hardware or software that contains the logic used to run the machine. Typically the controller one or more of a PLC, CNC Controller, or Motion Controller. The controller contains the main control loop used to position, monitor, or otherwise direct a machine to carry out useful automated tasks.","The term \u201cmachine\u201d is used herein to refer to a physical machine or device asset used to perform a specified task. For example, a machine may be a CNC Mill used to shape metal, a pick-n-place machine used to position parts on a circuit board, a robotic machine used to perform surgery, a medical data input device used to collect the vitals from a human being (i.e. blood glucose meter, asthma meter, etc), a gaming device used when playing a game, a robotic toy, an animatronics figure, a robotic machine used to deliver goods to a warehouse or to people, an automobile, truck or farm vehicle, a boat or ship that maneuvers in water, a airplane, jet, helicopter and\/or spacecraft. Any self powered machine or device (mobile or not) that is either directly controlled by humans or automatically controlled via a computer based system falls within the definition of \u201cmachine\u201d as used herein. The term \u201cdevice\u201d as used herein is essentially synonymous with the term \u201cmachine,\u201d but may be used in reference to a machine with a relatively small footprint.","The example event notification system  comprises a main event handler , one or more event handler applications , and one or more event handler property pages . The example main event handler  comprises a data queue .","The main event handler  is a component that is in communication with the machine platform  such that the main event handler  receives one or more events from the machine platform . The example data queue  within the main event handler  is a standard data queue that employs first-in\/last-out technology. Optionally, the data queue  may be implemented as a priority queue that allows the items in the queue to be organized based on given priorities associated with the data contents of each item in the queue. The data queue  may optionally use a timing scheme that ensures that all items within the queue are processed within a given time frame, such that no items within the queue are \u2018starved-out\u2019 when a high frequency of higher priority items are received.","The event handler application  is used to configure and run the main event handler . The example event handler application  is a Windows System Tray application. The event handler application  is optional, and the main event handler  may be run and configured using other systems and methods. The event handler property page  is used to configure the settings of the main event handler  by presenting a user interface that allows the user to see the settings of the main event handler  and\/or to change these settings.","The main event handler  is also in communication with one or more possible event destinations such as an upstream event handler  and\/or a downstream event handler .","The example upstream event handler  is a module similar to the main event handler  that serves data to the main event handler . The example downstream event handler  is also a module similar to the main event handler , but one that receives data from the main event handler . From the perspective of the upstream event handler , the main event handler  is a downstream event client. From the perspective of the downstream event handler , the main event handler  is an upstream event client.","The main event handler  may also be in communication with one or more event destinations through an intermediate destination such as a shared memory system , a memory queue , and\/or a network protocol . The shared memory system  is a block of memory that is accessible to different modules and\/or applications. The example memory queue  uses Microsoft Message Queue (MSMQ) technology or a similar technology. MSMQ allows for communication with other modules and\/or applications using a delayed messaging technology called Message Queuing. The example network protocol  is formed using TCP\/IP or UDP broadcast protocols as a mechanism of sending output data to another target. The TCP\/IP protocol specifies specific data target(s), and the UDP protocol broadcasts data to all nodes on a given network.","The main event handler  delegates one or more events received from the machine platform  to one or more event destinations such as the upstream event handler  and\/or the downstream event handler . In addition or instead, the main event handler  may delegate one or more events received from the machine platform  to additional event destinations using one or more of the intermediate destinations such as the shared memory system , the memory queue , and\/or the network protocol .","The main event handler  may further be in communication with an alternate event source such as a data transport system . The data transport system may be implemented using the data router technology described in co-pending U.S. patent application Ser. No. 10\/844,025, which is incorporated herein by reference. The data transport system  routes data outputs to various output sources, one of which may be the main event handler .","If the motion control system  employs the data transport system , the main event handler  may also be configured to delegate events from the data transport system  to the event destinations such as the upstream client  and\/or the downstream event handler  and\/or to intermediate destinations such as the shared memory system , the memory queue , and\/or the network protocol .","The event notification system  may use an event handler, such as the main event handler , which is internally configured to handle communications with the event destinations and\/or intermediate destinations as shown in . Alternatively, the motion control system  may use an event notification system having a modular main event handler as depicted in . The modular event handler is a more modular design where each output is modularized, thus giving the event handler the capability to select from a list of destination modules either programmatically or through a user interface.","In particular, the example modular main event handler further comprises at least one event communication component  configured to handle the details of communicating with one or more of the event destinations and intermediate destinations.  shows that the modular main event handler is in communication with the following event communication components: a component configured to communicate using e-mail or SMTP protocols; a component configured to access shared memory such as the shared memory system ; a component configured to communicate with a network protocol such as the network protocol ; a component configured to communicate with a memory queue such as the memory queue ; a component configured to communicate with a peer-to-peer communication system such as Instant Messenger; a component configured to communicate using XML messaging; a component configured to communicate using envelope based communication services such as SOAP; and\/or other communications components ","More than one event communication component  of the same type may be used simultaneously. For example, the event handler may use two event client components configured to communicate with a network protocol where each component is capable of sending data to a different destination network address.",{"@attributes":{"id":"p-0138","num":"0137"},"figref":"FIG. 11","b":["220","301","232","230","234","234","230","230"]},{"@attributes":{"id":"p-0139","num":"0138"},"figref":"FIG. 12","b":["230","260","230","234","230","230","230","230"]},"Once configured, the event handler  must be initialized to prepare it for use.  depicts the steps that take place when initializing the event handler . First, a component, such as the data transport  and\/or the event handler application , directs the event handler  to initialize itself. Next, the event handler  uses its internal properties, which were previously configured during the configuration stage, to connect to a machine platform  or an upstream event client , and subscribe to the data items specified in the configuration data.","In practice, the data items specified in the configuration data must be data that are published by the machine platform , or failures may occur. As used herein, the term \u201cpublish\u201d (or publish\/subscribe) refers to a method of receiving data updates where the client subscribes to data published by the server. For example, a server may have three data items available for subscriptions: A, B, C. The client may then subscribe to any of these data items upon which the client may receive data updates based upon certain criteria such as the data value of the subscribed data item changing, a time period passing, or some other event occurring in the system such as a trigger variable firing, etc. The term \u201ctrigger variable\u201d refers to variable or data item that causes the registered actions to be carried out when the variable or data item's event conditions are met.","Once configured and initialized the event handler  is ready to receive events for each of the subscribed data items.  depicts the steps that take place when processing events. First, the event is received from an upstream component such as the machine platform  and\/or an upstream event handler  that is daisy chained to the main event handler .","Upon receiving the event, the data is optionally placed at the back of the internal data queue . If a queue is not used, the data is immediately sent to all event destinations, such as shared memory system  or the network protocol , that are in an enabled state for that event. If the internal data queue  is used, data items are pulled off the data queue according to the rules for that queue and sent to all outputs that are in an enabled state for that event. As described above, the data queue  may be a first-in\/last-out queue, a priority queue, and\/or a queue implementing a timing scheme.","In addition to processing events, the event handler  may also process commands via API calls to one of its interfaces. For example, the data transport  may direct the event handler  to send data to an event destination by calling an API of the event handler .  depicts the steps that occur when processing a command using API calls. First, the remote component such as the data transport  may call an event handler API through which the data is passed. When called, the API may optionally place the data into an internal data queue . If a data queue is not used, the data is passed directly to all outputs, such as the shared memory system  or the network protocol , that are in an enabled state for a given event.","Optionally, the main event handler  may be daisy chained with one or more upstream event handlers  and\/or one or more downstream event handlers . In this case, data is received from upstream event handlers  and\/or sent to downstream event handlers .  depicts the steps that occur when processing events or commands in a daisy chained configuration.","First, if an event handler is connected upstream to the main event handler , the data is received from that upstream event handler  as an event and\/or as an API call. If an upstream event handler  is not used, data may be received in the normal manner either via an event or API call. Next, upon receiving the data as an event and\/or as an API call, the data may be placed at the back of an internal data queue  if used. If a data queue is not used, the data is sent directly to all outputs (such as shared memory system  or network protocol ) that are in an enabled state.","Third, when using the internal data queue , the data is pulled from the data queue and sent to all enabled outputs. Again, the data queue may be a first-in\/last-out queue, a priority queue, and\/or a queue implementing a timing scheme.","Fourth, if a shared memory  output is used and is enabled, the data is sent to a shared memory block.","Fifth, if a network protocol  is used and is enabled, the data is sent to zero, one, or more event destinations previously configured for this output in the case of a TCP\/IP network. As described above, the data may be sent as a UDP broadcast to all nodes on a network or group of networks. TCP\/IP may also be used to send the data via a tunneling mechanism, such as is used within a Virtual Private Network (like those implemented with Microsoft RRAS), from the current event handler  to another event handler  (or even to a group of event handlers ), where the receiving component receives the TCP\/IP or UDP data and then translates it into an event or API input.","Sixth, if a message queue , such as a MSMQ, event destination is used and enabled, the data is sent via the message queue  to another application or component, or even to another event handler  (or group of components).","Seventh, if one or more upstream event handlers  and\/or one or more downstream event handlers  are used and enabled, the main event handler  sends data directly to any such event handlers - and\/or .","As an optional eighth step, a downstream event handler  may be configured to communicate with the upstream event handler  via the shared memory  and\/or other standard synchronization events such as the event object supported within Win32.","When daisy chaining event handlers, it may also be important to pass configuration data (and other data) between the event handler components. When configuring any such event handler components as depicted in , the downstream event handler  may pass configuration information on to the main event handler . For example, when subscribing to data, any downstream event handler will notify any upstream event handler of all data items that are to be subscribed. The subscribing data may be continually passed along the daisy chain to modify any upstream event handlers and\/or directly notify the machine platform , if it is connected directly to the machine platform .","The event handler  is preferably a modular system made up of a set of components (i.e. each component is based on a component technology such as OLE\/COM from Microsoft Corporation). Optionally, each component may use a separate \u2018parallel\u2019 ActiveX component and\/or a property page component to implement all user interface aspects of the main component. Each ActiveX and\/or property page component may be implemented either within the main component module or separately in its own module. Bundling each object within one module is not required as they may be located at any location (i.e. across a network, and so forth), but doing so may optimize all communication between modules. How and where components are implemented is a logistical decision. Once components are built and deployed to the field, it is difficult to update a single component if all components are implemented within a single DLL or EXE module.",{"@attributes":{"id":"p-0155","num":"0154"},"figref":"FIG. 18","b":["220","220","230","240","242","230","240","242","222"]},"OLE Categories are used to determine how many components fall into a certain group of components. Currently, components used to form the event handler components use what will be referred to herein as the XMC Data Router components. The XMC Data Router components are general data router components support the general read, write, and configure API.","The IXMCDirect interface is used for most communications between all components making up the event handler . The following methods make up this interface (as specified in the standard OLE\/COM IDL format).","The IXMCDirect interface is made up of the following functions.\n\n","A more detailed description of each method implemented by the object is described below.",{"@attributes":{"id":"p-0160","num":"0162"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"IXMCDirect::GetProperty"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT GetProperty( LPCTSTR pszPropName,"]},{"entry":[{},"\u2003\u2003LPXMC_PARAM_DATA rgData,"]},{"entry":[{},"\u2003\u2003DWORD dwCount );"]},{"entry":["Parameters","LPCTSTR pszPropName - string name of the property to"]},{"entry":[{},"query."]},{"entry":[{},"LPXMC_PARAM_DATA rgData - array of"]},{"entry":[{},"XMC_PARAM_DATA types that specify each parameter"]},{"entry":[{},"corresponding to the property. For example, a certain"]},{"entry":[{},"property may be made up of a number of elements - in this"]},{"entry":[{},"case an array of XMC_PARAM_DATA items is returned,"]},{"entry":[{},"one for each element making up the property. In most"]},{"entry":[{},"cases, a property is made up of a single element, thus a"]},{"entry":[{},"single element array is passed to this method. For more"]},{"entry":[{},"information on the XMC_PARAM_DATA type, see"]},{"entry":[{},"below."]},{"entry":[{},"DWORD dwCount - number of"]},{"entry":[{},"XMC_PARAM_DATA elements in the rgData array."]},{"entry":["Return","HRESULT - NOERROR on success, or error code on"]},{"entry":["Value","failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The IXMCDirect::GetProperty method is used to query the property corresponding to the property name \u2018pszPropName\u2019. Each component defines the properties that it supports.",{"@attributes":{"id":"p-0162","num":"0164"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"IXMCDirect::SetProperty"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT SetProperty( LPCTSTR pszPropName,"]},{"entry":[{},"\u2003\u2003LPXMC_PARAM_DATA rgData,"]},{"entry":[{},"\u2003\u2003DWORD dwCount );"]},{"entry":["Parameters","LPCTSTR pszPropName - string name of the property to"]},{"entry":[{},"set."]},{"entry":[{},"LPXMC_PARAM_DATA rgData - array of"]},{"entry":[{},"XMC_PARAM_DATA types that specify each parameter"]},{"entry":[{},"corresponding to the property. For example, a certain"]},{"entry":[{},"property may be made up of a number of elements - in this"]},{"entry":[{},"case an array of XMC_PARAM_DATA items is returned,"]},{"entry":[{},"one for each element making up the property. In most"]},{"entry":[{},"cases, a property is made up of a single element, thus a"]},{"entry":[{},"single element array is passed to this method. For more"]},{"entry":[{},"information on the XMC_PARAM_DATA type,"]},{"entry":[{},"see below."]},{"entry":[{},"DWORD dwCount - number of"]},{"entry":[{},"XMC_PARAM_DATA elements in the rgData array."]},{"entry":["Return","HRESULT - NOERROR on success, or error code on"]},{"entry":["Value","failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"This IXMCDirect::SetProperty method is used to set a property in the component corresponding to the \u2018pszPropName\u2019 property. For the set of properties supported by the component, see the specific component description.",{"@attributes":{"id":"p-0164","num":"0166"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"IXMCDirect::InvokeMethod"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT InvokeMethod( DWORD dwMethodIdx,"]},{"entry":[{},"\u2003\u2003LPXMC_PARAM_DATA rgData,"]},{"entry":[{},"\u2003\u2003DWORD dwCount );"]},{"entry":["Parameters","DWORD dwMethodIdx - number corresponding to the"]},{"entry":[{},"specific method to invoke. For more information on the"]},{"entry":[{},"method indexes available, see the set of namespaces"]},{"entry":[{},"defined for the component."]},{"entry":[{},"LPXMC_PARAM_DATA rgData [optional] - array of"]},{"entry":[{},"XMC_PARAM_DATA types that specify each parameter"]},{"entry":[{},"for the method called. For more information on the"]},{"entry":[{},"XMC_PARAM_DATA type, see below."]},{"entry":[{},"NOTE: if no parameters exist for the method called, a value"]},{"entry":[{},"of NULL must be passed in."]},{"entry":[{},"DWORD dwCount [optional] - number of"]},{"entry":[{},"XMC_PARAM_DATA elements in the rgData array."]},{"entry":[{},"NOTE: if no parameters exist for the method called, a value"]},{"entry":[{},"of 0 (zero) must be passed in for this parameter."]},{"entry":[{},"LPXMC_PARAM_DATA rgData [optional] - namespace"]},{"entry":[{},"associated with the instance of the custom extension"]},{"entry":[{},"module added."]},{"entry":["Return","HRESULT - NOERROR on success, or error code on"]},{"entry":["Value","failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The IXMCDirect::InvokeMethod method is used to call a specific method implemented by the component. For more information on the methods supported, see the description of the specific component.","The IXMCDirectSink interface is an event reception point on which one component can send event data to another. The component implementing this interface is the event receiver, and the event source calls the interface passing to it event data.","The IXMCDirectSink interface is made up of the following functions:\n\n","A more detailed description of each method implemented by the object is described below.",{"@attributes":{"id":"p-0169","num":"0173"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"IXMCDirectSink::OnEvent"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT OnEvent( long IApiIdx, SAFEARRAY** ppSA );"]},{"entry":["Para-","long IApiIdx - index associated with the event type . . ."]},{"entry":"meters"},{"entry":[{},"SAFEARRAY** ppSA - pointer to a pointer to a"]},{"entry":[{},"SAFEARRAY containing an array of"]},{"entry":[{},"XMC_PARAM_DATA structures. For more information"]},{"entry":[{},"on the XMC_PARAM_DATA type, see below."]},{"entry":["Return","HRESULT - NOERROR on success, or error code on"]},{"entry":["Value","failure."]},{"entry":["Notes","The SAFEARRAY passed to this method contains an array"]},{"entry":[{},"of XMC_PARAM_DATA structures. This array has the"]},{"entry":[{},"following entries:"]},{"entry":["rgData[0]","LONG IConnection Cookie - unique cookie associated with"]},{"entry":[{},"this connection to the XMC Motion Server (returned when"]},{"entry":[{},"calling the InitializeHardware method on the XMC Motion"]},{"entry":[{},"Server)."]},{"entry":["rgData[1]","DWORD dwSubscription Cookie - unique cookie associated"]},{"entry":[{},"with the subscription for which this event has fired. This"]},{"entry":[{},"cookie is returned when making the subscription."]},{"entry":["rgData[2]","DWORD dwDataCookie - unique cookie associated with"]},{"entry":[{},"the specific data change that triggered the event. This"]},{"entry":[{},"cookie is generated within the XMC Motion Server."]},{"entry":["rgData[3]","LPCTSTR pszItemName - name of the item or variable for"]},{"entry":[{},"which the subscription is associated."]},{"entry":["rgData[4]","double dfTimeStamp - number of milliseconds passed from"]},{"entry":[{},"the time that the event pump, implemented by the XMC"]},{"entry":[{},"Motion Server, was first started."]},{"entry":["rgData[5]","DWORD dwDataCount - number of data values associated"]},{"entry":[{},"with the event (i.e. the number of structure elements that"]},{"entry":[{},"follow)."]},{"entry":["rgData[6 +","Number or String - actual data values associated with the"]},{"entry":["n]","event."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The IXMCDirectSink::OnEvent method is called by the event source and passed the event data in a SAFEARRAY form for easy marshalling across process boundaries.",{"@attributes":{"id":"p-0171","num":"0175"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"IXMCDirectSink::OnError"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT OnError( long IApiIdx, SAFEARRAY** ppSA );"]},{"entry":["Para-","long IApiIdx - index associated with the event type . . ."]},{"entry":"meters"},{"entry":[{},"SAFEARRAY** ppSA - pointer to a pointer to a"]},{"entry":[{},"SAFEARRAY containing an array of"]},{"entry":[{},"XMC_PARAM_DATA structures. For more information"]},{"entry":[{},"on the XMC_PARAM_DATA type, see below."]},{"entry":["Return","HRESULT - NOERROR on success, or error code on"]},{"entry":["Value","failure."]},{"entry":["Notes","The SAFEARRAY passed to this method contains an array"]},{"entry":[{},"of XMC_PARAM_DATA structures. This array has the"]},{"entry":[{},"following entries:"]},{"entry":["rgData[0]","LONG IConnectionCookie - unique cookie associated with"]},{"entry":[{},"this connection to the XMC Motion Server (returned when"]},{"entry":[{},"calling the InitializeHardware method on the XMC Motion"]},{"entry":[{},"Server)."]},{"entry":["rgData[1]","DWORD dwSubscriptionCookie - unique cookie associated"]},{"entry":[{},"with the subscription for which this event has fired. This"]},{"entry":[{},"cookie is returned when making the subscription."]},{"entry":["rgData[2]","DWORD dwDataCookie - unique cookie associated with"]},{"entry":[{},"the specific data change that triggered the event. This"]},{"entry":[{},"cookie is generated within the XMC Motion Server."]},{"entry":["rgData[3]","LPCTSTR pszItemName - name of the item or variable for"]},{"entry":[{},"which the subscription is associated."]},{"entry":["rgData[4]","double dfTimeStamp - number of milliseconds passed from"]},{"entry":[{},"the time that the event pump, implemented by the XMC"]},{"entry":[{},"Motion Server, was first started."]},{"entry":["rgData[5]","HRESULT hrResult - result code of the error for which the"]},{"entry":[{},"event is associated."]},{"entry":["rgData[6]","LPCTSTR pszError - string description of the error."]},{"entry":["rgData[7]","LONG ISrcError - error code describing the source of the"]},{"entry":[{},"error. For example, this may be an error code returned by"]},{"entry":[{},"a computer controlled piece of hardware."]},{"entry":["rgData[8]","LPCTSTR pszSrcError - string describing the source error."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The IXMCDirectSink::OnError method is called by the event source when an error occurs and passed the event error data in a SAFEARRAY form for easy marshalling across process boundaries.","In order to receive events directly from the machine platform , the event handler  also supports the IXMCaCNCEventDataSink interface as specified in the machine platform  product sold by ROY-G-BIV Corporation.",{"@attributes":{"id":"p-0174","num":"0178"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"["]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"object,"]},{"entry":[{},"uuid(15D1A3C6-9948-47c7-AFC1-3932AF4518D7),"]},{"entry":[{},"dual,"]},{"entry":[{},"helpstring(\u201cIXMCaCNCEventDataSink Interface\u201d),"]},{"entry":[{},"pointer_default(unique),"]},{"entry":[{},"oleautomation"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"]"},{"entry":"interface IXMCaCNCEventDataSink : IDispatch"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(1), helpstring(\u201cmethod OnData\u201d)]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT OnData(","[in] long IConnectionCookie,"]},{"entry":[{},{},"[in] long ISubscriptionCookie,"]},{"entry":[{},{},"[in] long lDataCookie,"]},{"entry":[{},{},"[in] BSTR bstrName,"]},{"entry":[{},{},"[in, out] SAFEARRAY (VARIANT) *"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"pvData,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[in] double dfTimeStamp );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(2), helpstring(\u201cmethod OnError\u201d)]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT OnError(","[in] long IConnectionCookie,"]},{"entry":[{},{},"[in] long ISubscriptionCookie,"]},{"entry":[{},{},"[in] long lDataCookie,"]},{"entry":[{},{},"[in] BSTR bstrName,"]},{"entry":[{},{},"[in] long hrErr,"]},{"entry":[{},{},"[in] BSTR bstrErr,"]},{"entry":[{},{},"[in] long lSrcErr,"]},{"entry":[{},{},"[in] BSTR bstrSrcErr );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Referring now to  of the drawing, depicted there in is an example of the IXMCaCNCEventDataSink OLE Interface.","The following methods make up the IXMCaCNCEventDataSink interface.",{"@attributes":{"id":"p-0177","num":"0181"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Event Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OnData","This event is called on the client application each time the"]},{"entry":[{},"event conditions are met for a given enabled subscription."]},{"entry":["OnError","This event is called on the client application each time an"]},{"entry":[{},"error occurs while processing a subscription."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0178","num":"0182"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"OnData Event"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","\/\/C++"]},{"entry":[{},"HRESULT OnData( [in] long IConnectionCookie,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] long ISubscriptionCookie,"]},{"entry":[{},"[in] long IDataCookie,"]},{"entry":[{},"[in] BSTR bstrName,"]},{"entry":[{},"[in, out] SAFEARRAY(VARIANT)* pvData,"]},{"entry":[{},"[in] double dfTimeStamp)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2018OLE Automation"]},{"entry":[{},"Event OnData( IConnectionCookie As Long,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ISubscriptionCookie As Long,"]},{"entry":[{},"IDataCookie As Long,"]},{"entry":[{},"bstrName As String,"]},{"entry":[{},"pvData( ) As Variant,"]},{"entry":[{},"dfTimeStamp As Double )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","IConnectionCookie As Long - this is the connection cookie"]},{"entry":[{},"returned by the call to InitializeHardware. Each connection"]},{"entry":[{},"cookie is unique to each application."]},{"entry":[{},"ISubscriptionCookie As Long - this is the subscription"]},{"entry":[{},"cookie returned by the call to SubscribeVariable."]},{"entry":[{},"IDataCookie As Long - this is the data cookie that is unique"]},{"entry":[{},"to each operation made by the internal data processing"]},{"entry":[{},"performed by XMC. For example each unsolicited read"]},{"entry":[{},"made by XMC is associated a unique data cookie."]},{"entry":[{},"bstrName As String - this is the name of the subscribed"]},{"entry":[{},"variable for which the event data is associated."]},{"entry":[{},"pvData( ) As Variant - this is the actual data for the event"]},{"entry":[{},"and is in the following form:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pvData(0) = number of elements."]},{"entry":[{},"pvData(1 + n) = data values."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dfTimeStamp As Double - this is the timestamp of the data"]},{"entry":[{},"specified in milliseconds from the start of the XMC Motion"]},{"entry":[{},"Server."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The OnData event is called each time the event condition for an enabled subscription is met for a subscription configured by a client application. Deadlock can occur when running in multi-application mode and calls to other XMC API are made from within this event hander or another event raised by this event handler. To avoid this situation, applications that implement this method should copy all data from this method into a temporary buffer and immediately return without calling other XMC API.",{"@attributes":{"id":"p-0180","num":"0184"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"OnError Event"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","\/\/ C++"]},{"entry":[{},"HRESULT OnError( [in] long IConnectionCookie,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] long ISubscriptionCookie,"]},{"entry":[{},"[in] long IDataCookie,"]},{"entry":[{},"[in] BSTR bstrName,"]},{"entry":[{},"[in] HRESULT hrErr,"]},{"entry":[{},"[in] BSTR bstErr,"]},{"entry":[{},"[in] long ISrcErr,"]},{"entry":[{},"[in] BSTR bstrSrcErr,"]},{"entry":[{},"[in] double dfTimeStamp )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2018OLE Automation"]},{"entry":[{},"Event OnError( IConnectionCookie As Long,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ISubscriptionCookie As Long,"]},{"entry":[{},"IDataCookie As Long,"]},{"entry":[{},"bstrName As String,"]},{"entry":[{},"hrErr As Long,"]},{"entry":[{},"bstrErr As String,"]},{"entry":[{},"ISrcErr As Long,"]},{"entry":[{},"bstrSrcErr As String,"]},{"entry":[{},"dfTimeStamp As Double )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","IConnectionCookie As Long - this is the connection cookie"]},{"entry":[{},"returned by the call to InitializeHardware. Each connection"]},{"entry":[{},"cookie is unique to each application."]},{"entry":[{},"ISubscriptionCookie As Long - this is the subscription"]},{"entry":[{},"cookie returned by the call to SubscribeVariable."]},{"entry":[{},"IDataCookie As Long - this is the data cookie that is unique"]},{"entry":[{},"to each operation made by the internal data processing"]},{"entry":[{},"performed by XMC. For example each unsolicited read"]},{"entry":[{},"made by XMC is associated a unique data cookie."]},{"entry":[{},"bstrName As String - this is the name of the subscribed"]},{"entry":[{},"variable for which the event data is associated."]},{"entry":[{},"hrErr As Long - this is the operating system error received."]},{"entry":[{},"bstrErr As String - this is a string describing the operating"]},{"entry":[{},"system error received."]},{"entry":[{},"ISrcErr As Long - this is the source error received that"]},{"entry":[{},"describes the error information in the context of the target"]},{"entry":[{},"control system. This error value is only provided when"]},{"entry":[{},"available."]},{"entry":[{},"bstrSrcErr As String - this is a string description of the"]},{"entry":[{},"source error received (when available)."]},{"entry":[{},"dfTimeStamp As Double - this is the timestamp of the data"]},{"entry":[{},"specified in milliseconds from the start of the XMC Motion"]},{"entry":[{},"Server."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The OnError event is called each time an error occurs for a subscription configured by a client application. Applications that implement this method should immediately copy the data received in a temporary buffer and or array and immediately return so as to not cause deadlock within their application. Deadlock can occur when running in multi-application mode and calls to other XMC API are made from within this event handler or another event raised by this event handler.","The Methods and properties exposed by the XMC Event Client component will now be described in further detail.","This section describes the general component properties of each property supported by the event handler  component.",{"@attributes":{"id":"p-0184","num":"0188"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TARGETMACHINE","rgData[0] - (string); name of the target"]},{"entry":[{},"machine for which the XMC Event Client"]},{"entry":[{},"component is to connect up to and receive"]},{"entry":[{},"data from."]},{"entry":["OPTIONS","rgData[0] - (DWORD); options describing"]},{"entry":[{},"how the XMC Event Client is to operate."]},{"entry":[{},"The following options are supported."]},{"entry":[{},"OF_AUTOLOAD_ENABLED - when"]},{"entry":[{},"specified, the component automatically"]},{"entry":[{},"loads the configuration settings specified in"]},{"entry":[{},"the configuration file specified in the"]},{"entry":[{},"CONFIGFILE property."]},{"entry":[{},"OF_AUTOSTART_ENABLED - when"]},{"entry":[{},"specified, the component automatically"]},{"entry":[{},"connects and starts monitoring data items"]},{"entry":[{},"that are specified."]},{"entry":[{},"OF_MAPVARIABLES_ENABLED - when"]},{"entry":[{},"specified, the variables listed in the variable"]},{"entry":[{},"mapping file specified in VARMAPFILE"]},{"entry":[{},"property are loaded."]},{"entry":[{},"OF_QUEUE_EVENT_ENABLED - when"]},{"entry":[{},"specified, all data received through an event"]},{"entry":[{},"are placed at the back of the data queue."]},{"entry":[{},"OF_QUEUE_API_CALLS_ENABLED -"]},{"entry":[{},"when specified, all data received on the"]},{"entry":[{},"Write API are placed at the back of the data"]},{"entry":[{},"queue."]},{"entry":[{},"OF_WAIT_FOR_DATA_RECEIVED -"]},{"entry":[{},"when specified, the component waits until an"]},{"entry":[{},"external application signals the data ready"]},{"entry":[{},"event before placing more data in the"]},{"entry":[{},"output(s)."]},{"entry":[{},"OF_DELETE_OLD_QUEUE_ITEMS -"]},{"entry":[{},"when specified, data items within the data"]},{"entry":[{},"queue that have been in the data queue for a"]},{"entry":[{},"time period longer than the amount specified in"]},{"entry":[{},"the DATAOLDTIMEOUT property are"]},{"entry":[{},"purged from the data queue."]},{"entry":[{},"OF_COLLECT_DATA_ALWAYS - when"]},{"entry":[{},"specified, data items are subscribed in such"]},{"entry":[{},"a way that updates are always sent, even"]},{"entry":[{},"when the data items does not change."]},{"entry":["QUEUEMAXSIZE","rgData[0] - (DWORD); specifies the"]},{"entry":[{},"maximum number of items allowed in the"]},{"entry":[{},"data queue. Items received after this"]},{"entry":[{},"maximum value is reached are ignored."]},{"entry":["DATARE-","rgData[0] - (DWORD); specifies the amount"]},{"entry":["CEIVEDTIMEOUT","of time to wait for an application to signal"]},{"entry":[{},"the data ready event. If this value is"]},{"entry":[{},"surpassed, the data in the front of the data"]},{"entry":[{},"queue is sent to the outputs."]},{"entry":["DATAOLDTIMEOUT","rgData[0] - (DWORD); specifies how long"]},{"entry":[{},"data items are allowed to remain in the data"]},{"entry":[{},"queue before being purged."]},{"entry":["CONFIGFILE","rgData[0] - (string); specifies the name of"]},{"entry":[{},"the file from which all auto-load"]},{"entry":[{},"configuration settings are read."]},{"entry":["VARMAPFILE","rgData[0] - (string); specifies the name of"]},{"entry":[{},"the file from which all variable mappings are"]},{"entry":[{},"loaded."]},{"entry":["VAR_MONI-","rgData[0] - (DWORD); specifies the total"]},{"entry":["TOR_COUNT","number of variables to monitor."]},{"entry":["VAR_MONITOR","rgData[0] - (string); specifies the name of"]},{"entry":[{},"the \u2018n\u2019th variable to monitor."]},{"entry":["VAR_READ_COUNT","rgData[0] - (DWORD); specifies the total"]},{"entry":[{},"number of variables to read."]},{"entry":["VAR_READ","rgData[0] - (string); specifies the name of"]},{"entry":[{},"the \u2018n\u2019th variable to read."]},{"entry":[{},"rgData[1] - (string); specifies the name of"]},{"entry":[{},"the \u2018m\u2019th variable to monitor for which this"]},{"entry":[{},"variable is associated."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"This section describes the general component methods supported by the majority of the components. For the specific list of methods supported by any given component, see the section describing that given component.",{"@attributes":{"id":"p-0186","num":"0190"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_BROWSE_GET_COUNT"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8020"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","None"]},{"entry":["Data Out","rgData[0] - (number) DWORD, number of browse elements."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_BROWSE_GET_COUNT method returns the number of data items in the browse set supported by the component.",{"@attributes":{"id":"p-0188","num":"0192"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_BROWSE_GET_ITEMS"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8021"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, maximum number of"]},{"entry":[{},"elements to collect."]},{"entry":["Data Out","rgData[0] - (number) number of elements collected, total"]},{"entry":[{},"number of elements will equal (rgData[0] * 2 + 1)."]},{"entry":[{},"rgData[1] - (string) name of the first browse element."]},{"entry":[{},"rgData[2] - (number) adt of the first browse element."]},{"entry":[{},"rgData[1 + n*2] - (string) name of the n'th browse element."]},{"entry":[{},"rgData[2 + n*2] - (number) adt of the n'th browse element."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_BROWSE_GET_ITEMS method returns the number of data items in the browse set supported by the component.",{"@attributes":{"id":"p-0190","num":"0194"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_SYSTEM_CONNECT_CMPNT"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8000"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, type of component. The"]},{"entry":[{},"type of component is a value that is server specific. For"]},{"entry":[{},"component type information, see the description for this"]},{"entry":[{},"method under each server's description."]},{"entry":[{},"rgData[1] - (string) LPTSTR, component class id as an"]},{"entry":[{},"ASCII string."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_SYSTEM_CONNECT_CMPNT method is used to connect one server to another so that they may interact with one another.",{"@attributes":{"id":"p-0192","num":"0196"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_SYSTEM_DISCONNECT_CMPNT"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8001"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, type of component. The"]},{"entry":[{},"type of component is a value that is server specific. For"]},{"entry":[{},"component type information, see the description for this"]},{"entry":[{},"method under each server's description."]},{"entry":[{},"rgData[1] - (string) LPTSTR, component class id as an"]},{"entry":[{},"ASCII string."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_SYSTEM_DISCONNECT_CMPNT method is used to disconnect one server to another so that they stop interacting with one another.",{"@attributes":{"id":"p-0194","num":"0198"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_DATA_PROCESS"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8063"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, number of data items input."]},{"entry":[{},"rgData[1 + n*2] - (string) LPCTSTR, name of the data item"]},{"entry":[{},"input."]},{"entry":[{},"rgData[2 + n*2] - (number or string), value of the data item."]},{"entry":["Data Out","rgData[0] - (number) DWORD, number of data items output."]},{"entry":[{},"rgData[1 + n*2] - (string) LPCTSTR, name of the data item"]},{"entry":[{},"output."]},{"entry":[{},"rgData[2 + n*2] - (number) value of the data item."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_DATA_PROCESS method is called by a client to process data where a data set is input, processed in some way by the server, and then the resulting data is returned as output.",{"@attributes":{"id":"p-0196","num":"0200"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_DATA_PROCESS_CONFIGURE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8062"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, flag describing the type of"]},{"entry":[{},"data to be returned when processing data. The following"]},{"entry":[{},"flags are supported:"]},{"entry":[{},"XMC_DE_READ_DATA_FLAG_TIMESTAMP - requests"]},{"entry":[{},"that the time stamp recorded when processing the data is"]},{"entry":[{},"returned."]},{"entry":[{},"NOTE: by default, the data item value is always returned."]},{"entry":["Data","None."]},{"entry":"Out"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_DATA_PROCESS_CONFIGURE method is used to configure what type of data is returned when processing a given data item. For example in the server may be configured to return the minimal amount of data on each read (i.e. just the data item value), or the server may be requested to return more substantial data.",{"@attributes":{"id":"p-0198","num":"0202"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_DATA_READ"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8061"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (string) LPCTSTR, name of the data item to"]},{"entry":[{},"read."]},{"entry":["Data Out","rgData[0] - (number or string), data item value."]},{"entry":[{},"rgData[1] - (OPTIONAL number) DWORD, data item time-"]},{"entry":[{},"stamp as a system time value."]},{"entry":[{},"NOTE: Since the last items are optional, only those items"]},{"entry":[{},"specified when configuring the data to receive are actually"]},{"entry":[{},"sent."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_DATA_READ method is called by a client application to poll for data from the server. As used herein, the term \u201cpoll\u201d refers to the process of continually reading a data item so that the most recent value of the data is always on hand.",{"@attributes":{"id":"p-0200","num":"0204"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_DATA_READ_CONFIGURE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8060"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, flag describing the type of"]},{"entry":[{},"data to be returned on each read. The following flags are"]},{"entry":[{},"supported:"]},{"entry":[{},"XMC_DE_READ_DATA_FLAG_TIMESTAMP - requests"]},{"entry":[{},"that the time stamp recorded when reading the data is"]},{"entry":[{},"returned."]},{"entry":[{},"NOTE: by default, the data item value is always returned."]},{"entry":["Data","None."]},{"entry":"Out"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_DATA_READ_CONFIGURE method is used to configure what type of data is returned when reading a given data item. For example in the server may be configured to return the minimal amount of data on each read (i.e. just the data item value), or the server may be requested to return more substantial data.",{"@attributes":{"id":"p-0202","num":"0206"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_DATA_WRITE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8064"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, number of data items."]},{"entry":[{},"rgData[1 + n*2] - (string) LPCTSTR, name of the data item."]},{"entry":[{},"rgData[2 + n*2] - (number or string), value of the data item."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_DATA_WRITE method is used to write data to a server.",{"@attributes":{"id":"p-0204","num":"0208"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_EVENT_ENABLE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","2892"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, cookie (unique identifier)"]},{"entry":[{},"associated with the subscription. This value is returned to"]},{"entry":[{},"the client when calling the subscription XMCAPI above."]},{"entry":[{},"NOTE: using a cookie value of zero (0) will enable\/disable"]},{"entry":[{},"ALL items subscribed to the server."]},{"entry":[{},"rgData[1] - (number) BOOL, TRUE to enable the"]},{"entry":[{},"subscription(s), FALSE to disable the subscription(s). Only"]},{"entry":[{},"enabled subscriptions actually fire events."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_EVENT_ENABLE method enables\/disables a previously subscribed data item in the subscription list maintained by the server. Only enabled subscriptions actually fire.",{"@attributes":{"id":"p-0206","num":"0210"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_EVENT_RECEIVE_DATA"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8045"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, subscription cookie"]},{"entry":[{},"corresponding to the subscribed data item."]},{"entry":[{},"rgData[1] - (number or string), data item value."]},{"entry":[{},"rgData[2] - (OPTIONAL number) DWORD, data item time-"]},{"entry":[{},"stamp as a system time value."]},{"entry":[{},"rgData[3] - (OPTIONAL string) LPSTR, data item ASCII text"]},{"entry":[{},"name."]},{"entry":[{},"rgData[4] - (OPTIONAL number) DWORD, data item unique"]},{"entry":[{},"cookie."]},{"entry":[{},"NOTE: Since the last three items are optional, only those"]},{"entry":[{},"items specified when configuring the data to receive are"]},{"entry":[{},"actually sent. If, for example, one or more data items are"]},{"entry":[{},"NOT requested, then the items are returned in slots shifted"]},{"entry":[{},"up toward rgData[1]. For example if only the data item name"]},{"entry":[{},"is requested in addition to the default data items, the data"]},{"entry":[{},"returned would look like the following:"]},{"entry":[{},"rgData[0] - (number) DWORD, subscription cookie."]},{"entry":[{},"rgData[1] - (number or string), data item value."]},{"entry":[{},"rgData[2] - (string) LPSTR, data item name."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_EVENT_RECEIVE_DATA method is called by the server (and implemented by the client) when each subscribed event fires.",{"@attributes":{"id":"p-0208","num":"0212"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","8044"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, flag describing the type of"]},{"entry":[{},"data to be returned on each event. The following flags are"]},{"entry":[{},"supported:"]},{"entry":[{},"XMC_DE_EVENT_DATA_FLAG_TIMESTAMP - requests"]},{"entry":[{},"that the time stamp recorded when reading the data is"]},{"entry":[{},"returned."]},{"entry":[{},"XMC_DE_EVENT_DATA_FLAG_NAME - requests that"]},{"entry":[{},"the data items ASCII text name be returned."]},{"entry":[{},"XMC_DE_EVENT_DATA_FLAG_DATA_COOKIE -"]},{"entry":[{},"requests that the unique data item cookie corresponding to"]},{"entry":[{},"the read made for the data item be returned."]},{"entry":[{},"NOTE: by default, the subscription cookie and data item"]},{"entry":[{},"value are always returned."]},{"entry":["Data","None."]},{"entry":"Out"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE method is used to configure what type of data is returned on each event that is fired. For example in the server may be configured to send the minimal amount of data on each event (i.e. subscription cookie and data item value), or the server may be requested to return more substantial data.",{"@attributes":{"id":"p-0210","num":"0214"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_EVENT_SUBSCRIBE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","2890"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data","rgData[0] - (number) DWORD, flags describing the initial"]},{"entry":["In","state of the subscription. The following flags are supported:"]},{"entry":[{},"XMC_DE_EVENT_FLAG_ENABLED - subscription is"]},{"entry":[{},"immediately enabled upon subscription."]},{"entry":[{},"XMC_DE_EVENT_FLAG_DISABLED - subscription is"]},{"entry":[{},"disabled upon making the subscription. The Enable function"]},{"entry":[{},"must be called to enable the subscription."]},{"entry":[{},"rgData[1] - (number) DWORD, number of subscription"]},{"entry":[{},"criteria rules."]},{"entry":[{},"rgData[2 + (2*n)] - (number) DWORD, event condition type"]},{"entry":[{},"where the following types are supported:"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_CHANGE - any"]},{"entry":[{},"data changes in the data type above will trigger the event."]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_EQUAL"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_LESSTHAN"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_GREATERTHAN"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_AND"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_OR"]},{"entry":[{},"Each of the conditions above are used in a combined"]},{"entry":[{},"manner. Where the logical condition (=, <, >) are applied for"]},{"entry":[{},"each type respectively."]},{"entry":[{},"For example, in an array that contains the following items:"]},{"entry":[{},"rgData[2] = 4 (4 condition values)"]},{"entry":[{},"rgData[3] = XMC_CNC_EVENTCONDITION_EQUAL"]},{"entry":[{},"rgData[4] = 3.0"]},{"entry":[{},"rgData[5] = XMC_CNC_EVENTCONDITION_LESSTHAN"]},{"entry":[{},"rgData[6] = 3.0"]},{"entry":[{},"rgData[7] = XMC_CNC_EVENTCONDITION_OR"]},{"entry":[{},"rgData[8] = 1.0"]},{"entry":[{},"rgData[9] ="]},{"entry":[{},"XMC_CNC_EVENTCONDITION_GREATHERTHAN"]},{"entry":[{},"rgData[10] = 5.0"]},{"entry":[{},"the array would be evaluated using the following logic:"]},{"entry":[{},"If (DATA <= 3.0 OR DATA > 5.0) then Trigger Event"]},{"entry":[{},"rgData[3 + (2*n)] - (number) double, the value for the"]},{"entry":[{},"condition. See above."]},{"entry":["Data","rgData[0] - (number) DWORD, cookie (unique identifier)"]},{"entry":["Out","representing the subscription."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_EVENT_SUBSCRIBE method subscribes to a given data item activating the event interface when the subscription criteria are met for the data item. All subscribing components must use the IXMCDirect interface to receive events received from the server for which they are subscribed.",{"@attributes":{"id":"p-0212","num":"0216"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_EVENT_UNSUBSCRIBE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index","2891"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data In","rgData[0] - (number) DWORD, cookie (unique identifier)"]},{"entry":[{},"associated with the subscription. This value is returned to"]},{"entry":[{},"the client when calling the subscription XMCAPI above."]},{"entry":[{},"NOTE: using a cookie value of zero (0) will unsubscribe ALL"]},{"entry":[{},"items subscribed to the server."]},{"entry":["Data Out","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The XMC_DE_EVENT_UNSUBSCRIBE method removes a previously subscribed data item from the subscription list maintained by the server.",{"@attributes":{"id":"p-0214","num":"0218"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_SYSTEM_INITIALIZEHW"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index","500"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Data In","None"]},{"entry":[{},"Data Out","None."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The XMC_DE_SYSTEM_INITIALIZEHW method is used to initialize any hardware systems associated with the component.",{"@attributes":{"id":"p-0216","num":"0220"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"XMC_DE_SYSTEM_SHUTDOWNHW"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index","501"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Data In","None."]},{"entry":[{},"Data Out","None."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The XMC_DE_SYSTEM_SHUTDOWNHW method is used to shutdown any hardware systems associated with the component.","The event handler  component implements the following general methods listed in the General Component Methods section above.",{"@attributes":{"id":"p-0219","num":"0223"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Not"]},{"entry":[{},"Im-","Im-"]},{"entry":[{},"ple-","ple-"]},{"entry":[{},"ment-","ment-"]},{"entry":["Method","ed","ed"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["XMC_DE_BROWSE_GET_COUNT","X",{}]},{"entry":["XMC_DE_BROWSE_GET_ITEMS","X"]},{"entry":["XMC_DE_DATA_PROCESS",{},"X"]},{"entry":["XMC_DE_DATA_PROCESS_CONFIGURE",{},"X"]},{"entry":["XMC_DE_DATA_READ","X"]},{"entry":["XMC_DE_DATA_READ_CONFIGURE",{},"X"]},{"entry":["XMC_DE_DATA_WRITE","X"]},{"entry":["XMC_DE_EVENT_ENABLE","X"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA","X"]},{"entry":["XMC_DE_EVENT_RECEIVE_DATA_CONFIGURE","X"]},{"entry":["XMC_DE_EVENT_SUBSCRIBE*","X"]},{"entry":["XMC_DE_EVENT_UNSUBSCRIBE*","X"]},{"entry":["XMC_DE_SYSTEM_CONNECT_CMPNT","X"]},{"entry":["XMC_DE_SYSTEM_DISCONNECT_CMPNT","X"]},{"entry":["XMC_DE_SYSTEM_INITIALIZEHW","X"]},{"entry":["XMC_DE_SYSTEM_SHUTDOWNHW","X"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The following methods have special notes for this component. The XMC_DE_EVENT_SUBSCRIBE method is only needed when daisy chaining components together. The XMC_DE_EVENT_UNSUBSCRIBE method is only needed when daisy chaining components together.","The visual elements presented by the event handler  component, namely the event handler property pages , will now be described in further detail.","The example property page depicted in  allows the user to set-up the connection settings used to connect to the target machine from which data will be received. In addition, this property page allows the user to configure how the component is connected and starts-up when it is first run.","As shown in , the following user interface elements form the connection and start-up property page . A \u201ctarget machine\u201d field  identifies the target machine  from which data is to be received using the TARGETMACHINE method. A \u201cconnect\u201d button  tests the connection with the target machine using a CONNECT method. A \u201cdisconnect\u201d button  disconnects the system  from the target machine  using the DISCONNECT method.","A \u201cmap variables\u201d check box  specifies whether or not to load mapped variables from a file when connecting using OPTIONS, (OF_MAPVARIABLES_ENABLED), and VARMAPFILE properties. When checked, a dialog appears allowing the user to select the file to load mapped variables from.","An \u201cenable auto load\u201d check box  specifies whether or not the auto load feature should be enabled and, when enabled, from which file to load the settings from as identified in a \u201cfile\u201d field  using OPTIONS, (OF_AUTOLOAD_ENABLED), CONFIGFILE properties.","An \u201cenable auto start\u201d check box  specifies whether or not to enable auto start using OPTIONS (OF_AUTOSTART_ENABLED) properties.","An event monitoring property page  depicted in  allows the user to configure which variables are to be monitored. The event monitoring property page  comprises the following interface elements.","A \u201cvariables\u201d box  contains a list of all variables that are available for monitoring. A \u201ctest\u201d button  directs the application to test a selected (highlighted) variable by reading it using a READ method. An \u201cattributes\u201d  button retrieves the attributes of the selected (highlighted) variable using the READ(\u2018attrib\u2019) method.","A \u201cvariables\u201d (to monitor) box  contains a list of all variables that have been selected for monitoring using VAR_MONITOR_COUNT and VAR_MONITOR_properties.","A first \u201cadd . . . \u201d button  directs the event handler  to add a variable from the \u201cvariable\u201d list in the box  to the \u201cvariables (to monitor)\u201d list in the box . A first \u201cremove\u201d button  directs the event handler  to remove the selected variable from the \u201cvariables (to monitor)\u201d list in the box . When a first \u201call\u201d check box  is checked, pressing the first \u201cremove\u201d button  directs the event handler  to remove all variables from the \u201cvariables (to monitor)\u201d list box .","A \u201cvariables (to read)\u201d box  contains a list of all variables that have been selected for reading using VAR_READ_COUNT and VAR_READ_properties. A second \u201cadd . . . \u201d button  directs the event handler  to add a variable from the \u201cvariable\u201d list in the box  to the \u201cvariables (to read)\u201d list in the box . A second \u201cremove\u201d button  directs the event handler  to remove the selected variable from the \u201cvariables (to read)\u201d list in the box . When a second \u201call\u201d check box  is checked, pressing the second \u201cremove\u201d button  directs the event handler  to remove all variables from the \u201cvariables (to read)\u201d list box .","Referring now to , depicted therein is an example of a data collection property page  that allows the user to specify how the variable data is collected. The data collection property page  comprises the following user interface elements.","A \u201cqueue event results up to:\u201d check box  and associated edit field  specify the maximum number of items to be placed in the optional data queue  using the following properties: OPTIONS (OF_QUEUE_API_CALLS_ENABLED), OPTIONS (OF_QUEUE_EVENTS_ENABLED), and QUEUEMAXSIZE.","A \u201cwait for data received event:\u201d check box  and associated edit field  specify the amount of time to wait for the recipient of the data to respond by signaling the data ready event using the following properties:","OPTIONS (OF_WAIT_FOR_DATA_RECEIVED) and DATARECEIVEDTIMEOUT method.","A \u201cdelete old items after:\u201d check box  and associated edit field  specify the amount of time that data items may remain in the queue after which they are purged, using the following properties: OPTIONS (OF_DELETE_OLD_QUEUE_ITEMS) and DATAOLDTIMEOUT method.","The \u201ccollect data always\u201d check box  specifies whether or not data should always be collected, even when the data does not change, using the following properties: OPTIONS (OP_COLLECT_DATA_ALWAYS).","The present invention may be embodied in forms other than those described above. The scope of the present invention should thus be determined with reference to the following claims and not the foregoing exemplary detailed description.","This Appendix A contains the definitions of all special types used by the methods and properties of each component making up the example XMC Program Engine system that may form a part of the present invention.","XMC_PARAM_DATA Structure","All methods exposed by each component in the XMC Program Engine system use the standard XMC parameters set to describe data used to set and query properties as well as invoke methods. The standard parameters are in the following format:","pObj\u2192InvokeMethod(LPXMC_PARAM_DATA rgData, DWORD dwCount);","Each element in the rgData array corresponds to a parameter, with the first element in the array corresponding to the first parameter. The XMC_PARAM_DATA structure can contain either a numerical or a string value and is defined as follows:\n\n","The \u2018adt\u2019 member of the XMC_PARAM_DATA structure describes the data contained within the XMC_PARAM_DATA structure. The values are described below:",{"@attributes":{"id":"p-0243","num":"0256"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["LNG_PARAM_DATATYPE","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LNG_ADT_NUMBER","Use this value when passing a"]},{"entry":[{},"numerical value via the \u2018adt\u2019 member of"]},{"entry":[{},"the XMC_PARAM_DATA structure."]},{"entry":["LNG_ADT_STAT_STRING","Use this value when passing a static"]},{"entry":[{},"string value via the \u2018psz\u2019 member of the"]},{"entry":[{},"XMC_PARAM_DATA structure."]},{"entry":[{},"Static strings do not need to be freed"]},{"entry":[{},"from memory."]},{"entry":["LNG_ADT_MEM_STRING","Use this value when passing a string"]},{"entry":[{},"value via the \u2018psz\u2019 member of the"]},{"entry":[{},"XMC_PARAM_DATA structure."]},{"entry":[{},"LNG_ADT_MEM_STRING denotes"]},{"entry":[{},"that the string must be freed from"]},{"entry":[{},"memory during cleanup."]},{"entry":["LNG_ADT_NOP","This value is used to ignore items"]},{"entry":[{},"within the XMC_PARAM_DATA"]},{"entry":[{},"array. When specifies, this parameter is"]},{"entry":[{},"not used."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"When querying and setting boolean TRUE\/FALSE values, any non-zero value is considered TRUE, whereas a zero value is considered FALSE."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWING","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4","b":"132"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6","b":["132","136"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 21"}]},"DETDESC":[{},{}]}
