---
title: Type system
abstract: A data structure and application programming interface for creating and manipulating object model artifacts within a meta-model is provided. The data structure may include higher level abstractions of the type system to provide a set of services to implement software design tools and editors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07590969&OS=07590969&RS=07590969
owner: Microsoft Corporation
number: 07590969
owner_city: Redmond
owner_country: US
publication_date: 20040414
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION","DESCRIPTION OF ILLUSTRATIVE EMBODIMENT"],"p":["Aspects of the present invention relate generally to data structures and object-oriented computer programming. More specifically, aspects of the present invention provide a data structure and application programming interfaces to define and manipulate object model artifacts.","Defining methods and classes for software objects or modules is an important part of the software design cycle. Typically, the creation of methods or classes must be specified in a specific programming language. The use of programming languages, however, requires adhering to detailed syntax which is undesirable, as a user may not be an expert in the particular programming language being utilized to create the method or class.","The Common Language Infrastructure Standard ECMA 325 provides a specification in which applications that are written in high-level languages such as C# or C++ may be executed in different system environments without the need to rewrite the applications. The Common Language Infrastructure Standard provides a Common Type System (CTS) which supports types and operations found in high-level languages. Though the Common Type System makes it easier to execute components and applications written in different programming languages, a user or developer must still be knowledgeable and adhere to detailed syntax of the particular programming language the user or developer utilized to create the components and applications.","The Common Type System lacks an intuitive and simple way to traverse and search artifacts or locate various types within the Type System. Additionally, the creation and modification of artifacts is cumbersome requiring excessive developer or user time.","Therefore, there is a need in the art, for a data structure and application programming interfaces that enable users or developers to create, modify, and search artifacts such as classes and methods utilizing a simple and language neutral implementation.","Aspects of the present invention address one or more of the issues mentioned above, thereby providing a data structure and application programming interfaces to define and manipulate object model artifacts. The data structure of the present invention provides for a very flexible and memory efficient manner in which to create or modify an artifact. The data structure may comprise a base class for capturing common functionality of classes of the type system and a controller object for validating the creation or modification of artifacts. An application programming interface communicates and interacts with the data structure enabling a developer or user to initiate creation or modification of artifacts.","Exemplary Operating Environment",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","120","130","110","130","120","140","150"]},"A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in the ROM . The computer  also includes a hard disk drive  for reading from and writing to a hard disk (not shown), a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . It will be appreciated by those skilled in the art that other types of computer readable media that can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may also be used in the example operating environment.","A number of program modules can be stored on the hard disk drive , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user can enter commands and information into the computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). Further still, these devices may be coupled directly to the system bus  via an appropriate interface (not shown). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  can be a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device.","It will be appreciated that the network connections shown are illustrative and other techniques for establishing a communications link between the computers can be used. The existence of any of various well-known protocols such as TCP\/IP, Ethernet, FTP, HTTP, Bluetooth, IEEE 802.11x and the like is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 2 through 9","b":["201","201","201","201","201"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 2"],"b":["200","201","202","204","202","201","202","202"]},"For example, a user or developer may decide to change the name of an artifact from \u201cfoo\u201d to \u201cbar.\u201d Prior to the current invention, a user or developer would need to know whether the artifact of interest is a method, namespace, or class as each of these artifacts have different naming rules depending upon the programming language that was used to create the artifact. By capturing the common functionality in ClrElement , a user or developer may not need to know whether the artifact of interest is a method, a namespace, or a class. ClrElement  upon receiving a request from a user or developer may determine the proper controller object to communicate with in order to determine if the name change can be validated for the particular programming language used to create the artifact.","LogicalElement  is a base abstract class that provides a level of abstraction between ClrNamespace  () and ClrType  (). ClrNamespace  is a meta-class that maintains the logical groupings of ClrType objects that reside inside a project in the type system.","LogicalElement  provides a user or developer a base class in which searching for artifacts is simplified in the type system. In addition, both ClrNamespace  and ClrType  may comprise nested classes. A nested class is a class that is fully enclosed within another class. In Microsoft\u00ae .NET, nested classes have public access to its parent or nesting classes. Similar to ClrType , ClrNamespace  may also contain classes. LogicalElement  may provide a user or developer with a mechanism to search the type system for classes or nested classes.","The higher level of abstraction provided by LogicalElement  may allow users or developers to search for nested class without knowing whether they are searching in a namespace or class. An application programming interface does not have to be specifically structured to identify a namespace, a type, or other nested namespaces or types, as LogicalElement  has captured this information. The user or developer can utilize a simplified and unified application programming interface for all searching as the application programming interface communicates with LogicalElement .","ClassModelRoot  is a container for all the types in the type system for a particular project. ClassModelRoot  is a higher level abstraction of AssemblyClassModelRoot  and ProjectClassModelRoot . ProjectClassModelRoot  allows a user or developer to reference other various projects. Each of the different projects may have associated types included with the project. ProjectClassModelRoot  captures the types in the project that are referenced by the class model root. AssemblyClassModelRoot  contains all types in compiled assemblies that a project may be referencing. ClassModelRoot  may contain one and only one RootNamespace . RootNamespace  may contain a collection of ClrNamespaces. ClassModelRoot  may also provide searching functionality.","Method ClassModelRoot.GetLogicalElementByFullyQualifiedName (string FullName) may allow a user to search a ClrNamespace or ClrType via the passed FullName. For example, in C# code may be written similar to public namespace foo {public class bar { }}. If a user has a ClassModelRoot object, then one can invoke method ClassModelRoot.GetLogicalElementByFullyQualifiedName( \u201cfoo.bar\u201d). The invoked method may return to the user or developer a ClrType object which represents class bar.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIG. 2","FIG. 3","FIG. 3"],"b":["300","208","208","208","205","209","210","209","210"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIG. 4"],"b":["400","304","402","403","404","405","406","407","408","409","202"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5","b":["500","502","502","504","505","506","507","502","504","505","506","507","502","504","505","506","507","502"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6","b":["600","201","602","604","605","606","607","201"]},"Language class  may contain language specific delimiter, tokens, or keywords. For example, Visual Basic\u00ae uses \u201c( )\u201d as an array specifier, whereas C# and C++ use \u201c[ ]\u201d. \u201cAddHandler\u201d is a keyword in Visual Basic\u00ae but not for C++. This information may allow a user or developer to perform validation based on the language associated to a ClrElement. In addition, a user or developer may generate code (artifact) correctly.","Language class  may also control various aspects of ClrElement, as Language class  is a controller class. For example, Language class  may have a virtual method CanCreateDestructor(ClrType clrType). In this method, a true value may be returned when clrType is a regular class. In C++ language, a user or developer may also create destructor for struct. Therefore, in LanguageCpp class , one may override CanCreateDestructor(ClrType clrType) and return a true value when clrType is a class or a struct. The CanCreateDestructor(ClrType clrType) method may be used by the user of the Type System.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7","b":["700","702","702","704","706","708","702"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIGS. 8 and 9","FIG. 8","FIG. 9"],"b":["800","900","802","503","201"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 10","b":"1002"},"The request may be received from an application programming interface. In step , an instruction is issued to a specific language controller object to validate the request based on rules associated with a particular programming language. The programming language may include Visual Basic, C++, C#, and J#. The controller object validates the request in step  and the artifact is modified in step . After the artifact has been modified, the application programming interface may receive a response indicating that the artifact has been modified. Similar to the steps of , an artifact may be created in accordance with an aspect of the present invention.","The present invention has been described in terms of preferred and exemplary embodiments thereof. Numerous other embodiments, modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Aspects of the present invention are described with respect to the accompanying figures, in which like reference numerals identify like elements, and in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
