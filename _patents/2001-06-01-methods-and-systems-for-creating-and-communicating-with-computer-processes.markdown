---
title: Methods and systems for creating and communicating with computer processes
abstract: Disclosed are mechanisms for creating and communicating with computer processes. An application programming interface (API) presents services of the system to applications. The API is usable with all processes, local and remote, and is transparent with respect to the location of processes. A process table stores information about processes created using the system. The process table supports centralized process control and peer-to-peer process communication and synchronization. Each process is assigned a Universally Unique Identifier (UUID) that uniquely identifies the process no matter the computing device on which it runs. A parent UUID and a group UUID may be attached to the process and used for enforcing dependencies (e.g., for halting the process and all of its child processes) and for managing arbitrary, user-defined groups, respectively. A global event is associated with each process. When a process receives this event, it performs a controlled shutdown, cleans up, and reports status.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07089561&OS=07089561&RS=07089561
owner: Microsoft Corporation
number: 07089561
owner_city: Redmond
owner_country: US
publication_date: 20010601
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Creating and Communicating with Local and Remote Processes","An Exemplary Application Programming Interface"],"p":["The present invention relates generally to computer operating systems, and, more particularly, to communications mechanisms for computer processes.","Often, a process running on one computing device may need to create or communicate with a process on another device. The use of remote devices may simply be a convenience as, for example, when a program requires so many resources that it cannot effectively be run on one device. The work of the program may then be shared among several devices by invoking processes on the remote devices to perform pieces of the overall task. The results produced by the remote processes are collected in a central, coordinating process. In other cases, the use of remote devices is inherent in the nature of the work at hand. For example, communications protocols cannot be fully tested on one device. A script for testing a protocol may be run on a test host device. To perform the test, the script may start an application on a second device, start a peer application on a third device, and start an application on a fourth device to monitor the communications between the applications on the second and third devices.","Methods exist for a process running on a host computing device to create a process on a remote device. However, these methods provide much less functionality for communicating with the remote process than is available for processes running locally. Often, these methods only allow the host device to start the remote process, receive output from it, and terminate it. The termination is uncontrolled, not giving the remote process a chance to clean up before exiting. Another drawback of these methods is the distinction they draw between local and remote processes. This makes it very difficult to debug a program on one device and know that it will work correctly when it is running on multiple devices.","Even for purely local processes, current methods of communication are in some ways inadequate. Local processes may be limited in their ability to log ongoing status information. Termination of local processes may be as uncontrolled as for remote processes.","What is needed is a method that enhances the communications abilities of all processes and that provides the full functionality of local processes to processes on remote computing devices. The method would ideally hide the distinction between local and remote processes, allowing all processes to be treated in the same manner.","The above problems and shortcomings, and others, are addressed by the present invention, which can be understood by referring to the specification, drawings, and claims. The present invention provides mechanisms for creating and communicating with computer processes. An application programming interface (API) presents the services of the invention to applications. The API is usable with all processes, local and remote, and is transparent with respect to the location of processes. The invention also works with processes that do not use the API, although some enhanced services are available only to processes using the API.","A process table stores information about processes created using the invention. The process table is accessible by all processes, local and remote, and supports centralized process control and peer-to-peer process communication and synchronization. Locks are used to synchronize access to the process table.","Each process is assigned a Universally Unique Identifier (UUID) that uniquely identifies the process no matter the computing device on which it runs. A parent UUID and a group UUID may be attached to the process and used for enforcing dependencies (e.g., for waiting for or halting the process and all of its child processes) and for managing arbitrary, user-defined groups, respectively.","A global event is associated with each process. When a process receives this event, it performs a controlled shutdown, cleans up, and reports its status. Users define other global events and assign meanings to them. Global events form a generally useful message-passing mechanism.","At frequent intervals, processes and process threads log heartbeat entries in the process table. If a process or thread stops updating this field, then other processes can assume that this process or thread broke into the debugger. A process may log other information such as the number of its threads and the current status of the threads.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. The following description is based on embodiments of the invention and should not be taken as limiting the invention with regard to alternative embodiments that are not explicitly described herein.","In the description that follows, the invention is described with reference to acts and symbolic representations of operations that are performed by one or more computers, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains them at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data are maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operations described hereinafter may also be implemented in hardware.","The present invention provides services for creating and communicating with computer processes, whether the processes are all running locally on one computing device or are scattered among several remote devices. Information about processes is gathered into data structures called \u201cprocess tables.\u201d The process tables are accessible by all processes, local and remote, and support centralized process control and peer-to-peer process communication and synchronization.","This section provides an overview of the mechanisms and capabilities of the invention and includes implementation details only when they are useful to illustrate the discussion. The following section expands on this overview by presenting, in great detail, an exemplary embodiment of the invention.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","102","104","106","100","1","2","2","3","3","4","1","100","2","2","3","3","4","5","6","4","5","106","4","100","5","102","6","4","5","104"]},"Each computing device runs a service called \u201cspsrv\u201d that coordinates communications among the devices. The spsrv service listens for requests coming in to a device and processes them. These requests include requests to create a process, requests to provide updated status information, and requests to send information to a process. The spsrv service also sends out status updates and responses to enquiries. This service generally makes communications details transparent so that an application can deal with processes regardless of the device on which they are running. Details specific to remote communications are discussed in the section below entitled \u201cSpecific Considerations When Communicating with Remote Processes.\u201d","Each computing device contains a process table that has an entry for each process running on, or invoked by a process running on, the computing device. The process table  of computing device  contains six entries. The first four entries are for Processes  through  which run on the device. In addition, the process table contains entries for Process  and  which do not run locally but were invoked by Process  which does run locally. Process table  on computing device  contains an entry for Process  because that process runs locally, even though the process was invoked on another device. Similarly, process table  on computing device  contains entries for Process , running locally though invoked remotely, and Process , running locally. Process  illustrates processes running on a computing device that have nothing to do with the job run by the user of computing device . Process tables are described in greater detail with reference to . For the moment, note that process tables are populated when a process is created and contain information useful for controlling and monitoring the processes.","The computing devices , , and  of  may be of any architecture.  is a block diagram generally illustrating an exemplary computer system that supports the present invention. The computing device  is only one example of a suitable environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing device  be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in . The invention is operational with numerous other general-purpose or special-purpose computing environments or configurations. Examples of well-known computing systems, environments, and configurations suitable for use with the invention include, but are not limited to, personal computers, servers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set-top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and distributed computing environments that include any of the above systems or devices. In its most basic configuration, computing device  typically includes at least one processing unit  and memory . The memory  may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.), or some combination of the two. This most basic configuration is illustrated in  by the dashed line . The computing device may have additional features and functionality. For example, computing device  may include additional storage (removable and non-removable) including, but not limited to, magnetic and optical disks and tape. Such additional storage is illustrated in  by removable storage  and non-removable storage . Computer-storage media include volatile and non-volatile, removable and non-removable, media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Memory , removable storage , and non-removable storage  are all examples of computer-storage media. Computer-storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory, other memory technology, CD-ROM, digital versatile disks (DVD), other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage, other magnetic storage devices, and any other media which can be used to store the desired information and which can accessed by device . Any such computer storage media may be part of device . Device  may also contain communications connections  that allow the device to communicate with other devices. Communications connections  are examples of communications media. Communications media typically embody computer-readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communications media include wired media, such as wired networks (including the LAN  of ) and direct-wired connections, and wireless media such as acoustic, RF, infrared, and other wireless media. The term computer-readable media as used herein includes both storage media and communications media. The computing device  may also have input devices  such as a keyboard, mouse, pen, voice-input device, touch-input device, etc. Output devices  such as a display, speakers, printer, etc., may also be included. All these devices are well know in the art and need not be discussed at length here.","The services of the present invention are presented to applications by means of an Application Programming Interface (API). The API can be used with all processes, local and remote, and is transparent with respect to the location of a process. The API returns sensible values if a request fails because of a network problem and does not falter if remote devices are unavailable. If a process uses the API, then the process is called a \u201cWINDOWS Test Technologies (WTT)-based process.\u201d The name \u201cWTT\u201d is of only historical interest, and the invention is not limited to use in the testing field or to use with Microsoft's \u201cWINDOWS\u201d operating systems. The invention works with any combination of WTT-based and non-WTT-based processes, although some enhanced services are available only to WTT-based processes. For purposes of this discussion, the services provided by the API are roughly divided into four major categories of communications tasks: creating processes, monitoring processes, waiting for processes, and sending signals to processes, especially termination signals.","Using the API, applications can create new processes and run them either on the local computing device or on a remote device. Each process is tagged by a Universally Unique Identifier (UUID) that uniquely identifies the process no matter the computing device on which it resides. In addition, a parent UUID and a group UUID may be assigned to the process and used for enforcing dependencies (e.g., for signaling the process and all of its child processes) and for managing arbitrary, user-defined groups, respectively. The process table stores information about processes created on the computing device, whether the process runs locally on the device or runs remotely. The process table is created as a memory-mapped file and is visible to all processes on the device. A global event is associated with each process created via the API and is used for process control and signaling.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIGS. 3A and 3B","FIG. 3A","FIG. 1","FIG. 1","FIG. 3B"],"b":["300","302","304","306","308","3","4","310","314","3","6","6","100","104","318","320","322","6","108","100","112","104"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 4","FIG. 1","FIG. 4"],"b":["3","6","112"]},"Because a process table is accessible to all processes on the computing device, mechanisms exist for coordinating access to the table. One mechanism involves software locks, both for the entire table and for each individual row. For example, a process updating its heartbeat time can lock access to its row while it writes the current time into the Heartbeat Time field. When a process is created or deleted, the entire process table is locked so that a row can be added or deleted without interference.","At frequent intervals, for each process, a monitor thread logs heartbeat entries in the Heartbeat Time field in the local process table. Each thread in a process updates a local heartbeat and the monitor thread keeps track of these local heartbeats, updating the heartbeat field in the local process table if all the threads are updating their local heartbeats. If any thread deadlocks and stops updating its local heartbeat, the monitor thread detects this, logs the fact, and either breaks into the debugger or marks the process as requiring assistance. When an application wants to monitor the heartbeat of a process, the application begins by looking up the entry for the process in the process table on the computing device on which the application is running. The application reads the Target Device field to see where the process is running. Then, if the target device is the local device, the application reads the Heartbeat Time field in the local process table. Otherwise, the target device is distinct from the local device and the application sends a request to the spsrv service running on the target device asking it to send the value of the Heartbeat Time of the process. For example, if Process  in  wants to know whether Process  is still running normally, that is to say, is still logging heartbeats, Process  would consult Process Table  on its local computing device . Reading the entry for Process , Process  discovers that Process  is running remotely, on computing device . (See .) Process  formulates a request and sends it to the computing device . That device reads its process table  and reports to Process  that the Heartbeat Time field of Process  currently reads \u201c14:24:56\u201d. Process  compares that heartbeat time (adjusted, if necessary, for time zone differences) to its local clock and decides whether Process  is running or has broken into the debugger.","In addition to its heartbeat, a process may log other information including the number of its threads, the current status of the threads, console output, log file output, etc. An application wishing to monitor this output can use the same techniques described above with respect to heartbeats. The application can also obtain ongoing status information by requesting that a copy of new information written by the process be sent to the application as it is written. Using parent and group UUIDs, an application can monitor all of the processes in a dependency list or in a user-defined process group.","A process may wait for other processes to achieve a specified status, for example, to complete their initialization or to terminate. The API provides a function that waits until the processes achieve the status or until a timeout period elapses. The function checks the heartbeat of all WTT-based processes and, if a process is not logging heartbeats, then the process may be assumed to have broken into the debugger. Using the processes in  as an example, assume that Process  calls the API function to wait for Processes , , and  to complete their initialization. Because Processes  and  run on remote computing devices, the API function sends a wait request to those remote devices. Each device waits on the processes local to it and then reports the results to Process . For each process in the wait list, the returned status may be Completed Initialization, Still Initializing, or Heartbeat Stopped. Using UUIDs in the same manner as in process monitoring, a process can wait for all of the processes in a dependency list or in a user-defined process group. Note that because non-WTT-based processes do not update their Heartbeat Time field, it cannot be assumed that these processes broke into the debugger.","When a job is divided into discrete processes, the processes often need to communicate among themselves to coordinate the tasks they perform. The API provides a generally useful signaling mechanism for this purpose in the form of Global Events. As an example, one particular event is the Controlled Shutdown. When a WTT-based process receives this event, it releases the resources it is using, reports its status, and performs a controlled shutdown. Users may define other Global Events and assign meanings to them. When a process receives an event, it responds in a fashion appropriate to the event's meaning. However, if a process receives an event it does not understand, it may terminate in an uncontrolled fashion. A process may use parent and group UUIDs to send an event to groups of processes.","The services provided by the invention as described in the previous section are presented again in this section but with more attention paid to the details of an exemplary API. In its specific details, this embodiment is oriented towards use with Microsoft's \u201cWINDOWS\u201d operating system, but the principles are applicable to other environments. This section begins by describing the fundamental data structures used in this embodiment.","Note that UUIDs are sometimes called GUIDs (Globally Unique Identifiers).","The variable types TCHAR and Tstring are used in the definitions below to provide source code compatibility between Unicode and non-Unicode machines. If the parameter _UNICODE is defined during the build, then TCHAR is defined to be the Unicode's basic wide character type, \u201cwchar_t,\u201d otherwise it becomes the standard ASCII 8-bit signed \u201cchar.\u201d Similarly, Tstring is a string of TCHARs and becomes either the Unicode wide string, \u201cwstring,\u201d or ASCII \u201cstring.\u201d","1 WTTPROCESSPARAM","Describes the input parameters to the WTTCreateProcess call.",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/\/ From the winbase.h file."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define MAX_COMPUTERNAME_LENGTH","31"]},{"entry":"\/\/ Type of processes: WTT-based or not."},{"entry":["#define WTT_PROC_TYPE_NONWTT_BASED","1"]},{"entry":["#define WTT_PROC_TYPE_WTT_BASED","2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ System processes and other non-WTT-based processes launched outside"},{"entry":"the"},{"entry":"\/\/ scope of the API."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["#define WTT_PROC_TYPE_SYSTEM_BASED","3"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef struct _WTTPROCESSPARAM"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Sizeof this structure (including this field). User needs to input a"]},{"entry":[{},"value of"]},{"entry":[{},"\/\/ sizeof(WTTPROCESSPARAM) for this."]},{"entry":[{},"IN DWORD\u2003dwStructSizeOf;"]},{"entry":[{},"\/\/ Flags. Reserved: must be zero (MBZ)."]},{"entry":[{},"IN DWORD\u2003dwFlags;"]},{"entry":[{},"\/\/ Flags used in WTTCreateProcess. Only"]},{"entry":[{},"CREATE_NEW_CONSOLE,"]},{"entry":[{},"\/\/ CREATE_NEW_PROCESS, and DETACHED_PROCESS are"]},{"entry":[{},"currently"]},{"entry":[{},"\/\/ supported."]},{"entry":[{},"IN DWORD\u2003dwCreateProcessFlags;"]},{"entry":[{},"\/\/ Is this a WTT-based process?"]},{"entry":[{},"IN DWORD\u2003dwProcessType;"]},{"entry":[{},"\/\/ The username and password to use when running the process."]},{"entry":[{},"The password"]},{"entry":[{},"\/\/ is unencoded text but is encrypted before sending to the target"]},{"entry":[{},"device."]},{"entry":[{},"IN TCHAR\u2003*szUserName;"]},{"entry":[{},"IN TCHAR\u2003*szPassword;"]},{"entry":[{},"\/\/ The command line to execute when starting the process."]},{"entry":[{},"IN TCHAR\u2003*szCommandLine;"]},{"entry":[{},"\/\/ NULL or a debugger string such as \u201cntsd -g\u201d."]},{"entry":[{},"IN TCHAR\u2003*szDebugger;"]},{"entry":[{},"\/\/ NULL or the UNC-style (e.g., \\\\machine\\share\\path . . .)"]},{"entry":[{},"name of a generated"]},{"entry":[{},"\/\/ log file."]},{"entry":[{},"IN TCHAR\u2003*szLogFile;"]},{"entry":[{},"\/\/ The directory where the process is created. Can be NULL, which"]},{"entry":[{},"means use"]},{"entry":[{},"\/\/ the current directory for launching the process."]},{"entry":[{},"IN TCHAR\u2003*szCurrentDirectory;"]},{"entry":[{},"\/\/ If the process was invoked remotely, then get the GUID from the"]},{"entry":[{},"caller."]},{"entry":[{},"\/\/ From an external caller's perspective, this is not provided as an"]},{"entry":[{},"input."]},{"entry":[{},"UUID\u2003\u2003\u2003Guid;"]},{"entry":[{},"\/\/ This optionally identifies a group with which the process is"]},{"entry":[{},"associated."]},{"entry":[{},"UUID\u2003\u2003\u2003GroupGuid;"]},{"entry":[{},"\/\/ The GUID of the parent of this process. There may be a chain of"]},{"entry":[{},"parent-"]},{"entry":[{},"\/\/ child processes."]},{"entry":[{},"UUID\u2003\u2003\u2003ParentGuid;"]},{"entry":[{},"\/\/ The identity of the target computing device, for example, its"]},{"entry":[{},"name or IP"]},{"entry":[{},"\/\/ address."]},{"entry":[{},"IN TCHAR\u2003szTargetMachine["]},{"entry":[{},"MAX_COMPUTERNAME_LENGTH + 1];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} WTTPROCESSPARAM, *PWTTPROCESSPARAM;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"By associating a group GUID with a set of processes, processes can communicate with all the processes in the set. This is similar to a \u201cprocess group\u201d in Windows NT or Unix.","2 WTTPROCLISTINFO","Defines information relating to a process. WTTGetProcessListInfo returns this information. A pointer to this structure is passed as an input parameter to WTTOpenProcess. An application receives a handle to a process by calling WTTOpenProcess and can use that handle to monitor the process, even if the process was not created by the application.",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef struct_WTTPROCLISTINFO"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ The GUID, Process ID, and type of the process. The process type"]},{"entry":[{},"can be:"]},{"entry":[{},"\/\/ WTT_PROC_TYPE_NON_WTT_BASED\u2003(defined to be 1);"]},{"entry":[{},"\/\/ WTT_PROC_TYPE_WTT_BASED\u2003\u2003\u2003\u2003(2); or"]},{"entry":[{},"\/\/ WTT_PROC_TYPE_SYSTEM_BASED\u2003\u2003(4)."]},{"entry":[{},"UUID\u2003\u2003\u2003\u2003\u2003\u2003\u2003Guid;"]},{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2003\u2003dwPid;"]},{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2003\u2003dwProcType;"]},{"entry":[{},"\/\/ These variables are meaningful only if the process is WTT-based"]},{"entry":[{},"and is"]},{"entry":[{},"\/\/ logging heartbeats. For non-WTT-based processes, dwHBTime is"]},{"entry":[{},"zero and"]},{"entry":[{},"\/\/ ulLastHBUpdateTime is the time the process was created."]},{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2003\u2003dwHBTime;"]},{"entry":[{},"ULARGE_INTEGER ulLastHBUpdateTime;"]},{"entry":[{},"\/\/ The number of seconds since the process was created (reported as"]},{"entry":[{},"zero for"]},{"entry":[{},"\/\/ non-WTT-based processes)."]},{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2003\u2003dwElapsedSeconds;"]},{"entry":[{},"\/\/ This is the status of the process. Its possible values are given"]},{"entry":[{},"below in the"]},{"entry":[{},"\/\/ section describing WTTGetProcessInfo. For non-WTT-based"]},{"entry":[{},"processes, the"]},{"entry":[{},"\/\/ reported status is WTTHANDLE_PROCSTATUS_UNDEFINED."]},{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2003\u2003dwProcStatus;"]},{"entry":[{},"\/\/ The module name (not fully qualified with path)."]},{"entry":[{},"TCHAR\u2003\u2003\u2003\u2003\u2003\u2003szModuleName[256];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} WTTPROCLISTINFO, *PWTTPROCLISTINFO;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Holds information about a thread including the Thread Identifier and a list of comments. Comments may be pushed onto the stack, and the most recent comment may be popped off the stack and examined.",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef struct_WTTTHREADINFO"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2002dwThreadId;"]},{"entry":[{},"\/\/ The Standard Template Library (STL) contains type-parameterized"]},{"entry":[{},"classes."]},{"entry":[{},"\/\/ slThreadCommentStack is an STL stack of STL strings."]},{"entry":[{},"stack <string>\u2003slThreadCommentStack;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} WTTTHREADINFO,\u2003*PWTTTHREADINFO;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Holds detailed process information.",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef class_WTTPROCESSINFO"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ All members are public (can use a ctor and a dtor)."]},{"entry":[{},"public:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DWORD","dwProcType;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Status of the process (initialized, debug break, terminated,"]},{"entry":[{},"etc.). This is"]},{"entry":[{},"\/\/ the same as in the WTTPROCLISTINFO structure. That one is"]},{"entry":[{},"there for"]},{"entry":[{},"\/\/ convenience only."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD","dwProcStatus;"]},{"entry":[{},"UUID","Guid;"]},{"entry":[{},"DWORD","dwProcPid;"]},{"entry":[{},"DWORD","dwProcExitCode;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Time elapsed since the creation of the process."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ULARGE_INTEGER","ulElapsedTime;"]},{"entry":[{},"TCHAR","*pszModuleName;"]},{"entry":[{},"TCHAR","*pszCommandLine;"]},{"entry":[{},"TCHAR","*pszTargetMachine;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Singly-linked list of thread information (used to store"]},{"entry":[{},"elements of type"]},{"entry":[{},"\/\/ WTTTHREADINFO)."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"list <PWTTTHREADINFO>","slThreadList;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ List of log files associated with the process."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"list <string>","slLogList;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ List of variations covered."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"list <string>","slVarnList;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_WTTPROCESSINFO( )"]},{"entry":[{},"{"]},{"entry":[{},"\u2003pszModuleName = new TCHAR[MAX_PATH];"]},{"entry":[{},"\u2003pszCommandLine = new TCHAR[MAX_CMD_LINE];"]},{"entry":[{},"\u2003pszTargetMachine = new"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"TCHAR[MAX_COMPUTERNAME_LENGTH + 1];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} WTTPROCESSINFO, *PWTTPROCESSINFO;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct_WTTP_LOG_INFO"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"TCHAR\u2003szLogFileName[128];\u2003\u2002\/\/ UNC path of log file."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} WTTP_LOG_INFO, *PWTTP_LOG_INFO"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"This structure is opaque to the user and is used as a handle for future operations. This process-specific handle may be replaced by WTTHANDLE.","7 WTTHANDLE","This data structure is opaque to the user and is used as a handle for future operations. This handle is capable of handling objects no matter their type\u2014whether processes, events, mutexes, etc. For \u201cWINDOWS\u201d implementations, this handle is similar to the handles used by Win32 processes.",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef struct_WTT_HANDLE"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ The exit status of the process as would be returned by a local call"]},{"entry":[{},"to the"]},{"entry":[{},"\/\/ Win32 function GetExitCodeProcess( )."]},{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2003\u2003\u2003dwStatus;"]},{"entry":[{},"\/\/ The Process Identifier of a created child."]},{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2003\u2003\u2003dwProcID;"]},{"entry":[{},"\/\/ Was the process successfully created? If not, then this is set to"]},{"entry":[{},"\/\/ ERROR_SERVICE_NOT_ACTIVE."]},{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2003\u2003\u2003dwProcCreationStatus;"]},{"entry":[{},"\/\/ This points to information such as the heartbeat timer, etc. This"]},{"entry":[{},"field is"]},{"entry":[{},"\/\/ opaque and only makes sense on the device on which the process"]},{"entry":[{},"is created."]},{"entry":[{},"PWTT_SHAREDINFO\u2003pSharedlnfo;"]},{"entry":[{},"\/\/ The current status of the process."]},{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2003\u2003\u2003dwProcStatus;"]},{"entry":[{},"\/\/ Store the following data in the process handle. While"]},{"entry":[{},"marshaling the"]},{"entry":[{},"\/\/ parameters, the offsets are clearly defined and the strings are put"]},{"entry":[{},"towards the"]},{"entry":[{},"\/\/ end of the buffer."]},{"entry":[{},"\/\/ If the call comes from a remote device, then get the GUID from"]},{"entry":[{},"the caller."]},{"entry":[{},"UUID\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Guid;"]},{"entry":[{},"TCHAR\u2003\u2003\u2003\u2003\u2003\u2003\u2003*szCommandLine;"]},{"entry":[{},"\/\/ The following two parameters are supplied in case the process"]},{"entry":[{},"needs to be"]},{"entry":[{},"\/\/ launched by a specified user."]},{"entry":[{},"TCHAR\u2003\u2003\u2003\u2003\u2003\u2003\u2003*szUserName;"]},{"entry":[{},"TCHAR\u2003\u2003\u2003\u2003\u2003\u2003\u2003*szPasswd;"]},{"entry":[{},"\/\/ Both for storage in the local process table and for redirection."]},{"entry":[{},"TCHAR\u2003\u2003\u2003\u2003\u2003\u2003\u2003*szTargetMachineName;"]},{"entry":[{},"TCHAR\u2003\u2003\u2003\u2003\u2003\u2003\u2003*szModule;"]},{"entry":[{},"\/\/ The object type can be WTT_PROC_OBJECT,"]},{"entry":[{},"WTT_EVENT_OBJECT,"]},{"entry":[{},"\/\/ etc."]},{"entry":[{},"DWORD\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003dwObjectType;"]},{"entry":[{},"PHANDLE\u2003\u2003\u2003\u2003\u2003\u2003\u2003hObjectHandle;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} WTT_HANDLE, *WTTHANDLE;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Having presented the data structures used in this implementation, the following describes the function calls provided by the API.","8 WTTCreateProcess","Create a process, whether WTT-based or not. The user's input parameters are passed in as part of the WTTPROCESSPARAM structure. The returned structure pointer (pHWTTProcess) is opaque and is used in future calls. If UserName and Password are specified as part of the input structure, then the process is created with the logon credentials of the specified user.","The call is basically asynchronous in nature and returns as soon as possible after the process is successfully created or with a meaningful error value explaining why the process creation failed.",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTCreateProcess"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN OUT PWTTPROCESSPARAM","pWTTProcessParam,"]},{"entry":[{},"OUT WTTHANDLE","*pHWTTProcess"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":["Parameters:\n    \n    ","Return Values:\n    \n    ","Implementation Notes:\n    \n    "]}},"Send a signal to the processes in a set. The set may include both WTT-based and non-WTT-based processes. The global event handle is set for each process. One currently defined signal is \u201cterminate the process.\u201d On receipt of that signal, a process cleans up after itself and performs a controlled stop. Sending a terminate signal is similar to sending a \u201ckill\u201d signal.",{"@attributes":{"id":"p-0055","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTSignalProcesses"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN DWORD","nCount,"]},{"entry":[{},"IN WTTHANDLE","*phWTTProcess,"]},{"entry":[{},"IN DWORD","dwFlags"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":["Parameters:\n    \n    ","Return Values:\n    \n    ","Implementation Notes:\n    \n    "]}},"Wait for processes in a set to achieve a specified status, but stop waiting if a timeout period expires. The function checks the heartbeats of all WTT-based processes, and if a process is not logging heartbeats, then it is assumed to have broken into the debugger. This function is often used to wait for processes to terminate. In that case, the different possible scenarios on returning from this function are as follows:\n\n","A debug break cannot be declared for a non-WTT-based process because this type of process does not log heartbeats.",{"@attributes":{"id":"p-0058","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTWaitForMultipleObjects"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN DWORD","nCount,"]},{"entry":[{},"IN WTTHANDLE","*phWTTProcess,"]},{"entry":[{},"IN BOOL","fWaitAll,"]},{"entry":[{},"IN DWORD","dwTimeoutInSeconds,"]},{"entry":[{},"IN DWORD","dwDebugTimeoutlnSeconds,"]},{"entry":[{},"IN DWORD","dwWaitType,"]},{"entry":[{},"OUT DWORD","*pdwSummaryStatus,"]},{"entry":[{},"OUT DWORD","*pdwSummaryIndex"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":["Parameters:\n    \n    ","Return Values:\n    \n    ","Implementation Notes:\n    \n    "]}},"Query the status of a process that was launched by the WTTCreateProcess function. After reviewing the information returned, WTTFreeProcessInfo is called to release the memory allocated by this function.",{"@attributes":{"id":"p-0060","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTGetProcessInfo"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN WTTHANDLE\u2003\u2003phWTTProcess,"]},{"entry":[{},"OUT PWTTPROCESSINFO *ppWTTProcessinfo"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0034","list-style":"none"},"li":["Parameters:\n    \n    ","Return Values:\n    \n    ","Implementation Notes:\n    \n    ","The macro GET_PROC_STATUS(pWTTProcessinfo->dwProcStatus) returns a string corresponding to the process status.\n\n12 WTTFreeProcessInfo\n    \n    ","Parameter:\n    \n    ","Return Values:\n    \n    "]}},"Get the process list from the target machine's process table. The information returned varies depending upon the values specified in dwFlags. Memory allocation is done within the function call itself WTTFreeProcessListInfo is called to release the memory after reviewing the information returned.",{"@attributes":{"id":"p-0062","num":"0158"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTGetProcessListInfo"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN LPCTSTR","pszMachine,"]},{"entry":[{},"BOOL","bResolveRemote,"]},{"entry":[{},"IN DWORD","dwFlags,"]},{"entry":[{},"OUT DWORD","*pdwCount,"]},{"entry":[{},"OUT PWTTPROCLISTINFO","*ppWTTProcessListInfo"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0046","list-style":"none"},"li":["Parameters:\n    \n    ","Return Values:\n    \n    ","Implementation Notes:\n    \n    "]}},"Release the memory allocated during a WTTGetProcessListInfo function call.",{"@attributes":{"id":"p-0064","num":"0182"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTFreeProcessListInfo"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN PWTTPROCLISTINFO\u2003*ppWTTProcessListInfo"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0058","list-style":"none"},"li":["Parameter:\n    \n    ","Return Values:\n    \n    "]}},"Retrieve a copy of output as it is added to a log file. The effect is that of a distributed \u201ctail -f\u201d command. A callback allows this function to return asynchronously.",{"@attributes":{"id":"p-0066","num":"0189"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTTailLog"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WTTHANDLE","pWTTProcInfo,"]},{"entry":[{},"WTTP_LOG_INFO","*pWTTLogInfo,"]},{"entry":[{},"DWORD","dwBytes,"]},{"entry":[{},"WTTPROC_CALLBACK","CALLBACKFUNCTION"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0062","list-style":"none"},"li":["Parameters:\n    \n    ","Return Values:\n    \n    "]}},{"@attributes":{"id":"p-0067","num":"0202"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTCancelTailLog"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WTTHANDLE","pWTTProcInfo,"]},{"entry":[{},"WTTP_LOG_INFO","*pWTTLogInfo"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0069","list-style":"none"},"li":["Parameters:\n    \n    ","Return Values:\n    \n    "]}},"Get a WTT process handle.",{"@attributes":{"id":"p-0069","num":"0211"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTOpenProcess"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN WTTPROCLISTINFO","*pWTTProcessInfo,"]},{"entry":[{},"OUT WTTHANDLE","*pWTTProcInfo"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0074","list-style":"none"},"li":["Parameters:\n    \n    ","Return Values:\n    \n    ","Implementation Notes:\n    \n    ","Parameter:\n    \n    ","Return Values:\n    \n    "]}},{"@attributes":{"id":"p-0070","num":"0229"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTConsoleOutput"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WTTHANDLE","pWTTProcInfo,"]},{"entry":[{},"WTTPROC_CALLBACK","CALLBACKFUNCTION"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0083","list-style":"none"},"li":["Parameters:\n    \n    ","Return Values:\n    \n    "]}},"Cancel the console output associated with a particular process.\n\n","Add a log file to the list of log files to which a process logs.",{"@attributes":{"id":"p-0073","num":"0245"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD WTTSetLogFile"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WTTHANDLE","pProcessInfo,"]},{"entry":[{},"LPCWSTR","pszLogFile"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0093","list-style":"none"},"li":["Parameters:\n    \n    ","Return Values:\n    \n    "]}},"The functions WTTTailLog and WTTConsoleOutput use callback functions to allow them to return asynchronously. The structure of the callback function is as follows:",{"@attributes":{"id":"p-0075","num":"0254"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef DWORD (*WTTPROC_CALLBACK)"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SOCKET\u2003hSocket,"]},{"entry":[{},"LPVOID\u2003\u2009pData,"]},{"entry":[{},"DWORD\u2003\u2002dwBytes"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"UUIDs (also called GUIDs) provide unique designations of objects such as processes, interfaces, manager entry-point vectors, and client objects. In practice, these identifiers need only be unique within the context of their use, that is, within the set of communicating computing devices. Because techniques already exist for making the identifiers truly unique, those techniques are used here.",{"@attributes":{"id":"p-0077","num":"0256"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct_GUID"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"unsigned long","Data1;"]},{"entry":[{},"unsigned short","Data2;"]},{"entry":[{},"unsigned short","Data3;"]},{"entry":[{},"unsigned char","Data4[8];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} GUID;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"ul":{"@attributes":{"id":"ul0098","list-style":"none"},"li":[{"@attributes":{"id":"ul0098-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0099","list-style":"none"},"li":"typedef GUID UUID;"}},"Members:\n    \n    ","Remarks:\n    \n    "]}},{"@attributes":{"id":"p-0078","num":"0270"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UUID\u2003\u2003\u2003\u2003\u2003*Uuid1,"]},{"entry":[{},"UUID\u2003\u2003\u2003\u2003\u2003*Uuid2,"]},{"entry":[{},"RPC_STATUS\u2003*Status"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},"RPC_STATUS RPC_ENTRY UuidCreate(UUID *Uuid);"]},{"entry":[{},"RPC_ENTRY UuidCreateNil(UUID *Nil_Uuid);"]},{"entry":[{},"RPC_STATUS RPC_ENTRY UuidFromString"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"unsigned char *StringUuid,"]},{"entry":[{},"UUID\u2003\u2003\u2003\u2003\u2003*Uuid"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},"RPC_STATUS RPC_ENTRY UuidToString"]},{"entry":[{},"("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UUID\u2003\u2003\u2003\u2003\u2003*Uuid,"]},{"entry":[{},"unsigned char\u2003**StringUuid"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"A suitable infrastructure is provided for tagging and monitoring non-WTT-based processes. Every non-WTT-based process created by the WTTCreateProcess function is given a WTT-created GUID for tagging. The GUID is stored in the WTT-based process handle for future tracking purposes.","A Global Event handle is present for every non-WTT-based process. The naming structure of this handle is \u201cEvent\\<GUID>\u201d and it is present on the device on which the process is created. When a non-WTT-based process is created, it has the option of waiting on this event handle and performing a clean shutdown if requested.","25 Note on Locking","Central to the implementation of this API is the process table. The process table has row-level exclusive locks and a global process table lock that over-rides the row-level locks.","There are at least six points in time when locking comes into play:\n\n","Considering all these, a global lock (mutex) is needed whenever a write affects the entire process table, as in cases (a), (b), and (f) above. A row-level exclusive lock is needed (after acquiring the global process table) when updating process-specific information, as in cases (c), (d), and (e) above.","Specific Considerations when Communicating with Remote Processes","While the invention is useful when all processes run on the same computing device, it is also designed for the case when some processes run remotely. This section discusses specific considerations that come into play when the API supports remote processes.","PWTTPROCESSINFO contains a field called szDestMachine that holds the value of the target device on which the process runs. If the value is NULL, then the call is local. If not, the command and its parameters are sent to the target device, and the results are piped back to the originating device. All calls are synchronous in nature. So, if the target device crashes during the period of passing the command, an appropriate error is returned.","The need to pass by value argues for using Remote Procedure Calls (RPC) as a message-passing paradigm. On the other hand, if all input parameters to a call are based on parameters passed only by value, then interfaces (function tables) for the call can be set up and the spsrv service used to handle the commands on the remote device. Another consideration is that if 32-bit-based machines communicate with IA64 cluster machines, then RPC is very useful as it takes care of architectural differences. RPC interfaces are flexible in terms of marshaling both pointer-based and value-based parameters.","Every time a new API call is made, a new GUID may be generated on the device that initiated the call. This GUID is used to \u201ctrack\u201d the call. The GUID is sent with the call to the target device. The target device keeps track of the GUID. If the target device crashes, then the target device, after re-booting, \u201ccalls back\u201d its parent device with the knowledge of the GUID of the last call and the name or IP address of the parent device.","For every process created on a particular device, a <GUID>.ini file is created in the % windir %\\WTThin\\GUID directory. (For non-\u201cWINDOWS\u201d implementations, a similar directory is used.) This directory stores information about the process, its threads, and its stack comments. The files store information more persistently than can memory and prevent having to use memory for ever-changing, bulky data. A process is free to update the information in its file whenever the thread comments are updated. If a query about the state of a process is made and if the process no longer has an entry in the process table, but a <GUID>.ini file exists, then the status of the process is updated to ERROR_SERVICE_NOT_ACTIVE. Due to the presence of multiple threads possibly operating simultaneously on this file, synchronization is important. A cleanup routine removes .ini files three or more days old. This is the structure of a <GUID>.ini file:",{"@attributes":{"id":"p-0090","num":"0288"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[GLOBAL]"]},{"entry":[{},"GGUID = nnn"]},{"entry":[{},"PID = nnn"]},{"entry":[{},"Status = WTT_PROCESS_RUNNING \u2003\/\/ Or some other status."]},{"entry":[{},"[LogFiles]"]},{"entry":[{},"<Log1.log>"]},{"entry":[{},"<Log2.log>"]},{"entry":[{},"[<ThreadId1>]"]},{"entry":[{},"Comment1"]},{"entry":[{},"Comment2"]},{"entry":[{},". . ."]},{"entry":[{},"[<ThreadId2>]"]},{"entry":[{},"Comment1"]},{"entry":[{},"Comment2"]},{"entry":[{},". . ."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"For marshaling parameters for a function call, the spsrv service has a function table that is used to form the receive and send stubs for the spsrv service running on the remote device. To form the stub for receiving data, the buffer is as generic and as flexible as possible. It identifies the function, determines the number of parameters, and sets a fixed order of parameters depending on the function. The following structure is used. It is marshaled into a byte buffer, sent out the socket, and un-marshaled on the other end. When the call completes, the same procedure gets the returned value of the call.",{"@attributes":{"id":"p-0092","num":"0290"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ This is the index into the function dispatch table on the remote device."},{"entry":"DWORD dwTestAPINum;"},{"entry":"\/\/ This usually corresponds to nCount."},{"entry":"DWORD dwNumHWTTProcesses;"},{"entry":"\/\/ Offset into the non-variable-length buffers."},{"entry":"DWORD dwHWTTProcOffset[MAX_PROCS];"},{"entry":"\/\/ The number of processes present in the"},{"entry":"WTTPROCESSMARSHALPARAM"},{"entry":"\/\/ structure (see below)."},{"entry":"DWORD dwNumMPProcesses;"},{"entry":"\/\/ Offset into the non-variable-length buffers."},{"entry":"DWORD dwNumMPOffset[MAX_PROCS];"},{"entry":"\/\/ The total number of bytes taken up by the buffer."},{"entry":"DWORD dwBytesForBuffer;"},{"entry":"DWORD dwNumWTTPLogInfo;"},{"entry":"\/\/ Offset into the non-variable-length buffers."},{"entry":"DWORD dwNumWTTPLogOffset[MAX_PROCS];"},{"entry":"DWORD dwNumWTTProcListElem;"},{"entry":"\/\/ Offset into the non-variable-length buffers."},{"entry":"DWORD dwNumWTTProcListOffset[MAX_PROCS];"},{"entry":"DWORD dwWaitTimeout;"},{"entry":"DWORD dwFlags;"},{"entry":"DWORD dwWaitAll;"},{"entry":"DWORD dwBytes;"},{"entry":"\/\/ Now for storage for the variable-length data fields."},{"entry":"(dwNumHWTTProcesses * sizeof(_M_HWTTPROCESS))"},{"entry":"(dwNumMPProcesses * sizeof(WTTPROCESSMARSHALPARAM))"},{"entry":"(dwNumWTTPLogInfo * sizeof(WTTP_LOG_INFO))"},{"entry":"(dwNumWTTProcListElem * sizeof(WTTPROCLISTINFO))"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0093","num":"0291"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef struct"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003DWORD dwFlags;","\/\/ Flags; currently a reserved"]},{"entry":[{},"field. Input."]},{"entry":["\u2003\u2003DWORD dwCreateProcessFlags;","\/\/ Flags used in"]},{"entry":[{},"CreateProcess. Input."]},{"entry":["\u2003\u2003DWORD dwProcessType;","\/\/ Is this a WTT-based process?"]},{"entry":[{},"Input."]},{"entry":["\u2003\u2003DWORD dwOffSets[25];","\/\/ Offsets to the variable-length"]},{"entry":[{},"strings."]},{"entry":"\u2003\u2003Void *pBuf;"},{"entry":"\u2003\u2003. . ."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} WTTPROCESSMARSHALPARAM,"},{"entry":"*PWTTPROCESSMARSHALPARAM;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The output buffer for most calls contains the following information: information in HWTTPROCESS, marshaled as _M_HWTTPROCESS; dwSummaryStatus; and dwSummaryIndex. Variable-length data are put at the end of the buffer. For WTTGetProcessListInfo, a list is formed of entries containing information about the processes of interest. The information carried back is as follows: a list of threads present including their thread identifiers; a list of comments on a per-thread basis; and a list of variations completed by the process. The data structures useful for marshaling this data are as follows:",{"@attributes":{"id":"p-0095","num":"0293"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Struct_WTTP_THREAD_INFO"},{"entry":"{"},{"entry":"\u2003DWORD dwThreadId;"},{"entry":"\u2003\/\/ Offset into the comments strings for a thread."},{"entry":"\u2003DWORD dwCommentOffset[MAX_COMMENTS_PER_THREAD];"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0096","num":"0294"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Struct_WTTP_VARIATION_INFO"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\/\/ Offset into the variable-length name strings."]},{"entry":[{},"\u2003DWORD dwVarnNameOffset[MAX_VARNS];"]},{"entry":[{},"}"]},{"entry":[{},"Struct_WTTP_LOG_INFO"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\/\/ Offset into the log strings."]},{"entry":[{},"\u2003DWORD dwLogOffset[MAX_LOGS_PER_PROC];"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0097","num":"0295"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/\/ The size of this entire buffer in bytes."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DWORD","dwBuffSize;"]},{"entry":["DWORD","_dwThreadCount;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ All fixed-length data for threads (i.e., the thread identifier and the"},{"entry":"offsets for the"},{"entry":"\/\/ comments) go here while the actual comments are in the"},{"entry":"variable-length section."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Struct_WTTP_THREAD_INFO","*pThreadInfo;"]},{"entry":["DWORD","_dwVariationCount;"]},{"entry":["Struct_WTTP_VARIATION_INFO","*pVarnInfo;"]},{"entry":["DWORD","_dwLogCount;"]},{"entry":["Struct_WTTP_LOG_INFO","*pLogInfo;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(The variable-length data go here.)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0098","num":"0296"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PDWORD","pdwThreadCount;"]},{"entry":[{},"PWTTPROCESS_THREAD_INFO","*pThreadInfo;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0099","num":"0297"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ The size of this entire buffer in bytes."},{"entry":"DWORD dwBuffSize;"},{"entry":"\/\/ The number of processes whose information is returned in this buffer."},{"entry":"DWORD dwProcs;"},{"entry":"DWORD dwProcInfoOffset[WTT_MAX_PROCS];"},{"entry":"DWORD dwProcessId;"},{"entry":"DWORD dwGuidOffSet;"},{"entry":"DWORD dwSrcMcOffset;"},{"entry":"DWORD dwDestMcOffset;"},{"entry":"DWORD _dwProcListCount;"},{"entry":"\/\/ The time of the last recorded heartbeat is split into two parts."},{"entry":"DWORD LastHBTimeHighDword;"},{"entry":"DWORD LastHBTimeLowDword;"},{"entry":"DWORD dwHeartBeat;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiments described herein with respect to the drawing figures are meant to be illustrative only and should not be taken as limiting the scope of invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
