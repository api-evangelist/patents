---
title: Rendering GUI widgets with generic look and feel
abstract: Rendering GUI widgets with generic look and feel by receiving in a display device a master definition of a graphics display, the master definition including at least one graphics definition element, the graphics definition element including a reference to a protowidget and one or more instance parameter values characterizing an instance of the protowidget, the protowidget includes a definition of a generic GUI object, including generic display values affecting overall look and feel of the graphics display, and rendering at least one instance of the protowidget to a graphics display in dependence upon the generic display values and the instance parameter values.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07694271&OS=07694271&RS=07694271
owner: International Business Machines Corporation
number: 07694271
owner_city: Armonk
owner_country: US
publication_date: 20040226
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS","Introduction","Rendering GUI Widgets with Generic Look and Feel"],"p":["1. Field of the Invention","The field of the invention is data processing, or, more specifically, methods, systems, and products for rendering graphical user interface (\u201cGUI\u201d) widgets with generic look and feel.","2. Description of Related Art","It is difficult to design an overall look and feel for GUI displays and at the same time allow third parties other than the designer to establish custom controls, GUI components, or widgets to their own specifications. The designer may not wish to hinder the developer's ability to lay out screens and displays, but it is difficult to maintain overall look and feel without limiting layout specifications. An inflexible example would involve a set of control attributes for a button, where the attributes are rectangle width, rectangle height, text color, and background color. This may work for simple button designs, but when a developer wishes to build elliptical buttons that contain icons, inflexible predetermination of width, height, color, and so on, is insufficient.","Methods, systems, and products are disclosed that operate generally to support application developers other than an original look and feel designer to set up custom control with arbitrary additional aspects of look and feel. Methods, systems, and products according to embodiments of the present invention typically render GUI widgets with generic look and feel by receiving in a display device a master definition of a graphics display, the master definition including at least one graphics definition element, the graphics definition element including a reference to a protowidget and one or more instance parameter values characterizing an instance of the protowidget, the protowidget includes a definition of a generic GUI object, including generic display values affecting overall look and feel of the graphics display.","Typical embodiments also include rendering at least one instance of the protowidget to a graphics display in dependence upon the generic display values and the instance parameter values. In typical embodiments, rendering at least one instance of the protowidget includes inserting in the instance of the protowidget the instance parameter values from the master definition. In some embodiments, rendering at least one instance of the protowidget includes creating instance display values for the instance of the protowidget in dependence upon the instance parameter values. In many embodiments, the protowidget also includes at least one generic display rule and creating instance display values for the instance of the protowidget includes creating instance display values for the instance of the protowidget in dependence upon the generic display rule.","Typical embodiments include creating the protowidget, defining the protowidget in a scalable vector graphics language, and creating the master definition of a graphics display. In typical embodiments, rendering at least one instance of the protowidget also includes creating in computer memory a data structure representing an instance of the protowidget. In such embodiments, the data structure may be implemented as a DOM.","The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.","The present invention is described to a large extent in this specification in terms of methods for rendering GUI widgets with generic look and feel. Persons skilled in the art, however, will recognize that any computer system that includes suitable programming means for operating in accordance with the disclosed methods also falls well within the scope of the present invention. Suitable programming means include any means for directing a computer system to execute the steps of the method of the invention, including for example, systems comprised of processing units and arithmetic-logic circuits coupled to computer memory, which systems have the capability of storing in computer memory, which computer memory includes electronic circuits configured to store data and program instructions, programmed steps of the method of the invention for execution by a processing unit.","The invention also may be embodied in a computer program product, such as a diskette or other recording medium, for use with any suitable data processing system. Embodiments of a computer program product may be implemented by use of any recording medium for machine-readable information, including magnetic media, optical media, or other suitable media. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that, although most of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.","Methods, systems, and products for rendering GUI widgets with generic look and feel are explained with reference to the accompanying drawings beginning with .  sets forth a diagram of a system for rendering GUI widgets with generic look and feel that operates generally by receiving in a display device () a master definition () of a graphics display. In the example of  the master definition includes at least one graphics definition element () that includes a reference () to a protowidget and one or more instance parameter values () characterizing an instance of the protowidget. In the example of , the protowidget () is a definition of a generic GUI object that includes generic display values () affecting overall look and feel of the graphics display and generic display rules () for use in deriving instance display values () from instance parameter values (). In the system of , a display device () with a graphics display () renders at least one instance () of the protowidget () to a graphics display () in dependence upon the generic display values () and the instance parameter values ().","A widget is a graphical user interface (\u201cGUI\u201d) component that displays information and implements user input for interfacing with software applications and operating systems. \u2018Widget\u2019 is a term that is often used to refer to such graphical components. In some environments other terms are used for the same thing. In Java environments, for example, widgets are often referred to as \u2018components.\u2019 In other environments, widgets may be referred to as \u2018controls\u2019 or \u2018containers.\u2019 This disclosure, for clarity of explanation, uses the term \u2018widget\u2019 generally to refer to such graphical components. Examples of widgets include buttons, dialog boxes, pop-up windows, pull-down menus, icons, scroll bars, resizable window edges, progress indicators, selection boxes, windows, tear-off menus, menu bars, toggle switches, checkboxes, and forms. The term \u2018widget\u2019 also refers to the underlying software program that displays the graphic component of the widget in a GUI and operates the widget, depending on what action the user takes while operating the GUI in response to the widget. That is, \u2018widget,\u2019 depending on context, refers to data making up a GUI component, a software program controlling a GUI component, or to both the data and the program.","A protowidget is a widget definition from which widgets may be instantiated with similar generic look and feel but different instance characteristics. Protowidgets typically are created by a generic look and feel designer operating a graphics editor on a graphics workstation or personal computer (). Protowidgets may include generic display values () that govern the overall look and feel of a display, values that may be similar for a related group of protowidgets defining, buttons, dialog boxes, pull-down menus, and so on, all supporting the creation of instances of the protowidgets having a similar overall generic look and feel. Such a similar overall generic look and feel is sometimes referred to as a \u2018skin,\u2019 and GUI displays created by use of protowidgets according to instances of the present invention may be considered readily \u2018skinnable.\u2019 An instance of a protowidget, of course, is a widget, but for clarity in this specification, an instance derived from a protowidget is referred to as an \u2018instance.\u2019 A protowidget is typically defined in a graphics definition language, such as, for example, \u201cSVG,\u201d the Scalable Vector Graphics language, a modularized language for describing graphics in XML, the eXtensible Markup Language. The SVG specification is promulgated by the World Wide Web Consortium.","A master definition () of a graphics display is a description of a display for one or more widgets, that is, instances of protowidgets. That is, the master definition lists protowidgets and describes how instances of them are to be created and displayed. Multiple instances of a single protowidget may be described in a master definition. That is, a protowidget defining a tool bar button, for example, may be instantiated and used at several locations on a single GUI display to perform several different functions.","For further explanation, consider the example of the display shown in . .  sets forth a line drawing that depicts an exemplary graphics display on a computer running a data communication application, more particularly, in the example of , a web browser. The browser of , as depicted, has been operated by a user to point to a web site named \u201cSomeSearchEngine.com,\u201d as shown in the title bar of the browser display (). The browser of  includes a GUI toolbar () with a Back button, a Forward button, and buttons for refreshing the display, searching, printing, and stopping web page retrievals. The browser of  also includes a horizontal menu () containing the menu items File, Edit, View, Bookmark (sometimes called \u2018Favorites\u2019), Tools, and Help. The browser of  displays a search query, \u201cmine geology,\u201d displayed in a query entry field (). In this example, a user ceased operations just before invoking the search feature () of the search engine, so that the area of the graphics display in which search results are displayed is still empty (). The graphics display in this example includes an advertisement () that supports a hyperlink labeled \u201cCLICK HERE.\u201d","In the example of , every graphical object on the display may be a widget, that is, an instantiation of a protowidget. In particular, all the buttons on the toolbar () may be instantiations of a single button protowidget instantiated several times to form multiple widgets having generic look and feel with differing instance display values effecting differing locations with differing label text.","That fact the exemplary application of  is represented as a browser is not a limitation of the present invention. On the contrary, many applications that implement rendering GUI widgets with generic look and feel are useful in various embodiments of the present invention, including email clients, word processors, database applications such as are used by personal digital assistants (\u201cPDAs\u201d), and so on. The use of all such applications, and others as will occur to those of skill in the art, is well within the scope of the present invention.","In the system of , a display device () with a graphics display () renders at least one instance () of the protowidget () to a graphics display () in dependence upon generic display values () and instance parameter values (). Generic display values () are display values effecting overall look and feel of a display or a set of related displays, as, for example, a set of display screens related in the sense that they are all screens provided by a single software application or a single web site. Generic overall look and feel is the fact that such screens advantageously provide widgets having similar edge treatments, similar colors, similar hatching and shading, similar fonts in their labels and other text elements, and so on. Instance parameter values () are values affecting the creation and display of a particular widget without affecting overall look and feel. Examples of instance display values include display location, height, width, label text, and so on.","In the system of , a look and feel designer uses a graphics editor on a workstation () to create one or more protowidgets (). Each protowidget is a definition of a type of widget that may be instantiated by use of the protowidget and one or more instance parameter values from a master definition (). Each protowidget in this example includes generic display values () and generic display rules (). Generic display rules are rules that are applied to instance parameter values () when a widget is rendered to create instance display values (). In many systems according to embodiments of the present invention, creating a protowidget is carried out by expressing the protowidget in a scalable vector graphics language such as SVG from the World Wide Web Consortium.","In the system of , an application developer uses a graphics editor on a workstation () to create a master definition () of a graphics display. A master definition may advantageously be expressed in an XML language, although in some embodiments at least the master definition language is not be the language in which protowidgets are specified. The master definition language may manipulate protowidgets at a level of abstraction above the protowidgets. In other words, a language for specifying a display of widgets defined in an XML language such as SVG advantageously is a kind of superset of SVG.","Given the flexibility of XML language specification, many such super-languages no doubt will occur to those of skill in the art, but one example of a language in which master definitions of graphics may be expressed is MXML from Macromedia, Inc., 600 Townsend Street, San Francisco, Calif. 94103. MXML is an XML-based markup language used to declaratively describe the layout of widgets on a graphics display, and an object-oriented programming language which handles user interactions with an application. MXML runs on a presentation server from Macromedia called \u201cFlex.\u201d Flex is a presentation server installed on top of a Java\u2122 application server or servlet container.","Here is an example of a master definition () of a graphics display expressed in MXML:",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d encoding=\u201cUTF-8\u201d?>"},{"entry":"<mx:Application width=\u2018700\u2019 height=\u2018700\u2019"},{"entry":"\u2003\u2003\u2003xmlns:mx=\u201chttp:\/\/www.macromedia.com\/2003\/mxml\u201d >"},{"entry":"\u2003\u2003\u2003<mx:VBox>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<mx:Button id=\u201cbutton1\u201d label=\u201cPress Me\u201d width=\u201c125\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003height=\u201c35\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<mx:CheckBox id=\u201ccheckbox1\u201d label=\u201cCheck Me\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<mx:ComboBox id=\u201ccombobox1\u201d width=\u201c100\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002height=\u201c35\u201d\/>"},{"entry":"\u2003\u2003\u2003<\/mx:VBox>"},{"entry":"<\/mx:Application>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This exemplary master definition lists references to three protowidgets, a Button, a CheckBox, and a ComboBox. The Button has instance parameter values for an identification code of \u2018button,\u2019 for a width of \u2018125\u2019 , and for a height of \u201835\u2019. The CheckBox has instance parameter values for an identification code of \u2018checkbox\u2019 and for label text of \u2018Check Me.\u2019 The ComboBox has instance parameter values for an identification code of \u2018combobox,\u2019 for a width of \u2018100\u2019, and for a height of \u201835.\u2019","The references to all three protowidgets include a namespace identifier \u2018mx\u2019 at a location in cyberspace specified by the URL: \u201chttp:\/\/www.macromedia.com \/2003\/mxml.\u201d The URL identifies the location of the protowidgets for each reference, the Button, the CheckBox, and the ComboBox. That is, in this example, a reference to a protowidget is implemented as a markup element name of another markup document where the protowidget is defined. As described in more detail below, the protowidgets found at the URL contain the pertinent generic display values and generic display rules effecting their overall look and feel.","Display devices in this specification are generally computers, that is, any automated computing machinery having a graphics display. The terms \u201cdisplay device\u201d or \u201ccomputer\u201d include not only general purpose computers such as laptops, personal computer, minicomputers, and mainframes, but also devices such as personal digital assistants (\u201cPDAs), network enabled handheld devices, internet-enabled mobile telephones, and so on.  sets forth a block diagram of automated computing machinery comprising a computer () useful according to various embodiments of the present invention to render GUI widgets with generic look and feel.","The computer () of  includes at least one computer processor () or \u2018CPU\u2019 as well as random access memory() (\u201cRAM\u201d). Stored in RAM () is are two application program, a graphics editor () and a browser (). The use of a graphics editor and a browser is for explanation, not for limitation. Application programs useful in rendering GUI widgets with generic look and feel in accordance with various embodiments of the present invention include browsers, word processors, spreadsheets, database management systems, email clients, and others as will occur to those of skill in the art.","Also stored in RAM () is an operating system (). Operating systems useful in computers according to embodiments of the present invention include Unix, Linux , Microsoft NT\u2122, and others as will occur to those of skill in the art. In the example of , operating system () also includes at least one device driver for use in input\/output communications among applications ( and ), user input devices (), and graphics displays (). Examples of graphics displays include GUI screens, touch sensitive screens, a liquid crystal displays, and the like. Examples of user input devices include mice, keyboards, numeric keypads, touch sensitive screens, microphones, and so on.","The example computer () of  includes computer memory () coupled through a system bus () to the processor () and to other components of the computer. Computer memory () may be implemented as a hard disk drive (), optical disk drive (), electrically erasable programmable read-only memory space (so-called \u2018EEPROM\u2019 or \u2018Flash\u2019 memory) (), RAM drives (not shown), or as any other kind of computer memory as will occur to those of skill in the art.","The example computer () of  includes communications adapter () that implements connections for data communications () to other computers (). Communications adapters () implement the hardware level of data communications connections through which client computers and servers send data communications directly to one another and through networks. Examples of communications adapters () include modems for wired dial-up connections, Ethernet (IEEE 802.3) adapters for wired LAN connections, 802.11 adapters for wireless LAN connections, and Bluetooth adapters for wireless microLAN connections. The example computer of  includes one or more input\/output interface adapters (). Input\/output interface adapters () in computer () include hardware that implements user input\/output to and from user input devices () and graphics display (). Examples of input\/output interface adapters include mouse adapters, keyboard adapters, and particularly graphics adapters.","For further explanation,  sets forth a flow chart illustrating an exemplary method for rendering a GUI widget with a generic look and feel that includes receiving () in a display device a master definition () of a graphics display, the master definition including at least one graphics definition element (). In the example of , the graphics definition element () includes a reference () to a protowidget and one or more instance parameter values () characterizing an instance of the protowidget. In the example of , the protowidget () includes a definition of a generic GUI object which in turn includes generic display values () affecting overall look and feel of the graphics display. The exemplary method of  also includes rendering () at least one instance () of the protowidget () to a GUI display () in dependence upon the generic display values () and the instance parameter values (). In the method of , rendering at least one instance () of the protowidget includes creating in computer memory a data structure comprising an instance () of the protowidget (). In the method of , a data structure comprising an instance () of the protowidget () may be implemented as a DOM. A DOM is a \u2018Document Object Model,\u2019 a data structure created according to a specification for how the graphical elements of a document are represented and rendered. A DOM contains attribute values defining graphics objects, and provides an API (application programming interface) for manipulating the graphics objects. The Dynamic HyperText Markup Language (\u201cDHTML\u201d), for example, relies on a DOM to dynamically change the appearance of Web pages after they have been downloaded to a user's browser.","Netscape and Microsoft specify HTML DOMs for their browsers, but the W3C's DOM specification supports both HTML and XML. The W3C's DOM specification includes an API for valid HTML and well-formed XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated. A DOM may be used to manage or manipulate any graphics components or widgets represented in compliant XML. With a DOM, programmers can build documents, navigate their structure, and add, modify, or delete elements and content. Almost anything found in an HTML or XML document can be accessed, changed, deleted, or added using a DOM. The specification for the DOM API for use with any programming language. The specification itself at this time provides language bindings for Java and ECMAScript, an industry-standard scripting language based on JavaScript and JScript.","In the method of , rendering () at least one instance () of the protowidget () includes inserting () in the instance () of the protowidget the instance parameter values () from the master definition () and creating () instance display values () for the instance () of the protowidget () in dependence upon the instance parameter values (). In the method of , the protowidget () includes at least one generic display rule () and creating () instance display values () for the instance () of the protowidget () is carried out by creating instance display values for the instance () of the protowidget () in dependence upon the generic display rule (). The following exemplary SVG representation of a protowidget for a GUI button is provided for further explanation:",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d encoding=\u201ciso-8859-1\u201d?>"},{"entry":"<!DOCTYPE svg PUBLIC \u201c-\/\/W3C\/\/DTD SVG 20000303 Stylable\/\/EN\u201d"},{"entry":"\u2003\u201chttp:\/\/www.w3.org\/TR\/2000\/03\/WD-SVG-20000303\/DTD\/svg-"},{"entry":"\u200320000303-stylable.dtd\u201d>"},{"entry":"<svg id=\u201csvgRoot\u201d xml:space=\u201cpreserve\u201d width=\u201c300\u201d height=\u201c300\u201d>"},{"entry":"\u2003<desc>MXML Button<\/desc>"},{"entry":"\u2003<style type=\u201ctext\/css\u201d> <![CDATA[ .t1 { fill: #00ff00; stroke:"},{"entry":"\u2003\u2003#ff0000; } .t2 { text-anchor: middle; } ]]> <\/style>"},{"entry":"\u2003<!-- Begin ECMA Script -->"},{"entry":"\u2003<script type=\u201ctext\/ecmascript\u201d> <![CDATA["},{"entry":"\u2003\u2003var parms = document.getElementById(\u201cparms\u201d);"},{"entry":"\u2003\u2003var rect1 = document.getElementById(\u201cButton.rect1\u201d);"},{"entry":"\u2003\u2003var rect2 = document.getElementById(\u201cButton.rect2\u201d);"},{"entry":"\u2003\u2003var text = document.getElementById(\u201cButton.text\u201d);"},{"entry":"\u2003\u2003function setX(att) { }"},{"entry":"\u2003function setY(att) { }"},{"entry":"\u2003function setWidth(att) {"},{"entry":"\u2003\u2003rect1.setAttribute(\u201cwidth\u201d, att-1);"},{"entry":"\u2003\u2003rect2.setAttribute(\u201cwidth\u201d, att-5);"},{"entry":"\u2003\u2003text.setAttribute(\u201cx\u201d, att\/2); }"},{"entry":"\u2003function setHeight(att) {"},{"entry":"\u2003\u2003rect1.setAttribute(\u201cheight\u201d, att-1);"},{"entry":"\u2003\u2003rect2.setAttribute(\u201cheight\u201d, att-5);"},{"entry":"\u2003\u2003text.setAttribute(\u201cy\u201d, att*7\/10); }"},{"entry":"\u2003function setBackgroundColor(att) {rect2.setAttribute(\u201cfill\u201d, att); }"},{"entry":"\u2003function setColor(att) {"},{"entry":"\u2003\u2003rect1.setAttribute(\u201cstroke\u201d, att);"},{"entry":"\u2003\u2003rect2.setAttribute(\u201cstroke\u201d, att);"},{"entry":"\u2003\u2003text.setAttribute(\u201cfill\u201d, att); }"},{"entry":"\u2003function setLabel(att) {"},{"entry":"\u2003\u2003var fc = text.getFirstChild( );"},{"entry":"\u2003\u2003alert(\u201cfc: \u201d+fc);"},{"entry":"\u2003\u2003fc.setNodeValue(att); }"},{"entry":"\u2003function setFontFamily(att) {text.setAttribute(\u201cfont-family\u201d, att); }"},{"entry":"\u2003function setFontSize(att) {text.setAttribute(\u201cfont-size\u201d, att); }"},{"entry":"\u2003function setFontStyle(att) { text.setAttribute(\u201cfont-style\u201d, att);}"},{"entry":"\u2003function setFontWeight(att) {text.setAttribute(\u201cfont-weight\u201d, att); }"},{"entry":"\u2003<!-- Begin Set Parms function -->"},{"entry":"\u2003function setParms(evt) {"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlX\u201d)) {"},{"entry":"\u2003\u2003setX(parms.getAttribute(\u201cMxmlX\u201d)); }"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlY\u201d)) {"},{"entry":"\u2003\u2003setY(parms.getAttribute(\u201cMxmlY\u201d)); }"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlWidth\u201d)) {"},{"entry":"\u2003\u2003setWidth(parms.getAttribute(\u201cMxmlWidth\u201d)); }"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlHeight\u201d)) {"},{"entry":"\u2003\u2003setHeight(parms.getAttribute(\u201cMxmlHeight\u201d)); }"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlBackgroundColor\u201d)) {"},{"entry":"\u2003\u2003setBackgroundColor(parms.getAttribute("},{"entry":"\u2003\u2003\u201cMxmlBackgroundColor\u201d));}"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlColor\u201d)) {"},{"entry":"\u2003\u2003setColor(parms.getAttribute(\u201cMxmlColor\u201d)); }"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlLabel\u201d)) {"},{"entry":"\u2003\u2003setLabel(parms.getAttribute(\u201cMxmlLabel\u201d)); }"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlFontFamily\u201d)) {"},{"entry":"\u2003\u2003setFontFamily(parms.getAttribute( \u201cMxmlFontFamily\u201d));}"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlFontSize\u201d)) {"},{"entry":"\u2003\u2003setFontSize(parms.getAttribute(\u201cMxmlFontSize\u201d));}"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlFontStyle\u201d)) {"},{"entry":"\u2003\u2003setFontStyle(parms.getAttribute(\u201cMxmlFontStyle\u201d));}"},{"entry":"\u2003\u2002if (parms.hasAttribute(\u201cMxmlFontWeight\u201d)) {"},{"entry":"\u2003\u2003setFontWeight(parms.getAttribute( \u201cMxmlFontWeight\u201d)); }"},{"entry":"\u2003setLabel(\u201ctest\u201d);"},{"entry":"\u2003} ]]>"},{"entry":"<\/script>"},{"entry":"<!-- Begin Component Definitions -->"},{"entry":"\u2003<rect id=\u201cparms\u201d x=\u201c0\u201d y=\u201c0\u201d width=\u201c0\u201d height=\u201c0\u201d fill=\u201cnone\u201d"},{"entry":"\u2003\u2003stroke=\u201cnone\u201d\/>"},{"entry":"\u2003<symbol id=\u201cButton\u201d>"},{"entry":"\u2003\u2003<rect id=\u201cButton.rect1\u201d x=\u201c0\u201d y=\u201c0\u201d width=\u201c50\u201d height=\u201c22\u201d"},{"entry":"\u2003\u2003\u2003rx=\u201c3\u201d ry=\u201c3\u201d fill=\u201c#ffffff\u201d stroke=\u201c#949694\u201d\/>"},{"entry":"\u2003\u2003<rect id=\u201cButton.rect2\u201d x=\u201c2\u201d y=\u201c2\u201d width=\u201c46\u201d height=\u201c18\u201d"},{"entry":"\u2003\u2003\u2003rx=\u201c2\u201d ry=\u201c2\u201d fill=\u201c#ffffff\u201d stroke=\u201c#D6DADC\u201d\/>"},{"entry":"\u2003\u2003<text id=\u201cButton.text\u201d class=\u201ct2\u201d x=\u201c25\u201d y=\u201c16\u201d font-"},{"entry":"\u2003\u2003\u2003size=\u201c12\u201d fill=\u201c#000000\u201d>mx:Button<\/text>"},{"entry":"\u2003\u2003<\/symbol>"},{"entry":"\u2003<!-- Begin Component Usage -->"},{"entry":"\u2003<use id=\u201cButton.use\u201d xlink:href=\u201c#Button\u201d onload=\u201csetParms(evt)\u201d\/>"},{"entry":"<\/svg>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This exemplary protowidget contains two SVG component definitions, one for the button itself, <symbol id=\u201cButton\u201d>, and another component definition:",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<rect id=\u201cparms\u201d x=\u201c0\u201d y=\u201c0\u201d width=\u201c0\u201d height=\u201c0\u201d fill=\u201cnone\u201d"]},{"entry":[{},"\u2003stroke=\u201cnone\u201d\/>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"figref":["FIG. 4","FIG. 4"],"b":["112","128","104","408","112","110","104"]},{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<use id=\u201cButton.use\u201d ... onload=\u201csetParms(evt)\u201d\/>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"That is, the rendering function at render time calls the \u2018onload\u2019 function defined in the SVG for the protowidget, \u201csetParms( ).\u201d The setParms( ) function tests with an if( ) statement whether each supported instance parameter has a value in the master definition (\u201cparms\u201d), and, if the value is present, setParmtZ( ) sets that value in a DOM representing an instance of the protowidget. The functions setX( ), setY( ), setWidth( ), setHeight( ), and so on, are DOM API functions. In this example, creating () instance display values () for the instance () of the protowidget () in dependence upon the instance parameter values () may be carried out in a trivial example by using the instance parameter values as instance display values. Often, however, the protowidget () includes at least one generic display rule () and creating () instance display values () for the instance () of the protowidget () is carried out by creating instance display values for the instance () of the protowidget () in dependence upon the generic display rule (). In the exemplary SVG protowidget set forth above, a generic display rule is exemplified by the member method:",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function setWidth(att) {"]},{"entry":[{},"\u2003\u2003rect1.setAttribute(\u201cwidth\u201d, att-1);"]},{"entry":[{},"\u2003\u2003rect2.setAttribute(\u201cwidth\u201d, att-5);"]},{"entry":[{},"\u2003\u2003text.setAttribute(\u201cx\u201d, att\/2); }"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["for a first rectangle defining the screen appearance of a button, create the instance display value for the width of the first rectangle as the instance parameter value minus 1","for a second rectangle defining the screen appearance of a button, create the instance display value for the width of the second rectangle as the instance parameter value minus 5","for button text defining the screen appearance of a button, create the instance display value for the button text as the instance parameter value divided by 2"]}}}},"It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
