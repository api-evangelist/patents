---
title: Output system and output method used in the same for printing and producing copies
abstract: An output system having a data processor and an printer or other output device for outputting data in a specific format, which is sent from the data processor, to which is installed driver software for controlling the output device. Whether the data on output request passes the driver software is determined in sending data to the output device. Data are prohibited from being sent to the output device for output requests on which data bypasses the driver software.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07305566&OS=07305566&RS=07305566
owner: Minolta Co., Ltd.
number: 07305566
owner_city: Osaka-Shi, Osaka
owner_country: JP
publication_date: 20010104
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["This application is based on applications Nos. 2000-73 and 2000-355968 filed in Japan, the contents of which is hereby incorporated by reference.","The present invention relates to an output system and output method used in the same for printing and producing copies.","In recent years, improvements in performance and cost reductions for color copiers, color printers, and color scanners have contributed to creating an environment in which high quality illegal documents and copies, including paper currency, negotiable securities, and even gift certificates, can be easily created.","Data flow in a typical output system according to the related art is shown in . This output system comprises a computer  and a printer  connected to the computer . The computer  includes an operating system (OS)  and hardware  that operates according to control data from the OS . The OS  provides the computer  with various functions, including the abilities to display information on a screen, and create and store documents.","The OS  includes printer driver software (\u201cprinter driver\u201d below)  for printer control independently of the operating system kernel, and a part of OS  is provided for an application programming interface (API) . The API  provides an interface to access operating system functions under the OS , in response to various requests from application programs (\u201cAPPLICATION A\u201d and \u201cAPPLICATION B\u201d in )","There are generally two methods used to print in an output system having a computer controlled by a general-purpose operating system. In one method, shown in  as printing from APPLICATION A, the printer driver  and API  are sequentially called in response to a print request from the application program, and the print data is generated by the printer driver  and sent to the printer I\/O interface  of the hardware . The other method, shown as printing from APPLICATION B, does not use the printer driver  to generate the print data, but rather sends data from the application program through the API  directly to the printer I\/O interface  of the hardware .","The conventional method for preventing illegal printing and copying in such an output system has been to build an illegal printing\/copying prevention function into the printer driver . With the output system described above, however, this function can be easily bypassed. That is, if the processing content on printer  is decrypted by analyzing data output from computer , for example, if the data to be printed is compressed on computer  and then expanded on printer  and so on, printer  can be directly accessed by the application programs without using printer driver  to generate the print data. Therefore, illegal printing and copying cannot be prevented using this print route.","It should be noted that color copier is bound to equip an illegal printing\/copying prevention function today. The means for implementing this function is generally provided in the form of hardware, and an increase in product cost is therefore unavoidable.","Furthermore, when an illegal printing\/copying prevention function is provided as a hardware component on the printer side in a system including plural computers and plural printers accessible to the plural computers via a LAN or other network, the same hardware must be disposed to each individual printer. This is wasteful and unnecessarily expensive.","An object of the present invention is to provide a low cost, secure output system and output method used in the same, and a data storage medium storing a program run on this output system.","To achieve the above object, a first aspect of the present invention provides an output system having a data processing device and an output device for outputting data in a specific format, which is sent from the data processing device. In this output system, driver software which can control the output device is included in the data processing device. The output system comprises a first controller for determining whether data on output request passes the driver software, in sending data to the output device from the data processing device, and a second controller for prohibiting data from being sent to the output device for output requests on which data bypasses the driver software.","A further aspect of the present invention provides an output system having a data processing device and an output device for outputting in a specific format data sent from the data processing device. In this output system, driver software for controlling the output device is included in the data processing device. The output system comprises an encryptor for encrypting data passing the driver software, provided on the data processing device, and a decrptor for decrypting data encrypted by the encryptor, provided on the output device.","A yet further aspect of the present invention provides an output system having a data processing device and an output device for outputting data in a specific format, which is sent from the data processing device. In this output system, driver software having an illegal printing prevention function and controlling the output device is included in the data processing device. The output system comprises a prohibiting controller for prohibiting data output to the output device by setting a value which is different from an ordinary value for outputting data to the output device, in response to a data output request to the output device from the data processing device. The value that is thus set can be stored to a specific register.","A yet further aspect of the present invention provides an output method used in an output system having a data processing device and an output device for outputting data, in a specific format, which is sent from the data processing device. The output method comprises; determining whether data on output request passes driver software incorporated in the data processing device, which can control the output device, in sending data to output device from the data processing device, and prohibiting data from being sent to output device for the request on which data bypasses the driver software.","A yet further aspect of the present invention provides an output method used in an output system having a data processing device and an output device for outputting data in a specific format, which is sent from the data processing device. The output method comprises; encrypting data passing the driver software included in the data processing device, on the data processing device side, and decrypting the encrypted data, on the output device side.","A yet further aspect of the present invention provides a computer-readable storage medium for storing a program run on an output system having a data processing device and an output device for outputting data in a specific format, which is sent from the data processing device. The program comprises steps of; determining whether data on output request passes driver software incorporated in the data processing device, which can control the output device, in sending data to output device from the data processing device, and prohibiting data from being sent to output device for the request on which data bypasses the driver software.","A yet further aspect of the present invention provides a computer-readable storage medium for storing a program run on a data processing device which sends data to an output device for outputting data in a specific format. The program comprises steps of; encrypting an output data from an application program run on the data processing device, and outputting the encrypted data to the output device. The encrypting step in this case can set a specific password to the output data from the application program.","A yet further aspect of the present invention provides a computer-readable storage medium for storing an installer program to install the driver software for making an output device available to a data processing device which sends a data to the output device for outputting data in a specific format. The installer program comprises steps of: installing the driver software to the data processing device, and installing a program for prohibiting data on output request from being sent to the output device, for request on which data bypasses the driver software.","The preferred embodiments of the present invention are described below with reference to the accompanying figures.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["100","100","12","10","20","10","12","12","10","12"]},"As shown in , each client computer  contains an operating system (\u201cOS\u201d below)  controlling basic client computer functions, and hardware , the operation of which is based on control data from the OS .","The network  is connected to the Internet , for example, so that the various client computers  can transfer files by way of e-mail and FTP (File Transfer Protocol), view home pages on the World Wide Web, download data from such Web pages, and utilize other available functions and features. In this exemplary embodiment of the invention, the OS  used on the client computer  is Microsoft Windows (R). It will be obvious to one with ordinary skill in the related art, however, that the invention shall not be so limited and another general purpose operating system such as Unix or MS-DOS (R) can be used.","In order to prevent illegal printing and copying when data is sent from-a client computer  to a printer , the output system according to this preferred embodiment consisting of at least one client computer  and printer  connected thereto can prevent illegal job data from being sent to the printer, or can prohibit job output on the printer . This output system is further described below.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["10","20","2","10","2","3","20"]},"The printer driver  is installed to client computer  using an external data storage medium such as a CD-ROM  or floppy disk , which is generally bundled with the printer on its purchase. For install of the printer driver , the installer program is normally provided, which can automatically or semi-automatically installs the printer driver  according to the user's objectives. This installer program installs the printer driver  from an external data storage medium such as a CD-ROM  or floppy disk  to the client computer .","A part of OS  is provided for an application programming interface (\u201cMODIFIED API\u201d in )  through which printing functions under OS  are called in response to a print request from an application program (\u201cAPPLICATION A\u201d and \u201cAPPLICATION B\u201d shown in ). In this first embodiment of the invention, this API  is the replacement by the previously installed API whereby an application program can directly access a printer (as in the related art example shown in ). Though described more fully with reference to , this API  disables the ability to bypass the printer driver  and send data directly to printer , and thus prohibits sending data directly to the printer  through the API .","API  is installed to the client computer  using CD-ROM  or floppy disk  when installing the printer driver . When API  is installed, the original API resident in the OS  is either overwritten so that it is no longer present on disk, or is moved or renamed as a backup file. Thus, the newly installed API  is thus always called in response to a print request from APPLICATIONS A and B under the OS  shown in .","For example with Windows (R) as OS , the API  is provided as a DLL file. In this case, when API  is installed, the original DLL file is overwritten by the newly installed DLL file.","Under OS  thus comprised, when an application issues a print request, printer driver  is first called in response to the print request and then API  is called. The API  detects whether the data supplied thereto passes printer driver . If the API  detects that, printer driver  generates the print data. The data is then input to the printer I\/O section  built into the hardware , converted for transmission to the printer , and then sent to the printer .","As known from the related art, the printer driver  can prevent illegal printing when generating the print data for printing, and can refuse access to the printer  when illegal job data is received. Printer  access is thus refused for illegal data when the data passes the printer driver , and illegal printing can thus be prevented.","When the data does not pass the printer driver , that is, when the data bypasses the printer driver , API  function calls (referred to as \u201cAPI calls\u201d below) are trapped and replaced by a separate routine in this OS . The ability to send data directly to the printer bypassing the printer driver is thus disabled, and sending data directly to the printer  through the API  is prohibited. In result, illegal data is refused access to the printer , and illegal printing is prevented even when the printer driver is bypassed.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3"},"When an application program issues a print request, the printer driver  is called (#) and the API  is called (#). API calls indicating a print request are trapped (#). In step #, it is determined, based on the API call, whether a data path through printer driver  is requested. If the data is not sent through printer driver , the procedure advances to step # to prohibit direct access to the printer , and the process ends.","On the other hand, if the data is sent through printer driver , the procedure advances to step #.","In step #, the illegal printing prevention function incorporated into printer driver  is then called. In step #, it is determined whether illegal printing is requested, that is, whether the data to be printed is illegal data. If illegal printing is requested, the procedure advances to step #, printer access is rejected, and the process ends. On the other hand, if illegal printing is not requested, the procedure advances to step # and the printer  is accessed. The printer  then prints the data (#), and the print job is output.","Thus, an output system according to the first embodiment can prevent illegal printing both when print data is sent through the printer driver  and when print data bypasses printer driver . This illegal printing prevention operation is achieved by an OS  program incorporated into client computer , in this first embodiment of the invention, this program is installed to the hard disk of a client computer  and read into memory for execution. The invention will obviously not be so limited, however, as the program can be stored, in file format, in the external data storage medium such as floppy disk, CD-ROM, and called therefrom.","As will be known from the preceding explanation, this first preferred embodiment of the invention achieves an output system that can prevent illegal printing with high reliability and at a low cost using software, and thus does not incur additional hardware costs. Furthermore, because the illegal printing prevention technology is built into printer driver , updating the printer driver is simple. It is therefore simple to modify the printer driver to keep the illegal printing prevention technology current with new types of illegal printing data such as when new currency is introduced.","Furthermore, in this first preferred embodiment, the printer driver , printer driver installer, and API  are described as installed to the client computer  using the exernal data storage medium such as CD-ROM , floppy disk . The invention will again not be so limited, however, as the printer driver can obviously be downloaded and installed using another computer by way of the LAN or other network to which the client computer  is connected.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 4","b":["3","4","3","10","21","4","22"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 5","FIG. 5"],"b":["30","32","35","32","40","30","32","33","40","32","34","32"]},"The printer driver  can prevent illegal printing when generating print data, and can refuse access to the printer  by any received illegal data. The printer driver  also has an encrypting function for inverting the first 10 bytes of data during legal printing tasks, that is, when legal data that is allowed to be printed is received.","Data that has passed or bypassed this printer driver  is input to the printer I\/O section  of the hardware , and converted to and then sent in a format suitable for transmission to the printer .","Corresponding to the encrypting function of data inversion by printer driver , the controller  built into the printer  has a decrypting function (data inverting function) for inverting the first 10 bytes of data in the data sent from the computer . The printer  prints out normal data after this data inversion by the decrypting function, and interrupts output for abnormal data. Note that as used herein \u201cnormal data\u201d refers to the data restored to the original format after the data encrypted by the computer  is reverted to the original unencrypted state by the printer , and \u201cabnormal data\u201d refers to data that bypasses the printer driver  and has the data bits inverted on printer  as described above.","An output system according to this second embodiment can thus prevent output of illegal data that has passed the printer driver  by means of the illegal printing prevention function. This output system can also prevent illegal printing when data bypasses the printer driver  as a result of the decryption function of the printer controller  inverting the first 10 bytes of print data and thus converting it to abnormal data.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 6"},"When an application program issues a print request, the printer driver  is called (#) and the API  is called (#). API calls indicating a print request are trapped (#). In step #, it is determined, based on the API call, whether a data path through the printer driver  is requested. If not, the procedure advances to step #, and on the other hand, if the data is sent through printer driver , the procedure advances to step #.","The printer  is directly accessed in step #. In step #, the first  bytes are then inverted on printer . The print data is therefore detected to be abnormal data (#), output is interrupted, and the process ends.","In step #, the illegal printing prevention function of the printer driver  is called. In step #, it is determined whether illegal printing is requested, that is, whether the data to be printed is illegal data. If illegal printing is requested, the procedure advances to step #, printer access is rejected, and the process ends. On the other hand, if illegal printing is not requested, the procedure advances to step #, the first 10 bytes of data are inverted, and the printer  is accessed (#).","In step #, the first  bytes of data is inverted on printer . Thus, the 10 bytes inverted by the printer driver  are again inverted, restoring the data to the original normal print data. This data is then printed (#), and the print job is output.","It will thus be obvious that an output system according to this preferred embodiment of the invention can prevent illegal printing when data is passed through printer driver  and when data bypasses printer driver .","It should be noted that this second embodiment of the invention simply inverts the first 10 bytes of data passing through the printer driver  to achieve the data encrypting means whereby the illegal printing prevention function is achieved. The invention will obviously not be so limited, however, as other encrypting methods can be used. For example, a password could be applied to data passing printer driver . In this case, a program for identifying a password and discriminating valid print data must be provided on printer  side for data decryption.","As will be known from the preceding explanation, this second preferred embodiment of the invention achieves an output system that can prevent illegal printing with high reliability and at a low cost using software, and thus does not require additional hardware expenditures. Furthermore, because the illegal printing prevention technology is built into printer driver , updating the printer driver is simple. It is therefore simple to modify the printer driver to keep the illegal printing prevention technology current with new types of illegal printing data such as when new currency is introduced.","Furthermore, because preventing illegal printing is achieved in this second embodiment by incorporating a decryption program into the printer hardware, cost increments can be avoided and a relatively high security system can be assured.","A third embodiment of the invention is described next with reference to  to  using MS-DOS (R) as the operating system installed to the computer.  shows the typical data flow when outputting data to a printer in an MS-DOS system.","In this MS-DOS system, the output system is changed, as the value of content to be set to specific register (AH, AL, DX registers) is set to one that is different from the ordinary value for normal printing, for print commands issued in response to a print request from an application program (\u201cAPPLICATION\u201d in ). In result, different registers are used practically, thus sending data to the printer is prohibited, and all normal print operations are thus prohibited.","The data process normally used in an MS-DOS system is described next with reference to . In of an MS-DOS system, a BIOS interrupt table is set during the startup procedure. Data to be printed in response to a request from an application is sent to the printer in the form of a BIOS interrupt call. In this case, when the application requires to print the letter A, 0 is stored to register AH (#), data  equivalent to letter A is stored to register AL (#), the destination printer number is stored to register DX (#), and an INT  command is issued as the interrupt command.","When the CPU receives the INT  command, it fetches the 17th address (e.g., data stored in the four bytes starting from the address \u201c0000:005c\u201d) from the interrupt table (#). The CPU then creates a stack frame, saves the register in that frame (#), jumps to that address, and executes an interrupt (#). Because the address jumped to is the address for conventional printer control, control returns to the application when a return command is issued after the data is sent to the printer.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 9"},"A trap program that runs automatically during the startup process copies the content of the four bytes starting from address 0000:005c in the BIOS interrupt table are copied to the trap program (#). The address of a pseudo-printing routine in the trap program is then copied to the four bytes starting from \u201c0000:005c\u201d (#), and the process ends with the trap program being left in memory.","Operation of this pseudo-printing routine is described next with reference to .","In this pseudo-printing routine the content of register CH is copied to register AH (#), the content of register CL to register AL (#), and the content of register BX to register DX (#). The print routine address is then read (#), and control then skips to the address of the print routine copied into the trap program (#). From the perspective of the application the print command is changed from using registers AH, AL, and DX to using register CH, CL, and BX. In result, normal printing operations cannot be accomplished.","This pseudo-printing routine also monitors the printer control IC ports so that when a busy signal occurs even though no data is sent, the pseudo-printing routine sends a printer IC initialization command as an error handling measure.","Because the printer driver thus uses registers CH, CL, BX, only applications that use this printer driver are able to print. Furthermore, when data is sent directly to the printer control IC bypassing the BIOS, the printer driver resets the printer control IC and thus prevents illegal printing.","Although the present invention has been described in connection with the preferred embodiments thereof with reference to the accompanying drawings, it is to be noted that various changes and modifications will be apparent to those skilled in the art. Such changes and modifications are to be understood as included within the scope of the present invention as defined by the appended claims, unless they depart therefrom."],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Embodiment 1","Embodiment 2","Embodiment 3"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other objects and attainments together with a fuller understanding of the invention will become apparent and appreciated by referring to the following description and claims taken in conjunction with the accompanying drawings wherein:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
