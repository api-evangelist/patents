---
title: Implementation of control plane protocols and networking stacks in a distributed network device
abstract: A network device, such as a router or switch, uses multiple forwarding and control processors that operate different protocols or operating systems to route a packet in a computer network. A support stack module determines which processor a packet is routed to and converts the packet format, if necessary, for compatibility with the processor. When a packet is directed to a control processor, its associated support stack module simulates the forwarding plane interfaces. After processing the packet is routed onto the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07602794&OS=07602794&RS=07602794
owner: Intel Corporation
number: 07602794
owner_city: Santa Clara
owner_country: US
publication_date: 20031113
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The present invention relates to operation of control and forwarding plane protocols and network stacks in a distributed network device such as a switch or router.","Most network devices, such as routers and switches, include at least two operational planes, namely a control plane and a forwarding plane. The control plane typically executes various signaling, routing, and other control protocols in addition to configuring the forwarding plane. The forwarding plane usually performs packet processing operations such as IP forwarding and classification.","In the prior art, control processes and forwarding processes were executed on a common processing resource. More recently, the control and forwarding planes have been separated so that their respective processes could be executed on separate processing resources, which may even be from different vendors.","As a result, a more formal and standardized definition of the interface between the control and forwarding planes is required. For example, the Network Processing Forum (NPF) is developing an application programming interface (API) that facilitates communication between the control and forwarding planes in a distributed element architecture.","Operational characteristics that are important in such a distributed architecture include scalability, i.e., the ability to easily add resources; high availability; and robust signaling and routing protocol implementations. Optimizing these characteristics is more difficult when components are manufactured by different vendors, are distributed across different backplanes or run different operating systems.","Indicated generally at  is a network device, such as a router or switch. Device  includes two control elements ,  and a plurality of forwarding elements, two of which are forwarding elements , . In the present embodiment, all of the forwarding and control elements comprise circuit boards that are connected to a common backplane . But the invention can be equally well-implemented in a network in which the control elements and forwarding elements are connected to different backplanes. In the latter scenario, communication among at least some of the various elements must occur across different backplanes.","Control element  in the present embodiment of the invention includes an embedded Intel processor (not visible in ). It should be appreciated that other Intel processors or processors from other vendors could also be used to implement the invention. As will be described in more detail, the control plane processor is responsible for running protocol stacks. Control element  also includes a processor although it may be configured for running different protocol stacks. And as mentioned above, it may also run a different operating system than the processor on control element .","Forwarding elements ,  in the present embodiment comprise line cards, each including a network processor (not visible in ). In the present embodiment of the invention, the forwarding plane is implemented with an Intel IXP Network Processor, such as the IXP 2400. These line cards can be implemented with one or more IXP processors or with an additional stand alone general-purpose processor. Other Intel processors or processors from other manufacturers could also be used to implement the invention. Like the control elements, each of the forwarding elements can operate different protocol stacks or applications, including control functions.","The present invention can be implemented with any number of forwarding elements or control elements that connect to different backplanes or run different operating systems.","The functional block diagram of  incorporates both control elements ,  but only one of the forwarding elements, namely element . As will be explained in more detail, however, the description of element  in  applies generally to each of the other forwarding elements, like forwarding element , in device . Including only one of the forwarding elements simplifies the drawing to facilitate description of device .","Considering first forwarding element , the network processor thereon runs a number of processes, including protocol stacks and applications  and operating system kernel and TCP\/IP stack . Protocol stacks and applications  send and receive packets through either a traditional socket  or a standardized API like the NPF API . A virtual interface and packet handler , together referred to as a stack support module, provide for communication between protocol stacks and applications  and a device ingress interface (IF)  as well as a device egress interface (EF) . Interface  receives network communications from a network forwarding engine in the form of packets that are presented to device  via interface . In a similar fashion, interface  receives packets from virtual interface  and presents them to the network forwarding engine.","Considering now the functional structure of control element , the network processor thereon runs a number of processes, including protocol stacks and applications  and operating system kernel and TCP\/IP stack . Protocol stacks and applications  send and receive packets through either a traditional socket or a standardized API like the NPF API . A virtual interface and packet handler , together referred to as stack support module, provide for communication between protocol stacks and applications  and a transport module , which is distributed among all of the control and forwarding elements. Transport module  comprises an interface that facilitates packet transmission between a forwarding element and a control element in both directions, as will be later described hereinafter.","Transport module  hides the specifics of the physical interconnection and associated transport protocols used to exchange information between the control plane, on the one hand, and the forwarding plane, on the other hand. It provides a connection-oriented interface to set up connections and transfer data between any control element and any forwarding element in the system and takes care of managing the underlying transport protocols and interconnects. This transport module is a \u2018plug-in,\u2019 such that it can be changed and updated without affecting any of the other plug-ins. New plug-ins can therefore be easily added to support additional interconnects and associated transport protocols.","Line ,  provide communication in both directions, as shown in the drawing, between virtual interface and packet handler  and transport module . Packet handler  in turn communicates packets to and from interfaces , .","Control element  includes functional components that are similar to control element . As noted above, however, the control elements may operate different protocol stacks or network processes and may further run operating systems that differ from one another and from one or more of the forwarding elements. When additional forwarding elements (not shown) are provided, each also includes an input, like line , to transport module  and an output, like line , from the transport module to virtual interface and packet handler . Like the control elements, multiple forwarding elements may be run different processes or operating systems.","As can be seen, each of the control elements interfaces with transport module  to both receive packets from and send packets to the transport module. Further, virtual interface and packet handler  in forwarding element  can route packets to control elements ,  via transport module  on line . Such routing occurs under circumstances that are explained shortly in connection with the description of . In a similar fashion, line  receives packets from any of the control elements via module  and places them on device egress interface , through stack support module , which communicates the packet to the network beyond device .","Turning now to , consideration will be given to how device  deals with a packet delivered  to it by a network forwarding engine. First, a packet is delivered to device  via interface  from a remote forwarding engine (not shown) located elsewhere on the network. The packet handler checks , , the packet header to determine the protocol to which the packet relates. If, for example, the packet header relates to Internet Protocol version 4 (IPv4), that protocol type is selected . But if the packet relates to another protocol, e.g., Internet Protocol version 6 (IPv6), that protocol type is selected  as the protocol type. These protocols are provided as examples of but two of a number of protocols for different processes that could be implemented in device . The packet, if not belonging to either IPv4 or IPv6 protocols, is checked for any other supported protocol, and if a match is found, that protocol type is selected (not shown on flow chart). If the packet is not associated with a protocol that is supported in device , the packet is dropped .","Assuming that a supported protocol type is selected, the process then chooses  a virtual interface associated with one of the control elements, like control element , , or with one of the forwarding elements, like forwarding element , dependent upon the protocol with which the packet is associated and upon which element is running that protocol. For example, if the packet is associated with a protocol in protocol stacks  on forwarding element , virtual interface  presents the packet to the appropriate interface in element . On the other hand, if the packet is associated with a process run on one of the control elements, e.g. control element , packet handler  routes the packet via line  and transport module  to the virtual interface in control element  where it is presented to the appropriate input port, i.e., the one associated with the chosen protocol, in element . If the port cannot be located , the packet is dropped .","After the packet is delivered to the appropriate virtual interface, as described above, it is converted , if necessary, to the operating system associated with the element to which the packet has been delivered. In other words, the packet buffer supported by forwarding element  might not be compatible with the operating system supported by the protocol stack to which the packet has been delivered. If so, the virtual interface to which the packet is delivered converts , the packet from the packet buffer used by the forwarding engine to the packet buffer specific to the operating system associated with the protocol stack that will process the packet. Upon conversion, the packet is delivered  to the TCP\/IP stack for processing. Such conversion is provided for at each of the forwarding and control processors.","The virtual interfaces appear to the protocol and networking stacks as local interfaces. This allows traditional router software to send and receive packets on the virtual interfaces. The virtual interfaces on the control elements, like virtual interface , simulate the forwarding-plane physical interfaces on the control plane.","The virtual interface includes an operating system device driver that simulates the interfaces. For example, if control element  runs a Linux OS, a Linux device driver dynamically simulates the forwarding plane interfaces as network devices to the Linux OS . A person with ordinary skill in the art can readily implement such a device driver in Linux and in other operating systems that may be functioning on the device processors.","The virtual interfaces can be configured from a user program so that user interfaces can be created or deleted depending upon the state of the physical plane interface. The number of virtual interfaces depends upon how many addresses need to be supported. These can be changed on the fly. For example, in a Linux based system, a layer of software in the user space that is in communication with the forwarding element detects an interface change made by a user. It then makes an Input\/Output Control (IOCTL) call to the virtual interface driver to change the state of the interfaces.","In addition, a user configuration file can be used to configure the device to route the packets only to selected processors in device . Or the internal routing can be based on packet content. For example, all packets relating to control functions could be diverted by packet handler  to a selected one or more of the control processors.","Turning now to , consideration will be given to how a packet that has been processed by one of the protocols or applications run on any of the control or forwarding elements is output from device  to the network. For example, a packet processed in protocol stacks  of control element  is requested  by TCIP\/IP stack . Virtual interface  checks  the protocol type of the packet provided by the protocol stack. If the operating system specific packet buffer associated with control element  is different from the buffer used by the forwarding engine, the packet is converted . Thereafter, an output port is set up  dependent upon the virtual interface that received the packet. The packet is thereafter sent  to the port via transport module  and from there to egress interface , via virtual interface and packet handler , which places the packet on the network beyond device .","Some embodiments of the invention may be machine-readable mediums with instructions stored thereon. These instructions, when executed, cause the machine to execute the processes that were described above.","This device facilitates easy scalability to provide high availability or to provide support for additional protocols. If more forwarding or control processors are needed\u2014for either reason\u2014a new board can simply be plugged into the backplane. Because the virtual interfaces and packet handlers support different operating systems and\/or different protocols, packets are routed to and from the new board as described above without the need for extensive additional programming to create a custom interface."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIGS. 3 and 4","FIG. 2"]}]},"DETDESC":[{},{}]}
