---
title: Driver shimming
abstract: Driver shimming techniques are described. In one or more implementations, an identification is made as to which interfaces and callbacks are utilized by a shim obtained for a driver of a computing device. The identified interfaces and callbacks are wrapped by the shim of the computing device such that calls to the wrapped interfaces and callbacks are intercepted by the shim.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09519600&OS=09519600&RS=09519600
owner: Microsoft Technology Licensing, LLC
number: 09519600
owner_city: Redmond
owner_country: US
publication_date: 20110304
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Computing devices may include a variety of different hardware devices to expand the functionality available to the computing device. For example, devices may include internal devices that may be configured within a housing of the computing devices as well as external devices, such as printers, cameras, and so on. Drivers are typically employed to enable communication between an operating system of the computing device and the devices.","The continuing development of operating systems, however, may cause changes in how the operating systems interact with the drivers. Consequently, a driver that is compatible with a previous version of an operating system, for example, may not be compatible with later versions of the operating system. Traditional techniques that were used to combat this incompatibility included writing a newer version of the driver. Although this may restore functionality of the device, the writing of the driver may involve a wait until the driver is available for dissemination, involve a user locating the newer version of the driver, and so on that could lead to user frustration and lost productivity.","Driver shimming techniques are described. In one or more implementations, an identification is made as to which interfaces and callbacks are utilized by a shim obtained for a driver of a computing device. The identified interfaces and callbacks are wrapped by the shim of the computing device such that calls to the wrapped interfaces and callbacks are intercepted by the shim.","In one or more implementations, an I\/O request packet is intercepted by a shim executed on a computing device that relates to communication with a driver that is executing on the computing device. Data is translated, by the shim, that relates to the I\/O request packet to be compatible with the driver and the translated data is transmitted for communication to the driver.","In one or more implementations, installation of a driver is initiated on a computing device and the driver to be installed is identified. Based on the identification, a determination is made that a shim is available for the driver to communicate with an operating system. The shim is obtained for installation on the computing device and callbacks are identified that are utilized by the shim. The callbacks are wrapped by the shim such that calls to the callbacks are intercepted by the shim and an in-memory image of the driver is modified by the computing device using the wrapped callbacks.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Overview","Computing devices may include (e.g., be communicatively coupled to) a wide variety of different devices such that functionality of the device may be utilized by the computing device. For example, a computing device may be communicatively coupled to a printer, optical disc reader\/writer, thumb drive, or other peripheral device that may be internal (e.g., within a housing) or external to the computing device. A driver may be utilized to enable communication between the computing device and the device, such as to translate commands and data from an operating system of the computing device into a form that is understandable by the device and vice versa. However, changes to the operating system may cause incompatibilities with the driver and consequently with the device, which may lead to user frustration.","Driver shimming techniques are described in which a shim may be used for compatibility with a driver for a device, such as compatibility between a kernel of an operating system and the driver. This compatibility may be provided in a variety of ways by a shim. For example, the shim may be used to intercept and translate data communicated between the kernel and the driver, such as data associated with function calls to application programming interfaces (APIs), callbacks, I\/O request packets (IRPs), and so on. In this way, compatibility of the kernel of the operating system with the driver may be maintained and thereby functionality of the device may still be accessed by the operating system, even in instances of newer versions of the operating system.","The shims that are obtained to promote driver compatibility may be obtained in a variety of ways. For example, a service provider may provide a service that is accessible via a network which includes identification of issues with drivers and corresponding shims for those drivers. One or more shims may therefore be provided for execution with the driver to correct these issues, such as based on identification of the driver. Further, updates may also be provided in a form of shims to correct subsequent issues that are encountered. In this way, issues that arise after shipment of an operating system with a driver may be addressed even after the operating system has been installed and distributed, further discussion of which may be found in relation to .","In the following discussion, an example environment is first described that may be leveraged according to driver shimming techniques. Example procedures are then described which may also be employed in the example environment as well as other environments. Accordingly, performance of the example procedures is not limited to the example environment and the example environment is not limited to performing the example procedures.","Example Environment",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","102","102","102","102","102"]},"The computing device  may also include an entity (e.g., software) that causes hardware of the computing device  to perform operations, e.g., processors, functional blocks, and so on. For example, the computing device  may include a computer-readable medium that may be configured to maintain instructions that cause the computing device, and more particularly hardware of the computing device  to perform operations. Thus, the instructions function to configure the hardware to perform the operations and in this way result in transformation of the hardware to perform functions. The instructions may be provided by the computer-readable medium to the computing device  through a variety of different configurations.","One such configuration of a computer-readable medium is signal bearing medium and thus is configured to transmit the instructions (e.g., as a carrier wave) to the hardware of the computing device, such as via a network. The computer-readable medium may also be configured as a computer-readable storage medium and thus is not a signal bearing medium. Examples of a computer-readable storage medium include a random-access memory (RAM), read-only memory (ROM), an optical disc, flash memory, hard disk memory, and other memory devices that may use magnetic, optical, and other techniques to store instructions and other data.","The computing device  is also illustrated as including a processor  and memory . Processors are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example, processors may be comprised of semiconductor(s) and\/or transistors (e.g., electronic integrated circuits (ICs)). In such a context, processor-executable instructions may be electronically-executable instructions. Alternatively, the mechanisms of or for processors, and thus of or for a computing device, may include, but are not limited to, quantum computing, optical computing, mechanical computing (e.g., using nanotechnology), and so forth. Additionally, although a single processor  and memory  are shown, a wide variety of types and combinations of memory and\/or processors may be employed.","The computing device  is illustrated as also includes an operating system  having a kernel  and one or more drivers  that are configured to support communication between the kernel  of the operating system  and one or more devices . The kernel  represents a component of the operating system  that is typically employed to abstract functionality of underlying devices such as the processor , memory , and other devices  to applications and other software that are executed by the computing device . Although the operating system  and kernel  are illustrated as being executed on the processor , these modules are also storable in memory .","The devices  may be representative of a variety of different devices that may be employed by the computing device . For example, the devices  may include peripheral devices, such as printers, scanners, hard drives, and so on. The devices  may also represent functionality of other computing devices that may be leveraged by the computing device , such as to use a mobile phone as a storage device, access photos on the mobile phone, and so on. Thus, the computing device  may leverage a variety of different devices  to add to the functionality of the computing device .","In order for the devices  to communicate with the computing device , and more particularly the operating system  and kernel  of the computing device, one or more drivers  may be employed. Drivers  are typically employed to abstract functionality of a corresponding device . For example, the driver  may be configured as a series of layers to translate commands from the kernel  of the operating system  into device specific commands that are \u201cunderstandable\u201d by a respective device.","As previously described, however, there may be some instances in which the driver  is not longer compatible with the kernel  of the operating system . For example, the operating system  may be updated to a newer version, have a service pack applied, and so on that may change how the operating system  is configured to communicate with the driver .","Accordingly, the computing device  may employ a shim engine  that is representative of functionality to provide one or more shims  to support compatibility of the drivers  with the kernel  of the operating system . A shim , for instance, may be configured as code that serves as an intermediary between the kernel  and the drivers  such that the kernel  is compatible with the drivers  and vice versa. A variety of different techniques  may be employed by the shim  to support compatibility, such as to translate or redirect commands, further discussion of which may be found in relation to .","Generally, any of the functions described herein can be implemented using software, firmware, hardware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule,\u201d \u201cengine,\u201d and \u201cfunctionality\u201d as used herein generally represent hardware, software, firmware, or a combination thereof. In the case of a software implementation, the module, functionality, or logic represents instructions and hardware that performs operations specified by the hardware, e.g., one or more processors and\/or functional blocks.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 2","FIG. 1"],"b":["200","116","200","102","202","204","202","206","208","116","114"]},"For example, the repository  may include driver identifiers  and corresponding issues  of the identified drivers. This information may then be used to provide shims to the computing device  when loading a driver . In this way, the service provider  may provide a service such that up-to-date shims may be disseminated to computing devices  as warranted.","The computing device , for instance, may initiate a loader  of the operating system  to install a driver  such that an operating system  may communicate with a device . Accordingly, the loader  may employ the shim engine  to determine whether a shim  is available for the driver  being installed, such as by communicating an identifier of the driver  to the shim manager module . The shim manager module  may then use the driver identifier  to determine if there are any issues  with the driver  and then whether there are shims  available for driver . If so, the shim  may be communicated to the shim engine  for installation along with the driver . A variety of other examples of communication of the shim  are also contemplated, such as through part of a scheduled update to the operating system  (e.g., a service pack) and so on.","The shim  may be used to promote compatibility of the operating system  with the driver  in a variety of ways. For instance, drivers  may interact with components of the computing device  (e.g., kernel , other drivers) by calling exported interfaces (e.g., APIs), declaring callbacks to be called when certain events happen in the system (I\/O manager request callbacks), and so on. Accordingly, the shim engine  may employ hooking such that addresses in an import address table (IAT) for one or more application programming interfaces are replaced with addresses corresponding to the shim . The shim  may also be configured to intercept callbacks, e.g., to be called upon occurrence of an event by the computing device . In this way, the shim  may intercept calls made to and from the APIs that are no longer compatible and translate data associated with the call such that it is compatible. In one such example, the shim  may translate the data to mimic a previous version of an operating system  such that the driver  may understand commands received by the driver.","In another instance, the shim  may be configured to intercept I\/O request packets (IRPs) that may be used to support communication between the kernel  and the driver  without involving actual calls to an API. The shim engine , for instance, may modify declared addresses in a dispatch table such that the I\/O request packets (IRPs) may be intercepted by the shim . The shim  may then translate data associated with the IRPs and forward this data for receipt by the intended driver .","Although these techniques described compatibility of the driver  with a kernel  of an operating system , the shim  may be used to promote compatibility with other drivers  of the computing device . Thus, the shim engine  may be employed to redirect the execution of calls and other communications by wrapping them inside a shim . Although illustrated separately, a fragment of code that implements the shim  may \u201clive\u201d inside a system component, driver , and so on. In one or more implementations, shims declare wrappers for interfaces or callbacks. If such a wrapper is applied towards a shim (e.g., at runtime), than a call to or from the driver to a system component is processed through the wrapper. Thus, the shim wrapper may control both inputs and outputs of an interface call and modify them to correct incompatibilities.","For example, the shim  may be configured to intercept callbacks (e.g., functions inside the driver) which may be called when a corresponding event occurs in the computing device . This technique is typically employed to support asynchronous code. Accordingly, the shim  may be used to wrap execution of such callbacks, also. In this way, the shim  may correct behavior even for callbacks that may be completed later in an asynchronous manner.","Example Procedures","The following discussion describes shared resource access verification techniques that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware, firmware, or software, or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. In portions of the following discussion, reference will be made to the environment  of  and the system  of .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 3","b":["300","302","112","102","114","102","102"]},"A driver being installed is identified (block ), which may be based on a identification of the driver  itself, a device  that corresponds to the driver , functionality of the driver , and so on. Based on the identification, a determination is made that a shim is available (block ). This determination may be performed locally by the shim engine , involve communication with a service provider  via a network , and so on.","The shim may then be obtained for installation on the computing device (block ). Continuing with the previous example, the shim manager module  may query a repository  based on a driver identifier  to locate issues that pertain to the driver and\/or locate one or more shims  directly. The one or more shims  that are located may then be communicated back to the computing device  for installation.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":["400","402","116","118","102"]},"The identified interfaces and callbacks are then wrapped by the shim so that calls to the wrapped interfaces and callbacks will be intercepted by the shim (block ). The shim engine , for instance, may replace entries in an import access table (IAT), dispatch table, and so on such that communications between the driver  and other components of the computing device (e.g., the kernel , other drivers , and so on) are intercepted by the shim . This process may involve resolving addresses of the interfaces to be wrapped, which can be exports from various other drivers in a kernel, class drivers, and so on.","An in-memory image of the driver is modified by the computing device (block ) and loading of the driver is continued such that the shimming engine is not called again and that interaction of the wrapped interfaces is first processed by the shim (block ). Thus, the shim engine  may be employed to install the shim  as part of the driver  or other component of the computing device  but then is not involved further such that execution is not slowed. Therefore, the driver  may execute at near full speed with the difference being that execution of the wrapped interfaces and callbacks will go first through the wrappers declared in the applied shims. Although installation of a single shim was described, it should be readily apparent that this process may be employed for multiple shims, e.g., for multiple identified issues of a driver .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["500","114","502","102","118","118","114"]},"Data is translated, through execution of the shim, that relates to the I\/O request packet to be compatible with the driver (block ). The data, for instance, may be a payload of the packet, data located at an address that referenced by a pointer in the IRP, and so on. This data may be translated by the shim  for compatibility with communications that involve the driver , such as communications to or from the driver  to another component, such as the kernel , other driver , and so on. The translated data may then be transmitted through execution of the shim for communication to the driver (block ), such as by employing the IRP techniques previously describe such that an originally intended driver may receive the data, either directly or indirectly through communication through another shim . A variety of other examples are also contemplated as described above.","Conclusion","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as example forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The detailed description is described with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different instances in the description and the figures may indicate similar or identical items.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
