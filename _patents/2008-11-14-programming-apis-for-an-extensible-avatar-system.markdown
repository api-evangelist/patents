---
title: Programming APIS for an extensible avatar system
abstract: Disclosed is an application programming interface (API) that provides for an extensible avatar system. In one embodiment an API may allow video game applications to retrieve structures of data which represent an avatar. The game can then take those structures and incorporate the data into its own rendering system. In another embodiment an API may allow a video game application to render an avatar to a render target or texture wherein the video game system performs rendering and animation functions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08446414&OS=08446414&RS=08446414
owner: Microsoft Corporation
number: 08446414
owner_city: Redmond
owner_country: US
publication_date: 20081114
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["PRIORITY","CROSS-REFERENCE","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","APPENDIX","API Reference"],"p":["This application claims priority to U.S. Patent Application No. 61\/080,626, entitled \u201cExtensible Avatar System\u201d, filed on Jul. 14, 2008.","This application is related by subject matter to the subject matter disclosed in the following commonly assigned applications, the entirety of which are hereby incorporated by reference herein: U.S. patent application Ser. No. 12\/178,535 titled \u201cSystem for Editing an Avatar,\u201d U.S. patent application Ser. No. 12\/184,990 titled \u201cAvatar Items and Animations\u201d, and U.S. patent application Ser. No. 12\/189,067, titled \u201cAvatar Closet\/Game Awarded Avatar.\u201d","Video games sometimes feature a user-created avatar as a user-controlled character. Typically, a user may customize the avatar in a variety of ways dealing with appearance, such as facial features and clothing. This allows the user a more personalized and involved video gaming experience. For instance, the NINTENDO CORPORATION\u00ae has a user-created avatar, the MII\u00ae, which a user may then use as his or her user-controlled character in video games that support this feature, such as WII SPORTS\u00ae.","While avatars may be created on the system, or in a particular game, it is often desirable for a user's created avatar to be available for use by various video game applications. For instance, players may desire that an avatar associated with the player be available for incorporation into new video game applications without having to recreate the avatar. Furthermore, it may be advantageous for the video game application to use the video game system's rendering functions and incorporate the rendered avatar into the game output rather than providing its own avatar rendering functions. In either situation, it would be advantageous for video game applications to be able to access application programming interfaces (APIs) that allow the applications to access avatar information into their own rendering functions, or to incorporate system rendered avatars into the application's outputs.","In various embodiments of the present disclosure, a method, system and computer readable medium are provided to implement an API for programming avatars. Such an API may allow video game applications to retrieve structures of data which represent an avatar. The application can then take those structures and incorporate the data into their own character system so that they can render and animate the avatars in the application's context using the application's code.","An API may also allow applications to render an avatar to a render target, with the system handling the rendering and animation. The video game application can trigger animations or rely on \u201cidle\u201d animations to play, and the animations may be rendered to a two dimensional surface that the video game application may then present.","In some embodiments, the avatar system may be designed so that the API may deliver avatars accessorized (e.g. dressed) with accessories (e.g. t-shirts) that are released after the game itself has been released with no adverse effects on the video game application. Resources may be pre-allocated in such a fashion that new accessories do not occupy additional resources that the video game application is expecting to be available for other purposes.","In an embodiment, the avatar system may also be designed so that the retrieval of avatar assets may be executed by the console or online system, which may then be updated independently of the game application. This may allow the console or online service to change the logic for avatar asset retrieval without requiring changes to the game application. For example, while a console might initially retrieve assets only from local storage, in other cases assets may, for example, be retrieved from the internet.","It should be noted that this Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Avatar Systems",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["160","166","166","160","172","174","176","172","174","176","160","172","160","174","160","176"]},"In the case of online game playing, other users, such as user B  and user C  could interact with the first user  if such online game playing was mediated by a central server. In the example shown in , such avatars , ,  that were associated with the first user  could be seen by the other users , , however, these avatars , ,  have limited ability to be updated and animated.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2"},"In any event,  shows that in one aspect of the presently disclosed subject matter, avatar X  may have applied to it animation that is specific  to the avatar  (e.g. the hat example discussed above). On the other hand, avatar Y  may have animation that is applied to the entire body  of the avatar  (e.g. the dance example discussed above). In either case , , or in other cases , the avatars may be user determined  or they may be game determined . This means that users may accessorize the avatars , ,  via some interface, or such avatars may be accessorized by gaming titles . In this latter scenario, if the user  is playing a game and unlocks an achievement in the game, the reward for such achievement may be animation items that then may be applied to the user's  avatars\u2014whether to the avatars in a specific game or to the avatars in general for several (or all) games.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3","b":["302","308","318","312","314","308","310","302","310","308"]},"There may be various triggering mechanisms for applying such item content to avatars. For example, one such mechanism can include a user interface  that allows users to select which items to apply to which avatars. Alternatively (or in addition to), game titles  themselves can be a trigger for applying item content to avatars, depending on the implementation and user interaction with a gaming console hosting such an avatar engine . Yet, in other aspects of the present disclosure, the avatar engine  may reside on hosting server and any processing may be performed upstream from users.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3","b":["310","322","324","302","326","302"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["302","402","404","406"]},"Thus, a system may be used for animating gaming console avatars in a plurality of different ways, where the system may be loaded in local computer memory and where it may be executed by a physical processor. In such a system, a processing module  may be configured to process an accessory package  containing a plurality of animation items. Another module, the identification module , may be configured to identify avatars and animation items from the plurality of animation items. And still another module, the application module , may be configured to apply the animation items to the avatars.","This system may accommodate various other aspects, such as having animation items applied to the avatars  at least in a first game title  and a second game title . Moreover, the animation items may be configured to be applied to the avatars  while the first game title  is playing . In other aspects, animation items may be further configured to be applied to the avatars  while the second game  title is playing . The first game title  and the second game title  may be distinct from each other in that they may be loaded separately, at time t  and at time t .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["500","510","530"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 6","b":["690","690","605","615","610"]},"It will be readily appreciated that other instructions may be used in conjunction with the aspects discussed above, such as: instructions configured to carry at least one item between or across different game titles ; instructions configured to present to a user the option of accessorizing any avatars during the execution of games ; instructions configured to trigger and manage animation in different ways , such continuous , event , user , and idle  animation; instructions configured to apply animation in specific ways , such as item-based  and avatar-based , or using different mechanisms, such as user interface  and game titles . It should be noted that other instructions  that embody the various aspect discussed above may be used.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 7"},"At , the process flow begins. This process may be triggered in response to a user beginning execution of a video game on a video game console that is connected to the online video game service. For example, the user may power on the console, insert a disc that contains computer readable instructions comprising the game, and send an access credential that uniquely The service itself may comprise one or more servers through which online-multiplayer video game play is validated and exchanged between users, a game match-making service that groups users together into a gaming session, an e-commerce marketplace, a message board and a live chat room. The user's avatar may appear in many areas of such a service. For instance it may appear in a user's profile on the service or as a part of any posts the user makes to a message board.","Operation  depicts receiving, while executing the game, an instruction from a user to update the appearance of the avatar. While the user is playing the game, he or she may be inspired to change the avatar's appearance. In such an instance, the user may enter a command that calls up an avatar editing screen. For example, the user may press a dedicated button on his or her controller, keyboard or other input device, which brings up a list of commands to be performed. From there, the user may select the command corresponding to editing the appearance of the avatar. While these commands are being entered, the action in the underlying game may continue on or be suspended. The choice between those two options may be made either by the system the game is executing on or by computer readable instructions in the game itself. In one embodiment, receiving an instruction from a user to update the appearance of the avatar includes suspending active play of the game.","Operation  depicts updating the appearance of the avatar. The appearance may be any physical aspect of the avatar, such as a hair color, a hair length, a hair style, a facial hair color, a facial hair length, a facial hair style, a facial hair position, an eye color, an eye style, an eye position, a nose style, a nose position, a mouth style, a mouth color, a mouth position, an ear style, an ear position, a skin color, a height, a weight, or a body build.","In an embodiment, updating the appearance of the avatar includes overlaying an editor window on top of the game, and receiving at least one instruction from the user on how to update the appearance of the avatar. For example, the mechanics of updating the avatar may be controlled by the system that the user is playing the game on, rather than the game itself, and the system may render the editor window over the game window before sending the rendered frame to the user's visual display device. When presented with such a window, the user may then send an instruction on how the avatar is to be updated. For instance, the user may click on the avatar's eyes, then select a new eye color from a list of available colors, changing the avatar's eye color from green to hazel.","Operation  depicts instructing the server to store the updated avatar. This may include displaying an error message to the server when an indication from the server that it stored the updated avatar is not received within a period of time. Where the server is connected to the user's game system over a communications network, there may be times where the user updates the avatar but the communications network fails to send the updated avatar to the server. In such a case, the user may typically appreciate notification that the changes made to the avatar were not saved. In another embodiment, the changes may be saved locally on the user's game system and further attempts to send the updated avatar to the server may be made until such sending is successful.","Operation  depicts instructing the game to load and display the updated avatar. Where the sole non-volatile storage medium for an avatar exists on the server, this may include instructing the game to receive the updated avatar from the server. In another embodiment, the game may read the updated avatar directly from local memory. In the embodiment where the user is playing an online-multi-player video game comprising a session and a plurality of other users participating in said session, and said instructing the game to load and display the updated avatar may include instructing each other user's video game to load and display the updated avatar. That way, the user's avatar will have a consistent appearance for all participants in the multi-player game. This may also include instructing each other user's video game to load the updated avatar after play has been suspended for all other users of the session. It may be confusing to another user when the user's avatar suddenly changes during game play, and a malicious user may rapidly change the appearance of his or her avatar to annoy other users. This can be avoided where avatar changes propagate to all users only when play has been suspended, such as when a match concludes, or all players are paused. This said instructing each other user's video game to load the updated avatar may also include notifying each other user that the user's avatar has been updated. It may be confusing for another user if the user's avatar changes without explicit indication of such, and a notification, such as a pop-up window stating this change, may mitigate this problem.","Operation  depicts the optional step of storing the updated avatar on the user's game system wherein the user is playing the video game on a game system. Where communications with the server occur slowly, storing the avatar locally may improve the user experience by speeding up load times.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 8"},"A user  uses a computing device  to execute a game . In an embodiment of the present disclosure, the user connects to an online gaming server  through a network .","The server  comprises a processor , a module to receive an instruction from a user to update the appearance of the avatar , a module to update the appearance of the avatar , a module to store the updated avatar , a module to instruct the user's game to load and display the updated avatar , a database in which to store an avatar\/user pairs , and a module to check at least one credential .","The computing device  may be a dedicated video game console or a more general computing device, such as a cellular telephone or a personal computer. The computing device  may be configured to execute a plurality of games. It may have an optical drive and allow for a variety of games to be executed from computer readable instructions stored on optical discs. The games may be stored on a storage device within the computer, such as a hard drive or solid-state drive.","Where the user  wishes to update the appearance of the avatar he is using in a video game  that he is currently playing, he or she may issue an instruction to the server  to update the appearance of said avatar, which is received by the module to receive an instruction from a user to update the appearance of the avatar . That instruction is then passed to the module to update the appearance of the avatar . When the appearance of the avatar has been updated, a signal is sent from that module , to the module to store the updated avatar , which stores said avatar in the database . The database  may store pairs that identify the user and said avatar. Where a user may have a plurality of avatars at one time, the database may store the user and the avatars separately, along with an indication of which avatar corresponds to which user. The module to update the appearance of the avatar  also sends a signal to the a module to instruct the user's game to load and display the updated avatar , which sends a message to the user's computing device  to instruct the game  to load and display the updated avatar.","Where a security system is in place, the server may also pass all communications from the user  to update the appearance of the avatar through a module to check at least one credential of the user. Where the credential check passes, the user's instruction is processed as above. Where the credential check fails, the user's instruction is not executed. In an embodiment, a message telling the user  that the credential check failed may be send to the user's console  for display to the user.","Where the user  updates the avatar while playing on the service with other users , , through their respective computing devices , , when the server  sends a message to the user's console  to load and display the user's updated avatar, it may send a message to the other users' consoles , to also load and display the user's updated avatar.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 9"},"At , the process flow begins. This process may be triggered in response to a user beginning execution of a video game on a video game console that is connected to the online video game service. For example, the user may power on the console, insert a disc that contains computer readable instructions comprising the game, and send an access credential that uniquely The service itself may comprise one or more servers through which online-multiplayer video game play is validated and exchanged between users, a game match-making service that groups users together into a gaming session, an e-commerce marketplace, a message board and a live chat room. The user's avatar may appear in many areas of such a service. For instance it may appear in a user's profile on the service or as a part of any posts the user makes to a message board.","Operation  depicts receiving a message indicative of the user obtaining access of the item for use with the avatar. For example the message may be received from the game when the user achieves an accomplishment in the game associated with the item. The accomplishment may be, for instance, beating a level or purchasing it in the game with in-game currency. The message may be received in response to the user purchasing the item from an e-commerce store that is associated with the service. For example, the message may be received in response to the user receiving the item as a gift. For example, a sponsor could allow users access to an item comprising shoes that look like actual shoes that the sponsor produces.","This operation may include the case wherein the item has a creator, and said receiving a message indicative of the user obtaining access occurs after receiving a message from the item creator to store the item. In some cases, the item may be created by a game developer outside of the service. Where that is true, the item creator may send a message to the service indicating that the item is to be stored by the service for future use by users with their avatar.","In some instances the creator has at least one credential, the message includes the credential, and receiving the message from the item creator to store the item includes validating each credential.","Operation  depicts storing an indication that the avatar may use the item. Where an embodiment contains a database in which are stored avatars and items, the indication may comprise a third field, such that for every avatar-item pair, there is a corresponding \u201cMay use?\u201d field that indicates either \u201cyes\u201d or no.","Operation  depicts directing a first game to display the avatar with the item. Where the item comprises a hat, said displaying may comprise having the avatar wear the hat on his or her head where the avatar is displayed. Where the item is a non-clothing accessory, such as a fly swatter or a giant foam \u201cWe're #1\u201d novelty hand, said displaying may comprise having the avatar holding or otherwise manipulating the item where the avatar is displayed.","In an embodiment, said directing the first game to display the avatar with the item includes receiving a message from the user to display the avatar with the item.","In an embodiment, said first game is an online multi-player game comprising a session and at least one other user. An online gaming service may have many sessions or instances of a particular game active at a single time. Typically, a user participates in no more than a single session of the game at any time. In such an embodiment, said directing the first game to display the avatar with the item includes directing the game of each other user to display the avatar with the item. This will cause each other user who is playing the session with the user to see the updated avatar. This will ensure consistency for all users in the gaming session.","In an embodiment, said directing a first game to display the avatar with the item includes directing the first game to download the item from at least one server. In an architecture where all items are stored on a server, and a subset of the items are stored on the user's computing device, the first game may require local access to the item.","Operation  depicts directing a second game to display the avatar with the item. The avatar exists across the entire service, so while an item may be obtained in the first game, it is available for the avatar in all other aspects of the service. Where the user obtains an item for his or her avatar, directs that his or her avatar be displayed with the item, then begins playing a second game that supports avatars, the avatar will be displayed with the item in the second game, as well.","Operation  depicts the optional step of displaying the avatar with the item on a message board posting associated with the user. Where the service comprises a message board, users may post to the board to communicate with each other. Attached to each post may be the user's name, the time at which the post was made, and a representation of the user's avatar. The representation may comprise less than the entire avatar, such as a still image of the avatar from the neck up facing forward. Where the user's avatar is displayed with the user's message board posts and the user has set the avatar to be displayed with the item, in an embodiment the image of the user's avatar corresponding to the message board posting includes the item.","Operation  depicts the optional step of displaying the avatar with the item on a profile associated with the user. A profile comprises information about the user, such as real name, home page, age, interests, and a personal quote. Where the service comprises a user profile, the profile may comprise a representation of the user's avatar. The representation may comprise less than the entire avatar, such as a still image of the avatar from the neck up facing forward. Where the user's avatar is displayed in the user's profile and the user has set the avatar to be displayed with the item, in an embodiment the image of the user's avatar corresponding to the message board posting includes the item.","Operation  depicts the optional step of displaying the avatar with the item in a live chat in which the user is participating. A live chat comprises a communications session where a plurality of users communicate with each other in near-real-time. It may comprise text, audio, video or some combination thereof. In an embodiment, where the user participates in a live chat, all participants in the chat see a representation of the user's avatar. The representation may comprise less than the entire avatar, such as a still image of the avatar from the neck up facing forward. Where the user's avatar is displayed in the user's profile and the user has set the avatar to be displayed with the item, in an embodiment the image of the user's avatar corresponding to the message board posting includes the item.","Operation  depicts the optional step of directing the user's computer to store the association between the item and the avatar, wherein the user accesses the service through a computer. It may be beneficial for the user's computer to store the association between the item and the avatar so as to reduce access time by storing the information locally.","Operation  depicts the optional step of directing the user's computer to store the item, wherein the user accesses the service through a computer. It may be beneficial for the user's computer to store the item itself so as to reduce access time by storing the information locally.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 10"},"A user  uses a computing device  to execute a game . In an embodiment of the present disclosure, the user connects to an online gaming server  through a network .","The server  comprises a processor , a module to receive a message indicative of the user obtaining access of the item for use with the avatar , a module to store an indication that the avatar may use the item , a database to store user\/avatar\/item triplets , a module to direct a first game to display the avatar with the item , and a module to direct a second game to display the avatar with the item .","The computing device  may be a dedicated video game console or a more general computing device, such as a cellular telephone or a personal computer. The computing device  may be configured to execute a plurality of games. It may have an optical drive and allow for a variety of games to be executed from computer readable instructions stored on optical discs. The games may be stored on a storage device within the computer, such as a hard drive or solid-state drive.","The user may obtain access to an item with his or her avatar. The user may obtain this from a variety of sources. It may be a gift from another user , who is accessing the service through a computing device . The user may obtain the item as a reward by achieving a goal in the game  associated with the avatar, such as beating a level or obtaining a threshold score. The user may also purchase the item from a e-commerce marketplace offered by the server .","When the user has obtained access to the item, a corresponding message is sent to the module to receive a message indicative of the user obtaining access of the item for use with the avatar . In an embodiment, said module  includes a module to receive a message from the user  to display the avatar with the item. In an embodiment, said module to receive  is configured to receive the message from the first game . Said module  processes the message and then send a message to the module to store an indication that the avatar may use the item . That module  stores said indication in the database . In an embodiment, a user may have a plurality of avatars, and the item is restricted to a single avatar. In an embodiment, when a user obtains access to an item and may have a plurality of avatars, the item may immediately be used by all of the user's avatars. In an embodiment, the user has a single avatar, and all items that the user obtains access to correspond to that one avatar.","The module to direct a first game to display the avatar with the item  sends a message indicative of such to the first game  via the user's computing device  through the network . The first game  receives the message and displays the user's avatar with the item.","Where the user later plays a second game, the module to direct a second game to display the avatar with the item  sends a message indicative of such to the second game  via the user's computing device  through the network . The second game  receives the message and displays the user's avatar with the item.","Programming API","In various embodiments, video game applications may use a set of programming APIs that enable incorporation of avatars into the video game application. APIs may allow video game applications to retrieve structures of data which represent an avatar. In one embodiment, the video game application can then take those structures and incorporate the data into their own three dimensional character system so that they can render and animate the avatars in the game's own three dimensional environment using the game's own code. APIs may also allow video game applications to render an avatar to a render target or texture, with the host system or application performing all rendering and animation functions. The video game application may trigger animations, or rely on an \u201cidle\u201d animation to play, but they may be rendered to a two dimensional surface that the video game application may then present.","In an embodiment, an API may allow a video game application to access a full-body static shot of the avatar that may be saved with a user's profile. Typically, a video game application can retrieve a user's gamer picture and use that picture as the user's representation in the game. However, the picture will typically be a small (e.g., 64\u00d764 or 32\u00d732) image. In one embodiment, a video game application may access a larger display of the avatar, such as a full-body static image, without using the rendered\/moving avatars.","In an embodiment, the API family and the relevant system components may allow newer avatar accessories to be released after the release of the game. The new avatars may still appear in the game regardless of which API family is being used. The APIs may deliver avatars accessorized (e.g. dressed) with accessories (e.g. t-shirts) that are released after the game itself has been released, with little or no adverse affect on the video game application.","In further embodiments, components of the API may be part of a video game platform, for example in the game console, and may be updated independently of the video game application to change the asset retrieval logic. The host system or platform may provide a host application that executes in conjunction with the video game application, providing various services and providing access to information and resources via the API. The avatar system may be designed so that the retrieval of avatar assets may be performed by the host system or application, the specific logic which may be updated independently of the title. The logic for avatar asset retrieval may thus be changed at a later time. For example, while assets may initially be retrieved from local storage, the system may be updated to retrieve assets from the internet Resources may thus be pre-allocated in such a fashion that newer accessories do not occupy additional resources that the video game application is expecting to be available.","In an embodiment, a video game application may use one or both of two API families: one of which allows the video game application to receive raw data to construct, render and animate the avatar themselves; the other in which the system renders an animated avatar to a destination provided by the video game application.","As mentioned above, one group of APIs can be used by video game applications to retrieve either raw data which can be used by the game's own code to construct, render and animate avatars in their own three dimensional environment. Another group of APIs can be used to render given users' avatars to desired render targets or textures.","If some of the code runs in the system, rather than in the video game application, the internal behavior of these APIs can be updated after release, allowing, for example, alternate retrieval mechanisms to be used.","The following exemplary description of an avatar API may be better understood in conjunction with the exemplary functions provided in the Appendix. While the described API discloses one embodiment, those skilled in the art will understand that many such implementations may embody the disclosed principles. Support for avatars in the API may include two interfaces: IXAvatarRenderer may be used by developers to render an avatar into a given device. Developers may use IXAvatarAnimation to move the parts of an avatar through a predetermined series of movements. Functions for creating IXAvatarRenderer objects and retrieving IXAvatarAnimation objects may be included in the API. Developers who render avatars using their own game engine may use the XAvatarGetAssets function to retrieve the low-level description of an avatar.","Video game applications may use avatars by retrieving avatar data and then rendering the avatar to a device. Video game applications may use the IXAvatarRenderer interface to perform the rendering, or they may load the avatar data using XAvatarGetAssets and then render the data themselves.","Avatars may be available in both male and female versions, although the same skeleton may be used for both thus making animations easier to design. Facial animation may be done by animating textures. For example, eye textures may have five different directions (up, down, left, right and center), and eye motion may be accomplished by switching textures to look in different directions.","Height and body weight may be controlled by linearly scaling joints in the skeleton from the middle \u201cstandard.\u201d The scaling factor may be varied as desired by the system.","Video game applications may use avatars to represent players. In multiplayer games, the avatar may be shown in the \u201cgame lobby\u201d or other suitable application next to other information about the player. In games where it is appropriate, the avatar may be used in actual game play to represent the player.","The avatar system is not only useful for representing players' avatars, but since avatars appear as humans, the avatar system may also be used to render human, non-player characters in a game, including spectators, extras, game show hosts, and the like. Video game applications may request randomly generated avatars, so that no two crowds will look the same. Video game applications may load the avatars of signed-out profiles on the console to show a player's family's avatars proudly looking on at the end of a race, or cheering the player from the sidelines.","Avatars are typically intended to provide a broadly appealing experience to gamers of various demographic groups. For example, avatars may represent the player's identity, as on a game lobby, but may also adhere to rating systems such as the Entertainment Software Rating Board's (ESRB) \u201cE10\u201d rating. Similarly, the animation style used for avatars may be rational and naturalistic, and avatar movement may be dynamic and smooth.","A typical technical consideration in a video game application's use of avatars is how the avatars will be rendered and animated. The avatar system may include a built-in renderer that can be used in video game applications that wish to incorporate an avatar into their existing engine. The built-in renderer may support the use of predefined animations. Video game applications that already have a sophisticated rendering engine may prefer to access the raw avatar data and to render and animate the avatar using their existing engine.","Integrating avatars into a video game application may be designed to be straightforward, with predictable, fixed resource requirements and a simple API. A video game application may typically use about 850 kB at runtime to render one avatar, and some additional, temporary memory when retrieving the avatar data. It should be clear to those skilled in the art that the various embodiments of an avatar system and API disclosed herein are exemplary and that other implementations are possible.","In an embodiment, video game applications that use the XAvatar API may do so by linking to xavatar.lib. Video game applications may call XAvatarInitialize before they call any of the other functions in the library. This function allocates approximately two megabytes of heap memory for an asset retrieval cache, plus approximately 500 kilobytes of additional heap memory if the IXAvatarRenderer will be used.","In an embodiment, metadata may be a binary blob that contains information about the avatar's composition. Video game applications may use the XAvatarGetMetadata functions to retrieve or generate avatar metadata. Once retrieved, metadata may be passed as an argument to other functions for actual rendering of the avatar. The metadata format may be opaque to video game applications.","Before calling the XAvatarGetMetadataByXuid function, video game applications may call XAvatarGetMetadataByXuidResultSize with the appropriate count parameter to retrieve the size of the metadata result buffer that may be needed to hold the requested number of metadata blobs. The applications may then allocate a buffer to hold the metadata that will be returned by the function, passing a pointer to that buffer as an argument to the metadata function.","The metadata describing a gamer's avatar may be retrieved by calling the XAvatarGetMetadataByXuid function with the gamer's XUID. This function can retrieve more than one avatar per call, if multiple XUIDs are passed in an array. Note that the result buffer may be the proper size as reported by XAvatarGetMetadataByXuidResultSize for the number of XUIDs in the array\u2014the buffer size is not necessarily the product of the XUID count and the size of the XAVATAR_METADATA structure.","Some video game applications may want access to random avatars for purposes such as crowds. This can be accomplished using the XAvatarGetMetadataRandom function to retrieve one or more randomly-created avatars. When calling this function, pointer may be passed which may be set to point to an array of XAVATAR_METADATA structures.","Video game applications may also wish to display the avatars of a gamer's family members if those members are not signed in at the time. This can be done by retrieving avatars from profiles on the local console that are not currently signed in. First, the video game application may determine how many profiles are available on the console but not signed in, using the XAvatarGetMetadataSignedOutProfileCount function. This function may provide the count of available profiles. The video game application may then call XAvatarGetMetadataSignedOutProfile function with an index in the valid range from 0 to count-1. For each call, a pointer may be passed to a XAVATAR_METADATA structure to be filled in with that profile's avatar metadata.","Some video game applications may want to create specific avatars to be used when the game is executing. For example, a quiz game might want to have a host character played by an avatar. Once created, such an avatar's metadata may be passed directly to XAvatarGetAssets or XAvatarCreateRenderer. To get the metadata initially, Avatar Creator may be used to create the avatar. When an avatar is saved to an associated Developer Kit, metadata for that avatar may be written to two files: devkit:\\avatar_metadata.h and devkit:\\avatar_metadata.bin. If those files already exist, they may be overwritten. Avatar_metadata.bin may contain a simple binary definition of the avatar metadata (i.e., contains the information that tells the avatar system what that avatar looks like and is wearing). This definition may be included in the video game application's source code.","In further embodiments, XAvatar library may include a renderer that can render an avatar into a given Direct3D device. This renderer may be configured and invoked through the IXAvatarRenderer class. A video game application may create an IXAvatarRenderer instance for each avatar by calling the XAvatarCreateRenderer function. This function may allocate approximately 850 kilobytes of memory for the avatar model and assets, plus up to another four megabytes of memory for an optional avatar shadow map (If used, shadow maps can be small (512\u00d7512) or large (1024\u00d71024). The shadow map choice may be a parameter to XAvatarCreateRenderer). AddRef and Release may be used to manage the lifetime of the renderer. XAvatarCreateRenderer may return immediately, but the renderer may load avatar assets asynchronously, possibly through multiple requests to an online service. If a video game application uses the renderer before all assets have been received, the renderer may draw a simple, \u201cwaiting\u201d graphic in place of the avatar. Video game applications can use GetStatus to determine whether the avatar has been completely loaded.","In the main game loop, video game applications may first call Update to update the avatar's position according to the currently active animation.","Next, if the video game application is using avatar self-shadowing, a shadow map may be generated for the current animation position, using RenderShadow. Once the avatar's position and shadow map have been updated, the Render function may be called to draw the avatar to the given Direct3D device (the video game application may have set a render target and depth buffer ahead of time). As the game loop iterates, repeated calls to Update may animate the model, and RenderShadow and Render may cause the rendered image to reflect the avatar's changing pose.","Video game applications may set their own model and view matrices for rendering an avatar, but the avatar system may supply three standard views: head, head-and-shoulders, and full-body. Video game applications may retrieve these standard matrices using the GetMatrices function. To track animating avatars, video game applications may call this function after a call to Update and pass the results to both RenderShadow and Render.","When a video game application is using the IXAvatarRenderer class to render an avatar, the avatar may play a randomized sequence of idle animations.","In an embodiment, video game applications that use the IXAvatarRenderer class to render an avatar may use the IXavatarAnimation class to specify animations for the avatar to perform.","An animation may be encapsulated in an IXAvatarAnimation object. Video game applications may use the XAvatarLoadAnimation function to load one of a preset list of animations defined by the XAvatar library. Loading an animation with this function may allocate approximately 200 kilobytes of memory to hold the animation data.","Video game applications may also provide their own animations by loading an animation from a memory buffer with the XAvatarLoadAnimationFromBuffer function.","AddRef and Release may be used to manage the lifetime of an animation.","Like the renderer object, animations may take time to load. Video game applications may use the GetStatus function to ensure that an animation has completed loading before attempting to use the animation. Animations may not available for playback until they have finished loading.","Video game applications may call the PlayAnimations function to queue a list of animations for playback. Animations may play in the order they appear in the list. By default, a subsequent call to PlayAnimations may clear the existing queue, insert the new list of animations, and immediately begin playing the first animation in the new queue. It may be possible to modify this behavior by calling PlayAnimations with appropriate flags.","When playback transitions from one animation to another, the two animations may be blended together so that there is no sudden, jarring change in the avatar's position.","Video game applications may use GetCurrentAnimation to determine which animation is currently running.","In some embodiments, video game applications may choose to render and animate avatars using their own rendering engine. In this case, video game applications may load avatar geometry and graphical assets explicitly, and then render them explicitly in its own way.","To determine the buffer size required to hold an avatar's assets, video game applications may first call XAvatarGetAssetsResultSize, and allocate two buffers of the indicated sizes. The first buffer (pResultBuffer) may hold avatar geometry metadata and pointers to the GPU resources (vertex arrays, textures, etc.) stored in the second buffer (pGpuResourceBuffer.) The buffer pointed to by pGpuResourceBuffer may start on a 4096-word boundary so that textures are properly aligned in memory.","The pResultsBuffer and pGpuResourceBuffer buffers may then be passed to XAvatarGetAssets, which may fill them with the requested assets. An exemplary format is listed in the Appendix.","Asset retrieval may involve multiple queries to an online service to retrieve all of the assets. Video game applications must follow standard X asynchronous programming practices for this operation. An active XAvatarGetAssets request may be canceled by calling XCancelOverlapped.","When the XAvatar library functionality is no longer being used, video game applications may call the XAvatarShutdown function to release memory and resources being taken up by the library.","A video game application may initialize the library, use it for a period of time, shut down the library, and then later re-initialize the library for additional use. One such scenario might be a video game application that uses avatars in the game lobby, but not during gameplay. Such a video game application may initialize the XAvatar library when going into the game lobby, use the library in the lobby, and then call XAvatarShutdown when transitioning to gameplay, freeing memory and resources for the game. When the game ends and players return to the lobby, the video game application may call XAvatarInitialize again to start using the XAvatar library again.","Referring now to , illustrated is an exemplary video game system  including one or more avatar rendering engines ,  and . Game titles  and  (also referred to as video game applications) may execute on the video game system . The first video game title  may include an avatar rendering engine . The title  may request and receive avatar data from the video game system  via the API . The received data  may be used by the game's rendering engine  to render one or more avatars using the game title's own rendering code in the rendering engine . A second game title  may or may not include its own avatar rendering engine. In either case, the game title  may opt to use the video game system's avatar rendering services using one or more rendering engines ,  or . Game title  may initiate the process using the API  including one or more avatar target locations in the data . The video game system  may then render the requested avatars at the target locations. Whether the system renders the avatars or the game title renders the avatars, in some cases the avatars may be retrieved from an online gaming service .",{"@attributes":{"id":"p-0127","num":"0126"},"figref":["FIGS. 14 and 15","FIG. 14"],"b":["1400","1410","1420","1430","1435","1440","1450","1400","1410","1420","1430","1440","1450"]},"Continuing with , operation  illustrates communicating additional animations provided with the video gaming system. Operation  illustrates informing the video game application which animation is currently playing. In operation  the video gaming system is queried for model and view matrices based on one of head, head-and-shoulders, or full-body views. Operation  illustrates querying an online gaming service to retrieve avatar data.","Operation  illustrates that the avatar data is three dimensional data. Operation  illustrates providing access to a plurality of random avatars, and operation  illustrates specifying a male or female body for one of the plurality of random avatars. In operation  avatar data is retrieved from profiles on the video gaming system that are not currently signed in.","Any of the above mentioned aspects can be implemented in methods, systems, computer readable media, or any type of manufacture. For example, per , a computer readable medium can store thereon computer executable instructions for instantiating an API for allowing a video game application executing in a video game system to render one or more avatars at a rendering destination selected by the video game application. Such media can comprise a first subset of instructions for exposing an interface for allowing the video game application to access data for rendering the avatar to a render target or texture selected by the video game application . It will be appreciated by those skilled in the art that additional sets of instructions can be used to capture the various other aspects disclosed herein, and that the three presently disclosed subsets of instructions can vary in detail per the present disclosure.","For example, the instructions can further comprise instructions  for communicating additional animations provided by the video gaming system. The instructions can further comprise instructions for informing the video game application which animation is currently playing , and instructions for querying the video gaming system for model and view matrices based on one of head, head-and-shoulders, or full-body views.","For example, the instructions can further comprise instructions  for querying an online gaming service to retrieve avatar data. The instructions can further comprise instructions for providing access to a plurality of random avatars , and retrieving avatar data from profiles on the video gaming system that are not currently signed in.",{"@attributes":{"id":"p-0133","num":"0132"},"figref":["FIGS. 17 and 18","FIG. 17"],"b":["1700","1710","1720","1730","1740","1750","1700","1710","1720","1730","1740","1750"]},"Continuing with , operation  illustrates that the video gaming system includes an avatar renderer. Operation  illustrates allowing the avatar renderer to render said avatar to a destination provided by the video game application. Operation  illustrates querying an online gaming service to retrieve avatar data released after the video game application is released, and in operation  the API comprises avatar asset retrieval logic that can be updated independently of the video game application.","Exemplary Gaming and Computing Environments","The above discussed computing devices and accessories can be embodied as gaming consoles, music players, personal computers, controllers, remote control devices and other such devices having different, similar, or the same platforms. Referring to , a block diagram shows an exemplary multimedia console that can be used in conjunction with the various accessories with lighting activation by proximity and motion capabilities.","This console, which includes a game oriented console or a PC, can comprise, for example, digital audio processing functionality. Specifically, in , a multimedia console  is shown, with a central processing unit (CPU)  having a level 1 (L1) cache , a level 2 (L2) cache , and a flash ROM (Read-only Memory) . The level 1 cache  and level 2 cache  can temporarily store data and hence reduce the number of memory access cycles, thereby improving processing speed and throughput. The flash ROM  can store executable code that is loaded during an initial phase of a boot process when the multimedia console  is powered. Alternatively, the executable code that is loaded during the initial boot phase can be stored in a flash memory device (not shown). Further, ROM  can be located separately from the CPU . These memory devices can cache parts or the entirety of the above mentioned applications, programs, applets, managed code, and so on. Moreover, these memory devices can store sensitive and non-sensitive information on a memory unit-by-memory unit basis, as was discussed above. Any of such information can be used at least in part to aid in animating avatars as was discussed above.","A graphics processing unit (GPU)  and a video encoder\/video codec (coder\/decoder)  can form a video processing pipeline for high speed and high resolution graphics processing. Data can be carried from the graphics processing unit  to the video encoder\/video codec  via a bus. The video processing pipeline can output data to an A\/V (audio\/video) port  for transmission to a television or other display. A memory controller  can be connected to the GPU  and CPU  to facilitate processor access to various types of memory , such as, but not limited to, a RAM (Random Access Memory). Thus, various types of information, whether sensitive or not, or even parts of various types of information, can be stored in the various types of memories discussed above, depending on the need.","The multimedia console  can include an I\/O controller , a system management controller , an audio processing unit , a network interface controller , a first USB host controller , a second USB controller  and a front panel I\/O subassembly  that can be preferably implemented on a module . The USB controllers  and  can serve as hosts for peripheral controllers ()-(), a wireless adapter , and an external memory unit  (e.g., flash memory, external CD\/DVD ROM drive, removable media, etc.). Such peripheral controllers ()-() can have various types of lighting displays that is triggered by proximity and motion. Moreover, the network interface  and\/or wireless adapter  can provide access to a network (e.g., the Internet, home network, etc.) and can be any of a wide variety of various wired or wireless interface components including an Ethernet card, a modem, a Bluetooth module, a cable modem, and the like.","System memory  can be provided to store application data that is loaded during the boot process. A media drive  can be provided and can comprise a DVD\/CD drive, hard drive, or other removable media drive, etc. The media drive  can be internal or external to the multimedia console . Application data can be accessed via the media drive  for execution, playback, etc. by the multimedia console . The media drive  can be connected to the I\/O controller  via a bus, such as a Serial ATA bus or other high speed connection (e.g., IEEE 1394). Additional to such application data, other information can be stored on the console  that will aid in the communication between peripheral\/accessory device controllers and the console  itself.","The system management controller  can provide a variety of service functions to assure the availability of the multimedia console . The audio processing unit  and an audio codec  can form a corresponding audio processing pipeline with high fidelity, three dimensional, surround, and stereo audio processing according to aspects of the presently disclosed subject matter above. Audio data can be carried between the audio processing unit  and the audio codec  via a communication link. The audio processing pipeline can output data to the A\/V port  for reproduction by an external audio player or device having audio capabilities.","The front panel I\/O subassembly  can support the functionality of the power button  and the eject button , as well as any LEDs (light emitting diodes) or other indicators exposed on the outer surface of the multimedia console . A system power supply module  can provide power to the components of the multimedia console . A fan  can cool the circuitry within the multimedia console .","The CPU , GPU , memory controller , and various other components within the multimedia console  can be interconnected via one or more buses, including serial and parallel buses, a memory bus, a peripheral bus, and a processor or local bus using any of a variety of bus architectures.","When the multimedia console  is powered on or rebooted, application data can be loaded from the system memory  into memory  and\/or caches ,  and executed on the CPU . Such application data can include some of the online derived data, including the avatar packages discussed above. The application can also present a graphical user interface that provides a consistent user experience when navigating to different media types available on the multimedia console . Users can accessorize avatars using such a user interface. In operation, applications and\/or other media contained within the media drive  can be launched or played from the media drive  to provide additional functionalities to the multimedia console . And, such media, including game video game applications can be the basis for accessorizing avatars.","The multimedia console  can be operated as a standalone system by simply connecting the system to a television or other display. In this standalone mode, the multimedia console  can allow one or more users to interact with the system, watch movies, listen to music, and the like. However, with the integration of broadband connectivity made available through the network interface  or the wireless adapter , the multimedia console  can further be operated as a participant in a larger network community of computing devices. As such a participant, it can interact with computing devices, whether PCs or servers, and receive information that can be eventually stored.","Next,  illustrates an exemplary networking environment for subject matter discussed with reference to  and -. The above discussed console  can correspond to any one of the aforementioned computing devices, or it can be distributed over such devices. It can interact with various other objects  and storage devices  via a communications network\/bus , where such objects  and devices  can correspond to other computing devices (whether hardware, firmware, or software). The controllers ()-() can communicate with the console  in a wired manner or wirelessly, over close distances or over remote distances using the shown communications network . Such communication can be aided by various computing devices , ,  connected to the communications network .","The term circuitry used through the disclosure can include specialized hardware components. In the same or other embodiments circuitry can include microprocessors configured to perform function(s) by firmware or switches. In the same or other example embodiments circuitry can include one or more general purpose processing units and\/or multi-core processing units, etc., that can be configured when software instructions that embody logic operable to perform function(s) are loaded into memory, e.g., RAM and\/or virtual memory. In example embodiments where circuitry includes a combination of hardware and software, an implementer may write source code embodying logic and the source code can be compiled into machine readable code that can be processed by the general purpose processing unit(s).","Finally, it should also be noted that the various techniques described herein can be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the presently disclosed subject matter, or certain aspects or portions thereof, can take the form of program code (i.e., instructions) embodied in tangible storage media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, where, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the subject matter.","In the case of program code execution on programmable computers, the computing device can generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that can utilize the creation and\/or implementation of domain-specific programming models aspects of the present invention, e.g., through the use of a data processing application programming interface (API) or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language can be a compiled or interpreted language, and combined.","Finally, while the present disclosure has been described in connection with a plurality of exemplary aspects, as illustrated in the various figures and discussed above, it is understood that other similar aspects can be used or modifications and additions can be made to the described aspects for performing the same function of the present disclosure without deviating therefrom. For example, in various aspects of the disclosure, methods, systems, and computer readable media were described configured for providing animation accessorization of avatars. However, other equivalent mechanisms to these described aspects are also contemplated by the teachings herein. Therefore, the present disclosure should not be limited to any single aspect, but rather construed in breadth and scope in accordance with the appended claims.","Initialization and Shutdown Functions","XAvatarInitialize","Video game applications may initialize the avatar system before calling any other avatar functions.",{"@attributes":{"id":"p-0151","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarInitialize("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN","XAVATAR_COORDINATE_SYSTEM"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"eCoordinateSystem,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN","DWORD","dwFlags,"]},{"entry":[{},"IN","DWORD"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dwJointsBufferCount,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN","LPDIRECT3DDEVICE9","device"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["eCoordinateSystem indicates whether the video game application is using a left-handed or right-handed coordinate system.","dwFlags is currently used to specify whether the renderer is enabled, with XAVATAR_INITIALIZE_FLAGS_ENABLERENDERER.","dwJointsBufferCount is ignored when the renderer is not enabled, but otherwise must be between 2 and 4 inclusively, and specifies how many joint buffers should be allocated per avatar renderer. This is because when an avatar renderer is updated to the latest frame of animation, the built joint matrices are copied into a vertex buffer that can be accessed by the vertex shader during rendering. To prevent contention on this locked buffer, multiple buffers should be used. A debug message is displayed when such contention occurs, indicating that this value should be increased.","device is also ignored when the renderer is not enabled. If the renderer is enabled, the device supplied will be used internally to prepare the avatar rendering pipeline (creating shaders, etc.)\n\nReturn Values:\n","Returns S_OK if successful, an error code otherwise.\n\nRemarks:\n","Initialization allocates memory for the avatar system based on the input parameters.","XAvatarInitialize always allocates approximately 2 megabytes to cache avatar assets. If the dwFlags parameter has the AVATAR_INITIALIZE_FLAGS_ENABLERENDERER bit set, approximately 500 kilobytes are allocated to store shared idle animations. Allocations are made from the regular heap.\n\nXAvatarShutdown\n\nShuts down the avatar system and frees memory and resources used by the system.\n"]}}}},{"@attributes":{"id":"p-0152","num":"0158"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"VOID"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarShutdown("]},{"entry":[{},"\u2003VOID"]},{"entry":[{},"\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["Video game applications can initialize and shut down the avatar system repeatedly while running, provided that each call to XAvatarInitialize is paired with a matching call to XAvatarShutdown before XAvatarInitialize is called again. Video game applications might do this if using avatars in the game lobby, but not during gameplay. The avatar system could be initialized when entering the lobby, and shut down when leaving the lobby.","Memory and system resources claimed by calls to XAvatarInitialize will not be released until XAvatarShutdown has been called.\n\nMetadata Functions\n\nBefore retrieving an avatar's assets for display, the avatar's metadata must be retrieved. This metadata is stored in the user's profile and is a binary blob that contains internal information about the avatar's composition. The metadata format is opaque to the video game application.\n\nXAvatarGetMetadataByXuid\n\nThe video game application may retrieve metadata for one or more X profiles:\n"]}}}},{"@attributes":{"id":"p-0153","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarGetMetadataByXuid("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN","DWORD"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dwUserIndexRequester,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN","DWORD"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dwXuidCount,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN","const XUID*","pXuids,"]},{"entry":[{},"OUT","HRESULT*","pResults,"]},{"entry":[{},"OUT","XAVATAR_METADATA*"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pAvatarMetadata,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"IN OUT","PXOVERLAPPED","pOverlapped"]},{"entry":[{},"\u2002);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["dwUserIndexRequester is the local user index of the player requesting the metadata.","dwXuidCount is the number of XUIDs in the pXuids array.","pXuids is an array of the XUIDs whose metadata is to be retrieved.","pResults point to the buffer where result codes are returned indicating success or failure in retrieving avatar metadata for specific XUIDs. Treat this buffer as an array of dwXuidCount HRESULTs, where the value of pResults[n] is the result of retrieving metadata for pXuids[n].","pResultBuffer is the buffer where results will be returned. On successful completion, this buffer can be treated as an array of XAVATAR_METADATA. If pResults[n] indicates failure, then the XAVATAR_METADATA in pAvatarMetadata[n] will be invalid.","pOverlapped is a pointer to an XOVERLAPPED structure used to monitor the status of the retrieval operation. If pOverlapped is NULL, the operation is completed synchronously.\n\nReturns:\n","Returns ERROR_SUCCESS if the function succeeds and returns immediately, ERROR_IO_PENDING to indicate that the asynchronous overlapped operation is pending, or ERROR_FUNCTION_FAILED.","If ERROR_FUNCTION_FAILED is returned, XGetOverlappedExtendedError may be called to retrieve extended error information.\n\nXAvatarGetMetadataLocalUser\n\nRetrieves metadata for local users.\n"]}}}},{"@attributes":{"id":"p-0154","num":"0170"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarGetMetadataLocalUser("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN","DWORD"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dwUserIndex,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"OUT","XAVATAR_METADATA*"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pAvatarMetadata,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN OUT","XOVERLAPPED*","pOverlapped"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":{"@attributes":{"id":"ul0007-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["dwUserIndex is the local user index of the player whose avatar metadata is being requested.","pAvatarMetadata: On successful completion, this pointer points to the avatar metadata for the indicated player.","pOverlapped is a pointer to an XOVERLAPPED structure used to monitor the status of the retrieval operation. If pOverlapped is NULL, the operation is completed synchronously.\n\nReturns:\n","Returns ERROR_SUCCESS if the function succeeds and returns immediately, ERROR_IO_PENDING to indicate that the asynchronous overlapped operation is pending, or ERROR_FUNCTION_FAILED.","If ERROR_FUNCTION_FAILED is returned, XGetOverlappedExtendedError may be called to retrieve extended error information.\n\nXAvatarGetMetadataRandom\n\nSome video game applications will want access to a range of random avatars for things like crowds. This function returns metadata for one or more randomly generated avatars.\n"]}}}},{"@attributes":{"id":"p-0155","num":"0176"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarGetMetadataRandom("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN","XAVATAR_BODY_TYPE_MASK"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BodyTypeMask,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN","DWORD"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dwAvatarCount,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"OUT","XAVATAR_METADATA*"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pAvatarMetadata,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"IN OUT","PXOVERLAPPED","pOverlapped"]},{"entry":[{},"\u2002);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":{"@attributes":{"id":"ul0009-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":["BodyTypeMask is a bit mask that specifies which body type (male or female) the random avatar should use.","dwAvatarCount specifies the number of random avatars to be created.","pAvatarMetadata: On successful completion, this buffer can be treated as an array of XAVATAR_METADATA, with dwAvatarCount elements.","pOverlapped is a pointer to an XOVERLAPPED structure used to monitor the status of the retrieval operation. If pOverlapped is NULL, the operation is completed synchronously.\n\nReturns:\n","Returns ERROR_SUCCESS if the function succeeds and returns immediately, ERROR_IO_PENDING to indicate that the asynchronous overlapped operation is pending, or ERROR_FUNCTION_FAILED.","If ERROR_FUNCTION_FAILED is returned, XGetOverlappedExtendedError may be called to retrieve extended error information.\n\nXavatarGetMetadataSignedOutProfileCount\n\nReturns the count of profiles on the console but not currently signed in.\n"]}}}},{"@attributes":{"id":"p-0156","num":"0183"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"DWORD"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarGetMetadataSignedOutProfileCount( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":{"@attributes":{"id":"ul0011-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":["Returns the number of profiles on the console that are not currently signed in.\n\nRemarks:\n","Use the returned number as an index to enumerate signed-out profiles with XAvatarGetMetadataSignedOutProfile.\n\nXavatarGetMetadataSignedoutProfile\n\nRetrieves avatar metadata for a signed out profile.\n"]}}}},{"@attributes":{"id":"p-0157","num":"0186"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarGetMetadataSignedOutProfile("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IN","DWORD"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dwProfileIndex,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"OUT","XAVATAR_METADATA*"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pAvatarMetadata,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"IN OUT","PXOVERLAPPED","pOverlapped"]},{"entry":[{},"\u2002);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":{"@attributes":{"id":"ul0013-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":["dwProfileIndex is the index of the requested profile. This value should range from zero to one less than the count returned by XavatarGetMetadataSignedOutProfileCount.","pAvatarMetadata is the buffer that will hold the requested metadata.","pOverlapped is a pointer to an XOVERLAPPED structure used to monitor the status of the retrieval operation. If pXOverlapped is NULL, the operation is completed synchronously.\n\nReturns:\n","Returns ERROR_SUCCESS if the function succeeds and returns immediately, ERROR_IO_PENDING to indicate that the asynchronous overlapped operation is pending, or ERROR_FUNCTION_FAILED.","If ERROR_FUNCTION_FAILED is returned, XGetOverlappedExtendedError may be called to retrieve extended error information.\n\nRemarks:\n","Video game applications would use this function to get avatar metadata for a user's friends and family, to put \u201cknown\u201d avatars into the game.\n\nXAvatarMetadataGetBodyType\n\nReturns the body type\u2014male or female\u2014from an avatar's metadata:\n"]}}}},{"@attributes":{"id":"p-0158","num":"0193"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"XAVATAR_BODY_TYPE"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarMetadataGetBodyType("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN","CONST XAVATAR_METADATA*","pMetadata"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":{"@attributes":{"id":"ul0015-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":["pMetadata is a pointer to a valid XAVATAR_METADATA blob.\n\nReturns:\n","An XAVATAR_BODY_TYPE with the appropriate bit set to indicate body type.\n\nRemarks:\n","Metadata blobs are opaque to video game applications, and their format is subject to change. Use this function rather than attempting to extract this information from the metadata directly.\n\nAvatar Asset Data Functions\n\nIf a video game application wishes to render and animate avatars using its own system, it must first retrieve the underlying data that defines those avatars.\n\nXAvatarGetAssetsResultSize\n\nReturns the size of the data buffers that will hold avatar asset data.\n"]}}}},{"@attributes":{"id":"p-0159","num":"0197"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAMINLINE"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarGetAssetsResultSize("]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XAVATAR_COMPONENT_MASK"]},{"entry":[{},"ComponentMask,"]},{"entry":[{},"\u2003\u2003OUT \u2003\u2003\u2002DWORD*"]},{"entry":[{},"pcbResultBuffer,"]},{"entry":[{},"\u2003\u2003OUT \u2003\u2003\u2002DWORD*"]},{"entry":[{},"pcbGpuResourceBuffer"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":{"@attributes":{"id":"ul0017-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":["ComponentMask is a bitfield used to specify which assets are required. Combine XAVATAR_COMPONENT_MASK values to specify the required assets. Video game applications that want to retrieve the entire body should use XAVATAR_COMPONENT_MASK_ALL.","pcbResultBuffer: Points to a DWORD that, on successful completion, contains the necessary size, in bytes, of the asset data buffer required to hold the requested assets.","pcbGpuResourceBuffer: Points to a DWORD that, on successful completion, contains the necessary size, in bytes, of the GPU resource buffer required to hold the requested assets.\n\nReturns:\n","Returns S_OK on success, or an error code.\n\nRemarks:\n\nThe video game application must then allocate two buffers of these sizes to hold the retrieved avatar data. The second of these buffers is most appropriately done as a physical allocation, on a 4096 byte boundary, so that the textures it will contain can be constructed in place.\n\nXAvatarGetAssets\n\nLoads the assets required to render an avatar.\n"]}}}},{"@attributes":{"id":"p-0160","num":"0202"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI",{}]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarGetAssets("]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003CONST XAVATAR_METADATA*","pMetadata,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XAVATAR_COMPONENT_MASK"]},{"entry":[{},"ComponentMask,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003DWORD"]},{"entry":[{},"cbResultBuffer,"]},{"entry":[{},"\u2003\u2003OUT \u2003\u2003\u2002XAVATAR_ASSETS*"]},{"entry":[{},"pResultBuffer,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003DWORD"]},{"entry":[{},"cbGpuResourceBuffer,"]},{"entry":[{},"\u2003\u2003OUT \u2003\u2003\u2002VOID*"]},{"entry":[{},"pGpuResourceBuffer,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003OUT PXOVERLAPPED","pOverlapped"]},{"entry":[{},");"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":{"@attributes":{"id":"ul0019-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":["pMetadata points to the metadata for the avatar whose assets are being retrieved.","ComponentMask is a bitfield used to specify which assets are required. Combine XAVATAR_COMPONENT_MASK values to specify the required assets. Video game applications that want to retrieve the entire body should use XAVATAR_COMPONENT_MASK_ALL.","cbResultBuffer is the size in bytes of the buffer pointed to by pResultBuffer.","pResultBuffer is the buffer that will hold the asset data.","cbGpuResourceBuffer is the size in bytes of the buffer pointed to by pGpuResourceBuffer.","pGpuResourceBuffer is the buffer that will hold GPU resources used for the avatar.","pOverlapped is a pointer to an XOVERLAPPED structure used to monitor the status of the retrieval operation. If pXOverlapped is NULL, the operation is completed synchronously.\n\nReturns:\n","Returns ERROR_SUCCESS if the function succeeds and returns immediately, ERROR_IO_PENDING to indicate that the asynchronous overlapped operation is pending, or ERROR_FUNCTION_FAILED.","If ERROR_FUNCTION_FAILED is returned, XGetOverlappedExtendedError may be called to retrieve extended error information.\n\nRemarks:\n\nThis operation can involve queries to X LIVE to retrieve the entire set of three dimensional assets that the avatar is currently wearing or accessorized with. Because of the possibility of X LIVE queries, particularly in future console system updates, the video game application should expect this operation to take several seconds. Upon completion, the avatar data is written into the video game application-provided result buffer.\n\nThe current definitions for this format are given in Appendix A.\n\nVarious members of the hierarchy of structures inside pResultBuffer will point to buffers stored inside pGpuResourceBuffer, particularly for items such as textures and vertices. Textures are the first items placed in pGpuResourceBuffer due to their large alignment requirements. While not mandatory, it is recommended that the pGpuResourceBuffer buffer be a physical allocation on a 4096 byte boundary so that the textures can be constructed in place.\n\nIt will also be possible to cancel an active XAvatarGetAssets request using XCancelOverlapped.\n\nIXAvatarRenderer Functions\n\nXAvatarCreateRenderer\n\nCreates a new IXAvatarRenderer object for the given avatar.\n"]}}}},{"@attributes":{"id":"p-0161","num":"0212"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"XAPI"},{"entry":"HRESULT"},{"entry":"WINAPI"},{"entry":"XAvatarCreateRenderer("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003IN \u2003\u2003\u2003PXAVATAR_METADATA","pMetadata,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003\u2002IN \u2003\u2003\u2003\u2003XAVATAR_COMPONENT_MASK"},{"entry":"ComponentMask,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003IN \u2003\u2003\u2003XAVATAR_SHADOW_SIZE","eAvatarShadowSize,"]},{"entry":["\u2003\u2003OUT \u2003\u2003\u2002IXAVATARRENDERER**","\u2003\u2003ppAvatarRenderer"]},{"entry":");"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":{"@attributes":{"id":"ul0021-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":["pMetadata points to the metadata for the avatar to be rendered by this IXAvatarRenderer object.","ComponentMask specifies which parts of the avatar are to be rendered.","eAvatarShadowSize indicates what size shadow map the renderer should use. Specify XAVATAR_SHADOW_SIZE_NONE to disable shadow mapping, XAVATAR_SHADOW_SIZE_SMALL to use a small (512\u00d7512 pixel) shadow map, and XAVATAR_SHADOW_SIZE_LARGE to use a large (1024\u00d71024 pixel) shadow map. Note that using a shadow map causes the renderer to allocate additional memory, as described in Remarks.","ppAvatarRenderer the address of a pointer which, on successful return, points to an","IXAvatarRenderer object which has had AddRef called once.\n\nReturns:\n","Returns S_OK on success, or an error code.\n\nRemarks:\n","This function allocates the following amount of memory:"]}}}},{"@attributes":{"id":"p-0162","num":"0220"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["~850KB +","(avatar model and assets)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(eAvatarShadowSize == XAVATARSHADOW_SIZE_NONE ?"},{"entry":"~0MB) +"},{"entry":"(eAvatarShadowSize == XAVATARSHADOW_SIZE_SMALL ?"},{"entry":"~0.5MB) +"},{"entry":"(eAvatarShadowSize == XAVATARSHADOW_SIZE_LARGE ?"},{"entry":"~1.0MB)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(self-shadow map)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"ul":{"@attributes":{"id":"ul0023","list-style":"none"},"li":{"@attributes":{"id":"ul0023-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":["Most of the \u02dc850 KB is comprised of physical allocations because these are textures, vertices, and so on.","AddRef and Release are used to manage the lifetime of the renderer.","Note that while this function returns immediately, the renderer takes some amount of time to retrieve all assets before it will render the avatar. Because avatar retrieval can involve making multiple requests to X LIVE, it could be several seconds before the renderer is capable of displaying the avatar. If IXAvatarRenderer::Render is called before the renderer has finished initializing, it will render a generic \u201cwaiting\u201d graphic.\n\nIXAvatarRenderer::GetStatus\n\nReturns the current rendering status of the IXAvatarRenderer object.\n"]}}}},{"@attributes":{"id":"p-0163","num":"0224"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"IXAvatarRenderer::GetStatus("]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":{"@attributes":{"id":"ul0025-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":["Returns S_OK if the renderer is prepared to render the avatar. Returns E_PENDING if the avatar is still being retrieved. Returns E_FAIL if the renderer has encountered an error.","Because avatar retrieval can involve making multiple requests to X Live, it could be several seconds before an avatar is displayed after creating the renderer.\n\nIXAvatarRenderer::Update\n\nUpdates the avatar's geometry to the specified time in the current animation.\n"]}}}},{"@attributes":{"id":"p-0164","num":"0227"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"IXAvatarRenderer::Update("]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003FLOAT"]},{"entry":[{},"fElapsedTime"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0027","list-style":"none"},"li":{"@attributes":{"id":"ul0027-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0028","list-style":"none"},"li":["fElapsedTime is the number of milliseconds since Update was last called.\n\nReturns:\n","S_OK on success, or a failure code.\n\nRemarks:\n","IXAvatarRenderer::Update should be called every time through the video game application's render loop, before the avatar is rendered.","Video game applications can pause, speed up or slow down an animation by passing appropriate values for the fElapsedTime parameter. A value of 0 will pause the video, while values smaller than the actual elapsed time will slow the animation, and values larger than the actual elapsed time will speed the animation.\n\nIXAvatarRenderer::Render Shadow\n\nGenerates the shadow map for the current state of the avatar.\n"]}}}},{"@attributes":{"id":"p-0165","num":"0232"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"IXAvatarRenderer::RenderShadow("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003LPDIRECT3DDEVICE9","pDevice,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XMMATRIX","Model,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XMMATRIX","View,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XMMATRIX","Projection"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":{"@attributes":{"id":"ul0029-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0030","list-style":"none"},"li":["pDevice is a pointer to the current render target.","Model is the current model transform","View is the current view transform","Projection is the current projection transform\n\nReturns:\n","S_OK on success, or an error code.\n\nRemarks:\n","IXAvatarRenderer::Render Shadow writes to EDRAM.","IXAvatarRenderer::RenderShadow should be called after","IXAvatarRenderer::Update has been called to update the avatar's position, and before","IXAvatarRenderer::Render is called to render the avatar.\n\nIXAvatarRenderer::Render\n\nRenders the avatar to the given target.\n"]}}}},{"@attributes":{"id":"p-0166","num":"0242"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"IXAvatarRenderer::Render("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003LPDIRECT3DDEVICE9","pDevice,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XMMATRIX","Model,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XMMATRIX","View,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XMMATRIX","Projection"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0031","list-style":"none"},"li":{"@attributes":{"id":"ul0031-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":["pDevice is a pointer to the current render target.","Model is the current model transform","View is the current view transform","Projection is the current projection transform\n\nReturns:\n","S_OK on success, or an error code.\n\nRemarks:\n\nIXAvatarRenderer::Render should be called after IXAvatarRenderer::Update has updated the animation state and IXAvatarRenderer::RenderShadow has rendered the shadow map to match the latest animation state.\n\nThe video game application must set a render target and depth buffer for *pDevice before calling this function.\n\nIXAvatarRenderer::GetMatrices\n\nRetrieves the appropriate model and view transform matrices for one of three standard views: head; head-and-shoulders; or full-body.\n"]}}}},{"@attributes":{"id":"p-0167","num":"0248"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"IXAvatarRenderer::GetMatrices("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XAVATAR_RENDER_VIEW","eView,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003OUT \u2003\u2003XMMATRIX*","pModel,"]},{"entry":[{},"\u2003\u2003OUT \u2003\u2003XMMATRIX*","pView"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0033","list-style":"none"},"li":{"@attributes":{"id":"ul0033-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0034","list-style":"none"},"li":["eView specifies the standard view whose transform matrices are requested","pModel points to an XMMATRIX. On success, the matrix is set to the requested model transform matrix.","pView points to an XMMATRIX. On success, the matrix is set to the requested view transform matrix.\n\nReturns:\n","S_OK on success, or an error code.\n\nRemarks:\n\nVideo game applications should call this function to retrieve new after each call to IXAvatarRenderer::Update, and then pass the new matrices to both IXAvatarRenderer::RenderShadow and IXAvatarRenderer::Render. This will ensure that the avatar is tracked correctly even when animating. This is particularly important for the zoomed-in head-shot.\n\nIt's also important that the same matrices are passed to both IXAvatarRenderer::RenderShadow and IXAvatarRenderer::Render so that the shadow map matches the render.\n\nXAvatarRenderWaiting\n\nRenders the \u201cwaiting\u201d animation used to indicate that avatar metadata is still being downloaded.\n"]}}}},{"@attributes":{"id":"p-0168","num":"0253"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarRenderWaiting("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003LPDIRECT3DDEVICE9","device,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XMMATRIX"]},{"entry":[{},"modelMatrix,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XMMATRIX","viewMatrix,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003XMMATRIX"]},{"entry":[{},"projectionMatrix"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0035","list-style":"none"},"li":{"@attributes":{"id":"ul0035-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0036","list-style":"none"},"li":["pDevice is a pointer to the current render target.","Model is the current model transform","View is the current view transform","Projection is the current projection transform\n\nReturns:\n","S_OK on success, or an error code.\n\nRemarks:\n","Video game applications should use this function when they wish to display an avatar but are still waiting for metadata to be returned from the LIVE service.","The three matrices should be the same as those that would be provided to IXAvatarRenderer::Render.\n\nIXAvatarAnimation Functions\n\nXAvatarLoadAnimation\n\nCreates an IXAvatarAnimation object by loading a stock animation from the avatar system.\n"]}}}},{"@attributes":{"id":"p-0169","num":"0261"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI",{}]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarLoadAnimation("]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003const XAVATAR_ASSETID *","AssetId,"]},{"entry":[{},"\u2003\u2003OUT \u2003\u2003IXAVATARANIMATION**"]},{"entry":[{},"ppAvatarAnimation,"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0037","list-style":"none"},"li":{"@attributes":{"id":"ul0037-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0038","list-style":"none"},"li":["AssetId is one of a defined set of constants representing the stock animations included in the avatar system. A set of animation identifiers is provided in xavatar.h: XAVATAR_ASSETID ANIMATION_CLAP, XAVATAR_ASSETID ANIMATION WAVE, etc.","ppAvatarAnimation is the address of a pointer to the returned IXAvatarAnimation object.\n\nReturns:\n","S_OK on success, or an error code.\n\nRemarks:\n","This function allocates the following amount of memory:\n        \n        ","This operation can involve queries to X LIVE. Because of the possibility of X LIVE queries, the video game application should expect this operation to take several seconds. Video game applications should use the IXAvatarAnimation::GetStatus function to determine when an animation is ready to be used.","AddRef and Release are used to manage the lifetime of an IXAvatarAnimation object.\n\nXAvatarLoadAnimationFromBuffer\n\nCreates an IXAvatarAnimation object from a memory buffer containing an animation description.\n"]}}}},{"@attributes":{"id":"p-0170","num":"0269"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"XAvatarLoadAnimationFromBuffer("]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003VOID*"]},{"entry":[{},"pAnimationBuffer,"]},{"entry":[{},"\u2003\u2003IN \u2003\u2003\u2003DWORD"]},{"entry":[{},"cbAnimationBuffer,"]},{"entry":[{},"\u2003\u2003OUT \u2003\u2003\u2002IXAVATARANIMATION**"]},{"entry":[{},"ppAvatarAnimation,"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0040","list-style":"none"},"li":{"@attributes":{"id":"ul0040-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0041","list-style":"none"},"li":["pAnimationBuffer points to the animation description.","cbAnimationBuffer specifies the size, in bytes, of the animation buffer.","ppAvatarAnimation is the address of a pointer to the returned IXAvatarAnimation object.\n\nReturns:\n","S_OK on success, or an error code.\n\nRemarks:\n","This function allocates the following amount of memory:\n        \n        ","This operation can involve queries to X LIVE. Because of the possibility of X LIVE queries, the video game application should expect this operation to take several seconds. Video game applications should use the IXAvatarAnimation::GetStatus function to determine when an animation is ready to be used.","AddRef and Release are used to manage the lifetime of an IXAvatarAnimation object.\n\nIXAvatarAnimation::GetStatus\n\nReturns the status of the IXAvatarAnimation object.\n"]}}}},{"@attributes":{"id":"p-0171","num":"0278"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI"]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"IXAvatarAnimation::GetStatus("]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0043","list-style":"none"},"li":{"@attributes":{"id":"ul0043-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0044","list-style":"none"},"li":"The return value will typically be S_OK if the animation has been loaded, E_FAIL if the animation has failed to load, or E_PENDING if the avatar is still being loaded. The animation is not available for playback until it has been loaded.\n\nIXAvatarRenderer::PlayAnimations\n\nPlays a sequence of animations.\n"}}}},{"@attributes":{"id":"p-0172","num":"0280"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"XAPI"},{"entry":"HRESULT"},{"entry":"WINAPI"},{"entry":"IXAvatarRenderer::PlayAnimations("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003IN \u2003\u2003DWORD","nAnimationCount,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2002IN \u2003\u2003\u2003LPXAVATARANIMATION*","pAnimations,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2002IN \u2003\u2003\u2003XAVATAR_PLAYANIMATIONS_FLAGS","flags"]},{"entry":"\u2003\u2003);"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0045","list-style":"none"},"li":{"@attributes":{"id":"ul0045-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0046","list-style":"none"},"li":["nAnimationCount Number of IXAvatarAnimation objects in the pAnimations array.","pAnimations Address of an array of IXAvatarAnimation objects.","Flags A combination of XAVATAR_PLAYANIMATIONS_FLAGS value specifying play options for the given list of animations.\n\nReturns\n","S_OK on success, or an error code.\n\nRemarks:\n","Calling this API will clear out any previously-queued animations and will play the supplied sequence of animations.","The flags parameter controls how the animations should be played:\n        \n        "]}}}},{"@attributes":{"id":"p-0173","num":"0290"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"XAPI",{}]},{"entry":[{},"HRESULT"]},{"entry":[{},"WINAPI"]},{"entry":[{},"IXAvatarRenderer::GetCurrentAnimation("]},{"entry":[{},"\u2003\u2003OUT \u2003\u2003\u2003IXAVATARANIMATION**","ppAnimation"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0048","list-style":"none"},"li":{"@attributes":{"id":"ul0048-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0049","list-style":"none"},"li":["ppAnimation On success, ppAnimation points to an IXAvatarAnimation pointer for the current animation.\n\nReturns:\n","This returns S_FALSE and sets ppAnimation to NULL if one of the built-in idle animation is currently playing.\n\nRemarks:\n","The caller is responsible for calling Release on the returned interface when they are finished with it."]}}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing Summary, as well as the following Detailed Description, is better understood when read in conjunction with the appended drawings. In order to illustrate the present disclosure, various aspects of the disclosure are shown. However, the disclosure is not limited to the specific aspects shown. The following figures are included:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 11","FIGS. 1-12"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 12","FIGS. 1-12"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
