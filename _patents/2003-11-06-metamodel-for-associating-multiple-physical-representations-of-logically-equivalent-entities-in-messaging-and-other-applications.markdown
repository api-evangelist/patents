---
title: Meta-model for associating multiple physical representations of logically equivalent entities in messaging and other applications
abstract: A meta-model for creating models of alternative physical representations of logically equivalent entities, such as alternative wire format representations of logically equivalent messages, includes a logical meta-model and a physical meta-model. The logical meta-model provides logical entity component classes for creating a logical model which describes, in a platform and programming language neutral manner (e.g. as an XML schema), the logical structure of the modeled entity as a hierarchy of logical entity components. The physical meta-model provides classes for creating a physical model which describes the alternative physical representations. The physical meta-model includes Base Classes representative of generic physical representations of the logical entity components, with “correspondence associations” being defined between the Base Classes and corresponding logical entity component classes. The physical meta-model further includes at least one set of physical representation-specific, Derived Classes descendent from the Base Classes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07559052&OS=07559052&RS=07559052
owner: International Business Machines Corporation
number: 07559052
owner_city: Armonk
owner_country: US
publication_date: 20031106
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to meta-models (i.e. models for generating models), and more particularly to a meta-model for generating models which represent alternative physical representations of logically equivalent entities, such as alternative wire format representations of logically equivalent messages.","In large enterprises, there is often a need to share data and generally intercommunicate between many operating systems, platforms, and applications. A stumbling block to the goal of intercommunication is the fact that each different computer system may represent messages using a different message protocol or physical \u201cwire format\u201d (i.e. manner of laying out a message on the wire).","For example, in a particular wire format, a message M may be defined to have the following structure:",{"@attributes":{"id":"p-0005","num":"0004"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Message M1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"field 1","type integer","length 2","offset 0"]},{"entry":[{},"field 2","type string","length 5","offset 2"]},{"entry":[{},"field 3","type double","length 8","offset 7"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"In another wire format, the same message M might have a different structure, e.g., where a delimiter is introduced between the fields and the message appears as a single string for example.","In a third wire format which uses tags, the message M may have still another structure in which tags (e.g. \u201c<tagname>\u201d) identify the separate fields.","Distinct wire formats may further differ in terms of numerous other characteristics such as byte alignment, padding characters, and sign conventions, to name but a few. Some of these differences may be due to the use of different platforms or different compilers on distinct machines for example. Disadvantageously, a target computing system using one wire format may be incapable of receiving or accurately representing the message M sent in another wire format without a conversion of the message into a wire format suitable for the target system.","As the number of message formats increases, so too does the complexity of introducing a new format, given that one must be able to convert the new format to each existing format and vice versa. Given N message formats, the conversion problem is essentially an N\u00d7N problem, which can be onerous to solve.","Beyond the messaging realm, any conversion between numerous alternative physical representations of the same underlying information suffers from the same problem. For example, two doctors may use different approaches for capturing patient information. One may use a proprietary PC-based database management system while another may use a Unix-based file system. In this case, inter-office sharing of patient records may be difficult even though the underlying patient information may have the same logical structure (e.g. a patient address having the usual fields, a medical history, etc.).","What is needed is a manner of modeling alternative physical representations of logically equivalent entities in electronic form which supports conversion between alternative physical representations, for use by a developer of computer-based tools for performing entity conversions for example.","A meta-model for creating models of alternative physical representations of logically equivalent entities, such as alternative wire format representations of logically equivalent messages, includes a logical meta-model and a physical meta-model.","The logical meta-model provides logical entity component classes for creating a logical model which describes, in a platform and programming language neutral manner, the logical structure of the modeled entity as a hierarchy of logical entity components (i.e. elements, attributes or types). The logical meta-model may constitute classes representing eXtensible Markup Language (XML) schema components, which may be instantiated to create a logical model of the entity in the form of an XML schema.","The physical meta-model provides classes for creating a physical model which describes the alternative physical representations. The physical meta-model includes Base Classes representative of generic physical representations of the logical entity components for which logical entity component classes are defined, with \u201ccorrespondence associations\u201d being defined between the Base Classes and the corresponding logical entity component classes. The physical meta-model further includes at least one set of physical representation-specific, Derived Classes descendent from the Base Classes. Each set of Derived Classes is associated with a particular physical representation. Alternative physical representations of a particular entity component are each derived from the same Base Class generically representing that component. Each set of Derived Classes may include a default characteristics class whose attributes describe characteristics that are universally applicable to entities of that particular physical representation in the absence of overriding settings. Each Base Class may have an association with the default characteristics class. The absence of a Derived Class for a particular component may be understood to indicate that the component is to take on the default characteristics of the relevant wire format.","If the logical meta-model is insufficient to effectively capture desired logical entity meta-data but it is not desired to extend the logical meta-model (e.g. it is an accepted standard, such as the World Wide Web Consortium (W3C) XML schema standard, from which divergence is not desired), the logical meta-model may effectively be extended through extension classes or additional associations residing in the physical meta-model. For example, the correspondence associations between logical entity component classes in the logical meta-model and corresponding Base Classes of the physical meta-model may be implemented as a mapper class residing in the physical meta-model which has a first association with a logical entity component class and a second association with its corresponding Base Class. Also, if it is desired to carry attributes that are missing from the logical meta-model, then these can be carried in the physical meta-model.","The meta-model is associated with a particular application (e.g. messaging). Different applications may have different meta-models. The operative meta-model is instantiated to create a logical model and associated physical model(s) for the relevant application. Advantageously, the use of a defaults characteristics class in the physical meta-model may reduce redundant entity meta-data, resulting in efficient \u201csparse\u201d models. Conversion between alternative physical representations is facilitated by the correspondence associations between alternative physical representations and their common logical structure. The conversion problem may thus be changed from an N\u00d7N problem to an N\u00d71 problem.","In an exemplary meta-model used for messaging, the logical meta-model provides components (e.g. XML element, attribute or type definition classes) which may be instantiated to represent message components (e.g. fields within the message or the data types of the fields) cumulatively describing the structure of a message. Each set of Derived Classes in the physical meta-model represents the message in a particular wire format (e.g. XML or CWF). The default characteristics class for a wire format represents universal message characteristics, e.g. field delimiters or sign conventions, that are universally applicable to all messages of the wire format within a message set unless they are overridden in other Derived Classes. A message set is a set of messages defined for a particular application, e.g., banking, insurance, or travel. Instantiation of the meta-model produces a logical model (e.g. an XML schema defining the logical structure of a message) and a physical model which efficiently defines the message in a number of alternative wire formats. This model, which can be represented in serialized XML Metadata Interchange (XMI) format, may then be traversed to create a compiled form of the model used for conversion.","In accordance with an aspect of the present invention there is provided a meta-model for defining message models comprising: a logical meta-model capable of defining a logical model describing the logical structure of one or more messages in a platform and programming language neutral manner; and a physical meta-model capable of defining a physical model describing at least one physical representation of the one or more messages whose logical structure is described in the logical model.","In accordance with another aspect of the present invention, there is provided a meta-model for defining entity models comprising: a logical meta-model capable of defining a logical model describing the logical structure of an entity in a platform and programming language neutral manner; and a physical meta-model capable of defining a physical model describing at least one physical representation of the entity whose logical structure is described in the logical model.","Other aspects and features of the present invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.","The figures illustrate UML schemas using the standard nomenclature for UML as set out in, for example, Grady Booch, Ivar Jacobson, James Rumbaugh, \u201cThe Unified Modeling Language User Guide\u201d, Addison-Wesley, 1999, the contents of which are hereby incorporated by reference.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1","b":["10","100","800","10","20","100","800","20","16","22","24"]},"In the present case, the meta-model  and model  pertain to messaging. The purpose of meta-model  is to provide classes for generating a logical model of one or more messages in a platform and programming language independent manner and for generating a physical model of alternative wire format representations of those messages. The model  is an instantiation of the meta-model  and includes such a logical model and physical model. The model  is used to support conversion of messages from one wire format to another as will be described. The meta-model  and model  may be loaded into computing system  from a computer program product  having a computer readable medium, which could be an optical or magnetic disk, tape, or chip for example.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIGS. 2 to 7","FIG. 1","FIG. 2","FIGS. 3 to 7"],"b":["100","100","200","300"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 2"],"b":["200","100","200"]},"The logical meta-model  of the present embodiment includes various classes representative of XML schema components. For example, the abstract XSDComponent class  generically represents an XML schema component and serves as a parent class for the other classes of . The XSDSchema class  serves as a container for all objects defined in a particular XML Schema Definition (XSD) file. The abstract XSDTypeDefinition class  generically represents an XML schema type definition, acting as the parent class for the XSDSimpleTypeDefinition class  and the XSDComplexTypeDefinition class . The XSDSimpleTypeDefinition class  represents simple or basic types, e.g., string or integer. The XSDComplexTypeDefinition class  represents complex types. Complex types are composed of elements, which themselves can have simple or complex types. Element declarations defined locally within a complex type are referred to as local element declarations. Local element declarations can reference a type defined at the root of an XML Schema or they can have their type defined locally and nested within the complex type. Alternatively, element declarations can be included by reference if such declarations are defined at the root of an XML Schema, i.e., if they are declared as global elements.","The XSDElementDeclaration class  represents the basic unit of information in an XML schema, which has a name, a type and possibly attributes. The XSDModelGroupDefinition class  allows elements to be grouped together so that they can be used to build up the content models of complex type. Elements within the group can be constrained to appear in sequence (same order as they are declared), choice (only one of the elements may appear in an instance), or all (all elements within the group may appear once or not at all and they may appear in any order).","The logical meta-model  includes further classes representative of various other XML schema components. Like the classes already briefly described, these classes will be familiar to those skilled in the art.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIGS. 3 to 7","b":["300","100"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","200"]},"The physical meta-model  includes a MRMsgCollection class  which is representative of a message collection. A message collection is a container for definitions of one or more messages in both logical form and physical form, with the physical form possibly comprising multiple alternative physical representations of the same message(s) in different wire formats. When serialized, an instantiated message collection comprises a .xsd file containing a logical model and a .msd file of the same name containing a corresponding physical model in the present embodiment. The MRMsgCollection class  has a containment relationship with the MRMessage class  which represents a wire format neutral physical message. The MRMessage class  is descendent from the abstract MRBaseElement class  which is itself descendent from the abstract MRBase class . The MRBase class  is the topmost abstract class and contains attributes which are applicable to all objects in the physical meta-model . The MRBaseElement class  contains additional attributes which help to identify the message set in which the respective physical meta-model object was created or last modified.","As shown in , the abstract MRBaseElement class  acts as a parent class for many Base Classes of the physical meta-model , including the MRAttribute class , the MRLocalElement class , the MRGlobalElement class , the MRElementRef class , the MRSimpleType class , the MRAttributeGroup class , the MRGroupRef class , the MRAttributeGroupRef class , the MRLocalGroup class , the MRGlobalGroup class , and the MRComplexType class . The correlation of these physical meta-model Base Classes with classes of the logical meta-model  is shown in Table I.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Correlation between Physical Meta-Model Base Classes and"},{"entry":"Logical Meta-Model Classes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Physical Meta-Model Class","Corresponding Logical Meta-Model Class"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"MRAtttribute class 312","XSDAttributeDeclaration 216"]},{"entry":[{},"MRLocalElement 314","XSDElementDeclaration 212 (local element)"]},{"entry":[{},"MRGlobalElement 316","XSDElementDeclaration 212 (global element)"]},{"entry":[{},"MRElementRef 318","XSDElementDeclaration 212"]},{"entry":[{},"MRSimpleType 320","XSDSimpleTypeDefinition 208"]},{"entry":[{},"MRAttributeGroup 322","XSDAttributeGroupDefinition 218"]},{"entry":[{},"MRGroupRef 324","XSDModelGroupDefinition 214"]},{"entry":[{},"MRAttributeGroupRef 326","XSDAttributeGroupDefinition 218"]},{"entry":[{},"MRLocalGroup 328","XSDModelGroupDefinition 214 (local)"]},{"entry":[{},"MRGlobalGroup 330","XSDModelGroupDefinition 214 (global)"]},{"entry":[{},"MRComplexType 332","XSDComplexTypeDefinition 210"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"As will become apparent, the correlations shown in Table I are represented in the instantiated model  by way of correspondence associations (defined below) between corresponding physical and logical components.","The MRAttributeGroup class , MRLocalGroup class , MRGlobalGroup class , and MRComplexType class  each have a pair of attributes \u201ccontent\u201d and \u201ccomposition\u201d.","The content attribute is specific to messaging applications and is not expressly defined in the W3C XML Schema recommendation referenced above. This attribute has three enumerations representing alternative types of constraints of a message's elements that may be applicable to a message received \u201con the wire.\u201d The added enumerations provide a mechanism for use by a developer of tools which convert messages between alternative wire formats for indicating (to, e.g., a message parser referencing the model  or a compiled version thereof) that it is acceptable if additional elements exist in a message bit stream as long as it has all the elements as defined in the logical model in the appropriate order. That is, the enumerations may be used to indicate that a particular message should match a partial message definition of the logical model when it is received, and in the case where the received message has additional elements, the additional elements may be ignored or processed by applications that are aware of the presence of additional elements.","The three added content type enumerations are:\n\n","The composition attribute extends the standard composition type attribute supported by XML schemas with enumerations useful for messaging applications, which enumerations are indicative of possible composition types for physical messages. The composition kind attribute extends the standard composition types of XML schemas (choice, sequence, and all) with the following two added enumerations:\n\n","Referring again to , the MRMessage class  has a unidirectional association, having the rolename \u201cmessageDefinition\u201d, with the MRGlobalElement class . This relationship is for tying a defined message to a global element of an XML schema which defines the message's logical structure.","The MRMessageCollection class  has a further containment relationship with a XSDToMRMapper class . The XSDToMRMapper class  (also referred to simply as the \u201cmapper class\u201d) forms part of the physical meta-model  despite lacking an \u201cMR\u201d prefix in its class name. The XSDToMRMapper class  defines a \u201ccorrespondence association\u201d between a Base Class and a corresponding logical entity component class (here, a logical message component class). A correspondence association permits mapping of a logical entity component of a logical model instantiated from logical meta-model  to a corresponding physical entity component of a physical model instantiated from physical meta-model , and vice versa. The correspondence association of the present embodiment is implemented through a first association (with rolename \u201cSchemaObject\u201d) from the mapper class  to the XSDComponent class  and a second association (with rolename \u201cmrObject\u201d) from the mapper class  to the MRBase class . The motivation for representing the correspondence association in this manner, rather than adopting a more direct approach, e.g., in which the XSDComponent class  and the MRBase class  each directly refer to one another, is that the logical meta-model in the present case is an accepted standard from which divergence is not desired. That is, the \u201calternative approach\u201d would entail extension of the XML schema model (e.g. the addition of an association from a logical XML schema object to a physical object), which would extend and thereby deviate from an accepted standard; this would compromise coherence with the standard which is preferably maintained. Of course, deviation from accepted standards may be deemed acceptable in alternative embodiments.",{"@attributes":{"id":"p-0058","num":"0062"},"figref":"FIG. 4","b":"300"},"The MRMessageSet class  of  is a container class for containing the messages defined in a message set, and may act as an anchor point in an instantiated physical model from which to navigate to various message-related constructs (e.g. message collections or individual messages) defined in the message set. The MRMessageSet class  has an aggregation relationship with the MRMsgCollection class  described above. The MRMessageSetlD class  represents a unique identifier assigned to a message set. Often it is necessary to define a new version of a message set that is based on an existing message set. The set of associations from the MRMessageSet class  to the MRMessageSetlD class  help to identify and manage the version of the message set.","The MRMessageSet class  has a containment relationship with the abstract MRMessageSetRep class , which in turn acts as a parent class for the MRMessageSetWireFormatRep class . The latter class  itself acts as a parent class for three distinct wire format specific Derived Classes, namely, the MRXMLMessageSetRep class , MRCWFMessageSetRep class  and MRTDSMessageSetRep class . The term \u201cDerived Class\u201d is used herein to refer to a wire format specific class derived from a Base Class. Derived Classes are illustrated with a heavy border. As will be described, each of the MRXMLMessageSetRep class , MRCWFMessageSetRep class  and MRTDSMessageSetRep class  defines default characteristics for a distinct wire format.",{"@attributes":{"id":"p-0061","num":"0065"},"figref":"FIG. 5","b":["300","354","356","358","360","300","100"]},"The abstract MRElementRep class  defines the context-specific physical characteristics of an element when it is in standalone mode, i.e. when it is at a global level of a message. The MRGlobalElement class  has a containment relationship with class .","The MRAttributeRep class  is analogous to the MRElementRep class , except it pertains to attributes versus elements. The MRAttributeRep class  defines the context-specific physical characteristics of a global attribute. The MRAttribute class  has a containment relationship with class .","The MRlnclusionRep class  defines the context-specific physical characteristics of a message component when it is contained in another component such as a complex type or global\/local group. This may be used, e.g., if it is desired to indicate in an instantiated physical model that an element of type integer within a complex type should be aligned on a full word boundary for a particular wire format. Each of the MRLocalElement class , MRAttribute class , MRAttributeGroupRef class , MRElementRef class , and MRGroupRef class  has a containment relationship with the MRlnclusionRep class .","The MRStructureRep class  defines the context-specific physical characteristics associated with a structure defined by way of a model group, complex type or attribute group. Each of the MRLocalGroup class , the MRGlobalGroup class , the MRComplexType class  and the MRAttributeGroup class  has a containment relationship with the class .","The MRBaseRep class  is a common parent class for the four context-specific characteristics classes described above. This class has an important association, identified by the rolename \u201cmessageSetDefaults\u201d, with the abstract MRMessageSetRep class , which allows a wire format specific message component (defined in a Derived Class descendent from class ) to easily access a class capturing the default characteristics for the operative wire format (defined in a Derived Class descendent from class ).",{"@attributes":{"id":"p-0067","num":"0071"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"b":["300","300","412","258"]},"The XML-specific Derived Classes include the MRXMLMessageSetRep class , MRXMLAttributeRep class , MRXMLStructureRep class , the MRXMLElementRep class , MRXMLMessageRep class  and MRXMLlnclusionRep class . It will be appreciated that each of these XML-specific Derived Classes has an association with the default characteristics class MRXMLMessageSetRep  by way of the \u201cmessageSetDefaults\u201d association between the MRMessageSetRep class  and the MRBaseRep class .","The MRXMLMessageSetRep class  is a default characteristics class which captures, in the form of attributes, all of the default characteristics for messages defined for the XML wire format message set in the meta-model . The default characteristics for a wire format represent physical message characteristics, e.g. representation of Boolean true\/false values, encoding of null, delimiters, sign conventions, or similar parameters, that are universally applicable to messages of the wire format unless they are overridden in other Derived Classes of the set. For example, in the case of the MRXMLMessageSetRep class , the attributes include booleanTrueValue and booleanFalseValue attributes which define TRUE and FALSE booleans to be strings with the value \u201ctrue\u201d and \u201cfalse\u201d respectively. The characteristics defined in the Derived Classes are all wire format specific; indeed, the definition of characteristics that are defined for one wire format in another wire format may not make sense in the context of the latter wire format. For example, the \u201cxmlName\u201d attribute of classes , ,  and  describe an XML tag name that will be associated with the respective message component on the wire, which does not make sense for tagless wire formats such as CWF. Another example is the \u201crender\u201d attribute of classes  and  which indicates how the containing message component is to be \u201crendered\u201d (i.e. transmitted) on the wire: as an element or an attribute. The Derived Classes could be expanded to include other characteristics not presently described; in this sense the classes are extensible and modifiable to meet the purposes of the application at hand (here, to describe characteristics associated with XML wire format messages).","The MRXMLAttributeRep class  defines physical representation characteristics of attributes for an XML wire format in the event that its representation differs from that defined in the logical model.","The MRXMLStructureRep class  defines characteristics of XML wire format message structures of containing message component objects which may differ from default characteristics defined for structures of the XML wire format in the meta-model  or which are undefined in the default characteristics class . Although no overriding or new characteristics are defined here, this class is included for extensibility reasons (i.e. in case overriding or new characteristics are defined later).","Similarly, the MRXMLElementRep class  defines characteristics of XML wire format message elements of a containing global element message component which may differ from default characteristics defined for elements of the XML wire format in the meta-model  or which are undefined in the default characteristics class .","The MRXMLMessageRep class  defines characteristics of a containing XML wire format message object which may differ from default characteristics defined for messages of the XML wire format in the meta-model  or which are undefined in the default characteristics class .","Finally, the MRXMLlnclusionRep class  defines characteristics of a containing XML wire format message component object that is included within another XML wire format message component (typically within a complex type) which may differ from default characteristics defined for the XML wire format in the meta-model  for that message component or which are undefined in the default characteristics class .",{"@attributes":{"id":"p-0075","num":"0079"},"figref":["FIG. 7","FIG. 7","FIG. 6"],"b":"300"},"The CWF-specific Derived Classes of  include the MRCWFMessageSetRep class , MRCWFAttributeRep class , MRCWFStructureRep class , the MRCWFElementRep class , MRCWFMessageRep class , MRCWFlnclusionRep class , MRCWFBaseRep class , MRCWFAggregateRep class , MRCWFSimpleRep class , and MRCWFSimpleTD class . It will be appreciated that each of these CWF-specific Derived Classes has an association with the default characteristics class MRCWFMessageSetRep  by way of the \u201cmessageSetDefaults\u201d association between the MRMessageSetRep class  and the MRBaseRep class .","The MRCWFMessageSetRep class  is a default characteristics class which captures, in the form of attributes, all of the default physical characteristics for messages defined for the CWF wire format message set using the instant meta-model . The MRCWFMessageSetRep class  is analogous to the MRXMLMessageSetRep class  of . It will be appreciated that the default characteristics defined for the MRCWFMessageSetRep class  differ from those defined for the MRXMLMessageSetRep class . This illustrates the fact that each alternative physical representation (here, each different message wire format) of a physical meta-model  may have its own, representation-specific characteristics for which default settings may be defined.","The MRCWFAttributeRep class , MRCWFStructureRep class , MRCWFElementRep class , MRCWFMessageRep class  and MRCWFlnclusionRep class  are analogous to the MRXMLAttributeRep class , MRXMLStructureRep class , MRXMLElementRep class , MRXMLMessageRep class  and MRXMLlnclusionRep class  respectively.","The Custom Wire Format uses the Object Management Group (OMG) type descriptor model, available at http:\/\/www.omg.org, in its definition. Only where the OMG type descriptor model is deficient in describing the wire format characteristics for CWF are extensions made through the MRCWFBaseRep class , MRCWFAggregateRep class , and MRCWFSimpleRep class  to carry additional attributes. These classes inherit directly from classes defined in the OMG type descriptor model (e.g. the AggregatelnstanceTD class  or SimplelnstanceTD class ) and mix in the MRCWF<component>Represent classes.","The MRCWFSimpleTD class  is the base abstract class for defining wire format characteristics of simple types such as strings, integer, float, decimal, date and time. Each of the concrete classes ,  and  defining the wire format characteristics of simple types inherits directly from the respective type descriptor class and mixes in the MRCWFSimpleTD class , to ensure that these classes are accessible from the MRCWFSimpleRep class . This approach represents the best of both worlds\u2014compatibility with the OMG type descriptor model combined with the ability to define additional characteristics for messages which are not supported in the OMG type descriptor model.",{"@attributes":{"id":"p-0081","num":"0085"},"figref":["FIG. 8","FIG. 1","FIGS. 9A-9C","FIG. 11","FIGS. 13A-13E"],"b":["800","100","800","900","1100","900","200","1100","300","900","1100","11","13","13"]},{"@attributes":{"id":"p-0082","num":"0086"},"figref":["FIGS. 9A-9C","FIG. 8","FIGS. 9A-9C","FIG. 10A"],"b":["900","900","900","1000","900","900"]},"As may be seen in , the COBOL copybook  has a top level field EmployeeInfo (line ) which has four sub-fields, namely, an EmployeeType (line ) sub-field representing an employee type, a Name sub-field (lines -) representing an employee name, an Address sub-field (lines -) representing an employee address, and a salary sub-field (line ) representing an employee salary. The Name sub-field has three sub-fields FirstName, MiddleName, and LastName, each of type string, having lengths of 10, 1 and 20 respectively. The Address field has two sub-fields, namely, a sub-field StreetNo of type integer and a sub-field City of type string of length .",{"@attributes":{"id":"p-0084","num":"0088"},"figref":["FIG. 10B","FIG. 10A"],"b":["1050","1000"]},"The logical structure of the data structures of  is reflected in the logical model  of  in a platform and programming language independent manner. The schema is defined to have a complex type \u201cEmployeelnfo\u201d (lines  to  of ) having four fields represented by the elements \u201cemployeetype\u201d (lines -), \u201cname\u201d (lines -), \u201caddress\u201d (lines -) and \u201csalary\u201d (lines -). The \u201cname\u201d element references the global group \u201cemployeeinfo_name\u201d which is defined at lines  of  of . The group is defined as a sequence of local elements \u201cfirstname\u201d, \u201cmiddlename\u201d and \u201clastname\u201d comprising strings commensurate in length to those defined in the C structure  of . The \u201caddress\u201d element references the global group \u201cemployeeinfo_address\u201d which is defined at lines  of  of . This group is defined as a sequence of two local elements comprising a \u201cstreetNo\u201d short integer element and a \u201ccity\u201d string element of length . A global element \u201cemplnfo\u201d of complex type \u201cEmployeelnfo\u201d is declared at line  of .",{"@attributes":{"id":"p-0086","num":"0090"},"figref":["FIG. 11","FIG. 8","FIG. 11","FIG. 12","FIG. 11"],"b":["1100","300"]},"At the top level of the physical model , a message set object is declared (lines - of , object  of ). This object is an instantiation of the MRMessageSet class  () and declares a message set with the name \u201cSampleMessageSet\u201d and an XMI-provided ID \u201cMRMessageSet_\u201d. Contained within the message set \u201cSampleMessageSet\u201d are two objects representative of the default characteristics of two distinct wire formats.","The first default characteristics object (lines - of , object  of ) having the name \u201cDefault_XML\u201d is an instance of the MRXMLMessageSetRep class  () and represents the default physical characteristics for messages of the XML wire format in this message set. The heavy border on object  of  reflects the fact that this object is an instance of a Derived Class. The object \u201cDefault_XML\u201d overrides two attributes, namely, \u201cdoctypeSystemlD\u201d and \u201cdoctypePublicID\u201d, from their default values set within the MRXMLMessageSetRep class  (), e.g. to assign a system ID and public ID for identifying documents to be exchanged in a particular wire format. It will be appreciated that the other attributes of the default characteristics MRXMLMessageSetRep class  whose values are not overridden in this fashion retain their default values.","The second default characteristics object (lines - of , object  of ) having the name \u201cDefault_CWF\u201d is an instance of the MRCWFMessageSetRep class  () and represents the default physical characteristics for messages of the CWF wire format. This object is analogous to the \u201cDefault_XML\u201d object described above and also overrides a number of default characteristics values.","Also contained in the message set object \u201cSampleMessageSet\u201d is a message set ID object (lines - of , object  of ) representative of a unique message set ID generated for the \u201cSampleMessageSet\u201d message set.",{"@attributes":{"id":"p-0091","num":"0095"},"figref":["FIGS. 13A-13E","FIG. 8","FIGS. 11 and 12","FIGS. 13A-13E","FIG. 11","FIG. 4","FIG. 1","FIGS. 13A-13E","FIGS. 14A-14B","FIGS. 13A-13E"],"b":["1100","300","20","1100"]},"Logically contained within the message set object \u201cSampleMessageSet\u201d of physical model  is a message collection object (lines - of ; object  of ). This object is an instantiation of the MRMsgCollection class  (). The value of the name attribute \u201ctadets.msd\u201d (line  of ) of this object indicates the filename of the file containing the serialized representation of this message collection.","The message collection object  contains thirteen mapper objects having XMI-provided id's of \u201cXSDToMRMapper_\u201d to \u201cXSDToMRMapper_\u201d in . These mapper objects comprise correspondence associations between various logical message components of the logical model  and their physical message components of the physical model . Four exemplary mapper objects are illustrated in .","The first exemplary mapper object  () (lines - of ) provides a correspondence association between the \u201cEmployeelnfo\u201d complex type of the logical model  (lines - of ) and the corresponding physical representations of that complex type in the physical model . This is done by way of a first association \u201cschemaObject\u201d to an instance  of the XSDComplexTypeDefinition class  () which has an \u201chref\u201d attribute referencing the \u201cEmployeelnfo\u201d complex type (, reference A) and a second association \u201cmrObject\u201d to an instance  of the MRComplexType Base Class  (). Again, the \u201chref\u201d reference is defined to be from the physical model  to the logical model , not the other way around, because the logical model is not capable of being \u201caware\u201d of the physical model, as it is a standard XML schema. An instance  () of the MRCWFStructureRep Derived Class  () inherits this association. The MRCWFStructureRep object  also has an association \u201cmessageSetDefaultRep\u201d with the MRCWFMessageSetRep object  (, reference D) indicating that the default characteristics defined therein for CWF wire format messages are applicable to this complex type. Moreover, because the MRCWFStructureRep object  lacks of any overriding settings, all of the default characteristics are understood to apply.","The second exemplary mapper object  of  (lines - of ) provides a correspondence association between the \u201cemployeetype\u201d local element of the logical model  (lines - of ) and the physical representations of that element in the physical model , in both the CWF wire format and the XML wire format. This is again achieved by way of a first association \u201cschemaObject\u201d, which in this case refers to an instance  of the XSDElementDeclaration class  () having an \u201chref\u201d attribute referencing the \u201cemployeetype\u201d element (, reference C), and a second association \u201cmrObject\u201d referring to an instance  of the MRLocalElement Base Class  (). The latter instance  has two set of objects descendent therefrom: objects , , and ; and object .","Objects , , and  all pertain to the CWF wire format. Object  is an instance of the MRCWFlnclusionRep Derived Class  () which defines characteristics for the \u201cemployeetype\u201d element when it constitutes a local element (i.e. it is nested within a complex type) of a CWF message. The association \u201cmessageSetDefaultRep\u201d with the MRCWFMessageSetRep object  (, reference D) indicates that the default CWF message set characteristics defined therein are applicable to this local element in the case where a CWF wire format message is rendered. The contained objects  and  (also being instances of Derived Classes pertaining to the CWF wire format) override some of the default settings for a simple type comprising an external decimal representation.","Object  is an instance of the MRXMLlnclusionRep Derived Class  () which defines characteristics for the \u201cemployeetype\u201d element when it constitutes a local element of an XML wire format message. The association \u201cmessageSetDefaultRep\u201d with the MRXMLMessageSetRep object  (, reference B) indicates that the default XML message set characteristics defined therein are applicable to this local element in the case where an XML wire format message is rendered. Two characteristics are defined in the object  which are undefined within the default message set characteristics. The first is the \u201cxmlName\u201d attribute, which is set to \u201cEmployeeType\u201d. The second is the \u201crender\u201d attribute, which is set to \u201cXMLAttribute\u201d. In combination, these attributes indicate that when the instant local \u201cemployeetype\u201d element is rendered on the wire within a complex type of an XML wire format message, it should be rendered as an attribute (as opposed an element) having an attribute name of \u201cEmployeeType\u201d instead of as an employeetype element as defined in logical model  (at line  of ).","It will be appreciated that the attributes of the MRXMLlnclusionRep object  that are not overridden are understood to retain their default settings as indicated in the MRXMLlnclusionRep class  (), as with all of the classes of the physical model . In conjunction with the use of the \u201cmessageSetDefualtRep\u201d references to default characteristics, this reduces the physical model  to a \u201csparse tree\u201d in which redundant message characteristics information is significantly reduced or eliminated.","The third exemplary mapper object  () (line  of  to line  of ) provides a correspondence association between the \u201cfirstname\u201d local element of the logical model  (starting at line  of ) and the corresponding physical representations of that element in the physical model , in both the CWF wire format and the XML wire format. This is achieved in an analogous fashion to the second mapper object , with a pair of associations to an instance  of the XSDElementDeclaration class  () (having an \u201chref\u201d attribute referencing the \u201cfirstname\u201d element at , reference F) and an instance  of the MRLocalElement Base Class  (). Objects ,  and  pertain to the CWF wire format and object  pertains to the XML wire format. Of interest is the fact that this particular local element is set to be rendered differently on the wire from the \u201cemployeetype\u201d local element. In particular, it is set to be rendered as a \u201cval\u201d attribute of an XML element by way of the \u201cXMLElementAttrVal\u201d enumeration.","The fourth exemplary mapper object  (lines - of ) provides a correspondence association between the \u201cempinfo\u201d global element of the logical model  (line  of ) and a corresponding physical representation of that element in the physical model  in an indeterminate wire format. This is similarly achieved with a pair of associations to an instance  of the XSDElementDeclaration class  (having an \u201chref\u201d attribute referencing the \u201cemplnfo\u201d element at , reference G) and an instance  of the MRGlobalElement Base Class  ().","In addition to the thirteen mapper objects, the message collection object \u201ctadets.msd\u201d ( of ) further contains an instance  (lines - of ) of the MRMessage Base Class  () representative of a message contained in the instant message collection (which, in the present example, is the only message contained in the message collection). The value \u201cMRGlobalElement_\u201d of \u201cmessageDefinition\u201d association of this instance  identifies the MRGlobalElement object  as the Base Class defining the structure of the message (this association being represented in  as a dotted arrow ). A single instance  of the MRXMLMessageRep Derived Class  () defines characteristics of the message when rendered as an XML message which are undefined within the relevant default characteristics object  (). The \u201cxmlName\u201d attribute defines the name of the message object to be \u201cEmployeelnfoMsg\u201d.","The message collection object  also contains a reference  () to the XSDSchema class  (). The purpose of this object is to cross reference the logical model  from the physical model .","As can be seen in  and , the \u201csparse tree\u201d representation of messages and message components significantly reduces or eliminates redundant information in the physical model . This provides efficiency of storage and representation of even large message sets. Supporting this \u201csparseness\u201d is the fact that the default message set characteristics for a wire format are understood to apply in the absence of a Derived Class instance for any message component in the set. Moreover, any changes made at the message set level advantageously become applicable to all messages unless specifically overridden. This facilitates quick global updates to a model in cases where one or more universally applicable characteristics are changed.","The model  is typically traversed at tooling time in order to generate a compiled representation of the model that is designed for efficiency of run-time use. The compiled version of the model typically \u201cflattens\u201d the model , i.e. more deeply nested components or attributes are promoted to a higher level, for speed of access. Unlike the model , which strives to limit or eliminate redundant information, the compiled version may intentionally contain redundant information, again for speed of access at run time. For example, information appearing in only one place within the \u201csparse tree\u201d model  may be duplicated to appear within a number of different types of objects in the compiled model, so that different types of traversals of the compiled model which visit these distinct object types may still have access to commonly needed information. Although it is possible, the model  is not typically used at run time for message conversion due to the above noted efficiency benefits of using a compiled version of the model. It is important to note that the compiled version is a read only version, thus any redundancy that is introduced to support gains in processing efficiency during reading of the model at run time does not detrimentally result in performance inefficiencies during model updating or maintenance, since no such updating or maintenance is performed on this version of the model.","To generate a compiled version of the model , the model  is typically traversed starting from a message set object. Initially, a list of .xsd files comprising the logical model is obtained (e.g. via a file system API). The traversal then \u201cwalks\u201d down the logical model (i.e. examines the logical model .xsd file by .xsd file). For each logical construct in the current .xsd file, the corresponding physical object is retrieved from the associated .msd file through a search of the XSDToMRMapper objects list. For example, in the case of the exemplary physical model , the traversal walks down the logical model of the sole .xsd file \u201ctadets.xsd\u201d. For each construct identified therein, the list containing the thirteen mapper objects XSDToMRMapper_ to XSDToMRMapper_ (shown in serialized form in ) is traversed to identify the corresponding physical object. If a Base Class object is found to exist, any wire format specific descendent classes are examined for any new or overriding physical characteristics which, if found, are deemed to take precedence over the default settings for the relevant wire format. Otherwise, the default message set characteristics (as may be identified by the \u201cmessageSetDefaultRep\u201d association) are understood to apply.",{"@attributes":{"id":"p-0106","num":"0110"},"figref":["FIG. 15","FIGS. 13A-13E","FIG. 15","FIG. 16"],"b":["1500","1100","1100","1500","1500","1600"]},"As can be seen in  (at lines  and ), the default value of the message tag name is \u201cemplnfo\u201d as defined in the logical model  (at line  of ). This tag name is changed to \u201cEmployeelnfoMsg\u201d in the message  (lines ,  of ), by way of the instance  () of the MRXMLMessageRep class  (). Another distinction is that the \u201cemployee type\u201d element appears as an attribute of the EmployeelnfoMsg object (line , ) as opposed to its default representation as an element (line  of ), this being achieved by way of the MRXMLlnclusionRep object  of  (lines - of ). Finally, the firstname, middlename, and lastname local elements (defined in the logical model  at F of  and H, of  respectively) are rendered as empty elements with a \u201cval\u201d attribute (lines - of ) as opposed to their default representation as standard elements (lines - of ). For the firstname local element, this is achieved by way of the MRXMLlnclusionRep object  of  (line  of ); the remaining two local element characteristics are analogously overridden (lines ,  of ,  of ).","It will be appreciated that conformity of messages such as 1500 or 1600 to the applicable physical model (e.g. physical model ) is typically achieved by a message parser applying the message structure rules defined in (a compiled version of) the model to messages being received or sent on the wire.","If the message structures of  were to represent structures used by two enterprises seeking to intercommunicate, the default characteristics exemplified in  could be defined in one XML wire format for a message set in the physical meta-model  and the changed characteristics exemplified in  could be defined in another XML wire format for the message set. Conversion between them would then be facilitated through their associations with the common logical model .","The compiled form of the message set (also referred to as a run time dictionary) parses the message received on the wire and converts it from a physical model representation to a corresponding logical model representation. Then, when the message is to be output, the target wire format characteristics are applied to create a physical model representation of the message from the logical model representation which is rendered on the wire.","As will be appreciated by those skilled in the art, modifications to the above-described embodiment can be made without departing from the essence of the invention. For example, alternative embodiments may employ other types of logical meta-models, which may or may not be XML schema-based.","As well, though the meta-model  and model  of the present embodiment pertain to messages, the meta-models and models of alternative embodiments may pertain to other entities and may be used in conjunction with applications that are unrelated to messaging.","Other modifications will be apparent to those skilled in the art and, therefore, the invention is defined in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the figures which illustrate an example embodiment of this invention:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 7","FIG. 3"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIGS. 9A to 9C","FIG. 8"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIGS. 10A and 10B","FIGS. 9A-9C"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 11","FIG. 8"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIGS. 13A to 13E","FIG. 8"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIGS. 14A and 14B","FIGS. 13A to 13E"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 15","FIG. 8"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 16","FIG. 8"]}]},"DETDESC":[{},{}]}
