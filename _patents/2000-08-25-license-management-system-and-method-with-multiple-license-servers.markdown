---
title: License management system and method with multiple license servers
abstract: A system for managing licenses for protected software on a communication network is disclosed. The system comprises at least one client computer and a pool of license servers coupled to the communication network. The client computers request authorizations to use the protected software. The pool of license servers are programmed for managing a distribution of allocations to use the protected software. Within the pool of license servers is a current leader server programmed for managing the distribution of allocations for the license servers in the pool, and at least one follower server programmed for managing the distribution of allocations for that particular follower server. Each license server stores a status of the allocations for that particular license server, and each follower server communicates the status of the allocations for that particular follower server to the current leader server. Each follower server is capable of becoming a new leader server if the current leader server can no longer manage the distribution of allocations for the license servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07035918&OS=07035918&RS=07035918
owner: Safenet Canada. Inc.
number: 07035918
owner_city: Belcamp
owner_country: US
publication_date: 20000825
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE DISCLOSURE","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["Embodiments of the present invention claim priority from Provisional Application Ser. No. 60\/152,785, filed Sep. 3, 1999, and are related to U.S. utility patent applications entitled \u201cLicense Management System And Method With License Balancing\u201d, Ser. No. 09\/648,720, filed Aug. 25, 2000; \u201cSystem And Method For Selecting A Server In A Multiple Server License Management System\u201d, Ser. No. 09\/648,853, filed Aug. 25, 2000; and \u201cLicense Management System And Method For Commuter Licensing\u201d, Ser. No. 09\/648,502, filed Aug. 25, 2000. The contents of each of these applications are incorporated by reference herein.","1. Field of the Invention","The present invention relates, generally, to license management systems and processes for managing licenses on a computer network and, in preferred embodiments, to such systems and processes involving a pool of license servers for managing software licenses among one or more users on the network.","2. Description of Related Art","The increasing popularity of computer usage in homes and businesses, as well as in governmental, research and education institutions, has brought about a world-wide demand for greater software variety and sophistication. Indeed, the software development industry in most industrialized countries has shown substantial growth in recent years and is expected to show continued growth through the next decade.","However, as software sophistication increases, development costs associated with such software also tend to increase. Modern software programs can require months or even years of development, often involving expensive resources and teams of highly skilled engineers and programmers, before a product may be readied for sale or license. Thus, software development companies are often required to make large investments early in the development of their products, in the hope that the products will provide a volume of sales or license revenues sufficient to cover their development investments and generate profits.","Illegal software usage and piracy have become a significant problem to software development companies. Because of the nature of computer software, illegal usage and illegal copying of proprietary software programs can be difficult to detect or deter. The increasing usage of computer networks has added to the problem. Computer networks can allow multiple users to access and copy software stored by a common network program server or copy and pass software between each other, over the network. A legitimately purchased or licensed copy of a software program available on a network could result in many illegitimate usages or copies by unauthorized or unlicensed users having access to the network.","Various forms of encryption techniques have been developed to inhibit usage of encrypted software by unauthorized users that do not possess a decryption program or key. However, such techniques typically require each authorized users to obtain or be passed a decryption program or key, in advance of usage of the encrypted program. Accordingly, such techniques can be prohibitively inconvenient for some computer and network environments, where it is difficult or impractical to supply each authorized user with a decryption program or key or to decrypt a program for each user or usage.","Other software protection techniques have required legitimate or authorized users to have a special hardware device or circuit installed in or plugged into their computer, prior to usage of the protected software. See, e.g., U.S. Pat. No. 4,446,519 to Thomas. Again, such techniques can be prohibitively inconvenient for some computer and network environments. For example, if the network environment is such that the authorized user must use multiple computers on the network, then each computer must be provided with the special hardware device. Moreover, if the environment is such that computers having the special hardware device are not located in secure facilities, then unauthorized users may be able to access the protected software by using the non-secure computer in which the special hardware device is installed.","Accordingly, more sophisticated license management software has been developed for managing software licenses for computer networks, which do not require encryption of the protected software or special hardware devices in each authorized user's computer. For example, the assignee of the present invention, Rainbow Technologies, Inc., has marketed versions of a license management system under the trademark, SENTINELLM\u2122. The SENTINELLM\u2122 systems operate with a license server connected to a network of users. The license server stores and manages software licenses for the network users, in accordance with a license management program stored on the server. Each copy of a protected software program on the network is accompanied by a program code corresponding to a shell (also known as \u201cwrapper\u201d) or library of Application Program Interface (API) functions, which communicates with the license management program on the server. When a user starts to run the protected software program, the shell code or library of API functions provided with the program communicates a request to use a license to the license server, over the network. The server, under the control of the license management software, responds to the request to determine whether it is storing an available license for the protected software program. If so, the server communicates an authorization message to the user and decrements a count of available licenses stored by the server. If not, the server communicates another message to the user, indicating that no licenses are available. In this manner, licenses are always stored and managed on a network license server. Each network user may have a copy of a protected software program, but must communicate with the license server for authorization to use the protected program.","License management systems which employ a license server, as discussed above, provide significant advantages with respect to the freedom to readily add, delete or change authorized users on the network, and the ability to readily control and alter licensing schemes (for example, to add or delete licenses or change conditions for licenses) by modifying only the license server files or programs. However, if all licenses are stored and managed in a single license server, failure of that server can result in a failure of the entire license management system. Accordingly, prior versions of the SENTINELLM\u2122 systems include multiple license server capabilities, wherein two or more license servers are provided on the network, each having a pre-loaded license file and a license management program. One of the servers may be designated as a primary license server, while the others are designated as backup servers. If the primary server cannot be reached by a user, for example, because the primary server has crashed or otherwise gone down, the user may then communicate with a backup server to obtain an authorization message. The backup server, having a pre-loaded copy of the license file and the license management program, may then take over the license management functions.","Alternatively, in other prior versions of SENTINELLM\u2122 systems, a shell program or library of API functions could be configured to send a general poll to all servers coupled to the communication channel on which the poll is sent. In response to a general poll, any server computer having a license file containing license information corresponding to the protected software program (whether or not the license information indicated that a license is available) would send a reply to the requesting client computer. The shell program or library of API functions associated with the requesting client computer would then respond to the first reply received from a license server having a license file storing license information for the protected software program. If the replying license server contains an available license for the protected software program, the replying license server provides an authorization message to the requesting client computer. If the replying license server does not contain an available license for the protected software program, the replying license server provides a message to the requesting client computer indicating that authorization to run the protected software program has not been granted. Such a system provides a degree of protection against system failure, in the event that one of the license servers crashes or goes down. The down server computer would not respond to the poll, but other server computers having appropriate license information in their license file would respond to the poll, thus allowing the client computer to continue to seek authorization to run the protected software program, even though one of the servers was down.","While the above SENTINELLM\u2122 systems have operated well in many contexts, each license server operates somewhat independent of other license servers. Accordingly, there is a need in the industry for improvements in connection with management and coordination of multiple license servers (or a pool of license servers) in software license management systems for computer networks.","Therefore, it is an advantage of embodiments of the present invention to provide a license management system and method for more efficiently managing licenses on a network using a pool of multiple license servers.","It is a further advantage of embodiments of the present invention to provide a system and method that facilitates communication between multiple license servers so that any license server in the pool may act as a leader server, should the leader server go down.","It is a further advantage of embodiments of the present invention to provide a system and method for managing licenses on a network using multiple license servers that allows a client to locate and receive an authorization from a new license server, should the licenser server that previously issued the authorization go down.","It is a further advantage of embodiments of the present invention to provide a system and method for managing licenses on a network using multiple license servers that allows allocations for multiple vendors to be managed with a single process running on a single license server.","It is a further advantage of embodiments of the present invention to provide a system and method for managing licenses on a network using multiple license servers that allows a redundant license file containing a new hard limit of allocations and a new initial distribution of allocations to be loaded onto one license server and then copied to other license servers in the server pool.","These and other advantages are accomplished according to a system for managing licenses for protected software on a communication network. The system comprises at least one client computer and a pool of license servers coupled to the communication network. The client computers request authorizations to use the protected software. The pool of license servers is programmed for managing licenses to use the protected software.","Within the pool of license servers is a current leader server, programmed for managing all license servers in the pool, and at least one follower server programmed for managing the distribution of authorizations allocated to that particular follower server. Each license server stores a status of the authorizations allocated to that particular license server, and each follower server communicates the status of the authorizations allocated to that particular follower server to the current leader server. Each follower server is capable of becoming a new leader server if the current leader server can no longer manage the distribution of authorizations for the license servers.","These and other objects, features, and advantages of embodiments of the invention will be apparent to those skilled in the art from the following detailed description of embodiments of the invention, when read with the drawings and appended claims.","In the following description of preferred embodiments, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the preferred embodiments of the present invention.","Preferred embodiments of the invention relate to a system and process involving a pool of license servers for managing licenses to, for example, one or more protected software programs, files or other data structures, among one or more users on the network. Protected software may include, but is not limited to, for example, a software program, such as a word-processing program, a graphics program, a computer game, etc., a proprietary file or other data structure, such as a data-base or other form of data, as well as other software encoded information or instructions, for which the control of user access is desired. For purposes of simplifying the present disclosure, the protected software used in the following examples is one or more proprietary software programs.","According to a preferred embodiment of the present invention, the plurality of license servers are managed in accordance with a server pool scheme, as controlled by a license management program associated with each license server computer and the shell program or library of API functions associated with each copy of the protected software program. In preferred embodiments, the pool of license servers comprises three to 11 servers. However, it should be noted that alternative embodiments of the present invention are not limited to any particular maximum number of license servers. In addition, in further alternative embodiments, multiple pools of license servers can reside on a single network. However, for purposes of illustration only, embodiments of the present invention will be described herein with reference to a pool of three license servers.","An example hardware environment for an embodiment of the present invention is illustrated, generally, in . With reference to , a computer network  includes a plurality of user or client computers  and three license servers , each coupled for communication over a communication network link, generally referenced at . The plurality of client computers  are identified as \u201cClient \u201d, \u201cClient \u201d, and \u201cClient N\u201d, and the plurality of license servers  are labeled as \u201cLic. Server A\u201d, \u201cLic. Server B\u201d, and \u201cLic. Server C.\u201d Embodiments may employ any suitable number of client computers  and any suitable number of license servers . Also, while not shown in , the network  may include additional components, including one or more program or file servers, routers and\/or other well known network devices and resources.","Each client computer  preferably includes a suitable processor and associated transient memory, such as an RAM, for running a protected software program. The client computer may be part of a standard personal computer (PC), network terminal, workstation or the like. In one preferred embodiment, each client computer  is coupled to a persistent program storage memory device , which may include, but is not limited to, a hard disc drive, floppy disc drive, tape drive, CD-ROM or the like, having a computer readable medium on which the protected software program is stored. Also stored as part of the protected software program is additional program code, such as code corresponding to a shell or library of API functions as discussed above, for communicating with the license servers which are under control of a license management program, in accordance with communication functions discussed below.","Each license server  preferably includes a suitable processor and associated transient memory, such as an RAM, for running a license management program as described herein. In addition, each license server  is coupled to one or more persistent program storage memory devices , which may include, but is not limited to, a hard disc drive, floppy disc drive, tape drive, CD-ROM or the like, having a computer readable medium on which a license management program  and a redundant license file (RLF)  are stored.","An example embodiment of an RLF  is shown in  as containing license codes  for proprietary software programs A, B, C, etc. Each license code , in one example embodiment, comprises a string of data relating to license policy and the software program to which the license policy applies. In preferred embodiments, license codes  for software produced by more than one vendor can reside within the same RLF  of the same license server , and may be managed with a single process (execution of the license management software) running on a single license server . Thus, any given licenser server  does not need to have multiple license management processes running to manage licenses for multiple protected vendor applications. Instead, only one license management program needs to be running on a given license server , to manage licenses for protected vendor applications managed by that license server.","In the example embodiment of , a license code  comprises a data string defining multiple records or fields R, R, R . . . RN, wherein each record corresponds to an attribute associated with the license policy, the software program to which the license policy applies, or other information. In preferred embodiments, each license code  includes at least one attribute associated with a license policy, the number of allocations for using the protected software program, and at least one other attribute associated with the identity of the protected software program. The number of allocations for using the protected software program is the maximum number of users that can be running the protected software program at any one time, and is also referred to as the ceiling or hard limit. Data associated with a license policy preferably includes data representing the expiration date or expiration time of the license, as granted by the licensee (e.g., the protected software program's owner or developer).","For purposes of illustration only, in the embodiment of  only one fictional license code , identified as \u201cApplication v1.0,\u201d is stored in the RLF  of a license server , with a hard limit of 100 total allocations distributable across all license servers  (see reference character ). In preferred embodiments, another attribute of the RLF  is the IP address  for each license server . Another attribute of the RLF  is the distribution of the 100 allocations across all the license servers . This distribution is identified as the initial distribution , and is configurable by the network administrator. In the example of , an initial distribution 30 of A:40, B:30, C:30, indicates that 40 allocations will initially be assigned to license server A, 30 allocations will initially be assigned to license server B, and 30 allocations will initially be assigned to license server C. This initial distribution  also signifies that the pool will comprise three license servers. If the network administrator makes an initial distribution that does not equal the hard limit of allocations (see reference character ), in preferred embodiments of the present invention the extra allocations will be put into a free pool  maintained within the distribution table . If, on the other hand, the network administrator makes no initial distribution  of allocations in the RLF , preferred embodiments will divide the allocations evenly over the number of servers in the pool, and any extras will be put in the free pool . For example (but not illustrated in ), if no initial distribution  was assigned by the network administrator, information representing an even distribution of A:33, B:33, and C:33 would be stored in the initial distribution attribute  of the RLF , and when a particular license server  is started, the RLF  would load an even distribution of A:33, B:33, and C:33 into the current distribution attribute  of distribution table , and would load a value of one into the free pool .","In preferred embodiments of the present invention, each RLF  stored in each license server  is an exact copy of every other RLF  of license servers in the pool. Thus, attributes of the license code  such as the expiration date or number of allocations need not be passed between license servers  in response to a request for authorization to use a protected software program from a client computer , because an exact copy of the license code  has already been stored on the hard disk of each license server  prior to the startup of that license server .","Each license server  operates, under the control of its associated license management program , to perform license management functions in association with data contained in the RLF , as described herein. Thus, when a particular license server  is started, the license server  loads the contents of its RLF  into a license table  in RAM or other memory and reads the license table , which identifies that server as a license server . It should be noted that in preferred embodiments, the license table  is never modified. In addition, the contents of the RLF  is loaded into a distribution table  in RAM or other memory, and the initial distribution  is further copied into another record, distinct from the license code , identified as a current distribution . Unlike the license table , the distribution table  changes its current distribution  over time to keep track of current allocations.","In preferred embodiments of the present invention, when the license servers  in the server pool are first started up, the first license server  to come on line is designated as a leader server. The leader server always has a global picture of the current distribution of allocations within every license server  in the server pool. If none of the license servers  were definitively started first, the license server  having a higher priority as established by a leader priority list will be designated the leader server. The leader priority list is stored in the RLF  and is read at the time of server startup. This is known as a leader election process. All other license servers  are designated as follower servers.","The ability to intentionally start up a particular license server  and force it to be the leader server is advantageous because it may be desirable for a particular license server  on a particular subnet to operate as the leader server due to its physical location, speed, or efficiency. In prior art systems, the leader server always had the highest IP address, and to change leader servers required physically reconnecting to a different address or reconfiguring the license servers by changing the IP address. In embodiments of the present invention, however, the leader server may be changed simply by turning a particular license server  on first.","For purposes of illustration only,  illustrates an example of the distribution tables  for a three server pool consisting of license servers A, B, and C. Assume, for this illustration, that all three license servers have been started up, and that license server A has been designated as the leader server, and B and C as the follower servers. Further assume that the hard limit of allocations for the software program Application v1.0 is 100, as indicated by the hard limit record  associated with the license code  for Application v1.0 within each distribution table . In addition, assume that the current distribution of allocations is 40 on leader server A, 30 on follower server B, and 30 on follower server C, as indicated in the current distribution record 40 associated with the license code  for Application v1.0 within each distribution table .","Note also that in the embodiment of , associated with each license code  is a record for available allocations for each server in the pool (see reference character ), a record for available allocations for all servers in the pool (see reference character ), and a record for allocations currently in use for each server in the pool (see reference character ). The allocations in these records are values which are incremented or decremented as authorizations are issued, returned, or borrowed. It should be understood that the records identified by reference characters , , , , and  in  are associated with a particular license code , but are distinct from it.","As indicated in , in preferred embodiments of the present invention the structure of the distribution tables  will be the same for both the leader server A and follower servers B and C, but only the distribution table  for leader server A (the leader distribution table) will reflect the allocation status of the other license servers  in the server pool. In contrast, the distribution tables  for follower servers B and C (the follower distribution tables) will only reflect the allocation status of that particular follower server, as indicated by the X (don't care) designations in portions of the follower distribution tables.","When a user at a client computer  desires to run Application v1.0 from a follower server, such as follower server B, for example, the client computer  may first load some or all of the protected program into the transient memory of the client computer , along with the program code corresponding to a shell or library of API functions. Selection of a follower server from which to request authorization is described in a related U.S. utility application entitled \u201cSystem and Method for Selecting a Server in a Multiple License Server License Management System,\u201d Ser. No. 09\/648,853, filed Aug. 25, 2000, the contents of which are incorporated by reference herein. Alternatively, the protected program may remain in persistent memory  until and unless the server computer communicates an authorization signal to the shell program or library of API functions. Loading of the shell program or library of API functions is preferably transparent to the user on the client computer  and, preferably, occurs in response to the user inputting a command to open the protected software (for example, by clicking a mouse button on an icon associated with the protected software).","As part of the function of the shell or library of API functions, a request is then sent from the client computer  to follower server B for one or more authorizations to run the protected program. For purposes of this example, assume that client computer  requested only one authorization. Follower server B, under the control of the license management software, responds to the request by looking at its distribution table  to determine whether it has available allocations for Application v1.0. In the example of , follower server B has 30 allocations available, as represented by the allocations available record for each server in the pool (reference character ) in the distribution table  for follower server B. Because it has available allocations, follower server B communicates an authorization message to the client computer . As illustrated in , once the authorization message is sent, the allocations available record  for follower server B decreases to 29, and the allocations in use record  for follower server B increases to one. If an insufficient number of allocations are available to completely satisfy the request, no authorizations are sent, and follower server B communicates another message back to the client computer , denying the request. In preferred embodiments, follower server B will then issue a borrow request in an attempt to borrow available allocations from another source. Borrowing is described in a related U.S. utility application entitled \u201cLicense Management System and Method with License Balancing,\u201d Ser. No. 09\/648,720, filed Aug. 25, 2000, the contents of which are incorporated by reference herein.","As noted above, in preferred embodiments of the present invention the leader server always has a global picture of the distribution of allocations in the whole server pool. Thus, any changes to the distribution table of follower server B must be communicated to leader server A. In preferred embodiments, follower server B can determine the IP address for the leader server A from a leader priority list , which is configurable by the network administrator. It should be noted that in preferred embodiments, the IP address of license servers in the server pool are stored in the leader priority list , a data structure separate from the license codes , to facilitate faster lookup. However, in alternative embodiments the IP addresses may be stored in a record associated with the license codes . In any case, after determining the IP address of the leader server A, follower server B communicates the fact that its available allocations count has dropped to 29 to leader server A, and the distribution table of leader server A will be updated accordingly. Thus, as illustrated in , the distribution table  of leader server A reflects that the allocations available record  for follower server B has dropped to 29, the allocations in use record  for follower server B has increased to 1, and that the record for allocations available for all servers in the pool (see reference character ) has dropped to 99.","Similarly, if another client computer  requests authorization to run Application v1.0 from follower server C, follower server C will look at its distribution table , determine that it has 30 allocations available, and send an authorization back to the client computer . As illustrated in , once the authorization is sent, the allocations available record  for follower server C drops to 29, and the allocations in use record  for follower server C increases to one. This change is then communicated to leader server A, whose distribution table  will reflect that the allocations available record  for follower server C has dropped to 29, the allocations in use record  for follower server C has increased to one, and that the record for available allocations for all servers in the pool (see reference character ) has dropped to 98. It should be noted in  that the distribution tables  for follower servers B and C keep track of changes to their own allocations, but do not keep track of changes to the allocations of other license servers.","Continuing the example of  for purposes of illustration only, assume that a client computer A has requested and received an authorization to run Application v1.0 from leader server A. As illustrated in , once the authorization is sent, the allocations available record  for leader server A drops to 39, the allocations in use record  for leader server A increases to one, and that the record for available allocations for all servers in the pool (see reference character ) has dropped to 97. Thus, at this point in time, one client computer  is connected with each license server .","In embodiments of the present invention, the license servers  periodically communicate with (ping) each other so that the license servers  know which other license servers  are down or up. The communication, or pinging, may be in the form of a periodic signal (heartbeat) sent from the leader server to the follower servers. Server identification information, such as the IP address of the follower server, may be contained within this heartbeat, but license code information need not be communicated. If the leader server does not receive an acknowledgement (ack) from a particular follower server in response to the heartbeat within an expected period of time, the leader server will designate that follower server as being down. In addition, if a follower server does not receive a heartbeat from the leader server within an expected period of time, it sends a leader check message to the leader server to check if the leader server is still alive. If the leader server is alive, it will send an \u201cack\u201d in response to the leader check message. If no \u201cack\u201d is received, the follower server will start a leader election process to select a new leader server. Selection of a new leader server is described in a related U.S. utility application entitled \u201cSystem and Method for Selecting a Server in a Multiple License Server License Management System,\u201d Ser. No. 09\/648,853, filed Aug. 25, 2000, the contents of which are incorporated by reference herein.","In communications from leader to follower servers, each message contains updated server status (up\/down) for each server in the pool. When a follower server receives a message from the leader server, the follower server updates its server status information, which is used when initiating the leader election process. It should be understood that follower servers do not ping each other to check if each other is alive, because that would generate unnecessary network traffic. Thus, the follower servers rely on status information passed to them by the leader server.","In preferred embodiments of the present invention, if the leader server sends acknowledgement heartbeats to the followers, and one of the follower servers (B, for example) receives the acknowledgement but follower server C does not, only follower server C will send one or more re-try heartbeats. If follower server C still does not receive an acknowledgement to the re-try heartbeats, follower server C will communicate with follower server B and attempt to initiate a process to select a new leader server. However, follower server B has already received an acknowledgement from leader server A, so follower server B will communicate with leader server A and inform leader server A that follower server C is initiating a process to select a new leader server. At this time, leader server A will send a new heartbeat to follower server C. If leader server A fails to receive a reply heartbeat from follower server C, and follower server C again contacts follower server B about a process to select a new leader, then follower server B will communicate to follower server C that a leader server already exists in the server pool. At that point, follower server C will disassociate itself from the pool.","Now assume that leader server A goes down. Because the license servers  are periodically pinging each other, the two follower servers B and C will soon determine that leader server A has gone down. Further assume that follower server B is then selected as the new leader server. New leader server B will already have its own RLF , license table , and distribution table , which includes the current distribution of allocations . However, new leader server B does not have the global allocation information maintained by the old leader server A. Therefore, upon becoming the new leader server, license server B must now receive this information from the other license servers. As illustrated in , because license server A is now down, within the distribution table  for new leader server B, the allocations in use record for license server A (see reference character ) is set to zero, and the allocations available record (see reference character ) is set to 40. When new leader server B sends a heartbeat to follower server C, the heartbeat contains information which identifies B as the leader server. Follower server C will send an \u201cack\u201d in response to the heartbeat from new leader server B, and in the process, will provide information on the allocations in use record and allocations available record for follower server C. Once this information is received, within the distribution table  for new leader server B, the allocations in use record for license server C (see reference character ) is set to one, and the allocations available record (see reference character ) is set to 29. In addition, the record for available allocations for all servers in the pool (see reference character ) is set to 98. In this manner, new leader server B receives a global picture of the status of the license servers in the server pool.","Meanwhile, because client computers  connected to a particular license server  are also periodically communicating with each other, for example, using a regular heartbeat function that indicates that each is still functioning, client computer A will soon determine that server A went down. Client computer A knows that it has received an authorization to run the protected program from server A, and therefore knows that it must enter a fail-over mode and allocation, it will convert the heartbeat to a request, and issue an authorization to client computer A.","If old leader server A should come back up, it will be a follower server, and have an initial distribution according to the allocations for old leader server A in the distribution table of new leader server B, regardless of what is contained in the RLF . Old leader server A can become the leader server again, if new leader server B goes down. When old leader server A comes back up as follower server A, follower server A sends a heartbeat to new leader server B, who then recognizes that follower server A is back up. New leader server B then transmits the current allocation of old leader server A to follower server A. Continuing the example of  for purposes of illustration only, if old leader server A comes back up as follower server A, the current allocation of old leader server A (see reference characters  and ) in the distribution table  of new leader server B, which is zero allocations in use, 40 available, will be communicated to follower server A. This allocation is reflected in the distribution table  of follower server A in .","In alternative embodiments of the present invention, before bringing old leader server A back up as follower server A, the network administrator may use this opportunity to modify the RLF . Modification of the RLF  may be desirable because a new license code  was added, or because a modification of the initial distribution of allocations  for a given license code  already in the RLF  is desired.","In preferred embodiments of the present invention, each RLF  has an associated sequence or version number. Each time the RLF  is changed, the sequence number is incremented. Thus, if license servers should have RLFs  different sequence numbers, some RLFs  are not up to date. Continuing the example above for purposes of illustration only, when old leader server A comes back up as follower server A with a new RLF , it sends a \u201cserver up\u201d message which includes the sequence number of its RLF  to the other license servers .","When the other license servers B and C respond to follower server A's \u201cserver up\u201d message, license servers B and C will send a reply back to follower server A which includes their own sequence numbers. When follower server A receives these replies, it compares the sequence numbers. In the present example, follower server A will determine that it has the highest sequence number, indicating that follower server A has the latest RLF . Follower server A will then send a message to new leader server B indicating that follower server A has the latest RLF . New leader server B will then acknowledge this message and goes into a receive mode, at which time follower server A copies the RLF  to new leader server B. Once new leader server B has received a copy of the latest RLF , new leader server B notifies other functioning follower servers that it has a new RLF , and the new RLF  is then copied to the other functioning follower servers. In the preferred embodiment described above, the leader server is updated with the new RLF  before any other license server  in the pool, because, at any point in time, the leader server should have the correct and the latest information. After the license servers  receive the new RLF , their license tables  and distribution tables  are updated based on the new RLF .","The process described above is advantageous in that it allows a network administrator to update the RLF  on each license server  without taking each license server  off line, loading the new RLF , and then bringing it back up. Instead, the RLF  for license servers  in the server pool can be updated by bringing only one license server  down.","In alternative embodiments of the present invention, the RLF  may be updated without the necessity for bringing a license server  down. In such embodiments, the network administrator would initiate a utility from a client computer  that sends an \u201cupdate RLF\u201d message containing a new RLF  to a particular license server . The particular license server  would then proceed as described above.","It should be noted that in embodiments of the present invention, a network administrator can also use this process to add a license server to the pool by simply bringing the new license server  on line. When the new license server is brought on line, it may have a new RLF .","In addition to the purposes described above, the heartbeats communicated between the follower servers and the leader server are also used to enforce majority rule. Majority rule is a security measure to prevent excessive authorizations from being issued. License servers  operating under majority rule will only issue an authorization if a majority of license servers  in the server pool are up and running. Continuing the example server pool described herein for purpose of illustration only, suppose the two follower servers B and C go down. Because of the communication between license servers , leader server A will know that only one license server\u2014itself\u2014is still operating. Leader server A will also check a key file, which stores the total number of license servers  in the server pool, and note that the key file stores a value of three. Although leader server A is still up and running, because there is no majority of license servers running (only one of the three license servers are running), leader server A is precluded by the majority rule from issuing authorizations.","Without the majority rule, which may be ignored in alternative embodiments of the present invention, the network could be intentionally segmented such that each license server  becomes isolated from every other license server . With the license servers  isolated, each license server  would appear to be the only license server  in the server pool, and thus would operate as a leader server. It would then be possible to receive authorizations from each of these independent leader servers for all allocations, for a total of three times as many allocations for each legitimate license.","Therefore, embodiments of the present invention provide an improved system and method for managing licenses on a network using license servers that cooperate with one another and efficiently manage allocations in a network environment. The improved system and method facilitates communication between license servers so that any license server may act as a leader server should the leader server go down. In addition, embodiments of the present invention allow a client to locate and request an authorization from a new license server, should the licenser server that previously issued the authorization go down. Furthermore, with embodiments of the present invention, allocations for multiple vendors can be managed with a single process running on a single license server. Embodiments of the present invention also allow am RLF containing a new hard limit of allocations and a new initial distribution of allocations to be loaded onto one license server and then transferred to other license servers in the server pool."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 11","FIG. 10"]}]},"DETDESC":[{},{}]}
