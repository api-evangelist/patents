---
title: Voice mark-up language and interpreter
abstract: A voice markup language for a service for a telecommunication service platform, the telecommunication service platform having a communication layer and a session layer, the language comprising an application transfer tag, the application transfer tag comprising an identifier corresponding to a further service provided on the telecommunication service platform, wherein the application transfer tag causes the session layer to cause a call connected to the service to be processed by the further service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08104024&OS=08104024&RS=08104024
owner: Hewlett-Packard Development Company., L.P.
number: 08104024
owner_city: Houston
owner_country: US
publication_date: 20041015
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This invention relates to a voice mark-up language, and interpreter for the voice mark-up language, a service and a telecommunication service platform.","An important part of the business of a telecommunication company or organisation is in the provision of services other than simply providing dialled voice connections between users. Examples of such services are voice mail, conference calls, information services and so on.","Conventionally, the programs to provide such services herein referred to as \u201cservice applications\u201d are written in compiled languages, such as Java or C++. A large proportion of the existing or legacy software providing such services is in such a compiled form and has the benefits that it has been optimised and is generally reliable. The disadvantage is that such compiled service applications are static, dint is their structure and code are well established, and the programs are difficult to adapt or customise.","To provide easily customised services, interpreted scripting languages have been developed which ease the authoring of new services or providing customisation of services. Examples of these are the Voice Extendible Mark-up Language (\u201cVoice XML\u201d or \u201cVXML\u201d) SALT or variants thereof which will in this specification be referred to generally as \u201cvoice mark-up languages\u201d. The voice mark-up languages are interpreted languages similar in structure to HTML. A script written in a voice mark-up language comprises a series of instructions or tags which are interpreted and acted on in sequence by an interpreter. The interpreter is able to receive input in the form of speech and generate an audible output whether in the form of speech generation from text or in the form of saved audio files or otherwise. Appropriate commands in a voice mark-up language also permit the script to accept inputs in the form of DTMF tones from a telephone. A service application written using a voice mark-up language may be in the form of a plurality of pages, analogous to a set of HTML pages made available over the World Wide Web where each page is identified by a uniform resource locator (\u201cURL\u201d).","An appropriate computer system for providing a plurality of services, hereinafter referred to as a telecommunication service platform, of known type is shown in . Referring now to , a telecommunication service platform is shown generally at . The telecommunication service platform  has a plurality of layers. Starting from the top, a service layer is shown at . This generally includes all the programs or service applications which provide services running on the platform  including interpreters and service wrappers where appropriate. The service layer is supported by the session layer , which manages calls connected to individual services, that is it allocates and manages the resources needed to provide the required service for a call. The communication layer  gives access to network, media and system resources. In this example, the communication layer  has a media processing layer which provides media resources to the service layer  and a signalling layer which gives access to the network and system resources needed to control calls at a network level. For simplicity, in this example the communication layer  comprises the various protocol stacks. At , the hardware layer is shown including the physical component necessary to provide the voice connection channels and signalling channels generally shown at to receive and establish calls over a telecommunication network.","The session layer  itself has two layers. As shown at , an appropriate interface is provided, preferably in the form of an open application programming interface (\u201cAPI\u201d). The API provides a set of functions which may be called or invoked by a service application in a way which is independent of the underlying network protocol and hardware. A media controller provides control of the media resources available through the media processing layer A platform framework or call controller shown at performs the necessary scheduling, resource and session management function between the interface  and the communication layer .","In the service layer , a number of different types of service applications to provide services are illustrated. At , a voice mark-up language interpreter is shown operable to read service applications ,  which are implemented as voice mark-up language scripts. At  and , compiled applications are illustrated which are able to communicate directly with the interface . At , a non-native application is shown, for example a service application written in a language not directly compatible with the interface , which is provided with a service wrapper , for example an API adapter, to adapt messages transmitted between the interface  and the application  into an appropriate format.","To provide adaptable and efficient services, it is desirable that applications of different types be able to interact. Voice mark-up language-implemented services are desirable in that they provide easily authored and adapted service applications but have disadvantages in that the language does not permit a very sophisticated logic and large grammar or numbers of grammars to be known for a given application, where the term \u201cgrammar\u201d refers to the set of allowed (and thus identifiable) words. The relatively unsophisticated logic also does not allow the interpreter to make assumptions about what the interaction steps will be. For example, in a voice mail service, it might be assumed that the user will wish to listen to new messages whilst being connected to the service and so new messages could be uploaded in advance to be ready to be played while receiving the appropriate instructions; this is relatively straight forward to implement in a compiled service application, but cannot easily be done with a service application written in voice mark-up language. As discussed above, a quantity of optimised reliable legacy software exists in compiled form, and it would be desirable to be able to use such compiled service applications in conjunction with service applications written using a mark-up language.","It is known to transfer calls between compiled service applications by making an appropriate call to the API , for example using the method ReleasedToService method in the Java Telephony Application Programming Interface (\u201cJTAPT\u201d) Media application. Such a call is not however accessible by a voice mark-up language script. It is possible to call other mark-up language applications, from a script for example using the <subdialog> or <link> tags in VXML, or to transfer a call using the <transfer> tag which causes a call to be redirected to another number or application indicated by a URL at the network level.","An aim of the present invention is thus to permit easier interaction between voice markup language service applications and compiled service applications.","According to a fist aspect of the invention, we provide a voice markup language for a service application for a telecommunication service platform, the telecommunication service platform having a communication layer and a session layer, the voice mark-up language comprising an application transfer tag, the application transfer tag comprising an identifier corresponding to a further service provided on the telecommunication service platform, wherein the application transfer tag causes the session layer to cause a call connected to the service to be processed by the further service.","The application transfer tag may comprise a parameter indicating whether the call is to be processed by the originating service on completion of the processing by the further service.","The application transfer tag may comprise a parameter corresponding to a result returned by the further service, whereby on completion of the processing by the ether service the result is returned to the originating service.","According to a second aspect of the invention, we provide a voice markup language interpreter for a service for a telecommunication service platform having a communication layer and a session layer, the interpreter being operable to process a script for the service and generate an output to be passed to the telecommunication service platform in accordance with the script,","the script being written in a voice markup language of the above type, wherein when the script contains a application transfer tag, the interpreter is operable to read the identifier and generate an output to be passed to the telecommunication service platform to cause the session layer to cause a call connected to the service to be processed by a further service corresponding to the identifier provided on the telecommunication service platform.","The interpreter may be operable to read a parameter of the application transfer tag and generate an output accordingly.","The further service may have a platform service name recognised by the telecommunication service platform, and wherein the interpreter is operable to read a registry to find the platform service name corresponding to the identifier and generate the output comprising the platform service name.","The output may comprise a call to an application programming interface of the telecommunication service platform.","The output may comprise a message to a service wrapper operable to generate a call to an application programming interface of the telecommunication service platform.","According to a third aspect of the invention, we provide a service for a telecommunication service platform, the service application comprising a script which may be processed by a voice markup language interpreter, the script being written in a voice markup language.","According to a fourth aspect of the invention, we provide a call controller for a telecommunication service platform having a communication layer and a session layer, the call controller being located in the session layer, the call controller being operable to receive an instruction from a voice markup language interpreter to cause a call connected to a service to be processed by a further service corresponding to an identifier, wherein the further service has a platform service name recognised by the telecommunication service platform, and wherein the call controller is operable to read a registry to obtain the platform service name corresponding to the identifier and cause the call to be processed by the further service corresponding to the platform service name.","According to a fifth aspect of the invention, we provide a telecommunication service platform having a communication layer, a session layer and a service layer, the communication layer being operable to establish a call, and the session layer being operable to connect the call to a desired service application in the service layer for processing by the service application, wherein the service application comprises a script, the script being written in a voice markup language and the service layer comprises a voice markup language interpreter operable to process the script, the voice markup language comprising an application transfer tag, the application transfer tag comprising an identifier corresponding to a further service provided on the telecommunication service platform, wherein when the script contains a application transfer tag, the interpreter is operable to read the identifier and generate an output to be passed to the session layer to cause the call connected to the service to be processed by a further service corresponding to the identifier provided on the telecommunication service platform.","According to a sixth aspect of the invention, we provide a method of providing a service for a telecommunication service platform, comprising the steps of processing a script for a service application to provide the service wherein the script is written in a voice markup language and comprises an application transfer tag, reading the application transfer tag and reading an identifier corresponding to a further service application in the tag, and causing a call being processed by the service application to be processed by the further service application.","A service application written in a voice mark-up language can thus, in accordance with the present invention invoke another application and particularly a compiled service application by invoking an appropriate method provided by an API of the telecommunication service platform without requiring a call to be transferred or redirected at the network level.","Referring now to , a telecommunication platform  similar to that shown in  is illustrated. In this example however, the service layer  comprises a service application  written in a voice mark-up language embodying the present invention, and a voice mark-up language interpreter  embodying the present invention. The service layer also comprises other service applications as described in relation to , in particular native service applications ,  which comprise compiled programs which are able to communicate directly with the interface layer  of the session layer . Each service application , ,  is identified by a platform service name to permit calls to be routed to that service by the session layer . The service application  is implemented as a voice mark-up language script generally indicated at , which includes a application transfer tag . The application transfer tag indicates that a further service application , ,  is to process a call being processed by the service application .","The application transfer tag  may be of the form","<apptransfer target=identifier, return parameter, result parameter, . . . >. The application transfer tag thus comprises an identifier which indicates a further service application which is to process the call. The application transfer tag also includes further arguments, such as a return parameter indicating whether or not the service application is to continue to process a call after the processing has been performed by the further service application, a result parameter which indicates whether or not a result is to be returned from the further service application, and indeed any other parameters may be included in the application transfer tag as required.","It may be that the identifier included in the application transfer tag  is not the same as the platform service name of the further service, application required. It might be envisaged for example that the identifier is the name of a generic service type while the platform service name is the specific identifier of the service application implemented on the telecommunication service platform  which provides that service. To accommodate this, the voice mark-up language interpreter  is provided with a registry  which maps the identifier to the corresponding platform service name.","Although the voice markup language interpreter  is showing communication directly with the interface  of the session layer , it will be apparent that if necessary, a service wrapper or other intermediate layer may be provided between the interpreter  and the interface .","In the particular example of voice XML, a call control extendible markup language (\u201cCCXML\u201d) script and interpreter may be located between the voice markup language interpreter  and the session layer . CCXML is specifically intended to provide call control functionality not available in VXML and so in this example the service application  may be written to be completely independent of the required call control functionality. Of course, other service wrappers or intervening adapters may be used as required or as desired.","The operation of the invention will now be discussed with reference to . First, it is presumed that a call has been received by the telecommunications service platform  and has been routed by the communication layer  and session layer  in known manner to the service application  to process. The script  is thus interpreted by the voice mark-up language interpreter  which passes messages to and from the session layer  as appropriate. At step , the voice mark-up language interpreter  reads the application transfer tag , and at step  generates a transfer request in accordance with information contained in the application transfer tag  to cause the call to be processed by a further service application. This call is then passed to the session layer  in the form of an appropriate instruction to the interface . In the JTAPI media specification, this might use the method void ReleasedToService (disposition, time out) which releases the call from the service application  to the application service indicated by the disposition parameter within the time out time required. At step  this message is received by the interface layer and at step  the interface  causes the call to be re-routed to the identified further service application . This is represented by arrow  in . At step , the further service application  receives the call as if it was a new call and at step  processes the call. When processing has been completed as shown at step , the further service application  releases the call by means of a standard instruction to the interface layer . At step , the platform framework checks whether or not the call is to be returned to the service application ; if yes, at step  the service application  continues processing the call, possibly using a result returned from the further service application, otherwise at step  the call is ended in conventional manner.","The step of consulting the registry  to map the identifier in the application transfer tag to the platform service name of the server so this application  may be performed by the voice mark-up language interpreter  at any appropriate time, for example when generating the output instruction at step . In an alternative embodiment as shown in , in the telecommunication platform \u2032, a registry \u2032 is provided as part of the session layer \u2032 and not as part of a voice mark-up language interpreter \u2032. The instruction generated by the voice mark-up language  at step  may then simply contain the identifier present in the application transfer tag , and the step of mapping the identifier to the platform service name of the further service application  is performed by the session layer , for example by the call controller \u2032, at step .","The telecommunication platform , \u2032 may thus be used to provide any appropriate service or combination of services as appropriate. For example, purely by way of an example, a user may call a number associated with voice mail and information services offered to that user. The call is received by the telecommunication service platform  and routed to the service application . The service application  provides an easily coded and adapted portal. Thus, for example the script  may be written to play a welcome message and then render a menu of choices available to the user, offering for example access to voice mail, weather information, a booking service or to end the call. The user then returns a choice for example by pressing a button on his keypad to return a DTMF tone which may be detected by the service application , or by a voice response, for example \u201cvoice mail\u201d. When the user selects an option corresponding to a particular service application will cause the call to be transferred to that service application to provide that service by the appropriate application transfer tag . Once the user has finished listening to his voice mail, the voice mail service application, in this example the further service application , will return the call to the service application  which may then offer a menu to the user to continue the call, or play a goodbye message and end the call as appropriate. In this manner, the service application  provides a portal through which a user is able to access services provided by the compiled service applications , . It will be apparent that the flexibility of this invention is such that any appropriate application may be implemented as desired.","In the present specification \u201ccomprises\u201d means \u201cincludes or consists of\u201d and \u201ccomprising\u201d means \u201cincluding or consisting of\u201d.","The features disclosed in the foregoing description, or the following claims, or the accompanying drawings, expressed in their specific forms or in terms of a means for performing the disclosed function, or a method or process for attaining the disclosed result, as appropriate, may, separately, or in any combination of such features, be utilised for realising the invention in diverse toes hereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Some embodiments of the present invention will now be described by way of example only with reference to the accompanying drawings wherein;",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
