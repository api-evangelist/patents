---
title: Analytic solution integration
abstract: Embodiments relate analytic solution integration. According to an aspect, a method for analytic solution integration includes establishing an engine abstraction layer configured to interface with a plurality of analytic engines associated with a plurality of models. A services layer is interfaced with the engine abstraction layer to provide a communication interface to invoke the analytic engines associated with the models. A user interface is provided to the services layer. The user interface is configured to define an analytic solution as an executable sequence of one or more of the models.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09105001&OS=09105001&RS=09105001
owner: International Business Machines Corporation
number: 09105001
owner_city: Armonk
owner_country: US
publication_date: 20130801
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["This is a continuation application that claims the benefit of U.S. patent application Ser. No. 13\/874,616 filed May 1, 2013, the contents of which are incorporated by reference herein in their entirety.","The present invention relates generally to computerized analytics, and more specifically, to integrating, deploying, and monitoring of analytics solutions.","In attempting to model complex systems and perform predicting, planning and budgeting for municipal development, a number of factors must be considered. In order to develop scenarios to seek optimized solutions for various constraints, such as time, location, and funding, various analytic tools can be used. Asset optimization at a city-level can also improve cost-to-performance ratios of large asset bases like water systems, grid systems, and transportation infrastructures such as rail and bus lines. To better leverage existing and planned infrastructure, planners need robust models and access to a variety of analytics.","Existing analytical tools that perform complex mathematical modeling, statistical modeling, simulation or physical modeling are typically developed and tailored towards particular industries and customers. This can create challenges when attempting to integrate multiple analytical tools and models within a common enterprise environment. Once analytic models are built, it takes considerable time and resources to integrate the models into an enterprise environment. An analytic model expert is generally not skilled in integration, while an enterprise information technology (IT) developer seldom has expertise in the application programming interface (API) to the analytical tools. This results in a skill deficiency and hence becomes a barrier-of-entry for enterprise applications seeking to leverage predictive and prescriptive capabilities within an enterprise environment.","An embodiment is a computer-implemented method for analytic solution integration. The method includes establishing an engine abstraction layer configured to interface with a plurality of analytic engines associated with a plurality of models. A services layer is interfaced with the engine abstraction layer to provide a communication interface to invoke the analytic engines associated with the models. A user interface is provided to the services layer. The user interface is configured to define an analytic solution as an executable sequence of one or more of the models.","Another embodiment is a computer program product for analytic solution integration. The computer program product includes a computer readable storage medium having computer readable program code embodied therewith, said program code being executable by a processor to perform a method. The method includes establishing an engine abstraction layer configured to interface with a plurality of analytic engines associated with a plurality of models. A services layer is interfaced with the engine abstraction layer to provide a communication interface to invoke the analytic engines associated with the models. A user interface is provided to the services layer. The user interface is configured to define an analytic solution as an executable sequence of one or more of the models.","A further embodiment is a system for analytic solution integration. The system includes a processor and an analytics solution kit executable by the processor to perform a method. The method includes establishing an engine abstraction layer configured to interface with a plurality of analytic engines associated with a plurality of models. A services layer is interfaced with the engine abstraction layer to provide a communication interface to invoke the analytic engines associated with the models. A user interface is provided to the services layer. The user interface is configured to define an analytic solution as an executable sequence of one or more of the models.","Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features, refer to the description and to the drawings.","Embodiments described herein include an analytics solution kit for analytic solution integration. An analytics solution kit (ASK) is a middleware service that enriches enterprise applications with descriptive, predictive and prescriptive capabilities using analytical and optimization solutions. The deployment, execution and management of analytical and optimization models is managed seamlessly using ASK. ASK is a framework that enables management of complex mathematical programs built using a variety of tools such as optimization and modeling applications. Once models are built, ASK enables models that may otherwise be limited to a particular domain to be leveraged across multiple domains. Rather than building one-off models for each industry and customer, analytic experts can use ASK to deploy and manage a set of reusable analytical models that can be used within an industry domain. For example, to optimally route a set of crews to distant locations to fix problems with assets, mathematical programming models can be built and leveraged from a water domain to a rail domain to a power distribution domain.","In exemplary embodiments, ASK runs on top of an application server and provides an ability to define a solution, register a data schema for the solution, deploy models or analytic sequences associated with the solution, and associate those models with a particular technology. ASK is designed to support a wide variety of analytic engines. The installation and configuration of the analytic engines is contained within the ASK installation, thereby insulating the user from these issues. ASK supports analytical models from a variety of applications and custom engines, as well as deployment and execution of various reports.","To provide broad integration of analytic solutions, ASK employs a combination of abstraction layers, domain separation, and domain driven analytics. Abstraction layers can be developed as driven by common integration patterns at multiple levels in a solution stack, starting with a data ingest layer, a data management layer, an analytics engine layer and a user interaction layer. Domain separation encapsulates domain dependent data artifacts into a reference semantic model (RSM) and develops uniform methods of swapping in\/out domain RSMs. Domain driven analytics leverage models developed in several ongoing engagements and integrates into them into ASK.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","102","104","106","102","108","110","112","114","116","116","116","116","102","108","114","106","102","110","116","104","106","106","118","120","122","120","122","106","104","104"],"i":["a","b","c ","n "]},"Examples of types of artifacts that are supported within ASK include schemas , models , and solutions associated with the solution sequencing . A schema is a representation of a data model. Typical schema formats include XSD, which is an extensible markup language (XML) representation of a schema definition, and data definition language (DDL), which is a structured query language (SQL) representation. Within ASK a schema is used to describe the data that are available to an analytic model. A schema is created by a data architect, such as data architect , who understands what customer data is available. The schema is installed as part of the schemas  in ASK so that the schema can be shared with an analytic modeler. A schema can be installed into ASK using a Schemas\/Schema List\/Install capability in the ASK administrative console , or through a registerSchema web service.","When an analytic model is installed as one of the models , it can be associated with a particular schema. When this linkage is established it allows for validating of input data during model execution, prior to initiating the execution. A schema is not required to be associated with a model.","A model is a representation of a descriptive, prescriptive or predictive solution to a problem. There are a variety of packaged modeling engines which ASK can support. Examples include IBM ILOG CP and CPLEX, IBM SPSS PASW Modeler, and IBM Cognos, which may be trademarks or registered trademarks of International Business Machines Corporation. The core analytic engines  and the packaged analytic engines  support building of optimization models and optimizing a range of planning and scheduling problems. The engines  and  may solve linear optimization problems, constraint programming problems, perform predictive analytics, data mining, perform business intelligence reporting, and execute a variety of mathematical models. The ASK architecture is designed to enable seamless integration of other analytic engines and also provides support for custom code engines, such as JAVA engines. The ASK engine abstraction layer  enables models to be installed and run within ASK without requiring specific analytic engine knowledge. The details of the engines are hidden from the ASK users.","A solution within ASK is a sequence of steps that are executed sequentially solve a problem. The steps are represented as nodes, and a node can be a model execution or a data transformation (implementation in progress). The solution can be created visually using a Solution\/Analytic Solution Sequence\/New capability in the ASK administrative console .","ASK web services can be provided using GET, POST, PUT, and DELETE operations, similar to database operations. GET retrieves information. POST creates, updates or deletes data. PUT creates or updates data. DELETE deletes data. The endpoint used for the web service is merely the end of a uniform resource identifier (URI), which begins with a uniform resource locator (URL) of an ASK instance and includes the general address of RESTful web services  in ASK.","Example web services include data service, validation service, execution service, configuration service, and logging service. Data service provides the ability to install, uninstall, activate, deactivate and update the schemas  and models . Solutions can be uninstalled by a data service; however, a visual editor is typically used to install solutions. Validation service provides the ability to validate the input data, input parameter and models. Execution service provides a method to execute models and sequence solutions. Configuration service defines methods to manage system properties. Logging service provides methods to retrieve logs and set a logging level. Table 1 below describes a common set of web services exposed by ASK.",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ASK Exposed Web Services"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Get Schemas","Retrieves the list of Schemas registered on the "]},{"entry":[{},"server"]},{"entry":["Get Models","Retrieves the list of models registered on the "]},{"entry":[{},"server"]},{"entry":["Get Analytic Engines ","Retrieves the list of Engines registered on the "]},{"entry":[{},"server"]},{"entry":["Get Solutions","Retrieves the list of Solutions registered on the "]},{"entry":[{},"server"]},{"entry":["Get Sequences","Retrieves the list of Sequences registered on "]},{"entry":[{},"the server."]},{"entry":["Get File","Retrieves the model\/schema file specified by Id"]},{"entry":["Register Schema","Registers a new schema which is stored on the "]},{"entry":[{},"ASK server"]},{"entry":["Register Model","Registers a new Model which is stored on the "]},{"entry":[{},"ASK server"]},{"entry":["UnRegister","Deletes an existing schema\/model\/sequence\/"]},{"entry":["Schema\/Model\/Solution","solution from the ASK server and deletes "]},{"entry":[{},"any models that are associated with a"]},{"entry":[{},"schema when a schema is deleted."]},{"entry":["Change Status of","Sets a flag indicating that a particular "]},{"entry":["Schema\/Model","schema\/model is active\/inactive"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Method Get Schemas\u2014Retrieves a list of schemas registered on the server.","URL: http:\/\/...askws\/rest\/dataService\/schemas{solutionId}","Method: GET","Accept: application\/json","Parameters:","solutionId\u2014Id of the Solution","Return Value Template:",{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{\u2033schemas\u2033: {\u2033schema\u2033: ["]},{"entry":[{},"{"]},{"entry":[{},"\u2033file\u2033: \u2033schema.xsd\u2033,"]},{"entry":[{},"\u2033isActive\u2033: \u2033false\u2033,"]},{"entry":[{},"\u2033schemaId\u2033: \u2033SFX_Schema_MS_01\u2033,"]},{"entry":[{},"\u2033schemaName\u2033: \u2033Maintenance Scheduling\u2033,"]},{"entry":[{},"\u2033schemaPermission\u2033: \u2033AllowFullPermission\u2033,"]},{"entry":[{},"\u2033validation\u2033: \u2033off\u2033"]},{"entry":[{},"},"]},{"entry":[{},"{"]},{"entry":[{},"\u2033file\u2033: \u2033FailurePredictionSchema.xsd\u2033,"]},{"entry":[{},"\u2033isActive\u2033: \u2033false\u2033,"]},{"entry":[{},"\u2033schemaId\u2033: \u2033SFX_Schema_SPSS_01\u2033,"]},{"entry":[{},"\u2033schemaName\u2033: \u2033SPSS Modeling Schema 1\u2033,"]},{"entry":[{},"\u2033schemaPermission\u2033: \u2033AllowFullPermission\u2033,"]},{"entry":[{},"\u2033validation\u2033: \u2033off\u2033"]},{"entry":[{},"}"]},{"entry":[{},"]}}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Method Get Models\u2014Retrieves a list of models registered on the server.","URL: http:\/\/...askws\/rest\/dataService\/models{solutionId}","Method: GET","Accept: application\/json","Parameters:","solutionId\u2014Id of the Solution","Return value Template:",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{\u2033models\u2033: {\u2033model\u2033: ["]},{"entry":[{},"{"]},{"entry":[{},"\u2033analyticalEngineId\u2033: \u2033sfx_eng_1\u2033,"]},{"entry":[{},"\u2033file\u2033: \u2033ms_opl.mod\u2033,"]},{"entry":[{},"\u2033isActive\u2033: \u2033true\u2033,"]},{"entry":[{},"\u2033modelId\u2033: \u2033SFX_Model_MS_01\u2033,"]},{"entry":[{},"\u2033modelName\u2033: \u2033Rout Scheduling\u2033,"]},{"entry":[{},"\u2033modelPermission\u2033: \u2033AllowFullPermission\u2033,"]},{"entry":[{},"\u2033schemaId\u2033: \u2033SFX_Schema_MS_01\u2033,"]},{"entry":[{},"\u2033validation\u2033: \u2033off\u2033"]},{"entry":[{},"},"]},{"entry":[{},"{"]},{"entry":[{},"\u2033analyticalEngineId\u2033: \u2033sfx_eng_3\u2033,"]},{"entry":[{},"\u2033file\u2033: \u2033AnomalyDetection.str\u2033,"]},{"entry":[{},"\u2033isActive\u2033: \u2033true\u2033,"]},{"entry":[{},"\u2033modelId\u2033: \u2033SFX_Model_SPSS_02\u2033,"]},{"entry":[{},"\u2033modelName\u2033: \u2033SPSS Modeling 2\u2033,"]},{"entry":[{},"\u2033modelPermission\u2033: \u2033AllowFullPermission\u2033,"]},{"entry":[{},"\u2033schemaId\u2033: \u2033SFX_Schema_SPSS_01\u2033,"]},{"entry":[{},"\u2033validation\u2033: \u2033off\u2033"]},{"entry":[{},"}"]},{"entry":[{},"]}}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Method Get Analytic Engines\u2014Retrieves a list of Analytic engines registered on the server.","URL: http:\/\/...askws\/\/rest\/dataService\/engines","Method: GET","Accept: application\/json","Return value Template:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{\u2033analyticEngines\u2033: {\u2033analyticEngine\u2033: ["]},{"entry":[{},"{"]},{"entry":[{},"\u2033engine\u2033: \u2033ILOG\u2033,"]},{"entry":[{},"\u2033engineId\u2033: \u2033sfx_eng_1\u2033,"]},{"entry":[{},"\u2033subEngine\u2033: \u2033CP\u2033,"]},{"entry":[{},"\u2033version\u2033: \u203312.2\u2033"]},{"entry":[{},"},"]},{"entry":[{},"{"]},{"entry":[{},"\u2033engine\u2033: \u2033SPSS\u2033,"]},{"entry":[{},"\u2033engineId\u2033: \u2033sfx_eng_3\u2033,"]},{"entry":[{},"\u2033subEngine\u2033: \u2033SPSS\u2033,"]},{"entry":[{},"\u2033version\u2033: \u203313\u2033"]},{"entry":[{},"}"]},{"entry":[{},"]}}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Method Get Solutions\u2014Retrieves a list of solutions registered on the server.","URL: http:\/\/...askws\/\/rest\/dataService\/solutions","Method: GET","Accept: application\/json","Return value Template:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"{\u2033solutions\u2033: {\u2033solution\u2033: ["]},{"entry":[{},{},"\u2002{"]},{"entry":[{},{},"\u2002\u2033solutionCreateDate\u2033: \u20332011-09-19T08:42:08-07:00\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionDescription\u2033: \u2033This is a very useful solution. "]},{"entry":[{},{},"\u2002This is the description for the solution. It can help "]},{"entry":[{},{},"\u2002organize Schemas, Models, and Sequences.\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionEmail\u2033: \u2033example@ibm.com\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionId\u2033: \u2033SFX_Solution_983\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionName\u2033: \u2033Useful Solution\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionOwner\u2033: \u2033Gus\u2033"]},{"entry":[{},{},"\u2002},"]},{"entry":[{},{},"\u2002{"]},{"entry":[{},{},"\u2002\u2033solutionCreateDate\u2033: \u20332011-09-15T10:19:45-07:00\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionDescription\u2033: \u2033Pipe failure prediction solution "]},{"entry":[{},{},"\u2002developed in China\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionEmail\u2033: \u2033example@us.ibm.com\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionId\u2033: \u2033SFX_Solution_606\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionName\u2033: \u2033MT - Pipe Failure Prediction\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionOwner\u2033: \u2033M. Taylor\u2033"]},{"entry":[{},{},"\u2002},"]},{"entry":[{},{},"\u2002{"]},{"entry":[{},{},"\u2002\u2033solutionCreateDate\u2033: \u20332011-09-16T10:51:30-07:00\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionDescription\u2033: \u2033This is a test solution\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionEmail\u2033: \u2033example@us.ibm.com\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionId\u2033: \u2033SFX_Solution_451\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionName\u2033: \u2033Test Solution\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionOwner\u2033: \u2033M. Schulman\u2033"]},{"entry":[{},{},"\u2002},"]},{"entry":[{},{},"\u2002{"]},{"entry":[{},{},"\u2002\u2033solutionCreateDate\u2033: \u20332011-09-22T06:14:34-07:00\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionDescription\u2033: \u2033This is a test solution\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionEmail\u2033: \u2033example@us.ibm.com\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionId\u2033: \u2033SFX_Solution_202\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionName\u2033: \u2033Test Solution\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionOwner\u2033: \u2033M. Schulman\u2033"]},{"entry":[{},{},"\u2002},"]},{"entry":[{},{},"\u2002{"]},{"entry":[{},{},"\u2002\u2033solutionCreateDate\u2033: \u20332011-10-10T19:34:21-07:00\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionDescription\u2033: \u2033This is a workforce scheduling "]},{"entry":[{},{},"\u2002solution using the analytics from the DC Water project\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionEmail\u2033: \u2033example@us.ibm.com\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionId\u2033: \u2033SFX_Solution_345\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionModifiedDate\u2033 : \u20332011-10-10T 19:34:36-07:00\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionName\u2033: \u2033Intelligent Water MT\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionOwner\u2033: \u2033MT\u2033"]},{"entry":[{},{},"\u2002},"]},{"entry":[{},{},"\u2002{"]},{"entry":[{},{},"\u2002\u2033solutionCreateDate\u2033: \u20332011-10-11T08:33:54-07:00\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionDescription\u2033: \u2033This is a test\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionEmail\u2033: \u2033example@us.ibm.com\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionId\u2033 : \u2033SFX_Solution_196\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionName\u2033: \u2033Intelligent Water v1\u2033,"]},{"entry":[{},{},"\u2002\u2033solutionOwner\u2033: \u2033MT\u2033"]},{"entry":[{},{},"\u2002}"]},{"entry":[{},{},"\u2002]}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Method Get Sequences\u2014Retrieves a list of sequences registered on the server.","URL: http:\/\/...askws\/\/rest\/dataService\/sequences{solutionId}","Method: GET","Accept: application\/json","Parameters:","solutionId\u2014Id of the Solution","Return value Template:",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"{\u2033sequences\u2033: {\u2033sequence\u2033 : ["]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033author\u2033: \u2033Gus\u2033,"]},{"entry":[{},{},"\u2033date\u2033: \u20332011-03-28T21:51:49-07:00\u2033 ,"]},{"entry":[{},{},"\u2033node\u2033: ["]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033id\u2033: \u20331\u2033,"]},{"entry":[{},{},"\u2033label\u2033: \u2033Start\u2033,"]},{"entry":[{},{},"\u2033modelId\u2033: \u2033--\u2033,"]},{"entry":[{},{},"\u2033modelKind\u2033: \u2033START\u2033,"]},{"entry":[{},{},"\u2033xpos\u2033: \u203334\u2033,"]},{"entry":[{},{},"\u2033ypos\u2033: \u2033101\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033id\u2033: \u20332\u2033,"]},{"entry":[{},{},"\u2033label\u2033: \u2033End\u2033,"]},{"entry":[{},{},"\u2033modelId\u2033: \u2033--\u2033,"]},{"entry":[{},{},"\u2033modelKind\u2033: \u2033END\u2033,"]},{"entry":[{},{},"\u2033xpos\u2033: \u2033529\u2033,"]},{"entry":[{},{},"\u2033ypos\u2033: \u203319\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033id\u2033: \u20333\u2033,"]},{"entry":[{},{},"\u2033label\u2033: \u2033Rout Scheduling\u2033,"]},{"entry":[{},{},"\u2033modelId\u2033: \u2033SFX_Model_MS_01\u2033,"]},{"entry":[{},{},"\u2033modelKind\u2033: \u2033ILOG\u2033,"]},{"entry":[{},{},"\u2033xpos\u2033: \u2033185\u2033,"]},{"entry":[{},{},"\u2033ypos\u2033: \u203311\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033id\u2033: \u20334\u2033,"]},{"entry":[{},{},"\u2033label\u2033: \u2033Test_scheduling_model\u2033,"]},{"entry":[{},{},"\u2033modelId\u2033: \u2033SFX_Model_283\u2033,"]},{"entry":[{},{},"\u2033modelKind\u2033: \u2033ILOG\u2033,"]},{"entry":[{},{},"\u2033xpos\u2033: \u2033202\u2033,"]},{"entry":[{},{},"\u2033ypos\u2033: \u2033172\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033id\u2033: \u20335\u2033,"]},{"entry":[{},{},"\u2033label\u2033: \u2033Misc\u2033,"]},{"entry":[{},{},"\u2033modelId\u2033: \u2033--\u2033,"]},{"entry":[{},{},"\u2033modelKind\u2033: \u2033MISC\u2033,"]},{"entry":[{},{},"\u2033xpos\u2033: \u2033398\u2033,"]},{"entry":[{},{},"\u2033ypos\u2033: \u203372\u2033"]},{"entry":[{},{},"}"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033nodelink\u2033: ["]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033from\u2033: \u20331\u2033,"]},{"entry":[{},{},"\u2033id\u2033: \u20331\u2033,"]},{"entry":[{},{},"\u2033to\u2033: \u20333\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033from\u2033: \u20331\u2033,"]},{"entry":[{},{},"\u2033id\u2033: \u20332\u2033,"]},{"entry":[{},{},"\u2033to\u2033: \u20334\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033from\u2033: \u20333\u2033,"]},{"entry":[{},{},"\u2033id\u2033: \u20333\u2033,"]},{"entry":[{},{},"\u2033to\u2033: \u20335\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033from\u2033: \u20334\u2033,"]},{"entry":[{},{},"\u2033id\u2033: \u20334\u2033,"]},{"entry":[{},{},"\u2033to\u2033: \u20335\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033from\u2033: \u20335\u2033,"]},{"entry":[{},{},"\u2033id\u2033: \u20335\u2033,"]},{"entry":[{},{},"\u2033to\u2033: \u20332\u2033"]},{"entry":[{},{},"}"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033sequenceid\u2033: \u2033SFX_Sequence_759\u2033,"]},{"entry":[{},{},"\u2033title\u2033: \u2033Some small test\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033author\u2033: \u2033John Doe\u2033,"]},{"entry":[{},{},"\u2033date\u2033: \u20332011-03-28T22:03:40-07:00\u2033,"]},{"entry":[{},{},"\u2033node\u2033: ["]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033id\u2033: \u20331\u2033,"]},{"entry":[{},{},"\u2033label\u2033: \u2033Start\u2033,"]},{"entry":[{},{},"\u2033modelId\u2033: \u2033--\u2033,"]},{"entry":[{},{},"\u2033modelKind\u2033: \u2033START\u2033,"]},{"entry":[{},{},"\u2033xpos\u2033: \u203321\u2033,"]},{"entry":[{},{},"\u2033ypos\u2033: \u203346\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033id\u2033: \u20332\u2033,"]},{"entry":[{},{},"\u2033label\u2033: \u2033End\u2033,"]},{"entry":[{},{},"\u2033modelId\u2033: \u2033--\u2033,"]},{"entry":[{},{},"\u2033modelKind\u2033: \u2033END\u2033,"]},{"entry":[{},{},"\u2033xpos\u2033: \u2033252\u2033,"]},{"entry":[{},{},"\u2033ypos\u2033: \u203356\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033id\u2033: \u20333\u2033,"]},{"entry":[{},{},"\u2033label\u2033: \u2033Pipe Prediction 2\u2033,"]},{"entry":[{},{},"\u2033modelId\u2033: \u2033SFX_Model_413\u2033,"]},{"entry":[{},{},"\u2033modelKind\u2033: \u2033SPSS_MODELER\u2033,"]},{"entry":[{},{},"\u2033xpos\u2033: \u203392\u2033,"]},{"entry":[{},{},"\u2033ypos\u2033: \u2033117\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033id\u2033: \u20334\u2033,"]},{"entry":[{},{},"\u2033label\u2033: \u2033PFP Felipe Test\u2033,"]},{"entry":[{},{},"\u2033modelId\u2033: \u2033SFX_Model_14\u2033,"]},{"entry":[{},{},"\u2033modelKind\u2033: \u2033SPSS_MODELER\u2033,"]},{"entry":[{},{},"\u2033xpos\u2033: \u2033222\u2033,"]},{"entry":[{},{},"\u2033ypos\u2033: \u2033124\u2033"]},{"entry":[{},{},"}"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033nodelink\u2033: ["]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033from\u2033: \u20331\u2033,"]},{"entry":[{},{},"\u2033id\u2033: \u20331\u2033,"]},{"entry":[{},{},"\u2033to\u2033: \u20333\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033from\u2033: \u20333\u2033,"]},{"entry":[{},{},"\u2033id\u2033: \u20332\u2033,"]},{"entry":[{},{},"\u2033to\u2033: \u20334\u2033"]},{"entry":[{},{},"},"]},{"entry":[{},{},"{"]},{"entry":[{},{},"\u2033from\u2033: \u20334\u2033,"]},{"entry":[{},{},"\u2033id\u2033: \u20333\u2033,"]},{"entry":[{},{},"\u2033to\u2033: \u20332\u2033"]},{"entry":[{},{},"}"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033sequenceid\u2033: \u2033SFX_Sequence_921\u2033,"]},{"entry":[{},{},"\u2033title\u2033: \u2033Marys test\u2033"]},{"entry":[{},{},"}"]},{"entry":[{},{},"]}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Method Get File\u2014Retrieves a specific schema\/model file specified by schemaId\/modelId, respectively.","URL: http:\/\/...askws\/rest\/dataService\/getfile\/{askType}\/{id}","Method: GET","Accept: plain\/text","Parameters:","askType\u2014schema\/model type","id\u2014schema\/model Id","Return value Parameters:","Return value is a plain text file.","Method Register Schema\u2014Registers a new schema which is stored on the ASK server.","URL: http:\/\/...askws\/rest\/dataService\/registerSchema","Method: PUT","Content-type: multipart\/form-data","Accept: application\/json","Parameters:","In this case, a MIME multipart message including of two parts is sent. Each part starts with a part boundary (an arbitrary string) and contains two headers\u2014label and Content-Type\u2014followed by the JSON\/text document. The first part is the schema meta data in JSON format and the second part is the schema file in text\/plain format.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"--AskBoundary"]},{"entry":[{},{},"\u2002label: schema"]},{"entry":[{},{},"\u2002Content-Type: application\/json"]},{"entry":[{},{},"\u2002{\u2033schema\u2033:{"]},{"entry":[{},{},"\u2002\u2033validation\u2033: \u2033off\u2033,"]},{"entry":[{},{},"\u2002\u2033schemaPermission\u2033:\u2033AllowFullPermission\u2033,"]},{"entry":[{},{},"\u2002\u2033file\u2033:\u2033schema.xsd\u2033,"]},{"entry":[{},{},"\u2002\u2033schemaId\u2033:\u2033SFX_Schema_MS_01\u2033,"]},{"entry":[{},{},"\u2002\u2033isActive\u2033:\u2033false\u2033,"]},{"entry":[{},{},"\u2002\u2033schemaName\u2033:\u2033Maintenance Scheduling\u2033"]},{"entry":[{},{},"\u2002}}"]},{"entry":[{},{},"\u2002--AskBoundary"]},{"entry":[{},{},"\u2002label: schema_file"]},{"entry":[{},{},"\u2002Content-Type: text\/plain"]},{"entry":[{},{},"\u2002---schema file content here---"]},{"entry":[{},{},"--AskBoundary"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033log\u2033: ["]},{"entry":[{},{},"\u2033Schema Validation Successful\u2033,"]},{"entry":[{},{},"\u2033Schema Registration Successful\u2033,"]},{"entry":[{},{},"\u2033Datastore: Persistance successful for cc54f2c0-"]},{"entry":[{},{},"0b6f-467a-a48d-0a5560687368-schema.xsd\u2033"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Method Register Model\u2014Registers a new model which is stored on the ASK server.","URL: http:\/\/...askws\/rest\/dataService\/registerModel","Method: PUT","Content-type: multipart\/form-data","Accept: application\/json","Parameters:","In this case, a MIME multipart message is sent that includes two parts. Each part starts with a part boundary (an arbitrary string) and contains two headers\u2014label and Content-Type\u2014followed by the JSON\/text document. The first part contains the model meta-data and the second part contains the model file.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"--AskBoundary"]},{"entry":[{},{},"\u2002label: model"]},{"entry":[{},{},"\u2002Content-Type: application\/json"]},{"entry":[{},{},"\u2002{\u2033model\u2033: {"]},{"entry":[{},{},"\u2002\u2033analyticalEngineId\u2033: \u2033sfx_eng_1\u2033,"]},{"entry":[{},{},"\u2002\u2033file\u2033: \u2033ms_opl.mod\u2033,"]},{"entry":[{},{},"\u2002\u2033isActive\u2033: \u2033true\u2033,"]},{"entry":[{},{},"\u2002\u2033modelId\u2033: \u2033SFX_Model_MS_01\u2033,"]},{"entry":[{},{},"\u2002\u2033modeName\u2033: \u2033Rout Scheduling\u2033,"]},{"entry":[{},{},"\u2002\u2033modelPermission\u2033: \u2033AllowFullPermission\u2033,"]},{"entry":[{},{},"\u2002\u2033schemaId\u2033: \u2033SFX_Schema_MS_01\u2033,"]},{"entry":[{},{},"\u2002\u2033validation\u2033: \u2033off\u2033"]},{"entry":[{},{},"\u2002}}"]},{"entry":[{},{},"\u2002--AskBoundary"]},{"entry":[{},{},"\u2002label: model_file"]},{"entry":[{},{},"\u2002Content-Type: text\/plain"]},{"entry":[{},{},"--AskBoundary"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033log\u2033: ["]},{"entry":[{},{},"\u2033Model Registration: successful\u2033,"]},{"entry":[{},{},"\u2033Datastore: Persistance successful for 04505e84-"]},{"entry":[{},{},"3a2a-440e-9685-e8499000207d-temp.txt\u2033"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Method Unregister Schema\/Model\/Sequence\/Solution\u2014Deletes an existing schema\/model\/sequence\/solution from the ASK server. If deleting schemas, it deletes any models that are associated with that schema.","URL: http:\/\/...askws\/rest\/dataService\/unregister\/{askType}\/{stringIds}","Method: DELETE","Accept: application\/json","Parameters:","askType\u2014schema\/model","stringIds\u2014schemaId\/modelId","Return value Parameters:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033log\u2033: ["]},{"entry":[{},{},"\u2033Succesfully deleted Model: SFX_Model_MS_01\u2033,"]},{"entry":[{},{},"\u2033Succesfully deleted Schema: SFX_Schema_MS_01\u2033,"]},{"entry":[{},{},"\u2033Schemas deleted successfully\u2033"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033messageId\u2033: \u2033SFX_MSG_Validation\u2033,"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Method Change Status of Schema\/Model\u2014Sets a flag indicating that a particular schema\/model is active\/inactive.","URL: http:\/\/...askws\/rest\/dataService\/changestatus\/{askType}\/{statusType}\/{stringIds}","Method: POST","Accept: application\/json","Parameters:","askType\u2014schema\/model","statusType\u2014active\/inactive","stringIds\u2014schemaId\/modelId","Return value Parameters:",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033log\u2033: \u2033Schema status updated successfully\u2033,"]},{"entry":[{},{},"\u2033messageId\u2033: \u2033SFX_MSG_Validation\u2033,"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Table 2 below describes a set of common validation services exposed by ASK.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ASK Exposed Validation Services"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Validate Data","Input XML data files are validated in the "]},{"entry":[{},"server against the xml schema "]},{"entry":[{},"associated with the model used."]},{"entry":["Validate Sequence Data","Input XML data files are validated in the "]},{"entry":[{},"server against the xml schemas associated "]},{"entry":[{},"with the models attached to the \u201cstart\u201d"]},{"entry":[{},"nodes of a sequence solution."]},{"entry":["Validate Model","Provides the ability to validate the model"]},{"entry":["Validate ModelParameters","Provides the ability to validate the model "]},{"entry":[{},"parameters"]},{"entry":["Validate","Provides the ability to validate the "]},{"entry":["SequenceParameters","sequence parameters used for"]},{"entry":[{},"all models in a sequence solution"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Method Validate Data\u2014Input XML data files are validated in the server against the xml schema associated with the model used.","URL: http:\/\/...askws\/rest\/validationService\/data\/{modelId}","Method: POST","Content-type: multipart\/form-data","Accept: application\/json","Parameters:","modelId\u2014Id of the Model","The data file to be validated is attached to the request, as a MIME multipart message.","--AskBoundary","filename: input.xsd","Content-Type: text\/plain","---datafile content here---","--AskBoundary","Return value Parameters:",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033log\u2033: ["]},{"entry":[{},{},"\u2033Warning: SchemaLocation: schemaLocation"]},{"entry":[{},{},"value = \u2032C..\/schema\/schema.xsd\u2032"]},{"entry":[{},{},"must have even number of URI's.\u2033,"]},{"entry":[{},{},"\u2033Data Validation Successful\u2033"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Method Validate Sequence Data\u2014Input XML data files are validated in the server against the xml schema associated with the model used.","URL: http:\/\/...askws\/rest\/validationService\/sequenceData\/{solutionId}","Method: POST","Content-type: multipart\/form-data","Accept: application\/json","Parameters:","solutionId\u2014Id of the Solution","The data file to be validated is attached to the request, as a MIME multipart message.","--AskBoundary","filename: input.xsd","Content-Type: text\/plain","---datafile content here---","--AskBoundary","Return value Parameters:",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033log\u2033: ["]},{"entry":[{},{},"\u2033Warning: SchemaLocation: schemaLocation "]},{"entry":[{},{},"value = \u2032C..\/schema\/schema.xsd\u2032"]},{"entry":[{},{},"must have even number of URI's.\u2033,"]},{"entry":[{},{},"\u2033Solution Data Validation Successful\u2033"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Method Validate Model\u2014Provides the ability to validate the model.","URL: http:\/\/...askws\/rest\/validationService\/model\/{modelId}","Method: POST","Content-type: multipart\/form-data","Accept: application\/json","Parameters:","modelId\u2014Id of the Model","The model file to be validated is attached to the request, as a MIME multipart message.","--AskBoundary","filename: input.mod","Content-Type: text\/plain","---modelfile content here---","--AskBoundary","Return value Parameters:",{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033log\u2033: \u2033Model Validation: successful\u2033,"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Method Validate Model Parameters\u2014Provides the ability to validate the model parameters.","URL: http:\/\/...askws\/rest\/validationService\/modelParameters\/{modelId}","Method: POST","content-type: multipart\/form-data","Accept: application\/json","Parameters:","modelId\u2014Id of the Model","The model file to be validated is attached to the request, as a MIME multipart message.","--AskBoundary","filename: input.xml","Content-Type: text\/plain","---parameter file content here----","--AskBoundary","Return value Parameters:",{"@attributes":{"id":"p-0087","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033log\u2033: ["]},{"entry":[{},{},"\u2033Model Parameter Validation Successful\u2033,"]},{"entry":[{},{},"\u2033Data Validation Successful\u2033"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Method Validate Sequence Parameters\u2014Provides the ability to validate the sequence parameters used for all models in a sequence solution.","URL: http:\/\/...askws\/rest\/validationService\/sequenceParameters\/{solutionId}","Method: POST","content-type: multipart\/form-data","Accept: application\/json","Parameters:","solutionId\u2014Id of the Solution","The model file to be validated is attached to the request, as a MIME multipart message.","--AskBoundary","filename: input.xml","Content-Type: text\/plain","---parameter file content here----","--AskBoundary","Return value Parameters:",{"@attributes":{"id":"p-0094","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033log\u2033: ["]},{"entry":[{},{},"\u2033Sequence Parameter Validation Successful\u2033,"]},{"entry":[{},{},"\u2033Sequence Data Validation Successful\u2033"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Table 3 below describes a set of common execution services exposed by ASK.",{"@attributes":{"id":"p-0096","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ASK Exposed Execution Services"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Service","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Execute Model with","Executes a list of input data files, along with "]},{"entry":["Multiple files","a parameter file used in conjunction with the "]},{"entry":[{},"engine (associated with the modelId)."]},{"entry":["Execute Solution with ","Executes a list of input data files for models "]},{"entry":["Multiple files","attached to \u201cstart\u201d nodes in sequence solution, "]},{"entry":[{},"along with a parameter file used in conjunction "]},{"entry":[{},"with all of the engines (associated with all "]},{"entry":[{},"of the modelIds in the sequence solution)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Method Execute Model\u2014Executes a list of input data files, along with a parameter file used in conjunction with the engine (associated with the modelId).","URL: http:\/\/...askws\/rest\/executeService\/model\/{modelId}","Method: POST","content-type: multipart\/form-data","Accept: multipart\/form-data","Parameters:","modelId\u2014Id of the Model to be executed.","--AskBoundary","filetype: datafile","filename: input1.xml","Content-Type: text\/plain","----datafile1 content here---","--AskBoundary","filetype: datafile","filename: input2.xml","Content-Type: text\/plain","----datafile2 content here---","--AskBoundary","filetype: paramfile","filename: param.xml","Content-Type: text\/plain","----paramfile content here---","--AskBoundary","Return value Parameter:",{"@attributes":{"id":"p-0110","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","{\u2033message\u2033: {"]},{"entry":[{},"\u2033log\u2033: ["]},{"entry":[{},"\u2033Executing Model SFX_Model_MS_01\u2033,"]},{"entry":[{},"\u2033OPL Initialization complete\u2033,"]},{"entry":[{},"\u2033Data Transformation converted the source data to OPL format\u2033,"]},{"entry":[{},"\u2033Completed data transformation\u2033,"]},{"entry":[{},"\u2033! \\----------------------------------------------------------------------------\\n !"]},{"entry":[{},"Maximization problem - 11 variables, 7 constraints\\n ! TimeLimit = 5\\n ! Initial"]},{"entry":[{},"process time : 0.03s (0.00s extraction + 0.03s propagation)\\n ! . Log search space :"]},{"entry":[{},"6.3 (before), 5.2 (after)\\n ! . Memory usage : 347.5 Kb (before), 437.2 Kb"]},{"entry":[{},"(after)\\n---------------------------------------------------------------------------- \\n\/\/"]},{"entry":[{},"solution with objective -20\\nalttasks = [[\\n <1 0 10 10> <0 0 0 0> <0 0 0 0>]\\n"]},{"entry":[{},"[<0 0 0 0> <1 0 10 10> <0 0 0 0>]];\\ntask = [<1 0 10 10> <1 0 10 10>;\\nseq ="]},{"entry":[{},"[{<\\\u2033IloIntervalVarI-24CDDEA0\\\u2033 0 0 1 0 10 10>} {\\n <\\\u2033IloIntervalVarI-"]},{"entry":[{},"24CDDDE0\\\u2033 0 1 2 0 10 10>} { }];\u2033,"]},{"entry":[{},"\u2033ILOG Opl exectution complete\u2033,"]},{"entry":[{},"\u2033Executed the model successfully\u2033"]},{"entry":[{},"],"]},{"entry":[{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},"}}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Method Execute Solution\u2014Executes a list of input data files, along with a parameter file used in conjunction with the solution engines (associated with the modelIds). The input data files are used with the models associated with the sequence solution \u201cstart\u201d nodes. The parameter file is used for all of the models associated with the sequence solution.","URL: http:\/\/...askws\/rest\/executeService\/model\/{modelId}","Method: POST","content-type: multipart\/form-data","Accept: multipart\/form-data","Parameters:","solutionId\u2014Id of the solution to be executed.","--AskBoundary","filetype: datafile","filename: input1.xml","Content-Type: text\/plain","----datafile1 content here---","--AskBoundary","filetype: datafile","filename: input2.xml","Content-Type: text\/plain","----datafile2 content here---","--AskBoundary","filetype: paramfile","filename: param.xml","Content-Type: text\/plain","----paramfile content here---","--AskBoundary","Return value Parameter:",{"@attributes":{"id":"p-0124","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","{\u2033message\u2033: { "]},{"entry":[{},"\u2033log\u2033: ["]},{"entry":[{},"\u2033Executing Model SFX_Model_MS_01\u2033,"]},{"entry":[{},"\u2033OPL Initialization complete\u2033,"]},{"entry":[{},"\u2033Data Transformation converted the source data to OPL format\u2033,"]},{"entry":[{},"\u2033Completed data transformation\u2033,"]},{"entry":[{},"\u2033! -----------------------------------------------------------------------------\\n !"]},{"entry":[{},"Maximization problem - 11 variables, 7 constraints\\n ! TimeLimit = 5\\n ! Initial"]},{"entry":[{},"process time : 0.03s (0.00s extraction + 0.03s propagation)\\n ! . Log search space :"]},{"entry":[{},"6.3 (before), 5.2 (after)\\n ! . Memory usage : 347.5 Kb (before), 437.2 Kb"]},{"entry":[{},"(after)\\n----------------------------------------------------------------------------\\n\/\/"]},{"entry":[{},"solution with objective -20\\nalttasks = [[\\n <1 0 10 10> <0 0 0 0> <0 0 0 0>]\\n"]},{"entry":[{},"[<0 0 0 0> <1 0 10 10> <0 0 0 0>]];\\ntask = [< 1 0 10 10> <1 0 10 10>];\\nseq ="]},{"entry":[{},"[{<\\\u2033IloIntervalVarI-24CDDEA0\\\u2033 0 0 1 0 10 10>} {\\n <\\\u2033IloIntervalVarI-"]},{"entry":[{},"24CDDDE0\\\u2033 0 1 2 0 10 10>} { }];\u2033,"]},{"entry":[{},"\u2033ILOG Opl execution complete\u2033,"]},{"entry":[{},"\u2033Executed the model successfully\u2033"]},{"entry":[{},"],"]},{"entry":[{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},"}}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Table 5 below describes a set of common configuration services exposed by ASK.",{"@attributes":{"id":"p-0126","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ASK Exposed Configuration Services"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Service","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Set DataStoreType","Configure the server to store data on File "]},{"entry":[{},"system\/Database"]},{"entry":["Database Parameters","Provide the server all the database parameters "]},{"entry":[{},"to establish a connection."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 6 below describes a set of common logging services exposed by ASK.",{"@attributes":{"id":"p-0128","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ASK Exposed Logging Services"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Service","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Get Log Files","Retrieves the log files in the server. "]},{"entry":["(Schema\/Model\/Execution)","The following log files are available, "]},{"entry":[{},"Schema Log\/Model Log\/Execution Log."]},{"entry":["Set Logging Level","Provides the ability to set the Logging "]},{"entry":[{},"Level in the server."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Method Get Log Files\u2014Retrieves the log files in the server. The following log files may be available: Schema Log, Model Log, and Execution Log.","URL: http:\/\/...askws\/rest\/logService\/getLog\/{logType}","Method: GET","Accept: multipart\/form-data","Parameters:","logType\u2014schema\/model\/execution","Return value Parameters:","The Return value contains MIME message with two parts. The first part contains the message meta-data and the second part contains the log file.",{"@attributes":{"id":"p-0130","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","--AskBoundary"]},{"entry":[{},{},"Content-Type: application\/json"]},{"entry":[{},{},"{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033file\u2033: \u2033Schemafile.log\u2033,"]},{"entry":[{},{},"\u2033log\u2033: \u2033Succesfully retrieved the Schema Log File\u2033,"]},{"entry":[{},{},"\u2033messageId\u2033: \u2033\u2033,"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{},"--AskBoundary"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{},{}]},"Method Set Logging Level\u2014Provides an ability to set the Logging Level in the server.","URL: http:\/\/...askws\/rest\/logService\/setLog\/{logLevel}","Method: GET","Accept: application\/json","Parameter:","loglevel\u2014off\/fatal\/error\/warn\/info\/debug\/all","Return value Parameters:",{"@attributes":{"id":"p-0132","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","{\u2033message\u2033: {"]},{"entry":[{},{},"\u2033log\u2033: ["]},{"entry":[{},{},"\u2033Succefully changed the Log Level\u2033"]},{"entry":[{},{},"],"]},{"entry":[{},{},"\u2033status\u2033: \u2033success\u2033"]},{"entry":[{},{},"}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Method Requesting an ASK REST Resource\u2014Requests an ASK REST resource. The following brief client example is provided in Java for getting an ASK REST resource. This example uses Apache's Wink HttpClient, but there are not any implementation restrictions on how to request the resource and manipulate JSON parameter or return values.",{"@attributes":{"id":"p-0134","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","public class AskClient {"]},{"entry":[{},"public static void main(String args[ ]) {"]},{"entry":[{},"org.apache.wink.client.ClientConfig clientConfig = new"]},{"entry":[{},"org.apache.wink.client.ClientConfig( );"]},{"entry":[{},"org.apache.wink.client.RestClient client = new"]},{"entry":[{},"org.apache.wink.client.RestClient(clientConfig);"]},{"entry":[{},"\/\/ Get Schemas"]},{"entry":[{},"String url =\u2033http:\/\/...askws\/rest\/dataService\/schemas\u2033;"]},{"entry":[{},"org.apache.wink.client.Resource resource = client.resource(url);"]},{"entry":[{},"ClientResponse response =resource.accept(\u2033application\/json\u2033).get( );"]},{"entry":[{},"System.out.printIn(\u2033The response code is: \u2033 + response.getStatusCode( ));"]},{"entry":[{},"System.out.printIn(\u2033The response message body is: \u2033 + response.getEntity(String.class));"]},{"entry":[{},"\/\/ Register Schema"]},{"entry":[{},"Schema s = new Schema( );"]},{"entry":[{},"s.setSchemaId(\u2033SFX_Schema_MS_Murali\u2033);"]},{"entry":[{},"s.setSchemaName(\u2033Murali schema\u2033);"]},{"entry":[{},"s. setActive(false);"]},{"entry":[{},"s. setFile(\u2033Murali_file. xsd\u2033);"]},{"entry":[{},"s. setSchemaPermission(\u2033AllowFullPermission\u2033);"]},{"entry":[{},"s.setValidation(\u2033off'\u2033);"]},{"entry":[{},"File f = new File(\u2033C:\/ASK\/SFX_DataSchema\/schema1.xsd\u2033);"]},{"entry":[{},"OutPart op1 = new OutPart( );"]},{"entry":[{},"op1.setContentType(MediaType. APPLICATION_JSON);"]},{"entry":[{},"op1.setBody(s);"]},{"entry":[{},"OutPart op2 = new OutPart( );"]},{"entry":[{},"op2.setContentType(\u2033text\/plain\u2033);"]},{"entry":[{},"op2.setBody(f);"]},{"entry":[{},"List<OutPart>list = new ArrayList<OutPart>( );"]},{"entry":[{},"list.add(op1);"]},{"entry":[{},"list.add(op2);"]},{"entry":[{},"OutMulti outMulti = new OutMulti( );"]},{"entry":[{},"outMulti.setBoundary(\u2033schemaBoundary\u2033);"]},{"entry":[{},"outMulti.setOutPart(list);"]},{"entry":[{},"String url = \u2033http:\/\/...askws\/rest\/dataService\/registerSchema\u2033;"]},{"entry":[{},"org.apache.wink.client.Resource resource = client.resource(url);"]},{"entry":[{},"ClientResponse response = resource.contentType(\u2033multipart\/form-"]},{"entry":[{},"data;boundary=schemaBoundary\u2033).accept(\u2033application\/json\u2033).post(outMulti);"]},{"entry":[{},"System.out.printIn(\u2033The response code is: \u2033 + response.getStatusCode( ));"]},{"entry":[{},"System.out.printIn(\u2033The response message body is: \u2033 + response.getEntity(String.class));"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In exemplary embodiments, the combination of the ASK RESTful web services  and the ASK engine abstraction layer  is referred to as an ASK engine . The ASK engine  may support registration of XML input schemas (XSD) and registration of analytic model files (e.g., ILOG .mod files, SPSS .str files, Cognos .zip files, Custom Engine Model .jar files, and the like), which includes associating the models  with schemas , and analytical engines  or  (e.g., ILOG CP\/CPLEX, SPSS). The ASK engine  can also perform validation of XML input data files against an XSD, and execution of the models , which includes providing the model results back to a client, such as the ASK console  or enterprise application . The ASK engine  also supports logging of all engine component executions.","In one example, a class FrameworkHandler is used to invoke functionality of the ASK engine  as follows: \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","A FrameworkHandler Message object for the ASK engine  may contain the following:",{"@attributes":{"id":"p-0138","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","\/** message Id is used to identify execution using this Message object *\/"]},{"entry":[{},"private String messageId;"]},{"entry":[{},"\/** sequence id used to identify if message is from a sequence *\/"]},{"entry":[{},"private String sequenceId;"]},{"entry":[{},"\/** status enum to return based on results *\/"]},{"entry":[{},"public static enum Status {success,fail,warn};"]},{"entry":[{},"\/** status value itself to return based on results of run *\/"]},{"entry":[{},"private Status status;"]},{"entry":[{},"\/** list of log info from a run *\/"]},{"entry":[{},"private List<String>log = new ArrayList<String>( );"]},{"entry":[{},"\/** legacy use of old storage of one file only for return - kept in case needed *\/"]},{"entry":[{},"private File file;"]},{"entry":[{},"\/** use of list of result files *\/"]},{"entry":[{},"private List<File>files = new ArrayList<File>( );"]},{"entry":[{},"along with get\/set functionality."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Success\/Fail results, and message logging are part of a message object that is sent\/received from the FrameworkHandler. An analyticEngine package may be used to provide execution, validation, and configuration to the analytic engines  and . A class, AnalyticEngineFactory, of the analyticEngine package of the ASK engine  may be provided according to the following example:",{"@attributes":{"id":"p-0140","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","private AnalyticEngineFactory( )"]},{"entry":[{},"public static AnalyticEngineFactory getAnalyticEngineFactory( )"]},{"entry":[{},"public AnalyticEngine createAnalyticEngine(String engine, String subengine, String"]},{"entry":[{},"version) throws Exception."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"AnalyticEngineFactory( ) is a default constructor. getAnalyticEngineFactory( ) returns the current instance of the factory object. CreateAnalyticEngine uses engine class information (stored in a data store for analytic engine \/) to invoke the correct analytic engine code. The frameworkHandler's getModelInfo( ) function is used to return XML containing the input\/output of a model file. This may be performed for SPSS models, which can potentially be used for building model parameter files. In ILOG models, it generates XML containing data types of a model file.","The ASK engine  may support several types of registration. Registration of a data schema into the schemas  can be performed through the ASK console  or web services. Registration of an analytical model in the models  can also be performed through the ASK console  or web services. Registration of a solution for solution sequencing  may be performed by the ASK console  via a diagram editor. When a schema or model is registered, the ASK engine  copies user files to an ASK server. If a file system is being used to store artifacts, the name of the data store may be FileDataStore, and the files are copied to an \/ASK directory. The model file can be copied into an \/ASK\/SFX_Model directory and the schema file can be copied into an \/ASK\/SFX_DataSchema directory. When the files are copied over, the file names may be prefixed with a Universally Unique Identifier (UUID). If a database is used to store artifacts, then the file can be inserted into an artifact table in the database.","Updating the models  and schemas  may follow the same process as registering new ones (e.g., invoking FrameworkHandler's registerModel( ) or registerSchema( )). Whenever a model or schema is registered, its model Id and schema Id can be checked to see if they already exist. If they do, the existing associated files are removed, and the data store is updated to use the latest information instead (i.e., filename, etc.). When a sequence is registered as part of solution sequencing , the ASK engine  may store sequences in the data store with appropriate node and link information as needed.","Validation may be invoked through the ASK engine  in a number of ways, such as through the ASK console , models , schemas , or web services. Input XML data files can be validated in the ASK engine  against an XML schema associated with the model used. For sequencing solutions, XML data files can be validated against models associated with start nodes. The FrameworkHandler may include a function: public Message validateData(String modelId, File dataFile), which may invoke a DataValidator class, which invokes a validate method to validate an input file against a schema associated with a model based on a modelID. Similarly, a validateSolutionData function may be used to invoke a SolutionDataValidatorClass for validation.","For models that have a proprietary file input format, validation support is based on the results of execution\/validation of the underlying analytical engine \/ itself. Proprietary input data are not validated by the DataValidator class in this case and are passed directly into the analytic engine component \/ during execution. Model Parameter file validation and solution Parameter file validation invoke a ModelParamValidator class and a validatorSolutionParamValidator class respectively.","Model validation during model registration (if supported by the analytic engine \/) is provided by the ModelValidator class. It may be invoked by the modelRegister( ) function in the FrameworkHandler. The ModelValidator function, public boolean validate(Message msg, Model m), creates an analytic engine object based on the engine class, and invokes validateModel( ) on the engine object to do validation (if any). Throughout validation, message objects are sent\/received from the FrameworkHandler with success\/fail results and message logging.","Sequence Validation during sequence registration is provided by the SequenceValidator class. It is invoked by the sequenceRegister( ) function in FrameworkHandler. The SequenceValidator function, public boolean validate(Message msg, Sequence s), creates an XML stream and validates the stream against the data store schema.","The ASK engine  executes models  that are registered. Input XML data files are validated in the ASK engine  by the XML schema associated with the model used. The FrameworkHandler may include two execute functions: \u201cpublic Message executeModel(String modelId, ArrayList<File> dataFiles, File paramFile)\u201d. The first function executes a single input data file with no parameters. The second function executes a list of input data files, along with a parameter file used in conjunction with the engine (associated with the modelId). Both functions create an analytical engine object and invoke the following functions on the analytical engine object: public abstract boolean execute(Message msg, Model model, ArrayList<File> dataFiles, File paramFile); public abstract boolean execute(Message msg, Model model, File dataFile). The ASK engine  executes models  associated with an XML schema, analytical engine, and an input XML file. For analytic engines \/, such as ILOG, native ILOG .dat files can be used instead of general input XML files. During execution, message objects are sent\/received from the FrameworkHandler with success\/fail results and message logging.","The ASK engine  executes registered sequencing solutions. The FrameworkHandler may include function: public Message executeSolution(String solutionId, ArrayList<File> dataFiles, File paramFile). This function executes the sequence solution found in the data store, passing in input data files to the models  attached to \u201cstart\u201d nodes. The parameter file is applied to all models in the entire sequencing solution. All models  attached to \u201cend\u201d objects have their outputs attached to the returning Message object. All sibling nodes are executed simultaneously. The Message object log contains log information from all executed nodes.","When the ASK engine  finishes execution successfully, result solution information is logged to the Message object, along with an attached output file listing the input\/solution data. For an ILOG engine, an XML file is returned. Other types of output files may be supported dependent on the analytic engine \/ (e.g., SPSS can return .csv files, etc., Cognos can return pdf). Result solution File objects are returned when execution completes successfully. If errors occur, the Message object is updated with status messages and success\/fail results, with logging.","In one example, the XML result solution file has the header\/trailer of:",{"@attributes":{"id":"p-0152","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","<?xml version=\u20331.0\u2033 encoding=\u2033UTF-8\u2033?><Solution>"]},{"entry":[{},{},"<!--Ilog-based Solution-->"]},{"entry":[{},{},". . ."]},{"entry":[{},{},". . . "]},{"entry":[{},{},"<\/Solution>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The handling of result solution output, automatic vs. required mapping, is analytic engine dependent. For example, an ILOG engine may require mapping for output to XML. For a class IlogOplEngine, a function \u201cprotected void generateOutput(Message msg)\u201d maps a native solution to an XML format. Other analytic engines \/ may provide their own mappings\/result files, such as SPSS.","In an ASK util package, a LogHandler is used to log server-side engine messages whenever FrameworkHandler functionality is accessed. It may use a log 4j package for logging, with a properties file for configuration. The following log files may be available for use and in an \\ASK\\SFX_Logs directory.\n\n","Similar to the FileDataStore in package dataStore, there is a FileStateStore in package stateStore used to store run execution information. The run information can be stored in an XML file, ASF_State_Store.asf, in an \\ASK directory. Each analytic engine \/ may create a RunInfo class containing the following fields along with get\/set functionality to support them:",{"@attributes":{"id":"p-0156","num":"0160"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"259pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","\/** ID used for filtering StateInfo objects on listeners *\/"]},{"entry":[{},"private String executionId; \/\/ id used by client to identify object for listeners"]},{"entry":[{},"\/** sequence ID associated with run - if part of sequence *\/"]},{"entry":[{},"private String sequenceId; \/\/ can be null if standalone runs"]},{"entry":[{},"\/** model ID of model being executed *\/"]},{"entry":[{},"private String modelId;"]},{"entry":[{},"\/** date and time of start of run *\/"]},{"entry":[{},"private Date runDate;"]},{"entry":[{},"\/** date and time of end of run *\/"]},{"entry":[{},"private Date endDate;"]},{"entry":[{},"\/** result of execution state - set if execution ended *\/"]},{"entry":[{},"private boolean resultState;"]},{"entry":[{},"\/** ID used to distinguish specific model execution - used as prefix for output files *\/"]},{"entry":[{},"private String runId; \/\/ same as UUID for run - used for output prefix"]},{"entry":[{},"\/** ID available in case used in future *\/"]},{"entry":[{},"private String userId; \/\/ future use"]},{"entry":[{},"private List<File>inputFiles = new ArrayList<File>( );"]},{"entry":[{},"private List<File>outputFiles = new ArrayList<File>( );"]},{"entry":[{},"private File paramFile;"]},{"entry":[{},"private List<Statelnfo>states = new ArrayList<StateInfo>( );"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Each RunInfo object contains a list of StateInfo objects that are used so far with the run:",{"@attributes":{"id":"p-0158","num":"0162"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","\/** Run states for an execution *\/"]},{"entry":[{},"public static enum RunStateEnum {ReadyTo Start, Executing, Ended};"]},{"entry":[{},"\/** date and time of state received - filled in by listener *\/"]},{"entry":[{},"private Date createDate;"]},{"entry":[{},"\/** execution state *\/"]},{"entry":[{},"private RunStateEnum state;"]},{"entry":[{},"private List<String>log = new ArrayList<String>( );"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The states used for a run are: ReadyToStart, Executing, and Ended. During execution, the following example code updates run execution fields and logs the information. These invocations are done in the ASK engine . The following example is used to set ReadyToStart state, given an runInfo instance of object RunInfo:",{"@attributes":{"id":"p-0160","num":"0164"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","runInfo.setExecutionId(msg.getMessageId( ));"]},{"entry":[{},{},"runInfo.setSequenceId(msg.getSequenceId( ));"]},{"entry":[{},{},"runInfo.setModelId(model.getModelId( ));"]},{"entry":[{},{},"runInfo.setRunDate(new Date( ));"]},{"entry":[{},{},"runInfo.setInputFiles(dataFiles);"]},{"entry":[{},{},"runInfo.setParamFile(paramFile);"]},{"entry":[{},{},"runInfo.setState(StateInfo.RunStateEnum.ReadyToStart);"]},{"entry":[{},{},"runInfo.setRunId(uuid.toString( ));"]},{"entry":[{},{},"StateHandler.getState( ).logState(runInfo);"]},{"entry":[{},{},"\/\/ send run state info to ASK Logging"]},{"entry":[{},{},"LogHandler.getExecutionLogger( ).info(\u2033State: \u2033 + runInfo);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following example is used to set Executing state:",{"@attributes":{"id":"p-0162","num":"0166"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003","runInfo.setState(StateInfo.RunStateEnum.Executing);"]},{"entry":[{},{},"StateHandler.getState( ).logState(runInfo);"]},{"entry":[{},{},"\/\/ send run state info to ASK Logging"]},{"entry":[{},{},"LogHandler.getExecutionLogger( ).info(\u2033State: \u2033 + runInfo);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following example is used to set Ended state:",{"@attributes":{"id":"p-0164","num":"0168"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003","runInfo.setState(StateInfo.RunStateEnum.Ended, msg.getLog( ));"]},{"entry":[{},"runInfo.setResultState(isValid);"]},{"entry":[{},"runInfo.setEndDate(new Date( ));"]},{"entry":[{},"StateHandler.getState( ).logState(runInfo);"]},{"entry":[{},"\/\/ send run state info to ASK Logging"]},{"entry":[{},"LogHandler.getExecutionLogger( ).info(\u2033State: \u2033 + runInfo);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Where a RunInfo object is sent the StateHandler's singleton instance to log the state, it may be published by the PropertyChangeSupport object in StateHandler. The FileStateStore is registered to receive StateHandler PropertyChangeSupport runInfo updates. The FileStateStore's propertyChange method is invoked to update\/create XML information for the runInfo object.","In a package, handler, the FrameworkHandler may contain the following functionality to access the run information and delete the runs:",{"@attributes":{"id":"p-0167","num":"0171"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/**"},{"entry":"* Used to return all execution run states found in State Store."},{"entry":"* @return ArrayList object of runs"},{"entry":"*\/"},{"entry":"public ArrayList<RunInfo> getRuns( );"},{"entry":"\/**"},{"entry":"* Used to return all execution run states found in State Store filtered by executionId."},{"entry":"* @param executionId"},{"entry":"* @return ArrayList object of runs"},{"entry":"*\/"},{"entry":"public ArrayList<RunInfo> getRuns(String executionId);"},{"entry":"\/**"},{"entry":"* Used to return all execution run states found in State Store filtered by cutoffs start"},{"entry":"and\/or end dates and"},{"entry":"* optional executionId."},{"entry":"* @param start date"},{"entry":"* @param end date"},{"entry":"* @param executionId"},{"entry":"* @return ArrayList object of runs"},{"entry":"*\/"},{"entry":"public ArrayList<RunInfo> getRuns(Date startDate, Date endDate, String executionId);"},{"entry":"\/**"},{"entry":"* Used to return the specific run state found in State Store filtered by runId."},{"entry":"* @param executionId"},{"entry":"* @return RunInfo object"},{"entry":"*\/"},{"entry":"public RunInfo getRun(String runId);"},{"entry":"\/**"},{"entry":"* Used to delete run state info in the State Store, based on a list of run Ids"},{"entry":"* @param runIdList"},{"entry":"* @param msg"},{"entry":"*\/"},{"entry":"public void deleteRuns(List<String> runIdList, Message msg);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"102"},{"@attributes":{"id":"p-0168","num":"0172"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","202","202","202","202","206","202","202","202","202","204","206","208","208","210","212","214","210","210","118","214","214","120","122"],"i":["a","b","c","n ","a ","b ","c","n "]},"The ASK analytics repository  is a data store that may include analytics models and schemas, analytics monitoring data, analytics orchestration data, and analytics lifecycle management data. The ASK analytics repository  may be stored in a metadata repository, which can be a file system or relational database based on user preference and desired security and performance. For less complex installs, a user may elect to use a file-based repository. For more complex, enterprise-wide installs the user can use a database. In an embodiment, ASK supports IBM DB2, which is a trademark or registered trademark of International Business Machines Corporation, as a database management system. The metadata repository contains information about the solutions, models, sequences, analytic engines, and data schemas, such as those depicted in , that have been registered.",{"@attributes":{"id":"p-0170","num":"0174"},"figref":["FIG. 3","FIG. 2","FIG. 2","FIG. 2"],"b":["300","300","208","210","214","302","210","304","214","210","208","306","304","208","214","308","304","208","302"]},{"@attributes":{"id":"p-0171","num":"0175"},"figref":["FIG. 4A","FIG. 4A","FIG. 1","FIG. 2","FIG. 4A"],"b":["400","102","204","402"]},"View  is an example user interface of a sequence editor from the build solution, build sequence of the ASK control pane . A component selection pane  depicts examples of components that can be included in a sequence as part of a solution, such as a start node, and end node, a miscellaneous mode, and a model. In exemplary embodiments, every sequence begins with a start node, and ends with one or more end nodes. Between the start and end nodes, model or data transformation nodes can be included, which are wired together. Wires or links between nodes represent the data that flows from one node to the next to define input\/output characteristics. A sequence can include a combination of model nodes that may be associated with difference analytic engines.","In the example of , a sequence  is depicted that includes a start node  coupled to a model node , where the model node  is also coupled to a maintenance scheduling node  that is coupled to an end node . After the start node , execution of the sequence  begins with the model node  and output from the model node  flows into the maintenance scheduling node . The output of the sequence  can be returned in log files from the sequence execution. To execute the sequence , a user selects a run button.","When executing a solution or sequence, the user may be presented with the same sequence of steps as when running a single model. Data inputs can be provided in multiple files and are associated with the models linked to start nodes. The configuration parameters for all nodes in a sequence can be supplied in a single configuration file. A tabbed view  may support viewing and\/or editing of sequence properties and node properties, as well as displaying system messages.",{"@attributes":{"id":"p-0175","num":"0179"},"figref":["FIG. 4B","FIG. 4B","FIG. 2","FIG. 1","FIG. 4B"],"b":["400","450","402","450","450","214","120","122","400","452"]},{"@attributes":{"id":"p-0176","num":"0180"},"figref":["FIG. 4C","FIG. 4C","FIG. 2","FIG. 1","FIG. 4C"],"b":["400","460","402","214","120","122","460","460","462"]},{"@attributes":{"id":"p-0177","num":"0181"},"figref":["FIG. 5","FIGS. 1-5"],"b":["500","500","502","118","120","122","110","110","110","112"]},"At block , a services layer  interfaces with the engine abstraction layer  to provide a communication interface to invoke the analytic engines  and  associated with the models . The services layer  can provide representational state transfer web services that support direct invocation by an enterprise application  and an administrative console .","At block , a user interface (e.g., administrative console ) to the services layer  is provided. The user interface is configured to define an analytic solution as an executable sequence of one or more of the models , such as sequence . Analytics solutions  can be provided that include a combination of transportation analytics, energy and utility analytics, building analytics, and cross industry analytics.","At block , registering, deploying, executing, and monitoring of the models  is supported through the services layer . Registered data associated with the process  can be stored in a metadata repository, such as the artifacts - of , the ASK analytics repository  of , and\/or the information sources  of , that is accessible through one of: a file system and a database system.","At block , a common logging interface, such as that depicted in view , can be defined across the analytic engines  and . The common logging interface makes interfacing differences between the analytic engines  and  transparent to ASK users.","Referring now to , a schematic of an example of a computer system  in an environment  is shown. The computer system  is only one example of a suitable computer system and is not intended to suggest any limitation as to the scope of use or functionality of embodiments described herein. Regardless, computer system  is capable of being implemented and\/or performing any of the functionality set forth hereinabove.","In the environment , the computer system  is operational with numerous other general purpose or special purpose computing systems or configurations. Examples of well-known computing systems, environments, and\/or configurations that may be suitable as embodiments of the computer system  include, but are not limited to, personal computer systems, server computer systems, cellular telephones, thin clients, thick clients, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network personal computer (PCs), minicomputer systems, mainframe computer systems, and distributed cloud computing environments that include any of the above systems or devices, and the like.","Computer system  may be described in the general context of computer system-executable instructions, such as program modules, being executed by one or more processors of the computer system . Generally, program modules may include routines, programs, objects, components, logic, data structures, and so on that perform particular tasks or implement particular abstract data types. Computer system  may be practiced in distributed computing environments, such as cloud computing environments, where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer system storage media including memory storage devices.","As shown in , computer system  is shown in the form of a general-purpose computing device. The components of computer system  may include, but are not limited to, one or more computer processing circuits (e.g., processors) or processing units , a system memory , and a bus  that couples various system components including system memory  to processor .","Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus.","Computer system  typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system , and it includes both volatile and non-volatile media, removable and non-removable media.","System memory  can include computer system readable media in the form of volatile memory, such as random access memory (RAM)  and\/or cache memory . Computer system  may further include other removable\/non-removable, volatile\/non-volatile computer system storage media. By way of example only, storage system  can be provided for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a \u201chard drive\u201d). Although not shown, a magnetic disk drive for reading from and writing to a removable, non-volatile magnetic disk (e.g., a \u201cfloppy disk\u201d), and an optical disk drive for reading from or writing to a removable, non-volatile optical disk such as a CD-ROM, DVD-ROM or other optical media can be provided. In such instances, each can be connected to bus  by one or more data media interfaces. As will be further depicted and described below, memory  may include at least one program product having a set (e.g., at least one) of program modules that are configured to carry out the functions of embodiments of the invention.","Program\/utility , having a set (at least one) of program modules , may be stored in memory  by way of example, and not limitation, as well as an operating system, one or more application programs, other program modules, and program data. Each of the operating system, one or more application programs, other program modules, and program data or some combination thereof, may include an implementation of a networking environment. Program modules  generally carry out the functions and\/or methodologies of embodiments of the invention as described herein. An example application program or module is depicted in  as ASK . ASK  is an embodiment of ASK  of , and can be implemented on an application server, run locally or distributed between multiple computer systems in the environment . For example, ASK  and metadata repository  may reside in memory . The metadata repository  can include the artifacts - of , the ASK analytics repository  of , and\/or the information sources  of . The metadata repository  can be stored in storage system  or in other portions of system memory . Alternatively, the metadata repository  may be stored elsewhere in the environment . The metadata repository  is used herein as one example of a location where the ASK-related data may be stored, it is not intended to imply that a database system is required as ASK-related data may be stored in any manner that allows types of accesses described herein.","Computer system  may also communicate with one or more external devices  such as a keyboard, a pointing device, a display device , etc.; one or more devices that enable a user to interact with computer system ; and\/or any devices (e.g., network card, modem, etc.) that enable computer system  to communicate with one or more other computing devices. Such communication can occur via input\/output (I\/O) interfaces . Still yet, computer system  can communicate with one or more networks such as a local area network (LAN), a general wide area network (WAN), and\/or a public network (e.g., the Internet) via network adapter . As depicted, network adapter  communicates with the other components of computer system  via bus . It should be understood that although not shown, other hardware and\/or software components could be used in conjunction with computer system . Examples, include, but are not limited to: microcode, device drivers, redundant processing units, external disk drive arrays, redundant array of independent disk (RAID) systems, tape drives, and data archival storage systems, etc.",{"@attributes":{"id":"p-0191","num":"0195"},"figref":["FIG. 7","FIG. 1","FIG. 1"],"b":["700","700","102","104","120","702","704","706","706","704","702","702","704","706","706","704","704","702"]},{"@attributes":{"id":"p-0192","num":"0196"},"figref":["FIG. 8","FIG. 1","FIG. 1"],"b":["800","800","102","104","120","802","804","806","806","804","802","802","804","806","806","804","804","802"]},{"@attributes":{"id":"p-0193","num":"0197"},"figref":["FIG. 9","FIG. 1","FIG. 1"],"b":["900","900","102","104","120","902","904","904","906","906","904","902","902","904","904","906","906","904","904","902","902","904","904","906","906","904","904","902"]},"It is understood in advance that although this disclosure includes a detailed description on a particular computing environment, implementation of the teachings recited herein are not limited to the depicted computing environment. Rather, embodiments are capable of being implemented in conjunction with any other type of computing environment now known or later developed (e.g., any client-server model, cloud-computing model, etc.).","Technical effects and benefits include providing analytics solutions integration, where multiple analytics engines are accessible through a common interface. ASK enables formation of more complex solutions and sequences that integrate multiple models as part of one solution sequence, where the models may be associated with otherwise unrelated analytics engines. Monitoring, testing, and logging functions further integrate analytic engines, and a services layer enables access through a console or other enterprise application.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","Further, as will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method, or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described above with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The subject matter which is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The foregoing and other features, and advantages of the invention are apparent from the following detailed description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
