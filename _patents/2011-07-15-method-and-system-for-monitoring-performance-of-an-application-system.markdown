---
title: Method and system for monitoring performance of an application system
abstract: A method for monitoring performance of an application system which is distributed across a plurality of network connected nodes, comprising: generating a hierarchical model for the application system, the hierarchical model having a plurality of levels, each level including components of a span specific to that level; mapping the application system onto the hierarchical model according to a network topology of the application system; monitoring network traffic between the plurality of network connected nodes of the application system to gather network traffic data; assembling the network traffic data into application messages; correlating the application messages into sets of one or more application messages that are causally associated in accordance with the hierarchical model, wherein the sets of causally associated application messages constitute transactions corresponding to a lowest level of the hierarchical model; and, generating records of individual transactions occurring within the application system for at least the transactions corresponding to the lowest level of the hierarchical model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732302&OS=08732302&RS=08732302
owner: Inetco Systems Limited
number: 08732302
owner_city: Burnaby
owner_country: CA
publication_date: 20110715
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This invention relates to the field of network message monitoring, and more specifically, to a method and system for monitoring performance of an application system which is distributed across network connected nodes.","Businesses often need to monitor the real-time behaviour and performance of applications that are distributed across multiple network-connected nodes, physical or virtual, with respect to meaningful data messages passed between the nodes. Application data messages between the nodes may be monitored at various possible locations including within the application, within the nodes, or at some intermediate network device. In some cases, it is only possible to monitor such messages by monitoring the network itself. This can be the case when there is no way to access application data directly on the host computer or application server. To obtain a higher level understanding of the application performance, the data messages being passed between nodes require correlation into transactions.","While several methods and system have been proposed for application data message monitoring, these methods and systems have disadvantages. For example, U.S. Pat. No. 7,805,510 to Bansal et al. discloses a hierarchy for characterizing interactions with an application and teaches a network monitoring system and an application monitoring system working in conjunction. The two sources of data are combined to formulate transactions within a hierarchy that ranges from components up to business processes within a domain. Bansel et al. also discloses implementations of either network or application monitoring within the same hierarchy. Types of transactions are defined at each level of the hierarchy. The composition of higher level transactions relies on associating a plurality of lower level transactions (or \u201ccomponents\u201d at the lowest level) all from the same network link. However, Bansal et al. does not disclose a method for following transactions across multiple links of a complex network topology.","As another example, U.S. Pat. No. 6,701,459 to Ramanathan et al. discloses a root-cause approach to problem diagnosis in data networks and teaches generating a network topology representation, subsequently generating a logical network topology, mapping the components of the topology into layers of hierarchy based on the protocol stack, and mapping specific measurements to the layers. As such, Ramanathan et al. uses a network topology, both physical and logical, to interpret data derived from the system. It recognizes a specific hierarchy that enables the data to be interpreted effectively and translates the interpreted data into performance measures that are specific to the level within the hierarchy that the data applies to. However, the hierarchy of Ramanathan et al. is specific to the protocol stack in use within the system. The levels correspond approximately to each layer within the OSI Layer model such that events or data are specific to a given protocol within the stack. As such, Ramanathan does not address higher level transactions across multiple links in a network.","As a further example, United States Patent Application Publication No. 2011\/0035493 by Shacham et al. discloses an apparatus and method for tracking requests in a multi-threaded, multi-tier computerized environment and teaches detecting messages being passed between components of a multi-tier system, correlating the messages between neighbouring tiers, and thereby associating them together across the tiers. However, while Shacham et al. provides for a simplified form of correlation across adjacent links, it does not teach how these are subsequently correlated across multiple tiers of a complex network topology to form higher-level transactions or how correlation can be optimized for real-time processing.","A need therefore exists for an improved method and system for monitoring performance of an application system which is distributed across network connected nodes. Accordingly, a solution that addresses, at least in part, the above and other shortcomings is desired.","According to one aspect of the invention, there is provided a method for monitoring performance of an application system which is distributed across a plurality of network connected nodes, comprising: generating a hierarchical model for the application system, the hierarchical model having a plurality of levels, each level including components of a span specific to that level; mapping the application system onto the hierarchical model according to a network topology of the application system; monitoring network traffic between the plurality of network connected nodes of the application system to gather network traffic data; assembling the network traffic data into application messages; correlating the application messages into sets of one or more application messages that are causally associated in accordance with the hierarchical model, wherein the sets of causally associated application messages constitute transactions corresponding to a lowest level of the hierarchical model; and, generating records of individual transactions occurring within the application system for at least the transactions corresponding to the lowest level of the hierarchical model.","In accordance with further aspects of the present invention there is provided an apparatus such as a data processing system, a method for adapting these, as well as articles of manufacture such as a computer readable medium or product and computer program product having program instructions recorded thereon for practising the method of the invention.","In the following description, details are set forth to provide an understanding of the invention. In some instances, certain software, circuits, structures and methods have not been described or shown in detail in order not to obscure the invention. The term \u201cdata processing system\u201d is used herein to refer to any machine for processing data, including the computer systems, wireless devices, and network arrangements described herein. The present invention may be implemented in any computer programming language provided that the operating system of the data processing system provides the facilities that may support the requirements of the present invention. Any limitations presented would be a result of a particular type of operating system or computer programming language and would not be a limitation of the present invention. The present invention may also be implemented in hardware or in a combination of hardware and software.","According to one embodiment of the invention, there is provided a method and system (or apparatus) for enabling and optimizing the real-time correlation of individual transactions on multiple network links of a distributed multi-link message-based system to generate aggregate transactions, including end-to-end transactions. The aggregate transactions comprise individual transactions that are causally related and span one or more links of the system. A hierarchical model (e.g.,  in ) applied to the network topology (e.g.,  in ) determines the span of links across which individual transactions are associated and provides the basis for their association. The hierarchy of levels extends across the network topology, each level corresponding to a degree of span, from the individual network links up to the entire system, with a definition of transaction specific to each level. Transactions on each level are defined as comprising one or more transactions from a next lower level, across one or more spans of that level of the network topology. At the lowest level, transactions comprise application protocol messages exchanged across a single network link to achieve a specific task, the messages having been composed from data units of the underlying transport protocol, those data units having been composed from data units of the underlying network protocol. The hierarchical model further provides a means of enabling and optimizing the correlation of lower-level transactions into next-higher-level transactions by segmenting correlation across spans of increasing size. Further, each level of the model is identified with a population of actors who define how the subsequent levels of transactions are analyzed and interpreted. In particular, there are one or more performance metrics specific to each level that are used to interpret the performance and behaviour of the transactions at each level.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 18","FIG. 18"],"b":["400","400"],"sub":"i "},"The UTM describes the structures, relationships, and message events that are particular to message-based transactional systems. The UTM is beneficial for information technology (\u201cIT\u201d) systems (e.g.,  in ) that are distributed, multi-tier, and composed of multiple network links, and thus complex. In implementation, it decomposes the IT system  into a nested set of regions or \u201cspans\u201d according to the network topology  and functional implementation of its components. Subsequently, it supports the translation of events at each level of the system into types of transactions, each with a relationship to the types at other levels. Each level of the system and its corresponding transaction type maps into a view relevant to certain actors within the system.","The UTM coupled with the network topology provides a framework for the correlation of transactions. The framework defines the relationships between lower level events and higher level events, and also optimizes the construction of higher level events for performance in real-time implementations. The UTM may be implemented in a business transaction monitoring tool or system (e.g.,  in ) that processes network traffic into transactions across multiple links in real-time. It is configured with the details of a specific network topology  that defines the various components and relationships within the model hierarchy . It analyzes and assembles the network traffic from one or more points in a network topology into host-to-host transactions. Subsequently, it groups host-to-host transactions into more complex aggregates on the basis of the topology. Finally, it assembles the highest level of transaction as an end-to-end event.","At each transaction level, the behaviour of the constructed transactions may subsequently be analyzed for performance and used to diagnose issues within the business transaction system . One or more metrics of performance may be applied at each level. The nature of the metrics depend on a variety of factors including the following: (1) What individuals, groups, or roles have an interest in a given level of the business system  (2) What metrics are typically applied or have been standardized for that level of the business system  (3) How does a given metric relate to metrics at levels above and\/or below the level it is applied at? (4) What information is available at a given level relating to transactions, the underlying components, end-user experience, etc.? For example, it may be appropriate to define and apply a metric specific to end-user experience (e.g., application performance index (\u201cApdex\u201d), user decline rate, etc.) at the application level. By contrast, a network-oriented measure may be better suited at the network level (e.g., message loss rate, latency variation, etc.).",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 16","b":["300","300","300","800","300","300","300","300","300","310","320","330","340","350","310","340","330","330","350","300","300","351","350","350","351","350","300","351","320","321","320","330","331","300","320","310","340","350","350","300","332","332","330","300","300","300"]},"Thus, the data processing system  includes computer executable programmed instructions for directing the system  to implement the embodiments of the present invention. The programmed instructions may be embodied in one or more hardware modules  or software modules  resident in the memory  of the data processing system  or elsewhere (e.g., ). Alternatively, the programmed instructions may be embodied on a computer readable medium (or product) (e.g., a compact disk (\u201cCD\u201d), a floppy disk, etc.) which may be used for transporting the programmed instructions to the memory  of the data processing system . Alternatively, the programmed instructions may be embedded in a computer-readable signal or signal-bearing medium (or product) that is uploaded to a network  by a vendor or supplier of the programmed instructions, and this signal or signal-bearing medium may be downloaded through an interface (e.g., ) to the data processing system  from the network  by end users or potential buyers.","A user may interact with the data processing system  and its hardware and software modules ,  using a graphical user interface (\u201cGUI\u201d) . The GUI  may be used for monitoring, managing, and accessing the data processing system . GUIs are supported by common operating systems and provide a display format which enables a user to choose commands, execute application programs, manage computer files, and perform other functions by selecting pictorial representations known as icons, or items from a menu through use of an input device  such as a mouse. In general, a GUI is used to convey information to and receive commands from users and generally includes a variety of GUI objects or controls, including icons, toolbars, drop-down menus, text, dialog boxes, buttons, and the like. A user typically interacts with a GUI  presented on a display  by using an input device (e.g., a mouse)  to position a pointer or cursor  over an object (e.g., an icon)  and by selecting or \u201cclicking\u201d on the object . Typically, a GUI based system presents application, system status, and other information to the user in one or more \u201cwindows\u201d appearing on the display . A window  is a more or less rectangular area within the display  in which a user may view an application or a document. Such a window  may be open, closed, displayed full screen, reduced to an icon, increased or reduced in size, or moved to different areas of the display . Multiple windows may be displayed simultaneously, such as: windows included within other windows, windows overlapping other windows, or windows tiled within the display area.","Referring again to , the UTM introduced above originates with an ontological model  composed of a hierarchical set of definitions of system components, their properties, actors, inter-dependencies, functional and topological relationships, and event entities. The model hierarchy is isomorphic across each level , , , , ,  with one or more generative operators g, g, g, g, g between levels that transform events in a lower level (e.g., ) into events at a next level higher (e.g., ). The number of levels is variable and the exact number depends on the details of the system  against which the model  is applied. The lowest level  also defines certain primitives that anchor the framework and bootstrap the generation of events at the subsequent level. Each level is associated with a degree of \u201cspan\u201d which defines the scope of objects within that level.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 1","FIG. 1"],"b":["10","21","27","31","33","410","400","10","21","27"]},"The span of this level is trivial insofar as the nodes are not connected. Each node - has a unique identifier (e.g., A, B, C, etc. or , , , etc.), one or more unique connection points (e.g., connection points ,  on node ), and other descriptive or functional attributes (e.g., a node definition may include a port number for the connection and a communication protocol). A generative operator g between this level  and the next  associates any two nodes through connection anchored at a connection point on each. In graph theory, the connection between nodes is referred to as an \u201cedge\u201d.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["12","34","39","21","27","420","12","34","39","420","20","21","34","31","32","21","22","800","400"]},"This level  of the model  comprises all generated links and does not include any unconnected nodes. Note that node  does not appear in any member of the set  of links -. Each link has a unique identifier (e.g., , , , etc.) and uniquely comprises its constituent nodes, the direction of the edge, the connection point on each node and any other elemental attributes. The generative operator g between this level  and the next level  produces one or more sets comprising one or more links such that each link in a set has exactly one node in common with at least one other link of the set. The links are subsequently connected together at the common nodes to form a new type of object specific to the next level .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3","FIG. 3","FIG. 2","FIG. 3"],"b":["13","40","42","34","39","13","40","42","35","39","22","40","42","430","420","34","39","800","400","430","420"]},"This next level  represented by set  comprises all such trees and does not include any links that are not a component of at least one tree. Each tree has a unique identifier (e.g., , , ) and uniquely comprises a set of links, their intersects, and any other elemental attributes. A generative operator g between this level  and a subsequent higher level  composes sub-sets of one or more trees such that each tree has an intersect with at least one other member of the sub-set.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4","FIG. 3"],"b":["52","40","42","440","400","430","14","52","40","42","400","445"],"sub":"4 "},"The penultimate level  of the hierarchy  defines a set of terminal objects that are compound trees that are maximally compounded (are not sub-trees of any larger compound tree at a higher level).  shows a set  that is an instance of a set of one \u201cmaximal tree\u201d . Maximal trees  include a node designated as the root or origin such as node  of maximal tree . The set may contain only a single maximal tree that is composed of all selected trees from the previous level set . In other instances, there will be two or more maximal trees such that each has a unique initiating link and each may share some or all of the trees from the previous level (i.e., they may not be disjoint). The span of this level is also maximal insofar as no larger objects are composed from its members, the members typically extending across the full breadth of the system .","Each of the links -, trees -, compound trees (none shown that are not maximal trees in ), and maximal trees  constitute a directed acyclic graph (\u201cDAG\u201d) with a root node . The root node  of each maximal tree  represents an origin for a transactional process traversing the graph. A given maximal tree  may comprise some of the same nodes, links, or trees as another maximal tree in the same set. In that regard, a maximal tree may partially overlay another at a given level of the hierarchy. For example, a maximal tree may share some of the same links or trees (and therefore nodes) as another but overall the maximal trees are distinct in their composition.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 5","FIG. 5"],"b":["15","460","15","52","510","520","21","27","34","39","40","42","15","460","400"]},"With respect to actors, functions, properties, and generative operators, each level of the model  defines additional attributes. These include: (1) \u201cActors\u201d which are a population of users or stakeholders that operate on that level or perspective of the overall system. For example, end-users interact with the user interface of an application, while network operators focus on the messages passed over network connections; (2) \u201cFunctions\u201d which are events within the system that represent instances of functional activity of one or more different types. The types belong to a class of functions that describe how the entities operate at a given level. A function at a higher level can be described as a composite of functions at a next lower-level. For example, high-level user transactions may be instances of user-level operations such as \u201cdelete item\u201d or \u201cview search results\u201d, while a lower level network transaction may be part of set of simpler operations such as \u201cdata transfer\u201d or \u201cget value\u201d; and, (3) Objects and events at each level may be optionally described as having a variety of distinguishing \u201cproperties\u201d. These properties offer a flexible means of mapping the model into a real system and capturing additional features. As described, objects at each level are composed from objects from a preceding level. One or more \u201cgenerative operators\u201d is associated with each level that define how higher level objects are composed. A generative operator may be a simple list or set of construction steps, or it may be a complex function operating on the various attributes of the objects or the events that the objects are associated with. For example, the association of a set of links into a tree corresponding to a \u201cservice\u201d may be based upon the discovery of the attributes of events on a given link, such as the contents of messages between nodes.","With respect to mapping to an IT system topology , the model  may be applied to a distributed IT system  composed of a plurality of running processes on a plurality of distinct servers (e.g., similar to ) that communicate via a plurality of network connections. The levels , , , ,  of the hierarchy  are selected to correspond to individual components , network connections , resources or services , applications , and business processes .","Consider a typical IT system  using an Internet Protocol (\u201cIP\u201d) network. There are a plurality of devices (e.g., similar to ) with operating systems running processes in physical or virtual machines, each of which may be considered a node (e.g., ). The process(es) running on a node may be configured to connect via the network  to other processes running on specific other nodes. These configured connections are the links (e.g., ) within the system. A link may be uniquely designated by a 5-tuple comprising the Layer 3 source and destination IP address, the Layer 4 source and destination port, and the application protocol. That is, Link=(IP, IP, Port, Port, Protocol).","The choice of source and destination define the direction of the link, where direction refers to the initial message sent between the nodes such that the source is considered the point of origination for the subsequent bidirectional exchange of messages. For the same IP addresses, ports, and protocol, reversing source and destination refers to a distinct link. Network and server managers who are responsible for network integrity and performance may be identified as key actors with respect to this link construct.","Within an IT system , a set of one or more links may represent a single coherent resource or \u201cservice\u201d. For example, a set of inter-operating nodes may operate as a datacenter. The set of links associated with the datacenter maps to a tree with the root link defining its access point. Similarly, another group of links may act as a Web service comprising all network connections between multiple load-balanced servers and all potential clients. Each service represents a distinct and coherent part of a complete system which offers well-defined functionality.","An arbitrary set of links does not necessarily compose a service. A service is defined by its functionality. That functionality often may be defined by and accessed via a programmatic application programming interface (\u201cAPI\u201d). A program developer may incorporate a service into a distributed software program by instantiating access to it through the API. The program would then be configured to access the service via a specific link. The generative operator that composes services from links may be a simple list of intersections between links or it may be a functional operator based on link or link class attributes (e.g., ranges of IP addresses connect to other ranges of IP addresses). Developers and systems integrators who are responsible for the implementation of specific application features may be identified as key actors with respect to the service construct.","An IT system  supports one or more \u201capplications\u201d which are composed of one or more of the services within the system. The application is employed by a population of users who access the application through an interface service. For example, an interface service might be a browser client running on a wireless device (e.g., ) connecting to a Web server (e.g., ). The overall application includes other services that are subsequently invoked by the interface service. The generative operator that composes applications from services may be a simple list of connections between services or it may be a functional operator based on service attributes. End-users and customer satisfaction agents who are concerned about and responsible for the overall operation and performance of the applications may be identified as key actors with respect to the application construct.","The IT system  is implemented and maintained by a \u201cbusiness\u201d that employs the one or more applications to effect its business processes. A business comprises a number of different roles, resources, tools, and processes that are marshalled to achieve a set of business goals. The relationship between the business and the applications that it deploys are typically governed by the users within the business and their roles in serving the business goals. The IT system  may fully express one or more processes of a business but typically they are only an aspect of an overall business. Line-of-business and business performance managers who are responsible for the successful operation of the business may be identified as key actors with respect to the business construct.","With respect to the details of the IT system , according to one embodiment, a node maps to a running process on a network-connected server. A node then has at least one IP address associated with it. A link maps to a pair of such nodes communicating via a network connection, identified by their respective IP addresses, the direction of communication flow (i.e., which node initiated the connection), the respective network ports in use, and the one or more application protocol(s) in use.","Further, sets of nodes may be logically mapped to \u201cnode classes\u201d. All nodes within a node class may be considered functionally similar. For example, a node class may be the set of all possible Internet clients connecting to a given Web server. The set may contain an explicit list or range of IP addresses, ports and protocols, or may simply be described conceptually, for example, any device that connects to a given node using port . The members explicitly belonging to a node class may vary in time. For example, the current instances of clients connecting to a given Web server are a finite sub-set of an otherwise very large, unknown set of potential members. In other cases, a node class may be comprised of fixed and constant list of members.","Similarly, a link may be logically mapped to a \u201clink class\u201d. A link class comprises all links defined by two node classes. A link may be defined by a 5-tuple comprising source address, destination address, source port, destination port, and protocol. Each field in a 5-tuple definition may be a specific value, a discrete set of values, a range of values, or all possible values. A similar 5-tuple definition represents a link class. For example, the link class (10.0.0.*,192.168.1.2,*,80,HTTP) represents all links from any source IP address prefixed by 10.0.0.* that connects to the destination address 192.168.1.2, from any source port, to port , using HTTP. A particular example that matches this description is referred to as a \u201clink instance\u201d.","According to one embodiment, the hierarchical model  contains five levels , , , ,  of entities that map a typical distributed, network-based IT system  as follows: (1) Network node\/device (node)  which is a process running on a physical or virtual host with at least one network interface. The network node is identified by its network interface address (e.g., IP address). This is a device level entity with a span limited to the device. A \u201cnetwork node class\u201d may be defined by a specific or potential set of network nodes; (2) Network link (link)  which is a Layer 3\/4 (e.g., TCP\/IP) network connection bounded by a node at either end. Communication along the network link is initiated by one of the nodes (the source) to the other (the destination). If either node acts as a source, then each direction may be considered a separate link. A link is uniquely designated by a 5-tuple comprising source address, destination address, source port, destination port, and protocol. A single link may incorporate multiple protocols but more typically each protocol represents a separate link. This is a network level entity with a span of a node pair and a network connection (a link). A \u201cnetwork link class\u201d may be defined by a specific or potential set of network links. A network link class is uniquely designated by its 5-tuple where one or more of its fields are represented by a list, range or wildcard of values; (3) Service (tree)  composed of one or more links or link classes. It is further composed of a list of shared nodes (i.e., intersects) or node classes that connect the links or link classes into a DAG. Parent, access, or initiating link (or link class) are supported. The source node(s) (or node class) in the initiating link (or link class) acts as the root node (or node class) for the service. API level entities with a span of one or more links, up to defined service boundaries, are supported; (4) Application (maximal tree)  which are composed of one or more services and thus indirectly composed of one or more links or link classes. It has a parent, access or initiating service which is the root service for the application. The parent or initiating link (or link class) within that service is the root link (or link class) for the application. The source node (or node class) in the initiating link (or link class) is the root node (or node class) for the application. The root service represents the interface service for a specific population of end-users. End-user level entities with a maximal span, extending across the end-to-end system, are supported; and, (5) Business (set of all maximal trees)  which is composed of all applications, as well as other related aspects of the business, and may describe relationships or inter-operation between applications. Relationships are not mediated by network connections. Business-level entities beyond the span of the network topology are supported.","Thus, the sets , , , ,  described above may represent levels , , , ,  of the hierarchical model  of the UTM.","With respect to events within the model , typically messages pass between two nodes (e.g., ,  in ) across a network link of an operational system . The network traffic associated with the messages may be passively monitored and subsequently decoded and analyzed for their contents by a monitoring system (e.g., ). According to one embodiment, network traffic may be detected and monitored at the network interface (e.g., ) or within the operating system of each node through the use of network shims or other modifications to the node software. According to another embodiment, network traffic may be monitored at a network proxy through which the network has been configured to pass messages. According to another embodiment, application messages may be directly detected and monitored within the processes running on the nodes. According to another embodiment, other equivalent means of gathering the application messages that are subsequently assembled into transactions may be used.","In terms of the standard ISO Layer model, monitored network traffic may take the form of Layer 3 (network) protocol data units (\u201cPDUs\u201d) which, for the example of an IP network, are IP packets. In an IP network, Layer 3 packets are automatically assembled by the network stack of the monitoring interface from Layer 1 (physical) PDUs, or bits, into Layer 2 (data link) PDUs, or frames, and finally into packets. Subsequently, monitoring software may select from the observed packets and aggregate them according to their Layer 3 attributes such as source and destination IP address. Using rules specific to the transport protocol, the software may then assemble the packets into Layer 4 (transport) PDUs, for example, TCP segments in a TCP\/IP network, and record their attributes.","There may be a further one or more protocols that correspond to other layers higher in the ISO model such as Layer 7 (application). There may also be additional layers corresponding to Layers 3 and 4. The monitoring software (e.g., ) may then implement the rules for each subsequent protocol to further assemble PDUs from the previous protocols PDUs. The monitoring software  can further record attributes for each protocol and its PDUs. Typically there will be a final protocol that is an application layer protocol whose PDUs are the messages exchanged by the processes running on each node.","Under specific rules governing message correlation, sub-sets of the network messages are selected and associated together. In general, their association corresponds to a network request\/response event and consequently defines a transaction. The association of messages is with respect to a given link and thus this is a \u201clink transaction\u201d. A link transaction comprises the elements of a bounded exchange between two nodes representing a particular functional act. The definition of a particular exchange derives from the protocol in use. A given protocol may support a variety of different functionalities such as keep-alive, authorization, data transfer, query-response, and the like. A specific link transaction may then be identified by functional type.","In a typical IT system , one or more links or link classes may be configured to provide a specific service. Examples of services might include identity verification, search engine, backup and recovery, payment processing, or any other high level capability that requires a dedicated collection of resources. Each link within the service may perform some low-level activity in support of the higher level service functionality.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 6","FIG. 6"],"b":["70","60","64","70","61","63","72","61","63","60","61","63","64","61","63","64"]},"Within a defined service, processing a specific incoming request may result in a number of lower level requests being passed across specific links within the service. Within the search engine example, a search engine service  has been implemented within a distributed application which has some aspect running as a process at node . An incoming complex data query originating from node  may be passed to a processing unit at node , defining a link transaction across the link . As a consequence of processing, node  may send one or more requests to the database , resulting in one or more sets of messages exchanged that compose one or more link transactions across link . There is a causal relationship between the link transaction between nodes  and , and the one or more link transactions that pass between nodes  and . The set of related link transactions taking place on links within the search engine service  may be generated, forming a higher level transaction taking place across the service . This higher level transaction is a \u201cservice transaction\u201d insofar as it occurs across the span of the defined service .","In general, service transactions are composed of one or more link transactions across one or more links within a defined service. It is possible for a service to have only one link and for a service transaction to be composed of only one link transaction. A service may be defined by its functional description at an API level, that is, a service is typically implemented by an application developer through calls to an API and subsequently configured by a systems integrator as part of a larger system. Different API calls may be possible, and\/or with different arguments, resulting in different types of service transactions being generated. Each type of service transaction may potentially be composed of different combinations or sequences of link transactions.","In an IT system , one or more services compose an application. By definition, according to one embodiment of the invention, at least one of the services is an \u201cinterface service\u201d that is used by a population of end-users to employ the application. \u201cEnd-user\u201d typically denotes a human interacting with an interface but may also be an automated agent, an independent application, or a business process mechanism. An end-user may execute a specific function of the application through the interface service that causes specific service transactions on various of the services comprising the application. This set of related service transactions comprises an \u201capplication transaction\u201d that represents an instance of the executed application function. An application is defined by the interface service, the specific end-user population, and the functionalities that the end-user has access to through that interface service.","An example application might be an ATM banking application. It may be composed of an end-user ATM device connected through a dedicated network connection to an ATM network service, and subsequently connected to a debit banking service, and finally to a specific bank. The \u201cinterface service\u201d is the ATM device itself connected to the ATM network. Through the ATM, the end-user employs a small set of functionalities such as: authorize access; view balance; withdraw money; deposit funds; and print receipt as a record of the transaction.","Actions at the ATM interface cause a service transaction to take place within the ATM service. Consequently, a service transaction also occurs within the banking service and possibly within other inter-connected services as well. Collectively, the set of service transactions represent an application transaction which results in the end-user achieving a \u201cbusiness task\u201d (such as withdrawing money).","A business task is synonymous with an application transaction when the application fully incorporates all aspects of the business task. Consider an exemplary scenario where an ATM cannot accept physical deposits directly but only registers an intent to deposit and the end-user is required to mail the funds to the bank for processing. In such a case, the ATM application transaction of depositing would not be synonymous with the completed business task. The end-user would then see two distinct steps in the business task, namely, registering a deposit via application and mailing the funds. In general, ATMs do not operate in this fashion and so this is described for illustration purposes only. However, it is often the case that, when an end-user deposits funds through an ATM, a human agent of the bank or ATM network must later extract the envelopes of deposits and clear each of the recorded deposit transactions. In this case, the human agent acts as a \u201cclearing service\u201d that is part of the overall ATM application. In this case, the bank would view the business task as comprising two distinct steps. From the perspective of the bank, the definition of business task may be different from that of the end-user or bank customer.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 8","FIG. 16","FIG. 8","FIG. 8"],"b":["800","800","800","400","800","810","800"]},"The first step is to identify the nodes of the IT system  and their related node classes. In the example system , there are three instances - of a Web server running that are load balanced together to appear as a single logical Web node or node class . As well, there is an uncountable population of customer Web clients including clients - that represents a node class . Similarly, other nodes form nodes classes -. The clouds - do not show example nodes but similarly represent node classes. Each node class - employs one or more protocols to communicate with other nodes classes. The node classes - are as follows: Web servers ; Business logic server ; Search engine ; Transaction aggregator ; Transaction processor ; Database ; Branch Web clients ; ATMs ; Payment network payees ; and, Customer Web clients .",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 9","FIG. 8"],"b":["800","130","139"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 9","FIG. 8"],"b":["800","139","130","140","140","139","130","141","136","130","142","130","131","143","131","132","144","131","133","145","133","137","146","138","133","147","132","135","148","133","134","149","134","135"]},"Each link class employs at least one application layer protocol to facilitate the exchange of messages between the node classes. As well, it is assumed that there are other layers of protocols involved that facilitate network connections and data transport.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 10","FIGS. 8 and 9","FIG. 10"],"b":["800","800","151","157","151","140","142","152","141","142","153","144","154","143","147","155","145","156","146","157","148","149"]},"The intersects for each of the services are the shared node classes between the component link classes. For example, referring to , the Web Servers node class  is the intersect between the Web Link  and Logic Link  of the Internet Service .",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 11","FIGS. 8-10","FIG. 11"],"b":["800","160","156","157","152","153","157","155","154","160","151","153","157","155","154"]},"The intersects between each service define how they are inter-connected and which nodes are involved. For example, the Transaction Aggregator node class  is the intersect between each of the ATM Service , Payment Service , WebTx Service , and Tx Processing Service . The Internet Application  involves five of the seven defined services. The population of customers accessing the bank through the Web via the initiating Internet Service  defines this Application . The two other not included services are both initiating services that act as access services for other populations of end-users. The set of three distinct applications composes the bank business. The bank business may also be defined as including other IT systems, human agents and processes, and many other instruments and tools. The business level may represent the relationships between applications and these other non-application entities. Although not fully isomorphic with the other levels, the business level is essential to capture the human context that the IT system  operates in relation to.","With respect to businesses, the hierarchical model  also extends into the socio-economic realm of human users, managers, and operators. In this embodiment of the invention, a business is the highest level  of the model  and includes all applications that are deployed in the IT system . The IT system  is itself an aspect of a business. Businesses are complex sets of interacting elements including: applications; human agents of the business; human customers or beneficiaries of the business; documents and other non-IT data-bearing instruments; various encodings or descriptions of processes; physical property and other assets; funds and resources; intellectual property; and, aspects of other businesses including applications, human agents, any other aspects typically shared with 3rd parties.","A business is defined to have \u201cbusiness goals\u201d. These are a set of objectives that the business is organized to achieve efficiently as a necessity of its socio-economic existence and success. Business goals are achieved through \u201cbusiness processes\u201d that define the employ and interaction of the various elements of the business. Business processes are a prescribed series of steps or actions to be taken, employing tools and\/or resources, often with business logic associated with the steps to account for contextual dependencies. In particular, a business process may be, either wholly or in part, expressed by the deployment of an application within an IT system . From the Internet Application  example described above, a business process involving the use of specialized user interfaces (e.g., Web browsers) and business networks can be identified that facilitates the business goal of enabling banking customers to remotely manage their funds held by the bank.","A business process describes one or more \u201cbusiness tasks\u201d to be executed either serially or in parallel, with or without dependencies between each task. In the Internet Application  example, one business process might be defined as \u201cenable banking customers to manage their banked funds remotely\u201d, which could include a large number of optional steps, depending on decisions made by the customer. An instance of the business process might include the application-level steps of: Login; Authorize access; Get account balance; Transfer funds; Pay bill; and, Logout.","When a step in a business process is wholly implemented within an application, execution of the step corresponds to an application transaction. Each step may correspond to a business task as well. In this case, each application transaction is then identical with a business task. More generally, a business task may also be defined to include more than one application transaction or, where the business process is not wholly implemented in an application, may include executed steps that are outside of the application.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 7","FIG. 7"],"b":["700","85","400","800","720","730","750","760","420","430","450","460","85","1","85","87","89","1","87","2","89","87","89","90","92","94","2","94","2","92","3","94","90","92","94","101","105","2","92","5","105","6","104","101","105","101","102","103","420","90","430"]},"Transaction correlation comprises the means and mechanisms for associating records of transaction-related events into groups or sets. The associations are derived from relationships between events based upon their attributes and properties. The relationships are part of the ontological model  and are determined from knowledge of the specific IT system . Knowledge may include details such as the following: IP addresses of all interfaces of all nodes; IP ports configured for use by processes running on nodes (e.g., listening ports); protocols in use on which interfaces\/ports; node classes (e.g., which nodes have common functionality); link classes (e.g., which links have common transactions and\/or common protocols); shared nodes (e.g., which links have common nodes); implementation of protocols (e.g., general to all implementations; specific to the IT system under investigation; sequences of messages associated with a protocol operation); service boundaries (e.g., which links belong to a given service; which link(s) are the access interface(s) to the service); and, application implementation details (e.g., access service (e.g., which service acts as an interface to the end-user); end-user application functions (e.g., what the end-user can do at the interface).","This knowledge may be determined manually by humans through investigation of the IT system  or through disclosure from the developers or operators of the IT system . Some of the knowledge may be a priori such as that relating to certain protocols that are implemented in a standardized fashion. Alternately, the knowledge may be discovered by automated learning systems that are parameterized with pre-defined models of various kinds of IT systems, application types, and topologies. Or learning may be derived in an unparameterized approach that identifies unique, previously unknown behaviors of interest.","With this knowledge, rules can be implemented that correlate low-level events into higher level events. For example, in the case of monitoring network data traffic, the lowest level of events may be the arrival of network IP packets at a monitoring interface placed within the IP network of an IT system . The monitoring interface  may receive a copy of all packets arriving at all of the network interfaces within the IT system , such as when a SPAN (switched port analyzer) port is created on a network switch. With knowledge of IP addresses and the nature of the TCP and IP protocols, packets may be selected from the stream of arriving packets and grouped by timestamp, source and destination IP addresses, TCP sequence number, TCP port number, and the like. The monitoring system  can assemble IP packets into TCP segments, and subsequently assemble the segments into application protocol messages.","Messages being passed between a pair of nodes then might be isolated from other traffic and ordered by arrival. Knowledge of the application protocol in use and how it has been implemented then might identify request\/response pairs (or longer sequences of messages) within that set of messages. For example, the header of the application protocol may include fields referring to a type of protocol message defining its role in a request\/response exchange.","The appropriate messages may then be effectively selected out of the set and correlated into specific request\/response sequences that constitute a link transaction. In some instances this may be done solely by sequence number, arrival timings, and protocol-specific header content. In other instances, the content of the protocol message payloads may be inspected to extract key attributes such as a unique identifier number or string that it is shared by all associated messages. Other means known to a person skilled in the art may also be employed.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 12","FIGS. 8-11","FIG. 12","FIG. 9"],"b":["800","800","171","182","140","142","144","145","148","149","171","139","171","140","130","173","142","131","175","144","133","177","137","177","178","133","179","134","134","135","181","135","182","180","176","174","172","139"]},"Each response\/request pair, such as  and , constitutes a link transaction . From successfully constructed link transactions , , , , , , it is subsequently possible to construct service transactions (e.g., , , , ). Those causally related link transactions (e.g., , ) within a given service boundary (e.g., ) constitute a service transaction (e.g., ). For example, messages - constituting link transactions ,  represent a service transaction  within the Internet Service . The entire end-to-end set of request\/response pairs constitute an application transaction (e.g., ) and are constructed by relating the service transactions (e.g., , , , ) together. Similarly, business transactions (e.g.,  from ) may be constructed by relating applications transactions (e.g., ) together.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 13","FIG. 13"],"b":["380","380","800","800","201","210","212","230","234","210","212","240","244"]},{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 14","FIG. 14","FIG. 14"],"b":["380","380","251","253","255","253","257","380","340","300"]},"With respect to causal relationships, an analysis of two or more potentially correlated link transactions may rely on one or more different relationships and types of data. The following are some examples: (1) Sequence analysis\u2014based on exact or probabilistic definitions of order and type of transactions at one level, as defined by topological or application implementation models, such that they may be associated to constitute a transaction at a next higher level (e.g., the implementation of a particular application may require that for each request search request originating with an HTTP\/HTML-based browser client that arrives at a Web server there must be a corresponding HTTP\/SOAP-based request sent from the Web server to a business logic server); (2) Timing models\u2014based on exact or probabilistic definitions of the timings of transactions with regard to each other such that they are considered associated (e.g., it is assumed from knowledge of the application implementation that all forwarded requests caused by an inbound request are transmitted within 100 ms of the original request); (3) Header analysis\u2014based on exact or probabilistic associations between the headers of the application protocols employed within transactions on each link (e.g., in the case of HTTP\/HTML-based requests sent to a Web server resulting in HTTP\/SOAP-based requests being generated on a subsequent network link, cookies within each HTTP header may contain unique ids that are explicitly, or implicitly, associated); and, (4) Payload analysis\u2014based on exact or probabilistic associations between the contents of the payloads of the set of request\/response message of given transactions (e.g., in the case of HTTP\/HTML-based requests sent to a Web server resulting in HTML\/SOAP-based requests being generated on a subsequent network link, a GET-initiated transaction on the Web side may have included an HTML document as a response which contains data which corresponds to data within the response message within the SOAP-based transaction on the business side.","A complete correlation method that effectively associates all possible lower level transactions into higher level transactions may rely on multiple correlation techniques that employ one or more of the possible analyses described above, either separately or in combination. As suggested, the techniques may be exact, probabilistic or approximate: Exact\u2014causal relationships are either entirely satisfied or not; Probabilistic\u2014causal relationships interpreted in terms of likelihoods resulting in estimates of likelihood of given associations; and, Approximate\u2014incomplete analysis due to real-time processing constraints may generate results that are necessarily estimates of a complete analysis.","With respect to optimization for real-time correlation, correlation of messages into transactions on a single link may be performed either in real-time as messages are detected, or in batch analysis of a set of previously collected data. Real-time correlation of high transaction volumes is highly demanding and requires an optimized message decode and correlation system. Even in the case of a single network connection, it is not effective to inspect and compare all messages with all other messages. To optimize the correlation process, an effective strategy for filtering, segregating, and comparing messages is needed. The more efficient the process becomes, the more messages can be processed. In a multi-tier, multi-link systems, transactions may span many different network links and involve many different application protocols and encodings. As a consequence, there are typically many more messages of many different types collected than for transactions across systems with only a single link. Collection of the messages is typically performed at a plurality of points within the multi-link system. As the message encodings may be different at each point, the means of comparing messages must become more complex, further decreasing computational efficiency. Segregating and filtering these many messages requires a more effective strategy than currently exists to ensure that correlation is both accurate and scalable. Existing correlation solutions are typically limited to gathering and correlating messages on a single link, thus providing an incomplete view of each system-wide transaction. Correlation solutions extending to adjacent links do not scale effectively to more complex topologies. Further, they do not provide the characterization of sub-sets of the system as coherent services or account for 3party services.","However, the UTM of the present invention provides a basis for effectively gathering, filtering, and correlating large numbers of messages into a hierarchy of transaction types. Information regarding the network topology , organization of resources, application implementations, protocol rules, and other aspects of a given system  are flexibly codified into a framework or model . The framework separates the information into a series of levels and supports rules and means for comparison to be applied selectively. The hierarchical model  optimally segregates individual messages into a first level of groups such that only messages within a given first-level group are compared and constructed into first-level transactions belonging to that group. Each group may have a different basis for correlation of messages, depending on the protocols employed and how they were implemented. Subsequently, transactions within one group are selectively compared to transactions in selected other groups according to means specific to that level. The correlated first-level transactions generate composite transactions of a second-level which are segregated within a second-level group with its own attributes and properties. This process of segregating events at a plurality of levels optimizes and enables the construction of transactions across multiple links. It provides for a flexible configuration framework that can be mapped into a variety of different systems, both single link and multiple links.","With respect to transaction assessment, within an operating instance (e.g., modules ) of the present invention that has been properly configured, transactions will be generated at each selected level of the model . According to one embodiment, there are at least three levels of transaction generated, namely link transactions, service transactions, and application transactions. Each level of transaction comprises one or more lower level transactions, where the lowest level (link) transaction comprises one or more network messages. According to another embodiment, a fourth level of transaction may be added, corresponding to the highest level of the model, that represents business transactions. Business transactions are at least composed of application transactions and may also include related events or objects defined outside the hierarchy.","Over a period of monitoring, the operating instance  will generate a plurality of each level of transaction. Some transactions may be incomplete according to the model or represent specific known states (e.g., succeeded, failed, declined). As part of its operation, the operating instance  may present the transactions to an end-user for inspection (e.g., via GUI ). To aid in assessment of the observed populations, the operating instance  may further analyze the populations of transactions according to specific metrics of performance.","For example, the set of link transactions on a specific link for a defined period of time may be analyzed to determine the distribution of times for completion for those transactions considered \u201cdeclined\u201d. The analysis may produce typical statistical measures such as minimum, maximum, mean, standard deviation, and the like. Alternatively, the analysis may select for and operate on only those link transactions that are \u201cincomplete\u201d and estimate the message loss associated with this population, and subsequently estimate the network packet loss. These metrics are typical for measuring the performance of networks and may be most familiar to those who operate them.","Alternatively, the population of application transactions across a specific application may be analyzed to determine the distribution of times for all transaction over a defined period of time. This distribution may then be used as input to a standard end-user experience model such as Apdex. The Apdex factor produced may then represent the overall performance of the application level of the business system .","With respect to metrics, in this view, transactions associated with each level of the implementation may be analyzed by one or more metrics specific to that level. Each metric may then produce a measure of performance that is responsive to factors specific to that level. These factors may include the following: (1) The individuals, groups, or roles who are involved in testing, managing, or troubleshooting related aspects of the business system. For example: network operators may be most interested in the performance of link transactions; application developers, systems integrators, and service operators, including those responsible for relationships with third parties, may be most interested in the performance of service transactions; and, business managers, customer relations agents, and end-users may be most interested in the performance of application transactions; (2) Typical or standardized metrics used within an existing and related sphere of IT management. For example: networks are often assessed in terms of packet loss, latency, jitter, and network capacity; services are often assessed in terms of dependencies between services such as availability, time-to-respond, and thresholds of behavior; in the case of the 3rd party services, the terms are often specific to Service Level Agreements (\u201cSLAs\u201d) defined within services contracts; and, applications are often assessed in terms of end-user experience including page-load times, task completion times, and statistical aggregates based on subject preference such as Apdex; (3) Existing or constructive relationships between levels that are reflected in their respective metrics. For example: latency variation (jitter) in a specific population of link transactions may be well correlated with low Apdex scores of a related population of application transactions; and, periods of no availability in a third party service as reflected by its service transactions may be responsible for high failure rates in end-user application transactions; (4) Data available at a given level limits or enhances the scope of metrics that may be applied. For example: TCP sequence information at the network level and the presence of TCP retransmits provides the basis for packet loss estimates on an IP link; designation of a third party service qualifies it as a dependency that may require a specific set of measured thresholds particular to an existing SLA; and, identification of particular user functionalities at the access service of an application provides the basis for segmenting application transactions into relevant sub-populations\u2014each sub-population of application transactions may represent a state in a Markov chain analysis that subsequently characterizes a typical end-user experience. The result may be a hierarchy of metrics that follow the UTM and, at least in part, are defined by the details of the topological model for a given implementation.",{"@attributes":{"id":"p-0107","num":"0106"},"figref":["FIG. 15","FIG. 15"],"b":["1510","1520","1530","1540","101","90","87","85"]},"With respect to implementation, according to one embodiment, the UTM may include the following: definition of three levels (e.g., network\/link, service, application); database schema to support the delineation of link, service, and configuration, configuration of the related models, storage of related data objects, and generation of statistics based on basic performance metrics; configuration capability to accommodate definition of correlation for link, service, and application transactions; correlation capability to generate successively levels of transactions (e.g., from protocol messages into link transactions; from link transactions into service transactions, and, from service transactions into application transactions); basic metrics for performance at each level of transactions; and, presentation of the transactions at each level, including their relationship to each other within the hierarchy. Provision may also be made to accommodate the definition of business processes. This would effectively add business as a fourth level and support the correlation of application transactions into business transactions.","The above embodiments may contribute to an improved method and system for monitoring performance of an application system  which is distributed across network connected nodes and may provide one or more advantages. First, the invention provides an ontological model  of isomorphic levels comprising entities, events, functions, properties, and generative operators (the \u201cUTM\u201d) in which levels of model define \u201cspans\u201d of a network topology  such that transactions across each span include one or more network links. Second, the model  is implemented on a network topology  and performs the following: segments the system  into spans for links, services, and applications, and businesses; accounts for 3rd party services; and, defines functionality and audience at each level. Third, transactions are constructed for each level of hierarchy where: link transactions span a network link; service transactions span one or more links; application transactions span one or more services; and, business transactions span one or more applications. Fourth, the model  provides the optimization necessary for efficient real-time scalability of correlation of messages across complex topologies  at high message volumes. And, fifth, the invention provides for performance metrics , , ,  applied to constructed transactions at each level of hierarchy  in accordance with standards, actors, and conventions relating to that level.","Aspects of the above described method may be summarized with the aid of a flowchart.",{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 17","b":["1700","321","331","300","800","110","113"]},"At step , the operations  start.","At step , a hierarchical model  for the application system  is generated, the hierarchical model  having a plurality of levels (e.g., , , , ), each level (e.g., ) including components (e.g., ) of a span specific to that level.","At step , the application system  is mapped onto the hierarchical model  according to a network topology  of the application system .","At step , network traffic is monitored between the plurality of network connected nodes (e.g., , ) of the application system  to gather network traffic data.","At step , the network traffic data is assembled into application messages (e.g., , , ,  in ).","At step , the application messages , , ,  are correlated into sets of application messages that are causally associated in accordance with the hierarchical model , wherein the sets of causally associated application messages constitute transactions (e.g., ,  in  or  in ) corresponding to a lowest level (e.g., ) of the hierarchical model .","At step , records of individual transactions (e.g., ) occurring within the application system  are generated for at least the transactions , ,  corresponding to the lowest level  of the hierarchical model .","At step , the operations  end.","The method may further include correlating transactions , , , , ,  corresponding to the lowest level  of the hierarchical model  into sets of transactions that are causally associated in accordance with the hierarchical model , wherein the sets of causally associated transactions constitute transactions (e.g., , , ,  in  or  in ) corresponding to a higher level (e.g., ) of the hierarchical model . The method may further include correlating transactions , , ,  corresponding to the higher level  of the hierarchical model  into sets of transactions that are causally associated in accordance with the hierarchical model , wherein the sets of causally associated transactions constitute transactions (e.g.,  in  or  in ) corresponding to a next higher level (e.g., ) of the hierarchical model . The method may further include correlating transactions  corresponding to the next higher level  of the hierarchical model  into sets of transactions that are causally associated in accordance with the hierarchical model , wherein the sets of causally associated transactions constitute transactions (e.g.,  in ) corresponding to a highest level (e.g., ) of the hierarchical model . The transactions  corresponding to the lowest level  of the hierarchical model , the transactions  corresponding in the higher level  of the hierarchical model , the transactions  corresponding to the next higher level  of the hierarchical model , and the transactions  corresponding to the highest level  of the hierarchical model  may be link transactions, service transactions, application transactions, and business transactions, respectively. The correlating  of the application messages (e.g., ,  across link ) may include a rule-based comparison of attributes between application messages (e.g., , ) that yields an exact match. The correlating  of the application messages (e.g., ,  across link ) may include a probabilistic association between the application messages (e.g., , ) based on one or more of contents of the application message payloads, contents of the application message headers, timing of the application messages, and sequence of the application messages (e.g., , ). The probabilistic association may be one of a hidden Markov model, a real-time Bayesian network analysis, and a Kalman filter. The correlating of the transactions (e.g., , ) corresponding to the lowest level  of hierarchical model  into the transactions (e.g., ) corresponding to the higher level  of the hierarchical model  may include determining potential causal relationships through analysis of the network topology . The correlating of the transactions (e.g., , ) corresponding to the lowest level  of the hierarchical model  into the transactions (e.g., ) corresponding to the higher level  of the hierarchical model  may include a probabilistic association between the transactions ,  corresponding to the lowest level  of the hierarchical model  based on one or more of contents of multiple application message payloads of related transactions corresponding to the lowest level  of the hierarchical model , contents of multiple application message headers of related transactions corresponding to the lowest level  of the hierarchical model , and timing of multiple application messages of related transactions corresponding to the lowest level  of the hierarchical model . The probabilistic method may be one of a hidden Markov model, a real-time Bayesian network analysis, and a Kalman filter. The method may further include, for transactions , , ,  corresponding to each of the plurality of levels , , ,  of the hierarchical model , identifying attributes of behavior relating to performance and applying one or more metrics , , ,  to the attributes. The metrics , , ,  applied may be specific to each of the plurality of levels , , ,  of the hierarchical model  and may be related to conventions, standards, perspectives, or role-based objectives associated with each of the plurality of levels , , ,  of the hierarchical model . The metrics , , ,  for the link, service, application, and business transactions , , ,  may include performance of networks, measures specific to a service level agreement or other third party agreement, end-user experience, and business performance, respectively. The metrics  relating to performance of networks may include at least one of estimated network packet loss, delay variation, minimum delay, and maximum throughput. The metrics  relating to service level agreement or other third party agreement may include at least one of average transaction rate, number of transactions per unit time, rate of failed transactions, peak transaction rate, and availability. The metrics  relating to end-user experience may include at least one of Apdex value, average response time, minimum response time, maximum response time, percentage of incomplete transactions, and rate of failed transactions caused by application system problems. The metrics  relating to business performance may include at least one of customer satisfaction, employee productivity, and cost savings. And, the monitoring  of network traffic may be performed simultaneously at one or more nodes ,  within the application system .","According to one embodiment, each of the above steps - may be implemented by a respective software module . According to another embodiment, each of the above steps - may be implemented by a respective hardware module . According to another embodiment, each of the above steps - may be implemented by a combination of software  and hardware modules .","While this invention is primarily discussed as a method, a person of ordinary skill in the art will understand that the apparatus discussed above with reference to a data processing system  may be programmed to enable the practice of the method of the invention. Moreover, an article of manufacture for use with a data processing system , such as a pre-recorded storage device or other similar computer readable medium or computer program product including program instructions recorded thereon, may direct the data processing system  to facilitate the practice of the method of the invention. It is understood that such apparatus, products, and articles of manufacture also come within the scope of the invention.","In particular, the sequences of instructions which when executed cause the method described herein to be performed by the data processing system  can be contained in a data carrier product according to one embodiment of the invention. This data carrier product can be loaded into and run by the data processing system . In addition, the sequences of instructions which when executed cause the method described herein to be performed by the data processing system  can be contained in a computer software product or computer program product according to one embodiment of the invention. This computer software product or computer program product can be loaded into and run by the data processing system . Moreover, the sequences of instructions which when executed cause the method described herein to be performed by the data processing system  can be contained in an integrated circuit product (e.g., a hardware module or modules ) which may include a coprocessor or memory according to one embodiment of the invention. This integrated circuit product can be installed in the data processing system .","The embodiments of the invention described above are intended to be exemplary only. Those skilled in the art will understand that various modifications of detail may be made to these embodiments, all of which come within the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Further features and advantages of the embodiments of the present invention will become apparent from the following detailed description, taken in combination with the appended drawings, in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 10","FIGS. 8 and 9"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 11","FIGS. 8-10"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 12","FIGS. 8-11"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 18"},"It will be noted that throughout the appended drawings, like features are identified by like reference numerals."]},"DETDESC":[{},{}]}
