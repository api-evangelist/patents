---
title: Device color characterization profile format
abstract: A color characterization profile format and data structure are provided for allowing a color management solution to convert colors into or out of a color space. The color characterization profile format contains a color management measurement data portion and a container that is configured to provide digital rights management capabilities over the color characterization profile format. The container can include linked and embedded objects and extensible markup language. Further, the container can be an advanced systems format container. The container can be configured to perform different functions, including enabling private data extensions, operating interface description language, storing a rendering intent separate from the color management measurement data portion, the ability to be edited by a text editor application, operability across a plurality of operating platforms, and preventing a user from tampering with the color characterization profile format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07813000&OS=07813000&RS=07813000
owner: Microsoft Corporation
number: 07813000
owner_city: Redmond
owner_country: US
publication_date: 20031230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","A. Factoring","B. Redefinition","C. Inline Coding","D. Divorce","E. Rewriting"],"p":["Aspects of the present invention are directed generally to color management systems. More particularly, aspects of the present invention are directed to a file format and data structure for operation of a device color characterization profile for use in color management operations.","Originally, color management processing was a relatively straight forward and easy operation where images were scanned by one type of input device and reproduction occurred through one output device. Spot corrections were handled during this one step process. However, with the development of computer technology and associated devices, more devices became available for providing and\/or handling color management operations. The single image input device became a number of different scanners, monitors, and digital cameras. The one output device became a number of different printers, monitors, and printing presses. Further, numerous manufacturers began to produce digital still cameras, digital video cameras, scanners, monitors, printers, and printing presses, and these same manufacturers began to produce various models of each device, based on different rendering technologies, that all had different device specific color measurement and\/or processing data.","The result is an enormously large number of possible configurations of devices, leading to an equally large number of possible conversions from input devices to output devices.  illustrates an example system of configurations between m input devices and n output devices. As shown, input device - must be able to convert to each output device - to -. For all input devices  to be able to operate with all output devices , each input device - to -must be able to convert to each output device - to -. As the number of input devices  and\/or output devices  increases, the number of needed conversions increases in a much faster manner. This explosive increase in conversion paths becomes unmanageable under such a system. Under such a system, ten (10) different inputs and ten (10) different outputs require a total of one hundred (100) different conversions, i.e., m*n conversions.","Under color management technology, the number of conversions drops significantly.  illustrates an example color management conversion system. As shown in , the color management system includes a profile connection space . Under the color management system of , the profile connection space  operates as the conversion mechanism between the input devices  and the output devices . Conversion information between each input device  and each output device  is no longer needed. One only needs a single conversion between the input device  or output device  and the profile connection space . The profile connection space  will perform processing to connect a particular input device, such as input device - to a particular output device, such as output device -. Each single conversion describes the color reproduction operations and capabilities of the particular device. This conversion description is commonly referred to as a device color characterization profile. Under such a system, ten (10) different inputs and ten (10) different outputs require a total of twenty (20) different conversions, i.e., m+n conversions.","A profile can be described as a file that contains enough information to let a color management system convert colors into or out of a specific color space. Historically, there are two basic profile solutions for managing color in complex systems. The first uses standard color spaces, such as sRGB and scRGB color spaces. The second uses device color characterization profiles, such as the profile format developed by the International Color Consortium (ICC).","The ICC profile format is a file that contains enough color characteristic information of a device to allow a color management system to maintain color characteristic consistently into or out of a specific color space, such as the color space of a printer. The ICC profile file contains text descriptions of specific devices and their settings along with numeric data describing how to transform the color values which are to be displayed or printed on the device. The numeric data includes matrices and tables that a color management module (CMM) uses to convert that device's color results to a common color space, defined by the ICC and called the profile connection space (PCS), and back to the color space of the device. (Wallner, Dawn; ; http:\/\/www.color.org\/icc-bookl.pdf; April 2000; page 6).","Generally, there are three classes of profiles: an input profile, a display profile and an output profile. An input profile can describe scanner and digital camera based technologies. A display profile can describe monitor and liquid crystal display type technologies. An output profile can describe printer and press technologies. Profiles are generally either matrix-based or table-based. A detailed explanation of each type of profile can be found on pages 100-103 of Fraser et al., , Peachpit Press, Berkeley, Calif., 2003.","Since inception in 1993, the ICC profile format has been the de facto standard for all profile-based solutions. However, the ICC profile format has many limitations. First, the ICC profile format lacks any type of digital rights management (DRM) capability. Digital media files can be easily copied and distributed. As a result, digital media files are being widely distributed on the Internet today, through both authorized and unauthorized distribution channels. Piracy is a concern when security measures are not in place to protect content. Digital rights management enables content providers to protect their content and maintain control over distribution. Second, the ICC profile format includes a problematic index that requires synchronization. If a corruption of the index of tags of an ICC profile occurs, tags in the ICC profile cannot be found. As a result, time and resources must be spent to rebuild the ICC profile index of tags. Any change to a tag requires synchronization of the index. Third, there is no current free library for reading the ICC profile format. Fourth, the ICC profile format utilizes a standard syntax, but fails to standardize actions and functionality.","Fifth, the ICC profile format lacks interoperability. Any type of support for one platform is different in another platform. The ICC profile lacks eXtensible Markup Language (XML) support for database and metadata integration. Sixth, the ICC profile format lacks transparency. A user has to utilize a specific application to list tags and values, and the ICC profile is not clear as to how tags or values are to be represented or used. Seventh, the ICC profile format includes a copyright tag, but fails to provide any intrinsic system to prevent unauthorized uses or tampering. Eighth, the ICC profile format lacks the ability to provide independent data extensions. A third-party vendor cannot have a private tag associated with a new device from that vendor simply added by extension to an ICC profile. Ninth, edits to an ICC profile require use of a special proprietary editor program of the ICC. Finally, the ICC profile format lacks the ability to contain safe executable code and the ability to store rendering preferences separate from objective measurements. The ICC profile format requires that objective intra-device measurement data be combined with subjective, potentially proprietary inter-device rendering data in a manner that is impossible to deconstruct without access to the original profile creation algorithms. ICC profiles are typically constructed by taking a series of target measurements and then performing a statistical analysis to derive analytical parameters for a particular device model. Such a model might include gamma, offset and gain of a cathode ray tube (CRT) model or uniformly spaced multidimensional lookup table vertices for a printer model. This data concatenation makes it impossible for users to directly edit original measurement data or determine and edit the analytical device model parameters that result from this measurement data.","There is therefore a need for a color characterization profile format that provides a user with the ability to overcome one or more of the cited ICC profile format limitations. An aspect of the present invention provides a color characterization profile format that contains a color management measurement data portion and a container that is configured to provide digital rights management capabilities over the color characterization profile format.","Another aspect of the invention provides for the container to include both linked and embedded objects and a representation in extensible markup language (XML). The container can be an advanced systems format container (ASF). Still another aspect of the invention provides for a container to be configured to perform different functions, including enabling private data extensions, operating interface description language, storing a rendering intent separate from the color management measurement data portion, the ability to be edited by a text editor application, operability across a plurality of operating platforms, and preventing a user from tampering with the color characterization profile format. This invention provides the ability to provide statistical objective measurements and\/or analytical parameters (possibly derived from these measurements). The invention also provides the ability to embed code or instructions to enable third parties to provide, in an efficient manner, the instructions necessary to process the profile data if proprietary extensions are included.","In the following description of various illustrative embodiments, reference is made to the accompanying drawings, which form a part hereof, and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["200","200","210","210"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["a. the profile size (number of bytes),","b. the color management module (CMM) type signature (default CMM),","c. the profile version (version of ICC profile format specification to which the profile conforms),","d. the profile class (display device, input device, output device, among others),","e. the color space signature (for device and non-device color spaces),","f. the profile connection space signature (currently either CIEXYZ or CIELAB),","g. the primary platform signature (platform on which profile was created, e.g., Microsoft Corporation\u00ae; Apple Computer, Inc.\u00ae; Silicon Graphics, Inc.\u00ae; Sun Microsystems, Inc.\u00ae; etc.),","h. profile flags (flag 1\u2014standalone or embedded and flag 2\u2014when embedded, can it be extracted),","i. device manufacturer and model signatures (devices registered with the ICC),","j. device attributes (media associated with the device the profile applies to),","k. rendering intent (default rendering intent table),","l. profile creator signature (creating manufacturer of the profile), and","m. the profile ID (and optional identification of the profile)."]}}}},"The tag table or index of tags  functions similarly to a table of contents for a book. Tag table  contains a 4 byte tag count listing the total number of tags in the profile, followed by the tags, e.g., data identifiers, each with a set structure consisting of the number of bytes for the tag's data and a pointer into the file where the data is located. Tag table  uses a 4 byte tag signature registered with the ICC, a 4 byte offset to denote where the data corresponding to that tag starts, and a 4 byte size value to denote how long that tag is. The tagged element data  is the final portion of the ICC profile format . Tagged element data  includes data associated with the corresponding tag in the tag table . Tagged element data  includes white point information, tone response curves, rendering intent tables, etc. Tagged element data  can vary in size as shown in  depending on the type of information specified in the tagged element.",{"@attributes":{"id":"p-0022","num":"0034"},"figref":"FIG. 3A","b":["300","300","300","300"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general-purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, random access memory (RAM), read only memory (ROM), electronically erasable programmable read only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as ROM  and RAM . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disc drive  that reads from or writes to a removable, nonvolatile optical disc  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disc drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a digital camera , a keyboard , and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well-known protocols such as TCP\/IP, Ethernet, FTP, HTTP and the like is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.","A programming interface (or more simply, interface) may be viewed as any mechanism, process, protocol for enabling one or more segment(s) of code to communicate with or access the functionality provided by one or more other segment(s) of code. Alternatively, a programming interface may be viewed as one or more mechanism(s), method(s), function call(s), module(s), object(s), etc. of a component of a system capable of communicative coupling to one or more mechanism(s), method(s), function call(s), module(s), etc. of other component(s). The term \u201csegment of code\u201d in the preceding sentence is intended to include one or more instructions or lines of code, and includes, e.g., code modules, objects, subroutines, functions, and so on, regardless of the terminology applied or whether the code segments are separately compiled, or whether the code segments are provided as source, intermediate, or object code, whether the code segments are utilized in a runtime system or process, or whether they are located on the same or different machines or distributed across multiple machines, or whether the functionality represented by the segments of code are implemented wholly in software, wholly in hardware, or a combination of hardware and software.","Notionally, a programming interface may be viewed generically, as shown in  or .  illustrates an interface Interface as a conduit through which first and second code segments communicate.  illustrates an interface as comprising interface objects I and I (which may or may not be part of the first and second code segments), which enable first and second code segments of a system to communicate via medium M. In the view of , one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although  show bidirectional flow and interfaces on each side of the flow, certain implementations may only have information flow in one direction (or no information flow as described below) or may only have an interface object on one side. By way of example, and not limitation, terms such as application programming interface (API), entry point, method, function, subroutine, remote procedure call, and component object model (COM) interface, are encompassed within the definition of programming interface.","Aspects of such a programming interface may include the method whereby the first code segment transmits information (where \u201cinformation\u201d is used in its broadest sense and includes data, commands, requests, etc.) to the second code segment; the method whereby the second code segment receives the information; and the structure, sequence, syntax, organization, schema, timing and content of the information. In this regard, the underlying transport medium itself may be unimportant to the operation of the interface, whether the medium be wired or wireless, or a combination of both, as long as the information is transported in the manner defined by the interface. In certain situations, information may not be passed in one or both directions in the conventional sense, as the information transfer may be either via another mechanism (e.g. information placed in a buffer, file, etc. separate from information flow between the code segments) or non-existent, as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation, e.g., depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration, and so this list should be considered illustrative and non-limiting.","This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are, however, other ways to implement a programming interface, and, unless expressly excluded, these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of , but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown, some interfaces can be described in terms of divisible sets of functionality. Thus, the interface functionality of  may be factored to achieve the same result, just as one may mathematically provide 24, or 2 times 2 times 3 times 2. Accordingly, as illustrated in , the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA, InterfaceB, InterfaceC, etc. while achieving the same result. As illustrated in , the function provided by interface I may be subdivided into multiple interfaces I, I, I, etc. while achieving the same result. Similarly, interface  of the second code segment which receives information from the first code segment may be factored into multiple interfaces I, I, I, etc. When factoring, the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of , the functional spirit of interfaces Interface and I remain the same as with , respectively. The factoring of interfaces may also follow associative, commutative, and other mathematical properties such that the factoring may be difficult to recognize. For instance, ordering of operations may be unimportant, and consequently, a function carried out by an interface may be carried out well in advance of reaching the interface, by another piece of code or interface, or performed by a separate component of the system. Moreover, one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.","In some cases, it may be possible to ignore, add or redefine certain aspects (e.g., parameters) of a programming interface while still accomplishing the intended result. This is illustrated in . For example, assume interface Interface of  includes a function call Square (input, precision, output), a call that includes three parameters, input, precision and output, and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario, as shown in , it could just as well be ignored or even replaced with a meaningless (in this situation) parameter. One may also add an additional parameter of no concern. In either event, the functionality of square can be achieved, so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system; however, once it is recognized that precision is not necessary for the narrow purpose of calculating the square, it may be replaced or ignored. For example, instead of passing a valid precision value, a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly, as shown in , interface I is replaced by interface I\u2032, redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I\u2032, redefined to ignore unnecessary parameters, or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects, such as parameters, which are not needed for some purpose, and so they may be ignored or redefined, or processed elsewhere for other purposes.","It may also be feasible to merge some or all of the functionality of two separate code modules such that the \u201cinterface\u201d between them changes form. For example, the functionality of  may be converted to the functionality of , respectively. In , the previous 1st and 2nd Code Segments of  are merged into a module containing both of them. In this case, the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus, for example, formal Call and Return statements may no longer be necessary, but similar processing or response(s) pursuant to interface Interface may still be in effect. Similarly, shown in , part (or all) of interface I from  may be written inline into interface I to form interface I\u2033. As illustrated, interface I is divided into Iand I, and interface portion Ihas been coded in-line with interface I to form interface I\u2033. For a concrete example, consider that the interface I from  performs a function call square (input, output), which is received by interface I, which after processing the value passed with input (to square it) by the second code segment, passes back the squared result with output. In such a case, the processing performed by the second code segment (squaring input) can be performed by the first code segment without a call to the interface.","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in , one or more piece(s) of middleware (Divorce Interface(s), since they divorce functionality and\/or interface functions from the original interface) are provided to convert the communications on the first interface, Interface, to conform them to a different interface, in this case interfaces InterfaceA, InterfaceB and InterfaceC. This might be done, e.g., where there is an installed base of applications designed to communicate with, say, an operating system in accordance with an Interface protocol, but then the operating system is changed to use a different interface, in this case interfaces InterfaceA, InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment, and so an intermediary is used to make the old and new interfaces compatible. Similarly, as shown in , a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to, for example, interfaces and , redesigned to work with DI, but to provide the same functional result. Similarly, DI and DI may work together to translate the functionality of interfaces I and I of  to a new operating system, while providing the same or similar functional result.","Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example, there may be a system in which a code segment presented in an intermediate language (e.g. Microsoft IL, Java ByteCode, etc.) is provided to a Just-in-Time (JIT) compiler or interpreter in an execution environment (such as that provided by the .Net framework, the Java runtime environment, or other similar runtime type environments). The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment, i.e., to conform them to a different interface as may be required by the 2nd Code Segment (either the original or a different 2nd Code Segment). This is depicted in . As can be seen in , this approach is similar to the Divorce scenario described above. It might be done, e.g., where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol, but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed-base applications to the new interface of the operating system. As depicted in , this approach of dynamically rewriting the interface(s) may be applied to dynamically factor, or otherwise alter the interface(s) as well.","It is also noted that the above-described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways, serially and\/or in parallel, or with other intervening code. Thus, the alternative embodiments presented above are not mutually exclusive and may be mixed, matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that, as with most programming constructs, there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein, but nonetheless are represented by the spirit and scope of the invention, i.e., it is noted that it is at least partly the functionality represented by, and the advantageous results enabled by, an interface that underlie the value of an interface.",{"@attributes":{"id":"p-0043","num":"0055"},"figref":["FIG. 4","FIG. 4"],"b":["410","410","410","410"]},"Profile format  can include a digital rights management component . Digital rights management component  provides a flexible format for the secure distribution of digital media content. Digital rights management (DRM) component  is a policy based system that ensures that authorized users are utilizing specific digital data in an authorized manner. The current ICC profile format fails to provide any type of DRM protection for content provides to protect their content and maintain control over distribution. Profile format  also can include a copyright protection\/tampering prevention component . Copyright protection\/tampering prevention component  provides a level of authenticity to the profile format . Copyright protection\/tampering prevention component  utilizes encryption and digital signing technology. Under copyright protection\/tampering prevention component , none, some, or all data can be encrypted. Further, the data can be authenticated by digital signing technology to ensure that it has not been tampered with. For the ICC profile format, an unauthorized user can easily bypass the copyright tag and simply copy and\/or tamper with the underlying data. ICC profile format provides a copyright tag, but it fails to provide any intrinsic system for protection. XML technology permits a signature to be added to part or all of an XML file. Likewise, XML technology allows for encryption of part or all of an XML file. The -3of Dec. 10, 2002 (http:\/\/www.w3.org\/TR\/xmlenc-core\/), and Feb. 12, 2002 (http:\/www.w3.org.TR\/xmldsig-core\/), published by the Internet Engineering Task Force (IETF) are herein incorporated by reference.","Transparency component  provides for substantially free access to list tags and underlying data. Special application programs are not needed as is needed for operation with the ICC profile format. Container interoperability component  provides substantially free access between components within the profile format . Further, container interoperability component  provides for component operability within different platform containers, e.g., XML, OLE, and ASF. XML is an open international standard. Compared to ICC's proprietary format, XML provides transparency. Further, the ability to separate out the objective intra-device measurements, the analytical parameters derived from those measurements and the rendering intent or gamut mapping form each other make it easier for user and programmers to access the parts of the profile transparently compared with ICC profiles.","Private data extensions component  permits independent data extensions to the profile format . An independent data extension may include vendor extensions for new models developed by a manufacturer. For example, if camera manufacturer Camera Corporation develops a new model, the X2000 Extreme, to its existing line of X2000 digital cameras, Camera Corporation cannot simply add an extension into the ICC profile format for the device specific capabilities, parameters, and color space information regarding the new X2000 Extreme model. Interface description language (IDL) component  provides for compatibility with IDL technology. IDL is a processor independent low level language where multiple language types can be mixed together. For example, IDL is one way for programs that include C++ and Cobalt to be able to function together. IDL offers a secured extension for permitting executable code components  to be included in profile format . XML namespaces allow for partitioning of the extensions into separate areas, with each area assigned to an organization. Each organization can define its namespace without worrying about conflicts with other organization's extensions. , IETF, World Wide Web Consortium; Jan. 14, 1999 (www.w3.org\/TR\/1999\/REC-xml-names-19990114)) is herein incorporated by reference. XML schema technology defines the names, types, and allowed values for extensions. The 03(http:\/www.w3.org.TR\/xmlschema-0\/), 13(http:\/www.w3.org.TR\/xmlschema-1), and 2: 3(http:\/www.w3.org.TR\/xmlschema-2\/) of May 2, 2001, published by the Internet Engineering Task Force (IETF) are herein incorporated by reference.","Executable code component  contains safe and secured executable code. Executable code component  permits incorporation of executable code, such as pertaining to a gamut mapping algorithm for color management processing. Executable code component  is designed to permit the inclusion of executable code while restricting access to resources of the device, hardware components of the device, as well as being memory confined. Executable code component  is designed to provide virus protection and other unauthorized uses and or manipulations of data that may be attempted through use of the executable code. Rendering intents and measurements component  provides for the storage of rendering intent preferences separate from objective measurements. The ICC profile format maintains the rendering intent information and the measurements in a common storage medium. Specification of a particular rendering intent can be made without having any potential effect on the measured data. The (CLI) (Standard ECMA-335; ECMA International; 2Edition; December 2002 (www.ecma-international.org\/publications\/files\/ECMA-ST\/Ecma-335.pdf)) is herein incorporated by reference.","The ICC profile format lacks a free library for reading the ICC profile format. Profile library component  provides information for compatibility across different platforms. Profile library component  provides application programming interfaces (API), platform support information, and other information for allowing use across various operating platforms. The ICC profile format lacks such ability. Finally, the ICC profile format lacks the ability to have portions changed, added, or deleted by a text editor program. Editor component  allows a user to make edits to the profile format  without use of a special program specifically designed for the purpose of editing a profile format. The ICC profile format can only be edited by a specifically designed proprietary editor. The sole purpose of this proprietary editor is for edits to ICC profile formats. Editor component  allows a user to use any type of text editor program, such as Notepad, Wordpad, and Word by Microsoft, Corporation\u00ae of Redmond, Wash. Editor  is designed to operate with any type of text editor program and does not require a specific proprietary application for operation. Microsoft Corporation\u00ae of Redmond, Wash. provides a proprietary API in ICM2 (Image Color Management ) as described in MSDN\u00ae (Microsoft Developer Network) as an example profile library component. Profile editing is done by either accessing this proprietary API one ICC profile tag at a time or using a stand alone proprietary profile editing application. In accordance with at least one aspect of the present invention, one can use standard XML editors that are widely available, e.g., Notepad by Microsoft Corporation\u00ae of Redmond, Wash., to edit the profile directly.","Profile format  is designed for operation with a container. Three examples of containers are 1) extensible markup language (XML) containers, 2) object linking and embedding (OLE) containers, and 3) advanced systems format (ASF) containers. XML is a platform-independent industry standard that the World Wide Web Consortium manages. XML is a metalanguage used to create custom markup languages that can define all types of information or data. XML defines information and data according to purpose rather than presentation so that several applications can use the information and data. XML enables developers to create customized tags which cannot be created under existing hypertext markup language (HTML) technology. OLE is a structured storage that allows a user to integrate data from one application to another application. Object linking allows a user to share a single source of data for a particular object across various applications. The document contains the name of the file containing the data, along with a picture of the data. When the source is updated, all the documents utilizing the OLE data are updated in response. OLE allows for embedding the profile format  into an input image to be color management processed. Finally, ASF provides a multimedia format for audio (.wma) and video (.wmv) synchronized digital media, typically audio or video, for streaming or interactive delivery. ASF is a nested object container file format. ASF is an extensible file format designed to store coordinated digital media data. ASF supports multimedia data delivery over a wide variety of networks and is also suitable for local playback. Each ASF is composed of one or more digital media streams. The file header specifies the properties of the entire file, along with stream specific properties. At a minimum, ASF includes an ID, a data length indicator, and data. Digital media data references a particular digital media stream number to indicate its type and purpose. The delivery and presentation of all digital media stream data is aligned to a common timeline. The () (Revision 01.20.01e; Microsoft Corporation\u00ae of Redmond, Wash.; Sep. 5, 2003 (http:\/\/download.microsoft.com\/download\/e\/0\/6\/e06db390-1e2a-4978-82bb-311819d8a2d\/ASF_Specification.doc) is herein incorporated by reference. 2.0 (Kraig Brockschmidt; Sep. 13, 1994 (http:\/\/msdn.microsoft.com\/library\/en-us\/dnolegen\/html\/msdn_devwole2.asp?frame=true)), OLE Integration Technologies: A Technical Overview (Kraig Brockschmidt; October 1994 (http:\/\/msdn.microsoft.com\/library\/en-us\/dnolegen\/html\/msdn_ddjole.asp?frame=true), and (Kraig Brockschmidt; July 1996 (http:\/\/msdn.microsoft.com\/library\/en-us\/dnolegen\/html\/msdn_aboutole.asp?frame=true)) are herein incorporated by reference.","Table I describes implementation of the ICC profile format limitations in reference to XML, OLE, and ASF file format technologies.",{"@attributes":{"id":"p-0051","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"File Format and Functionalities"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["XML","OLE","ASF"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["DRM capability","DRM capability","DRM capability"]},{"entry":["API\/Platform","API\/Platform","API\/Platform"]},{"entry":["Support\/Libraries","Support\/Libraries","Support\/Libraries"]},{"entry":["Transparent","Proprietary","Proprietary"]},{"entry":["Copyright Protection\/","Copyright Protection\/","Copyright Protection\/"]},{"entry":["Tampering Prevention","Tampering Prevention","Tampering Prevention"]},{"entry":["IDL compatibility","IDL compatibility","IDL compatibility"]},{"entry":["Data extensions","Data extensions","Data extensions"]},{"entry":["Editor support","Editor support","Editor support"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"While illustrative systems and methods as described herein embodying various aspects of the present invention are shown, it will be understood by those skilled in the art, that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art, particularly in light of the foregoing teachings. For example, each of the elements of the aforementioned embodiments may be utilized alone or in combination or subcombination with elements of the other embodiments. It should also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive on the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary of the invention, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the accompanying drawings, which are included by way of example, and not by way of limitation with regard to the claimed invention.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 3B through 3M"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
