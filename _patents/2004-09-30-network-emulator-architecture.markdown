---
title: Network emulator architecture
abstract: A network emulator provides both per-connection and non-connection-based emulation. The emulator includes a host computer, and a kernel-mode emulator driver and user-mode application component running on the host computer. The application component supplies configuration parameters to the driver. The driver includes a packet filter list that filters a captured packet, a virtual network link that receives the packet from the packet filter list, a link group list that applies an emulation procedure to the packet, a timer management component that manages a timer associated with the emulation procedure, and a packet dispatcher component that sends out the packet. A connection pool component facilitates per-connection emulation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07433814&OS=07433814&RS=07433814
owner: Microsoft Corporation
number: 07433814
owner_city: Redmond
owner_country: US
publication_date: 20040930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to computer systems and computer networks, and more particularly to systems and methods for emulating network links.","Links across interconnected networks vary substantially with respect to such factors as bandwidth, packet latency, and error and loss rates. Before network protocols and distributed applications are deployed in a real network, it is critical that they be thoroughly tested under various realistic network conditions, to ensure correctness and to verify performance characteristics. Testing in an isolated real network is generally impractical. Therefore, testing typically involves simulation and emulation.","Network simulators generally attempt to provide a rich set of protocol modules and configuration tools suitable for conducting customized simulation experiments. However, network simulation suffers from a number of limitations. Simulators rely principally on models of both the physical network infrastructure and networking protocols. Models by definition only approximate the real conditions being tested, and in complex situations it is often impossible to develop accurate models for purposes of simulation. The functionalities provided by simulation modules are merely logical operations; thus, an implementation in a simulator must be modified before it can be deployed within a target network. Network simulators consume significant resources when the network being simulated is sufficiently large, and they do not provide a view of the network end user's experience.","By contrast, network emulators permit applications and protocols to be tested in real time, on real machines, such as locally-linked computers, using real implementations of network protocols. An emulator includes a supplementary means for imposing synthetic delays and faults on the real network traffic. In effect, the emulator comprises a virtual network with respect to the host machine or machines on which the network applications being tested are running. For a network emulator to be useful, however, it is necessary that it be designed and structured in such a way that various large-scale network conditions may be emulated accurately and realistically as well as efficiently and economically.","The present invention is generally directed towards a system and method for emulation of a network link, including both per-connection and non-connection-based emulation.","In accordance with one embodiment of the invention, a system for network emulation is provided. The system includes a host computer, and a kernel-mode emulator driver and user-mode application component running on the host computer. The application component supplies configuration parameters to the driver. The driver includes a packet filter list that filters a captured packet, a virtual network link that receives the packet from the packet filter list, a link group list that applies an emulation procedure to the packet, a timer management component that manages a timer associated with the emulation procedure, and a packet dispatcher component that sends out the packet. The host computer has at least one network interface and may be linked by way of a local physical network to one or more additional hosts, nodes or other networking devices.","According to one aspect of the invention, the driver includes a connection pool component for per-connection emulation. Each link group in the link group list is associated with a particular emulation configuration and includes one or more virtual link pairs. Emulation procedures applied to packets and embodied in modules in the driver include a bandwidth and queue emulation procedure, a latency emulation procedure, a packet loss emulation procedure, an error propagation emulation procedure, a packet out-of-order emulation procedure, and a background traffic emulation procedure.","The driver may include a tracing component for reporting information regarding the processed packets. The application component may include a dynamically-linked library exposing an application programming interface and a graphical user interface for monitoring the emulation.","In accordance with another embodiment of the invention, a method for emulating a network link on a host computer is provided. The method includes specifying an emulator configuration, filtering captured packets, applying emulation procedures to matched packets, reporting information regarding the packets, and dispatching the packets.","Embodiments of the invention implemented in hardware, software, and combinations thereof are contemplated.","The present invention includes a network emulator framework within which real network traffic, such as IP traffic, is processed in order to achieve realistic and accurate emulation results based on user-configured settings. Emulation procedures occur in kernel mode on an emulator link, which comprises a virtual network link. A plurality of emulation algorithms are employed, based on well-formed mathematical models for emulation of various network characteristics and conditions, including bandwidth, queue, packet loss, latency, error propagation, packet out-of-order, and background traffic. The invention is usable for emulation of wired and wireless network scenarios. In one embodiment, the invention provides a flexible software-based network emulator for use in a conventional general-purpose computing system, although embodiments incorporating the invention wholly or partly in hardware or in special-purpose devices are also contemplated. A network emulator in accordance with the invention provides per-connection emulation as well as non-connection-based emulation.","Turning to the drawings,  provides a simple illustration of one possible environment in which the present invention may be incorporated. Two computers , , each having one or more network interface cards (NICs) , , are linked by way of a local network connection , as for example an Ethernet link. The computers ,  may be computing machines of various sorts, such as personal computers, servers, workstations, portable computers, special-purpose computing devices, and the like, having appropriate network interfaces, as well as, at a minimum, such components as a processor, memory storage, and input and output interfaces. In a representative environment one computer, such as the computer , runs a server program, such as a TCP or UDP server, and another machine, such as the computer , runs a client program, such as a TCP or UDP client. The features of the various computing devices within which the invention may be incorporated are rudimentary to those having skill in the art and need not be described at length here.","At least one of the computers , , for example the computer , by executing one or more appropriate computer programs in accordance with the invention, establishes an emulator link . The emulator link  comprises a virtual network link operating upon outgoing or incoming data packets transmitted by or directed towards the computer , as by a network application  running on the machine . Those having skill in the art will appreciate that many other operating environments are possible, including those involving more than two computers generating network traffic, as well as those involving a single computer, and those involving emulation programs executing on more than one computer. Thus the environment depicted in simplified form in  should not be taken as limiting. Moreover, the emulator link may be established by an intermediary device acting as a router or bridge intercepting network traffic between two machines linked thereto.","Overview of Network Emulator Architecture",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["200","202","204"]},"The user-mode part  includes as its principal component the emulator application programming interface (API) . In one embodiment the emulator API component  is a user-mode dynamically linked library (DLL) that exposes C APIs. A user can write customized applications  invoking functions exposed in the API . In this way, the user supplies parameters to the modules of the driver part  in order to configure and control the emulator . Aspects of the API are described further in the commonly-assigned co-pending U.S. patent application, \u201cMethod and System for Network Emulation,\u201d application Ser. No. 10\/951,985, filed Sep. 28, 2004, incorporated herein by reference. The emulator  supports a dynamic profile enabling emulation of various kinds of network links, such as GPRS, broadband, or 56 Kbps modem. A graphical user interface utility  is provided for convenient setup of emulation parameters, to run and stop the emulation, and to monitor the emulation results.","The core emulation procedures of the network emulator  are performed by a plurality of modules residing in the kernel-mode component . An emulator driver  captures all packets sent and received by the host in which the emulator is installed. The emulator driver  processes the captured packets in accordance with given emulation parameters. After processing the packets, the emulator driver  sends the packets out in accordance with the emulation results. In one embodiment the emulator driver  is an NDIS intermediate driver situated above miniport drivers  and below network protocol drivers  in a layered network driver architecture.","The implementation of core emulation procedures in kernel mode enables the emulator  to achieve high performance. In one embodiment the emulator  is able to emulate bandwidth higher than 90 Mbps on 100 Mbps Ethernet and higher than 300 Mbps on Gigabit Ethernet. The user-mode part  is reserved principally for monitoring and control purposes. The network emulator  thus avoids the performance bottleneck that results from performance of emulation in user-mode, due to the overhead of context switches.","Core Components of the Emulator Driver","The emulator driver  contains a number of core components, the architecture of which is illustrated in . After a packet is captured by the driver , the packet is passed to a filter list . The filter list  filters packets with respect to which the user wishes to perform emulation. The filter list  sends the filtered packets to a virtual network link having network characteristics based on configurations specified by the user.","The filter list  comprises a list of packet filters , , . These packet filters , ,  have a logical OR relationship with one another. Packets are processed by the packet filters , ,  one by one in a \u201cfirst match, first process\u201d manner. This means that a packet is processed by the first filter that establishes a match to it, such as the filter , and the packet is not passed to the subsequent filters. Each packet filter attempts to match packets with respect to such criteria as IP version, protocol type, source IP address or mask, destination IP address or mask, port number, and NIC index. A packet filter represents a filter rule that is bound to one or more NICs.","A connection pool component  is used specifically for per-connection emulation, as described further below. The connection pool  is not used for non-connection-based emulation.","If a packet is matched by a packet filter, the packet is delivered to a link group list component . The link group list  comprises a list of link groups , , . Each link group, such as the link group , comprises one or more virtual link pairs having the same emulation parameters. In one embodiment, a link group has multiple link pairs if per-connection emulation is enabled. Each link group is associated with a particular emulation configuration. Multiple network links having diverse characteristics may thus be emulated simultaneously.","The structure of a virtual link pair is shown in . A link pair  comprises an upstream virtual link  and a downstream virtual link . The upstream virtual link  processes packets received by the host on which the embodiment of the network emulator is running. Similarly, the downstream virtual link  processes packets sent by the host. All emulation procedures are performed at virtual links. As shown in , emulation procedures include bandwidth and queue emulation , , latency emulation , , packet loss emulation , , error propagation emulation , , packet out-of-order emulation , , and background traffic emulation , . These emulation procedures, which may be associated with corresponding emulation modules forming part of the emulator driver, are described in further detail in two commonly-assigned co-pending U.S. patent applications, \u201cMethod and System for Network Emulation Using Bandwidth Emulation Techniques,\u201d application Ser. No. 10\/955,812, filed Sep. 30, 2004, and \u201cMethod and System for Network Emulation Using Packet Reorder Emulation Techniques,\u201d application Ser. No. 10\/955,578, filed Sep. 30, 2004, both of which applications are incorporated herein by reference.","Returning now to , a timer management component  manages all timers created by the network emulator. Most emulation algorithms are driven by timers, including bandwidth, latency, packet out-of-order and background traffic emulations. In an embodiment, the timer management component  is held within an individual thread of execution.","A tracing component  reports status information for the packets processed by the emulator. Such status information includes, for example, the length of time for which a packet was delayed, the number of bits in the packet that were corrupted, whether the packet was lost, the bandwidth and queue configuration, and the background traffic configuration. The tracing component  also reports information concerning the packets themselves, such as packet length, packet headers, and length of packet data. The tracing component  permits the user to monitor the running status of the emulator . In an embodiment the tracing component  is disabled by default because its use entails many data exchanges between user mode and kernel mode.","After a packet is processed by a virtual link, a packet dispatcher component  sends out the packet. In an embodiment the packet dispatcher  works by calling NDIS functions.","Per-Connection Emulation","The present invention provides an architecture for a network emulator that has the flexibility to support various emulation scenarios. One particular scenario is per-connection emulation: different connections established by way of the emulator experience different network conditions. The network emulator provided by the present invention is thus not limited to machine-to-machine emulation.","For example, suppose a user wishes to test a web server and contemplates that 30% of connections will be by way of 56 Kbps modem, 50% of connections will be by way of cable modem, and 20% of connections will be by way of wireless LAN.  illustrates a configuration of the emulator  to emulate such a scenario. A link group list  having three link groups , ,  is configured. Each of the link groups , ,  has multiple link pairs , , , respectively. The first link group  is configured to have link characteristics of a 56 Kbps modem connection. The second link group  is configured to have link characteristics of a cable modem connection. The third link group  is configured to have link characteristics of a wireless LAN connection. A packet filter list  having appropriate packet filters , ,  is created to filter out the HTTP packets to be emulated. Connection emulation is enabled, and the user specifies that 30% of connections are to be 56 Kbps connections, 50% are to be cable modem connections, and 20% are to be wireless LAN connections.","With such a configuration, the emulator  delivers each packet to a virtual link having appropriate network characteristics. This delivery is accomplished by way of the connection pool component . The connection pool  tracks and manages all underlying connections. By maintaining the mapping relationship between these connections and virtual links, the connection pool component  ensures that all connections behave as the user expects. A network emulator in accordance with the invention thereby permits multiple channel parameters to be emulated with, for example, only two physical machines, thus achieving a form of network emulation multiplexing.","The flow diagram of  shows steps associated with a network emulation process in accordance with the present invention, in accordance with the description of the architecture of the invention provided above. After a start block, the process flows to block , at which the driver captures an incoming or outgoing packet. At block  the driver causes the packet to be passed to the filter list. If a packet filter in the filter list makes a match to the packet (decision block ), the packet is delivered to the link group list at bock . At block  an upstream or downstream virtual link of a link pair in a link group applies emulation algorithms to the packet. At block  the packet dispatcher component sends out the packet, and the process then flows to an end block.","Preferred embodiments of the present invention are described herein, including the best mode known to the inventors for carrying out the invention. In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiments described herein are meant to be illustrative only and should not be understood to limit the scope of the invention. Those having skill in the art will recognize that the described embodiments can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
