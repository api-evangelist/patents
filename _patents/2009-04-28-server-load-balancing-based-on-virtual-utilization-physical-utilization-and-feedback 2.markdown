---
title: Server load balancing based on virtual utilization, physical utilization, and feedback
abstract: Methods and apparatus for providing availability information of a virtual machine to a load balancer are disclosed. The availability information of the virtual machine may be normalized information from performance metrics of the virtual machine and performance metrics of the physical machine on which the virtual machine operates. The normalized availability of a virtual machine is provided by a feedback agent executing on the virtual machine. Alternatively, the normalized availability of a virtual machine is provided by a feedback agent executing on a hypervisor executing multiple virtual machines on a common set of physical computing hardware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600332&OS=09600332&RS=09600332
owner: Cisco Technology, Inc.
number: 09600332
owner_city: San Jose
owner_country: US
publication_date: 20090428
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Technical Field","Embodiments described in this disclosure generally relate to methods and apparatus for load balancing in a system having one or more virtual machines. More specifically, embodiments described in this disclosure relate to methods and apparatus to get feedback information in virtual environment for server load balancing.","Description of the Related Art","A load balancer in a network makes forwarding decisions according to availability information reported by servers managed by the load balancer. Various factors can be used by the servers and load balancers in reporting load and making forwarding decisions. For example, a feedback agent running on each server may provide performance metrics to the load balancer. In turn the load balancer, uses the performance metrics to decide how to distribute multiple requests among the different servers.","In a virtual environment, servers operate on multiple virtual machines running on a physical machine. A server on a virtual machine reports performance metrics of the virtual machine to the load balancer. Because multiple virtual machines may run on a single physical machine simultaneously, the performance metrics reported by a server running on a virtual machine may not account for the all aspects of load on the physical machine. As a result, a physical machine running several virtual machines could be fully loaded while servers on each virtual machine report to the load balancer as being under loaded.","Embodiments described herein relate to methods and apparatus for providing normalized availability information of one or more virtual machines. The normalized availability information of the one or more virtual machines is generated from both performance metrics of the virtual machine and performance metrics of a physical machine on which the virtual machine operates.","One embodiment comprises a system having a processor, a network interface, a memory containing a hypervisor, and a feedback agent. The hypervisor may be configured to execute a plurality of virtual machines on the first computing system. The feedback agent may be generally configured to perform an operation to monitor an availability of at least a first virtual machine, of the plurality. The operation may generally include monitoring one or more performance metrics of the first virtual machine and monitoring one or more performance metrics of the computing system. The operation may further include normalizing the one or more performance metrics of the first virtual machine based on the performance metrics of the computing system and sending, over the network interface, the normalized performance metrics of the virtual machine to a load balancer.","The load balancer may generally provide a program executing on a second computing system. The load balancer may be configured to distribute computing tasks among the plurality of virtual machines based on the normalized performance metrics. In a particular embodiment, the feedback agent is a component of the hypervisor. In such a case, the feedback agent may report performance metrics of the physical machine as well as performance metrics of each virtual machine running on the hypervisor. Alternatively, an instance of the feedback agent may be executed on each of the plurality of virtual machines. Further, the computing tasks may comprise IP network service requests. And the load balancer may be further configured to assign each request to a network connection on one of the virtual machines.","Additionally, some virtualization systems allow a virtual machine to be migrated from one physical server to another. In a particular embodiment, the load balancer may receive an indication that a virtual machine on one host (and associated network connections) is going to be migrated to another host. In such a case, the load balancer may monitor the migration that virtual machines from the originating computing system to a target computing system. The load balancer may selectively drop network traffic addressed to connections on the virtual machine while it is migrated, allowing higher layer protocols to address any dropped traffic resulting from the migration.","Embodiments described herein disclose methods and apparatus for providing load and performance data of a virtual machine to a load balancer. In a particular embodiment, the load and performance data of the virtual machine is normalized from performance metrics of the virtual machine and performance metrics of the physical machine on which the virtual machine operates. The normalized information allows the load balancer to make smart forwarding decisions without knowing whether the servers are running on virtual machines or physical machines.","The performance metrics of a virtual machine may include information about the loads on a virtual CPU, virtual memory, virtual network interface, virtual storage, migration status, other virtual hardware, and combinations thereof. The performance metrics of a physical machine may include information about a CPU, memory, network interface, storage, other hardware, and combinations thereof. By normalizing performance metrics for data related to loads on virtual components of a virtual machine, embodiments may be used with out any changes to the load balancer. That is, the load balancer does not need to distinguish between servers running on virtual machines and servers running on physical machines. Thus, embodiments disclosed herein can be used in load balancing among virtual machines, or load balancing among virtual machines and physical machines.","In one embodiment, the normalized availability of a virtual machine is provided by a feedback agent running on each virtual machine. The feedback agent may utilize an API provided by the virtualization software running on the virtual machine to obtain performance metrics related to system loads on the physical machine. The feedback agent then generates normalized availability information related to loads on the virtual machine from the performance metrics of both the physical machine and the virtual machine. The feedback agent then conveys the normalized availability information to the load balancer. In one embodiment, the normalized availability information may be sent using an existing protocol understood by the load balancer, therefore, no adjustment is required on the load balancer.","In another embodiment, the normalized availability of a virtual machine is provided by a feedback agent operating within a hypervisor managing the virtual machine. The hypervisor has access to performance metrics of each virtual machine. The feedback agent within the hypervisor then conveys related loads on each virtual machine to the load balancer. In one embodiment, the normalized availability information may be sent using the protocol used by the load balancer. In one embodiment, the normalized availability information of all the virtual machines running on the hypervisor is sent to the load balancer in an aggregated manner. In another embodiment, the normalized availability information of each virtual machine running the hypervisor is sent to the load balancer individually.","In yet another embodiment, migration status of a virtual machine may be provided to the load balancer. In response, e.g., the load balancer may stop forwarding traffic, or assigning new connections, to the migrating virtual machine until migration is completed. For example, the load balancer may also selectively drop any traffic addressed as going to the virtual machine being migrated until an indication is received that the migration is complete. Doing so facilitates the migration to a new physical server as upper layer protocols can adapt to the drop in packets. Since the virtual server does not receive any new packets during the migration, its state does not changes and thus it does not need to checkpoint any changes to the virtual server at the new location.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1A","b":["100","100","110","120","120","130","110","130","120","130","110","121","130","130"]},"For example, in one embodiment, a feedback agent  running on the hypervisor  may be configured to provide availability information regarding the virtual machines  on that physical system to the load balancer . However, the availability information provided by the feedback agent  may be normalized to account for not only the loads of virtual hardware seen by each virtual machine  but also for the performance metrics of system hardware  of the physical machine  on which the virtual machines  are running.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1A","b":["120","120","110","130","110","110","110","130"],"sub":["1 ","2 "]},"The load balancer  is configured to distribute tasks among multiple virtual machines , according to availability information of different resources on each individual virtual machine. Examples of availability information includes central processing unit (CPU) loads, memory\/cache usage, cache performance, network interface controller (NIC) usage, storage unit usage, or performance metrics related other hardware, as well as combinations of usage information. Also, as noted above, when one of the virtual machines  is being migrated from one physical host to another, the load balancer may drop any traffic addressed to a port on that host.","As shown in , the load balancer  is connected to a network  which is connected with a plurality of clients . The load balancer may be implemented as a software application running in a computer system connected to network , or in other network hardware connected to network , such as a switch or a router configured to provide load balancing services for a server cluster. Requests  from the clients  may be routed to the load balancer  via the network . The load balancer  then forwards each new request to a server on an available virtual machine .","One application of the embodiment shown in  includes providing load balancing requests made to web servers running on virtual machines. For example, the load balancer  is shown connected to a cluster of physical machines . Further, multiple virtual machines  are shown running on each physical machine . Each virtual machine  may be running one or more web server applications. As a result, each virtual machine  (and each web server) shares the resources of the system hardware  in each physical machine . By running multiple virtualized computing systems on system hardware , the utilization of the physical machines  may be increased.","In operation, each IP network service request from one of the clients  is received by the load balancer . Once received, the load balancer  assigns the request to a connection on one of the virtual machines . For example, in the particular case of a web server running on the virtual machines, http requests are first received from clients  by the load balancer  and assigned to a connection with an http server process running on one of the virtual machines . Of course, more generally any IP network service requests may be balanced among a plurality of virtual machines  using the load balancing techniques disclosed herein.","The load balancer  monitors the availability of each virtual machine  using availability information received from the feedback agents  and selects what virtual machine to route each IP network service request based on such information. As noted above, in one embodiment, the feedback agent  agent may be integrated as part of the hypervisor . In such a case, the feedback agent  may provide the load balancer with status and load data for each virtual machine managed by the hypervisor . The load balancer  then forwards each new request to one of the web servers running on a target virtual machine, based in part on the feedback information provided by the feedback agent . The server on the target virtual machine  can generate a response to the request and send the response through the system hardware  via the network  to the client .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1B","FIG. 1A"],"b":["120","120","150","151","152","153","154","155","140","150","150","130","155","153","152","152","132","155","120","110","130"]},"In one embodiment, the hypervisor  may be implemented as a software layer that runs directly on the hardware  intercepting some, or all, operating system calls to the hardware . In one embodiment, the hypervisor  virtualizes CPU and memory while a single privileged guest (commonly referred to as a host) is assigned to manage and virtualize network traffic and storage I\/O. That is, the host (one of the virtual machines ) is also tasked with performing as a management system for some aspects of the virtualized system. The host generally runs using a specially privileged kernel that can access hardware devices  and can create\/destroy virtual machines (guests). Thus, multiple virtual machines  (guests) running on the physical machine  share the system hardware , but are not generally aware of the system hardware  directly. Instead, the hypervisor (and host system)  provides a collection of virtual hardware for each virtual machine . For example, as shown in , each virtual machine includes a virtual CPU , a virtual memory , a virtual network interface , and virtual storage . Similarly, each virtual machine  runs an operating system (OS)  on the virtual hardware exposed by the hypervisor . Together, the virtual hardware and operating system  provide a virtualized computing platform for applications . Note, while these virtual hardware allocations appear distinct to the OS and applications running on each virtual machine , often they are either shared or contend for some shared resource below the virtualization layer. That is, the virtual resources provide an abstraction for the underlying physical resources\u2014and the underlying physical resources are shared among the virtual machines . Examples of this include a memory bus, L1\/L2 cache, and physical network interfaces (e.g., NIC ), etc.","As shown in , the feedback agent  is integrated with the hypervisor . In one embodiment, the hypervisor  may be configured to generate normalized availability information regarding the status and loads of each virtual machine  and provide this information to the load balancer . As a virtual machine monitor, the hypervisor  has access to performance metrics of each virtual machine . Further, as the hypervisor  runs directly on the system hardware , the hypervisor  also has access to performance metrics of the physical machine . Accordingly, the feedback agent  can monitor performance metrics of both the physical machine  and each virtual machine . Further, the feedback agent may report on the availability of a given virtual machine , taking into account both the availability of the physical machine  and the availability of the given virtual machine . That is, the feedback agent  running on the hypervisor  may provide the load balancer  with information regarding each virtual machine executing over hypervisor . However, because the hypervisor  can monitor actual loads on system hardware  as well as loads on the virtual devices, (e.g., virtual CPU ), the hypervisor can provide the load  balancer with more useful information about the status and loads being experienced on the virtual machines . In turn, this allows the load balancer  to make better balancing decisions when distributing work requests to a cluster of virtualized systems (i.e., to the virtual machines ).",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 1C","b":["180","141","110","180","110","130"]},"As shown, the method begins at step , where performance metrics of the system hardware  are monitored. In one embodiment, the performance metrics of the system hardware  may be obtained. For example API calls provided by the hypervisor  may be used to obtain load and status information such as (e.g., CPU loads, memory usage, I\/O operations, network congestion, etc.) regarding the system hardware .","Optionally, at step , the performance metrics of the system hardware  may be reported to the load balancer . In such a case, the feedback agent  running as part of the hypervisor  provides the load balancer  with a direct view of the system hardware  to allow better virtual environment management. For example, the feedback agent  can provide available network bandwidth of the physical machine  for related applications to avoid, e.g., oversubscription of the NIC.","At step , load and status information regarding the performance of individual virtual machines  may be monitored. The performance metrics of each virtual machine  may be obtained from the hypervisor . For example, the feedback agent  may invoke API calls provided by the hypervisor  to obtain load and status information (CPU loads, memory usage, I\/O operations, network congestion, etc.) related to the virtual hardware devices exposed to each virtual machine . In one embodiment, a migrating status of a virtual machine  being migrated from one physical system to another may also be monitored.","At step , the performance metrics of an individual virtual machine  is normalized to account for the performance metrics of the physical machine  on which the virtual machine  is running. The formula for generating normalized availability information can be customized according to the server applications and tasks running on the virtual machines . For example, a normalized availability of a virtual machine could be the lower of two availability metrics, the first calculated by the virtual machine based on session counts (i.e., requests assigned to that machine) and CPU utilization, and the second metric from the hypervisor could be used to account for memory bus utilization, network utilization and cache contention (which impacts data access times). In cases where a virtual machine is migrating form one physical host to another, the availability or load and status information of that machine may be set to a value that effectively represents a machine status of \u201cnot available.\u201d","For example, assume that a physical server has 8 GB RAM and a 2.0 GHz processor with two processing cores (resulting in \u02dc4 GHz processing power). One reasonable virtual server configuration is to provide 1 GB RAM to each virtual machine, allowing eight identical virtual servers to be configured. In such a case, then the weighted average of resources available to a server is 1 GB RAM (1\/8) and 512 MHz of processing power (4000 Mhz\/8). Note that this is a raw approximation only. Similarly, if the physical server has a 1 Gb network interface and there are 8 servers, each having 1 GB virtual network interface, then each server is in effect getting 1 Gb\/8=128 Mb link or about a 100 Mb throughput.","At step , the normalized availability information of each virtual machine  is sent to the load balancer . The normalized availability information may be sent using various load balancing protocols, such as DFP (dynamic feedback protocol) or KALAP (KeepAlive-Access Protocol), among others, and the normalized availability information may be packaged using such protocols, as appropriate for a particular load balancer .","In one embodiment, the load balancer  may not recognize that the virtualized systems are, in fact, virtualized. In such a case, the load balancer  may view each of the virtual machines  as an independent physical machine. However, as the load balancing information has been normalized prior to being sent to the load balancer , balancing decisions may be made based on the actual loads experienced by the physical systems underlying a given virtual machine. Alternatively, the normalized availability information of each virtual machine  running the hypervisor  is sent to the load balancer  individually. In such a case, the load balancer  may be configured to make load balancing determinations based on the feedback reported by each virtual machine individually as well as the feedback related to the overall performance on the server hosting the virtual machines.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2A","FIG. 1A"],"b":["200","100","200","210","220","230","210","230","220","210","221","230","230","230","210","237","230","210","230","250","220","230"]},"The load balancer  is configured to distribute tasks among virtual machines , based in part on the availability information and system loads reported by the virtual machines . As noted above, examples of availability information include central processing unit (CPU) loads, memory usage, network interface controller (NIC) usage, storage unit usage, etc. However, as the feedback agent  is motioning the virtual machine , the loads obtained typically relate to the loads on the virtual machine (e.g., the load on a virtual CPU), and thus may not reflect the actual loads and availability of an underlying system (or CPU) running multiple virtual machines .","As shown in , the load balancer  is connected to a network  which is connected with a plurality of clients . New requests  from the clients  are routed to the load balancer  via the network . The load balancer  forwards each new request to a server on an available virtual machine  according to the received available information.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 2B","FIG. 2A"],"b":["220","220","250","251","252","253","255","254","240","250","230","250","240","250","250"]},"As noted above, each virtual machine  runs its own operating system (OS)  on a virtual set of hardware exposed by the hypervisor. For example, as shown in , each virtual machine exposes a set of virtual hardware, such as a virtual CPU , virtual memory , a virtual NIC , and virtual storage devices . Illustratively, one or more applications  e.g., a set of web servers, application servers, database systems, etc.) are shown being executed by the OS  on the virtual hardware.","Additionally, the OS  on each virtual machine  is shown running a feedback agent . In one embodiment, the feedback agent  operates within each virtual machine  and provides the normalized availability information to the load balancer . The feedback agent  can query the hypervisor  to obtain performance metrics of the physical hardware  and query the OS  to obtain performance metrics of the virtual machine . The feedback agent  then generates a normalized the availability information of the virtual machine  from the performance metrics of both the physical machine  and the virtual machine . The feedback agent  then conveys the normalized availability information to the load balancer .","That is, the feedback agent  on a given virtual machine  monitors the resource loads on that virtual machine  and reports this information back to the load balancer . However, rather than simply report the load and status data of virtual system components (e.g., by reporting that a virtual CPU is under a 50% load), which could result in misleading information being provided to the load balancer , each feedback agent  may normalize the load and status data to reflect what is occurring on the system as whole.","For example, if three virtual machines  are each running a virtual CPU load at roughly %50\u2014the overall load on the underlying physical machine might be at (or near) peak capacity. In such a case, if the load balancer  is unaware of the system virtualization, it might make load balancing decisions to send requests to each virtual server\u2014resulting in an overloaded physical system. Instead, to complete this example, the feedback agent  on each of the three virtual machines may normalize the load and status information, resulting in higher loads being reported to the load balancer  than was actually observed by the feedback agent  on any of the virtual machines  individually. In on embodiment, the feedback agent  may use API calls supported by the hypervisor  to obtain a more accurate picture of the loads on the physical machine  in order to normalize loads reported the loads on the respective virtual machine .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 2C","b":["280","230","220","280","230","282","230","250","250","240","230","284","237","230","230","235","230"]},"At step , the performance metrics of the virtual machine  are modified by the performance metrics of the physical machine  on which the virtual machine  is executing to generate normalized availability information. The formula for generating normalized availability information can be customized according to applications of the virtual environment.","At step , the normalized availability information of the virtual machine  is sent to the load balancer . As noted above, the normalized availability information may be sent using a variety of load balancing protocols, (such as DFP (dynamic feedback protocol), KALAP, among others.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 3","FIG. 1A","FIG. 2A"],"b":["300","300","110","210"]},"At step , a new request is received by the load balancer. The request may be related to any service that is distributable among applications on the virtual machines and\/or physical machines connected to the load balancer, such as, e.g., a request for a web server or a query for a database. In one embodiment, the new request may be received from a network connected to the load balancer.","At step , the load balancer evaluates availability information of a virtual machines and\/or physical machines connected in the system. In one embodiment, the load balancer does not distinguish virtual machines from physical machines. The availability information is provided by a feedback agent in each virtual\/physical machine, or by a feedback agent within a hypervisor for virtual machines. In one embodiment, the availability information for virtual machines is normalized to account for both the performance metrics of the virtual hardware seen by the virtual machine and the performance metrics of the physical hardware on which the virtual machine is ran.","At step , the load balancer selects a target machine among the virtual machines and\/or the physical machines. In one embodiment, the virtual machine\/physical machine with the most available resources associated with the request is selected to be the target machine.","At step , the load balancer distributes the new request to the target machine. For example, the load balancer may forward the request to a sever application running on the selected virtual machine, i.e., to a port and IP address assigned to the selected virtual machine.","While the foregoing is directed to embodiments of the present disclosure, other and further embodiments of the disclosure may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features of the present disclosure can be understood in detail, a more particular description of the disclosure, briefly summarized above, may be had by reference to embodiments, some of which are illustrated in the appended drawings. It is to be noted, however, that the appended drawings illustrate only typical embodiments of this disclosure and are therefore not to be considered limiting of its scope, for the disclosure may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 1B","FIG. 1A"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
