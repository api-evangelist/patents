---
title: Controlling the creation of process instances in workflow management systems
abstract: The present invention relates to a technique for controlling the creation of process instances within an execution environment such as a Workflow Management System. Upon receiving a request to create a process instance and corresponding input data to be processed by the process instance, a process instance identifier is first constructed for the process instance to be created based on the provided input. Next, the create request is executed, but only if no process instance exists or existed with the same process instance identifier. In the case where a process instance already exists or existed with the same process instance identifier, the present invention permits a user-defined action to be carried out to avoid an identifier conflict.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719215&OS=08719215&RS=08719215
owner: International Business Machines Corporation
number: 08719215
owner_city: Armonk
owner_country: US
publication_date: 20020124
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Field of the Invention","The present invention relates to a technique for improving the robustness and ease-of-use of Workflow Management Systems (WFMS) or a computer system with comparable functionality related to the creation of process instances from process models.","2. Description of the Related Art","A new area of technology with increasing importance is the domain of Workflow Management Systems (WFMS). WFMS support the modeling and execution of business processes. Business processes executed within a Workflow Management System environment control who will perform which piece of work from a network of pieces of work and which resources are exploited for this work. The individual pieces of work might be distributed across a multitude of different computer systems connected by some type of network.","The product \u201cIBM MQSeries Workflow\u201d (previously called IBM FlowMark) from International Business Machines Corp. (IBM) represents such a typical modern, sophisticated, and powerful workflow management system. IBM and MQSeries are trademarks of IBM. This product supports the modeling of business processes as a network of activities. This network of activities, the process model, is constructed as a directed, acyclic, weighted, colored graph. The nodes of the graph represent the activities which are performed. The edges of the graph, the control connectors, describe the potential sequence of execution of the activities. Definition of the process graph is via IBM MQSeries Workflow's Flow Definition Language (FDL) or via the built-in graphical editor.","The runtime component of the Workflow Management System uses the process model as a template to create process instances. Each process instance is associated with a set of values, typically called the context. The values are either supplied by the requester of the process instance via the appropriate request or retrieved by programs that implement the various activities. A particular important piece of information within the context is the process instance identifier that uniquely identifies a process instance. It should be noted that typically process instance identifiers are only unique within the set of process instances that are derived from a particular process model.","The creation of a process instance is initiated by an appropriate request being made to the Workflow Management System. Many options exist for requesters to initiate the request. Typical examples include putting a message into a queue, the sending of e-mail to a particular address, the issue of an HTTP post request to a URL, or the invocation of a function of the application programming interface offered by the workflow management system. The requester could be any type of program or human interacting with the system directly; it could even be the workflow management system itself. Typically, the request has data (also part of the context) associated with it that allows the requester to immediately provide information for the process instance context.","The process instance identifier is either generated by the Workflow Management System or supplied by the requester of the process instance. Both state of the art approaches have significant disadvantages.","When the Workflow Management System generates the process instance identifier, every request to create a process instance automatically results in the creation of a process instance. Thus, if the same request is carried out twice (or in general multiple times), two process instances are created. Carrying out the same request twice could happen as the result of many different situations. One such situation involves a user interacting with the Workflow Management System via a business application accidentally starting the same request twice. For instance, clerks unconsciously repeat a certain business process for a certain set of input data multiple times not knowing or not remembering that it has been processed already.","Another such situation involves a request sent via unreliable e-mail being carried out twice. This situation can happen, for example, if the computer system on which the Workflow Management System is running and to which the e-mail was sent crashes. In this case, it can happen that the e-mail has disappeared from one of the involved systems but not from the other. Thus, it is unclear whether the e-mail was processed or not. The usual solution to this situation is to reprocess the e-mail again, with the undesirable result that the same business process processes the same input data multiple times.","The other state of the art approach, in which the requester needs to generate the process instance identifier, also has significant disadvantages. In particular, one disadvantage is if there is more than one requester creating process instances, which in general is the typical situation. In this case, requesters must not use the same process instance identifier. Thus, requesters must share some common method to obtain unique process instance identifiers. This requires, for example, that any newly added requester implements the common method. In other words, the requests have to check against one another to exploit the same approach for creating process instance identifiers. This becomes very quickly an administrative and program development nightmare.","The weakness of the state of the art approaches with respect to this problem area becomes even more distinct if one thinks of typical Internet scenarios commonly summarized by terms like C2B (Consumer-to-Business) or B2B (Business-to-Consumer) business processes. In these scenarios, it is obvious that neither can the requester generate the process instance identifier nor can it be guaranteed that a request is issued only once and only once.","The objective of the invention is to eliminate the risk of creating duplicate process instances for business processes created and managed by a Workflow Management System.","The objectives of the invention are solved by the independent claims. Further advantageous arrangements and embodiments of the invention are set forth in the respective subclaims.","The present invention relates to a method and to a system for controlling the creation of process instances within an execution environment. Upon receiving a request to create a process instance and corresponding input data to be processed by said process instance, the method and corresponding system in a first step constructs a process instance identifier for said process instance to be created based on the provided input data. In a second step the method and corresponding system is executing said create request only, if no process instance exists or existed in the past with said process instance identifier. In the case, that that particular process instance already exists or existed in the past with said process instance identifier, the present invention optionally proposes to have some user-defined action to be carried out.","The suggested approach eliminates the possibility that multiple process instances are created representing the same create request. In addition, the support of an action to be taken if a process instance with the new process instance identifier exists already, provides, for example, for the notification of appropriate service personnel to take appropriate actions.","In the drawings and specification there has been set forth a preferred embodiment of the invention and, although specific terms are used, the description thus given uses terminology in a generic and descriptive sense only and not for purposes of limitation. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims.","The present invention can be realized in hardware, software, or a combination of hardware and software. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software could be a general-purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein. The present invention can also be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which, when being loaded in a computer system, is able to carry out these methods.","Computer program means or computer program in the present context mean any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of (a) conversion to another language, code or notation, and\/or (b) reproduction in a different material form.","The current invention is illustrated based on IBM's \u201cMQSeries Workflow\u201d workflow management system. Of course, any other WFMS could be used instead. Furthermore the current teaching applies also to any other type of system, which offers WFMS functionalities not as a separate WFMS but within some other type of system.","Though the created requests of the following examples are processed by the WFMS engine this should not be understood as a limitation. The current invention can be applied in other scenarios wherein the processing entity of the create command is not the WFMS engine itself.","The following is a short outline on the basic concepts of a workflow management system based on IBM's \u201cMQSeries Workflow\u201d WFMS.","From an enterprise point of view, the management of business processes is becoming increasingly important. Business processes, or process for short, control which piece of work will be performed by whom and which resources are exploited for this work. That is, a business process describes how an enterprise will achieve its business goals. A WFMS may support both the modeling of business processes and their execution.","Modeling of a business process as a syntactical unit in a way that is directly supported by a software system is extremely desirable. Moreover, the software system can also work as an interpreter basically getting as input such a model. The model, called a process model or workflow model, can then be instantiated and the individual sequence of work steps depending on the context of the instantiation of the model can be determined. Such a model of a business process can be perceived as a template for a class of similar processes performed within an enterprise. The model is a schema describing all possible execution variants of a particular kind of business process. An instance of such a model and its interpretation represents an individual process, i.e., a concrete, context dependent execution of a variant prescribed by the model. A WFMS facilitates the management of business processes. The WFMS provides a means to describe models of business processes (buildtime) and it drives business processes based on an associated model (runtime). The meta model of IBM's WFMS MQSeries Workflow, i.e., the syntactical elements provided for describing business process models, and the meaning and interpretation of these syntactical elements, is described next.","A process model is a complete representation of a process, comprising a process diagram and the settings that define the logic behind the components of the diagram. Important components of a MQSeries Workflow process model are: Processes; Activities; Blocks; Control Flows; Connectors; Data Containers; Data Structures; Conditions; Programs; and Staff.","Not all of these elements will be described below.","Activities are the fundamental elements of the meta model. An activity represents a business action that is from a certain perspective a semantic entity of its own.","An MQSeries Workflow process model consists of a number of types of activities. A program activity has a program assigned to perform it. The program is invoked when the activity is started. In a fully automated workflow, the program performs the activity without human intervention. Otherwise, the user must start the activity by selecting it from a runtime work list. Output from the program can be used in the exit condition for the program activity and for the transition conditions to other activities. A process activity has a process or subprocess assigned to perform it. The process is invoked when the activity is started. A process activity represents a way to reuse a set of activities that is common to different processes. Output from the process can be used in the exit condition for the process activity and for the transition conditions to other activities.","The flow of control, i.e., the control flow through a running process, determines the sequence in which activities are executed. The MQSeries Workflow workflow manager navigates a path through the process that is determined by the evaluation to TRUE of start conditions, exit conditions, and transition conditions.","Connectors link activities in a process model. Using connectors, one defines the sequence of activities and the transmission of data between activities. Since activities might not be executed arbitrarily they are bound together via control connectors. A control connector might be perceived as a directed edge between two activities. The activity at the connector's end point cannot start before the activity at the start point of the connector has finished (successfully). Thus, control connectors model the potential flow of control within a business process model. Default connectors specify where control should flow when the transition condition of no other control connector leaving an activity evaluates to TRUE. Default connectors enable the workflow model to cope with exceptional events. Data connectors specify the flow of data in a workflow model. A data connector originates from an activity or a block, and has an activity or a block as its target. One can specify that output data is to go to one target or to multiple targets. A target can have more than one incoming data connector.","Process definition includes modeling of activities, control connectors between the activities, input\/output container, and data connectors. A process is represented as a directed acyclic graph with the activities as nodes and the control\/data connectors as the edges of the graph. The graph is manipulated via a built-in graphic editor. The data containers are specified as named data structures. These data structures themselves are specified via the Data Structure Definition facility. Program activities are implemented through programs. The programs are registered via the Program Definition facility. Blocks contain the same constructs as processes, such as activities, control connectors etc. They are however not named and have their own exit condition. If the exit condition is not met, the block is started again. The block thus implements a Do Until construct. Process activities are implemented as processes. These subprocesses are defined separately as regular, named processes with all its usual properties. Process activities offer great flexibility for process definition. It not only allows to construct a process through permanent refinement of activities into program and process activities (top-down), but also to build a process out of a set of existing processes (bottom-up).","All programs, which implement program activities, are defined via the Program Registration Facility. Registered for each program is the name of the program, its location, and the invocation string. The invocation string consists of the program name and the command string passed to the program.","As an example of such a process model,  shows schematically the structure of such a process graph. Activities (A up to A) are represented as named circles. The name typically describes the purpose of the activity. Activities come in various flavors to address the different tasks that may need to be performed. They may have different activity implementations to meet these diverse needs. Program activities are performed by an assigned program, process activities like for instance  are performed by another process , and blocks like for instance  implement a macro  with a built-in do-until loop.","Control connectors p, p, p, p, p are represented as arrows. The head of the arrow describes the direction in which the flow of control is moving through the process. The activity where the control connector starts is called the source activity; where it ends is called the target activity. When more than one control connector leaves an activity, this indicates potentially parallel work.","Process States","A process instance occupies various states when it is carried out by the Workflow Management System.  illustrates those states exemplary. It should be noted that this for illustration purpose only, as Workflow Management Systems typically differentiate between many more states.","The first step a particular process instance goes through is that it is created by taking the appropriate process template (process model), possibly populating it with supplied context data, and assigning it a unique process instance identifier. This step is carried out as the result of invoking the Workflow Management System's CREATE function. As a result of function completion, the process instance is put into the state created .","When the process instance is being carried out, that means the Workflow Management System navigates through the process graph and executes the individual activities. The process is in the state running . The business process is typically put into this state by a client issuing a START control command. Other possibilities are that the business process is automatically started by the Workflow Management System at a time specified when the business process is created, or a combination of a CREATE and START control command.","When all necessary activities of the process instance have been carried out, the process goes into the state finished . No further activities are carried out for the process instance. However, all information about the process instance is still available and can, for example, be queried. Some Workflow Management Systems still allow operations on finished process instances, such as restarting the process instance at the beginning or even in the middle of the process instance.","No further actions can be carried out if the process instance is in the state deleted .","The state suspended  is entered as the result of entering the SUSPEND function by issuing a corresponding control command. In this state, the Workflow Management System stops navigation until a user via the RESUME control command requests continuation.","A process instance enters the state terminated  as the result of the TERMINATE control command, which causes the Workflow Management System to stop processing the process instance.","Controlling the Creation of Process Instances",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3"},"The DATASTRUCTURE definition  identifies a data structure with the name OrderProcessInput  that consists of two members, a first member ISBN of data type STRING  and a second member CUSTOMER_ID of data type STRING . This data structure defines the input parameters (that is, the input container) of the business process as apparent from the interface definition  of the process BookOrder .","The PROGRAM definition  declares a program with the name SendEMail  which accepts the two fields CUSTOMER_ID and ISBN. For simplification, no further definitions, such as the actual implementation of the program, is provided.","The PROCESS definition  defines a process model with the name BookOrder, which accepts the previously defined data structure OrderProcessInput . That means, when a process instance is created via the appropriate request, the requester can (in fact should) specify concrete values for the fields in the data structure. These include a value for the field ISBN and a value for the field CUSTOMER_ID. The IDENTIFIER keyword  is used to specify how the process instance identifier is to be constructed. In this case, it is constructed by combining the values of the fields CUSTOMER_ID and ISBN.","In the specific example of , all parameters of the input container  are used to create the process instance identifier. In a certain sense, this is an extreme example as the IDENTIFIER specification supports the use any subset of the parameters within the input container for constructing the process instance identifier. It would even be possible to include in the IDENTIFIER specification parameters, which are not comprised by the input container, their corresponding values being provided from other sources.","Finally, the process instance identifier can be viewed as a concatenation of the concrete values of the parameters specified within the IDENTIFIER section of the process model's FDL. In a further embodiment of the current invention the name of the process (BookOrder in the current example) could automatically and implicitly be made part of the process instance identifier. This guarantees uniqueness of the process instance identifier not only within the set of process instances derived from a particular process model but within all process instances independently from the particular process model.","The keyword MANDATORY  is used to indicate that the requester must supply values for the specified fields. This is necessary to make sure that the Workflow Management System does not generate a process instance identifier which is meaningless, such as an empty process instance identifier. In other words, the parameters comprised within the MANDATORY specification defines the \u201cMinimum\u201d components whose values making up the process instance identifier.","At runtime, the specifications regarding the construction of the process instance identifier are used by the WFMS in the following manner.","First, it is checked whether concrete values have been specified by a requester for the parameters as specified in the MANDATORY section  of the process model's FDL. Without concrete values for all of the mandatory parameters, no unique process instance can be created and therefore the corresponding request for creating a process instance will be rejected.","If values for the mandatory parameters have been specified with the process instance creation request, a process instance identifier is constructed according to the definition specification in the IDENTIFIER section  (optionally comprising the process name as part of the process instance identifier). The WFMS will then check whether a process instance with that process instance identifier exists already (or has existed and was executed in the past). A new process instance for that process model will be created by the WFMS only if that has not been the case according to that check, thus establishing a \u201conce and only once\u201d execution scheme.","If a process instance with this process instance identifier exists already, the action specified via the DUPLICATE keyword  is being carried out. In this case, the action is invocation of the program SendEMail with the two fields as parameters. Thus based on the DUPLICATE keyword a kind of error handling is established. In the example illustrated in , the error handling consists of an e-mail notification regarding the duplicate creation request for the identical business process.","In a further embodiment of the current invention, those specifications comprised by the IDENTIFIER keyword, the DUPLICATE keyword or the MANDATORY keyword may also be specified with the request to create a certain process instance in addition to the actual input data to be processed by the process instance. Such an approach allows for a highly dynamically manner of creating process instance identifiers and controlling the creation of process instances."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
