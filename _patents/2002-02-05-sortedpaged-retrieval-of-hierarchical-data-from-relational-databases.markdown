---
title: Sorted-paged retrieval of hierarchical data from relational databases
abstract: A method for sorted-paged retrieval of hierarchical data from a relational database is disclosed, which includes the use of one or more relational table equi-join terms in a query to increase the retrieval efficiency, suitable restrictions imposed on the join terms to further increase the retrieval efficiency, partial de-normalization or replication of information to improve the efficiency of the join operation(s) and thus further increase the retrieval efficiency, and proper cursor management to keep track of the current location of the cursor(s) involved. As a result, specific pages of objects can be efficiently retrieved from a database, while the specified sort orders and restrictions imposed by the original retrieval requests can be maintained.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06898593&OS=06898593&RS=06898593
owner: i2 Technologies US, Inc.
number: 06898593
owner_city: Dallas
owner_country: US
publication_date: 20020205
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application claims the benefit, under 35 U.S.C. \u00a7 119(e), of U.S. Provisional Application Ser. No. 60\/304,534, filed Jul. 10, 2001.","The present invention relates in general to electronic commerce and database management and, in particular, but not exclusively, to a high performance sorted-paging technique for retrieving hierarchical data such as, for example, business objects from relational databases.","The use of object-oriented programming languages, such as C++, SMALLTALK\u2122, JAVA\u2122, and OBJECT PASCAL\u2122, has allowed system designers and programmers to significantly increase the design flexibility and performance of business applications in electronic commerce environments. Object-oriented programming languages allow programmers to define the data type of a data structure, and the types of operations that can be applied to the data structure. As a result, the data structure becomes an \u201cobject\u201d, which is a self-contained entity including both data and procedures (e.g., code) to manipulate the data.","A business object is an object that is modeled from a business concept, such as, for example, a business person, place, event, or process. As such, business objects can be created to represent actual business entities, such as products, purchase orders, invoices, payments, customers, suppliers, employees, etc. Business objects are scalable and can be used in various configurations and at multiple levels. By taking advantage of object-oriented technologies, business objects can be used to develop and customize business applications.","A relational database is a database organized as a collection of tables. Each table includes a set of columns and rows. The tables in a relational database can be related to each other by using the same value in a link field (e.g., referred to as a key field or foreign key field). Business objects (e.g., Purchase Orders, Advance Shipping Notices, Invoices, etc.) are hierarchical in nature. For example, a typical Purchase Order contains multiple line items, and each of the line items contains multiple schedules. Furthermore, each of the schedules contains a request, which in turn, can contain multiple promises. Consequently, when a hierarchical object (e.g., Purchase Order) is retrieved from a relational database, all of this information stored in the related tables has to be retrieved.","For example, using a typical Business-to-Business (B2B) collaborative software application, a user may login to the application and enter a search request for all Purchase Orders that were created within a certain date range. The results of such a search may not be scalable (e.g., deployable in various configurations from one-tier to n-tiers) if all of the Purchase Orders identified by the search are retrieved and displayed to the user, because the number of Purchase Orders retrieved can be very large (e.g., hundreds), and the Purchase Orders themselves can include a large amount of information. Consequently, in typical multi-user environments operating under heavy load conditions, the existing techniques used to retrieve hierarchical business objects can excessively stress the database servers, systems and networks involved. Accordingly, a pressing need exists for a retrieval technique that can retrieve hierarchical data from a relational database and is significantly more efficient than previous retrieval techniques.","According to the present invention, disadvantages and problems associated with previous retrieval techniques may be reduced or eliminated.","According to one example embodiment of the present invention, a method for sorted-paged retrieval of hierarchical data from a relational database includes the use of one or more relational table equi-join terms in a query to increase the retrieval efficiency, suitable restrictions imposed on the join terms to further increase the retrieval efficiency, partial de-normalization or partial replication of information to improve the efficiency of the join operation(s) and thus further increase the retrieval efficiency, and proper cursor management to keep track of the current location of the cursor(s) involved. As a result, the present invention can efficiently retrieve specific pages of objects from a database, while maintaining the specified sort orders and restrictions imposed by the original retrieval requests.","Certain embodiments of the present invention may provide one or more technical advantages over previous techniques. For example, the present invention may be used to efficiently retrieve specific pages of objects from a relational database and also maintain a specified sort order and the restrictions imposed, without needing to use dynamic cursors and incurring their associated overhead. As such, the present invention may be used for search screens or displays, whereby a user can determine the number of objects to be retrieved at a time (e.g., objects per page), the search criteria to use, and the sort order for displaying the search results. As such, the present invention may allow users to move forward or backward readily to specific pages of data. The present invention may thereby provide high performance screens to users for viewing business objects and relatively short development times for implementing such screens, which can significantly increase the feasibility of rap-d development of scalable applications, and reduce the time to market for the products involved. As such, systems and methods incorporating one or more of these or other advantages may be well suited for commercial environments, such as those associated with Internet-accessible websites or electronic marketplaces. Other technical advantages of the present invention will be readily apparent to one skilled in the art from the figures, description and claims included herein.","The preferred embodiment of the present invention and its advantages are best understood by referring to  of the drawings, like numerals being used for like and corresponding parts of the various drawings.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["10","10","12","14","16","12","14","16","12","12","14","16","16","18","20","20","14","18","22","14","18","20","22","12","14","12","14","12","14","12","14","20","22"]},"Buyers  can be any suitable entities that access matching server , either autonomously or relying on input from associated persons, to discover information concerning one or more available items in connection with a purchase or other activity. Sellers  can be any suitable entities that provide information to matching server  concerning the available items. As such, buyers , sellers , and matching server  can be coupled to one another using links . For example, links  can include one or more local area networks (LANs), metropolitan area networks (MANs), wide area networks (WANs), at least a portion of a global network such as the Internet, or any other suitable wireline, optical, wireless, or other type of link. In one aspect of this embodiment, matching server  can be associated with an electronic B2B marketplace that facilitates B2B transactions between buyers  and sellers  over the Internet using one or more links . Although matching server  is described herein primarily for illustrative purposes, as separate from buyers  and sellers , matching server  can share one or more computer resources or other appropriate resources with one or more buyers  and\/or sellers  according to particularized needs.","A search request can be generated for any suitable purpose. In the database management systems (DBMS) field, a query is one such type of search request. A query is a database language expression that describes the data to be retrieved from a database, such as catalog database  or offers database . For example, a query can be expressed in Structured Query Language (SQL) form, or in any other suitable form. For one example embodiment, queries expressed in SQL form are primarily described herein, but the present invention also contemplates any appropriate query, search request, or other representation that can be used to quickly express the needs of buyer  or seller  in terms of matching criteria.","For example, a buyer  may be a consumer who constructs and submits a query to a shopping \u201cbot\u201d associated with the matching server  to determine availability, pricing, or other information concerning a retail product that the consumer is interested in purchasing. Alternatively, a buyer  may be a procurement manager or autonomous procurement process within an organization that constructs and submits queries concerning parts needed to manufacture products or concerning any other tangible or intangible items. As still another alternative, a buyer  may generate and submit queries during negotiations with one or more sellers , which are mediated by matching server . In response, the matching engine  of matching server  returns data matching the input values.","In accordance with one example embodiment of the present invention, objects having hierarchical structures (e.g., Purchase Orders, Advance Shipping Notices, Invoices, etc.) may be mapped to multiple tables in a relational database (e.g., database  or ). Preferably, these objects can have a one-to-one relationship with the database tables. Consequently, the database tables can have a parent-child relationship which is similar to that of the hierarchical objects involved.","In accordance with one example embodiment of the present invention, a method for sorted-paged retrieval of hierarchical data from a relational database includes the use of one or more relational table equi-join terms in a query to increase the retrieval efficiency, suitable restrictions imposed on the join terms to further increase retrieval efficiency, partial de-normalization or partial replication of information to improve the efficiency of the join operation(s) and thus further increase the retrieval efficiency, and proper cursor management to keep track of the current location of the cursor(s) involved. As a result, the present invention can efficiently retrieve specific pages of objects from a database, while maintaining the specified sort orders and restrictions imposed by the original retrieval requests.","For example, when a hierarchical object (e.g., Purchase Order, Advance Shipping Notice, Invoice, etc.) is to be retrieved from a relational database, a \u201cjoin\u201d query (e.g., an operation that matches rows from one table to another using one or more column values) may be executed for all tables to which the hierarchical object is mapped (and from which the object of interest is to be constructed). Notably, using such a join query facilitates the introduction of a Surrogate Cursor Id on the driving table (e.g., lowest level, inner join table in the hierarchy involved). Additionally, in order to improve the efficiency of the join operation to be performed, the join operation may be combined with suitable restrictions.","For example, during the performance of a join operation for retrieval, the columns most frequently restricted may be partially de-normalized (e.g., column information replicated) into the driving table. As such, the Surrogate Cursor Id created on the driving table can be unique within the scope of the driving table, and can include a sequence of increasing values as the new objects are inserted into the driving table. A User Interface (UI) or other suitable client resource can maintain the current value of the Surrogate Cursor Id (which is the value of the Surrogate Id on the last object received), along with the sort order column, and the minimum or maximum value of the sorted column (e.g., for a descending or ascending sort, respectively).","For each request entered from a client for a page of objects to be retrieved, the UI (or other client resource) can include the Surrogate Cursor Id information, sort order column information, and the minimum or maximum value information for the sorted column, in addition to the page size information required by the UI (or other client resource). A retrieval Application Programming Interface (API) can be used to view the Surrogate Cursor's properties, and retrieve from the relational database (e.g.,  or ) the exact page size of objects (e.g., 50 objects per page) using the Cursor Id and the current minimum or maximum values for the sorted column as a reference. The API can then return the retrieved page of objects to the client (e.g., for display with a suitable screen).","In accordance with the present invention, the terms \u201cpage\u201d or \u201cpaging\u201d can mean an ability to retrieve enough composite top-most level objects in a hierarchy, so that these objects together can include a fixed number of the lowest level objects (e.g., thus defining the page size). Typically, most UI and client systems can display and process data based on the number of lowest level objects in the hierarchy being received. Since a composite object can be very large, many high performance screens typically perform paging based on the lowest level object involved. For example, a typical Purchase Order can include 100 line items, and each line item can include 100 schedules. Consequently, in retrieving Purchase Orders or similar information from a relational database, it is useful for a UI to display the retrieved information in a tree structure or de-normalized structure to a user, but preferably with only 50 schedules at a time (e.g., 50 objects per page).","As such, in accordance with the present invention, a user may be shown a fixed number of retrieved objects (e.g., a page including 50 lines of Purchase Order objects) on a screen at a time. The user may then be allowed to navigate to the next 50 objects (e.g., a second page) or return to any other page of objects as desired. Also, the user may elect to view retrieved business objects sorted in accordance with specific criteria selected by the user. For example, a user may desire to display Purchase Order objects sorted by their creation dates, etc.","For one example embodiment of the present invention, in order to improve the efficiency and scalability of the information retrieval process, join operations can be performed to fetch hierarchical objects stored in the relational database. The join operations can return a de-normalized or replicated view of a new object that is constructed from the original object that was stored. As such, the join operations can reduce network overhead substantially, by reducing the number of database roundtrips required to retrieve all of the objects involved, and also providing single points that can be useful for fine-tuning the queries and retrievals.","Partial de-normalization of the retrieved objects can provide substantially higher performance than previous techniques for the join operations performed, because by using de-normalization, the most frequently searched entities in a hierarchical business object can be copied down to the lowest level in the relational table hierarchy. Also, most of the restrictions imposed on the join operations are for the lowest level table of the hierarchy. As a result, the lowest level table in the hierarchy can become the driving table in such a join operation. Also, as mentioned above, the lowest level table of the hierarchy can be heavily restricted and thus overloaded. Consequently, there are relatively few tuples (e.g., records in a relational database) formed in the Cartesian product of the tables that are rejected during the join operation. Therefore, the advantages of de-normalization or replication of information down to the lowest level table in the hierarchy more than outweigh any overhead or simple housekeeping tasks associated with replicating the most frequently searched entities.","For example, as mentioned earlier, a typical Purchase Order can include a plurality of line items, each line item can include a plurality of schedules, and each schedule can include a request and, possibly, a plurality of promises. An object representing such a Purchase Order can be mapped to four tables, such as, for example, a HEADER table, LINE_ITEM table, REQUEST_SCHEDULE table, and PROMISE_SCHEDULE table. As such, a typical Purchase Order may or may not include a promise schedule. However, a typical Purchase Order should include at least one line item, and each line item should include at least one request schedule (e.g., in order to consider that Purchase Order for retrieval) Accordingly, for the above-described example, a REQUEST_SCHEDULE can be the Purchase Order element most suitable for partial de-normalization. Note that although a PROMISE_SCHEDULE is below a REQUEST_SCHEDULE in the hierarchy of a typical Purchase Order, a PROMISE_SCHEDULE is not a mandatory element of a typical Purchase Order and, consequently, should not be used for a driving table during a join operation.","In order to implement de-normalization (e.g., replication of the stored objects) for the above-described example, the most preferable search restrictions to be imposed on a typical Purchase Order object are the PO_NUMBER, CUSTOMER_NAME, SUPPLIER_NAME (residing in the HEADER table), ITEM_NAME, ITEM_CATALOG_DOMAIN (residing in the LINE_ITEM table), REQUEST_QUANTITY, REQUEST_DATE, and REQUEST_LOCATION (residing in the REQUEST_SCHEDULE table). Prior to performing de-normalization (e.g. if a DB2\u00ae database system is being used), an example of a structure for a join query that can be used for retrieving Purchase Order information (e.g., to fetch a page subsequent to the page being viewed) from a relational database is as follows:",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SELECT"},{"entry":"HEADER.PO_NUMBER, HEADER.CUSTOMER_NAME, . . . (other"},{"entry":"HEADER columns)"},{"entry":"LINE_ITEM.ITEM_NAME, LINE_ITEM.CATALOG_DOMAIN,"},{"entry":". . . (other LINE_ITEM columns)"},{"entry":"REQUEST_SCHEDULE.REQUEST_QUANTITY, . . . (other"},{"entry":"REQUEST_SCHEDULE columns)"},{"entry":"FROM"},{"entry":"HEADER, LINE_ITEM, REQUEST_SCHEDULE,"},{"entry":"PROMISE_SCHEDULE"},{"entry":"WHERE"},{"entry":"HEADER.PO_ID = LINE_ITEM.PO_ID"},{"entry":". . . (Other join conditions)"},{"entry":"AND"},{"entry":"HEADER.CUSTOMER_NAME=\u2018Customer1\u2019"},{"entry":"AND"},{"entry":"LINE_ITEM.ITEM_NAME=\u2018Golf Caps\u2019"},{"entry":"AND("},{"entry":"HEADER.PO_NUMBER > \u2018PO_50\u2019 OR \/* Current Sort column"},{"entry":"value at cursor location*\/"},{"entry":"(REQUEST_SCHEDULE.CURSOR_ID > 12345 \/* Cursor Id*\/"},{"entry":"AND"},{"entry":"HEADER.PO_NUMBER == \u2018PO50\u2019)"},{"entry":")"},{"entry":"FETCH FIRST 50 ROWS ONLY \/* Fetch the next 50 *\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(For Oracle database, \u201cROWNUM < 51\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ORDER BY"},{"entry":"PO_NUMBER, CURSOR_ID"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In the above-described query (prior to de-normalization), the restrictions imposed on that example search can be spread across three tables, namely a HEADER table, LINE_ITEM table, and REQUEST_SCHEDULE table. As a result, the processing of the search query can be much more intensive for the database used, because there can be many other tuples that are rejected. Also, note that it is technically possible to perform a sort merge operation during such a join operation. However, for the above-described example, performance of a sort merge operation with the join operation is not considered the best approach to follow. As such, there may be 0 or more rows fetched from a PROMISE_SCHEDULE table, because such a join operation is an outer join.","In order to optimize the above-described Purchase Order search query (e.g., made prior to partial de-normalization), another query can be made subsequent to partial de-normalization. For example, a second query can be created (for optimization purposes) by changing the original query (described above) to read as follows:",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SELECT"},{"entry":"HEADER.PO_NUMBER, HEADER.CUSTOMER_NAME, . . . (other"},{"entry":"HEADER COLUMNS)"},{"entry":"LINE_ITEM,ITEM_NAME, LINE_ITEM.CATALOG_DOMAIN,"},{"entry":". . . (other LINE_ITEM columns)"},{"entry":"REQUEST_SCHEDULE.REQUEST_QUANTITY, . . . (other"},{"entry":"REQUEST_SCHEDULE columns)"},{"entry":"FROM"},{"entry":"REQUEST_SCHEDULE, HEADER, LINE_ITEM,"},{"entry":"PROMISE_SCHEDULE \/* Request Schedule is the driving"},{"entry":"table *\/"},{"entry":"WHERE"},{"entry":"HEADER.PO_ID = LINE_ITEM.PO_ID"},{"entry":". . . (Other join conditions)"},{"entry":"AND"},{"entry":"REQUEST_SCHEDULE.CUSTOMER_NAME=\u2018Customer1\u2019 \/*"},{"entry":"Instead of applying to HEADER *\/"},{"entry":"AND"},{"entry":"REQUEST_SCHEDULE.ITEM_NAME=\u2018Golf Caps\u2019 \/* Instead of"},{"entry":"applying to LINE_ITEM *\/"},{"entry":"AND("},{"entry":"REQUEST_SCHEDULE.PO_NUMBER > \u2018PO50\u2019 OR \/* Current"},{"entry":"Sort column value at cursor location *\/"},{"entry":"(REQUEST_SCHEDULE.CURSOR_ID > 12345 \/* Cursar Id*\/"},{"entry":"AND"},{"entry":"REQUEST_SCHEDULE.PO_NUMBER == \u2018PO50\u2019)"},{"entry":")"},{"entry":"AND"},{"entry":"FETCH FIRST 50 ROWS ONLY \/* Fetch the next 50 *\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(For Oracle database, \u201cROWNUM < 51\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ORDER BY"},{"entry":"PO_NUMBER, CURSOR_ID"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"As illustrated by the above-described example Purchase Order retrieval query (e.g., after partial de-normalization), all of the restrictions (e.g., including a cursor restriction) are preferably imposed on the REQUEST_SCHEDULE table (e.g., lowest level table in hierarchy). Also, the database system involved can be instructed to fetch 50 rows of Purchase Order objects or information (e.g., 50 objects a page). In this example, the REQUEST_SCHEDULE table is preferably the driving table in the join operation. As such, the database server can fetch 50 rows from the driving table (e.g., REQUEST_SCHEDULE table) and then fetch 50 rows from each of the LINE_ITEM and HEADER tables using, for example, a conventional primary key lookup operation. As a result, the join operation thus performed has formed a nested loop join, which can be scalable as long as the number of rows of information being fetched is known in advance.","Essentially, as described above, using partial de-normalization for a retrieval query, the present invention advantageously provides additional scope for a database server to optimize the fetch operation. Note, for the above-described example, that there can be 0 or more rows fetched from a PROMISE_SCHEDULE table, because it evolves from an outer join. Actual performance evaluations using partial de-normalization for Purchase Order retrieval queries have demonstrated that this retrieval technique performs significantly better than previous retrieval techniques. By performing partial de-normalization with a retrieval query, the present invention advantageously can add substantially more equi-join conditions than are typically created by previous retrieval techniques. As such, this advantage can be exploited further by the use of additional restrictions imposed on the query formed, which can reduce the possibility of an index range scan occurring for the nested loop join operation on the non-driving table(s), and thereby further improve the performance of the retrieval process. An example of additional equi-join conditions that may be imposed for a Purchase Order retrieval query due to the use of partial de-normalization is as follows:",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":". . ."},{"entry":"HEADER.PO_ID = REQUEST_SCHEDULE.PO_ID AND"},{"entry":"HEADER.PO_NUMBER = REQUEST_SCHEDULE.PO_NUMBER"},{"entry":"AND"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In accordance with the present invention, a third technique that can be used to improve the efficiency of information retrieval from a relational database is proper cursor management with an efficient paging algorithm. For example, a UI or client system resource that requests the retrieval of hierarchical objects from a database server can send a Uniform Resource Locator (URL) or Web address for a Cursor to the database server in an API call. Such a Cursor URL can include a string of, for example, three components including a Surrogate Cursor Id, a maximum value of a sort order by column included in the Cursor URL (e.g., sort in ascending order), and a name of a column upon which the ordering of the results are to be based. Along with such a Cursor URL, a UI or other client resource can also send to the server a value representing the number of lowest level objects to be retrieved. The following is example code illustrating a UI's or client's interaction with such a database server:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"First Page:"},{"entry":"\/\/The client is asking for POs that satisfy the"},{"entry":"\/\/given search Criteria and is asking for the first"},{"entry":"\/\/50"},{"entry":"\/\/a \u22121 indicates the first page"},{"entry":"\/\/the Cursor URL is a simple string with \u201c| \u201d as the"},{"entry":"\/\/delimiter"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PurchaseOrder pos[] = poAccessor.getPOs"]},{"entry":[{},"( searchCriteria, 50, \u201c\u22121 | null | PO_NUMBER\u201d) ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/Second Page:"},{"entry":"\/\/The client received 50 objects and the max value"},{"entry":"\/\/of PO_NUMBER it received so far is \u201cPO_50\u201d and the"},{"entry":"\/\/value of the last cursor id it received is 10050"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pos = poAccessor.getPOs( searchCriteria, 50,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201c10050 | PO_50 | PO_NUMBER\u201d) ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\/\/Third Page:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pos = poAccessor.getPOs( searchCriteria, 50,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u201c10100 | PO_100 | PO_NUMBER\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/Now if the client desires to return to first page,"},{"entry":"\/\/all client has to remember is the Cursor URL."},{"entry":"\/\/A UI system can store this cursor URL as part of a"},{"entry":"\/\/hyper-link"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pos[] = poAccessor.getPOs( searchCriteria, 50,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201c\u22121 | null | PO_NUMBER\u201d) ;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Also, for a more efficient paging algorithm than previous paging algorithms, a fetch algorithm can be used to take the current maximum value for the sort order column and impose a restriction stating that the next page should have column values that are greater than the current value of the column. Alternatively, for example, a restriction can be imposed stating that the next page retrieved should have column values that are the same as the current value of the column, but also for that next page, the Cursor Id value should be greater than the current Cursor Id value. The results of such a fetch operation are thus ordered by the sort column name and Cursor Id (in that order). Because of de-normalization, most of the queries thus created can have both the sort column and Cursor Id present in the driving table. The fetch algorithm can use a \u201cFETCH FIRST N ROWS\u201d construct for a DB2\u00ae database query, or a \u201cROWNUM\u201d construct for an Oracle\u00ae database query, in order to tell the database how many rows can be returned to satisfy the restrictions imposed.","For an initial call from a client to a database server, the client can send arguments to the server including a Cursor Id value of \u22121, and a NULL value for the sort column. For subsequent calls from that client, the client can send the maximum value of the sort column which will be in the last object that it receives from the previous call (this example illustrates an ascending sort, and for a descending sort, the minimum value will be included). The client can view the last object received in the sorted order and form a suitable Cursor URL. The next page can be fetched based on this Cursor URL, and so on and so forth, for the subsequent pages to be retrieved. An example query that can be formed by such a fetch or paging algorithm is illustrated above as the query subsequent to partial de-normalization.","Note, for this example, that the term \u201cpage size\u201d can refer to the number of lowest level objects in the hierarchy to be retrieved (e.g., number of distinct REQUEST_SCHEDULE objects to retrieve). If a one-to-one correspondence exists between the various tables involved in the hierarchy, the number of Purchase Order objects returned can be equal to the page size. As such, a typical Graphical UI (GUI) can display hierarchies to a client in a de-normalized manner on a per line basis, and be used to specify the number of lines needed from the database server (e.g., which can equal the number of lowest level objects to be retrieved).","The following illustrates an example fetch operation that can be performed using the above-described fetch or paging algorithm. For this example, the outer join table can be excluded for simplicity. The values in parentheses can represent the referential integrity constrains. For example, the characters L1(H1) can mean that a line item L1 belongs to a Purchase Order with a header H1 and whose PO_NUMBER is PO1. Under the REQUEST_SCHEDULE heading, the middle and right-most values shown can represent the Cursor Id and de-normalized PO_NUMBER, respectively.",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"HEADER","LINE ITEM","REQUEST SCHEDULE"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"H1 PO_1","L1 (H1)","R1 (H1, L1) 1001 PO_1"]},{"entry":[{},"H2 PO_3","L2 (H1)","R2 (H1, L1) 1023 PO_1"]},{"entry":[{},"H3 PO_2","L3 (H2)","R3 (H1, L1) 1035 PO_1"]},{"entry":[{},"H4 PO_5","L4 (H3)","R4 (H1, L2) 1500 PO_1"]},{"entry":[{},"H5 PO_4","L5 (H4)","R5 (H2, L3) \u2002999 PO_2"]},{"entry":[{},{},"L6 (H5)","R6 (H3, L4) \u2002875 PO_3"]},{"entry":[{},{},{},"R7 (H4, L5) 2000 PO_4"]},{"entry":[{},{},{},"R8 (H5, L6) 4555 PO_5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"AND("},{"entry":"REQUEST_SCHEDULE.PO_NUMBER > \u2018 \u2018\/* Blank string for the"},{"entry":"first page*\/"},{"entry":")"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"H1","L1","R1 (H1, L1) 1001 PO_1"]},{"entry":[{},"H1","L1","R2 (H1, L1) 1023 PO_1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{},{}],"sub":"\u2014"},{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"H1","L1","R3 (H1, L1) 1035 PO_1"]},{"entry":[{},"H1","L2","R4 (H1, L2) 1500 PO_1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"H2","L2","R5 (H2, L3) \u2002999 PO_2"]},{"entry":[{},"H3","L3","R6 (H3, L4) \u2002875 PO_3"]},{"entry":[{},"H4","L4","R7 (H4, L5) 2000 PO_4"]},{"entry":[{},"H5","L5","R8 (H5, L6) 4555 PO_5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"sub":"\u2014"},"The above-described retrieval techniques can be modified to retrieve objects without any particular column sort. In this case, for example, the Surrogate Cursor Id can provide the order for the resulting set. This retrieval technique can perform better than the above-described techniques, because this technique can result in less sorting operations for the database system involved. Also, the performance of this retrieval technique can be further increased by creating an index on the Surrogate Cursor Id used. For example, the following query can be used for retrieving objects from a relational database without a specific sort order:",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SELECT"},{"entry":"HEADER.PO_NUMBER, HEADER.CUSTOMER_NAME, . . . (other"},{"entry":"HEADER columns)"},{"entry":"LINE_ITEM.ITEM_NAME, LINE_ITEM.CATALOG_DOMAIN, . . ."},{"entry":"(other LINE_ITEM columns)"},{"entry":"REQUEST_SCHEDULE.REQUEST_QUANTITY, . . . (other"},{"entry":"REQUEST_SCHEDULE columns)"},{"entry":"FROM"},{"entry":"REQUEST_SCHEDULE, HEADER, LINE_ITEM,"},{"entry":"PROMISE_SCHEDULE\/*"},{"entry":"Request Schedule is the driving table*\/"},{"entry":"WHERE"},{"entry":"HEADER.PO ID = LINE_ITEM.PO_ID"},{"entry":". . . (Other join conditions)"},{"entry":"AND"},{"entry":"REQUEST_SCHEDULE.CUSTOMER_NAME=\u2018Customer1\u2019\/* Instead"},{"entry":"of applying to HEADER *\/"},{"entry":"AND"},{"entry":"REQUEST_SCHEDULE.ITEM_NAME=\u2018Golf Caps\u2019\/* Instead of"},{"entry":"applying to LINE_ITEM *\/"},{"entry":"AND("},{"entry":"\/* The only cursor restriction here is based on the"},{"entry":"cursor id*\/"},{"entry":"REQUEST_SCHEDULE.CURSOR_ID > 12345 \/* Cursor Id*\/"},{"entry":")"},{"entry":"AND"},{"entry":"FETCH FIRST 50 ROWS ONLY \/* Fetch the next 50*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(For Oracle database, \u201cROWNUM < 51\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ORDER BY"},{"entry":"CURSOR_ID"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"As mentioned earlier, the above-described example retrieval queries can be used with a DB2 database system (e.g., DB2 6.x\u00ae). These queries can also be used with other types of database systems. For example, in accordance with a second example embodiment of the present invention, a high performance sorted-paged method for retrieving objects from a relational database can be implemented for an ORACLE database (e.g., Oracle DB 8.1.x\u00ae). Notably, however, some ORACLE database system versions may be restricted somewhat if \u201cORDER BY\u201d and \u201cROWNUM\u201d instructions are used in conjunction with each other. For example, certain ORACLE database systems first number the rows and create a pseudo-column called ROWNUM and then ORDER BY. The ordering of this procedure can cause unpredictable results for a retrieval query, because the retrieval query can include a paging clause such as \u201cROWNUM<51\u201d. On the other hand, a DB2 database system is not so restricted if a \u201cFETCH FIRST N ROWS ONLY\u201d instruction is used in conjunction with an \u201cORDER BY\u201d instruction.","One technique that can be used to avoid the above-described problem for certain ORACLE database versions is to introduce an index hint referring to the index on the column(s) to which the \u201cORDER BY\u201d instruction is being applied. The ORACLE database system can respond by forcing the fetch in the order dictated by the index, which is the desired sort order. However, a problem with this index hint type of approach is that it does not guarantee success. Also, index hint approaches can be affected significantly by the mode of operation of the optimizer used.","In accordance with the present invention, a more reliable solution to the above-described problem with certain ORACLE database systems is to create a sub-query for the ORDER BY instruction including all restrictions imposed. Then, the associated super-query can be used to perform the ROWNUM operation. Consequently, the ORDER BY operation can be forced to take place before the ROWNUM operation is performed. An example of coding that can be used for such a retrieval approach is as follows:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SELECT . . . FROM("},{"entry":"SELECT"},{"entry":"HEADER.PO_NUMBER  AS  H_PO_NUMBER, . . . (other HEADER"},{"entry":"columns)"},{"entry":"LINE_ITEM.ITEM_NAME AS L_ITEM_NAME . . . (other"},{"entry":"LINE_ITEM columns)"},{"entry":"REQUEST_SCHEDULE.REQUEST_QUANTITY AS . . . (other"},{"entry":"REQUEST_SCHEDULE columns)"},{"entry":"FROM"},{"entry":"REQUEST_SCHEDULE, HEADER, LINE_ITEM,"},{"entry":"PROMISE_SCHEDULE\/*"},{"entry":"Request Schedule is the driving table *\/"},{"entry":"WHERE"},{"entry":"HEADER.PO_ID = LINE_ITEM.PO_ID"},{"entry":". . . (Other join conditions)"},{"entry":"AND"},{"entry":"REQUEST_SCHEDULE.CUSTOMER_NAME=\u2019Customer1\u2019 \/*"},{"entry":"Instead of applying to HEADER *\/"},{"entry":"AND"},{"entry":"REQUEST_SCHEDULE.ITEM_NAME=\u2019Golf Caps\u2019 \/* Instead of"},{"entry":"applying to LINE_ITEM *\/"},{"entry":"AND("},{"entry":"REQUEST_SCHEDULE.PO_NUMBER > \u2018PO_50\u2019 OR \/* Current Sort"},{"entry":"column value at cursor location*\/"},{"entry":"(REQUEST_SCHEDULE.CURSOR_ID > 12345 \/* Cursor Id*\/"},{"entry":"AND"},{"entry":"REQUEST_SCHEDULE.PO_NUMBER == \u2018PO50\u2019)"},{"entry":")"},{"entry":"ORDER BY"},{"entry":"PO_NUMBER, CURSOR_ID"},{"entry":")"},{"entry":"WHERE"},{"entry":"ROWNUM < 50 \/* outer query places the ROWNUM restriction"},{"entry":"*\/"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 2","b":["100","102","12","14","20","22","104","106","108","110"]},"Although a preferred embodiment of the method and apparatus of the present invention has been illustrated in the accompanying Drawings and described in the foregoing Detailed Description, it will be understood that the invention is not limited to the embodiment disclosed, but is capable of numerous rearrangements, modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention and its advantages, reference is now made to the following descriptions, taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
