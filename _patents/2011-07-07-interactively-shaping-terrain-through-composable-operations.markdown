---
title: Interactively shaping terrain through composable operations
abstract: A method, apparatus, and article of manufacture provide the ability to shape a terrain. An associative framework dependency graph used to control the shaping of the terrain is established. The graph defines an association between and processing order for two or more nodes that include an input node and an action node. The input node is a drawing entity or set of one or more geometric parameters. The action node is dependent on and uses the input node as input to perform an evaluation and produce an output object. The associative framework dependency graph is displayed and evaluated by evaluating the action node in accordance with the processing order to produce a finished ground terrain.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09196085&OS=09196085&RS=09196085
owner: Autodesk, Inc.
number: 09196085
owner_city: San Rafael
owner_country: US
publication_date: 20110707
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","CONCLUSION"],"p":["This application is related to the following and commonly-assigned patent applications, which applications are incorporated by reference herein:","U.S. patent application Ser. No. 13\/178,349, now U.S. Pat. No. 8,676,546, filed on Jul. 7, 2011, issued on Mar. 18, 2014, entitled \u201cGRADING METHOD UTILIZING FLOW GRADE SOLUTION\u201d, by Smita Narayan and Christopher E. Putnam, et. al.; and","U.S. patent application Ser. No. 13\/178,358, filed on Jul. 7, 2011, entitled \u201cDIRECT MANIPULATION OF COMPOSITE TERRAIN OBJECTS WITH INTUITIVE USER INTERACTION\u201d, by Smita Narayan and Christopher E. Putnam, et. al.","1. Field of the Invention","The present invention relates generally to computer aided design (CAD) applications, and in particular, to a method, apparatus, and article of manufacture for interactively shaping a terrain through composable operations in a building information model (BIM) of a CAD.","2. Description of the Related Art","Grading is configuring the land's surface by removing or adding soil and other earthen material to artificially shape the land to best suit a project. The grading of a site serves three basic purposes: functional, drainage, and aesthetic. These basic purposes often conflict with each other and prior art solutions fail to provide an easy mechanism to satisfy all of these purposes while utilizing a single grading model as the user proceeds from concept to completion of a project. Such problems may be better understood with a description of prior art grading and grading solutions.","Functionality: Terrain grading is used to re-form terrain\/land in order to provide land that is functional or can be used for a functional purpose. In this regard, grading reforms the terrain to make it compatible for an intended land use. Such functional land uses may include parking lots, ponds, swales, and other features. To provide for such land use, terrain grading creates finish smooth slopes at specified grades.","Facilitate Drainage: Grading establishes and controls the new drainage pattern to direct the runoff to outfall points and away from buildings.","Aesthetic: A good design creates an aesthetically pleasing and appealing landscape. Natural landforms are created by using concave and convex shaped slopes rather than uniform gradient slopes. The creation of aesthetic landforms must be balanced by the cost of constructing them.","These goals often conflict with each other and to integrate them into the final design, they must be analyzed collectively. In practice, a grading plan is established through several successive trials of different schemes. This process can be very tedious. A grading scheme often involves projecting slopes from curves representing shoulder edges or water boundaries, and leveling them against the existing terrain. The implementation of this concept is fraught with difficulties due to a variety of complex scenarios that cannot be handled by a na\u00efve ray projection algorithm, especially when projecting from curves with rapid elevation changes.","More specifically, prior art products provide a grading scheme by projecting each segment of a curve at a given cross-slope to produce bounded panels, and then combining them. Such a methodology involves complex models whose history of operations is difficult to track. In addition, the complexity of the prior art solutions provides for difficult implementation and is prone to errors. Consequently, prior art solutions may fail completely when supplied geometry is complicated. Such a lack of stability has prevented users from readily adopting the prior art solutions. The prior art also provides few tools to modify existing solutions in an intuitive manner. Further, the prior art fails to provide tools that can be used in a conceptual design that can also later be refined for generating production drawings. In this regard, it is desirable to provide a tool that can be used to obtain quick answers for early decision making (e.g., approximate values of earthwork quantities) that can be refined later to produce a more accurate solution.","As described above, a particular need is that of designing the terrain to facilitate drainage. The prior art provides a complex methodology that is neither natural nor user friendly. In this regard, the prior art measures the cross grade (or cross slope) perpendicular to the curve from which a slope is projected. Each segment of the curve is projected at a given cross-slope to produce bounded panels that are combined by intersecting them against each other. This approach involves complex algorithms to solve inside corners and the intersection of overlapping solutions. For example, the rapid transitions of offsets across the inside corners cause incomplete or failed 3D intersections of the adjacent, bounded planes. Likewise, a multi-elevation rounded corner projected beyond its radius produces equally complex intersection geometry. The intersections are solved by simplifying the geometry and integrating the solution into planar topology to remove redundant loops. However, stability problems and specialized functionality restrict the use of the prior art methods.","Thus, prior art solutions produce inside corners with complex geometry that is hard to clean, especially if the solutions involve degenerate partial solutions. Solving such inside corners involves complex algorithms and is a cumbersome process. In addition, when designing the drainage, the prior art fails to provide the ability to create or use organic shapes that could be used to produce an aesthetically pleasing landscape.","Moreover, there are few tools for modifying prior art solutions in ways that directly map to site development needs. Even though there is a large set of elevation\/grade editing tools, the overlapping line work can create difficult to resolve stability problems and elevation conflicts. Predicting the impact of an edit to a solution requires experience, and factors like tessellation quality, crossing break lines, and Delaunay triangulation rules can confound a new user.","Further, prior art solutions do not scale easily and fail to enable a user with the ability to change the order of overlapping solutions without recreating the geometry. In addition, prior art solutions require several steps and prompts to create enhanced features (e.g., parking lots, ponds, etc.) in a manner that is tedious and non-intuitive. Also, prior art methods fail to provide a good mechanism for directing the drainage path and only enable the creation of a final terrain after combining a final solution with an existing terrain. The prior art does not provide a mechanism to control the refinement of a final solution (e.g., showing or hiding hard edges). Lastly, the prior art does not provide the ability to track the history of operations from a finished model.","As described above, the existing solution does not allow the creation of a conceptual model that can later be refined into a more accurate model. In practice, before any detailed grading plans are underway, the designer needs to develop a generalized grading scheme to determine any problem areas and get a feel for the type of limitations the site may have as the design progresses. In the preliminary analysis, engineers are often looking for quick early-stage approximate answers (like road and parking area gradients, drainage patterns, rough estimates of cut and fill quantities, need for steep slopes, retaining walls, etc.) to make quick decisions that can later be refined into more accurate solutions for production drawings. The prior art fails to provide such capabilities.","In view of the above, it is desirable to enable a single set of tools that can be used from concept through completion, in the same model environment, while allowing the user to design a grading solution in a natural and desirable manner.","Embodiments of the present invention overcome the problems of the prior art by providing a model for expedited development of a finished ground by providing a composable model where each operation\/action is arranged as a node of an associative framework dependency graph.","Such a model is highly composable. Composability is a system design principle dealing with the inter-relationships of components. A highly composable system provides components that can be easily combined and assembled in various ways. Embodiments of the invention provide a model that allows engineers to combine simple pieces, into more complex components, representing pre-implemented pieces of design, that can be easily integrated into the terrain.","Embodiments of the invention also provide a compositional model, implying that the whole model can be understood by understanding the parts and how they are combined. Such a model structure may be obvious to a user and easy to manage. This is achieved by ensuring that the operations are incremental and can easily be inspected, altered, or reverted.","A model in accordance with an embodiment of the invention allows clean intersections of overlapping solutions, and provides flexibility as it separates the actual implementation of the solution from how the operations are built. In other words, the model may allow the users to switch the evaluation engine without specifying the order of operations again. This is possible because the operations are processed in \u201caction bodies\u201d and solution units are stored in \u201cinput\/output\u201d objects, all arranged as nodes of associative framework dependency graph. Hence, the user can choose to solve the model using an \u201cACIS Evaluation Engine\u201d or a \u201cTin Evaluator\u201d instead of a \u201cDepth Buffer Solver\u201d\u2014the input\/output nodes may be updated with new solution units (TINs [triangulated irregular network] or ASM [Autodesk\u2122 Shape Manager\u2122] [e.g., a 3D solid modeling kernel] elements) and the whole model gets re-evaluated to produce new results. Some evaluators are sophisticated enough to provide hard edges and the results are much more accurate.","Embodiments of the invention provide a model using a holistic approach to terrain shaping, by allowing the users to go from concept to completion, which can help design teams develop designs that better meet project goals such as sustainability, cost, aesthetics, etc.","Embodiments of the invention also provide a rich, expressive set of general-purpose components and operations whose main characteristics are flexibility, versatility and ease of use. Such components and operations can be customized to tailor the workflow to suit the needs of a given project. In the civil engineering discipline, every site is unique and there are many aspects to the engineering projects that cannot be solved by standard parts. Embodiments of the invention provide a structured language to civil engineers by presenting a single set of rules to compose and combine the primitive components to give predictable results. For example, a complex shape such as that of a parking lot or a pond can be expressed as a combination of these primitive shapes. By identifying and organizing all of the different operations and primitive objects needed to create a design into a complete set, the users can create sustainable, structured and versatile designs and interact seamlessly with the application.","Embodiments of the invention allow the addition of enhanced, complex land features with simple commands while allowing the user to re-order operations to produce different results in case of overlapping solutions and providing in-progress feedback through volume tools, as the design evolves.","In the following description, reference is made to the accompanying drawings which form a part hereof, and which is shown, by way of illustration, several embodiments of the present invention. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","Overview","Embodiments of the invention provide a framework for combining operations and updating the operations in a proper sequence to build the finished ground, by arranging each operation as a node of an associative framework dependency graph.","Each action\/operation takes a given set of constraints (slopes\/grade breaks, etc.), and solves them, leading to an output that is used as read dependencies by subsequent actions. The finished ground is presented automatically through an entity that updates dynamically following user edits. The object relationships in the graph are defined in a uniform, structured, and controlled manner. Further, when input parameters change, network evaluation updates the actions in the correct order. Accordingly, embodiments of the invention allow an opportunity to build a rich, expressive set of general-purpose components and operations whose main characteristics are flexbility, versatality and ease of use.","The simple components can be combined and assembled into more complex components, representing pre-implemented pieces of design, ready to be integrated into the terrain. The model allows the presentation of simple commands for applying a collective sequence of operations to shape the terrain in ways that directly map to the site development needs. By separating the actual implementation of terrain shaping solutions from how the operations are built, the model enables the users to switch the evaluation engine without specifying the sequence of operations again. Associative capabilities help speed changes during design and allow opportunities to present and re-order the operations to achieve different results. Finally, the model allows opportunities for direct manipulation capabilities to empower the users to optimize their designs with intuitive user interaction and dynamic feedback.","Hardware Environment",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1","b":["100","102","102","102","104","104","104","106","102","114","116","128","102","132"]},"In one embodiment, the computer  operates by the general purpose processor A performing instructions defined by the computer program  under control of an operating system . The computer program  and\/or the operating system  may be stored in the memory  and may interface with the user and\/or other devices to accept input and commands and, based on such input and commands and the instructions defined by the computer program  and operating system  to provide output and results.","Output\/results may be presented on the display  or provided to another device for presentation or further processing or action. In one embodiment, the display  comprises a liquid crystal display (LCD) having a plurality of separately addressable liquid crystals. Each liquid crystal of the display  changes to an opaque or translucent state to form a part of the image on the display in response to the data or information generated by the processor  from the application of the instructions of the computer program  and\/or operating system  to the input and commands. The image may be provided through a graphical user interface (GUI) module A. Although the GUI module A is depicted as a separate module, the instructions performing the GUI functions can be resident or distributed in the operating system , the computer program , or implemented with special purpose memory and processors.","Some or all of the operations performed by the computer  according to the computer program  instructions may be implemented in a special purpose processor B. In this embodiment, the some or all of the computer program  instructions may be implemented via firmware instructions stored in a read only memory (ROM), a programmable read only memory (PROM) or flash memory within the special purpose processor B or in memory . The special purpose processor B may also be hardwired through circuit design to perform some or all of the operations to implement the present invention. Further, the special purpose processor B may be a hybrid processor, which includes dedicated circuitry for performing a subset of functions, and other circuits for performing more general functions such as responding to computer program instructions. In one embodiment, the special purpose processor is an application specific integrated circuit (ASIC).","The computer  may also implement a compiler  which allows an application program  written in a programming language such as COBOL, Pascal, C++, FORTRAN, or other language to be translated into processor  readable code. After completion, the application or computer program  accesses and manipulates data accepted from I\/O devices and stored in the memory  of the computer  using the relationships and logic that was generated using the compiler .","The computer  also optionally comprises an external communication device such as a modem, satellite link, Ethernet card, or other device for accepting input from and providing output to other computers .","In one embodiment, instructions implementing the operating system , the computer program , and the compiler  are tangibly embodied in a computer-readable medium, e.g., data storage device , which could include one or more fixed or removable data storage devices, such as a zip drive, floppy disc drive , hard drive, CD-ROM drive, tape drive, etc. Further, the operating system  and the computer program  are comprised of computer program instructions which, when accessed, read and executed by the computer , causes the computer  to perform the steps necessary to implement and\/or use the present invention or to load the program of instructions into a memory, thus creating a special purpose data structure causing the computer to operate as a specially programmed computer executing the method steps described herein. Computer program  and\/or operating instructions may also be tangibly embodied in memory  and\/or data communications devices , thereby making a computer program product or article of manufacture according to the invention. As such, the terms \u201carticle of manufacture,\u201d \u201cprogram storage device\u201d and \u201ccomputer program product\u201d as used herein are intended to encompass a computer program accessible from any computer readable device or media.","Of course, those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with the computer .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 2","FIG. 1"],"b":["200","202","102","206","202","102","206"]},"A network  such as the Internet connects clients  to server computers . Network  may utilize ethernet, coaxial cable, wireless communications, radio frequency (RF), etc. to connect and provide the communication between clients  and servers . Clients  may execute a client application or web browser and communicate with server computers  executing web servers . Such a web browser is typically a program such as MICROSOFT INTERNET EXPLORER\u2122, MOZILLA FIREFOX\u2122, OPERA\u2122, APPLE SAFARI\u2122, etc. Further, the software executing on clients  may be downloaded from server computer  to client computers  and installed as a plug in or ACTIVEX\u2122 control of a web browser. Accordingly, clients  may utilize ACTIVEX\u2122 components\/component object model (COM) or distributed COM (DCOM) components to provide a user interface on a display of client . The web server  is typically a program such as MICROSOFT'S INTERNET INFORMATION SERVER\u2122.","Web server  may host an Active Server Page (ASP) or Internet Server Application Programming Interface (ISAPI) application , which may be executing scripts. The scripts invoke objects that execute business logic (referred to as business objects). The business objects then manipulate data in database  through a database management system (DBMS) . Alternatively, database  may be part of or connected directly to client  instead of communicating\/obtaining the information from database  across network . When a developer encapsulates the business functionality into objects, the system may be referred to as a component object model (COM) system. Accordingly, the scripts executing on web server  (and\/or application ) invoke COM objects that implement the business logic. Further, server  may utilize MICROSOFT'S\u2122 Transaction Server (MTS) to access required data stored in database  via an interface such as ADO (Active Data Objects), OLE DB (Object Linking and Embedding DataBase), or ODBC (Open DataBase Connectivity).","Generally, these components - all comprise logic and\/or data that is embodied in\/or retrievable from device, medium, signal, or carrier, e.g., a data storage device, a data communications device, a remote computer or device coupled to the computer via a network or via another data communications device, etc. Moreover, this logic and\/or data, when read, executed, and\/or interpreted, results in the steps necessary to implement and\/or use the present invention being performed.","Although the term \u201cuser computer\u201d, \u201cclient computer\u201d, and\/or \u201cserver computer\u201d is referred to herein, it is understood that such computers  and  may include portable devices such as cell phones, notebook computers, pocket computers, or any other device with suitable processing, communication, and input\/output capability.","Of course, those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with computers  and .","Software Embodiments","Embodiments of the invention are implemented as a software application on a client  or server computer . As described above, such a software application provides a framework for combining operations and updating them in a proper sequence to build the finished ground, by arranging each operation as nodes of an associative framework dependency graph.","To define object relationships in a uniform, structured and controlled way, a model is built using an Associative Framework. The main building block of the framework is the concept of an action. An action is an algorithm that when executed, takes some input, performs the calculations and produces some output. Further, custom actions can be defined that evaluate an operation using some input parameters and then produce an output object as a plane, depth buffer, or any other geometry resulting from the evaluation.","For example, an action can take a slope parameter and a curve as an input object and produce a depth buffer (see co-pending application entitled \u201cGrading Method Utilizing Flow Grade Solution\u201d cited above and incorporated by reference herein) as the output object. Another action can take an existing ground and produce a geometry that mirrors the existing ground. Another action can take plane parameters and a plane boundary and produce a bounded plane. Yet another action can take two elements and combine them using Boolean operations to produce a composite object. The Boolean operations can be used to add fill, remove cut, or introduce grade breaks.","The action parameters that need to be shared across multiple actions are defined in associative variables, whose values can be edited by the user (e.g., through dimension grips). When the input parameters change, the action is notified and later evaluated; its evaluation updates the output objects. Only the objects that need to be updated are actually updated, and are updated in the correct order.","A composable grading model may serve one or more of the following purposes:","1. Drainage: The user can build a surface layout by combining planes with specific flow grades and directions, thus allowing the user more control on directing drainage to outfall points. This workflow is especially relevant while designing a stepped parking lot from the entrance point.","2. Precision of Results: The model allows the user to switch the evaluation engine without specifying the operations again. Thus, the user can fine tune the design by switching a model from, e.g., an approximate grid-based model to an ASM model, that provides a more accurate finished ground with hard edges.","3. Pre-implemented design pieces: The commonly used operations can be combined into canned commands, making the workflow much simpler. The user is able to specify a handful of standard entities (e.g., a pond, a parking lot, etc.) to be added to the terrain, making this work far easier than in the prior art.","Exemplary Dependency Graph","To initially utilize a dependency graph in a CAD system, a graph is created and populated with nodes that produce the finished ground matching the existing ground within the site boundary. As operations are added, the finished ground is modified automatically. Similarly, as operations are performed in a CAD model, the dependency graph may be automatically modified. Accordingly, any actions used to modify\/build the grading entity are recorded in the dependency graph.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIGS. 3A-3B","FIG. 4"]},"In , the model\/surface begins with an existing surface via element\/node . The user desires to add a fill to the existing surface. The user creates\/utilizes a feature line element  and based thereon uses a create fill grid operation . Thus, a grid  is created (i.e., output from action node ) that represents a fill solution from a feature line . The existing surface  is combined with the fill grid  using operator node  that combines while keeping\/maintaining the maximum elevation to create graded terrain. Such an operation  adds fill to the surface  by combining fill (e.g., depth buffer produced using a swept cone [as described in the copending application entitled \u201cGrading Method Utilizing Flow Grade Solution\u201d which is incorporated by reference herein] with the existing surface while keeping pieces with higher elevations in the output. The final output grid is then updated via operator node . Thus, in , input nodes  and  are used by operator nodes , , and  to add fill to an existing surface and update the final output grid. The arrows in  represent that dependency order. Accordingly, the fill grid  depends on the feature line , and the final output grid  depends on the maximum operator node . Further, the output grid  is obtained\/updated dynamically if any child nodes on which node  is dependent (e.g., nodes -) are updated.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 3B","FIG. 3A"],"b":["304","312","314","310"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 4","FIGS. 3A and 3B"]},"The initial surface is represented by the existing surface node  and the existing grid . A create parking lot command is initiated which utilizes a parameter\/input of a parking lot boundary represented by node . Action node  drapes the boundary  onto input plane  (e.g., created using various user-specified parameters). The dependency graph then combines the boundary  draped on the plane  with the existing surface  and grid . To combine the existing surface \/grid  with the boundary  draped on the plane , a fill grading grid is created using action  and a cut grading grid is created using action \u2014both of which are based on the boundary  draped on the plane  from action . The surface \/grid  is combined (e.g., using a max operation) with the fill grade  ensuring that the maximum surface is not exceeded using action node . The cut grid  is combined (e.g., using a min operation) with the output of operation  (max operation) while ensuring a minimum surface is maintained via node . Lastly, the final output grid  is updated based on the combined surface \/grid  and fill\/cut grading grids.","Thus,  illustrates the ability to obtain an interior plane and cut and fill slopes on the outside of the boundary. The operations are all performed based on the user specifying a single build\/create parking lot command while specifying (or using default) various parameters (e.g., the plane parameters\u2014the absolute point through which the plane passes; where the parking lot surface lies, what the outside of the parking lot looks like, how does the parking lot blend into the existing ground  (e.g., cut and fill grade parameters).","Thus, a user can define a series of actions (also viewed as grouping a series of operations together), e.g., a create parking lot command, that performs\/adds various actions to the dependency graph to result in a final output grid. The user can manipulate the dependency graph of  and  by moving nodes -, adjusting the parameters to the nodes, and or modifying the engine that performs the actions for the action nodes. Further, as indicated in  and , each of the nodes is related to\/associated with another node. Accordingly, the modification of one node\/parameter for a node may affect any associated nodes (i.e., parent nodes). Based on such an association, whenever a node is edited, once the dependency graph and\/or individual actions are evaluated, the evaluation updates any output objects. Such an updating is performed in the appropriate order based on the dependency graph. For example, as illustrated in , node  is associated with and dependent on child nodes  and . Further, nodes  and  are dependent on child node  (nodes  and  and both parent nodes for node ). Thus, if input nodes  and\/or  are modified (or their parameters are modified), node  is updated and the output objects used as input to nodes  and  are updated.","The updating of the nodes will be performed in the correct order such that the output from nodes  and  to nodes  and nodes  will not be performed before updating the output from node  which is used as input to nodes  and . Such an association and performance was not possible in the prior art. For example, in the prior art, the outside boundary of the parking lot  was not tied to the plane geometry . Thus, if the user attempted to change the drainage point of the parking lot, many individual elevation edits were required that were not neatly tied to the user's intent\u2014e.g., to force the water to flow to a certain location\/point of the parking lot. Here, the user's intent is directly modeled based on user actions.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 5","b":["502","502","502","502","504","504","504","504","502","506","504","504","504"]},"In , the site boundary action A utilizes the site boundary A to produce output node A. The surface action B utilizes the existing ground input B as well as the output node A to produce the grid output node B. The planar action D also uses the output node A (as input) to produce a plane output node D that is further used as input to draping action C (along with the parking lot boundary input C). The draping action C drapes the parking lot boundary C onto the plane D to produce output node C. The resulting draped parking lot from output node C is used as input to the fill grading action E that enables the parking lot to be graded (e.g., using an elevation buffer) whereby an elevation buffer output node E is produced. The graded fill parking lot E is then combined with the grid output B (keeping the higher elevations of the respective grids representing the two terrains) to produce an updated grid output G. While the fill is computed using the draped parking lot C, a cut grading action F is also performed using the draped parking lot C to produce a different elevation buffer F. The elevation buffer F is used to determine a different slope geometry since the cut removes dirt from the terrain. The cut grade elevation buffer F is then combined with the grid output G (i.e., the grid representing the terrain graded in fill E) keeping the lower elevations of the respective grids representing the two terrains to produce the finished ground H as output.","While a specific evaluation engine may be used to perform the various actions , the user can switch the evaluation engine at any time while retaining the action nodes that specify the operation to be performed by the evaluation engine. Based on a change\/switch in the evaluation engine (underlying the action nodes ), the action output nodes  are replaced with new output nodes corresponding to the new evaluation engine. For example, a model based on a grid evaluation engine would produce grids as output nodes , which may serve as input nodes to other actions in the dependency graph. When this model is switched to a solid model, the action nodes  would produce ASM elements as output nodes . In other words, the depth buffers and grids that store the output of various actions in the form of output nodes  will be replaced with ASM elements. All actions  may then be re-evaluated. The action nodes  encompass the logic to produce the output using multiple evaluation engines. When evaluated, the action nodes  produce an output based on the active evaluation engine. The action parameters and the organization of the dependency graph does not change when the evaluation engine is switched.","Advantages","Embodiments of the present invention provide many advantages (over the prior art solutions) including simplicity, flexibility, and performance.","The associative framework provides a simpler interface to the user. In this regard, the complexity of the grading model is presented in a simpler form, clean intersection of overlapping solutions are provided, simple commands may be applied to a canned set of operations commonly used together for parking lot design, pond design, grade breaks to control drainage, etc., and the user is able to see the final results automatically by presenting a \u201cfinished ground.\u201d","The associative framework provides flexibility by separating the actual implementation of grading solutions from how the operations are built. Changing the order of operations allows the user to change the order of overlapping features, and thus control the appearance of the finished result. Such a presentation of operations also enables the user to track the history of creation. Thus, the user is able to build a final model using grids or ASM\/ACIS elements as the underlying building model without specifying the sequence of operations again. Such capability serves to reduce the communications gap across engineers working on the same project, which is a large issue with prior art grading features.","The associative framework improves performance by updating in the correct order only those parts of the model that are impacted by a user's edits. In other words, only those parts of the model are evaluated that are impacted by the change.","Accordingly, embodiments of the invention can be distinguished from the prior art in various manners including one or more of the following:","1. The prior art solution requires complex algorithms to solve overlapping solutions. Each intersection is dealt with sequentially, and the solution does not scale easily. In embodiments of the present invention, the overlapping solutions clean up against each other automatically due to the way the individual pieces representing atomic solutions are combined with Boolean operations.","2. In the prior art solutions, it is not possible to change the order of overlapping solutions without recreating the geometry. However, in embodiments of the present invention, the order of operations can be changed simply by reordering the nodes of associative framework dependency graph.","3. The prior art solution requires several steps and prompts to create enhanced features such as parking lots, ponds, etc. The process is tedious and not intuitive. Embodiments of the present invention allow the creation of such enhanced features with simple commands.","4. The prior art methods do not provide a good way of directing the drainage path. Embodiments of the present invention provide simple commands to add grade breaks and direct drainage to outfall points.","5. In the prior art methods, the finished ground can be created only after combining the final solution with the existing terrain. In embodiments of the present invention, the finished ground is presented automatically after every operation.","6. In the prior art method, there is no way to control the refinement of the solution, and be able to show or hide hard edges. Embodiments of the present invention provide a way to switch the evaluation engine, to allow viewing the same model with a low level of refinement in the planning stage, and a highly accurate model with hard edges in the final stage.","7. In the prior art solution, there is no way to track the history of operations from the finished model. Embodiments of the present invention allow the user to track the order of operations through the graphical presentation of the dependency graph\/operations.","Logical Flow",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 6"},"At step , an associative framework dependency graph used to control the shaping of a terrain is established (in a computer-aided design [CAD] building information modeling [BIM] application). The associative framework dependency graph defines an association between two or more nodes and a processing order for processing the nodes in the graph. As part of the establishing of the framework, steps  and  are performed.","At step , an input node (as\/from one of the two or more nodes) is defined in the graph. The input node provides a drawing entity or a set of one or more geometric constraints\/parameters. If the input parameter needs to be shared by more than one action node, it is defined using an associative variable that serves as an input node to multiple actions. In other words, the use of an associative variable allows the sharing of the parameter with a second action node. The values of the associative variable may be edited in order to modify the dependent action node(s) directly. Thus, the input parameters may be edited by the user through a graphical user interface element (e.g., a dimension group).","At step , an action node (as\/from one of the two or more nodes) is defined in the graph. The action node is dependent on one or more input nodes. As part of such a dependency, the input node is used as input to the action node. The action node is configured to perform an evaluation (e.g., using the input node) and produce an output object. Such an output object may then be used as an input to a subsequent action node.","The input node and actions performed on such an input node may take various forms. For example, the input node may be an existing surface node (representing the existing surface of the terrain) and the output object from the action node may be a geometry that mirrors the existing surface. In another example, a first input node may be a slope parameter and a second input node may be a source curve with the output object being a depth buffer. The input nodes may also include a first node for a plane parameter and a second input node for a curve boundary with the output object being a bounded plane. An additional example provides that a first input node is for a source curve and a second input node for an offset parameter with the output object as an offset curve. In yet another example, a first input node may be a source curve and a second input node may be a grid with the output object as the source curve draped on the grid.","Further, the action node may also process two input nodes that specify\/provide geometric elements. Such an action node may combine the two nodes using a Boolean operation with the output object being a composite object. In such an embodiment, the Boolean operation may provide an add fill\/remove cut operation that adds fill grading to or removes earth from the terrain respectively. Alternatively, the Boolean operation may introduce a grade break (to create a hill or depression) in the terrain.","At step , the graph is displayed. Note that the display of the graph may occur when the graph is created or at a later time at the user's request (e.g., when the user elects to modify the graph).","At step , the graph is evaluated by evaluating the action node based on the processing order. Such an evaluation produces a finished ground terrain. Such a display  and evaluation  of a graph may further include the modification (in the graphical display) of geometric constraints, the input node, the action node, parameters for the nodes, the processing order of the nodes, etc. If a particular node is modified, any nodes dependent on the particular node are notified of the modification. For example, if a geometric constraint is modified, the action node dependent on the input node (having the geometric constraint) is notified of the modification. In response to the notification, the action node may be dynamically evaluated (in accordance with the processing order) to produce an updated output object. Such a dynamic evaluation may be performed in real-time without additional user input\/interaction. In other words, when an input is modified, the display of the terrain is automatically and dynamically updated to reflect the modification. Further, such an updating is performed with respect to any output objects that may be affected by the change (as determined by the dependency graph).","The display  and evaluation  may also include the replacement of an evaluation engine that performs the evaluation . Such a replacement does not require the user to re-specify or re-define any of the operations as such operations are specified in the dependency graph and only the evaluation engine is modified. Such a replacement of the evaluation engine was not possible in the prior art.","Lastly, the display  and evaluation  may also include the ability to combine multiple geometric operations into a single command that can be invoked by the user. When invoked, new nodes are automatically (i.e., without additional user interaction) defined in the dependency graph wherein the new nodes represent the geometric operations. Such a capability enables the user to define a canned set of operations that may be invoked using a single command while reflecting the details of the operations in the dependency graph which the user can then edit on an individualized basis if desired.","This concludes the description of the preferred embodiment of the invention. The following describes some alternative embodiments for accomplishing the present invention. For example, any type of computer, such as a mainframe, minicomputer, or personal computer, or computer configuration, such as a timesharing mainframe, local area network, or standalone personal computer, could be used with the present invention.","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIGS. 3A-3B","FIG. 4"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 4","FIGS. 3A and 3B"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
