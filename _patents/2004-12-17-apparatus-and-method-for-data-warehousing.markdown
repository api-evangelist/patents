---
title: Apparatus and method for data warehousing
abstract: An apparatus and method for implementing data warehousing systems. According to a first embodiment, a system may include a plurality of data warehouses, and a data warehouse manager configured to extract data sets from one or more data sources for storage in one or more of the plurality of data warehouses. Each of a first subset including two or more of the plurality of data warehouses may be configured to store a respective replica of a first data set extracted by the data warehouse manager. Further, the data warehouse manager may be further configured to allow a query dependent upon the first data set to be evaluated by one of the first subset of data warehouses before each respective replica of the first data set has been stored to a corresponding data warehouse of the first subset.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07415487&OS=07415487&RS=07415487
owner: Amazon Technologies, Inc.
number: 07415487
owner_city: Reno
owner_country: US
publication_date: 20041217
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS","Overview of Data Warehousing System","Data Warehouse Replication, Rough Synchronization and Virtualization","Data Warehouse Computational Infrastructure"],"p":["1. Field of the Invention","This invention relates to computer systems and, more particularly, to implementation of data warehousing systems.","2. Description of the Related Art","As increasing numbers of business functions within an enterprise are automated, the amount of data generated by the enterprise correspondingly increases. Such data may be distributed throughout the enterprise, for example within database systems and other types of systems implemented by different departments or geographical units. In some cases, useful analysis of enterprise data may be made across the natural boundaries between systems or locations that exist. To facilitate such analysis, a data warehousing system may be employed to aggregate data from multiple different systems or locations within a single system, such as a single database. Analysis tools may then target the single, aggregated system rather than various distributed data sources, which may simplify the design of the analysis tools and improve analysis performance.","Often, data warehousing systems support the storage and querying of very large quantities of data using high-end computer systems configured to provide needed analysis performance. However, high-end systems that are highly tuned to a particular data warehousing application can be expensive to procure and maintain, and may not scale well as the data warehousing needs of the enterprise grow. If only a single data warehousing system is provided, for example due to expense, data availability may be compromised if the single warehouse fails. On the other hand, if multiple data warehousing systems are provided, analysis applications may lose the simplicity of assuming a single, aggregated data source. For example, analysis applications may need to be configured to track the location of desired data within the multiple data warehouses.","Various embodiments of an apparatus and method for implementing data warehousing systems are disclosed. According to one embodiment, a system may include several data warehouses and a data warehouse manager configured to extract data sets from one or more data sources for storage in one or more of the data warehouses. Each of two or more data warehouses may be configured to store a respective replica of a data set extracted by the data warehouse manager. Further, the data warehouse manager may be configured to allow a query dependent upon the data set to be evaluated by one of the data warehouses before each respective replica of the data set has been stored to a corresponding additional one of the data warehouses. Similarly, the data warehouse manager may be further configured to allow a query dependent upon the data set to be evaluated by one of the data warehouses before a modification to the data set has been replicated to a corresponding additional data warehouse.","A method is further contemplated, which according to one embodiment may include extracting data sets from one or more data sources for storage in one or more data warehouses, storing a respective replica of a first data set in each of a first subset including two or more data warehouses, and allowing a query dependent upon the first data set to be evaluated by one of the first subset of data warehouses before each respective replica of the first data set has been stored to a corresponding data warehouse of the first subset.","According to a second embodiment, a system may include data warehouses configured to store data sets extracted from one or more data sources, and a data warehouse manager configured to present the data warehouses to a client as a single data warehouse. Location of the data sets within the data warehouses may be transparent to the client. Also, at a given time, a first data set stored by a first data warehouse and that is available at the given time to the client for querying may be dissimilar to a second data set stored by a second data warehouse and that is also available at the given time to the client for querying. In response to receiving from the client a query directed to a data set stored by one or more of the data warehouses, the data warehouse manager may be further configured to identify a particular one of the data warehouses capable of evaluating the query and to convey the query to the particular data warehouse for evaluation.","A method is further contemplated, which according to an embodiment may include extracting data sets from one or more data sources for storage in one or more data warehouses and presenting the data warehouses to a client as a single data warehouse. Location of the data sets within the data warehouses may be transparent to the client. In response to receiving from the client a query directed to a data set stored by one or more of the data warehouses, the method may further include identifying a particular one of the data warehouses capable of evaluating the query and conveying the query to the particular data warehouse for evaluation. At a given time, a first data set stored by a first data warehouse and that is available at the given time to the client for querying may be dissimilar to a second data set stored by a second data warehouse and that is available at the given time to the client for querying.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","In some complex enterprise computing environments, various sources of data may be distributed throughout the enterprise. For example, an enterprise may implement separate computer systems and\/or applications for different business functions, such as accounting, finance, e-commerce, human resources, procurement, manufacturing, distribution, etc. Further, such systems and\/or applications may be dispersed and replicated geographically, for example by providing distribution management systems at each distribution site. In some such enterprises, databases or other data stores as well as analysis tools and other applications may be specific to a site or function, and may peripherally interact with systems for other functions or sites.","Providing a specific business function or site with just the data and resources it needs to perform the majority of its tasks may avoid allocation of excess or redundant resources within the enterprise. However, in some instances, data from across the enterprise may need to be analyzed as a whole. For example, analysis of enterprise-wide financial or production trends may depend on the data generated and maintained at multiple different sites or across different departments. In some instances, data analysis tools may be configured to detect complex interrelationships across business functions that are not directly discernible from analysis of a single function in isolation. For example, a relationship may exist between personnel experience and training (tracked by human resources), distribution productivity and financial performance (e.g., reduced number of product returns due to distribution errors). Such a relationship may be identified by examining the data from each of these functions collectively for correlations.","In some embodiments, an enterprise may provide a centralized data warehousing system to facilitate processing and analysis of enterprise-wide data. Generally speaking, a data warehouse may include a database or other data repository that is configured to aggregate data stored in one or more data sources. The data sources may themselves be other databases or other applications within the enterprise that store or produce data. Often, data stored within a data warehouse is derivative of data stored elsewhere within the enterprise. However, in some instances, a data warehouse may also be configured to serve as primary storage for some data, such as enterprise-wide analysis data or even enterprise function or site data.","One embodiment of a data warehouse system is illustrated in . In the illustrated embodiment, data warehouse system  includes a data warehouse manager , which is configured to interact with a number of data warehouses represented by data warehouses -in . The number of data warehouses -illustrated in  is merely illustrative and may differ in other embodiments. Data warehouse manager  may also be configured to interact with an operations database . Data warehouse manager  is also configured to interact with one or more clients  and data sources , which may be external to data warehouse system  (e.g., distributed throughout an enterprise, or across multiple enterprises, at different logical or physical sites). In some embodiments, some clients  may be configured to interact with data warehouse manager  through a web services interface . In some embodiments, data warehouse manager  may be configured to interact with some data sources  through a web services interface (not illustrated).","In one embodiment, data warehouses -may include respective relational databases. For example, a given data warehouse  may include a database such as Oracle, DB2, Sybase, Informix, Adabas, or any other proprietary or open-source database. In some embodiments, different data warehouses  may implement different types of database software from different vendors. Generally speaking, a relational database may organize sets of data items into one or more regular structures, such as tables including rows and columns, although multidimensional relational database structures are also contemplated. Additionally, in many embodiments a relational database may be configured to evaluate queries against the data stored within the database, in order to select a subset of data that satisfies a given query. For example, a database may be configured to store customer order information, which may be organized as one or several tables including data such as a customer identifier, an order identifier, shipping status information, order cost, etc. A user seeking to identify all customers awaiting outstanding shipments may submit a query to the database specifying the selection of all customer identifiers having unshipped orders as of a particular date and\/or time. Responsively, the database may examine its contents and return those data records satisfying the constraints of the query. It is noted that in some embodiments, different data warehouses  may be located at different physical locations or sites, which, in conjunction with data set replication as discussed below, may enhance the reliability and availability of data sets by decreasing the likelihood that a failure at a single site will compromise all data warehouses .","It is noted that although data warehouses  may commonly include relational databases, in some embodiments a given data warehouse  may include a non-relational database. Typically, in relational databases, the meaning of a particular data item is implicitly described by the location of the data item within the table or other relational data structure. For example, in a particular two-dimensional relational database table, one column may be defined to store a customer identifier, another column may be defined to store shipping status information, and a third column may be defined to store order cost. Individual rows of the table may then correspond to specific order records, and any data item stored in the first column of a row may be interpreted as a customer identifier by virtue of its position. By contrast, in one embodiment a non-relational database may store data items whose interpretation is governed by explicit metadata associated with a given data item, rather than by the position of the data item within a defined data structure. For example, in one embodiment a data warehouse  may be configured to store data items as records delimited by a version of the eXtensible Markup Language (XML). In one such embodiment, a given data item such as a customer identifier may be delimited by a metadata field or tag that identifies the type of the data item. For example, the customer identifier \u201csmith\u201d may be stored as \u201c<cust_id>smith<\/cust_id>\u201d, where the metadata tag cust_id denotes that the data delimited by the tag may be interpreted as a customer identifier. In general, data items of records within non-relational databases may be stored in any order within the record, as the meaning of a given data item is stored explicitly along with the data item, rather than implicitly via the position of the data item.","As mentioned previously, in some embodiments data warehouses  may be configured to aggregate data stored elsewhere within an enterprise, such as by data sources . In some embodiments, as described in greater detail below, the quantity of data stored by data warehouses  may be quite large, for example on the order of multiple terabytes (TB). In the illustrated embodiment, data warehouse manager  may be configured to coordinate how data is retrieved and stored among data warehouses , as well as to coordinate access to data warehouses  by clients such as clients . Specifically, in one embodiment data warehouse manager  (or simply manager ) may be configured to extract data from one or more data sources , and to coordinate storage of the extracted data in one or more of data warehouses .","In some instances, manager  may additionally transform the extracted data before it is stored. For example, in one embodiment a given data warehouse  may store a table including data derived from several different data sources . In such an embodiment, manager  may be configured to transform the individual data items drawn from the different data sources  into the format required by given data warehouse . In some embodiments, transformation of data may include modification of the data itself, as opposed to rearranging or reformatting data. For example, in some embodiments manager  may be configured to scale or round particular data items before storing them in data warehouses , or may apply any other suitable transformation. In some embodiments, manager  may also be referred to as an extraction, transformation and load (ETL) manager.","In the illustrated embodiment, operations database  may be configured to store and track information pertaining to the operational state of data warehouse system , which may include information pertaining to the location of data items or sets of data (such as tables or individual records, for example) within data warehouses  as well as the state of data items or data sets with respect to outstanding operations to modify data within data warehouses . In some embodiments, operations database  may include a relational or non-relational database similar to those described above, including a query interface for accessing and modifying its contents, while in other embodiments operations database  may include a custom software application configured to interact with manager  through, for example, procedure calls defined in a custom application programming interface (API). The operation of manager  in conjunction with operations database , in various embodiments, to load data warehouses  and to virtualize the presentation of data warehouses  to clients  is described in greater detail below in conjunction with the descriptions of .","It is contemplated that in some embodiments, manager  and\/or operations database  may be implemented via robust, fault-tolerant systems. For example, overall reliability and availability of manager  and\/or operations database  may be increased through the use of redundant (e.g., hot standby) or clustered computer systems, such that manager or database operation may continue in the event of a failure of one or more systems. Any suitable type of failover mechanism may be employed to decrease the sensitivity of data warehouse system  to a failure of manager  or operations database .","Also, it is contemplated that in some embodiments, separating the implementation of manager  and\/or operations database  from that of data warehouses  may reduce the cost or complexity associated with data warehouse system . For example, such separation may facilitate the use of commodity computer systems and\/or database software to implement the control functions of manager  and operations database . Such separation may also facilitate scaling of data warehouse system  by enabling control hardware to be upgraded separately from data warehouse hardware. In some embodiments, such separation may also increase the overall availability of data warehouse system  and reduce failure recovery time. For example, if one data warehouse  should fail, operations database  and manager  may continue to load other data warehouses  while the failed warehouse is recovered. Similarly, if operations database  should fail, it may not be necessary to recover any of data warehouses , thus reducing overall failure recovery time.","Clients  may generally include any software application or other entity configured to access data warehouse system . For example, in one embodiment a client  may include an application configured to retrieve data (e.g., via a query). Such an application might include a data analysis application, a decision support system, a data viewing application, or any other suitable application. A client  may also include an administrative application or utility that may configure the operation of data warehouse system . For example, a data analyst or administrator may determine that a combination of data items from a particular set of data sources  should be aggregated by data warehouse system  for future analysis. The analyst or administrator may use a client  to instruct manager  to extract the relevant data set from data sources , for example on a one-time or recurring basis. In various embodiments, clients  may be configured to operate on any suitable type of system, such as general-purpose computer systems, handheld systems or embedded systems, for example. In some embodiments, a client  may be configured to interact with data warehouse system  via an intervening system. For example, a client  may be implemented via a client-server system (not shown) where the server system is configured to mediate communications between the client  and data warehouse system .","Instead of communicating directly with an API provided by manager , in some embodiments some or all of clients  may be configured to communicate with manager  via web services interface . Generally speaking, a web services interface may be configured to provide a standard, cross-platform API for communication between a client requesting some service to be performed and the service provider. In some embodiments, web services interface  may be configured to support the exchange of documents including information describing the service request and response to that request. Such documents may be exchanged using standardized web protocols, such as the Hypertext Transfer Protocol (HTTP), for example, and may be formatted in a platform-independent data format, such as XML, for example. By employing the web services model, including the use of standard web protocols and platform-independent document formatting, the number of types of interfaces manager  needs to support may be reduced, and cross-platform interoperability of clients  and manager  may be improved.","In some embodiments, data sources  may themselves include relational or non-relational databases, and may be distributed throughout the enterprise. Such databases may or may not be of the same type (e.g., vendor or format) as those of data warehouses . In other embodiments, data sources  may be applications other than databases, such as custom or proprietary applications configured to store data in document form or in another form. In such embodiments, manager  may be configured to communicate with the data source  using the necessary protocol for obtaining data (e.g., a particular format of procedure call defined by the data source's API). Data sources  may also include repositories of documents, such as collections or archives of transaction logs, email communications, word processor\/office application documents, images or multimedia files, web page documents, XML documents, metrics on the operation of an e-commerce site, or any other suitable type of document or data. For example, in one embodiment a data source  may include a network-attached mass media storage device, such as a standalone disk array or a storage device coupled through a Storage Area Network (SAN).","Regardless of the specific type(s) of data source , manager  may be configured to perform the appropriate operations to extract therefrom the desired data set(s), apply any necessary transformations to convert the data into a format suitable for storage in data warehouses , and to load the extracted data to one or more of data warehouses . Where the data content of a particular data source  is highly dissimilar in format to the data stored by data warehouses , manager  may be configured to analyze the data source  to derive a relevant metric or indication of the data content, or to invoke another application to perform such analysis.","Data stored by data warehouses  may be critical to the operation of the enterprise, in some instances. For example, in some embodiments analysis software may be configured to operate on warehoused data to generate reports and\/or identify trends, which may in turn influence operational decisions such as ordering\/procurement decisions, staffing decisions, etc. For example, enterprise-wide analysis of one day's production metrics may influence a decision to shift resources within the enterprise, reschedule the next day's production, expedite feedstock or inventory procurement, etc. Should data on which to perform relevant analysis be lost or corrupted within data warehouses , operational or strategic decision-making processes may be significantly impaired, or in some cases completely disabled.","Some warehoused data may be derivative of data stored by data sources , as described above, and in principle may be restored by reloading the relevant data to data warehouses  from those data sources . However, such reloading may take a significant amount of time to complete, for example if the quantity of data lost or corrupted is large, or if data sources  must access slower archival media (such as tapes or offline media) to retrieve the requested data. It may not be possible to reload the needed data in a timeframe that creates minimal disruption to processes that depend on warehoused data. Further, in some instances, data stored on data warehouses  may be the primary output of an application utilizing data warehouse system  (e.g., an analysis application) and so may not be restored simply by reloading it from data sources .","To decrease the likelihood of data loss and consequent disruption, in one embodiment a subset of data warehouses  may be configured to replicate a particular data set. That is, two or more of data warehouses  may be configured to store a respective replica of a data set, such as a table or set of records. One embodiment illustrating such replication is illustrated in . In the illustrated embodiment, data warehouses -are each configured to store replicas of tables containing customer order data and customer ship data. It is noted that in some embodiments, a particular data set may be replicated by an arbitrary number of data warehouses , from two up to the number of data warehouses  within data warehouse system . On the other hand, in some embodiments, certain data sets may not be replicated at all, or may be replicated on other data warehouses. In the illustrated embodiment, data warehouses -each include tables not replicated by the other (financial reporting data and session tracking data, respectively). It is noted that in some embodiments, different data sets may be stored by data warehouses  using different database schemas (e.g., using different data field definitions and\/or structure).","In some embodiments, the data sets stored by data warehouses  may be common to many different types of enterprises. For example, customer order and shipping data may be commonly available data sets within both brick-and-mortar enterprises and enterprises that provide virtual customer interfaces (e.g., web-based electronic commerce interfaces or e-commerce interfaces). However, in some embodiments, enterprises supporting e-commerce interfaces may be configured to collect and store substantial amounts of information regarding customer interaction with the enterprise, even before a sale occurs. In one embodiment, the session tracking data set illustrated in . may be configured to store data regarding any aspect of a customer's interaction with an e-commerce interface. For example, the session tracking data set may be configured to store data indicating the specific items a customer viewed during a visit to the enterprise's web site (e.g., a session), as well as the duration of the view, the links the customer navigated during the session, any searches performed by the customer, etc. Analysis applications may be configured to analyze these and other types of tracking data to discern customer preferences, predict likelihood of a customer's ordering various items, customize the e-commerce interface presented to the customer, etc.","However, it is noted that data warehousing and the various techniques described below may be equally applicable in enterprises without substantial e-commerce components. For example, some enterprises may have highly complex internal processes spanning numerous functional and geographical divisions, and may internally generate prodigious amounts of data available for warehousing even apart from the activity of external customers. Further, in some embodiments an enterprise may be sufficiently complex that it may employ information gathering strategies similar to the e-commerce oriented activities described above for activities and transactions internal to the enterprise. For example, different business units within an enterprise may interact with other business units as customers similar to external customers, and may generate customer data in a similar fashion.","In some embodiments, subsets of data warehouses  may be configured to store different types of data with varying degrees of replication. For example, in the embodiment of , data warehouses -may be configured to store customer order and ship data in a replicated fashion, as shown. In a similar embodiment, data warehouses -may be configured to store historical session tracking data (e.g., the previous fifteen months' worth of tracking data) in a replicated fashion (not shown). In such a configuration of data warehouses , warehouses -may form a functionally clustered or grouped set of warehouses particularly suitable for analyses involving customer order and ship data, while warehouses -may form a similarly functionally clustered set of warehouses particularly suitable for analyses involving session tracking data. In each case, relatively critical data may be replicated to help protect against data loss. In such a configuration of warehouses -, analysis-driven queries to customer data may also frequently target recent session tracking data. For example, analysis of customer ordering and shipping patterns may attempt to correlate such patterns to recent session tracking data (e.g., the previous 90 days' worth of tracking data). Thus, in the embodiment of , data warehouse is configured to store a set of session tracking data. However, in view of data warehouses -being configured to redundantly store a larger set of session tracking data (from which the set stored by data warehouse may be reconstructed if necessary), the session tracking data stored by data warehouse may not be replicated.","Clustering or grouping of data warehouses  with respect to certain data sets, such that different groups of data warehouses  may be optimized for different types of queries, may enable data warehouse system  to be more optimally tuned for an anticipated pattern of usage. For example, hardware systems underlying data warehouses  may be provisioned with more or fewer computing resources depending on the degree of activity a given clustering of data warehouses  is expected to handle, as described in greater detail below in conjunction with the description of . However, in other embodiments, data sets may be distributed across data warehouses  in a more homogeneous fashion. For example, in one embodiment each data warehouse  may include roughly the same set of computational resources, and data sets may be distributed in various degrees of replication across the roughly equivalent data warehouses . While hardware resources may be less optimally tuned with respect to data storage and retrieval activity in such an embodiment, a relatively homogenous implementation of data warehouses  may be more easily scaled, for example by adding additional, similarly configured data warehouses  as needed to process growing data analysis requirements.","As mentioned above, replication of data sets across data warehouses  may increase overall reliability of data by decreasing the likelihood that failure of a given data warehouse  will result in data loss. Such replication may also increase the availability of data sets by increasing the number of data warehouses  that can provide replicated data sets to clients, for example in response to queries. In the embodiment of data warehouse system  illustrated in , manager  may be configured to coordinate the storage of data to data warehouses , including any replication of data sets among multiple warehouses . Thus, in the illustrated embodiment, whether a given data set is replicated or not may be transparent to a particular data warehouse . However, it is contemplated that in some embodiments, the management and replication of data sets across data warehouses  described herein as a function of manager  may instead be distributed cooperatively among data warehouses , or implemented by a particular data warehouse  configured to function as both data warehouse and manager.","Individual data sets stored by data warehouses  may in some instances be quite large, for example on the order of hundreds of megabytes (MB) or gigabytes (GB). Further, even partial updates to a given data set by manager , for example in response to a periodic extraction of new operational data from data sources , may include substantial quantities of data to be conveyed to a given data warehouse . If a data set is replicated across several data warehouses , ultimately the data including the data set as well as ongoing updates to that data will be stored among those several data warehouses . However, such storage may not occur instantaneously. For example, even if manager  simultaneously commenced storing identical data to data warehouses -, the data storage may not complete at the same time in both data warehouses -. Factors such as differing computational load (e.g., servicing of queries) as well as underlying resource configurations may cause one data warehouse  to finish the storage operation more quickly than another. Consequently, at any given time before the storage operation completes on both data warehouses -, the state of the data set being stored may differ on data warehouses -. The data set may also be referred to as being out of synchronization or unsynchronized while in this state.","Unsynchronized data could present problems for clients  attempting to retrieve the data. For example, if a given replicated data set were in two different states on data warehouses -when a query targeting the given data set was received by manager , the query could return two different results depending on the state of the given data set in the particular data warehouse  to which the query was directed for evaluation. Such inconsistency could result in inconsistent client operation, particularly if the replication of data sets among data warehouses  (or more broadly, the general configuration of data warehouse system ) is transparent to clients .","One approach to preventing inconsistent client behavior due to uncontrolled access to unsynchronized data may include manager  preventing any access to a replicated data set while that data set is unsynchronized across multiple data warehouses . For example, in one embodiment manager  may be configured to implement updates to replicated data sets as atomic or transactional operations. Generally speaking, an atomic or transactional operation involving synchronization across multiple entities is treated as indivisible with respect to other operations; that is, such an operation completes to either all or none of the entities involved before another operation targeting those entities is allowed to proceed. Thus, in one embodiment manager  may disallow attempts to access a replicated data set being stored or modified until all replicas of the data set stored on all relevant data warehouses  have completed, thereby ensuring that a client does not receive inconsistent results when attempting to access the replicated data set.","However, implementing atomic or transactional synchronization across all data set replicas may significantly decrease performance of data warehouse system . For example, where a given replicated data set is large, significant latency may be incurred in waiting for updates to all data set replicas to complete before the data set can be accessed. Consequently, in one embodiment manager  may be configured to roughly synchronize data sets replicated across data warehouses . In one embodiment, rough synchronization of a data set may include atomically synchronizing updates to a replicated data set within a particular data warehouse  while allowing accesses to other replicas of that data set stored by other data warehouses . That is, in one embodiment manager  may atomically lock a particular table of a particular data warehouse  (such as the customer order data table of data warehouse shown in ) against other read or write accesses while updating that particular table. Meanwhile, manager  may conditionally allow a replica of the particular locked table to be accessed on another data warehouse  (e.g., the replicated customer order data table of data warehouse ). In an alternative embodiment, manager  may atomically lock an entire data warehouse  while updating a data set stored therein, or may lock only a portion of a data set being updated, such as a row within a table; it is contemplated that any suitable locking granularity may be employed by manager . It is additionally contemplated that in some embodiments, manager  may be configured to lock a portion of a data set being updated on a given data warehouse  while allowing an unlocked portion of the same data set on the given data warehouse  to be separately accessed for reading or updating.","In one embodiment, manager  may conditionally allow access to one data set replica while another data set replica is being updated if the access does not depend on the data update. For example, a client  may submit a query requesting all customer ship data for the previous complete calendar quarter (e.g., excluding the current calendar quarter). Meanwhile, manager  may be in the process of extracting customer ship data for the previous day from numerous customer fulfillment sites, each of which may include a data source . Manager  may be configured to update the customer ship data table stored by data warehouse , using any appropriate locking scheme to ensure synchronization within data warehouse . While the update to warehouse is ongoing, queries against its replica of customer ship data (or, in some embodiments, queries against any data within warehouse ) may be disallowed. However, manager  may be configured to detect that the submitted query for customer ship data for the previous calendar quarter does not depend on the update currently ongoing to data warehouse . That is, all the data necessary to satisfy the query may be present within data warehouse , even though the customer ship data within data warehouse is not completely synchronized with the replica within data warehouse . Consequently, manager  may allow the query to be evaluated by data warehouse before the customer ship data updates have been stored to data warehouse . In this example, the data set in question is not perfectly synchronized across data warehouses -, but rather roughly synchronized, where data warehouses  having sufficient data to evaluate a query are allowed to do so even if they do not possess the most current version of the data set in question.","In the embodiment of data warehouse system  shown in , manager  may be configured to utilize operations database  to maintain information about data sets stored by data warehouses , such as information identifying the location(s) where a given data set is stored (e.g., the specific data warehouses  having the sole copy or a replica of the given data set) as well as information identifying the state of each copy of a data set with respect to any ongoing update activity. For example, in one embodiment operations database  may include a respective record corresponding to each copy of the customer ship data table stored by data warehouses . For the embodiment shown in , operations database  may store two such records, each of which identifies respective data warehouses -as storing respective replicas of the customer ship data table. Further, each record may include a field indicating the status of the table within the corresponding data warehouse -. Referring to the example given in the previous paragraph, while manager  is coordinating the update of the customer ship data table within data warehouse , the corresponding record within operations database  may indicate that that replica is being updated, is unavailable, or other suitable status. In contrast, the record for the customer ship data replica stored by data warehouse may indicate that the replica is not being updated, or that its update has already completed.","In various embodiments, operations database  may be configured to store different types of data identifying the location and state of data sets. For example, location identifying data may include unique identifiers for data warehouses , such as system names, internet protocol (IP) addresses, or other suitable identifiers. State information may range from simple semaphores indicating whether a given data set is being updated or not to more complex fields characterizing the state of a given data set. For example, in some embodiments, state information corresponding to a data set may indicate the last time it was updated, the data sources  used to perform the update, the cause of the update (e.g., due to a scheduled operation or a manual operation), or any other suitable state information. In some embodiments, manager  may be configured to use transactional operations to read and\/or modify operations database  in order to ensure synchronization of operational state (for example, in embodiments where manager  is configured to support multiple concurrent read or write operations to data warehouses ).","The location and state information stored by operations database  may be used by manager , in one embodiment, to implement rough synchronization of data stored by data warehouses . That is, manager  may be configured to consult operations database  when extracting and storing data into data warehouses , as well as when receiving operations to retrieve stored data (e.g., queries). One embodiment of a method of storing extracted data into data warehouses  using rough synchronization is illustrated in . Referring collectively to  through , operation begins in block  where an operation to extract a data set from one or more data sources begins. For example, in one embodiment manager  may be configured to extract a data set such as customer ship data from one or more data sources , such as customer fulfillment sites distributed throughout an enterprise, on a recurring basis (e.g., hourly, nightly, weekly). Alternatively, a user or application may request via a client  that a data set be extracted and stored. In some embodiments, it is contemplated that multiple data sets may be concurrently extracted from data sources  and updated within one or more data warehouses . For example, multiple data sets may be concurrently extracted and stored as a batch job or process, such as a scheduled batch job, or data sets may be dynamically streamed from data sources  and updated within data warehouses .","Subsequently, manager  retrieves the extracted data, for example by issuing queries or other commands to data sources  to elicit data (block ). Extracted data may be transformed if necessary (block ). For example, extracted data may need to be reformatted, or the data itself modified according to the data storage requirements of data warehouses  as described above.","Manager  then determines which data warehouses  host the extracted data set (block ). For example, in one embodiment manager  may consult operations database  to determine the locations where the extracted data set resides, according to records stored therein. Manager  then selects a particular data warehouse  to update with the extracted data set, and updates state information associated with the data set to indicate that the update is occurring (block ). In some embodiments, manager  may be configured to update each data warehouse  that hosts the extracted data set in a parallel or overlapping fashion, although these updates may begin or end at different times. Such parallelism is illustrated in  with respect to the repeated ones of blocks -, which may be performed in parallel for each of several different data sets or data set replicas. For example, manager  may be configured to begin updating the extracted data set on several different data warehouses  at the same time, or may stagger the updates such that they partially overlap in time. Also, it is noted that in some embodiments, multiple different data sets may be concurrently updated within multiple different data warehouses .","In other embodiments, manager  may be configured to update data warehouses  in a serial or conditional fashion. For example, if the extracted data set is replicated by a subset of data warehouses , manager  may randomly select a particular data warehouse  to begin updating. Alternatively, manager  may select the least busy data warehouse  of the subset, or may use some other selection criterion. In some embodiments where operations database  tracks outstanding data set read operations, a data warehouse  may not be selected for a data set update if the data set is currently being read (e.g., by a query). Once a data warehouse  is selected, in one embodiment manager  may update state information in the record stored in operations database  associated with the data set and selected data warehouse  to indicate that the data set is being modified on the selected data warehouse. As noted above, in some embodiments manager  may use transactional operations to interact with operations database , for example to ensure proper ordering of multiple concurrent operations.","The extracted data set is then stored to the selected data warehouse  (block ). It is noted that other replicas of the data set may be accessed and\/or updated via other data warehouses  while the update to the selected data warehouse  proceeds. Once the update is complete, manager  updates the state information associated with the data set to indicate the completion of the update (block ).","It is contemplated that in some embodiments, manager  need not buffer the extracted data set while it is stored in turn to its corresponding data warehouses . In one alternative embodiment, manager  may select a data warehouse  to update before beginning data extraction from data sources . Manager  may then stream or cause to be streamed the extracted data (applying appropriate transformations) to the selected data warehouse , and may subsequently use the updated data warehouse  as the data source for updating other data warehouse . It is further contemplated that in some embodiments, multiple data warehouses  may be updated concurrently, rather than in sequence. For example, if a given data set is replicated in three data warehouses , two of them could be concurrently updated while leaving the third available for queries to the given data set. Finally, in some embodiments total synchronization (as opposed to rough synchronization) may be achieved by updating all (or a selected subset of) data warehouses  concurrently, indicating state appropriately in operations database .","One embodiment of a method of querying data stored by data warehouses  using rough synchronization is illustrated in . Referring collectively to  through , operation begins in block  where query operation dependent upon one or more data sets stored by data warehouses  is received. For example, in one embodiment manager  may be configured to receive such queries from clients , either directly or via web services interface .","Subsequently, manager  analyzes the received query to determine the data set dependencies of the query (block ). In some embodiments, determining data set dependencies may include determining the specific data sets referenced by the query, as well as any additional state information pertinent to the data sets depended on. For example, in one embodiment manager  may determine that a particular query depends on the customer ship data table illustrated in , and further that the data depended upon is data for the previous calendar quarter.","Manager  then determines the locations within data warehouses  of the data sets depended on, as well as current state information associated with the stored data sets (block ). For example, manager  may consult operations database  to determine, for each data set depended on, which data warehouses  host a copy of that data set, as well as the state information associated with that copy (e.g., currently being updated, current as of a particular date, offline for maintenance, etc.)","Based upon its analysis of data set dependencies of the received query as well as information about the location and state of data sets within data warehouses , manager  determines whether any data warehouse  has sufficient data to evaluate the received query (block ). For example, in one embodiment manager  may determine that a data warehouse  has sufficient data to evaluate a given query if it has a copy of each data set depended upon by the query, if each data set depended upon is not otherwise being updated (e.g., by an extract-and-store operation such as illustrated in ), and if each data set depended upon satisfies the state requirements of the query (e.g., that each data set is at least as current as any date range specified by the query). In other embodiments, manager  may use different or additional criteria to determine whether the data sufficiency of a given data warehouse  with respect to a given query. For example, such criteria may include information about the capabilities or resources of the data warehouse , such as its ability to evaluate certain types of query languages or its available computational resources for handling complex queries.","In some embodiments, one or more data warehouses  may be configured to manage query evaluation resources, such as by limiting the number of queries that may be concurrently evaluated by a given data warehouse . For example, a data warehouse  may be configured to provide a certain number of \u201cjob slots\u201d for query execution, and may be unavailable to accept further queries if all slots are occupied. In some embodiments, a given query may correspond to one available job slot regardless of the complexity of the query. In other embodiments a more complex query may occupy multiple job slots, or other types of load balancing strategies may be employed by data warehouse . In some embodiments, manager  determining whether a given data warehouse  has sufficient data to evaluate a given query may also take into account available query evaluation resources of the given data warehouse . For example, in one embodiment a data warehouse  that has sufficient data to evaluate a query but no available resources for query evaluation may not be selected by manager .","If no data warehouse  has sufficient data to evaluate the received query (or, in some embodiments, if no data warehouse  has sufficient available resources to evaluate the received query), manager  may queue the query until such time as a sufficient data warehouse  can be identified (block ). For example, in one embodiment, manager  may identify that the received query depends on a data set that is currently being updated to a particular data warehouse , and may schedule the query to be evaluated on that particular data warehouse  once the update is complete. Alternatively, manager  may occasionally reevaluate queued queries to determine whether a data warehouse  has become available to evaluate a query. In some embodiments, to avoid client deadlock, manager  may impose a limit on the length of time a query may remain queued, and may return an error condition to a client if its query exceeds the queuing time limit.","If a data warehouse  sufficient to evaluate the received query is identified, manager  conveys the received query to that data warehouse  for evaluation (block ). It is noted that, under rough synchronization, a query targeting a particular data set may be evaluated by one data warehouse  while a replica of the particular data set is being updated on another data warehouse .","A timing diagram illustrating one embodiment of a relationship between updating of data sets and queries of data sets under rough synchronization is shown in . In the illustrated timing diagram, manager  begins updating a particular data set at time Ti, where the data set is replicated by data warehouses -. Subsequently, a query targeting the data set being updated is received by manager  at time T. The data set update is complete at data warehouse at time T later than T, and is complete at data warehouse at time T later than T.","In the illustrated embodiment, three possible timeframes for evaluation of the received query are shown. In the first case, the query may be satisfiable by the pre-update contents of the data set being updated. For example, manager  in conjunction with operations database  may determine that the data necessary to evaluate the query does not depend on the current update. In this case, the query may be evaluated by any available data warehouse  that hosts the relevant data set after time T. That is, the query may be evaluated as soon as practicable after it is received, which may incur a delay in some instances. For example, in some embodiments, a query may not be allowed to evaluate on a data warehouse  that is currently being updated, as noted above. Further, in some instances, data warehouses  may be too busy to immediately accept the query. However, in some embodiments, in the case of the query depending on pre-update data, there need not be any update-related temporal restriction on when the query may execute after time T.","In the second and third cases, the query may depend on post-update contents of the data set being updated. That is, the query may require for its correct evaluation the data reflected in the data set update commenced at time T. In the illustrated embodiment, this update completes at data warehouse at time T, and at data warehouse at time T. Correspondingly, the query may be evaluated by data warehouse at any time after time T, and by data warehouse at any time after time T. As noted previously and as illustrated in , under rough synchronization, a query may be evaluated by a particular data warehouse  before all replicas of a data set targeted by that query have been updated, and in some cases (e.g., where the query depends on pre-update data) before the replica of that data set has been updated on the particular data warehouse . As noted above, in some embodiments a query targeting a particular data set may be evaluated by one data warehouse  while the particular data set is being stored to another data warehouse . Additionally, in some embodiments, after the particular data set has been stored to any given data warehouse , that given data warehouse  may evaluate a query directed to the particular data set. For example, after a replicated data set has been updated to some or all corresponding data warehouses , any of the updated data warehouses  may be able to satisfy a query to the replicated data set.","Also, it is noted that in some embodiments employing fine-grained mechanisms for locking portions of data sets, as described above, a given data warehouse  hosting a data set being updated may be available to evaluate a query to that data set before the update is complete. For example, in some embodiments manager  and operations database  may be configured to track the state of portions of data sets (e.g., individual rows or sets of rows of a table). While one portion of a particular data set is being updated on a given data warehouse , manager  may determine that a given query depends on a portion of the particular data set that is not currently being updated, and may consequently allow the query to be evaluated by the given data warehouse . In such embodiments, a query to a portion of a data set that is not undergoing an update may be functionally treated as though the query were dependent upon a data set independent from the data set being updated, and may be allowed to evaluate independently of the update. In the context of , such a query may be allowed to evaluated any time after it is received at time T, without synchronizing with the update completion points at times T and T.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIGS. 5B-5D","FIG. 5A","FIGS. 5B-5D","FIG. 5B","FIG. 5A","FIG. 5B"],"b":["120","1"],"i":["a","b"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 5C","FIG. 5A","FIG. 5C","FIG. 5D","FIG. 5A","FIG. 5C"],"b":["120","120","3","4","4","120","120"],"i":["a ","b ","a","b ","a","b"]},"It is noted that in some embodiments, the organization of data warehouse system  may be completely transparent to clients  configured to interact with system . That is, in some embodiments, clients  may have no direct knowledge of the location or status of a given data set within data warehouses . In some such embodiments, manager  may be configured to present data warehouses  as a single virtual data warehouse as seen from the perspective of clients  (e.g., manager  may be configured to virtualize data warehouses ). Thus, in some such embodiments, manager  may be free to replicate data sets to an arbitrary degree, to relocate data sets among data warehouses , or to otherwise alter the organization of data stored within system , while presenting a single, stable interface (such as a query interface) to clients .","In one embodiment, at any given time, multiple data sets stored by data warehouses  may be available for querying by a given client , and at any given time one of the stored data sets may be dissimilar from another one of the stored data sets. For example, the two stored data sets may be dissimilar because they are defined to store different types of data. Alternatively, two stored data sets may be configured to replicate the same data, but may be dissimilar at a given time due to the operation of rough synchronization as described above. In some embodiments, multiple data sets under either of these scenarios may be available for querying by clients , and manager  may be configured to manage the details of how such data sets are arranged and manipulated within data warehouse system  in a manner transparent to clients .","Virtualization of data warehouses  with respect to clients  may occur irrespective of whether data sets stored within data warehouses  are replicated. One embodiment of a method of virtualizing data warehouses  to a client  as a single data warehouse is illustrated in . Referring collectively to  through , operation begins in block  where manager  stores location information regarding the data sets populating data warehouses . For example, in one embodiment, manager  may store location information for each data set in operations database , along with other information identifying the state of the data set, whether the data set is replicated, etc.","Subsequently, manager  receives a query targeting a particular data set stored within data warehouse system  (block ). Responsively, manager  identifies a particular data warehouse  capable of evaluating the received query (block ). For example, manager  may be configured to analyze the query to detect data set and state dependencies as described above, and to consult operations database  to identify a data warehouse  (or more than one, if the data set is replicated) that can evaluate the query. Other factors, such as ongoing data set updates, data warehouse workload, etc. may influence the identification of a suitable data warehouse  for query evaluation.","Once a data warehouse  has been identified to evaluate the received query, manager  conveys the query to the selected data warehouse  for evaluation (block ). The query is then evaluated (block ) and results are returned to the requesting client  via manager  (block ). It is noted that in some embodiments, all steps between submission of a query and receipt of query results may be transparent to a client . It is further noted that in some instances, manager  may queue a query if it cannot immediately identify a suitable data warehouse  for evaluation. Additionally, manager  may return an error condition to a requesting client  in some instances, for example if a query is malformed or times out waiting for a data warehouse .","Each of data warehouses  may include a respective set of computational hardware as well as operating system software and data warehousing software (e.g., database software) configured to implement the data warehousing function. In some embodiments, the computational hardware used may include proprietary, high-end multiprocessor computer systems that may be carefully integrated with customized versions of operating systems and data warehousing software specific to a particular installation. However, such configurations may be expensive to purchase, administer and maintain. Consequently, in some embodiments, any or all of data warehouses  each may include a respective computing cluster assembled from less-expensive (e.g., commodity) computer systems running operating systems and\/or data warehousing software that is widely distributed or open-source.","One embodiment of a computing cluster on which a data warehouse  may be implemented is illustrated in . In the illustrated embodiment, data warehouse cluster  (or simply, cluster ) includes a number of computing nodes  (or simply, nodes ). Each of nodes  is coupled to each of a number of switches , and each switch  is coupled to a respective number of storage arrays . Thus, in the illustrated embodiment, each node  may access any of storage arrays  through an appropriate switch . In one embodiment, cluster  may include sixteen nodes , eight switches , and 64 storage arrays . However, it is noted that in various embodiments, arbitrary numbers of nodes , switches  and storage arrays  as well as various topologies for interconnecting these elements may be employed.","In one embodiment, each of nodes  may include a uniprocessor or multiprocessor computer system, as described in greater detail below in conjunction with the description of . In some embodiments, nodes  may include generic server, personal computer or workstation systems available from any of a number of vendors including Sun Microsystems, Hewlett-Packard, IBM, Dell, or any suitable system manufacturer. Further, nodes  may be configured to execute one or more suitable operating systems, such as an operating system compliant with a version of Linux, Microsoft Windows, Solaris, HP-UX, AIX or any other suitable generally-available or proprietary operating system.","Generally speaking, each of nodes  may be operable to evaluate queries received via manager , as well as other data warehouse operations, against data sets that may be stored via storage arrays , while switches  provide interconnectivity between nodes  and storage arrays . Thus, in the illustrated embodiment, a query being evaluated on a particular node  may uniformly access data sets stored on any of storage arrays . In other embodiments, data sets may be nonuniformly available to nodes . For example, a given node  may be mapped to a specific one or more of storage arrays  that include some data sets but not others. In such embodiments, multiple nodes  may need to participate in the evaluation of a particular query, depending on how the data sets depended on by the query are distributed across storage arrays .","In some embodiments, switches  and storage arrays  may include a storage area network (SAN). For example, switches  may be coupled to nodes  and storage arrays  using Fibre Channel interconnects, or other suitable SAN interconnect and management technologies. However, it is contemplated that any suitable type of network may be used to interconnect the devices of cluster . For example, in one embodiment, Gigabit Ethernet or 10-Gigabit Ethernet may be used as the interconnect technology.","Each of storage arrays  may include one or more mass storage devices, such as fixed magnetic-disk drives. For example, in one embodiment each storage array  may include an identical number of SCSI (Small Computer Systems Interface) hard drives configured as a Redundant Array of Independent Disks (RAID array). The various storage features supported by a storage array , such as disk striping, mirroring, and data parity, for example, may be managed by the storage array  itself. For example, storage array  may include, in addition to mass storage devices, additional hardware configured to manage those devices. Alternatively, a storage array  may be relatively passive, and its storage features may be managed by an intelligent switch . It is contemplated that a given storage array  may include other types of storage devices in addition to or instead of magnetic disks, such as optical media or magnetic tape, for example. Further, it is contemplated that in some embodiments, each of storage arrays  may be identically configured, while in other embodiments, storage arrays  may be heterogeneous in their configuration and\/or feature set.","In some embodiments, cluster  may be readily scalable to match the expected workload of a given data warehouse . For example, if a data warehouse  is expected to house a large quantity of data that receives infrequent or relatively simple queries, the storage arrays  may be provisioned to store the expected quantity of data (including any desired data set replication as described above) while nodes  may be separately provisioned based on the expected workload. If query workload or storage requirements should increase, additional nodes , switches , and\/or storage arrays  may be added later.","It is contemplated that in some embodiments, any of the methods or techniques described above, e.g., the functions of manager  or data warehouses , or the methods illustrated in ,  and , may be implemented as program instructions and data capable of being stored or conveyed via a computer-accessible medium. Such program instructions may be executed to perform a particular computational function, such as data warehousing and virtualization, storage management, query and data set analysis, query evaluation, operating system functionality, applications, and\/or any other suitable functions. In one embodiment, nodes  may include computer-accessible media. One embodiment of a computer system that may be illustrative of a given node  is illustrated in . In the illustrated embodiment, computer system  includes one or more processors  coupled to a system memory  via an input\/output (I\/O) interface . Node  further includes a network interface  and a SAN interface , each coupled to I\/O interface .","It is noted that in some embodiments, an instance of computer system  may be configured separately from a cluster  and configured to execute other applications or functions within data warehouse system . For example, in one embodiment, one or more instances of computer system  may be provisioned externally to a cluster  and configured to execute program instructions and data that may be stored or conveyed via a computer-accessible medium and configured to implement manager . In some such embodiments, the configuration of an instance of computer system  configured to implement manager  may differ from that shown in . For example, in some embodiments, such an instance of computer system  may include more or fewer processors . Further, while in some embodiments such an instance may preserve SAN interface , this interface may also be omitted.","As noted above, in various embodiments computer system  may be a uniprocessor system including one processor , or a multiprocessor system including several processors  (e.g., two, four, eight, or another suitable number). Processors  may be any suitable processor capable of executing instructions. For example, in various embodiments processors  may be a general-purpose or embedded processor implementing any of a variety of instruction set architectures (ISAs), such as the x86, PowerPC, SPARC, or MIPS ISAs, or any other suitable ISA. In multiprocessor systems, each of processors  may commonly, but not necessarily, implement the same ISA.","System memory  may be configured to store instructions and data accessible by process . In various embodiments, system memory  may be implemented using any suitable memory technology, such as static random access memory (SRAM), synchronous dynamic RAM (SDRAM), nonvolatile\/Flash-type memory, or any other type of memory. In the illustrated embodiment, program instructions and data implementing desired functions, such as those described above, are shown stored within system memory  as code .","In one embodiment, I\/O interface  may be configured to coordinate I\/O traffic between processor , system memory , and any peripheral devices in the device, including network interface , SAN interface , or other peripheral interfaces. In some embodiments, I\/O interface  may perform any necessary protocol, timing or other data transformations to convert data signals from one component (e.g., system memory ) into a format suitable for use by another component (e.g., processor ). In some embodiments, I\/O interface  may include support for devices attached through various types of peripheral buses, such as a variant of the Peripheral Component Interconnect (PCI) bus standard or the Universal Serial Bus (USB) standard, for example. In some embodiments, the function of I\/O interface  may be split into two or more separate components, such as a north bridge and a south bridge, for example. Also, in some embodiments some or all of the functionality of I\/O interface , such as an interface to system memory , may be incorporated directly into processor .","Network interface  may be configured to allow data to be exchanged between computer system  and other devices attached to a network. For example, manager  may be configured to execute on a computer system  external to a cluster , and a particular computer system  configured as a node  within cluster  may communicate with manager  on the external system via network interface . In various embodiments, network interface  may support communication via wired or wireless general data networks, such as any suitable type of Ethernet network, for example; via telecommunications\/telephony networks such as analog voice networks or digital fiber communications networks; via storage area networks such as Fibre Channel SANs, or via any other suitable type of network and\/or protocol.","In one embodiment, SAN interface  may be configured to allow data to be exchanged between computer system  and storage arrays  via switches . In some embodiments, as described above, SAN interface  may include a Fibre Channel interface or another suitable interface. However, it is contemplated that in some embodiments, SAN connectivity may be implemented over standard network interfaces. In such embodiments, computer system  may provide a single network interface (e.g., network interface ) for communication with both storage devices and other computer systems, or computer system  may spread storage device and general network communications uniformly across several similarly configured network interfaces.","In some embodiments, system memory  may be one embodiment of a computer-accessible medium configured to store program instructions and data as described above. However, in other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk, CD-ROM or DVD-ROM coupled to computer system  via I\/O interface , or a storage array  coupled to computer system  via SAN interface . A computer-accessible medium may also include any volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, that may be included in some embodiments of computer system  as system memory  or another type of memory. Further, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as a network and\/or a wireless link, such as may be implemented via network interface  or SAN interface .","Although the embodiments above have been described in detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 5B-D"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
