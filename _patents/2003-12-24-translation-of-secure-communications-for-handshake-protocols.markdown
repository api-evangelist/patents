---
title: Translation of secure communications for handshake protocols
abstract: Systems and methods of the invention provide translation of secure communications for handshake protocols. A system is provided that includes a first client application, a server application, and a translation component. The first client application is configured to transmit and receive communications via a network. The server application configured to receive queries from at least one client application via the network and to transmit responses to at least one client application via the network. The translation component is configured to receive communications from the first client application and translate the received communications into queries that are understandable to the server application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07302564&OS=07302564&RS=07302564
owner: i-net Software GmbH
number: 07302564
owner_city: Berlin
owner_country: DE
publication_date: 20031224
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The invention concerns translation of secure communications for handshake protocols. More specifically, one or more embodiments of the invention provide the ability to translate Secure Sockets Layer (SSL) communications for use in one or more Structured Query Language (SQL) databases.","Over the past several years, the Internet and other computer networks have become increasingly accepted and popular as conduits for conducting business and performing other sensitive transactions. For example, online shopping, banking, and security trading over the Internet, all of which can involve the transmission of sensitive, personal, and financial information, have become commonplace.","As activities requiring sensitive transactions have become more commonplace, so too have security concerns surrounding these transactions. In response, several security features have been implemented to secure sensitive transactions over the Internet and other computer networks. For example, a Secure Sockets Layer (SSL) has been developed to establish a secure communications link or connection between a client and a server. This secure connection is established using a public key cryptography technique, whereby a secret key for the session is exchanged as the server transmits its public encryption key to the client, and the client randomly generates a private key that is encrypted using the public key and transmitted back to the server.","Communications over computer networks using a variety of protocols can be made more secure using SSL. One example of such a communications protocol that occurs via the World Wide Web (WWW) is the Hypertext Transport Protocol (HTTP), which can be accomplished over SSL using HTTP over SSL, which is also referred to as Hypertext Transport Protocol Secure (HTTPS). Similarly, other communications protocols can be used over SSL, such as the File Transfer Protocol (FTP), the Simple Mail Transfer Protocol (SMTP), and others. Frequently, communications over SSL use a different Transmission Control Protocol\/Internet Protocol (TCP\/IP) port than non-secure or unencrypted communications. For example, standard HTTP communications use port , while HTTPS communications often use port .","Some applications and servers, however, do not follow the convention of using different communications channels (e.g., communicating via different TCP\/IP ports) for encrypted and unencrypted communications. For example, some servers that service incoming requests, such as structured query language (SQL) requests, use the same communications channel (e.g., TCP\/IP port ) for both unencrypted and encrypted communications (e.g., communications over SSL).","One example of such a server that uses the same communications channel for both unencrypted communications and encrypted communications over SSL is the SQL server available from Microsoft Corp (referred to herein as the MS SQL Server). The MS SQL Server (which is used generically herein as referring to MS SQL Server 2000, or other comparable versions of the MS SQL Server) includes the SSL handshake as part of the standard Tabular Data Stream (TDS) handshake used by the server. Because this SSL handshake is packaged within the proprietary TDS handshake of the server, however, standard SSL software libraries cannot be used to service the SSL communications transmitted to and received from the server.","Therefore, it is desirable to provide a technique that allows standard libraries to service encrypted communications, such as SSL communications, transmitted to and received from a server that packages the encryption handshake protocol associated with the encrypted communication in a proprietary handshake protocol.","Accordingly, one or more embodiments of the invention provide translation of secure communications for handshake protocols. For example, according to an embodiment of the invention, a method is provided that receives encrypted data transmitted over a network, determines whether a handshake protocol is required to handle the encrypted data, initiates a handshake protocol, if it is determined that a handshake protocol is required, and transmits the encrypted data after the handshake protocol has been executed.","According to another embodiment of the invention, a method is provided that initiates a handshake protocol, determines if data to be transmitted is encrypted. If it is determined that the data is encrypted, the method initiates a secure protocol and transmits the encrypted data.","According to another embodiment of the invention, a system is provided that includes a first client application, a server application, and a translation component. The first client application is configured to transmit and receive communications via a network. The server application configured to receive queries from at least one client application via the network and to transmit responses to at least one client application via the network. The translation component is configured to receive communications from the first client application and translate the received communications into queries that are understandable to the server application.","Further features of the invention, and the advantages offered thereby, are explained in greater detail hereinafter with reference to specific embodiments illustrated in the accompanying drawings, wherein like elements are indicated by like reference designators.","Systems and methods of the invention provide translation of secure communications for handshake protocols. For example, one or more embodiments of the invention provide translation of a secure communication, such as an encrypted communication (e.g., SSL, etc.), for use by or received from a proprietary server handshake protocol. According to one or more embodiments of the invention, translation of SSL communications for structured query servers (e.g., SQL servers, MS SQL Server, etc.) that use proprietary handshake protocols can be accomplished by providing one or more translation layers that allow a standard SSL library, such as the Java Secure Socket Extension (JSSE), to support the proprietary handshake. This compatibility is facilitated by an additional layer that is translated from the protocol of the standard SSL library to the handshake protocol of a structured query server (e.g., the MS SQL Server, etc.). For example, translation to or from a structured query handshake protocol that uses named pipes can be achieved according to one or more embodiments of the invention.","According to an embodiment of the invention, a method is provided that receives encrypted data transmitted over a network, determines whether a handshake protocol is required to handle the encrypted data, initiates a handshake protocol, if it is determined that a handshake protocol is required, and transmits the encrypted data after the handshake protocol has been executed.","According to another embodiment of the invention, a method is provided that initiates a handshake protocol and determines if data to be transmitted is encrypted. If it is determined that the data is encrypted, the method initiates a secure protocol and transmits the encrypted data.","According to another embodiment of the invention, a system is provided that includes a first client application, a server application, and a translation component. The first client application is configured to transmit and receive communications via a network. The server application configured to receive queries from at least one client application via the network and to transmit responses to at least one client application via the network. The translation component is configured to receive communications from the first client application and translate the received communications into queries that are understandable to the server application.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","110","150","110","110"]},"The processor system  includes a processor , which according to one or more embodiments of the invention, can be a commercially available microprocessor, such as the 80\u00d786 series of microprocessors available from Intel Corp., the Power PC series of microprocessors available from Motorola, Inc., the AMD series of microprocessors available from Advanced Micro Devices, Inc., or other similar microprocessors. Alternatively, the processor  can be an application-specific integrated circuit (ASIC), which is designed to achieve one or more specific functions, or enable one or more specific devices or applications. For example, the processor can be an ASIC designed to process network communication requests (e.g., structured data queries, etc.), decrypt or encrypt communications, and so forth.","Alternatively, the processor  can optionally include one or more individual sub-processors or coprocessors. For example, the processor can include a graphics coprocessor that is capable of rendering graphics, an encryption\/decryption coprocessor, a database query processor, a controller that is capable of controlling one or more external or peripheral devices, a sensor that is capable of receiving sensory input from one or more sensing devices, and so forth.","The processor system  can also include a memory component . As shown in , the memory component  can include one or more types of memory. For example, the memory component  can include a read only memory (ROM) component and a random access memory (RAM) component . The memory component  can also include other types of memory not illustrated in  that are suitable for storing data in a form retrievable by the processor , or by other devices (e.g., devices connected to the processor system via the network ). For example, electronically programmable read only memory (EPROM), erasable electrically programmable read only memory (EEPROM), flash memory, as well as other suitable forms of memory can be included within the memory component .","The processor system  can also include a storage component , which is configured to store data in one or more predetermined formats. According to one or more embodiments of the invention, the storage component  can be a longer-term storage device than the memory component . For example, according to one or more embodiments of the invention, the storage component  can be a database configured to store data in one or more formats, such as a SQL format, a Database 2 (DB2) format, an Extensible Markup Language (XML) format, an Oracle database format (e.g., Oracle 8i, Oracle 9i, Oracle 11i, etc.), or other desired database formats. Additionally, the storage component  can include one or more standard storage components, such as a disk drive, a compact (CD) drive, a digital video disk (DVD) drive, a flash memory drive, or the like.","The various components of the processor system  communicate via a bus , which is connected to each of the components of the processor system , and allows data to be transferred between the various components. The bus  can use any data transfer protocol suitable for communicating data between the various components of the processor system . The protocol used by the bus  can include any suitable bus protocol, such as Peripheral Component Interconnect (PCI), Industrial Standard Architecture (ISA), Extended ISA (EISA), Accelerated Graphics Port (AGP), Micro Channel, VESA Local Bus (VL-bus), NuBus, TURBOchannel, VersaModule Eurocard Bus (VMEbus), MULTIBUS, Subscriber Trunk Dialing (STD) bus, and other suitable bus protocols. For example, by way of the bus , the processor  communicates with the memory component  and the storage component , and can store data in or retrieve data previously stored in the memory component  or storage component .","Additionally, components of the processor system  can communicate with devices that are external to the processor system  by way of an input\/output (I\/O) component , which is also connected to the bus . According to one or more embodiments of the invention, the I\/O component  can include a variety of suitable communication interfaces. For example, the I\/O component  can include wired connections, such as standard serial ports, parallel ports, universal serial bus (USB) ports, S-video ports, large area network (LAN) ports, small computer system interface (SCSI) ports, and so forth. Additionally, the I\/O component  can include, for example, wireless connections, such as infrared ports, optical ports, Bluetooth wireless ports, wireless LAN ports, wireless fidelity (Wi-Fi) wireless ports, ultra-wide band (UWB) wireless ports, or the like.","By way of the I\/O component  the processor system  can communicate with other local devices, such as peripheral devices , which can include any of a number of devices desirable to be accessed by or used in conjunction with the processor system . For example, the peripheral devices  with which the processor system  can communicate via the I\/O component , can include a processor, a memory component, a storage component, a printer, a scanner, a storage component (e.g., an external disk drive, database, etc.), or any other device that a user desires to connect to the processor system .","The processor system  can also be connected to a network  via the I\/O component . The network  can include one or more of a variety of communications networks. For example, according to one or more embodiments of the invention, the network can include the Internet. Additionally, or alternatively, the network  can include a variety of other communications networks, including, for example, a LAN, a wide area network (WAN), a virtual LAN (VLAN), or other suitable network.","It should be understood that the processor system  can also include a variety of other components not shown in , depending upon the desired functionality of the processor system . Additionally, it should be understood that more than one processor system  having similar or different configurations can be connected to the network . Thus, multiple processor systems  can be in communication with one another via the network , or with peripheral devices  connected to one or more of the multiple processor systems , via the network .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1A","FIG. 1A"],"b":["100","110","110","150","110","110","150","110","110","150","110","110","110","150","100"],"i":["a","a","b ","a ","a ","a ","a ","a ","a ","a. "]},"Additionally, according to one or more embodiments, at least one processor system  is a client processor system (referred to herein as a client). The client, for example, can provide requests, such as structured requests (e.g., SQL requests, etc.) to the server and receive responses to those requests via the network . According to one or more embodiments of the invention, the client is configured to interpret secure communications (e.g., communications using SSL, etc.), and can use, for example, a standard library (e.g., a standard SSL library). For example, according to one or more specific embodiments of the invention, the client can be a Java client that is configured to use sockets, such as the Java Secure Socket Extension (JSSE) available from Sun Microsystems, Inc. According to one or more embodiments, for example, the client can be configured to use the Sun Java Desktop System and the Sun Java Enterprise System available from Sun Microsystems, Inc. More specifically, the client can be configured to use the Java Database Connectivity (JDBC) Type 4 driver, or other comparable driver. Although only one client is shown in , multiple clients can be connected to the network , and used in the system . Additionally, one or more processor systems  including functionality of both a server and a client can be included in the system , and can communicate via the network .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 2","FIG. 2","FIGS. 1 and 1A"],"b":["200","210","212","220","222","212","222","210","110","110","150","220","110","110","150","210","220","150"],"i":["a","b"]},"The server application  can be an MS SQL Server application, and the client application  can be a Java client configured to use a standard SSL library (e.g., JSSE), such as a client using a JDBC Type 4 driver. For the sake of convenience, one or more embodiments of the invention will be described in connection with these specific devices. It should be recognized, however, that the principles of the invention can be applied to other devices and situations requiring similar translation between protocols (e.g., between a protocol using named pipes or a proprietary handshake protocol and a protocol that requires sockets, etc.).","When a server , such as the MS SQL Server, running a server application  using a first communication protocol , such as the MS SQL Server protocol attempts to communicate via the network  using SSL with the client application  of a client , such as the JDBC type 4 driver, which is running a second communication protocol , there are specific difficulties associated with communicating between the two protocols , . For example, as mentioned above, a server , such as the MS SQL Server, uses the same communication channel for both unencrypted communications and encrypted, SSL communications (i.e., TCP\/IP port 80), and decrypts SSL communications during its proprietary handshake protocol. A client using a standard SSL library, such as the JSSE, however, typically uses a separate channel for unencrypted communications (e.g., HTTP via port ) than it uses for encrypted, SSL communications (e.g., HTTPS via port ). Because the standard SSL library is generalized and intended to be used with multiple systems, it is not able to handle the proprietary handshake protocol of the MS SQL Server.","Additionally, because the proprietary handshake protocol of the MS SQL Server uses named pipes and the JSSE does not support named pipes over the socket API, but instead requires a socket to communicate, one or more embodiments of the invention provide the capability of translating between the two separate protocols ,  of the client and the server. This is accomplished, according to one or more embodiments of the invention, by adding at least one translation layer  between the two protocols. For example, a translation layer  can be used by a client using the standard SSL library (e.g., JSSE) to allow it to support named pipes. Additionally, or alternatively, a translation layer  can be used by a client using the SSL library (e.g., JSSE) to provide compatibility with the handshake protocol of the server (e.g., the MS SQL Server protocol).","To facilitate an understanding of the invention, some existing structures and techniques associated with one or more embodiments of the invention and\/or associated with SSL communications or a JSSE client will be described. The description of these existing structures and techniques is intended to aid understanding of how they interact with various aspects of the invention. It should be recognized that, although structures and techniques include reference to specific versions and\/or releases (e.g., SSL Version 3.0, MS SQL Server 2000, JDBC Type 4, etc.), other structures and techniques according to other versions and\/or releases can be used with one or more embodiments of the invention by adapting the principles described herein to those other versions and\/or releases.","SSL Packets","Tables 1-4 below show the basic structure of SSL packets according to SSL Version 3.0. SSL packets (e.g., SSL Version 3.0 packets) have a specific header structure, which is shown in detail in Table 1 below.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Size","Name","Description\/Values"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1 byte","Packet Type","Values are 20, 21, 22, 23"]},{"entry":[{},{},"(See Table 2 below)"]},{"entry":["1 byte","SSL Major Version","Valid values are 3 or 2"]},{"entry":[{},{},"On the MS SQL Server 2000"]},{"entry":[{},{},"the value is always 3"]},{"entry":["1 byte","SSL Minor Version","On the MS SQL Server"]},{"entry":[{},{},"2000 the value is always 0"]},{"entry":["2 bytes","Packet Size","The byte order is Lo, Hi (i.e., little endian)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Some SSL packet types that can be used, according to SSL Version 3.0, in the \u201cPacket Type\u201d portion of the SSL packet structure (shown above in Table 1) are shown below in Table 2. It will be noted that other packet types, according to other protocols (e.g., later versions of the SSL protocol) could be included in such a table and used according to one or more embodiments of the invention. In Table 2, four packet types are shown and the function of each packet associated with the defined type ID is shown. For example, a \u201cChange Cipher Specs.\u201d packet type signals a change in cipher specifications (e.g., a change in the encryption key, etc.). The \u201cAlert\u201d packet type is used to indicate SSL packets associated with an alert. The \u201cHandshake\u201d packet type is used to identify SSL packets associated with an SSL handshake, which is described in greater detail below.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Packet Type ID","Packet Types"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["20","Change Cipher Specs."]},{"entry":["21","Alert"]},{"entry":["22","Handshake"]},{"entry":["23","Data"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"SSL handshake packets (i.e., the Packet Type is \u201cHandshake\u201d) have the form shown below in Table 3, which shows the SSL Version 3.0 handshake packet structure.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Size","Packet Name","Description\/Values"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1 byte","Packet Type","Always 22 for a handshake"]},{"entry":["1 byte","SSL Major Version","Always 3 for Version 3.0"]},{"entry":["1 byte","SSL Minor Version","Always 0 on SQL Server 2000"]},{"entry":["2 bytes","Packet Size","The byte order is Lo, Hi"]},{"entry":["1 byte","Message Type","(See Table 4 below)"]},{"entry":["3 bytes","Message Length","Defines length (in bytes) of message data"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The types of messages (i.e., the \u201cMessage Type\u201d values listed on the fifth row of Table 3 above) will have the form shown below in Table 4 below, which shows the SSL Version 3.0 handshake packet message types. The message types shown below in Table 4 have to do with various stages of an SSL handshake procedure.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Message Type ID","Message Types"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Hello Request"]},{"entry":["1","Client Hello"]},{"entry":["2","Server Hello"]},{"entry":["11","Certificate"]},{"entry":["12","Key Exchange"]},{"entry":["13","Certificate Request"]},{"entry":["14","Server Hello Down"]},{"entry":["15","Certificate verify"]},{"entry":["16","Client Key Exchange"]},{"entry":["20","Finished"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Tables 5-7 below outline the basic structures and types of SQL server packets. The basic structure of Tabular Data Stream (TDS) packets, which are used in communicating with some servers , such as SQL servers (e.g., MS SQL Server, Sybase Server, etc.) is shown below in Table 5. In Table 5, the entries in the first 4 rows correspond to TDS packet header information and the last entry corresponds to packet data. The first entry contains the packet type, the second entry contains an indication of whether or not it is the last packet, the third entry contains an indication of the packet size, and the last entry corresponds to the data, which can vary in size. The fourth entry is reserved for multiple parallel requests, and is currently unused.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Size","Description\/Values"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1 byte","Packet Type"]},{"entry":[{},"1 byte","Is last packet"]},{"entry":[{},"2 bytes","Packet Size"]},{"entry":[{},"4 bytes","Unused"]},{"entry":[{},"(Var.)","Data"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Two types of TDS packets (i.e., the \u201cPacket Type\u201d designations from Table 5 above), used according to one or more embodiments of the invention, are shown below in Table 6. In Table 6, the two TDS packet types shown are: \u201cServer Response\u201d and \u201cHandshake.\u201d",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Packet Type ID","Description\/Values"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["4","Server Response"]},{"entry":["18","Handshake"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Table 7 below shows selected data of a Feature Request Packet used by the MS SQL Server (e.g., the MS SQL Server 2000), which are used according one or more embodiments of the invention. The Feature Request Packet is a Handshake TDS Packet (i.e., a TDS Packet of type 18).",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 7"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Size","Description\/Values"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u20022 bytes","0x00, 0x00 because it is not an SSL packet"]},{"entry":[{},"12 bytes","0x15, 0x00, 0x06, 0x01, 0x00, 0x1B, 0x00,"]},{"entry":[{},{},"0x01, 0x02, 0x00, 0x1C, 0x00"]},{"entry":[{},"\u20021 byte","Instance name length + 1 for null termination"]},{"entry":[{},"\u20022 bytes","0x03, 0x00"]},{"entry":[{},"\u20021 byte","Structure Size, typical Instance Name size + 29"]},{"entry":[{},"\u20023 bytes","0x00, 0x04, 0xFF"]},{"entry":[{},"\u20021 byte","SQL Server major version (e.g., Version 8)"]},{"entry":[{},"\u20021 byte","SQL Server minor version (e.g., 0)"]},{"entry":[{},"\u20022 bytes","SQL Server micro version, different values"]},{"entry":[{},{},"(e.g., 100)"]},{"entry":[{},"\u20022 bytes","0x00, 0x00"]},{"entry":[{},"\u20021 byte","Flag, Bit 0: SSL support"]},{"entry":[{},"1+ bytes","Instance name + null termination"]},{"entry":[{},"\u20024 bytes","0x00, 0x00, 0x00, 0x00"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Although Table 7 above corresponds to data of a Feature Request Packet, a Feature Response Packet has a similar, corresponding structure. In the Feature Request Packet, the \u201cStructure Size\u201d includes an \u201cInstance Name,\u201d which is usually empty, and 29 bytes of data (i.e., the first 29 bytes of data are included in the response, and data after position 29 are not). Additionally, the \u201cSSL Support\u201d flag is on (i.e., set to a value of 0), which causes the MS SQL Server to support SSL communications.","Standard Server Handshake","Table 8 below outlines the basic steps of the handshake protocol between a client and an MS SQL Server (e.g., the MS SQL Server 2000). The steps outlined in Table 8 could be, for example, used by a client using an Open Database Connectivity (ODBC) driver available from Microsoft Corp. The basic steps of the protocol  are shown graphically in , wherein the packets processed by the server are shown at the right and packets processed by the client are shown at the left. The protocol proceeds from the beginning (shown at the top of  and Table 8) to the end (shown at the bottom of  and Table 8) as packets are transferred between a client and a server in the directions shown by the arrows in  and in the center column of Table 8. More specifically, data transferred to the server from the client are represented by (an) arrow(s) pointing to the right and data transferred to the client from the server are represented by (an) arrow(s) pointing to the left. The handshake protocol can continue, until a predetermined number of SSL data packets have been transferred between the server and the client , or until the connection is broken.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Step","Client","Dir.","Server"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["302","TDS Packet of type 18 (Handshake)","\u2192",{}]},{"entry":[{},"with the Feature Request Packet"]},{"entry":["304",{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00001","he":"2.79mm","wi":"2.12mm","file":"US07302564-20071127-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"TDS Packet of Type 4 (Server"]},{"entry":[{},{},{},"Response) with the Feature Response"]},{"entry":[{},{},{},"Packet"]},{"entry":["306","TDS Packet of type 18 (Handshake)","\u2192"]},{"entry":[{},"The data of the TDS packet include an"]},{"entry":[{},"SSL Packet of type 22 (Handshake)"]},{"entry":[{},"with a Message Type 1 (Client Hello)"]},{"entry":["308",{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00002","he":"2.79mm","wi":"2.12mm","file":"US07302564-20071127-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"TDS Packet of type 4 (Server"]},{"entry":[{},{},{},"Response)"]},{"entry":[{},{},{},"The data of the packet include an SSL"]},{"entry":[{},{},{},"packet of type 22 (Handshake) with"]},{"entry":[{},{},{},"the Message Types:"]},{"entry":[{},{},{},"2 (Server Hello)"]},{"entry":[{},{},{},"11 (Certificate)"]},{"entry":[{},{},{},"14 (Server Hello Down)"]},{"entry":["310","TDS Packet of type 18 (Handshake)","\u2192"]},{"entry":[{},"The data of the TDS packet include"]},{"entry":[{},"multiple SSL Packets:"]},{"entry":[{},"SSL packet of type 22"]},{"entry":[{},"(Handshake) with Message Type"]},{"entry":[{},"16 (Client Key Exchange)"]},{"entry":[{},"SSL Packet Type 20 (Change"]},{"entry":[{},"Cipher Specs.)"]},{"entry":[{},"SSL Packet Type 22 (Handshake)"]},{"entry":["312",{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00003","he":"2.79mm","wi":"2.12mm","file":"US07302564-20071127-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"TDS Packet of type 4 (Server"]},{"entry":[{},{},{},"Response)"]},{"entry":[{},{},{},"The data of the packet include an SSL"]},{"entry":[{},{},{},"Packet of type 22 (Handshake) with"]},{"entry":[{},{},{},"the Message Type 20 (Finished)"]},{"entry":["314","SSL packet of type 23 (Data)","\u2192"]},{"entry":["316",{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00004","he":"2.79mm","wi":"2.12mm","file":"US07302564-20071127-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"SSL packet of type 23 (Data)"]},{"entry":[".",".",".","."]},{"entry":[".",".",".","."]},{"entry":[".",".",".","."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 4","FIG. 4"],"b":"110","i":"b, ","br":{},"in-line-formulae":[{},{}]},"In , a structure  is shown that includes two packages: java.net  and javax.net.ssl , which are created by the above Java code when SSL communications are to be executed using a JSSE client. The first package java.net  is also referred to as the base, and relates to the underlying Socket  (the base socket) that is used for secure communications (e.g., using SSL). The Socket  maintains communications using whatever communications protocol is being used (e.g., TCP\/IP, etc.). The SocketInputStream object  and the SocketOutputStream object  represent all communications to and from the Socket , respectively.","The second package Javax.net.ssl  shown in  contains an SSLSocket , which is a secure socket used for secure (e.g., SSL) communications. The SSLInputStream object  represents a decoder configured to decode incoming data, and the SSLOutputStream object  represents an encoder configured to encode outgoing data.","The SSLSocket  uses the base Socket  to transmit and receive encrypted data, as shown by the arrow between the SSLSocket  and the Socket . More specifically, any application programming interface (API) calls to the SSLSocket  are forwarded to the base Socket  for handling. Similarly, an API call to the SSLInputStream object  (e.g., to receive incoming SSL communications) allows encrypted data received via the SocketInputStream object  to be decoded. An API call to the SSLOutputStream object  (e.g., to write outgoing SSL data) causes data encrypted by the SSLOutputStream object  to be output via the SocketOutputStream object .","Translation Layer","As mentioned above, because some servers (e.g., the MS SQL Server) do not use separate sockets for secure (e.g., SSL) and non-secure (e.g., non-SSL) communications, the Java class instances shown in  are difficult to use with such systems. Thus, according to one or more embodiments of the invention, at least one translation layer  is used to translate communications using standard SSL libraries (e.g., the JSSE client's Java class instances shown in ) to communicate with servers that do not use separate sockets, but which use a handshake protocol to establish secure communications, and\/or which use named pipes.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 5","FIG. 5","FIG. 4","FIG. 5"],"b":["230","500","410","420","500","230","510","520","230","422","412","500","5"],"br":{},"in-line-formulae":[{},{}]},"The com.inet.tds package  in  includes a new socket class TdsSocket , which is configured to package a simple socket request, or an access request for a file. Thus, using the TdsSocket , communication via both sockets and communication using named pipes can be accomplished, allowing the structure  to facilitate communications between devices using the standard SSL protocol as well as devices using non-standard SSL protocol (e.g., MS SQL Server). Specifically, secure communications (e.g., SSL communications) that are to be communicated via the SSLSocket  are packaged by the TdsSocket  according to the type of system to which they are being communicated. For example, if a standard secure communication protocol (e.g., SSL, etc.), which uses a separate port for secure communications, is to be used, the API calls to the SSLSocket  will call the TdsSocket , which in turn will call the base Socket . If, on the other hand, a device using a non-standard security protocol, such as a system using named pipes (e.g., MS SQL Server), is to be used, the API calls to the SSLSocket  will call the TdsSocket , which in turn will package the call in a RandomAccessFile object  that can be used by the server.","The com.inet.tds package  in  also includes two logical objects: TdsInputStream  and TdsOutputStream , which are configured to handle the processing associated with socket communications or an additional server handshake protocol (e.g., using TDS packets). API calls to the TdsInputStream object , for example, call either the SocketInputStream object  for standard SSL socket communications, or the FileInputStream object  for communications using named pipes. Likewise, API calls to the TdsOutputStream object  call either the SocketOutputStream object  for standard SSL socket communications, or the FileOutputStream object  for communications using named pipes. The TdsInputStream object  and the TdsOutputStream object  include logic that allows them to select between named pipe communications and socket communications, and to access the proper file or socket, depending upon the communications protocol used.","Thus, by using the translation layer  shown in the structure  of , a client using a standard encryption library (e.g., a standard SSL library such as JSSE) can use named pipes in addition to sockets to communicate with a server Therefore, the handshake protocol of some servers (e.g., the MS SQL Server), in which the security handshake protocol (e.g., the SSL handshake protocol) is packaged, can be translated via the translation layer  shown in  to allow communication between those servers and standard security or SSL clients (e.g., the JSSE client) that normally would not be able to communicate with such servers.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 6","b":["600","110","602","604","514","604","606","604","606","608","610","612","514","612","514","606","514","612","612","614"],"i":"b "},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 7","b":["700","110","702","516","704","704","706","704","706","516","708","710","712","516","712","516","706","516","712","712","714"],"i":"a "},"Server Handshake with Translation","Table 9 below contains steps associated with implementing the handshake protocol shown above in Table 8 according to one or more embodiments of the invention. The basic steps of the protocol  are shown graphically in , wherein the packets processed by the server and functions performed by the server are shown to the right and packets processed by the client and functions performed by the client are shown to the left. The protocol proceeds from beginning (shown at the top of  and Table 9) to the end (shown at the bottom of  and Table 9) as packets are transferred between a client and a server in the directions shown by the arrows in  and the center column of Table 9. More specifically, data transferred to the server from the client are represented by (an) arrow(s) pointing to the right and data transferred to the client from the server are represented by (an) arrow(s) pointing to the left. The handshake protocol can continue, until a predetermined number of SSL data packets have been transferred between the server and the client , or until the connection is terminated",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Step","Client (using translation layer 230)","Dir.","Server"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["802","TDS Packet of type 18 (Handshake)",{},{}]},{"entry":[{},"with the Feature Request Packet"]},{"entry":[{},"{TdsOutputStream}"]},{"entry":["803","Send the data {FileOutputStream}\/","\u2192"]},{"entry":[{},"{SocketOutputStream}"]},{"entry":["804",{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00005","he":"2.79mm","wi":"2.12mm","file":"US07302564-20071127-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"TDS Packet of Type 4 (Server"]},{"entry":[{},{},{},"Response) with the Feature Response"]},{"entry":[{},{},{},"Packet"]},{"entry":["805","Read incoming data"]},{"entry":[{},"{FileInputStream}\/"]},{"entry":[{},"{SocketInputStream}"]},{"entry":["806","Remove TDS packet header from"]},{"entry":[{},"incoming data {TdsInputStream}"]},{"entry":["808","SSL Packet of type 22 (Handshake)"]},{"entry":[{},"with a Message Type 1 (Client Hello)"]},{"entry":[{},"{SSLOutputStream}"]},{"entry":["810","Add TDS packet header"]},{"entry":[{},"{TdsOutputStream}"]},{"entry":[{},"TDS Packet of type 18 (Handshake)"]},{"entry":[{},"The data of the TDS packet include"]},{"entry":[{},"the SSL packet from step 808"]},{"entry":["811","Send the data {FileOutputStream}\/","\u2192"]},{"entry":[{},"{SocketOutputStream}"]},{"entry":["812",{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00006","he":"2.79mm","wi":"2.12mm","file":"US07302564-20071127-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"TDS Packet of type 4 (Server"]},{"entry":[{},{},{},"Response)"]},{"entry":[{},{},{},"The data of the packet include an SSL"]},{"entry":[{},{},{},"packet of type 22 (Handshake) with"]},{"entry":[{},{},{},"the Message Types:"]},{"entry":[{},{},{},"2 (Server Hello)"]},{"entry":[{},{},{},"11 (Certificate)"]},{"entry":[{},{},{},"14 (Server Hello Down)"]},{"entry":["813","Read incoming data"]},{"entry":[{},"{FileInputStream}\/"]},{"entry":[{},"SocketInputStream}"]},{"entry":["814","Remove TDS packet header from"]},{"entry":[{},"incoming data {TdsInputStream}"]},{"entry":["816","Process received SSL packet"]},{"entry":[{},"{SSLInputStream}"]},{"entry":["818","Multiple SSL Packets:"]},{"entry":[{},"SSL packet of type 22"]},{"entry":[{},"(Handshake) with Message Type"]},{"entry":[{},"16 (Client Key Exchange)"]},{"entry":[{},"SSL Packet Type 20 (Change"]},{"entry":[{},"Cipher Specs.)"]},{"entry":[{},"SSL Packet Type 22 (Handshake)"]},{"entry":[{},"{SSLOutputStream}"]},{"entry":["820","Add TDS packet header"]},{"entry":[{},"{TdsOutputStream}"]},{"entry":[{},"TDS Packet of type 18 (Handshake)"]},{"entry":[{},"The data of the TDS packet include"]},{"entry":[{},"the multiple SSL packets from step"]},{"entry":[{},"818"]},{"entry":["821","Send the data {FileOutputStream}\/","\u2192"]},{"entry":[{},"{SocketOutputStream}"]},{"entry":["822",{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00007","he":"2.79mm","wi":"2.12mm","file":"US07302564-20071127-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"TDS Packet of type 4 (Server"]},{"entry":[{},{},{},"Response)"]},{"entry":[{},{},{},"The data of the packet include an SSL"]},{"entry":[{},{},{},"Packet of type 22 (Handshake) with"]},{"entry":[{},{},{},"the Message Type 20 (Finished)"]},{"entry":["823","Read incoming data"]},{"entry":[{},"{FileInputStream}\/"]},{"entry":[{},"{SocketInputStream}"]},{"entry":["824","Remove TDS packet header from"]},{"entry":[{},"incoming data {TdsInputStream}"]},{"entry":["826","Process received SSL packet"]},{"entry":[{},"{SSLInputStream}"]},{"entry":["828","SSL packet of type 23 (Data)"]},{"entry":[{},"{SSLOutputStream}"]},{"entry":["830","Prepare SSL packet from step 824 for"]},{"entry":[{},"transmission {TdsOutputStream}"]},{"entry":["831","Send the data {FileOutputStream}\/","\u2192"]},{"entry":[{},"{SocketOutputStream}"]},{"entry":["832",{},{"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00008","he":"2.79mm","wi":"2.12mm","file":"US07302564-20071127-P00001.TIF","alt":"custom character","img-content":"character","img-format":"tif"}}},"SSL packet of type 23 (Data)"]},{"entry":[".",".",".","."]},{"entry":[".",".",".","."]},{"entry":[".",".",".","."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"The handshake protocol  shown in  begins as a TDS packet of type 18 (Handshake) is created by the client using the TdsOutputStream object  in step . In step , the data (i.e., the TDS packet created in step ) is sent from the client to the server using either the FileOutputStream object  or the SocketOutputStream object . In response, a TDS packet of type 4 (Server Response) is created by the server in step , and is transmitted from the server to the client . The incoming data (i.e., the TDS packet created in step ) is read in step  by either the FileInputStream object  or the SocketInputStream object . The TDS header is removed from the received TDS packet by the TdsInputStream object  in step . Removing the TDS packet header can be easily accomplished since the header describes the size of the included SSL data, making it easy to determine which bytes belong to the packet and the packet header.","An SSL packet of type 22 (Handshake) having a message of type 1 (Client Hello) is generated on the client by the SSLOutputStream object  in step . TDS packet header information is added to the SSL packet by the TdsOutputStream object  and the resulting TDS packet of type 18 (Handshake) is created in step . Adding the TDS packet header information in step  is accomplished by the logic of the TdsOutputStream object . Because the TDS packet header indicates the size of the TDS packet, the size of the TDS packet must be determined prior to the TdsOutputStream object  adding the header. It should be noted that one or multiple SSL packets can be transmitted as TDS packet data (e.g., the TDS packet can contain three SSL packets, etc.), and the number of SSL packets transmitted in each TDS packet can vary (e.g., between one and three) from one TDS packet to the next. Thus, the TDS packet header information cannot be added until the logic of the TdsOutputStream object  determines that the TDS packet is complete.","Traditionally, determining if the TDS packet is complete would be difficult for a JSSE client, because the JSSE client does not determine the end of a block of data in the manner used by other systems. Specifically, the JSSE client does not call the method flush( ), which signals that data is ready to be sent to a server, thereby indicating the end of a data block. The JSSE client also does not write the data for the TDS packet as a single block, which would allow for data to be sent to a server after each write operation, thereby indicating the end of a data block. Moreover, the JSSE client does not perform a check to see if data sent are written to the TDS packet, which would indicate the end of a block of data.","To avoid the above-problems traditionally experienced using JSSE clients, one or more embodiments of the invention use a synchronous handshake protocol between the server and the client . Using a synchronous handshake protocol, each packet (e.g., TDS packet) sent to the server (e.g., a MS SQL Server) from the client (e.g., a JSSE client) is answered with a single packet. Thus, the count of written and read packets (e.g., TDS packets) is equal, and each packet sent to the server includes all data the server requires to create a response. According to one or more embodiments of the invention, data is flushed from the TdsOutputStream object  if a \u201cread\u201d operation by the TdsInputStream object  occurs, and the input buffer of the TdsInputStream object  is empty.","Once the TDS packet header information has been added by the TdsOutputStream object  in step , the TDS packet (including the SSL packet information) is transmitted to the server in step  by either the FileOutputStream object  or the SocketOutputStream object . In response to the received TDS packet, the server creates a response TDS packet of type 4 (Server Response) in step  to be transmitted to the client . The TDS packet includes an SSL packet of type 22 (Handshake) having the following three message types: Message Type 2 (Server Hello), Message Type 11 (Certificate), and Message Type 14 (Server Hello Down). The incoming data associated with the TDS packet transmitted to the client is read in step  by either the FileInputStream object  or the SocketInputStream object . In Step , the TPS header information is removed from the TDS packet by the TdsInputStream object . The received SSL packet is processed by the SSLInputStream object  in step .","In Step , multiple SSL packets are produced by the SSLOutputStream object . Specifically, the SSLOutputStream object  produces three SSL packets: an SSL packet of type 22 (Handshake) with a message of type 16 (Client Key Exchange), an SSL Packet Type 20 (Change Cipher Specs.), and an SSL Packet Type 22 (Handshake). In step , the TdsOutputStream object  creates a TDS packet header indicating a packet of type 18 (Handshake) for the SSL packets produced in step . In step , the TDS packet is transmitted to the server by either the FileOutputStream object  or the SocketOutputStream object . In response, in step , the server produces and transmits a TDS packet header of type 4 (Server Response) having an SSL Packet of type 22 (Handshake) including a message of type 20 (Finished) to the client ","The client reads the incoming data (i.e., the incoming TPS packet) in step  using either the FileInputStream object  or the SocketInputStream object . Once the SSL packet of type 22 (Handshake) including a message of type 20 (Finished), is transmitted to the client , the SSL handshake protocol is complete, and SSL data can be effectively and securely transmitted between the sever and the client . According to one or more embodiments of the invention, the message type \u201cFinished\u201d for a \u201cHandshake\u201d message can be detected by the TdsSocket object , and from that point forward, TDS the header functionality of the TdsOutputStream object  can be temporarily disabled (until it is required for a subsequent TDS handshake protocol). According to one or more alternative embodiments of the invention, the end of the SSL handshake can be detected by the start of SSL \u201cData\u201d packet transmissions (i.e., transmissions of SSL packets of type 23), which occurs after the SSL handshake. By detecting the end of the SSL handshake according to when SSL \u201cData\u201d packet transmissions begin, errors in the handshake process (e.g., handshake messages erroneously indicating a message type \u201cFinished\u201d) will not adversely affect the handshake process or secure data transmission after the handshake process.","In step , the TdsInputStream object  removes the TDS header from the TDS packet received from the server . The received SSL packet is processed by the SSLInputStream object  in step . An SSL packet of type 23 (Data) is created in step  by the SSLOutputStream object , and the SSL packet is prepared for transmission to the server (e.g., sent to either the FileOutputStream object  or the SocketOutputStream object ) in step  by the TdsOutputStream object , which has its TDS header functionality temporarily disabled. The SSL packet data is then sent in step  by either the FileOutputStream object  or the SocketOutputStream object . As the TDS header functionality of the TdsOutputStream object  is temporarily disabled, the SSL packet is transmitted directly to the server in step  without alteration (e.g., without the addition of TDS header information). The server responds by creating and transmitting an SSL packet of type 23 (Data) to the client in step . The SSL \u201cData\u201d packet transmissions can continue between the server and the client in the same manner until a pre-determined number of data packets have been transmitted, or until the SSL session is terminated by either the server or the client . For example, the session can be terminated by a pre-determined time limit expiring, or by some other terminating event occurring.","From the foregoing, it can be seen that systems and methods that provide translation of secure communications for handshake protocols are provided. Specific embodiments have been described above in connection with a client that uses a standard library for secure communications (e.g., communications using SSL) and a server that uses a proprietary handshake protocol (e.g., an SQL server) to carry out a handshake associated with secure communications. Additionally, specific embodiments have been described in the context of a Java client using a JSSE SSL library and a JDBC Type 4 driver, and an MS SQL Server, such as the MS SQL Server 2000, or other versions.","It will be appreciated, however, that embodiments of the invention can be in other specific forms without departing from the spirit or essential characteristics thereof. For example, while some embodiments have been described in the context of a Java client and a SQL server, one or more embodiments of the invention can be used in other environments that require translation of secure communications for handshake protocols. For example, one or more embodiments of the invention can include other proprietary server protocols than those mentioned, which include a security handshake protocol, and which require translation for clients using standard security protocols, and corresponding standard handshake procedures to access the server. The presently disclosed embodiments are, therefore, considered in all respects to be illustrative and not restrictive."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
