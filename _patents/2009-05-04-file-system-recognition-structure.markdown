---
title: File system recognition structure
abstract: Embodiments include a file system data structure and file system recognition APIs that may allow an operating system to identify a partition of a storage device as having a valid file system, even if the operating system does not know how to access the file system a priori. File systems can implement these data structures in a standardized, known location within a partition on the storage device such that an operating system may use APIs or other functions to examine the known location for the presence of these data structures. Information on how to interpret the data structure may be obtained using a network or other source.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08200895&OS=08200895&RS=08200895
owner: Microsoft Corporation
number: 08200895
owner_city: Redmond
owner_country: US
publication_date: 20090504
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","SPECIFICATION"],"p":["This Background is intended to provide the basic context of this patent application and it is not intended to describe a specific problem to be solved.","For data on a given storage device, such as a hard disk or a flash device, to be accessible on a computing device, the operating system on the computing device needs to be able to recognize and understand the one or more file systems used on the storage device. To recognize a file system, the operating system examines the file system data structures on the storage device for specific, identifying characteristics and then compares the characteristics of the file system data structures on the storage device against the characteristics of a list of known file systems that can be accessed by the operating system. If the characteristics of the file system data structures are consistent with those from one of the known file systems, then the operating system can access the data on that partition of the disk. If the structure is not known, the operating system assumes that that partition of the storage device is empty and needs to be formatted, even if there is data there that is in a format that is not understood.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","A set of file system data structure and file system recognition APIs are disclosed that may allow an operating system to identify partitions of a storage device as having a valid file system, even if the operating system does not know how to access the file system. File systems implement these data structures in a standardized, known location within a partition on the storage device such that an operating system may use APIs or other functions to examine that known location for the presence of these data structures. If the data structures exist on the storage device, then the operating system can coordinate that there is a valid file system on that partition of the storage device, even if the operating system does not have a priori knowledge of how to interpret the specific data structures associated with that file system. Information on how to interpret the data structure may be obtained using a network or other source. Thus, the operating system may now distinguish between partitions of the storage devices that have a valid, but unrecognizable file system and partitions of the storage device that do not contain a file system. As a result, the operating system can disambiguate such that it will not attempt to format a partition of a disk that may contain valid data, reducing the likelihood of data loss.","Although the following text sets forth a detailed description of numerous different embodiments, it should be understood that the legal scope of the description is defined by the words of the claims set forth at the end of this patent. The detailed description is to be construed as exemplary only and does not describe every possible embodiment since describing every possible embodiment would be impractical, if not impossible. Numerous alternative embodiments could be implemented, using either current technology or technology developed after the filing date of this patent, which would still fall within the scope of the claims.","It should also be understood that, unless a term is expressly defined in this patent using the sentence \u201cAs used herein, the term \u2018______\u2019 is hereby defined to mean . . . \u201d or a similar sentence, there is no intent to limit the meaning of that term, either expressly or by implication, beyond its plain or ordinary meaning, and such term should not be interpreted to be limited in scope based on any statement made in any section of this patent (other than the language of the claims). To the extent that any term recited in the claims at the end of this patent is referred to in this patent in a manner consistent with a single meaning, that is done for sake of clarity only so as to not confuse the reader, and it is not intended that such claim term be limited, by implication or otherwise, to that single meaning. Finally, unless a claim element is defined by reciting the word \u201cmeans\u201d and a function without the recital of any structure, it is not intended that the scope of any claim element be interpreted based on the application of 35 U.S.C. \u00a7112, sixth paragraph.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the blocks of the claimed method and apparatus includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer , via a local area network (LAN)  and\/or a wide area network (WAN)  via a modem  or other network interface .","Computer  typically includes a variety of computer readable media that may be any available media that may be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . The ROM may include a basic input\/output system  (BIOS). RAM  typically contains data and\/or program modules that include operating system , application programs , other program modules , and program data . The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media such as a hard disk drive  a magnetic disk drive  that reads from or writes to a magnetic disk , and an optical disk drive  that reads from or writes to an optical disk . The hard disk drive , , and  may interface with system bus  via interfaces , .","A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not illustrated) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device may also be connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},"In the past, when a new electronic data storage device is connected to a computing device, the computing device would make an inquiry of or read certain known blocks from the electronic data storage device to see if the file systems used on the partitions of the device are recognized. If a file system was recognized, the file system would mount the partition and expose a file system layout to the user. If a file system was not recognized, then the user was presented the option to format the partition, erasing any existing data on that partition, even if there was data on that partition that simply was in a format that was not recognized. The proposed method attempts to address this problem by adding an additional manner for the file system used on a partition of the electronic data storage device to be recognized. In short, a static data structure is added to the boot sector of the partition. Usually, the structure will contain the name of the file system used to format the partition or the layout of data on the partition may be determined from other information in the structure. The name, layout of the data on the partition or other file information may be used to access the data on the partition. The existence of this structure implies that there is valid data on that partition of the storage device even if the operating system does not recognize it; therefore, the user will not be prompted to format the partition. Additional methods may be employed to locate software that will allow access to the data on that partition of the storage device. This may include but is not limited to prompting the user with the name provided in the structure, searching other storage devices attached to the system for appropriate software which supports access to the data or searching the internet for this software. If the file system is not recognized or the structure does not exist or the file structure is not understood, in some embodiments, the name may be researched to see if relevant information may be obtained such that the drive may be used. If the additional information is not available or the file system characteristics are not known from the structure, then the file system is assumed to be unknown and then an offer may be made to format that partition of the storage device.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4","b":["134","400","134","152","410","420","152"]},"At block , volume data for a partition of the electronic storage device may be obtained from the electronic storage device . The volume data may be obtained by issuing a query or by receiving a response. At block , it may be determined whether the volume data results in the file system being recognized. By analyzing the volume data, the drive may be immediately recognized based on the response. If the file system on that partition of the electronic storage device  is immediately recognized, at block , structured communication may begin with that partition of the electronic data storage device .","At block , if the file system is not recognized at block , a response may be requested for file system recognition data  from the electronic data storage device . In one embodiment, the file system recognition data  is stored at a known location  within the partitions on the storage device , such as at a boot sector\/logical sector 0.","The file system recognition data  may be stored in a form of a data structure. The data structure may comprise a plurality of bytes.  may be an illustration of a sample data structure . The first three bytes of the data structure  may be a Jmp instruction . A Jmp instruction  may literally tell an operating system or other controlling system where to look for the rest of the boot up code.","A next 8 bytes of the data structure  may be a human understandable file system name . The file system name  may be used to obtain information on how to interpret the file system. Note this string is in the same place as the traditional OEM file system name on a disk with a normal bios parameter block (BPB) structure.","The file system name  may be communicated to a second source to obtain the necessary file system interpretation information. As the secondary source may review the file system name , the file system name  may be understood by someone reviewing the communications. In addition, the file system name  may be unique to the file system in question.","A next five bytes  of the data structure  may be 0. In some file systems, these bytes represent a BPB. These bytes normally hold the bytes per sector, the sectors per cluster and the reserved sector count. By marking these as 0, down level operating systems should recognize that additional information about the file system is needed. In addition, the disk information will not be misrecognized.","An additional four bytes  in the data structure  may be a string to identify the file system as a file system recognition structure (FSRS) file system or a system that uses the file system recognition structure. In one embodiment, the four bytes  may be 0x53525346 which may identify the file structure as (\u2018F\u2019, \u2018S\u2019, \u2018R\u2019, \u2018S\u2019).","An additional two bytes  in the data structure  may indicate a number of bytes in the file system recognition structure, from the beginning to the end, including the Jmp .","An additional two bytes in the data structure  may be an FSRS checksum . The checksum  may be a two byte checksum calculated over the bytes starting at FsName and ending at the last byte of the data structure, skipping the Jmp  and Checksum  fields.","A sample data structure declaration may be as follows:",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#define FSRS_IDENTIFIER 0x5352546"},{"entry":"typedef struct_FILE_SYSTEM_RECOGNITION_STRUCTURE {"},{"entry":"\/\/"},{"entry":"\/\/ 3 bytes: JMP instruction"},{"entry":"\/\/"},{"entry":"\/\/ Note that JMP instruction is *not* included in the checksum."},{"entry":"\/\/"},{"entry":"UCHAR Jmp[3];"},{"entry":"\/\/"},{"entry":"\/\/ 8 bytes: FSRS File System Name."},{"entry":"\/\/"},{"entry":"\/\/ 8 ASCII charactaers indicating non-localizable human readable name"},{"entry":"\/\/ of the filesystem this volume is formatted with."},{"entry":"\/\/"},{"entry":"\/\/ Note this string is in the same place as the OEM filesystem name"},{"entry":"\/\/ on a disk with a normal BPB structure."},{"entry":"\/\/"},{"entry":"UCHAR FsName[8];"},{"entry":"\/\/"},{"entry":"\/\/ 5 bytes MustBeZero"},{"entry":"\/\/"},{"entry":"\/\/ Note these fields overlap what normally are these fields in a BPB:"},{"entry":"\/\/"},{"entry":"\/\/ BytesPerSector"},{"entry":"\/\/ SectorPerCluster"},{"entry":"\/\/ ReservedSectorCount"},{"entry":"\/\/"},{"entry":"\/\/ Since they are zeroed. This should be sufficient to cause down-level"},{"entry":"\/\/ OSes to conclude this is not a valid BPB, and therefore not"},{"entry":"mis-recognize the volume."},{"entry":"\/\/"},{"entry":"UCHAR MustBeZero[5];"},{"entry":"\/\/"},{"entry":"\/\/ At this point in the structure, we are aligned to 16 bytes."},{"entry":"\/\/"},{"entry":"\/\/"},{"entry":"\/\/ 4 bytes: FSRS Identifier"},{"entry":"\/\/"},{"entry":"\/\/ Indicates these bytes contain an FSRS."},{"entry":"\/\/"},{"entry":"\/\/ Use the following number: 0x53525346 (\u2018F\u2019, \u2018S\u2019, \u2018R\u2019, \u2018S\u2019)"},{"entry":"\/\/"},{"entry":"ULONG Identifier;"},{"entry":"\/\/"},{"entry":"\/\/ 2 bytes: FSRS Structure Size"},{"entry":"\/\/"},{"entry":"\/\/ The number of bytes in the FSRS, from the beginning to the"},{"entry":"\/\/ end (including the Jmp)."},{"entry":"\/\/"},{"entry":"USHORT Length;"},{"entry":"\/\/"},{"entry":"\/\/ 2 bytes: FSRS Checksum"},{"entry":"\/\/"},{"entry":"\/\/ A two byte checksum calculated over the bytes starting at FsName and"},{"entry":"\/\/ ending at the last bytes of this struct, skipping the Jmp and Checksum"},{"entry":"\/\/ fields."},{"entry":"\/\/"},{"entry":"USHORT Checksum;"},{"entry":"\/\/"},{"entry":"\/\/ Future fields can be added at the end as long as the length field"},{"entry":"\/\/ is adjusted."},{"entry":"\/\/"},{"entry":"} FILE_SYSTEM_RECOGNITION_STRUCTURE;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"An application programming interface (API) may be used to request the file system recognition structure . The existing file systems may not have the ability to recognize partitions of storage media that contain a valid file system that has not been defined yet, but the media may be able to identify itself through the presence of a file system recognition structure as described previously. As existing file systems may not recognize a new file system, RAW may mount the partition and provide direct block level access. Rather than offer to format the partition (an erase all the data), the RAW file system may have the ability to recognize the file structure and provide applications access to such structures through a file system control request, such as FSCTL_QUERY_FILE_SYSTEM_RECOGNITION. The following data structure may be returned to the application in response to the request:",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/"},{"entry":"\/\/ Structure for FSCTL_QUERY_FILE_SYSTEM_RECOGNITION"},{"entry":"\/\/"},{"entry":"typedef struct_FILE_SYSYTEM_RECOGNITION_INFORMATION{"},{"entry":"\u2003\u2003CHAR FileSystem[9];"},{"entry":"} FILE_SYSTEM_RECOGNITION_INFORMATION,"},{"entry":"*PFILE_SYSTEM_RECOGNITION_INFORMATION;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A checksum may operate on the response. The checksum may take on a variety of forms. In one embodiment, the checksum is created as follows:","A valid checksum may be determined as follows:",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"USHORT"},{"entry":"ComputeFileSystemInformationChecksum ("},{"entry":"\u2003_in PFILE_SYSTEM_RECOGNITION_STRUCTURE Fsrs"},{"entry":"\u2003)"},{"entry":"\/*++"},{"entry":"compute the checksum for the file record"},{"entry":"Fsrs - pointer to the record"},{"entry":"Return value - checksum result"},{"entry":"\u2212\u2212*\/"},{"entry":"{"},{"entry":"\u2003\u2003USHORT Checksum = 0;"},{"entry":"\u2003\u2003USHORT I;"},{"entry":"\u2003\u2003PUCHAR Buffer = (PUCHAR) Fsrs;"},{"entry":"\u2003\u2003USHORT StartOffset;"},{"entry":"\u2003\u2003\/\/"},{"entry":"\u2003\u2003\/\/ \u2003Skip the jump instruction"},{"entry":"\u2003\u2003\/\/"},{"entry":"\u2003\u2003StartOffset ="},{"entry":"\u2003\u2003FIELD_OFFSET(FILE_SYSTEM_RECOGNITION_STRUCTURE,"},{"entry":"\u2003\u2003FsName);"},{"entry":"For (i=StartOffset; i< Fsrs \u2212>Length; i++){"},{"entry":"\u2003\u2003\/\/"},{"entry":"\u2003\u2003\/\/ \u2003Skip the checksum field itself, which is a USHORT."},{"entry":"\u2003\u2003\/\/"},{"entry":"\u2003\u2003if ((I == FIELD_OFFSET(FILE_SYSTEM_RECOG-"},{"entry":"\u2003\u2003NITION_STRUCTURE, Checksum)) \u2225"},{"entry":"\u2003\u2003(I == FIELD_OFFSET(FILE_SYSTEM_RECOG-"},{"entry":"NITION_STRUCTURE, Checksum)+1)) {"},{"entry":"\u2003\u2003continue;"},{"entry":"\u2003\u2003]"},{"entry":"\u2003\u2003Checksum = ((Checksum & 1) ? 0x8000 : 0) + "},{"entry":"\u2003\u2003(Checksum >> 1) + Buffer[i];"},{"entry":"\u2003}"},{"entry":"\u2003return Checksum;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"At block , if the response is not received or is not understood, an offer may be made to format that partition of the electronic storage device. If the response is not received, that partition of the electronic storage device  likely does not have a file system recognition structure of a similar system and may really be unformatted, new, corrupted, etc.","At block , if the response is understood, information may be obtained related to the response to access data on that partition of the electronic data storage device . The information may be obtained in a variety of ways. In one embodiment, the response is used to link to a known network location and requesting additional information (a driver) related to the response. The network link may be over the internet or any other appropriate network.","At block , once the data is received about the partition of the electronic storage device , communication may begin with that partition of the electronic storage device . In some embodiments, if the response appears corrupted, a disk analysis program on that partition of the electronic storage device  may be offered.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3","b":["500","300","305","152","310","315","320"]},"If, at block , the filesystem was RAW, then at block , a function may be called to query to file system recognition information such as FSCTL_QUERY_FILE_SYSTEM_RECOGNITION. At block , it may be determined if the method was successful or if a useful response was received. If a useful response was received, at block , the response may be used to find additional information about the file system and at block , the method may end.","If, at block  the function did not succeed, then at block , it may be determined that the partition does not contain a file system that has the file system recognition structure  on it or it is unformatted. At block , the method may end.","In conclusion, the detailed description is to be construed as exemplary only and does not describe every possible embodiment since describing every possible embodiment would be impractical, if not impossible. Numerous alternative embodiments could be implemented, using either current technology or technology developed after the filing date of this patent, which would still fall within the scope of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
