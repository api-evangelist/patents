---
title: Unified system for authentication and authorization
abstract: A request is received at an authorization framework via an authorization application programming interface (API) from a trusted application for authorizing a client application, where the client application requests a service provided by the trusted application. In response to the request, the client application is authorized in view of one or more authorization policies associated with the client application to determine whether the client application is authorized to access the requested service. A user associated with the client application is authenticated to determine whether the user is allowed to access the requested service. Thereafter, a value is returned from the authorization framework via the authorization API to the trusted application indicating whether the client application can access the requested service provided by the trusted application, based on results of the authorization and authentication.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09479509&OS=09479509&RS=09479509
owner: Red Hat, Inc.
number: 09479509
owner_city: Raleigh
owner_country: US
publication_date: 20091106
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["The present invention relates generally to security of data processing systems. More particularly, this invention relates to a unified system interface for authentication and authorization.","Traditionally operating systems, such as a UNIX operating system (OS), have a clear distinction between ordinary unprivileged users and the powerful super user with a \u201croot\u201d privilege. However, in order for a user to access and configure hardware additional privileges and rights are needed. This has been done in a number of often OS-specific ways. For example, some systems usually grant access to devices to a user if, and only if, the user is logged in at a local console. In contrast, other systems often rely on group membership, e.g. users in the \u201ccdrom\u201d group can access optical drives; users in the \u201cplugdev\u201d group can mount removable media; and so on.","Traditionally, authentication and authorization are two distinctive processes that require separate processing entities. There has been a lack of an efficient way for authenticating and authorizing a user session for accessing a privileged application.","In the following description, numerous details are set forth to provide a more thorough explanation of the embodiments of the present invention. It will be apparent, however, to one skilled in the art, that embodiments of the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring embodiments of the present invention.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification do not necessarily all refer to the same embodiment.","According to some embodiments, an interface is provided for privileged or trusted applications to access an authorization framework in determining whether a particular client (e.g., untrusted application) communicating with the privileged\/trusted application can access a service provided by the privileged\/trusted application. The actual decision-making process (e.g., authorization and\/or authentication) is hidden from the privileged\/trusted application. In authorizing a client, one implementation could read authorization policy from a local disk and another implementation could read authorization policy from a trusted directory server over a network, dependent upon a specific configuration. In addition, an authentication interface is provided to allow a user to gain temporary authorization by authenticating the user itself or as an administrator or a super user. Thus, the authorization framework is implemented combining the functionalities of authorization and authentication in a unified application programming interface (API), which is may be implemented as an inter-process call (IPC) or system bus message mechanism (e.g., D-bus or UNIX pipes).",{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","101","102","102","100","102","102","103","100","103","100"]},"In one embodiment, when client  communicates with privileged application  for accessing a service provided by the privileged application , privileged application  communicates with authorization framework  to determine whether client  is authorized for accessing the requested service. In response, authorization unit  is configured to authorize client  in view of one or more policies stored in the authorization database . The authorization database  may be implemented in one or more databases and stored in a storage device , which may be located locally or remotely over a network.","When privileged\/trusted application  communicates with authorization framework , certain information for identifying client  may also be communicated to the authorization framework , such as, for example, a user identifier (ID) identifying a user of a client application, a process ID identifying a client application, a session ID identifying a user or desktop session within which the client application is running, and\/or an action ID identifying an action to be carried out by the privileged\/trusted application . Certain OS specific attributes such as security context may also be included. Based on such information, authorization unit  examines one or more policies stored in authorization database  in order to determine whether client  is authorized to access a particular service (e.g., action) carried out by the privileged\/trusted application . The trusted application  may have registered or declared certain actions and the required privileges associated with the actions with the authorization framework, which may be stored in the authorization database .","The result of the authorization process may be a \u201cyes\u201d which indicates that the requested action should be carried out by the trusted application . Alternatively, the result of the authorization process may be a \u201cno\u201d which indicates that the requested action should not be carried out by the trusted application . Further, the result of the authorization process may be an \u201cauthentication required\u201d which indicates that the requested action should only be carried out by the trusted application  if the user of the client application has been successfully authenticated. According to one embodiment, the privileged\/trusted application  may specify or include an attribute indicating whether a user interaction is allowed. If no user interaction is allowed, there is no authentication happened and only in this situation will it receives the \u201cauthentication required\u201d result. However, if the user interaction is allowed, it may not receive the \u201cauthentication required\u201d result, but the authentication determination performed on the authorization framework  could take a relatively long period of time. According to one embodiment, the privileged\/trusted application  can also cancel or terminate the authorization determination process performed via the authorization framework  if such a process takes too long.","If it is determined that client  is authorized to access the requested service, but would require authentication, authorization framework further determines whether a user associated with client  should be authorized to access the requested services by authenticating the user. In some situations, a client machine can be a workstation that is shared by multiple users with different privileges (e.g., regular user, super user, or administrator privilege). If it is determined that the user of client  needs to be authenticated, authentication unit  invokes an authentication agent  which is running within the same user session of client , which may be identified by a session ID. Authentication agent  may display a dialog box, such as dialog boxes as shown in , for prompting the user to enter certain credentials to authenticate the user itself. Based on the credentials entered by the user, authentication unit  is configured to authenticate the user in view of authentication information stored in database . If the user is successfully authenticated, authorization framework  returns a value to privileged\/trusted application  indicating whether the requested service is authorized to be carried out by the privileged\/trusted application . Note that authorization framework  may be a core component of an operating system running within system . Note that the authentication agent  can run on a completely separate device communicatively coupled to system  via a communication link, wired or wireless. For example, an authentication agent may be a separate device having a small display and a button (e.g. cellular phone) that is coupled to system  via a universal serial bus (USB) connection. In some situations, the authentication agent is designed to not require a password\u2014merely pressing a single button would be sufficient for authentication. In other situations, it may ask for passwords or other kinds of authentication (e.g., checking fingerprint, etc.) Also note that although authentication agent  is related to a user session, it may not necessarily part of the user session of client . The authentication agent  can serve one or more user sessions.","In addition, authorization framework  includes one or more extension interfaces  to allow third-party vendors and\/or sites to implement certain extensions to further control authorization policies. For example, a third-party authority may be authorization framework  implemented either locally (as part of computer system ) or remotely (as part of a different computer system) over network , which may be a local area network (LAN), a wide area network (WAN), or a combination of both LAN and WAN.","Thus, authorization framework  provides an authorization API to be used by privileged\/trusted application  offering services to unprivileged application  through some forms of IPC mechanisms such as D-bus or UNIX pipes. The privileged application  typically treats client  as an untrusted application. For every request received from client , privileged\/trusted application  needs to determine if the request is authorized or privileged\/trusted application  should refuse to service client . By using the authorization API, privileged\/trusted application  can offload the authorization and\/or authentication process to authorization framework .","In addition to acting as an authority, authorization framework  allows a user to obtain a temporary authorization through authenticating either an administrator or an owner of the user session associated with client . This is useful for scenarios where a privileged\/trusted application needs to verify that the operator of client  really is the user or really is an administrator. Authentication agent  is used to request a user of a user session to prove that the user of the session really is the user (by authenticating as the user) or an administrative user (by authenticating as an administrator).","In one embodiment, authentication agent  may provide a graphical user interface (GUI) as shown in . Referring to , GUI  is designed to inform a user in a message  that an application is attempting to perform an action that requires privileges and the user has to be authenticated as a super user by entering a password associated with a super user in field  for the purpose of authenticating the user. Alternatively, as shown in , if the system is configured without a \u201croot\u201d account, GUI  may be used to allow a user to select one of the predetermined users in field  and to enter an associated password in field  for the purpose of authenticating the user.","Components - can be implemented as core components of an operating system (OS). Component  may a third-party application that is certified by a vendor of the operating system running within system . Authentication can be specified (in a return value) as either user authentication (e.g., user enters its own password) or super user authentication (e.g., user enters the root password or a user in an administrator group authentication). The authorization can be maintained: 1) indefinitely (e.g., it persists across multiple user sessions or reboot); 2) for the remainder of the desktop session; and 3) within a period of time (e.g., a life-time of a particular process). Note that some or all of the components as shown in  may be implemented in software, hardware, or a combination of both.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["300","300","101","301","302","303","304","305"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4","b":"800"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus .","Processing device  represents one or more general-purpose processing devices such as a microprocessor, a central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device  is configured to execute the instructions  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a computer-accessible storage medium  (also known as a machine-readable storage medium or a computer-readable medium) on which is stored one or more sets of instructions or software (e.g., authorization framework ) embodying any one or more of the methodologies or functions described herein. The authorization framework  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system , the main memory  and the processing device  also constituting machine-accessible storage media. The authorization framework  may further be transmitted or received over a network via the network interface device .","The computer-readable storage medium  may also be used to store the authorization framework  persistently. While the computer-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201ccomputer-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The terms \u201ccomputer-readable storage medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201ccomputer-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","The modules , components and other features described herein can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs or similar devices. In addition, the modules  can be implemented as firmware or functional circuitry within hardware devices. Further, the modules  can be implemented in any combination hardware devices and software components.","In the above description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201creceiving\u201d or \u201cauthorizing\u201d or \u201cauthenticating\u201d or \u201creturning\u201d or \u201cinvoking\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable medium. A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (\u201cROM\u201d), random access memory (\u201cRAM\u201d), magnetic disk storage media, optical storage media, flash memory devices), etc.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description above. In addition, embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.","In the foregoing specification, embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of embodiments of the invention as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 2A-2B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
