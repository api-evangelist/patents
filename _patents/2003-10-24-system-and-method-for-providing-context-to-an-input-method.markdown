---
title: System and method for providing context to an input method
abstract: An improved system and method for providing context information of executable code to an input method is provided. Advanced text input methods may be made aware of the type of text expected to be received as input so that input methods may achieve a higher accuracy in recognition of text input. Generic interfaces provide a framework for supporting application authoring platforms to allow application developers to easily specify context information to the system and have it reliably forwarded to the correct input methods. Additionally, a context tagging tool may associate specific text input fields of an existing application with an input scope without modifying the application itself. The context tagging tool may create a manifest that contains tags associating the specific text input fields with an input scope. Any advanced input methods use by the application may be updated with instructions for accessing the context information stored in the manifest.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07634720&OS=07634720&RS=07634720
owner: Microsoft Corporation
number: 07634720
owner_city: Redmond
owner_country: US
publication_date: 20031024
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The invention relates generally to computer systems, and more particularly to an improved system and method for providing context to an input method.","Advanced text input methods such as handwriting, speech, and Input Method Editors (IMEs) are often limited to leveraging language rules and a language dictionary as the primary forms of context used to achieve accuracy in recognition of text input. Contextual information such as unigrams or n-grams has been traditionally provided as part of the language model to such input methods to increase accuracy in recognition of natural language input. Unfortunately, some of the most common fields of applications and of forms expect input that may not conform to the language rules of a specific language and may not even conform to the vocabulary of a specific language. For example, an email field may expect an email address as input. Most, if not all, email addresses do not conform to the language rules or vocabulary of a specific language. English language rules which require, for example, a space between words do not apply to an email address. Similarly, a field may expect a Uniform Resource Locator (URL), which also may not conform to the language rules or vocabulary of a specific language. As a result, such input methods may be severely limited in their ability to accurately recognize input for these types of fields. Users consequently may have an unsatisfactory experience when using such input methods that result in poor recognition accuracy for these types of fields.","Furthermore, in applications where the vocabulary may be restricted, such as in command and control applications, the context has been traditionally constrained by restricting the dictionary of the language to fewer words. However, this technique has been limited in its use by a single application for a specific input method. Multiple input methods could not use this technique for constraining context without implementing the technique for each separate input method.","What is needed is a way for advanced text input methods to be made aware of the type of text expected to be received as input so that higher accuracy in recognition of text input may be achieved. Additionally, such a system should allow any input method to use the context provided by an application so that the user may switch between input methods to input the information for the field.","Briefly, the present invention provides an improved system and method for providing context information of executable code to an input method. Advanced text input methods may be made aware of the type of text expected to be received as input so that such input methods may achieve a higher accuracy in recognition of text input. To this end, an architecture is provided with a generic interface for supplying context information so that applications can provide input scope for any of their fields expecting text input. Furthermore, any input method may use the context information provided by an application. Consequently, users may switch between input methods to input information to the application without loss of the context information.","The present invention additionally provides a system of components including a context component with generic interfaces and a context tagging utility. The generic interfaces provide a framework for supporting application authoring platforms to allow application developers to easily specify context information to the system and have it reliably forwarded to the correct input methods. Such context information may include a common input scope, a set of input scopes, a word or phrase list, a custom input scope defined by a regular expression or other grammar.","In addition to providing a system and method for development of new applications, the present invention may also support existing applications without needing to modify the application itself by providing a context tagging tool for associating specific text input fields of an application with an input scope. The context tagging tool may create a manifest that contains tags associating the specific text input fields with an input scope. Such a manifest may be stored along with the program files. Any advanced input methods use by the application may be updated with instructions for accessing the context information stored in the manifest. Thus, existing applications may also benefit from use of the present invention for increasing accuracy of recognition for text input fields by advanced input methods.","Advantageously, the context tagging tool includes a user interface for tagging text input fields or controls of an existing application or executable code with an input scope. The user interface allows a text input field or control and an input scope to be selected, and their resulting association to be added to the manifest. Additionally, the user interface may include a phrase list editor and a custom input scope editor for creating, editing and managing a phrase list and a custom input scope respectively.","Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:","Exemplary Operating Environment",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, headless servers, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the, signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules  and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a tablet, or electronic digitizer, , a microphone , a keyboard  and pointing device , commonly referred to as mouse, trackball or touch pad. Other input devices not shown in  may include a joystick, game pad, satellite dish, scanner, or other devices including a device that contains a biometric sensor, environmental sensor, position sensor, or other type of sensor. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . The monitor  may also be integrated with a touch-screen panel or the like. Note that the monitor and\/or touch screen panel can be physically coupled to a housing in which the computing device  is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device  may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface  or the like.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Providing Context to an Input Method","The present invention is generally directed towards a method and system for providing context information of executable code to an input method. As used herein, context information generally means an input scope. An input scope is a subset of a language that is used to define what words, numbers, and punctuation can be written and may also specify in what order they may be written. An input scope can be used by applications to restrict the language model used by a recognizer of an input method to the type of text input an application is expecting in a text field. As will be seen, the invention may enable advanced input methods to achieve a higher accuracy recognition rate for text input to application fields by providing an architecture that supports applications or forms to specify what type of text input they are expecting in their text fields. Many text input fields in forms and dialogs are strongly typed, like the fields in a web order form or in a dialog window for updating personal contacts. The information about the type of text expected can greatly improve accuracy when specified to the recognition engines of the advanced input methods.","The architecture of the present invention allows applications that expect text input to fields or forms to provide this context information in a general way without interacting directly with the advanced input methods. To this end, the architecture provides a generic interface for supplying context information so that applications can provide input scope for any of their fields expecting text input. The system and method also provide a generic API to allow any input method to use the context information provided by the application to improve recognition accuracy. Furthermore, since any input method may use the context information provided by the application, a user may switch between input methods to input information to the application without loss of the context information. As will be understood, the various block diagrams, flow charts and scenarios described herein are only examples, and there are many other scenarios to which the present invention will apply.","Turning to  of the drawings, there is shown a block diagram generally representing an exemplary architecture of system components for providing context information of executable code to an input method. Those skilled in the art will appreciate that the functionality implemented within the blocks illustrated in the diagram may be implemented as separate components or the functionality of several or all of the blocks may be implemented within a single component. For example, the functionality of the context component  may be included in the context client . Or the functionality for the InputScopeCollection interface in the context component  may be implemented in a separate component.","Any executable code  that expects text input to a field may provide context information for that field to a context component  by invoking an interface, such as SetInputScope Interface . The executable code  may be any type of executable software code such as a kernel component, an application program, a dialog box or form, a script, a linked library, a linked or embedded object, and so forth. The context component  includes an interface, such as a SetInputScope Interface , for setting an input scope of executable code , and also an interface, such as a InputScopeCollection Interface, for obtaining an input scope that has been set for a text input field of executable code . The context component may be any executable software code including a kernel component, an application component, a component of a linked library, an object, and so forth. A context client  such as one or more Input Method Editors , a Handwriting Recognizer , a Speech Recognizer , or other recognizer of any additional type of input method, may query the InputScopeCollection interface  included as part of the context component  to obtain an input scope set for executable code . This architecture may allow applications or other executable code that expect text input to fields or forms to provide context of input scope in a general way without interacting directly with the advanced input methods.","The SetInputScope Interface  shown in  may be an API, an object, a control or other executable code. For example, in one embodiment the SetInputScope Interface  may be an API named \u201cSetInputScope\u201d. In this embodiment, the SetInputScope API may associate a control or text input field with one common input scope or one wordlist. For example, the SetInputScope API may have the following programming language declaration:",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT SetInputScope("]},{"entry":[{},"\u2003\u2003[in] HWND hwnd;"]},{"entry":[{},"\u2003\u2003[in] InputScope inputscope)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This API may expect a window handle and a pointer to a list of input scopes. This API may be used to set a common input scope defined by a parameter of type InputScope by invoking the API as SetInputScope (hwndme, IS_URL), where IS_URL may be a parameter signifying an internally defined format with an associated fixed list of characters. Additionally, this API may used to set a word list by passing the word list as a parameter of type InputScope by invoking the API as SetInputScope (hwndme, {\u201cmale\u201d, \u201cfemale\u201d}).","In another embodiment, the SetInputScope Interface  may be an API named \u201cSetInputScopes\u201d. In this embodiment, the SetInputScopes API may associate a control or text input field with one common input scope, multiple common input scopes, one word list, or one custom input scope. The custom input scope may be defined by a regular expression or any other way including a grammar like that specified in W3C Speech Recognition Grammar Specification (SRGS). For example, the SetInputScopes API may have the following programming language declaration:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT SetInputScope("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] HWND hwnd;"]},{"entry":[{},"[in] const InputScope *pInputScopes;"]},{"entry":[{},"[in] UINT cInputScopes;"]},{"entry":[{},"[in] WCHAR **ppszPhraseList;"]},{"entry":[{},"[in] UINT cPhrases;"]},{"entry":[{},"[in] WCHAR *pszRegExp;"]},{"entry":[{},"[in] WCHAR *pszSRGS)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This API may expect a window handle, a pointer to a list of input scopes, the number of input scopes in the list, a pointer to a phrase list, the number of phrases in the list, a regular expression defining an input scope, or a grammar such as SRGS defining an input scope. This API may be used to set several common input scopes passed by a parameter list of input scopes by invoking the API as SetlnputScopes (hwndMe, {IS_DEFAULT Is_PersonalName_FullName, IS_EMAIL_USERNAME, IS_EMAIL_SMTPEMAILADDRESS}, 4, NULL, NULL, NULL, NULL) where IS_DEFAULT, IS_PERSONALNAME_FULLNAME, IS_EMAIL_USERNAME, and IS_EMAIL_SMTPEMAILADDRESS may each signify an internally defined format with an associated fixed list of characters. Additionally, this API may be used to set a list of words or phrases by passing the list as a parameter of type InputScope by invoking the API as SetlnputScopes (hwndMe, {_IS_PHRASELIST IS_DEFAULT}, 2, {\u201cmale\u201d, \u201cfemale\u201d}, 2, NULL, NULL). Additionally, this API may be used to set a custom scope of input defined by a regular expression, grammar, or other definition, such as by invoking the API as SetInputScopes (hwndMe, IS_SSN, 2, NULL, NULL, IS_DIGITS.\u201c-\u201d.IS_DIGITS.\u201c-\u201d.IS_DIGITS, NULL).","In either embodiment, such an API may support coercion of the input according to the definition of the input scope. Coercion means herein to constrain the recognition of the input to the definition of the input scope. In this case, a recognizer of an input method is constrained to conform to the exact definition of the input scope and may not use another definition of input scope. If coercion of the input is not specified, a recognizer of an input method may interpret the input scope specified as a recommendation, but may not constrain recognition to just that definition. In yet another embodiment, if a custom input scope definition conflicts with a common input scope or a wordlist, the definition of custom input scope may take precedence over the common input scope of wordlist.","The present invention is advantageously extensible so that additional APIs may be added. For instance, an input scope may be set using an API that defines an XML schema such as:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT SetInputScopeXML("]},{"entry":[{},"\u2003\u2003[in] HWND hwnd"]},{"entry":[{},"\u2003\u2003[in] WCHAR *pszXML)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The InputScopeCollection Interface  shown in  may be an API, an object, a control or other executable code. For example, in one embodiment the InputScopeCollection Interface  may be an object with methods that may be invoked by an input method for obtaining the input scope for a text input field specified by any executable code. In this exemplary embodiment, the recognizer of an input method may call a constructor of the object with a valid window handle for the application and then may access the public properties and may also call the public methods to access the different input scopes associated with the window handle for the application. The object may get a set of input scopes associated with a control, the individual input scopes from the set associated with the control, a regular expression from the set associated with the control, and a list of phrases from the set associated with the control. The class definition for an instance of such an object may be for example:",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Class Name"]},{"entry":[{},"public InputScopeCollection"]},{"entry":[{},"Public InputScopeCollection (IntPtr hWnd);"]},{"entry":[{},"Public bool HasInputScopes;"]},{"entry":[{},"Public int Count;"]},{"entry":[{},"Public InputScope [ ] InputScopes;"]},{"entry":[{},"Public string RegularExpression;"]},{"entry":[{},"Public string [ ] Phrases;"]},{"entry":[{},"methods"]},{"entry":[{},"public string Phrase(int index)"]},{"entry":[{},"public int InputScopes(int index)"]},{"entry":[{},"public string InputScopeEnumName(int index)"]},{"entry":[{},"public override string ToString( )"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The constructor \u201cInputScopeCollection\u201d may take a handle to a window and may find a set of input scopes that may be associated with it. The public property \u201cHasInputScopes\u201d may determine whether there is any input scope associated with the control. The public property \u201cCount\u201d may return the number of input scopes that may be associated with the control. The public property \u201cInputScopes\u201d may return an array containing a set of input scopes that may be associated with the control. The public property \u201cRegularExpression\u201d may return a regular expression associated with the control. And the public property \u201cPhrases\u201d may return a string array containing the phrases associated with the control.","Any number of methods may be provided by an object that is an embodiment of the InputScopeCollection Interface  for obtaining the input scope for a text input field. For example, in the exemplary class definition of InputScopeCollection above, the method \u201cPhrase(int index)\u201d may return a phrase that is indexed by a requested index. The method \u201cInputScopes(int index)\u201d may return an input scope that is indexed by a requested index. The method \u201cInputScopeEnumName(int index)\u201d may return a name of an input scope at a specific location index. And the method \u201cToString( )\u201d may return a string representation of an input scope for a specific instance. Those skilled in the art will appreciate that the interfaces represented in  are exemplary representations and that the present invention may be practiced using other interfaces defined for setting input scope and obtaining context information.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3","b":["302","304","306","308","310"]},"A developer of executable code may use the present invention to tag text input fields of executable code to achieve a higher recognition rate by advanced input methods. For example, a developer may choose to create a Real Estate Request form designed for use with a tablet personal computer that recognizes handwriting to allow real estate agents to complete such a form using handwriting. During design and development of the executable code for this application, the developer may review the available interfaces of the present invention for setting input scope and the pre-defined formats of input scope for different types of text input fields. Upon discovering that there are available predefined formats suitable for text input fields, the developer may tag the input text fields and controls in the request form. The developer may be pleased to find that he can also easily combine predefined formats such as a format for the date and a format for the time for use by a \u201cDate\/Time\u201d field. Additionally, the developer may find that he can add in a list for a given field. Note that the list may improve recognition for input into the given field and may also be used by a real estate agent to select an item from the displayed list for input into a field of the form. For any fields that may require a custom format of input scope, the developer may define such a custom input scope using a regular expression. For easy use and access by developers of such applications, the interfaces and predefined formats for input scope of the present invention may be packaged in a software development kit (SDK) or other form of distribution.","Context Tagging Tool for Providing Context to an Input Method","In another embodiment, the present invention may also provide a way for an application to supply context information for its specific text input fields without needing to modify the application itself. Such context information may be provided by using a context tagging utility so that existing applications may be able to benefit from use of the present invention for increasing accuracy of recognition for text input fields by advanced input methods. Context tagging as used herein means associating an input scope with a text input field or control of an application or executable code. In this embodiment, the context information tagged may be loaded for the existing applications and any advanced input methods used for input recognition may be updated for using the loaded context information. Advantageously, the existing application or executable code may be left unmodified but may still enjoy the benefit of the present invention by means external to the application or executable code.","In one embodiment for providing context information through external means, a manifest file may be created that may contain input scope information for the application or executable code. There may be a manifest file created in this embodiment by a context tagging tool for each application or executable code and each manifest file may be stored along with other program files of the application or executable code. The context tagging tool may be used in this embodiment to tag a specific text input field in executable code with an input scope. The tool may then create and write this mapping in turn into a manifest file. The tool may additionally ensure that the manifest file is stored in the right location for the specific application or executable code. Application developers may alternatively create this manifest file directly and may also edit a manifest file.","An advanced input method may be updated with instructions to look for a manifest file associated with the executable code and to look within the manifest file for an input scope associated with a specific text input field. Upon finding an input scope associated with a specific text input field, an advanced input method may read the context information and then pass the context information on to a recognizer for use in recognition of input by the advanced input method for the text input field.","Turning to  of the drawings, there is shown a block diagram generally representing an exemplary architecture of system components for providing context information of executable code to an input method using a context tagging utility. Those skilled in the art will appreciate that the functionality implemented within the blocks illustrated in the diagram may be implemented as separate components or the functionality of several or all of the blocks may be implemented within a single component. For example, the functionality of the context component  may be included in the context client . Or part of the functionality for the manifest interface in the context tagging tool  may be implemented in a separate component.","Any executable code  that expects text input to a field may have context information for that field tagged by a context tagging tool . The context tagging tool  may be any type of executable software code such as a kernel component, an application program, a linked library, and so forth. The context tagging tool  may tag a specific text input field in executable code with an input scope. The context tagging tool  may include a user interface , a control interface , and a manifest interface . The user interface  may include a screen for selecting executable code to tag, a tag control screen, a select control screen, a screen to manage a phrase list, and a screen to manage custom input scope. The control interface  may include an interface, such as a SetInputScope Interface , for setting an input scope for a specific text input field of executable code . And the manifest interface  may create or open a manifest  and write the mapping of an input scope for a specific text input field into the manifest . The manifest interface  may additionally ensure that the manifest  is stored along with the program files for the specific application or executable code . The manifest  may be a file, such as an XML file, or other storage object that contains context information for a text input field. For example, an email name field may be defined as a URL input scope in a manifest . A context component  may access context information in the manifest  by invoking an interface, such as InputScopeCollection Interface . In this embodiment, the context component  includes an interface, such as an InputScopeCollection Interface , for accessing an input scope for a text input field of executable code  that is stored in the manifest . The context component may be any executable software code including a kernel component, an application component, a component of a linked library, an object, and so forth. A context client  such as one or more Input Method Editors , a Handwriting Recognizer , a Speech Recognizer , or other recognizer of any additional type of input method, may query the InputScopeCollection Interface  included as part of the context component  to obtain an input scope set for executable code . This architecture may allow an existing application or other executable code that expects text input to fields or forms to provide context of input scope in a general way without interacting directly with the advanced input methods and without requiring modification of the existing application or executable code.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 5","b":["502","402","135","504","506","508","410","206","202","512"]},"The context tagging tool  may include a user interface  for tagging text input fields or controls of an existing application or executable code with an input scope.  is an exemplary illustration generally representing an embodiment of a screen of the user interface  for selecting an application or executable code. The welcome screen  may include a scrollable list of installed applications or executable code  from which an application may be selected (by a touch pad or mouse or any other way) for tagging its text input fields or controls with an input scope.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 7","FIG. 8","FIG. 8"],"b":["404","702","704","704","702","802","802","804","602","802","804"]},"Returning to the tag control screen  of , there is also shown a display area  for selecting one or more input scopes to be associated with the control or field previously selected in display area . Once the input scope has been selected and thereby associated with the previously selected control or field, the associated context tag may be added or updated in the manifest  by activating the \u201cAdd\u201d button illustrated in display area . Controls or fields that have been added or updated in the manifest  may be listed in the display area  labeled \u201cTagged Controls\u201d.","Additionally, the user interface  may include a phrase list editor as shown on the \u201cManage Phrase List\u201d screen  of .  is an exemplary illustration generally representing a screen of a graphical user interface of a context tagging tool for managing a phrase list. A phrase list editor  may be used to create, edit and manage phrase lists that may be available as an input scope in display area  for a text input field or control. Available phrase lists may be displayed in display area  for convenience in deleting an existing phrase list or creating a new phrase list. Similarly, the user interface  may include a custom input scope editor as shown on the \u201cManage Custom Scopes\u201d screen  of .  is an exemplary illustration generally representing a screen of a graphical user interface of a context tagging tool for managing a custom scope. A custom input scope editor  may be used to define, edit and manage custom input scopes that may be available as an input scope in display area  for a text input field or control. Available custom input scopes may be displayed in display area  for convenience in deleting an existing custom input scope or creating a new custom input scope.","Advantageously, the user interface  of the context tagging tool described enables any executable code or application to benefit from use of the present invention for increasing accuracy of recognition without needing to modify the application or executable code itself The present invention may enhance any executable code or application such as real estate request forms, online registration forms, ecommerce order forms, online payment forms, and so forth. It provides a format for context information that may include a combination of input scopes, word lists, and regular expressions along with an interface for attaching it to a text input field of executable code.","As can be seen from the foregoing detailed description, the present invention provides an improved system and method for providing context information of executable code to an input method. The architecture of the present invention defines a common and unified context representation that applications may use to specify context properties for text input fields to improve the user experience for entry of text input via advanced input methods such as handwriting, speech, input method editors and so forth. The context information is extensible and developers can provide more detailed context constraints as desired. As is now understood, the present invention provides a framework with interfaces for supporting application authoring platforms to allow application developers to easily specify such context information to the system and have it reliably forwarded to the correct input methods. The method and system thus provide significant advantages and benefits needed in contemporary computing. Moreover, the present invention also provides a solution for providing context information of existing executable code or applications by using a context tagging tool that does not need to modify the executable code or applications. A manifest may be stored along with the program files and any advanced input methods use by the executable code or program may be updated with instructions for accessing the context information stored in the manifest.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
