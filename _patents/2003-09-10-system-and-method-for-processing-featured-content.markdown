---
title: System and method for processing featured content
abstract: A system and method for retrieving, storing and displaying featured content. In one embodiment, featured content is queried from a database storing a list of featured content items. The featured content items stored in the database may include any type of data, such as text data, hyperlink text data, markup document data, computer code, or other types or combinations of data related to a particular topic. Responsive to the query, a set of featured content items is stored in a cache file. A predetermined number of featured content items stored in the cache file are selected and stored in a system registry. Upon receipt of a display command, featured content items are read from the system registry and displayed on an interface. The displayed featured content items can be used to display hyperlinks, announcements, or other information, without inhibiting the efficiency of the boot process of a software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07895529&OS=07895529&RS=07895529
owner: Microsoft Corporation
number: 07895529
owner_city: Redmond
owner_country: US
publication_date: 20030910
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["The present invention relates to computer programs and, in particular, a method and system for retrieving, storing, and displaying featured content.","Many existing software applications provide support functions that display suggestions, announcements, or other featured content to aid users. The display of featured content is often used to highlight new features of a software application, share new user tips, provide user instruction, etc. For example, during the boot process of Microsoft Word\u00ae, the application may display a message that greets a user and describes a user tip, e.g., a message describing an efficient method for organizing Word\u00ae documents into folders. To facilitate such support functions, some software applications include a static list of messages featuring certain topics that may be of interest to users. When a command to display a message is invoked, which may be during a boot process or upon receipt of a user command, a message is randomly selected from the static list and displayed to the user.","Although the above-described support functions are useful in displaying suggestions, announcements, or other featured content, existing systems have a number of drawbacks. For instance, existing software applications are limited to a fixed number of messages that can be displayed because the messages are hard-coded in the application files prior to the application's release date. The hard-coded messages are limited to concepts that were conceived prior to the application's release date. In addition, the messages may become ineffective because the display of each message is repeated over a period of time. In addition to having the potential of becoming ineffective, the messages may become incorrect over time. For instance, if a Web address or a help-line telephone number is contained in a message, the message may not communicate correct information if the displayed Web address or telephone number changes after the application's release date.","The above-described support functions also present other problems associated with the performance of a software application. For instance, if a software application selects, retrieves, and displays a text message during the boot process of the application, the duration of the boot process may be unnecessarily prolonged. The boot process is inhibited because of the need to use complex instructions that are associated with reading data from files stored on a hard drive. Thus, the above-described support functions work against the long-standing need to continually improve the speed and efficiency of the boot process of software applications.","There are also many other problems associated with featured content when it is displayed on a Web-based application. For example, if a Web page is configured to describe a particular software product, the Web page may be configured with a section having special instructions, announcements or other featured content related to the product. Unfortunately, many Web pages are static in nature, meaning the Web page only displays the content that is coded in the underlying markup language. Thus, if the instructions, announcements or other featured content needs to be updated, an administrator has to select new featured content and modify the underlying markup language of the Web page to display the new featured content. The process of manually updating featured content displayed on a Web page, especially when the modifications apply to a large volume of Web pages, is a labor intensive process that is subject to additional problems caused by human error.","As will be readily understood from the foregoing, there is a need for an improved system and method for selecting and displaying featured content. In addition, there is a need for a system and method for minimizing the delay time that is caused by the display of messages during the boot process of a software application.","The present invention is directed to a system, method, and computer-readable medium for retrieving, storing, and displaying featured content. For purposes of illustrating the present invention, featured content may be any type of data, such as text data, image data, hypertext link data, markup document data, computer code, or other types or combinations of data that communicate a message or information related to a particular topic.","In accordance with one aspect, the present invention provides a method, system, and computer-readable medium that allows software applications to access a dynamically updated database of featured content items. A calling software application utilizing the present invention sends a query to the database to obtain featured content items associated with a topic. Next, the database returns a data set of featured content items to the calling software application and the data set is stored in a cache file. A predetermined number of featured content items stored in the cache file are selected and stored in a system registry. Upon receipt of a display command, which may occur during the boot process of the calling software application, the featured content items stored in the system registry are displayed on an interface. Hyperlinks, announcements, or other information can be displayed without inhibiting the efficiency of the boot process of a software application.","In one embodiment of the present invention, the above-described method is used to display featured content items that communicate user instructions. For example, featured content items may be positioned in a graphical user interface to provide users with some guidance on conducting a keyword search. One specific embodiment displays a sample search string near a text input field of a search program. When a sample search string is obtained and stored by the use of the above-described method, the search string is dynamically updated on the interface of the search program. This embodiment provides a mechanism for providing new and\/or popular search strings suggestions in a search program.","In another aspect, the present invention provides a method and system for displaying featured content items on a Web page. Generally described, this embodiment automatically retrieves, selects, and integrates featured content items into a Web page so that the underlying code of the Web page does not have to be manually updated each time a featured content is modified. In one specific embodiment, keywords or other identifiers are included in a Web page request. When the Web page request is received by a Web server, the keywords or other identifiers are sent to a database search application in the form of a database query. The database search application obtains the query and returns a data set of featured content items. The data set is then integrated into a Web page for display of the featured content items.","In yet another aspect, the present invention provides a method and system for dynamically updating featured content items stored in a database. This aspect of the invention provides an automated process for updating featured content items so that the above-described embodiments can readily obtain and display new messages that are of interest to users. In an exemplary embodiment, an update method is periodically executed. During execution, the update method updates various database attributes that characterize a popularity rating and a priority rating in each item stored in a database. The update method also examines one or more time stamps to determine if individual featured content items have expired.","The following description of the present invention first provides an overview of a computer network in which the present invention may be implemented. Following that, a description of a method for retrieving and displaying featured content items is described and shown in accompanying flow diagrams. In addition, the description summarizes a method for retrieving and displaying featured content items to be displayed in a Web-based application. Lastly, a description of a method for updating a database of featured content items is described and shown. The illustrative examples described herein are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Similarly, any process steps described herein may be interchangeable with other steps, or several combinations of steps, in order to achieve the same result.","Referring to , the following is intended to provide an exemplary overview of a computer network  in which the invention may be implemented. The illustrated computer network  comprises a plurality of client computers and devices A, B, C, D, a Web server , and a search server . The client computers and devices are illustrated as personal computers (PCs), including portable PCs A, B, a personal digital assistant (PDA) C, and a telephone D. Obviously, these client computers and devices should be considered as exemplary and not limiting. The client computers and devices and the servers, depicted in , are configured to electronically communicate via a network . The network  may be a local area network (LAN) or a larger network, such as a wide area network (WAN) or the Internet. In addition, the Web server  and the search server  may be controlled by a single entity and thus also configured to electronically communicate via a second LAN . Although this example shows a configuration using two servers, the system and method of the present invention may be implemented on other computer system configurations having one server, or many more servers than those shown in .","As known to those having ordinary skill in the art and others, the computer network  may be configured to exchange documents, commands, and other known types of information between the client computers and devices A, B, C, D and servers  and . As will be appreciated by those skilled in the art and others, the computer network  shown in  is a simplified example of one suitable computer network for implementing the present invention and that the present invention is not limited to this example.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 2","FIG. 2","FIG. 1"],"b":["103","104","102","102","102","102","103","103","103","101","160","160","103"]},"The Web server  also includes a central processing unit (CPU) , a video display adapter , and mass memory , all connected together and to the network interface  by a bus . The mass memory  generally comprises RAM, ROM, and permanent mass memory, such as a hard disk drive, tape drive, optical drive, floppy disk drive, or combination thereof. The mass memory device  stores an operating system  for controlling the operation of the Web server . As is known to those of ordinary skill in the art, the operating system may be formed by a general-purpose server operating system such as a Microsoft\u00ae server operating system, UNIX or LINUX\u2122. A binary input\/output system (\u201cBIOS\u201d)  for controlling the low-level operation of server  is also stored in the mass memory device .","The mass memory device  also stores the program code and data for providing a Web or other network site that allows users to request, receive, and view information and data files stored in the Web server . Thus, the mass memory device  may store a Web server application , which may be any one of a number of commercially available software packages. The Web server application  comprises computer executable instructions that, when executed by the server , generate configurable markup documents, such as the sample markup documents shown in  and described below. The Web server application  may be configured with a commercially available database search application  to facilitate the database search functions described below. The mass memory device  also stores other software components that facilitate various other functions of the present invention. More specifically, the software components for performing the methods of the present invention may be supported by or included as part of one or more commercially available software applications, such as a .NET\u00ae server . Although this illustration includes examples of specific software applications and databases, it is to be understood that this should be taken as exemplary and not limiting.","The Web server  may also include an input\/output interface  connected to the bus  for communicating with external devices, such as a mouse, keyboard, scanner, or other input devices not shown in . Likewise, the Web server  may further include additional mass storage facilities, such as CD-ROM\/DVD-ROM drive  and large capacity hard disk drive , also connected to the bus . The hard disk drive  may be utilized to store one or more databases. In particular, in an embodiment where the functions of the Web server  and the search server  are combined into one computer, the hard disk drive  may store a content database  for use by the search program  and Web server application . The content database , whether it is housed in the Web server  or the search server , is configured to store large volumes of featured content items. Details of one example content database that may be used with the system and method of the present invention is described below with reference to .","Client computers and devices A, B, C, D shown in , may take the form of any one of a number of different computer products. In addition to the examples described above, the client computer and devices also may be a server or a two-way pager. As will be appreciated by those of ordinary skill in the art or others, the architecture of the client computers and devices A, B, C, D may take on any suitable form, such as the computer architecture illustrated in , if appropriate. In any event, the client computers and devices A, B, C, D include a network interface for providing communication with the network . The network interface may be configured for use with any wired or wireless network connection, and may be used with any suitable communication protocol, such as the TCP\/IP protocol. In general, each of the client computers and devices includes a processing unit, a display, and a memory unit. The memory unit stores the program code necessary for operating the client computer or device and for generating a graphical user interface (GUI) on the display of the client computer or device. For instance, individual client computers or devices may contain an operating system, such as one offered by Microsoft\u00ae Corporation.","As will be appreciated by those of ordinary skill in the art or others, some operating systems comprise a central hierarchical database referred to in the art as a system registry . The system registry  is used to store information necessary to configure settings of the computer for one or more users, applications, and hardware devices. The system registry  contains information that the operating system continually references during operation, such as profiles for each user, the applications installed on the computer and the types of documents each can create, property sheet settings for folders and application icons, what hardware exists on the computer, and which ports are being used. As will be described in more detail below, embodiments of the present invention utilize the system registry , or any other similarly configured database, to store featured content items.","When software applications formed in accordance with this invention are implemented in a computer network  of the type illustrated in , the invention provides a way for client computers and devices A, B, C, D to receive, store, and display featured content, i.e., updated messages, announcements, and\/or other information that is related to a topic of interest. For example, when a software application formed in accordance with the present invention is installed on a client computer, the software application contains a fixed number of default content items that are displayed when the software application first executes. During execution, if connected to the network , the software application transmits a database query to the search server  to obtain new featured content items.","The query is configured with keywords or identifiers that are associated with a particular topic. For example, if the query contains the term \u201cword\u201d as one of the keywords, the search server  may return a data set having featured content items related to Microsoft\u00ae Word\u00ae. Upon receipt of the data set, the software application stores the featured content items in a cache file. A predetermined number of featured content items are then communicated from the cache file to the system registry of the client computer. In each subsequent boot of the software application, the newly acquired featured content items are displayed and additional featured content items are obtained from database queries to the search server. The above-described embodiment allows a client software application to obtain new featured content items without inhibiting the boot process of the calling software application.","For purposes of illustrating the present invention, a sample database of featured content items is provided. The following description of the present invention includes specific references to this example database to illustrate embodiments of several display methods. A representative section of the example database  is shown in . This model may be used to electronically communicate featured content items to remote or local software applications and users.","As shown, the sample database  includes a number of featured content items each referenced with identification (ID) numbers: , , , , and . As summarized above, each featured content item may contain a message or information related to a specific topic. The message or information may be in any format, including text data, image data, hyperlink text data, markup document data, or computer code. In one exemplary embodiment, each featured content item is also associated with a number of database fields, which are listed as: ASSET ID, PRIORITY, UPDATED, CREATION, and OF INTEREST. The ASSET ID field contains keywords, metadata, or other types of identifiers that describe the topic of the item. The PRIORITY field contains a binary value to indicate if a particular item should have a high priority status. The UPDATE and CREATION fields respectively contain a last update time stamp and a creation time stamp. The OF INTEREST field contains a binary value to indicate if a particular item is of interest to particular users. As will be appreciated by those of ordinary skill in the art, binary values, unique identifiers, or other identifiers can be used in each database field to characterize and distinguish each featured content item. Although this example illustrates one database model having specific fields, those skilled in the art will appreciate that the present invention may operate with less than all of the listed fields. In addition, as will be described in more detail below with reference to , those skilled in the art will appreciate that other fields may be added to accommodate different types of applications.","Referring now to the block flow diagrams of  and the pictorial diagrams of , , and , one embodiment of an exemplary content processing method  will now be described. In summary, the method described below displays featured content items stored in the system registry of a computer or device. The method obtains new featured content items from a remote database and stores the new featured content items in the system registry. The new featured content items are then displayed upon receipt of a command to display one or more featured content items. For example, a command to display one or more featured content items may be invoked during the boot process of a software application or upon the receipt of a user-invoked command.","The following description illustrates one example of a method implemented in a software application that is executed on a client computer, such as the computers or devices A, B, C, D. The example client computer is in communication with a server, such as the search server . The content processing method  begins at decision block , where the method waits for a successful boot of the software application. In the process of decision block , the software application is configured to generate a signal indicating a successful boot once the boot process reaches a predetermined state. For example, a successful boot may be determined once all application files have been properly accessed. Once the method determines that the software application has successfully booted, the content processing method  proceeds to decision block  where the method determines if there is at least one featured content item stored in the system registry.","If, at decision block , the method determines that the system registry does not contain at least one featured content item, the content processing method  proceeds to block  where the method retrieves default content items. In the process of block , the method retrieves one or more featured items stored in a file associated with the software application. To facilitate the process of block , default content items are preferably stored in an application file during the release of the software application. This configuration allows the software application to display standard messages when the system registry cannot be accessed. This configuration also allows the software application to display standard messages if the system registry does not contain any featured content items. As will be described in more detail below, the featured content items are written to the system registry in subsequent steps of the content processing method . Thus, featured content items are not likely to be displayed during the first execution of the content processing method .","At decision block , if it is determined that the system registry contains at least one featured content item, the method proceeds to block  where the method retrieves the featured content items from the system registry. As will be appreciated by those of ordinary skill in the art, the process of block  can be carried out by one of a number of known methods for retrieving data from a system registry. In one preferred embodiment, the process of block  retrieves all of the featured content items associated with the software application. For example, if the content processing method  is implemented in a software application such as Microsoft Word\u00ae, the method would retrieve all featured content items associated with the Word\u00ae registry records.","After the execution of the process of block  or block , the content processing method  continues at block  where the method displays the retrieved featured content items or default items on a graphical user interface. In the process of block  the data of the retrieved featured content items or default items is displayed on a graphical user interface associated with the application. The display of the retrieved items may be in a standalone window or it may be integrated in the main window of the software application. A sample of one graphical user interface generated from the process of block  is shown in .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5","b":["500","500","500","510","520"]},"As shown in , the spotlight section  comprises a plurality of featured content items -. As shown in this example, the featured content items may be in the form of a number of data formats. The first featured content item  includes a text message that displays a uniform resource locator (URL). In this example, the first featured content item  is also configured to function as a selectable hyperlink. The second featured content item  includes a text message communicating a telephone number. In this example, the second featured content item  also contains image data that is configured to display an icon . The third featured content item  includes a general text message, which is also associated with hidden URL data, so the item is configured to function as a selectable hyperlink. The example featured content items shown in  correlate to the example content database of . In this example, the items having an ASSET ID of \u201cword\u201d are selected as the three items displayed on the application interface .","The spotlight section  also comprises a selectable link  that enables a user to view additional featured content items. In a preferred embodiment, a user selection of the selectable link  displays a complete list of the featured content items stored in the client computer.  illustrates one example of a graphical user interface, also referred to as a list interface , suitable for displaying a list  of featured content items stored in a local cache file and\/or the system registry. Also shown in , the application interface  also comprises a pull-down menu  having a selectable menu item  for invoking the display of the list interface .","Returning now to , upon the execution of process block , the content processing method  proceeds to decision block  where the method waits for an idle state of the client computer. In an exemplary embodiment, the method determines that the client computer is at an idle state when the method receives a signal from the CPU, indicating that the CPU has a free processing cycle. When the method detects an idle state of the client computer, the content processing method  continues to decision block  (), where the method determines if the client computer is connected to a network, such as the Internet.","In the process of block , the content processing method  determines if the computer is connected to a network by checking the status of a network application program interface (API). As will be appreciated by those of ordinary skill in the art or others, a standard network API may be used to facilitate the processing of decision block . If, at decision block , it is determined that the computer is connected to a network, the content processing method  proceeds to decision block  where the method determines if featured content items have been recently cached in a local cache file. In one exemplary embodiment, the method may determine that featured content items have been recently cached if featured content items have been written to the cache file within a predetermined period of time. In one specific embodiment, the method determines that the items have been recently cached if an item has been written to the cache file within the past thirty (30) days. Although a period of thirty (30) days is used to illustrate one example, those of ordinary skill in the art will appreciate that any other time period can be used in the process of decision block . If, at decision block , the method determines that the items have been cached recently, the content processing method  terminates.","If, at decision block , it is determined that no featured content items have been cached recently, the content processing method  proceeds to block  where the method queries a database to obtain a new or updated set of featured content items. In the process of block , the database query may be communicated from the client computer to a server storing a database of featured content items. The query preferably includes one or more keywords, referred to herein as ASSET IDs, to associate the query with a topic of interest. In one embodiment, the ASSET ID may be set to the name of a software application or other keywords that identify the functions of the software application. For instance, in the example using Microsoft Outlook or Microsoft Word\u00ae, the ASSET ID may be respectively assigned the keywords \u201coutlook\u201d or \u201cword.\u201d Although this example utilizes keywords to associate database queries with a topic of interest, those of ordinary skill in the art will appreciate that the ASSET ID may include other types of identifiers in any data format to associate a query with a particular topic.","Next, as shown in decision block , the method waits for the receipt of the database query results. In an exemplary embodiment, the query results may be communicated from the server to the client computer. At decision block , once it is determined that a query result has been received, the method proceeds to block  where the method caches the query results in a memory device of the client computer. In an exemplary embodiment, the process of block  may cache the query results in a cache file on a hard drive. In this part of the process, the query results may be stored in the cache file in one of a number of data formats. For instance, the query results may be communicated and stored in an extensible markup language (XML) file. Although this example utilizes one embodiment where a cache file is used to cache the received query results, any other file type, memory device, and\/or storage format may be used to cache the query results.","Upon the storage of the query results in process block , the method continues to block , where the method stores a predetermined number of featured content items in the system registry. In one exemplary embodiment, the content processing method  randomly selects three (3) featured content items stored in the cache file. The randomly selected featured content items are then stored in the system registry. In this process, standard operating system registry procedures may be used to store the data of the selected featured content items. Although this example illustrates one embodiment where three (3) featured content items are stored in the system registry, the scope of the present invention encompasses any method that selects any number of featured content items. Upon the execution of block , the content processing method  terminates.","Returning now to decision block , if the method determines that the client computer is not connected to a network, the method proceeds to block  where the method registers a call back request with a network status API. In this part of the process, a call back request is established with a network status API so that the method of the present invention may be notified when the network status API determines that the client computer is connected to a network. Any standard network status API that is compatible with the operating system of the client computer may be used to implement the process of block .","Next, at decision block , the method determines if there are featured content items stored in the cache file. As described above with reference to process block , the present invention writes featured content items in a locally stored cache file when query results are received from the server. In examining the locally stored cache file, the process of block  utilizes known operating system code resources to determine if the locally stored cache file exists. If the cache file exists, then the condition of decision block  is met, and the content processing method  proceeds to decision block  where the method determines if at least one relevant item is up to date. In one exemplary embodiment, the method examines a time stamp of each featured content item having an ASSET ID that matches a particular keyword or identifier. For instance, with reference to the above example, the process of decision block  may perform an examination of a time stamp of each featured content item storing the term \u201cword\u201d in the ASSET ID field to determine if the items are up to date. In one specific embodiment, the method determines that a relevant item is up to date if the item has been written to the cache file, i.e., the item has been updated, within the past thirty (30) days. Although a period of thirty (30) days is used to illustrate one example, those of ordinary skill in the art will appreciate that any other time period can be used in the process of decision block .","In other embodiments, the process of decision block  may examine one of many other time stamps associated with each featured content item. For example, the process may examine the creation date time stamp, the last update time stamp or another time stamp that indicates the time at which the item was stored. If, at decision block , the method determines that there is at least one relevant item that is up to date, the content processing method  continues at block , where the up-to-date items of the cache file are stored in the system registry. The process of block  randomly selects the up-to-date, relevant featured content items, and stores the randomly selected items in the system registry. Alternatively, at decision block , if it is determined that the cache file does not contain relevant items that are up to date, the method proceeds to block  where the method removes the items that are not up to date. Thus, using the above example, the method deletes all featured content items that were stored in the cache file for a period longer thirty (30) days.","Upon the processing of block , or if it is determined, at decision block , that there are no featured content items stored in the cache file, the content processing method  proceeds to decision block  where the method determines if the client computer has established a connection with the network. As described above with respect to block , the method registered a call back request with the network status API. Generally described, the block  sets the client computer in a state that allows it to wait for a response from the network status API, which indicates that a connection has been established between the network and client computer. As will be appreciated by those of ordinary skill in the art, the process of decision block  may remain in a wait state until a signal is received from the network status API, or until the software application implementing the method is terminated. At decision block , once it is determined that the client computer has established a connection with the network, the method continues to decision block  where the method determines if featured content items have been recently cached in the cache file. From this point, the content processing method  proceeds through blocks - as described above. Alternatively, the method terminates if the application is terminated at block  or if, at decision block , it is determined that the items were recently cached.","As described above, the content processing method  allows for the retrieval and efficient display of new content items during the boot process of a software application. The content processing method  also provides default content items which allow for execution of the method before featured content items are written to the system registry. The method attempts to retrieve new content items from a content database during each execution. In addition, in each execution of the method, new featured content items are read from the system registry and displayed. As a result, software applications are able to display new messages, announcements or other information, without inhibiting the efficiency of the boot process.","The content processing method  can be used to display featured content items in any format. In addition, the featured content items may be displayed on any graphical user interface or other display suitable for communicating a message. In addition, each featured content item may be displayed with other functional components of an interface to provide specific user instructions. For example, featured content items of the present invention may be positioned in a graphical user interface to provide users with some guidance as to how to conduct a search for additional information. A sample of one graphical user interface illustrating this aspect of the invention is shown in .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 7","FIG. 7"],"b":["700","700","710","713","713","714","714","715","715","711","712","712"]},"In another embodiment, the present invention provides a system and method for displaying featured content items on a Web page. Generally described, this embodiment automatically integrates featured content items into a Web page so the underlying code of the Web page does not have to be manually updated to integrate modifications of the featured content. In one specific embodiment, an ASSET ID is included in a Web page request. When the Web page request is received by a Web server, the ASSET ID is sent to a database search application. The database search application obtains the query and returns a data set of featured content items for integration of the featured content items into a Web page.","With reference to the block flow diagrams of  and the pictorial diagram of , one embodiment of a content retrieval method  will now be described. The content retrieval method  begins at decision block  where the method receives a request for a Web page. In this part of the process, a user may invoke a request for a Web page by the use of a commercially available Web browser or other software application capable of generating a Web page request. In an example implementation of the present invention, the Web page request is sent from a client computer or device, such as the computers or devices A, B, C, D of , to a Web server . In this part of the process, the Web page request is configured with an ASSET ID, which is used to describe the content requested by the user. Similar to the above-described examples, the ASSET ID may contain a keyword or identifier, such as \u201cword,\u201d \u201coutlook,\u201d etc.","Upon receipt of the Web page request, the method proceeds to block  where the Web server parses the Web page request to obtain the ASSET ID contained in the request. As will be appreciated by those of ordinary skill in the art, this part of the process extracts all keywords and identifiers that are labeled as an ASSET ID. The parsing method may be done by a number of known character and\/or metadata filtering methods.","After the ASSET ID has been parsed from the Web page request, the method proceeds to block  where the Web server queries a database for featured items related to the ASSET ID. In this part of the process, the Web server communicates the obtained ASSET ID to a server, such as the search server () (of ) by the use of a suitable database query. In response to the query, a data set of featured content items is returned from the search server.","Next, as shown in decision block , the method determines if the data set contains a sufficient number of featured content items. This feature allows the method to appropriately format a Web page, depending on the results of the database query. In one exemplary embodiment, the method determines that there is a sufficient number of featured content items if the data set contains at least three (3) items. If, at decision block , it is determined that there is not a sufficient number of featured items, the method proceeds to block  where the method formats a Web page without including the data of the featured content items.","If, at decision block , it is determined that there is a sufficient number of featured items, the method proceeds to block  where the method selects featured content items from the data set. The process block  is described in more detail below with reference to . After the selection process of block , the method proceeds to block  where the method formats the Web page with the selected featured content items. A sample of a Web page that is formatted in accordance with one embodiment of the present invention is described in more detail below with respect to . Upon the processing of block  or , the method proceeds to block  where the generated Web page is sent to the client computer from the Web server. After the processing of block , the content retrieval method  terminates.","Referring now to the block flow diagram of , an exemplary embodiment of a method for selecting items for display, hereinafter referred to as the selection method (block  of ), is shown and described below. Generally described, the selection method  examines the featured content items of a received data set of featured content items and determines if any one of the featured content items is categorized as a priority item. As noted above with respect to , each featured content item stores a priority value in a database field to indicate if it has a priority status. In brief, the selection method of  examines the priority value to determine if a particular item should be displayed.","The selection method  begins at block  where the method determines if any one of the items of the data set contains a priority status. In this part of the process, an examination may be performed on the PRIORITY field of each featured content item to determine if the condition of decision block  has been met. If, at decision block , it is determined that none of the items stored in the data set contain a priority status, the method proceeds to block  where the method randomly selects a predetermined number of featured content items for display. In the process of block , the method may select two (2) or three (3) featured content items for display. Although this example illustrates one embodiment where the method randomly selects two (2) or three (3) items for display, any other number of items may be selected to accommodate the size and format of the Web page that is to display the selected featured content items.","In an alternative embodiment, the processing of block  may randomly select two (2) or three (3) items having certain database attributes. For instance, with reference to , the method may only select items having a TRUE value stored in the OF INTEREST field. In this alternative embodiment, the OF INTEREST field, or any other database attribute, may be used to further distinguish featured content items for display.","If, at decision block , it is determined that there is at least one priority item in the data set, the method proceeds to decision block  where the method determines if there is more than a predetermined number of priority items. In one exemplary embodiment, the method determines that there are more than a predetermined number of priority items if there are more than two (2) priority items. Although this example illustrates one embodiment where the predetermined number of priority items is set at two (2), the predetermined number utilized in process block  may be set to any other number depending on the needs of the application. For instance, the predetermined number of priority items may be more than two (2) if the display region of Web page can accommodate more than two (2) featured content items.","If, at decision block , it is determined that there are more than a predetermined number of priority items, the method proceeds to block , where the method selects a predetermined number of priority items for display. In the process of block , it is preferred that the method select the two (2) newest priority items of the data set. In one embodiment, the process of block  examines the creation date of the priority items of the data set and selects two (2) items having the latest creation date. Although this example illustrates one embodiment where the creation date is examined, other time stamps, such as the update time stamp, may be used for the process of block .","If, at decision block , the method determines that the number of priority items does not exceed the predetermined number, the method proceeds to block , where the method selects all of the priority items for display. Upon the processing of blocks , , or , the selection method  terminates and returns to the calling method, which in this example is the content retrieval method . As described above, the content retrieval method  then displays the featured content items that are selected in the selection method .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 10","FIG. 10","FIG. 10"],"b":["811","999","910","930","920","921","921","922","921","900","923","924","925","999"]},"As summarized above, another aspect of the present invention provides a method and system for dynamically updating featured content items stored in a database. This aspect of the invention provides an automated mechanism for updating featured content items so that the above-described embodiments can readily obtain and display messages that are of interest to users. In an exemplary embodiment, the update method is executed for each individual topic. For example, as described below, the update method may be executed for all items having a particular ASSET ID, e.g., an ASSET ID of \u201cword.\u201d With reference to the example database  of  and the flow diagram of , one exemplary method of a database update method  will now be described.","The database update method  begins at decision block  where the method determines if the database should be updated. The processing of decision block  allows the database update method  to run on a periodic schedule, i.e., hourly, daily, weekly, etc. For example, if the update method  is configured to execute every sixty (60) minutes, the process of decision block  would examine a timing device and continue processing at block  after an hour has elapsed since the last execution of the update method . Although this example illustrates one embodiment where the method waits for a period of time, the method may be invoked by a number of user commands or may be randomly executed upon the completion of other processes.","Upon the continuation of the processing at decision block , the method continues at block  where an item counter is initialized. Since the method preferably examines all items in a database, an item counter may be established to indicate a current item being processed. In this example, the process of block  sets a reference pointer to the first item in a database of featured content items. In using the sample database  of , the process of block  would set a reference pointer to the item referenced as \u201cID .\u201d","The update method  continues at decision block  where the method determines if the current item contains a message or link that is related to a topic. For instance, if the ASSET ID contains the term \u201cword,\u201d the process of decision block  examines the text message of the item to determine if the message is related to a related program, such as Microsoft Word\u00ae. In this part of the process, the method can search for keywords, patterns of keywords or other identifiers in the message to see if the message describes a related topic. If it is determined that the current item does not describe a related topic, the method proceeds to block  where the method updates the OF INTEREST field with a FALSE value.","If, at decision block , it is determined that the current item describes a related topic, the method continues at decision block  where the method determines if the current item has expired. In one exemplary embodiment, the method examines the creation date of the current item and determines that it has expired if a predetermined time period has elapsed since the creation date. In one embodiment, an item is deemed to be expired if a time period of thirty (30) days has elapsed since the creation date of the item. If, at decision block , it is determined that an item has expired, processing continues to block  where the current item is marked with a FALSE setting in the OF INTEREST field.","Alternatively, at decision block , if it is determined that the item has not expired, the method proceeds to block  where the method determines if a start time of the record has passed. In one embodiment of the present invention, each item may be configured with a START TIME field, which is not depicted in , indicating a date at which the record may be released for distribution. This feature is beneficial in situations where featured content may only be relevant to a particular item after a particular release date, such as an announcement describing a new version of Word\u00ae. In one exemplary embodiment, the processing of decision block  examines the time stamp stored in the START TIME field, and compares the time stamp to a computer clock. If it is determined that the start date has not passed, the method proceeds to block  where the current record is marked with a FALSE reading in the OF INTEREST field.","If it is determined that the start date has passed, the method continues to decision block  where the method determines if the current item has been highly rated. In one embodiment of the present invention, each item may be configured with a RATED field indicating a user rating of each item. As can be appreciated by those of ordinary skill in the art, the RATED field of an item may be manually updated by a user or it may be updated by a computer system that receives rating information for each item. Thus, in this embodiment, the processing of block  examines the RATED field to determine if the item is highly rated. If the RATED field indicates that an item is highly rated, the update method  proceeds to block  where the OF INTEREST field is updated with a TRUE value.","If, at decision block , it is determined that the current item is not highly rated, the method continues to decision block  where the method determines if the record is new. In one exemplary embodiment, the processing of decision block  examines the creation date of the item to determine if it is new. More specifically, an item is not deemed to be a new item if a predetermined time period, such as a period of one week, has elapsed since the creation date of the current item. If the predetermined time period has not elapsed since the creation date of the item, the item is considered to be new and the update method  proceeds to block  where the OF INTEREST field is updated with a TRUE value.","If, at decision block , it is determined that the current item is not new, the method continues to decision block  where the method determines if the record is considered to be popular. In one embodiment of the present invention, each item may be configured with a POPULAR field indicating the number of times an item has been displayed. As can be appreciated by those of ordinary skill in the art, known computer software applications or other manual processes may be used to maintain the number of times an item has been accessed or displayed to users. By examining the POPULAR field, which may be updated by an external system, the method determines that an item is popular if it has been displayed more than a predetermined number of times. Depending on the use of the application and the number of users, the predetermined number used in the process of block  can be any value. If the method determines that an item is popular, the update method  proceeds to block  where the OF INTEREST field is updated with a TRUE value. Alternatively, if the POPULAR field indicates that an item is not popular, the update method  proceeds to block  where the OF INTEREST field is updated with a FALSE value.","Upon the processing of blocks  or , the update method  continues to decision block  where the method determines if the current item is the last item in the database. If, at decision block , it is determined that the current item is not the last item in the database, the method continues to block  where the item counter is incremented to the next item for examination. From block , the update method  processes the next item in the database in a manner described above. If, at decision block , it is determined that the current item is the last item in the database, the update method  continues back to decision block  where the method waits for the next execution of the method.","While the preferred embodiment of the invention has been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 10","FIG. 8"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
