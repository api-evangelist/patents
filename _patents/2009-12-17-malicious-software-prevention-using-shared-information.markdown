---
title: Malicious software prevention using shared information
abstract: A method and apparatus for managing executable files. Responsive to detecting a request to run an executable file on a computer, a processor unit determines whether the executable file was downloaded to the computer within a period of time associated with a recent download. Responsive to a determination that the executable file was downloaded to the computer within the period of time, the processor unit determines whether feedback for the executable file from a number of users of the executable file is present in a repository. The feedback identified for the executable file in the repository is presented using a presentation system. User input as to whether the executable file should be run is prompted for by the processor unit after presenting the feedback.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08347382&OS=08347382&RS=08347382
owner: International Business Machines Corporation
number: 08347382
owner_city: Armonk
owner_country: US
publication_date: 20091217
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field","The disclosure relates generally to an improved data processing system and, more specifically, to a method and apparatus for processing data. Still more particularly, the present disclosure relates to a method and apparatus for identifying potentially undesirable software.","2. Description of the Related Art","The Internet, also referred to as an \u201cinternetwork\u201d, is a set of computer networks, possibly dissimilar, joined together by means of gateways that handle data transfer and the conversion of messages from a protocol of the sending network to a protocol used by the receiving network. When capitalized, the term \u201cInternet\u201d refers to the collection of networks and gateways that use the TCP\/IP suite of protocols. The Internet may carry information and provide services. The information and services include, for example, electronic mail, online chat services, file transfers, web pages, and other resources.","The Internet is a commonly used source of information and entertainment. Further, the Internet is also used as a medium for business activities. Many businesses, government entities, and other organizations have a presence on the Internet using websites to perform various transactions. Various organizations may offer goods and services. These goods and services may involve a sale of goods that are to be shipped to a customer. The goods also may be software and\/or data purchased by a customer and transferred over the Internet to the customer.","Through the Internet, a user is able to obtain different types of software from many different sources. For example, a user may download word processor programs, CD burner programs, tool bars for browsers, spreadsheets, and other types of software applications from various sources. Some of these applications may contain malware. Malware is software that is designed to infiltrate or damage a computer without the consent of the owner of the computer.","For example, a user may locate a burner application to burn CDs or DVDs. With this example, the user downloads an executable file for the burner application. This executable file may be the burner application itself or a program that downloads other components for the burner application. The burner application may perform the task desired by the user. Additionally, however, the executable file also may install other software processes that run without the user's knowledge. This software takes the form of executable files in these examples. These processes may perform various undesirable tasks, such as recording user keystrokes, collecting information about user documents, obtaining address book contents, and other undesirable actions.","Thus, it would be advantageous to have a method and apparatus that addresses one or more of the issues discussed above, as well as possibly other issues.","The illustrative embodiments provide a method and apparatus for managing executable files. Responsive to detecting a request to run an executable file on a computer, a processor unit determines whether the executable file was downloaded to the computer within a period of time associated with a recent download. Responsive to a determination that the executable file was downloaded to the computer within the period of time, the processor unit determines whether feedback for the executable file from a number of users of the executable file is present in a repository. Any feedback identified for the executable file in the repository is presented using a presentation system. User input as to whether the executable file should be run is prompted for by the processor unit after presenting the feedback.","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method, or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.), or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule,\u201d or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.","Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer usable or computer readable medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disk read-only memory (CDROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device.","Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer usable or computer readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the system, apparatus, or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object-oriented programming language, such as Java, Smalltalk, C++, or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer, or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The present invention is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions.","These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","With reference now to the figures and, in particular, with reference to , exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that  are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","100","102","100","102"]},"In the depicted example, server computer  and server computer  connect to network  along with storage unit . In addition, client computers , , and  connect to network . Client computers , , and  may be, for example, personal computers or network computers. In the depicted example, server computer  provides information, such as boot files, operating system images, and applications to client computers , , and . Client computers , , and  are clients to server computer  in this example. For example, client computers , , and  may download software from server computer . Additionally, in the different illustrative embodiments, processes may run on client computers , , and  to manage executable files that may be downloaded from server computer . Network data processing system  may include additional servers, clients, and other devices not shown.","Program code located in network data processing system  may be stored on a computer recordable storage medium and downloaded to a data processing system or other device for use. For example, program code may be stored on a computer recordable storage medium on server computer  and downloaded to client computer  over network  for use on client computer .","In the depicted example, network data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers consisting of thousands of commercial, governmental, educational, and other computer systems that route data and messages. Of course, network data processing system  also may be implemented as a number of different types of networks, such as, for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example, and not as an architectural limitation for the different illustrative embodiments.","Turning now to , a diagram of a data processing system is depicted in accordance with an illustrative embodiment. In this illustrative example, data processing system  includes communications fabric , which provides communications between processor unit , memory , persistent storage , communications unit , input\/output (I\/O) unit , and display . Data processing system  may be used to implement hardware for server computer , server computer , client computer , client computer , and client computer  in  in these illustrative examples.","Processor unit  serves to execute instructions for software that may be loaded into memory . Processor unit  may be a set of one or more processors or a multi-processor core, depending on the particular implementation. Further, processor unit  may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example, processor unit  may be a symmetric multi-processor system containing multiple processors of the same type.","Memory  and persistent storage  are examples of storage devices . A storage device is any piece of hardware that is capable of storing information, such as, for example, without limitation, data, program code in functional form, and\/or other suitable information either on a temporary basis and\/or a permanent basis. Memory , in these examples, may be, for example, a random access memory or any other suitable volatile or non-volatile storage device. Persistent storage  may take various forms, depending on the particular implementation. For example, persistent storage  may contain one or more components or devices. For example, persistent storage  may be a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage  may be removable. For example, a removable hard drive may be used for persistent storage .","Communications unit , in these examples, provides for communication with other data processing systems or devices. In these examples, communications unit  is a network interface card. Communications unit  may provide communications through the use of either or both physical and wireless communications links.","Input\/output unit  allows for the input and output of data with other devices that may be connected to data processing system . For example, input\/output unit  may provide a connection for user input through a keyboard, a mouse, and\/or some other suitable input device. Further, input\/output unit  may send output to a printer. Display  provides a mechanism to display information to a user.","Instructions for the operating system, applications, and\/or programs may be located in storage devices , which are in communication with processor unit  through communications fabric . In these illustrative examples, the instructions are in a functional form on persistent storage . These instructions may be loaded into memory  for running by processor unit . The processes of the different embodiments may be performed by processor unit  using computer implemented instructions, which may be located in a memory, such as memory .","These instructions are referred to as program code, computer usable program code, or computer readable program code that may be read and run by a processor in processor unit . The program code, in the different embodiments, may be embodied on different physical or computer readable storage media, such as memory  or persistent storage .","Program code  is located in a functional form on computer readable media  that is selectively removable and may be loaded onto or transferred to data processing system  for running by processor unit . Program code  and computer readable media  form computer program product . In one example, computer readable media  may be computer readable storage media  or computer readable signal media . Computer readable storage media  may include, for example, an optical or magnetic disk that is inserted or placed into a drive or other device that is part of persistent storage  for transfer onto a storage device, such as a hard drive, that is part of persistent storage . Computer readable storage media  also may take the form of a persistent storage, such as a hard drive, a thumb drive, or a flash memory that is connected to data processing system . In some instances, computer readable storage media  may not be removable from data processing system .","Alternatively, program code  may be transferred to data processing system  using computer readable signal media . Computer readable signal media  may be, for example, a propagated data signal containing program code . For example, computer readable signal media  may be an electromagnetic signal, an optical signal, and\/or any other suitable type of signal. These signals may be transmitted over communications links, such as wireless communications links, an optical fiber cable, a coaxial cable, a wire, and\/or any other suitable type of communications link. In other words, the communications link and\/or the connection may be physical or wireless in the illustrative examples.","In some illustrative embodiments, program code  may be downloaded over a network to persistent storage  from another device or data processing system through computer readable signal media  for use within data processing system . For instance, program code stored in a computer readable storage media in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code  may be a server computer, a client computer, or some other device capable of storing and transmitting program code .","The different components illustrated for data processing system  are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in  can be varied from the illustrative examples shown. For example, data processing system  may be used to implement other types of data processing systems other than computers. For example, data processing system  may be used to implement a mobile phone, a set-top box, and\/or some other suitable type of data processing system.","The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example, data processing system  may include organic components integrated with inorganic components and\/or may be comprised entirely of organic components excluding a human being. For example, a storage device may be comprised of an organic semiconductor.","As another example, a storage device in data processing system  is any hardware apparatus that may store data. Memory , persistent storage , and computer readable media  are examples of storage devices in a tangible form.","In another example, a bus system may be used to implement communications fabric  and may be comprised of one or more buses, such as a system bus or an input\/output bus. Of course, the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally, a communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. Further, a memory may be, for example, memory  or a cache such as found in an interface and memory controller hub that may be present in communications fabric .","The different illustrative embodiments recognize and take into account a number of different considerations. For example, the different illustrative embodiments recognize and take into account that currently available malware protection processes collect information about a user system. These processes identify information about a user's system and use these configurations to determine whether an executable file may be considered malware. In these illustrative examples, an executable file is a file containing instructions that cause a computer to perform a number of tasks. A number, as used herein with reference to an item, means one or more items. An executable file may contain all of the code and other information needed to install a program. In other illustrative examples, an executable file may perform tasks to download components from the Internet or other sources to install a program. For example, a number of tasks is one or more tasks.","Other systems may include a database identifying executable files that have been identified as malware. These types of databases are downloaded from a source, such as a malware detection program provider. The different illustrative embodiments recognize and take into account that this type of database may not provide the most up to date or desired information needed by users to determine whether to run an executable file. For example, when a database is maintained by a single source or company, that organization has people that identify programs that may be malware. The different illustrative embodiments recognize and take into account that this type of process may be slower to identify the executable files that may contain malware. The different illustrative embodiments recognize that the users who download executable files may more quickly identify when malware is present.","Thus, the different illustrative embodiments provide a method and apparatus for managing executable files. In these illustrative examples, the executable files may be, for example, software installers that only run the first time to install an application. In response to taking requests to run an executable file on a computer, a determination is made as to whether the executable file was downloaded to the computer within a period of time associated with a recent download. In response to a determination that the executable file was downloaded to the computer within the period of time, a determination is made as to whether feedback for the executable file from a number of users of the executable file is present in a repository. Any feedback identified for the executable file in the repository is presented using a presentation system. A product is then made for user input as to whether the executable file should be run after presenting the feedback.","With reference now to , an illustration of a malware prevention environment is depicted in accordance with an illustrative embodiment. Malware prevention environment  may be implemented using a network data processing system, such as network data processing system  in . The different processes illustrated in malware prevention environment  may be implemented using data processing systems, such as data processing system  in .","As illustrated, executable file  may be downloaded to computer  from source . Source  may be, for example, a website, a file transfer protocol server, or some other suitable type of source. Executable file  is used to install application . Executable file  may contain code needed to install application . In other illustrative examples, executable file  also may download additional files or code needed to install application .","In these illustrative examples, file management process  runs in the background and manages executable files. In the different illustrative embodiments, file management process  is part of operating system  running on computer . For example, when executable file  is downloaded to computer  from source , file management process  records file name  for executable file  and timestamp . Timestamp  is the time and date when executable file  was downloaded to computer .","In response to request  to run executable file , file management process  determines whether executable file  was downloaded to computer  within period of time  associated with a recent download. Period of time  may have various values. For example, without limitation, period of time  may be five minutes, 15 minutes, six hours, or some other suitable period of time. In these illustrative examples, period of time  may be set by a user.","If executable file  is identified as being downloaded within period of time , executable file  is considered a recent download. In response to this identification of executable file  as a recent download, file management process  determines whether feedback  for executable file  from a number of users is present in repository .","Repository  is a collection of information. In these examples, repository  is a collection of feedback from different users of executable files. This type of feedback is in contrast to identifications of malware in a repository from a single source. In these examples, a single source may be in organizations, such as a company that distributes virus scanning programs, adware detection programs, and other types of programs. Of course, repository  also may include feedback from single source organizations in addition to users of executable files.","Repository , in these examples, is a centralized repository. In some illustrative examples, multiple copies of repository  may be present for access by file management processes. In these illustrative examples, repository  is located in a remote location, such as on server computer .","If feedback  is present for executable file , feedback  is presented on presentation system  for computer . Presentation system  may be graphical user interface  presented on display device . In other illustrative examples, presentation system  also may include speaker  in addition to or in place of display device .","Feedback  may be presented visually and\/or audibly to a user at computer . File management process  prompts for user input as to whether executable file  should be run after presenting feedback  on presentation system .","In response to a user input to run executable file , file management process  determines whether executable file  is potentially undesirable executable file . In these illustrative examples, file management process  performs this determination using policy . Policy  is a number of rules in these depicted examples. Policy  also may include values for parameters or other data needed to perform the evaluation of executable file .","The rules in policy  may include, for example, without limitation, whether the file was downloaded with a browser within the last five minutes and\/or whether the file name of the executable file includes substrings \u201cset up\u201d and\/or \u201cinstall\u201d. Policy  also may include a rule to determine whether executable file  includes a process to access windowing application programming interfaces in operating system . Additionally, the user may create or select rules in policy .","If file management process  identifies executable file  as potentially undesirable executable file , file management process  monitors the running of executable file , while executable file  performs actions . Actions  are actions performed by executable file  to install application . File management process  identifies information  about actions  such that information  may be used to undo actions  at a later time to uninstall application .","Actions  may include, for example, without limitation, application programming interfaces used, input\/output actions performed, file accesses performed, and\/or other suitable types of actions to obtain information needed to undo actions . Information  may include files, such as dynamic link libraries, configuration files, and\/or other files that may be deleted or replaced by executable file  when performing actions .","Additionally, in these illustrative examples, file management process  also includes a feature in which users may generate feedback  for executable file . For example, when application  is installed by running executable file , application  may be added to list . List  is a list of applications that have been installed that also have been identified as being potentially undesirable executable file . The user may select an application from list  corresponding to executable file  to generate feedback .","In response to a user input, selecting executable file  from list , graphical user interface  may receive user input for feedback . Feedback  is then sent to repository  by file management process . In this manner, different users may generate feedback  about their experiences with executable file , as well as other executable files. This type of feedback may provide information that is desired by a user to determine whether to run executable file .","In this manner, a user may determine whether to run executable file  based on information that the user may need from feedback generated by other users. In addition, the information in repository  also may be used by various entities in identifying what type of software is being used by different users. As a result, various marketing entities may identify a segment that a user belongs to based on the software used by a user.","The illustration of malware prevention environment  in  is not meant to imply physical or architectural limitations to the manner in which different illustrative embodiments may be implemented. Other components in addition to and\/or in place of the ones illustrated may be used. Some components may be unnecessary in some illustrative embodiments. Also, the blocks are presented to illustrate some functional components. One or more of these blocks may be combined and\/or divided into different blocks when implemented in different illustrative embodiments.","For example, file management process  is illustrated as being a component within operating system  in these illustrative examples. In other illustrative examples, file management process  may be a program or other process running within operating system  rather than being part of operating system . As yet another example, in some illustrative examples, file management process  may run on a data processing system other than computer . For example, file management process  may run on a processor unit located in a mobile phone, a game console, or some other suitable type of data processing system.","Although in this illustrative example, file management process  identifies whether executable file  is potentially undesirable executable file , other illustrative examples may not require this step. For example, in other illustrative examples, file management process  may monitor the running of all executable files regardless of whether they are potentially undesirable executable files. In this manner, all executable files may be tracked, and feedback may be obtained from all of the executable files run by a user.","With reference now to , an illustration of a feedback entry in a repository is depicted in accordance with an illustrative embodiment. In this illustrative example, feedback entry  is an example of an entry that may be found in repository  in .","As depicted, feedback entry  includes user identifier , rating , comments , alternative applications , companion applications , and flag . User identifier  identifies the user generating the feedback. User identifier  may be a user identifier selected by a user, an email address, or some other suitable type of identifier.","Rating  provides a rating of the executable file. This rating may be, for example, a one- to five-star rating or some other type of rating scale or system. Comments  allow a user to provide comments about the application installed by the executable file. These comments may include, for example, without limitation, the ease of use of the application, whether the application is believed to contain malware, whether the application performs as desired, and other suitable feedback.","Alternative applications  may include identifications of other applications that may be used in place of the application installed by the executable file. Companion applications  may identify other executable files for other applications that may be useful to install along with the executable file. In these illustrative examples, an application is code for a process. This code may be, for example, without limitation, a program, a script, a plug-in, or some other suitable form of code for an application. Flag  is used to identify an executable file that may be malware, adware, a virus, or some other type of undesirable executable file.","With reference now to , an illustration of a graphical user interface is depicted in accordance with an illustrative embodiment. In this illustrative example, window  is an example of a window that may be presented in graphical user interface  in .","As illustrated, window  displays a list of users for which feedback is present for an executable file. In this example, feedback is present for a burner program. Entries for feedback are displayed in section  of window . In this illustrative example, feedback is present from users in entries , , , and  in section .","A user may select one of these entries to obtain details of the feedback about the application. These entries also may include feedback from users in a contact list for the user running the executable file. A user may have more confidence in feedback from a user in the contact list as compared to users that the user does not know. In this depicted example, entry  and entry  include graphical identifier  and graphical identifier , respectively. These graphical identifiers indicate that the feedback in entries  and  are from users in a contact list.","With reference now to , an illustration of a graphical user interface is depicted in accordance with an illustrative embodiment. In this illustrative example, window  is an example of a window that may be presented in graphical user interface  in . Window  is an example of feedback that may be presented in response to a selection of an entry from window  in . As illustrated, window  provides feedback about an executable file. In this example, window  identifies rating , comments , alternative applications , companion applications , and flag .","In this example, stars are used to rate the executable file. In this illustrative example, the executable file is for a burner application, and flag  indicates that adware is present in this executable file. With this information, a user may determine whether to go ahead and run the executable file or cancel the running of the executable file.","With reference now to , an illustration of a window for receiving feedback is depicted in accordance with an illustrative embodiment. In this illustrative example, window  is an example of a window that may be presented in graphical user interface  to receive feedback  in .","As depicted in this example, window  includes user identification field , rating field , comments field , alternative application field , companion application field , and flag indicators . User identification field  provides a field for entry of a user identification. In this example, the user identification may be an email address. Of course, some other user identification may be used. Rating field  allows a user to input the rating for the executable file. Comments field  allows a user to input comments or information about the application installed by the executable file.","Alternative application field  allows a user to enter input about other applications that may be used in place of the executable file. Companion application field  provides a field for a user to input information about other applications that may be used along with applications installed by the executable file. Flag indicators  allow the user to indicate whether the executable file is an undesirable executable file.","With reference now to , a flowchart of a process for downloading an executable file is depicted in accordance with an illustrative embodiment. In this example, the process in  may be implemented within file management process  in .","The process begins by receiving an executable file that is being downloaded (step ). A determination is made as to whether the executable file is downloaded through a browser (step ). If the executable file is downloaded by a browser, the filename and the timestamp are recorded for the executable file (step ), with the process terminating thereafter. The timestamp is the time and date of when the executable file was downloaded in these examples. With reference again to step , if the executable file is not downloaded by a browser, the process terminates.","With reference now to , a flowchart of a process for running an executable file is depicted in accordance with an illustrative embodiment. The process illustrated in  may be implemented in file management process  in .","The process begins by detecting a request to run an executable file (step ). Step  may be detected in response to a user selecting an executable file to be run. A determination is then made as to whether the executable file was downloaded within a period of time associated with a recent download (step ). This determination may be made by comparing the current time with the timestamp for the executable file. The period of time may have a number of different values. For example, the period of time may be five minutes.","If the executable file was downloaded to the computer within the period of time, the process determines whether feedback for the executable file from a number of users of the executable file is present in a repository (step ). A user of the executable file is a user who has run the executable file to install an application. This determination may be made by accessing the repository. The repository, in these examples, is located on a remote computer. If feedback is present for the executable file, the feedback is presented on a presentation system (step ). In these examples, the presentation system may be a graphical user interface displayed on a display device. In other illustrative examples, the presentation system may use a speaker to audibly present the feedback in addition to or in place of the graphical user interface.","The process then prompts the user to enter the input as to whether the executable file should be run (step ). A determination is made as to whether user input is received to continue running the executable file (step ). If user input is present to run the executable file, a determination is made as to whether the executable file is a potentially undesirable executable file (step ).","If the executable file is a potentially undesirable executable file, the process then runs the executable file and records information needed to undo the actions performed by the executable file (step ). The process then creates an entry in a feedback list for the executable file (step ), with the process terminating thereafter.","With reference again to step , if the executable file is not identified as a potentially undesirable executable file, the process runs the executable file (step ) and terminates. The process terminates in step  if the user does not elect to run the executable file. With reference again to step , if feedback is not present for the executable file, the process proceeds to step  as described above. With reference again to step , if the executable file was not downloaded within a period of time associated with the recent download, the process proceeds to step  as discussed above.","With reference now to , a flowchart of a process for generating feedback for an executable file is depicted in accordance with an illustrative embodiment. The process illustrated in  may be implemented in file management process  in .","The steps in  may be performed in response to a user's selection of the executable file from a list of executable files. Further, this process may be performed when a user uninstalls the application installed by the executable file. This process may be performed when the user decides to undo actions performed by the executable file. Additionally, this feedback also may be obtained using these steps when the user uninstalls the application using an uninstall process provided by the application.","In this illustrative example, a list of programs for feedback is presented to the user (step ). In response to the selection of a program from the list of programs, the user is prompted to enter feedback into a user interface (step ). This user interface may be, for example, window  in .","The process then determines whether the user submits feedback in the form (step ). If the user submits feedback in the form, the information is sent to a repository (step ), with the process terminating thereafter. With reference again to step , if the user does not submit feedback in the form, the process also terminates.","With reference now to , a flowchart of a process for removing a program is depicted in accordance with an illustrative embodiment. The process illustrated in  may be implemented in file management process  in . This process may be used to remove a program installed by an executable file that has been identified as a potentially undesirable executable file.","The process begins by detecting a user request to remove a program placed on a feedback list (step ). The process identifies information needed to undo the actions performed by the executable file in installing the program (step ). The process then uninstalls the program using the information (step ), with the process terminating thereafter.","With reference now to , a flowchart of a process for identifying feedback for a presentation is depicted in accordance with an illustrative embodiment. In this illustrative example, the process may be implemented in file management process  in . This process may be used to identify feedback from users that the user trusts or has associations with in these examples. This process may be implemented as part of step  in .","The process begins by receiving feedback from the repository (step ). The process then determines whether any of the users are found on a contact list (step ). This contact list may be, for example, a chat address book, an email address book, contacts in a social network, or some other type of list of users. If users in the feedback received in the repository match those in a list, graphical indicators are associated with those users (step ). The process then presents the feedback with the graphical indicators (step ), with the process terminating thereafter. In these examples, the graphical indicator may be, for example, without limitation, highlighting, bold text, an icon, a change in color in the text, a change in font size, or some other suitable type of graphical indicator.","With reference again to step , if users on a contact list are not found, the process presents the feedback without graphical indicators (step ), with the process terminating thereafter.","With reference now to , an illustration of a flowchart for obtaining feedback is depicted in accordance with an illustrative embodiment. The process illustrated in  may be implemented in file management process  in . This process may be used to obtain feedback if an application is identified as having problems or not operating according to a policy.","The process begins by monitoring the running of the application (step ). A determination is made as to whether the application is running correctly using a policy (step ). The policy, in this example, is a set of rules that identifies when feedback may be needed for an application.","For example, the policy may state that feedback is needed if the application has been terminated by the operating system or has unexpectedly stopped running more than some number of times. The policy also may indicate that feedback is needed if the application uses more than some threshold level of resources. An example of a threshold level may be if the application uses memory that is greater than some threshold level or processor time that is greater than some threshold level. Further, the policy may state that feedback is needed if the thresholds are exceeded greater than some number of times.","Additionally, a user may adjust the policy as to when feedback may be obtained. For example, the user may set the number of times that a threshold is exceeded, as well as the threshold level. For example, the user may set the number of times to be three times and the threshold level to be when the application uses more than 10 percent of the memory in the computer.","If feedback is needed, the process then prompts the user for feedback (step ). This feedback may be received using a user interface, such as that in window  in . Thereafter, the feedback is sent to a repository (step ), with the process terminating thereafter. In step , if feedback is not needed, the process terminates.","Thus, the different illustrative embodiments provide a method and apparatus for managing executable files. In one or more illustrative embodiments, in response to detecting a request to run an executable file on a computer, a determination is made as to whether the executable file is downloaded by the computer within a period of time associated with the recent download. In response to a determination that the executable file was downloaded to the computer within the period of time, a determination is made as to whether feedback of the executable file from a number of users is present in a repository. If feedback entered by a number of users for the executable file is present, this feedback is presented using a presentation system. The process then prompts the user for input as to whether the executable file should be run after presenting the feedback.","In this manner, a user may be more able to make an informed decision about whether to run an executable file. This decision may be made with the feedback generated by other users of the executable file. Additionally, the different illustrative embodiments also provide a capability to undo actions performed by the executable file if the executable file is identified as a potentially undesirable executable file. Further, the different illustrative embodiments provide a user a capability to generate feedback for the executable file. In this manner, a repository of feedback is created from different user's experiences with the particular executable file.","The flowcharts and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowcharts or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be performed substantially concurrently, or the blocks may sometimes be performed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustrations, and combinations of blocks in the block diagrams and\/or flowchart illustrations, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d, and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but it is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","The invention can take the form of an entirely hardware embodiment, an entirely software embodiment, or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes, but is not limited to, firmware, resident software, microcode, etc.","Furthermore, the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any data processing system that runs program code. For the purposes of this description, a computer usable or computer readable medium can be any tangible apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the data processing system, apparatus, or device.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk, and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read\/write (CD-R\/W), and DVD.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual running of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during running of the program code.","Input\/output or I\/O devices (including, but not limited to, keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers.","Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening networks. Modems, cable modem, and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and it is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
