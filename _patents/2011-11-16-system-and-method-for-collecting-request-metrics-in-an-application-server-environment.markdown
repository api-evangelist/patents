---
title: System and method for collecting request metrics in an application server environment
abstract: Described herein are systems and methods for collecting and surfacing metrics with respect to their classification; and the use of the metrics by a workload manager and other application monitoring tools to provide quality-of-service and workload management. Each request is classified, either by the application server or another process. A request classification identifier (RCID) is associated with each request, and thereafter flows with that request as it is being processed. The RCID value is used by data collectors at various points in the system to aggregate the metrics, and a workload manager collects the metrics. The collected metrics are then processed by a rules engine at the workload manager, which analyzes the metrics and generates adjustment recommendations to provide quality-of-service and workload management.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745214&OS=08745214&RS=08745214
owner: Oracle International Corporation
number: 08745214
owner_city: Redwood Shores
owner_country: US
publication_date: 20111116
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","CROSS-REFERENCED APPLICATIONS","FIELD OF INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of priority to U.S. Provisional patent application titled \u201cSYSTEMS AND METHODS FOR DETERMINING METRICS AND WORKLOAD MANAGEMENT\u201d; Application No. 61\/493,315; filed Jun. 3, 2011, which is incorporated by reference herein.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","This application is related to U.S. patent application Ser. No. 13\/298,211, filed Nov. 16, 2011, entitled \u201cSYSTEM AND METHOD FOR USING QUALITY OF SERVICE WITH WORKLOAD MANAGEMENT IN AN APPLICATION SERVER ENVIRONMENT\u201d, which is incorporated herein by reference.","Embodiments of the present invention are generally related to application server environments and diagnostic frameworks, and are particularly related to the collection and surfacing of request metrics in such environments; and the use of metrics by a workload manager to provide Quality-of-Service and workload management.","Enterprise-class computer servers are becoming increasingly sophisticated and complex, which poses a greater need to monitor system health, and prevent unintended system interruptions. Enterprise-class computer servers also provide business critical applications that interact with other(s) by providing and\/or consuming services, and as deployment of these applications increase, so does the resource management needed to ensure optimal application performance.","Traditionally, system administrators had to monitor, plan for and adjust system metrics to prevent system interruptions. However, this approach is not as useful in fast-changing environments where real-time management is needed. These are the areas that embodiments of the invention are intended to address.","Described herein are systems and methods for collecting and surfacing (e.g. via JMX) of request metrics with respect to classification to be used by a Quality-of-Service (QoS) component and other application monitoring tools. In accordance with an embodiment, each request is classified, either by the application server or another process. For example, requests can be classified by a HTTP\/Web server acting as a front-end tier to the application server. A unique diagnostic context is associated with each request, and thereafter flows with that request as it is being processed. The diagnostic context includes a Request Classification Identifier (RCID) value which carries request classifications. The RCID value is used by data collectors at various points in the system to aggregate collected metrics. Metrics for a particular resource can be tracked across two dimensions, namely the resource itself and the RCID values. This enables the system to identify utilization of a particular resource by requests belonging to a particular classification. In accordance with an embodiment, the system collects the request metrics information in a unified manner and surfaces it to clients\/tools with a single interface. Since different tools may wish to use the same information for different purposes (e.g., a Quality-of-Service tool may use it for resource re-allocations to ensure that important business objectives are met, whereas an Application Performance Management tool, or similar monitoring tool, may use it for monitoring, resource workload analysis, and capacity planning purposes), various rules can be employed to provide support for different tools.","Also described herein are systems and methods for collecting metrics by a workload manager (e.g., Application Server Work Load Manager\/ASWLM) to provide Quality-of-Service and workload management. The system enables collection of metrics from one or more managed servers, e.g., by a workload manager running on an administration server which queries each managed server periodically and then uses the metrics to perform Quality-of-Service and workload management. In accordance with an embodiment, the workload manager comprises an application server (e.g., WebLogic) and an HTTP server (e.g., Oracle HTTP Server\/OHS). Incoming requests can be classified into different request types or performance classes, and assigned a priority based upon business objectives (referred to as performance objectives). From a business point of view, requests belonging to one performance class may be more (or less) important than those belonging to another performance class. The system can manage the workload to ensure that the performance objectives of different performance classes are satisfied. When sufficient resources (CPU, memory, etc) are available, they can be distributed so that the performance objectives for all performance classes are satisfied. Similarly, when sufficient resources are not available, resources from less business-critical performance classes can be diverted to more important ones so that overall business objectives are optimized. The system can also provide adjustment recommendations to an administrator, to help the administrator configure the system to better satisfy the performance objectives. For example, if a particular computer is in violation of the configured performance objectives, the adjustment recommendation may advise e.g., adjusting workload managers, adjusting server cluster size, adjusting connection pool size, and\/or providing surge protection.","Described herein are systems and methods for collecting and surfacing (e.g. via JMX) of request metrics with respect to classification to be used by a Quality-of-Service (QoS) component and other application monitoring tools.","In accordance with an embodiment, each request is classified, either by the application server or another process. For example, requests can be classified by a HTTP\/Web server acting as a front-end tier to the application server. A unique diagnostic context is associated with each request, and thereafter flows with that request as it is being processed. The diagnostic context includes a Request Classification Identifier (RCID) value which carries request classifications. The RCID value is used by data collectors at various points in the system to aggregate collected metrics. Metrics for a particular resource can be tracked across two dimensions, namely the resource itself and the RCID values. This enables the system to identify utilization of a particular resource by requests belonging to a particular classification.","The system collects the request metrics information in a unified manner and surfaces it to clients\/tools with a single interface. Since different tools may wish to use the same information for different purposes (e.g., a Quality-of-Service tool may use it for resource re-allocations to ensure that important business objectives are met, whereas an Application Performance Management tool, or similar monitoring tool, may use it for monitoring, resource workload analysis, and capacity planning purposes), various rules can be employed to provide support for different tools.","For example, in accordance with an embodiment, the Quality-of-Service tool can recognize a performance class, wherein requests are classified into different performance classes according to its rules. Requests belonging to one performance class may be more (or less) important than those belonging to another performance class from a business point of view. To enable this, the Quality-of-Service tool needs the requests to be classified into various performance classes, to enable it to gather metrics relative to those performance classes.","Similarly, the Application Performance Management tool requires the ability to apportion the resource usage per application and business transaction type, including monitoring functionality from the business perspective, rather than the low level threads of execution. To enable this, the Application Performance Management tool needs individual requests to be classified into request types, to enable it to gather metrics relative to those request types.","Other tools within the application server environment can make use of the request metrics in other ways.","Also described herein are systems and methods for collecting metrics by a workload manager (e.g., Application Server Work Load Manager\/ASWLM) to provide Quality-of-Service and workload management. The system enables collection of metrics from one or more managed servers, e.g., by a workload manager running on an administration server which queries each managed server periodically and then uses the metrics to perform Quality-of-Service and workload management.","In accordance with an embodiment, the workload manager comprises an application server (e.g., WebLogic) and an HTTP server (e.g., Oracle HTTP Server\/OHS). Incoming requests can be classified into different request types or performance classes, and assigned a priority based upon business objectives (referred to as performance objectives). From a business point of view, requests belonging to one performance class may be more (or less) important than those belonging to another performance class. The system can manage the workload to ensure that the performance objectives of different performance classes are satisfied. When sufficient resources (CPU, memory, etc) are available, they can be distributed so that the performance objectives for all performance classes are satisfied. Similarly, when sufficient resources are not available, resources from less business-critical performance classes can be diverted to more important ones so that overall business objectives are optimized. The system can also provide adjustment recommendations to an administrator, to help the administrator configure the system to better satisfy the performance objectives.","In accordance with an embodiment, the workload manager can store workload manager policies at an HTTP server acting as a front-end tier to the system. The policies contain the definition of performance classes and their performance objectives. The HTTP server parses the workload manager policies, and uses this information to classify incoming requests in accordance with the policies. The requests flow from the HTTP server to managed servers, where each managed server collects and aggregates metrics from the requests. The workload manager can query each managed server periodically to collect its metrics. The collected metrics are then processed by a rules engine at the workload manager, which analyzes the metrics and generates adjustment recommendations.","For example, if a particular computer is in violation of the configured performance objectives, the adjustment recommendation may advise e.g., adjusting workload managers, adjusting server cluster size, adjusting connection pool size, and\/or providing surge protection.","1. Collecting and Surfacing Request Metrics from Requests","As described above, in accordance with an embodiment, described herein are systems and methods for collecting and surfacing (e.g. via JMX) of request metrics with respect to classification to be used by a Quality-of-Service (QoS) component and other application monitoring tools.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1"},"For this purpose, the requests are classified into various performance classes, enabling the QoS component to gather metrics relative to the performance classes.","As shown in , a request  flows across different tiers of a system, such as an HTTP\/Web server  tier (e.g., Oracle HTTP Server (OHS)), an application server  tier (e.g., WebLogic Application Server) and a database  tier. Requests can be classified, e.g., at the OHS by a classifier . In accordance with an embodiment, a request can be classified according to rules, and metrics can be collected relative to the classifications. The classification information flows with the request so that metrics gathered at collection points can be correlated with current classification for that request. For example, as the request flows through different components within the application server, e.g., servlet , EJB  and JDBC , request metrics can be collected according to the request's classification. Collected metrics can be made available to a QoS component , an Application Performance Management (APM) component , and other application monitoring tools through an interface (e.g., JMX interface ).","In accordance with an embodiment, the QoS component can use the classification information for resource re-allocation to ensure that performance objectives are met. For example, the classification information can be used by the QoS component to change the fair-share configuration parameters on work managers to adjust resources made available to different performance classes. APM can use the classification information for monitoring, resource workload analysis, and capacity planning purposes. For example, the classification information can be used by the APM to apportion the resource usage per application and business transaction type, and can provide monitoring functionality from the performance objective perspective, rather than the low level threads of execution.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 2"],"b":["202","204"]},"At step , each request is classified at the HTTP\/Web server based on the request. For example, a request can flow across different tiers of the system, such as an HTTP\/Web server tier (e.g., Oracle HTTP Server\/OHS), an application server tier (e.g., WebLogic Application Server) and a database tier. Requests can be classified, e.g., at the OHS by a classifier. In accordance with an embodiment, a request can be classified according to rules, and metrics can be collected relative to the classifications. The classification information flows with the request so that metrics gathered at collection points can be correlated with current classification for that request. For example, at step , as the request flows through different components within the application server, e.g., servlet, EJB and JDBC, request metrics can be collected according to the request's classification.","In accordance with an embodiment, the metrics gathered at collection points can be presented as tabular data in rows and columns, and can include request classification columns, component columns and request metric columns. There can be a request classification column for each classification type defined.","For example, as shown in Table 1, there can be columns for QoS and APM classification types. Component columns can include the component type and component name, and there can be a request metric column for each metric collected. For example, there can be columns for metrics such as CPU utilization, memory pressure and request execution time. It will be evident that the examples provided in Table 1 are provided for purposes of illustration, and that in accordance with other embodiments, other data and metrics can be collected and presented as tabular data.","At step , the collected metrics are made available to a QoS component, an Application Performance Management (APM), and other application monitoring tools through an interface (e.g., a JMX interface).",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":[{},{},{},{},{},{},"Request"]},{"entry":[{},{},{},{},"CPU","Memory","Execution"]},{"entry":[{},{},{},{},"Utilization","Pressure","Time"]},{"entry":["QoS","APM","COMP_TYPE","COMP_INSTANCE","(CPU_UTL)","(MEMORY)","(EXEC_TIME)"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Gold","Checkout","Servlet","MyServlet-1","X","Y","Z"]},{"entry":["Gold","Inventory","Servlet","MyServlet-2","D","E","F"]},{"entry":[{},"Check"]},{"entry":["Silver","Inventory","Servlet","MyServlet-2","L","M","N"]},{"entry":[{},"Check"]},{"entry":["Bronze","Checkout","EJB","MyEJB-1","P","Q","R"]},{"entry":["Bronze","Inventory","EJB","MyEJB-2","T","U","V"]},{"entry":[{},"Check"]},{"entry":["Silver","Checkout","JDBC","MyJDBC-1","A","B","C"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}}}},"Additionally, in accordance with an embodiment, the metric data can be queried by specifying the classification type as the criteria to filter and aggregate the result. The query expression can be pseudo-SQL allowing users to select the results from the metrics data table as per the condition specified. In accordance with an embodiment, the form of the query expression can be:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SELECT COL_NAME, aggregate_function(METRIC_COL_NAME)"},{"entry":"WHERE {COL_NAME operator VALUE} (AND|OR)"},{"entry":"{COL_NAME operator VALUE}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the above example, the column name parameter (e.g., COL_NAME) can be any of the columns corresponding to the request classification types, e.g., request classification types QoS, APM. The result set can include fixed columns, e.g., a component type column (i.e., COMP_TYPE) and a component instance column (i.e., COMP_INSTANCE).","In accordance with an embodiment, additional columns can be specified in the query. For example, the metric column name (i.e., METRIC_COL_NAME) can be CPU utilization, memory pressure and request execution time. In accordance with an embodiment, aggregate functions can be supported for the metric columns, such as the sum of the metric values; the count of the number of values; the minimum value of the metric; the maximum value of the metric; the mean value of the metric; the sum of the squares; and the standard deviation of the metric value collection. These functions return the aggregate of the values for the specified metric in the result set row.","In accordance with an embodiment, the WHERE clause parameter can support operators such as: \u201c=\u201d (equals); \u201c!=\u201d (not equals); LIKE (pattern matching with percent matching any number of chars and matching a single char); IN (search for result in the value set). Multiple where clause parameter conditions may be combined using the \u201cAND\u201d or \u201cOR\u201d logical operators. These conditions can be nested within parentheses ( ) which can have a higher order of precedence.","For example, the QoS component can use the classification information for resource re-allocation to ensure that performance objectives are met, and the APM component can use the classification information for monitoring, resource workload analysis, and capacity planning purposes.","At step , it is determined whether the performance objectives of different performance classes are satisfied. At step , if the performance objectives are not satisfied, redistribute resources when sufficient resources (e.g., CPU, memory, etc.) are available so the performance objectives for all performance classes are satisfied. At step , if the performance objectives are satisfied and sufficient resources are not available, divert resources from less critical performance classes to more important ones so that the overall objectives are optimized.","The data collected for the requests and classified by the RCID can be made available from the request classification data runtime managed bean interface  over JMX or another interface. The interface can define methods used to query the metrics data collected for different classification types, and methods used to get the metadata about what columns exist in the tabular structure. In accordance with an embodiment, an example of the interface can be phrased as shown in .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4"},"For example, in accordance with an embodiment, the metric data can be requested by specifying one of the aggregate functions listed above. Table 2 shows one example. It will be evident that the simple query examples provided in Table 2 are provided for purposes of illustration, and that in accordance with other embodiments, other examples of the usage and working of the query expression where the SELECT clause contains only metric data columns and the results returned are aggregates of the selected columns, are possible.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Query","Result"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SELECT SUM(CPU_UTIL) WHERE","Servlet, MyServlet-1, X"]},{"entry":["QoS=\u2019Gold\u2019","Servlet, MyServlet-2, D"]},{"entry":["SELECT AVG(MEMORY) WHERE QoS IN","Servlet, MyServlet-1, Y"]},{"entry":["{\u2019Gold\u2019,\u2019Silver\u2019}","Servlet, MyServlet-2,"]},{"entry":[{},"AVG(E,M)"]},{"entry":[{},"JDBC, MyJDBC-1,B"]},{"entry":["SELECT STD_DEV(EXEC_TIME) WHERE","Servlet, MyServlet-1, Z"]},{"entry":["APM = \u2018Checkout\u2019","EJB, MyEJB-1, R"]},{"entry":[{},"JDBC, MyJDBC-1,C"]},{"entry":["SELECT SUM(CPU_UTIL),","EJB, MyEJB-1, P,R"]},{"entry":["AVG(EXEC_TIME) WHERE QoS=\u2019Bronze\u2019","EJB, MyEJB-2, T,V"]},{"entry":["SELECT MIN(EXEC_TIME) WHERE","Servlet, MyServlet-1, Z"]},{"entry":"QoS=\u2019Gold\u2019 AND APM = \u2018Checkout\u2019"},{"entry":["SELECT SUM(EXEC_TIME) WHERE","Servlet, MyServlet-1,"]},{"entry":["COMP_TYPE IN (\u2018Servlet\u2019, \u2019EJB\u2019)","SUM(Z)"]},{"entry":[{},"Servlet, MyServlet-2,"]},{"entry":[{},"SUM(F,N)"]},{"entry":[{},"EJB, MyEJB-1, SUM(R)"]},{"entry":[{},"EJB, MyEJB-2, SUM(V)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As shown in Table 2, the table tabulates the simple query examples where the select parameter clause contains only metric data columns and the results returned are aggregates of the selected columns. In accordance with an embodiment, it is possible to have multiple metric columns in a query, but all of them may not be applicable to a given component type, component instance combination, or a metric may not be enabled for a given collection type. In that case, the column value will be null in the result set for all aggregate functions (sum, minimum, maximum, average) except count, which will return a value of zero.","Table 3 illustrates the usage of other non-metric columns in the select clause parameter, where the data is returned in multiple row sets.","As shown in Table 3, the row in the result set {Servlet, MyServlet-2, SUM(F,N)} aggregates the values for the rows where the values for the component type and component instance columns are equal. The rows with distinct values of the columns in the result set are aggregated and the metric values returned for the distinct set.",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Query","Result Set"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SELECT QoS, SUM(CPU_UTIL)","Servlet, Myservlet-1, Gold, X,"]},{"entry":[{},"Servlet, Myservlet-2, Gold, D"]},{"entry":[{},"Servlet, Myservlet-2, Silver, L,"]},{"entry":[{},"JDBC, MyJDBC-1, Silver, A"]},{"entry":[{},"EJB, MyEJB-1, Bronze, P,"]},{"entry":[{},"EJB, MyEJB-2, Bronze, T"]},{"entry":["SELECT APM, AVG(MEMORY)","Servlet, MyServlet-1, Checkout, Y,"]},{"entry":["WHERE QoS IN {\u2019Gold\u2019,\u2019Silver\u2019}","Servlet, MyServlet-2,"]},{"entry":[{},"InventoryCheck, AVG(E,M)"]},{"entry":[{},"JDBC, MyJDBC-1, Checkout, B"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Returning to , a nested map structure  of a request metric includes one or more fields, each field having data associated therewith. For example, the Request Classification Field (RCID)  can carry request classifications with the request as the request flows through the system. As described above, the classification information flows with the request so that metrics gathered at different points can be correlated with current classification for that request. The RCID value can be used by data collectors at various points in an application server to aggregate collected metrics, and metrics for a given resource (e.g., an application server component such as a servlet) can be tracked across two dimensions, the resource itself and RCID values. Thus, it is possible to identify utilization of a specific resource by requests belonging to a particular classification.","In accordance with an embodiment, the request's classification can be encoded in the RCID field. The RCID field can be phrased as:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"RCID :== CLASSIFICATION ( \u2018,\u2019 CLASSIFICATION)*"]},{"entry":[{},"CLASSIFICATION :== CLASS_TYPE \u2018:\u2019 CLASS_VALUE"]},{"entry":[{},"CLASS_TYPE :== (\u20180\u2019..\u20199\u2019 | \u2019a\u2019..\u2019z\u2019 | \u2018A\u2019..\u2019Z\u2019)*"]},{"entry":[{},"CLASS_VALUE :== (\u20180\u2019..\u20199\u2019 | \u2019a\u2019..\u2019z\u2019 | \u2018A\u2019..\u2019Z\u2019| \u2018_\u2019 | \u2018!\u2019 | \u2018 \u2019 |"]},{"entry":[{},"\u2018=\u2019 | \u2018+\u2019 | \u2018\u2212\u2018 | \u2018\/\u2019)*"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the above example, specified US-ASCII characters can be used in class type and class value. For example, in an environment where two classifiers are active, one for QoS and one for APM, under QoS classification rules, the computed classification value of QoS can be \u2018Gold\u2019. For example, in accordance with an embodiment, under APM classification rules, the computed classification value for APM can be \u2018Checkout\u2019. The RCID contents can be, e.g.: APM:Checkout, QoS:Gold. In accordance with an embodiment, the classification types can be alpha-numerically ordered within the RCID field. Class type names can represent IDs which have an existing definition and may allow characters which can not be directly represented in the class value. Class values for a defined class type can be either plain values or encoded values. This has two benefits, e.g., in that it avoids potential collisions between encoded and plain values, and it allows intermediate components that may need to interpret the class value to quickly and reliably determine whether it is encoded or not. In accordance with an embodiment, to have a mix of plain and encoded representations, different class types can be defined to represent each style. For example, class type \u201cMyId\u201d can be defined for plain ID values and class type \u201cMyIdB64\u201d can be defined for encoded values.","In accordance with an embodiment, a \u201cwell-known\u201d RCID has a pre-defined value and meaning. Well-known RCIDs are generally used to differentiate between scenarios where a classification is not available but where it is still valuable for metrics to be collected and queried for the scenario. An example of a well-know RCID is RSVD:Unclassified, which can be used for tracking metrics for requests that were not classified with an RCID. RSVD:Core is another example of a well-known RCID. The RSVD:Core RCID is used for tracking metrics at core levels where the diagnostic context is not available to determine the RCID.","The RCID can contain multiple classification types that have different lifecycle requirements. The ability to manage the lifecycle of the classification values for a particular classification type is implementation specific. For example, the metrics collection performed within the application server may have the ability to determine when a QoS classification value is no longer needed, but may not be able to determine that an APM classification value is no longer needed. In accordance with an embodiment, a RCID field can contain a classification value that does not have a lifecycle. In such a case, component implementations can impose a limit on the lifetime of these values. For example, an application server can timeout these values if they are inactive after a period of time.","In accordance with an embodiment, when an RCID contains a mix of classification values, the lifetime of the entire RCID is the lifetime of the longest lived component value within that RCID. For example, metrics collected by an application server for an RCID value which contains a QoS value and an APM value will remain until both the QoS and APM values within that RCID have expired.","Further shown in  are the component type name field  and the component instance name field . In accordance with an embodiment, resource consumption metrics are measured for specific component instances of component types executing within an application server. Component type names and component instance names can be exposed by the data access querying mechanism in that it will allow queries which can specify component names. In accordance with an embodiment, component type names are used as the <ComponentTypeName> field in the nested map structure. The value in that map is itself a map which is keyed by the component instance name <ComponentInstanceName> field. The available component type names are pre-defined. In accordance with an embodiment, component instance names are used as the <ComponentInstanceName> field described in the nested map structure. Component instance names can be determined at runtime using naming conventions specific to the component type.","It will be evident that the examples provided in Table 4 are provided for purposes of illustration, and that in accordance with other embodiments, other component type names and component instance naming could be used.",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Component",{},"Enabled",{}]},{"entry":["Type Name","Component Instance Name","By","Example"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["RequestClass","<request-class-name>","QoS,","myRequestClassName"]},{"entry":[{},{},"APM"]},{"entry":["WebApp","<servletName|URI>","QoS,","Action|\/admin\/login.do"]},{"entry":[{},{},"APM"]},{"entry":["EJB","<appName|ejbCompName|ejbName>","APM","MedRecEar|webServicesEjb|"]},{"entry":[{},{},{},"MedRec"]},{"entry":[{},{},{},"WebServicesEJB"]},{"entry":["JDBC","<poolName>","QoS","JMSJDBCConnectionPool"]},{"entry":["JAXWS","<URI>","APM","\/ParticipantPortType11"]},{"entry":["JAXRPC","<currentParty|action>","APM","http:\/\/host:port\/myWebService\/"]},{"entry":[{},{},{},"my"]},{"entry":[{},{},{},"WebService|m:echoString"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"In accordance with an embodiment, the various collection points for metrics can differ depending on whether the metrics are collected for the QoS or APM component, the component type being measured, and the virtual machine (e.g., Java Virtual Machine) that the server is running on. For example, configuration settings within the application server can be used to enable and disable metric collection for the QoS and APM component independently of each other. For example, a component type may be specific to the QoS component; may be enabled for both the QoS and APM component; may have a metric that is only specific to the APM component, and\/or may be a metric that requires vendor specific virtual machine support to be collected.","In accordance with an embodiment, configuration settings  within the application server to enable and disable metric collection for the QoS and APM component independently can be phrased as shown in .","Certain metrics may not be available on all virtual machine implementations. For example, these metrics can fall into two general categories: standard application programming interface (API) metrics and vendor specific API metrics. Standard API metrics have a standard API defined for determining whether the metric is supported, and a standard API for collecting the metric. Vendor specific API metrics do not have a standard API defined for collecting the metric. For these metrics, if there is an API defined, code is explicitly added to support the metric on a particular virtual machine. It will be evident that the examples provided in Table 5 are provided for purposes of illustration, and that in accordance with other embodiments, other component metric name fields  can be used to collect other metrics.",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},{},{},"En-",{}]},{"entry":[{},{},{},"abled"]},{"entry":["Metric Name","Type","Units","By","Components"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MEMORY","long","Bytes","APM","all"]},{"entry":["CPU_UTL","long","Nanoseconds","QoS,","all"]},{"entry":[{},{},{},"APM"]},{"entry":["EXEC_TIME","long","Nanoseconds","QoS,","all"]},{"entry":[{},{},{},"APM"]},{"entry":["BLOCK_TIME","long","Milliseconds","QoS,","all"]},{"entry":[{},{},{},"APM"]},{"entry":["RESOURCE_WAIT","long","Nanoseconds","QoS","JDBC"]},{"entry":["OUTBOUND_EXEC","long","Nanoseconds",{},"JDBC,"]},{"entry":[{},{},{},{},"WebService"]},{"entry":["WORKMANAGER_WAIT","long","Nanoseconds","QoS,","RequestClass"]},{"entry":[{},{},{},"APM"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"Referring to Table 5, by way if example, MEMORY can be the amount of memory allocated within the thread for the method invocation being measured. CPU_UTL can be an approximation of the amount of CPU time spent within the thread for the method invocation being measured. This can be measured on platforms where ThreadMXBean.isThreadCpuTimeSupported( ) returns true. Direct access may be provided on some JVMs such as JRockit. EXEC_TIME can be the amount of time elapsed overall for the method invocation being measured. This can be calculated using System.nanoTime. BLOCk_TIME can be the amount of elapsed time a thread was blocked for the method invocation being measured. This can be measured on platforms where ThreadMXBean.isThreadContentionMonitoringSupported( ) returns true. RESOURCE_WAIT can be the amount of elapsed time spent getting access to a resource. For example, for JDBC, this is the time spent waiting to get a connection. OUTBOUND_EXEC can be the amount of time elapsed overall for the outbound operation being measured. This is calculated using System.nanoTime, and can enable the isolation of the time spent waiting for an outbound call to an entity that may not be tracked with specific metrics (e.g., a foreign database).","In accordance with an embodiment, metric statistics can be kept for the tracked metrics. These statistics can vary depending on the specific type of metric being collected and the feature that is enabled (e.g., a QoS feature or an APM feature). The metric statistics can be defined in the statistic name field  shown in . Table 6 is provided for purposes of illustration, and that in accordance with other embodiments, other statistics can be kept for metrics.",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Statistic","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Count","long","Number of values"]},{"entry":["Min","long","Minimum value"]},{"entry":["Max","long","Maximum value"]},{"entry":["Sum","double","Sum of all values"]},{"entry":["sum_of_squares","double","Sum of the squares (tracked for APM metrics"]},{"entry":[{},{},"only)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIGS. 6-8","FIG. 6"],"b":["402","404","406","1","400","410","408","414","416","1"]},{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIGS. 7-8","FIG. 7","FIG. 8"],"b":"2"},"As shown in , Thread  includes component MyServlet and Thread   includes components MyEJB and JDBC. In accordance with an embodiment, the execution time measurements for MyEJB and JDBC are included in the MyServlet execution time measurement since MyServlet waits for components MyEJB and JDBC to complete processing of work. Thus, the execution time resource consumption metric for MyServlet will include the process time of MyServlet along with the process time of MyEJB and JDBC.","Alternatively, as shown in , the execution time measurements for MyEJB and JDBC are not included in the MyServlet execution time measurement, since MyServlet does not wait for components MyEJB and JDBC to complete processing of work. Thus, the execution time resource consumption metric for MyServlet will not include the process time of MyEJB and JDBC.","2. Resource Management Based on Requests","Also described herein are systems and methods for collecting metrics by a workload manager (e.g., Application Server Work Load Manager\/ASWLM) to provide Quality-of-Service and workload management.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 9"},"From a business point of view, requests belonging to one performance class may be more (or less) important than those belonging to another performance class. The system can manage the workload to ensure that the performance objectives of different performance classes are satisfied. When sufficient resources (CPU, memory, etc) are available they can be distributed so that the performance objectives for all performance classes are satisfied. Similarly, when sufficient resources are not available, resources from less business-critical performance classes can be diverted to more important ones so that overall business objectives are optimized. The system can also provide adjustment recommendations to an administrator, to help the administrator configure the system to better satisfy the performance objectives.","As shown in , domain  includes a HTTP\/Web server  (e.g., Oracle HTTP Server\/OHS), one or more managed Server  (e.g., WebLogic Managed Server), and an administration server  (e.g., WebLogic Administration Server). The administration server hosts an application server workload manager , which includes a Quality-of-Service engine\/rules engine .","In accordance with an embodiment, the application server workload manager can store workload manager policies at the HTTP\/Web server acting as a front-end tier to the system. The policies contain the definition of performance classes and their performance objectives. The HTTP\/Web server parses the workload manager policies, and uses this information to classify incoming requests  in accordance with the policies. The requests flow from the HTTP\/Web server to managed servers where each managed server collects and aggregates request metrics from the requests.","In accordance with an embodiment, each managed server includes metric collector  and tuning controls . The application server workload manager can query  each managed server periodically to collect its request metrics. In accordance with an embodiment, if some of the metrics can not be collected, a partial list of aggregated metrics can be returned to the application server workload manager.","The collected request metrics are then processed by the rules engine at the workload manager, which analyzes the request metrics and generates adjustment recommendations. For example, if a particular computer is in violation of the configured performance objectives, the adjustment recommendation may advise e.g., adjusting workload managers, adjusting server cluster size, adjusting connection pool size, and\/or providing surge protection. In accordance with an embodiment, the metrics collected can be application server tier metrics and application server resource metrics. Application server tier metrics include a request count success (RCS) metric, average response time (ART) metric, layer active time (LAT) metric, and request count other (RCO) metric. Application server resource metrics include CPU resource use (RU) metric, and CPU resource wait (RW) metric.","For example, in accordance with an embodiment, the RCS metric can be defined as the actual count of requests per second in the application server layer. The ART metric can be defined as the total response time per second from the application server entry point through its tier and all lower tiers until the response is returned to the client from the application server tier. The LAT metric can be defined as the portion of the time spent in seconds in processing the request and response in the entry tier (e.g., the application server tier). The RCO metric can be defined as the actual count of requests that did not succeed due to for example an exception in the entry tier. The CPU RU metric can be defined as the portion of LAT made up of use of the CPU in seconds. The CPU RW metric can be defined as the portion of the LAT made up of wait for the CPU. The CPU RW metric can be tracked per RCID along with the resource usage collection metrics above. The JDBC connection Pool RU can defined as the portion of ART made up of use of any connection from this pool in seconds. This includes all time from the point of getting a connection out of the pool, to the point of returning the connection to the pool, including the time spent in lower tiers. The JDBC Connection Pool RW can be defined as the portion of the ART made up of wait for a connection pool. It will be evident that other examples can be provided.","In accordance with an embodiment, the policy set at the HTTP\/Web server can be replicated to one or more other HTTP\/Web server instances. A client can create the policies, which can be in the form of, e.g., an XML document. The policy set can contain a definition of performance classes and their performance objectives. The client can push the policy set to the application server workload manager service, and in turn the application server workload manager can store the policy set with the HTTP\/Web server configuration. The HTTP\/Web server instances will parse the policy set and stamp incoming requests in accordance with information provided in the policies. The application server workload manager can also read policies locally from the HTTP\/Web server configuration directly at the administration server, gather metrics from each managed server's metric collector, feed gathered metrics from managed servers to the workload manager; and gather metric from the HTTP\/Web server. If a performance class is in violation of performance objectives the administration server can generate tradeoff recommendations, alert a client such as Grid\/Middleware Control  (e.g., Enterprise Manager Grid Control\/Fusion Middleware Control) about the generated recommendation , apply tuning recommendations  at the client's request and inform the higher level i.e., HTTP\/Web server, to start throttling if the system is over loaded and in danger of crashing.","In accordance with an embodiment, the grid\/middleware control can be used to manage the application server workload manager and a database workload manager  (DBWLM), which includes a database . The grid\/middleware control can create policies and can push the policies to the application server workload manager by invoking an operation on e.g., a Java management extension (JMX) managed bean or another application management tool. Once the policies have been communicated to the workload manager, the grid\/middleware control activates the policies, and is able to perform the following actions: enable\/disable collection of metrics for a performance class; retrieve recommendations, e.g., when a performance objective for a performance class is violated ask the system to provide recommendations to bring the performance objective back into compliance; activate the recommendations on the system; perform a what-if analysis; and fetch historical data.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 10"},"At step , a HTTP\/Web server is provided that receives a plurality of requests to access information stored in a database. At step , each request is classified at the HTTP\/Web server based on classification rules specified in a policy set stored on the HTTP\/Web server. In accordance with an embodiment, an application server workload manager can store workload manager policies at the HTTP\/Web server acting as a front-end tier to the system. The policies contain the definition of performance classes and their performance objectives. The HTTP\/Web server parses the workload manager policies, and uses this information to classify incoming requests in accordance with the policies. At step , a priority is assigned to each classified request based on that requests particular classification.","At step , the plurality of requests are processed by a plurality of managed servers. At step , request metrics are collected from each request according to that particular request's classification. For example, in accordance with an embodiment, requests flow from the HTTP\/Web server to managed servers where each managed server collects and aggregates metrics from the requests. Each managed server includes a metric collector and tuning controls. The application server workload manager can query each managed server periodically to collect its metrics. In accordance with an embodiment, if some of the metrics can not be collected, a partial list of aggregated metrics can be returned to the application server workload manager. At step , the collected metrics are processed at a rules engine at a workload manager, which analyzes the metrics and generates adjustment recommendations. At step , it is determined whether the performance objectives of different performance classes are satisfied. At step , if a particular computer is in violation of the configured performance objectives, the adjustment recommendation may advise e.g., adjusting workload managers, adjusting server cluster size, adjusting connection pool size, and\/or providing surge protection.","In accordance with an embodiment, the application server workload manager can be an application (e.g., a Java EE application) running on an application server, and can be configured using managed beans (e.g., JMX managed beans). For example,  illustrates the interaction between the grid\/middleware control and managed beans on a managed bean server  to configure the application server workload manager, in accordance with an embodiment. As shown in , a first and second managed bean is available on the administration server. The first managed bean can be application server workload manager (ASWLM) factory bean  (e.g., ASWLMFactoryMBean bean) and the second managed bean can be an application server workload manager instance bean  (e.g., ASWLMInstanceMBean bean). The ASWLM factory bean can operate in a runtime managed bean server (e.g., a JMX MBean server)  along with other application server runtime managed beans.","The ASWLM factory bean can set the life cycle of an application server workload manager. For example, a grid\/middleware control can invoke a create method to create an instance of the application server workload manager called ASWLM instance bean (e.g., ASWLMInstanceMBean), which can result in deployment of the application server workload manager on an administration server, and creation of ASWLM instance bean. The ASWLM instance bean can deploy\/undeploy application server workload manager, create\/destroy ASWLM factory bean, and create\/destroy other ASWLM beans, such as Java Required File (JRF) managed beans.","The ASWLM instance bean can expose the application server workload manager functionality as a set of operations, e.g., JMX operations, and can implement a common interface across all workload manager implementations. In accordance with an embodiment, the ASWLM instance bean can further set the QoS component policies on a managed bean that can be part of the HTTP\/Web server configuration.","In accordance with an embodiment, the parameters and the output of ASWLM instance bean operations can be either primitive types or XML string objects. Table 7 is provided for purposes of illustration, and that in accordance with other embodiments, other XML schemas can be used for constructing the XML documents.",{"@attributes":{"id":"p-0095","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["S. No.","Document","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1.","WLMPolicySet","Describes the WLM configuration. It includes"]},{"entry":[{},{},"request classifications and performance"]},{"entry":[{},{},"objectives. It also includes topology and"]},{"entry":[{},{},"constraint information for various WLM types."]},{"entry":["2.","WLMMetrics","Describes metric data that is collected at run"]},{"entry":[{},{},"time."]},{"entry":["3.","WLMMetrics","Contains a list of recommended resource"]},{"entry":[{},{},"allocation settings, estimated satisfaction"]},{"entry":[{},{},"metrics and estimated collected metrics."]},{"entry":["4.","RescAllocSet","Represents allocation of resources and the"]},{"entry":[{},{},"associated knob settings"]},{"entry":["5.","WLMHistData","Represents the historical data for the specified"]},{"entry":[{},{},"time interval"]},{"entry":["6.","WLMStatus","Contains the status information of the WLM"]},{"entry":[{},{},"service."]},{"entry":["7.","WhatIf_Output","Contains the result of What-If Analysis."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In accordance with an embodiment, the document flow between a grid\/middleware control and administration server can include policy set (e.g., WebLogic policy set), communicated from the grid\/middleware to the administration server. The policy set describes the administration server configuration, includes request classifications and performance objectives, and also includes topology and constraint information for various workload manager types. The administration server in return communicates documents to the grid\/middleware control. These documents can describe the metrics that are collected (e.g., WLMMetrics documents), describe the resource allocation set (e.g., RescAllocSet documents), represent history data (e.g., WLMHistData documents), contain the status information (e.g., WLMStatus documents), and contain the result of the recommendation analysis (e.g., WhatIf_Output documents), and are described in Table 7.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 12"},"As shown in , computer  includes HTTP\/Web server   (e.g., Oracle HTTP Server\/OHS), HTTP\/Web server  , node manager , and HTTP\/Web server Metric Collection Plugin . HTTP\/Web server  and HTTP\/Web server  can be represented on an administration server as a HTTP\/Web system component , which is a representation of an external service in the administration application server. The configuration of the HTTP\/Web system component can reside on the administration server, and can be propagated to one or more other computers.","In accordance with an embodiment, the administration server includes an application server workload manager, HTTP\/Web server system component, and HTTP\/Web server configuration repository . The application server workload manager can store both the QoS component policies and the current active policy information in a configuration managed bean  (e.g., a JRF Configuration MBean) at the HTTP\/Web server system component, which can be made part of the HTTP\/Web server configuration stored at the HTTP\/Web server configuration repository.","Storing both QoS component policies and the current active policy information as part of the HTTP\/Web server configuration allows for automatic replication as soon as a new instance of a HTTP\/Web server is created or a policy is updated. For example, the application server workload manager can read both the QoS component policies and the current active policy directly from the HTTP\/Web server configuration since it will be collocated on the administration server, and the administration server can coordinate with the HTTP\/Web server for configuration integration.","In accordance with an embodiment, the application server workload manager can collect metric data from HTTP\/Web server  and HTTP\/Web server , or any number of HTTP\/Web servers. The HTTP\/Web servers can make metric data available by providing a HTTP\/Web metric collection plugin in the node manager.","The metrics can include request count success (RCS), average response time (ART), layer active time (LAT) and request count other. The metric data can be surfaced e.g., via JMX by a grid\/middleware control (e.g., Enterprise Manager Grid Control\/Fusion Middleware Control). The grid\/middleware control can interact with the application server workload manager instance managed bean  to configure the application server workload manager. For example, the grid\/middleware control can set policies on the application server workload manager instance managed bean, which are communicated to the configuration managed bean at the HTTP\/Web server system component. The policy is implemented at each HTTP\/Web server instance. The application server workload manager can interact with the HTTP\/Web servers indirectly using JMX. The node manager can host a set of system component plugins, and can host a HTTP\/Web plugin. The application server workload manager can communicate with the node manager to gather metrics and statistical data from the HTTP\/Web server plugin via JMX.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":"FIGS. 13-18"},"For example, the application server workload manager can first recommend adjusting the thread allocations among performance classes within the administration server, then the application server workload manager can recommend loaning a server from another cluster if available, and finally the application server workload manager can recommend adjusting the connection pools. The surge protection recommendation can be provided if it is found that none of the other recommendations are going to be helpful.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 13","FIG. 14"]},"As shown in , an administration server includes a policy , performance class  , performance class  , and recommendation class   and recommendation class  . Adjustment recommendations ,  are received at the administration server and recommend changes to application server request class  and application server request class , each associated with a performance class. For example, the adjustment recommendations can recommend performance class adjustments and a new value for a request class, which can ensure that the application server thread resources are adjusted in order to achieve the performance objective.","In accordance with an embodiment, the administration server provides thread management to bring a performance class back into compliance. For example, a request entering an application server can be assigned to a work manager, and the work manager schedules the request based upon its configured policy. The policy defines the performance class and the associated request class. The application server can have two types of request classes\u2014a fair share request class and a response time request class. The combination of work managers and request classes provide control on work priority. The performance classes can be adjusted if they can be mapped and tied to an application server fair share request class directly. When a performance class requires more resources, the performance classes underlying request class will be allocated more resources.","As shown in , an administration server includes a HTTP\/Web server, HTTP\/Web application container , performance class  and performance class , and self tuning managed bean request class   and self tuning managed bean request class  . In accordance with an embodiment, the HTTP\/Web application container identifies a performance class associated with a request and assigns the request to a request class.","If a performance class is classified based upon a web application module's context root, then the performance class can automatically map to a unique request class because all such requests can be handled by a unique work manager.","If multiple performance classes are configured within a single context root, e.g., performance class  for myapp\/browse and performance class  for myapp\/checkout URI's, then by default, requests for both performance class  and performance class  will be communicated to the same request class, and any performance class level tuning at application server will not be possible. To tune a performance class level, a request class is configured for every performance class in a self tuning bean (e.g., SelfTuningMBean). The HTTP\/Web application container ensures that a request belonging to a performance class is directed to its own request class. This way, any type of performance class can be tuned in the application server.","In accordance with an embodiment, the following collected metrics can be utilized to recommend changes to a request class associated with a performance class: Request Count Success (RCS), Average Response Time (ART), Layer Active Time (LAT), CPU RU, and CPU RW. The rule recommends adjusting resources from a low priority performance class to a higher priority performance class.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIGS. 15-18"},"As shown in , multiple clusters are running in a domain on physical machines (e.g., servers), where each computer node is only hosting instances of one application server cluster. Four computing nodes are situated in two clusters. Cluster   includes server   and server  , where server  includes server instance   and server instance  , and server  includes server instance   and server instance  . Cluster   includes server   and server  , where server  includes server instance   and server instance  , and server  includes server instance   and server instance  .",{"@attributes":{"id":"p-0114","num":"0113"},"figref":["FIG. 16","FIG. 16"],"b":["2","1","2","2","9","10","3","4","1","1","1","1","1","2","2","2","3","4","2","9","1430","10","1432","3","5","6","4","7","8","2","1","2"]},{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 17"},"As shown in , cluster  includes managed server  and managed server . Cluster  includes managed server  and managed server . Upon instantiating a sharable managed server instance , there can be a sharable managed server instance on cluster  or cluster . The sharable managed server instance includes all applications targeted to cluster  and cluster . When assigning the sharable managed server instance to cluster , applications targeted to cluster  are stopped, applications targeted to cluster  are started, and server instance is added to cluster . When assigning the sharable managed server instance to cluster , applications targeted to cluster  are stopped, applications targeted to cluster  are started, and managed sharable server instance is added to cluster .",{"@attributes":{"id":"p-0117","num":"0116"},"figref":["FIG. 18","FIG. 18"],"b":["1","1","2","1","2","5","6","1","1","1608","2","2","1618","1610","1","2","1620"]},"In accordance with an embodiment, the following collected metrics can be utilized to recommend allocating a server instance from one cluster to another cluster: Request Count Success (RCS), Average Response Time (ART), Layer Active Time (LAT), CPU RU, CPU RW, Connection Pool RU and Connection Pool RW.","In accordance with an embodiment, a surge protection rule is available if every attempt fails to bring violating a performance class to conformance. For example, if it is determined that none of the potential tuning recommendations will bring a violating performance class to conformance, the surge protection rule can be triggered. The surge protection rule recommends the HTTP\/Web server to stop sending requests for a certain performance class. Once the system has stabilized, the system will recommend enabling requests for the blocked performance class. In accordance with an embodiment, the following collected metrics can be utilized to recommend the surge protection rule: Request Count Success (RCS), Average Response Time (ART), Layer Active Time (LAT), CPU RU and CPU RW","Example Use Cases","In accordance with various embodiments, the system can be implemented to support a variety of different use cases and applications. Some examples of these use cases and applications are described below by way of illustration. It will be evident that embodiments of the invention can be implemented to support other use cases and applications, and that the invention is not limited to the example provided herein.","For example, an administrator or a user may be responsible for managing a common admin model (CAM) domain. The CAM domain hosts internal finance and wiki applications on a set of shared hardware resources. The finance application is deemed very critical for the company's business and has strict QoS requirements. The application server workload manager (ASWLM) QoS feature is enabled in the domain to ensure that the finance application continues to meet its performance objective under all load conditions. The administrator is aware that there is a clear usage pattern for the finance application because it experiences heavy usage towards the end of the quarter. However, the wiki application's usage pattern is random and its availability is less important to the company than that of the finance application. In order to meet the performance objective of the finance application under heavy load, the administrator has defined two performance classes, one for each application, with a higher priority for the finance performance class. When the finance application experiences higher load, the ASWLM running on an administration server (e.g., a WebLogic\/WLS Administration Server) will shift the resources away from the wiki application and will make them available to the finance application to ensure that it continues to meet its performance objective. Hence ASWLM can help the administrator meet the QoS requirement for his business applications.","An administrator may be responsible for managing two Java EE applications in a CAM domain that each run in separate WLS cluster. The IT team has done extensive capacity planning and has come up with an optimum cluster size to meet the user load. However, the administrator has found that at certain times, unpredicted user surge makes one application cluster overloaded, while at the same time the other application cluster is under utilized. The ASWLM QoS feature can provide the ability to quickly move a WLS managed server instance from under utilized cluster to the overloaded one. Thus, server resources can be dynamically allocated and de-allocated among WLS server clusters using the QoS capabilities provided by ASWLM.","An administrator may be responsible for managing a mission critical application in a large CAM domain with a 32 node WLS cluster backed by a cluster database (e.g., an Oracle Real Application Cluster\/RAC). The availability of the application is critical to the business and any downtime could be costly. The system experienced unavailability when a login storm caused the opening of large number of Java Database Connectivity (JDBC) connections to the database, which brought the entire cluster to a halt. It took the administrator a while to figure out the root cause of the problem, which could have been avoided if the system could have surfaced that certain types of requests are over-loading the system. In that case, the upper layer could have temporarily stopped accepting certain types of requests until the system could be stabilized. The ASWLM QoS feature provides the ability to group user requests into coarse grained performance classes. ASWLM can make it possible to aggregate and report the performance of user requests at performance class level, and can generate recommendations in real time to ensure that adequate level of service availability is in place in extreme load conditions.","The present invention may be conveniently implemented using one or more conventional general purpose or specialized digital computer, computing device, machine, or microprocessor, including one or more processors, memory and\/or computer readable storage media programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art.","In some embodiments, the present invention includes a computer program product which is a storage medium or computer readable medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include, but is not limited to, any type of disk including floppy disks, optical discs, DVD, CD-ROMs, microdrive, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data.","The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 6-8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 13-18"}]},"DETDESC":[{},{}]}
