---
title: Systems and methods for providing asynchronous messaging
abstract: Systems and methods are provided for providing asynchronous communication between a source processor and a destination processor. In one embodiment, a method includes receiving an information request; making a first call to the destination processor, such that the first call includes the information request; and ending the first call while the destination processor determines an information response, such that said ending terminates a synchronous communication between the source processor and the destination processor. Furthermore, the method includes making a second call to the source processor, such that the second call includes the information response; ending the second call, such that said ending terminates a synchronous communication between the destination processor and the source processor; and providing asynchronously the information response.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437464&OS=07437464&RS=07437464
owner: Federal Home Loan Mortgage Corporation
number: 07437464
owner_city: McLean
owner_country: US
publication_date: 20030131
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application No. 60\/358,349, entitled \u201cSYSTEMS AND METHODS FOR PROVIDING AN ASYNCHRONOUS MESSAGING INTERFACE,\u201d filed on Feb. 22, 2002, the disclosure of which is expressly incorporated herein by reference in its entirety.","I. Field of the Invention","The present invention generally relates to communications. More particularly, the invention relates to systems and methods for providing asynchronous messaging.","II. Background Information","Interprocessor communications frequently use communication mechanisms that enable the transport of information, such as the transport of packets using a protocol. One such interprocessor communication protocol is RPC (emote rocedure all).","RPC works with other protocols, such as Hyper Text Transfer Protocol (HTTP), Transmission Control Protocol\/Internet Protocol (TCP\/IP), or User Datagram Protocol (UDP), to carry information between communicating processors (or programs). The RPC protocol functions in a manner that is similar to a local procedure call. Like a local procedure call, the caller (or calling processor) places arguments in a procedure at a remote location (or destination processor), such as a results register. Then, the caller transfers control to the procedure. The RPC caller eventually regains control, receives the results of the procedure, and continues execution.","RPC works synchronously by having one thread of control wind logically through two processes: the source process and the destination process. When a call, such as RPC, is synchronous, the call is serial such that one call is processed before another. In addition, a synchronous call usually remains open (i.e., a caller waits and maintains an open connection for the response) while the destination processes that request. For example, the caller sends a call message to a remote procedure at a destination. The call message includes the parameters required to execute the procedure. The caller then waits for the destination's reply message with a result.","In communications environments where a connection is used, such as an HTTP connection, the connection may be kept open while the caller waits for a reply. Next, a process at the destination, which is dormant until the arrival of the call message, extracts the procedure parameters, computes the result, and sends a reply message to the caller. The caller (i.e., a process at the source processor) receives the reply message from the destination, extracts the results of the procedure, and the caller resumes execution with the results.","Recently, another interprocessor communication named SOAP (Simple Object Access Protocol) has been developed as an easy to implement protocol for exchanging information (messaging). SOAP is designed to operate seamlessly with RPC and operates well with HTTP. To exchange messages, SOAP implements an RPC that synchronously makes calls as described above. Making a remote procedure call with SOAP involves first building a SOAP message. The SOAP request message that is sent to a destination represents a synchronous call. The payload of that request message contains information (e.g., parameters and input data) to enable the destination processor to determine a subsequent SOAP response message with the result.","However, there are problems with using the synchronous RPC mechanisms in SOAP when a large number of calls are processed. One of the problems occurs due to the delay associated with processing each call. The delay creates a queue of calls waiting to be processed. In addition, while the calls are waiting in the queue, connection resources, such as HTTP connections, are open (occupied), preventing other calls from using the connections.","Accordingly, the present invention is directed to systems and methods for providing asynchronous messaging.","Systems and methods consistent with the systems and methods of the present invention may provide asynchronous communication between a source processor and a destination processor. Moreover, systems and methods consistent with the present invention may receive, at the source processor, an information request. Further, systems and methods consistent with the present invention may make, at the source processor, a first call to the destination processor, such that the first call includes the information request. In addition, systems and methods consistent with the present invention may end the first call while the destination processor determines an information response, such that ending terminates a synchronous communication between the source processor and the destination processor. Furthermore, systems and methods consistent with the present invention may make, at the destination processor, a second call to the source processor, such that the second call includes the information response. Systems and methods consistent with the present invention may also end the second call, such that ending terminates a synchronous communication between the destination processor and the source processor. Additionally, systems and methods consistent with the present invention may provide asynchronously the information response.","Additional features and advantages of the invention will be set forth in part in the description which follows and in part will be obvious from the description, or may be learned by practice of the invention. The objectives and advantages of the invention may be realized and attained by the system and method particularly described in the written description and claims hereof as well as the appended drawings.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention, as described. Further features and\/or variations may be provided in addition to those set forth herein. For example, the present invention may be directed to various combinations and subcombinations of the disclosed features and\/or combinations and subcombinations of several further features disclosed below in the detailed description.","Reference will now be made in detail to the invention, examples of which are illustrated in the accompanying drawings. Wherever possible, the same reference numbers will be used throughout the drawings to refer to the same or like parts.","Systems and methods consistent with the present invention provide asynchronous messaging.  shows an exemplary system  for providing asynchronous communications through a synchronous communication mechanism.","Referring to , the system  includes a pricing adaptor , a source processor , a destination processor , a pricing engine , and one or more communication channels -.","In one embodiment, when an application (e.g., a server application) requests price information, the application uses the pricing adaptor  to interface to a communication mechanism (or protocol) through which the price information is obtained. The pricing adaptor  sends the price request to a source processor  through communication channel . The source processor  receives the price request, processes the price request, and makes a first call through communication channel  to the destination processor . The destination processor  receives the price request and ends the first call by sending a temporary response to the source processor  through the communication channel . By sending the temporary response, the first call ends, releasing that first call and its corresponding connection(s) through communication channel . When the first call ends, other calls can utilize that connection. Unlike past approaches where a call would occupy a connection until the destination processor  provides a response in the form of a price result to the source processor  (i.e., a synchronous call and its corresponding response), systems and methods consistent with an embodiment of the present invention close (or terminate) the first call while the destination processor processes the price request, thus freeing the connection for other price requests.","The destination processor  processes the price request received from the source processor  and sends the price request to the pricing engine . For example, in one embodiment, the pricing engine  determines a price result for property, such as a residential property. When the pricing engine  calculates the price result, the destination processor  makes a second call to the source processor  with the determined price. The source processor  receives the price result and then sends a response to end the second call, so that the connection occupied by the second call is open to other price requests. The source processor  then sends the price result (received from the destination processor ) to the pricing adaptor . The pricing adaptor  then sends the price to the application that originated the price request.","The pricing adaptor  may include one or more processors that are capable of interfacing with the source processor  and one or more higher layer applications (also referred to herein as applications or service applications). For example, the service application (not shown) may process mortgage loans. While processing mortgages, the service application may seek a price from a remote application that provides pricing information. When that is the case, the pricing adaptor  may include a local procedure for the service application, which makes a call to that procedure requesting a price. The pricing adaptor  may then format the price request before sending the price request to the pricing engine  through the source processor , destination processor , and communication channels -.","In the embodiment depicted in , the pricing adaptor  may include an application-programming interface that permits price requests on residential real estate (homes) to be made by a service application. For example, the pricing adaptor  may request from the pricing engine  (described in additional detail below) the price of one or more residential properties (homes). When a request is made by the service application, the pricing adaptor  receives the price request from the service application and adapts that price request so that it is compatible with the application-programming interface. The pricing adaptor  may adapt the price request by, for example, determining an XML (etensible arkup anguage) message with a corresponding procedure call and parameters for that procedure.","The pricing engine  may include one or more processors that are capable of interfacing with the destination processor  and one or more service applications. For example, the service application (not shown) interfacing with the pricing engine  may include an application (or processor) that determines residential property prices based on, among other things, street address. The pricing engine  may include an application-programming interface that enables a processor, such as the destination processor , to make price requests and receive a price result.","Communication channels - may include, alone or in any suitable combination a telephony-based network, a local area network (LAN), a wide area network (WAN), a dedicated intranet, the Internet, a wireless network, or a bus. Further, any suitable combination of wired and\/or wireless components and systems may be incorporated into the communication channels. Although the communication channels are depicted in  as bi-directional, a skilled artisan would recognize that unidirectional communication links may be used instead.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1B","FIG. 1B"],"b":["1500","1950","1400","1300","1200","1100","1300","1500","1600","1610","1650","1300","1200","1800","1100","1200","1850","1200","1910","1200","1900","1900","1300","1300","1950","1300","1550","1400"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 1A"],"b":["2000","1400","1300","1200","1100","1300","2000","2050","2200","2500","2300"]},"The output module  includes a display , a printer , and a network interface . The network interface  enables the computer  to communicate through the communication channels -.","The input module  of  may be implemented with a variety of devices to receive a user's input and\/or provide the input to the data processor . Some of these devices (not shown) may include, for example, a network interface card, a modem, a keyboard, a mouse, and an input storage device.","Although  illustrates only a single data processor , computer  may alternatively include a set of data processors. The data processor  may also include, for example, one or more of the following: one or more central processing units, a co-processor, memory, registers, and other data processing devices and systems as appropriate.","The storage module  may be embodied with a variety of components or subsystems capable of providing storage including, for example, a hard drive, an optical drive, a general-purpose storage device, a removable storage device, and\/or memory. Further, although storage module  is illustrated in  as being separate or independent from data processor , the storage module  and data processor  may be implemented as part of a single platform or system.","In one embodiment, the source processor  includes a processor, such as computer , that processes the pricing request from the pricing adapter  using a synchronous messaging mechanism, such as the imple bject ccess rotocol (SOAP). SOAP is commercially available, and described in Simple Object Access Protocol (SOAP) 1.1 World Wide Web Consortium (W3C), 2000, which is incorporated by reference herein in its entirety. Like the source processor , the destination processor  may also include one or more processors, such as computer , and a synchronous messaging mechanism (e.g., SOAP).",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIG. 3"],"b":["3000","3050","3100","3200","3900","1151"]},"The pricing adaptor  is implemented as described above with respect to . In one embodiment, the pricing adaptor  also interfaces with a service application that requests price information, forms a price request in XML format, and sends the XML formatted price request to the source processor . XML is well known by those of ordinary skill and commercially available from various vendors. Although XML is described herein, XML is just exemplary and is in no way limiting since other approaches can be used instead.","The source processor  includes a SOAP wrapper module  that receives an XML message with the price request and wraps (or encapsulates) the XML message in a SOAP message. The SOAP wrapper module  also assigns a unique identifier to the price request, and assigns a time out value to that price request. The SOAP wrapper module  may also suppress any vendor specific SOAP features or capabilities, which are not supported by standard SOAP. For example, class \u201corg.apache.soap.rpc.Response\u201d is an Apache implementation class that is used to store values returned by the SOAP call. The SOAP Wrapper class hides that implementation class (unique to Apache) and thus provides a common, generic API (application programming interface) to upper level applications.","Moreover, the source processor  may include a SOAP library module  capable of establishing a call to another processor, such as the destination processor . The call may be in the form of a SOAP message that uses RPC, which is directly supported by SOAP, for messaging. The SOAP library module  may also receive the price request from the SOAP wrapper module .","The source processor  may also include an XML parser module  that reads and writes XML messages, a deployment descriptor module  that configures the source processor  to provide asynchronous messaging, and a WSDL file module  that identifies any procedures that maybe called by other processors (or applications). Furthermore, the source processor  may include a SOAP listener module  that listensfor the message address of the source processor , receives messages, and sends responses through network .","The destination processor  includes a SOAP library module , a SOAP listener module , and an object module .","The SOAP library module  may include one or more processors for determining a SOAP message, such as SOAP RPC, and one or more application programming interfaces. For example,  depicts a low level API SOAP server  that dispatches a price request through the object module  and a high level API SOAP client  that is invoked by the object module  to establish a SOAP RPC call with the source processor , so that the price result can be sent to the source processor .","In the embodiment depicted in , the destination processor also includes a SOAP serializer , a WSDL reader , and a SOAP mapper . The SOAP serializer  converts programming language data types to XML tags and vice versa. The WSDL reader  parses the WSDL file provided by a SOAP service and extracts the detailed interface information used to invoke the SOAP service. The SOAP mapper  maps complex data types to and from XML tags.","The object module  includes a threading model for establishing connections between processors (and\/or processes), a context module for defining the run-time (or execution environment), a security module, an asynchronous object execution module for executing modules on the destination processor , and a reference module for linking to an object on an out-of-process server. In one embodiment, the object module  is implemented using the COM+ component module, which is known and commercially available. When COM+ is used, other features such a registration database for storing metadata may be included in the object module . Although  depicts only a single object module , one of ordinary skill in the art would recognize that object module  may include a plurality of modules.","The destination processor  may also include a database  and a message queue module . The database  may include storage and\/or memory for storing messaging, such as price requests and corresponding responses. The message queue module  enables an application to post a message and other applications to subscribe to any message postings. When a message is posted to the message queue module , the arrival of the message triggers any subscribing applications to process the received message.","The pricing engine  is implemented as described above with respect to . In one embodiment, the pricing engine  receives price requests for one or more corresponding residential properties. Each price request may include the street address for the property. The pricing engine  processes the request and then determines price result (or a price estimate) for the residential property contained within the price request. The pricing engine  may then provide the price result in XML form, which is received by the destination processor  and reformatted into a SOAP message request.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIGS. 3 and 4"],"b":["3100","3050","4050","4100","3200","4150","3200","4200","3100","4250","3900","3200","4300","4350","3100","4400","4450","3100","3050","4500","4050","4500"]},"To begin, the pricing adaptor  constructs an XML message containing the details of the price request. The price request may originate from a service application, such as a web server that provides pricing information to Internet users or to legacy (or mainframe) applications. The source processor  may then receive the price request (step ).","In one embodiment, the source processor  includes a SOAP wrapper module  that receives the XML message containing the price request (step ). The SOAP wrapper module  may then form a SOAP request from the XML message (step ). The SOAP wrapper module  may also add to the SOAP request a unique request identification (ID) and a timeout value. In one embodiment, the request ID is used to keep track of the original price request from the service application and its corresponding SOAP request(s). The request ID thus enables the source processor  to match up the price result (from the pricing engine ) with its originating SOAP request(s). When multiple price requests are made by the source processor , the SOAP wrapper module  assigns an ID to each price request. The timeout value may be an upper time limit. After the timeout value is reached, the price adaptor  and\/or the source processor  will no longer wait for a response (i.e., a price result) from the pricing engine  and\/or destination processor . When a timeout limit is reached for a price request, the source processor  terminates any processes associated with that price request, such as freeing the request ID so that another SOAP request can use the ID.","Moreover, as noted above, the SOAP wrapper module  may hide (or suppress) any vendor unique features of SOAP. For example, the source processor  may implement a vendor-specific version of the SOAP protocol, such as Apache SOAP. In that case, the SOAP wrapper module  would suppress that unique vendor feature, so that the destination processor  can operate using any other vendor's version of SOAP.","The SOAP wrapper module  then sends the SOAP request to the SOAP library module . The SOAP library module  then sends out the SOAP request with three parameters: price request information, request ID, and timeout value (step ). The SOAP request is a synchronous remote procedure call (RPC) that remains open until a response is received. As such, the source processor  sends the SOAP request to initiate a first call to the destination processor . The first call remains open until a SOAP response is received. In one embodiment, the SOAP request may include any information that enables the pricing engine  to determine a price, such as a description of a property for which price information is requested, street address, number of rooms, and\/or number of bedrooms.","At the destination processor , the SOAP request is received (step ). The connection associated with the first call remains open until a response is received. This prevents the connection, such as an HTTP connection (or port), from being used by another call.","In one embodiment, the destination processor  may implement a SOAP server with a different implementation, i.e., a different vendor's version of SOAP. As noted above, the SOAP wrapper module  may suppress any vendor-specific features of SOAP, which enables the destination processor  to implement another vendor's version of SOAP. For example, the destination processor  may include a SOAP listener module  that listens for SOAP requests destined for that destination processor using a vendor-specific version of SOAP, such as Microsoft (MS) SOAP 2.0, while the source processor  may use another vendor's version of SOAP, such as Apache SOAP.","The SOAP listener module  at the destination processor  may also dispatch (or send) the received SOAP request to the SOAP server module  and the object module(s) . The responsible object module  saves the SOAP request to a database  and posts the SOAP request in a message queue . Once posted in the message queue , the object module  may trigger and thus process the SOAP request. In one embodiment, the object module , which processes the SOAP request, may break up the request into multiple, smaller SOAP requests to facilitate processing by the pricing engine .","When the SOAP request is saved by the database  and\/or put in queue , the destination processor  (or SOAP server ) responds to the source processor's SOAP request with a temporary response (step ). In one embodiment, as soon as the SOAP request is successfully saved to the database  and\/or put in the queue , the SOAP server module  at the destination processor  returns a temporary value of \u201c0\u201d. The temporary value is essentially a fake (or pseudo) SOAP response to the corresponding SOAP request. When the source processor  receives the temporary value contained in the SOAP response, the source processor  terminates the first call corresponding to SOAP request (or response), releasing the connection for other processors.","The destination processor  continues to process the pricing request. The object module  then sends the price request (at least the pricing information in the original SOAP Request) to the pricing engine  for processing. As noted above, when the price request includes information for more than one property, the object module  parses the price request into multiple individual price requests with each request corresponding to a separate property.","The pricing engine  may then calculate the price and send the price to the object module . When multiple home information are included in the price request, the object module  may then assemble the prices for all of the individually priced homes and then construct a single message, such as an XML message, with the price information for all of the properties.","Before sending the price result, the SOAP client  may look up a location (or address) for the source processor . For example, the WSDL (eb ervices escription anguage) reader  may read a WSDL file that describes an interface, such as an API, at the source processor . The WSDL then provides the location (or name) of the API to SOAP client module , so that the SOAP client module  may make a SOAP request (or procedure call) to that API.","The destination processor  forms a SOAP message with the price result, the request ID (i.e., the original request ID created by the SOAP wrapper module  in step  above), and the name of the API at the source processor  (step ). The SOAP message is sent to the source processor  to initiate a second call (step ). In one embodiment, the destination processor  may not provide a price but instead request additional information before calculating a price result. When that is the case, the pricing adaptor  may obtain any additional information from a database (not shown) and then make another SOAP call to the destination processor  (also referred to as a ping-pong message) with the additional requested information using the same request ID.","The SOAP listener module  at the source processor  receives the SOAP request received from the destination processor ; parses the SOAP request (e.g., pulls out the price result information and leaves other SOAP fields); and then sends the request to the SOAP wrapper module .","When the price is received by the SOAP wrapper module , a return value of \u201c0\u201d is returned to the SOAP server module  at the destination processor  (step ). The SOAP wrapper module  at the source processor  may then forward the price result to the pricing adaptor , which passes the price result to a service application (step ).","In one embodiment, to invoke asynchronous messaging using SOAP RPC, a SOAP Interface API method name is used. For example, when sending pricing requests from the pricing adaptor  to the pricing engine , the SOAP Interface API method name may include \u201cCalculatePrice\u201d with parameters such as \u201crequested\u201d, \u201ctimeout,\u201d and \u201cinputData.\u201d The method name \u201cCalculatePrice\u201d may be called by any processor that seeks a price (i.e., makes a price request). The parameter \u201crequestId\u201d is generated by the source processor  and sent to the pricing engine . The pricing engine returns the \u201crequestId\u201d parameter back such that the source processor  can match the \u201crequested\u201d with the original price request. The parameter \u201ctimeout\u201d is a value set by the source processor  to indicate the maximum amount of time before the price request expires. As noted above, the source processor  times out after the timeout period and terminates any other corresponding processes. The \u201cinputData\u201d string is an XML string, and may include information required by the pricing engine to calculate price (e.g., a property description).","The destination processor  may also invoke an API to provide asynchronous messaging using SOAP RPC. For example, when providing the price result to the source processor , the destination processor  invokes an API named \u201cinvokeServices\u201d, which is described in WSDL file . The API \u201cinvokeServices\u201d, includes three parameters: \u201crequestId\u201d, \u201cmessageName\u201d, and \u201cinputData\u201d. The parameter \u201crequestld\u201d is similar to the above \u201crequestld.\u201d The parameter \u201cmessageName\u201d corresponds to the original price request made during the first SOAP call (or request). The \u201cmessageName\u201d also identifies whether the message is a final price result or an intermediate result, such as a ping-pong message requesting additional information. The parameter \u201cinputData\u201d string is an XML string with, for example, the price result.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 5","FIG. 5","FIG. 5"],"b":["5000","5050","5100","1151","5200","5900","5100","5105","5110","5200","5205","5210","5151","5162","1151"]},"The source and destination processors ,  are similar to the source and destination processor described above with respect to .  depicts that the source processor  includes a SOAP interface . The SOAP interface  may be called by other processors. In one embodiment, the SOAP interface may be called through an API, such as the \u201cCalculate Price\u201d API described above. On the other hand, the destination processor  includes a SOAP interface , which is functionally similar to the interface . SOAP Interface  may also be callable through an API, such as the \u201cinvoke Services\u201d described above. The different APIs permit each interface to operate using a different vendor's version of SOAP, eliminating the need for the same vendor specific version of SOAP to be implemented at the source and destination processors.","Referring to , the source processor  receives an XML message with a price request (step ); forms a SOAP request (step ); and sends the SOAP request  to the destination processor  (step ). There, the destination processor  receives the SOAP request  (step ) and ends the call by sending a SOAP response , such as a \u201c0\u201d (or null) response, to the source processor  (step ).  shows that the pricing adaptor  may make multiple price requests that result in multiple SOAP requests and responses -. Systems and methods consistent with an embodiment of the present invention end a call by sending a temporary SOAP response even though the destination processor  has not determined a price result for the source processor . As such, the connection occupied by the call (e.g., , ) is open and available for other calls. In the embodiment depicted in , multiple calls for prices can be processed without needlessly occupying the network  and\/or HTTP connections (or ports) on the source or destination processors , .","As described above with respect to , the destination processor  forwards the price request to the pricing engine , which determines a price result. The destination processor  then receives the price result from the pricing engine  (step ); forms a SOAP request with the price result (step ); and then makes a second call by sending the SOAP request  to the source processor  (step ). The source processor  ends that call  by sending a temporary response  (step ). Next, the source processor  sends the price result to the pricing adaptor  (step ). The other price requests that were provided by SOAP requests ,  are also processed to determine price results.","Although the description above refers to MS SOAP and Apache SOAP, a skilled artisan would recognize that other types of SOAP may be implemented instead. For example, one or more sides of the SOAP interface may be compatible with any other version of SOAP including Apache, MS, or LINUX versions.","The systems and methods disclosed herein may be embodied in various forms including, for example, a data processor, such as the computer  that also includes a database. Moreover, the above-noted features and other aspects and principles of the present invention may be implemented in various environments. Such environments and related applications may be specially constructed for performing the various processes and operations of the invention or they may include a general-purpose computer or computing platform selectively activated or reconfigured to provide the necessary functionality. The processes disclosed herein are not inherently related to any particular computer or other apparatus, and may be implemented by a suitable combination of hardware, software, and\/or firmware. For example, various general-purpose machines may be used with programs written in accordance with teachings of the invention, or it may be more convenient to construct a specialized apparatus or system to perform the required methods and techniques.","Systems and methods consistent with the present invention also include computer readable media that include program instruction or code for performing various computer-implemented operations based on the methods and processes of the invention. The media and program instructions may be those specially designed and constructed for the purposes of the invention, or they may be well known and available to those of ordinary skill in the computer software arts. Examples of program instructions include machine code, such as produced by a compiler, and files containing a high level code that can be executed by the computer using an interpreter.","Furthermore, although reference is made herein to prices in its broadest sense systems and methods consistent with the present invention may provide messaging for any type of information.","Turning to the nomenclature of the specification, the detailed description above is represented largely in terms of processes and symbolic representations of operations performed by conventional computer components, including a central processing unit (CPU), memory storage devices for the CPU, and connected pixel-oriented display devices. These operations include the manipulation of data bits by the CPU, and the maintenance of these bits within data structures reside in one or more of the memory storage devices. Such data structures impose a physical organization upon the collection of data bits stored within computer memory and represent specific electrical or magnetic elements. These symbolic representations are the means used by those skilled in the art of computer programming and computer construction to most effectively convey teachings and discoveries to others skilled in the art.","For purposes of the above discussion, a process is generally conceived to be a sequence of computer-executed steps leading to a desired result. These steps generally require physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, compared, or otherwise manipulated. It is conventional for those skilled in the art to refer to these signals as bits, values, elements, symbols, characters, terms, objects, numbers, records, files, etc. However, these and similar terms should be associated with appropriate physical quantities for computer operations. These terms are merely conventional labels applied to physical quantities that exist within and during computer operation."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate various embodiments and aspects of the present invention and, together with the description, explain the principles of the invention. In the drawings:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 1B","FIG. 1A"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
