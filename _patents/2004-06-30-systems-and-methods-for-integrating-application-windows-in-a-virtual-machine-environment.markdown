---
title: Systems and methods for integrating application windows in a virtual machine environment
abstract: The present invention includes systems for and methods of visually integrating application windows in a virtual machine environment. Embodiments of the present invention are directed to a system for and method of visually integrating application windows of host and guest operating system in a virtual machine environment in order to reduce difficulties that the users of computers experience in navigating between applications in a virtual machine environment. The present invention accomplishes this by using a composite window list in the virtual machine monitor (VMM) to manage the configuration, the focus, the geometry, the Z-order of the windows across guest and host operating systems, and the arrangement of doppelgangers (virtual application windows, in this case) in a way that allows host and guest application windows to appear integrated in a single display window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996785&OS=07996785&RS=07996785
owner: Microsoft Corporation
number: 07996785
owner_city: Redmond
owner_country: US
publication_date: 20040630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This application is related by subject matter to the inventions disclosed in the following commonly assigned application: U.S. patent application Ser. No. 10\/883.491, filed on Jun. 30, 2004, entitled \u201cSYSTEMS AND METHODS FOR PROVIDING SEAMLESS SOFTWARE COMPATIBILITY USING VIRTUAL MACHINES,\u201d the entirety of which is hereby incorporated by reference herein.","The present invention generally relates to the field virtual machines (also known as \u201cprocessor virtualization\u201d) and software that executes in a virtual machine environment. More specifically, the present invention is directly to integration of application windows from host and guest operating systems in a single display.","Computers include general purpose central processing units (CPUs) that are designed to execute a specific set of system instructions. A group of processors that have similar architecture or design specifications may be considered to be members of the same processor family. Examples of current processor families include the Motorola 680X0 processor family, manufactured by Motorola, Inc. of Phoenix, Ariz.; the Intel 80X86 processor family, manufactured by Intel Corporation of Sunnyvale, Calif.; and the PowerPC processor family, which is manufactured by Motorola, Inc. and used in computers manufactured by Apple Computer, Inc. of Cupertino, Calif. Although a group of processors may be in the same family because of their similar architecture and design considerations, processors may vary widely within a family according to their clock speed and other performance parameters.","Each family of microprocessors executes instructions that are unique to the processor family. The collective set of instructions that a processor or family of processors can execute is known as the processor's instruction set. As an example, the instruction set used by the Intel 80X86 processor family is incompatible with the instruction set used by the PowerPC processor family. The Intel 80X86 instruction set is based on the Complex Instruction Set Computer (CISC) format. The Motorola PowerPC instruction set is based on the Reduced Instruction Set Computer (RISC) format. CISC processors use a large number of instructions, some of which can perform rather complicated functions, but which require generally many clock cycles to execute. RISC processors use a smaller number of available instructions to perform a simpler set of functions that are executed at a much higher rate.","The uniqueness of the processor family among computer systems also typically results in incompatibility among the other elements of hardware architecture of the computer systems. A computer system manufactured with a processor from the Intel 80X86 processor family will have a hardware architecture that is different from the hardware architecture of a computer system manufactured with a processor from the PowerPC processor family. Because of the uniqueness of the processor instruction set and a computer system's hardware architecture, application software programs are typically written to run on a particular computer system running a particular operating system.","Computer manufacturers want to maximize their market share by having more rather than fewer applications run on the microprocessor family associated with the computer manufacturers' product line. To expand the number of operating systems and application programs that can run on a computer system, a field of technology has developed in which a given computer having one type of CPU, called a host, will include an emulator program that allows the host computer to emulate the instructions of an unrelated type of CPU, called a guest. Thus, the host computer will execute an application that will cause one or more host instructions to be called in response to a given guest instruction. Thus the host computer can both run software design for its own hardware architecture and software written for computers having an unrelated hardware architecture. As a more specific example, a computer system manufactured by Apple Computer, for example, may run operating systems and program written for PC-based computer systems. It may also be possible to use an emulator program to operate concurrently on a single CPU multiple incompatible operating systems. In this arrangement, although each operating system is incompatible with the other, an emulator program can host one of the two operating systems, allowing the otherwise incompatible operating systems to run concurrently on the same computer system.","When a guest computer system is emulated on a host computer system, the guest computer system is said to be a \u201cvirtual machine\u201d as the guest computer system only exists in the host computer system as a pure software representation of the operation of one specific hardware architecture. The terms emulator, virtual machine, and processor emulation are sometimes used interchangeably to denote the ability to mimic or emulate the hardware architecture of an entire computer system. As an example, the Virtual PC software created by Connectix Corporation of San Mateo, Calif. emulates an entire computer that includes an Intel 80X86 Pentium processor and various motherboard components and cards. The operation of these components is emulated in the virtual machine that is being run on the host machine. An emulator program executing on the operating system software and hardware architecture of the host computer, such as a computer system having a PowerPC processor, mimics the operation of the entire guest computer system.","The emulator program acts as the interchange between the hardware architecture of the host machine and the instructions transmitted by the software running within the emulated environment. This emulator program may be a host operating system (HOS), which is an operating system running directly on the physical computer hardware. Alternately, the emulated environment might also be a virtual machine monitor (VMM) which is a software layer that runs directly above the hardware and which virtualizes all the resources of the machine by exposing interfaces that are the same as the hardware the VMM is virtualizing (which enables the VMM to go unnoticed by operating system layers running above it). A host operating system and a VMM may run side-by-side on the same physical hardware.","Typically, within the host computer system which is emulating one or more virtual machines (VMs), there is no direct mechanism in the host environment, such as an icon on the desktop, to launch or in some way interact with applications that are running on any given VM. Rather, a VM is presented to the user on the host computer system in a separate window that displays the desktop of the guest OS in its native environment, whether it is a legacy or modem OS. Consequently, the user sees a completely separate desktop (e.g., with a separate task bar, \u201cMy Computer,\u201d Start Menu) from that of the host computer system. Using this separate VM window, the user may navigate within the guest OS to launch any VM application which, when launched, is likewise displayed in the same VM window. If the host computer system is hosting multiple VMs, the desktop of each VM will appear in a separate window. As a result, in order for the user to interact with each VM, the user must navigate from one VM window to the next. It is cumbersome for the user to navigate from the host desktop to one or more separate VM desktops to invoke host or VM applications simultaneously, as the user must continuously swap between one window and another and must keep track of which application is running in which window. What is needed is a mechanism for invoking one or more host or guest OS applications and displaying them alongside each other in a single display, rather than in a separate VM window, and thereby provide the user with an improved, more seamless method of interacting with one or more VMs resident on a host computer system.","The present invention includes systems for and methods of integrating application windows in a virtual machine environment.","Embodiments of the present invention are directed to a system for and method of integrating application windows of a host and guest operating system in a virtual machine environment in order to reduce difficulties that users of computers experience when navigating between applications in a virtual machine environment. The present invention accomplishes this by using a composite window list managed by the VMM to manage the configuration, the focus, the geometry, the Z-order of the windows across guest and host OSes, and the arrangement of doppelgangers (virtual application windows, in this case) in a way that allows host and guest application windows to appear in a single display window. This creates a much improved user interface for the users of virtual machines, because there is no longer any need for the user of a virtual machine to know whether a particular application that the user wants to run is operating in the host or guest operating system.","The inventive subject matter is described with specificity to meet statutory requirements. However, the description itself is not intended to limit the scope of this patent. Rather, the inventor has contemplated that the claimed subject matter might also be embodied in other ways, to include different steps or combinations of steps similar to the ones described in this document, in conjunction with other present or future technologies. Moreover, although the term \u201cstep\u201d may be used herein to connote different elements of methods employed, the term should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.","Computer Environment","Numerous embodiments of the present invention may execute on a computer.  and the following discussion is intended to provide a brief general description of a suitable computing environment in which the invention may be implemented. Although not required, the invention will be described in the general context of computer executable instructions, such as program modules, being executed by a computer, such as a client workstation or a server. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand held devices, multi processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","As shown in , an exemplary general purpose computing system includes a conventional personal computer  or the like, including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start up, is stored in ROM . The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs) and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite disk, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers. The exemplary system of  also includes a host adapter , Small Computer System Interface (SCSI) bus , and an external storage device  connected to the SCSI bus .","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used. Moreover, while it is envisioned that numerous embodiments of the present invention are particularly well-suited for computerized systems, nothing in this document is intended to limit the invention to such embodiments.","Virtual Machines","From a conceptual perspective, computer systems generally comprise one or more layers of software running on a foundational layer of hardware. This layering is done for reasons of abstraction. By defining the interface for a given layer of software, that layer can be implemented differently by other layers above it. In a well-designed computer system, each layer only knows about (and only relies upon) the immediate layer beneath it. This allows a layer or a \u201cstack\u201d (multiple adjoining layers) to be replaced without negatively impacting the layers above said layer or stack. For example, software applications (upper layers) typically rely on lower levels of the operating system (lower layers) to write files to some form of permanent storage, and these applications do not need to understand the difference between writing data to a floppy disk, a hard drive, or a network folder. If this lower layer is replaced with new operating system components for writing files, the operation of the upper layer software applications remains unaffected.","The flexibility of layered software allows a virtual machine (VM) to present a virtual hardware layer that is in fact another software layer. In this way, a VM can create the illusion for the software layers above it that said software layers are running on their own private computer system, and thus VMs can allow multiple \u201cguest systems\u201d to run concurrently on a single \u201chost system.\u201d",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 2"],"b":["94","92","94","96","98","100","98","94","100","90","100","92"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3A","b":["104","102","104"]},"Alternately, a virtual machine monitor, or VMM, software layer \u2032 may be running in place of or alongside a host operating system \u2033, the latter option being illustrated in . For simplicity, all discussion hereinafter (specifically regarding the host operating system ) shall be directed to the embodiment illustrated in ; however, every aspect of such discussion shall equally apply to the embodiment of  wherein the VMM \u2032 of  essentially replaces, on a functional level, the role of the host operating system  of  described herein below.","Referring again to , above the host OS  (or VMM \u2032) are two virtual machine (VM) implementations, VM A , which may be, for example, a virtualized Intel 386 processor, and VM B , which may be, for example, a virtualized version of one of the Motorola 680X0 family of processors. Above each VM  and  are guest operating systems (guest OSes) A  and B  respectively. Above guest OS A  are running two applications, application A  and application A , and above guest OS B  is application B . Above host OS  is application H .","Visual Integration",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 4A","FIG. 3B","FIG. 4B","FIG. 4A"]},"In regard to , guest OS A  further includes a virtual video display , which further includes a window G.1 and a window G.2 (corresponding to the display windows for applications A and A respectively), a desktop icon , and a menu bar ; and a guest window list . Thus virtual video display  is the video display of application windows within guest OS A  such that, if guest OS A  was operating in a traditional computing environment (not VM), virtual video display  would be what the user of the computing device would see on monitor  (shown in ) when operating computer  (shown in ), and window G.1 and window G.2 are application windows that operate within guest OS A . In one example referring to , window G.1 represents application A , which is running MS Internet Explorer\u2122 and window G.2 represents application A , which is running MS Access\u2122. Desktop icon  represents the totality of all desktop icons available within guest OS A . In one example, desktop icon  includes a \u201crecycle bin\u201d icon, which is used to delete files, a \u201cMy Documents\u201d icon, which provides a link to a directory where documents can be found more easily, and a plurality of icons that launch frequently used applications, such as, for example, MS Internet Explorer, MS Word\u2122, MS Excel\u2122, MS Outlook\u2122, Corel's WordPerfect\u2122, or IBM's Lotus Notes\u2122. Menu bar  is a menu bar that provides for navigational functionality within guest OS A . In one example, menu bar  includes a \u201cStart\u201d button (not shown), a plurality of application buttons (not shown), and some icons that relay the status information of guest OS A  (such as the current time and the status of various applications). The start button on menu bar  provides a way for the user to launch new applications or utilities within guest OS A . The application buttons on menu bar  provide a way for the user of the system to bring application windows, such as G.1 and G.2, to the forefront of virtual video display  with a single mouse-click. In one example, menu bar  is the \u201ctask bar\u201d in MS Windows XP\u2122.","Guest window list  is a file that contains information related to the arrangement of application windows (such as windows G.1 and G.2) within guest OS A . Examples of the types of information in guest window list  are the geometrical properties associated with the application windows, such as the size of the window; the X-Y position of the window within virtual video display ; the Z position of the window, which includes information regarding the \u201cfocused\u201d application within guest OS A ; and the adornments of the window (such as command buttons for minimize, maximize, and exit, as well as the design of the window's border or frame). The focused application is the software application that has the \u201cfocus\u201d of the \u201ccursor\u201d (for end-user input devices). In one example, window G.1 is application A  running MS Word and the focus of the cursor is on window G.1. In this example, any keystrokes made by an end-user are recorded in MS Word, and these key strokes are not recorded nor have any impact upon other windows, such as window G.2.","Referring again to , Host OS \u2033 further includes a host video display , which further includes a windows H.0 and H.1, a desktop icon , and a menu bar ; and a host window list . Window H.0 is the logical display for Guest OS A  running on VM A  (the contents of which would comprise the output of virtual video display  which, again, is the \u201cdesktop\u201d display for the VM). Window H.1 represents application H , which, for example, may be running MS Office Project 2003\u2122. Host window list  contains information related to the arrangement of application windows (such as windows H.0 and H.1) within host OS \u2033. However, while host video display  of the host OS \u2033 is certainly functional, it would be advantageous to an end-user if the application windows G.1 and G.2 could be \u201cpromoted\u201d out of the limited space of the window H.0 in the host video display .","To this end, and as illustrated in , various embodiments of the present invention comprise a composite window list  and a composite video display \u2032, which further includes a window G.1\u2032, a window H.1\u2032, a window G.2\u2032, and a window H.0\u2032, as well as a desktop icon \u2032, and a menu bar \u2032. These various embodiments of the present invention combine information from guest window list  with the host window list  and creates composite window list  for display on composite video display \u2032. According to the present invention, VMM \u2032 utilizes composite window list  to manage windows G.1\u2032, H.1\u2032, G.2\u2032, and H.0\u2032 across host OS \u2033 and guest OS A . In one example, as shown in , the Z-order of windows in VMM \u2032 is window G.1\u2032, window H.1\u2032, window G.2\u2032, and window H.0\u2032. Continuing with this example, if the user of computer  clicks on window G.2\u2032 within composite video display \u2032 by using mouse  (shown in ) and thereby brings window G.2\u2032 into focus, the Z-order of windows in composite window list  is altered to reflect this, and these changes are sent from composite window list  to guest window list . Details of the method of operating are described in reference to  below.","Desktop icon \u2032 and menu bar \u2032 represent the icons and menu bar available to the user of computer  according to the host OS \u2033. In one example, host OS \u2033 utilizes desktop icon  and menu bar  from host OS \u2033, although the menu bar \u2032 would also reflect the additional windows that were promoted up form the virtual video display .","For certain embodiments of the present invention, and in regard to composite window list , the window adornments of host OS \u2033 are used to adorn all windows (including those operating on different OSes, such as window G.1\u2032 or G.2\u2032) for display on composite video display \u2032 (which may be different from the adornments shown for the sub-window in Window H.0). By utilizing the host's adornments, the look and feel of all windows operating within the host OS environment are consistent with a user's experience, that is, using a computer in a traditional (non-virtual machine) environment. For certain of these embodiments, the methodology is employed directly by the virtual machine monitor (VMM) by interacting with the host operating system to open a new window in the host operating system and filling that window with the contents of the corresponding window in the guest operating system. The VMM then manages both the content of the promoted window as well as the VM display in the Window H.0\u2032, while the host operating system manages its windows (including the promoted windows which, to the host OS, are indistinguishable from other windows) in its normal manner. For other embodiments, the methodology may be employed by the host operating system that provides an application programming interface to the VMM, VM, and\/or guest OS specifically for this purpose. For other additional embodiments, and specifically for those where a VM is provided directly by a host OS (such as illustrated in ), the host OS performs all functions.","For certain alternative embodiments of the present invention, the promoted windows may utilize the window adornments of the guest operating system that is running the application. More specifically, when these applications are running in VMM \u2032, windows G.1\u2032 and G.2\u2032 have the adornments created by guest OS A , while windows H.0\u2032 and H.1\u2032 has the adornments created by host OS \u2033. For certain of these embodiments, the methodology is employed directly by the virtual machine monitor (VMM) by interacting with the host operating system to open a new, unadorned window (a mere shell) in the host operating system and filling that window with both contents and in-window adornments representative of the adornments found in a corresponding window in the guest operating system. The VMM then manages both the content of the promoted window as well as adornments in same, as well as manages the VM display in the Window H.0\u2032, while the host operating system manages its windows (including the promoted windows which, to the host OS, are indistinguishable from other windows, even though these windows will be a mere shell without the typical host OS adornments) in its normal manner. For other embodiments, the methodology may be employed by the host operating system that provides an application programming interface to the VMM, VM, and\/or guest OS specifically for this purpose. For other additional embodiments, and specifically for those where a VM is provided directly by a host OS (such as illustrated in ), the host OS performs all functions.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["146","148","104","104","20","150","104","152","104","20","42","142","146","156","146","154","154","104","20","42","146","164","146","150","156","104","104","1","116","112","146","160","1","121","104","146","158","158","104","104","160","104","112","152","146","164","146","162","162","104","112","152","164","104","144","166","104","136","104","128","112","168","104","20","42","142","20","104","104","146","146","150"]},"Conclusion","The various systems, methods, and techniques described herein may be implemented with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computer will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of the present invention may also be embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, a video recorder or the like, the machine becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to perform the indexing functionality of the present invention.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating there from. For example, while exemplary embodiments of the invention are described in the context of digital devices emulating the functionality of personal computers, one skilled in the art will recognize that the present invention is not limited to such digital devices, as described in the present application may apply to any number of existing or emerging computing devices or environments, such as a gaming console, handheld computer, portable computer, etc. whether wired or wireless, and may be applied to any number of such computing devices connected via a communications network, and interacting across the network. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific hardware\/software interface systems, are herein contemplated, especially as the number of wireless networked devices continues to proliferate. Therefore, the present invention should not be limited to any single embodiment, but rather construed in breadth and scope in accordance with the appended claims.","Finally, the disclosed embodiments described herein may be adapted for use in other processor architectures, computer-based systems, or system virtualizations, and such embodiments are expressly anticipated by the disclosures made herein and, thus, the present invention should not be limited to specific embodiments described herein but instead construed most broadly. Likewise, the use of synthetic instructions for purposes other than processor virtualization are also anticipated by the disclosures made herein, and any such utilization of synthetic instructions in contexts other than processor virtualization should be most broadly read into the disclosures made herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 4A","FIG. 3B"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
