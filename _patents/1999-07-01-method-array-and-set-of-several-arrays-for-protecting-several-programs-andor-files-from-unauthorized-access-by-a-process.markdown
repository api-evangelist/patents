---
title: Method, array and set of several arrays for protecting several programs and/or files from unauthorized access by a process
abstract: An area and a process file are assigned to each program to be protected. The process or processes that may run in the corresponding area is or are stored in a process file. When the program is running, a process attempting to access the program is checked to confirm whether the accessing process is included in the corresponding process file. The accessing process is executed only if it is included in the process file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07120763&OS=07120763&RS=07120763
owner: Siemens Aktiengesellschaft
number: 07120763
owner_city: Munich
owner_country: DE
publication_date: 19990701
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The invention pertains to a method, an array and a set of several arrays for protecting several programs from unauthorized access by a process.","A method and an array for protecting several programs from unauthorized access by a user is known from [1] or [6]. In the method according to [1], the access protection for a program is realized in that an access authorization file is assigned to each user of a system. If a process attempts to access a program, a check is made to confirm whether the user who started the process has the right to access the program in question. The access is allowed only if the process was started by an authorized user, who is thus equipped with the access rights.","Known from [2] is a so-called virus scanner. A virus scanner checks the stored, known sequence of data by means of which the program is realized. If a discrepancy from the known sequence is found, a message is sent to a user of the system that there is a possibility that the system contains a virus.","Also known from [1] is an operating system for a computer. The operating system known from [1] exhibits a variety of security gaps through which a hacker can endanger the integrity of programs that are executed by using the operating system.","A possible mechanism for endangering the protection of programs during the use of an operating system is also described in [5].","In [7], a computer system for the licensing of software is described.","The invention is thus based on the problem of protecting several programs and\/or several files from unauthorized access by a process when using an operating system that exhibits fundamental security gaps.","The problem is solved by the method and by the array in accordance with the features of the independent patent claims.","In a method for protecting several programs and\/or several files from unauthorized access by a process, each program and\/or each file to be protected is assigned an address space. In addition, each program and\/or each file to be protected is also assigned a process file, whereby the process or processes that may run in the address space in question is or are stored in a process file. During the running of a program and\/or a file to be protected, for a process that attempts to access the address space of the program and\/or the file to be protected, a check is made to confirm whether the accessing process is included in the corresponding process file. If the accessing process is included in the process file, the accessing process is started; otherwise the accessing process is not started.","In an additional method for protecting several programs and\/or several files from unauthorized access by a process, each program and\/or each file to be protected is assigned an address space. In addition, each program and\/or file to be protected is also assigned a process file, whereby the process or processes that may run in the address space in question is or are stored in a process file. During the running of a program and\/or a file to be protected, for a process that attempts to access the address space of the program and\/or a file to be protected, a check is made to confirm whether the accessing process is included in the corresponding process file. If the accessing process is included in the process file, the accessing process is continued; otherwise the accessing process is terminated.","An array for protecting several programs from unauthorized access by a process exhibits a processor that is set up in a way such that the following steps can be carried out:","an address space is assigned to each program and\/or each file to be protected,","a process file is assigned to each program and\/or each file to be protected,","the process or processes that may run in the address space in question is or are stored in a process file,","during the running of a program and\/or a file to be protected, for a process that attempts to access the address space of the program and\/or the file to be protected, a check is made to confirm whether the accessing process is included in the corresponding process file,","if the accessing process is included in the process file, the accessing process is started, and","otherwise the accessing process is not started.","A further array for protecting several programs from unauthorized access by a process exhibits a processor that is set up in a way such that the following steps can be carried out:","an address space is assigned to each program and\/or each file to be protected,","a process file is assigned to each program and\/or each file to be protected,","the process or processes that may run in the address space in question is or are stored in a process file,","during the running of a program and\/or a file to be protected, for a process that attempts to access the address space of the program and\/or the file to be protected, a check is made to confirm whether the accessing process is included in the corresponding process file,","if the accessing process is included in the process file, the accessing process is continued, and","otherwise the accessing process is terminated.","A set of several arrays and a server array which is connected with each array of the set of several arrays and which is to protect several programs from unauthorized access by a process are set up in a way such that each array exhibits a processor that is set up in such a way that the following steps can be carried out:","an address space is assigned to each program and\/or each file to be protected,","a process file is assigned to each program and\/or each file to be protected,","the process or processes that may run in the address space in question is or are stored in a process file,","during the running of a program and\/or a file to be protected, for a process that attempts to access the address space of the program and\/or the file to be protected, a check is made to confirm whether the accessing process is included in the corresponding process file,","if the accessing process is included in the process file, the accessing process is started or continued, and","otherwise an alarm signal is generated and sent to the server array,","and the server array exhibits a processor that is set up in such a way that a predetermined action is triggered in dependency on at least one received alarm signal.","Address space in this context is understood to mean a program area has one program assigned to it.","The invention closes several security gaps of the operating system described in [1].","Moreover, the particular program to be protected is protected against a procedural attack (attack on a process), e.g., against a Trojan horse.","In addition, a significant advantage of the invention is seen in the fact that with scalable effort, a defined degree of security can be assured for the program to be protected.","Through the set of several arrays, each of which is connected to the server array, local protection at the arrays is possible in such a way that in the event an attack is detected, an alarm signal is generated and sent to the server array in which a predetermined action is carried out centrally. That way, it is possible to discover local processes that are not known to the server array itself.","Preferred further developments of the invention arise from the dependent claims.","In a further development, to increase the level of security that can be achieved it is advantageous to form for at least a part of the processes included in a process file a unique identifying cryptographic value, whereby the value in question is contained in the process file. The accessing process's cryptographic value is formed, and the cryptographic values of the processes are compared with each other during the check.","The cryptographic value can be a digital signature. However, a general one-way function can also be formed by using a hash function.","In a further configuration, it is advantageous to forward, in a call mechanism for a function of an operating system core with which the programs are executed, a call of the accessing process to a checking function in which the check is carried out. An efficient and thus cost-effective realization of the invention is possible in this way.","The checking function can be integrated into the monitored address space as a dynamically integrated file, which results in the achieving of a further improvement in the protective effect.","A call of an accessing process can also be forwarded to a checking function that is integrated into the operating system core, whereby the check takes place in the checking function. The security of the protection can be further increased for the programs in this way.","A further increase in the achievable level of security can be assured if a protection program that is set up in such a way that the invention can be put into practice is stored encoded and is decoded at the start of the method. After the protection program has been decoded, its integrity can be checked, and the method is carried out only if the integrity of the protection program is assured. After the integrity test of the protection program, the integrity of all of the processes contained in the process files can be checked, and the method is carried out only if the integrity of the protection program is assured. After the integrity test of the processes, the integrity of the program to be protected can be checked, and the program should be executed only if the integrity of the protection program is assured.","The invention can be used advantageously in the operating system described in [1].","Although the embodiment that is explained below describes the protection of programs, protection of several files is also easily possible using the same procedure.","An embodiment of the invention is shown in the Figures and will be described in more detail below.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 3","b":["301","302","303","304","305","302","301","306","307","308","309","310","311"]},"The communications protocol used to transmit digital data is the TCP\/IP protocol (Transmission Control Protocol\/Internet Protocol).","The invention protects the first computer  against unauthorized accesses by processes that are either stored in the memory  of the first computer  or access\/affect the first computer  from the other computers , , , , .","The operating system described in [1] is implemented in the first computer .","The principle that is explained below and that forms the basis for the method and the array is shown graphically in .","Symbolically represented programs , ,  are to be protected by the invention against unauthorized access by at least one process , ,  that attempts or attempt to access a program , , .","The programs , ,  and processes , ,  use as the operating system the operating system described in [1], which is represented as a unit  that surrounds the programs , ,  and processes , , .","A program-specific \u201cprotective covering\u201d , ,  is graphically formed by the method or the array around each of the programs , ,  to be protected. Through the program-specific safeguarding, a freely scalable level of security is achieved for the program , ,  to be protected.","As is shown in a process layer model  in , the method or array can be realized on various logical levels of the programs , ,  to be protected.  shows three logical levels in the process layer model .","Safeguarding against a hacker  can take place at the level of the application programs  to be protected, at the level of the operating system programs  to be protected, or at the level of the operating system core, as well as on the system hardware .","The closer to the system hardware  the safeguarding of a program takes place, the greater is the level of security that is achieved through the invention.","The protective covering  is \u201cplaced\u201d around the program at the time the program , ,  to be protected is being run.","The method is realized in the form of cyclical, concurrent processes. The method is explained with the aid of the flow chart shown in .","The first thing done following the start of the operating system (step ) is the start of a protection program (step ). The protection program is set up in such a way that the method described below can be executed. The protection program is stored in encoded form, as a result of which any change to the protection program itself is impossible.","The encoding of the protection program also prevents a detailed analysis of the program that is executing the method.","When the protection program is started (step ), the protection program is decoded by a predetermined start routine, which contains the key needed for decoding the protection program and possibly additional basic functions of the operating system as well, which results in the determination of the actual program code of the protection program.","In this way, the protection program is protected in the active state against off-line attacks such as disassembling, debugging, patching, etc.","After the decoding (step ) of the protection program, the integrity of the protection program is checked dynamically (step ).","If the integrity of the protection program is not assured, the method is terminated (step ).","In a further step, the integrity of the operating system processes is checked dynamically (step ). If the integrity test is negative, the method is again terminated (step ).","If the integrity of the processes of the operating system  is assured, the program to be protected is started.","The method described above is carried out dynamically for each program , ,  to be protected.","One process file , ,  is assigned to each program , ,  to be protected.","The processes that may run in an address space that is also uniquely assigned to each program , ,  are included in a process file , ,  for the program , ,  which is to be protected and to which the process file , ,  is assigned. The data are stored in the process files by means of a hash function that uniquely identifies the process in question.","Following the start of the program , ,  in question (step ), the integrity of the program , ,  itself is checked (step ).","If the integrity test is negative, the method is again terminated (step ).","If the integrity test is positive, i.e., if the integrity of the program , ,  is assured, the method for the program , ,  to be protected is repeated until the program to be protected is itself terminated (step ).","The method is iterated in dependency on a predefinable event or at predefinable interval of time between two executions of the method (step ).","As soon as a process , ,  attempts to access the address space or the program , ,  itself, in a further step (step ) a check is made to whether or not the process , ,  is contained in the process file of the program , ,  to be protected which the process , ,  is trying to access.","This takes place through the formation of a hash value on the accessing process , ,  and comparison of the hash value of the accessing process , ,  with the hash values stored in the process file. If the accessing process is included in the process file of the program , ,  to be protected, then the process , ,  is executed (step ).","Otherwise, the process , ,  is not started (step ) and the user is informed of a possible attack on his program , , .","For each process that is active in the address space of a program , , , i.e., the process that is running, a check is made at predefinable intervals of time or in an event-controlled way to confirm whether the process in question is contained in the process file of the corresponding program , ,  whose address space is being examined. If that is not the case, then the corresponding process is terminated and the user is notified of a possible attack on his program , , .","Regular monitoring of the program is assured in this way.","Options for the integration of the method described above into the operating system described in [3] are described below.","Option 1:","Integration of a dynamically linked file  into the application programming interface (Application Programming Interface, API) (cf. ).","The dynamically linked file  becomes active in the address space of the potential accessing program . Using the dynamically linked file , the following steps are carried out in the address space of the potential accessing program :\n\n","Considered to be attack-relevant are all interface calls for the direct or indirect starting, ending and controlling of processes, e.g., write accesses to the process memory, changes to access rights, in principle, all interface instructions that work with external process identifiers (process handles), all instructions for the realization of message hooks (a programmable filtering function for messages for GUI (Graphic User Interface) intercommunication and for process intercommunication), and for debugging purposes.","The term \u201cindirect starting\u201d is also understood to mean compiler mechanisms for the automatic modification of program code, OLE (Object Link Embedding) and RPC mechanisms (Remote Procedure Call), as well as accesses from other operating system programming interfaces. This term additionally includes the control of the mechanisms that are used for the execution of dynamically linked files  (active X instructions, etc.).\n\n","If a process  now attempts by means of an interface call APIFktCall ( ) to access the program  to be protected or to start an inactive program, the protection program  is called via the dynamically linked file . As the transfer parameter for protection program , protection program  is told which program  is to be called by the accessing process .","Through a comparison with the allowable interface calls included in the process file of the program  in question, in accordance with the method described above, a decision can be made as to whether the interface call  is allowable or not.","The accessing process  is then either executed of \u201cblocked.\u201d If a decision is made in the protection program  that the accessing process  should be executed, the original code of the interface call  is executed and, following its execution, a return code  is sent back to the accessing process . Otherwise, an error message  is reported to the accessing process .","The method described above makes use of the basic mechanism of so-called DLL injection, which is known from [5].","Option 2:",{"@attributes":{"id":"p-0098","num":"0100"},"figref":["FIG. 6","FIG. 5"],"b":"601"},"The method described in the following ensures that an access to predefined data is possible only from the dynamically linked file  itself, and accesses from a different instruction sequence segment, particularly that of an accessing application, will be prevented.","The method presented in the following is preferably realized with static modification of the method described above.","The following assumptions are made with regard to the method described below:\n\n","In the modified interface function, a branch is made to an interface process , which is contained in the dynamically linked file . This interface process branches to protection program , which, for a calling process  that attempts to access the interface function  with an interface call , checks if this call is allowed for the accessing process .","If it is, the interface function  is executed and after the execution of interface function , another branch is made to the modified interface function , which is symbolized by an arrow . Following the execution of additional predefinable instructions, a branch is made to an interface return function , which is indicated by an arrow . This takes place by means of a branch instruction. In the interface return function , a check is made once again (step ) to confirm whether the interface call  is allowed. If it is not, an error message  is send to the process . This takes place in exactly the same way if, using the procedure described above, it was determined in interface function  that the interface call is not allowed.","However, if in the checking step  in the interface return function  it is also determined that the interface call is allowed, then the result of the called interface function is sent to the accessing process  (step ).","Option 3:","The invention can also be integrated in the operating system core. This form of implementation makes it possible to integrate a control mechanism that can no longer be bypassed under user access rights, but rather, only under the access rights of the system administrator. This results in a substantial increase in the level of security.","An integration mechanism that can be used for this purpose is described in [4]. Under this mechanism, with the transfer into the mode of the operating system core (kernel mode), interface calls are \u201cintercepted\u201d in the operating system core itself. In this instance, the administrative mechanism for the interrupt routine is realized in the operating system core, and is therefore protected against accesses by processes that are active in the user mode. A summary of a number of such alternative implementation options can be found in [4].",{"@attributes":{"id":"p-0107","num":"0112"},"figref":"FIG. 7"},"An application program  (application) uses functions of the operating system for the program run.","The operating system functions are grouped into functions  of the operating system in a user mode, and functions  of the kernel mode. Both of these functions are symbolically illustrated as blocks.","Through the use of dynamically linked files (*.dll) it is possible to integrate the method within the framework of the user mode, which can take place through a first block  through the use of a dynamically linked file \u201cNTDLL.DLL\u201d  of the operating system described in [1].","The other option for integrating the method into the operating system core is indicated by a second block , whereby in this version of the integration, the mechanism is integrated during the transition from the user mode into the kernel mode.","Several alternatives to the implementation examples explained above will be presented in the following:","The protection of the protection program can be increased by integrating the start routine in the operating system core, e.g., as a so-called kernel mode process or as system service.","The dynamically linked file can also be provided both statically and dynamically, i.e., only during the run time of the program  to be protected, or during the entire run time of the operating system.","Alternative software interrupt routines can also be used as alternatives to the dynamically linked file.","The invention can be realized both by means of software as well as by means of hardware, or partly by means of software and partly by means of hardware.","In addition, as is shown in , if the integrity test is negative (step ), a check is made in an additional checking step (step ) to confirm whether a reloading of the original protection program and\/or a program to be protected is possible from a trustworthy authority, or if a recovery of the protection program and\/or the program to be protected is possible in a way such that its\/their integrity is assured.","If that is not possible, the method is terminated (step ).","If that is possible, however, the integrity of the reloaded or recovered protection program is dynamically checked further (step ).","In an additional variant, provision is made that the computers are connected to a server, the first computer in .","The method described above for the protection of a program and\/or a file is carried out in each computer.","If the accessing process is not included in the process file, an alarm signal is generated and sent to the server. In the server, in dependency on at least one alarm signal a predetermined action is triggered, for example, a centrally controlled termination of a process.","The following publications were cited within the framework of this document:\n\n"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"p":["The following are shown:",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
