---
title: Method, apparatus and system for principle mapping within an application container
abstract: According to one aspect of the invention, a computing system capable of communicating with first and second user managers, the first user manager to perform authentication and authorization services for a first resource and the second user manager to perform authentication and authorization services for a second resource, is provided. The computing system comprises a container having an application, a first user store associated with the first user manager, and a second user store associated with the second user manager stored therein, the application to send a first user manager command to the first user store in a first format and a second user manager command to the second user store in the first format, the first user store to translate the first format into a second format and send the second format to the first user manager, the second user store to translate the second format into a third format and send the third format to the second user manager.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07606917&OS=07606917&RS=07606917
owner: SAP AG
number: 07606917
owner_city: Walldorf
owner_country: DE
publication_date: 20040430
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1). Field of the Invention","This invention relates to a computing system, in particular a computing system for accessing various resources.","2). Discussion of Related Art","The task of protecting information stored on computers is becoming increasingly difficult and complex as more and more companies are storing an ever increasing amount of data electronically. The job of keeping such information secure is even further hampered by the fact that many of the computers and databases on which this information is stored are remotely accessible through various public networks, such as the internet.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1","b":["10","12","14","16","18","18","20","20","12","14"],"sub":["1","N","1","N"]},"The container , which may be implemented on a server, includes an application  stored thereon. As illustrated, there is one user manager  for each of the resources -. Each of the resources -, which may be, for example, databases, has a plurality of various files  stored thereon.","The client  accesses the application  within the container  through the network . Once the client  has successfully gained access to the application , the application  may need to access one or more of the resources -on behalf of the client . Before the application , or the client , is granted access to any of the resources, the client  must be authenticated and authorized for access.","Authentication is the process of determining whether someone or something is actually who or what it is claiming to be. One common authentication tool uses a user identification and a password, other such tools may use digital certificates. Authorization is the process of giving someone or something permission to do or have something. Thus authentication determines who the client  is, and authorization determines what information the client  will be able to access.","Each of the user managers -authenticate and authorize the application , or client , to access the particular resource with which it is associated. The resources -may be stored on various types of servers or database services such as a Lightweight Directory Access Protocol (LDAP) server, a Database Management Software (DBMS) based server, and a file system (FS) server.","Each of the different user managers -may be unique or different amongst each other (e.g., a first user manager may be associated with an LDAP service, a second user manager may be associated with a Kerberos service, etc.) and may utilize a unique \u201clanguage,\u201d or protocol, for communicating with the application . Therefore, in order for the application  to successfully request authentication and authorization from any particular one of the user managers -, the application  must know which particular protocol that particular user manager utilizes and send requests and\/or commands to the particular user manager in the particular language that it uses. For example, if the client , or the application  on behalf of the client, wishes to perform a high level function, such as \u201cmodify group,\u201d on two different user managers and , two different syntaxes are required. One of the user managers may require the command in the syntax \u201cmodify_group\u201d while another user manager requires that the command be in the syntax \u201cmg.\u201d","Thus, the application  must be designed to comprehend multiple communication protocols in order to communicate with the different user managers -in the particular syntaxes that they require. As the number of communication protocols programmed within an application  increases, the application  becomes more complicated and difficult to program and manage.","Additionally, various types of authentication services may be used by the different user managers -or resources -, each of which may utilize a different login protocol module.","The application  can invoke multiple high level commands\/requests from the various user managers -with only a single communication protocol Pthrough the common API . Examples of the high level commands include commands for managing users and groups of users (e.g., obtain information from a user account, create a user account, delete a user account, modify a user account, define a group, modify a group, delete a group, add a user to a group, remove a user from a group, and add a group to a group.) The application may also invoke authentication commands through the API  such as \u201clogin\u201d and \u201clogout.\u201d In an embodiment, authentication commands that flow through the common API  are the same as those used in Java Authentication and Authorization Service (JAAS). These commands include login, logout, abort, and commit).","Each of the user managers -is responsible for implementing authentication and authorization services for a corresponding one of the resources -, and each of the user stores -within the container  is responsible for communicating with a corresponding one of the user managers -in the language\/syntax\/format P, P. . . Pthat the user manager comprehends. That is, each of the user stores -is able to communicate with the particular user manager -with the communication protocol that it understands.","That is, referring again to , when the client  is authenticated through a particular user manager , the appropriate principle for the client  is sent to the application . Then, when the client  again attempts to use one of the resources , the application  sends the principle back to the user manager . The user manager then allows the application  to access the appropriate files based on the roles associated with the principle.","Each time the client  is authenticated by a new user manager, another principle needs to be tracked by the application  and\/or the login context used by the application . As the application  has to manage more and more principles, it becomes more complicated and more difficult to manage.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIG. 4"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3","b":["50","50","52","54","56","58","58","60","62","62"],"sub":["1","N","1","N"]},"The client  is, for example, a computer, or an individual using a computer or another application running on a computer. The network  includes a series of points or nodes (e.g., switches, routers, etc.) interconnected by communication paths. The network  may include one or more of the following: the internet, a public network, or a local area network (LAN), and a private network.","The container , which may be implemented on a server or other computing system, includes an application , a common application programming interface (API) , user stores -, a default user store , and a principle map . Although only one principle map  is illustrated as being connected to one user store , it should be understood that other principle maps may be connected to the other user stores -, or the container  may contain multiple principle maps, one for each of the user stores -. The common API  is a communication syntax between application  and each of the user stores -and the default user store .","The application  can invoke multiple high level commands\/requests from the various user managers -with only a single communication protocol through the common API . Examples of the high level commands include commands for managing users and groups of users (e.g., obtain information from a user account, create a user account, delete a user account, modify a user account, define a group, modify a group, delete a group, add a user to a group, remove a user from a group, and add a group to a group.) The application may also invoke authentication commands through the API  such as \u201clogin\u201d and \u201clogout.\u201d In an embodiment, authentication commands that flow through the common API  are the same as those used in Java Authentication and Authorization Service (JAAS). These commands include login, logout, abort, and commit).","Each of the user managers -is responsible for implementing authentication and authorization services for a corresponding one of the resources -, and each of the user stores -within the container  is responsible for communicating with a corresponding one of the user managers -in the language\/syntax\/format that the user manager comprehends. That is, each of the user stores -is able to communicate with the particular user manager -with the communication protocol that it understands.","As illustrated, the default user store  is associated with the default user manager .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 4","FIG. 4"],"b":["68","68","76","78","80","82","68","64","66","58","58"],"sub":["1","N"]},"The single user module  includes code for translating common API  commands from the application  dealing with single users (e.g., obtaining information from a user account, creating a user account, deleting a user account, modifying a user account, etc.).","The group user module  includes code for translating common API  commands dealing with groups of users (e.g., defining a group, modifying a group, deleting a group, adding a user to a group, removing a user from a group, adding a group to a group, etc.).","The authentication module  includes code for translating common API  for commands dealing with the authentication of users (e.g., login, logout, abort, commit, etc.). In an embodiment, the authentication module  takes the form of the authentication approach shown in  and may also include the same login modules that are used in JAAS. Here, the login context is invoked through the common API  by the application  and the appropriate login module is invoked by the login context to carry out authentication with the user manager.","The configuration module  includes various configurable information used for communication with one of the particular user managers -, such as the IP address and port of the particular user manager. The configuration module  may also include restrictions on users, such as a minimum character requirement for attempting to access a particular user manager or resource, and information regarding the use of specific transport protocols for certain types of communication, such as secure socket layer (SSL).","The default user manager  is the user manager that performs authentication and authorization services for the applications within the container (rather than any of resources -). Therefore, in use, referring again to , when the client  attempts to gain access to the application  within the container , the client  must first be authenticated and authorized by the default user manager . When the client  has been successfully authenticated and authorized for access to the application , a default principle, \u201cA\u201d for example, is sent from the default user manager . Thus the client  is recognized as principle \u201cA\u201d for purposes of authorizing the client's  access within the container .","The client  may then attempt to access one of the resources -. When the client  attempts to access one of the resources , a high level authentication command, such as \u201clogin,\u201d is sent through the common API  to user store associated with user manager that communicates with resource that the client  is attempting to access. In an embodiment, where user store conforms to the design approach of , the authentication module  of user store is used. If the approach of  is used for the authentication module , the appropriate login module for use with user store is invoked by the login context in response to the \u201clogin\u201d command sent by the application  over the common API .","Once the client , or the application  on behalf of the client,  has been authenticated for access to user manager , another principle for use with user manager (\u201cB\u201d for example) is sent from user manager to user store as illustrated in . The principle B is then stored within the principle map . Here, as part of the application's  initial invocation of user store on behalf of the client  for authentication services (i.e., the aforementioned \u201clogin\u201d request sent over the common API ), user store was told that the authentication was for principle \u201cA.\u201d That is, for example, the user store was instructed to \u201clogin\u201d principle \u201cA\u201d for access to resource . The principle map  essentially maps the container principle value \u201cA\u201d to user manager principle value \u201cB\u201d for the same user (in this case, client ). It should be noted that the principle \u201cB\u201d received from user manager need not be stored within the application . Rather, the principle B may be stored within the principle map  that is maintained by user store (or same entity other than the application ).","Through the principle map , user store is able to recognize that the principles A and B have been granted to the same client, and thus, when the client , or application  on behalf of the client , again attempts to access resource , the client  is identified as \u201cA\u201d across the common API  and the user store simply sends principle B back to user manager . That is, user store \u201clooks up\u201d the appropriate principle (B) from the principle map  for the client  that is requesting access to resource (who is identified as principle A). The client  may then access various files  on resource based on the roles that user manager has assigned to principle B.","If the client  also attempts to access a second resource , the client  must be authenticated and authorized by a second user manager that controls access to the second resource . The application  sends a \u201clogin\u201d command through the common API  along with the identity of the client  as recognized by the container  (principle A) to a second user store (i.e., using the same communication protocol as was used to access the first resource ). The second user store invokes authentication services by user manager .","Thus, the application  is able to communicate with the different user managers -by sending commands in a single communication protocol and does not have to be programmed with multiple communication protocols. That is, for example, for both of the accesses to resources and , the application communicated \u201clogin A\u201d to both of user stores and .","Once the client  is authenticated by the second user manager , the second user manager sends a principle, \u201cC\u201d for example, to the second user store . The principle C may then be stored within a second principle map  as illustrated in . As before, the second principle map  maps a relationship between the received principle (C) and the default principle (A) of the client . Thus, the second user store , using the second principle map , will be able to recognize that the principle C and the default principle A are for the same client and, as a consequence, will be able to identify client  as principle \u201cC\u201d for future uses related to resource .","For example, the second user store is able to send principle C back to the second user manager so that the client  may be authorized to access the files  within the second resource which are based on the roles that the second user manager has assigned to principle C.","If the application  (e.g., at the commands of the client ) attempts to perform a high level modification to the user records of user manager such as \u201cmodify user group,\u201d a high level command is sent through the common API  to the user store associated with user manager that is connected to the resource that the client  is attempting to access. This high level command is sent in the communication protocol used by the application , in a syntax not particularly utilized by the particular user manager .","User store essentially \u201ctranslates\u201d the high level command into the particular communication protocol and syntax that is used by the particular user manager that the client  is attempting to access. For example, the \u201cmodify user group\u201d command may be translated into \u201cmodify_group.\u201d The \u201ctranslation\u201d of the high level command into the particular communication protocol of the particular user manager is pulled from one of the modules within the user stores being accessed. For example, as discussed above, the translation for the \u201cmodify user group\u201d is stored in the group user module  as illustrated in .","If the application  (e.g., at the commands of the client ) attempts to perform a high level modification to the user records of the second user manager , such as \u201cmodify user group,\u201d a high level command is sent through the common API  to the user store associated with the second user manager that is connected to the second resource that the client  is attempting to access. This high level command is sent in the communication protocol used by the application . The second user store translates the communication protocol used by the application  into the particular communication protocol and syntax used by the second user manager . For example, the \u201cmodify user group\u201d command may be translated into \u201cmg.\u201d","As illustrated in , the container  may also utilize a centralized principle map . The centralized principle map  may be connected to the application  and the user stores -through the common API . In such an embodiment, the centralized principle map  would be able to store principles received from the default user manger  and the user managers -and map relationships between the principles that would be used by the client  in accessing the resources -.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 5","FIG. 5"],"b":["200","200","202","204","206","208","210","212","214","204","202"]},"The computing system of  may be incorporated at various places within the networked computing system infrastructure  of .","The processes taught by the discussion above can be practiced within various software environments such as, for example, object-oriented and non-object-oriented programming environments, Java based environments (such as a Java 2 Enterprise Edition (J2EE) environment or environments defined by other releases of the Java standard, or other environments (e.g., a .NET environment, a Windows\/NT environment, each of which is provided by Microsoft Corporation).","Processes taught by the discussion above may be performed with program code such as machine-executable instructions which cause a machine (such as a \u201cvirtual machine\u201d, general-purpose processor or special-purpose processor) to perform certain functions. Alternatively, these functions may be performed by specific hardware components that contain hardwired logic for performing the functions, or by any combination of programmed computer components and custom hardware components.","An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as, but is not limited to, one or more memories (e.g., one or more flash memories, random access memories (static, dynamic or other)), optical disks, CD-ROMs, DVD ROMs, EPROMs, EEPROMs, magnetic or optical cards or other type of machine-readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a propagation medium (e.g., via a communication link (e.g., a network connection)).","While certain exemplary embodiments have been described and shown in the accompanying drawings, it is to be understood that such embodiments are merely illustrative and not restrictive of the current invention, and that this invention is not restricted to the specific constructions and arrangements shown and described since modifications may occur to those ordinarily skilled in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention is described by way of example with reference to the accompanying drawings, wherein:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
