---
title: Apparatus and method for automatically manipulating software products
abstract: A manipulation tool (e.g., “the XABLE tool”) provides a user interface (UI) automation library that allows a tool user to find existing UI objects and then perform a UI action on such UI objects. In one exemplary application, the manipulation tool can be used by script writers to automatically drive the UI of an application under test. A plurality of selectable search strategies are provided for searching for UI objects. Further, an event handling object is provided for monitoring the firing of UI objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07451455&OS=07451455&RS=07451455
owner: Microsoft Corporation
number: 07451455
owner_city: Redmond
owner_country: US
publication_date: 20030627
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of Provisional Application No. 60\/467,445, filed on May 2, 2003, which is incorporated herein by reference in its entirety.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","This invention relates to an apparatus and method for automatically manipulating a software product, and, in a more particular implementation, to an apparatus and method for automatically manipulating the user interface functionality provided by a software product.","A variety of automation tools exist today for driving the graphical user interfaces of software products. These automation tools automatically supply a series of user inputs that simulate the actions that a human user might take to accomplish a prescribed task when using the software product. One application of these automation tools is in the field of software testing. A software developer can design an automation tool to perform a series of operations involving the graphical user interface of a software product in order to determine whether the software product contains errors, or whether the software product meets predetermined usability requirements.","While a human user can interact with the graphical user interface in a simple and intuitive manner, the automated tools cannot \u201csee\u201d the graphical user interface and thus must expressly rely on program statements to simulate a user's interaction. Providing an adequate collection of program instructions to mimic the user's interaction is a challenging task. This difficulty is partly due to the fact that the program instructions must simulate a vast number of ways that a human user can interact with the graphical user interface. For instance, the graphical user interface presents a large number of user interface objects for the human user to select from, and the user can manipulate these graphical objects in many different ways. Further, different machines may respond to the user's commands in different ways that may be difficult to precisely predict. For instance, there is typically a time lag between a user's command to activate a user interface object and the actual activation (or \u201cfiring\u201d) of this user interface object. A testing script should therefore provide some mechanism for accounting for this time lag if it is to reliably simulate interaction between the human user and the user's computer.","Some testing programs and automation tools attempt to address the above complexity by providing various simplifying assumptions. This design approach has several shortcomings. For instance, programmers may resort to a generous use of simple timing mechanisms such as \u201csleeps\u201d to handle synchronization issues. That is, a programmer my add a fixed delay period (i.e., a \u201csleep\u201d) after a command to launch a user interface object, where the delay period is selected to be large enough to account for the processing speeds of different machines. This strategy, however, may result in an inefficient test script because these sleeps will be unnecessarily long for many machines, and potentially too short in other unforeseen circumstances. Other attempts to simplify the testing program may resort to the use of a relatively rigid collection of program statements that programmers must adhere to in their scripts. This strict programming framework might be viewed unfavorably by programmers\/testers or automation script authors, as it prevents these individuals from implementing different kinds of script writing strategies to suit their individual styles and preferences.","On the other hand, a tool that attempts to duplicate the full richness in interfacing possibilities presented to the human user is in danger of becoming too complex, and thus difficult to use (that is, not user-friendly).","The above problems are compounded by the fact that software products that provide a graphical user interface were not typically designed to handle the kind of \u201cback access\u201d interfacing required by automated testing tools. (That is, the graphical user interfaces of software products were designed with the understanding that users would access interface objects in normal fashion via the keyboard and mouse, not via program simulation). Because of this factor, it may be a complex matter to determine how to glean effective information from the application being tested.","Accordingly, while there are a variety of tools in the market today for automating the graphical user interface associated with software products, there is a general need in the art to provide an automation technique that is versatile, effective, but yet relatively easy to use.","According to one exemplary implementation, an apparatus is described herein for interacting with a target software product having user interface functionality. The apparatus includes script execution logic configured to execute a script that involves interaction with the user interface functionality of the target software product. The apparatus further includes manipulation tool logic that provides functionality for use by the script application logic in interfacing with the target software product. The manipulation tool logic includes search logic configured to search for a user interface object using a plurality of different selectable search strategies.","According to another exemplary implementation, the manipulation tool logic is configured to interface with the target software product using a window-type application programming interface (API) and a COM-based accessibility interface.","According to another exemplary implementation, one of the above-referenced search strategies is a Structured Query Language (SQL) type query string search strategy that involves comparing a specified string with information associated with the user interface object.","According to another exemplary implementation, another of the search strategies is a flag-based attribute search strategy that involves comparing a specified attribute value and qualifying flag information with information associated with the user interface object.","According to another exemplary implementation, an apparatus is described for interacting with a target software product having user interface functionality. The apparatus comprises script execution logic configured to execute a script that involves interaction with the user interface functionality of the target software product. The apparatus further comprises manipulation tool logic that provides functionality for use by the script application logic in interacting with the target software product. The manipulation tool logic further comprises event handling logic configured to block the execution of the script execution logic until a specified event has occurred within a specified timeout period.","According to another exemplary implementation, the above-referenced event pertains to a firing of a specified user interface object.","According to another exemplary implementation, the manipulation tool logic further comprises event handling logic configured to execute a callback function upon the occurrence of a specified event, the callback function executing a prescribed function upon the occurrence of the specified event.","Related methods and computer readable media are also described herein.","The same numbers are used throughout the disclosure and figures to reference like components and features. Series  numbers refer to features originally found in , series  numbers refer to features originally found in , series  numbers refer to features originally found in , and so on.","A.1. Overview of Apparatus and Field of Use",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","102","104","106","104","102","108","108","102","116","118","110","112","114","104","108","102","102","108","104","102","108"]},"The above functionality is useful for many different applications. For instance, a tool user  may write a test script  to test the target application  to ensure that it performs its allotted functions in a reliable manner. Thus, the tool user  might wish to employ such automation when the target application  is first being developed. In this context, the automation can be used to run through a great number of user input scenarios to ensure that the target application  is working properly (using, for instance, well known iterative regression techniques). The outputs of the automated testing can be stored and compared with desired respective responses. Any discrepancies between the expected and observed results may be indicative of \u201cbugs\u201d in the target application . The tool user  can thus use this information to correct errors in the program before it ships to customers. The above-described automation is beneficial to the tool user  because it greatly expedites the testing process (which may involve hundreds of different scenarios). The automation may also provide more reliable testing results compared to manual testing, that is, by eliminating human error from the testing process.","The automation can be used for other purposes besides testing target applications . For instance, the end user  may find that his or her interaction with the graphical user interface  repeatedly involves one or more series of actions. For example, the end user  may find that he or she repeatedly performs the same series of actions in interacting with the graphical user interface  when handling e-mail on a daily basis. In this case, the end user  can write a script  to automate this common series of tasks. Thus, instead of having to perform multiple actions when interacting with the graphical user interface , the end user  only needs to initiate the execution of the test application , which automatically drives the target application , as if the end user  were manually performing the tasks in the automated sequence of tasks.","To facilitate discussion, any user who initiates the execution of the test application  is referred to as a \u201ctool user\u201d  herein. Likewise, again to facilitate discussion, the test application  will be discussed primarily herein as serving a conventional testing role, such as debugging or usability testing. However, as mentioned above, it should be appreciated that the test application  can serve other uses.","The target application  can represent any kind collection of machine instructions for performing any kind of application in any kind of programming language. Likewise, the scripts  and  can be prepared in a variety of programming languages, such as, to name a few, JSCRIPT\u2122, JAVASCRIPT, VISUAL BASIC\u00ae, VISUALC++\u00ae, and so on. To facilitate discussion, most of the examples presented in this disclosure will be framed in the context of JSCRIPT; but this choice of language is merely illustrative. JSCRIPT was created by Microsoft Corporation. JSCRIPT is a scripting language tailored for use in Internet-related applications, and fully conforms to the ECMAScript (a Web standard scripting language).","The processing device  can comprise any kind of device for executing machine instructions, such as a computer workstation, personal computer, and so on. The test application  can be implemented on the same physical computing machine as the target application . In an alternative implementation, the processing device  can represent plural functional modules embodied in separate processing devices, and possibly coupled together via network. For instance, the test application  can interact with the target application  via a network connection (not shown), such as the Internet, a LAN connection, etc.  (to be discussed below) provide additional details regarding an exemplary computing environment that can be used to implement the automated testing technique described herein.","Finally, to provide a concrete framework for discussion, the discussion of the graphical user interface  is presented herein in the exemplary context of some version of Windows\u00ae operating system (provided by Microsoft Corporation). However, the automation techniques described here can be implemented on other kinds of operating systems that provide other kinds of user interface objects.","A.2. The Manipulation Tool and Related Interfaces","The tool used to implement the above-described automation is generically referred to as a \u201cmanipulation tool\u201d . As a shorthand reference, this tool  is also referred to as the \u201cXABLE tool.\u201d The manipulation tool (XABLE tool)  can be implemented as a COM component. COM (Component Object Model) refers to an OLE object-oriented programming model that defines how objects interact within a single process or between processes. (OLE, in turn, describes the technology and interface for implementing support for object interaction. OLE is an acronym for Object Linking and Embedding). In COM, clients have access to an object through interfaces implemented on the object. More specifically, the functionality provided by the manipulation tool  can be implemented using one or more dynamically linked libraries (DLL's). At run time, a function in a DLL is linked dynamically into an application that calls it.","As will be described in greater detail shortly, the manipulation tool  comprises a collection of objects used to interact with the target application , including a plurality of functions (or methods) used to interact with the target application . These functions are initiated in response to instructions contained within the tool user's  script . Accordingly, the manipulation tool  can be viewed as an interface between the test application  and the target application , or may alternatively be viewed as an instruction translator or instruction implementor.","However, in order for the manipulation tool  to interact with the target application , the target application  must itself provide an interface which \u201cexposes\u201d its objects. In other words, the manipulation tool  cannot \u201csee\u201d the graphical user interface  in the same manner as the end user can visually examine the graphical user interface . Accordingly, the manipulation tool  must have some mechanism for extracting information regarding the performance of the target application  as it affects the user interface (UI) of the target application .","To this end, the manipulation tool  interacts with the target application  through various interface mechanisms  which \u201cexpose\u201d the UI objects provided by the target application . Different interface mechanisms  can be used to reveal this information. In one exemplary case, the manipulation tool  relies on two interface mechanisms: a window-type application program interface (API) and an \u201caccessibility\u201d interface designed to accommodate alternative techniques for accessing UI Objects. Each of these interfaces provides information regarding what is \u201chappening\u201d in the UI aspects of the target application  by exposing properties of the UI objects involved in the UI presentation as well as by firing events (e.g., sending messages) whenever something happens related to a UI object (to be discussed below). Each of these interfaces will be discussed in turn below.","An application program interface (or API) refers to a set of functions that are used to interact with a component, application, or operating system. Typically, an API consists of one or more DLL's that provide some specific functionality. For example, in a Microsoft\u00ae Windows\u00ae-based operating system environment, a frequently referred to API is the Windows\u00ae operating system API, which includes the DLLs that make up the Windows\u00ae operating system. Every Windows\u00ae operating system application interacts with the Windows\u00ae operating system API directly or indirectly. (The Win32\u00ae application programming interface version of the API will be discussed, by way of exemplary illustration, in this disclosure). The above-described Windows\u00ae API interface exposes a first set of information regarding the UI objects of the target application  to the manipulation tool . Also, the Win32\u00ae application program interface provides notifications called Windows\u00ae operating system \u201cMessages\u201d that provide information about UI window-type objects along with the changes that took place (to be discussed below).","On the other hand, the accessibility interface was originally designed in many systems to help disabled users operate a computer who might otherwise not be able to manipulate the keyboard and mouse device (e.g., , ) of a conventional computer. More generally, the accessibility interface purposely exposes information associated with the generated UI of an application so that the user can interact with the UI using alternative means (that is, beside the conventional keyboard input and mouse input mechanisms, for instance). Microsoft\u00ae Active Accessibility\u00ae provides one such exemplary accessibility interface. Microsoft\u00ae Active Accessibility\u00ae is a COM-based technology that provides a standard, consistent mechanism for target applications and clients of such applications to exchange information. This technology is implemented as a dynamic-link library (DLL). The Active Accessibility\u00ae functionality provides an interface referred to as IACCESSIBLE, which constitutes the Active Accessibility\u00ae COM interface. The Active Accessibility\u00ae also generates notifications called WinEvents upon the occurrence of changes in the graphical objects presented to the graphical user interface . The above-described Active Accessibility\u00ae interface exposes a second set of information regarding the UI objects of the target application  to the manipulation tool , which complements the information provided in the first set by the Windows\u00ae API interface.","Additional details regarding the specific kinds of information revealed by the Win32\u00ae API interface and the Active Accessibility\u00ae interface will be described below. To facilitate discussion, and to indicate the application of the concepts described herein to other technology, the Win32\u00ae application programming interface will be referred to henceforth generically as a \u201cwindow-type interface,\u201d and the Active Accessibility\u00ae interface will be referred to generically as an \u201caccessibility interface.\u201d Interface objects that have a tile-like appearance are referred to generically as \u201cwindow-like objects.\u201d","The processing device  also includes one or more mechanism(s)  for exposing event information pertaining to the operation of the target application . For instance, event information is generated by the target application  when it provides (or \u201cfires\u201d) a particular UI object to the display device . Mechanism  notifies the test application  of such event information. In one case, mechanism  can extract the event information from standard window-type hook events. In another case, mechanism  can extract the event information from events signals generated via the accessibility interface. (In other words, in one exemplary implementation, the above-described Windows\u00ae operating system application program interface (API) and Active Accessibility\u00ae interface provide functionality for providing both of the mechanisms  and  shown in ; the mechanisms  and  are shown separately mainly to highlight the ability of these interfaces to reveal both the properties of UI objects and event-related information regarding the UI objects.) There is typically a non-zero time lag between the request to launch a particular UI object and the firing of the requested UI object by the target application . Hence, the event information provided by the mechanism  can be employed to block the execution of test application  until a requested UI event is fired to the display device . Use of event information to monitor the firing of UI objects eliminates the need for fixed period delays in test scripts (referred to as \u201csleeps\u201d). The events provided by the mechanism  are also useful in implementing a callback procedure. In the callback procedure, the manipulation tool  activates a predetermined function in response to the occurrence of a specified event.","Finally, note in  that the target application  is referred to as a server, while the test application  is referred to as a client. These labels reflect conventional labeling. The target application  is a server in the sense that it provides UI-related information to the test application  (which functions in the role of a receiving client of such information). In the parlance used in the field, the manipulation tool  actually \u201cworks out of process\u201d with respect to the target application  which it controls.","A.3. UI Object Properties Exposed by the Manipulation Tool","As described above, the manipulation tool  models UI objects in the target application  using properties derived from exposed information provided by two interfaces, a window-type interface, and an accessibility interface. The meaning of these properties is best conveyed by providing an introductory explanation of conventional UI elements (with reference to ), and conventional representation of UI elements in object-oriented format (with reference to ).",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 2","b":["200","200","202","200","202","200","200","204"]},"Title bar buttons (, , ) in the title bar  act as shortcuts to specific window-type object commands. In the case of , a minimize button  minimizes the window-type object , a maximize button  maximizes the window-type object , and a close button  closes the window-type object .","Every window-type object  has a boundary that defines its shape. A sizable window-type object  has a distinct border that provides control points (handles) for resizing the window-type object by using direct manipulation. If the window-type object cannot be resized, the border coincides with the edge of the window-type object. If the viewable content of the window-type object  exceeds the current size of the window-type object , scroll bars are used, such as an exemplary horizontal scroll bar  and a vertical scroll bar .","A menu bar  defines a special area displayed across the top of the window-type object  directly below the title bar . The menu bar  includes a set of entries called menu titles. Each menu title provides access to a drop-down menu composed of a collection of menu items, or choices.","More generally, menus display a list of commands available to the user. There are several types of menus, including drop-down menus, shortcut menus, and cascading menus. A drop-down menu appears as a panel with its list of items arranged in a column. Menu , for instance, is produced by right-clicking with the mouse device  while the mouse device  is pointed at the title bar . This menu  includes a plurality of menu items, such as exemplary menu item .","The interior of the window-type object  can be referred to as the client area . In this case, the client area  provides a workspace for entering information.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 3","b":["300","302","304","306"]},"Generally, a window-type object can include a number of controls that facilitate displaying, entering, or editing a text value. For example, window-type object  includes a drop-down list box  that allows the selection of only a single item from a list. The list is displayed on demand by selecting the button . Although most list boxes are single-selection lists, some contexts require the user to choose more than one item. A tree view control is a special list box control (not shown) that displays a set of objects as an indented outline based on their logical hierarchical relationship.","Some of these controls combine a basic text-entry field with other types of controls, as in the case of drop-down list box , where the user can also enter text into the box, rather than select such text from the drop-down list. More generally, a text box (also referred to as an edit control) is a rectangular control where the user enters or edits text. It can be defined to support a single line or multiple lines of text.","In contrast, exemplary static text field  is used to present read-only information. A balloon type tip field  can be used to provide various types of prompting or help information to the user.","The dialog window-type object  also presents controls in the form of command buttons (, , ). These buttons (, , ) communicate an OK (i.e., acceptance) command, a cancel command, and a browse command, respectively, as well understood in the art. A command button, also referred to as a push button, is a control that causes the application to perform some action (e.g., by running some code associated with it) when the user clicks it.","Other kinds of well-known controls include option buttons and check boxes. An option button (not shown), also referred to as a radio button, represents a single choice within a limited set of mutually exclusive choices. That is, the user can choose only one of a set of options. A check box (e.g., check box ) allows the user to enter a yes\/no type of response in the box.","There are many additional types of well-known UI objects; the above listing of UI elements is merely an illustrative sample of UI objects commonly found in graphical user interfaces.","In the above discussion, UI features have been repeatedly referred to as UI \u201cobjects.\u201d This terminology reflects the well-known use of object-oriented programming metaphors to describe the features of graphical user interfaces. Since the object-oriented programming approach will be increasingly featured in this disclosure,  is included as a vehicle for briefly explaining high-level concepts pertaining to object-oriented programming.","Namely,  shows the representation of two user interface elements as objects (e.g., object  and object ). Exemplary object  includes a plurality of properties  which convey attributes of the object (e.g., the characteristics or traits of the object). Object  also includes a collection of methods or functions associated therewith. The methods refer to behavior that can be exhibited by the object, or, in other words, functions that can be performed by the object. If an application attempts to strictly follow the object-oriented programming model (rather than loosely borrow from its concepts), it will attempt to encapsulate the properties  of the object within the methods , such that the properties cannot be changed without invoking an appropriate method of the object. (This encapsulation protects the data associated with the object and also helps produce the desirable result of a modular program, where changes to one module do not affect changes to another module.) Object  includes a conceptual organization which is similar to object . Object  communicates with object  via messages, such as message .","Although not illustrated, object-oriented programming also organizes objects in parent-child hierarchies whenever possible. A child inherits the properties of its parent. A class refers to a general \u201cblueprint\u201d which describes a collection of objects.","With the above introduction, a more detailed discussion is now provided of the types of information that can be gleaned from the target application  (in ) via the interface mechanisms  and the manipulation tool (XABLE tool) . As mentioned, a first collection of properties is derived from information obtained via the window-type interface, and a second collection of properties is derived from information obtained via the accessibility interface. Tables 1 and 2 show exemplary collections of properties derived from these two mechanisms, respectively.",{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Window-Type Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["WindowLevel","WindowLevel refers to the window-type object position"]},{"entry":[{},"relative to desktop. All top level window-type objects"]},{"entry":[{},"start at level zero and their children get higher level"]},{"entry":[{},"values."]},{"entry":["ProcessId","ProcessId refers to the ID of the Process that created the"]},{"entry":[{},"window-type object."]},{"entry":["ThreadId","Thread Id refers to the ID of Thread that created the"]},{"entry":[{},"window-type object."]},{"entry":["hWnd","hWnd refers to the Handle of the window-type object,"]},{"entry":[{},"e.g., as assigned by the Windows\u2009\u00ae operating system."]},{"entry":["Text","The text attribute has two meanings depending on a"]},{"entry":[{},"\u201cTextFlags\u201d attribute:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1.","If no \u201cTextFlags\u201d is specified, this attribute"]},{"entry":[{},{},"refers to the window-type object caption or"]},{"entry":[{},{},"title;"]},{"entry":[{},"2.","If \u201cTextFlags\u201d > 0 then this attribute refers"]},{"entry":[{},{},"to the Text within the window-type object, i.e.,"]},{"entry":[{},{},"the text contained within its children. TextFlags"]},{"entry":[{},{},"allows tool user to specify which children to"]},{"entry":[{},{},"include or exclude."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ClassName","The ClassName attribute refers to the ClassName of the"]},{"entry":[{},"window-type object as specified in the WNDCLASS"]},{"entry":[{},"structure."]},{"entry":["ModuleName","The ModuleName attributes refers to the name of the"]},{"entry":[{},"application that owns the window-type object, for"]},{"entry":[{},"example, \u201cVB6.EXE\u201d ."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0069","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Accessible Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Name","The Name attribute refers to a string used to identify, find, or"]},{"entry":[{},"announce an object. Many objects, such as icons, menus, check"]},{"entry":[{},"boxes, combo boxes, and other controls have labels that are"]},{"entry":[{},"displayed to users. Any label that is displayed to a user is used for"]},{"entry":[{},"the object's name property. For example, the text on a button"]},{"entry":[{},"control is its name, while the name for a list box or edit control is"]},{"entry":[{},"the static text that immediately precedes the control in the tabbing"]},{"entry":[{},"order. Even graphic objects that do not display a name provide text"]},{"entry":[{},"when queried for the Name property."]},{"entry":["Value","The Value attributes provides a textual representation of the visual"]},{"entry":[{},"information contained in an object. Not all objects support the"]},{"entry":[{},"Value property. For example, an edit control's value is the text it"]},{"entry":[{},"contains, whereas a menu item has no value."]},{"entry":["Role","The Role property describes an object's user interface element. All"]},{"entry":[{},"objects support the Role property. In many cases, the object's role is"]},{"entry":[{},"obvious. For example, window-type objects have the  role"]},{"entry":[{},"and push buttons have the  role."]},{"entry":["RoleText","The RoleText attribute refers to a string that describes an object's"]},{"entry":[{},"role. For example: window-type objects have \u201cWindow\u201d as its"]},{"entry":[{},"RoleText."]},{"entry":["State","The State property describes an object's status at a moment in time."]},{"entry":[{},"All objects support the State property. The state of a child is"]},{"entry":[{},"dependent on the state of its ancestors."]},{"entry":["StateText","StateText refers to a string that describes an object's state. For"]},{"entry":[{},"example, a window-type object with the focus has \u201cFocused\u201d as part"]},{"entry":[{},"of its StateText."]},{"entry":["ChildCount","ChildCount refers to the number of children that belong to this"]},{"entry":[{},"object. Window-type objects have at least 7 children."]},{"entry":["DefaultAction","DefaultAction refers to a string that describes the object's default"]},{"entry":[{},"action. Not all objects have a default action. An object's"]},{"entry":[{},"DefaultAction property describes the object's primary method of"]},{"entry":[{},"manipulation from the user's viewpoint. For example, push buttons"]},{"entry":[{},"have the DefaultAction property set to \u201cPress.\u201d"]},{"entry":["KeyboardShortcut","KeyboardShortcut property refers to a string that represents the"]},{"entry":[{},"shortcut key or access key, also known as the mnemonic. The"]},{"entry":[{},"KeyboardShortcut property describes a key or key combination that"]},{"entry":[{},"activates a specified accessible object. Examples include ALT+F,"]},{"entry":[{},"CTRL+ALT+4, WIN+F1, CTRL+ALT+SHIFT+BACKSPACE, or"]},{"entry":[{},"simply BACKSPACE."]},{"entry":["Description","An object's Description property provides a textual description"]},{"entry":[{},"relating to an object's visual appearance. The description is"]},{"entry":[{},"primarily used to provide greater context for low-vision or blind"]},{"entry":[{},"users, but is also used for context searching or other applications."]},{"entry":["Help","The Help property provides information that tells the user about the"]},{"entry":[{},"function of an object. This property contains balloon-style"]},{"entry":[{},"information that is used either to describe what the object does or"]},{"entry":[{},"how to use it. For example, the Help property for a toolbar button"]},{"entry":[{},"that shows a printer might provide the following text: \u201cPrints the"]},{"entry":[{},"current document.\u201d The text for the Help property does not have to"]},{"entry":[{},"be unique within the user interface."]},{"entry":["HelpTopic","The HelpTopic property provides details used with the Microsoft\u2009\u00ae"]},{"entry":[{},"Win32\u2009\u00ae API WinHelp function to display a Help topic associated"]},{"entry":[{},"with the object. Not all objects support this property."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Section B of this disclosure describes various techniques that can be used to search for UI Objects based on the above-described properties in Tables 1 and 2.","Finally, an illustration of how the above-described properties apply to a specific user interface object is presented in Table 3 below. Table 3 shows the various objects, properties, and values associated with the dialog box shown in . In this case, a combination of window-type and accessibility properties are used to describe the dialog window-type object.",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"UI Objects and Properties for the Example of FIG. 3"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Object","Property","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Dialog","Name","\u201cOpen\u201d"]},{"entry":["Dialog","Caption","\u201cOpen\u201d"]},{"entry":["Dialog","Text","\u201cType the Internet address of a"]},{"entry":[{},{},"document or folder, and Internet"]},{"entry":[{},{},"Explorer will open it for tool"]},{"entry":[{},{},"user.; &Open:;"]},{"entry":[{},{},"http:\/\/www.msn.com;"]},{"entry":[{},{},"http:\/\/www.msn.com; Open as"]},{"entry":[{},{},"Web &FoIder; OK; Cancel;"]},{"entry":[{},{},"Browse . . .\u201d"]},{"entry":["Dialog","Role","Window-type object"]},{"entry":["Dialog","ClassName","\u201c#32770\u201d"]},{"entry":["Edit control","Name","\u201c&Open:\u201d"]},{"entry":["Edit control","Value","\u201chttp:\/\/www.msn.com\u201d"]},{"entry":["Edit control","Role","Editable text"]},{"entry":["Edit control","ClassName","\u201cEdit\u201d"]},{"entry":["OK button","Name","\u201cOK\u201d"]},{"entry":["OK button","Role","Push button"]},{"entry":["OK button","DefaultAction","\u201cPress\u201d"]},{"entry":["OK button","ClassName","\u201cButton\u201d"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"A.4. Exemplary Computing Environment",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 5","FIG. 1","FIG. 5"],"b":["500","500","106","112","500","500","500","500"]},"Exemplary computer  includes one or more processors or processing units , a system memory , and a bus . The bus  connects various system components together. For instance, the bus  connects the processor  to the system memory . The bus  can be implemented using any kind of bus structure or combination of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. For example, such architectures can include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, and a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus.","Computer  can also include a variety of computer readable media, including a variety of types of volatile and non-volatile media, each of which can be removable or non-removable. For example, system memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) , and non-volatile memory, such as read only memory (ROM) . ROM  includes an input\/output system (BIOS)  that contains the basic routines that help to transfer information between elements within computer , such as during start-up. RAM  typically contains data and\/or program modules in a form that can be quickly accessed by processing unit .","Other kinds of computer storage media include a hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media, a magnetic disk drive  for reading from and writing to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  for reading from and\/or writing to a removable, non-volatile optical disk  such as a CD-ROM, DVD-ROM, or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are each connected to the system bus  by one or more data media interfaces . Alternatively, the hard disk drive , magnetic disk drive , and optical disk drive  can be connected to the system bus  by a SCSI interface (not shown), or other coupling mechanism. Although not shown, the computer  can include other types of computer readable media, such as magnetic cassettes or other magnetic storage devices, flash memory cards, CD-ROM, digital versatile disks (DVD) or other optical storage, electrically erasable programmable read-only memory (EEPROM), etc.","Generally, the above-identified computer readable media provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for use by computer . For instance, the readable media can store an operating system , one or more application programs , other program modules , and program data .","The computer environment  can include a variety of input devices. For instance, the computer environment  includes the keyboard  and a pointing device  (e.g., a \u201cmouse\u201d) for entering commands and information into computer . The computer environment  can include other input devices (not illustrated), such as a microphone, joystick, game pad, satellite dish, serial port, scanner, card reading devices, digital or video camera, etc. Input\/output interfaces  couple the input devices to the processing unit . More generally, input devices can be coupled to the computer  through any kind of interface and bus structures, such as a parallel port, serial port, game port, universal serial bus (USB) port, etc.","The computer environment  also includes the display device , generally corresponding to the display device  shown in . A video adapter  couples the display device  to the bus . In addition to the display device , the computer environment  can include other output peripheral devices, such as speakers (not shown), a printer (not shown), etc.","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . The remote computing device  can comprise any kind of computer equipment, including a general purpose personal computer, portable computer, a server, a router, a network computer, a peer device or other common network node, etc. Remote computing device  can include all of the features discussed above with respect to computer , or some subset thereof.","Any type of network can be used to couple the computer  with remote computing device , such as a local area network (LAN) , or a wide area network (WAN)  (such as the Internet). When implemented in a LAN networking environment, the computer  connects to local network  via a network interface or adapter . When implemented in a WAN networking environment, the computer  can connect to the WAN  via a modem  or other connection strategy. The modem  can be located internal or external to computer , and can be connected to the bus  via serial I\/O interfaces  other appropriate coupling mechanism. Although not illustrated, the computing environment  can provide wireless communication functionality for connecting computer  with remote computing device  (e.g., via modulated radio signals, modulated infrared signals, etc.).","In a networked environment, the computer  can draw from program modules stored in a remote memory storage device . Generally, the depiction of program modules as discrete blocks in  serves only to facilitate discussion; in actuality, the programs modules can be distributed over the computing environment , and this distribution can change in a dynamic fashion as the modules are executed by the processing unit .","Wherever physically stored, one or more memory modules , , , , etc. can be provided to implement the automating testing techniques described above.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 6","FIG. 6"],"b":["602","604","606","608","610","612","614","612","612","614","616","618"],"i":"Inside Windows NT. Second Edition"},"B.1. Overview of the Objects Provided by the Manipulation Tool (XABLE Tool)","The manipulation tool  (e.g., the \u201cXABLE tool\u201d) provides a UI automation library that allows tool users to perform various functions. This section describes exemplary functions provided by the manipulation tool . (To facilitate explanation, the numeric references \u201c\u201d and \u201c\u201d will henceforth be omitted when discussing the manipulation tool and the tool user, respectively.) To begin with, however, an explanation will be provided of the overall organization of objects in the manipulation tool.  shows such an exemplary tree organization  of objects. As mentioned in the context of , an individual object has a collection of properties associated therewith. Further, an object may include one or more methods associated therewith. The methods generally refer to functions that the object can perform when called upon.","Table 4 below summarizes the basic roles assigned to each of the objects shown in .",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Basic Objects in the Manipulation Tool"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Object","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Manager","The Manager object allows access to all other objects. It"]},{"entry":[{},"therefore defines the \u201croot\u201d object. In one exemplary"]},{"entry":[{},"implementation, at least one object is required per script."]},{"entry":["SearchCriteria","The SearchCriteria object defines a structure to be passed to a"]},{"entry":[{},"Find method when searching for UI Objects."]},{"entry":["UIObject","The UIObject object defines UI objects constituted from"]},{"entry":[{},"information obtained from the accessibility interface (such as"]},{"entry":[{},"Microsoft's\u2009\u00ae Active Accessibility\u2009\u00ae interface). A UIObject can"]},{"entry":[{},"comprise a simple element, or a window-type object. Some"]},{"entry":[{},"UIObjects can be parents of other objects (e.g., containers)."]},{"entry":["UIObjects","The UIObjects object defines a collection of UIObjects."]},{"entry":["UIWindow","The UIWindow object represents a window-type object or"]},{"entry":[{},"control object and encapsulates necessary properties and methods"]},{"entry":[{},"to access a window-type object. UIWindow objects are"]},{"entry":[{},"constituted from information obtained from the window-type"]},{"entry":[{},"interface (e.g., the Win32\u2009\u00ae application programming interface)."]},{"entry":["UIWindows","The UIWindows object defines a collection of UIWindow objects."]},{"entry":["UIMenu","The UIMenu object defines a collection of UIMenuItem objects."]},{"entry":["UIMenuItem","The UIMenuItem object maps to a single item on a menu or popup."]},{"entry":["EventHandler","The EventHandler object provides a mechanism for waiting for"]},{"entry":[{},"or listening to events, and provides other timing-related functionality."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"By way of overview, with reference to the top levels of object hierarchy in the tree organization , the XABLE tool allows users to formulate scripts by using UI objects constituted through the window-type interface (using the UIWindow object) or through the accessibility interface (using the UIObject object). Further, a single script can employ a mix of objects derived from the window-type interface and the accessibility interface. The XABLE tool further includes the SearchCriteria object that defines a data structure for holding criteria used, for instance, in the searching functions provided by the XABLE tool. The XABLE tool further includes the EventHandler object to address synchronization issues that arise in writing test scripts.","To start using the XABLE tool, in one exemplary implementation, the tool user should create at least one Manager object. In JSCRIPT language notation, at least one manager can be created as follows.","var oManager = new ActiveXObject(\u201cXAble.Manager\u201d)","(The instruction \u201cvar\u201d refers to the declaration of a variable in JSCRIPT.)","Once the tool user has created the Manager object, the user can search for window-type objects, dialogs and\/or controls, or even simple UI elements. The tool user can write a script using the XABLE tool that waits for certain objects to appear or disappear, or that watches a certain attribute as it gets changed. Alternatively, the tool user can write a script that can set a callback function to be notified whenever a certain event takes place. The tool user can also write a script that sends keystrokes and mouse events to any object. All of these actions are accomplished using functions (or methods) associated with the above-identified objects of Table 4.","More specifically, the following subsections present details regarding selected aspects of the manipulation tool's functionality, including: Section B2 pertaining to searching functionality; Section B3 pertaining to event handling functionality (including \u201cwait\u201d functionality); Section B4 pertaining to keyboard and mouse functionality; Section B.5 pertaining to controls and control type functionality (e.g., button actuation); and Section B.6 pertaining to menu-related functionality. Section B.7 pertains to the automatic insertion of constants into scripts. Finally, the appendix to this disclosure provides additional details regarding the functionality provided by the manipulation tool. The appendix forms an integral part of this disclosure.","In the following discussion, the conventional object-oriented naming conventions are used to convey the relationships between and within objects. For instance, the relationship between an object and one of its properties or methods can be conveyed in the conventional manner using \u201cobject.property,\u201d or \u201cobject.method.\u201d For instance, \u201coManager.Find ( )\u201d makes reference to a method named \u201cFind( )\u201d associated with a manager object named \u201coManager.\u201d Also, as noted above, illustrative examples will be presented in the JSCRIPT language, but those skilled in the art will appreciate that other languages can be used to accomplish the same tasks.","B.2. Searching Functionality","The XABLE tool provides two general search methods for searching for UI objects: a Find method and a FindEx method. Both methods accept search parameters that describe the UI object being sought and return the sought UI object or a null value indicating that the search was unsuccessful. By way of overview, the FindEx search method provides a more versatile technique to find a UI object compared to the Find method. That is, the FindEx method gives the user more options in specifying information which identifies the sought-after UI object. Hence, for simple and straightforward applications, the tool user might want to use the Find method; but where more advanced searching is desired or required, the tool user might want to use the FindEx method.","Generally, the search parameters fed to the search functions include object attributes associated with the UI object. A property is considered an attribute if its value can uniquely identify the object. If one property is not sufficient, then multiple properties can be used to uniquely identify the object. More specifically, as described above in connection with Tables 1 and 2, object attributes fall into two categories: window-type properties and accessible properties. Searching can be slow and can potentially consume significant processing time. Accordingly, if a given object has unique window-type attributes, like Caption, hWnd, ClassName, ModuleName, etc., then, in one implementation, it may be considered preferable to use these attributes over the accessible attributes (such as Name, Value, Role, etc). It is possible to combine attributes from both categories, but search time will be dependent on the slowest attributes used. In one exemplary implementation, the default search behavior is to exclude hidden and\/or disabled objects.","The above-described searching methods are associated with both the XAble.Manager and the XAble.UIOjbect objects (shown in  and described above in Section B.1). Using the searching method associated with XAble.Manager will cause the search to start on a global scope, e.g., the desktop. But if a tool user uses the searching methods associated with XAble.UIObject, then the search will look inside the specified object (direct children and descendants).","One beneficial feature of the XABLE tool is its versatility in allowing the tool user to search for UI objects in many different and powerful ways. Different exemplary search techniques are described below to illustrate the versatility of the search mechanism provided by the XABLE tool. The different search strategies can be categorized into at least two main techniques: a first technique that entails combining attribute values with flags to find a desired UI object; and a second technique that entails using a query string to find a desired UI object.","B.2.(a). Search Technique 1: Combining Attribute Values with Flags","The first search technique combines the UI object attribute values with flag information. The flags qualify the search for the attributes in different ways depending on the nature of the flags. That is, the flags can be viewed as performing a filtering function in the search, that is, by restricting the search results to a certain subset of results depending on the nature of the flags. Exemplary flags and their associated meanings are identified below in Table 5.",{"@attributes":{"id":"p-0103","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Search Flags"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Flag(s)","Corresponding Object Attribute"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["XA_USE_TEXT","These flags instruct the machine to perform"]},{"entry":["XA_USE_ANCESTORTEXT","the search within the text of a window-type"]},{"entry":[{},"object under consideration, or within the text"]},{"entry":[{},"in an ancestor object in the hierarchy of objects."]},{"entry":["XA_USE_CLASS","These flags instruct the machine to perform"]},{"entry":["XA_USE_ANCESTORCLASS","the search within ClassName related information."]},{"entry":["XA_DIALOGS","N\/A"]},{"entry":["XA_USE_MODULE","This flag instructs the machine to perform the"]},{"entry":[{},"search within ModuleName related information."]},{"entry":["XA_USE_PROCESSID","This flag instructs the machine to perform the"]},{"entry":[{},"search in ProcessID related information."]},{"entry":["XA_USE_THREADID","This flag instructs the machine to perform the"]},{"entry":[{},"search in ThreadID related information."]},{"entry":["XA_HWND_CHILDREN","These flags instruct the machine to perform"]},{"entry":["XA_HWND_PARENTS","the search in hWnd related information."]},{"entry":"XA_EXACT_HWND"},{"entry":["XA_EXACT_WINDOWLEVEL","These flags instruct the machine to perform"]},{"entry":["XA_ABOVE_WINDOWLEVEL","the search in WindowLevel related"]},{"entry":["XA_BELOW_WINDOWLEVEL","information."]},{"entry":["XA_USE_NAME","This flag instructs the machine to perform the"]},{"entry":[{},"search in Name related information."]},{"entry":["XA_USE_VALUE","This flag instructs the machine to perform the"]},{"entry":[{},"search in Value related information."]},{"entry":["XA_USE_ROLE","This flag instructs the machine to perform the"]},{"entry":[{},"search in Role related information."]},{"entry":["XA_USE_ROLETEXT","This flag instructs the machine to perform the"]},{"entry":[{},"search in RoleText related information."]},{"entry":["XA_USE_STATE","This flag instructs the machine to perform the"]},{"entry":[{},"search in State related information."]},{"entry":["XA_USE_STATETEXT","This flag instructs the machine to perform the"]},{"entry":[{},"search in StateText related information."]},{"entry":["XA_USE_DEFAULTACTION","This flag instructs the machine to perform the"]},{"entry":[{},"search in DefaultAction related information."]},{"entry":["XA_USE_KEYBOARDSHORTCUT","This flag instructs the machine to perform the"]},{"entry":[{},"search in KeyboardShortcut related information."]},{"entry":["XA_USE_CHILDCOUNT","This flag instructs the machine to perform the"]},{"entry":[{},"search in ChildCount related information."]},{"entry":["XA_USE_DESCRIPTION","This flag instructs the machine to perform the"]},{"entry":[{},"search in Description related information."]},{"entry":["XA_USE_HELP","This flag instructs the machine to perform the"]},{"entry":[{},"search in Help related information."]},{"entry":["XA_USE_HELPTOPIC","This flag instructs the machine to perform the"]},{"entry":[{},"search in HelpTopic related information."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"A number of examples are provided below to illustrate searching with attributes and flags using the Find and FindEx methods.","The following example presents a technique for finding the word \u201cCompanyX\u201d in a UI object using the Find method. The Find method in this example is accessed through the Manager object (as indicated by the notation \u201coManger.Find( ).\u201d","\/\/JSCRIPT sample using Find and combining flags with","attributes as part of XAble.Manager","var UIFound = oManager.Find ( XA_USE_TEXT,","\u201c*CompanyX*\u201d );","In this case, the flag XA_USE_TEXT instructs the XABLE tool that it is to locate the word \u201cCompanyX\u201d in the text portion of UI objects provided by the test application.","The following example presents a technique for performing the same operation described above using the FindEx method.","\/\/JSCRIPT Sample using FindEx and combining flags with","attributes as part of XAble.Manager","oManager.Text = \u201c*CompanyX*\u201d;\n\n","In this case, the parameters passed to the find function (i.e., FindEx) are defined in separate statements that precede the find function.","The next example presents a technique for performing a search by first creating a separate Criteria Object:","\/\/JSCRIPT Sample using FindEx and combining flags with","attributes as part of SearchCriteria","var oSearchData = oManager.CreateSearchData( );","oSearchData.Text = \u201c*CompanyX*\u201d;\n\n","In this case, the Criteria object, oSearchData, is defined, and then this object is passed as a parameter to the FindEx function. The object oSearchData contains a text field and a flag field.","In any of the cases above of using the Find or FindEx methods, Null is returned if no match is found. Further, if the tool user does not specify a XA_FINDALL flag (defined below), then the find methods will return immediately after a first match (single object). In contrast, if XA_FINDALL is specified, the search will return a collection of objects.","Table 6 describes additional flags that also affect the way the search methods operate. The examples which follow this Table illustrate the use of these flags.",{"@attributes":{"id":"p-0124","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Additional Search Flags"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Flag","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["XA_FIND_PARTIALMATCH","This flag instructs the machine to find"]},{"entry":[{},"object(s) that have a partial match (e.g.,"]},{"entry":[{},"in case more than one flag was"]},{"entry":[{},"specified)."]},{"entry":["XA_FINDALL","This flag instructs the machine to find"]},{"entry":[{},"all objects that match by returning a"]},{"entry":[{},"collection of matching objects."]},{"entry":["XA_FINDRECURSIVE","This flag instructs the machine to search"]},{"entry":[{},"all descendants of an object by walking"]},{"entry":[{},"through the tree of children."]},{"entry":["XA_FIND_CASESENSITIVE","This flag instructs the machine to match"]},{"entry":[{},"exact text (string) case."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The following two examples illustrate two respective techniques used to find all top level objects having the text \u201cCompanyX\u201d in their respective captions.","oManager.Text = \u201c*CompanyX*\u201d;","oManager.Flags = XA_USE_TEXT | XA_FINDALL;","var UIFound = oManager.FindEx( );","OR","var UIFound = oManager.Find (XA_USE_TEXT,","\u201c*CompanyX*\u201d, XA_FINDALL);","In these examples, the XA_FINDALL flag instructs the machine to find all top level objects that match by returning a collection of matching objects (in this case, a collection of objects that contain the word \u201cCompanyX\u201d).","The next two examples illustrate techniques to find all objects with the \u201cCompanyX\u201d caption (that is, not simply top level objects):","oManager.Text = \u201c*CompanyX*\u201d;","oManager.Flags = XA_USE_TEXT | XA_FINDALL |","XA_FINDRECURSIVE;","var UIFound = oManager.FindEx( );\n\n","var UIFound = \/oManager.Find (XA_USE_TEXT,","\u201c*CompanyX*\u201d, XA_FINDALL | XA_FINDRECURSIVE);","Again, the flag XA_FINDALL flag instructs the machine to find all objects that match by returning a collection of matching objects. The XA_FINDRECURSIVE flag instructs the machine to search all descendants of an object by walking through the tree of children.","The following example presents a technique for using the SearchCriteria object in performing the search, as opposed to using the manager as criteria.","Var oSearchData = g_oUIManager.CreateSearchData( );","oSearchData.Text = \u201c* CompanyX*\u201d;","oSearchData.Flags = XA_USE_TEXT | XA_FINDALL;","var UIFound = oManager.FindEx(oSearchData);","In this case, a search criteria object \u201coSearchData\u201d is created and then passed as a parameter to FindEx.","The following example presents a technique to find top level application objects (with disabled and hidden objects excluded):","var UIFound = oManager.Find(XA_FINDALL );","In this case, since there is no other qualifier than XA_FINDALL, this function instructs the machine to find all objects in the system. However, the default is not to include hidden and disabled objects, so this function will exclude these objects from the collection of returned objects. This function will also not retrieve information from child objects.","The following example presents a technique to find all top level application objects (including hidden and disabled objects):","var UIFound = oManager.Find( XA_FINDALL |","XA_INCLUDE_DISABLED | XA_INCLUDE_HIDDEN );","In this case, the flags XA XA_INCLUDE_DISABLED and XA_INCLUDE_HIDDEN ensure the retrieval of hidden and disabled objects.","The following example presents a technique to find all objects in the system.","var UIFound = oManager.Find( XA_FINDALL |","XA_FINDRECURSIVEI | XA_INCLUDE_DISABLED |","XA_INCLUDE_HIDDEN );","In this case, the additional inclusion of the XA_FINDRECURSIVE flag ensures that even the objects associated with child objects are retrieved.","B.2.(b). Technique 2: Using Query-Like String Search","A second category of search techniques provides for the use of a query-like string in searching for UI objects. This technique allows the tool user to search for a UI object using a search query structure similar to Structured Query Language (SQL) used to interrogate databases. In the present application, however, the searching is performed in memory, not in a remote database. In one exemplary implementation, only the FindEx method supports the query-like search technique.","The following example presents a technique to find the first object having the \u201cCompanyX\u201d caption.","var UIFound = oManager.FindEx(\u201cCaption like","\u2018*CompanyX*\u2019 \u201d);","In this case, the search parameter provides a key phrase \u201cCaption,\u201d a relational operator \u201clike,\u201d followed by the string \u201cCompanyX,\u201d which prompts the machine to use a SQL-like search to find the UI objects containing the text \u201cCompanyX.\u201d Only the first found object is retrieved. The keyword \u201cCaption\u201d specifically directs the machine to find a matching object by investigating the title (i.e., caption) of the UI objects.","The following example illustrates a technique to find all top level objects with the \u201cCompanyX\u201d caption.","var UIFound = oManager.FindEx(\u201cCaption like","\u2018*CompanyX*\u2019 \u201d, XA_FINDALL );","In this case, the inclusion of the flag XA_FINDALL prompts the machine to retrieve all top level objects that contain the text \u201cCompanyX,\u201d not simply the first found object.","The following example illustrates a technique to find all objects having the \u201cCompanyX\u201d caption.","var UIFound = oManager.FindEx(\u201cCaption like","\u2018*CompanyX*\u2019 \u201d, XA_FINDALL | XA_FINDRECURSIVE);","In this case, the inclusion of the flag XA_FINDRECURSIVE supplements the search in the previous example by also finding matching child objects.","The following example presents a technique to find any object with \u201cCompanyX\u201d as part of its text.","var UIFound = oManager.FindEx(\u201cText","like \u2018*Companyx*\u2019\u201d);","In this case, the FindEx method instructs the machine to find an object having the text \u201cCompanyX\u201d inside one of its children. This is accomplished using the \u201cText\u201d keyword, as indicated above (e.g., instead of the \u201cCaption\u201d keyword, which only examines the titles of the UI objects).","The following example presents a technique to find all top level objects with \u201cCompanyX\u201d as part of their text.","var UIFound = oManager.FindEx(\u201cText like \u2018*CompanyX*\u2019 \u201d,","XA_FINDALL );","This case differs from the preceding case by including the XA_FINDALL flag, which instructs the machine to find all of the top level matching UI objects, not just the first matching UI object.","The following example presents a technique to find all objects with \u201cCompanyX\u201d as part of their text.","var UIFound = oManager.FindEx(\u201cText like","\u2018*CompanyX*\u2019 \u201d, XA_FINDALL | XA_FINDRECURSIVE );","This case differs from the proceeding case by including the flag XA_FINDRECURSIVE, which prompts the machine to find all of the child objects, not just the top level objects.","In addition to the above examples, the XABLE tool allows the tool user to search for objects by looking into text portions of one or more of their children (controls and child window-type objects). Tool users can inform XABLE tool that they want to include child window-type objects in their search for a window-type object by using the TextFlags property. TextFlags can be set to one or more of the following exemplary values.",{"@attributes":{"id":"p-0186","num":"0191"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":{"entry":"TABLE 7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"TextFlag Descriptions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TextFlag","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["TF_INCLUDE_TITLE","This flag instructs the machine to include the"]},{"entry":[{},"window-type object's title in the search."]},{"entry":["TF_INCLUDE_STATIC","This flag instructs the machine to include the"]},{"entry":[{},"static child window-type object's captions in the search."]},{"entry":["TF_INCLUDE_EDIT","This flag instructs the machine to include Edit"]},{"entry":[{},"controls text in the search."]},{"entry":["TF_INCLUDE_PUSHBUTTONS","This flag instructs the machine to include the"]},{"entry":[{},"Push buttons caption in the search."]},{"entry":["TF_INCLUDE_RADIOBUTTONS","This flag instructs the machine to include"]},{"entry":[{},"Radio button controls text in the search."]},{"entry":["TF_INCLUDE_CHECKBOXES","This flag instructs the machine to include"]},{"entry":[{},"check boxes text in the search."]},{"entry":["TF_INCLUDE_GROUPBOXES","This flag instructs the machine to include"]},{"entry":[{},"group boxes text in the search."]},{"entry":["TF_INCLUDE_LISTTEXT","The flag instructs the machine to include text"]},{"entry":[{},"from a list box in the search."]},{"entry":["TF_INCLUDE_HTMLELEMENTS","This flag instructs the machine to include"]},{"entry":[{},"HTML text in the search. This is useful for"]},{"entry":[{},"window-type objects that support HTML text."]},{"entry":["TF_INCLUDE_HIDDEN","This flag instructs the machine to include"]},{"entry":[{},"hidden window-type object text in the search"]},{"entry":["TF_INCLUDE_DISABLED","This flag instructs the machine to include"]},{"entry":[{},"disabled window-type object text in the search."]},{"entry":["TF_INCLUDE_LISTITEMSELECTED","This flag instructs the machine to include a"]},{"entry":[{},"selected item in a list box control's text in the search."]},{"entry":["TF_REMOVE_NONPRINTABLE","This flag instructs the machine to remove all"]},{"entry":[{},"non-printable characters from the text while searching."]},{"entry":["TF_TRIM_SPACES","This flag instructs the machine to remove"]},{"entry":[{},"spaces while searching."]},{"entry":["TF_MAKE_UPPER","This flag instructs the machine to make all text upper case."]},{"entry":["TF_REMOVE_AMPERSAND","This flag instructs the machine to remove all"]},{"entry":[{},"\u201c&\u201d signs from the text."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"TextFlags can also be set to one or more of the following values, which are combinations of the above flags.",{"@attributes":{"id":"p-0188","num":"0193"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"TextFlag Combinations"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TextFlag","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["TF_INCLUDE_ALLCONTROLS","This flag instructs the machine to"]},{"entry":[{},"include the text portion of all child"]},{"entry":[{},"controls in the search."]},{"entry":["TF_INCLUDE_BUTTONS","This flag instructs the machine to"]},{"entry":[{},"include text from all types of buttons,"]},{"entry":[{},"e.g., push buttons, radios, etc."]},{"entry":["TF_INCLUDE_ALLINTER-","This flag refers to a combination of"]},{"entry":["ACTIVE","TF_INCLUDETITLE;"]},{"entry":[{},"TF_INCLUDEALLCONTROLS;"]},{"entry":[{},"TF_REMOVENONPRINTABLE;"]},{"entry":[{},"and"]},{"entry":[{},"TF_TRIMSPACES."]},{"entry":["TF_INCLUDE_ALL","This flag refers to a combination of:"]},{"entry":[{},"TF_INCLUDEALLINTERACTIVE;"]},{"entry":[{},"TF_INCLUDEHIDDEN; and"]},{"entry":[{},"TF_INCLUDEDISABLED."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In one exemplary implementation, TextFlags can be used with XA_USE_TEXT only.","The following example presents a technique for searching for all window-type objects that have \u201cOK\u201d buttons.","oManager.Text = \u201c*OK*\u201d;","oManager.Flags = XA_USE_TEXT;","oManager.TextFlags = TF_INCLUDEBUTTONS;","var UIFound = oManager.FindEx( );","In this case, the TF_INCLUDEBUTTONS flag instructs the machine to include text from all types of buttons, e.g., push buttons, radios, etc. in the search.","In any of the examples described above, wildcards (e.g., \u201c*\u201d) can be used in the search terms to encompass a potentially greater number of matching UI objects. Further, the query technique supports the use of well known logical connectors in formulating queries, such as the logical AND, OR, NOT, and so on.","The above-identified two basic search techniques (i.e., techniques 1 and 2) are not exhaustive of the strategies that can be used to locate UI objects, as reflected by the two additional examples.","The following example shows the use of a Subitem object to locate a button containing the text \u201cOK.\u201d","Var oOKbutton = oDialog.SubItem(\u201cOK\u201d)","The \u201cSubItem\u201d expression will locate all children objects associated with a specified object. \u201cItem\u201d will locate only top level objects.","The following two examples show the use of a \u201cfor\u201d loop to explicitly perform a recursive search for buttons containing the \u201cOK\u201d text.","Var oButtons = oDialog.Decendants(xPushbutton); \/\/All","button descendents","for (i=0; I < oBuuttons.Count; ++i)","{\n\n","}","OR","for (i=0; I < nitems; ++i)","{\n\n","}","In these cases, the tool user explicitly iteratively sequences through a collection of UI objects to find UI objects with buttons containing the text \u201cOK.\u201d This can be viewed as the \u201cbrute force\u201d method to finding matching objects, which may be desirable if the tool user wishes to override one or more of the assumptions employed by the Find and FindEx methods described above.",{"@attributes":{"id":"p-0212","num":"0227"},"figref":"FIG. 8","b":["802","804","806","808","810"]},"B.3. Events and Event Handling","The XABLE tool provides event monitoring functionality that can be used to stall the execution of a script until a predetermined event has taken place. This can be accomplished using the Wait and WaitEx functions. As in the case of the Find and FindEx methods, the WaitEx function generally provides a more versatile technique, e.g., containing more options, than the Wait method. For example, the WaitEx function allows the tool user to search using SQL-like string expressions. In general, these waiting functions inhibit the execution of the script that follows the waiting functions until the conditions specified in the functions are satisfied. In addition, these functions allow the tool user to specific a maximum waiting time (in milliseconds), which defines a timeout period. If the timeout period expires, null (nothing) is returned. The following examples illustrate the use of the Wait and WaitEx methods.","The following example presents a technique for waiting until the Internet Searcher application is launched (e.g., the main window-type object becomes visible) or a 10 second period elapses. The 10 second period is entered as 10000 ms in the example below.","oSrchData = oManager.CreateSearchData( );","oSrchData.Text = \u201c*CompanyX Internet Searcher*\u201d;","oSrchData Flags = XA_USE_TEXT;","var UIFound = oManager.WaitEx(evtObjectShow,","oSrchData, 10000); \/\/Wait is blocking for 10 sec","if ( UIFound )","{\n\n","}","else","{\n\n","}","Note that evtObjectShow is used to tell XABLE tool to check for the object show event and to see if it comes from the attached object (e.g., passed in oSrchData). That is, this statement has the effect of filtering the event information generated by the target application and selecting specific events therefrom. If the tool user omits the 10000 in this example, then the Wait function is not time-bounded.","The tool user can re-write the above example in a more straightforward way if the tool user uses Wait with an SQL-like string instead of oSrcData. The following example presents a technique for searching using such an SQL-like string.","var UIFound = oManager.Wait(evtObjectShow, \u201cCaption","like \u2018*CompanyX Internet Searcher*\u2019\u201d, 10000);\n\n","if ( UIFound )","{\n\n","}","else","{\n\n","}",{"@attributes":{"id":"p-0237","num":"0259"},"figref":["FIG. 9","FIG. 1"],"b":["902","904","906","906","130","908","906","908"]},"In addition to the above Wait and WaitEx functions, the XABLE tool includes a generic event handler object (e.g., EventHandler) that allows the tool user to wait for any event caused by UI elements, like changes in text, size, or any visual attributes such as show and hide states, and so on. The event handler object can be created in the following expression.","var oEventHandler = new","ActiveXObject(\u201cXAble.EventHandler\u201d);","In one exemplary implementation, the event handler will not monitor any events until a Start method is called. First, the tool user needs to specify which events are of interest to the tool user by calling an AddEvent method for each event. The tool user can then choose to wait for the specified events by using the Wait method. To stop receiving additional events, the tool user employs a Stop method.","Further, the tool user can also add callback functions in their script to be called whenever a certain event happens. More specifically, callback functions specify that the XABLE tool is to perform an identified method or function upon the occurrence of a specific event (or events).","Table 9 presents further details regarding exemplary functional capabilities of the event handler object aspects of the XABLE tool.",{"@attributes":{"id":"p-0244","num":"0266"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":{"entry":"TABLE 9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"EventHandler object details"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["AddObserver","This method registers a function in the tool user's script to be"]},{"entry":[{},"invoked whenever a certain window-type object or objects are found."]},{"entry":["RemoveObserver","This function \u201cunregisters\u201d a function already passed to AddObserver."]},{"entry":["RemoveAllObservers","This function removes all registered functions using AddObserver."]},{"entry":["AddEvent","This function adds one or more event(s) to the list of events to"]},{"entry":[{},"wait for or to be notified with. The function returns a cookie."]},{"entry":["RemoveEvent","This function removes one or more events from the list of events added."]},{"entry":["RemoveAllEvents","This function removes all events."]},{"entry":["AddClick","This function attaches a button click action to a certain event."]},{"entry":[{},"That is, upon the event, the system will automatically activate the button."]},{"entry":["RemoveClick","This function removes the button click action."]},{"entry":["RemoveAllClicks","This function removes all click actions registered."]},{"entry":["Start","This function is called by the tool user's script so that"]},{"entry":[{},"UIManager initiates the monitoring process."]},{"entry":["Wait","This function waits for one or all of the events added using AddEvent."]},{"entry":["Stop","This function stops UIManager from further attempts to monitor UI elements."]},{"entry":["Reset","This function resets the event handler object internally."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Functions registered with AddObserver have the following exemplary form:\n\n","oSender is the EventHandler object sending this event;","nEvent is the Event received;","oFound is the Object found, which could be null;","idObject is the object ID;","nThread is the Thread ID owning the object; and","nTime is the Time the event occurred.","The following example illustrates the use of the callback function, as well as other features identified in Table 9. In this case, assume that the tool user intends for the script to perform a certain action whenever a specified object appears.","\/\/---------------------------------------------------------","\/\/ Example of a callback function.","function OnNotification(oSender, nEvent, oFound, idObject,","nThread, nTime)","\/\/---------------------------------------------------------\n\n","In the above example, AddObserver registers the OnNotification function in the tool user's script. AddEvents adds an event that the XABLE tool is instructed to \u201clisten\u201d to. The function OnNotification will be invoked whenever the conditions specified in the OnNotification parameters are satisfied. The Start instruction initiates the monitoring process. The Stop instruction terminates the monitoring processing.",{"@attributes":{"id":"p-0259","num":"0295"},"figref":"FIG. 10","b":["1002","1004","1006"]},"B.4 Keyboard and Mouse Manipulation Functionality","The XABLE tool has support for sending mouse and keyboard events to UI elements. More specifically, the XABLE tool provides so-called \u201cSendkeys\u201d and \u201cDokeys\u201d functions, which facilitate the dispatch of keystrokes to the UI. Further, to mimic the mouse behavior, the tool user can use one of the following functions: MouseClick, MouseDblClick, MouseDown, MouseMove and MouseUp.","More specifically, an exemplary syntax for the SendKeys and DoKeys function is as follows:","SendKeys string[, wait]; and","DoKeys string[, wait].","The string expression specifies the keystrokes to send. In one exemplary implementation, this expression is required. \u201cWait\u201d is a Boolean value specifying the wait mode. If False (default), control is returned to the procedure immediately after the keys are sent. If True, keystrokes should be processed before control is returned to the procedure.","The XABLE tool also provides a shorthand technique for instructing the machine to repeat keystrokes N times. For example, to mimic the user pressing the left arrow 6 times, the tool user can use the form: SendKeys \u201c{LEFT+6}.\u201d Consider the following short examples:",{"@attributes":{"id":"p-0267","num":"0303"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["SendKeys Example","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u201cM {3}\u201d","This command types \u201cM\u201d 3 times."]},{"entry":["\u201c+(EC)\u201d","This command causes the shift key to be held down"]},{"entry":[{},"with E and C keys depressed."]},{"entry":["\u201c{circumflex over (\u2009)}{UP}\u201d","This command actuates the CTRL + Up arrow."]},{"entry":["\u201c{NUM*}\u201d","This command clicks \u201c*\u201d on Numerical Pad."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following example presents an illustration of the use of the command Sendkeys. In this example, a calculator application is used to get the result of the arithmetic operation \u201c1+2+8+8+8+8+8=.\u201d","var g_WshShell = new ActiveXObject(\u201cWScript.Shell\u201d);","var oProcess = g_WshShell.Exec(\u201cCalc\u201d); \/\/Launch","Calculator","var oCalc = g_oUIManager.WaitEx(evtObjectShow,","\u201cCaption = \u2018Calculator\u2019 \u201d, 10000); \/\/Wait until","calculator is visible . . .","if ( !oCalc)","{\n\n","}","oCalc.Window.SendKeys (\u201c1{+}2{+}8{10}= \u201d, true);","\/\/or use DoKeys:","\/\/oCalc.DoKeys (\u201c1{+}2{+}8{10}= \u201d, true);","oCalc.Wait(evtAnyEvent, 500);","var UIRes = oCalc.Window.GetControl(0x193);","\/\/Get control by ID","WScript.Echo(\u201cResult =\u201d + UIRes.Caption);","oCalc.SubItem(\u201cClose\u201d).DoDefaultAction( ); \/\/Close","the window","In the above case, the calculator application is launched and then the WaitEx instruction is used to detect the firing of the calculator application. In the event that the calculator is not activated by the timeout period, then error messages are displayed. In the event that the calculator is displayed, then the calculator keys are automatically depressed using the SendKeys instruction. The above example also illustrates the use of the DoKeys instruction to accomplish the same task. Then the testing script waits for the calculator to calculate the result (with the WaitEx function), and then retrieves the result (using the GetControl function).","Another way to simulate input is through the following mouse click commands:","MouseClick [[Buttons][, Keys] [, x][, y]]; and","MouseClickEx [[Buttons][, Keys] [, x][, y]].","All mouse functions accept a number of parameters that can be specified as numbers or literal strings. The following table summarizes possibly valid parameters:",{"@attributes":{"id":"p-0292","num":"0332"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Mouse Control Details"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Buttons","This parameter defines mouse buttons to be pressed. This"]},{"entry":[{},"parameter can be a combination of the following values:"]},{"entry":[{},"\u2003\u2003mbLeft = 1 or L;"]},{"entry":[{},"\u2003\u2003mbRight = 2 or R; and"]},{"entry":[{},"\u2003\u2003mbMiddle = 4 or M."]},{"entry":["Keys","This parameter defines keys pressed during mouse action."]},{"entry":[{},"This parameter can be a combination of the following values:"]},{"entry":[{},"\u2003\u2003mkShift = 1 or S;"]},{"entry":[{},"\u2003\u2003mkCtrl = 2 or C; and"]},{"entry":[{},"\u2003\u2003mkAlt = 4 or A."]},{"entry":["X","This parameter defines the horizontal position of the mouse"]},{"entry":[{},"in pixels. This parameter is in client coordinates (by default)."]},{"entry":[{},"The tool user can pass this as a string or as a number. To"]},{"entry":[{},"pass it as a string value, the user can use MouseClickEx; in"]},{"entry":[{},"this case, the tool user can use one of the following forms:"]},{"entry":[{},"\u201cx=val\u201d or \u201cX:val.\u201d X is in Client coordinates here."]},{"entry":[{},"\u201cScreenX=val\u201d or \u201cScreenX:val.\u201d X is in Screen coordinates"]},{"entry":[{},"here."]},{"entry":["Y","This parameter defines the vertical position of the mouse in"]},{"entry":[{},"pixels. This parameter is in client coordinates (by default)."]},{"entry":[{},"The tool user can pass this parameter as a string or as a"]},{"entry":[{},"number. To pass it as a string value, the tool user can use"]},{"entry":[{},"MouseClickEx; in this case, the tool user can use one of the"]},{"entry":[{},"following forms:"]},{"entry":[{},"\u201cy=val\u201d or \u201cy:val.\u201d Y is in Client coordinates here."]},{"entry":[{},"\u201cScreenY=val\u201d or \u201cScreenY:val\u201d. Y is in Screen coordinates"]},{"entry":[{},"here."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The following examples illustrate how the tool user can utilize the above-described mouse click features.",{"@attributes":{"id":"p-0294","num":"0334"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Example","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MouseClick(1, 0,100, 200);","Click Left mouse button at location 100, 200"]},{"entry":["MouseClick(mbLeft, mkShift, 100,","relative to window-type object. Shift is down."]},{"entry":"200);"},{"entry":["MouseClickEx(\u201cR\u201d, 2 ,50, 30);","Click right mouse button while holding down"]},{"entry":["MouseClickEx(\u201cRight\u201d, \u201cc\u201d ,50, 30);","CTRL at location 50, 30 (using MouseClickEx)."]},{"entry":"MouseClickEx(2, \u201cCTRL\u201d ,50, 30);"},{"entry":["MouseClickEx(\u201cR+M,\u201d \u201cShiftAlt\u201d","Click Right + Middle mouse buttons and hold down"]},{"entry":[",10, 30);","Shift + Alt at location 10, 30 (using MouseClickEx)."]},{"entry":["MouseClickEx(1, 0 ,\u201cScreenX=50\u201d,","Click Left mouse button at location 50, 66 in"]},{"entry":["\u201cScreenY=66\u201d );","screen coordinates (using MouseClickEx)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0295","num":"0335"},"figref":["FIG. 11","FIG. 11","FIG. 11"],"b":["1102","1104","1106","1108","1106","1108"]},"B.5. Controls and Control Types","The XABLE tool handles each control type differently. The XABLE tool detects a control type from its window-type object class. If the window-type object class is not recognized by the XABLE tool, then WindowType value will be WT_UNKNOWN. However, if the tool user knows that this control can be treated as one of the defined types, the tool user can set its WindowType to one of defined values:","WindowType: can be one of WT_UNKNOWN, WT_BUTTON,","WT_COMBOBOX, WT_LISTBOX, WT_MDICLIENT, WT_RichEdit,","WT_RICHEDIT_CLASS, WT_SCROLLBAR, WT_STATIC,","WT_MDICHILD, WT_DIALOG, and WT_HTMLWINDOW.","The following example presents a technique that employs a GetControl method. In this example, the calculator application is used to convert 1024 to binary (this time using the VBScript language).","Set g WshShell = CreateObject(\u201cWScript.Shell\u201d)","Dim oCalc","REM Launch Calculator","Set oProcess = g_WshShell.Exec(\u201cCalc\u201d)","REM Wait until calculator is visible.","Set oCalc = g_oUIManager.WaitEx(evtObjectShow,","\u201cCaption = \u2018Calculator\u2019\u201d, 10000)","IF oCalc IS NOTHING THEN\n\n","END IF","\u2018SendKeys","oCalc.DoKeys \u201c1024\u201d, true","\u2018now click on Bin button","oCalc.SubItem(\u201cBin\u201d).DoDefaultAction( )","REM Get control by ID","Set UIRes = oCalc.Window.GetControl(&h193)","WScript.Echo(\u201cResult = \u201d + UIRes.Caption)","\u2018Close . . .","oCalc.SubItem(\u201cClose\u201d).DoDefaultAction( ) REM Close","the window.","B.6. Menus","The XABLE tool encapsulates Windows\u00ae operating system API calls for menus. If a window-type API call fails, then the XABLE tool will report an error. This may happen if the user tries to modify certain attributes of menu items while being modified by Windows\u00ae operating system at the same time.","Each window-type object (UIWindow) has a Menu property, which is set to the window-type object's menu (if any). To see if a window has a menu or not, the tool user can check a HasMenu Boolean property. The Menu object simplifies enumeration of menu items. In order to traverse all items on a given menu bar, the tool user can use code similar to the following:","The following example presents a technique for displaying all menu items for the Calculator window-type object.","\/\/Testing Calculator","var oCalc = oManager.Find(XA_USE_TEXT, \u201cCalculator\u201d);","if (oCalc)","{\n\n","}","Clicking on an item can also be performed in a straightforward manner with the Menu object. The tool user can use the Click method and pass it the caption of the item to be pressed. The Tool user can include\/exclude the ampersand (&).","The following example shows a technique for switching the calculator application into scientific mode:","\/\/Testing Calculator . . .","var oCalc = oManager.Find(XA_USE_TEXT, \u201cCalculator\u201d);","if (oCalc)","{\n\n","}","B.7. Automatic Insertion of Constants","The XABLE tool provides a library that defines various constants used in manipulating UI objects. For instance, the left button, middle button, and right button of the mouse device can be assigned the constants 1, 2 and 4 in one exemplary implementation. The XABLE tool can be configured to automatically insert these constants from the library whenever called for in the tool user's script. Heretofore, the tool user was required to manually copy these constants into the script.","A manipulation tool (e.g., the \u201cXABLE tool\u201d) provides a user interface (UI) automation library that allows a tool user to find existing UI objects and then perform a UI action on such UI objects. In one exemplary application, the manipulation tool can be used by script writers to automatically drive the UI of an application under test. A plurality of selectable search strategies are provided for searching for UI objects. Further, an event handling object is provided for monitoring the firing of UI objects.","Although the systems and methods have been described in language specific to structural features and\/or procedures, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or procedures described. Rather, the specific features and procedures are disclosed as exemplary forms of implementing the claimed invention.","The following Appendix forms an integral part of the present specification.",{"@attributes":{"id":"p-0343","num":"0403"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.1."}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Manager Object Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["ClassName","This property refers to a string used to specify the window-"]},{"entry":[{},"type object's class name. The tool user can use the Spy++"]},{"entry":[{},"to find out its value. In one implementation, the tool user"]},{"entry":[{},"needs to specify one of the following two flags to use it:"]},{"entry":[{},"SNAP_MATCHCLASS and SNAP_EXACTCLASS."]},{"entry":["Flags","This property refers to flags used to search for objects and"]},{"entry":[{},"identify them."]},{"entry":["hWnd","This property refers to the window-type object handle used"]},{"entry":[{},"with XA_EXACT_HWND, XA_HWNT)_CHILDREN and"]},{"entry":[{},"XS_HWND_PARENTS to correlate to a certain window-"]},{"entry":[{},"type object."]},{"entry":["WindowLevel","This property refers to a window-type object's order in the"]},{"entry":[{},"child parent relationship. Top most window-type objects are"]},{"entry":[{},"at level 0. This method is used with"]},{"entry":[{},"XA_EXACT_WINDOWLEVEL,"]},{"entry":[{},"XA_ABOVE_WINDOWLEVEL, and"]},{"entry":[{},"XA_BELOW_WINDOWLEVEL"]},{"entry":["ModuleName","This property refers to the name of the .EXE module that is"]},{"entry":[{},"being sought. The tool user can set Flags to"]},{"entry":[{},"XA_USE_MODULE."]},{"entry":["ProcessId","This property refers to Process Id that owns the window-"]},{"entry":[{},"type object(s) that the tool user is concerned with. This"]},{"entry":[{},"property is used with XA_USE_PROCESSID."]},{"entry":["ThreadId","This property refers to the Thread Id that created the"]},{"entry":[{},"window-type object(s) the tool user is concerned with. This"]},{"entry":[{},"property is used with XA_USE_THREADID."]},{"entry":["WindowFromPoint(x,y)","This property returns a window-type object that contains the"]},{"entry":[{},"given point, if any."]},{"entry":["ObjectFromPoint(X, Y)","This property returns the UIObject that contains the given"]},{"entry":[{},"point, if any."]},{"entry":["Taskbar","This property returns the taskbar object."]},{"entry":["Foreground","This property returns the active object at the foreground."]},{"entry":["Desktop","This property returns the desktop object."]},{"entry":["LastEvent","This property refers to the Event ID of the last event fired. It"]},{"entry":[{},"is used with Wait and WaitEx."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0344","num":"0404"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Manager Object Methods"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Wait\/WaitEx","This method is used to block a tool user's code until a"]},{"entry":[{},"certain UI element is found."]},{"entry":["FindWindow","This method searches or finds a window-type object by"]},{"entry":[{},"its title only."]},{"entry":["Find","This method finds one or more objects based on flags"]},{"entry":[{},"the tool user passes to it."]},{"entry":["FindEx","This method refers to another, more powerful, find"]},{"entry":[{},"method."]},{"entry":["FromHandle","This method finds an object from hWnd, or hWnd +"]},{"entry":[{},"Control ID."]},{"entry":["CreateSearchData","This method returns a new SerachData object."]},{"entry":["SendKeys","This method sends Keyboard strokes to object with"]},{"entry":["PressKey","focus."]},{"entry":"KeyDown"},{"entry":"KeyUp"},{"entry":["MouseMove","This method sends mouse messages and control mouse"]},{"entry":["MouseDown","movements."]},{"entry":"MouseUp"},{"entry":"MouseClick"},{"entry":"MouseDblClick"},{"entry":["Snapshot","This method returns all objects in the system. This is"]},{"entry":[{},"very slow and should be used only if needed."]},{"entry":["FindApp","This method finds the application's main window-type"]},{"entry":[{},"object given a processedID."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0345","num":"0405"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"UIObject General Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Item","If True (Default), this property will call"]},{"entry":[{},"AttachThreadInput whenever necessary."]},{"entry":["Name","This property refers to a form title or control text."]},{"entry":["Value","This property refers to a window-type object's"]},{"entry":[{},"registered class name."]},{"entry":["ProcessId","This property is True if Form or Control can accept"]},{"entry":[{},"user input."]},{"entry":["ThreadId","This property is True if Control, and False if Form."]},{"entry":["DefaultAction","This property is a Handle to an instance that contains"]},{"entry":[{},"the object."]},{"entry":["Description","This property refers to flags used to find this"]},{"entry":[{},"window-type object and that are applicable to it."]},{"entry":["Help","This property refers to a window-type object's window"]},{"entry":[{},"handle."]},{"entry":["HelpTopic","This property refers to Control ID in case of a child"]},{"entry":[{},"window-type object."]},{"entry":["Left","This property refers to a Left position of the"]},{"entry":[{},"window-type object (client coordinates, relative to"]},{"entry":[{},"parent, for controls)."]},{"entry":["ModuleName","This property refers to the name of the .EXE that"]},{"entry":[{},"contains this object."]},{"entry":["Parent","This property refers to the Parent UIWnd object, if"]},{"entry":[{},"any."]},{"entry":["ProcessId","This property refers to a 32 bit value for Process ID."]},{"entry":["XScreen","This property refers to screen coordinates for the left"]},{"entry":[{},"edge of the object."]},{"entry":["YScreen","This property refers to screen coordinates for the top"]},{"entry":[{},"edge of the object."]},{"entry":["ThreadId","This property refers to a 32 bit value for Thread ID."]},{"entry":["Top","This property refers to a top position of the"]},{"entry":[{},"window-type object (client coordinates, relative to"]},{"entry":[{},"parent, for controls)."]},{"entry":["Visible","This property is True if object is visible."]},{"entry":["Width","This property refers to the width of object in pixels."]},{"entry":["Height","This property refers to the height of object in pixels."]},{"entry":["KeyboardShortcut","(defined above)"]},{"entry":["Role","(defined above)"]},{"entry":["RoleText","(defined above)"]},{"entry":["State","(defined above)"]},{"entry":["StateText","(defined above)"]},{"entry":["ChildCount","(defined above)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0346","num":"0406"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"UIWnd General Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["AutoAttach","If True (Default), then this property will call"]},{"entry":[{},"AttachThreadInput whenever necessary."]},{"entry":["Caption","This property refers to the Form title or control text."]},{"entry":["ClassName","This property refers to a window-type object's"]},{"entry":[{},"registered class name."]},{"entry":["Enabled","This property is True if Form or Control can accept"]},{"entry":[{},"user input."]},{"entry":["FormOrControl","This property is True if Control, False if Form."]},{"entry":["Height","This property refers to the height of the window-type"]},{"entry":[{},"object in pixels."]},{"entry":["hInst","This property refers to the handle to the instance that"]},{"entry":[{},"contains the object."]},{"entry":["HowFound","This property refers to Flags used to find this"]},{"entry":[{},"window-type object and that are applicable to it."]},{"entry":["hWnd","This property refers to window-type object's handle."]},{"entry":["ID","This property refers to the Control ID in case of child"]},{"entry":[{},"window-type object."]},{"entry":["Left","This property refers to the Left position of the"]},{"entry":[{},"window-type object. Client coordinates (relative to"]},{"entry":[{},"parent) for controls."]},{"entry":["ModuleName","This property refers to the name of .EXE that contains"]},{"entry":[{},"this object."]},{"entry":["Parent","This property refers to the parent UIWnd object, if"]},{"entry":[{},"any."]},{"entry":["ProcessId","This property refers to the 32 bit value for Process ID."]},{"entry":["XScreen","This property refers to the screen coordinates for the"]},{"entry":[{},"left edge of the object."]},{"entry":["YScreen","This property refers to the screen coordinates for the"]},{"entry":[{},"top edge of the object."]},{"entry":["ThreadId","This property refers to the 32 bit value for Thread ID."]},{"entry":["Top","This property refers to the top position of the"]},{"entry":[{},"window-type object (client coordinates, relative to"]},{"entry":[{},"parent, for controls)."]},{"entry":["Visible","This property is true if the object is visible."]},{"entry":["Width","This property refers to the width of window-type"]},{"entry":[{},"object in pixels."]},{"entry":["WindowStyle","This property refers to the 32 bit value for"]},{"entry":[{},"window-type object Style."]},{"entry":["WindowStyleEx","This property refers to the 32 bit value for an extended"]},{"entry":[{},"window-type object style."]},{"entry":["WindowType","This property refers to the type of the object. This"]},{"entry":[{},"value can be one of the following:"]},{"entry":[{},"WT_UNKNOWN (unrecognized type)"]},{"entry":[{},"WT_BUTTON;"]},{"entry":[{},"WT_COMBOBOX;"]},{"entry":[{},"WT_LISTBOX;"]},{"entry":[{},"WT_MDICLIENT;"]},{"entry":[{},"WT_RichEdit;"]},{"entry":[{},"WT_RICHEDIT_CLASS;"]},{"entry":[{},"WT_SCROLLBAR;"]},{"entry":[{},"WT_STATIC;"]},{"entry":[{},"WT_MDICHILD;"]},{"entry":[{},"WT_DIALOG; and"]},{"entry":[{},"WT_HTMLWINDOW."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0347","num":"0407"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.5. UIWnd Form Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["ActiveControl","This property returns the control that has the focus."]},{"entry":[{},"When a form is referenced, ActiveControl specifies"]},{"entry":[{},"the control that would have the focus if the"]},{"entry":[{},"referenced form were active."]},{"entry":[{},"Read-only at run time."]},{"entry":["Children","This property returns a UIWnds object if the form"]},{"entry":[{},"has one or more child window-type objects."]},{"entry":["ChildrenFromPoint","This property returns a UIWnds object if the form"]},{"entry":["(x,y)","has one or more child window-type objects"]},{"entry":[{},"containing the given point."]},{"entry":["HasMenu","This property is True if the form has a menu, and it"]},{"entry":[{},"is False if not."]},{"entry":["HasSysMenu","This property is True if the form has a system menu."]},{"entry":["HelpButton","This property is True if the form has a help button."]},{"entry":["MaxButton","This property is True if the form has a maximize"]},{"entry":[{},"button."]},{"entry":["MDIChild","This property is True if the form is an MDI child."]},{"entry":["Menu","This property returns the UIMenu object that"]},{"entry":[{},"represents the form's menu."]},{"entry":["MinButton","This property is True if the form has a minimize"]},{"entry":[{},"button."]},{"entry":["SysMenu","This property returns the UIMenu object that"]},{"entry":[{},"represents the form's system menu."]},{"entry":["TopMost","This property is either true True\/False. According to"]},{"entry":[{},"its value, it sets the form as the top most or just"]},{"entry":[{},"reads the value."]},{"entry":["TopWindow","This property returns a UIWnd object representing"]},{"entry":[{},"the top window-type object if any."]},{"entry":["WindowState","This property returns or sets a value indicating the"]},{"entry":[{},"visual state of a form window-type object, where:"]},{"entry":[{},"0 means Normal;"]},{"entry":[{},"1 Means Minimized; and"]},{"entry":[{},"2 Means Maximized."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0348","num":"0408"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.6. UIWnd TextBox Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["CanUndo","This property is True if the last edit operation can be"]},{"entry":[{},"undone by a call to the Undo member function, and"]},{"entry":[{},"False if it cannot be undone."]},{"entry":["Line(index)","This property returns the requested line inside a multi"]},{"entry":[{},"line edit."]},{"entry":["LineCount","This property returns a number of lines in a multi line"]},{"entry":[{},"edit."]},{"entry":["MaxLength","This property sets a value indicating whether there is a"]},{"entry":[{},"maximum number of characters that can be entered in the"]},{"entry":[{},"TextBox control and, if so, specifies the maximum"]},{"entry":[{},"number of characters that can be entered. Zero means no"]},{"entry":[{},"limit."]},{"entry":["MultiLine","This property returns a value indicating whether a"]},{"entry":[{},"TextBox control can accept and display multiple lines of"]},{"entry":[{},"text."]},{"entry":["PasswordChar","This property returns or sets a value indicating whether"]},{"entry":[{},"the characters typed by a user or placeholder characters"]},{"entry":[{},"are displayed in a TextBox control, and returns or sets"]},{"entry":[{},"the character used as a placeholder."]},{"entry":["ReadOnly","This property is True if tool user cannot change the text"]},{"entry":[{},"inside the TextBox."]},{"entry":["SelectedText","This property returns the selected text if any, inside the"]},{"entry":[{},"TextBox."]},{"entry":["Text","This property returns the text of the TextBox."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0349","num":"0409"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.7. UIWnd ListBox and ComboBox Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["ItemData","This property returns or sets a specific number for each"]},{"entry":[{},"item in a ComboBox or ListBox control."]},{"entry":["List","This property returns or sets the items contained in a"]},{"entry":[{},"control's list portion. The list is a string array in which"]},{"entry":[{},"each element is a list item."]},{"entry":["ListCount","This property returns the number of items in the list"]},{"entry":[{},"portion of a control."]},{"entry":["ListIndex","This property returns or sets the index of the currently"]},{"entry":[{},"selected item in the control."]},{"entry":["MultiSelect","This property returns a value indicating whether a user"]},{"entry":[{},"can make multiple selections in a ListBox control and"]},{"entry":[{},"how the multiple selections can be made."]},{"entry":["SelCount","This property returns the number of selected items in a"]},{"entry":[{},"ListBox control with MultiSelect."]},{"entry":["Selected (index)","This property returns or sets the selection status of an"]},{"entry":[{},"item in a ListBox controls. This property is an array of"]},{"entry":[{},"Boolean values with the same number of items as the"]},{"entry":[{},"List property."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0350","num":"0410"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.8. UIWnd ScrollBar Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Max","This property sets or returns the maximum value of the scroll"]},{"entry":[{},"range for the UpDown control."]},{"entry":["Min","This property sets or returns the minimum value of the scroll"]},{"entry":[{},"range for the UpDown control."]},{"entry":["Value","This property sets or returns the current position of the scroll"]},{"entry":[{},"value."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0351","num":"0411"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.9. UIWnd HTML Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Document","This property returns the HTML document object inside an"]},{"entry":[{},"HTML window-type object."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0352","num":"0412"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.10. UIWnd General Methods"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["AttachInput","This method attaches the input processing mechanism of"]},{"entry":[{},"tool user's script to that of window-type object."]},{"entry":["Click","This method clicks on the window-type object."]},{"entry":["DblClick","This method double clicks on the window-type object."]},{"entry":["MouseClick","This method uses MouseClick on the window-type object."]},{"entry":["MouseDown","This method uses MouseDown on the window-type object."]},{"entry":["MouseMove","This method uses MouseMove on the window-type object."]},{"entry":["MouseUp","This method uses MouseUp on the window-type object."]},{"entry":["Move","This method moves the window-type object from its"]},{"entry":[{},"location."]},{"entry":["Quit","This method quits the application that owns the"]},{"entry":[{},"window-type object."]},{"entry":["Resize","This method resizes the window-type object."]},{"entry":["SendKeys","This method sends one or more keystrokes to window-type"]},{"entry":[{},"object as if typed at the keyboard."]},{"entry":["SetFocus","This method moves the focus to the specified window-type"]},{"entry":[{},"object or control."]},{"entry":["Terminate","This method terminates the application."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0353","num":"0413"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.11. UIWnd Form Methods"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Activate","This method activates a window-type object, and brings it"]},{"entry":[{},"into the foreground."]},{"entry":["CancelMode","This method cancels any opened menus."]},{"entry":["ClickButton","This method clicks on a button by name or id."]},{"entry":["Close","This method closes the form, if possible."]},{"entry":["Destroy","This method destroys the form, if possible."]},{"entry":["GetControl","This method returns a UIWnd for a control given its name"]},{"entry":[{},"or Id."]},{"entry":["GetText","This method returns the text in the form and\/or any of the"]},{"entry":[{},"requested children."]},{"entry":["Hide","This method hides the form."]},{"entry":["Refresh","This method invalidates and repaints the form."]},{"entry":["Show","This method sets the Form's Visible property to True."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0354","num":"0414"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.12. UIWnd TextBox Methods"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["ClearUndo","This method clears the Undo buffer. A subsequent call to"]},{"entry":[{},"Undo will not change the text."]},{"entry":["ScrollCaret","This method scrolls the caret into the view."]},{"entry":["SelectText","This method selects parts or all of text in the TextBox."]},{"entry":"(start, length)"},{"entry":["Undo","This method Undo's the last TextBox operation."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0355","num":"0415"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.13. UIWnd ListBox and ComboBox Methods"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["AddItem item, index","This method adds an item to a ListBox or"]},{"entry":[{},"ComboBox control. If the tool user supplies a valid"]},{"entry":[{},"value for index, item is placed at that position within"]},{"entry":[{},"the object. If index is omitted, item is added at the"]},{"entry":[{},"end of the list."]},{"entry":["Clear","This method removes all items from the list."]},{"entry":["RemoveItem index","This method removes an item from a ListBox or"]},{"entry":[{},"ComboBox."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0356","num":"0416"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.14. UIWnds Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Count","This property refers to the number of UIWnd Items"]},{"entry":[{},"contained in this collection object."]},{"entry":["Item (index)","This property returns UIWnd object given its position."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0357","num":"0417"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.15. UIMenu Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Count","This property refers to the number of UIMenu Items"]},{"entry":[{},"contained in this collection object."]},{"entry":["hMenu","This property refers to the window-type object's handle"]},{"entry":[{},"to the menu."]},{"entry":["Usekeyboard","For this property, if True, then keystrokes will be sent to"]},{"entry":[{},"the menu whenever it is accessed, just as if a user is"]},{"entry":[{},"doing so."]},{"entry":["Click (Caption)","This property clicks on a menu item. Caption refers to"]},{"entry":[{},"the item string with or without ampersand (&)."]},{"entry":["EnterLoop","This property sends WM_ENTERLOOP message to the"]},{"entry":[{},"menu."]},{"entry":["ExitLoop","This property sends WM_EXITLOOP message to the"]},{"entry":[{},"menu."]},{"entry":["Item (Index)","This property returns UIMenu object given its position."]},{"entry":["Reload","This property traverses the menu reading all items in it."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0358","num":"0418"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"A.16. UIMenuItem Properties"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Caption","This property refers to a string representing Menu Item"]},{"entry":[{},"caption."]},{"entry":["Checked","This property is True if Item has a check mark next to it."]},{"entry":["Count","This property refers to the number of menu items, and is"]},{"entry":[{},"Valid only if item is a popup."]},{"entry":["Item (Index)","This property returns UIMenu object given its position."]},{"entry":["Enabled","This property is True if menu item is enabled, and False if"]},{"entry":[{},"disabled and grayed."]},{"entry":["Hmenu","This property refers to the window-type object's handle to"]},{"entry":[{},"the menu."]},{"entry":["ID","This property refers to the menu Item ID."]},{"entry":["IsMenu","This property is True if item is a popup."]},{"entry":["Type","This property refers to the type of the menu item."]},{"entry":["Click","This Property clicks on the item, if possible."]},{"entry":["Hilite","This property Hilites the item."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}}],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","A. Exemplary Apparatus for Implementing an Automation Tool","B. Functionality Provided by the Manipulation Tool (XABLE Tool)","EXAMPLE (a)","EXAMPLE (b)","EXAMPLE (c)","EXAMPLE (d)","EXAMPLE (e)","EXAMPLE (f)","EXAMPLE (g)","EXAMPLE (h)","EXAMPLE (i)","EXAMPLE (j)","EXAMPLE (k)","EXAMPLE (l)","EXAMPLE (m)","EXAMPLE (n)","EXAMPLE (o)","EXAMPLE (p)","EXAMPLE (q)","EXAMPLE (r)","EXAMPLE (a)","EXAMPLE (b)","EXAMPLE (c)","EXAMPLE (a)","EXAMPLE (b)","EXAMPLES (c)","EXAMPLE (a)","EXAMPLE (a)","Enumeration Example","EXAMPLE (b)","C. Conclusion","APPENDIX","XABLE Tool Object Properties and Methods"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 9","FIG. 7"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 10","FIG. 7"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 11","FIG. 7"]}]},"DETDESC":[{},{}]}
